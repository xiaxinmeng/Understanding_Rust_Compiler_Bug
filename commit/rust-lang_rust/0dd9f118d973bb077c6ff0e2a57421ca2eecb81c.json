{"sha": "0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZDlmMTE4ZDk3M2JiMDc3YzZmZjBlMmE1NzQyMWNhMmVlY2I4MWM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-02-13T19:52:25Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-12T23:03:06Z"}, "message": "Show macro name in 'this error originates in macro' message\n\nWhen there are multiple macros in use, it can be difficult to tell\nwhich one was responsible for producing an error.", "tree": {"sha": "02a54f3e5aceaf032fbc32486fd122f47dd40553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a54f3e5aceaf032fbc32486fd122f47dd40553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCcXqsACgkQtAh+UQ6Y\nsWT1NQ/9GFvSjZsJzOxedm3jDgzlhMMOwOntqPUJHYrISiOK/2+97fTW288kEV1v\nY1rGKMkhkOX6O+kfRynjZVKSqUWfPjHba7BR1Ss+tAj5D9iwDPF9tkCzBpnX2SLW\nMKn6fZ68UNE9Q4iieJdmxBYgEHNLxl5nSlvETlnVkfWL+naX6TYBpF2y9H/ofeeq\n+QIb9VkLkXt0KQQFSn9gscqkHwNPVJgHFof+5ExlrNF9w9vQLQTvKwfN8gr1EftS\nJ10qsU5KRzuBHcBO5OOps7Ve5CKm+E4w2DjP/cLHlJaDoJee1F2/z7yovf0jMBYr\nnNP03cenKWELl4yIy1XgwH6nC/zHnRpc+zdagHMlVTV1fEluSLXJGt12duny5owg\nIyMzd/ufe1vI3NTpINzApAU4n+1yFltO9zJu3KruUOlE70kEvjClK9YmfDV41pLm\n2U22wG4kkDuT4w0ijOK94fEuD4D8cDrHB/rtng2KqUf1iwWFPtcyD907c3kGu7rY\nztmnldxvqUJo2bVQlRIkRFIpUwUUHpp3yM7515rA7UhrgxhQQQi7x13vnDd55jYu\nXzXA6pQjntVDC5ubZvFTfiqIce3ykc1Ke4rcqtRji0EKsmaE6EEUMTHsFFWbg4tA\nSHsaiwzHJ5vu2DW1O/QyupfI5Y1B1o/3pokuhYl7B6X1r9Cfiyg=\n=u9tj\n-----END PGP SIGNATURE-----", "payload": "tree 02a54f3e5aceaf032fbc32486fd122f47dd40553\nparent 70e52caed91a43fc01867921e67fcd3478056edd\nauthor Aaron Hill <aa1ronham@gmail.com> 1613245945 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1620860586 -0400\n\nShow macro name in 'this error originates in macro' message\n\nWhen there are multiple macros in use, it can be difficult to tell\nwhich one was responsible for producing an error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "html_url": "https://github.com/rust-lang/rust/commit/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e52caed91a43fc01867921e67fcd3478056edd", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e52caed91a43fc01867921e67fcd3478056edd", "html_url": "https://github.com/rust-lang/rust/commit/70e52caed91a43fc01867921e67fcd3478056edd"}], "stats": {"total": 1488, "additions": 744, "deletions": 744}, "files": [{"sha": "d3f92bf3047b06a5db22f290b400c1753103e59b", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -309,8 +309,8 @@ pub trait Emitter {\n                     // are some which do actually involve macros.\n                     ExpnKind::Inlined | ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n \n-                    ExpnKind::Macro { kind: macro_kind, name: _, proc_macro: _ } => {\n-                        Some(macro_kind)\n+                    ExpnKind::Macro { kind: macro_kind, name, proc_macro: _ } => {\n+                        Some((macro_kind, name))\n                     }\n                 }\n             });\n@@ -322,13 +322,12 @@ pub trait Emitter {\n         self.render_multispans_macro_backtrace(span, children, backtrace);\n \n         if !backtrace {\n-            if let Some(macro_kind) = has_macro_spans {\n+            if let Some((macro_kind, name)) = has_macro_spans {\n+                let descr = macro_kind.descr();\n+\n                 let msg = format!(\n-                    \"this {} originates in {} {} \\\n+                    \"this {level} originates in the {descr} `{name}` \\\n                     (in Nightly builds, run with -Z macro-backtrace for more info)\",\n-                    level,\n-                    macro_kind.article(),\n-                    macro_kind.descr(),\n                 );\n \n                 children.push(SubDiagnostic {"}, {"sha": "f53ce7ceace134a239c6bd3ef5c48210b714ea85", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,6 +6,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n #![feature(extended_key_value_attributes)]\n+#![feature(format_args_capture)]\n #![feature(iter_zip)]\n #![feature(nll)]\n "}, {"sha": "af83b9b1955464de3f8b76362203680f8c44ec24", "filename": "src/test/rustdoc-ui/intra-doc/warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fwarning.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -96,7 +96,7 @@ LL | f!(\"Foo\\nbar [BarF] bar\\nbaz\");\n                 ^^^^\n    = note: no item named `BarF` in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unresolved link to `error`\n   --> $DIR/warning.rs:58:30"}, {"sha": "212f63f709ec551b489ba74502b19631ae48abf9", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -42,7 +42,7 @@ LL | #[derive(HashStable)]\n    |\n    = note: see issue #27812 <https://github.com/rust-lang/rust/issues/27812> for more information\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `HashStable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "66f37f1a3432a488d80cf3183476564d7d3dd902", "filename": "src/test/ui-fulldeps/internal-lints/lint_pass_impl_without_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Flint_pass_impl_without_macro.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -21,7 +21,7 @@ LL | custom_lint_pass_macro!();\n    | -------------------------- in this macro invocation\n    |\n    = help: try using `declare_lint_pass!` or `impl_lint_pass!` instead\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `custom_lint_pass_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c6c3765b80df0474a5a5db9f649a75d93853b7e7", "filename": "src/test/ui-fulldeps/session-derive-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -62,7 +62,7 @@ LL | #[message = \"This is missing a closing brace: {name\"]\n    | ^ expected `'}'` in format string\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/session-derive-errors.rs:119:1\n@@ -71,7 +71,7 @@ LL | #[message = \"This is missing an opening brace: name}\"]\n    | ^ unmatched `}` in format string\n    |\n    = note: if you intended to print `}`, you can escape it using `}}`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `SessionDiagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: The `#[label = ...]` attribute can only be applied to fields of type Span\n   --> $DIR/session-derive-errors.rs:138:5"}, {"sha": "0851e1a5e9cf7b739f59a6973cc372463b796c6d", "filename": "src/test/ui/allocator/not-an-allocator.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fnot-an-allocator.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc`\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -14,7 +14,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::dealloc`\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -23,7 +23,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::realloc`\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `usize: GlobalAlloc` is not satisfied\n   --> $DIR/not-an-allocator.rs:2:1\n@@ -32,7 +32,7 @@ LL | static A: usize = 0;\n    | ^^^^^^^^^^^^^^^^^^^^ the trait `GlobalAlloc` is not implemented for `usize`\n    |\n    = note: required by `std::alloc::GlobalAlloc::alloc_zeroed`\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "dbf1054f1068cfb394b5c27255b2a6eee88d905d", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL | #[global_allocator]\n LL | static B: System = System;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot define a new global allocator\n    |\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `global_allocator` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5de8d20547e3e3035970f59a49124b48182f9049", "filename": "src/test/ui/asm/interpolated-idents.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL | |        pure nomem readonly preserves_flags\n LL | |        noreturn nostack att_syntax options);\n    | |____________________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: the `pure` and `noreturn` options are mutually exclusive\n   --> $DIR/interpolated-idents.rs:13:13\n@@ -22,7 +22,7 @@ LL | |        pure nomem readonly preserves_flags\n LL | |        noreturn nostack att_syntax options);\n    | |____________________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm outputs are not allowed with the `noreturn` option\n   --> $DIR/interpolated-idents.rs:10:32\n@@ -45,7 +45,7 @@ LL | |        noreturn nostack att_syntax options);\n    | |____________________________________________in this macro invocation\n    |                                              in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9a82da8d90d3c1179eb48d6a244204e2fb31613d", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -233,7 +233,7 @@ LL |     llvm_asm!(\"\");\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #32408 <https://github.com/rust-lang/rust/issues/32408>\n    = help: use the new asm! syntax specified in RFC 2873\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: naked functions must contain a single asm block\n   --> $DIR/naked-functions.rs:108:1"}, {"sha": "74918e1c400706beb422acb30a27c15980efac25", "filename": "src/test/ui/asm/parse-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -154,15 +154,15 @@ error: asm template must be a string literal\n LL |         asm!(format!(\"{{{}}}\", 0), in(reg) foo);\n    |              ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n   --> $DIR/parse-error.rs:62:21\n    |\n LL |         asm!(\"{1}\", format!(\"{{{}}}\", 0), in(reg) foo, out(reg) bar);\n    |                     ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/parse-error.rs:37:37"}, {"sha": "c152560a64fca180808064ad5dadae72b2095b5c", "filename": "src/test/ui/asm/type-check-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -27,7 +27,7 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n   --> $DIR/type-check-2.rs:70:28"}, {"sha": "984a8713c991ad0441d855ab99037df21f0c1e32", "filename": "src/test/ui/associated-consts/defaults-not-assumed-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fdefaults-not-assumed-fail.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -24,7 +24,7 @@ LL |     assert_eq!(<() as Tr>::B, 0);    // causes the error above\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "495c5f6bf2cb1d114e85afb25a926fa6e86f8e1c", "filename": "src/test/ui/async-await/issue-73541-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-73541-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ LL |                 b!();\n    |                 ----- in this macro invocation\n    |\n    = note: labels are unreachable through functions, closures, async blocks and modules\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "31e93ef54f26034ffdf2a558bbcc403c47fd4177", "filename": "src/test/ui/attributes/key-value-expansion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL |         bug!(\"bug\" + stringify!(found));\n LL | bug!();\n    | ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `bug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `{\n     let res =\n@@ -33,7 +33,7 @@ LL |         doc_comment! {format!(\"{coor}\", coor = stringify!($t1)).as_str()}\n LL | some_macro!(u8);\n    | ---------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `some_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4124f8cea8ebfe0a588114e5f446cfdb2596f387", "filename": "src/test/ui/attributes/nonterminal-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fnonterminal-expansion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         #[repr(align($n))]\n LL | pass_nonterminal!(n!());\n    | ------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pass_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fa967ccb9d096167c49afb3e6ad6cf2a27759e9f", "filename": "src/test/ui/binop/issue-77910-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-77910-1.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     assert_eq!(foo, y);\n    |     for<'r> fn(&'r i32) -> &'r i32 {foo}\n    |     _\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `for<'r> fn(&'r i32) -> &'r i32 {foo}` doesn't implement `Debug`\n   --> $DIR/issue-77910-1.rs:8:5\n@@ -21,7 +21,7 @@ LL |     T: fmt::Debug + ?Sized,\n    |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `for<'r> fn(&'r i32) -> &'r i32 {foo}`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a6af129bf39f1191315b1ec0e6206fbda31fa7ac", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |     x.x[0];\n    |     ------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "da3412f112d7a9e4f064966d13fca062920bf222", "filename": "src/test/ui/borrowck/issue-25793.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fissue-25793.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fissue-25793.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-25793.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ LL |         r.get_size(width!(self))\n    |           |\n    |           borrow later used by call\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `width` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bd8270ef958cb00c7c7ec92742841d0094bd1723", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,15 +10,15 @@ error[E0015]: calls in statics are limited to constant functions, tuple structs\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-64453.rs:4:31\n    |\n LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "7821dc02bde3c45528ca1a993d00e4890cd85607", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -12,7 +12,7 @@ LL |         let a = $c;\n LL | sss!();\n    | ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `aaa` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a3177903162aa70394d929157a6d8c3351ecf845", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"{:?}\", t);\n    |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_impl(t: impl Sized + std::fmt::Debug) {\n@@ -18,7 +18,7 @@ LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n@@ -31,7 +31,7 @@ LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n@@ -44,7 +44,7 @@ LL |     println!(\"{:?} {:?}\", x, y);\n    |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n    |\n LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n@@ -57,7 +57,7 @@ LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n@@ -70,7 +70,7 @@ LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `X`\n    |\n LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {"}, {"sha": "30013a658f13d3604cb8c6d119ca772d07ae272e", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected `,`, found `1`\n   --> $DIR/bad-format-args.rs:3:16"}, {"sha": "fc902a2b6dbf3accab41fe28d730c1540d06f024", "filename": "src/test/ui/codemap_tests/issue-28308.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-28308.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0600]: cannot apply unary operator `!` to type `&'static str`\n LL |     assert!(\"foo\");\n    |     ^^^^^^^^^^^^^^^ cannot apply unary operator `!`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bbcab9690a9c1cad8e045924290f504e9170b3b9", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -61,7 +61,7 @@ LL |         #[cfg(feature = $expr)]\n LL | generate_s10!(concat!(\"nonexistent\"));\n    | -------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_s10` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected unsuffixed literal or identifier, found `concat!(\"nonexistent\")`\n   --> $DIR/cfg-attr-syntax-validation.rs:30:25\n@@ -72,7 +72,7 @@ LL |         #[cfg(feature = $expr)]\n LL | generate_s10!(concat!(\"nonexistent\"));\n    | -------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_s10` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 11 previous errors\n "}, {"sha": "a662f6803347aa342300d620d6f946f5aae7d4f2", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         #[cfg_attr(all(), unknown)]\n LL | foo!();\n    | ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ef6e857838a2858a18d14942e7af202cb06f36b8", "filename": "src/test/ui/const-generics/macro_rules-braces.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmacro_rules-braces.full.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -30,7 +30,7 @@ LL |     let _: foo!({{ N }});\n    |            ------------- in this macro invocation\n    |\n    = note: this may fail depending on what value the parameter takes\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n   --> $DIR/macro_rules-braces.rs:20:13\n@@ -42,7 +42,7 @@ LL |     let _: bar!({ N });\n    |            ----------- in this macro invocation\n    |\n    = note: this may fail depending on what value the parameter takes\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n   --> $DIR/macro_rules-braces.rs:25:13\n@@ -54,7 +54,7 @@ LL |     let _: baz!({{ N }});\n    |            ------------- in this macro invocation\n    |\n    = note: this may fail depending on what value the parameter takes\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `baz` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: constant expression depends on a generic parameter\n   --> $DIR/macro_rules-braces.rs:30:13\n@@ -66,7 +66,7 @@ LL |     let _: biz!({ N });\n    |            ----------- in this macro invocation\n    |\n    = note: this may fail depending on what value the parameter takes\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `biz` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d5dd70d9b489cf98bebf5d9a67f4ca2637e3cb6a", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | fn make_marker() -> impl Marker<gimme_a_const!(marker)> {\n LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gimme_a_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected type, found `{`\n   --> $DIR/macro-fail.rs:29:27\n@@ -24,7 +24,7 @@ LL |   Example::<gimme_a_const!(marker)>\n LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gimme_a_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected type, found `{`\n   --> $DIR/macro-fail.rs:4:10\n@@ -43,7 +43,7 @@ LL |     let _fail = Example::<external_macro!()>;\n    |                           this macro call doesn't expand to a type\n    |                           in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `external_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-fail.rs:39:25"}, {"sha": "5637de8b3139cff1de98a8bea386d28b222cd970", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL | const Z: () = std::panic!(\"cheese\");\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:11:16\n@@ -21,7 +21,7 @@ LL | const Z2: () = std::panic!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:15:15\n@@ -33,7 +33,7 @@ LL | const Y: () = std::unreachable!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:19:15\n@@ -45,7 +45,7 @@ LL | const X: () = std::unimplemented!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:23:15\n@@ -57,7 +57,7 @@ LL | const W: () = std::panic!(MSG);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:27:20\n@@ -69,7 +69,7 @@ LL | const Z_CORE: () = core::panic!(\"cheese\");\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:31:21\n@@ -81,7 +81,7 @@ LL | const Z2_CORE: () = core::panic!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:35:20\n@@ -93,7 +93,7 @@ LL | const Y_CORE: () = core::unreachable!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:39:20\n@@ -105,7 +105,7 @@ LL | const X_CORE: () = core::unimplemented!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic.rs:43:20\n@@ -117,7 +117,7 @@ LL | const W_CORE: () = core::panic!(MSG);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "9971559e33b00d7f070b322c7a8a81f12ba6f519", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL | const Z: () = panic!(\"cheese\");\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_bin.rs:13:15\n@@ -21,7 +21,7 @@ LL | const Y: () = unreachable!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_bin.rs:17:15\n@@ -33,7 +33,7 @@ LL | const X: () = unimplemented!();\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8d8e94cd4ff8af1d142a7ff223ae99f734d1c1a6", "filename": "src/test/ui/consts/const-eval/feature-gate-const_panic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_panic.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | const Z: () = panic!(\"cheese\");\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:6:15\n@@ -16,7 +16,7 @@ LL | const Y: () = unreachable!();\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/feature-gate-const_panic.rs:9:15\n@@ -26,7 +26,7 @@ LL | const X: () = unimplemented!();\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d1f067df84888d8c2a0853b0bbef9c25e4bb1324", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-assoc-never-type.rs:17:13"}, {"sha": "2217bf1e05a00ed4409f0e0c56890a67a4272f59", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-never-type.rs:13:13"}, {"sha": "79fdd05be30ee764224685eaee36006eacdadbeb", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -14,7 +14,7 @@ LL | const _: () = foo();\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "108d976ec6dbef84a11ec2d1a283a645f5386316", "filename": "src/test/ui/consts/const-external-macro-const-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-external-macro-const-err.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     static_assert!(2 + 2 == 5);\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `static_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0100dce5a96a503c6b81c680953d89f7805059f5", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -16,7 +16,7 @@ LL | const BAR: i32 = Option::<i32>::None.unwrap();\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fc7a53e2774866e9933c182254084b7783296b3a", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -37,7 +37,7 @@ LL |   assert_eq!(BAR, true);\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "665b42400110589677a72b481a3b6ac72483d673", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL | const _: () = assert!(false);\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0caaeca4ad23f128576fedbe22b1d38df6fbad30", "filename": "src/test/ui/consts/control-flow/assert.stock.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.stock.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | const _: () = assert!(true);\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: panicking in constants is unstable\n   --> $DIR/assert.rs:10:15\n@@ -16,7 +16,7 @@ LL | const _: () = assert!(false);\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b6e73f889adaba6bd945ed9bb6663ecf6458ece2", "filename": "src/test/ui/consts/control-flow/issue-50577.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fissue-50577.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |         Drop = assert_eq!(1, 1),\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2f97582bea88774b9f9fd5cb0c8e93e7a59e7c09", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | |     B = T,\n LL | | }\n    | |_- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/enum-discr-type-err.rs:18:21\n@@ -24,7 +24,7 @@ LL | |     B = T,\n LL | | }\n    | |_- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7904a35a5724bee71358e4db00bb6cf653a47ec5", "filename": "src/test/ui/consts/inline_asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finline_asm.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0015]: inline assembly is not allowed in constants\n LL | const _: () = unsafe { llvm_asm!(\"nop\") };\n    |                        ^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "eba15e3fcca8afca43ab1008fa0f0ecf543d23e7", "filename": "src/test/ui/consts/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2dd445b434b58017d6f5689f459fdf5baeeb4127", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,15 +4,15 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL |     let _ = [0i32; panic!(2f32)];\n    |                    ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-66693-panic-in-array-len.rs:12:21\n    |\n LL |     let _ = [false; panic!()];\n    |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:12:21\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "50c95c89e0b79485f1e770c344ca98b7fddcb20d", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,23 +4,23 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL |     panic!(&1);\n    |     ^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:6:15\n    |\n LL | const _: () = panic!(1);\n    |               ^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:9:19\n    |\n LL | static _FOO: () = panic!(true);\n    |                   ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "875bc5c5cd3300056b0f89895da977b40e8db528", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | struct Bug([u8; panic!(\"panic\")]);\n    |\n    = note: see issue #51999 <https://github.com/rust-lang/rust/issues/51999> for more information\n    = help: add `#![feature(const_panic)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fee43864e20dcf9d12d30acc9248bffc523b257d", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,15 +4,15 @@ error[E0010]: allocations are not allowed in constant functions\n LL |     vec![1, 2, 3]\n    |     ^^^^^^^^^^^^^ allocation not allowed in constant functions\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/bad_const_fn_body_ice.rs:2:5\n    |\n LL |     vec![1, 2, 3]\n    |     ^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fa93085dd2b1d6b5269acb891b0d0efe8fffd05d", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -177,7 +177,7 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors; 3 warnings emitted\n "}, {"sha": "8a54d4a313f2d3c7b4056a8c6ef72754da8f32a1", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -177,7 +177,7 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors; 3 warnings emitted\n "}, {"sha": "0bd95909c435c7715aeb4b5a1950732644c74594", "filename": "src/test/ui/consts/miri_unleashed/inline_asm.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Finline_asm.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL |     unsafe { llvm_asm!(\"xor %eax, %eax\" ::: \"eax\"); }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ inline assembly is not supported\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/inline_asm.rs:19:14\n@@ -24,7 +24,7 @@ help: skipping check that does not even have a feature gate\n    |\n LL |     unsafe { asm!(\"nop\"); }\n    |              ^^^^^^^^^^^^\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "9ebffbfb71a532d801b9c915ba173726b874d683", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4f015bf2148beb45179c980024b6706238f8b9cc", "filename": "src/test/ui/cross/cross-file-errors/main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-file-errors%2Fmain.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ LL |     underscore!();\n    |\n    = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n    = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `underscore` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: in expressions, `_` can only be used on the left-hand side of an assignment\n   --> $DIR/underscore.rs:8:9\n@@ -24,7 +24,7 @@ LL |         _\n LL |     underscore!();\n    |     -------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `underscore` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8967a7c6d33c7cd55cf8eb66ed34e82fa9be34b6", "filename": "src/test/ui/custom_test_frameworks/mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom_test_frameworks%2Fmismatch.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL | fn wrong_kind(){}\n    | ^^^^^^^^^^^^^^^^^ the trait `Testable` is not implemented for `TestDescAndFn`\n    |\n    = note: required for the cast to the object type `dyn Testable`\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "63da838b3c3d31a7d7b9ad677cb3c0041487f3a5", "filename": "src/test/ui/deprecation/deprecation-lint-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `macro_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c33ad1519bcc5ca4f6465682b9e7f9eb693574da", "filename": "src/test/ui/deprecation/deprecation-lint-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint-3.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `macro_test_arg_nested` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b3f7b042aacd80e28041b431d3ef9b9dfa08db95", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -43,15 +43,15 @@ LL |     ($x:expr) => { &$x }\n LL |     foo3(borrow!(0));\n    |          ---------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `borrow` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:39:17"}, {"sha": "3d62bd8e8e7918d9fc52cc1a89c68fb8d410a679", "filename": "src/test/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: required by `clone`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c855ec8e99327abb0d1311cb6311e5357a0924ac", "filename": "src/test/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: required by `clone`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "522ec9719ed41ca9277205fa21c34345aa5f58ce", "filename": "src/test/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: required by `clone`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b1f3e72f0d5634111daecb82bf8516adb1ab90c5", "filename": "src/test/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `Clone` is not implemented for `Error`\n    |\n    = note: required by `clone`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2151335992fbcac3212f2146c0b39e9a47145e83", "filename": "src/test/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |      x: Error\n    = note: add `#[derive(Debug)]` or manually implement `Debug`\n    = note: required because of the requirements on the impl of `Debug` for `&Error`\n    = note: required for the cast to the object type `dyn Debug`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "99e618b40ece2c636ad18969859d665eee388de2", "filename": "src/test/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |      Error\n    = note: add `#[derive(Debug)]` or manually implement `Debug`\n    = note: required because of the requirements on the impl of `Debug` for `&Error`\n    = note: required for the cast to the object type `dyn Debug`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0086642c557cc9a38c97aaad27f26865f8078237", "filename": "src/test/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     x: Error\n    = note: add `#[derive(Debug)]` or manually implement `Debug`\n    = note: required because of the requirements on the impl of `Debug` for `&Error`\n    = note: required for the cast to the object type `dyn Debug`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0b74908d1ee446b0b1aaab665e6267a12d362ebe", "filename": "src/test/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     Error\n    = note: add `#[derive(Debug)]` or manually implement `Debug`\n    = note: required because of the requirements on the impl of `Debug` for `&Error`\n    = note: required for the cast to the object type `dyn Debug`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b4cf1119eeb8ab752801cce4e2309e0c927bf1b8", "filename": "src/test/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: required by `std::default::Default::default`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "62661a659be58c1fbdcf4654bb33870e710f3635", "filename": "src/test/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `Default` is not implemented for `Error`\n    |\n    = note: required by `std::default::Default::default`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b14f2f8f0735c713338bb3e74a270e89c53f472d", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |      x: Error\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               -- required by this bound in `AssertParamIsEq`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ed7e6936f56c51ddd5ff5777f784c2e52ee7ff77", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |      Error\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               -- required by this bound in `AssertParamIsEq`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ec26c5617210781834e76e3bfd35340f0757cf10", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |     x: Error\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               -- required by this bound in `AssertParamIsEq`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a41acfbf5b515cda3349f66bc7afb894a084c2f1", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |     Error\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n    |                               -- required by this bound in `AssertParamIsEq`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fef7b8f75ac6f0bb69a6c2e595e4ffa455c238ed", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |      x: Error\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "90c5f91af919df7134f22947b08f8f9554974d86", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |      Error\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b48828f439e1fcd306276021213a2e233ae9b6c1", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |     x: Error\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "3db0299192f05a5a988b706fd70ee8d8a92f120f", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |     Error\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9f77122286ab66fce00fdb08409330d4dfb1dfe7", "filename": "src/test/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f5d2dd3daefb2e6b4f1dda5666cef0d9c468bef6", "filename": "src/test/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |      Error\n    |      ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7a61ca483127910ee5f1748ce2143d65fd76bdcd", "filename": "src/test/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cd67d9ce98e09fa4b759f52085228a9a7021eee0", "filename": "src/test/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     Error\n    |     ^^^^^ the trait `Ord` is not implemented for `Error`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "a579d695700d4286924395298c91582dbc313e24", "filename": "src/test/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |      x: Error\n    |      ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum-struct-variant.rs:9:6\n@@ -14,7 +14,7 @@ LL |      x: Error\n    |      ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "532430729c7cf3463ed05caa63d0a725778e0c90", "filename": "src/test/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |      Error\n    |      ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-enum.rs:9:6\n@@ -14,7 +14,7 @@ LL |      Error\n    |      ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5fec402dcd8565dde5625a2df0955fa8dc16f20d", "filename": "src/test/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     x: Error\n    |     ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-struct.rs:8:5\n@@ -14,7 +14,7 @@ LL |     x: Error\n    |     ^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0a7f9e14859ae94e91c5e9f8ebc615ac4837ed2a", "filename": "src/test/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     Error\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `Error`\n   --> $DIR/derives-span-PartialEq-tuple-struct.rs:8:5\n@@ -14,7 +14,7 @@ LL |     Error\n    |     ^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `Error`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d84b1217b7a371ae3bbc8140d06e177be433baa", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |      x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ce12727989df8ad60007a7171a52663f9e868c08", "filename": "src/test/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |      Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fc488e734f752821819bb09830b44725a3b6406c", "filename": "src/test/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |     x: Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e18b039f21f26f7ef5c39fed4f627888b6c11cee", "filename": "src/test/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |     Error\n    |\n    = help: the trait `PartialOrd` is not implemented for `Error`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0f69f94bf3a2a0d8402451b190a0cc76917ebdab", "filename": "src/test/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0369]: binary operation `!=` cannot be applied to type `NoCloneOrEq`\n   --> $DIR/deriving-no-inner-impl-error-message.rs:5:5\n@@ -14,7 +14,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^\n    |\n    = note: an implementation of `std::cmp::PartialEq` might be missing for `NoCloneOrEq`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `NoCloneOrEq: Clone` is not satisfied\n   --> $DIR/deriving-no-inner-impl-error-message.rs:10:5\n@@ -23,7 +23,7 @@ LL |     x: NoCloneOrEq\n    |     ^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NoCloneOrEq`\n    |\n    = note: required by `clone`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "667f82ee0cfef2fc72598204551dc027622440cf", "filename": "src/test/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ LL | #![deny(unaligned_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct with type or const parameters (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:8:23\n@@ -21,7 +21,7 @@ LL | #[derive(Copy, Clone, PartialEq, Eq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:16:10\n@@ -31,7 +31,7 @@ LL | #[derive(PartialEq, Eq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `#[derive]` can't be used on a `#[repr(packed)]` struct that does not derive Copy (error E0133)\n   --> $DIR/deriving-with-repr-packed.rs:25:10\n@@ -41,7 +41,7 @@ LL | #[derive(PartialEq)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "fd29f8940bb153c1eaec4b4ed5e967c745d35dc3", "filename": "src/test/ui/did_you_mean/bad-assoc-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-expr.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -55,7 +55,7 @@ LL |     ($ty: ty) => ($ty::clone(&0))\n LL |     expr!(u8);\n    |     ---------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "19d173f1b423c14b2675b2d7f11150e824ea87a9", "filename": "src/test/ui/did_you_mean/bad-assoc-pat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-pat.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -37,7 +37,7 @@ LL |     ($ty: ty) => ($ty::AssocItem)\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no associated item named `AssocItem` found for slice `[u8]` in the current scope\n   --> $DIR/bad-assoc-pat.rs:3:15\n@@ -72,7 +72,7 @@ LL |     ($ty: ty) => ($ty::AssocItem)\n LL |         pat!(u8) => {}\n    |         -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no associated item named `AssocItem` found for type `u8` in the current scope\n   --> $DIR/bad-assoc-pat.rs:32:16"}, {"sha": "fc5f218c04f1380e0a9101f67fea0df01360c301", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -55,7 +55,7 @@ LL |     ($ty: ty) => ($ty::AssocTy);\n LL | type J = ty!(u8);\n    |          ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ty` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:1:10\n@@ -114,7 +114,7 @@ LL |     ($ty: ty) => ($ty::AssocTy);\n LL | type J = ty!(u8);\n    |          ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ty` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:44:10"}, {"sha": "0c6fdebd5095518b2067a76b27b2a8c390c335f6", "filename": "src/test/ui/did_you_mean/recursion_limit_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_macro.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     recurse!(0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9);\n    |     -------------------------------------------------- in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"20\"]` attribute to your crate (`recursion_limit_macro`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `recurse` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e1bba8b527e767415af5cb5505f7c27a136215bc", "filename": "src/test/ui/directory_ownership/macro-expanded-mod.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmacro-expanded-mod.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         mod $i;\n LL |     mod_decl!(foo);\n    |     --------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mod_decl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b6df4cacf3981b5610c4d88ddd4d37c961f05edc", "filename": "src/test/ui/dollar-crate/dollar-crate-is-keyword-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         use a::$crate::b;\n LL | m!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0432]: unresolved import `a::$crate`\n   --> $DIR/dollar-crate-is-keyword-2.rs:5:13\n@@ -18,7 +18,7 @@ LL |         use a::$crate;\n LL | m!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: `$crate` in paths can only be used in start position\n   --> $DIR/dollar-crate-is-keyword-2.rs:7:21\n@@ -29,7 +29,7 @@ LL |         type A = a::$crate;\n LL | m!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8e32be897649e829564c4cf25522c47c4c77b8c4", "filename": "src/test/ui/dollar-crate/dollar-crate-is-keyword.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdollar-crate%2Fdollar-crate-is-keyword.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |             struct $crate {}\n LL | m!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found reserved identifier `$crate`\n   --> $DIR/dollar-crate-is-keyword.rs:10:23\n@@ -18,7 +18,7 @@ LL |         use $crate as $crate;\n LL | m!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$crate` may not be imported\n   --> $DIR/dollar-crate-is-keyword.rs:9:9\n@@ -29,7 +29,7 @@ LL |         use $crate;\n LL | m!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$crate` may not be imported\n   --> $DIR/dollar-crate-is-keyword.rs:10:9\n@@ -40,7 +40,7 @@ LL |         use $crate as $crate;\n LL | m!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "2b4eb815b7172cbe96d771b1f8177bb8c66da39b", "filename": "src/test/ui/editions/edition-imports-2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2015.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_glob` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1a304ebe9ad2766ed0809b03874cfe20d51f9eaf", "filename": "src/test/ui/editions/edition-imports-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: cannot glob-import all possible crates\n LL |     gen_glob!();\n    |     ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_glob` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9ca7514d3aa08676b835ceec26add14145347406", "filename": "src/test/ui/editions/edition-imports-virtual-2015-gated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-gated.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0432]: unresolved import `E`\n LL |     gen_gated!();\n    |     ^^^^^^^^^^^^^ could not find `E` in the list of imported crates\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gated` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "22f28a67798f53354bcc767c700a810faac64228", "filename": "src/test/ui/editions/edition-keywords-2015-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-expansion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `produces_async` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     () => (pub fn r#async() {})"}, {"sha": "2a1e7bb4afafd0a4fe80675d19df956cd8ed72f3", "filename": "src/test/ui/editions/edition-keywords-2018-2018-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-expansion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: expected identifier, found keyword `async`\n LL |     produces_async! {}\n    |     ^^^^^^^^^^^^^^^^^^ expected identifier, found keyword\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `produces_async` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can escape reserved keywords to use them as identifiers\n    |\n LL |     () => (pub fn r#async() {})"}, {"sha": "5bfeaa58bdf1432eaf654fa6ac901678224433ad", "filename": "src/test/ui/error-codes/E0184.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0184.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n LL | #[derive(Copy)]\n    |          ^^^^ Copy not allowed on types with destructors\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bb8b3906ca6b0d625f6e99cf9cabf1fb9d808b44", "filename": "src/test/ui/error-codes/E0665.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0665.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0665]: `Default` cannot be derived for enums, only structs\n LL | #[derive(Default)]\n    |          ^^^^^^^\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "36ee6570e42cd8a363c5a055878e5102476865c3", "filename": "src/test/ui/exclusive-drop-and-copy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexclusive-drop-and-copy.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,15 +4,15 @@ error[E0184]: the trait `Copy` may not be implemented for this type; the type ha\n LL | #[derive(Copy, Clone)]\n    |          ^^^^ Copy not allowed on types with destructors\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0184]: the trait `Copy` may not be implemented for this type; the type has a destructor\n   --> $DIR/exclusive-drop-and-copy.rs:10:10\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^ Copy not allowed on types with destructors\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bcc3f536c40d5a2578b518591d1d03dc6e84b47c", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -12,7 +12,7 @@ LL | |     });\n    = note: `#[warn(irrefutable_let_patterns)]` on by default\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:6:13\n@@ -27,7 +27,7 @@ LL | |     });\n    |\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:26:5"}, {"sha": "c81518010bb2974997392e6724ce9b3d090f5c1d", "filename": "src/test/ui/extenv/extenv-not-defined-custom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fextenv%2Fextenv-not-defined-custom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fextenv%2Fextenv-not-defined-custom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fextenv-not-defined-custom.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: my error message\n LL | fn main() { env!(\"__HOPEFULLY_NOT_DEFINED__\", \"my error message\"); }\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8ecba6dbe9af19a6b43a9e163d0d8dadc65f6450", "filename": "src/test/ui/extenv/extenv-not-defined-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fextenv%2Fextenv-not-defined-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fextenv%2Fextenv-not-defined-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fextenv-not-defined-default.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: environment variable `__HOPEFULLY_NOT_DEFINED__` not defined\n LL |     env!(\"__HOPEFULLY_NOT_DEFINED__\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d2ac0b83016f287d86243d8e62901e298ea88987", "filename": "src/test/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: environment variable `NON_EXISTENT` not defined\n LL |     include!(concat!(env!(\"NON_EXISTENT\"), \"/data.rs\"));\n    |                      ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: suffixes on a string literal are invalid\n   --> $DIR/issue-55897.rs:16:22"}, {"sha": "f1becfb99a8cb4f13f103f54c27bbe9296ac0d14", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unsafe-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unsafe-nested-macro.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | bar!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unsafe)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "91cf2020a49f0df4be34ebb82868dc9454c24454", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-nested-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-nested-macro.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | bar!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5e6dcd5447efaf45809364bda20c7715bce5ad29", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ error[E0425]: cannot find value `ab` in this scope\n LL |     concat_idents!(a, b);\n    |     ^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat_idents` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eac2100560a95777f87e56792133b7dc4406d64f", "filename": "src/test/ui/feature-gates/thread-local-const-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | thread_local!(static X: u32 = const { 0 });\n    |\n    = note: see issue #84223 <https://github.com/rust-lang/rust/issues/84223> for more information\n    = help: add `#![feature(thread_local_const_init)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e934bfcccf540a0cc7a0719a5ee9f05df18e5bf1", "filename": "src/test/ui/feature-gates/trace_macros-gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffeature-gates%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ftrace_macros-gate.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -42,7 +42,7 @@ LL |     expando!(true);\n    |\n    = note: see issue #29598 <https://github.com/rust-lang/rust/issues/29598> for more information\n    = help: add `#![feature(trace_macros)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `expando` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "33cd89ad5a7aa244a7a3683fa558a78a82727543", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |     format!(concat!(\"{foo}\"));\n    |\n    = note: did you intend to capture a variable `foo` from the surrounding scope?\n    = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: there is no argument named `bar`\n   --> $DIR/format-args-capture-macro-hygiene.rs:5:13\n@@ -16,7 +16,7 @@ LL |     format!(concat!(\"{ba\", \"r} {}\"), 1);\n    |\n    = note: did you intend to capture a variable `bar` from the surrounding scope?\n    = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f4c84e22faaa38e1c3ea0cddb9ac0059e9b11491", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -310,7 +310,7 @@ LL |     println!(\"{} {:.*} {}\", 1, 3.2, 4);\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n@@ -320,7 +320,7 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n    |\n    = note: expected reference `&usize`\n               found reference `&{float}`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 36 previous errors\n "}, {"sha": "d117f3254407bfb83165389ed5249919b6f952aa", "filename": "src/test/ui/fmt/ifmt-bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-format-args.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format_args!();\n    |     ^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n   --> $DIR/ifmt-bad-format-args.rs:3:18"}, {"sha": "05305e12c04027c1cf240ed5d7edffc8de27c5a1", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |     format!(\"{:X}\", \"3\");\n    |\n    = note: required because of the requirements on the impl of `UpperHex` for `&str`\n    = note: required by `std::fmt::UpperHex::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8584b650ae689e63e1d6a310fbf53d2fe6e7fb0e", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-dotdotdot-bad-syntax.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -31,7 +31,7 @@ LL |             let ...$e;\n LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "42c55de28e465e709723456f3e47c897bfc8795e", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-inclusive-no-end.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-inclusive-no-end.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -40,7 +40,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/half-open-range-pats-inclusive-no-end.rs:21:19\n@@ -52,7 +52,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4cca552d7d4739d4328e9ac01547508383840406", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.nll.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | / check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u3\n LL | | for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n    | |_____________________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "91bd0b6929ac44cd68987cf07c0816cf62a83d20", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_b_ret_a_vs_bound_a_ret_a.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | | for<'a>    fn(&'a u32, &'a u32) -> &'a u32) }\n    |\n    = note: expected enum `Option<for<'a, 'b> fn(&'a u32, &'b u32) -> &'a u32>`\n               found enum `Option<for<'a> fn(&'a u32, &'a u32) -> &'a u32>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2c1ac126fabb90c0f9be69f3c0ba18f2d7675bee", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.nll.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | / check! { bound_a_vs_free_x: (for<'a> fn(&'a u32),\n LL | | fn(&'x u32)) }\n    | |______________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "27ce56fc16afa6845f4d33abe98e8036960dd4f7", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_a_vs_free_x.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_a_vs_free_x.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | | fn(&'x u32)) }\n    |\n    = note: expected enum `Option<for<'a> fn(&'a u32)>`\n               found enum `Option<fn(&'x u32)>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "816984654f7f7302df16b03cfa85cd40f917d554", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.nll.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: higher-ranked subtype error\n   --> $DIR/hr-subtype.rs:45:13\n@@ -20,7 +20,7 @@ LL | / check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    | |__________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bb20f81a1deefed6b1c1414130afb24c1c9e9966", "filename": "src/test/ui/hr-subtype/hr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.bound_inv_a_b_vs_bound_inv_a.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | | for<'a>    fn(Inv<'a>, Inv<'a>)) }\n    |\n    = note: expected enum `Option<for<'a, 'b> fn(Inv<'a>, Inv<'b>)>`\n               found enum `Option<for<'a> fn(Inv<'a>, Inv<'a>)>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e25acebf7f6a882976fb06ce9ce0ed997ab23881", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: lifetime may not live long enough\n   --> $DIR/hr-subtype.rs:45:13\n@@ -30,7 +30,7 @@ LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8b0e36ab5f6b1062e7ff3b9cb3b884ebf10264aa", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -28,7 +28,7 @@ LL |           fn subtype<'x, 'y: 'x, 'z: 'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/hr-subtype.rs:45:26\n@@ -60,7 +60,7 @@ LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | | fn(Inv<'y>)) }\n    | |______________- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ab97481824d82209d145326aa559d1d840eb679b", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL | | fn(&'y u32)) }\n    | |______________- in this macro invocation\n    |\n    = help: consider adding the following bound: `'x: 'y`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fb1127f7f402c9a5185a937e4315d2500ed8cfc3", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -28,7 +28,7 @@ LL |           fn supertype<'x, 'y: 'x, 'z: 'y>() {\n LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | | fn(&'y u32)) }\n    | |______________- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "6e4fecf0ce4b234fad77637e771efae6104e0e1f", "filename": "src/test/ui/hygiene/assoc_item_ctxt.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fassoc_item_ctxt.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |             fn method() {}\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac_trait_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0046]: not all trait items implemented, missing: `method`\n   --> $DIR/assoc_item_ctxt.rs:34:9\n@@ -21,7 +21,7 @@ LL |         impl Tr for u8 {\n LL |     mac_trait_impl!();\n    |     ------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac_trait_impl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b699142c6787a8edb25f7441cb8c04bb49ef21fb", "filename": "src/test/ui/hygiene/duplicate_lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | m!('a);\n    | |  previous declaration here\n    | in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0263]: lifetime name `'a` declared twice in the same scope\n   --> $DIR/duplicate_lifetimes.rs:13:14\n@@ -24,7 +24,7 @@ LL | n!('a);\n    | |  previous declaration here\n    | in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "98e15c9aad050152a64b274c9b498557fa519a08", "filename": "src/test/ui/hygiene/extern-prelude-from-opaque-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fextern-prelude-from-opaque-fail.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -16,7 +16,7 @@ LL |         use my_core;\n LL | a!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `a` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared crate or module `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:11:18\n@@ -27,7 +27,7 @@ LL |         fn f() { my_core::mem::drop(0); }\n LL | a!();\n    | ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `a` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared crate or module `my_core`\n   --> $DIR/extern-prelude-from-opaque-fail.rs:24:14"}, {"sha": "0c62c00aabc18e7d07f50e3680d2eebd9090bb79", "filename": "src/test/ui/hygiene/fields-definition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-definition.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |             $a: u8,\n LL | legacy!(a);\n    | ----------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `legacy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b5b507c7daa55d0f5898f1871393135506114b61", "filename": "src/test/ui/hygiene/fields-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-move.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |     assert_two_copies(copy_legacy!(foo), foo.x);\n    |                       ----------------- in this macro invocation\n    |\n    = note: move occurs because `foo.x` has type `NonCopy`, which does not implement the `Copy` trait\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `copy_legacy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0382]: use of moved value: `foo.x`\n   --> $DIR/fields-move.rs:28:42"}, {"sha": "978120b1f101d7f01f39d95ae7b14e515704abf5", "filename": "src/test/ui/hygiene/fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         let s = S { x: 0 };\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `foo::S` is private\n   --> $DIR/fields.rs:16:17\n@@ -18,7 +18,7 @@ LL |         let _ = s.x;\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `T` is private\n   --> $DIR/fields.rs:18:17\n@@ -29,7 +29,7 @@ LL |         let t = T(0);\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `T` is private\n   --> $DIR/fields.rs:19:17\n@@ -40,7 +40,7 @@ LL |         let _ = t.0;\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d96f8329fbde429e8e5cfc599c52472615d24455", "filename": "src/test/ui/hygiene/generate-mod.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgenerate-mod.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -19,7 +19,7 @@ LL |         type A = FromOutside;\n LL |     genmod_transparent!();\n    |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `genmod_transparent` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:20:22\n@@ -30,7 +30,7 @@ LL |         type Inner = Outer;\n LL |     genmod_transparent!();\n    |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `genmod_transparent` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:28:18\n@@ -41,7 +41,7 @@ LL |         type A = FromOutside;\n LL |     genmod_legacy!();\n    |     ----------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `genmod_legacy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:29:22\n@@ -52,7 +52,7 @@ LL |         type Inner = Outer;\n LL |     genmod_legacy!();\n    |     ----------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `genmod_legacy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c2497f8ff74d2629ef0f0a00e6a2e384a5bfa5f5", "filename": "src/test/ui/hygiene/globs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fglobs.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -22,7 +22,7 @@ LL | |         f();\n LL | |     }\n    | |_____- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider importing this function\n    |\n LL | use bar::g;\n@@ -39,7 +39,7 @@ LL |         n!(f);\n    |\n    = note: consider importing one of these items:\n            foo::f\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find function `f` in this scope\n   --> $DIR/globs.rs:65:17\n@@ -52,7 +52,7 @@ LL |                 f\n    |\n    = note: consider importing one of these items:\n            foo::f\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `n` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "97a7240b9069b60329a5b341251d4b37e04c14a3", "filename": "src/test/ui/hygiene/hygienic-label-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-1.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     () => { break 'x; }\n LL |     'x: loop { foo!() }\n    |                ------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "52840049f825aa52e6ed6167f83f72c2ab7e9849", "filename": "src/test/ui/hygiene/hygienic-label-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-label-3.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     () => { break 'x; }\n LL |         foo!()\n    |         ------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "afca48fe847206a173b9476f535d8a83e52d8ebe", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |             // this 'x should refer to the outer loop, lexically\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:64:9\n@@ -42,7 +42,7 @@ LL |         'x: loop {\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:16:9\n@@ -56,7 +56,7 @@ LL |         'x: loop { $e }\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:16:9\n@@ -70,7 +70,7 @@ LL |         'x: for _ in 0..1 {\n LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:76:9\n@@ -120,7 +120,7 @@ LL |         'x: loop {\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -134,7 +134,7 @@ LL |         'x: while 1 + 1 == 2 { $e }\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -148,7 +148,7 @@ LL |         'x: for _ in 0..1 {\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -162,7 +162,7 @@ LL |         'x: while 1 + 1 == 2 { $e }\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:27:9\n@@ -176,7 +176,7 @@ LL |         'x: for _ in 0..1 {\n LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_true` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:90:9\n@@ -244,7 +244,7 @@ LL |         'x: loop {\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -258,7 +258,7 @@ LL |         'x: for _ in 0..1 { $e }\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -272,7 +272,7 @@ LL |         'x: for _ in 0..1 {\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -286,7 +286,7 @@ LL |         'x: for _ in 0..1 { $e }\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -300,7 +300,7 @@ LL |         'x: for _ in 0..1 {\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -314,7 +314,7 @@ LL |         'x: for _ in 0..1 { $e }\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels-in-let.rs:39:9\n@@ -328,7 +328,7 @@ LL |         'x: for _ in 0..1 {\n LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 28 warnings emitted\n "}, {"sha": "8c14e4f8a499f429da4014077bc8ea3229e59b6d", "filename": "src/test/ui/hygiene/hygienic-labels.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |         // this 'x should refer to the outer loop, lexically\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:54:5\n@@ -42,7 +42,7 @@ LL |     'x: for _ in 0..1 {\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:13:9\n@@ -56,7 +56,7 @@ LL |         'x: loop { $e }\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:13:9\n@@ -70,7 +70,7 @@ LL |     'x: loop {\n LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `loop_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:63:5\n@@ -120,7 +120,7 @@ LL |     'x: for _ in 0..1 {\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -134,7 +134,7 @@ LL |         'x: while 1 + 1 == 2 { $e }\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -148,7 +148,7 @@ LL |     'x: loop {\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -162,7 +162,7 @@ LL |         'x: while 1 + 1 == 2 { $e }\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:38:9\n@@ -176,7 +176,7 @@ LL |     'x: while 1 + 1 == 2 {\n LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `while_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:73:5\n@@ -244,7 +244,7 @@ LL |     'x: for _ in 0..1 {\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -258,7 +258,7 @@ LL |         'x: for _ in 0..1 { $e }\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -272,7 +272,7 @@ LL |     'x: loop {\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -286,7 +286,7 @@ LL |         'x: for _ in 0..1 { $e }\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -300,7 +300,7 @@ LL |     'x: while 1 + 1 == 2 {\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -314,7 +314,7 @@ LL |         'x: while 1 + 1 == 2 { $e }\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: label name `'x` shadows a label name that is already in scope\n   --> $DIR/hygienic-labels.rs:24:9\n@@ -328,7 +328,7 @@ LL |     'x: for _ in 0..1 {\n LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `run_once` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 28 warnings emitted\n "}, {"sha": "9fefa29c4d081f4b9337c923ed9dc4e5664a6f7e", "filename": "src/test/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         let _: () = S.f();\n LL |     foo::m!();\n    |     ---------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "91358b279e2b2f6c19d99930d9f6bda90254f86d", "filename": "src/test/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: type `fn() -> u32 {foo::bar::f}` is private\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n    |                ^^^^^^^^^^^^^^^^^^^^^ private type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `intercrate::foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b5370209f9d0efc86a086f47db36ab83ec3c367e", "filename": "src/test/ui/hygiene/missing-self-diag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fmissing-self-diag.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | |         call_bar!();\n LL | |     }\n    | |_____- this function has a `self` parameter, but a macro invocation can only access identifiers it receives from parameters\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `call_bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4f49b3106edc405b9b3c709d368f25f16ae3d035", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     fn f() { ::bar::m!(); }\n LL |         Vec::new();\n    |         ^^^ not found in this scope\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `::bar::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider importing this struct\n    |\n LL |     use std::vec::Vec;\n@@ -25,7 +25,7 @@ LL |         ().clone()\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use std::clone::Clone;`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `::bar::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "42aee62e0970c30e87125a3b6a63bcaf359a2a69", "filename": "src/test/ui/hygiene/privacy-early.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fprivacy-early.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -15,7 +15,7 @@ LL |         use f as g;\n ...\n LL |     foo::m!();\n    |     ---------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f16bb80dbb8568dbf5897d24f0dfa3b2679eca0f", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL |     pub macro m() { ().f() }\n    = help: items from traits can only be used if the trait is in scope\n    = note: the following trait is implemented but not in scope; perhaps add a `use` for it:\n            `use foo::T;`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `::baz::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ade757127794a3492b47aba48c1ea196b9369e31", "filename": "src/test/ui/imports/extern-prelude-extern-crate-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-fail.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         extern crate std as non_existent;\n LL | define_std_as_non_existent!();\n    | ------------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_std_as_non_existent` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0433]: failed to resolve: use of undeclared crate or module `two_macros`\n   --> $DIR/extern-prelude-extern-crate-fail.rs:10:9"}, {"sha": "089a897f1c29aa812029f364b61e425aebafc202", "filename": "src/test/ui/imports/extern-prelude-extern-crate-restricted-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-prelude-extern-crate-restricted-shadowing.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         extern crate std as core;\n LL | define_other_core!();\n    | --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_other_core` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `Vec` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/extern-prelude-extern-crate-restricted-shadowing.rs:13:9\n@@ -28,7 +28,7 @@ note: `Vec` could also refer to the struct defined here\n    |\n LL |     pub use super::v1::*;\n    |             ^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fd4c76c1fa4b2c1860bfe19b8a346f28bc830dcf", "filename": "src/test/ui/imports/import-crate-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-crate-var.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: `$crate` may not be imported\n LL |     m!();\n    |     ^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8868ee3aeaadd05cd85725f245651c60d4e77b65", "filename": "src/test/ui/imports/import-prefix-macro-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-1.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     ($p: path) => (use $p {S, Z});\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `import` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "23f8d57645d18dce34c670e50766a46e98a6b80c", "filename": "src/test/ui/imports/import-prefix-macro-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fimport-prefix-macro-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     ($p: path) => (use ::$p {S, Z});\n LL | import! { a::b::c }\n    | ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `import` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9983073ece7cd3e67a34ccddea9d38d242c5ba22", "filename": "src/test/ui/imports/local-modularized-tricky-fail-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-1.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -20,7 +20,7 @@ note: `exported` could also refer to the macro imported here\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `exported` is ambiguous (glob import vs macro-expanded name in the same module during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:28:1\n@@ -44,7 +44,7 @@ note: `exported` could also refer to the macro imported here\n LL | use inner1::*;\n    |     ^^^^^^^^^\n    = help: consider adding an explicit import of `exported` to disambiguate\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `panic` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:36:5\n@@ -64,7 +64,7 @@ LL | |     }\n LL |       define_panic!();\n    |       ---------------- in this macro invocation\n    = help: use `crate::panic` to refer to this macro unambiguously\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `include` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/local-modularized-tricky-fail-1.rs:47:1\n@@ -84,7 +84,7 @@ LL | |     }\n LL |       define_include!();\n    |       ------------------ in this macro invocation\n    = help: use `crate::include` to refer to this macro unambiguously\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ab9f1eca23d921c2cd87b62f730be9e57aa3c837", "filename": "src/test/ui/imports/local-modularized-tricky-fail-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Flocal-modularized-tricky-fail-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -17,7 +17,7 @@ LL | |     }\n ...\n LL |   define_exported!();\n    |   ------------------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\n   --> $DIR/local-modularized-tricky-fail-2.rs:19:5\n@@ -37,7 +37,7 @@ LL | |     }\n ...\n LL |   define_exported!();\n    |   ------------------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_exported` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "82d8078856d58dad06513392a39eb266248d09e1", "filename": "src/test/ui/imports/shadow_builtin_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fshadow_builtin_macros.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -28,7 +28,7 @@ LL |         macro_rules! panic { () => {} }\n LL |     } }\n LL |     m!();\n    |     ----- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `n` is ambiguous (glob import vs any other name from outer scope during import/macro resolution)\n   --> $DIR/shadow_builtin_macros.rs:49:5"}, {"sha": "7094f427aa4601b37a38c304b7c2927a7249b256", "filename": "src/test/ui/in-band-lifetimes/elided-lifetimes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Felided-lifetimes.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -37,7 +37,7 @@ LL |         fn $fn_name(gift: &str) -> $type_name {\n LL | autowrapper!(Autowrapped, autowrap_gift, 'a);\n    | --------------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `autowrapper` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hidden lifetime parameters in types are deprecated\n   --> $DIR/elided-lifetimes.rs:78:18\n@@ -54,7 +54,7 @@ LL |         Ref<($($types),*)>\n LL |     let yellow: anytuple_ref_ty!(bool, &str) = laughter.borrow();\n    |                 ---------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `anytuple_ref_ty` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "a408877afb61c9c299b3ff14e2f39e89b649c0f7", "filename": "src/test/ui/include-macros/mismatched-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finclude-macros%2Fmismatched-types.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     let b: &[u8] = include_str!(\"file.txt\");\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/mismatched-types.rs:3:19\n@@ -20,7 +20,7 @@ LL |     let s: &str = include_bytes!(\"file.txt\");\n    |\n    = note: expected reference `&str`\n               found reference `&'static [u8; 0]`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c7d9118d3f3a879d19860fdd5cdb9309cb50b183", "filename": "src/test/ui/infinite/infinite-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-macro-expansion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     recursive!()\n    |     ------------ in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`infinite_macro_expansion`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `recursive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "29680c0a630ea97359672470b7409427e8f12a13", "filename": "src/test/ui/internal/internal-unstable-noallow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-noallow.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     call_unstable_noallow!();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `call_unstable_noallow` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct_field'\n   --> $DIR/internal-unstable-noallow.rs:18:5\n@@ -14,7 +14,7 @@ LL |     construct_unstable_noallow!(0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `construct_unstable_noallow` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'method'\n   --> $DIR/internal-unstable-noallow.rs:20:35\n@@ -23,7 +23,7 @@ LL |     |x: internal_unstable::Foo| { call_method_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(method)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `call_method_noallow` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: use of unstable library feature 'struct2_field'\n   --> $DIR/internal-unstable-noallow.rs:22:35\n@@ -32,7 +32,7 @@ LL |     |x: internal_unstable::Bar| { access_field_noallow!(x) };\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(struct2_field)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `access_field_noallow` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "5261a79dfa2e10344129c49b66140df035037039", "filename": "src/test/ui/internal/internal-unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -40,7 +40,7 @@ LL |     bar!(internal_unstable::unstable());\n    |     ------------------------------------ in this macro invocation\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "695d657cb529ca65e272d02b9a84d7d8a3939089", "filename": "src/test/ui/issues/issue-12997-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12997-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn bar(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&mut Bencher`\n    |\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `bench` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "30fb73dd37282a8b54800c39a7ffd60eba0b8d65", "filename": "src/test/ui/issues/issue-13446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13446.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | static VEC: [u32; 256] = vec![];\n    |\n    = note: expected array `[u32; 256]`\n              found struct `Vec<_>`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "acf837d0f76b8fda226feaa76fac8338a841283e", "filename": "src/test/ui/issues/issue-14091-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     assert!(x, x);\n    |     ^^^^^^^^^^^^^^ cannot apply unary operator `!`\n    |\n    = note: an implementation of `std::ops::Not` might be missing for `BytePos`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9e9c7a596961f032e705d45d3fdc61f95e35f248", "filename": "src/test/ui/issues/issue-14091.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14091.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     assert!(1,1);\n    |     ^^^^^^^^^^^^^ expected `bool`, found integer\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "53082ea0ec6bb4989fed6ddee21c0882f698852d", "filename": "src/test/ui/issues/issue-15167.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15167.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL | macro_rules! f { () => (n) }\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -18,7 +18,7 @@ LL | macro_rules! f { () => (n) }\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -29,7 +29,7 @@ LL | macro_rules! f { () => (n) }\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `n` in this scope\n   --> $DIR/issue-15167.rs:3:25\n@@ -40,7 +40,7 @@ LL | macro_rules! f { () => (n) }\n LL |         println!(\"{}\", f!());\n    |                        ---- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `f` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a63bcd9ba5c760f650ea2fe6ed2763547daf0a69", "filename": "src/test/ui/issues/issue-16098.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16098.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     println!(\"Problem 1: {}\", prob1!(1000));\n    |                               ------------ in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`issue_16098`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `prob1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f9467af9e3c4c0a68153e0409f7a4016ef5d88a9", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4cef23ac42cb394c031dfedea09340b746ed30f7", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL | struct Foo(Bar);\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n    |             - required by this bound in `std::hash::Hash::hash`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5b8bd9418629ad6f0743f33f22d5ad9012769e31", "filename": "src/test/ui/issues/issue-25385.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25385.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     ($e:expr) => { $e.foo() }\n LL |     foo!(a);\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: no method named `foo` found for type `i32` in the current scope\n   --> $DIR/issue-25385.rs:10:15"}, {"sha": "bce269393eec4ba6ca6677d0e79140c1711e929d", "filename": "src/test/ui/issues/issue-25386.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         (*$var.c_object).$member.is_some()\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |                    ---------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `check_ptr_exist` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `name` of struct `CObj` is private\n   --> $DIR/issue-25386.rs:26:43"}, {"sha": "33526721b1715e58aabd0f9ec2f9015c884e590f", "filename": "src/test/ui/issues/issue-26093.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |     not_a_place!(99);\n    |     |            cannot assign to this expression\n    |     in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `not_a_place` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0067]: invalid left-hand side of assignment\n   --> $DIR/issue-26093.rs:5:16\n@@ -24,7 +24,7 @@ LL |     not_a_place!(99);\n    |     |            cannot assign to this expression\n    |     in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `not_a_place` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "40889b8666839c3b76f7536dca43181f4b08f4f5", "filename": "src/test/ui/issues/issue-27340.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27340.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |\n LL | struct Bar(Foo);\n    |            --- this field does not implement `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1205a8b656b119a455ea5cc903d2033cdf540b90", "filename": "src/test/ui/issues/issue-27592.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27592.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,15 +7,15 @@ LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              |                  temporary value created here\n    |              returns a value referencing data owned by the current function\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0515]: cannot return reference to temporary value\n   --> $DIR/issue-27592.rs:16:14\n    |\n LL |     write(|| format_args!(\"{}\", String::from(\"Hello world\")));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fec1c55f89eb0fbb76d7e9e5cbd61dce0b57a222", "filename": "src/test/ui/issues/issue-29084.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29084.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         bar(&mut $d);\n LL |     foo!(0u8);\n    |     ---------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ab041594863ce051f9a43692bb5d67727bf3f405", "filename": "src/test/ui/issues/issue-31011.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31011.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | {\n LL |     log!(context, \"entered wrapper\");\n    |     --------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `log` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c0d9899eb841c61cb84be7218638542160e68b58", "filename": "src/test/ui/issues/issue-32655.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32655.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         #[derive_Clone]\n LL | foo!();\n    | ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find attribute `derive_Clone` in this scope\n   --> $DIR/issue-32655.rs:15:7"}, {"sha": "ed43fa73a09e30cc399c4cf06016e4f624e76f0b", "filename": "src/test/ui/issues/issue-32782.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32782.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | foo!();\n    | ------- in this macro invocation\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f6635d982e4ec7e6966e574e80fe9007e93d1bd2", "filename": "src/test/ui/issues/issue-32950.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32950.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ error[E0412]: cannot find type `FooBar` in this scope\n LL |     concat_idents!(Foo, Bar)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat_idents` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c32fe7e0ec6238c910ac515007427f61ccccbf08", "filename": "src/test/ui/issues/issue-34229.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34229.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(PartialEq, PartialOrd)] struct Nope(Comparable);\n    |\n    = help: the trait `PartialOrd` is not implemented for `Comparable`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e53a543f3a0bab6185fccc25417b7ebfa5c26e76", "filename": "src/test/ui/issues/issue-38821.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38821.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: required because of the requirements on the impl of `IntoNullable` for `<C\n    |\n LL | impl<T: NotNull> IntoNullable for T {\n    |                  ^^^^^^^^^^^^     ^\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "02c6cd0ca44a904dcd5c159823ebab0ad4906c5a", "filename": "src/test/ui/issues/issue-39848.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ LL |         if $tgt.has_$field() {}\n LL |     get_opt!(bar, foo);\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `get_opt` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8227f8df1e09f600e72966c3fc07915743e6d0c8", "filename": "src/test/ui/issues/issue-42954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42954.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |         $i as u32 < 0\n LL |     is_plainly_printable!(c);\n    |     ------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `is_plainly_printable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "37a42d2382d6be7b5bbd02c22a03fe01c9cf0fb7", "filename": "src/test/ui/issues/issue-48364.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48364.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |     b\"\".starts_with(stringify!(foo))\n    |\n    = note: expected reference `&[u8]`\n               found reference `&'static str`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `stringify` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "628f026b680469ccbe91863140271a5b094f670f", "filename": "src/test/ui/issues/issue-48728.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48728.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | impl<T: Clone + ?Sized> Clone for Node<[T]> {\n    | ------------------------------------------- first implementation here\n    |\n    = note: upstream crates may add a new impl of trait `std::clone::Clone` for type `[_]` in future versions\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "15f38c892679bcd75a87805b461c63a42b9cc576", "filename": "src/test/ui/issues/issue-50480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50480.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -30,7 +30,7 @@ LL | struct Foo(NotDefined, <i32 as Iterator>::Item, Vec<i32>, String);\n    |                                                 |\n    |                                                 this field does not implement `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "bb32b7f9a13131e87a05b062a1ea430c9899896f", "filename": "src/test/ui/issues/issue-51848.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51848.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |     macro_with_error!();\n    |     -------------------- in this macro invocation\n    |\n    = note: if you intended to print `{`, you can escape it using `{{`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `macro_with_error` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: invalid format string: unmatched `}` found\n   --> $DIR/issue-51848.rs:18:15"}, {"sha": "fd2522dfbeee4d5cf10131913f5894acb6de0a56", "filename": "src/test/ui/issues/issue-53251.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53251.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -14,7 +14,7 @@ note: associated function defined here, with 0 generic parameters\n    |\n LL |     fn f() {}\n    |        ^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_add` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0107]: this associated function takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/issue-53251.rs:11:20\n@@ -32,7 +32,7 @@ note: associated function defined here, with 0 generic parameters\n    |\n LL |     fn f() {}\n    |        ^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `impl_add` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "93d2f3001f8991ecc38cbd1bef301c91f9b88224", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -77,7 +77,7 @@ LL |     assert_eq!(Foo::Bar, i);\n    |     fn(usize) -> Foo {Foo::Bar}\n    |     fn(usize) -> Foo {Foo::Bar}\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n   --> $DIR/issue-59488.rs:30:5\n@@ -91,7 +91,7 @@ LL |     T: fmt::Debug + ?Sized,\n    |        ---------- required by this bound in `core::panicking::assert_failed`\n    |\n    = help: the trait `Debug` is not implemented for `fn(usize) -> Foo {Foo::Bar}`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 9 previous errors\n "}, {"sha": "c01205223d661429ae1560dc94dda9850e6f83aa", "filename": "src/test/ui/issues/issue-6596-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-1.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         $nonexistent\n LL |     e!(foo);\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `e` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "90627d3bbd55efaea7c3b98c27f4aea801ad15e5", "filename": "src/test/ui/issues/issue-6596-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6596-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         { $inp $nonexistent }\n LL |     g!(foo);\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `g` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "43fda800cfa1cefa62c50c15de166656210351fa", "filename": "src/test/ui/issues/issue-68091-unicode-ident-after-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-68091-unicode-ident-after-if.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL |         $($c)\u00f6* {}\n LL |     x!(if);\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6a744812e41d15929ae4f84da3978997d308b9c7", "filename": "src/test/ui/issues/issue-69396-const-no-type-in-macro.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69396-const-no-type-in-macro.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -14,7 +14,7 @@ LL | | }\n    | |_- in this macro invocation\n    |\n    = note: `A` must be defined only once in the value namespace of this module\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `suite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: missing type for `const` item\n   --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n@@ -28,7 +28,7 @@ LL | |     is_empty;\n LL | | }\n    | |_- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `suite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/issue-69396-const-no-type-in-macro.rs:4:19\n@@ -45,7 +45,7 @@ LL | |     is_empty;\n LL | | }\n    | |_- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `suite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0f095f5a77b231b7e69ad797986dbad7269862d8", "filename": "src/test/ui/issues/issue-70724-add_type_neq_err_label-unwrap.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70724-add_type_neq_err_label-unwrap.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     assert_eq!(a, 0);\n    |     {integer}\n    |     help: you might have forgotten to call this function: `*left_val()`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/issue-70724-add_type_neq_err_label-unwrap.rs:6:5\n@@ -18,7 +18,7 @@ LL |     assert_eq!(a, 0);\n    |\n    = note: expected fn item `fn() -> i32 {a}`\n                  found type `i32`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn() -> i32 {a}` doesn't implement `Debug`\n   --> $DIR/issue-70724-add_type_neq_err_label-unwrap.rs:6:5\n@@ -36,7 +36,7 @@ LL |     T: fmt::Debug + ?Sized,\n    |\n    = help: the trait `Debug` is not implemented for `fn() -> i32 {a}`\n    = help: use parentheses to call the function: `a()`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4a605cfb8621b0bb5a410f902572c0c82e888dce", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |     x.use_mut();\n    |     - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "52f6c69cfc90cd719b249dc68ea0f1f71af76ded", "filename": "src/test/ui/lint/lint-stability2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `macro_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "56d4ffc4727b2e2e627f76e5d9b4bdaf4d633bea", "filename": "src/test/ui/lint/lint-stability3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability3.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(deprecated)]\n    |         ^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `macro_test_arg_nested` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fc6e6c29db11ca22a17c84a0adfe4f5fe381e0cb", "filename": "src/test/ui/lint/lint-unsafe-code.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unsafe-code.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -123,7 +123,7 @@ LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a `no_mangle` static\n   --> $DIR/lint-unsafe-code.rs:22:9\n@@ -135,7 +135,7 @@ LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a function with `export_name`\n   --> $DIR/lint-unsafe-code.rs:23:9\n@@ -147,7 +147,7 @@ LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: declaration of a static with `export_name`\n   --> $DIR/lint-unsafe-code.rs:25:9\n@@ -159,7 +159,7 @@ LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n    = note: the linker's behavior with multiple libraries exporting duplicate symbol names is undefined and Rust cannot provide guarantees when you manually override them\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of an `unsafe` block\n   --> $DIR/lint-unsafe-code.rs:27:9\n@@ -170,7 +170,7 @@ LL |         unsafe {}\n LL |     unsafe_in_macro!()\n    |     ------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unsafe_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 22 previous errors\n "}, {"sha": "55fea4e3636f4081a8acab87abbc93762b41b758", "filename": "src/test/ui/lint/lints-in-foreign-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flints-in-foreign-macros.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -12,7 +12,7 @@ note: the lint level is defined here\n    |\n LL | #![warn(unused_imports)]\n    |         ^^^^^^^^^^^^^^\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unused import: `std::string::ToString`\n   --> $DIR/lints-in-foreign-macros.rs:16:18"}, {"sha": "111ebea61dd12c94499ab583a31d7165214cc9a3", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/semicolon-in-expressions-from-macros.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fsemicolon-in-expressions-from-macros.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -14,7 +14,7 @@ LL | #![warn(semicolon_in_expressions_from_macros)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: trailing semicolon in macro used in expression position\n   --> $DIR/semicolon-in-expressions-from-macros.rs:8:13\n@@ -27,7 +27,7 @@ LL |     let _ = foo!(second);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 2 warnings emitted\n "}, {"sha": "7a32bc86bf706e8508c9ba84ad6b2b4a9365c77a", "filename": "src/test/ui/lint/test-inner-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ftest-inner-fn.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,15 +5,15 @@ LL |     #[test]\n    |     ^^^^^^^\n    |\n    = note: requested on the command line with `-D unnameable-test-items`\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot test inner items\n   --> $DIR/test-inner-fn.rs:13:9\n    |\n LL |         #[test]\n    |         ^^^^^^^\n    |\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5e84fdca1d3ce2ff0e06b738bcd8ae8d77ce2609", "filename": "src/test/ui/lint/unaligned_references_external_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references_external_macro.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -24,7 +24,7 @@ LL | | }\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `unaligned_references_external_crate::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "27444e05532eb7317b2d9115bb8fc6ca8dc2c664", "filename": "src/test/ui/lint/unreachable_pub-pub_crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub-pub_crate.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -132,7 +132,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `define_empty_struct_with_visibility` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n   --> $DIR/unreachable_pub-pub_crate.rs:45:9"}, {"sha": "5d79292e3e382beb52e1c261714d395e6e55c714", "filename": "src/test/ui/lint/unreachable_pub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funreachable_pub.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -132,7 +132,7 @@ LL |     define_empty_struct_with_visibility!(pub, Fluorine);\n    |     in this macro invocation\n    |\n    = help: or consider exporting it for use by other crates\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `define_empty_struct_with_visibility` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: unreachable `pub` item\n   --> $DIR/unreachable_pub.rs:41:9"}, {"sha": "d08fbac0bcaabc006112c6dafc5f7b0b79710ea2", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n LL |     test!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/liveness-return-last-stmt-semi.rs:7:19"}, {"sha": "2b5c2eced08a80e477800a41fca2c0079816fdd4", "filename": "src/test/ui/llvm-asm/inline-asm-bad-constraint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Finline-asm-bad-constraint.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,23 +4,23 @@ error[E0668]: malformed inline assembly\n LL |         llvm_asm!(\"\" :\"={rax\"(rax))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:30:9\n    |\n LL |         llvm_asm!(\"callq $0\" : : \"0\"(foo))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0668]: malformed inline assembly\n   --> $DIR/inline-asm-bad-constraint.rs:37:9\n    |\n LL |         llvm_asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax)));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6b313ac0faad85bc096460e300a8b92a09505a6d", "filename": "src/test/ui/llvm-asm/issue-62046.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fissue-62046.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0668]: malformed inline assembly\n LL |         llvm_asm!(\"nop\" : \"+r\"(\"r15\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `llvm_asm` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f03637abb67330b3012d5d7b250ac2f2259ab5dd", "filename": "src/test/ui/macro_backtrace/main.default.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     () => { syntax error };\n LL |     pong!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pong` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n@@ -18,7 +18,7 @@ LL |     () => { syntax error };\n LL |     ping!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pong` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n@@ -29,7 +29,7 @@ LL |     () => { syntax error };\n LL |     deep!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pong` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c7566d893188242b8cb787a5574e979798c54dd9", "filename": "src/test/ui/macros/assert.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -16,7 +16,7 @@ error: macro requires a boolean expression as an argument\n LL |     debug_assert!();\n    |     ^^^^^^^^^^^^^^^^ boolean expression required\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `debug_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/assert.rs:5:19"}, {"sha": "a8e96c0137b575cc4f2d6e8ac1e74c87de6fbe5a", "filename": "src/test/ui/macros/cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: macro requires a cfg-pattern as an argument\n LL |     cfg!();\n    |     ^^^^^^^ cfg-pattern required\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `cfg` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found `123`\n   --> $DIR/cfg.rs:3:10"}, {"sha": "dfbbb07de588ae7e68f2310363797ab12f07e3ed", "filename": "src/test/ui/macros/derive-in-eager-expansion-hang.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fderive-in-eager-expansion-hang.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -12,7 +12,7 @@ LL | |     }\n LL |       format_args!(hang!());\n    |                    ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hang` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you might be missing a string literal to format with\n    |\n LL |     format_args!(\"{}\", hang!());"}, {"sha": "b479a2778e0ef55819d0b3e82562cc6a09569437", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/format-parse-errors.rs:5:13"}, {"sha": "b7079158fb093a253d0b6ef2eca66a557e7408ff", "filename": "src/test/ui/macros/issue-34421-mac-expr-bad-stmt-good-add-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-34421-mac-expr-bad-stmt-good-add-semi.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     make_item!(A)\n    |     ------------- in this macro invocation\n    |\n    = note: the macro call doesn't expand to an expression, but it can expand to a statement\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `make_item` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: add `;` to interpret the expansion as a statement\n    |\n LL |     make_item!(A);\n@@ -24,7 +24,7 @@ LL |     make_item!(B)\n    |     ------------- in this macro invocation\n    |\n    = note: the macro call doesn't expand to an expression, but it can expand to a statement\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `make_item` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: add `;` to interpret the expansion as a statement\n    |\n LL |     make_item!(B);"}, {"sha": "2934281cdd6cbced8a41ace5d192ecc1b823e216", "filename": "src/test/ui/macros/issue-78325-inconsistent-resolution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fissue-78325-inconsistent-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fissue-78325-inconsistent-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-78325-inconsistent-resolution.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         extern crate std as core;\n LL | define_other_core!();\n    | --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_other_core` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "39485d74e5eb2b0a67bc5e7f82025d311a883dc9", "filename": "src/test/ui/macros/issue-84195-lint-anon-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-84195-lint-anon-const.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -14,7 +14,7 @@ LL | #![deny(semicolon_in_expressions_from_macros)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #79813 <https://github.com/rust-lang/rust/issues/79813>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `len` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b4d20699221abcdb50ccd1941d9082671f0f9e75", "filename": "src/test/ui/macros/macro-backtrace-invalid-internals.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-invalid-internals.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |           1.fake()\n LL |     fake_method_stmt!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `fake_method_stmt` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:11:13\n@@ -18,7 +18,7 @@ LL |           1.fake\n LL |     fake_field_stmt!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `fake_field_stmt` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:17:15\n@@ -29,7 +29,7 @@ LL |           (1).0\n LL |     fake_anon_field_stmt!();\n    |     ------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `fake_anon_field_stmt` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:41:15\n@@ -40,7 +40,7 @@ LL |           2.0.neg()\n LL |     real_method_stmt!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `real_method_stmt` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()\n@@ -55,7 +55,7 @@ LL |           1.fake()\n LL |     let _ = fake_method_expr!();\n    |             ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `fake_method_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:29:13\n@@ -66,7 +66,7 @@ LL |           1.fake\n LL |     let _ = fake_field_expr!();\n    |             ------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `fake_field_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/macro-backtrace-invalid-internals.rs:35:15\n@@ -77,7 +77,7 @@ LL |           (1).0\n LL |     let _ = fake_anon_field_expr!();\n    |             ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `fake_anon_field_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0689]: can't call method `neg` on ambiguous numeric type `{float}`\n   --> $DIR/macro-backtrace-invalid-internals.rs:47:15\n@@ -88,7 +88,7 @@ LL |           2.0.neg()\n LL |     let _ = real_method_expr!();\n    |             ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `real_method_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you must specify a concrete type for this numeric value, like `f32`\n    |\n LL |           2.0_f32.neg()"}, {"sha": "d61434e5f2ff2540c224ceaf8268aaf66975d37f", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     () => (fake)\n LL |     1 + call_nested_expr!();\n    |         ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `fake` in this scope\n   --> $DIR/macro-backtrace-nested.rs:5:12\n@@ -18,7 +18,7 @@ LL |     () => (fake)\n LL |     call_nested_expr_sum!();\n    |     ------------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0703868e9b7e526328bce830980ceb41a210a568", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\")));\n LL |     myprintln!(\"{}\");\n    |     ----------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5ed73b7fb93a3a57b79d7a3156742f0235636736", "filename": "src/test/ui/macros/macro-context.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-context.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -40,7 +40,7 @@ LL |     () => ( i ; typeof );\n LL |     m!();\n    |     ----- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `i` in this scope\n   --> $DIR/macro-context.rs:3:13\n@@ -51,7 +51,7 @@ LL |     () => ( i ; typeof );\n LL |     let a: m!();\n    |            ---- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `i` in this scope\n   --> $DIR/macro-context.rs:3:13\n@@ -62,7 +62,7 @@ LL |     () => ( i ; typeof );\n LL |     let i = m!();\n    |             ---- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "f6fc8034410ef4cf3e5993581ae6fba27c97d2f5", "filename": "src/test/ui/macros/macro-lifetime-used-with-labels.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |     'b: loop {\n LL |         br2!('b);\n    |         --------- in this macro invocation\n    |\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `br2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted\n "}, {"sha": "89ff753b378dbf0454ea795c02a53ceff6ab6d42", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: the constant `baz` is defined here\n    |\n LL |     thread_local!(static baz: f64 = 0.0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "010520845396a5437ec571a9b4c976702544ad3e", "filename": "src/test/ui/macros/macro-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-shadowing.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL | m1!();\n    | ------ in this macro invocation\n    |\n    = note: macro-expanded `#[macro_use]`s may not shadow existing macros (see RFC 1560)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `foo` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/macro-shadowing.rs:17:1\n@@ -29,7 +29,7 @@ note: `foo` could also refer to the macro defined here\n    |\n LL | macro_rules! foo { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "14058f866393312262bc8f2969ffee8fa4f0d257", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0665]: `Default` cannot be derived for enums, only structs\n LL | #[derive(Default)]\n    |          ^^^^^^^\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: asm template must be a string literal\n   --> $DIR/macros-nonfatal-errors.rs:13:10\n@@ -48,7 +48,7 @@ error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `env` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: format argument must be a string literal\n   --> $DIR/macros-nonfatal-errors.rs:23:13\n@@ -79,7 +79,7 @@ error: couldn't read $DIR/i'd be quite surprised if a file with this name existe\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include_str` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n   --> $DIR/macros-nonfatal-errors.rs:29:20\n@@ -93,7 +93,7 @@ error: couldn't read $DIR/i'd be quite surprised if a file with this name existe\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include_bytes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n   --> $DIR/macros-nonfatal-errors.rs:32:5"}, {"sha": "46fa43ac96519d9227261f5a404dc89392a625d5", "filename": "src/test/ui/macros/must-use-in-macro-55516.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |     write!(&mut example, \"{}\", 42);\n    |\n    = note: `-W unused-must-use` implied by `-W unused`\n    = note: this `Result` may be an `Err` variant, which should be handled\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted\n "}, {"sha": "38df53fb698c931a0263df6992c92f8edf5d4342", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |     n!(a $nt_item b);\n LL | complex_nonterminal!(enum E {});\n    | -------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `complex_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7e1f2dcad11c47e66b2574ded045e8944f175038", "filename": "src/test/ui/macros/not-utf8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnot-utf8.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: couldn't read $DIR/not-utf8.bin: stream did not contain valid UTF-8\n LL |     include!(\"not-utf8.bin\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "cf4203525e6cbd19339e921bf408f3b851997c4e", "filename": "src/test/ui/macros/restricted-shadowing-legacy.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -23,7 +23,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:139:42\n@@ -50,7 +50,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:148:9\n@@ -77,7 +77,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:164:9\n@@ -104,7 +104,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:180:13\n@@ -131,7 +131,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:218:42\n@@ -158,7 +158,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:232:9\n@@ -185,7 +185,7 @@ LL |             macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-legacy.rs:262:42\n@@ -212,7 +212,7 @@ LL |             macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n "}, {"sha": "6161e46e48b582662a24e0efefbce4dd1b874ea9", "filename": "src/test/ui/macros/restricted-shadowing-modern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -23,7 +23,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:147:33\n@@ -50,7 +50,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:156:13\n@@ -77,7 +77,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:172:13\n@@ -104,7 +104,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:190:17\n@@ -131,7 +131,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n   --> $DIR/restricted-shadowing-modern.rs:233:33\n@@ -158,7 +158,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ----------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "4581d5831881b0f30ffb37d2734cb8204de5a1e9", "filename": "src/test/ui/macros/same-sequence-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fsame-sequence-span.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -28,7 +28,7 @@ LL | | fn main() {}\n    | |_________________________________^ not allowed after `expr` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `proc_macro_sequence::make_foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `$x:expr` may be followed by `=`, which is not allowed for `expr` fragments\n   --> $DIR/same-sequence-span.rs:19:1\n@@ -37,7 +37,7 @@ LL | proc_macro_sequence::make_foo!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not allowed after `expr` fragments\n    |\n    = note: allowed there are: `=>`, `,` or `;`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `proc_macro_sequence::make_foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f563b0dc1292335312964b392229f8996929fe75", "filename": "src/test/ui/macros/span-covering-argument-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |             *&mut $s = 0;\n LL |     bad!(foo whatever);\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `bad` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "6a54bb10b79a2eefe4c3f5b428bcaba00cb0a0e4", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |         my_faulty_macro!(bcd);\n LL |     my_faulty_macro!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `my_faulty_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro\n   --> $DIR/trace_faulty_macros.rs:31:5\n@@ -32,7 +32,7 @@ LL |     my_recursive_macro!();\n    |     ---------------------- in this macro invocation\n    |\n    = help: consider adding a `#![recursion_limit=\"8\"]` attribute to your crate (`trace_faulty_macros`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `my_recursive_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro\n   --> $DIR/trace_faulty_macros.rs:32:5\n@@ -58,7 +58,7 @@ LL |         $a\n LL |     let a = pat_macro!();\n    |             ------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pat_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0774]: `derive` may only be applied to structs, enums and unions\n   --> $DIR/trace_faulty_macros.rs:42:1"}, {"sha": "7060f5d8b4791010de64a1023784d7d8bf73c1f1", "filename": "src/test/ui/macros/vec-macro-in-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fvec-macro-in-pattern.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: arbitrary expressions aren't allowed in patterns\n LL |         Some(vec![43]) => {}\n    |              ^^^^^^^^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "ba096a9080ae2b409ca29bca453475b76cd8ec12", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -27,7 +27,7 @@ LL | #[derive(Copy(Bad))]\n LL | pub trait Copy: Clone {\n    |                 ----- required by this bound in `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `Test2: Clone` is not satisfied\n   --> $DIR/malformed-derive-entry.rs:6:10\n@@ -40,7 +40,7 @@ LL | #[derive(Copy=\"bad\")]\n LL | pub trait Copy: Clone {\n    |                 ----- required by this bound in `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d0859726a49f6d787cf7c97781541c8a2f5cf1b8", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |                   $arr.len() * size_of($arr[0]));\n LL |     write!(hello);\n    |     -------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: you can convert a `usize` to a `u64` and panic if the converted value doesn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n@@ -22,7 +22,7 @@ LL |     ($x:expr) => ($x as ())\n LL |     cast!(2);\n    |     --------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `cast` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cbeaafd9268aab5113aef32f07a558612c7028c3", "filename": "src/test/ui/modules/issue-56411.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------- in this macro invocation\n    |\n    = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `import` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n   --> $DIR/issue-56411.rs:6:21\n@@ -25,7 +25,7 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------- in this macro invocation\n    |\n    = note: consider declaring type or module `issue_56411_aux` with `pub`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `import` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fe4114aeddc009f002a70eb9229680a2b4c4e3a7", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` or manually implement `Debug`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Bar` doesn't implement `Debug`\n   --> $DIR/no-debug.rs:10:32\n@@ -17,7 +17,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |\n    = help: the trait `Debug` is not implemented for `Bar`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:23\n@@ -28,7 +28,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    = help: the trait `std::fmt::Display` is not implemented for `Foo`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: required by `std::fmt::Display::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Bar` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:28\n@@ -39,7 +39,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    = help: the trait `std::fmt::Display` is not implemented for `Bar`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = note: required by `std::fmt::Display::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "3f7d47dcb8ceb2ef307ed919d80d9a59d46e5691", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -140,7 +140,7 @@ LL |             (true\n LL |         (true | false, None | Some(t_or_f!())) => {}\n    |                                    --------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `t_or_f` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable pattern\n   --> $DIR/exhaustiveness-unreachable-pattern.rs:116:14"}, {"sha": "1db31e0272c91d794b82f31118c4a7b79ee96ee0", "filename": "src/test/ui/out-of-order-shadowing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fout-of-order-shadowing.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -14,7 +14,7 @@ note: `bar` could also refer to the macro defined here\n    |\n LL | macro_rules! bar { () => {} }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `define_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9a6957a0408497eb19a53bbd941868b96fc74a51", "filename": "src/test/ui/parser/bad-interpolated-block.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ LL |         'lab: $b;\n LL |     m!({});\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use a `block` macro fragment here\n   --> $DIR/bad-interpolated-block.rs:8:16\n@@ -22,7 +22,7 @@ LL |         unsafe $b;\n LL |     m!({});\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use a `block` macro fragment here\n   --> $DIR/bad-interpolated-block.rs:9:23\n@@ -33,7 +33,7 @@ LL |         |x: u8| -> () $b;\n LL |     m!({});\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4b03427cd5871093711cc159848d704534d727a6", "filename": "src/test/ui/parser/float-field-interpolated.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         { s.$b; }\n LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n    |     ---------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_field_accesses` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1`\n   --> $DIR/float-field-interpolated.rs:8:13\n@@ -18,7 +18,7 @@ LL |         { s.$b; }\n LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n    |     ---------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_field_accesses` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unexpected token: `1.1`\n   --> $DIR/float-field-interpolated.rs:10:13\n@@ -29,7 +29,7 @@ LL |         { s.$c; }\n LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n    |     ---------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_field_accesses` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1`\n   --> $DIR/float-field-interpolated.rs:10:13\n@@ -40,7 +40,7 @@ LL |         { s.$c; }\n LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n    |     ---------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_field_accesses` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0ab718d8bd4f5b6acf006f1bf12a0af5a1395497", "filename": "src/test/ui/parser/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-48137-macros-cannot-interpolate-impl-items-bad-variants.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -16,7 +16,7 @@ LL |     expand_to_enum!();\n    |     ------------------ in this macro invocation\n    |\n    = help: consider moving the enum out to a nearby module scope\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `expand_to_enum` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: struct is not supported in `trait`s or `impl`s\n   --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:31:5\n@@ -36,7 +36,7 @@ LL |     expand_to_enum!();\n    |     ------------------ in this macro invocation\n    |\n    = help: consider moving the enum out to a nearby module scope\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `expand_to_enum` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: struct is not supported in `extern` blocks\n   --> $DIR/issue-48137-macros-cannot-interpolate-impl-items-bad-variants.rs:42:5\n@@ -56,7 +56,7 @@ LL |     expand_to_enum!();\n    |     ------------------ in this macro invocation\n    |\n    = help: consider moving the enum out to a nearby module scope\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `expand_to_enum` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "8c032e588e31d8962ccc3df628f1349635451638", "filename": "src/test/ui/parser/issue-65122-mac-invoc-in-mut-patterns.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-65122-mac-invoc-in-mut-patterns.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     mac1! { does_not_exist!() }\n    |     --------------------------- in this macro invocation\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected identifier, found `does_not_exist!()`\n   --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:13:17\n@@ -19,7 +19,7 @@ LL |         let mut $eval = ();\n LL |     mac2! { does_not_exist!() }\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `mut` must be followed by a named binding\n   --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:13:13\n@@ -31,7 +31,7 @@ LL |     mac2! { does_not_exist!() }\n    |     --------------------------- in this macro invocation\n    |\n    = note: `mut` may be followed by `variable` and `variable @ pattern`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find macro `does_not_exist` in this scope\n   --> $DIR/issue-65122-mac-invoc-in-mut-patterns.rs:22:13"}, {"sha": "f83b7944b1ba181adbac974dd823a4765e4d1e26", "filename": "src/test/ui/parser/issue-73568-lifetime-after-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-73568-lifetime-after-mut.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -19,7 +19,7 @@ LL |         fn w<$lt>(w: &mut $lt i32) {}\n LL | mac!('a);\n    | --------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0423]: expected value, found trait `Send`\n   --> $DIR/issue-73568-lifetime-after-mut.rs:19:28"}, {"sha": "50995895bc8fe09bb40a46357d0a83365ad113e1", "filename": "src/test/ui/parser/labeled-no-colon-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -70,7 +70,7 @@ LL |             'l5 $b;\n LL |     m!({});\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: labeled expression must be followed by `:`\n   --> $DIR/labeled-no-colon-expr.rs:16:8"}, {"sha": "f9f53e65d7bf0dd1b2ab4e64767d7cea22498431", "filename": "src/test/ui/parser/macro/issue-37113.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37113.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |             $( $t, )*\n LL |     test_macro!(String,);\n    |     --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f0ec79e53574a1ad5939ee8647d71ad61c02d5c7", "filename": "src/test/ui/parser/macro/issue-37234.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-37234.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         let x = 5 \"\";\n LL |     failed!();\n    |     ---------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `failed` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "186b22dce9a585b1fe101b96ebacd1ca3f3a7046", "filename": "src/test/ui/parser/macro/macro-incomplete-parse.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-incomplete-parse.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -18,7 +18,7 @@ LL |     () => ( 1,\n LL |     ignored_expr!();\n    |     ---------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ignored_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: macro expansion ignores token `,` and any following\n   --> $DIR/macro-incomplete-parse.rs:16:14"}, {"sha": "0b81d2074b6f1d1f6c13ca0e8e1676330ed1c01f", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     pub_x!();\n    |     --------- in this macro invocation\n    |\n    = help: try adjusting the macro to put `pub` inside the invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pub_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0603]: static `x` is private\n   --> $DIR/pub-item-macro.rs:20:23\n@@ -24,7 +24,7 @@ LL |         static x: u32 = 0;\n ...\n LL |     pub_x!();\n    |     --------- in this macro invocation\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "93403372bcb914dea61a7092ad79a606b76b0737", "filename": "src/test/ui/parser/missing-closing-angle-bracket-eq-constraint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-closing-angle-bracket-eq-constraint.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -32,7 +32,7 @@ LL |   let v : Vec<(u32,_) = vec![];\n    |       |\n    |       consider giving `v` the explicit type `Vec<T>`, where the type parameter `T` is specified\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0282]: type annotations needed for `Vec<T>`\n   --> $DIR/missing-closing-angle-bracket-eq-constraint.rs:18:20\n@@ -42,7 +42,7 @@ LL |   let v : Vec<'a = vec![];\n    |       |\n    |       consider giving `v` the explicit type `Vec<T>`, where the type parameter `T` is specified\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "68f0f440c46b923585394963b72c45c9cdb208eb", "filename": "src/test/ui/parser/missing-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmissing-semicolon.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         $( let x = $e1 )*;\n LL | fn main() { m!(0, 0; 0, 0); }\n    |             --------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "88a77adcd31cdc02013f18bdd667c7a832b59f2c", "filename": "src/test/ui/parser/mut-patterns.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmut-patterns.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -108,7 +108,7 @@ LL |             let mut $p = 0;\n LL |     foo!(x);\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 13 previous errors\n "}, {"sha": "3236ef0db2837d11494abf7943f5e52ec4e877d8", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -167,7 +167,7 @@ LL |             let ...$e;\n LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:154:19\n@@ -179,7 +179,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0586]: inclusive range with no end\n   --> $DIR/recover-range-pats.rs:155:19\n@@ -191,7 +191,7 @@ LL |     mac!(0);\n    |     -------- in this macro invocation\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `...` range patterns are deprecated\n   --> $DIR/recover-range-pats.rs:42:13\n@@ -281,7 +281,7 @@ LL |     mac2!(0, 1);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n    = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:20:12"}, {"sha": "06b6e80b44f7aca098b99fe304306199f019690b", "filename": "src/test/ui/pattern/rest-pat-semantic-disallowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Frest-pat-semantic-disallowed.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     let mk_pat!();\n    |         --------- in this macro invocation\n    |\n    = note: only allowed in tuple, tuple struct, and slice patterns\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mk_pat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `..` patterns are not allowed here\n   --> $DIR/rest-pat-semantic-disallowed.rs:18:9"}, {"sha": "08b282e1870deb64349e0240a41a28a72af950c7", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         let value = Pub::method;\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_nominal::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:15:9\n@@ -18,7 +18,7 @@ LL |         value;\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_nominal::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is private\n   --> $DIR/associated-item-privacy-inherent.rs:17:13\n@@ -29,7 +29,7 @@ LL |         Pub.method();\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_nominal::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: associated constant `CONST` is private\n   --> $DIR/associated-item-privacy-inherent.rs:19:9\n@@ -40,7 +40,7 @@ LL |         Pub::CONST;\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_nominal::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:37:21\n@@ -51,7 +51,7 @@ LL |         let value = Pub::method;\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_signature::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:39:9\n@@ -62,7 +62,7 @@ LL |         value;\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_signature::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:41:13\n@@ -73,7 +73,7 @@ LL |         Pub.method(loop {});\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_signature::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:57:21\n@@ -84,7 +84,7 @@ LL |         let value = Pub::method::<Priv>;\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:59:9\n@@ -95,7 +95,7 @@ LL |         value;\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:61:9\n@@ -106,7 +106,7 @@ LL |         Pub.method::<Priv>();\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:80:21\n@@ -117,7 +117,7 @@ LL |         let value = <Pub>::method;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:82:9\n@@ -128,7 +128,7 @@ LL |         value;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:84:21\n@@ -139,7 +139,7 @@ LL |         let value = Pub::method;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:86:9\n@@ -150,7 +150,7 @@ LL |         value;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:88:21\n@@ -161,7 +161,7 @@ LL |         let value = <Pub>::static_method;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:90:9\n@@ -172,7 +172,7 @@ LL |         value;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:92:21\n@@ -183,7 +183,7 @@ LL |         let value = Pub::static_method;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:94:9\n@@ -194,7 +194,7 @@ LL |         value;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:96:19\n@@ -205,7 +205,7 @@ LL |         Pub(Priv).method();\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:99:10\n@@ -216,7 +216,7 @@ LL |         <Pub>::CONST;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:101:9\n@@ -227,7 +227,7 @@ LL |         Pub::CONST;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 21 previous errors\n "}, {"sha": "3a42415e4746c9d3347f99cd49fd4596fb24c212", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         let value = <Pub as PrivTr>::method;\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as PrivTr>::method}` is private\n   --> $DIR/associated-item-privacy-trait.rs:17:9\n@@ -18,7 +18,7 @@ LL |         value;\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r Self) {<Self as PrivTr>::method}` is private\n   --> $DIR/associated-item-privacy-trait.rs:19:13\n@@ -29,7 +29,7 @@ LL |         Pub.method();\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: associated constant `<Pub as PrivTr>::CONST` is private\n   --> $DIR/associated-item-privacy-trait.rs:21:9\n@@ -40,7 +40,7 @@ LL |         <Pub as PrivTr>::CONST;\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: associated type `<Pub as PrivTr>::AssocTy` is private\n   --> $DIR/associated-item-privacy-trait.rs:23:16\n@@ -51,7 +51,7 @@ LL |         let _: <Pub as PrivTr>::AssocTy;\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:34\n@@ -62,7 +62,7 @@ LL |         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:27:34\n@@ -73,7 +73,7 @@ LL |         pub trait InSignatureTr: PrivTr {}\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:29:14\n@@ -84,7 +84,7 @@ LL |         impl PrivTr for u8 {}\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:46:21\n@@ -95,7 +95,7 @@ LL |         let value = <Pub as PubTr>::method;\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_signature::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:48:9\n@@ -106,7 +106,7 @@ LL |         value;\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_signature::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:50:13\n@@ -117,7 +117,7 @@ LL |         Pub.method(loop {});\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_signature::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:67:21\n@@ -128,7 +128,7 @@ LL |         let value = <Pub as PubTr>::method::<Priv>;\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:69:9\n@@ -139,7 +139,7 @@ LL |         value;\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:71:9\n@@ -150,7 +150,7 @@ LL |         Pub.method::<Priv>();\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:91:21\n@@ -161,7 +161,7 @@ LL |         let value = <Pub as PubTr>::method;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:93:9\n@@ -172,7 +172,7 @@ LL |         value;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:95:21\n@@ -183,7 +183,7 @@ LL |         let value = <Pub as PubTr<_>>::method;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:97:9\n@@ -194,7 +194,7 @@ LL |         value;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:99:9\n@@ -205,7 +205,7 @@ LL |         Pub.method();\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:102:21\n@@ -216,7 +216,7 @@ LL |         let value = <Priv as PubTr<_>>::method;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:104:9\n@@ -227,7 +227,7 @@ LL |         value;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:106:9\n@@ -238,7 +238,7 @@ LL |         Priv.method();\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:109:9\n@@ -249,7 +249,7 @@ LL |         <Pub as PubTr>::CONST;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:111:9\n@@ -260,7 +260,7 @@ LL |         <Pub as PubTr<_>>::CONST;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:113:9\n@@ -271,7 +271,7 @@ LL |         <Priv as PubTr<_>>::CONST;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:117:30\n@@ -282,7 +282,7 @@ LL |         let _: <Pub as PubTr<_>>::AssocTy;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:17\n@@ -293,7 +293,7 @@ LL |         let _: <Priv as PubTr<_>>::AssocTy;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:122:35\n@@ -304,7 +304,7 @@ LL |         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:124:35\n@@ -315,7 +315,7 @@ LL |         pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:126:14\n@@ -326,7 +326,7 @@ LL |         impl PubTr for u8 {}\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 30 previous errors\n "}, {"sha": "c275413b4501a3eaaede1cba26ace872ef0cda01", "filename": "src/test/ui/privacy/associated-item-privacy-type-binding.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:16\n@@ -18,7 +18,7 @@ LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:14:31\n@@ -29,7 +29,7 @@ LL |         type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:16:31\n@@ -40,7 +40,7 @@ LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac1` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:13\n@@ -51,7 +51,7 @@ LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:16\n@@ -62,7 +62,7 @@ LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:23:31\n@@ -73,7 +73,7 @@ LL |         type InSignatureTy1 = Box<dyn PrivTr<AssocTy = u8>>;\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:25:31\n@@ -84,7 +84,7 @@ LL |         trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_trait::mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:13\n@@ -95,7 +95,7 @@ LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:16\n@@ -106,7 +106,7 @@ LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:13\n@@ -117,7 +117,7 @@ LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:16\n@@ -128,7 +128,7 @@ LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:50:35\n@@ -139,7 +139,7 @@ LL |         pub type InSignatureTy1 = Box<dyn PubTrWithParam<AssocTy = u8>>;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:52:35\n@@ -150,7 +150,7 @@ LL |         pub type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:54:31\n@@ -161,7 +161,7 @@ LL |         trait InSignatureTr1: PubTrWithParam<AssocTy = u8> {}\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:56:31\n@@ -172,7 +172,7 @@ LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 16 previous errors\n "}, {"sha": "3cd4b4d26c80935b51e5ce9e2536da8a29ea1689", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,55 +4,55 @@ error: type `fn() {ext::priv_fn}` is private\n LL |     ext::m!();\n    |     ^^^^^^^^^^ private type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: static `PRIV_STATIC` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^ private static\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `ext::PrivEnum` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^ private type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn() {<u8 as ext::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^ private type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^ private type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> PubTupleStruct {PubTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^ private type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r Pub<u8>) {Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^ private type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `ext::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "c6bdb898f966d3115320229315d06aeecbdf8673", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -115,7 +115,7 @@ LL |         priv_fn;\n LL |     m::m!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `PrivEnum` is private\n   --> $DIR/private-inferred-type.rs:41:9\n@@ -126,7 +126,7 @@ LL |         PrivEnum::Variant;\n LL |     m::m!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn() {<u8 as PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type.rs:43:9\n@@ -137,7 +137,7 @@ LL |         <u8 as PrivTrait>::method;\n LL |     m::m!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> PrivTupleStruct {PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:45:9\n@@ -148,7 +148,7 @@ LL |         PrivTupleStruct;\n LL |     m::m!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> PubTupleStruct {PubTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:47:9\n@@ -159,7 +159,7 @@ LL |         PubTupleStruct;\n LL |     m::m!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r Pub<u8>) {Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type.rs:49:18\n@@ -170,7 +170,7 @@ LL |         Pub(0u8).priv_method();\n LL |     m::m!();\n    |     -------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trait `Trait` is private\n   --> $DIR/private-inferred-type.rs:118:5"}, {"sha": "ae48141fb313340bafd4c40f12317aba6da7761c", "filename": "src/test/ui/proc-macro/derive-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-bad.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: expected `:`, found `}`\n LL | #[derive(A)]\n    |          ^ expected `:`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `A` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc-macro derive produced unparseable tokens\n   --> $DIR/derive-bad.rs:6:10"}, {"sha": "4115fec86fbc84ca4ef0a155154fee2f551e1174", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -16,7 +16,7 @@ error: cannot find attribute `empty_helper` in this scope\n LL |             #[derive(GenHelperUse)]\n    |                      ^^^^^^^^^^^^\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `GenHelperUse` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot find attribute `empty_helper` in this scope\n   --> $DIR/derive-helper-shadowing.rs:14:11\n@@ -27,7 +27,7 @@ LL |         #[empty_helper]\n LL |             gen_helper_use!();\n    |             ------------------ in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_helper_use` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `empty_helper` is ambiguous (name vs any other name during import resolution)\n   --> $DIR/derive-helper-shadowing.rs:26:13"}, {"sha": "8b16ffb76f26fc1e419cba16fad42760f5ddc5ae", "filename": "src/test/ui/proc-macro/expand-to-unstable-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: attributes starting with `rustc` are reserved for use by the `rustc` comp\n LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Unstable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b27dcd7e6cdba7134f25cbf04bd7493fd52883ba", "filename": "src/test/ui/proc-macro/expand-to-unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fexpand-to-unstable.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL | #[derive(Unstable)]\n    |          ^^^^^^^^\n    |\n    = help: add `#![feature(core_intrinsics)]` to the crate attributes to enable\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Unstable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b16b24b9dc673fafcaa3463debb621caf097cae3", "filename": "src/test/ui/proc-macro/gen-macro-rules-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgen-macro-rules-hygiene.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL | gen_macro_rules!();\n LL |         generated!();\n    |         ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generated` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:12:1\n@@ -18,7 +18,7 @@ LL | gen_macro_rules!();\n LL |         generated!();\n    |         ------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generated` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/gen-macro-rules-hygiene.rs:21:9"}, {"sha": "285876aadb2932dec176b5ad8f3243adf277ea76", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | generate_mod::check!();\n    |\n    = note: consider importing this struct:\n            FromOutside\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_mod::check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `Outer` in this scope\n   --> $DIR/generate-mod.rs:9:1\n@@ -16,7 +16,7 @@ LL | generate_mod::check!();\n    |\n    = note: consider importing this struct:\n            Outer\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `generate_mod::check` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:12:1\n@@ -26,7 +26,7 @@ LL | #[generate_mod::check_attr]\n    |\n    = note: consider importing this struct:\n            FromOutside\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0412]: cannot find type `OuterAttr` in this scope\n   --> $DIR/generate-mod.rs:12:1\n@@ -36,7 +36,7 @@ LL | #[generate_mod::check_attr]\n    |\n    = note: consider importing this struct:\n            OuterAttr\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `generate_mod::check_attr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:16:10\n@@ -47,7 +47,7 @@ LL | #[derive(generate_mod::CheckDerive)]\n    = note: `#[warn(proc_macro_derive_resolution_fallback)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:16:10\n@@ -57,7 +57,7 @@ LL | #[derive(generate_mod::CheckDerive)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: cannot find type `FromOutside` in this scope\n   --> $DIR/generate-mod.rs:23:14\n@@ -67,7 +67,7 @@ LL |     #[derive(generate_mod::CheckDerive)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: cannot find type `OuterDerive` in this scope\n   --> $DIR/generate-mod.rs:23:14\n@@ -77,7 +77,7 @@ LL |     #[derive(generate_mod::CheckDerive)]\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83583 <https://github.com/rust-lang/rust/issues/83583>\n-   = note: this warning originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the derive macro `generate_mod::CheckDerive` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors; 4 warnings emitted\n "}, {"sha": "e764480e8e548b881f8fa0ba37aee390933d65be", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL |     impl_macros!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: using an old version of `time-macros-impl`\n   --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n@@ -29,7 +29,7 @@ LL |     impl_macros!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: using an old version of `js-sys`\n   --> $DIR/js-sys-0.3.17/src/lib.rs:5:32\n@@ -45,7 +45,7 @@ LL |     arrays!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: using an old version of `actix-web`\n   --> $DIR/actix-web/src/extract.rs:5:34\n@@ -61,7 +61,7 @@ LL |     tuple_from_req!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: using an old version of `actix-web`\n   --> $DIR/actix-web-2.0.0/src/extract.rs:5:34\n@@ -77,7 +77,7 @@ LL |     tuple_from_req!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 5 warnings emitted\n \n@@ -97,7 +97,7 @@ LL |     impl_macros!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage date: None, diagnostic:\n warning: using an old version of `time-macros-impl`\n@@ -114,7 +114,7 @@ LL |     impl_macros!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `impl_macros` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage date: None, diagnostic:\n warning: using an old version of `js-sys`\n@@ -131,7 +131,7 @@ LL |     arrays!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: older versions of the `js-sys` crate will stop compiling in future versions of Rust; please update to `js-sys` v0.3.40 or above\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `arrays` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage date: None, diagnostic:\n warning: using an old version of `actix-web`\n@@ -148,7 +148,7 @@ LL |     tuple_from_req!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage date: None, diagnostic:\n warning: using an old version of `actix-web`\n@@ -165,5 +165,5 @@ LL |     tuple_from_req!(Foo);\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n    = note: the version of `actix-web` you are using might stop compiling in future versions of Rust; please update to the latest version of the `actix-web` crate to avoid breakage\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `tuple_from_req` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "59cf767c559599f75c0ca47128df9a4408f2d8b4", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: unexpected closing delimiter: `)`\n LL | lexer_failure!();\n    | ^^^^^^^^^^^^^^^^^ unexpected closing delimiter\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `lexer_failure` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc macro panicked\n   --> $DIR/invalid-punct-ident-4.rs:6:1"}, {"sha": "ddd0a0874dd3e17eca93713a18a4786efb2a20d0", "filename": "src/test/ui/proc-macro/issue-38586.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-38586.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-38586.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-38586.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find value `foo` in this scope\n LL | #[derive(A)]\n    |          ^ not found in this scope\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `A` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "126c52db548f7db96dad562bd76a6b6bd8c964d9", "filename": "src/test/ui/proc-macro/issue-59191-replace-root-with-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-59191-replace-root-with-fn.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: expected crate top-level item to be a module after macro expansion, found\n LL | #![issue_59191::no_main]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `issue_59191::no_main` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "040ace9160f624870e4b879550475d9b10322434", "filename": "src/test/ui/proc-macro/issue-83510.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-83510.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,23 +4,23 @@ error[E0412]: cannot find type `Foo` in this scope\n LL | issue_83510::dance_like_you_want_to_ice!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `issue_83510::dance_like_you_want_to_ice` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0404]: expected trait, found struct `Box`\n   --> $DIR/issue-83510.rs:5:1\n    |\n LL | issue_83510::dance_like_you_want_to_ice!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a trait\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `issue_83510::dance_like_you_want_to_ice` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0405]: cannot find trait `Baz` in this scope\n   --> $DIR/issue-83510.rs:5:1\n    |\n LL | issue_83510::dance_like_you_want_to_ice!();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `issue_83510::dance_like_you_want_to_ice` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0658]: inherent associated types are unstable\n   --> $DIR/issue-83510.rs:5:1\n@@ -30,7 +30,7 @@ LL | issue_83510::dance_like_you_want_to_ice!();\n    |\n    = note: see issue #8995 <https://github.com/rust-lang/rust/issues/8995> for more information\n    = help: add `#![feature(inherent_associated_types)]` to the crate attributes to enable\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `issue_83510::dance_like_you_want_to_ice` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0c99809ed5c13ec57b515c65b8e39bebf4f5df24", "filename": "src/test/ui/proc-macro/lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL | type A = single_quote_alone!();\n    |          expected type\n    |          this macro call doesn't expand to a type\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `single_quote_alone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f36f937fc06b82ba7a97271f4e67ec8eecc7c95a", "filename": "src/test/ui/proc-macro/lints_in_proc_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flints_in_proc_macros.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0425]: cannot find value `foobar2` in this scope\n LL |     bang_proc_macro2!();\n    |     ^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name exists: `foobar`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `bang_proc_macro2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "85766548bff2ac6226a3bd9ce06015f9c53b945b", "filename": "src/test/ui/proc-macro/macro-rules-derive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-rules-derive.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |             field: MissingType\n LL | produce_it!(MyName);\n    | -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `produce_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "c8ed20d30c911bbe58d72984609d98c5a936bc94", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,15 +4,15 @@ error[E0426]: use of undeclared label `'label_use`\n LL |         proc_macro_rules!();\n    |         ^^^^^^^^^^^^^^^^^^^^ undeclared label `'label_use`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_use` in this scope\n   --> $DIR/mixed-site-span.rs:13:9\n    |\n LL |         proc_macro_rules!();\n    |         ^^^^^^^^^^^^^^^^^^^^ not found in this scope\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `local_def` in this scope\n   --> $DIR/mixed-site-span.rs:17:9\n@@ -26,7 +26,7 @@ error[E0412]: cannot find type `ItemUse` in crate `$crate`\n LL | pass_dollar_crate!();\n    | ^^^^^^^^^^^^^^^^^^^^^ not found in `$crate`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d37df81496c387fac89c791bca9d9910b96313d7", "filename": "src/test/ui/proc-macro/multispan.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi);\n    |            ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/multispan.rs:15:5\n@@ -22,7 +22,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi hi);\n    |            ^^ ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/multispan.rs:18:5\n@@ -35,7 +35,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi hi hi);\n    |            ^^ ^^ ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/multispan.rs:21:5\n@@ -48,7 +48,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi hey hi yo hi beep beep hi hi);\n    |            ^^     ^^    ^^           ^^ ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/multispan.rs:22:5\n@@ -61,7 +61,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi there, hi how are you? hi... hi.);\n    |            ^^        ^^              ^^    ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/multispan.rs:23:5\n@@ -74,7 +74,7 @@ note: found these 'hi's\n    |\n LL |     hello!(whoah. hi di hi di ho);\n    |                   ^^    ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: hello to you, too!\n   --> $DIR/multispan.rs:24:5\n@@ -87,7 +87,7 @@ note: found these 'hi's\n    |\n LL |     hello!(hi good hi and good bye);\n    |            ^^      ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors\n "}, {"sha": "0af1b4a182295daa91afeb1960c7e38a58394eb4", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |     three!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"world\"\n   --> $DIR/parent-source-spans.rs:16:16\n@@ -18,7 +18,7 @@ LL |     three!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"hello\"\n   --> $DIR/parent-source-spans.rs:10:5\n@@ -29,7 +29,7 @@ LL |     two!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second parent: \"world\"\n   --> $DIR/parent-source-spans.rs:10:5\n@@ -40,7 +40,7 @@ LL |     two!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first grandparent: \"hello\"\n   --> $DIR/parent-source-spans.rs:36:5\n@@ -75,7 +75,7 @@ LL |     three!($a, $b);\n LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"rust\"\n   --> $DIR/parent-source-spans.rs:16:16\n@@ -86,7 +86,7 @@ LL |     three!($a, $b);\n LL |     two!(\"yay\", \"rust\");\n    |     -------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"yay\"\n   --> $DIR/parent-source-spans.rs:42:5\n@@ -150,7 +150,7 @@ LL |     one!(\"hello\", \"world\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:29:5\n@@ -166,7 +166,7 @@ LL |     two!(\"yay\", \"rust\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:29:5\n@@ -182,7 +182,7 @@ LL |     three!(\"hip\", \"hop\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     --------------------------------------------------- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 21 previous errors\n "}, {"sha": "ee6dffe93edce7fcb9c3c442b0b648537c6d2def", "filename": "src/test/ui/proc-macro/raw-ident.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found\n LL |     make_bad_struct!(S);\n    |     ^^^^^^^^^^^^^^^^^^^^ expected one of 8 possible tokens\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `make_bad_struct` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "422820e9d8bd5068112d82fbc78eb43b590109f4", "filename": "src/test/ui/proc-macro/resolved-located-at.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolved-located-at.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error: expected error\n LL |     resolve_located_at!(a b)\n    |                         ^\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `resolve_located_at` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/resolved-located-at.rs:7:27\n@@ -14,7 +14,7 @@ LL | fn main() {\n LL |     resolve_located_at!(a b)\n    |                           ^ expected `()`, found struct `S`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `resolve_located_at` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d65b1d0cfaf56cdd23954998674893d4776880aa", "filename": "src/test/ui/proc-macro/subspan.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -9,7 +9,7 @@ note: here\n    |\n LL | subspan!(\"hi\");\n    |           ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:14:1\n@@ -22,7 +22,7 @@ note: here\n    |\n LL | subspan!(\"hihi\");\n    |           ^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:17:1\n@@ -35,7 +35,7 @@ note: here\n    |\n LL | subspan!(\"hihihi\");\n    |           ^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:20:1\n@@ -48,7 +48,7 @@ note: here\n    |\n LL | subspan!(\"why I hide? hi!\");\n    |                 ^^    ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:21:1\n@@ -61,7 +61,7 @@ note: here\n    |\n LL | subspan!(\"hey, hi, hidy, hidy, hi hi\");\n    |                ^^  ^^    ^^    ^^ ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:22:1\n@@ -74,7 +74,7 @@ note: here\n    |\n LL | subspan!(\"this is a hi, and this is another hi\");\n    |            ^^       ^^       ^^             ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:23:1\n@@ -87,7 +87,7 @@ note: here\n    |\n LL | subspan!(\"how are you this evening\");\n    |                        ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: found 'hi's\n   --> $DIR/subspan.rs:24:1\n@@ -100,7 +100,7 @@ note: here\n    |\n LL | subspan!(\"this is highly eradic\");\n    |            ^^     ^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `subspan` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n "}, {"sha": "485aefe62fd5806a9950a0c1f92c28d6d3325fd0", "filename": "src/test/ui/proc-macro/three-equals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -5,7 +5,7 @@ LL |     three_equals!(==);\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: input must be: `===`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `three_equals` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected EOF, found `=`.\n   --> $DIR/three-equals.rs:15:21"}, {"sha": "03a984c58ceb84c637f5af220032762e2d0c076d", "filename": "src/test/ui/proc-macro/weird-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |             Value = (stringify!($tokens + hidden_ident), 1).1\n LL |     other!(50);\n    |     ----------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `hidden_ident` in this scope\n   --> $DIR/weird-hygiene.rs:34:13\n@@ -18,7 +18,7 @@ LL |             hidden_ident\n LL |     invoke_it!(25);\n    |     --------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `invoke_it` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bc4c9a04b5e4b3aff82dc4c45dbe8362763a5f8a", "filename": "src/test/ui/range/range_traits-1.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-1.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL |     a: Range<usize>,\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::Range<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeTo<usize>` with `std::ops::RangeTo<usize>`\n   --> $DIR/range_traits-1.rs:8:5\n@@ -16,7 +16,7 @@ LL |     b: RangeTo<usize>,\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeTo<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFrom<usize>` with `std::ops::RangeFrom<usize>`\n   --> $DIR/range_traits-1.rs:11:5\n@@ -26,7 +26,7 @@ LL |     c: RangeFrom<usize>,\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFrom<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeFull` with `std::ops::RangeFull`\n   --> $DIR/range_traits-1.rs:14:5\n@@ -36,7 +36,7 @@ LL |     d: RangeFull,\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeFull`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeInclusive<usize>` with `std::ops::RangeInclusive<usize>`\n   --> $DIR/range_traits-1.rs:17:5\n@@ -46,7 +46,7 @@ LL |     e: RangeInclusive<usize>,\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: can't compare `std::ops::RangeToInclusive<usize>` with `std::ops::RangeToInclusive<usize>`\n   --> $DIR/range_traits-1.rs:20:5\n@@ -56,7 +56,7 @@ LL |     f: RangeToInclusive<usize>,\n    |\n    = help: the trait `PartialOrd` is not implemented for `std::ops::RangeToInclusive<usize>`\n    = note: required by `std::cmp::PartialOrd::partial_cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::Range<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:5:5\n@@ -65,7 +65,7 @@ LL |     a: Range<usize>,\n    |     ^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::Range<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeTo<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:8:5\n@@ -74,7 +74,7 @@ LL |     b: RangeTo<usize>,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeTo<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFrom<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:11:5\n@@ -83,7 +83,7 @@ LL |     c: RangeFrom<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFrom<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeFull: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:14:5\n@@ -92,7 +92,7 @@ LL |     d: RangeFull,\n    |     ^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeFull`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeInclusive<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:17:5\n@@ -101,7 +101,7 @@ LL |     e: RangeInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeInclusive<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `std::ops::RangeToInclusive<usize>: Ord` is not satisfied\n   --> $DIR/range_traits-1.rs:20:5\n@@ -110,7 +110,7 @@ LL |     f: RangeToInclusive<usize>,\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Ord` is not implemented for `std::ops::RangeToInclusive<usize>`\n    |\n    = note: required by `std::cmp::Ord::cmp`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors\n "}, {"sha": "61facba535bfff97ae74d49328ef3a0de8b26d03", "filename": "src/test/ui/range/range_traits-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-2.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Copy, Clone)]\n LL | struct R(Range<usize>);\n    |          ------------ this field does not implement `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "e54d17b329ec5989bd05c08af6ae7e61631bfc61", "filename": "src/test/ui/range/range_traits-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-3.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Copy, Clone)]\n LL | struct R(RangeFrom<usize>);\n    |          ---------------- this field does not implement `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "addc525f1fa36810543d19005cfa9afdb3e60176", "filename": "src/test/ui/range/range_traits-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frange%2Frange_traits-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange_traits-6.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | #[derive(Copy, Clone)]\n LL | struct R(RangeInclusive<usize>);\n    |          --------------------- this field does not implement `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0192f4359e590b4d9da8507521a70ca3d897a9bf", "filename": "src/test/ui/reachable/expr_again.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_again.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4ed84c566a772296194ba911117cde374c5a700e", "filename": "src/test/ui/reachable/expr_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_block.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -20,7 +20,7 @@ LL |         return;\n LL |         println!(\"foo\");\n    |         ^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "71cc94be3ee44f84e13cf59e18a69db7db8dc797", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -24,7 +24,7 @@ LL |         return;\n LL |     println!(\"But I am.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d6c140375e3c72c25d9de3427b0bc9249cee535d", "filename": "src/test/ui/reachable/expr_loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_loop.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:21:5\n@@ -21,7 +21,7 @@ LL |     loop { return; }\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_loop.rs:32:5\n@@ -31,7 +31,7 @@ LL |     loop { 'middle: loop { loop { break 'middle; } } }\n LL |     println!(\"I am dead.\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "9d660a43866de9485a96a1a72f0bba16e3ec5622", "filename": "src/test/ui/reachable/expr_match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_match.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: unreachable statement\n   --> $DIR/expr_match.rs:19:5\n@@ -21,7 +21,7 @@ LL |     match () { () if false => return, () => return }\n LL |     println!(\"I am dead\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^ unreachable statement\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "839b585c63f2679a1267ed9777fdf04d7c36dbb1", "filename": "src/test/ui/reachable/unreachable-code-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Funreachable-code-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Freachable%2Funreachable-code-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-code-ret.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -11,7 +11,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0aa0610de74d9b66871581a43bb6f1fc7dc1f045", "filename": "src/test/ui/resolve/issue-82865.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fresolve%2Fissue-82865.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fresolve%2Fissue-82865.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-82865.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ LL |     Box::z\n LL |     mac!();\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1949e762873761067502b20afd4462e50270cf29", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -12,7 +12,7 @@ LL |   pub fn assert_test_result<T: Termination>(result: T) {\n    |                                ----------- required by this bound in `assert_test_result`\n    |\n    = help: the trait `Termination` is not implemented for `Result<f32, ParseFloatError>`\n-   = note: this error originates in an attribute macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "850ca30405ff1025a6358802c7d2236b9e04d1f3", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -8,7 +8,7 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    = note: add `#[derive(Debug)]` or manually implement `Debug`\n    = note: required because of the requirements on the impl of `Debug` for `&NotDebug`\n    = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "7819a2588e8a6b184225847f865b43424cbdc0a7", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros-nested.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -17,7 +17,7 @@ LL | |             }\n LL |       m!();\n    |       ----- in this macro invocation\n    = help: use `self::std` to refer to this module unambiguously\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "54f28113cba52f785833198382a2eb7284e0e0c2", "filename": "src/test/ui/rust-2018/uniform-paths/ambiguity-macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fambiguity-macros.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -17,7 +17,7 @@ LL | |         }\n LL |   m!();\n    |   ----- in this macro invocation\n    = help: use `crate::std` to refer to this module unambiguously\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "07253a4ae46bc44ad98bfdf796e62aea1858e460", "filename": "src/test/ui/simd/shuffle-not-out-of-bounds.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fshuffle-not-out-of-bounds.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -7,7 +7,7 @@ LL |                     $y(vec1, vec2, ARR)\n LL |     test_shuffle_lanes!(2, u8x2, simd_shuffle2, (2, 1));\n    |     ---------------------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: shuffle index #0 is out of bounds (limit 8)\n   --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n@@ -18,7 +18,7 @@ LL |                     $y(vec1, vec2, ARR)\n LL |     test_shuffle_lanes!(4, u8x4, simd_shuffle4, (4, 3, 2, 1));\n    |     ---------------------------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: shuffle index #0 is out of bounds (limit 16)\n   --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n@@ -29,7 +29,7 @@ LL |                     $y(vec1, vec2, ARR)\n LL |     test_shuffle_lanes!(8, u8x8, simd_shuffle8, (8, 7, 6, 5, 4, 3, 2, 1));\n    |     ---------------------------------------------------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle16` intrinsic: shuffle index #0 is out of bounds (limit 32)\n   --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n@@ -41,7 +41,7 @@ LL | /     test_shuffle_lanes!(16, u8x16, simd_shuffle16,\n LL | |         (16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n    | |_________________________________________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle32` intrinsic: shuffle index #0 is out of bounds (limit 64)\n   --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n@@ -54,7 +54,7 @@ LL | |         (32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n LL | |          15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n    | |_____________________________________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0511]: invalid monomorphization of `simd_shuffle64` intrinsic: shuffle index #0 is out of bounds (limit 128)\n   --> $DIR/shuffle-not-out-of-bounds.rs:163:21\n@@ -69,7 +69,7 @@ LL | |          32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,\n LL | |          16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1));\n    | |_________________________________________________________________- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `test_shuffle_lanes` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2575848435206033d4f027dec5a5234da36ca4ee", "filename": "src/test/ui/span/E0204.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2FE0204.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0204.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -16,7 +16,7 @@ LL | struct Foo2<'a> {\n LL |     ty: &'a mut bool,\n    |     ---------------- this field does not implement `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0204]: the trait `Copy` may not be implemented for this type\n   --> $DIR/E0204.rs:17:6\n@@ -36,7 +36,7 @@ LL | enum EFoo2<'a> {\n LL |     Bar(&'a mut bool),\n    |         ------------ this field does not implement `Copy`\n    |\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "0e40ca67351e7c7aecf0bd91c0ce939a5d59539c", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n LL |     s = format!(\"foo\");\n    |         ^^^^^^^^^^^^^^ expected `&mut String`, found struct `String`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "aee1530851773aaa55c7cba4061fd453b9856667", "filename": "src/test/ui/span/issue-33884.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-33884.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     stream.write_fmt(format!(\"message received\"))\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Arguments`, found struct `String`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "afdf036f833b11571e89e7d866a0ee8da8107f25", "filename": "src/test/ui/span/macro-span-replacement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmacro-span-replacement.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -13,7 +13,7 @@ note: the lint level is defined here\n LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n-   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: 1 warning emitted\n "}, {"sha": "62a4a6009d433780516a3ff835ca8712b89e6704", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -10,7 +10,7 @@ LL |     y.use_ref();\n    |     - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "59e7cfc6f085ffb0bdf5f9ff8bf519d33abf57f5", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0dd9f118d973bb077c6ff0e2a57421ca2eecb81c/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=0dd9f118d973bb077c6ff0e2a57421ca2eecb81c", "patch": "@@ -6,7 +6,7 @@ LL | |         \"abc\"\n LL | |     };\n    | |______^ expected `&str`, found struct `String`\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}