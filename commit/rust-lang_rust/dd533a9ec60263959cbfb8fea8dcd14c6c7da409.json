{"sha": "dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNTMzYTllYzYwMjYzOTU5Y2JmYjhmZWE4ZGNkMTRjNmM3ZGE0MDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-26T21:41:08Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-04T01:10:47Z"}, "message": "Revert \"disable validation code so that it all compiles against current nightly\"\n\nThis reverts commit 791dbaf58402ef87c16485be8d8ee37b5aa1dda3.", "tree": {"sha": "255af9d0e290ab4e54db5d683ea023959592ec02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255af9d0e290ab4e54db5d683ea023959592ec02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "html_url": "https://github.com/rust-lang/rust/commit/dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "726b027ba3d2658d1a7796f46ea404c7299b7c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/726b027ba3d2658d1a7796f46ea404c7299b7c0c", "html_url": "https://github.com/rust-lang/rust/commit/726b027ba3d2658d1a7796f46ea404c7299b7c0c"}], "stats": {"total": 46, "additions": 11, "deletions": 35}, "files": [{"sha": "76a9b3d0e051aa82095bfae0c626203b5204069d", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "patch": "@@ -202,6 +202,7 @@ fn main() {\n \n     // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n+    args.push(\"-Zmir-emit-validate\".to_owned());\n \n     rustc_driver::run_compiler(&args, &mut MiriCompilerCalls(RustcDefaultCalls), None, None);\n }"}, {"sha": "afbdc95fa82372e726f6a65934070ae42927b3b4", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "patch": "@@ -37,8 +37,6 @@ pub struct EvalContext<'a, 'tcx: 'a, M: Machine<'tcx>> {\n     /// The virtual memory system.\n     pub memory: Memory<'a, 'tcx, M>,\n \n-    #[allow(dead_code)]\n-    // FIXME(@RalfJung): validation branch\n     /// Lvalues that were suspended by the validation subsystem, and will be recovered later\n     pub(crate) suspended: HashMap<DynamicLifetime, Vec<ValidationQuery<'tcx>>>,\n "}, {"sha": "b200ece4ccf9c2c6f670bcebc5e2427e9e423b53", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "patch": "@@ -35,8 +35,6 @@ mod range {\n     }\n \n     impl MemoryRange {\n-        #[allow(dead_code)]\n-        // FIXME(@RalfJung): validation branch\n         pub fn new(offset: u64, len: u64) -> MemoryRange {\n             assert!(len > 0);\n             MemoryRange {\n@@ -61,8 +59,6 @@ mod range {\n             left..right\n         }\n \n-        #[allow(dead_code)]\n-        // FIXME(@RalfJung): validation branch\n         pub fn contained_in(&self, offset: u64, len: u64) -> bool {\n             assert!(len > 0);\n             offset <= self.start && self.end <= (offset + len)\n@@ -143,8 +139,6 @@ impl<M> Allocation<M> {\n             .filter(move |&(range, _)| range.overlaps(offset, len))\n     }\n \n-    #[allow(dead_code)]\n-    // FIXME(@RalfJung): validation branch\n     fn iter_locks_mut<'a>(&'a mut self, offset: u64, len: u64) -> impl Iterator<Item=(&'a MemoryRange, &'a mut LockInfo)> + 'a {\n         self.locks.range_mut(MemoryRange::range(offset, len))\n             .filter(move |&(range, _)| range.overlaps(offset, len))\n@@ -474,8 +468,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n             .map_err(|lock| EvalErrorKind::MemoryLockViolation { ptr, len, frame, access, lock }.into())\n     }\n \n-    #[allow(dead_code)]\n-    // FIXME(@RalfJung): validation branch\n     /// Acquire the lock for the given lifetime\n     pub(crate) fn acquire_lock(&mut self, ptr: MemoryPointer, len: u64, region: Option<CodeExtent>, kind: AccessKind) -> EvalResult<'tcx> {\n         use std::collections::btree_map::Entry::*;\n@@ -504,8 +496,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         Ok(())\n     }\n \n-    #[allow(dead_code)]\n-    // FIXME(@RalfJung): validation branch\n     /// Release a write lock prematurely. If there's a read lock or someone else's lock, fail.\n     pub(crate) fn release_write_lock(&mut self, ptr: MemoryPointer, len: u64) -> EvalResult<'tcx> {\n         assert!(len > 0);"}, {"sha": "9b3bf3b13eab6cf28f3eb2d536fba7d86ebe778c", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "patch": "@@ -133,8 +133,15 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 self.deallocate_local(old_val)?;\n             }\n \n-            // NOPs for now.\n-            EndRegion(_ce) => {}\n+            // Validity checks.\n+            Validate(op, ref lvalues) => {\n+                for operand in lvalues {\n+                    self.validation_op(op, operand)?;\n+                }\n+            }\n+            EndRegion(ce) => {\n+                self.end_region(ce)?;\n+            }\n \n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly."}, {"sha": "f6986f2de053039e11b445202d4de99ab066a80e", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd533a9ec60263959cbfb8fea8dcd14c6c7da409/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=dd533a9ec60263959cbfb8fea8dcd14c6c7da409", "patch": "@@ -1,9 +1,6 @@\n-// code for @RalfJung's validation branch is dead for now\n-#![allow(dead_code)]\n-\n use rustc::hir::Mutability;\n use rustc::hir::Mutability::*;\n-use rustc::mir;\n+use rustc::mir::{self, ValidationOp, ValidationOperand};\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n@@ -19,23 +16,6 @@ use super::{\n     Machine,\n };\n \n-// FIXME remove this once it lands in rustc\n-#[derive(Copy, Clone, PartialEq, Eq)]\n-pub enum ValidationOp {\n-    Acquire,\n-    Release,\n-    Suspend(CodeExtent),\n-}\n-\n-#[derive(Clone, Debug)]\n-pub struct ValidationOperand<'tcx, T> {\n-    pub lval: T,\n-    pub ty: Ty<'tcx>,\n-    pub re: Option<CodeExtent>,\n-    pub mutbl: Mutability,\n-}\n-// FIXME end\n-\n pub type ValidationQuery<'tcx> = ValidationOperand<'tcx, Lvalue<'tcx>>;\n \n #[derive(Copy, Clone, Debug)]"}]}