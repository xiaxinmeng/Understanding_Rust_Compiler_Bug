{"sha": "5e7a1a12038f822df346c65de613cc01882ce656", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2ExYTEyMDM4ZjgyMmRmMzQ2YzY1ZGU2MTNjYzAxODgyY2U2NTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T10:01:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-24T10:01:17Z"}, "message": "Simplify", "tree": {"sha": "06b5b90816e7b4c53be24d70174a9be3a2fe382d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b5b90816e7b4c53be24d70174a9be3a2fe382d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7a1a12038f822df346c65de613cc01882ce656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7a1a12038f822df346c65de613cc01882ce656", "html_url": "https://github.com/rust-lang/rust/commit/5e7a1a12038f822df346c65de613cc01882ce656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7a1a12038f822df346c65de613cc01882ce656/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04fe512f0d3567727cfb9ccab166c5344716711a", "url": "https://api.github.com/repos/rust-lang/rust/commits/04fe512f0d3567727cfb9ccab166c5344716711a", "html_url": "https://github.com/rust-lang/rust/commit/04fe512f0d3567727cfb9ccab166c5344716711a"}], "stats": {"total": 85, "additions": 38, "deletions": 47}, "files": [{"sha": "05fb799d602a8e0c29de02e39ab21f5284cce55c", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=5e7a1a12038f822df346c65de613cc01882ce656", "patch": "@@ -573,10 +573,9 @@ mod tests {\n \n             impl Expr {\n                 fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-                    Expr::Bin { <|> }\n+                    Expr::Bin { }\n                 }\n             }\n-\n         \";\n         let after = r\"\n             enum Expr {\n@@ -585,10 +584,9 @@ mod tests {\n \n             impl Expr {\n                 fn new_bin(lhs: Box<Expr>, rhs: Box<Expr>) -> Expr {\n-                    Expr::Bin { lhs: (), rhs: () <|> }\n+                    Expr::Bin { lhs: (), rhs: () }\n                 }\n             }\n-\n         \";\n         check_apply_diagnostic_fix(before, after);\n     }"}, {"sha": "e3990cf188a0d37f9e12f69b04d4874f248f3a50", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 24, "deletions": 31, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=5e7a1a12038f822df346c65de613cc01882ce656", "patch": "@@ -3,35 +3,26 @@ use std::{str::FromStr, sync::Arc};\n \n use ra_cfg::CfgOptions;\n use ra_db::{CrateName, Env, FileSet, SourceRoot, VfsPath};\n-use test_utils::{extract_offset, extract_range, Fixture, CURSOR_MARKER};\n+use test_utils::{extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER};\n \n use crate::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, Edition, FileId, FilePosition, FileRange,\n };\n \n #[derive(Debug)]\n enum MockFileData {\n-    Plain { path: String, content: String },\n     Fixture(Fixture),\n }\n \n impl MockFileData {\n-    fn new(path: String, content: String) -> Self {\n-        // `Self::Plain` causes a false warning: 'variant is never constructed: `Plain` '\n-        // see https://github.com/rust-lang/rust/issues/69018\n-        MockFileData::Plain { path, content }\n-    }\n-\n     fn path(&self) -> &str {\n         match self {\n-            MockFileData::Plain { path, .. } => path.as_str(),\n             MockFileData::Fixture(f) => f.path.as_str(),\n         }\n     }\n \n     fn content(&self) -> &str {\n         match self {\n-            MockFileData::Plain { content, .. } => content,\n             MockFileData::Fixture(f) => f.text.as_str(),\n         }\n     }\n@@ -44,7 +35,6 @@ impl MockFileData {\n                 f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n                 cfg\n             }\n-            _ => CfgOptions::default(),\n         }\n     }\n \n@@ -53,14 +43,12 @@ impl MockFileData {\n             MockFileData::Fixture(f) => {\n                 f.edition.as_ref().map_or(Edition::Edition2018, |v| Edition::from_str(&v).unwrap())\n             }\n-            _ => Edition::Edition2018,\n         }\n     }\n \n     fn env(&self) -> Env {\n         match self {\n             MockFileData::Fixture(f) => Env::from(f.env.iter()),\n-            _ => Env::default(),\n         }\n     }\n }\n@@ -89,31 +77,38 @@ impl MockAnalysis {\n     /// //- /foo.rs\n     /// struct Baz;\n     /// ```\n-    pub fn with_files(fixture: &str) -> MockAnalysis {\n-        let mut res = MockAnalysis::default();\n-        for entry in Fixture::parse(fixture) {\n-            res.add_file_fixture(entry);\n-        }\n+    pub fn with_files(ra_fixture: &str) -> MockAnalysis {\n+        let (res, pos) = MockAnalysis::with_fixture(ra_fixture);\n+        assert!(pos.is_none());\n         res\n     }\n \n     /// Same as `with_files`, but requires that a single file contains a `<|>` marker,\n     /// whose position is also returned.\n     pub fn with_files_and_position(fixture: &str) -> (MockAnalysis, FilePosition) {\n+        let (res, position) = MockAnalysis::with_fixture(fixture);\n+        let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n+        let offset = match range_or_offset {\n+            RangeOrOffset::Range(_) => panic!(),\n+            RangeOrOffset::Offset(it) => it,\n+        };\n+        (res, FilePosition { file_id, offset })\n+    }\n+\n+    fn with_fixture(fixture: &str) -> (MockAnalysis, Option<(FileId, RangeOrOffset)>) {\n         let mut position = None;\n         let mut res = MockAnalysis::default();\n         for mut entry in Fixture::parse(fixture) {\n             if entry.text.contains(CURSOR_MARKER) {\n                 assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n-                let (offset, text) = extract_offset(&entry.text);\n+                let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n                 entry.text = text;\n                 let file_id = res.add_file_fixture(entry);\n-                position = Some(FilePosition { file_id, offset });\n+                position = Some((file_id, range_or_offset));\n             } else {\n                 res.add_file_fixture(entry);\n             }\n         }\n-        let position = position.expect(\"expected a marker (<|>)\");\n         (res, position)\n     }\n \n@@ -123,12 +118,6 @@ impl MockAnalysis {\n         file_id\n     }\n \n-    fn add_file_with_range(&mut self, path: &str, text: &str) -> FileRange {\n-        let (range, text) = extract_range(text);\n-        let file_id = self.next_id();\n-        self.files.push(MockFileData::new(path.to_string(), text));\n-        FileRange { file_id, range }\n-    }\n     pub fn id_of(&self, path: &str) -> FileId {\n         let (idx, _) = self\n             .files\n@@ -209,8 +198,12 @@ pub fn single_file(ra_fixture: &str) -> (Analysis, FileId) {\n }\n \n /// Creates analysis for a single file, returns range marked with a pair of <|>.\n-pub fn single_file_with_range(ra_fixture: &str) -> (Analysis, FileRange) {\n-    let mut mock = MockAnalysis::default();\n-    let pos = mock.add_file_with_range(\"/main.rs\", ra_fixture);\n-    (mock.analysis(), pos)\n+pub fn analysis_and_range(ra_fixture: &str) -> (Analysis, FileRange) {\n+    let (res, position) = MockAnalysis::with_fixture(ra_fixture);\n+    let (file_id, range_or_offset) = position.expect(\"expected a marker (<|>)\");\n+    let range = match range_or_offset {\n+        RangeOrOffset::Range(it) => it,\n+        RangeOrOffset::Offset(_) => panic!(),\n+    };\n+    (res.analysis(), FileRange { file_id, range })\n }"}, {"sha": "e3e0c763923c0b8279ac831983aa7f3564a62d2c", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=5e7a1a12038f822df346c65de613cc01882ce656", "patch": "@@ -125,12 +125,12 @@ mod tests {\n     #[test]\n     fn test_resolve_crate_root() {\n         let mock = MockAnalysis::with_files(\n-            \"\n-        //- /bar.rs\n-        mod foo;\n-        //- /foo.rs\n-        // empty <|>\n-    \",\n+            r#\"\n+//- /bar.rs\n+mod foo;\n+//- /foo.rs\n+// empty\n+\"#,\n         );\n         let root_file = mock.id_of(\"/bar.rs\");\n         let mod_file = mock.id_of(\"/foo.rs\");"}, {"sha": "33b1a0e16d33a8b07a179c409179b1b8b0274966", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7a1a12038f822df346c65de613cc01882ce656/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=5e7a1a12038f822df346c65de613cc01882ce656", "patch": "@@ -104,7 +104,7 @@ fn syntax_tree_for_token(node: &SyntaxToken, text_range: TextRange) -> Option<St\n mod tests {\n     use test_utils::assert_eq_text;\n \n-    use crate::mock_analysis::{single_file, single_file_with_range};\n+    use crate::mock_analysis::{single_file, analysis_and_range};\n \n     #[test]\n     fn test_syntax_tree_without_range() {\n@@ -184,7 +184,7 @@ SOURCE_FILE@0..60\n \n     #[test]\n     fn test_syntax_tree_with_range() {\n-        let (analysis, range) = single_file_with_range(r#\"<|>fn foo() {}<|>\"#.trim());\n+        let (analysis, range) = analysis_and_range(r#\"<|>fn foo() {}<|>\"#.trim());\n         let syn = analysis.syntax_tree(range.file_id, Some(range.range)).unwrap();\n \n         assert_eq_text!(\n@@ -206,7 +206,7 @@ FN_DEF@0..11\n             .trim()\n         );\n \n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r#\"fn test() {\n     <|>assert!(\"\n     fn foo() {\n@@ -242,7 +242,7 @@ EXPR_STMT@16..58\n \n     #[test]\n     fn test_syntax_tree_inside_string() {\n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r#\"fn test() {\n     assert!(\"\n <|>fn foo() {\n@@ -276,7 +276,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r###\"fn test() {\n     assert!(r#\"\n <|>fn foo() {\n@@ -310,7 +310,7 @@ SOURCE_FILE@0..12\n         );\n \n         // With a raw string\n-        let (analysis, range) = single_file_with_range(\n+        let (analysis, range) = analysis_and_range(\n             r###\"fn test() {\n     assert!(r<|>#\"\n fn foo() {"}]}