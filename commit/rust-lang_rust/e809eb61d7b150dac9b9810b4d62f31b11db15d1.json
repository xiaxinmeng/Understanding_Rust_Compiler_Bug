{"sha": "e809eb61d7b150dac9b9810b4d62f31b11db15d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MDllYjYxZDdiMTUwZGFjOWI5ODEwYjRkNjJmMzFiMTFkYjE1ZDE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-15T15:59:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-17T12:33:32Z"}, "message": "fix enum_variant_names linting on all caps enum variants", "tree": {"sha": "23744e5708f8c0468ba8d03854e6843c64585f32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23744e5708f8c0468ba8d03854e6843c64585f32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e809eb61d7b150dac9b9810b4d62f31b11db15d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e809eb61d7b150dac9b9810b4d62f31b11db15d1", "html_url": "https://github.com/rust-lang/rust/commit/e809eb61d7b150dac9b9810b4d62f31b11db15d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e809eb61d7b150dac9b9810b4d62f31b11db15d1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c8f6210b5bc84a1ef3d92e71c0e2703cbd784e", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c8f6210b5bc84a1ef3d92e71c0e2703cbd784e", "html_url": "https://github.com/rust-lang/rust/commit/59c8f6210b5bc84a1ef3d92e71c0e2703cbd784e"}], "stats": {"total": 254, "additions": 227, "deletions": 27}, "files": [{"sha": "8ad7adf007725efd4ad66728e4867f5d4e689fc0", "filename": "src/enum_variants.rs", "status": "modified", "additions": 43, "deletions": 27, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e809eb61d7b150dac9b9810b4d62f31b11db15d1/src%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809eb61d7b150dac9b9810b4d62f31b11db15d1/src%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_variants.rs?ref=e809eb61d7b150dac9b9810b4d62f31b11db15d1", "patch": "@@ -6,6 +6,7 @@ use syntax::ast::*;\n use syntax::parse::token::InternedString;\n \n use utils::span_help_and_lint;\n+use utils::{camel_case_from, camel_case_until};\n \n /// **What it does:** Warns on enum variants that are prefixed or suffixed by the same characters\n ///\n@@ -31,48 +32,63 @@ fn var2str(var: &Variant) -> InternedString {\n     var.node.name.name.as_str()\n }\n \n-fn partial_match(left: &str, right: &str) -> usize {\n-    left.chars().zip(right.chars()).take_while(|&(l, r)| l == r).count()\n+/*\n+FIXME: waiting for https://github.com/rust-lang/rust/pull/31700\n+fn partial_match(pre: &str, name: &str) -> usize {\n+    // skip(1) to ensure that the prefix never takes the whole variant name\n+    pre.chars().zip(name.chars().rev().skip(1).rev()).take_while(|&(l, r)| l == r).count()\n }\n \n-fn partial_rmatch(left: &str, right: &str) -> usize {\n-    left.chars().rev().zip(right.chars().rev()).take_while(|&(l, r)| l == r).count()\n+fn partial_rmatch(post: &str, name: &str) -> usize {\n+    // skip(1) to ensure that the postfix never takes the whole variant name\n+    post.chars().rev().zip(name.chars().skip(1).rev()).take_while(|&(l, r)| l == r).count()\n+}*/\n+\n+fn partial_match(pre: &str, name: &str) -> usize {\n+    let mut name_iter = name.chars();\n+    let _ = name_iter.next_back(); // make sure the name is never fully matched\n+    pre.chars().zip(name_iter).take_while(|&(l, r)| l == r).count()\n+}\n+\n+fn partial_rmatch(post: &str, name: &str) -> usize {\n+    let mut name_iter = name.chars();\n+    let _ = name_iter.next(); // make sure the name is never fully matched\n+    post.chars().rev().zip(name_iter.rev()).take_while(|&(l, r)| l == r).count()\n }\n \n impl EarlyLintPass for EnumVariantNames {\n+    // FIXME: #600\n+    #[allow(while_let_on_iterator)]\n     fn check_item(&mut self, cx: &EarlyContext, item: &Item) {\n         if let ItemKind::Enum(ref def, _) = item.node {\n             if def.variants.len() < 2 {\n                 return;\n             }\n             let first = var2str(&def.variants[0]);\n-            let mut pre = first.to_string();\n-            let mut post = pre.clone();\n-            for var in &def.variants[1..] {\n+            let mut pre = &first[..camel_case_until(&*first)];\n+            let mut post = &first[camel_case_from(&*first)..];\n+            for var in &def.variants {\n                 let name = var2str(var);\n+\n                 let pre_match = partial_match(&pre, &name);\n-                let post_match = partial_rmatch(&post, &name);\n-                pre.truncate(pre_match);\n-                let post_end = post.len() - post_match;\n-                post.drain(..post_end);\n-            }\n-            if let Some(c) = first[pre.len()..].chars().next() {\n-                if !c.is_uppercase() {\n-                    // non camel case prefix\n-                    pre.clear()\n-                }\n-            }\n-            if let Some(c) = first[..(first.len() - post.len())].chars().rev().next() {\n-                if let Some(c1) = post.chars().next() {\n-                    if !c.is_lowercase() || !c1.is_uppercase() {\n-                        // non camel case postfix\n-                        post.clear()\n+                pre = &pre[..pre_match];\n+                let pre_camel = camel_case_until(&pre);\n+                pre = &pre[..pre_camel];\n+                while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n+                    if next.is_lowercase() {\n+                        let last = pre.len() - last.len_utf8();\n+                        let last_camel = camel_case_until(&pre[..last]);\n+                        pre = &pre[..last_camel];\n+                    } else {\n+                        break;\n                     }\n                 }\n-            }\n-            if pre == \"_\" {\n-                // don't lint on underscores which are meant to allow dead code\n-                pre.clear();\n+\n+                let post_match = partial_rmatch(&post, &name);\n+                let post_end = post.len() - post_match;\n+                post = &post[post_end..];\n+                let post_camel = camel_case_from(&post);\n+                post = &post[post_camel..];\n             }\n             let (what, value) = if !pre.is_empty() {\n                 (\"pre\", pre)"}, {"sha": "3a7c6c90d51f302329750b708792a69c90127373", "filename": "src/utils/mod.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/e809eb61d7b150dac9b9810b4d62f31b11db15d1/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809eb61d7b150dac9b9810b4d62f31b11db15d1/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=e809eb61d7b150dac9b9810b4d62f31b11db15d1", "patch": "@@ -607,3 +607,65 @@ pub fn is_expn_of(cx: &LateContext, mut span: Span, name: &str) -> Option<Span>\n         }\n     }\n }\n+\n+/// Returns index of character after first CamelCase component of `s`\n+pub fn camel_case_until(s: &str) -> usize {\n+    let mut iter = s.char_indices();\n+    if let Some((_, first)) = iter.next() {\n+        if !first.is_uppercase() {\n+            return 0;\n+        }\n+    } else {\n+        return 0;\n+    }\n+    let mut up = true;\n+    let mut last_i = 0;\n+    for (i, c) in iter {\n+        if up {\n+            if c.is_lowercase() {\n+                up = false;\n+            } else {\n+                return last_i;\n+            }\n+        } else if c.is_uppercase() {\n+            up = true;\n+            last_i = i;\n+        } else if !c.is_lowercase() {\n+            return i;\n+        }\n+    }\n+    if up {\n+        last_i\n+    } else {\n+        s.len()\n+    }\n+}\n+\n+/// Returns index of last CamelCase component of `s`.\n+pub fn camel_case_from(s: &str) -> usize {\n+    let mut iter = s.char_indices().rev();\n+    if let Some((_, first)) = iter.next() {\n+        if !first.is_lowercase() {\n+            return s.len();\n+        }\n+    } else {\n+        return s.len();\n+    }\n+    let mut down = true;\n+    let mut last_i = s.len();\n+    for (i, c) in iter {\n+        if down {\n+            if c.is_uppercase() {\n+                down = false;\n+                last_i = i;\n+            } else if !c.is_lowercase() {\n+                return last_i;\n+            }\n+        } else if c.is_lowercase() {\n+            down = true;\n+        } else {\n+            return last_i;\n+        }\n+    }\n+    last_i\n+}"}, {"sha": "201b796af1ccfad12c4ff86a07df47279c8c564a", "filename": "tests/camel_case.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e809eb61d7b150dac9b9810b4d62f31b11db15d1/tests%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809eb61d7b150dac9b9810b4d62f31b11db15d1/tests%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcamel_case.rs?ref=e809eb61d7b150dac9b9810b4d62f31b11db15d1", "patch": "@@ -0,0 +1,51 @@\n+#[allow(plugin_as_library)]\n+extern crate clippy;\n+\n+use clippy::utils::{camel_case_from, camel_case_until};\n+\n+#[test]\n+fn from_full() {\n+    assert_eq!(camel_case_from(\"AbcDef\"), 0);\n+    assert_eq!(camel_case_from(\"Abc\"), 0);\n+}\n+\n+#[test]\n+fn from_partial() {\n+    assert_eq!(camel_case_from(\"abcDef\"), 3);\n+    assert_eq!(camel_case_from(\"aDbc\"), 1);\n+}\n+\n+#[test]\n+fn from_not() {\n+    assert_eq!(camel_case_from(\"AbcDef_\"), 7);\n+    assert_eq!(camel_case_from(\"AbcDD\"), 5);\n+}\n+\n+#[test]\n+fn from_caps() {\n+    assert_eq!(camel_case_from(\"ABCD\"), 4);\n+}\n+\n+#[test]\n+fn until_full() {\n+    assert_eq!(camel_case_until(\"AbcDef\"), 6);\n+    assert_eq!(camel_case_until(\"Abc\"), 3);\n+}\n+\n+#[test]\n+fn until_not() {\n+    assert_eq!(camel_case_until(\"abcDef\"), 0);\n+    assert_eq!(camel_case_until(\"aDbc\"), 0);\n+}\n+\n+#[test]\n+fn until_partial() {\n+    assert_eq!(camel_case_until(\"AbcDef_\"), 6);\n+    assert_eq!(camel_case_until(\"CallTypeC\"), 8);\n+    assert_eq!(camel_case_until(\"AbcDD\"), 3);\n+}\n+\n+#[test]\n+fn until_caps() {\n+    assert_eq!(camel_case_until(\"ABCD\"), 0);\n+}"}, {"sha": "6589bd35fd3d37090fd1802f38c5f0cf4a81ffce", "filename": "tests/compile-fail/enum_variants.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e809eb61d7b150dac9b9810b4d62f31b11db15d1/tests%2Fcompile-fail%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e809eb61d7b150dac9b9810b4d62f31b11db15d1/tests%2Fcompile-fail%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenum_variants.rs?ref=e809eb61d7b150dac9b9810b4d62f31b11db15d1", "patch": "@@ -0,0 +1,71 @@\n+#![feature(plugin, non_ascii_idents)]\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+\n+enum FakeCallType {\n+    CALL, CREATE\n+}\n+\n+enum FakeCallType2 {\n+    CALL, CREATELL\n+}\n+\n+enum Foo {\n+    cFoo, cBar,\n+}\n+\n+enum BadCallType { //~ ERROR: All variants have the same prefix: `CallType`\n+    CallTypeCall,\n+    CallTypeCreate,\n+    CallTypeDestroy,\n+}\n+\n+enum TwoCallType { //~ ERROR: All variants have the same prefix: `CallType`\n+    CallTypeCall,\n+    CallTypeCreate,\n+}\n+\n+enum Consts { //~ ERROR: All variants have the same prefix: `Constant`\n+    ConstantInt,\n+    ConstantCake,\n+    ConstantLie,\n+}\n+\n+enum Two { //~ ERROR: All variants have the same prefix: `Constant`\n+    ConstantInt,\n+    ConstantInfer,\n+}\n+\n+enum Something {\n+    CCall,\n+    CCreate,\n+    CCryogenize,\n+}\n+\n+enum Seal {\n+    With,\n+    Without,\n+}\n+\n+enum Seall {\n+    With,\n+    WithOut,\n+    Withbroken,\n+}\n+\n+enum Sealll {\n+    With,\n+    WithOut,\n+}\n+\n+enum Seallll { //~ ERROR: All variants have the same prefix: `With`\n+    WithOutCake,\n+    WithOut,\n+}\n+\n+enum NonCaps { //~ ERROR: All variants have the same prefix: `Prefix`\n+    Prefix\u7684,\n+    PrefixCake,\n+}\n+\n+fn main() {}"}]}