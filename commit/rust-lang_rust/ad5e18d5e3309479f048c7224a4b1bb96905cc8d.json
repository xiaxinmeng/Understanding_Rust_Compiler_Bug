{"sha": "ad5e18d5e3309479f048c7224a4b1bb96905cc8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNWUxOGQ1ZTMzMDk0NzlmMDQ4YzcyMjRhNGIxYmI5NjkwNWNjOGQ=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-05-06T18:05:17Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-05-06T18:18:00Z"}, "message": "Fix some nits", "tree": {"sha": "6bc42d8a714c65919d6be671330bb769c1dd62a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bc42d8a714c65919d6be671330bb769c1dd62a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad5e18d5e3309479f048c7224a4b1bb96905cc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5e18d5e3309479f048c7224a4b1bb96905cc8d", "html_url": "https://github.com/rust-lang/rust/commit/ad5e18d5e3309479f048c7224a4b1bb96905cc8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad5e18d5e3309479f048c7224a4b1bb96905cc8d/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9afea614bfbbc3dfb0b87861bdbf1e69a78db897", "url": "https://api.github.com/repos/rust-lang/rust/commits/9afea614bfbbc3dfb0b87861bdbf1e69a78db897", "html_url": "https://github.com/rust-lang/rust/commit/9afea614bfbbc3dfb0b87861bdbf1e69a78db897"}], "stats": {"total": 64, "additions": 31, "deletions": 33}, "files": [{"sha": "c435d576d8367c7c1c9c2a897b32c1d764ad9be1", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ad5e18d5e3309479f048c7224a4b1bb96905cc8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5e18d5e3309479f048c7224a4b1bb96905cc8d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=ad5e18d5e3309479f048c7224a4b1bb96905cc8d", "patch": "@@ -560,7 +560,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         reasons\n     }\n \n-    fn ty_contains_trait(\n+    /// Returns true if `ty` may implement `trait_def_id`\n+    fn ty_impls_trait(\n         &self,\n         ty: Ty<'tcx>,\n         cause: &ObligationCause<'tcx>,\n@@ -615,32 +616,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let clone_obligation_should_hold = tcx\n             .lang_items()\n             .clone_trait()\n-            .map(|clone_trait| self.ty_contains_trait(ty, &cause, clone_trait))\n+            .map(|clone_trait| self.ty_impls_trait(ty, &cause, clone_trait))\n             .unwrap_or(false);\n         let sync_obligation_should_hold = tcx\n             .lang_items()\n             .sync_trait()\n-            .map(|sync_trait| self.ty_contains_trait(ty, &cause, sync_trait))\n+            .map(|sync_trait| self.ty_impls_trait(ty, &cause, sync_trait))\n             .unwrap_or(false);\n         let send_obligation_should_hold = tcx\n             .lang_items()\n             .send_trait()\n-            .map(|send_trait| self.ty_contains_trait(ty, &cause, send_trait))\n+            .map(|send_trait| self.ty_impls_trait(ty, &cause, send_trait))\n             .unwrap_or(false);\n         let unpin_obligation_should_hold = tcx\n             .lang_items()\n             .unpin_trait()\n-            .map(|unpin_trait| self.ty_contains_trait(ty, &cause, unpin_trait))\n+            .map(|unpin_trait| self.ty_impls_trait(ty, &cause, unpin_trait))\n             .unwrap_or(false);\n         let unwind_safe_obligation_should_hold = tcx\n             .lang_items()\n             .unwind_safe_trait()\n-            .map(|unwind_safe_trait| self.ty_contains_trait(ty, &cause, unwind_safe_trait))\n+            .map(|unwind_safe_trait| self.ty_impls_trait(ty, &cause, unwind_safe_trait))\n             .unwrap_or(false);\n         let ref_unwind_safe_obligation_should_hold = tcx\n             .lang_items()\n             .ref_unwind_safe_trait()\n-            .map(|ref_unwind_safe_trait| self.ty_contains_trait(ty, &cause, ref_unwind_safe_trait))\n+            .map(|ref_unwind_safe_trait| self.ty_impls_trait(ty, &cause, ref_unwind_safe_trait))\n             .unwrap_or(false);\n \n         // Check whether catpured fields also implement the trait\n@@ -652,34 +653,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let clone_obligation_holds_for_capture = tcx\n                 .lang_items()\n                 .clone_trait()\n-                .map(|clone_trait| self.ty_contains_trait(ty, &cause, clone_trait))\n+                .map(|clone_trait| self.ty_impls_trait(ty, &cause, clone_trait))\n                 .unwrap_or(false);\n             let sync_obligation_holds_for_capture = tcx\n                 .lang_items()\n                 .sync_trait()\n-                .map(|sync_trait| self.ty_contains_trait(ty, &cause, sync_trait))\n+                .map(|sync_trait| self.ty_impls_trait(ty, &cause, sync_trait))\n                 .unwrap_or(false);\n             let send_obligation_holds_for_capture = tcx\n                 .lang_items()\n                 .send_trait()\n-                .map(|send_trait| self.ty_contains_trait(ty, &cause, send_trait))\n+                .map(|send_trait| self.ty_impls_trait(ty, &cause, send_trait))\n                 .unwrap_or(false);\n             let unpin_obligation_holds_for_capture = tcx\n                 .lang_items()\n                 .unpin_trait()\n-                .map(|unpin_trait| self.ty_contains_trait(ty, &cause, unpin_trait))\n+                .map(|unpin_trait| self.ty_impls_trait(ty, &cause, unpin_trait))\n                 .unwrap_or(false);\n             let unwind_safe_obligation_holds_for_capture = tcx\n                 .lang_items()\n                 .unwind_safe_trait()\n-                .map(|unwind_safe| self.ty_contains_trait(ty, &cause, unwind_safe))\n+                .map(|unwind_safe| self.ty_impls_trait(ty, &cause, unwind_safe))\n                 .unwrap_or(false);\n             let ref_unwind_safe_obligation_holds_for_capture = tcx\n                 .lang_items()\n                 .ref_unwind_safe_trait()\n-                .map(|ref_unwind_safe_trait| {\n-                    self.ty_contains_trait(ty, &cause, ref_unwind_safe_trait)\n-                })\n+                .map(|ref_unwind_safe_trait| self.ty_impls_trait(ty, &cause, ref_unwind_safe_trait))\n                 .unwrap_or(false);\n \n             if !clone_obligation_holds_for_capture && clone_obligation_should_hold {\n@@ -732,11 +731,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         min_captures: Option<&ty::RootVariableMinCaptureList<'tcx>>,\n         closure_clause: hir::CaptureBy,\n         var_hir_id: hir::HirId,\n-    ) -> Option<()> {\n+    ) -> bool {\n         let ty = self.infcx.resolve_vars_if_possible(self.node_ty(var_hir_id));\n \n         if !ty.needs_drop(self.tcx, self.tcx.param_env(closure_def_id.expect_local())) {\n-            return None;\n+            return false;\n         }\n \n         let root_var_min_capture_list = if let Some(root_var_min_capture_list) =\n@@ -749,11 +748,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match closure_clause {\n                 // Only migrate if closure is a move closure\n-                hir::CaptureBy::Value => return Some(()),\n+                hir::CaptureBy::Value => return true,\n                 hir::CaptureBy::Ref => {}\n             }\n \n-            return None;\n+            return false;\n         };\n \n         let projections_list = root_var_min_capture_list\n@@ -779,10 +778,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 projections_list,\n             )\n         {\n-            return Some(());\n+            return true;\n         }\n \n-        return None;\n+        return false;\n     }\n \n     /// Figures out the list of root variables (and their types) that aren't completely\n@@ -816,27 +815,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Perform auto-trait analysis\n         for (&var_hir_id, _) in upvars.iter() {\n-            // println!(\"CHeck auto traits\");\n-            let mut need_some_migrations = false;\n+            let mut need_migration = false;\n             if let Some(trait_migration_cause) =\n                 self.compute_2229_migrations_for_trait(min_captures, closure_clause, var_hir_id)\n             {\n-                need_some_migrations = true;\n+                need_migration = true;\n                 auto_trait_reasons.extend(trait_migration_cause);\n             }\n \n-            if let Some(_) = self.compute_2229_migrations_for_drop(\n+            if self.compute_2229_migrations_for_drop(\n                 closure_def_id,\n                 closure_span,\n                 min_captures,\n                 closure_clause,\n                 var_hir_id,\n             ) {\n-                need_some_migrations = true;\n+                need_migration = true;\n                 drop_reorder_reason = true;\n             }\n \n-            if need_some_migrations {\n+            if need_migration {\n                 need_migrations.push(var_hir_id);\n             }\n         }"}, {"sha": "93e6cf034055a98aca21a0d89e62e214983e3f76", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad5e18d5e3309479f048c7224a4b1bb96905cc8d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ad5e18d5e3309479f048c7224a4b1bb96905cc8d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=ad5e18d5e3309479f048c7224a4b1bb96905cc8d", "patch": "@@ -3,7 +3,7 @@\n \n use std::thread;\n \n-/* Test Send Trait */\n+/* Test Send Trait Migration */\n struct SendPointer (*mut i32);\n unsafe impl Send for SendPointer {}\n \n@@ -17,7 +17,7 @@ fn test_send_trait() {\n     } });\n }\n \n-/* Test Sync Trait */\n+/* Test Sync Trait Migration */\n struct CustomInt (*mut i32);\n struct SyncPointer (CustomInt);\n unsafe impl Sync for SyncPointer {}\n@@ -34,7 +34,7 @@ fn test_sync_trait() {\n     } });\n }\n \n-/* Test Clone Trait */\n+/* Test Clone Trait Migration */\n struct S(String);\n struct T(i32);\n "}, {"sha": "2c0dbd017548b0749a428330a2c8437b0b70cee0", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad5e18d5e3309479f048c7224a4b1bb96905cc8d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad5e18d5e3309479f048c7224a4b1bb96905cc8d/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=ad5e18d5e3309479f048c7224a4b1bb96905cc8d", "patch": "@@ -3,7 +3,7 @@\n \n use std::thread;\n \n-/* Test Send Trait */\n+/* Test Send Trait Migration */\n struct SendPointer (*mut i32);\n unsafe impl Send for SendPointer {}\n \n@@ -17,7 +17,7 @@ fn test_send_trait() {\n     });\n }\n \n-/* Test Sync Trait */\n+/* Test Sync Trait Migration */\n struct CustomInt (*mut i32);\n struct SyncPointer (CustomInt);\n unsafe impl Sync for SyncPointer {}\n@@ -34,7 +34,7 @@ fn test_sync_trait() {\n     });\n }\n \n-/* Test Clone Trait */\n+/* Test Clone Trait Migration */\n struct S(String);\n struct T(i32);\n "}]}