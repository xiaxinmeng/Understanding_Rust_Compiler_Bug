{"sha": "9c71249b9d97581e273938986e1fd67fd7b7b20b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNzEyNDliOWQ5NzU4MWUyNzM5Mzg5ODZlMWZkNjdmZDdiN2IyMGI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-21T23:30:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-02-21T23:45:55Z"}, "message": "librustc: De-mut trans. rs=demuting", "tree": {"sha": "184f72a538846ac4ca0dff8ea8017a9f3a656cba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/184f72a538846ac4ca0dff8ea8017a9f3a656cba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c71249b9d97581e273938986e1fd67fd7b7b20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c71249b9d97581e273938986e1fd67fd7b7b20b", "html_url": "https://github.com/rust-lang/rust/commit/9c71249b9d97581e273938986e1fd67fd7b7b20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c71249b9d97581e273938986e1fd67fd7b7b20b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553c27c515876990f4e3362d3f6bcab984fcd8f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/553c27c515876990f4e3362d3f6bcab984fcd8f9", "html_url": "https://github.com/rust-lang/rust/commit/553c27c515876990f4e3362d3f6bcab984fcd8f9"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "df6073f9339b4ee12dfda251f4e4db1feddc47df", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=9c71249b9d97581e273938986e1fd67fd7b7b20b", "patch": "@@ -831,7 +831,7 @@ pub fn extract_variant_args(bcx: block,\n                          -> ExtractedBlock {\n     let (enm, evar) = vdefs;\n     let _icx = bcx.insn_ctxt(\"match::extract_variant_args\");\n-    let ccx = bcx.fcx.ccx;\n+    let ccx = *bcx.fcx.ccx;\n     let enum_ty_substs = match ty::get(node_id_type(bcx, pat_id)).sty {\n       ty::ty_enum(id, ref substs) => {\n         assert id == enm;\n@@ -1272,7 +1272,7 @@ pub fn compile_submatch(bcx: block,\n \n     let vals_left = vec::append(vec::slice(vals, 0u, col).to_vec(),\n                                 vec::slice(vals, col + 1u, vals.len()));\n-    let ccx = bcx.fcx.ccx;\n+    let ccx = *bcx.fcx.ccx;\n     let mut pat_id = 0;\n     for vec::each(m) |br| {\n         // Find a real id (we're adding placeholder wildcard patterns, but\n@@ -1710,7 +1710,7 @@ pub fn bind_irrefutable_pat(bcx: block,\n                             binding_mode: IrrefutablePatternBindingMode)\n                          -> block {\n     let _icx = bcx.insn_ctxt(\"match::bind_irrefutable_pat\");\n-    let ccx = bcx.fcx.ccx;\n+    let ccx = *bcx.fcx.ccx;\n     let mut bcx = bcx;\n \n     // Necessary since bind_irrefutable_pat is called outside trans_match"}, {"sha": "cadbe1208ad2b37320a0a057874c2cab07ea1c91", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9c71249b9d97581e273938986e1fd67fd7b7b20b", "patch": "@@ -1162,7 +1162,7 @@ pub fn trans_stmt(cx: block, s: ast::stmt) -> block {\n                         }\n                     }\n                 }\n-                ast::decl_item(i) => trans_item(cx.fcx.ccx, *i)\n+                ast::decl_item(i) => trans_item(*cx.fcx.ccx, *i)\n             }\n         }\n         ast::stmt_mac(*) => cx.tcx().sess.bug(~\"unexpanded macro\")\n@@ -1584,25 +1584,25 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n                         param_substs: Option<@param_substs>,\n                         sp: Option<span>) -> fn_ctxt {\n     let llbbs = mk_standard_basic_blocks(llfndecl);\n-    return @fn_ctxt_ {\n+    return @mut fn_ctxt_ {\n           llfn: llfndecl,\n           llenv: unsafe { llvm::LLVMGetParam(llfndecl, 1u as c_uint) },\n           llretptr: unsafe { llvm::LLVMGetParam(llfndecl, 0u as c_uint) },\n-          mut llstaticallocas: llbbs.sa,\n-          mut llloadenv: None,\n-          mut llreturn: llbbs.rt,\n-          mut llself: None,\n-          mut personality: None,\n-          mut loop_ret: None,\n-          llargs: HashMap(),\n-          lllocals: HashMap(),\n-          llupvars: HashMap(),\n+          llstaticallocas: llbbs.sa,\n+          llloadenv: None,\n+          llreturn: llbbs.rt,\n+          llself: None,\n+          personality: None,\n+          loop_ret: None,\n+          llargs: @HashMap(),\n+          lllocals: @HashMap(),\n+          llupvars: @HashMap(),\n           id: id,\n           impl_id: impl_id,\n           param_substs: param_substs,\n           span: sp,\n           path: path,\n-          ccx: ccx\n+          ccx: @ccx\n     };\n }\n \n@@ -1792,7 +1792,7 @@ pub fn trans_closure(ccx: @CrateContext,\n                 llvm::LLVMSetGC(fcx.llfn, strategy);\n             }\n         }\n-        ccx.uses_gc = true;\n+        *ccx.uses_gc = true;\n     }\n \n     // Create the first basic block in the function and keep a handle on it to\n@@ -2815,7 +2815,7 @@ pub fn trap(bcx: block) {\n }\n \n pub fn decl_gc_metadata(ccx: @CrateContext, llmod_id: ~str) {\n-    if !ccx.sess.opts.gc || !ccx.uses_gc {\n+    if !ccx.sess.opts.gc || !*ccx.uses_gc {\n         return;\n     }\n \n@@ -3050,7 +3050,7 @@ pub fn trans_crate(sess: session::Session,\n               discrims: HashMap(),\n               discrim_symbols: HashMap(),\n               tydescs: ty::new_ty_hash(),\n-              mut finished_tydescs: false,\n+              finished_tydescs: @mut false,\n               external: HashMap(),\n               monomorphized: HashMap(),\n               monomorphizing: HashMap(),\n@@ -3092,9 +3092,9 @@ pub fn trans_crate(sess: session::Session,\n               builder: BuilderRef_res(unsafe { llvm::LLVMCreateBuilder() }),\n               shape_cx: mk_ctxt(llmod),\n               crate_map: crate_map,\n-              mut uses_gc: false,\n+              uses_gc: @mut false,\n               dbg_cx: dbg_cx,\n-              mut do_not_commit_warning_issued: false\n+              do_not_commit_warning_issued: @mut false\n         };\n \n         {"}, {"sha": "8bd85be0f70824815dd41f7c68f29d7fb3560007", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=9c71249b9d97581e273938986e1fd67fd7b7b20b", "patch": "@@ -175,7 +175,7 @@ pub struct CrateContext {\n      tydescs: HashMap<ty::t, @mut tydesc_info>,\n      // Set when running emit_tydescs to enforce that no more tydescs are\n      // created.\n-     mut finished_tydescs: bool,\n+     finished_tydescs: @mut bool,\n      // Track mapping of external ids to local items imported for inlining\n      external: HashMap<ast::def_id, Option<ast::node_id>>,\n      // Cache instances of monomorphized functions\n@@ -224,9 +224,9 @@ pub struct CrateContext {\n      // Set when at least one function uses GC. Needed so that\n      // decl_gc_metadata knows whether to link to the module metadata, which\n      // is not emitted by LLVM's GC pass when no functions use GC.\n-     mut uses_gc: bool,\n+     uses_gc: @mut bool,\n      dbg_cx: Option<debuginfo::DebugContext>,\n-     mut do_not_commit_warning_issued: bool\n+     do_not_commit_warning_issued: @mut bool\n }\n \n // Types used for llself.\n@@ -273,34 +273,34 @@ pub struct fn_ctxt_ {\n     // the function, due to LLVM's quirks.\n     // A block for all the function's static allocas, so that LLVM\n     // will coalesce them into a single alloca call.\n-    mut llstaticallocas: BasicBlockRef,\n+    llstaticallocas: BasicBlockRef,\n     // A block containing code that copies incoming arguments to space\n     // already allocated by code in one of the llallocas blocks.\n     // (LLVM requires that arguments be copied to local allocas before\n     // allowing most any operation to be performed on them.)\n-    mut llloadenv: Option<BasicBlockRef>,\n-    mut llreturn: BasicBlockRef,\n+    llloadenv: Option<BasicBlockRef>,\n+    llreturn: BasicBlockRef,\n     // The 'self' value currently in use in this function, if there\n     // is one.\n     //\n     // NB: This is the type of the self *variable*, not the self *type*. The\n     // self type is set only for default methods, while the self variable is\n     // set for all methods.\n-    mut llself: Option<ValSelfData>,\n+    llself: Option<ValSelfData>,\n     // The a value alloca'd for calls to upcalls.rust_personality. Used when\n     // outputting the resume instruction.\n-    mut personality: Option<ValueRef>,\n+    personality: Option<ValueRef>,\n     // If this is a for-loop body that returns, this holds the pointers needed\n     // for that (flagptr, retptr)\n-    mut loop_ret: Option<(ValueRef, ValueRef)>,\n+    loop_ret: Option<(ValueRef, ValueRef)>,\n \n     // Maps arguments to allocas created for them in llallocas.\n-    llargs: HashMap<ast::node_id, local_val>,\n+    llargs: @HashMap<ast::node_id, local_val>,\n     // Maps the def_ids for local variables to the allocas created for\n     // them in llallocas.\n-    lllocals: HashMap<ast::node_id, local_val>,\n+    lllocals: @HashMap<ast::node_id, local_val>,\n     // Same as above, but for closure upvars\n-    llupvars: HashMap<ast::node_id, ValueRef>,\n+    llupvars: @HashMap<ast::node_id, ValueRef>,\n \n     // The node_id of the function, or -1 if it doesn't correspond to\n     // a user-defined function.\n@@ -319,14 +319,14 @@ pub struct fn_ctxt_ {\n     path: path,\n \n     // This function's enclosing crate context.\n-    ccx: @CrateContext\n+    ccx: @@CrateContext\n }\n \n-pub type fn_ctxt = @fn_ctxt_;\n+pub type fn_ctxt = @mut fn_ctxt_;\n \n pub fn warn_not_to_commit(ccx: @CrateContext, msg: ~str) {\n-    if !ccx.do_not_commit_warning_issued {\n-        ccx.do_not_commit_warning_issued = true;\n+    if !*ccx.do_not_commit_warning_issued {\n+        *ccx.do_not_commit_warning_issued = true;\n         ccx.sess.warn(msg + ~\" -- do not commit like this!\");\n     }\n }\n@@ -689,7 +689,7 @@ pub fn block_parent(cx: block) -> block {\n // Accessors\n \n pub impl block {\n-    pure fn ccx() -> @CrateContext { self.fcx.ccx }\n+    pure fn ccx() -> @CrateContext { *self.fcx.ccx }\n     pure fn tcx() -> ty::ctxt { self.fcx.ccx.tcx }\n     pure fn sess() -> Session { self.fcx.ccx.sess }\n "}, {"sha": "8a28769756e6eb19f9568e525753f8f145d3c969", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=9c71249b9d97581e273938986e1fd67fd7b7b20b", "patch": "@@ -778,7 +778,7 @@ pub fn create_local_var(bcx: block, local: @ast::local)\n pub fn create_arg(bcx: block, arg: ast::arg, sp: span)\n     -> Option<@Metadata<ArgumentMetadata>> {\n     unsafe {\n-        let fcx = bcx.fcx, cx = fcx.ccx;\n+        let fcx = bcx.fcx, cx = *fcx.ccx;\n         let cache = get_cache(cx);\n         let tg = ArgVariableTag;\n         match cached_metadata::<@Metadata<ArgumentMetadata>>(\n@@ -845,7 +845,7 @@ pub fn update_source_pos(cx: block, s: span) {\n }\n \n pub fn create_function(fcx: fn_ctxt) -> @Metadata<SubProgramMetadata> {\n-    let cx = fcx.ccx;\n+    let cx = *fcx.ccx;\n     let dbg_cx = (/*bad*/copy cx.dbg_cx).get();\n \n     debug!(\"~~\");"}, {"sha": "ad171a44859d19b5834acabbc91a32cd24ad1c5a", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=9c71249b9d97581e273938986e1fd67fd7b7b20b", "patch": "@@ -944,10 +944,10 @@ pub fn trans_local_var(bcx: block, def: ast::def) -> Datum {\n             }\n         }\n         ast::def_arg(nid, _, _) => {\n-            take_local(bcx, bcx.fcx.llargs, nid)\n+            take_local(bcx, *bcx.fcx.llargs, nid)\n         }\n         ast::def_local(nid, _) | ast::def_binding(nid, _) => {\n-            take_local(bcx, bcx.fcx.lllocals, nid)\n+            take_local(bcx, *bcx.fcx.lllocals, nid)\n         }\n         ast::def_self(nid, _) => {\n             let self_info: ValSelfData = match bcx.fcx.llself {"}, {"sha": "bbe80431c07fb715832ac7db86d12af462ef86fa", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c71249b9d97581e273938986e1fd67fd7b7b20b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=9c71249b9d97581e273938986e1fd67fd7b7b20b", "patch": "@@ -654,7 +654,7 @@ pub fn declare_tydesc(ccx: @CrateContext, t: ty::t) -> @mut tydesc_info {\n     let _icx = ccx.insn_ctxt(\"declare_tydesc\");\n     // If emit_tydescs already ran, then we shouldn't be creating any new\n     // tydescs.\n-    assert !ccx.finished_tydescs;\n+    assert !*ccx.finished_tydescs;\n \n     let llty = type_of(ccx, t);\n \n@@ -761,7 +761,7 @@ pub fn make_generic_glue(ccx: @CrateContext, t: ty::t, llfn: ValueRef,\n pub fn emit_tydescs(ccx: @CrateContext) {\n     let _icx = ccx.insn_ctxt(\"emit_tydescs\");\n     // As of this point, allow no more tydescs to be created.\n-    ccx.finished_tydescs = true;\n+    *ccx.finished_tydescs = true;\n     for ccx.tydescs.each_value |&val| {\n         let glue_fn_ty = T_ptr(T_generic_glue_fn(ccx));\n         let ti = val;"}]}