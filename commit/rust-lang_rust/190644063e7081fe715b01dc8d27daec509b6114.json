{"sha": "190644063e7081fe715b01dc8d27daec509b6114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MDY0NDA2M2U3MDgxZmU3MTViMDFkYzhkMjdkYWVjNTA5YjYxMTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-29T18:54:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-29T21:35:39Z"}, "message": "Be more strategic about linking to rust crates\n\nInstead of linking directly to the rust crate, try to figure out the location\nand name of the library from the file name, then call gcc with appropriate -L,\n-l flags. This will allow dynamic linking to be more forgiving about where it\nloads the library from at runtime - currently a stage3 compiler can't run\ncorrectly from the stage0 directory. Only tested on Linux. Fingers crossed.", "tree": {"sha": "8469eb5bbcea20e1faa6209552fd95cd0820b2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8469eb5bbcea20e1faa6209552fd95cd0820b2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/190644063e7081fe715b01dc8d27daec509b6114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/190644063e7081fe715b01dc8d27daec509b6114", "html_url": "https://github.com/rust-lang/rust/commit/190644063e7081fe715b01dc8d27daec509b6114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/190644063e7081fe715b01dc8d27daec509b6114/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e130e7b5981d9de4fe5d3c4479356eed88c09ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e130e7b5981d9de4fe5d3c4479356eed88c09ef9", "html_url": "https://github.com/rust-lang/rust/commit/e130e7b5981d9de4fe5d3c4479356eed88c09ef9"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "c322a4804e41e5b2618692f8afe1adb0f6fcaad2", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/190644063e7081fe715b01dc8d27daec509b6114/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190644063e7081fe715b01dc8d27daec509b6114/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=190644063e7081fe715b01dc8d27daec509b6114", "patch": "@@ -419,12 +419,37 @@ fn main(vec[str] args) {\n             }\n         }\n \n+        // Converts a library file name into a gcc -l argument\n+        fn unlib(@session::config config, str filename) -> str {\n+            auto rmlib = bind fn(@session::config config,\n+                                 str filename) -> str {\n+                if (config.os == session::os_macos\n+                    || config.os == session::os_linux\n+                    && str::find(filename, \"lib\") == 0) {\n+                    ret str::slice(filename, 3u, str::byte_len(filename));\n+                } else {\n+                    ret filename;\n+                }\n+            } (config, _);\n+            fn rmext(str filename) -> str {\n+                auto parts = str::split(filename, '.' as u8);\n+                vec::pop(parts);\n+                ret str::connect(parts, \".\");\n+            }\n+            ret alt (config.os) {\n+                case (session::os_macos) { rmext(rmlib(filename)) }\n+                case (session::os_linux) { rmext(rmlib(filename)) }\n+                case (_) { rmext(filename) }\n+            };\n+        }\n+        \n         for (str cratepath in sess.get_used_crate_files()) {\n             auto dir = fs::dirname(cratepath);\n             if (dir != \"\") {\n                 gcc_args += [\"-L\" + dir];\n             }\n-            gcc_args += [fs::basename(cratepath)];\n+            auto libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n+            gcc_args += [\"-l\" + libarg];\n         }\n \n         auto used_libs = sess.get_used_libraries();"}, {"sha": "72312aa4f0227e82e5e84c93ea45076bd8b9070f", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/190644063e7081fe715b01dc8d27daec509b6114/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/190644063e7081fe715b01dc8d27daec509b6114/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=190644063e7081fe715b01dc8d27daec509b6114", "patch": "@@ -83,7 +83,9 @@ fn find_library_crate(&session::session sess, &ast::ident ident,\n     // manually filtering fs::list_dir here.\n \n     for (str library_search_path in library_search_paths) {\n+        log #fmt(\"searching %s\", library_search_path);\n         for (str path in fs::list_dir(library_search_path)) {\n+            log #fmt(\"searching %s\", path);\n             let str f = fs::basename(path);\n             if (!(str::starts_with(f, prefix) &&\n                       str::ends_with(f, nn.suffix))) {"}]}