{"sha": "2f9b191886457f16876fe9ef08369f8d0774e200", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOWIxOTE4ODY0NTdmMTY4NzZmZTllZjA4MzY5ZjhkMDc3NGUyMDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-03T13:01:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:41:29Z"}, "message": "extract parse_{expr_opt, return_expr, yield_expr}", "tree": {"sha": "73c74e3ace3b016a57e037ded260bd973970d19e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73c74e3ace3b016a57e037ded260bd973970d19e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f9b191886457f16876fe9ef08369f8d0774e200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9b191886457f16876fe9ef08369f8d0774e200", "html_url": "https://github.com/rust-lang/rust/commit/2f9b191886457f16876fe9ef08369f8d0774e200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f9b191886457f16876fe9ef08369f8d0774e200/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "327641e35c10624e7c728fce269885c6e4f6a602", "url": "https://api.github.com/repos/rust-lang/rust/commits/327641e35c10624e7c728fce269885c6e4f6a602", "html_url": "https://github.com/rust-lang/rust/commit/327641e35c10624e7c728fce269885c6e4f6a602"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "ea96143f4e87759ccd32c8b61efa18922ffe4c68", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/2f9b191886457f16876fe9ef08369f8d0774e200/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9b191886457f16876fe9ef08369f8d0774e200/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=2f9b191886457f16876fe9ef08369f8d0774e200", "patch": "@@ -823,24 +823,18 @@ impl<'a> Parser<'a> {\n         let attrs = ThinVec::new();\n \n         let lo = self.token.span;\n-        let mut hi = self.token.span;\n-\n-        let ex: ExprKind;\n \n         macro_rules! parse_lit {\n             () => {\n                 match self.parse_opt_lit() {\n-                    Some(literal) => {\n-                        hi = self.prev_span;\n-                        ex = ExprKind::Lit(literal);\n-                    }\n+                    Some(literal) => (self.prev_span, ExprKind::Lit(literal)),\n                     None => return Err(self.expected_expression_found()),\n                 }\n             }\n         }\n \n         // Note: when adding new syntax here, don't forget to adjust `TokenKind::can_begin_expr()`.\n-        match self.token.kind {\n+        let (hi, ex) = match self.token.kind {\n             // This match arm is a special-case of the `_` match arm below and\n             // could be removed without changing functionality, but it's faster\n             // to have it here, especially for programs with large constants.\n@@ -911,13 +905,7 @@ impl<'a> Parser<'a> {\n                     };\n                 }\n                 if self.eat_keyword(kw::Return) {\n-                    if self.token.can_begin_expr() {\n-                        let e = self.parse_expr()?;\n-                        hi = e.span;\n-                        ex = ExprKind::Ret(Some(e));\n-                    } else {\n-                        ex = ExprKind::Ret(None);\n-                    }\n+                    return self.parse_return_expr(attrs);\n                 } else if self.eat_keyword(kw::Break) {\n                     let label = self.eat_label();\n                     let e = if self.token.can_begin_expr()\n@@ -928,25 +916,13 @@ impl<'a> Parser<'a> {\n                     } else {\n                         None\n                     };\n-                    ex = ExprKind::Break(label, e);\n-                    hi = self.prev_span;\n+                    (self.prev_span, ExprKind::Break(label, e))\n                 } else if self.eat_keyword(kw::Yield) {\n-                    if self.token.can_begin_expr() {\n-                        let e = self.parse_expr()?;\n-                        hi = e.span;\n-                        ex = ExprKind::Yield(Some(e));\n-                    } else {\n-                        ex = ExprKind::Yield(None);\n-                    }\n-\n-                    let span = lo.to(hi);\n-                    self.sess.gated_spans.gate(sym::generators, span);\n+                    return self.parse_yield_expr(attrs);\n                 } else if self.eat_keyword(kw::Let) {\n                     return self.parse_let_expr(attrs);\n                 } else if is_span_rust_2018 && self.eat_keyword(kw::Await) {\n-                    let (await_hi, e_kind) = self.parse_incorrect_await_syntax(lo, self.prev_span)?;\n-                    hi = await_hi;\n-                    ex = e_kind;\n+                    self.parse_incorrect_await_syntax(lo, self.prev_span)?\n                 } else if !self.unclosed_delims.is_empty() && self.check(&token::Semi) {\n                     // Don't complain about bare semicolons after unclosed braces\n                     // recovery in order to keep the error count down. Fixing the\n@@ -964,7 +940,7 @@ impl<'a> Parser<'a> {\n                     parse_lit!()\n                 }\n             }\n-        }\n+        };\n \n         let expr = self.mk_expr(lo.to(hi), ex, attrs);\n         self.maybe_recover_from_bad_qpath(expr, true)\n@@ -1116,6 +1092,33 @@ impl<'a> Parser<'a> {\n         self.parse_try_block(lo, attrs)\n     }\n \n+    /// Parse an expression if the token can begin one.\n+    fn parse_expr_opt(&mut self) -> PResult<'a, Option<P<Expr>>> {\n+        Ok(if self.token.can_begin_expr() {\n+            Some(self.parse_expr()?)\n+        } else {\n+            None\n+        })\n+    }\n+\n+    /// Parse `\"return\" expr?`.\n+    fn parse_return_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        let lo = self.prev_span;\n+        let kind = ExprKind::Ret(self.parse_expr_opt()?);\n+        let expr = self.mk_expr(lo.to(self.prev_span), kind, attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n+    /// Parse `\"yield\" expr?`.\n+    fn parse_yield_expr(&mut self, attrs: ThinVec<Attribute>) -> PResult<'a, P<Expr>> {\n+        let lo = self.prev_span;\n+        let kind = ExprKind::Yield(self.parse_expr_opt()?);\n+        let span = lo.to(self.prev_span);\n+        self.sess.gated_spans.gate(sym::generators, span);\n+        let expr = self.mk_expr(span, kind, attrs);\n+        self.maybe_recover_from_bad_qpath(expr, true)\n+    }\n+\n     /// Returns a string literal if the next token is a string literal.\n     /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n     /// and returns `None` if the next token is not literal at all."}]}