{"sha": "9f403abba28b3a36dcaae197b294105004e32a55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNDAzYWJiYTI4YjNhMzZkY2FhZTE5N2IyOTQxMDUwMDRlMzJhNTU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-30T17:16:54Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-03-30T17:16:54Z"}, "message": "Rollup merge of #32580 - durka:patch-17, r=steveklabnik\n\nverb agreement in core::convert docs", "tree": {"sha": "56bdbefdee5a7eb2c861873b353c3c999a76df7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56bdbefdee5a7eb2c861873b353c3c999a76df7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f403abba28b3a36dcaae197b294105004e32a55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f403abba28b3a36dcaae197b294105004e32a55", "html_url": "https://github.com/rust-lang/rust/commit/9f403abba28b3a36dcaae197b294105004e32a55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f403abba28b3a36dcaae197b294105004e32a55/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b8b9487a94c5b9b1401007b040c584d9349582", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b8b9487a94c5b9b1401007b040c584d9349582", "html_url": "https://github.com/rust-lang/rust/commit/70b8b9487a94c5b9b1401007b040c584d9349582"}, {"sha": "0af3e708423ebac50b40e3288d4afcfe75f91cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0af3e708423ebac50b40e3288d4afcfe75f91cf3", "html_url": "https://github.com/rust-lang/rust/commit/0af3e708423ebac50b40e3288d4afcfe75f91cf3"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2d999868f71ec5995c3a667279eefc921a4be7ba", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9f403abba28b3a36dcaae197b294105004e32a55/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f403abba28b3a36dcaae197b294105004e32a55/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=9f403abba28b3a36dcaae197b294105004e32a55", "patch": "@@ -19,14 +19,14 @@\n //!\n //! - Impl the `As*` traits for reference-to-reference conversions\n //! - Impl the `Into` trait when you want to consume the value in the conversion\n-//! - The `From` trait is the most flexible, useful for values _and_ references conversions\n+//! - The `From` trait is the most flexible, useful for value _and_ reference conversions\n //!\n-//! As a library writer, you should prefer implementing `From<T>` rather than\n-//! `Into<U>`, as `From` provides greater flexibility and offer the equivalent `Into`\n+//! As a library author, you should prefer implementing `From<T>` rather than\n+//! `Into<U>`, as `From` provides greater flexibility and offers an equivalent `Into`\n //! implementation for free, thanks to a blanket implementation in the standard library.\n //!\n //! **Note: these traits must not fail**. If the conversion can fail, you must use a dedicated\n-//! method which return an `Option<T>` or a `Result<T, E>`.\n+//! method which returns an `Option<T>` or a `Result<T, E>`.\n //!\n //! # Generic impl\n //!\n@@ -49,7 +49,7 @@ use marker::Sized;\n /// [book]: ../../book/borrow-and-asref.html\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Examples\n ///\n@@ -82,7 +82,7 @@ pub trait AsRef<T: ?Sized> {\n /// A cheap, mutable reference-to-mutable reference conversion.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Generic Impls\n ///\n@@ -99,10 +99,10 @@ pub trait AsMut<T: ?Sized> {\n /// A conversion that consumes `self`, which may or may not be expensive.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n-/// Library writer should not implement directly this trait, but should prefer the implementation\n-/// of the `From` trait, which offer greater flexibility and provide the equivalent `Into`\n+/// Library authors should not directly implement this trait, but should prefer implementing\n+/// the `From` trait, which offers greater flexibility and provides an equivalent `Into`\n /// implementation for free, thanks to a blanket implementation in the standard library.\n ///\n /// # Examples\n@@ -134,7 +134,7 @@ pub trait Into<T>: Sized {\n /// Construct `Self` via a conversion.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Examples\n ///"}]}