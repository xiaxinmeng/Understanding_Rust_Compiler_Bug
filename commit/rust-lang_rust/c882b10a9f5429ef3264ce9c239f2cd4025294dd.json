{"sha": "c882b10a9f5429ef3264ce9c239f2cd4025294dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODJiMTBhOWY1NDI5ZWYzMjY0Y2U5YzIzOWYyY2Q0MDI1Mjk0ZGQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-22T14:48:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-22T14:48:37Z"}, "message": "Rollup merge of #70240 - brain0:thread_id, r=Mark-Simulacrum\n\nReturn NonZeroU64 from ThreadId::as_u64.\n\nAs discussed in #67939, this allows turning Option<ThreadId> into Option<NonZeroU64> which\ncan then be stored inside an AtomicU64.", "tree": {"sha": "6b9f7b3979b92280874fb84332092c6e906cf364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b9f7b3979b92280874fb84332092c6e906cf364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c882b10a9f5429ef3264ce9c239f2cd4025294dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJed3rFCRBK7hj4Ov3rIwAAdHIIAEvThtRA2vt2+y1n67iBtgnD\nkFndbOvlaQj2vieX2M9ow5ClMsj46O3uIAVJTe+hu4700RBRFP+xUdPeRiE4uD7o\npCmyLVpGLcCvtkUxwYugO/notNWnjNLA2C5arOr1g73hocsAwWLQWl7eRLhY5S7b\nGYMm+8w9jymi99MN7MvakQ59MJbuAYwXAwhRW95S+XNzmOpytYfPqFI5j3qpUb4P\nBNmvQQmQEEsVJuhgQkuaAMAu0pkpFRyAys4OvzJu61bo1AjmTn6dKvAEF3+TggY4\n02QkF6GNaHWEe92m4u04Hj3LPyjMlWWzQVaJ28woS3wRVmK247An+frJcYHhK9g=\n=ZgTz\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b9f7b3979b92280874fb84332092c6e906cf364\nparent e58fec0c1cfa6f306940edb20d8d5f7a3a468d6e\nparent c8140a88f67cf1fea104b1aaa615af7816984615\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584888517 +0100\ncommitter GitHub <noreply@github.com> 1584888517 +0100\n\nRollup merge of #70240 - brain0:thread_id, r=Mark-Simulacrum\n\nReturn NonZeroU64 from ThreadId::as_u64.\n\nAs discussed in #67939, this allows turning Option<ThreadId> into Option<NonZeroU64> which\ncan then be stored inside an AtomicU64.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c882b10a9f5429ef3264ce9c239f2cd4025294dd", "html_url": "https://github.com/rust-lang/rust/commit/c882b10a9f5429ef3264ce9c239f2cd4025294dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c882b10a9f5429ef3264ce9c239f2cd4025294dd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e58fec0c1cfa6f306940edb20d8d5f7a3a468d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58fec0c1cfa6f306940edb20d8d5f7a3a468d6e", "html_url": "https://github.com/rust-lang/rust/commit/e58fec0c1cfa6f306940edb20d8d5f7a3a468d6e"}, {"sha": "c8140a88f67cf1fea104b1aaa615af7816984615", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8140a88f67cf1fea104b1aaa615af7816984615", "html_url": "https://github.com/rust-lang/rust/commit/c8140a88f67cf1fea104b1aaa615af7816984615"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "a7cdc48d60342f986c4e4a5e2ff3333bc2a3f3ac", "filename": "src/librustc_data_structures/profiling.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c882b10a9f5429ef3264ce9c239f2cd4025294dd/src%2Flibrustc_data_structures%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c882b10a9f5429ef3264ce9c239f2cd4025294dd/src%2Flibrustc_data_structures%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fprofiling.rs?ref=c882b10a9f5429ef3264ce9c239f2cd4025294dd", "patch": "@@ -345,7 +345,7 @@ impl SelfProfilerRef {\n     ) {\n         drop(self.exec(event_filter, |profiler| {\n             let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = std::thread::current().id().as_u64() as u32;\n+            let thread_id = std::thread::current().id().as_u64().get() as u32;\n \n             profiler.profiler.record_instant_event(\n                 event_kind(profiler),\n@@ -522,7 +522,7 @@ impl<'a> TimingGuard<'a> {\n         event_kind: StringId,\n         event_id: EventId,\n     ) -> TimingGuard<'a> {\n-        let thread_id = std::thread::current().id().as_u64() as u32;\n+        let thread_id = std::thread::current().id().as_u64().get() as u32;\n         let raw_profiler = &profiler.profiler;\n         let timing_guard =\n             raw_profiler.start_recording_interval_event(event_kind, event_id, thread_id);"}, {"sha": "282e268efd20686f35fba68a792d3f4f96ce432e", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c882b10a9f5429ef3264ce9c239f2cd4025294dd/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c882b10a9f5429ef3264ce9c239f2cd4025294dd/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c882b10a9f5429ef3264ce9c239f2cd4025294dd", "patch": "@@ -1082,8 +1082,8 @@ impl ThreadId {\n     /// it is not guaranteed which values new threads will return, and this may\n     /// change across Rust versions.\n     #[unstable(feature = \"thread_id_value\", issue = \"67939\")]\n-    pub fn as_u64(&self) -> u64 {\n-        self.0.get()\n+    pub fn as_u64(&self) -> NonZeroU64 {\n+        self.0\n     }\n }\n "}]}