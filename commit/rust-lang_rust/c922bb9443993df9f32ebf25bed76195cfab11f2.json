{"sha": "c922bb9443993df9f32ebf25bed76195cfab11f2", "node_id": "C_kwDOAAsO6NoAKGM5MjJiYjk0NDM5OTNkZjlmMzJlYmYyNWJlZDc2MTk1Y2ZhYjExZjI", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-19T02:19:34Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-19T02:19:34Z"}, "message": "fix ICE", "tree": {"sha": "6046450603b0f4bbfafb45a7c534216a457b5627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6046450603b0f4bbfafb45a7c534216a457b5627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c922bb9443993df9f32ebf25bed76195cfab11f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c922bb9443993df9f32ebf25bed76195cfab11f2", "html_url": "https://github.com/rust-lang/rust/commit/c922bb9443993df9f32ebf25bed76195cfab11f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c922bb9443993df9f32ebf25bed76195cfab11f2/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "html_url": "https://github.com/rust-lang/rust/commit/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "ff03f416d0bdd98c5c0b5362fcd69793dca2fbae", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c922bb9443993df9f32ebf25bed76195cfab11f2/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c922bb9443993df9f32ebf25bed76195cfab11f2/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=c922bb9443993df9f32ebf25bed76195cfab11f2", "patch": "@@ -59,7 +59,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVe\n                         from_slice_ty, from_size, to_slice_ty, to_size,\n                     ),\n                     |diag| {\n-                        let cast_expr = match expr.kind {\n+                        let cast_expr = match expr.peel_blocks().kind {\n                             ExprKind::Cast(cast_expr, ..) => cast_expr,\n                             _ => unreachable!(\"expr should be a cast as checked by expr_cast_chain_tys\"),\n                         };"}, {"sha": "7ec137cc5b2936ae8cf0f4db78395eddcf0dc03f", "filename": "tests/ui/cast_slice_different_sizes.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c922bb9443993df9f32ebf25bed76195cfab11f2/tests%2Fui%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c922bb9443993df9f32ebf25bed76195cfab11f2/tests%2Fui%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.rs?ref=c922bb9443993df9f32ebf25bed76195cfab11f2", "patch": "@@ -39,3 +39,34 @@ fn main() {\n     let long_chain_restore =\n         r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const [u8] as *const [u32];\n }\n+\n+// foo and foo2 should not fire, they're the same size\n+fn foo(x: *mut [u8]) -> *mut [u8] {\n+    x as *mut [u8]\n+}\n+\n+fn foo2(x: *mut [u8]) -> *mut [u8] {\n+    x as *mut _\n+}\n+\n+// Test that casts as part of function returns work\n+fn bar(x: *mut [u16]) -> *mut [u8] {\n+    x as *mut [u8]\n+}\n+\n+fn uwu(x: *mut [u16]) -> *mut [u8] {\n+    x as *mut _\n+}\n+\n+fn bar2(x: *mut [u16]) -> *mut [u8] {\n+    x as _\n+}\n+\n+// function returns plus blocks\n+fn blocks(x: *mut [u16]) -> *mut [u8] {\n+    ({ x }) as _\n+}\n+\n+fn more_blocks(x: *mut [u16]) -> *mut [u8] {\n+    { ({ x }) as _ }\n+}"}, {"sha": "0e018b62e60ae22ad7e551b3f7d2ba34d020c3be", "filename": "tests/ui/cast_slice_different_sizes.stderr", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c922bb9443993df9f32ebf25bed76195cfab11f2/tests%2Fui%2Fcast_slice_different_sizes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c922bb9443993df9f32ebf25bed76195cfab11f2/tests%2Fui%2Fcast_slice_different_sizes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_slice_different_sizes.stderr?ref=c922bb9443993df9f32ebf25bed76195cfab11f2", "patch": "@@ -48,5 +48,56 @@ error: casting between raw pointers to `[i32]` (element size 4) and `[u8]` (elem\n LL |     let long_chain_loss = r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const [u8];\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts`: `core::ptr::slice_from_raw_parts(r_x as *const [i32] as *const [u32] as *const [u16] as *const [i8] as *const u8, ..)`\n \n-error: aborting due to 6 previous errors\n+error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:53:36\n+   |\n+LL |   fn bar(x: *mut [u16]) -> *mut [u8] {\n+   |  ____________________________________^\n+LL | |     x as *mut [u8]\n+LL | | }\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut mut u8, ..)`\n+\n+error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:57:36\n+   |\n+LL |   fn uwu(x: *mut [u16]) -> *mut [u8] {\n+   |  ____________________________________^\n+LL | |     x as *mut _\n+LL | | }\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut mut u8, ..)`\n+\n+error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:61:37\n+   |\n+LL |   fn bar2(x: *mut [u16]) -> *mut [u8] {\n+   |  _____________________________________^\n+LL | |     x as _\n+LL | | }\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(x as *mut mut u8, ..)`\n+\n+error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:66:39\n+   |\n+LL |   fn blocks(x: *mut [u16]) -> *mut [u8] {\n+   |  _______________________________________^\n+LL | |     ({ x }) as _\n+LL | | }\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut mut u8, ..)`\n+\n+error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:70:44\n+   |\n+LL |   fn more_blocks(x: *mut [u16]) -> *mut [u8] {\n+   |  ____________________________________________^\n+LL | |     { ({ x }) as _ }\n+LL | | }\n+   | |_^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut mut u8, ..)`\n+\n+error: casting between raw pointers to `[mut u16]` (element size 2) and `[mut u8]` (element size 1) does not adjust the count\n+  --> $DIR/cast_slice_different_sizes.rs:71:5\n+   |\n+LL |     { ({ x }) as _ }\n+   |     ^^^^^^^^^^^^^^^^ help: replace with `ptr::slice_from_raw_parts_mut`: `core::ptr::slice_from_raw_parts_mut(({ x }) as *mut mut u8, ..)`\n+\n+error: aborting due to 12 previous errors\n "}]}