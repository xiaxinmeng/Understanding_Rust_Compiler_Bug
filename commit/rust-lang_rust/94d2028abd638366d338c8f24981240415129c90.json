{"sha": "94d2028abd638366d338c8f24981240415129c90", "node_id": "C_kwDOAAsO6NoAKDk0ZDIwMjhhYmQ2MzgzNjZkMzM4YzhmMjQ5ODEyNDA0MTUxMjljOTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-21T18:00:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T18:00:15Z"}, "message": "Rollup merge of #109446 - spastorino:new-rpitit-17, r=compiler-errors\n\nDo not suggest bounds restrictions for synthesized RPITITs\n\nBefore this PR we were getting ...\n\n```\nwarning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n --> tests/ui/async-await/in-trait/missing-send-bound.rs:5:12\n  |\n5 | #![feature(async_fn_in_trait)]\n  |            ^^^^^^^^^^^^^^^^^\n  |\n  = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n  = note: `#[warn(incomplete_features)]` on by default\n\nerror: future cannot be sent between threads safely\n  --> tests/ui/async-await/in-trait/missing-send-bound.rs:17:20\n   |\n17 |     assert_is_send(test::<T>());\n   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\nnote: future is not `Send` as it awaits another future which is not `Send`\n  --> tests/ui/async-await/in-trait/missing-send-bound.rs:13:5\n   |\n13 |     T::bar().await;\n   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\nnote: required by a bound in `assert_is_send`\n  --> tests/ui/async-await/in-trait/missing-send-bound.rs:21:27\n   |\n21 | fn assert_is_send(_: impl Send) {}\n   |                           ^^^^ required by this bound in `assert_is_send`\nhelp: consider further restricting the associated type\n   |\n16 | fn test2<T: Foo>() where impl Future<Output = ()>: Send {\n   |                    ++++++++++++++++++++++++++++++++++++\n\nerror: aborting due to previous error; 1 warning emitted\n```\n\nand we want this output ...\n\n```\nwarning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n  --> $DIR/missing-send-bound.rs:5:12\n   |\nLL | #![feature(async_fn_in_trait)]\n   |            ^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n   = note: `#[warn(incomplete_features)]` on by default\n\nerror: future cannot be sent between threads safely\n  --> $DIR/missing-send-bound.rs:17:20\n   |\nLL |     assert_is_send(test::<T>());\n   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\nnote: future is not `Send` as it awaits another future which is not `Send`\n  --> $DIR/missing-send-bound.rs:13:5\n   |\nLL |     T::bar().await;\n   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\nnote: required by a bound in `assert_is_send`\n  --> $DIR/missing-send-bound.rs:21:27\n   |\nLL | fn assert_is_send(_: impl Send) {}\n   |                           ^^^^ required by this bound in `assert_is_send`\n\nerror: aborting due to previous error; 1 warning emitted\n```\n\nr? `@compiler-errors`", "tree": {"sha": "22e0cb33e787c47e78b9a10e49a5bad174534437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22e0cb33e787c47e78b9a10e49a5bad174534437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94d2028abd638366d338c8f24981240415129c90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGfCvCRBK7hj4Ov3rIwAAekYIAFroOLvHYFKr8Sor/bp+Pa6Y\nSIM6KQM2k3qVqOkN/b9kDIKbq3dmQmhybcp8fS1ygBPFxgVq8PbvA13L+S/PJx5s\nP1iz2jqm0Di1K1SwaVvR1IMv7oePR0/hjKohM5fzXjZ5M4DanuFUxKWuhGWvaiqX\n/EeU17Jogf5OMD9TqASV+n8Iy7vxb3z3B8U1yFw/FG0kvkOfa6dW2Rvz/8p5tQNJ\nvZm7QJ9qAPYanwyOY6NJE9fJSelSqh3xWUu1VS/O4rp4I6mLFoTBpJZGYfonyPop\nGJd3qk816XDk0RGiFADlqeEu3eWO3uUnH2X+6sMaZQyEvpz9pGGIXojp+sl+FPA=\n=qTb/\n-----END PGP SIGNATURE-----\n", "payload": "tree 22e0cb33e787c47e78b9a10e49a5bad174534437\nparent fef1fc4349b500186e4708e0fd52bd78c3879b41\nparent 3b04ad2753d5ace0e8ef17d3625a78b37b2cb500\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679421615 +0100\ncommitter GitHub <noreply@github.com> 1679421615 +0100\n\nRollup merge of #109446 - spastorino:new-rpitit-17, r=compiler-errors\n\nDo not suggest bounds restrictions for synthesized RPITITs\n\nBefore this PR we were getting ...\n\n```\nwarning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n --> tests/ui/async-await/in-trait/missing-send-bound.rs:5:12\n  |\n5 | #![feature(async_fn_in_trait)]\n  |            ^^^^^^^^^^^^^^^^^\n  |\n  = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n  = note: `#[warn(incomplete_features)]` on by default\n\nerror: future cannot be sent between threads safely\n  --> tests/ui/async-await/in-trait/missing-send-bound.rs:17:20\n   |\n17 |     assert_is_send(test::<T>());\n   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\nnote: future is not `Send` as it awaits another future which is not `Send`\n  --> tests/ui/async-await/in-trait/missing-send-bound.rs:13:5\n   |\n13 |     T::bar().await;\n   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\nnote: required by a bound in `assert_is_send`\n  --> tests/ui/async-await/in-trait/missing-send-bound.rs:21:27\n   |\n21 | fn assert_is_send(_: impl Send) {}\n   |                           ^^^^ required by this bound in `assert_is_send`\nhelp: consider further restricting the associated type\n   |\n16 | fn test2<T: Foo>() where impl Future<Output = ()>: Send {\n   |                    ++++++++++++++++++++++++++++++++++++\n\nerror: aborting due to previous error; 1 warning emitted\n```\n\nand we want this output ...\n\n```\nwarning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n  --> $DIR/missing-send-bound.rs:5:12\n   |\nLL | #![feature(async_fn_in_trait)]\n   |            ^^^^^^^^^^^^^^^^^\n   |\n   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n   = note: `#[warn(incomplete_features)]` on by default\n\nerror: future cannot be sent between threads safely\n  --> $DIR/missing-send-bound.rs:17:20\n   |\nLL |     assert_is_send(test::<T>());\n   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n   |\n   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\nnote: future is not `Send` as it awaits another future which is not `Send`\n  --> $DIR/missing-send-bound.rs:13:5\n   |\nLL |     T::bar().await;\n   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\nnote: required by a bound in `assert_is_send`\n  --> $DIR/missing-send-bound.rs:21:27\n   |\nLL | fn assert_is_send(_: impl Send) {}\n   |                           ^^^^ required by this bound in `assert_is_send`\n\nerror: aborting due to previous error; 1 warning emitted\n```\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94d2028abd638366d338c8f24981240415129c90", "html_url": "https://github.com/rust-lang/rust/commit/94d2028abd638366d338c8f24981240415129c90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94d2028abd638366d338c8f24981240415129c90/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fef1fc4349b500186e4708e0fd52bd78c3879b41", "url": "https://api.github.com/repos/rust-lang/rust/commits/fef1fc4349b500186e4708e0fd52bd78c3879b41", "html_url": "https://github.com/rust-lang/rust/commit/fef1fc4349b500186e4708e0fd52bd78c3879b41"}, {"sha": "3b04ad2753d5ace0e8ef17d3625a78b37b2cb500", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b04ad2753d5ace0e8ef17d3625a78b37b2cb500", "html_url": "https://github.com/rust-lang/rust/commit/3b04ad2753d5ace0e8ef17d3625a78b37b2cb500"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "b501840b9260b749bbb444c29849e8569bd2bd57", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94d2028abd638366d338c8f24981240415129c90/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d2028abd638366d338c8f24981240415129c90/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=94d2028abd638366d338c8f24981240415129c90", "patch": "@@ -420,6 +420,7 @@ fn suggest_restriction<'tcx>(\n ) {\n     if hir_generics.where_clause_span.from_expansion()\n         || hir_generics.where_clause_span.desugaring_kind().is_some()\n+        || projection.map_or(false, |projection| tcx.opt_rpitit_info(projection.def_id).is_some())\n     {\n         return;\n     }"}, {"sha": "319ed582e2719eae56940b8ce1755c3a95c76d74", "filename": "tests/ui/async-await/in-trait/missing-send-bound.current.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/94d2028abd638366d338c8f24981240415129c90/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94d2028abd638366d338c8f24981240415129c90/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr?ref=94d2028abd638366d338c8f24981240415129c90", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing-send-bound.rs:3:12\n+  --> $DIR/missing-send-bound.rs:5:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^\n@@ -8,19 +8,19 @@ LL | #![feature(async_fn_in_trait)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error: future cannot be sent between threads safely\n-  --> $DIR/missing-send-bound.rs:15:20\n+  --> $DIR/missing-send-bound.rs:17:20\n    |\n LL |     assert_is_send(test::<T>());\n    |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/missing-send-bound.rs:11:5\n+  --> $DIR/missing-send-bound.rs:13:5\n    |\n LL |     T::bar().await;\n    |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n note: required by a bound in `assert_is_send`\n-  --> $DIR/missing-send-bound.rs:19:27\n+  --> $DIR/missing-send-bound.rs:21:27\n    |\n LL | fn assert_is_send(_: impl Send) {}\n    |                           ^^^^ required by this bound in `assert_is_send`", "previous_filename": "tests/ui/async-await/in-trait/missing-send-bound.stderr"}, {"sha": "319ed582e2719eae56940b8ce1755c3a95c76d74", "filename": "tests/ui/async-await/in-trait/missing-send-bound.next.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/94d2028abd638366d338c8f24981240415129c90/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94d2028abd638366d338c8f24981240415129c90/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr?ref=94d2028abd638366d338c8f24981240415129c90", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/missing-send-bound.rs:5:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/missing-send-bound.rs:17:20\n+   |\n+LL |     assert_is_send(test::<T>());\n+   |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/missing-send-bound.rs:13:5\n+   |\n+LL |     T::bar().await;\n+   |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n+note: required by a bound in `assert_is_send`\n+  --> $DIR/missing-send-bound.rs:21:27\n+   |\n+LL | fn assert_is_send(_: impl Send) {}\n+   |                           ^^^^ required by this bound in `assert_is_send`\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "705fcf322f9eaa5cd09693d47c090715c28145b4", "filename": "tests/ui/async-await/in-trait/missing-send-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94d2028abd638366d338c8f24981240415129c90/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94d2028abd638366d338c8f24981240415129c90/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs?ref=94d2028abd638366d338c8f24981240415129c90", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes"}]}