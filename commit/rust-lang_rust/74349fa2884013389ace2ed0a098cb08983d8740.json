{"sha": "74349fa2884013389ace2ed0a098cb08983d8740", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MzQ5ZmEyODg0MDEzMzg5YWNlMmVkMGEwOThjYjA4OTgzZDg3NDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-07T05:08:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-09-11T05:41:16Z"}, "message": "rustc: evaluate fixed-length array length expressions lazily.", "tree": {"sha": "c7c7bff8fd04c7eed4c7ca6e52eafe248e97c2db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7c7bff8fd04c7eed4c7ca6e52eafe248e97c2db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74349fa2884013389ace2ed0a098cb08983d8740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74349fa2884013389ace2ed0a098cb08983d8740", "html_url": "https://github.com/rust-lang/rust/commit/74349fa2884013389ace2ed0a098cb08983d8740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74349fa2884013389ace2ed0a098cb08983d8740/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88217618ecf430c3588536a4af2e3dd0b790e49c", "url": "https://api.github.com/repos/rust-lang/rust/commits/88217618ecf430c3588536a4af2e3dd0b790e49c", "html_url": "https://github.com/rust-lang/rust/commit/88217618ecf430c3588536a4af2e3dd0b790e49c"}], "stats": {"total": 639, "additions": 517, "deletions": 122}, "files": [{"sha": "e933ca4c2b551db0fc395c68bf66acfaaab4e50b", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -235,6 +235,10 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::Pr\n                 def_id.hash_stable(hcx, hasher);\n                 closure_kind.hash_stable(hcx, hasher);\n             }\n+            ty::Predicate::ConstEvaluatable(def_id, substs) => {\n+                def_id.hash_stable(hcx, hasher);\n+                substs.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }\n@@ -317,6 +321,10 @@ for ::middle::const_val::ConstVal<'gcx> {\n                 value.hash_stable(hcx, hasher);\n                 times.hash_stable(hcx, hasher);\n             }\n+            Unevaluated(def_id, substs) => {\n+                def_id.hash_stable(hcx, hasher);\n+                substs.hash_stable(hcx, hasher);\n+            }\n         }\n     }\n }"}, {"sha": "6ccf7e42fd5fd7fba6e73e0f3e89344bad8e04ad", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -442,6 +442,7 @@ macro_rules! impl_trans_normalize {\n \n impl_trans_normalize!('gcx,\n     Ty<'gcx>,\n+    &'gcx ty::Const<'gcx>,\n     &'gcx Substs<'gcx>,\n     ty::FnSig<'gcx>,\n     ty::PolyFnSig<'gcx>,\n@@ -493,7 +494,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         let param_env = ty::ParamEnv::empty(Reveal::All);\n         let value = self.erase_regions(value);\n \n-        if !value.has_projection_types() {\n+        if !value.has_projections() {\n             return value;\n         }\n \n@@ -515,7 +516,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n \n         let value = self.erase_regions(value);\n \n-        if !value.has_projection_types() {\n+        if !value.has_projections() {\n             return value;\n         }\n "}, {"sha": "7b239980467303ff9720e1eb7e788a5781dd3ba3", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -10,13 +10,9 @@\n \n pub use rustc_const_math::ConstInt;\n \n-use hir;\n-use hir::def::Def;\n use hir::def_id::DefId;\n-use traits::Reveal;\n use ty::{self, TyCtxt, layout};\n use ty::subst::Substs;\n-use util::common::ErrorReported;\n use rustc_const_math::*;\n \n use graphviz::IntoCow;\n@@ -41,6 +37,7 @@ pub enum ConstVal<'tcx> {\n     Variant(DefId),\n     Function(DefId, &'tcx Substs<'tcx>),\n     Aggregate(ConstAggregate<'tcx>),\n+    Unevaluated(DefId, &'tcx Substs<'tcx>),\n }\n \n #[derive(Copy, Clone, Debug, Hash, RustcEncodable, Eq, PartialEq)]\n@@ -221,37 +218,3 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         self.struct_error(tcx, primary_span, primary_kind).emit();\n     }\n }\n-\n-/// Returns the value of the length-valued expression\n-pub fn eval_length<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                                   count: hir::BodyId,\n-                                   reason: &str)\n-                                   -> Result<&'gcx ty::Const<'gcx>, ErrorReported>\n-{\n-    let count_expr = &tcx.hir.body(count).value;\n-    let count_def_id = tcx.hir.body_owner_def_id(count);\n-    let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n-    let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n-    match tcx.at(count_expr.span).const_eval(param_env.and((count_def_id, substs))) {\n-        Ok(count) => {\n-            // Elsewhere in the compiler this is enforced even in the presence\n-            // of erroneous code (type mismatch error has already been emitted).\n-            assert_eq!(count.ty, tcx.types.usize);\n-            Ok(count)\n-        }\n-        Err(ConstEvalErr { kind: ErrKind::TypeckError, .. }) => Err(ErrorReported),\n-        Err(err) => {\n-            let mut diag = err.struct_error(tcx, count_expr.span, reason);\n-\n-            if let hir::ExprPath(hir::QPath::Resolved(None, ref path)) = count_expr.node {\n-                if let Def::Local(..) = path.def {\n-                    diag.note(&format!(\"`{}` is a variable\",\n-                                       tcx.hir.node_to_pretty_string(count_expr.id)));\n-                }\n-            }\n-\n-            diag.emit();\n-            Err(ErrorReported)\n-        }\n-    }\n-}"}, {"sha": "4de86b669160eb03736d17c98f3b2cc6bb2163ec", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -147,7 +147,8 @@ impl<'tcx> FreeRegionMap<'tcx> {\n                 ty::Predicate::WellFormed(..) |\n                 ty::Predicate::ObjectSafe(..) |\n                 ty::Predicate::ClosureKind(..) |\n-                ty::Predicate::TypeOutlives(..) => {\n+                ty::Predicate::TypeOutlives(..) |\n+                ty::Predicate::ConstEvaluatable(..) => {\n                     // No region bounds here\n                 }\n                 ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r_a, r_b))) => {"}, {"sha": "5102b41598d6fcd6ee6ace871efbe8fb98e870a5", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -876,7 +876,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         // Always promote `[T; 0]` (even when e.g. borrowed mutably).\n         let promotable = match expr_ty.sty {\n-            ty::TyArray(_, len) if len.val.to_const_int().unwrap().to_u64().unwrap() == 0 => true,\n+            ty::TyArray(_, len) if\n+                len.val.to_const_int().and_then(|i| i.to_u64()) == Some(0) => true,\n             _ => promotable,\n         };\n "}, {"sha": "d9ca5ddf46b055b4df50df7fcea331b98ed23f82", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -1535,6 +1535,7 @@ fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ConstVal) -> fmt::Result {\n         Variant(def_id) |\n         Function(def_id, _) => write!(fmt, \"{}\", item_path_str(def_id)),\n         Aggregate(_) => bug!(\"`ConstVal::{:?}` should not be in MIR\", const_val),\n+        Unevaluated(..) => write!(fmt, \"{:?}\", const_val)\n     }\n }\n "}, {"sha": "b491baadd7c2bc7a888509d2c46c927a49b90bb4", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -19,6 +19,7 @@ use super::{\n     OnUnimplementedNote,\n     OutputTypeParameterMismatch,\n     TraitNotObjectSafe,\n+    ConstEvalFailure,\n     PredicateObligation,\n     Reveal,\n     SelectionContext,\n@@ -31,6 +32,7 @@ use hir;\n use hir::def_id::DefId;\n use infer::{self, InferCtxt};\n use infer::type_variable::TypeVariableOrigin;\n+use middle::const_val;\n use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n use syntax::ast;\n@@ -698,6 +700,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         // (which may fail).\n                         span_bug!(span, \"WF predicate not satisfied for {:?}\", ty);\n                     }\n+\n+                    ty::Predicate::ConstEvaluatable(..) => {\n+                        // Errors for `ConstEvaluatable` predicates show up as\n+                        // `SelectionError::ConstEvalFailure`,\n+                        // not `Unimplemented`.\n+                        span_bug!(span,\n+                            \"const-evaluatable requirement gave wrong error: `{:?}`\", obligation)\n+                    }\n                 }\n             }\n \n@@ -762,6 +772,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 self.tcx.report_object_safety_error(span, did,\n                                                     violations)\n             }\n+\n+            ConstEvalFailure(ref err) => {\n+                if let const_val::ErrKind::TypeckError = err.kind {\n+                    return;\n+                }\n+                err.struct_error(self.tcx, span, \"constant expression\")\n+            }\n         };\n         self.note_obligation_cause(&mut err, obligation);\n         err.emit();"}, {"sha": "cc2506d1afc505c7f6d2553fafc160becf80c410", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -25,7 +25,7 @@ use super::{FulfillmentError, FulfillmentErrorCode};\n use super::{ObligationCause, PredicateObligation, Obligation};\n use super::project;\n use super::select::SelectionContext;\n-use super::Unimplemented;\n+use super::{Unimplemented, ConstEvalFailure};\n \n impl<'tcx> ForestObligation for PendingPredicateObligation<'tcx> {\n     type Predicate = ty::Predicate<'tcx>;\n@@ -540,6 +540,29 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                 }\n             }\n         }\n+\n+        ty::Predicate::ConstEvaluatable(def_id, substs) => {\n+            match selcx.tcx().lift_to_global(&obligation.param_env) {\n+                None => {\n+                    Ok(None)\n+                }\n+                Some(param_env) => {\n+                    match selcx.tcx().lift_to_global(&substs) {\n+                        None => {\n+                            pending_obligation.stalled_on = substs.types().collect();\n+                            Ok(None)\n+                        }\n+                        Some(substs) => {\n+                            match selcx.tcx().at(obligation.cause.span)\n+                                             .const_eval(param_env.and((def_id, substs))) {\n+                                Ok(_) => Ok(Some(vec![])),\n+                                Err(e) => Err(CodeSelectionError(ConstEvalFailure(e)))\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "fb71d9cc49b9e1efe1b0585bfcb17cb6b907d24a", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -17,6 +17,7 @@ pub use self::ObligationCauseCode::*;\n \n use hir;\n use hir::def_id::DefId;\n+use middle::const_val::ConstEvalErr;\n use middle::region;\n use middle::free_region::FreeRegionMap;\n use ty::subst::Substs;\n@@ -218,6 +219,7 @@ pub enum SelectionError<'tcx> {\n                                 ty::PolyTraitRef<'tcx>,\n                                 ty::error::TypeError<'tcx>),\n     TraitNotObjectSafe(DefId),\n+    ConstEvalFailure(ConstEvalErr<'tcx>),\n }\n \n pub struct FulfillmentError<'tcx> {"}, {"sha": "1e9816095ea2ec419330dc3b154f20ee5080b869", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -169,7 +169,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::ClosureKind(..) |\n                     ty::Predicate::Subtype(..) |\n-                    ty::Predicate::Equate(..) => {\n+                    ty::Predicate::Equate(..) |\n+                    ty::Predicate::ConstEvaluatable(..) => {\n                         false\n                     }\n                 }\n@@ -203,7 +204,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::ClosureKind(..) |\n-                    ty::Predicate::TypeOutlives(..) => {\n+                    ty::Predicate::TypeOutlives(..) |\n+                    ty::Predicate::ConstEvaluatable(..) => {\n                         false\n                     }\n                 }"}, {"sha": "54e31aed272a31389a2271906dc096b53d1747a2", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -27,10 +27,11 @@ use super::util;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use infer::type_variable::TypeVariableOrigin;\n+use middle::const_val::ConstVal;\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use ty::subst::Subst;\n+use ty::subst::{Subst, Substs};\n use ty::{self, ToPredicate, ToPolyTraitRef, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n use util::common::FN_OUTPUT_NAME;\n@@ -260,7 +261,7 @@ impl<'a, 'b, 'gcx, 'tcx> AssociatedTypeNormalizer<'a, 'b, 'gcx, 'tcx> {\n     fn fold<T:TypeFoldable<'tcx>>(&mut self, value: &T) -> T {\n         let value = self.selcx.infcx().resolve_type_vars_if_possible(value);\n \n-        if !value.has_projection_types() {\n+        if !value.has_projections() {\n             value.clone()\n         } else {\n             value.fold_with(self)\n@@ -332,6 +333,39 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n             }\n         }\n     }\n+\n+    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        if let ConstVal::Unevaluated(def_id, substs) = constant.val {\n+            if substs.needs_infer() {\n+                let identity_substs = Substs::identity_for_item(self.tcx(), def_id);\n+                let data = self.param_env.and((def_id, identity_substs));\n+                match self.tcx().lift_to_global(&data) {\n+                    Some(data) => {\n+                        match self.tcx().const_eval(data) {\n+                            Ok(evaluated) => {\n+                                let evaluated = evaluated.subst(self.tcx(), substs);\n+                                return self.fold_const(evaluated);\n+                            }\n+                            Err(_) => {}\n+                        }\n+                    }\n+                    None => {}\n+                }\n+            } else {\n+                let data = self.param_env.and((def_id, substs));\n+                match self.tcx().lift_to_global(&data) {\n+                    Some(data) => {\n+                        match self.tcx().const_eval(data) {\n+                            Ok(evaluated) => return self.fold_const(evaluated),\n+                            Err(_) => {}\n+                        }\n+                    }\n+                    None => {}\n+                }\n+            }\n+        }\n+        constant\n+    }\n }\n \n #[derive(Clone)]\n@@ -520,7 +554,7 @@ fn opt_normalize_projection_type<'a, 'b, 'gcx, 'tcx>(\n                    depth,\n                    obligations);\n \n-            let result = if projected_ty.has_projection_types() {\n+            let result = if projected_ty.has_projections() {\n                 let mut normalizer = AssociatedTypeNormalizer::new(selcx,\n                                                                    param_env,\n                                                                    cause,"}, {"sha": "f5f69ad0a7cec124372e076141136b2873e1b951", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -732,6 +732,21 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     }\n                 }\n             }\n+\n+            ty::Predicate::ConstEvaluatable(def_id, substs) => {\n+                match self.tcx().lift_to_global(&(obligation.param_env, substs)) {\n+                    Some((param_env, substs)) => {\n+                        match self.tcx().const_eval(param_env.and((def_id, substs))) {\n+                            Ok(_) => EvaluatedToOk,\n+                            Err(_) => EvaluatedToErr\n+                        }\n+                    }\n+                    None => {\n+                        // Inference variables still left in param_env or substs.\n+                        EvaluatedToAmbig\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "19ed03aa14917b8e67e5b77c0e49d7e89471e663", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -173,6 +173,9 @@ impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n             super::TraitNotObjectSafe(def_id) => {\n                 Some(super::TraitNotObjectSafe(def_id))\n             }\n+            super::ConstEvalFailure(ref err) => {\n+                tcx.lift(err).map(super::ConstEvalFailure)\n+            }\n         }\n     }\n }"}, {"sha": "9c4a260b35d49a03cc213eb98f0e3928ca40a6eb", "filename": "src/librustc/traits/trans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ftrans%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'gcx> AssociatedTypeNormalizer<'a, 'gcx> {\n     }\n \n     fn fold<T:TypeFoldable<'gcx>>(&mut self, value: &T) -> T {\n-        if !value.has_projection_types() {\n+        if !value.has_projections() {\n             value.clone()\n         } else {\n             value.fold_with(self)\n@@ -134,7 +134,7 @@ impl<'a, 'gcx> TypeFolder<'gcx, 'gcx> for AssociatedTypeNormalizer<'a, 'gcx> {\n     }\n \n     fn fold_ty(&mut self, ty: Ty<'gcx>) -> Ty<'gcx> {\n-        if !ty.has_projection_types() {\n+        if !ty.has_projections() {\n             ty\n         } else {\n             self.tcx.trans_trait_caches.project_cache.memoize(ty, || {"}, {"sha": "42e0834e8e43b1498e260125fe42d9fe9bc49aec", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -48,6 +48,9 @@ fn anonymize_predicate<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n \n         ty::Predicate::Subtype(ref data) =>\n             ty::Predicate::Subtype(tcx.anonymize_late_bound_regions(data)),\n+\n+        ty::Predicate::ConstEvaluatable(def_id, substs) =>\n+            ty::Predicate::ConstEvaluatable(def_id, substs),\n     }\n }\n \n@@ -175,6 +178,10 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n             ty::Predicate::ClosureKind(..) => {\n                 // Nothing to elaborate when waiting for a closure's kind to be inferred.\n             }\n+            ty::Predicate::ConstEvaluatable(..) => {\n+                // Currently, we do not elaborate const-evaluatable\n+                // predicates.\n+            }\n \n             ty::Predicate::RegionOutlives(..) => {\n                 // Nothing to elaborate from `'a: 'b`."}, {"sha": "6d12731307d63cc6b2c5d18d1a8705ba2a56d499", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -1190,18 +1190,6 @@ pub trait Lift<'tcx> {\n     fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted>;\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n-    type Lifted = ty::ParamEnv<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<ty::ParamEnv<'tcx>> {\n-        self.caller_bounds.lift_to_tcx(tcx).and_then(|caller_bounds| {\n-            Some(ty::ParamEnv {\n-                reveal: self.reveal,\n-                caller_bounds,\n-            })\n-        })\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n     type Lifted = Ty<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Ty<'tcx>> {"}, {"sha": "9ece719c764704b5dc41815f7ade8c1dab3a74cb", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -235,6 +235,10 @@ impl FlagComputation {\n             ConstVal::Aggregate(ConstAggregate::Repeat(v, _)) => {\n                 self.add_const(v);\n             }\n+            ConstVal::Unevaluated(_, substs) => {\n+                self.add_flags(TypeFlags::HAS_PROJECTION);\n+                self.add_substs(substs);\n+            }\n         }\n     }\n "}, {"sha": "543e8f3e2f04d9511cbce9a1e1c68eefa9bb306f", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -39,6 +39,7 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n+use middle::const_val::ConstVal;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n use std::fmt;\n@@ -67,7 +68,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n         self.visit_with(&mut HasTypeFlagsVisitor { flags: flags })\n     }\n-    fn has_projection_types(&self) -> bool {\n+    fn has_projections(&self) -> bool {\n         self.has_type_flags(TypeFlags::HAS_PROJECTION)\n     }\n     fn references_error(&self) -> bool {\n@@ -139,6 +140,10 @@ pub trait TypeFolder<'gcx: 'tcx, 'tcx> : Sized {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         r.super_fold_with(self)\n     }\n+\n+    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+        c.super_fold_with(self)\n+    }\n }\n \n pub trait TypeVisitor<'tcx> : Sized {\n@@ -153,6 +158,10 @@ pub trait TypeVisitor<'tcx> : Sized {\n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n         r.super_visit_with(self)\n     }\n+\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+        c.super_visit_with(self)\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -603,6 +612,17 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         debug!(\"HasTypeFlagsVisitor: r={:?} r.flags={:?} self.flags={:?}\", r, flags, self.flags);\n         flags.intersects(self.flags)\n     }\n+\n+    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+        if let ConstVal::Unevaluated(..) = c.val {\n+            let projection_flags = TypeFlags::HAS_NORMALIZABLE_PROJECTION |\n+                TypeFlags::HAS_PROJECTION;\n+            if projection_flags.intersects(self.flags) {\n+                return true;\n+            }\n+        }\n+        c.super_visit_with(self)\n+    }\n }\n \n /// Collects all the late-bound regions it finds into a hash set."}, {"sha": "a829814e0905ba2b9d1c51baf4df34149ec20359", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 }))\n             },\n             TyArray(ty, len) => {\n-                if len.val.to_const_int().unwrap().to_u64().unwrap() == 0 {\n+                if len.val.to_const_int().and_then(|i| i.to_u64()) == Some(0) {\n                     DefIdForest::empty()\n                 } else {\n                     ty.uninhabited_from(visited, tcx)"}, {"sha": "0106d98b64130e1938929322e0eb03e1ff007bac", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -837,12 +837,22 @@ impl<'a, 'tcx> Struct {\n \n             // Is this a fixed-size array of something non-zero\n             // with at least one element?\n-            (_, &ty::TyArray(ety, d)) if d.val.to_const_int().unwrap().to_u64().unwrap() != 0 => {\n-                Struct::non_zero_field_paths(\n-                    tcx,\n-                    param_env,\n-                    Some(ety).into_iter(),\n-                    None)\n+            (_, &ty::TyArray(ety, mut count)) => {\n+                if count.has_projections() {\n+                    count = tcx.normalize_associated_type_in_env(&count, param_env);\n+                    if count.has_projections() {\n+                        return Err(LayoutError::Unknown(ty));\n+                    }\n+                }\n+                if count.val.to_const_int().unwrap().to_u64().unwrap() != 0 {\n+                    Struct::non_zero_field_paths(\n+                        tcx,\n+                        param_env,\n+                        Some(ety).into_iter(),\n+                        None)\n+                } else {\n+                    Ok(None)\n+                }\n             }\n \n             (_, &ty::TyProjection(_)) | (_, &ty::TyAnon(..)) => {\n@@ -1174,7 +1184,14 @@ impl<'a, 'tcx> Layout {\n             }\n \n             // Arrays and slices.\n-            ty::TyArray(element, count) => {\n+            ty::TyArray(element, mut count) => {\n+                if count.has_projections() {\n+                    count = tcx.normalize_associated_type_in_env(&count, param_env);\n+                    if count.has_projections() {\n+                        return Err(LayoutError::Unknown(ty));\n+                    }\n+                }\n+\n                 let element = element.layout(tcx, param_env)?;\n                 let element_size = element.size(dl);\n                 let count = count.val.to_const_int().unwrap().to_u64().unwrap();"}, {"sha": "83b4fbb4f803af5785b167c7035c5b5c48e41fcf", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -159,7 +159,7 @@ impl Key for (MirSuite, MirPassIndex, DefId) {\n     }\n }\n \n-impl<'tcx, T: Clone + Hash + Eq + Debug> Key for ty::ParamEnvAnd<'tcx, T> {\n+impl<'tcx> Key for Ty<'tcx> {\n     fn map_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }\n@@ -168,6 +168,15 @@ impl<'tcx, T: Clone + Hash + Eq + Debug> Key for ty::ParamEnvAnd<'tcx, T> {\n     }\n }\n \n+impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n+    fn map_crate(&self) -> CrateNum {\n+        self.value.map_crate()\n+    }\n+    fn default_span(&self, tcx: TyCtxt) -> Span {\n+        self.value.default_span(tcx)\n+    }\n+}\n+\n trait Value<'tcx>: Sized {\n     fn from_cycle_error<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self;\n }"}, {"sha": "bdd4c003de7ade6ea74d69ae29da0f0af0d213ef", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -846,6 +846,9 @@ pub enum Predicate<'tcx> {\n \n     /// `T1 <: T2`\n     Subtype(PolySubtypePredicate<'tcx>),\n+\n+    /// Constant initializer must evaluate successfully.\n+    ConstEvaluatable(DefId, &'tcx Substs<'tcx>),\n }\n \n impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n@@ -938,6 +941,8 @@ impl<'a, 'gcx, 'tcx> Predicate<'tcx> {\n                 Predicate::ObjectSafe(trait_def_id),\n             Predicate::ClosureKind(closure_def_id, kind) =>\n                 Predicate::ClosureKind(closure_def_id, kind),\n+            Predicate::ConstEvaluatable(def_id, const_substs) =>\n+                Predicate::ConstEvaluatable(def_id, const_substs.subst(tcx, substs)),\n         }\n     }\n }\n@@ -1120,6 +1125,9 @@ impl<'tcx> Predicate<'tcx> {\n             ty::Predicate::ClosureKind(_closure_def_id, _kind) => {\n                 vec![]\n             }\n+            ty::Predicate::ConstEvaluatable(_, substs) => {\n+                substs.types().collect()\n+            }\n         };\n \n         // The only reason to collect into a vector here is that I was\n@@ -1142,7 +1150,8 @@ impl<'tcx> Predicate<'tcx> {\n             Predicate::WellFormed(..) |\n             Predicate::ObjectSafe(..) |\n             Predicate::ClosureKind(..) |\n-            Predicate::TypeOutlives(..) => {\n+            Predicate::TypeOutlives(..) |\n+            Predicate::ConstEvaluatable(..) => {\n                 None\n             }\n         }"}, {"sha": "309880ba06333174b6dc6b4197f9b90cc9f9ffa5", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -14,9 +14,12 @@\n //! type equality, etc.\n \n use hir::def_id::DefId;\n+use middle::const_val::ConstVal;\n+use traits::Reveal;\n use ty::subst::{Kind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n+use util::common::ErrorReported;\n use std::rc::Rc;\n use std::iter;\n use syntax::abi;\n@@ -430,12 +433,43 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             let t = relation.relate(&a_t, &b_t)?;\n             assert_eq!(sz_a.ty, tcx.types.usize);\n             assert_eq!(sz_b.ty, tcx.types.usize);\n-            let sz_a_u64 = sz_a.val.to_const_int().unwrap().to_u64().unwrap();\n-            let sz_b_u64 = sz_b.val.to_const_int().unwrap().to_u64().unwrap();\n-            if sz_a_u64 == sz_b_u64 {\n-                Ok(tcx.mk_ty(ty::TyArray(t, sz_a)))\n-            } else {\n-                Err(TypeError::FixedArraySize(expected_found(relation, &sz_a_u64, &sz_b_u64)))\n+            let to_u64 = |x: &'tcx ty::Const<'tcx>| -> Result<u64, ErrorReported> {\n+                match x.val {\n+                    ConstVal::Integral(x) => Ok(x.to_u64().unwrap()),\n+                    ConstVal::Unevaluated(def_id, substs) => {\n+                        // FIXME(eddyb) get the right param_env.\n+                        let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+                        match tcx.lift_to_global(&substs) {\n+                            Some(substs) => {\n+                                match tcx.const_eval(param_env.and((def_id, substs))) {\n+                                    Ok(&ty::Const { val: ConstVal::Integral(x), .. }) => {\n+                                        return Ok(x.to_u64().unwrap());\n+                                    }\n+                                    _ => {}\n+                                }\n+                            }\n+                            None => {}\n+                        }\n+                        tcx.sess.delay_span_bug(tcx.def_span(def_id),\n+                            \"array length could not be evaluated\");\n+                        Err(ErrorReported)\n+                    }\n+                    _ => bug!(\"arrays should not have {:?} as length\", x)\n+                }\n+            };\n+            match (to_u64(sz_a), to_u64(sz_b)) {\n+                (Ok(sz_a_u64), Ok(sz_b_u64)) => {\n+                    if sz_a_u64 == sz_b_u64 {\n+                        Ok(tcx.mk_ty(ty::TyArray(t, sz_a)))\n+                    } else {\n+                        Err(TypeError::FixedArraySize(\n+                            expected_found(relation, &sz_a_u64, &sz_b_u64)))\n+                    }\n+                }\n+                // We reported an error or will ICE, so we can return TyError.\n+                (Err(ErrorReported), _) | (_, Err(ErrorReported)) => {\n+                    Ok(tcx.types.err)\n+                }\n             }\n         }\n "}, {"sha": "54d55748c8e3a2e5e5179621a01ab3116befcd52", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 119, "deletions": 1, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use infer::type_variable;\n-use middle::const_val::{ConstVal, ConstAggregate};\n+use middle::const_val::{self, ConstVal, ConstAggregate, ConstEvalErr};\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n@@ -59,6 +59,13 @@ impl<'tcx, T: Lift<'tcx>, E: Lift<'tcx>> Lift<'tcx> for Result<T, E> {\n     }\n }\n \n+impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for Box<T> {\n+    type Lifted = Box<T::Lifted>;\n+    fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        tcx.lift(&**self).map(Box::new)\n+    }\n+}\n+\n impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for [T] {\n     type Lifted = Vec<T::Lifted>;\n     fn lift_to_tcx<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -210,6 +217,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::Predicate<'a> {\n             ty::Predicate::ObjectSafe(trait_def_id) => {\n                 Some(ty::Predicate::ObjectSafe(trait_def_id))\n             }\n+            ty::Predicate::ConstEvaluatable(def_id, substs) => {\n+                tcx.lift(&substs).map(|substs| {\n+                    ty::Predicate::ConstEvaluatable(def_id, substs)\n+                })\n+            }\n         }\n     }\n }\n@@ -221,6 +233,32 @@ impl<'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::Binder<T> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n+    type Lifted = ty::ParamEnv<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        tcx.lift(&self.caller_bounds).map(|caller_bounds| {\n+            ty::ParamEnv {\n+                reveal: self.reveal,\n+                caller_bounds,\n+            }\n+        })\n+    }\n+}\n+\n+impl<'a, 'tcx, T: Lift<'tcx>> Lift<'tcx> for ty::ParamEnvAnd<'a, T> {\n+    type Lifted = ty::ParamEnvAnd<'tcx, T::Lifted>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        tcx.lift(&self.param_env).and_then(|param_env| {\n+            tcx.lift(&self.value).map(|value| {\n+                ty::ParamEnvAnd {\n+                    param_env,\n+                    value,\n+                }\n+            })\n+        })\n+    }\n+}\n+\n impl<'a, 'tcx> Lift<'tcx> for ty::ClosureSubsts<'a> {\n     type Lifted = ty::ClosureSubsts<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -395,6 +433,64 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n+    type Lifted = ConstEvalErr<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        tcx.lift(&self.kind).map(|kind| {\n+            ConstEvalErr {\n+                span: self.span,\n+                kind,\n+            }\n+        })\n+    }\n+}\n+\n+impl<'a, 'tcx> Lift<'tcx> for const_val::ErrKind<'a> {\n+    type Lifted = const_val::ErrKind<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        use middle::const_val::ErrKind::*;\n+\n+        Some(match *self {\n+            CannotCast => CannotCast,\n+            MissingStructField => MissingStructField,\n+            NonConstPath => NonConstPath,\n+            UnimplementedConstVal(s) => UnimplementedConstVal(s),\n+            ExpectedConstTuple => ExpectedConstTuple,\n+            ExpectedConstStruct => ExpectedConstStruct,\n+            IndexedNonVec => IndexedNonVec,\n+            IndexNotUsize => IndexNotUsize,\n+            IndexOutOfBounds { len, index } => IndexOutOfBounds { len, index },\n+            MiscBinaryOp => MiscBinaryOp,\n+            MiscCatchAll => MiscCatchAll,\n+            IndexOpFeatureGated => IndexOpFeatureGated,\n+            Math(ref e) => Math(e.clone()),\n+\n+            LayoutError(ref e) => {\n+                return tcx.lift(e).map(LayoutError)\n+            }\n+            ErroneousReferencedConstant(ref e) => {\n+                return tcx.lift(e).map(ErroneousReferencedConstant)\n+            }\n+\n+            TypeckError => TypeckError,\n+        })\n+    }\n+}\n+\n+impl<'a, 'tcx> Lift<'tcx> for ty::layout::LayoutError<'a> {\n+    type Lifted = ty::layout::LayoutError<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        match *self {\n+            ty::layout::LayoutError::Unknown(ref ty) => {\n+                tcx.lift(ty).map(ty::layout::LayoutError::Unknown)\n+            }\n+            ty::layout::LayoutError::SizeOverflow(ref ty) => {\n+                tcx.lift(ty).map(ty::layout::LayoutError::SizeOverflow)\n+            }\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n //\n@@ -409,6 +505,13 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n macro_rules! CopyImpls {\n     ($($ty:ty),+) => {\n         $(\n+            impl<'tcx> Lift<'tcx> for $ty {\n+                type Lifted = Self;\n+                fn lift_to_tcx<'a, 'gcx>(&self, _: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Self> {\n+                    Some(*self)\n+                }\n+            }\n+\n             impl<'tcx> TypeFoldable<'tcx> for $ty {\n                 fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, _: &mut F) -> $ty {\n                     *self\n@@ -866,6 +969,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n                 ty::Predicate::ClosureKind(closure_def_id, kind),\n             ty::Predicate::ObjectSafe(trait_def_id) =>\n                 ty::Predicate::ObjectSafe(trait_def_id),\n+            ty::Predicate::ConstEvaluatable(def_id, substs) =>\n+                ty::Predicate::ConstEvaluatable(def_id, substs.fold_with(folder)),\n         }\n     }\n \n@@ -880,6 +985,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n             ty::Predicate::WellFormed(data) => data.visit_with(visitor),\n             ty::Predicate::ClosureKind(_closure_def_id, _kind) => false,\n             ty::Predicate::ObjectSafe(_trait_def_id) => false,\n+            ty::Predicate::ConstEvaluatable(_def_id, substs) => substs.visit_with(visitor),\n         }\n     }\n }\n@@ -1153,6 +1259,9 @@ impl<'tcx> TypeFoldable<'tcx> for ConstVal<'tcx> {\n                 let v = v.fold_with(folder);\n                 ConstVal::Aggregate(ConstAggregate::Repeat(v, count))\n             }\n+            ConstVal::Unevaluated(def_id, substs) => {\n+                ConstVal::Unevaluated(def_id, substs.fold_with(folder))\n+            }\n         }\n     }\n \n@@ -1176,6 +1285,7 @@ impl<'tcx> TypeFoldable<'tcx> for ConstVal<'tcx> {\n             ConstVal::Aggregate(ConstAggregate::Repeat(v, _)) => {\n                 v.visit_with(visitor)\n             }\n+            ConstVal::Unevaluated(_, substs) => substs.visit_with(visitor),\n         }\n     }\n }\n@@ -1190,7 +1300,15 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n         })\n     }\n \n+    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_const(*self)\n+    }\n+\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.ty.visit_with(visitor) || self.val.visit_with(visitor)\n     }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        visitor.visit_const(self)\n+    }\n }"}, {"sha": "16ae3cdbf1796964dd217da36a7324725a43fdd6", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -13,6 +13,7 @@\n use hir::def_id::{DefId, LOCAL_CRATE};\n use hir::map::DefPathData;\n use ich::{StableHashingContext, NodeIdHashingMode};\n+use middle::const_val::ConstVal;\n use traits::{self, Reveal};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::fold::TypeVisitor;\n@@ -388,7 +389,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::ClosureKind(..) |\n-                    ty::Predicate::RegionOutlives(..) => {\n+                    ty::Predicate::RegionOutlives(..) |\n+                    ty::Predicate::ConstEvaluatable(..) => {\n                         None\n                     }\n                     ty::Predicate::TypeOutlives(ty::Binder(ty::OutlivesPredicate(t, r))) => {\n@@ -698,7 +700,12 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyUint(u) => self.hash(u),\n             TyFloat(f) => self.hash(f),\n             TyArray(_, n) => {\n-                self.hash(n.val.to_const_int().unwrap().to_u64().unwrap())\n+                self.hash_discriminant_u8(&n.val);\n+                match n.val {\n+                    ConstVal::Integral(x) => self.hash(x.to_u64().unwrap()),\n+                    ConstVal::Unevaluated(def_id, _) => self.def_id(def_id),\n+                    _ => bug!(\"arrays should not have {:?} as length\", n)\n+                }\n             }\n             TyRawPtr(m) |\n             TyRef(_, m) => self.hash(m.mutbl),"}, {"sha": "df07844ccebaf040be2661872903aee9f3c1e823", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -160,6 +160,9 @@ fn push_const<'tcx>(stack: &mut TypeWalkerStack<'tcx>, constant: &'tcx ty::Const\n         ConstVal::Aggregate(ConstAggregate::Repeat(v, _)) => {\n             push_const(stack, v);\n         }\n+        ConstVal::Unevaluated(_, substs) => {\n+            stack.extend(substs.types().rev());\n+        }\n     }\n     stack.push(constant.ty);\n }"}, {"sha": "41e27fca3f320ce0c43738808ce0f310199add97", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n+use middle::const_val::{ConstVal, ConstAggregate};\n use infer::InferCtxt;\n use ty::subst::Substs;\n use traits;\n@@ -101,6 +102,14 @@ pub fn predicate_obligations<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n             wf.compute(data.skip_binder().a); // (*)\n             wf.compute(data.skip_binder().b); // (*)\n         }\n+        ty::Predicate::ConstEvaluatable(def_id, substs) => {\n+            let obligations = wf.nominal_obligations(def_id, substs);\n+            wf.out.extend(obligations);\n+\n+            for ty in substs.types() {\n+                wf.compute(ty);\n+            }\n+        }\n     }\n \n     wf.normalize()\n@@ -209,7 +218,43 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n \n     /// Pushes the obligations required for a constant value to be WF\n     /// into `self.out`.\n-    fn compute_const(&mut self, _constant: &'tcx ty::Const<'tcx>) {}\n+    fn compute_const(&mut self, constant: &'tcx ty::Const<'tcx>) {\n+        self.require_sized(constant.ty, traits::ConstSized);\n+        match constant.val {\n+            ConstVal::Integral(_) |\n+            ConstVal::Float(_) |\n+            ConstVal::Str(_) |\n+            ConstVal::ByteStr(_) |\n+            ConstVal::Bool(_) |\n+            ConstVal::Char(_) |\n+            ConstVal::Variant(_) |\n+            ConstVal::Function(..) => {}\n+            ConstVal::Aggregate(ConstAggregate::Struct(fields)) => {\n+                for &(_, v) in fields {\n+                    self.compute_const(v);\n+                }\n+            }\n+            ConstVal::Aggregate(ConstAggregate::Tuple(fields)) |\n+            ConstVal::Aggregate(ConstAggregate::Array(fields)) => {\n+                for v in fields {\n+                    self.compute_const(v);\n+                }\n+            }\n+            ConstVal::Aggregate(ConstAggregate::Repeat(v, _)) => {\n+                self.compute_const(v);\n+            }\n+            ConstVal::Unevaluated(def_id, substs) => {\n+                let obligations = self.nominal_obligations(def_id, substs);\n+                self.out.extend(obligations);\n+\n+                let predicate = ty::Predicate::ConstEvaluatable(def_id, substs);\n+                let cause = self.cause(traits::MiscObligation);\n+                self.out.push(traits::Obligation::new(cause,\n+                                                      self.param_env,\n+                                                      predicate));\n+            }\n+        }\n+    }\n \n     fn require_sized(&mut self, subty: Ty<'tcx>, cause: traits::ObligationCauseCode<'tcx>) {\n         if !subty.has_escaping_regions() {"}, {"sha": "cf7a29d2845ac8c58c57c7537f6fbb9c77945a42", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -430,6 +430,9 @@ impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n             ty::Predicate::ClosureKind(closure_def_id, kind) => {\n                 write!(f, \"ClosureKind({:?}, {:?})\", closure_def_id, kind)\n             }\n+            ty::Predicate::ConstEvaluatable(def_id, substs) => {\n+                write!(f, \"ConstEvaluatable({:?}, {:?})\", def_id, substs)\n+            }\n         }\n     }\n }\n@@ -894,6 +897,9 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     ConstVal::Integral(ConstInt::Usize(sz)) => {\n                         write!(f, \"{}\", sz)?;\n                     }\n+                    ConstVal::Unevaluated(_def_id, substs) => {\n+                        write!(f, \"<unevaluated{:?}>\", &substs[..])?;\n+                    }\n                     _ => {\n                         write!(f, \"{:?}\", sz)?;\n                     }\n@@ -1048,6 +1054,11 @@ impl<'tcx> fmt::Display for ty::Predicate<'tcx> {\n                     write!(f, \"the closure `{}` implements the trait `{}`\",\n                            tcx.item_path_str(closure_def_id), kind)\n                 }),\n+            ty::Predicate::ConstEvaluatable(def_id, substs) => {\n+                write!(f, \"the constant `\")?;\n+                parameterized(f, substs, def_id, &[])?;\n+                write!(f, \"` can be evaluated\")\n+            }\n         }\n     }\n }"}, {"sha": "b836b71e74bf65227e8ef9c3d2b2b8e45262299d", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -415,21 +415,23 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 }))\n             }).collect()\n         }\n-        ty::TySlice(ref sub_ty) => {\n-            if cx.is_uninhabited(sub_ty) {\n-                vec![Slice(0)]\n-            } else {\n-                (0..pcx.max_slice_length+1).map(|length| Slice(length)).collect()\n-            }\n-        }\n-        ty::TyArray(ref sub_ty, len) => {\n+        ty::TyArray(ref sub_ty, len) if len.val.to_const_int().is_some() => {\n             let len = len.val.to_const_int().unwrap().to_u64().unwrap();\n             if len != 0 && cx.is_uninhabited(sub_ty) {\n                 vec![]\n             } else {\n                 vec![Slice(len)]\n             }\n         }\n+        // Treat arrays of a constant but unknown length like slices.\n+        ty::TyArray(ref sub_ty, _) |\n+        ty::TySlice(ref sub_ty) => {\n+            if cx.is_uninhabited(sub_ty) {\n+                vec![Slice(0)]\n+            } else {\n+                (0..pcx.max_slice_length+1).map(|length| Slice(length)).collect()\n+            }\n+        }\n         ty::TyAdt(def, substs) if def.is_enum() && def.variants.len() != 1 => {\n             def.variants.iter()\n                 .filter(|v| !cx.is_variant_uninhabited(v, substs))"}, {"sha": "61eb5dfd18b9c15537edac5e250f5da7ae48d015", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -334,7 +334,8 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n \n           if tcx.fn_sig(def_id).abi() == Abi::RustIntrinsic {\n             let layout_of = |ty: Ty<'tcx>| {\n-                ty.layout(tcx, cx.param_env).map_err(|err| {\n+                let ty = tcx.erase_regions(&ty);\n+                tcx.at(e.span).layout_raw(cx.param_env.reveal_all().and(ty)).map_err(|err| {\n                     ConstEvalErr { span: e.span, kind: LayoutError(err) }\n                 })\n             };"}, {"sha": "a87fa0c2746a3d3b413aa4ee8add356f8ffabce2", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -117,7 +117,8 @@ fn print_const_val(value: &ConstVal, f: &mut fmt::Formatter) -> fmt::Result {\n         ConstVal::Char(c) => write!(f, \"{:?}\", c),\n         ConstVal::Variant(_) |\n         ConstVal::Function(..) |\n-        ConstVal::Aggregate(_) => bug!(\"{:?} not printable in a pattern\", value)\n+        ConstVal::Aggregate(_) |\n+        ConstVal::Unevaluated(..) => bug!(\"{:?} not printable in a pattern\", value)\n     }\n }\n "}, {"sha": "c96615064c80bc78171803d742bc60b4b4b65873", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -1521,9 +1521,16 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n     }\n \n     fn encode_info_for_ty(&mut self, ty: &hir::Ty) {\n-        if let hir::TyImplTrait(_) = ty.node {\n-            let def_id = self.tcx.hir.local_def_id(ty.id);\n-            self.record(def_id, IsolatedEncoder::encode_info_for_anon_ty, def_id);\n+        match ty.node {\n+            hir::TyImplTrait(_) => {\n+                let def_id = self.tcx.hir.local_def_id(ty.id);\n+                self.record(def_id, IsolatedEncoder::encode_info_for_anon_ty, def_id);\n+            }\n+            hir::TyArray(_, len) => {\n+                let def_id = self.tcx.hir.body_owner_def_id(len);\n+                self.record(def_id, IsolatedEncoder::encode_info_for_embedded_const, def_id);\n+            }\n+            _ => {}\n         }\n     }\n "}, {"sha": "6e975941e8e89347e516d1f27928cebd54ee826f", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -103,7 +103,8 @@ impl<'tcx> Const<'tcx> {\n             ConstVal::Char(c) => C_uint(Type::char(ccx), c as u64),\n             ConstVal::Function(..) => C_null(type_of::type_of(ccx, ty)),\n             ConstVal::Variant(_) |\n-            ConstVal::Aggregate(..) => {\n+            ConstVal::Aggregate(..) |\n+            ConstVal::Unevaluated(..) => {\n                 bug!(\"MIR must not use `{:?}` (aggregates are expanded to MIR rvalues)\", cv)\n             }\n         };"}, {"sha": "8f8663385b02001e1de8a7f479670e664cade831", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -12,7 +12,7 @@\n //! representation.  The main routine here is `ast_ty_to_ty()`: each use\n //! is parameterized by an instance of `AstConv`.\n \n-use rustc::middle::const_val::eval_length;\n+use rustc::middle::const_val::ConstVal;\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n use hir;\n use hir::def::Def;\n@@ -1082,11 +1082,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 self.associated_path_def_to_ty(ast_ty.id, ast_ty.span, ty, def, segment).0\n             }\n             hir::TyArray(ref ty, length) => {\n-                if let Ok(length) = eval_length(tcx, length, \"array length\") {\n-                    tcx.mk_ty(ty::TyArray(self.ast_ty_to_ty(&ty), length))\n-                } else {\n-                    self.tcx().types.err\n-                }\n+                let length_def_id = tcx.hir.body_owner_def_id(length);\n+                let substs = Substs::identity_for_item(tcx, length_def_id);\n+                let length = tcx.mk_const(ty::Const {\n+                    val: ConstVal::Unevaluated(length_def_id, substs),\n+                    ty: tcx.types.usize\n+                });\n+                let array_ty = tcx.mk_ty(ty::TyArray(self.ast_ty_to_ty(&ty), length));\n+                self.normalize_ty(ast_ty.span, array_ty)\n             }\n             hir::TyTypeof(ref _e) => {\n                 struct_span_err!(tcx.sess, ast_ty.span, E0516,"}, {"sha": "07159770d5ba2a15766553e188692c9fed78f434", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -192,6 +192,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::TypeOutlives(..) => None,\n                     ty::Predicate::WellFormed(..) => None,\n                     ty::Predicate::ObjectSafe(..) => None,\n+                    ty::Predicate::ConstEvaluatable(..) => None,\n \n                     // NB: This predicate is created by breaking down a\n                     // `ClosureType: FnFoo()` predicate, where"}, {"sha": "7b94781832512da2fecc36399fcecdee1e84d4a9", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -590,7 +590,8 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                     ty::Predicate::WellFormed(..) |\n                     ty::Predicate::ObjectSafe(..) |\n                     ty::Predicate::ClosureKind(..) |\n-                    ty::Predicate::TypeOutlives(..) => None,\n+                    ty::Predicate::TypeOutlives(..) |\n+                    ty::Predicate::ConstEvaluatable(..) => None,\n                 }\n             })\n             .collect();"}, {"sha": "ae2430990ba5794d008b7a83d10809325eba0a12", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -128,7 +128,6 @@ use rustc::hir::map::Node;\n use rustc::hir::{self, PatKind};\n use rustc::middle::lang_items;\n use rustc_back::slice;\n-use rustc::middle::const_val::eval_length;\n use rustc_const_math::ConstInt;\n \n mod autoderef;\n@@ -3898,7 +3897,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               tcx.mk_array(element_ty, args.len() as u64)\n           }\n           hir::ExprRepeat(ref element, count) => {\n-            let count = eval_length(self.tcx, count, \"repeat count\");\n+            let count_def_id = tcx.hir.body_owner_def_id(count);\n+            let param_env = ty::ParamEnv::empty(traits::Reveal::UserFacing);\n+            let substs = Substs::identity_for_item(tcx.global_tcx(), count_def_id);\n+            let count = tcx.const_eval(param_env.and((count_def_id, substs)));\n+\n+            if let Err(ref err) = count {\n+               err.report(tcx, tcx.def_span(count_def_id), \"constant expression\");\n+            }\n \n             let uty = match expected {\n                 ExpectHasType(uty) => {"}, {"sha": "609af638e97c65476968fc3300fd81db87284bac", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -511,7 +511,8 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                             ty::Predicate::Subtype(..) |\n                             ty::Predicate::Projection(..) |\n                             ty::Predicate::ClosureKind(..) |\n-                            ty::Predicate::ObjectSafe(..) =>\n+                            ty::Predicate::ObjectSafe(..) |\n+                            ty::Predicate::ConstEvaluatable(..) =>\n                                 vec![],\n \n                             ty::Predicate::WellFormed(subty) => {"}, {"sha": "ce3bf896256eca3efbcd73d11d5534bc929711e6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -33,6 +33,7 @@ use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::traits::Reveal;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, AdtKind};\n use rustc::middle::stability;\n@@ -936,6 +937,7 @@ impl<'a> Clean<WherePredicate> for ty::Predicate<'a> {\n             Predicate::WellFormed(_) => panic!(\"not user writable\"),\n             Predicate::ObjectSafe(_) => panic!(\"not user writable\"),\n             Predicate::ClosureKind(..) => panic!(\"not user writable\"),\n+            Predicate::ConstEvaluatable(..) => panic!(\"not user writable\"),\n         }\n     }\n }\n@@ -1784,9 +1786,11 @@ impl Clean<Type> for hir::Ty {\n                              type_: box m.ty.clean(cx)}\n             }\n             TySlice(ref ty) => Slice(box ty.clean(cx)),\n-            TyArray(ref ty, length) => {\n-                use rustc::middle::const_val::eval_length;\n-                let n = eval_length(cx.tcx, length, \"array length\").unwrap();\n+            TyArray(ref ty, n) => {\n+                let def_id = cx.tcx.hir.body_owner_def_id(n);\n+                let param_env = ty::ParamEnv::empty(Reveal::UserFacing);\n+                let substs = Substs::identity_for_item(cx.tcx, def_id);\n+                let n = cx.tcx.const_eval(param_env.and((def_id, substs))).unwrap();\n                 let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n                     n.to_string()\n                 } else {"}, {"sha": "707037911015cc50bc7ee0759f3f46471fc481f2", "filename": "src/test/compile-fail/const-block-non-item-statement-3.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type Array = [u32; {  let x = 2; 5 }];\n+//~^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^^ ERROR: blocks in constants are limited to items and tail expressions\n+\n+pub fn main() {}"}, {"sha": "802e660b9048db4a68133b9849b254add584d278", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -14,8 +14,4 @@ enum Foo {\n     //~^^ ERROR: blocks in constants are limited to items and tail expressions\n }\n \n-type Array = [u32; {  let x = 2; 5 }];\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n-//~^^ ERROR: blocks in constants are limited to items and tail expressions\n-\n pub fn main() {}"}, {"sha": "385daef44dfe54a27db729d344af2ae20ff51f3a", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -23,5 +23,5 @@ const fn f(x: usize) -> usize {\n \n #[allow(unused_variables)]\n fn main() {\n-    let a : [i32; f(X)]; //~ NOTE for array length here\n+    let a : [i32; f(X)]; //~ NOTE for constant expression here\n }"}, {"sha": "3c84810554214c4fa9b548cfc8188b822a3bc09a", "filename": "src/test/compile-fail/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-len-underflow-separate-spans.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -20,5 +20,5 @@ const LEN: usize = ONE - TWO;\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n-    //~^ NOTE for array length here\n+    //~^ NOTE for constant expression here\n }"}, {"sha": "cbeafdfe6acc97eeb74a2b337920af6c177299bf", "filename": "src/test/compile-fail/const-size_of-cycle.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-size_of-cycle.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern: unsupported cyclic reference between types/traits detected\n+\n #![feature(const_fn)]\n \n struct Foo {\n     bytes: [u8; std::mem::size_of::<Foo>()]\n-    //~^ ERROR unsupported cyclic reference between types/traits detected\n }\n \n fn main() {}"}, {"sha": "97456c2da87fec29571e500861ce315c0d653e24", "filename": "src/test/compile-fail/issue-22933-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22933-2.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -15,7 +15,4 @@ enum Delicious {\n     //~^ ERROR no associated item named `PIE` found for type `Delicious`\n }\n \n-const FOO: [u32; u8::MIN as usize] = [];\n-//~^ ERROR no associated item named `MIN` found for type `u8`\n-\n fn main() {}"}, {"sha": "62adae41adfc8ae283858981aaefd6f18f1dd2ea", "filename": "src/test/compile-fail/issue-22933-3.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fissue-22933-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fissue-22933-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22933-3.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const FOO: [u32; u8::MIN as usize] = [];\n+//~^ ERROR no associated item named `MIN` found for type `u8`\n+\n+fn main() {}"}, {"sha": "2da21fb14bd3c483314f6d6edec946643d5ea54f", "filename": "src/test/compile-fail/issue-39559.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39559.rs?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -21,8 +21,9 @@ impl Dim for Dim3 {\n }\n \n pub struct Vector<T, D: Dim> {\n-    entries: [T; D::dim()]\n+    entries: [T; D::dim()],\n     //~^ ERROR no function or associated item named `dim` found for type `D` in the current scope\n+    _dummy: D,\n }\n \n fn main() {}"}, {"sha": "d49741f25b9f5c61bc8452406d9fb7fe37ad10b6", "filename": "src/test/ui/issue-38875/issue_38875.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74349fa2884013389ace2ed0a098cb08983d8740/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38875%2Fissue_38875.stderr?ref=74349fa2884013389ace2ed0a098cb08983d8740", "patch": "@@ -4,7 +4,7 @@ error[E0080]: constant evaluation error\n 11 | pub const FOO: usize = *&0;\n    |                        ^^^ unimplemented constant expression: deref operation\n    |\n-note: for repeat count here\n+note: for constant expression here\n   --> $DIR/issue_38875.rs:16:22\n    |\n 16 |     let test_x = [0; issue_38875_b::FOO];"}]}