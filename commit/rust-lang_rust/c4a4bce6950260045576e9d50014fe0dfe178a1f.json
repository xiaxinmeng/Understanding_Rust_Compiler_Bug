{"sha": "c4a4bce6950260045576e9d50014fe0dfe178a1f", "node_id": "C_kwDOAAsO6NoAKGM0YTRiY2U2OTUwMjYwMDQ1NTc2ZTlkNTAwMTRmZTBkZmUxNzhhMWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-23T05:18:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-23T05:18:06Z"}, "message": "Rollup merge of #108218 - ChrisDenton:cmd-escape, r=cuviper\n\nWindows: Quote more batch file arguments\n\nMake sure to always quote batch file arguments that contain command prompt special characters.\n\nAdditionally add `/d` command line parameter to disable any autorun scripts that may change the way variable expansion works. This makes it more consistent across systems and may help avoid surprises.\n\n## Background Info\n\n[`CreateProcess`](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw) with the `lpApplicationName` set can only be used to run `.exe` files and not script files such as `.bat`. However, for historical reasons, we do have special handling so that `.bat` files will be correctly run with `cmd.exe` as the application.\n\nIn Windows, command line arguments are passed as a single string (not an array). Applications can parse this string however they like but most follow the standard MSVC C/C++ convention. But `cmd.exe` uses different argument parsing rules to other Windows programs (because it emulates old DOS).  This PR aims to help smooth over some of the differences.\n\nr? libs", "tree": {"sha": "247b65857229d1b67d403aaff6d20e86544dc3de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247b65857229d1b67d403aaff6d20e86544dc3de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a4bce6950260045576e9d50014fe0dfe178a1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9vcOCRBK7hj4Ov3rIwAAsHYIAJZgxQOKGUuZWv+kHe4WV5cR\nKrWfh6PVGLctPOE0TBJmqRpwYZ1iONXjbyxCLMkBN8wKHkkN0VtxMzHp2ubf2b8F\nPQhj+0FLrp0ob5F6eIIrRkjTvRa0up43t4lLKeeIKvH5d+wpX/AdkvxeWXr0hPMt\n6rc+zFKCefVWvn0x3eSwuyiRVlgOouL52A2ePkck7YOidwhCEZckhOQUlmEJwd3t\nSEu2HJfnqDjQ6ccvKvi3i+6sM1prokbu8L05ptFGhdsxP7uIsSHaBgROtKJxVnDW\nDe3/6bdsPcF1wSB+rT7En6kjvUYEfJba/EjHpmwGTKbkLdyeea1FMEB9R5HVU4w=\n=w2nT\n-----END PGP SIGNATURE-----\n", "payload": "tree 247b65857229d1b67d403aaff6d20e86544dc3de\nparent a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b\nparent 0b7c867ec5e59bdae5e0646c99b369596a535909\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677129486 +0100\ncommitter GitHub <noreply@github.com> 1677129486 +0100\n\nRollup merge of #108218 - ChrisDenton:cmd-escape, r=cuviper\n\nWindows: Quote more batch file arguments\n\nMake sure to always quote batch file arguments that contain command prompt special characters.\n\nAdditionally add `/d` command line parameter to disable any autorun scripts that may change the way variable expansion works. This makes it more consistent across systems and may help avoid surprises.\n\n## Background Info\n\n[`CreateProcess`](https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessw) with the `lpApplicationName` set can only be used to run `.exe` files and not script files such as `.bat`. However, for historical reasons, we do have special handling so that `.bat` files will be correctly run with `cmd.exe` as the application.\n\nIn Windows, command line arguments are passed as a single string (not an array). Applications can parse this string however they like but most follow the standard MSVC C/C++ convention. But `cmd.exe` uses different argument parsing rules to other Windows programs (because it emulates old DOS).  This PR aims to help smooth over some of the differences.\n\nr? libs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a4bce6950260045576e9d50014fe0dfe178a1f", "html_url": "https://github.com/rust-lang/rust/commit/c4a4bce6950260045576e9d50014fe0dfe178a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a4bce6950260045576e9d50014fe0dfe178a1f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b", "html_url": "https://github.com/rust-lang/rust/commit/a423fa7b4683e6d8cf3abaaaf1567fbaccfb266b"}, {"sha": "0b7c867ec5e59bdae5e0646c99b369596a535909", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7c867ec5e59bdae5e0646c99b369596a535909", "html_url": "https://github.com/rust-lang/rust/commit/0b7c867ec5e59bdae5e0646c99b369596a535909"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "30356fa851985da1536584c6866d0dc2ee02f1ff", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c4a4bce6950260045576e9d50014fe0dfe178a1f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a4bce6950260045576e9d50014fe0dfe178a1f/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=c4a4bce6950260045576e9d50014fe0dfe178a1f", "patch": "@@ -270,7 +270,7 @@ pub(crate) fn make_bat_command_line(\n     // It is necessary to surround the command in an extra pair of quotes,\n     // hence the trailing quote here. It will be closed after all arguments\n     // have been added.\n-    let mut cmd: Vec<u16> = \"cmd.exe /c \\\"\".encode_utf16().collect();\n+    let mut cmd: Vec<u16> = \"cmd.exe /d /c \\\"\".encode_utf16().collect();\n \n     // Push the script name surrounded by its quote pair.\n     cmd.push(b'\"' as u16);\n@@ -290,6 +290,15 @@ pub(crate) fn make_bat_command_line(\n     // reconstructed by the batch script by default.\n     for arg in args {\n         cmd.push(' ' as u16);\n+        // Make sure to always quote special command prompt characters, including:\n+        // * Characters `cmd /?` says require quotes.\n+        // * `%` for environment variables, as in `%TMP%`.\n+        // * `|<>` pipe/redirect characters.\n+        const SPECIAL: &[u8] = b\"\\t &()[]{}^=;!'+,`~%|<>\";\n+        let force_quotes = match arg {\n+            Arg::Regular(arg) if !force_quotes => arg.bytes().iter().any(|c| SPECIAL.contains(c)),\n+            _ => force_quotes,\n+        };\n         append_arg(&mut cmd, arg, force_quotes)?;\n     }\n "}]}