{"sha": "d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMGEyODVmYTc1NzMwN2JiZTBmOGRhYzllNDlhYzI0N2NmOWRhYjE=", "commit": {"author": {"name": "Phil Ellison", "email": "phil.j.ellison@gmail.com", "date": "2019-08-10T15:40:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-25T09:55:55Z"}, "message": "Initial implementation of Ok-wrapping", "tree": {"sha": "7ce56753d09f6b71c1a02b3c1b4078a2dd1e02f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce56753d09f6b71c1a02b3c1b4078a2dd1e02f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "html_url": "https://github.com/rust-lang/rust/commit/d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/comments", "author": {"login": "theotherphil", "id": 1974256, "node_id": "MDQ6VXNlcjE5NzQyNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1974256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theotherphil", "html_url": "https://github.com/theotherphil", "followers_url": "https://api.github.com/users/theotherphil/followers", "following_url": "https://api.github.com/users/theotherphil/following{/other_user}", "gists_url": "https://api.github.com/users/theotherphil/gists{/gist_id}", "starred_url": "https://api.github.com/users/theotherphil/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theotherphil/subscriptions", "organizations_url": "https://api.github.com/users/theotherphil/orgs", "repos_url": "https://api.github.com/users/theotherphil/repos", "events_url": "https://api.github.com/users/theotherphil/events{/privacy}", "received_events_url": "https://api.github.com/users/theotherphil/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdece911fe8e2f3c22760ea22038a6d00cb70dfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdece911fe8e2f3c22760ea22038a6d00cb70dfa", "html_url": "https://github.com/rust-lang/rust/commit/fdece911fe8e2f3c22760ea22038a6d00cb70dfa"}], "stats": {"total": 139, "additions": 136, "deletions": 3}, "files": [{"sha": "718345d754deff077613c1ed85cdb5b841ee1a79", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "patch": "@@ -143,3 +143,34 @@ impl AstDiagnostic for MissingFields {\n         ast::RecordFieldList::cast(node).unwrap()\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct MissingOkInTailExpr {\n+    pub file: HirFileId,\n+    pub expr: AstPtr<ast::Expr>,\n+}\n+\n+impl Diagnostic for MissingOkInTailExpr {\n+    fn message(&self) -> String {\n+        \"wrap return expression in Ok\".to_string()\n+    }\n+    fn file(&self) -> HirFileId {\n+        self.file\n+    }\n+    fn syntax_node_ptr(&self) -> SyntaxNodePtr {\n+        self.expr.into()\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+impl AstDiagnostic for MissingOkInTailExpr {\n+    type AST = ast::Expr;\n+\n+    fn ast(&self, db: &impl HirDatabase) -> Self::AST {\n+        let root = db.parse_or_expand(self.file()).unwrap();\n+        let node = self.syntax_node_ptr().to_node(&root);\n+        ast::Expr::cast(node).unwrap()\n+    }\n+}"}, {"sha": "f5e641557d9a88d28e8efa845a70b64b8b1f91d2", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "patch": "@@ -6,11 +6,12 @@ use ra_syntax::ast::{AstNode, RecordLit};\n use super::{Expr, ExprId, RecordLitField};\n use crate::{\n     adt::AdtDef,\n-    diagnostics::{DiagnosticSink, MissingFields},\n+    diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n-    ty::InferenceResult,\n+    ty::{InferenceResult, Ty, TypeCtor},\n     Function, HasSource, HirDatabase, Name, Path,\n };\n+use ra_syntax::ast;\n \n pub(crate) struct ExprValidator<'a, 'b: 'a> {\n     func: Function,\n@@ -29,11 +30,23 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n \n     pub(crate) fn validate_body(&mut self, db: &impl HirDatabase) {\n         let body = self.func.body(db);\n+\n+        // The final expr in the function body is the whole body,\n+        // so the expression being returned is the penultimate expr.\n+        let mut penultimate_expr = None;\n+        let mut final_expr = None;\n+\n         for e in body.exprs() {\n+            penultimate_expr = final_expr;\n+            final_expr = Some(e);\n+\n             if let (id, Expr::RecordLit { path, fields, spread }) = e {\n                 self.validate_record_literal(id, path, fields, *spread, db);\n             }\n         }\n+        if let Some(e) = penultimate_expr {\n+            self.validate_results_in_tail_expr(e.0, db);\n+        }\n     }\n \n     fn validate_record_literal(\n@@ -87,4 +100,43 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             })\n         }\n     }\n+\n+    fn validate_results_in_tail_expr(&mut self, id: ExprId, db: &impl HirDatabase) {\n+        let expr_ty = &self.infer[id];\n+        let func_ty = self.func.ty(db);\n+        let func_sig = func_ty.callable_sig(db).unwrap();\n+        let ret = func_sig.ret();\n+        let ret = match ret {\n+            Ty::Apply(t) => t,\n+            _ => return,\n+        };\n+        let ret_enum = match ret.ctor {\n+            TypeCtor::Adt(AdtDef::Enum(e)) => e,\n+            _ => return,\n+        };\n+        let enum_name = ret_enum.name(db);\n+        if enum_name.is_none() || enum_name.unwrap().to_string() != \"Result\" {\n+            return;\n+        }\n+        let params = &ret.parameters;\n+        if params.len() == 2 && &params[0] == expr_ty {\n+            let source_map = self.func.body_source_map(db);\n+            let file_id = self.func.source(db).file_id;\n+            let parse = db.parse(file_id.original_file(db));\n+            let source_file = parse.tree();\n+            let expr_syntax = source_map.expr_syntax(id);\n+            if expr_syntax.is_none() {\n+                return;\n+            }\n+            let expr_syntax = expr_syntax.unwrap();\n+            let node = expr_syntax.to_node(source_file.syntax());\n+            let ast = ast::Expr::cast(node);\n+            if ast.is_none() {\n+                return;\n+            }\n+            let ast = ast.unwrap();\n+\n+            self.sink.push(MissingOkInTailExpr { file: file_id, expr: AstPtr::new(&ast) });\n+        }\n+    }\n }"}, {"sha": "0efd94cef28ffcd84e31bc47a2bf0166df2c8334", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "patch": "@@ -516,7 +516,7 @@ impl Ty {\n         }\n     }\n \n-    fn callable_sig(&self, db: &impl HirDatabase) -> Option<FnSig> {\n+    pub fn callable_sig(&self, db: &impl HirDatabase) -> Option<FnSig> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n                 TypeCtor::FnPtr { .. } => Some(FnSig::from_fn_ptr_substs(&a_ty.parameters)),"}, {"sha": "be519776794bfbfcba77d650947d85bf578ec422", "filename": "crates/ra_ide_api/src/diagnostics.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d00a285fa757307bbe0f8dac9e49ac247cf9dab1/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdiagnostics.rs?ref=d00a285fa757307bbe0f8dac9e49ac247cf9dab1", "patch": "@@ -75,6 +75,19 @@ pub(crate) fn diagnostics(db: &RootDatabase, file_id: FileId) -> Vec<Diagnostic>\n             severity: Severity::Error,\n             fix: Some(fix),\n         })\n+    })\n+    .on::<hir::diagnostics::MissingOkInTailExpr, _>(|d| {\n+        let node = d.ast(db);\n+        let mut builder = TextEditBuilder::default();\n+        let replacement = format!(\"Ok({})\", node.syntax().text());\n+        builder.replace(node.syntax().text_range(), replacement);\n+        let fix = SourceChange::source_file_edit_from(\"wrap with ok\", file_id, builder.finish());\n+        res.borrow_mut().push(Diagnostic {\n+            range: d.highlight_range(),\n+            message: d.message(),\n+            severity: Severity::Error,\n+            fix: Some(fix),\n+        })\n     });\n     if let Some(m) = source_binder::module_from_file_id(db, file_id) {\n         m.diagnostics(db, &mut sink);\n@@ -218,6 +231,43 @@ mod tests {\n         assert_eq!(diagnostics.len(), 0);\n     }\n \n+    #[test]\n+    fn test_wrap_return_type() {\n+        let before = r#\"\n+            enum Result<T, E> { Ok(T), Err(E) }\n+            struct String { }\n+\n+            fn div(x: i32, y: i32) -> Result<i32, String> {\n+                if y == 0 {\n+                    return Err(\"div by zero\".into());\n+                }\n+                x / y\n+            }\n+        \"#;\n+        let after = r#\"\n+            enum Result<T, E> { Ok(T), Err(E) }\n+            struct String { }\n+\n+            fn div(x: i32, y: i32) -> Result<i32, String> {\n+                if y == 0 {\n+                    return Err(\"div by zero\".into());\n+                }\n+                Ok(x / y)\n+            }\n+        \"#;\n+        check_apply_diagnostic_fix(before, after);\n+    }\n+\n+    #[test]\n+    fn test_wrap_return_type_not_applicable() {\n+        let content = r#\"\n+            fn foo() -> Result<String, i32> {\n+                0\n+            }\n+        \"#;\n+        check_no_diagnostic(content);\n+    }\n+\n     #[test]\n     fn test_fill_struct_fields_empty() {\n         let before = r\""}]}