{"sha": "51e8b8ff14de3507d5e21d80b750577da52b6fdd", "node_id": "C_kwDOAAsO6NoAKDUxZThiOGZmMTRkZTM1MDdkNWUyMWQ4MGI3NTA1NzdkYTUyYjZmZGQ", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-14T13:42:28Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-14T13:42:28Z"}, "message": "Add metrics for unevaluated constants, failed mir bodies, and failed data layouts", "tree": {"sha": "e607a748a53e1f746b4651dfd79f93a40e94dc78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e607a748a53e1f746b4651dfd79f93a40e94dc78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51e8b8ff14de3507d5e21d80b750577da52b6fdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51e8b8ff14de3507d5e21d80b750577da52b6fdd", "html_url": "https://github.com/rust-lang/rust/commit/51e8b8ff14de3507d5e21d80b750577da52b6fdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51e8b8ff14de3507d5e21d80b750577da52b6fdd/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd14e98403dc5e19f19fdf913808656d81a0516", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd14e98403dc5e19f19fdf913808656d81a0516", "html_url": "https://github.com/rust-lang/rust/commit/cbd14e98403dc5e19f19fdf913808656d81a0516"}], "stats": {"total": 103, "additions": 85, "deletions": 18}, "files": [{"sha": "c04691ff11ac50f3fd91f063e26374ab0ba58b12", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 82, "deletions": 15, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/51e8b8ff14de3507d5e21d80b750577da52b6fdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e8b8ff14de3507d5e21d80b750577da52b6fdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=51e8b8ff14de3507d5e21d80b750577da52b6fdd", "patch": "@@ -2,7 +2,6 @@\n //! errors.\n \n use std::{\n-    collections::HashMap,\n     env,\n     time::{SystemTime, UNIX_EPOCH},\n };\n@@ -16,7 +15,7 @@ use hir_def::{\n     hir::{ExprId, PatId},\n     FunctionId,\n };\n-use hir_ty::{Interner, TyExt, TypeFlags};\n+use hir_ty::{Interner, Substitution, TyExt, TypeFlags};\n use ide::{Analysis, AnalysisHost, LineCol, RootDatabase};\n use ide_db::base_db::{\n     salsa::{self, debug::DebugQueryTable, ParallelDatabase},\n@@ -122,14 +121,19 @@ impl flags::AnalysisStats {\n         eprint!(\"  crates: {num_crates}\");\n         let mut num_decls = 0;\n         let mut funcs = Vec::new();\n+        let mut adts = Vec::new();\n+        let mut consts = Vec::new();\n         while let Some(module) = visit_queue.pop() {\n             if visited_modules.insert(module) {\n                 visit_queue.extend(module.children(db));\n \n                 for decl in module.declarations(db) {\n                     num_decls += 1;\n-                    if let ModuleDef::Function(f) = decl {\n-                        funcs.push(f);\n+                    match decl {\n+                        ModuleDef::Function(f) => funcs.push(f),\n+                        ModuleDef::Adt(a) => adts.push(a),\n+                        ModuleDef::Const(c) => consts.push(c),\n+                        _ => (),\n                     }\n                 }\n \n@@ -154,10 +158,13 @@ impl flags::AnalysisStats {\n             self.run_inference(&host, db, &vfs, &funcs, verbosity);\n         }\n \n-        if self.mir_stats {\n-            self.lower_mir(db, &funcs);\n+        if !self.skip_mir_stats {\n+            self.run_mir_lowering(db, &funcs, verbosity);\n         }\n \n+        self.run_data_layout(db, &adts, verbosity);\n+        self.run_const_eval(db, &consts, verbosity);\n+\n         let total_span = analysis_sw.elapsed();\n         eprintln!(\"{:<20} {total_span}\", \"Total:\");\n         report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n@@ -193,22 +200,82 @@ impl flags::AnalysisStats {\n         Ok(())\n     }\n \n-    fn lower_mir(&self, db: &RootDatabase, funcs: &[Function]) {\n-        let all = funcs.len();\n+    fn run_data_layout(&self, db: &RootDatabase, adts: &[hir::Adt], verbosity: Verbosity) {\n+        let mut all = 0;\n+        let mut fail = 0;\n+        for &a in adts {\n+            if db.generic_params(a.into()).iter().next().is_some() {\n+                // Data types with generics don't have layout.\n+                continue;\n+            }\n+            all += 1;\n+            let Err(e) = db.layout_of_adt(hir_def::AdtId::from(a).into(), Substitution::empty(Interner)) else {\n+                continue;\n+            };\n+            if verbosity.is_spammy() {\n+                let full_name = a\n+                    .module(db)\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .filter_map(|it| it.name(db))\n+                    .chain(Some(a.name(db)))\n+                    .join(\"::\");\n+                println!(\"Data layout for {full_name} failed due {e:?}\");\n+            }\n+            fail += 1;\n+        }\n+        eprintln!(\"Failed data layouts: {fail} ({}%)\", fail * 100 / all);\n+        report_metric(\"failed data layouts\", fail, \"#\");\n+    }\n+\n+    fn run_const_eval(&self, db: &RootDatabase, consts: &[hir::Const], verbosity: Verbosity) {\n+        let mut all = 0;\n+        let mut fail = 0;\n+        for &c in consts {\n+            all += 1;\n+            let Err(e) = c.render_eval(db) else {\n+                continue;\n+            };\n+            if verbosity.is_spammy() {\n+                let full_name = c\n+                    .module(db)\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .filter_map(|it| it.name(db))\n+                    .chain(c.name(db))\n+                    .join(\"::\");\n+                println!(\"Const eval for {full_name} failed due {e:?}\");\n+            }\n+            fail += 1;\n+        }\n+        eprintln!(\"Failed const evals: {fail} ({}%)\", fail * 100 / all);\n+        report_metric(\"failed const evals\", fail, \"#\");\n+    }\n+\n+    fn run_mir_lowering(&self, db: &RootDatabase, funcs: &[Function], verbosity: Verbosity) {\n+        let all = funcs.len() as u64;\n         let mut fail = 0;\n-        let mut h: HashMap<String, usize> = HashMap::new();\n         for f in funcs {\n-            let f = FunctionId::from(*f);\n-            let Err(e) = db.mir_body(f.into()) else {\n+            let Err(e) = db.mir_body(FunctionId::from(*f).into()) else {\n                 continue;\n             };\n-            let es = format!(\"{:?}\", e);\n-            *h.entry(es).or_default() += 1;\n+            if verbosity.is_spammy() {\n+                let full_name = f\n+                    .module(db)\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .filter_map(|it| it.name(db))\n+                    .chain(Some(f.name(db)))\n+                    .join(\"::\");\n+                println!(\"Mir body for {full_name} failed due {e:?}\");\n+            }\n             fail += 1;\n         }\n-        let h = h.into_iter().sorted_by_key(|x| x.1).collect::<Vec<_>>();\n-        eprintln!(\"Mir failed reasons: {:#?}\", h);\n         eprintln!(\"Mir failed bodies: {fail} ({}%)\", fail * 100 / all);\n+        report_metric(\"mir failed bodies\", fail, \"#\");\n     }\n \n     fn run_inference("}, {"sha": "6b5a79b431f185831da03376e8df13b2862f5f73", "filename": "crates/rust-analyzer/src/cli/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51e8b8ff14de3507d5e21d80b750577da52b6fdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e8b8ff14de3507d5e21d80b750577da52b6fdd/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs?ref=51e8b8ff14de3507d5e21d80b750577da52b6fdd", "patch": "@@ -66,8 +66,8 @@ xflags::xflags! {\n             optional --memory-usage\n             /// Print the total length of all source and macro files (whitespace is not counted).\n             optional --source-stats\n-            /// Print the number of bodies that fail to lower to mir, in addition to failed reasons.\n-            optional --mir-stats\n+            /// Only type check, skip lowering to mir\n+            optional --skip-mir-stats\n \n             /// Only analyze items matching this path.\n             optional -o, --only path: String\n@@ -171,7 +171,7 @@ pub struct AnalysisStats {\n     pub parallel: bool,\n     pub memory_usage: bool,\n     pub source_stats: bool,\n-    pub mir_stats: bool,\n+    pub skip_mir_stats: bool,\n     pub only: Option<String>,\n     pub with_deps: bool,\n     pub no_sysroot: bool,"}]}