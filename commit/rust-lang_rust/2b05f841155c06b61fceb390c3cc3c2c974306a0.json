{"sha": "2b05f841155c06b61fceb390c3cc3c2c974306a0", "node_id": "C_kwDOAAsO6NoAKDJiMDVmODQxMTU1YzA2YjYxZmNlYjM5MGMzY2MzYzJjOTc0MzA2YTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-09T00:40:39Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-11T21:59:27Z"}, "message": "Rename `run_early_passes` as `lint_callback`.\n\nThis matches the name used in `late.rs`.", "tree": {"sha": "ba94d41d103a9419081fadb29fe3763eabccd4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba94d41d103a9419081fadb29fe3763eabccd4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b05f841155c06b61fceb390c3cc3c2c974306a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b05f841155c06b61fceb390c3cc3c2c974306a0", "html_url": "https://github.com/rust-lang/rust/commit/2b05f841155c06b61fceb390c3cc3c2c974306a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b05f841155c06b61fceb390c3cc3c2c974306a0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "657eefe2dcf18f76ac67a39945810128e101178c", "url": "https://api.github.com/repos/rust-lang/rust/commits/657eefe2dcf18f76ac67a39945810128e101178c", "html_url": "https://github.com/rust-lang/rust/commit/657eefe2dcf18f76ac67a39945810128e101178c"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "126ab8d4ac539cf3924ed85fbfe6dabeaf6370b4", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2b05f841155c06b61fceb390c3cc3c2c974306a0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b05f841155c06b61fceb390c3cc3c2c974306a0/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=2b05f841155c06b61fceb390c3cc3c2c974306a0", "patch": "@@ -25,7 +25,7 @@ use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n-macro_rules! run_early_passes { ($cx:expr, $f:ident, $($args:expr),*) => ({\n+macro_rules! lint_callback { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     for pass in $cx.passes.iter_mut() {\n         pass.$f(&$cx.context, $($args),*);\n     }\n@@ -70,27 +70,27 @@ impl<'a> EarlyContextAndPasses<'a> {\n \n         self.inlined_check_id(id);\n         debug!(\"early context: enter_attrs({:?})\", attrs);\n-        run_early_passes!(self, enter_lint_attrs, attrs);\n+        lint_callback!(self, enter_lint_attrs, attrs);\n         f(self);\n         debug!(\"early context: exit_attrs({:?})\", attrs);\n-        run_early_passes!(self, exit_lint_attrs, attrs);\n+        lint_callback!(self, exit_lint_attrs, attrs);\n         self.context.builder.pop(push);\n     }\n }\n \n impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     fn visit_param(&mut self, param: &'a ast::Param) {\n         self.with_lint_attrs(param.id, &param.attrs, |cx| {\n-            run_early_passes!(cx, check_param, param);\n+            lint_callback!(cx, check_param, param);\n             ast_visit::walk_param(cx, param);\n         });\n     }\n \n     fn visit_item(&mut self, it: &'a ast::Item) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_early_passes!(cx, check_item, it);\n+            lint_callback!(cx, check_item, it);\n             ast_visit::walk_item(cx, it);\n-            run_early_passes!(cx, check_item_post, it);\n+            lint_callback!(cx, check_item_post, it);\n         })\n     }\n \n@@ -101,10 +101,10 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     }\n \n     fn visit_pat(&mut self, p: &'a ast::Pat) {\n-        run_early_passes!(self, check_pat, p);\n+        lint_callback!(self, check_pat, p);\n         self.check_id(p.id);\n         ast_visit::walk_pat(self, p);\n-        run_early_passes!(self, check_pat_post, p);\n+        lint_callback!(self, check_pat_post, p);\n     }\n \n     fn visit_pat_field(&mut self, field: &'a ast::PatField) {\n@@ -120,7 +120,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         self.with_lint_attrs(e.id, &e.attrs, |cx| {\n-            run_early_passes!(cx, check_expr, e);\n+            lint_callback!(cx, check_expr, e);\n             ast_visit::walk_expr(cx, e);\n         })\n     }\n@@ -141,7 +141,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n         // Note that statements get their attributes from\n         // the AST struct that they wrap (e.g. an item)\n         self.with_lint_attrs(s.id, s.attrs(), |cx| {\n-            run_early_passes!(cx, check_stmt, s);\n+            lint_callback!(cx, check_stmt, s);\n             cx.check_id(s.id);\n         });\n         // The visitor for the AST struct wrapped\n@@ -152,7 +152,7 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     }\n \n     fn visit_fn(&mut self, fk: ast_visit::FnKind<'a>, span: Span, id: ast::NodeId) {\n-        run_early_passes!(self, check_fn, fk, span, id);\n+        lint_callback!(self, check_fn, fk, span, id);\n         self.check_id(id);\n         ast_visit::walk_fn(self, fk);\n \n@@ -180,37 +180,37 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n \n     fn visit_variant(&mut self, v: &'a ast::Variant) {\n         self.with_lint_attrs(v.id, &v.attrs, |cx| {\n-            run_early_passes!(cx, check_variant, v);\n+            lint_callback!(cx, check_variant, v);\n             ast_visit::walk_variant(cx, v);\n         })\n     }\n \n     fn visit_ty(&mut self, t: &'a ast::Ty) {\n-        run_early_passes!(self, check_ty, t);\n+        lint_callback!(self, check_ty, t);\n         self.check_id(t.id);\n         ast_visit::walk_ty(self, t);\n     }\n \n     fn visit_ident(&mut self, ident: Ident) {\n-        run_early_passes!(self, check_ident, ident);\n+        lint_callback!(self, check_ident, ident);\n     }\n \n     fn visit_local(&mut self, l: &'a ast::Local) {\n         self.with_lint_attrs(l.id, &l.attrs, |cx| {\n-            run_early_passes!(cx, check_local, l);\n+            lint_callback!(cx, check_local, l);\n             ast_visit::walk_local(cx, l);\n         })\n     }\n \n     fn visit_block(&mut self, b: &'a ast::Block) {\n-        run_early_passes!(self, check_block, b);\n+        lint_callback!(self, check_block, b);\n         self.check_id(b.id);\n         ast_visit::walk_block(self, b);\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n         self.with_lint_attrs(a.id, &a.attrs, |cx| {\n-            run_early_passes!(cx, check_arm, a);\n+            lint_callback!(cx, check_arm, a);\n             ast_visit::walk_arm(cx, a);\n         })\n     }\n@@ -229,19 +229,19 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     }\n \n     fn visit_generic_arg(&mut self, arg: &'a ast::GenericArg) {\n-        run_early_passes!(self, check_generic_arg, arg);\n+        lint_callback!(self, check_generic_arg, arg);\n         ast_visit::walk_generic_arg(self, arg);\n     }\n \n     fn visit_generic_param(&mut self, param: &'a ast::GenericParam) {\n         self.with_lint_attrs(param.id, &param.attrs, |cx| {\n-            run_early_passes!(cx, check_generic_param, param);\n+            lint_callback!(cx, check_generic_param, param);\n             ast_visit::walk_generic_param(cx, param);\n         });\n     }\n \n     fn visit_generics(&mut self, g: &'a ast::Generics) {\n-        run_early_passes!(self, check_generics, g);\n+        lint_callback!(self, check_generics, g);\n         ast_visit::walk_generics(self, g);\n     }\n \n@@ -250,18 +250,18 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     }\n \n     fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef) {\n-        run_early_passes!(self, check_poly_trait_ref, t);\n+        lint_callback!(self, check_poly_trait_ref, t);\n         ast_visit::walk_poly_trait_ref(self, t);\n     }\n \n     fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: ast_visit::AssocCtxt) {\n         self.with_lint_attrs(item.id, &item.attrs, |cx| match ctxt {\n             ast_visit::AssocCtxt::Trait => {\n-                run_early_passes!(cx, check_trait_item, item);\n+                lint_callback!(cx, check_trait_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n             }\n             ast_visit::AssocCtxt::Impl => {\n-                run_early_passes!(cx, check_impl_item, item);\n+                lint_callback!(cx, check_impl_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n             }\n         });\n@@ -282,16 +282,16 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContextAndPasses<'a> {\n     }\n \n     fn visit_attribute(&mut self, attr: &'a ast::Attribute) {\n-        run_early_passes!(self, check_attribute, attr);\n+        lint_callback!(self, check_attribute, attr);\n     }\n \n     fn visit_mac_def(&mut self, mac: &'a ast::MacroDef, id: ast::NodeId) {\n-        run_early_passes!(self, check_mac_def, mac);\n+        lint_callback!(self, check_mac_def, mac);\n         self.check_id(id);\n     }\n \n     fn visit_mac_call(&mut self, mac: &'a ast::MacCall) {\n-        run_early_passes!(self, check_mac, mac);\n+        lint_callback!(self, check_mac, mac);\n         ast_visit::walk_mac(self, mac);\n     }\n }\n@@ -322,9 +322,9 @@ impl<'a> EarlyCheckNode<'a> for &'a ast::Crate {\n     where\n         'a: 'b,\n     {\n-        run_early_passes!(cx, check_crate, self);\n+        lint_callback!(cx, check_crate, self);\n         ast_visit::walk_crate(cx, self);\n-        run_early_passes!(cx, check_crate_post, self);\n+        lint_callback!(cx, check_crate_post, self);\n     }\n }\n "}]}