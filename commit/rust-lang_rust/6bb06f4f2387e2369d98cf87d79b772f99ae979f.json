{"sha": "6bb06f4f2387e2369d98cf87d79b772f99ae979f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYjA2ZjRmMjM4N2UyMzY5ZDk4Y2Y4N2Q3OWI3NzJmOTlhZTk3OWY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-16T17:29:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-16T17:29:45Z"}, "message": "Rollup merge of #78455 - udoprog:refcell-opt-map, r=KodrAus\n\nIntroduce {Ref, RefMut}::try_map for optional projections in RefCell\n\nThis fills a usability gap of `RefCell` I've personally encountered to perform optional projections, mostly into collections such as `RefCell<Vec<T>>` or `RefCell<HashMap<U, T>>`:\n\n> This kind of API was briefly featured under Open questions in #10514 back in 2013 (!)\n\n```rust\nlet values = RefCell::new(vec![1, 2, 3, 4]);\nlet b = Ref::opt_map(values.borrow(), |vec| vec.get(2));\n```\n\nIt primarily avoids this alternative approach to accomplish the same kind of projection which is both rather noisy and panicky:\n```rust\nlet values = RefCell::new(vec![1, 2, 3, 4]);\n\nlet b = if values.get(2).is_some() {\n    Some(Ref::map(values.borrow(), |vec| vec.get(2).unwrap()))\n} else {\n    None\n};\n```\n\n### Open questions\n\nThe naming `opt_map` is preliminary. I'm not aware of prior art in std to lean on here, but this name should probably be improved if this functionality is desirable.\n\nSince `opt_map` consumes the guard, and alternative syntax might be more appropriate which instead *tries* to perform the projection, allowing the original borrow to be recovered in case it fails:\n\n```rust\npub fn try_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Result<Ref<'b, U>, Self>\nwhere\n    F: FnOnce(&T) -> Option<&U>;\n```\n\nThis would be more in line with the `try_map` method [provided by parking lot](https://docs.rs/lock_api/0/lock_api/struct.RwLockWriteGuard.html#method.try_map).", "tree": {"sha": "e62c46ec9e6565c5a6bd19593627ee1dea97aa04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e62c46ec9e6565c5a6bd19593627ee1dea97aa04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb06f4f2387e2369d98cf87d79b772f99ae979f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAyKJCRBK7hj4Ov3rIwAAdHIIAJcQ2spxLvmnlHOALGm7d+hS\nhciGbIc5erYMLrY/2sL/20lPtjO18Cdim8KNTloiczPKUGkxX/Cyo5m09ef9HEtp\n+npiJ184n7BHUZpc/6NL5ruF2hq10j158cA0XH4AwWPmtl3cSB5Y/9Y8KYuPRQeb\nelAS/wg7eVZU2Y/IB5pv/xZqRB25amJNGa+AOnY8wc6u1bVXFXXD7B+wsbwUcotH\nXEmFqSvAH9fUc67K3qmlQ0XSL7LQUecr/DewSzfpHu/rGrnkLJB/BMJvekQCO+f0\nXFhzbE0FjveQFX/XNnba02qSR6CCYAX9cPNC3SPqv31cuClBDWzU4cya+QjxaEM=\n=n+Wl\n-----END PGP SIGNATURE-----\n", "payload": "tree e62c46ec9e6565c5a6bd19593627ee1dea97aa04\nparent 63a83c5f55801b17b77adf690db397d17c706c48\nparent c625b979aed9ad3c8380ea2239d9345d4cec695a\nauthor Mara Bos <m-ou.se@m-ou.se> 1610818185 +0000\ncommitter GitHub <noreply@github.com> 1610818185 +0000\n\nRollup merge of #78455 - udoprog:refcell-opt-map, r=KodrAus\n\nIntroduce {Ref, RefMut}::try_map for optional projections in RefCell\n\nThis fills a usability gap of `RefCell` I've personally encountered to perform optional projections, mostly into collections such as `RefCell<Vec<T>>` or `RefCell<HashMap<U, T>>`:\n\n> This kind of API was briefly featured under Open questions in #10514 back in 2013 (!)\n\n```rust\nlet values = RefCell::new(vec![1, 2, 3, 4]);\nlet b = Ref::opt_map(values.borrow(), |vec| vec.get(2));\n```\n\nIt primarily avoids this alternative approach to accomplish the same kind of projection which is both rather noisy and panicky:\n```rust\nlet values = RefCell::new(vec![1, 2, 3, 4]);\n\nlet b = if values.get(2).is_some() {\n    Some(Ref::map(values.borrow(), |vec| vec.get(2).unwrap()))\n} else {\n    None\n};\n```\n\n### Open questions\n\nThe naming `opt_map` is preliminary. I'm not aware of prior art in std to lean on here, but this name should probably be improved if this functionality is desirable.\n\nSince `opt_map` consumes the guard, and alternative syntax might be more appropriate which instead *tries* to perform the projection, allowing the original borrow to be recovered in case it fails:\n\n```rust\npub fn try_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Result<Ref<'b, U>, Self>\nwhere\n    F: FnOnce(&T) -> Option<&U>;\n```\n\nThis would be more in line with the `try_map` method [provided by parking lot](https://docs.rs/lock_api/0/lock_api/struct.RwLockWriteGuard.html#method.try_map).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb06f4f2387e2369d98cf87d79b772f99ae979f", "html_url": "https://github.com/rust-lang/rust/commit/6bb06f4f2387e2369d98cf87d79b772f99ae979f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb06f4f2387e2369d98cf87d79b772f99ae979f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63a83c5f55801b17b77adf690db397d17c706c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a83c5f55801b17b77adf690db397d17c706c48", "html_url": "https://github.com/rust-lang/rust/commit/63a83c5f55801b17b77adf690db397d17c706c48"}, {"sha": "c625b979aed9ad3c8380ea2239d9345d4cec695a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c625b979aed9ad3c8380ea2239d9345d4cec695a", "html_url": "https://github.com/rust-lang/rust/commit/c625b979aed9ad3c8380ea2239d9345d4cec695a"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "fa0fbaa35c95c68b6437af2d83a232dbacc86005", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/6bb06f4f2387e2369d98cf87d79b772f99ae979f/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb06f4f2387e2369d98cf87d79b772f99ae979f/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=6bb06f4f2387e2369d98cf87d79b772f99ae979f", "patch": "@@ -1261,6 +1261,40 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n         Ref { value: f(orig.value), borrow: orig.borrow }\n     }\n \n+    /// Makes a new `Ref` for an optional component of the borrowed data. The\n+    /// original guard is returned as an `Err(..)` if the closure returns\n+    /// `None`.\n+    ///\n+    /// The `RefCell` is already immutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as\n+    /// `Ref::filter_map(...)`. A method would interfere with methods of the same\n+    /// name on the contents of a `RefCell` used through `Deref`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_filter_map)]\n+    ///\n+    /// use std::cell::{RefCell, Ref};\n+    ///\n+    /// let c = RefCell::new(vec![1, 2, 3]);\n+    /// let b1: Ref<Vec<u32>> = c.borrow();\n+    /// let b2: Result<Ref<u32>, _> = Ref::filter_map(b1, |v| v.get(1));\n+    /// assert_eq!(*b2.unwrap(), 2);\n+    /// ```\n+    #[unstable(feature = \"cell_filter_map\", reason = \"recently added\", issue = \"81061\")]\n+    #[inline]\n+    pub fn filter_map<U: ?Sized, F>(orig: Ref<'b, T>, f: F) -> Result<Ref<'b, U>, Self>\n+    where\n+        F: FnOnce(&T) -> Option<&U>,\n+    {\n+        match f(orig.value) {\n+            Some(value) => Ok(Ref { value, borrow: orig.borrow }),\n+            None => Err(orig),\n+        }\n+    }\n+\n     /// Splits a `Ref` into multiple `Ref`s for different components of the\n     /// borrowed data.\n     ///\n@@ -1372,6 +1406,58 @@ impl<'b, T: ?Sized> RefMut<'b, T> {\n         RefMut { value: f(value), borrow }\n     }\n \n+    /// Makes a new `RefMut` for an optional component of the borrowed data. The\n+    /// original guard is returned as an `Err(..)` if the closure returns\n+    /// `None`.\n+    ///\n+    /// The `RefCell` is already mutably borrowed, so this cannot fail.\n+    ///\n+    /// This is an associated function that needs to be used as\n+    /// `RefMut::filter_map(...)`. A method would interfere with methods of the\n+    /// same name on the contents of a `RefCell` used through `Deref`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_filter_map)]\n+    ///\n+    /// use std::cell::{RefCell, RefMut};\n+    ///\n+    /// let c = RefCell::new(vec![1, 2, 3]);\n+    ///\n+    /// {\n+    ///     let b1: RefMut<Vec<u32>> = c.borrow_mut();\n+    ///     let mut b2: Result<RefMut<u32>, _> = RefMut::filter_map(b1, |v| v.get_mut(1));\n+    ///\n+    ///     if let Ok(mut b2) = b2 {\n+    ///         *b2 += 2;\n+    ///     }\n+    /// }\n+    ///\n+    /// assert_eq!(*c.borrow(), vec![1, 4, 3]);\n+    /// ```\n+    #[unstable(feature = \"cell_filter_map\", reason = \"recently added\", issue = \"81061\")]\n+    #[inline]\n+    pub fn filter_map<U: ?Sized, F>(orig: RefMut<'b, T>, f: F) -> Result<RefMut<'b, U>, Self>\n+    where\n+        F: FnOnce(&mut T) -> Option<&mut U>,\n+    {\n+        // FIXME(nll-rfc#40): fix borrow-check\n+        let RefMut { value, borrow } = orig;\n+        let value = value as *mut T;\n+        // SAFETY: function holds onto an exclusive reference for the duration\n+        // of its call through `orig`, and the pointer is only de-referenced\n+        // inside of the function call never allowing the exclusive reference to\n+        // escape.\n+        match f(unsafe { &mut *value }) {\n+            Some(value) => Ok(RefMut { value, borrow }),\n+            None => {\n+                // SAFETY: same as above.\n+                Err(RefMut { value: unsafe { &mut *value }, borrow })\n+            }\n+        }\n+    }\n+\n     /// Splits a `RefMut` into multiple `RefMut`s for different components of the\n     /// borrowed data.\n     ///"}]}