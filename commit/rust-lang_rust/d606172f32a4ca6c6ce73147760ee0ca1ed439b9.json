{"sha": "d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDYxNzJmMzJhNGNhNmM2Y2U3MzE0Nzc2MGVlMGNhMWVkNDM5Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-01T12:44:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-01T12:44:29Z"}, "message": "Auto merge of #1381 - RalfJung:rustup, r=RalfJung\n\nrustup; fix for changed error messages", "tree": {"sha": "4aad8f5546e7d2dec738f0d61566c75244628f58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aad8f5546e7d2dec738f0d61566c75244628f58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "html_url": "https://github.com/rust-lang/rust/commit/d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f235d555844de44b8035dbb8af5dda48c5687d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f235d555844de44b8035dbb8af5dda48c5687d", "html_url": "https://github.com/rust-lang/rust/commit/04f235d555844de44b8035dbb8af5dda48c5687d"}, {"sha": "393165f859c9722494b62da232be332f5428be6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/393165f859c9722494b62da232be332f5428be6c", "html_url": "https://github.com/rust-lang/rust/commit/393165f859c9722494b62da232be332f5428be6c"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "7e957fa4257da3dd81ed9f07a1a6af1a2374f8f9", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1 +1 @@\n-e94eaa6dce468928b4e1326b2f0054f3075681ff\n+fd61d06772d17c6242265d860fbfb5eafd282caa"}, {"sha": "06d12b99c1ea0f4972814b84c094fccf114588dc", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -16,7 +16,7 @@ pub enum TerminationInfo {\n     Deadlock,\n }\n \n-impl fmt::Debug for TerminationInfo {\n+impl fmt::Display for TerminationInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use TerminationInfo::*;\n         match self {"}, {"sha": "f51c8a7ce7439e0864f8fd3e4aefa0c8c8a7e785", "filename": "src/intptrcast.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::interpret::{AllocCheck, AllocId, InterpResult, Memory, Machine, Pointer, PointerArithmetic};\n use rustc_target::abi::{Size, HasDataLayout};\n \n-use crate::{Evaluator, Tag, STACK_ADDR};\n+use crate::{Evaluator, Tag, STACK_ADDR, CheckInAllocMsg};\n \n pub type MemoryExtra = RefCell<GlobalState>;\n \n@@ -46,14 +46,16 @@ impl<'mir, 'tcx> GlobalState {\n         let global_state = memory.extra.intptrcast.borrow();\n         let pos = global_state.int_to_ptr_map.binary_search_by_key(&int, |(addr, _)| *addr);\n \n+        // The int must be in-bounds after being cast to a pointer, so we error\n+        // with `CheckInAllocMsg::InboundsTest`.\n         Ok(match pos {\n             Ok(pos) => {\n                 let (_, alloc_id) = global_state.int_to_ptr_map[pos];\n                 // `int` is equal to the starting address for an allocation, the offset should be\n                 // zero. The pointer is untagged because it was created from a cast\n                 Pointer::new_with_tag(alloc_id, Size::from_bytes(0), Tag::Untagged)\n             }\n-            Err(0) => throw_ub!(InvalidIntPointerUsage(int)),\n+            Err(0) => throw_ub!(DanglingIntPointer(int, CheckInAllocMsg::InboundsTest)),\n             Err(pos) => {\n                 // This is the largest of the adresses smaller than `int`,\n                 // i.e. the greatest lower bound (glb)\n@@ -65,7 +67,7 @@ impl<'mir, 'tcx> GlobalState {\n                     // This pointer is untagged because it was created from a cast\n                     Pointer::new_with_tag(alloc_id, Size::from_bytes(offset), Tag::Untagged)\n                 } else {\n-                    throw_ub!(InvalidIntPointerUsage(int))\n+                    throw_ub!(DanglingIntPointer(int, CheckInAllocMsg::InboundsTest))\n                 }\n             }\n         })"}, {"sha": "6aa93e714721ac842cf28ea04de87146971c2c3d", "filename": "tests/compile-fail/dangling_pointers/deref-invalid-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fderef-invalid-ptr.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     let x = 16usize as *const u32;\n-    let _y = unsafe { &*x as *const u32 }; //~ ERROR invalid use of 16 as a pointer\n+    let _y = unsafe { &*x as *const u32 }; //~ ERROR inbounds test failed: 0x10 is not a valid pointer\n }"}, {"sha": "371e72d2822d0a78e46664372c6ee23af492fa96", "filename": "tests/compile-fail/dangling_pointers/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointers%2Fwild_pointer_deref.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR invalid use of 44 as a pointer\n+    let x = unsafe { *p }; //~ ERROR inbounds test failed: 0x2c is not a valid pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "94ff3327123b434615be100d746489f0307850ae", "filename": "tests/compile-fail/function_pointers/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -6,5 +6,5 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR invalid use of 42 as a pointer\n+    g(42) //~ ERROR inbounds test failed: 0x2a is not a valid pointer\n }"}, {"sha": "60cb7e4eff513892f71e021ccacb414589d4f959", "filename": "tests/compile-fail/intrinsics/copy_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_null.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let mut data = [0u16; 4];\n     let ptr = &mut data[0] as *mut u16;\n     // Even copying 0 elements from NULL should error.\n-    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); } //~ ERROR: invalid use of NULL pointer\n+    unsafe { copy_nonoverlapping(std::ptr::null(), ptr, 0); } //~ ERROR: memory access failed: 0x0 is not a valid pointer\n }"}, {"sha": "d6cf3d65f296d8d547c3fe2b31fdad6959e73dcb", "filename": "tests/compile-fail/intrinsics/ptr_offset_0_plus_0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_0_plus_0.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: invalid use of NULL pointer\n+// error-pattern: inbounds test failed: 0x0 is not a valid pointer\n \n fn main() {\n     let x = 0 as *mut i32;"}, {"sha": "4bee2fec6b7b05ab6ff1765dbf179d30e090970a", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_int.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: invalid use of 1 as a pointer\n+// error-pattern: inbounds test failed: 0x1 is not a valid pointer\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}, {"sha": "892dbca1128fcf847a793cca5a3f129b2433bc72", "filename": "tests/compile-fail/intrinsics/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: invalid use of 1 as a pointer\n+// error-pattern: inbounds test failed: 0x1 is not a valid pointer\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));"}, {"sha": "c3f77b27b4ff0ed16b964770a04504d917a5dee7", "filename": "tests/compile-fail/intrinsics/write_bytes_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fwrite_bytes_null.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -6,5 +6,5 @@ extern \"rust-intrinsic\" {\n }\n \n fn main() {\n-    unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) }; //~ ERROR invalid use of NULL pointer\n+    unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) }; //~ ERROR memory access failed: 0x0 is not a valid pointer\n }"}, {"sha": "23441ea7d4aadb5ecdbde07c1512b6ec74223131", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -4,5 +4,5 @@\n \n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    let _x = b == true; //~ ERROR interpreting an invalid 8-bit value as a bool: 2\n+    let _x = b == true; //~ ERROR interpreting an invalid 8-bit value as a bool\n }"}, {"sha": "893dd03c64e6761acdec7e76522c1e9b183e59c2", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -2,7 +2,7 @@\n // Make sure we find these even with many checks disabled.\n // compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n-// error-pattern: invalid enum discriminant\n+// error-pattern: enum value has invalid discriminant: 0x0000002a\n \n use std::mem;\n "}, {"sha": "bd4758f737e713782a829b8f3c1e5ac8ba04a7cc", "filename": "tests/compile-fail/null_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR invalid use of NULL pointer\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR inbounds test failed: 0x0 is not a valid pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "cfd3a75e3b8cfdc0f2369d16aa47a43c79568ddd", "filename": "tests/compile-fail/null_pointer_deref_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref_zst.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    let x: () = unsafe { *std::ptr::null() }; //~ ERROR invalid use of NULL pointer\n+    let x: () = unsafe { *std::ptr::null() }; //~ ERROR memory access failed: 0x0 is not a valid pointer\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "97c9ee8b1f52d8430cc0df60e84eee05db91d99d", "filename": "tests/compile-fail/null_pointer_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR invalid use of NULL pointer\n+    unsafe { *std::ptr::null_mut() = 0i32 }; //~ ERROR inbounds test failed: 0x0 is not a valid pointer\n }"}, {"sha": "0f7244ba25ccfcdbf54b90c8b3a312ada6e4fd9b", "filename": "tests/compile-fail/null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_write_zst.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -2,5 +2,5 @@ fn main() {\n     // Not using the () type here, as writes of that type do not even have MIR generated.\n     // Also not assigning directly as that's array initialization, not assignment.\n     let zst_val = [1u8; 0];\n-    unsafe { *std::ptr::null_mut() = zst_val }; //~ ERROR invalid use of NULL pointer\n+    unsafe { *std::ptr::null_mut() = zst_val }; //~ ERROR memory access failed: 0x0 is not a valid pointer\n }"}, {"sha": "c40d8de21dd7ff86aefb7db3983b86dc06793f2a", "filename": "tests/compile-fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d606172f32a4ca6c6ce73147760ee0ca1ed439b9/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=d606172f32a4ca6c6ce73147760ee0ca1ed439b9", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: invalid use of 4 as a pointer\n+// error-pattern: inbounds test failed: 0x4 is not a valid pointer\n use std::ptr::NonNull;\n \n fn main() { unsafe {"}]}