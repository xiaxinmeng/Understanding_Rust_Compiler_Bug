{"sha": "a20ffc6d52e741341d98eca4a4502faae66d1dc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMGZmYzZkNTJlNzQxMzQxZDk4ZWNhNGE0NTAyZmFhZTY2ZDFkYzQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-04-24T11:22:35Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2019-04-24T11:22:35Z"}, "message": "Add a path to rustfmt.toml to GitIgnore as root path", "tree": {"sha": "bd263d16608be7e4ae66b556ac56be6dbeaa5c2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd263d16608be7e4ae66b556ac56be6dbeaa5c2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a20ffc6d52e741341d98eca4a4502faae66d1dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a20ffc6d52e741341d98eca4a4502faae66d1dc4", "html_url": "https://github.com/rust-lang/rust/commit/a20ffc6d52e741341d98eca4a4502faae66d1dc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a20ffc6d52e741341d98eca4a4502faae66d1dc4/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d3aa590808a4953770012a2af8dbc4a6e1c120", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8d3aa590808a4953770012a2af8dbc4a6e1c120", "html_url": "https://github.com/rust-lang/rust/commit/f8d3aa590808a4953770012a2af8dbc4a6e1c120"}], "stats": {"total": 68, "additions": 49, "deletions": 19}, "files": [{"sha": "bded90b869339e325ddc961c37cd300c05acfacc", "filename": "src/config/options.rs", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a20ffc6d52e741341d98eca4a4502faae66d1dc4/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20ffc6d52e741341d98eca4a4502faae66d1dc4/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=a20ffc6d52e741341d98eca4a4502faae66d1dc4", "patch": "@@ -1,7 +1,9 @@\n use std::collections::{hash_set, HashSet};\n+use std::fmt;\n use std::path::{Path, PathBuf};\n \n use atty;\n+use serde::de::{Deserialize, Deserializer, SeqAccess, Visitor};\n \n use crate::config::config_type::ConfigType;\n use crate::config::lists::*;\n@@ -396,33 +398,63 @@ impl Default for EmitMode {\n }\n \n /// A set of directories, files and modules that rustfmt should ignore.\n-#[derive(Default, Deserialize, Serialize, Clone, Debug, PartialEq)]\n-pub struct IgnoreList(HashSet<PathBuf>);\n+#[derive(Default, Serialize, Clone, Debug, PartialEq)]\n+pub struct IgnoreList {\n+    /// A set of path specified in rustfmt.toml.\n+    #[serde(flatten)]\n+    path_set: HashSet<PathBuf>,\n+    /// A path to rustfmt.toml.\n+    #[serde(skip_serializing)]\n+    rustfmt_toml_path: PathBuf,\n+}\n+\n+impl<'de> Deserialize<'de> for IgnoreList {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: Deserializer<'de>,\n+    {\n+        struct HashSetVisitor;\n+        impl<'v> Visitor<'v> for HashSetVisitor {\n+            type Value = HashSet<PathBuf>;\n+\n+            fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                formatter.write_str(\"a sequence of path\")\n+            }\n+\n+            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>\n+            where\n+                A: SeqAccess<'v>,\n+            {\n+                let mut path_set = HashSet::new();\n+                while let Some(elem) = seq.next_element()? {\n+                    path_set.insert(elem);\n+                }\n+                Ok(path_set)\n+            }\n+        }\n+        Ok(IgnoreList {\n+            path_set: deserializer.deserialize_seq(HashSetVisitor)?,\n+            rustfmt_toml_path: PathBuf::new(),\n+        })\n+    }\n+}\n \n impl<'a> IntoIterator for &'a IgnoreList {\n     type Item = &'a PathBuf;\n     type IntoIter = hash_set::Iter<'a, PathBuf>;\n \n     fn into_iter(self) -> Self::IntoIter {\n-        self.0.iter()\n+        self.path_set.iter()\n     }\n }\n \n impl IgnoreList {\n     pub fn add_prefix(&mut self, dir: &Path) {\n-        self.0 = self\n-            .0\n-            .iter()\n-            .map(|s| {\n-                if s.has_root() {\n-                    s.clone()\n-                } else {\n-                    let mut path = PathBuf::from(dir);\n-                    path.push(s);\n-                    path\n-                }\n-            })\n-            .collect();\n+        self.rustfmt_toml_path = dir.to_path_buf();\n+    }\n+\n+    pub fn rustfmt_toml_path(&self) -> &Path {\n+        &self.rustfmt_toml_path\n     }\n }\n "}, {"sha": "844ea427f49556823a679ec082ed4dbbe4845241", "filename": "src/ignore_path.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a20ffc6d52e741341d98eca4a4502faae66d1dc4/src%2Fignore_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a20ffc6d52e741341d98eca4a4502faae66d1dc4/src%2Fignore_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fignore_path.rs?ref=a20ffc6d52e741341d98eca4a4502faae66d1dc4", "patch": "@@ -1,5 +1,3 @@\n-use std::path::PathBuf;\n-\n use ignore::{self, gitignore};\n \n use crate::config::{FileName, IgnoreList};\n@@ -10,7 +8,7 @@ pub struct IgnorePathSet {\n \n impl IgnorePathSet {\n     pub fn from_ignore_list(ignore_list: &IgnoreList) -> Result<Self, ignore::Error> {\n-        let mut ignore_builder = gitignore::GitignoreBuilder::new(PathBuf::from(\"\"));\n+        let mut ignore_builder = gitignore::GitignoreBuilder::new(ignore_list.rustfmt_toml_path());\n \n         for ignore_path in ignore_list {\n             ignore_builder.add_line(None, ignore_path.to_str().unwrap())?;"}]}