{"sha": "d9256f94a987a008484caab5acf5a6e06c24ecd3", "node_id": "C_kwDOAAsO6NoAKGQ5MjU2Zjk0YTk4N2EwMDg0ODRjYWFiNWFjZjVhNmUwNmMyNGVjZDM", "commit": {"author": {"name": "Alex Saveau", "email": "saveau.alexandre@gmail.com", "date": "2022-12-26T08:52:58Z"}, "committer": {"name": "Alex Saveau", "email": "saveau.alexandre@gmail.com", "date": "2023-04-14T20:15:11Z"}, "message": "Add Lazy{Cell,Lock}::into_inner\n\nSigned-off-by: Alex Saveau <saveau.alexandre@gmail.com>", "tree": {"sha": "130636bb4e12ab64e3139e091432bb63ab531cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/130636bb4e12ab64e3139e091432bb63ab531cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9256f94a987a008484caab5acf5a6e06c24ecd3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTBcJf70cgSZQv+KO8/jVsW6xadSAUCZDm0TwAKCRA/jVsW6xad\nSNzaAQD0tZrQuV4ZdMrH3IyWLFqn4gzLmwXASS/VpbQ0JY2GyQEA/yCx1zBBm8ld\nI2jCNCyqj6btb/Y8/gtSwmsWJ1BTAww=\n=CqKG\n-----END PGP SIGNATURE-----", "payload": "tree 130636bb4e12ab64e3139e091432bb63ab531cb7\nparent 660c966ff941ddf995d3251df32508b383cd4cee\nauthor Alex Saveau <saveau.alexandre@gmail.com> 1672044778 -0800\ncommitter Alex Saveau <saveau.alexandre@gmail.com> 1681503311 -0700\n\nAdd Lazy{Cell,Lock}::into_inner\n\nSigned-off-by: Alex Saveau <saveau.alexandre@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9256f94a987a008484caab5acf5a6e06c24ecd3", "html_url": "https://github.com/rust-lang/rust/commit/d9256f94a987a008484caab5acf5a6e06c24ecd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9256f94a987a008484caab5acf5a6e06c24ecd3/comments", "author": {"login": "SUPERCILEX", "id": 9490724, "node_id": "MDQ6VXNlcjk0OTA3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9490724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SUPERCILEX", "html_url": "https://github.com/SUPERCILEX", "followers_url": "https://api.github.com/users/SUPERCILEX/followers", "following_url": "https://api.github.com/users/SUPERCILEX/following{/other_user}", "gists_url": "https://api.github.com/users/SUPERCILEX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SUPERCILEX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SUPERCILEX/subscriptions", "organizations_url": "https://api.github.com/users/SUPERCILEX/orgs", "repos_url": "https://api.github.com/users/SUPERCILEX/repos", "events_url": "https://api.github.com/users/SUPERCILEX/events{/privacy}", "received_events_url": "https://api.github.com/users/SUPERCILEX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SUPERCILEX", "id": 9490724, "node_id": "MDQ6VXNlcjk0OTA3MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9490724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SUPERCILEX", "html_url": "https://github.com/SUPERCILEX", "followers_url": "https://api.github.com/users/SUPERCILEX/followers", "following_url": "https://api.github.com/users/SUPERCILEX/following{/other_user}", "gists_url": "https://api.github.com/users/SUPERCILEX/gists{/gist_id}", "starred_url": "https://api.github.com/users/SUPERCILEX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SUPERCILEX/subscriptions", "organizations_url": "https://api.github.com/users/SUPERCILEX/orgs", "repos_url": "https://api.github.com/users/SUPERCILEX/repos", "events_url": "https://api.github.com/users/SUPERCILEX/events{/privacy}", "received_events_url": "https://api.github.com/users/SUPERCILEX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660c966ff941ddf995d3251df32508b383cd4cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/660c966ff941ddf995d3251df32508b383cd4cee", "html_url": "https://github.com/rust-lang/rust/commit/660c966ff941ddf995d3251df32508b383cd4cee"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "1b213f6a2941b9a96681d4faa2c7a5f02d87902f", "filename": "library/core/src/cell/lazy.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d9256f94a987a008484caab5acf5a6e06c24ecd3/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9256f94a987a008484caab5acf5a6e06c24ecd3/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell%2Flazy.rs?ref=d9256f94a987a008484caab5acf5a6e06c24ecd3", "patch": "@@ -63,6 +63,34 @@ impl<T, F: FnOnce() -> T> LazyCell<T, F> {\n         LazyCell { state: UnsafeCell::new(State::Uninit(f)) }\n     }\n \n+    /// Consumes this `LazyCell` returning the stored value.\n+    ///\n+    /// Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(lazy_cell)]\n+    /// #![feature(lazy_cell_consume)]\n+    ///\n+    /// use std::cell::LazyCell;\n+    ///\n+    /// let hello = \"Hello, World!\".to_string();\n+    ///\n+    /// let lazy = LazyCell::new(|| hello.to_uppercase());\n+    ///\n+    /// assert_eq!(&*lazy, \"HELLO, WORLD!\");\n+    /// assert_eq!(LazyCell::into_inner(lazy).ok(), Some(\"HELLO, WORLD!\".to_string()));\n+    /// ```\n+    #[unstable(feature = \"lazy_cell_consume\", issue = \"109736\")]\n+    pub fn into_inner(this: Self) -> Result<T, F> {\n+        match this.state.into_inner() {\n+            State::Init(data) => Ok(data),\n+            State::Uninit(f) => Err(f),\n+            State::Poisoned => panic!(\"LazyCell instance has previously been poisoned\"),\n+        }\n+    }\n+\n     /// Forces the evaluation of this lazy value and returns a reference to\n     /// the result.\n     ///"}, {"sha": "a6bc468b092817a7fb4302790ecf6d47bc77c46e", "filename": "library/std/src/sync/lazy_lock.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d9256f94a987a008484caab5acf5a6e06c24ecd3/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9256f94a987a008484caab5acf5a6e06c24ecd3/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Flazy_lock.rs?ref=d9256f94a987a008484caab5acf5a6e06c24ecd3", "patch": "@@ -1,9 +1,9 @@\n use crate::cell::UnsafeCell;\n-use crate::fmt;\n use crate::mem::ManuallyDrop;\n use crate::ops::Deref;\n use crate::panic::{RefUnwindSafe, UnwindSafe};\n use crate::sync::Once;\n+use crate::{fmt, ptr};\n \n use super::once::ExclusiveState;\n \n@@ -69,6 +69,42 @@ impl<T, F: FnOnce() -> T> LazyLock<T, F> {\n         LazyLock { once: Once::new(), data: UnsafeCell::new(Data { f: ManuallyDrop::new(f) }) }\n     }\n \n+    /// Consumes this `LazyLock` returning the stored value.\n+    ///\n+    /// Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(lazy_cell)]\n+    /// #![feature(lazy_cell_consume)]\n+    ///\n+    /// use std::sync::LazyLock;\n+    ///\n+    /// let hello = \"Hello, World!\".to_string();\n+    ///\n+    /// let lazy = LazyLock::new(|| hello.to_uppercase());\n+    ///\n+    /// assert_eq!(&*lazy, \"HELLO, WORLD!\");\n+    /// assert_eq!(LazyLock::into_inner(lazy).ok(), Some(\"HELLO, WORLD!\".to_string()));\n+    /// ```\n+    #[unstable(feature = \"lazy_cell_consume\", issue = \"109736\")]\n+    pub fn into_inner(mut this: Self) -> Result<T, F> {\n+        let state = this.once.state();\n+        match state {\n+            ExclusiveState::Poisoned => panic!(\"LazyLock instance has previously been poisoned\"),\n+            state => {\n+                let this = ManuallyDrop::new(this);\n+                let data = unsafe { ptr::read(&this.data) }.into_inner();\n+                match state {\n+                    ExclusiveState::Incomplete => Err(ManuallyDrop::into_inner(unsafe { data.f })),\n+                    ExclusiveState::Complete => Ok(ManuallyDrop::into_inner(unsafe { data.value })),\n+                    ExclusiveState::Poisoned => unreachable!(),\n+                }\n+            }\n+        }\n+    }\n+\n     /// Forces the evaluation of this lazy value and\n     /// returns a reference to result. This is equivalent\n     /// to the `Deref` impl, but is explicit."}]}