{"sha": "b0202d9c2c03e62cf72554af4a537969b463d3e8", "node_id": "C_kwDOAAsO6NoAKGIwMjAyZDljMmMwM2U2MmNmNzI1NTRhZjRhNTM3OTY5YjQ2M2QzZTg", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-02-21T11:19:54Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-03-01T09:19:26Z"}, "message": "Use LocalDefIdSet/Map instead of FxHashSet/Map for live_symbols_and_ignored_derived_traits query.", "tree": {"sha": "2cb4524f0d3ccca832745aa3889f24d71c0e8ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cb4524f0d3ccca832745aa3889f24d71c0e8ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0202d9c2c03e62cf72554af4a537969b463d3e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0202d9c2c03e62cf72554af4a537969b463d3e8", "html_url": "https://github.com/rust-lang/rust/commit/b0202d9c2c03e62cf72554af4a537969b463d3e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0202d9c2c03e62cf72554af4a537969b463d3e8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0eadbafd429c32bf3362dedeb23287027bfe450", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eadbafd429c32bf3362dedeb23287027bfe450", "html_url": "https://github.com/rust-lang/rust/commit/f0eadbafd429c32bf3362dedeb23287027bfe450"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "60f090578f518aec2493f1e9e6cee0e71647cf27", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0202d9c2c03e62cf72554af4a537969b463d3e8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0202d9c2c03e62cf72554af4a537969b463d3e8/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=b0202d9c2c03e62cf72554af4a537969b463d3e8", "patch": "@@ -899,8 +899,8 @@ rustc_queries! {\n     /// The second return value maps from ADTs to ignored derived traits (e.g. Debug and Clone) and\n     /// their respective impl (i.e., part of the derive macro)\n     query live_symbols_and_ignored_derived_traits(_: ()) -> &'tcx (\n-        FxHashSet<LocalDefId>,\n-        FxHashMap<LocalDefId, Vec<(DefId, DefId)>>\n+        LocalDefIdSet,\n+        LocalDefIdMap<Vec<(DefId, DefId)>>\n     ) {\n         arena_cache\n         desc { \"finding live symbols in crate\" }"}, {"sha": "10c37b744839c9ae99ce1ebac17ba4f1aee20ff4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0202d9c2c03e62cf72554af4a537969b463d3e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0202d9c2c03e62cf72554af4a537969b463d3e8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=b0202d9c2c03e62cf72554af4a537969b463d3e8", "patch": "@@ -50,7 +50,9 @@ use rustc_data_structures::unord::UnordSet;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, DocLinkResMap};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdSet};\n+use rustc_hir::def_id::{\n+    CrateNum, DefId, DefIdMap, DefIdSet, LocalDefId, LocalDefIdMap, LocalDefIdSet,\n+};\n use rustc_hir::hir_id::OwnerId;\n use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, ItemLocalId, TraitCandidate};"}, {"sha": "8a9c4cc8f7f0fc228bb1a74d5afdbeb567d5d4a8", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b0202d9c2c03e62cf72554af4a537969b463d3e8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0202d9c2c03e62cf72554af4a537969b463d3e8/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=b0202d9c2c03e62cf72554af4a537969b463d3e8", "patch": "@@ -2,8 +2,8 @@\n // closely. The idea is that all reachable symbols are live, codes called\n // from live codes are live, and everything else is dead.\n \n+use hir::def_id::{LocalDefIdMap, LocalDefIdSet};\n use itertools::Itertools;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::MultiSpan;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n@@ -45,17 +45,17 @@ struct MarkSymbolVisitor<'tcx> {\n     worklist: Vec<LocalDefId>,\n     tcx: TyCtxt<'tcx>,\n     maybe_typeck_results: Option<&'tcx ty::TypeckResults<'tcx>>,\n-    live_symbols: FxHashSet<LocalDefId>,\n+    live_symbols: LocalDefIdSet,\n     repr_has_repr_c: bool,\n     repr_has_repr_simd: bool,\n     in_pat: bool,\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n-    struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n+    struct_constructors: LocalDefIdMap<LocalDefId>,\n     // maps from ADTs to ignored derived traits (e.g. Debug and Clone)\n     // and the span of their respective impl (i.e., part of the derive\n     // macro)\n-    ignored_derived_traits: FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n+    ignored_derived_traits: LocalDefIdMap<Vec<(DefId, DefId)>>,\n }\n \n impl<'tcx> MarkSymbolVisitor<'tcx> {\n@@ -237,7 +237,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n     }\n \n     fn mark_live_symbols(&mut self) {\n-        let mut scanned = FxHashSet::default();\n+        let mut scanned = LocalDefIdSet::default();\n         while let Some(id) = self.worklist.pop() {\n             if !scanned.insert(id) {\n                 continue;\n@@ -371,7 +371,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n             }\n             if tcx.visibility(def_id).is_public() { Some(def_id) } else { None }\n         });\n-        self.live_symbols.extend(live_fields);\n+        Extend::extend(&mut self.live_symbols, live_fields);\n \n         intravisit::walk_struct_def(self, def);\n     }\n@@ -506,7 +506,7 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool\n fn check_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     worklist: &mut Vec<LocalDefId>,\n-    struct_constructors: &mut FxHashMap<LocalDefId, LocalDefId>,\n+    struct_constructors: &mut LocalDefIdMap<LocalDefId>,\n     id: hir::ItemId,\n ) {\n     let allow_dead_code = has_allow_dead_code_or_lang_attr(tcx, id.owner_id.def_id);\n@@ -583,9 +583,7 @@ fn check_foreign_item(tcx: TyCtxt<'_>, worklist: &mut Vec<LocalDefId>, id: hir::\n     }\n }\n \n-fn create_and_seed_worklist(\n-    tcx: TyCtxt<'_>,\n-) -> (Vec<LocalDefId>, FxHashMap<LocalDefId, LocalDefId>) {\n+fn create_and_seed_worklist(tcx: TyCtxt<'_>) -> (Vec<LocalDefId>, LocalDefIdMap<LocalDefId>) {\n     let effective_visibilities = &tcx.effective_visibilities(());\n     // see `MarkSymbolVisitor::struct_constructors`\n     let mut struct_constructors = Default::default();\n@@ -617,7 +615,7 @@ fn create_and_seed_worklist(\n fn live_symbols_and_ignored_derived_traits(\n     tcx: TyCtxt<'_>,\n     (): (),\n-) -> (FxHashSet<LocalDefId>, FxHashMap<LocalDefId, Vec<(DefId, DefId)>>) {\n+) -> (LocalDefIdSet, LocalDefIdMap<Vec<(DefId, DefId)>>) {\n     let (worklist, struct_constructors) = create_and_seed_worklist(tcx);\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n@@ -629,7 +627,7 @@ fn live_symbols_and_ignored_derived_traits(\n         in_pat: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n-        ignored_derived_traits: FxHashMap::default(),\n+        ignored_derived_traits: Default::default(),\n     };\n     symbol_visitor.mark_live_symbols();\n     (symbol_visitor.live_symbols, symbol_visitor.ignored_derived_traits)\n@@ -643,8 +641,8 @@ struct DeadVariant {\n \n struct DeadVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    live_symbols: &'tcx FxHashSet<LocalDefId>,\n-    ignored_derived_traits: &'tcx FxHashMap<LocalDefId, Vec<(DefId, DefId)>>,\n+    live_symbols: &'tcx LocalDefIdSet,\n+    ignored_derived_traits: &'tcx LocalDefIdMap<Vec<(DefId, DefId)>>,\n }\n \n enum ShouldWarnAboutField {"}]}