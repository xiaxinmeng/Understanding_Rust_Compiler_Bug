{"sha": "7663305dff3b6634de90a9f3bc726e976357dc48", "node_id": "C_kwDOAAsO6NoAKDc2NjMzMDVkZmYzYjY2MzRkZTkwYTlmM2JjNzI2ZTk3NjM1N2RjNDg", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-27T18:23:58Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-27T19:47:50Z"}, "message": "Implement `ptr_mask` intrinsic", "tree": {"sha": "239e7b78f17aaa4d521c0ca51c13e89094cadcee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/239e7b78f17aaa4d521c0ca51c13e89094cadcee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7663305dff3b6634de90a9f3bc726e976357dc48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7663305dff3b6634de90a9f3bc726e976357dc48", "html_url": "https://github.com/rust-lang/rust/commit/7663305dff3b6634de90a9f3bc726e976357dc48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7663305dff3b6634de90a9f3bc726e976357dc48/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d795f7e479d1988215912b65f6a9256b399028da", "url": "https://api.github.com/repos/rust-lang/rust/commits/d795f7e479d1988215912b65f6a9256b399028da", "html_url": "https://github.com/rust-lang/rust/commit/d795f7e479d1988215912b65f6a9256b399028da"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "6004e2078ad4fb6edf21e811f8c12daf25a8e1b4", "filename": "src/tools/miri/src/shims/intrinsics/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7663305dff3b6634de90a9f3bc726e976357dc48/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7663305dff3b6634de90a9f3bc726e976357dc48/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fmod.rs?ref=7663305dff3b6634de90a9f3bc726e976357dc48", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::{\n     mir,\n     ty::{self, FloatTy, Ty},\n };\n-use rustc_target::abi::Integer;\n+use rustc_target::abi::{Integer, Size};\n \n use crate::*;\n use atomic::EvalContextExt as _;\n@@ -120,6 +120,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.write_bytes_ptr(ptr, iter::repeat(val_byte).take(byte_count.bytes_usize()))?;\n             }\n \n+            \"ptr_mask\" => {\n+                let [ptr, mask] = check_arg_count(args)?;\n+\n+                let ptr = this.read_pointer(ptr)?;\n+                let mask = this.read_scalar(mask)?.to_machine_usize(this)?;\n+\n+                let masked_addr = Size::from_bytes(ptr.addr().bytes() & mask);\n+\n+                this.write_pointer(Pointer::new(ptr.provenance, masked_addr), dest)?;\n+            }\n+\n             // Floating-point operations\n             \"fabsf32\" => {\n                 let [f] = check_arg_count(args)?;"}, {"sha": "fb8bb6b13dbc2cda484c3656493d712afbcba027", "filename": "src/tools/miri/tests/pass/shims/ptr_mask.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7663305dff3b6634de90a9f3bc726e976357dc48/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fptr_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7663305dff3b6634de90a9f3bc726e976357dc48/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fptr_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fshims%2Fptr_mask.rs?ref=7663305dff3b6634de90a9f3bc726e976357dc48", "patch": "@@ -0,0 +1,18 @@\n+#![feature(ptr_mask)]\n+#![feature(strict_provenance)]\n+\n+fn main() {\n+    let v: u32 = 0xABCDABCD;\n+    let ptr: *const u32 = &v;\n+\n+    // u32 is 4 aligned,\n+    // so the lower `log2(4) = 2` bits of the address are always 0\n+    assert_eq!(ptr.addr() & 0b11, 0);\n+\n+    let tagged_ptr = ptr.map_addr(|a| a | 0b11);\n+    let tag = tagged_ptr.addr() & 0b11;\n+    let masked_ptr = tagged_ptr.mask(!0b11);\n+\n+    assert_eq!(tag, 0b11);\n+    assert_eq!(unsafe { *masked_ptr }, 0xABCDABCD);\n+}"}]}