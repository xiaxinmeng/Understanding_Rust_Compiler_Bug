{"sha": "ec7ffdfbafefae52948176d67aa88119ee984f78", "node_id": "C_kwDOAAsO6NoAKGVjN2ZmZGZiYWZlZmFlNTI5NDgxNzZkNjdhYTg4MTE5ZWU5ODRmNzg", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-10-26T23:30:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-26T23:30:54Z"}, "message": "Rollup merge of #103432 - jsha:box-is-not-notable, r=GuillaumeGomez\n\nrustdoc: don't mark Box<T> as Iterator, Read, etc\n\nBecause Box<T> has pass-through implementations, rustdoc was giving it the \"Notable Traits\" treatment for Iterator, Read, Write, and Future, even when the type of T was unspecified.\n\nPin had the same problem, but just for Future.\n\nFixes #100320", "tree": {"sha": "3e6911ea50f5191a470d12d31f2cc11d4a037902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e6911ea50f5191a470d12d31f2cc11d4a037902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec7ffdfbafefae52948176d67aa88119ee984f78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjWcMuCRBK7hj4Ov3rIwAAtecIAHVa+Td8MAGWQxD3YhUqpzur\ntok3BE4mnr0Tq6kmmBT+PV9WatEU83Cq8WMZl5jGomUqt6nm0nnmJdH7Hdefnt2V\n+YWj+L7XDZXVYLjsx3KgmCEG2qIL14pJcRRob9LJfAQnk44g+KLHrhnoCgj17r7L\niNFznTxd/GxyTeuVTVAH7HmuAwqPLJAo7KwRcMry4JheY3YfT4cqBRta/29IZGj2\nTFraJ6B18i896TsQ0KHZWIhRqBYXqPrMR47KitTHIuZONztAbjOHApHHaSiRdcIP\n+cyteqrOgGfqqe/R91rNrZz5J3dk2fbvdT0m6lJZRxPPvypdJohw0GpVh1Yoar4=\n=nlGH\n-----END PGP SIGNATURE-----\n", "payload": "tree 3e6911ea50f5191a470d12d31f2cc11d4a037902\nparent 36285c5de8915ecc00d91ae0baa79a87ed5858d5\nparent 63d1a721f187faf007e8540e4d5b6b2e494231eb\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1666827054 +0900\ncommitter GitHub <noreply@github.com> 1666827054 +0900\n\nRollup merge of #103432 - jsha:box-is-not-notable, r=GuillaumeGomez\n\nrustdoc: don't mark Box<T> as Iterator, Read, etc\n\nBecause Box<T> has pass-through implementations, rustdoc was giving it the \"Notable Traits\" treatment for Iterator, Read, Write, and Future, even when the type of T was unspecified.\n\nPin had the same problem, but just for Future.\n\nFixes #100320\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7ffdfbafefae52948176d67aa88119ee984f78", "html_url": "https://github.com/rust-lang/rust/commit/ec7ffdfbafefae52948176d67aa88119ee984f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec7ffdfbafefae52948176d67aa88119ee984f78/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36285c5de8915ecc00d91ae0baa79a87ed5858d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/36285c5de8915ecc00d91ae0baa79a87ed5858d5", "html_url": "https://github.com/rust-lang/rust/commit/36285c5de8915ecc00d91ae0baa79a87ed5858d5"}, {"sha": "63d1a721f187faf007e8540e4d5b6b2e494231eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/63d1a721f187faf007e8540e4d5b6b2e494231eb", "html_url": "https://github.com/rust-lang/rust/commit/63d1a721f187faf007e8540e4d5b6b2e494231eb"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "96c57c8c85d407b54d9116e77898a975420b7b6b", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec7ffdfbafefae52948176d67aa88119ee984f78/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7ffdfbafefae52948176d67aa88119ee984f78/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ec7ffdfbafefae52948176d67aa88119ee984f78", "patch": "@@ -1276,6 +1276,15 @@ fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n \n     if let Some((did, ty)) = decl.output.as_return().and_then(|t| Some((t.def_id(cx.cache())?, t)))\n     {\n+        // Box has pass-through impls for Read, Write, Iterator, and Future when the\n+        // boxed type implements one of those. We don't want to treat every Box return\n+        // as being notably an Iterator (etc), though, so we exempt it. Pin has the same\n+        // issue, with a pass-through impl for Future.\n+        if Some(did) == cx.tcx().lang_items().owned_box()\n+            || Some(did) == cx.tcx().lang_items().pin_type()\n+        {\n+            return \"\".to_string();\n+        }\n         if let Some(impls) = cx.cache().impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();"}, {"sha": "3fb00c7db84115b3661fd87b6ac4a3e5f9305f7b", "filename": "src/test/rustdoc/doc-notable_trait_box_is_not_an_iterator.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ec7ffdfbafefae52948176d67aa88119ee984f78/src%2Ftest%2Frustdoc%2Fdoc-notable_trait_box_is_not_an_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec7ffdfbafefae52948176d67aa88119ee984f78/src%2Ftest%2Frustdoc%2Fdoc-notable_trait_box_is_not_an_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait_box_is_not_an_iterator.rs?ref=ec7ffdfbafefae52948176d67aa88119ee984f78", "patch": "@@ -0,0 +1,38 @@\n+#![feature(doc_notable_trait)]\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![no_core]\n+#[lang = \"owned_box\"]\n+pub struct Box<T>;\n+\n+impl<T> Box<T> {\n+    pub fn new(x: T) -> Box<T> {\n+        Box\n+    }\n+}\n+\n+#[doc(notable_trait)]\n+pub trait FakeIterator {}\n+\n+impl<I: FakeIterator> FakeIterator for Box<I> {}\n+\n+#[lang = \"pin\"]\n+pub struct Pin<T>;\n+\n+impl<T> Pin<T> {\n+    pub fn new(x: T) -> Pin<T> {\n+        Pin\n+    }\n+}\n+\n+impl<I: FakeIterator> FakeIterator for Pin<I> {}\n+\n+// @!has doc_notable_trait_box_is_not_an_iterator/fn.foo.html '//*' 'Notable'\n+pub fn foo<T>(x: T) -> Box<T> {\n+    Box::new(x)\n+}\n+\n+// @!has doc_notable_trait_box_is_not_an_iterator/fn.bar.html '//*' 'Notable'\n+pub fn bar<T>(x: T) -> Pin<T> {\n+    Pin::new(x)\n+}"}]}