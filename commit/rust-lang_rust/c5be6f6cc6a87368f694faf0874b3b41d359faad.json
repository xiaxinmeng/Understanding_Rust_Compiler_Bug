{"sha": "c5be6f6cc6a87368f694faf0874b3b41d359faad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YmU2ZjZjYzZhODczNjhmNjk0ZmFmMDg3NGIzYjQxZDM1OWZhYWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-09T00:51:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-31T21:05:53Z"}, "message": "add cache to shared context for proj", "tree": {"sha": "f4257953dc8067b72602f6f5b2e14f0c709a2d40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4257953dc8067b72602f6f5b2e14f0c709a2d40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5be6f6cc6a87368f694faf0874b3b41d359faad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5be6f6cc6a87368f694faf0874b3b41d359faad", "html_url": "https://github.com/rust-lang/rust/commit/c5be6f6cc6a87368f694faf0874b3b41d359faad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5be6f6cc6a87368f694faf0874b3b41d359faad/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/72694d582931348f6ac18620c8b4ce5c9c9c7a3e", "html_url": "https://github.com/rust-lang/rust/commit/72694d582931348f6ac18620c8b4ce5c9c9c7a3e"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "b0b7ae1f598492ab4331cedabb7b4df2a91fc8c7", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c5be6f6cc6a87368f694faf0874b3b41d359faad/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5be6f6cc6a87368f694faf0874b3b41d359faad/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=c5be6f6cc6a87368f694faf0874b3b41d359faad", "patch": "@@ -84,6 +84,7 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n \n     translation_items: RefCell<FnvHashSet<TransItem<'tcx>>>,\n     trait_cache: RefCell<DepTrackingMap<TraitSelectionCache<'tcx>>>,\n+    project_cache: RefCell<DepTrackingMap<ProjectionCache<'tcx>>>,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -195,6 +196,46 @@ impl<'tcx> DepTrackingMapConfig for MirCache<'tcx> {\n     }\n }\n \n+// # Global Cache\n+\n+pub struct ProjectionCache<'gcx> {\n+    data: PhantomData<&'gcx ()>\n+}\n+\n+impl<'gcx> DepTrackingMapConfig for ProjectionCache<'gcx> {\n+    type Key = Ty<'gcx>;\n+    type Value = Ty<'gcx>;\n+    fn to_dep_node(key: &Self::Key) -> DepNode<DefId> {\n+        // Ideally, we'd just put `key` into the dep-node, but we\n+        // can't put full types in there. So just collect up all the\n+        // def-ids of structs/enums as well as any traits that we\n+        // project out of. It doesn't matter so much what we do here,\n+        // except that if we are too coarse, we'll create overly\n+        // coarse edges between impls and the trans. For example, if\n+        // we just used the def-id of things we are projecting out of,\n+        // then the key for `<Foo as SomeTrait>::T` and `<Bar as\n+        // SomeTrait>::T` would both share a dep-node\n+        // (`TraitSelect(SomeTrait)`), and hence the impls for both\n+        // `Foo` and `Bar` would be considered inputs. So a change to\n+        // `Bar` would affect things that just normalized `Foo`.\n+        // Anyway, this heuristic is not ideal, but better than\n+        // nothing.\n+        let def_ids: Vec<DefId> =\n+            key.walk()\n+               .filter_map(|t| match t.sty {\n+                   ty::TyStruct(adt_def, _) |\n+                   ty::TyEnum(adt_def, _) =>\n+                       Some(adt_def.did),\n+                   ty::TyProjection(ref proj) =>\n+                       Some(proj.trait_ref.def_id),\n+                   _ =>\n+                       None\n+               })\n+               .collect();\n+        DepNode::TraitSelect(def_ids)\n+    }\n+}\n+\n /// This list owns a number of LocalCrateContexts and binds them to their common\n /// SharedCrateContext. This type just exists as a convenience, something to\n /// pass around all LocalCrateContexts with and get an iterator over them.\n@@ -496,6 +537,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             use_dll_storage_attrs: use_dll_storage_attrs,\n             translation_items: RefCell::new(FnvHashSet()),\n             trait_cache: RefCell::new(DepTrackingMap::new(tcx.dep_graph.clone())),\n+            project_cache: RefCell::new(DepTrackingMap::new(tcx.dep_graph.clone())),\n         }\n     }\n \n@@ -519,6 +561,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.trait_cache\n     }\n \n+    pub fn project_cache(&self) -> &RefCell<DepTrackingMap<ProjectionCache<'tcx>>> {\n+        &self.project_cache\n+    }\n+\n     pub fn link_meta<'a>(&'a self) -> &'a LinkMeta {\n         &self.link_meta\n     }"}]}