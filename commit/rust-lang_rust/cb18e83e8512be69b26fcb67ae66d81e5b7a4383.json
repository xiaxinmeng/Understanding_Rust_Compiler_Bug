{"sha": "cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "node_id": "C_kwDOAAsO6NoAKGNiMThlODNlODUxMmJlNjliMjZmY2I2N2FlNjZkODFlNWI3YTQzODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-04T14:33:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-04T14:33:00Z"}, "message": "Auto merge of #93645 - matthiaskrgr:rollup-eua2621, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #92735 (Add crate filter parameter in URL)\n - #93402 (Windows: Disable LLVM crash dialog boxes.)\n - #93508 (Add rustdoc info to jsondocck output)\n - #93551 (Add package.json in gitignore)\n - #93555 (Link `try_exists` docs to `Path::exists`)\n - #93585 (Missing tests for #92630)\n - #93593 (Fix ret > 1 bound if shadowed by const)\n - #93630 (clippy::perf fixes)\n - #93631 (rustc_mir_dataflow: use iter::once instead of Some().into_iter)\n - #93632 (rustdoc: clippy::complexity fixes)\n - #93638 (rustdoc: remove unused Hash impl)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "66c8c85ce1055300fb81783ae74a5ec3f605714b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c8c85ce1055300fb81783ae74a5ec3f605714b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "html_url": "https://github.com/rust-lang/rust/commit/cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "html_url": "https://github.com/rust-lang/rust/commit/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd"}, {"sha": "1426f0e6f03d64902ac75a47eba800cbf82d7d41", "url": "https://api.github.com/repos/rust-lang/rust/commits/1426f0e6f03d64902ac75a47eba800cbf82d7d41", "html_url": "https://github.com/rust-lang/rust/commit/1426f0e6f03d64902ac75a47eba800cbf82d7d41"}], "stats": {"total": 399, "additions": 276, "deletions": 123}, "files": [{"sha": "ec6cb6ed2e4d3fdeb3ca5ff9d1274076f208ff1a", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -71,6 +71,7 @@ __pycache__/\n ## Node\n node_modules\n package-lock.json\n+package.json\n \n ## Rustdoc GUI tests\n src/test/rustdoc-gui/src/**.lock"}, {"sha": "8a1dea4d99bfed44e1aa40e4ab67fde92f6c79c9", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -219,7 +219,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n             match result {\n                 Err(e) => {\n-                    self.config.sess.fatal(&format!(\"Error calling dlltool: {}\", e.to_string()));\n+                    self.config.sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n                 }\n                 Ok(output) if !output.status.success() => self.config.sess.fatal(&format!(\n                     \"Dlltool could not create import library: {}\\n{}\","}, {"sha": "367c86a1dc942ebb77ff4c45b3a1602f3e2d89cd", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -987,6 +987,7 @@ pub type SelfProfileAfterPassCallback = unsafe extern \"C\" fn(*mut c_void);\n \n extern \"C\" {\n     pub fn LLVMRustInstallFatalErrorHandler();\n+    pub fn LLVMRustDisableSystemDialogsOnCrash();\n \n     // Create and destroy contexts.\n     pub fn LLVMRustContextCreate(shouldDiscardNames: bool) -> &'static mut Context;"}, {"sha": "f91fad2d9c9635b796069fec0e32ab3820eb0486", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -46,6 +46,12 @@ unsafe fn configure_llvm(sess: &Session) {\n     let mut llvm_args = Vec::with_capacity(n_args + 1);\n \n     llvm::LLVMRustInstallFatalErrorHandler();\n+    // On Windows, an LLVM assertion will open an Abort/Retry/Ignore dialog\n+    // box for the purpose of launching a debugger. However, on CI this will\n+    // cause it to hang until it times out, which can take several hours.\n+    if std::env::var_os(\"CI\").is_some() {\n+        llvm::LLVMRustDisableSystemDialogsOnCrash();\n+    }\n \n     fn llvm_arg_to_arg_name(full_arg: &str) -> &str {\n         full_arg.trim().split(|c: char| c == '=' || c.is_whitespace()).next().unwrap_or(\"\")"}, {"sha": "237aef1cf23aadcdb2d1e48efbbec1d23bead587", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -126,7 +126,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n \n                 // If the user tried to use a key=\"value\" flag, but is missing the quotes, provide\n                 // a hint about how to resolve this.\n-                if s.contains(\"=\") && !s.contains(\"=\\\"\") && !s.ends_with(\"\\\"\") {\n+                if s.contains('=') && !s.contains(\"=\\\"\") && !s.ends_with('\"') {\n                     error!(concat!(\n                         r#\"expected `key` or `key=\"value\"`, ensure escaping is appropriate\"#,\n                         r#\" for your shell, try 'key=\"value\"' or key=\\\"value\\\"\"#"}, {"sha": "d871290744f8bae8ca20b908c41015358c85bd60", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -76,6 +76,10 @@ extern \"C\" void LLVMRustInstallFatalErrorHandler() {\n   install_fatal_error_handler(FatalErrorHandler);\n }\n \n+extern \"C\" void LLVMRustDisableSystemDialogsOnCrash() {\n+  sys::DisableSystemDialogsOnCrash();\n+}\n+\n extern \"C\" char *LLVMRustGetLastError(void) {\n   char *Ret = LastError;\n   LastError = nullptr;"}, {"sha": "49f846562a3cc5cf8fdab2e1150bd3f5f21652f9", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -160,12 +160,11 @@ impl<'tcx> AssocItems<'tcx> {\n         &self,\n         tcx: TyCtxt<'_>,\n         ident: Ident,\n+        // Sorted in order of what kinds to look at\n         kinds: &[AssocKind],\n         parent_def_id: DefId,\n     ) -> Option<&ty::AssocItem> {\n-        self.filter_by_name_unhygienic(ident.name)\n-            .filter(|item| kinds.contains(&item.kind))\n-            .find(|item| tcx.hygienic_eq(ident, item.ident(tcx), parent_def_id))\n+        kinds.iter().find_map(|kind| self.find_by_name_and_kind(tcx, ident, *kind, parent_def_id))\n     }\n \n     /// Returns the associated item with the given name in the given `Namespace`, if one exists."}, {"sha": "a3294672f5470881defa9886091363342752411b", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n-use std::fmt;\n+use std::{fmt, iter};\n \n /// The value of an inserted drop flag.\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n@@ -329,8 +329,7 @@ where\n         mut succ: BasicBlock,\n         fields: &[(Place<'tcx>, Option<D::Path>)],\n     ) -> Vec<BasicBlock> {\n-        Some(succ)\n-            .into_iter()\n+        iter::once(succ)\n             .chain(fields.iter().rev().zip(unwind_ladder).map(|(&(place, path), &unwind_succ)| {\n                 succ = self.drop_subpath(place, path, succ, unwind_succ);\n                 succ"}, {"sha": "4898a4844b9f779b6549ad7641b0381bd95eab6a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -1702,11 +1702,11 @@ impl<'a> Parser<'a> {\n \n         // Try to lowercase the prefix if it's a valid base prefix.\n         fn fix_base_capitalisation(s: &str) -> Option<String> {\n-            if let Some(stripped) = s.strip_prefix(\"B\") {\n+            if let Some(stripped) = s.strip_prefix('B') {\n                 Some(format!(\"0b{stripped}\"))\n-            } else if let Some(stripped) = s.strip_prefix(\"O\") {\n+            } else if let Some(stripped) = s.strip_prefix('O') {\n                 Some(format!(\"0o{stripped}\"))\n-            } else if let Some(stripped) = s.strip_prefix(\"X\") {\n+            } else if let Some(stripped) = s.strip_prefix('X') {\n                 Some(format!(\"0x{stripped}\"))\n             } else {\n                 None"}, {"sha": "0ad2242f6677c7044fc8592bd1bb1c349c52dbf4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -887,15 +887,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Type, trait_def_id)\n             .is_some()\n     }\n-    fn trait_defines_associated_named(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n+    fn trait_defines_associated_const_named(&self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n         self.tcx()\n             .associated_items(trait_def_id)\n-            .find_by_name_and_kinds(\n-                self.tcx(),\n-                assoc_name,\n-                &[ty::AssocKind::Type, ty::AssocKind::Const],\n-                trait_def_id,\n-            )\n+            .find_by_name_and_kind(self.tcx(), assoc_name, ty::AssocKind::Const, trait_def_id)\n             .is_some()\n     }\n \n@@ -1145,13 +1140,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n         // of calling `filter_by_name_and_kind`.\n-        let assoc_item = tcx\n-            .associated_items(candidate.def_id())\n-            .filter_by_name_unhygienic(assoc_ident.name)\n-            .find(|i| {\n-                (i.kind == ty::AssocKind::Type || i.kind == ty::AssocKind::Const)\n-                    && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n-            })\n+        let find_item_of_kind = |kind| {\n+            tcx.associated_items(candidate.def_id())\n+                .filter_by_name_unhygienic(assoc_ident.name)\n+                .find(|i| i.kind == kind && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident)\n+        };\n+        let assoc_item = find_item_of_kind(ty::AssocKind::Type)\n+            .or_else(|| find_item_of_kind(ty::AssocKind::Const))\n             .expect(\"missing associated type\");\n \n         if !assoc_item.vis.is_accessible_from(def_scope, tcx) {\n@@ -1657,11 +1652,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n     {\n         let mut matching_candidates = all_candidates()\n-            .filter(|r| self.trait_defines_associated_named(r.def_id(), assoc_name));\n-\n-        let bound = match matching_candidates.next() {\n-            Some(bound) => bound,\n-            None => {\n+            .filter(|r| self.trait_defines_associated_type_named(r.def_id(), assoc_name));\n+        let mut const_candidates = all_candidates()\n+            .filter(|r| self.trait_defines_associated_const_named(r.def_id(), assoc_name));\n+\n+        let (bound, next_cand) = match (matching_candidates.next(), const_candidates.next()) {\n+            (Some(bound), _) => (bound, matching_candidates.next()),\n+            (None, Some(bound)) => (bound, const_candidates.next()),\n+            (None, None) => {\n                 self.complain_about_assoc_type_not_found(\n                     all_candidates,\n                     &ty_param_name(),\n@@ -1671,10 +1669,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 return Err(ErrorReported);\n             }\n         };\n-\n         debug!(\"one_bound_for_assoc_type: bound = {:?}\", bound);\n \n-        if let Some(bound2) = matching_candidates.next() {\n+        if let Some(bound2) = next_cand {\n             debug!(\"one_bound_for_assoc_type: bound2 = {:?}\", bound2);\n \n             let is_equality = is_equality();\n@@ -1759,6 +1756,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 return Err(ErrorReported);\n             }\n         }\n+\n         Ok(bound)\n     }\n \n@@ -1893,14 +1891,17 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         // We have already adjusted the item name above, so compare with `ident.normalize_to_macros_2_0()` instead\n         // of calling `filter_by_name_and_kind`.\n-        let item = tcx\n-            .associated_items(trait_did)\n-            .in_definition_order()\n-            .find(|i| {\n-                i.kind.namespace() == Namespace::TypeNS\n-                    && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n-            })\n-            .expect(\"missing associated type\");\n+        let item = tcx.associated_items(trait_did).in_definition_order().find(|i| {\n+            i.kind.namespace() == Namespace::TypeNS\n+                && i.ident(tcx).normalize_to_macros_2_0() == assoc_ident\n+        });\n+        // Assume that if it's not matched, there must be a const defined with the same name\n+        // but it was used in a type position.\n+        let Some(item) = item else {\n+            let msg = format!(\"found associated const `{assoc_ident}` when type was expected\");\n+            tcx.sess.struct_span_err(span, &msg).emit();\n+            return Err(ErrorReported);\n+        };\n \n         let ty = self.projected_ty_from_poly_trait_ref(span, item.def_id, assoc_segment, bound);\n         let ty = self.normalize_ty(span, ty);"}, {"sha": "0347b6a4ab82f7da77d9b7c719e3661ba7d3fd3f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -1587,10 +1587,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let len = remaining_fields.len();\n \n-        let mut displayable_field_names =\n-            remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n-\n-        displayable_field_names.sort();\n+        let mut displayable_field_names: Vec<&str> =\n+            remaining_fields.keys().map(|ident| ident.as_str()).collect();\n+        // sorting &str primitives here, sort_unstable is ok\n+        displayable_field_names.sort_unstable();\n \n         let mut truncated_fields_error = String::new();\n         let remaining_fields_names = match &displayable_field_names[..] {"}, {"sha": "74b6f74e4013ce3271cc3d97f11025b0a697f2fd", "filename": "library/core/tests/future.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fcore%2Ftests%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fcore%2Ftests%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ffuture.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -118,3 +118,11 @@ fn block_on(fut: impl Future) {\n         }\n     }\n }\n+\n+// just tests by whether or not this compiles\n+fn _pending_impl_all_auto_traits<T>() {\n+    use std::panic::{RefUnwindSafe, UnwindSafe};\n+    fn all_auto_traits<T: Send + Sync + Unpin + UnwindSafe + RefUnwindSafe>() {}\n+\n+    all_auto_traits::<std::future::Pending<T>>();\n+}"}, {"sha": "a173e461c606f6e69d5ccbb170555fdc726c326d", "filename": "library/core/tests/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fcore%2Ftests%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fhash%2Fmod.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -146,3 +146,11 @@ fn test_build_hasher_object_safe() {\n \n     let _: &dyn BuildHasher<Hasher = DefaultHasher> = &RandomState::new();\n }\n+\n+// just tests by whether or not this compiles\n+fn _build_hasher_default_impl_all_auto_traits<T>() {\n+    use std::panic::{RefUnwindSafe, UnwindSafe};\n+    fn all_auto_traits<T: Send + Sync + Unpin + UnwindSafe + RefUnwindSafe>() {}\n+\n+    all_auto_traits::<std::hash::BuildHasherDefault<T>>();\n+}"}, {"sha": "972d61ba909d8dbb08edee5580c29c2ba3cf6225", "filename": "library/core/tests/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Ftraits%2Fiterator.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -496,3 +496,11 @@ fn test_collect() {\n     let b: Vec<isize> = a.iter().cloned().collect();\n     assert!(a == b);\n }\n+\n+// just tests by whether or not this compiles\n+fn _empty_impl_all_auto_traits<T>() {\n+    use std::panic::{RefUnwindSafe, UnwindSafe};\n+    fn all_auto_traits<T: Send + Sync + Unpin + UnwindSafe + RefUnwindSafe>() {}\n+\n+    all_auto_traits::<std::iter::Empty<T>>();\n+}"}, {"sha": "7ca64c38e5d3a211e3ea1192cf7bf6dea7a1ac84", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -2288,7 +2288,7 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n /// This function will traverse symbolic links to query information about the\n /// destination file. In case of broken symbolic links this will return `Ok(false)`.\n ///\n-/// As opposed to the `exists()` method, this one doesn't silently ignore errors\n+/// As opposed to the [`Path::exists`] method, this one doesn't silently ignore errors\n /// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n /// denied on some of the parent directories.)\n ///\n@@ -2301,6 +2301,8 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n /// assert!(!fs::try_exists(\"does_not_exist.txt\").expect(\"Can't check existence of file does_not_exist.txt\"));\n /// assert!(fs::try_exists(\"/root/secret_file.txt\").is_err());\n /// ```\n+///\n+/// [`Path::exists`]: crate::path::Path::exists\n // FIXME: stabilization should modify documentation of `exists()` to recommend this method\n // instead.\n #[unstable(feature = \"path_try_exists\", issue = \"83186\")]"}, {"sha": "85cad65da6a30670f9ff1cd3ee78b97e04cdab7d", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -2730,7 +2730,7 @@ impl Path {\n     /// This function will traverse symbolic links to query information about the\n     /// destination file. In case of broken symbolic links this will return `Ok(false)`.\n     ///\n-    /// As opposed to the `exists()` method, this one doesn't silently ignore errors\n+    /// As opposed to the [`exists()`] method, this one doesn't silently ignore errors\n     /// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n     /// denied on some of the parent directories.)\n     ///\n@@ -2743,6 +2743,8 @@ impl Path {\n     /// assert!(!Path::new(\"does_not_exist.txt\").try_exists().expect(\"Can't check existence of file does_not_exist.txt\"));\n     /// assert!(Path::new(\"/root/secret_file.txt\").try_exists().is_err());\n     /// ```\n+    ///\n+    /// [`exists()`]: Self::exists\n     // FIXME: stabilization should modify documentation of `exists()` to recommend this method\n     // instead.\n     #[unstable(feature = \"path_try_exists\", issue = \"83186\")]"}, {"sha": "cfdd119377f17669e44777185dc17f3988c3d30c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -1533,9 +1533,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 for pb in obj.projection_bounds() {\n                     bindings.push(TypeBinding {\n                         name: cx.tcx.associated_item(pb.item_def_id()).name,\n-                        kind: TypeBindingKind::Equality {\n-                            term: pb.skip_binder().term.clean(cx).into(),\n-                        },\n+                        kind: TypeBindingKind::Equality { term: pb.skip_binder().term.clean(cx) },\n                     });\n                 }\n "}, {"sha": "6feba34134c592397b2a95ae10d38c03c9ce431e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -953,7 +953,7 @@ crate fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n /// A link that has not yet been rendered.\n ///\n /// This link will be turned into a rendered link by [`Item::links`].\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n crate struct ItemLink {\n     /// The original link written in the markdown\n     crate link: String,\n@@ -1036,8 +1036,7 @@ impl Attributes {\n         // Additional documentation should be shown before the original documentation\n         let other_attrs = additional_attrs\n             .into_iter()\n-            .map(|(attrs, id)| attrs.iter().map(move |attr| (attr, Some(id))))\n-            .flatten()\n+            .flat_map(|(attrs, id)| attrs.iter().map(move |attr| (attr, Some(id))))\n             .chain(attrs.iter().map(|attr| (attr, None)))\n             .filter_map(clean_attr)\n             .collect();"}, {"sha": "6e483d27f336b52e1933b8b1c1e45c52b54c09af", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -439,13 +439,12 @@ impl Options {\n             matches\n                 .opt_str(\"default-theme\")\n                 .iter()\n-                .map(|theme| {\n+                .flat_map(|theme| {\n                     vec![\n                         (\"use-system-theme\".to_string(), \"false\".to_string()),\n                         (\"theme\".to_string(), theme.to_string()),\n                     ]\n                 })\n-                .flatten()\n                 .collect(),\n             matches\n                 .opt_strs(\"default-setting\")"}, {"sha": "c0115bfc6d4fab3d0c4716f9d273e1806150e9a3", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -76,7 +76,7 @@ impl core::fmt::Write for Buffer {\n     }\n \n     #[inline]\n-    fn write_fmt(self: &mut Self, args: fmt::Arguments<'_>) -> fmt::Result {\n+    fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {\n         self.buffer.write_fmt(args)\n     }\n }"}, {"sha": "06d60b6d06c9ce10d983508e977949107b975e34", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -274,8 +274,7 @@ impl Decorations {\n         let (mut starts, mut ends): (Vec<_>, Vec<_>) = info\n             .0\n             .into_iter()\n-            .map(|(kind, ranges)| ranges.into_iter().map(move |(lo, hi)| ((lo, kind), hi)))\n-            .flatten()\n+            .flat_map(|(kind, ranges)| ranges.into_iter().map(move |(lo, hi)| ((lo, kind), hi)))\n             .unzip();\n \n         // Sort the sequences in document order."}, {"sha": "e1309c03b5ca890cec0381735049536d693a19e5", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -81,7 +81,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                     lastpathid += 1;\n \n                     if let Some(&(ref fqp, short)) = paths.get(&defid) {\n-                        crate_paths.push((short, fqp.last().unwrap().clone()));\n+                        crate_paths.push((short, *fqp.last().unwrap()));\n                         Some(pathid)\n                     } else {\n                         None"}, {"sha": "cab3c28342dab5df73e0c6d258eff3ae3d083f3e", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -54,7 +54,6 @@ function resourcePath(basename, extension) {\n     return getVar(\"root-path\") + basename + getVar(\"resource-suffix\") + extension;\n }\n \n-\n (function () {\n     window.rootPath = getVar(\"root-path\");\n     window.currentCrate = getVar(\"current-crate\");\n@@ -232,7 +231,7 @@ function hideThemeButtonState() {\n             document.title = searchState.titleBeforeSearch;\n             // We also remove the query parameter from the URL.\n             if (searchState.browserSupportsHistoryApi()) {\n-                history.replaceState(\"\", window.currentCrate + \" - Rust\",\n+                history.replaceState(null, window.currentCrate + \" - Rust\",\n                     getNakedUrl() + window.location.hash);\n             }\n         },\n@@ -246,18 +245,6 @@ function hideThemeButtonState() {\n                 });\n             return params;\n         },\n-        putBackSearch: function(search_input) {\n-            var search = searchState.outputElement();\n-            if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n-                searchState.showResults(search);\n-                if (searchState.browserSupportsHistoryApi()) {\n-                    var extra = \"?search=\" + encodeURIComponent(search_input.value);\n-                    history.replaceState(search_input.value, \"\",\n-                        getNakedUrl() + extra + window.location.hash);\n-                }\n-                document.title = searchState.title;\n-            }\n-        },\n         browserSupportsHistoryApi: function() {\n             return window.history && typeof window.history.pushState === \"function\";\n         },\n@@ -282,14 +269,10 @@ function hideThemeButtonState() {\n             }\n \n             search_input.addEventListener(\"focus\", function() {\n-                searchState.putBackSearch(this);\n-                search_input.origPlaceholder = searchState.input.placeholder;\n+                search_input.origPlaceholder = search_input.placeholder;\n                 search_input.placeholder = \"Type your search here.\";\n                 loadSearch();\n             });\n-            search_input.addEventListener(\"blur\", function() {\n-                search_input.placeholder = searchState.input.origPlaceholder;\n-            });\n \n             if (search_input.value != '') {\n                 loadSearch();\n@@ -330,7 +313,7 @@ function hideThemeButtonState() {\n             var hash = ev.newURL.slice(ev.newURL.indexOf(\"#\") + 1);\n             if (searchState.browserSupportsHistoryApi()) {\n                 // `window.location.search`` contains all the query parameters, not just `search`.\n-                history.replaceState(hash, \"\",\n+                history.replaceState(null, \"\",\n                     getNakedUrl() + window.location.search + \"#\" + hash);\n             }\n             elem = document.getElementById(hash);"}, {"sha": "8c832a222b74d942a3a45d9de3aceee3ebe69164", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 94, "deletions": 27, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -1,5 +1,5 @@\n /* global addClass, getNakedUrl, getSettingValue, hasOwnPropertyRustdoc, initSearch, onEach */\n-/* global onEachLazy, removeClass, searchState, updateLocalStorage */\n+/* global onEachLazy, removeClass, searchState, hasClass */\n \n (function() {\n // This mapping table should match the discriminants of\n@@ -133,6 +133,39 @@ window.initSearch = function(rawSearchIndex) {\n         searchState.input.value = params.search || \"\";\n     }\n \n+    /**\n+     * Build an URL with search parameters.\n+     *\n+     * @param {string} search            - The current search being performed.\n+     * @param {string|null} filterCrates - The current filtering crate (if any).\n+     * @return {string}\n+     */\n+    function buildUrl(search, filterCrates) {\n+        var extra = \"?search=\" + encodeURIComponent(search);\n+\n+        if (filterCrates !== null) {\n+            extra += \"&filter-crate=\" + encodeURIComponent(filterCrates);\n+        }\n+        return getNakedUrl() + extra + window.location.hash;\n+    }\n+\n+    /**\n+     * Return the filtering crate or `null` if there is none.\n+     *\n+     * @return {string|null}\n+     */\n+    function getFilterCrates() {\n+        var elem = document.getElementById(\"crate-search\");\n+\n+        if (elem &&\n+            elem.value !== \"All crates\" &&\n+            hasOwnPropertyRustdoc(rawSearchIndex, elem.value))\n+        {\n+            return elem.value;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Executes the query and returns a list of results for each results tab.\n      * @param  {Object}        query          - The user query\n@@ -595,7 +628,7 @@ window.initSearch = function(rawSearchIndex) {\n             // aliases to be before the others in the displayed results.\n             var aliases = [];\n             var crateAliases = [];\n-            if (filterCrates !== undefined) {\n+            if (filterCrates !== null) {\n                 if (ALIASES[filterCrates] && ALIASES[filterCrates][query.search]) {\n                     var query_aliases = ALIASES[filterCrates][query.search];\n                     var len = query_aliases.length;\n@@ -694,7 +727,7 @@ window.initSearch = function(rawSearchIndex) {\n         {\n             val = extractGenerics(val.substr(1, val.length - 2));\n             for (i = 0; i < nSearchWords; ++i) {\n-                if (filterCrates !== undefined && searchIndex[i].crate !== filterCrates) {\n+                if (filterCrates !== null && searchIndex[i].crate !== filterCrates) {\n                     continue;\n                 }\n                 in_args = findArg(searchIndex[i], val, true, typeFilter);\n@@ -725,7 +758,7 @@ window.initSearch = function(rawSearchIndex) {\n             var output = extractGenerics(parts[1]);\n \n             for (i = 0; i < nSearchWords; ++i) {\n-                if (filterCrates !== undefined && searchIndex[i].crate !== filterCrates) {\n+                if (filterCrates !== null && searchIndex[i].crate !== filterCrates) {\n                     continue;\n                 }\n                 var type = searchIndex[i].type;\n@@ -781,7 +814,7 @@ window.initSearch = function(rawSearchIndex) {\n             var lev, j;\n             for (j = 0; j < nSearchWords; ++j) {\n                 ty = searchIndex[j];\n-                if (!ty || (filterCrates !== undefined && ty.crate !== filterCrates)) {\n+                if (!ty || (filterCrates !== null && ty.crate !== filterCrates)) {\n                     continue;\n                 }\n                 var lev_add = 0;\n@@ -1279,17 +1312,6 @@ window.initSearch = function(rawSearchIndex) {\n         };\n     }\n \n-    function getFilterCrates() {\n-        var elem = document.getElementById(\"crate-search\");\n-\n-        if (elem && elem.value !== \"All crates\" &&\n-            hasOwnPropertyRustdoc(rawSearchIndex, elem.value))\n-        {\n-            return elem.value;\n-        }\n-        return undefined;\n-    }\n-\n     /**\n      * Perform a search based on the current state of the search input element\n      * and display the results.\n@@ -1309,27 +1331,34 @@ window.initSearch = function(rawSearchIndex) {\n         }\n         if (!forced && query.id === currentResults) {\n             if (query.query.length > 0) {\n-                searchState.putBackSearch(searchState.input);\n+                putBackSearch();\n             }\n             return;\n         }\n \n+        var filterCrates = getFilterCrates();\n+\n+        // In case we have no information about the saved crate and there is a URL query parameter,\n+        // we override it with the URL query parameter.\n+        if (filterCrates === null && params[\"filter-crate\"] !== undefined) {\n+            filterCrates = params[\"filter-crate\"];\n+        }\n+\n         // Update document title to maintain a meaningful browser history\n         searchState.title = \"Results for \" + query.query + \" - Rust\";\n \n         // Because searching is incremental by character, only the most\n         // recent search query is added to the browser history.\n         if (searchState.browserSupportsHistoryApi()) {\n-            var newURL = getNakedUrl() + \"?search=\" + encodeURIComponent(query.raw) +\n-                window.location.hash;\n+            var newURL = buildUrl(query.raw, filterCrates);\n+\n             if (!history.state && !params.search) {\n-                history.pushState(query, \"\", newURL);\n+                history.pushState(null, \"\", newURL);\n             } else {\n-                history.replaceState(query, \"\", newURL);\n+                history.replaceState(null, \"\", newURL);\n             }\n         }\n \n-        var filterCrates = getFilterCrates();\n         showResults(execSearch(query, searchWords, filterCrates),\n             params[\"go_to_first\"], filterCrates);\n     }\n@@ -1495,12 +1524,28 @@ window.initSearch = function(rawSearchIndex) {\n         search();\n     }\n \n+    function putBackSearch() {\n+        var search_input = searchState.input;\n+        if (!searchState.input) {\n+            return;\n+        }\n+        var search = searchState.outputElement();\n+        if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n+            searchState.showResults(search);\n+            if (searchState.browserSupportsHistoryApi()) {\n+                history.replaceState(null, \"\",\n+                    buildUrl(search_input.value, getFilterCrates()));\n+            }\n+            document.title = searchState.title;\n+        }\n+    }\n+\n     function registerSearchEvents() {\n         var searchAfter500ms = function() {\n             searchState.clearInputTimeout();\n             if (searchState.input.value.length === 0) {\n                 if (searchState.browserSupportsHistoryApi()) {\n-                    history.replaceState(\"\", window.currentCrate + \" - Rust\",\n+                    history.replaceState(null, window.currentCrate + \" - Rust\",\n                         getNakedUrl() + window.location.hash);\n                 }\n                 searchState.hideResults();\n@@ -1567,6 +1612,14 @@ window.initSearch = function(rawSearchIndex) {\n             }\n         });\n \n+        searchState.input.addEventListener(\"focus\", function() {\n+            putBackSearch();\n+        });\n+\n+        searchState.input.addEventListener(\"blur\", function() {\n+            searchState.input.placeholder = searchState.input.origPlaceholder;\n+        });\n+\n         // Push and pop states are used to add search results to the browser\n         // history.\n         if (searchState.browserSupportsHistoryApi()) {\n@@ -1619,7 +1672,16 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     function updateCrate(ev) {\n-        updateLocalStorage(\"rustdoc-saved-filter-crate\", ev.target.value);\n+        if (ev.target.value === \"All crates\") {\n+            // If we don't remove it from the URL, it'll be picked up again by the search.\n+            var params = searchState.getQueryStringParams();\n+            var query = searchState.input.value.trim();\n+            if (!history.state && !params.search) {\n+                history.pushState(null, \"\", buildUrl(query, null));\n+            } else {\n+                history.replaceState(null, \"\", buildUrl(query, null));\n+            }\n+        }\n         // In case you \"cut\" the entry from the search input, then change the crate filter\n         // before paste back the previous search, you get the old search results without\n         // the filter. To prevent this, we need to remove the previous results.\n@@ -1629,10 +1691,15 @@ window.initSearch = function(rawSearchIndex) {\n \n     searchWords = buildIndex(rawSearchIndex);\n     registerSearchEvents();\n-    // If there's a search term in the URL, execute the search now.\n-    if (searchState.getQueryStringParams().search) {\n-        search();\n+\n+    function runSearchIfNeeded() {\n+        // If there's a search term in the URL, execute the search now.\n+        if (searchState.getQueryStringParams().search) {\n+            search();\n+        }\n     }\n+\n+    runSearchIfNeeded();\n };\n \n if (window.searchIndex !== undefined) {"}, {"sha": "139fa5c9a11a62e4db3586a604a1dd849c7a729c", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -4,7 +4,7 @@\n \n (function () {\n     function changeSetting(settingName, value) {\n-        updateLocalStorage(\"rustdoc-\" + settingName, value);\n+        updateLocalStorage(settingName, value);\n \n         switch (settingName) {\n             case \"theme\":"}, {"sha": "90490acccfdb5714a79994d19f8582e5febe2476", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -82,11 +82,11 @@ function toggleSidebar() {\n     if (child.innerText === \">\") {\n         sidebar.classList.add(\"expanded\");\n         child.innerText = \"<\";\n-        updateLocalStorage(\"rustdoc-source-sidebar-show\", \"true\");\n+        updateLocalStorage(\"source-sidebar-show\", \"true\");\n     } else {\n         sidebar.classList.remove(\"expanded\");\n         child.innerText = \">\";\n-        updateLocalStorage(\"rustdoc-source-sidebar-show\", \"false\");\n+        updateLocalStorage(\"source-sidebar-show\", \"false\");\n     }\n }\n \n@@ -97,7 +97,7 @@ function createSidebarToggle() {\n \n     var inner = document.createElement(\"div\");\n \n-    if (getCurrentValue(\"rustdoc-source-sidebar-show\") === \"true\") {\n+    if (getCurrentValue(\"source-sidebar-show\") === \"true\") {\n         inner.innerText = \"<\";\n     } else {\n         inner.innerText = \">\";\n@@ -120,7 +120,7 @@ function createSourceSidebar() {\n \n     var sidebar = document.createElement(\"div\");\n     sidebar.id = \"source-sidebar\";\n-    if (getCurrentValue(\"rustdoc-source-sidebar-show\") !== \"true\") {\n+    if (getCurrentValue(\"source-sidebar-show\") !== \"true\") {\n         container.classList.remove(\"expanded\");\n     } else {\n         container.classList.add(\"expanded\");"}, {"sha": "ccf3d0a581a171e3fd4dc5e59fd981db5e1a3b25", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -15,7 +15,7 @@ var settingsDataset = (function () {\n })();\n \n function getSettingValue(settingName) {\n-    var current = getCurrentValue('rustdoc-' + settingName);\n+    var current = getCurrentValue(settingName);\n     if (current !== null) {\n         return current;\n     }\n@@ -106,15 +106,15 @@ function hasOwnPropertyRustdoc(obj, property) {\n \n function updateLocalStorage(name, value) {\n     try {\n-        window.localStorage.setItem(name, value);\n+        window.localStorage.setItem(\"rustdoc-\" + name, value);\n     } catch(e) {\n         // localStorage is not accessible, do nothing\n     }\n }\n \n function getCurrentValue(name) {\n     try {\n-        return window.localStorage.getItem(name);\n+        return window.localStorage.getItem(\"rustdoc-\" + name);\n     } catch(e) {\n         return null;\n     }\n@@ -127,7 +127,7 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n     // If this new value comes from a system setting or from the previously\n     // saved theme, no need to save it.\n     if (saveTheme) {\n-        updateLocalStorage(\"rustdoc-theme\", newTheme);\n+        updateLocalStorage(\"theme\", newTheme);\n     }\n \n     if (styleElem.href === newHref) {\n@@ -158,7 +158,7 @@ function useSystemTheme(value) {\n         value = true;\n     }\n \n-    updateLocalStorage(\"rustdoc-use-system-theme\", value);\n+    updateLocalStorage(\"use-system-theme\", value);\n \n     // update the toggle if we're on the settings page\n     var toggle = document.getElementById(\"use-system-theme\");\n@@ -231,7 +231,7 @@ if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n     if (getSettingValue(\"use-system-theme\") === null\n         && getSettingValue(\"preferred-dark-theme\") === null\n         && darkThemes.indexOf(localStoredTheme) >= 0) {\n-        updateLocalStorage(\"rustdoc-preferred-dark-theme\", localStoredTheme);\n+        updateLocalStorage(\"preferred-dark-theme\", localStoredTheme);\n     }\n \n     // call the function to initialize the theme at least once!"}, {"sha": "93292efdcb629cfc4751647a84f4c6fdaa8dbcd1", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -247,8 +247,7 @@ crate fn run(\n         let target_crates = options\n             .target_crates\n             .into_iter()\n-            .map(|target| all_crates.iter().filter(move |(_, name)| name.as_str() == target))\n-            .flatten()\n+            .flat_map(|target| all_crates.iter().filter(move |(_, name)| name.as_str() == target))\n             .map(|(crate_num, _)| **crate_num)\n             .collect::<Vec<_>>();\n "}, {"sha": "73d310fc5c9cc6464ef8d214c5667c5c1847c206", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -11,8 +11,38 @@ wait-for: \"#crate-search\"\n click: \"#crate-search\"\n // We select \"lib2\" option then press enter to change the filter.\n press-key: \"ArrowDown\"\n+press-key: \"ArrowDown\"\n press-key: \"Enter\"\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n // We check that there is no more \"test_docs\" appearing.\n assert-false: \"#results .externcrate\"\n+// We also check that \"lib2\" is the filter crate.\n+assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n+\n+// Now we check that leaving the search results and putting them back keeps the\n+// crate filtering.\n+press-key: \"Escape\"\n+wait-for: 100\n+assert-css: (\"#main-content\", {\"display\": \"block\"})\n+focus: \".search-input\"\n+wait-for: 100\n+assert-css: (\"#main-content\", {\"display\": \"none\"})\n+// We check that there is no more \"test_docs\" appearing.\n+assert-false: \"#results .externcrate\"\n+assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n+\n+// Selecting back \"All crates\"\n+click: \"#crate-search\"\n+press-key: \"ArrowUp\"\n+press-key: \"ArrowUp\"\n+press-key: \"Enter\"\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-property: (\"#crate-search\", {\"value\": \"All crates\"})\n+\n+// Checking that the URL parameter is taken into account for crate filtering.\n+goto: file://|DOC_PATH|/test_docs/index.html?search=test&filter-crate=lib2\n+wait-for: \"#crate-search\"\n+assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n+assert-false: \"#results .externcrate\""}, {"sha": "cfdb391d39d51ccea43d539ebfd5d883c54a3c85", "filename": "src/test/ui/associated-consts/shadowed-const.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -0,0 +1,23 @@\n+// Checking that none of these ICE, which was introduced in\n+// https://github.com/rust-lang/rust/issues/93553\n+trait Foo {\n+    type Bar;\n+}\n+\n+trait Baz: Foo {\n+    const Bar: Self::Bar;\n+}\n+\n+trait Baz2: Foo {\n+    const Bar: u32;\n+\n+    fn foo() -> Self::Bar;\n+}\n+\n+trait Baz3 {\n+  const BAR: usize;\n+  const QUX: Self::BAR;\n+  //~^ ERROR found associated const\n+}\n+\n+fn main() {}"}, {"sha": "fe21d2aec00bcafa34e81257b564050fcc088533", "filename": "src/test/ui/associated-consts/shadowed-const.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fshadowed-const.stderr?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -0,0 +1,8 @@\n+error: found associated const `BAR` when type was expected\n+  --> $DIR/shadowed-const.rs:19:14\n+   |\n+LL |   const QUX: Self::BAR;\n+   |              ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f6ddac3a65e06f74887c67d9b7f29dab79bb5075", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -2424,7 +2424,10 @@ impl<'test> TestCx<'test> {\n         );\n \n         if !res.status.success() {\n-            self.fatal_proc_rec(\"jsondocck failed!\", &res)\n+            self.fatal_proc_rec_with_ctx(\"jsondocck failed!\", &res, |_| {\n+                println!(\"Rustdoc Output:\");\n+                proc_res.print_info();\n+            })\n         }\n \n         let mut json_out = out_dir.join(self.testpaths.file.file_stem().unwrap());\n@@ -3738,10 +3741,7 @@ pub struct ProcRes {\n }\n \n impl ProcRes {\n-    pub fn fatal(&self, err: Option<&str>, on_failure: impl FnOnce()) -> ! {\n-        if let Some(e) = err {\n-            println!(\"\\nerror: {}\", e);\n-        }\n+    pub fn print_info(&self) {\n         print!(\n             \"\\\n              status: {}\\n\\\n@@ -3760,6 +3760,13 @@ impl ProcRes {\n             json::extract_rendered(&self.stdout),\n             json::extract_rendered(&self.stderr),\n         );\n+    }\n+\n+    pub fn fatal(&self, err: Option<&str>, on_failure: impl FnOnce()) -> ! {\n+        if let Some(e) = err {\n+            println!(\"\\nerror: {}\", e);\n+        }\n+        self.print_info();\n         on_failure();\n         // Use resume_unwind instead of panic!() to prevent a panic message + backtrace from\n         // compiletest, which is unnecessary noise."}, {"sha": "dbf5cf9650c5f4f16098a2d11979b1bf423531c3", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/cb18e83e8512be69b26fcb67ae66d81e5b7a4383/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=cb18e83e8512be69b26fcb67ae66d81e5b7a4383", "patch": "@@ -357,6 +357,8 @@ function runChecks(testFile, loaded, index) {\n     var testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;';\n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n+    } else {\n+        testFileContent += \"exports.FILTER_CRATE = null;\";\n     }\n     var loadedFile = loadContent(testFileContent);\n "}]}