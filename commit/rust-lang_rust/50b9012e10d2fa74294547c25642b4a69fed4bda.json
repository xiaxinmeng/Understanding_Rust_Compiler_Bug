{"sha": "50b9012e10d2fa74294547c25642b4a69fed4bda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYjkwMTJlMTBkMmZhNzQyOTQ1NDdjMjU2NDJiNGE2OWZlZDRiZGE=", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2018-01-28T01:29:14Z"}, "committer": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2018-01-28T01:29:14Z"}, "message": "Add minimal docs to most public symbols", "tree": {"sha": "6e930103a8b9e74041bf0e6e9f7c7e696d481afd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e930103a8b9e74041bf0e6e9f7c7e696d481afd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b9012e10d2fa74294547c25642b4a69fed4bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b9012e10d2fa74294547c25642b4a69fed4bda", "html_url": "https://github.com/rust-lang/rust/commit/50b9012e10d2fa74294547c25642b4a69fed4bda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b9012e10d2fa74294547c25642b4a69fed4bda/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3caf58ca042cf6b5707822e51619adf511acd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3caf58ca042cf6b5707822e51619adf511acd0", "html_url": "https://github.com/rust-lang/rust/commit/6d3caf58ca042cf6b5707822e51619adf511acd0"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "65a99432791a8b37711e9ff51e2735615369f354", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=50b9012e10d2fa74294547c25642b4a69fed4bda", "patch": "@@ -17,6 +17,7 @@ use self::strings::{is_string_literal_start, scan_byte_char_or_string, scan_char\n mod comments;\n use self::comments::{scan_comment, scan_shebang};\n \n+/// Break a string up into its component tokens\n pub fn tokenize(text: &str) -> Vec<Token> {\n     let mut text = text;\n     let mut acc = Vec::new();\n@@ -28,6 +29,7 @@ pub fn tokenize(text: &str) -> Vec<Token> {\n     }\n     acc\n }\n+/// Get the next token from a string\n pub fn next_token(text: &str) -> Token {\n     assert!(!text.is_empty());\n     let mut ptr = Ptr::new(text);"}, {"sha": "87a9d11eaf5af4b31eeac7a4f890fd64e7cf6258", "filename": "src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=50b9012e10d2fa74294547c25642b4a69fed4bda", "patch": "@@ -1,3 +1,20 @@\n+//! An experimental implementation of [Rust RFC#2256 libsyntax2.0][rfc#2256].\n+//!\n+//! The intent is to be an IDE-ready parser, i.e. one that offers\n+//!\n+//! - easy and fast incremental re-parsing,\n+//! - graceful handling of errors, and\n+//! - maintains all information in the source file.\n+//!\n+//! For more information, see [the RFC][rfc#2265], or [the working draft][RFC.md].\n+//!\n+//!   [rfc#2256]: <https://github.com/rust-lang/rfcs/pull/2256>\n+//!   [RFC.md]: <https://github.com/matklad/libsyntax2/blob/master/docs/RFC.md>\n+\n+#![forbid(missing_debug_implementations, unconditional_recursion, future_incompatible)]\n+#![deny(bad_style, unsafe_code, missing_docs)]\n+//#![warn(unreachable_pub)] // rust-lang/rust#47816\n+\n extern crate unicode_xid;\n \n mod text;\n@@ -6,17 +23,20 @@ mod lexer;\n mod parser;\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n+#[allow(missing_docs)]\n pub mod syntax_kinds;\n pub use text::{TextRange, TextUnit};\n pub use tree::{File, FileBuilder, Node, Sink, SyntaxKind, Token};\n pub use lexer::{next_token, tokenize};\n pub use parser::parse;\n \n+/// Utilities for simple uses of the parser.\n pub mod utils {\n     use std::fmt::Write;\n \n     use {File, Node};\n \n+    /// Parse a file and create a string representation of the resulting parse tree.\n     pub fn dump_tree(file: &File) -> String {\n         let mut result = String::new();\n         go(file.root(), &mut result, 0);"}, {"sha": "0f8f2ce0cc7126e4581ec14a691fe9b4715e7ac3", "filename": "src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fmod.rs?ref=50b9012e10d2fa74294547c25642b4a69fed4bda", "patch": "@@ -6,6 +6,7 @@ use tree::TOMBSTONE;\n mod event_parser;\n use self::event_parser::Event;\n \n+/// Parse a sequence of tokens into the representative node tree\n pub fn parse(text: String, tokens: &[Token]) -> File {\n     let events = event_parser::parse(&text, tokens);\n     from_events_to_file(text, tokens, events)"}, {"sha": "4084bf44e8f98fced29a1b75b45c592449bfdde4", "filename": "src/text.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Ftext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Ftext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftext.rs?ref=50b9012e10d2fa74294547c25642b4a69fed4bda", "patch": "@@ -1,14 +1,17 @@\n use std::fmt;\n use std::ops;\n \n+/// An text position in a source file\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct TextUnit(u32);\n \n impl TextUnit {\n+    /// The positional offset required for one character\n     pub fn len_of_char(c: char) -> TextUnit {\n         TextUnit(c.len_utf8() as u32)\n     }\n \n+    #[allow(missing_docs)]\n     pub fn new(val: u32) -> TextUnit {\n         TextUnit(val)\n     }\n@@ -64,6 +67,7 @@ impl ops::SubAssign<TextUnit> for TextUnit {\n     }\n }\n \n+/// A range of text in a source file\n #[derive(Clone, Copy, PartialEq, Eq)]\n pub struct TextRange {\n     start: TextUnit,\n@@ -83,10 +87,12 @@ impl fmt::Display for TextRange {\n }\n \n impl TextRange {\n+    /// An length-0 range of text\n     pub fn empty() -> TextRange {\n         TextRange::from_to(TextUnit::new(0), TextUnit::new(0))\n     }\n \n+    /// The left-inclusive range (`[from..to)`) between to points in the text\n     pub fn from_to(from: TextUnit, to: TextUnit) -> TextRange {\n         assert!(from <= to, \"Invalid text range [{}; {})\", from, to);\n         TextRange {\n@@ -95,22 +101,27 @@ impl TextRange {\n         }\n     }\n \n+    /// The range from some point over some length\n     pub fn from_len(from: TextUnit, len: TextUnit) -> TextRange {\n         TextRange::from_to(from, from + len)\n     }\n \n+    /// The starting position of this range\n     pub fn start(&self) -> TextUnit {\n         self.start\n     }\n \n+    /// The end position of this range\n     pub fn end(&self) -> TextUnit {\n         self.end\n     }\n \n+    /// The length of this range\n     pub fn len(&self) -> TextUnit {\n         self.end - self.start\n     }\n \n+    /// Is this range empty of any content?\n     pub fn is_empty(&self) -> bool {\n         self.start() == self.end()\n     }"}, {"sha": "738705f0226fd8a1c502bd744fc7561d7f6263fa", "filename": "src/tree/file_builder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Ftree%2Ffile_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Ftree%2Ffile_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Ffile_builder.rs?ref=50b9012e10d2fa74294547c25642b4a69fed4bda", "patch": "@@ -1,3 +1,6 @@\n+// FIXME(CAD97): I don't understand this mod well enough to stub out docs for the public symbols yet\n+#![allow(missing_docs)]\n+\n use {SyntaxKind, TextRange, TextUnit};\n use super::{File, NodeData, NodeIdx, SyntaxErrorData};\n \n@@ -8,6 +11,7 @@ pub trait Sink {\n     fn error(&mut self) -> ErrorBuilder;\n }\n \n+#[derive(Debug)]\n pub struct FileBuilder {\n     text: String,\n     nodes: Vec<NodeData>,\n@@ -139,6 +143,7 @@ fn grow(left: &mut TextRange, right: TextRange) {\n     *left = TextRange::from_to(left.start(), right.end())\n }\n \n+#[derive(Debug)]\n pub struct ErrorBuilder<'f> {\n     message: Option<String>,\n     builder: &'f mut FileBuilder,"}, {"sha": "aaf048c73415dc5d2e7bb121394bb164aab2fa40", "filename": "src/tree/mod.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Ftree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b9012e10d2fa74294547c25642b4a69fed4bda/src%2Ftree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftree%2Fmod.rs?ref=50b9012e10d2fa74294547c25642b4a69fed4bda", "patch": "@@ -7,6 +7,7 @@ use std::cmp;\n mod file_builder;\n pub use self::file_builder::{FileBuilder, Sink};\n \n+/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct SyntaxKind(pub(crate) u32);\n \n@@ -37,19 +38,25 @@ pub(crate) struct SyntaxInfo {\n     pub name: &'static str,\n }\n \n+/// A token of Rust source.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Token {\n+    /// The kind of token.\n     pub kind: SyntaxKind,\n+    /// The length of the token.\n     pub len: TextUnit,\n }\n \n+/// The contents of a Rust source file.\n+#[derive(Debug)]\n pub struct File {\n     text: String,\n     nodes: Vec<NodeData>,\n     errors: Vec<SyntaxErrorData>,\n }\n \n impl File {\n+    /// The root node of this source file.\n     pub fn root<'f>(&'f self) -> Node<'f> {\n         assert!(!self.nodes.is_empty());\n         Node {\n@@ -59,35 +66,42 @@ impl File {\n     }\n }\n \n+/// A reference to a token in a Rust source file.\n #[derive(Clone, Copy)]\n pub struct Node<'f> {\n     file: &'f File,\n     idx: NodeIdx,\n }\n \n impl<'f> Node<'f> {\n+    /// The kind of the token at this node.\n     pub fn kind(&self) -> SyntaxKind {\n         self.data().kind\n     }\n \n+    /// The text range covered by the token at this node.\n     pub fn range(&self) -> TextRange {\n         self.data().range\n     }\n \n+    /// The text at this node.\n     pub fn text(&self) -> &'f str {\n         &self.file.text.as_str()[self.range()]\n     }\n \n+    /// The parent node to this node.\n     pub fn parent(&self) -> Option<Node<'f>> {\n         self.as_node(self.data().parent)\n     }\n \n+    /// The children nodes of this node.\n     pub fn children(&self) -> Children<'f> {\n         Children {\n             next: self.as_node(self.data().first_child),\n         }\n     }\n \n+    /// Any errors contained in this node.\n     pub fn errors(&self) -> SyntaxErrors<'f> {\n         let pos = self.file.errors.iter().position(|e| e.node == self.idx);\n         let next = pos.map(|i| ErrorIdx(i as u32)).map(|idx| SyntaxError {\n@@ -123,7 +137,7 @@ impl<'f> cmp::PartialEq<Node<'f>> for Node<'f> {\n \n impl<'f> cmp::Eq for Node<'f> {}\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n pub struct SyntaxError<'f> {\n     file: &'f File,\n     idx: ErrorIdx,\n@@ -162,6 +176,7 @@ impl<'f> SyntaxError<'f> {\n     }\n }\n \n+#[derive(Debug)]\n pub struct Children<'f> {\n     next: Option<Node<'f>>,\n }\n@@ -176,6 +191,7 @@ impl<'f> Iterator for Children<'f> {\n     }\n }\n \n+#[derive(Debug)]\n pub struct SyntaxErrors<'f> {\n     next: Option<SyntaxError<'f>>,\n }\n@@ -190,9 +206,10 @@ impl<'f> Iterator for SyntaxErrors<'f> {\n     }\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n struct NodeIdx(u32);\n \n+#[derive(Debug)]\n struct NodeData {\n     kind: SyntaxKind,\n     range: TextRange,\n@@ -215,9 +232,10 @@ impl ::std::ops::IndexMut<NodeIdx> for Vec<NodeData> {\n     }\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug)]\n struct ErrorIdx(u32);\n \n+#[derive(Debug)]\n struct SyntaxErrorData {\n     node: NodeIdx,\n     message: String,"}]}