{"sha": "bd5c1d41f7e2e211a067ad72e32f25e43573905d", "node_id": "C_kwDOAAsO6NoAKGJkNWMxZDQxZjdlMmUyMTFhMDY3YWQ3MmUzMmYyNWU0MzU3MzkwNWQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-26T09:31:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-26T09:42:06Z"}, "message": "tree borrows: test String::as_mut_ptr", "tree": {"sha": "8f4e6071d08912bf5f929aac9dc084432000018c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4e6071d08912bf5f929aac9dc084432000018c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd5c1d41f7e2e211a067ad72e32f25e43573905d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5c1d41f7e2e211a067ad72e32f25e43573905d", "html_url": "https://github.com/rust-lang/rust/commit/bd5c1d41f7e2e211a067ad72e32f25e43573905d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd5c1d41f7e2e211a067ad72e32f25e43573905d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e8900bcfdb819a73618aab42a8d52defffecf36", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e8900bcfdb819a73618aab42a8d52defffecf36", "html_url": "https://github.com/rust-lang/rust/commit/3e8900bcfdb819a73618aab42a8d52defffecf36"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "4daf06c777e9a990b7c258e48b96889200221307", "filename": "src/tools/miri/tests/pass/tree-borrows/read-only-from-mut.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fread-only-from-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e8900bcfdb819a73618aab42a8d52defffecf36/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fread-only-from-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Fread-only-from-mut.rs?ref=3e8900bcfdb819a73618aab42a8d52defffecf36", "patch": "@@ -1,14 +0,0 @@\n-//@compile-flags: -Zmiri-tree-borrows\n-\n-// Tree Borrows has no issue with several mutable references existing\n-// at the same time, as long as they are used only immutably.\n-// I.e. multiple Reserved can coexist.\n-pub fn main() {\n-    unsafe {\n-        let base = &mut 42u64;\n-        let r1 = &mut *(base as *mut u64);\n-        let r2 = &mut *(base as *mut u64);\n-        let _l = *r1;\n-        let _l = *r2;\n-    }\n-}"}, {"sha": "c8fab745242a43840467a19a0600dad8e6bfd833", "filename": "src/tools/miri/tests/pass/tree-borrows/tree-borrows.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bd5c1d41f7e2e211a067ad72e32f25e43573905d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Ftree-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd5c1d41f7e2e211a067ad72e32f25e43573905d/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Ftree-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Ftree-borrows%2Ftree-borrows.rs?ref=bd5c1d41f7e2e211a067ad72e32f25e43573905d", "patch": "@@ -0,0 +1,41 @@\n+//@compile-flags: -Zmiri-tree-borrows\n+\n+use std::mem;\n+\n+fn main() {\n+    aliasing_read_only_mutable_refs();\n+    string_as_mut_ptr();\n+}\n+\n+// Tree Borrows has no issue with several mutable references existing\n+// at the same time, as long as they are used only immutably.\n+// I.e. multiple Reserved can coexist.\n+pub fn aliasing_read_only_mutable_refs() {\n+    unsafe {\n+        let base = &mut 42u64;\n+        let r1 = &mut *(base as *mut u64);\n+        let r2 = &mut *(base as *mut u64);\n+        let _l = *r1;\n+        let _l = *r2;\n+    }\n+}\n+\n+pub fn string_as_mut_ptr() {\n+    // This errors in Stacked Borrows since as_mut_ptr restricts the provenance,\n+    // but with Tree Borrows it should work.\n+    unsafe {\n+        let mut s = String::from(\"hello\");\n+        s.reserve(1); // make the `str` that `s` derefs to not cover the entire `s`.\n+\n+        // Prevent automatically dropping the String's data\n+        let mut s = mem::ManuallyDrop::new(s);\n+\n+        let ptr = s.as_mut_ptr();\n+        let len = s.len();\n+        let capacity = s.capacity();\n+\n+        let s = String::from_raw_parts(ptr, len, capacity);\n+\n+        assert_eq!(String::from(\"hello\"), s);\n+    }\n+}"}]}