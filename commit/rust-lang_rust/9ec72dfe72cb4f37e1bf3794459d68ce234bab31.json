{"sha": "9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "node_id": "C_kwDOAAsO6NoAKDllYzcyZGZlNzJjYjRmMzdlMWJmMzc5NDQ1OWQ2OGNlMjM0YmFiMzE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T14:35:23Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-30T14:35:23Z"}, "message": "Close accidental promotion check hole", "tree": {"sha": "aee449a59daea36edf25b9f2269664d30bb50b17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aee449a59daea36edf25b9f2269664d30bb50b17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "html_url": "https://github.com/rust-lang/rust/commit/9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6755859c3cd84092cf0361614b1cf255e8da11", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6755859c3cd84092cf0361614b1cf255e8da11", "html_url": "https://github.com/rust-lang/rust/commit/bb6755859c3cd84092cf0361614b1cf255e8da11"}], "stats": {"total": 115, "additions": 99, "deletions": 16}, "files": [{"sha": "b0e4f9bc1234174a2f2ce8644d587920c48c1bd3", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "patch": "@@ -216,12 +216,6 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     return Err(Unpromotable);\n                 }\n \n-                // We cannot promote things that need dropping, since the promoted value\n-                // would not get dropped.\n-                if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n-                    return Err(Unpromotable);\n-                }\n-\n                 Ok(())\n             }\n             _ => bug!(),\n@@ -262,13 +256,17 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 }\n             }\n         } else {\n-            let span = self.body.local_decls[local].source_info.span;\n-            span_bug!(span, \"{:?} not promotable, qualif_local shouldn't have been called\", local);\n+            false\n         }\n     }\n \n     fn validate_local(&mut self, local: Local) -> Result<(), Unpromotable> {\n         if let TempState::Defined { location: loc, uses, valid } = self.temps[local] {\n+            // We cannot promote things that need dropping, since the promoted value\n+            // would not get dropped.\n+            if self.qualif_local::<qualifs::NeedsDrop>(local) {\n+                return Err(Unpromotable);\n+            }\n             valid.or_else(|_| {\n                 let ok = {\n                     let block = &self.body[loc.block];"}, {"sha": "3034d3da95c2b119278749922d943bd37a7e406b", "filename": "src/test/ui/consts/promoted_const_call.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.rs?ref=9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "patch": "@@ -1,13 +1,12 @@\n-// check-pass\n-// known-bug: #91009\n-\n #![feature(const_mut_refs)]\n #![feature(const_trait_impl)]\n struct Panic;\n impl const Drop for Panic { fn drop(&mut self) { panic!(); } }\n pub const fn id<T>(x: T) -> T { x }\n pub const C: () = {\n     let _: &'static _ = &id(&Panic);\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n };\n \n fn main() {}"}, {"sha": "32bb1941a7d1bcb5e2640282a87a77ba3dc1c8a2", "filename": "src/test/ui/consts/promoted_const_call.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call.stderr?ref=9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "patch": "@@ -0,0 +1,23 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:7:26\n+   |\n+LL |     let _: &'static _ = &id(&Panic);\n+   |            ----------    ^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call.rs:7:30\n+   |\n+LL |     let _: &'static _ = &id(&Panic);\n+   |            ----------        ^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0716`."}, {"sha": "7be0bcdf9e91585a26bec749c1062bd15a7b4842", "filename": "src/test/ui/consts/promoted_const_call2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.rs?ref=9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "patch": "@@ -1,10 +1,10 @@\n-// check-pass\n-// known-bug: #91009\n-\n #![feature(const_precise_live_drops)]\n pub const fn id<T>(x: T) -> T { x }\n pub const C: () = {\n     let _: &'static _ = &id(&String::new());\n+    //~^ ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n+    //~| ERROR: destructor of `String` cannot be evaluated at compile-time\n };\n \n fn main() {}"}, {"sha": "b93c0862a258d322d983ed3ebc7e5200ef0459f4", "filename": "src/test/ui/consts/promoted_const_call2.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call2.stderr?ref=9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "patch": "@@ -0,0 +1,30 @@\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call2.rs:4:26\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call2.rs:4:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------        ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n+  --> $DIR/promoted_const_call2.rs:4:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |                              ^^^^^^^^^^^^^ the destructor for this type cannot be evaluated in constants\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0493, E0716.\n+For more information about an error, try `rustc --explain E0493`."}, {"sha": "05381c751eebcb6cbf2f6f28ae1a18f983672c7c", "filename": "src/test/ui/consts/promoted_const_call3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.rs?ref=9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "patch": "@@ -6,9 +6,11 @@ pub const C: () = {\n \n     let _: &'static _ = &id(&String::new());\n     //~^ ERROR: destructor of `String` cannot be evaluated at compile-time\n+    //~| ERROR: temporary value dropped while borrowed\n+    //~| ERROR: temporary value dropped while borrowed\n \n     let _: &'static _ = &std::mem::ManuallyDrop::new(String::new());\n-    // Promoted. bug!\n+    //~^ ERROR: temporary value dropped while borrowed\n };\n \n fn main() {}"}, {"sha": "f6b4b26d21f4e1178c955a55d02fc3b9d0683611", "filename": "src/test/ui/consts/promoted_const_call3.stderr", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ec72dfe72cb4f37e1bf3794459d68ce234bab31/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromoted_const_call3.stderr?ref=9ec72dfe72cb4f37e1bf3794459d68ce234bab31", "patch": "@@ -26,7 +26,38 @@ LL |     let _: &'static _ = &String::new();\n LL | };\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 3 previous errors\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:7:26\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+...\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:7:30\n+   |\n+LL |     let _: &'static _ = &id(&String::new());\n+   |            ----------        ^^^^^^^^^^^^^ - temporary value is freed at the end of this statement\n+   |            |                 |\n+   |            |                 creates a temporary value which is freed while still in use\n+   |            type annotation requires that borrow lasts for `'static`\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promoted_const_call3.rs:12:26\n+   |\n+LL |     let _: &'static _ = &std::mem::ManuallyDrop::new(String::new());\n+   |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary value which is freed while still in use\n+   |            |\n+   |            type annotation requires that borrow lasts for `'static`\n+LL |\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0493, E0716.\n For more information about an error, try `rustc --explain E0493`."}]}