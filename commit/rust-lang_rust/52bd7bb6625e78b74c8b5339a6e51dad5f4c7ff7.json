{"sha": "52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYmQ3YmI2NjI1ZTc4Yjc0YzhiNTMzOWE2ZTUxZGFkNWY0YzdmZjc=", "commit": {"author": {"name": "Andriy S. from cobalt", "email": "sima.rv@gmail.com", "date": "2017-10-08T15:34:31Z"}, "committer": {"name": "Andriy S. from cobalt", "email": "sima.rv@gmail.com", "date": "2017-10-08T15:34:31Z"}, "message": "relax `needless_range_loop` so that it reports only direct indexing", "tree": {"sha": "ad7b5b009f0ae05e74fbdf100363dd2ebaedd863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad7b5b009f0ae05e74fbdf100363dd2ebaedd863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7", "html_url": "https://github.com/rust-lang/rust/commit/52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7/comments", "author": {"login": "chyvonomys", "id": 2478891, "node_id": "MDQ6VXNlcjI0Nzg4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2478891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chyvonomys", "html_url": "https://github.com/chyvonomys", "followers_url": "https://api.github.com/users/chyvonomys/followers", "following_url": "https://api.github.com/users/chyvonomys/following{/other_user}", "gists_url": "https://api.github.com/users/chyvonomys/gists{/gist_id}", "starred_url": "https://api.github.com/users/chyvonomys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chyvonomys/subscriptions", "organizations_url": "https://api.github.com/users/chyvonomys/orgs", "repos_url": "https://api.github.com/users/chyvonomys/repos", "events_url": "https://api.github.com/users/chyvonomys/events{/privacy}", "received_events_url": "https://api.github.com/users/chyvonomys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chyvonomys", "id": 2478891, "node_id": "MDQ6VXNlcjI0Nzg4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2478891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chyvonomys", "html_url": "https://github.com/chyvonomys", "followers_url": "https://api.github.com/users/chyvonomys/followers", "following_url": "https://api.github.com/users/chyvonomys/following{/other_user}", "gists_url": "https://api.github.com/users/chyvonomys/gists{/gist_id}", "starred_url": "https://api.github.com/users/chyvonomys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chyvonomys/subscriptions", "organizations_url": "https://api.github.com/users/chyvonomys/orgs", "repos_url": "https://api.github.com/users/chyvonomys/repos", "events_url": "https://api.github.com/users/chyvonomys/events{/privacy}", "received_events_url": "https://api.github.com/users/chyvonomys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a54baad4fa177efac04eafd6d9ffe6236f7d3c45", "url": "https://api.github.com/repos/rust-lang/rust/commits/a54baad4fa177efac04eafd6d9ffe6236f7d3c45", "html_url": "https://github.com/rust-lang/rust/commit/a54baad4fa177efac04eafd6d9ffe6236f7d3c45"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "f1483cd7ecbfedc33d294f1905a811c0fcc63f90", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=52bd7bb6625e78b74c8b5339a6e51dad5f4c7ff7", "patch": "@@ -925,14 +925,16 @@ fn check_for_loop_range<'a, 'tcx>(\n                 cx: cx,\n                 var: canonical_id,\n                 indexed: HashMap::new(),\n+                indexed_directly: HashMap::new(),\n                 referenced: HashSet::new(),\n                 nonindex: false,\n             };\n             walk_expr(&mut visitor, body);\n \n-            // linting condition: we only indexed one variable\n-            if visitor.indexed.len() == 1 {\n-                let (indexed, indexed_extent) = visitor.indexed.into_iter().next().expect(\n+            // linting condition: we only indexed one variable, and indexed it directly\n+            // (`indexed_directly` is subset of `indexed`)\n+            if visitor.indexed.len() == 1 && visitor.indexed_directly.len() == 1 {\n+                let (indexed, indexed_extent) = visitor.indexed_directly.into_iter().next().expect(\n                     \"already checked that we have exactly 1 element\",\n                 );\n \n@@ -1481,6 +1483,9 @@ struct VarVisitor<'a, 'tcx: 'a> {\n     var: ast::NodeId,\n     /// indexed variables, the extend is `None` for global\n     indexed: HashMap<Name, Option<region::Scope>>,\n+    /// subset of `indexed` of vars that are indexed directly: `v[i]`\n+    /// this will not contain cases like `v[calc_index(i)]` or `v[(i + 4) % N]`\n+    indexed_directly: HashMap<Name, Option<region::Scope>>,\n     /// Any names that are used outside an index operation.\n     /// Used to detect things like `&mut vec` used together with `vec[i]`\n     referenced: HashSet<Name>,\n@@ -1499,7 +1504,8 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             let QPath::Resolved(None, ref seqvar) = *seqpath,\n             seqvar.segments.len() == 1,\n         ], {\n-            let index_used = same_var(self.cx, idx, self.var) || {\n+            let index_used_directly = same_var(self.cx, idx, self.var);\n+            let index_used = index_used_directly || {\n                 let mut used_visitor = LocalUsedVisitor {\n                     cx: self.cx,\n                     local: self.var,\n@@ -1519,10 +1525,16 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                         let parent_def_id = self.cx.tcx.hir.local_def_id(parent_id);\n                         let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n                         self.indexed.insert(seqvar.segments[0].name, Some(extent));\n+                        if index_used_directly {\n+                            self.indexed_directly.insert(seqvar.segments[0].name, Some(extent));\n+                        }\n                         return;  // no need to walk further *on the variable*\n                     }\n                     Def::Static(..) | Def::Const(..) => {\n                         self.indexed.insert(seqvar.segments[0].name, None);\n+                        if index_used_directly {\n+                            self.indexed_directly.insert(seqvar.segments[0].name, None);\n+                        }\n                         return;  // no need to walk further *on the variable*\n                     }\n                     _ => (),"}]}