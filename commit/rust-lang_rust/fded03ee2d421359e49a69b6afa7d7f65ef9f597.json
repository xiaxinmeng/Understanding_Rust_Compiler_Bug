{"sha": "fded03ee2d421359e49a69b6afa7d7f65ef9f597", "node_id": "C_kwDOAAsO6NoAKGZkZWQwM2VlMmQ0MjEzNTllNDlhNjliNmFmYTdkN2Y2NWVmOWY1OTc", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2022-12-15T19:36:40Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2022-12-15T19:36:40Z"}, "message": "docs: rewrite E0158 error-code docs for clarity", "tree": {"sha": "96505e81b34959343a04bb993bad0ee8a4d80a7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96505e81b34959343a04bb993bad0ee8a4d80a7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fded03ee2d421359e49a69b6afa7d7f65ef9f597", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEINUdoc4Vb1yVx04IZ6vxb7Ds2HAFAmObd0gACgkQZ6vxb7Ds\n2HC2lw/+ODPlGyKx+OSgmrFBAQQxIj+fKUZq/qs6AY4gXxnWOCEvjYMORNIe2/Vp\nY4rDprNxPlAb+PY3xoGHMD6EUmgaBK3SNkX0l/sJbQNMxLZCsjoQY4l3rE+NFPHv\nKZTOX8z53QBZvdreYfnanyxKIwpWWGpDUCrFjWfUtGZOy1fLx5JgR3Bu7F1lDbJM\nkuni9WPD50EM/rnI861RO/g3l1CGsKNuAr1gwem9BPuQWRyg7WFzwfA8Q27tzN/X\nGDyaG59ee2LEyK/fkgcYsEOCrk+dE+btJVQyVg/HINuM9JYAilfMe3jC9ymE6+ZO\nT8oXEvLuR1KwJ4HRqsjE29zPeLHvVNqH7BNKR0IC1VoeN1/wrK5FwT7PtZM2y3BI\nZ0LlRiekCBpkdgU5ztJ0tZtwrWVJzPtgsGzc0aUMl3N0LKeCZBOZW3z2xHNLqNkl\nRPPEzMjK8xYDdFVk2wL9sS037/xE0mYPC7msj9f8Nw4pe0aG6KfanFjdiGmTftnf\nngL+VkeFtjiw8ESgq2ajhZxwDiCaU9ivCG8jV7HOO/ZqGbOQYME/locullI4evEU\nzehDq7O4IbJODAEZZFlUONhYYgLGaDZFy7on7TeOwsJOE8owm0/yK8wgLxbOBFfK\nkiitdk/hUx8ErYUdNJD6dfuMbW6b4Hj8qqEkKzkg6fQZUUbgY84=\n=Qzeu\n-----END PGP SIGNATURE-----", "payload": "tree 96505e81b34959343a04bb993bad0ee8a4d80a7e\nparent a8847df167c5851caf8f465354fc3d73b7e9338c\nauthor Ezra Shaw <ezrasure@outlook.com> 1671133000 +1300\ncommitter Ezra Shaw <ezrasure@outlook.com> 1671133000 +1300\n\ndocs: rewrite E0158 error-code docs for clarity\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fded03ee2d421359e49a69b6afa7d7f65ef9f597", "html_url": "https://github.com/rust-lang/rust/commit/fded03ee2d421359e49a69b6afa7d7f65ef9f597", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fded03ee2d421359e49a69b6afa7d7f65ef9f597/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8847df167c5851caf8f465354fc3d73b7e9338c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8847df167c5851caf8f465354fc3d73b7e9338c", "html_url": "https://github.com/rust-lang/rust/commit/a8847df167c5851caf8f465354fc3d73b7e9338c"}], "stats": {"total": 53, "additions": 34, "deletions": 19}, "files": [{"sha": "03b93d925c19a3f5c0eab3202af14735ab04cfdf", "filename": "compiler/rustc_error_codes/src/error_codes/E0158.md", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fded03ee2d421359e49a69b6afa7d7f65ef9f597/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md", "raw_url": "https://github.com/rust-lang/rust/raw/fded03ee2d421359e49a69b6afa7d7f65ef9f597/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md?ref=fded03ee2d421359e49a69b6afa7d7f65ef9f597", "patch": "@@ -1,38 +1,53 @@\n-An associated const has been referenced in a pattern.\n+An associated `const`, `const` parameter or `static` has been referenced\n+in a pattern.\n \n Erroneous code example:\n \n ```compile_fail,E0158\n-enum EFoo { A, B, C, D }\n+enum Foo {\n+    One,\n+    Two\n+}\n \n-trait Foo {\n-    const X: EFoo;\n+trait Bar {\n+    const X: Foo;\n }\n \n-fn test<A: Foo>(arg: EFoo) {\n+fn test<A: Bar>(arg: Foo) {\n     match arg {\n-        A::X => { // error!\n-            println!(\"A::X\");\n-        }\n+        A::X => println!(\"A::X\"), // error: E0158: associated consts cannot be\n+                                  //        referenced in patterns\n+        Foo::Two => println!(\"Two\")\n     }\n }\n ```\n \n-`const` and `static` mean different things. A `const` is a compile-time\n-constant, an alias for a literal value. This property means you can match it\n-directly within a pattern.\n+Associated `const`s cannot be referenced in patterns because it is impossible\n+for the compiler to prove exhaustiveness (that some pattern will always match).\n+Take the above example, because Rust does type checking in the *generic*\n+method, not the *monomorphized* specific instance. So because `Bar` could have\n+theoretically infinite implementations, there's no way to always be sure that\n+`A::X` is `Foo::One`. So this code must be rejected. Even if code can be\n+proven exhaustive by a programmer, the compiler cannot currently prove this.\n \n-The `static` keyword, on the other hand, guarantees a fixed location in memory.\n-This does not always mean that the value is constant. For example, a global\n-mutex can be declared `static` as well.\n+The same holds true of `const` parameters and `static`s.\n \n-If you want to match against a `static`, consider using a guard instead:\n+If you want to match against an associated `const`, `const` parameter or\n+`static` consider using a guard instead:\n \n ```\n-static FORTY_TWO: i32 = 42;\n+trait Trait {\n+    const X: char;\n+}\n+\n+static FOO: char = 'j';\n \n-match Some(42) {\n-    Some(x) if x == FORTY_TWO => {}\n-    _ => {}\n+fn test<A: Trait, const Y: char>(arg: char) {\n+    match arg {\n+        c if c == A::X => println!(\"A::X\"),\n+        c if c == Y => println!(\"Y\"),\n+        c if c == FOO => println!(\"FOO\"),\n+        _ => ()\n+    }\n }\n ```"}]}