{"sha": "7c2abe7c85966d1722fc387da16dc5e633d37962", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMmFiZTdjODU5NjZkMTcyMmZjMzg3ZGExNmRjNWU2MzNkMzc5NjI=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-03-30T10:04:57Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-03-30T17:20:35Z"}, "message": "make shootout-k-nucleotide.rs pass official test\n\nCorrect printing (sort, new lines), reading on stdin, s/i32/uint/,\nignore-android because it reads stdin", "tree": {"sha": "9df5a44ca56752d2007d507573d23941898a8569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df5a44ca56752d2007d507573d23941898a8569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c2abe7c85966d1722fc387da16dc5e633d37962", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c2abe7c85966d1722fc387da16dc5e633d37962", "html_url": "https://github.com/rust-lang/rust/commit/7c2abe7c85966d1722fc387da16dc5e633d37962", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c2abe7c85966d1722fc387da16dc5e633d37962/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8601a3d8b91ad3b653d143307611f2f5c75617e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8601a3d8b91ad3b653d143307611f2f5c75617e", "html_url": "https://github.com/rust-lang/rust/commit/b8601a3d8b91ad3b653d143307611f2f5c75617e"}], "stats": {"total": 72, "additions": 37, "deletions": 35}, "files": [{"sha": "71d900ba03acd1d435422f4d5379a8268f208aa8", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7c2abe7c85966d1722fc387da16dc5e633d37962/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c2abe7c85966d1722fc387da16dc5e633d37962/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=7c2abe7c85966d1722fc387da16dc5e633d37962", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-android see #10393 #13206\n // ignore-pretty\n \n+use std::ascii::OwnedStrAsciiExt;\n use std::str;\n use std::slice;\n \n@@ -39,16 +41,16 @@ impl Code {\n         Code((self.hash() << 2) + (pack_symbol(c) as u64))\n     }\n \n-    fn rotate(&self, c: u8, frame: i32) -> Code {\n-        Code(self.push_char(c).hash() & ((1u64 << (2 * (frame as u64))) - 1))\n+    fn rotate(&self, c: u8, frame: uint) -> Code {\n+        Code(self.push_char(c).hash() & ((1u64 << (2 * frame)) - 1))\n     }\n \n     fn pack(string: &str) -> Code {\n         string.bytes().fold(Code(0u64), |a, b| a.push_char(b))\n     }\n \n     // FIXME: Inefficient.\n-    fn unpack(&self, frame: i32) -> ~str {\n+    fn unpack(&self, frame: uint) -> ~str {\n         let mut key = self.hash();\n         let mut result = Vec::new();\n         for _ in range(0, frame) {\n@@ -86,12 +88,12 @@ impl TableCallback for PrintCallback {\n \n struct Entry {\n     code: Code,\n-    count: i32,\n+    count: uint,\n     next: Option<~Entry>,\n }\n \n struct Table {\n-    count: i32,\n+    count: uint,\n     items: Vec<Option<~Entry>> }\n \n struct Items<'a> {\n@@ -190,10 +192,10 @@ impl<'a> Iterator<&'a Entry> for Items<'a> {\n \n fn pack_symbol(c: u8) -> u8 {\n     match c as char {\n-        'a' | 'A' => 0,\n-        'c' | 'C' => 1,\n-        'g' | 'G' => 2,\n-        't' | 'T' => 3,\n+        'A' => 0,\n+        'C' => 1,\n+        'G' => 2,\n+        'T' => 3,\n         _ => fail!(\"{}\", c as char),\n     }\n }\n@@ -202,67 +204,67 @@ fn unpack_symbol(c: u8) -> u8 {\n     TABLE[c]\n }\n \n-fn next_char<'a>(mut buf: &'a [u8]) -> &'a [u8] {\n-    loop {\n-        buf = buf.slice(1, buf.len());\n-        if buf.len() == 0 {\n-            break;\n-        }\n-        if buf[0] != (' ' as u8) && buf[0] != ('\\t' as u8) &&\n-                buf[0] != ('\\n' as u8) && buf[0] != 0 {\n-            break;\n-        }\n-    }\n-    buf\n-}\n-\n fn generate_frequencies(frequencies: &mut Table,\n                         mut input: &[u8],\n-                        frame: i32) {\n+                        frame: uint) {\n+    if input.len() < frame { return; }\n     let mut code = Code(0);\n \n     // Pull first frame.\n     for _ in range(0, frame) {\n         code = code.push_char(input[0]);\n-        input = next_char(input);\n+        input = input.slice_from(1);\n     }\n     frequencies.lookup(code, BumpCallback);\n \n     while input.len() != 0 && input[0] != ('>' as u8) {\n         code = code.rotate(input[0], frame);\n         frequencies.lookup(code, BumpCallback);\n-        input = next_char(input);\n+        input = input.slice_from(1);\n     }\n }\n \n-fn print_frequencies(frequencies: &Table, frame: i32) {\n+fn print_frequencies(frequencies: &Table, frame: uint) {\n     let mut vector = Vec::new();\n     for entry in frequencies.iter() {\n-        vector.push((entry.code, entry.count));\n+        vector.push((entry.count, entry.code));\n     }\n     vector.as_mut_slice().sort();\n \n     let mut total_count = 0;\n-    for &(_, count) in vector.iter() {\n+    for &(count, _) in vector.iter() {\n         total_count += count;\n     }\n \n-    for &(key, count) in vector.iter() {\n+    for &(count, key) in vector.iter().rev() {\n         println!(\"{} {:.3f}\",\n                  key.unpack(frame),\n                  (count as f32 * 100.0) / (total_count as f32));\n     }\n+    println!(\"\");\n }\n \n fn print_occurrences(frequencies: &mut Table, occurrence: &'static str) {\n     frequencies.lookup(Code::pack(occurrence), PrintCallback(occurrence))\n }\n \n+fn get_sequence<R: Buffer>(r: &mut R, key: &str) -> ~[u8] {\n+    let mut res = ~\"\";\n+    for l in r.lines().map(|l| l.ok().unwrap())\n+        .skip_while(|l| key != l.slice_to(key.len())).skip(1)\n+    {\n+        res.push_str(l.trim());\n+    }\n+    res.into_ascii_upper().into_bytes()\n+}\n+\n fn main() {\n-    let input = include_str!(\"shootout-k-nucleotide.data\");\n-    let pos = input.find_str(\">THREE\").unwrap();\n-    let pos2 = pos + input.slice_from(pos).find_str(\"\\n\").unwrap();\n-    let input = input.slice_from(pos2 + 1).as_bytes();\n+    let input = if std::os::getenv(\"RUST_BENCH\").is_some() {\n+        let fd = std::io::File::open(&Path::new(\"shootout-k-nucleotide.data\"));\n+        get_sequence(&mut std::io::BufferedReader::new(fd), \">THREE\")\n+    } else {\n+        get_sequence(&mut std::io::stdin(), \">THREE\")\n+    };\n \n     let mut frequencies = Table::new();\n     generate_frequencies(&mut frequencies, input, 1);\n@@ -276,7 +278,7 @@ fn main() {\n         frequencies = Table::new();\n         generate_frequencies(&mut frequencies,\n                              input,\n-                             occurrence.len() as i32);\n+                             occurrence.len());\n         print_occurrences(&mut frequencies, *occurrence);\n     }\n }"}]}