{"sha": "eb4b20288e6e8e704f5248c56601149dbf856599", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNGIyMDI4OGU2ZThlNzA0ZjUyNDhjNTY2MDExNDlkYmY4NTY1OTk=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-12-25T20:34:42Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2014-12-25T21:22:44Z"}, "message": "Map EEXIST to PathAlreadyExists error, closes #20226", "tree": {"sha": "9c73141be14bc34a51d9cb4c17c5189fbf14690b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c73141be14bc34a51d9cb4c17c5189fbf14690b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb4b20288e6e8e704f5248c56601149dbf856599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4b20288e6e8e704f5248c56601149dbf856599", "html_url": "https://github.com/rust-lang/rust/commit/eb4b20288e6e8e704f5248c56601149dbf856599", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb4b20288e6e8e704f5248c56601149dbf856599/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f673e9841f58a2196efd3b757804efa2575f8b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/f673e9841f58a2196efd3b757804efa2575f8b79", "html_url": "https://github.com/rust-lang/rust/commit/f673e9841f58a2196efd3b757804efa2575f8b79"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "10578fbb3fff0e00389293ae081d88605418b009", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eb4b20288e6e8e704f5248c56601149dbf856599/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4b20288e6e8e704f5248c56601149dbf856599/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=eb4b20288e6e8e704f5248c56601149dbf856599", "patch": "@@ -1148,6 +1148,19 @@ mod test {\n         check!(rmdir_recursive(dir));\n     }\n \n+    #[test]\n+    fn mkdir_path_already_exists_error() {\n+        use io::{IoError, PathAlreadyExists};\n+\n+        let tmpdir = tmpdir();\n+        let dir = &tmpdir.join(\"mkdir_error_twice\");\n+        check!(mkdir(dir, io::USER_RWX));\n+        match mkdir(dir, io::USER_RWX) {\n+            Err(IoError{kind:PathAlreadyExists,..}) => (),\n+            _ => assert!(false)\n+        };\n+    }\n+\n     #[test]\n     fn recursive_mkdir() {\n         let tmpdir = tmpdir();"}, {"sha": "4b7ac8ff4d3a962e3f3c33dce1e784f0cd1e93d6", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4b20288e6e8e704f5248c56601149dbf856599/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4b20288e6e8e704f5248c56601149dbf856599/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=eb4b20288e6e8e704f5248c56601149dbf856599", "patch": "@@ -109,6 +109,8 @@ pub fn decode_error(errno: i32) -> IoError {\n              \"file descriptor is not a TTY\"),\n         libc::ETIMEDOUT => (io::TimedOut, \"operation timed out\"),\n         libc::ECANCELED => (io::TimedOut, \"operation aborted\"),\n+        libc::consts::os::posix88::EEXIST =>\n+            (io::PathAlreadyExists, \"path already exists\"),\n \n         // These two constants can have the same value on some systems,\n         // but different values on others, so we can't use a match"}, {"sha": "aee98e22836be89280114a9260ebb6376e8955c3", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb4b20288e6e8e704f5248c56601149dbf856599/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb4b20288e6e8e704f5248c56601149dbf856599/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=eb4b20288e6e8e704f5248c56601149dbf856599", "patch": "@@ -121,6 +121,8 @@ pub fn decode_error(errno: i32) -> IoError {\n              \"invalid handle provided to function\"),\n         libc::ERROR_NOTHING_TO_TERMINATE =>\n             (io::InvalidInput, \"no process to kill\"),\n+        libc::ERROR_ALREADY_EXISTS =>\n+            (io::PathAlreadyExists, \"path already exists\"),\n \n         // libuv maps this error code to EISDIR. we do too. if it is found\n         // to be incorrect, we can add in some more machinery to only"}]}