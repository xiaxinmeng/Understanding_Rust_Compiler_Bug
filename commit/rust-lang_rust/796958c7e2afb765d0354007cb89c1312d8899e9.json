{"sha": "796958c7e2afb765d0354007cb89c1312d8899e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5Njk1OGM3ZTJhZmI3NjVkMDM1NDAwN2NiODljMTMxMmQ4ODk5ZTk=", "commit": {"author": {"name": "Areredify", "email": "misha-babenko@yandex.ru", "date": "2019-12-23T04:48:15Z"}, "committer": {"name": "Mikhail Babenko", "email": "misha-babenko@yandex.ru", "date": "2020-01-23T13:12:16Z"}, "message": "add `option_as_ref_deref` lint", "tree": {"sha": "f29280358e0c16b74d58d39ddd587e8059c6081b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f29280358e0c16b74d58d39ddd587e8059c6081b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796958c7e2afb765d0354007cb89c1312d8899e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796958c7e2afb765d0354007cb89c1312d8899e9", "html_url": "https://github.com/rust-lang/rust/commit/796958c7e2afb765d0354007cb89c1312d8899e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796958c7e2afb765d0354007cb89c1312d8899e9/comments", "author": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "committer": {"login": "basil-cow", "id": 25266609, "node_id": "MDQ6VXNlcjI1MjY2NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/25266609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/basil-cow", "html_url": "https://github.com/basil-cow", "followers_url": "https://api.github.com/users/basil-cow/followers", "following_url": "https://api.github.com/users/basil-cow/following{/other_user}", "gists_url": "https://api.github.com/users/basil-cow/gists{/gist_id}", "starred_url": "https://api.github.com/users/basil-cow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/basil-cow/subscriptions", "organizations_url": "https://api.github.com/users/basil-cow/orgs", "repos_url": "https://api.github.com/users/basil-cow/repos", "events_url": "https://api.github.com/users/basil-cow/events{/privacy}", "received_events_url": "https://api.github.com/users/basil-cow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94", "html_url": "https://github.com/rust-lang/rust/commit/eff3bc5e1ee9e25532f1db2bf423eb8d8458bd94"}], "stats": {"total": 297, "additions": 294, "deletions": 3}, "files": [{"sha": "78020c2dac6115915ba177da12a85db03bbe1b1d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -1227,6 +1227,7 @@ Released 2018-09-13\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n [`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n+[`option_as_ref_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref\n [`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn"}, {"sha": "8f65ff94ca8e6b0faa71f9dac93d4025b1e28760", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 348 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 349 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "0c7717c4f1956d934f5ce4796588cde00f5d9053", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -633,6 +633,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::NEW_RET_NO_SELF,\n         &methods::OK_EXPECT,\n         &methods::OPTION_AND_THEN_SOME,\n+        &methods::OPTION_AS_REF_DEREF,\n         &methods::OPTION_EXPECT_USED,\n         &methods::OPTION_MAP_OR_NONE,\n         &methods::OPTION_MAP_UNWRAP_OR,\n@@ -1219,6 +1220,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::NEW_RET_NO_SELF),\n         LintId::of(&methods::OK_EXPECT),\n         LintId::of(&methods::OPTION_AND_THEN_SOME),\n+        LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::OPTION_MAP_OR_NONE),\n         LintId::of(&methods::OR_FUN_CALL),\n         LintId::of(&methods::SEARCH_IS_SOME),\n@@ -1476,6 +1478,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FILTER_NEXT),\n         LintId::of(&methods::FLAT_MAP_IDENTITY),\n         LintId::of(&methods::OPTION_AND_THEN_SOME),\n+        LintId::of(&methods::OPTION_AS_REF_DEREF),\n         LintId::of(&methods::SEARCH_IS_SOME),\n         LintId::of(&methods::SKIP_WHILE_NEXT),\n         LintId::of(&methods::SUSPICIOUS_MAP),"}, {"sha": "ae7b1e3485f6ce24df0e0f23ef9a1501a77a1c8c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -1189,6 +1189,27 @@ declare_clippy_lint! {\n     \"`FileType::is_file` is not recommended to test for readable file type\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for usage of `_.as_ref().map(Deref::deref)` or it's aliases (such as String::as_str).\n+    ///\n+    /// **Why is this bad?** Readability, this can be written more concisely as a\n+    /// single method call.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    ///  opt.as_ref().map(String::as_str)\n+    /// ```\n+    /// Can be written as\n+    /// ```rust,ignore\n+    ///  opt.as_deref()\n+    /// ```\n+    pub OPTION_AS_REF_DEREF,\n+    complexity,\n+    \"using `as_ref().map(Deref::deref)`, which is more succinctly expressed as `as_deref()`\"\n+}\n+\n declare_lint_pass!(Methods => [\n     OPTION_UNWRAP_USED,\n     RESULT_UNWRAP_USED,\n@@ -1238,10 +1259,11 @@ declare_lint_pass!(Methods => [\n     MANUAL_SATURATING_ARITHMETIC,\n     ZST_OFFSET,\n     FILETYPE_IS_FILE,\n+    OPTION_AS_REF_DEREF,\n ]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n-    #[allow(clippy::cognitive_complexity)]\n+    #[allow(clippy::cognitive_complexity, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if in_macro(expr.span) {\n             return;\n@@ -1303,6 +1325,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Methods {\n                 check_pointer_offset(cx, expr, arg_lists[0])\n             },\n             [\"is_file\", ..] => lint_filetype_is_file(cx, expr, arg_lists[0]),\n+            [\"map\", \"as_ref\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], false),\n+            [\"map\", \"as_mut\"] => lint_option_as_ref_deref(cx, expr, arg_lists[1], arg_lists[0], true),\n             _ => {},\n         }\n \n@@ -3062,6 +3086,83 @@ fn lint_suspicious_map(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n     );\n }\n \n+/// lint use of `_.as_ref().map(Deref::deref)` for `Option`s\n+fn lint_option_as_ref_deref<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    expr: &hir::Expr<'_>,\n+    as_ref_args: &[hir::Expr<'_>],\n+    map_args: &[hir::Expr<'_>],\n+    is_mut: bool,\n+) {\n+    let option_ty = cx.tables.expr_ty(&as_ref_args[0]);\n+    if !match_type(cx, option_ty, &paths::OPTION) {\n+        return;\n+    }\n+\n+    let deref_aliases: [&[&str]; 9] = [\n+        &paths::DEREF_TRAIT_METHOD,\n+        &paths::DEREF_MUT_TRAIT_METHOD,\n+        &paths::CSTRING_AS_C_STR,\n+        &paths::OS_STRING_AS_OS_STR,\n+        &paths::PATH_BUF_AS_PATH,\n+        &paths::STRING_AS_STR,\n+        &paths::STRING_AS_MUT_STR,\n+        &paths::VEC_AS_SLICE,\n+        &paths::VEC_AS_MUT_SLICE,\n+    ];\n+\n+    let is_deref = match map_args[1].kind {\n+        hir::ExprKind::Path(ref expr_qpath) => deref_aliases.iter().any(|path| match_qpath(expr_qpath, path)),\n+        hir::ExprKind::Closure(_, _, body_id, _, _) => {\n+            let closure_body = cx.tcx.hir().body(body_id);\n+            let closure_expr = remove_blocks(&closure_body.value);\n+            if_chain! {\n+                if let hir::ExprKind::MethodCall(_, _, args) = &closure_expr.kind;\n+                if args.len() == 1;\n+                if let hir::ExprKind::Path(qpath) = &args[0].kind;\n+                if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, args[0].hir_id);\n+                if closure_body.params[0].pat.hir_id == local_id;\n+                let adj = cx.tables.expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n+                if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n+                then {\n+                    let method_did = cx.tables.type_dependent_def_id(closure_expr.hir_id).unwrap();\n+                    deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n+                } else {\n+                    false\n+                }\n+            }\n+        },\n+\n+        _ => false,\n+    };\n+\n+    if is_deref {\n+        let current_method = if is_mut {\n+            \".as_mut().map(DerefMut::deref_mut)\"\n+        } else {\n+            \".as_ref().map(Deref::deref)\"\n+        };\n+        let method_hint = if is_mut { \"as_deref_mut\" } else { \"as_deref\" };\n+        let hint = format!(\"{}.{}()\", snippet(cx, as_ref_args[0].span, \"..\"), method_hint);\n+        let suggestion = format!(\"try using {} instead\", method_hint);\n+\n+        let msg = format!(\n+            \"called `{0}` (or with one of deref aliases) on an Option value. \\\n+                        This can be done more directly by calling `{1}` instead\",\n+            current_method, hint\n+        );\n+        span_lint_and_sugg(\n+            cx,\n+            OPTION_AS_REF_DEREF,\n+            expr.span,\n+            &msg,\n+            &suggestion,\n+            hint,\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n /// Given a `Result<T, E>` type, return its error type (`E`).\n fn get_error_type<'a>(cx: &LateContext<'_, '_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n     match ty.kind {"}, {"sha": "7980a02b3baa154cdbbedeb40d5b2e9f6c407edd", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -18,8 +18,10 @@ pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING: [&str; 4] = [\"std\", \"ffi\", \"c_str\", \"CString\"];\n+pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n+pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n@@ -63,10 +65,12 @@ pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n pub const OS_STRING: [&str; 4] = [\"std\", \"ffi\", \"os_str\", \"OsString\"];\n+pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n pub const PARTIAL_ORD: [&str; 3] = [\"core\", \"cmp\", \"PartialOrd\"];\n pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n+pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n@@ -105,6 +109,8 @@ pub const STD_CONVERT_IDENTITY: [&str; 3] = [\"std\", \"convert\", \"identity\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n+pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n+pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n@@ -114,6 +120,8 @@ pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n+pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];\n+pub const VEC_AS_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_slice\"];\n pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];"}, {"sha": "5dbcb4483f2ebdf4a7af4e1190b6f9ab760be6bf", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 348] = [\n+pub const ALL_LINTS: [Lint; 349] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1470,6 +1470,13 @@ pub const ALL_LINTS: [Lint; 348] = [\n         deprecation: None,\n         module: \"methods\",\n     },\n+    Lint {\n+        name: \"option_as_ref_deref\",\n+        group: \"complexity\",\n+        desc: \"using `as_ref().map(Deref::deref)`, which is more succinctly expressed as `as_deref()`\",\n+        deprecation: None,\n+        module: \"methods\",\n+    },\n     Lint {\n         name: \"option_expect_used\",\n         group: \"restriction\","}, {"sha": "973e5b308a2c84100f5e0654d7eeb94b55d3c287", "filename": "tests/ui/option_as_ref_deref.fixed", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/tests%2Fui%2Foption_as_ref_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/tests%2Fui%2Foption_as_ref_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.fixed?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+\n+#![allow(unused_imports, clippy::redundant_clone)]\n+#![warn(clippy::option_as_ref_deref)]\n+\n+use std::ffi::{CString, OsString};\n+use std::ops::{Deref, DerefMut};\n+use std::path::PathBuf;\n+\n+fn main() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.clone().as_deref().map(str::len);\n+\n+    #[rustfmt::skip]\n+    let _ = opt.clone().as_deref()\n+        .map(str::len);\n+\n+    let _ = opt.as_deref_mut();\n+\n+    let _ = opt.as_deref();\n+    let _ = opt.as_deref();\n+    let _ = opt.as_deref_mut();\n+    let _ = opt.as_deref_mut();\n+    let _ = Some(CString::new(vec![]).unwrap()).as_deref();\n+    let _ = Some(OsString::new()).as_deref();\n+    let _ = Some(PathBuf::new()).as_deref();\n+    let _ = Some(Vec::<()>::new()).as_deref();\n+    let _ = Some(Vec::<()>::new()).as_deref_mut();\n+\n+    let _ = opt.as_deref();\n+    let _ = opt.clone().as_deref_mut().map(|x| x.len());\n+\n+    let vc = vec![String::new()];\n+    let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n+\n+    let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+}"}, {"sha": "baad85ab908398f8bacb14b6f0b297b04ca92492", "filename": "tests/ui/option_as_ref_deref.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/tests%2Fui%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/tests%2Fui%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.rs?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -0,0 +1,41 @@\n+// run-rustfix\n+\n+#![allow(unused_imports, clippy::redundant_clone)]\n+#![warn(clippy::option_as_ref_deref)]\n+\n+use std::ffi::{CString, OsString};\n+use std::ops::{Deref, DerefMut};\n+use std::path::PathBuf;\n+\n+fn main() {\n+    let mut opt = Some(String::from(\"123\"));\n+\n+    let _ = opt.clone().as_ref().map(Deref::deref).map(str::len);\n+\n+    #[rustfmt::skip]\n+    let _ = opt.clone()\n+        .as_ref().map(\n+            Deref::deref\n+        )\n+        .map(str::len);\n+\n+    let _ = opt.as_mut().map(DerefMut::deref_mut);\n+\n+    let _ = opt.as_ref().map(String::as_str);\n+    let _ = opt.as_ref().map(|x| x.as_str());\n+    let _ = opt.as_mut().map(String::as_mut_str);\n+    let _ = opt.as_mut().map(|x| x.as_mut_str());\n+    let _ = Some(CString::new(vec![]).unwrap()).as_ref().map(CString::as_c_str);\n+    let _ = Some(OsString::new()).as_ref().map(OsString::as_os_str);\n+    let _ = Some(PathBuf::new()).as_ref().map(PathBuf::as_path);\n+    let _ = Some(Vec::<()>::new()).as_ref().map(Vec::as_slice);\n+    let _ = Some(Vec::<()>::new()).as_mut().map(Vec::as_mut_slice);\n+\n+    let _ = opt.as_ref().map(|x| x.deref());\n+    let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n+\n+    let vc = vec![String::new()];\n+    let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n+\n+    let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+}"}, {"sha": "09a0fa058e6247daf2ef9142553803a6fcbfdce8", "filename": "tests/ui/option_as_ref_deref.stderr", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/796958c7e2afb765d0354007cb89c1312d8899e9/tests%2Fui%2Foption_as_ref_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/796958c7e2afb765d0354007cb89c1312d8899e9/tests%2Fui%2Foption_as_ref_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.stderr?ref=796958c7e2afb765d0354007cb89c1312d8899e9", "patch": "@@ -0,0 +1,92 @@\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:13:13\n+   |\n+LL |     let _ = opt.clone().as_ref().map(Deref::deref).map(str::len);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.clone().as_deref()`\n+   |\n+   = note: `-D clippy::option-as-ref-deref` implied by `-D warnings`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:16:13\n+   |\n+LL |       let _ = opt.clone()\n+   |  _____________^\n+LL | |         .as_ref().map(\n+LL | |             Deref::deref\n+LL | |         )\n+   | |_________^ help: try using as_deref instead: `opt.clone().as_deref()`\n+\n+error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:22:13\n+   |\n+LL |     let _ = opt.as_mut().map(DerefMut::deref_mut);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:24:13\n+   |\n+LL |     let _ = opt.as_ref().map(String::as_str);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:25:13\n+   |\n+LL |     let _ = opt.as_ref().map(|x| x.as_str());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n+\n+error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:26:13\n+   |\n+LL |     let _ = opt.as_mut().map(String::as_mut_str);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n+\n+error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:27:13\n+   |\n+LL |     let _ = opt.as_mut().map(|x| x.as_mut_str());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(CString::new(vec![]).unwrap()).as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:28:13\n+   |\n+LL |     let _ = Some(CString::new(vec![]).unwrap()).as_ref().map(CString::as_c_str);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(CString::new(vec![]).unwrap()).as_deref()`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(OsString::new()).as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:29:13\n+   |\n+LL |     let _ = Some(OsString::new()).as_ref().map(OsString::as_os_str);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(OsString::new()).as_deref()`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(PathBuf::new()).as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:30:13\n+   |\n+LL |     let _ = Some(PathBuf::new()).as_ref().map(PathBuf::as_path);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(PathBuf::new()).as_deref()`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:31:13\n+   |\n+LL |     let _ = Some(Vec::<()>::new()).as_ref().map(Vec::as_slice);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `Some(Vec::<()>::new()).as_deref()`\n+\n+error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `Some(Vec::<()>::new()).as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:32:13\n+   |\n+LL |     let _ = Some(Vec::<()>::new()).as_mut().map(Vec::as_mut_slice);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `Some(Vec::<()>::new()).as_deref_mut()`\n+\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:34:13\n+   |\n+LL |     let _ = opt.as_ref().map(|x| x.deref());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n+\n+error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.clone().as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:35:13\n+   |\n+LL |     let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.clone().as_deref_mut()`\n+\n+error: aborting due to 14 previous errors\n+"}]}