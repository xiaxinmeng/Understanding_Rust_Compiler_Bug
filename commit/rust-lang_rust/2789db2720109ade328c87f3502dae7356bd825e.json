{"sha": "2789db2720109ade328c87f3502dae7356bd825e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ODlkYjI3MjAxMDlhZGUzMjhjODdmMzUwMmRhZTczNTZiZDgyNWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-31T01:00:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-31T01:00:13Z"}, "message": "Auto merge of #43519 - zackmdavis:long_diagnostics_ever_after, r=GuillaumeGomez\n\na couple more error explanations for posterity\n\nE0436, E0595, and moving E0569 to where it belongs in the file rather than being bizarrely out of numerical order\n\nr? @GuillaumeGomez", "tree": {"sha": "dcd96d697617fcef58038d25c82ecba7ed0d63bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcd96d697617fcef58038d25c82ecba7ed0d63bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2789db2720109ade328c87f3502dae7356bd825e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2789db2720109ade328c87f3502dae7356bd825e", "html_url": "https://github.com/rust-lang/rust/commit/2789db2720109ade328c87f3502dae7356bd825e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2789db2720109ade328c87f3502dae7356bd825e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15266f9a1bb72738901275e8ad9233a69a5bc54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/15266f9a1bb72738901275e8ad9233a69a5bc54f", "html_url": "https://github.com/rust-lang/rust/commit/15266f9a1bb72738901275e8ad9233a69a5bc54f"}, {"sha": "7dab9812c4f76aac6e442ff053c34c076b76643d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dab9812c4f76aac6e442ff053c34c076b76643d", "html_url": "https://github.com/rust-lang/rust/commit/7dab9812c4f76aac6e442ff053c34c076b76643d"}], "stats": {"total": 112, "additions": 90, "deletions": 22}, "files": [{"sha": "fea9d0d6f1326cafd2ca6df1c44ad14abf24ae47", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2789db2720109ade328c87f3502dae7356bd825e/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789db2720109ade328c87f3502dae7356bd825e/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=2789db2720109ade328c87f3502dae7356bd825e", "patch": "@@ -1132,6 +1132,24 @@ fn main() {\n ```\n \"##,\n \n+E0595: r##\"\n+Closures cannot mutate immutable captured variables.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0595\n+let x = 3; // error: closure cannot assign to immutable local variable `x`\n+let mut c = || { x += 1 };\n+```\n+\n+Make the variable binding mutable:\n+\n+```\n+let mut x = 3; // ok!\n+let mut c = || { x += 1 };\n+```\n+\"##,\n+\n E0596: r##\"\n This error occurs because you tried to mutably borrow a non-mutable variable.\n \n@@ -1189,6 +1207,5 @@ register_diagnostics! {\n //    E0385, // {} in an aliasable location\n     E0524, // two closures require unique access to `..` at the same time\n     E0594, // cannot assign to {}\n-    E0595, // closure cannot assign to {}\n     E0598, // lifetime of {} is too short to guarantee its contents can be...\n }"}, {"sha": "3037e8d4a16022fda56d28d647e9422169cbc5c0", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 72, "deletions": 21, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/2789db2720109ade328c87f3502dae7356bd825e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2789db2720109ade328c87f3502dae7356bd825e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=2789db2720109ade328c87f3502dae7356bd825e", "patch": "@@ -2631,26 +2631,6 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n-E0569: r##\"\n-If an impl has a generic parameter with the `#[may_dangle]` attribute, then\n-that impl must be declared as an `unsafe impl. For example:\n-\n-```compile_fail,E0569\n-#![feature(generic_param_attrs)]\n-#![feature(dropck_eyepatch)]\n-\n-struct Foo<X>(X);\n-impl<#[may_dangle] X> Drop for Foo<X> {\n-    fn drop(&mut self) { }\n-}\n-```\n-\n-In this example, we are asserting that the destructor for `Foo` will not\n-access any data of type `X`, and require this assertion to be true for\n-overall safety in our program. The compiler does not currently attempt to\n-verify this assertion; therefore we must tag this `impl` as unsafe.\n-\"##,\n-\n E0318: r##\"\n Default impls for a trait must be located in the same crate where the trait was\n defined. For more information see the [opt-in builtin traits RFC][RFC 19].\n@@ -3457,6 +3437,56 @@ impl Foo for i32 {\n ```\n \"##,\n \n+E0436: r##\"\n+The functional record update syntax is only allowed for structs. (Struct-like\n+enum variants don't qualify, for example.)\n+\n+Erroneous code example:\n+\n+```compile_fail,E0436\n+enum PublicationFrequency {\n+    Weekly,\n+    SemiMonthly { days: (u8, u8), annual_special: bool },\n+}\n+\n+fn one_up_competitor(competitor_frequency: PublicationFrequency)\n+                     -> PublicationFrequency {\n+    match competitor_frequency {\n+        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {\n+            days: (1, 15), annual_special: false\n+        },\n+        c @ PublicationFrequency::SemiMonthly{ .. } =>\n+            PublicationFrequency::SemiMonthly {\n+                annual_special: true, ..c // error: functional record update\n+                                          //        syntax requires a struct\n+        }\n+    }\n+}\n+```\n+\n+Rewrite the expression without functional record update syntax:\n+\n+```\n+enum PublicationFrequency {\n+    Weekly,\n+    SemiMonthly { days: (u8, u8), annual_special: bool },\n+}\n+\n+fn one_up_competitor(competitor_frequency: PublicationFrequency)\n+                     -> PublicationFrequency {\n+    match competitor_frequency {\n+        PublicationFrequency::Weekly => PublicationFrequency::SemiMonthly {\n+            days: (1, 15), annual_special: false\n+        },\n+        PublicationFrequency::SemiMonthly{ days, .. } =>\n+            PublicationFrequency::SemiMonthly {\n+                days, annual_special: true // ok!\n+        }\n+    }\n+}\n+```\n+\"##,\n+\n E0439: r##\"\n The length of the platform-intrinsic function `simd_shuffle`\n wasn't specified. Erroneous code example:\n@@ -3926,6 +3956,28 @@ See [RFC 1522] for more details.\n [RFC 1522]: https://github.com/rust-lang/rfcs/blob/master/text/1522-conservative-impl-trait.md\n \"##,\n \n+E0569: r##\"\n+If an impl has a generic parameter with the `#[may_dangle]` attribute, then\n+that impl must be declared as an `unsafe impl.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0569\n+#![feature(generic_param_attrs)]\n+#![feature(dropck_eyepatch)]\n+\n+struct Foo<X>(X);\n+impl<#[may_dangle] X> Drop for Foo<X> {\n+    fn drop(&mut self) { }\n+}\n+```\n+\n+In this example, we are asserting that the destructor for `Foo` will not\n+access any data of type `X`, and require this assertion to be true for\n+overall safety in our program. The compiler does not currently attempt to\n+verify this assertion; therefore we must tag this `impl` as unsafe.\n+\"##,\n+\n E0570: r##\"\n The requested ABI is unsupported by the current target.\n \n@@ -4655,7 +4707,6 @@ register_diagnostics! {\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0436, // functional record update requires a struct\n     E0521, // redundant default implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n     E0563, // cannot determine a type for this `impl Trait`: {}"}]}