{"sha": "f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Mjc5ODQ1NGM4YTdmOWYyYzNlODdlMGE5MTNiM2JkNzliNmQyZWQ=", "commit": {"author": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-05-25T16:54:39Z"}, "committer": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-07-06T16:23:17Z"}, "message": "Lint (x * x + y * y).sqrt() => x.hypot(y)", "tree": {"sha": "1a3ef12b5dc8864c90279423ded8552070cac332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3ef12b5dc8864c90279423ded8552070cac332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "html_url": "https://github.com/rust-lang/rust/commit/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/comments", "author": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6f1af75d71fcf8e029b78142370e7563798c503", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f1af75d71fcf8e029b78142370e7563798c503", "html_url": "https://github.com/rust-lang/rust/commit/a6f1af75d71fcf8e029b78142370e7563798c503"}], "stats": {"total": 183, "additions": 177, "deletions": 6}, "files": [{"sha": "3b2e46a9a85296e7a74cb58757f141d8e9b5e8db", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 73, "deletions": 2, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -2,10 +2,10 @@ use crate::consts::{\n     constant, constant_simple, Constant,\n     Constant::{Int, F32, F64},\n };\n-use crate::utils::{higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n+use crate::utils::{get_parent_expr, higher, numeric_literal, span_lint_and_sugg, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n+use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -296,6 +296,17 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n fn check_powi(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     // Check argument\n     if let Some((value, _)) = constant(cx, cx.tables, &args[1]) {\n+        // TODO: need more specific check. this is too wide. remember also to include tests\n+        if let Some(parent) = get_parent_expr(cx, expr) {\n+            if let Some(grandparent) = get_parent_expr(cx, parent) {\n+                if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args) = grandparent.kind {\n+                    if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+\n         let (lint, help, suggestion) = match value {\n             Int(2) => (\n                 IMPRECISE_FLOPS,\n@@ -317,6 +328,57 @@ fn check_powi(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     }\n }\n \n+fn detect_hypot(cx: &LateContext<'_, '_>, args: &[Expr<'_>]) -> Option<String> {\n+    if let ExprKind::Binary(\n+        Spanned {\n+            node: BinOpKind::Add, ..\n+        },\n+        ref add_lhs,\n+        ref add_rhs,\n+    ) = args[0].kind\n+    {\n+        // check if expression of the form x * x + y * y\n+        if_chain! {\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref lmul_lhs, ref lmul_rhs) = add_lhs.kind;\n+            if let ExprKind::Binary(Spanned { node: BinOpKind::Mul, .. }, ref rmul_lhs, ref rmul_rhs) = add_rhs.kind;\n+            if are_exprs_equal(cx, lmul_lhs, lmul_rhs);\n+            if are_exprs_equal(cx, rmul_lhs, rmul_rhs);\n+            then {\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &lmul_lhs, \"..\"), Sugg::hir(cx, &rmul_lhs, \"..\")));\n+            }\n+        }\n+\n+        // check if expression of the form x.powi(2) + y.powi(2)\n+        if_chain! {\n+            if let ExprKind::MethodCall(PathSegment { ident: lmethod_name, .. }, ref _lspan, ref largs) = add_lhs.kind;\n+            if let ExprKind::MethodCall(PathSegment { ident: rmethod_name, .. }, ref _rspan, ref rargs) = add_rhs.kind;\n+            if lmethod_name.as_str() == \"powi\" && rmethod_name.as_str() == \"powi\";\n+            if let Some((lvalue, _)) = constant(cx, cx.tables, &largs[1]);\n+            if let Some((rvalue, _)) = constant(cx, cx.tables, &rargs[1]);\n+            if Int(2) == lvalue && Int(2) == rvalue;\n+            then {\n+                return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\")));\n+            }\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn check_hypot(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+    if let Some(message) = detect_hypot(cx, args) {\n+        span_lint_and_sugg(\n+            cx,\n+            IMPRECISE_FLOPS,\n+            expr.span,\n+            \"hypotenuse can be computed more accurately\",\n+            \"consider using\",\n+            message,\n+            Applicability::MachineApplicable,\n+        );\n+    }\n+}\n+\n // TODO: Lint expressions of the form `x.exp() - y` where y > 1\n // and suggest usage of `x.exp_m1() - (y - 1)` instead\n fn check_expm1(cx: &LateContext<'_>, expr: &Expr<'_>) {\n@@ -368,6 +430,14 @@ fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n         rhs,\n     ) = &expr.kind\n     {\n+        if let Some(parent) = get_parent_expr(cx, expr) {\n+            if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args) = parent.kind {\n+                if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n+                    return;\n+                }\n+            }\n+        }\n+\n         let (recv, arg1, arg2) = if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, lhs) {\n             (inner_lhs, inner_rhs, rhs)\n         } else if let Some((inner_lhs, inner_rhs)) = is_float_mul_expr(cx, rhs) {\n@@ -514,6 +584,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n                     \"log\" => check_log_base(cx, expr, args),\n                     \"powf\" => check_powf(cx, expr, args),\n                     \"powi\" => check_powi(cx, expr, args),\n+                    \"sqrt\" => check_hypot(cx, expr, args),\n                     _ => {},\n                 }\n             }"}, {"sha": "f90695bc3fe7c1e7e7390504f37dcbfa38e460a3", "filename": "tests/ui/floating_point_hypot.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_hypot.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_hypot.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.fixed?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 4f32;\n+    let _ = x.hypot(y);\n+    let _ = (x + 1f32).hypot(y);\n+    let _ = x.hypot(y);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.mul_add(x, y * y).sqrt();\n+    let _ = x.mul_add(4f32, y * y).sqrt();\n+}"}, {"sha": "e7b048e262fa3708c390a9d62726c5c1c071e52f", "filename": "tests/ui/floating_point_hypot.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_hypot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_hypot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.rs?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 4f32;\n+    let _ = (x * x + y * y).sqrt();\n+    let _ = ((x + 1f32) * (x + 1f32) + y * y).sqrt();\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.mul_add(x, y * y).sqrt();\n+    let _ = (x * 4f32 + y * y).sqrt();\n+}"}, {"sha": "fe1dfc7a4510d3c27bc14451fb0515b48c175c37", "filename": "tests/ui/floating_point_hypot.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_hypot.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_hypot.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_hypot.stderr?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -0,0 +1,30 @@\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:7:13\n+   |\n+LL |     let _ = (x * x + y * y).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+   |\n+   = note: `-D clippy::imprecise-flops` implied by `-D warnings`\n+\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:8:13\n+   |\n+LL |     let _ = ((x + 1f32) * (x + 1f32) + y * y).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 1f32).hypot(y)`\n+\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_hypot.rs:9:13\n+   |\n+LL |     let _ = (x.powi(2) + y.powi(2)).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_hypot.rs:12:13\n+   |\n+LL |     let _ = (x * 4f32 + y * y).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider using: `x.mul_add(4f32, y * y)`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "911700bab0040e2e4a33439c537b73cbbeb69721", "filename": "tests/ui/floating_point_mul_add.fixed", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_mul_add.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_mul_add.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.fixed?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -18,4 +18,9 @@ fn main() {\n \n     let _ = a.mul_add(b, c).mul_add(a.mul_add(b, c), a.mul_add(b, c)) + c;\n     let _ = 1234.567_f64.mul_add(45.67834_f64, 0.0004_f64);\n+\n+    let _ = a.mul_add(a, b).sqrt();\n+\n+    // Cases where the lint shouldn't be applied\n+    let _ = (a * a + b * b).sqrt();\n }"}, {"sha": "d202385fc8ae76a0ee0f169852b1d410b3a76f77", "filename": "tests/ui/floating_point_mul_add.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_mul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_mul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.rs?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -18,4 +18,9 @@ fn main() {\n \n     let _ = a.mul_add(b, c) * a.mul_add(b, c) + a.mul_add(b, c) + c;\n     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n+\n+    let _ = (a * a + b).sqrt();\n+\n+    // Cases where the lint shouldn't be applied\n+    let _ = (a * a + b * b).sqrt();\n }"}, {"sha": "ac8d0c0cae068cf87162396380ce510e075d3477", "filename": "tests/ui/floating_point_mul_add.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_mul_add.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_mul_add.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_mul_add.stderr?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -54,5 +54,11 @@ error: multiply and add expressions can be calculated more efficiently and accur\n LL |     let _ = 1234.567_f64 * 45.67834_f64 + 0.0004_f64;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1234.567_f64.mul_add(45.67834_f64, 0.0004_f64)`\n \n-error: aborting due to 9 previous errors\n+error: multiply and add expressions can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_mul_add.rs:22:13\n+   |\n+LL |     let _ = (a * a + b).sqrt();\n+   |             ^^^^^^^^^^^ help: consider using: `a.mul_add(a, b)`\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "98766e68aaf6bbf3909c4f619599ab92f91252aa", "filename": "tests/ui/floating_point_powi.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_powi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_powi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.fixed?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -1,12 +1,17 @@\n // run-rustfix\n-#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+#![warn(clippy::imprecise_flops)]\n \n fn main() {\n     let one = 1;\n     let x = 3f32;\n     let _ = x * x;\n     let _ = x * x;\n+\n+    let y = 4f32;\n+    let _ = (x * x + y).sqrt();\n+    let _ = (x + y * y).sqrt();\n     // Cases where the lint shouldn't be applied\n     let _ = x.powi(3);\n     let _ = x.powi(one + 1);\n+    let _ = x.hypot(y);\n }"}, {"sha": "3c4b636a3d8455330146aed44f4e539b688014eb", "filename": "tests/ui/floating_point_powi.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_powi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_powi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.rs?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -1,12 +1,17 @@\n // run-rustfix\n-#![warn(clippy::suboptimal_flops, clippy::imprecise_flops)]\n+#![warn(clippy::imprecise_flops)]\n \n fn main() {\n     let one = 1;\n     let x = 3f32;\n     let _ = x.powi(2);\n     let _ = x.powi(1 + 1);\n+\n+    let y = 4f32;\n+    let _ = (x.powi(2) + y).sqrt();\n+    let _ = (x + y.powi(2)).sqrt();\n     // Cases where the lint shouldn't be applied\n     let _ = x.powi(3);\n     let _ = x.powi(one + 1);\n+    let _ = (x.powi(2) + y.powi(2)).sqrt();\n }"}, {"sha": "f370e24bf052269b11263a1c8ace42f693dff5f8", "filename": "tests/ui/floating_point_powi.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_powi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed/tests%2Fui%2Ffloating_point_powi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powi.stderr?ref=f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "patch": "@@ -12,5 +12,23 @@ error: square can be computed more accurately\n LL |     let _ = x.powi(1 + 1);\n    |             ^^^^^^^^^^^^^ help: consider using: `x * x`\n \n-error: aborting due to 2 previous errors\n+error: square can be computed more accurately\n+  --> $DIR/floating_point_powi.rs:11:14\n+   |\n+LL |     let _ = (x.powi(2) + y).sqrt();\n+   |              ^^^^^^^^^ help: consider using: `x * x`\n+\n+error: square can be computed more accurately\n+  --> $DIR/floating_point_powi.rs:12:18\n+   |\n+LL |     let _ = (x + y.powi(2)).sqrt();\n+   |                  ^^^^^^^^^ help: consider using: `y * y`\n+\n+error: hypotenuse can be computed more accurately\n+  --> $DIR/floating_point_powi.rs:16:13\n+   |\n+LL |     let _ = (x.powi(2) + y.powi(2)).sqrt();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.hypot(y)`\n+\n+error: aborting due to 5 previous errors\n "}]}