{"sha": "2f78dd15a6f29894e5876582cc84e8a5faa539c1", "node_id": "C_kwDOAAsO6NoAKDJmNzhkZDE1YTZmMjk4OTRlNTg3NjU4MmNjODRlOGE1ZmFhNTM5YzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-27T23:08:21Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-27T23:08:44Z"}, "message": "Suggest calling trait objects and parameters too, when possible", "tree": {"sha": "0118bd5d9890bef3fc6000dc3366f8edc738f33f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0118bd5d9890bef3fc6000dc3366f8edc738f33f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f78dd15a6f29894e5876582cc84e8a5faa539c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f78dd15a6f29894e5876582cc84e8a5faa539c1", "html_url": "https://github.com/rust-lang/rust/commit/2f78dd15a6f29894e5876582cc84e8a5faa539c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f78dd15a6f29894e5876582cc84e8a5faa539c1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef0482d11ec42d50611beca2dbf551094d5025c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef0482d11ec42d50611beca2dbf551094d5025c", "html_url": "https://github.com/rust-lang/rust/commit/cef0482d11ec42d50611beca2dbf551094d5025c"}], "stats": {"total": 184, "additions": 151, "deletions": 33}, "files": [{"sha": "4eb0f045d7791df9546fd064cb03b1087fea7cfa", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -2,6 +2,7 @@ use super::FnCtxt;\n use crate::astconv::AstConv;\n use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n \n+use hir::def_id::DefId;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_errors::{Applicability, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n@@ -75,38 +76,75 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         found: Ty<'tcx>,\n         can_satisfy: impl FnOnce(Ty<'tcx>) -> bool,\n     ) -> bool {\n+        enum DefIdOrName {\n+            DefId(DefId),\n+            Name(&'static str),\n+        }\n         // Autoderef is useful here because sometimes we box callables, etc.\n-        let Some((def_id, output, inputs)) = self.autoderef(expr.span, found).silence_errors().find_map(|(found, _)| {\n+        let Some((def_id_or_name, output, inputs)) = self.autoderef(expr.span, found).silence_errors().find_map(|(found, _)| {\n             match *found.kind() {\n-                ty::FnPtr(fn_sig) => Some((None, fn_sig.output(), fn_sig.inputs().skip_binder().len())),\n+                ty::FnPtr(fn_sig) =>\n+                    Some((DefIdOrName::Name(\"function pointer\"), fn_sig.output(), fn_sig.inputs().skip_binder().len())),\n                 ty::FnDef(def_id, _) => {\n                     let fn_sig = found.fn_sig(self.tcx);\n-                    Some((Some(def_id), fn_sig.output(), fn_sig.inputs().skip_binder().len()))\n+                    Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().skip_binder().len()))\n                 }\n                 ty::Closure(def_id, substs) => {\n                     let fn_sig = substs.as_closure().sig();\n-                    Some((Some(def_id), fn_sig.output(), fn_sig.inputs().skip_binder().len() - 1))\n+                    Some((DefIdOrName::DefId(def_id), fn_sig.output(), fn_sig.inputs().skip_binder().len() - 1))\n                 }\n                 ty::Opaque(def_id, substs) => {\n-                    let sig = self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n+                    self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n                         if let ty::PredicateKind::Projection(proj) = pred.kind().skip_binder()\n                         && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n                         // args tuple will always be substs[1]\n                         && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n                         {\n                             Some((\n+                                DefIdOrName::DefId(def_id),\n                                 pred.kind().rebind(proj.term.ty().unwrap()),\n                                 args.len(),\n                             ))\n                         } else {\n                             None\n                         }\n-                    });\n-                    if let Some((output, inputs)) = sig {\n-                        Some((Some(def_id), output, inputs))\n-                    } else {\n-                        None\n-                    }\n+                    })\n+                }\n+                ty::Dynamic(data, _) => {\n+                    data.iter().find_map(|pred| {\n+                        if let ty::ExistentialPredicate::Projection(proj) = pred.skip_binder()\n+                        && Some(proj.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                        // for existential projection, substs are shifted over by 1\n+                        && let ty::Tuple(args) = proj.substs.type_at(0).kind()\n+                        {\n+                            Some((\n+                                DefIdOrName::Name(\"trait object\"),\n+                                pred.rebind(proj.term.ty().unwrap()),\n+                                args.len(),\n+                            ))\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                }\n+                ty::Param(param) => {\n+                    let def_id = self.tcx.generics_of(self.body_id.owner).type_param(&param, self.tcx).def_id;\n+                    self.tcx.predicates_of(self.body_id.owner).predicates.iter().find_map(|(pred, _)| {\n+                        if let ty::PredicateKind::Projection(proj) = pred.kind().skip_binder()\n+                        && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                        && proj.projection_ty.self_ty() == found\n+                        // args tuple will always be substs[1]\n+                        && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n+                        {\n+                            Some((\n+                                DefIdOrName::DefId(def_id),\n+                                pred.kind().rebind(proj.term.ty().unwrap()),\n+                                args.len(),\n+                            ))\n+                        } else {\n+                            None\n+                        }\n+                    })\n                 }\n                 _ => None,\n             }\n@@ -128,12 +166,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => (\"...\".to_string(), Applicability::HasPlaceholders),\n             };\n \n-            let msg = match def_id.map(|def_id| self.tcx.def_kind(def_id)) {\n-                Some(DefKind::Fn) => \"call this function\",\n-                Some(DefKind::Closure | DefKind::OpaqueTy) => \"call this closure\",\n-                Some(DefKind::Ctor(CtorOf::Struct, _)) => \"instantiate this tuple struct\",\n-                Some(DefKind::Ctor(CtorOf::Variant, _)) => \"instantiate this tuple variant\",\n-                _ => \"call this function\",\n+            let msg = match def_id_or_name {\n+                DefIdOrName::DefId(def_id) => match self.tcx.def_kind(def_id) {\n+                    DefKind::Ctor(CtorOf::Struct, _) => \"instantiate this tuple struct\".to_string(),\n+                    DefKind::Ctor(CtorOf::Variant, _) => {\n+                        \"instantiate this tuple variant\".to_string()\n+                    }\n+                    kind => format!(\"call this {}\", kind.descr(def_id)),\n+                },\n+                DefIdOrName::Name(name) => format!(\"call this {name}\"),\n             };\n \n             let sugg = match expr.kind {"}, {"sha": "3f180cf4f1f891ca81f235cb4114acd427a24697", "filename": "src/test/ui/associated-types/substs-ppaux.normal.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.normal.stderr?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -11,7 +11,7 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n    |                                                                         ++\n@@ -29,7 +29,7 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n    |                                                                          ++\n@@ -47,7 +47,7 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n    |                                                        ++"}, {"sha": "16dd29de2c5438d9a7f695f7656e94d88fc17bf7", "filename": "src/test/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -11,7 +11,7 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n    |                                                                         ++\n@@ -29,7 +29,7 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n    |                                                                          ++\n@@ -47,7 +47,7 @@ LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n    |                                                        ++"}, {"sha": "1d5e0a859a6da3883db7642de998017e8e239ee2", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -8,6 +8,10 @@ LL |     let _: () = Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>;\n    |\n    = note: expected unit type `()`\n                  found struct `Box<dyn FnOnce(isize)>`\n+help: use parentheses to call this trait object\n+   |\n+LL |     let _: () = (Box::new(|_: isize| {}) as Box<dyn FnOnce(isize)>)(_);\n+   |                 +                                                 ++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:10:17\n@@ -19,6 +23,10 @@ LL |     let _: () = Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>\n    |\n    = note: expected unit type `()`\n                  found struct `Box<dyn Fn(isize, isize)>`\n+help: use parentheses to call this trait object\n+   |\n+LL |     let _: () = (Box::new(|_: isize, isize| {}) as Box<dyn Fn(isize, isize)>)(_, _);\n+   |                 +                                                           +++++++\n \n error[E0308]: mismatched types\n   --> $DIR/fn-trait-formatting.rs:14:17"}, {"sha": "c10a856d83ba8758303350e2694ff012f8445c3b", "filename": "src/test/ui/impl-trait/suggest-calling-rpit-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.stderr?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -11,7 +11,7 @@ LL | fn opaque() -> impl Fn() -> i32 {\n    |\n    = note:     expected type `i32`\n            found opaque type `impl Fn() -> i32`\n-help: use parentheses to call this closure\n+help: use parentheses to call this opaque type\n    |\n LL |     opaque()()\n    |             ++"}, {"sha": "25ced84dd3783e4bed2cc6a842d4f1ef55212142", "filename": "src/test/ui/suggestions/call-on-missing.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-missing.rs?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -16,4 +16,24 @@ fn main() {\n     foo.i;\n     //~^ ERROR no field `i`\n     //~| HELP use parentheses to call this function\n+\n+    let callable = Box::new(|| Foo { i: 1 }) as Box<dyn Fn() -> Foo>;\n+\n+    callable.bar();\n+    //~^ ERROR no method named `bar`\n+    //~| HELP use parentheses to call this trait object\n+\n+    callable.i;\n+    //~^ ERROR no field `i`\n+    //~| HELP use parentheses to call this trait object\n+}\n+\n+fn type_param<T: Fn() -> Foo>(t: T) {\n+    t.bar();\n+    //~^ ERROR no method named `bar`\n+    //~| HELP use parentheses to call this type parameter\n+\n+    t.i;\n+    //~^ ERROR no field `i`\n+    //~| HELP use parentheses to call this type parameter\n }"}, {"sha": "ca9abc7e906891513b16bc1d9e8a94eb0d5d41d2", "filename": "src/test/ui/suggestions/call-on-missing.stderr", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-missing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-missing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcall-on-missing.stderr?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -20,7 +20,56 @@ help: use parentheses to call this function\n LL |     foo().i;\n    |        ++\n \n-error: aborting due to 2 previous errors\n+error[E0599]: no method named `bar` found for struct `Box<dyn Fn() -> Foo>` in the current scope\n+  --> $DIR/call-on-missing.rs:22:14\n+   |\n+LL |     callable.bar();\n+   |              ^^^ method not found in `Box<dyn Fn() -> Foo>`\n+   |\n+help: use parentheses to call this trait object\n+   |\n+LL |     callable().bar();\n+   |             ++\n+\n+error[E0609]: no field `i` on type `Box<dyn Fn() -> Foo>`\n+  --> $DIR/call-on-missing.rs:26:14\n+   |\n+LL |     callable.i;\n+   |              ^ unknown field\n+   |\n+help: use parentheses to call this trait object\n+   |\n+LL |     callable().i;\n+   |             ++\n+\n+error[E0599]: no method named `bar` found for type parameter `T` in the current scope\n+  --> $DIR/call-on-missing.rs:32:7\n+   |\n+LL | fn type_param<T: Fn() -> Foo>(t: T) {\n+   |               - method `bar` not found for this type parameter\n+LL |     t.bar();\n+   |       ^^^ method not found in `T`\n+   |\n+help: use parentheses to call this type parameter\n+   |\n+LL |     t().bar();\n+   |      ++\n+\n+error[E0609]: no field `i` on type `T`\n+  --> $DIR/call-on-missing.rs:36:7\n+   |\n+LL | fn type_param<T: Fn() -> Foo>(t: T) {\n+   |               - type parameter 'T' declared here\n+...\n+LL |     t.i;\n+   |       ^\n+   |\n+help: use parentheses to call this type parameter\n+   |\n+LL |     t().i;\n+   |      ++\n+\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0599, E0609.\n For more information about an error, try `rustc --explain E0599`."}, {"sha": "ba710bfa746ae9bbf5247f53be727da8c241476f", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2f78dd15a6f29894e5876582cc84e8a5faa539c1/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=2f78dd15a6f29894e5876582cc84e8a5faa539c1", "patch": "@@ -103,7 +103,7 @@ LL |     let _: usize = T::baz;\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<_ as T>::baz}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = T::baz(_, _);\n    |                          ++++++\n@@ -121,7 +121,7 @@ LL |     let _: usize = T::bat;\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<_ as T>::bat}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = T::bat(_);\n    |                          +++\n@@ -157,7 +157,7 @@ LL |     let _: usize = X::baz;\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<X as T>::baz}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::baz(_, _);\n    |                          ++++++\n@@ -175,7 +175,7 @@ LL |     let _: usize = X::bat;\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bat}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::bat(_);\n    |                          +++\n@@ -193,7 +193,7 @@ LL |     let _: usize = X::bax;\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bax}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::bax(_);\n    |                          +++\n@@ -211,7 +211,7 @@ LL |     let _: usize = X::bach;\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bach}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::bach(_);\n    |                           +++\n@@ -229,7 +229,7 @@ LL |     let _: usize = X::ban;\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::ban(_);\n    |                          +++\n@@ -247,7 +247,7 @@ LL |     let _: usize = X::bal;\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n-help: use parentheses to call this function\n+help: use parentheses to call this associated function\n    |\n LL |     let _: usize = X::bal(_);\n    |                          +++"}]}