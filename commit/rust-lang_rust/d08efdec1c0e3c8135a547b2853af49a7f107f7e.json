{"sha": "d08efdec1c0e3c8135a547b2853af49a7f107f7e", "node_id": "C_kwDOAAsO6NoAKGQwOGVmZGVjMWMwZTNjODEzNWE1NDdiMjg1M2FmNDlhN2YxMDdmN2U", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-05-17T22:36:39Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-05-19T23:23:28Z"}, "message": "Borrow guard patterns for the body of the guard", "tree": {"sha": "5bdeda55400cdd98c6efbb6c5385f7a3fe7393bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bdeda55400cdd98c6efbb6c5385f7a3fe7393bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08efdec1c0e3c8135a547b2853af49a7f107f7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08efdec1c0e3c8135a547b2853af49a7f107f7e", "html_url": "https://github.com/rust-lang/rust/commit/d08efdec1c0e3c8135a547b2853af49a7f107f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08efdec1c0e3c8135a547b2853af49a7f107f7e/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db4c0277de996531c2e794ba16bb6746af65fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db4c0277de996531c2e794ba16bb6746af65fef", "html_url": "https://github.com/rust-lang/rust/commit/7db4c0277de996531c2e794ba16bb6746af65fef"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "5bd6632640f3b90dacf3e4b2acd8fb63fc5ca227", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d08efdec1c0e3c8135a547b2853af49a7f107f7e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08efdec1c0e3c8135a547b2853af49a7f107f7e/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d08efdec1c0e3c8135a547b2853af49a7f107f7e", "patch": "@@ -1323,6 +1323,20 @@ pub enum Guard<'hir> {\n     IfLet(&'hir Let<'hir>),\n }\n \n+impl<'hir> Guard<'hir> {\n+    /// Returns the body of the guard\n+    ///\n+    /// In other words, returns the e in either of the following:\n+    ///\n+    /// - `if e`\n+    /// - `if let x = e`\n+    pub fn body(&self) -> &'hir Expr<'hir> {\n+        match self {\n+            Guard::If(e) | Guard::IfLet(_, e) => e,\n+        }\n+    }\n+}\n+\n #[derive(Debug, HashStable_Generic)]\n pub struct ExprField<'hir> {\n     #[stable_hasher(ignore)]"}, {"sha": "d530504489a5e6cd33671ad449e8b4e399da3cb6", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d08efdec1c0e3c8135a547b2853af49a7f107f7e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08efdec1c0e3c8135a547b2853af49a7f107f7e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=d08efdec1c0e3c8135a547b2853af49a7f107f7e", "patch": "@@ -285,14 +285,13 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         self.visit_pat(pat);\n         if let Some(ref g) = guard {\n             self.guard_bindings.push(<_>::default());\n-            ArmPatCollector {\n-                guard_bindings_set: &mut self.guard_bindings_set,\n-                guard_bindings: self\n-                    .guard_bindings\n-                    .last_mut()\n-                    .expect(\"should have pushed at least one earlier\"),\n+            {\n+                ArmPatCollector {\n+                    interior_visitor: self,\n+                    scope: Scope { id: g.body().hir_id.local_id, data: ScopeData::Node },\n+                }\n+                .visit_pat(pat);\n             }\n-            .visit_pat(pat);\n \n             match g {\n                 Guard::If(ref e) => {\n@@ -459,17 +458,31 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n     }\n }\n \n-struct ArmPatCollector<'a> {\n-    guard_bindings_set: &'a mut HirIdSet,\n-    guard_bindings: &'a mut SmallVec<[HirId; 4]>,\n+struct ArmPatCollector<'a, 'b, 'tcx> {\n+    interior_visitor: &'a mut InteriorVisitor<'b, 'tcx>,\n+    scope: Scope,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for ArmPatCollector<'a> {\n+impl<'a, 'b, 'tcx> Visitor<'tcx> for ArmPatCollector<'a, 'b, 'tcx> {\n     fn visit_pat(&mut self, pat: &'tcx Pat<'tcx>) {\n         intravisit::walk_pat(self, pat);\n         if let PatKind::Binding(_, id, ..) = pat.kind {\n-            self.guard_bindings.push(id);\n-            self.guard_bindings_set.insert(id);\n+            self.interior_visitor\n+                .guard_bindings\n+                .last_mut()\n+                .expect(\"should have pushed at least one earlier\")\n+                .push(id);\n+            self.interior_visitor.guard_bindings_set.insert(id);\n+\n+            let ty = self.interior_visitor.fcx.typeck_results.borrow().node_type(id);\n+            let ty = self.interior_visitor.fcx.tcx.mk_ref(\n+                // Use `ReErased` as `resolve_interior` is going to replace all the regions anyway.\n+                self.interior_visitor.fcx.tcx.mk_region(ty::ReErased),\n+                ty::TypeAndMut { ty, mutbl: hir::Mutability::Not },\n+            );\n+            // FIXME: use the right span\n+            let span = rustc_span::DUMMY_SP;\n+            self.interior_visitor.record(ty, id, Some(self.scope), None, span, true);\n         }\n     }\n }"}, {"sha": "ad44adb68c69cb4cf55d1c4b0b5c5455016cf1ba", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d08efdec1c0e3c8135a547b2853af49a7f107f7e/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08efdec1c0e3c8135a547b2853af49a7f107f7e/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=d08efdec1c0e3c8135a547b2853af49a7f107f7e", "patch": "@@ -17,6 +17,7 @@ use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::FakeReadCause;\n use rustc_middle::ty::{self, adjustment, AdtKind, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n+use ty::BorrowKind::ImmBorrow;\n \n use crate::mem_categorization as mc;\n \n@@ -621,7 +622,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             FakeReadCause::ForMatchedPlace(closure_def_id),\n             discr_place.hir_id,\n         );\n-        self.walk_pat(discr_place, arm.pat);\n+        self.walk_pat(discr_place, arm.pat, arm.guard.is_some());\n \n         if let Some(hir::Guard::If(e)) = arm.guard {\n             self.consume_expr(e)\n@@ -645,12 +646,17 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             FakeReadCause::ForLet(closure_def_id),\n             discr_place.hir_id,\n         );\n-        self.walk_pat(discr_place, pat);\n+        self.walk_pat(discr_place, pat, false);\n     }\n \n     /// The core driver for walking a pattern\n-    fn walk_pat(&mut self, discr_place: &PlaceWithHirId<'tcx>, pat: &hir::Pat<'_>) {\n-        debug!(\"walk_pat(discr_place={:?}, pat={:?})\", discr_place, pat);\n+    fn walk_pat(\n+        &mut self,\n+        discr_place: &PlaceWithHirId<'tcx>,\n+        pat: &hir::Pat<'_>,\n+        has_guard: bool,\n+    ) {\n+        debug!(\"walk_pat(discr_place={:?}, pat={:?}, has_guard={:?})\", discr_place, pat, has_guard);\n \n         let tcx = self.tcx();\n         let ExprUseVisitor { ref mc, body_owner: _, ref mut delegate } = *self;\n@@ -671,6 +677,13 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                         delegate.bind(binding_place, binding_place.hir_id);\n                     }\n \n+                    // Subtle: MIR desugaring introduces immutable borrows for each pattern\n+                    // binding when lowering pattern guards to ensure that the guard does not\n+                    // modify the scrutinee.\n+                    if has_guard {\n+                        delegate.borrow(place, discr_place.hir_id, ImmBorrow);\n+                    }\n+\n                     // It is also a borrow or copy/move of the value being matched.\n                     // In a cases of pattern like `let pat = upvar`, don't use the span\n                     // of the pattern, as this just looks confusing, instead use the span"}, {"sha": "646365e4359016eb958bc796b92512318fadc07a", "filename": "src/test/ui/generator/drop-tracking-yielding-in-match-guards.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d08efdec1c0e3c8135a547b2853af49a7f107f7e/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08efdec1c0e3c8135a547b2853af49a7f107f7e/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdrop-tracking-yielding-in-match-guards.rs?ref=d08efdec1c0e3c8135a547b2853af49a7f107f7e", "patch": "@@ -2,15 +2,6 @@\n // edition:2018\n // compile-flags: -Zdrop-tracking\n \n-// This test is derived from\n-// https://github.com/rust-lang/rust/issues/72651#issuecomment-668720468\n-\n-// This test demonstrates that, in `async fn g()`,\n-// indeed a temporary borrow `y` from `x` is live\n-// while `f().await` is being evaluated.\n-// Thus, `&'_ u8` should be included in type signature\n-// of the underlying generator.\n-\n #![feature(generators)]\n \n fn main() {"}]}