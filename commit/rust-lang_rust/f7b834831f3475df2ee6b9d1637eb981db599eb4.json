{"sha": "f7b834831f3475df2ee6b9d1637eb981db599eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjgzNDgzMWYzNDc1ZGYyZWU2YjlkMTYzN2ViOTgxZGI1OTllYjQ=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-17T22:23:57Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-02-17T22:23:57Z"}, "message": "remove useless ?s (clippy::needless_question_marks)\n\nExample code:\n```\nfn opts() -> Option<String> {\n    let s: Option<String> = Some(String::new());\n    Some(s?) // this can just be \"s\"\n}\n```", "tree": {"sha": "a32167c01f45f739369c0932a5f34cc7b6d746c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a32167c01f45f739369c0932a5f34cc7b6d746c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b834831f3475df2ee6b9d1637eb981db599eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b834831f3475df2ee6b9d1637eb981db599eb4", "html_url": "https://github.com/rust-lang/rust/commit/f7b834831f3475df2ee6b9d1637eb981db599eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b834831f3475df2ee6b9d1637eb981db599eb4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ef21063f0c0fd5b973bfa8cb88c0b70982da977", "html_url": "https://github.com/rust-lang/rust/commit/5ef21063f0c0fd5b973bfa8cb88c0b70982da977"}], "stats": {"total": 29, "additions": 11, "deletions": 18}, "files": [{"sha": "2ec9b9e0be4a81ef810a8231d18b5fc103380fd8", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=f7b834831f3475df2ee6b9d1637eb981db599eb4", "patch": "@@ -507,12 +507,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         // Unify the original value for each variable with the value\n         // taken from `query_response` (after applying `result_subst`).\n-        Ok(self.unify_canonical_vars(\n-            cause,\n-            param_env,\n-            original_values,\n-            substituted_query_response,\n-        )?)\n+        self.unify_canonical_vars(cause, param_env, original_values, substituted_query_response)\n     }\n \n     /// Converts the region constraints resulting from a query into an"}, {"sha": "73ad87a9ef219149776dcc5fd76c6c60507f781c", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=f7b834831f3475df2ee6b9d1637eb981db599eb4", "patch": "@@ -253,7 +253,7 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for SubstsRef<'tcx> {\n     fn decode(decoder: &mut D) -> Result<Self, D::Error> {\n         let len = decoder.read_usize()?;\n         let tcx = decoder.tcx();\n-        Ok(tcx.mk_substs((0..len).map(|_| Decodable::decode(decoder)))?)\n+        tcx.mk_substs((0..len).map(|_| Decodable::decode(decoder)))\n     }\n }\n \n@@ -314,7 +314,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::AdtDef {\n impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::List<Ty<'tcx>> {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        Ok(decoder.tcx().mk_type_list((0..len).map(|_| Decodable::decode(decoder)))?)\n+        decoder.tcx().mk_type_list((0..len).map(|_| Decodable::decode(decoder)))\n     }\n }\n \n@@ -323,9 +323,7 @@ impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D>\n {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let len = decoder.read_usize()?;\n-        Ok(decoder\n-            .tcx()\n-            .mk_poly_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n+        decoder.tcx().mk_poly_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))\n     }\n }\n "}, {"sha": "64604b6459f27ff9ec823f078ff8c43ed0672ef6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f7b834831f3475df2ee6b9d1637eb981db599eb4", "patch": "@@ -607,7 +607,7 @@ pub trait PrettyPrinter<'tcx>:\n                     return Ok(self);\n                 }\n \n-                return Ok(with_no_queries(|| {\n+                return with_no_queries(|| {\n                     let def_key = self.tcx().def_key(def_id);\n                     if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n                         p!(write(\"{}\", name));\n@@ -649,7 +649,7 @@ pub trait PrettyPrinter<'tcx>:\n                         p!(\" Sized\");\n                     }\n                     Ok(self)\n-                })?);\n+                });\n             }\n             ty::Str => p!(\"str\"),\n             ty::Generator(did, substs, movability) => {"}, {"sha": "315e5d63d2bb3f4e77641a4c719b5af051e1295a", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=f7b834831f3475df2ee6b9d1637eb981db599eb4", "patch": "@@ -154,7 +154,7 @@ pub fn relate_substs<R: TypeRelation<'tcx>>(\n         relation.relate_with_variance(variance, a, b)\n     });\n \n-    Ok(tcx.mk_substs(params)?)\n+    tcx.mk_substs(params)\n }\n \n impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n@@ -647,7 +647,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::Binder<ty::ExistentialPredicate<'\n                 _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),\n             }\n         });\n-        Ok(tcx.mk_poly_existential_predicates(v)?)\n+        tcx.mk_poly_existential_predicates(v)\n     }\n }\n "}, {"sha": "50603bdd45b40b873d31cb39ddd7fd2052155eeb", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=f7b834831f3475df2ee6b9d1637eb981db599eb4", "patch": "@@ -118,7 +118,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .get_raw(vtable_slot.alloc_id)?\n             .read_ptr_sized(self, vtable_slot)?\n             .check_init()?;\n-        Ok(self.memory.get_fn(fn_ptr)?)\n+        self.memory.get_fn(fn_ptr)\n     }\n \n     /// Returns the drop fn instance as well as the actual dynamic type."}, {"sha": "68356ce73aacd2866c48a704a272e25c4566ae9e", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=f7b834831f3475df2ee6b9d1637eb981db599eb4", "patch": "@@ -43,7 +43,7 @@ where\n             info!(\"fully_perform({:?})\", self);\n         }\n \n-        scrape_region_constraints(infcx, || Ok((self.closure)(infcx)?))\n+        scrape_region_constraints(infcx, || (self.closure)(infcx))\n     }\n }\n "}, {"sha": "16c3dd696abeea1482ad7f5330b646f176ab2dbe", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b834831f3475df2ee6b9d1637eb981db599eb4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=f7b834831f3475df2ee6b9d1637eb981db599eb4", "patch": "@@ -1141,7 +1141,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             let trait_def_ids: FxHashSet<DefId> = param\n                                 .bounds\n                                 .iter()\n-                                .filter_map(|bound| Some(bound.trait_ref()?.trait_def_id()?))\n+                                .filter_map(|bound| bound.trait_ref()?.trait_def_id())\n                                 .collect();\n                             if !candidates.iter().any(|t| trait_def_ids.contains(&t.def_id)) {\n                                 err.span_suggestions("}]}