{"sha": "d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "node_id": "C_kwDOAAsO6NoAKGQzYWQ1MWI0OGY4MzMyOWZhYzBjZDhhOWYxMjUzZjMxNDY2MTNjMWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T20:53:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-25T20:53:48Z"}, "message": "Auto merge of #94369 - matthiaskrgr:rollup-qtripm2, r=matthiaskrgr\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #93850 (Don't ICE when an extern static is too big for the current architecture)\n - #94154 (Wire up unstable rustc --check-cfg to rustdoc)\n - #94353 (Fix debug_assert in unused lint pass)\n - #94366 (Add missing item to release notes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c5813af1a6166dad30570fc626b9cbff0365f44c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5813af1a6166dad30570fc626b9cbff0365f44c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "html_url": "https://github.com/rust-lang/rust/commit/d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d981633ed6669c6f7b1cb46d1d1a7282e281ca8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d981633ed6669c6f7b1cb46d1d1a7282e281ca8e", "html_url": "https://github.com/rust-lang/rust/commit/d981633ed6669c6f7b1cb46d1d1a7282e281ca8e"}, {"sha": "152af5a422a27cada359ade60847d8792d32e552", "url": "https://api.github.com/repos/rust-lang/rust/commits/152af5a422a27cada359ade60847d8792d32e552", "html_url": "https://github.com/rust-lang/rust/commit/152af5a422a27cada359ade60847d8792d32e552"}], "stats": {"total": 200, "additions": 182, "deletions": 18}, "files": [{"sha": "971a63b240f3e06e4bd1cfe96e7288e25ae982f4", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -58,6 +58,7 @@ Stabilized APIs\n - [`NonZeroU32::is_power_of_two`][is_power_of_two32]\n - [`NonZeroU64::is_power_of_two`][is_power_of_two64]\n - [`NonZeroU128::is_power_of_two`][is_power_of_two128]\n+- [`NonZeroUsize::is_power_of_two`][is_power_of_two_usize]\n - [`DoubleEndedIterator for ToLowercase`][lowercase]\n - [`DoubleEndedIterator for ToUppercase`][uppercase]\n - [`TryFrom<&mut [T]> for [T; N]`][tryfrom_ref_arr]\n@@ -178,6 +179,7 @@ and related tools.\n [is_power_of_two32]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU32.html#method.is_power_of_two\n [is_power_of_two64]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU64.html#method.is_power_of_two\n [is_power_of_two128]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroU128.html#method.is_power_of_two\n+[is_power_of_two_usize]: https://doc.rust-lang.org/stable/core/num/struct.NonZeroUsize.html#method.is_power_of_two\n [stdarch/1266]: https://github.com/rust-lang/stdarch/pull/1266\n \n Version 1.58.1 (2022-01-19)"}, {"sha": "16d222f68a3211e3a56a1435bbb5aab94fdbd68f", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -240,17 +240,17 @@ impl<'tcx> LateLintPass<'tcx> for UnusedResults {\n                 }\n                 ty::Tuple(ref tys) => {\n                     let mut has_emitted = false;\n-                    let spans = if let hir::ExprKind::Tup(comps) = &expr.kind {\n+                    let comps = if let hir::ExprKind::Tup(comps) = expr.kind {\n                         debug_assert_eq!(comps.len(), tys.len());\n-                        comps.iter().map(|e| e.span).collect()\n+                        comps\n                     } else {\n-                        vec![]\n+                        &[]\n                     };\n                     for (i, ty) in tys.iter().enumerate() {\n                         let descr_post = &format!(\" in tuple element {}\", i);\n-                        let span = *spans.get(i).unwrap_or(&span);\n-                        if check_must_use_ty(cx, ty, expr, span, descr_pre, descr_post, plural_len)\n-                        {\n+                        let e = comps.get(i).unwrap_or(expr);\n+                        let span = e.span;\n+                        if check_must_use_ty(cx, ty, e, span, descr_pre, descr_post, plural_len) {\n                             has_emitted = true;\n                         }\n                     }"}, {"sha": "8ed87497f1b32e817efc8037f54dbb22e3a009ca", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::layout::MAX_SIMD_LANES;\n+use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, OpaqueTypeKey, ParamEnv, Ty, TyCtxt};\n@@ -417,10 +417,31 @@ fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Spa\n     // have UB during initialization if they are uninhabited, but there also seems to be no good\n     // reason to allow any statics to be uninhabited.\n     let ty = tcx.type_of(def_id);\n-    let Ok(layout) = tcx.layout_of(ParamEnv::reveal_all().and(ty)) else {\n+    let layout = match tcx.layout_of(ParamEnv::reveal_all().and(ty)) {\n+        Ok(l) => l,\n+        // Foreign statics that overflow their allowed size should emit an error\n+        Err(LayoutError::SizeOverflow(_))\n+            if {\n+                let node = tcx.hir().get_by_def_id(def_id);\n+                matches!(\n+                    node,\n+                    hir::Node::ForeignItem(hir::ForeignItem {\n+                        kind: hir::ForeignItemKind::Static(..),\n+                        ..\n+                    })\n+                )\n+            } =>\n+        {\n+            tcx.sess\n+                .struct_span_err(span, \"extern static is too large for the current architecture\")\n+                .emit();\n+            return;\n+        }\n         // Generic statics are rejected, but we still reach this case.\n-        tcx.sess.delay_span_bug(span, \"generic static must be rejected\");\n-        return;\n+        Err(e) => {\n+            tcx.sess.delay_span_bug(span, &e.to_string());\n+            return;\n+        }\n     };\n     if layout.abi.is_uninhabited() {\n         tcx.struct_span_lint_hir("}, {"sha": "141d5d2d2b2d0fec9a8802eedaee1cf7d5cf3919", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -512,3 +512,17 @@ crate being documented (`foobar`) and a path to output the calls\n \n To scrape examples from test code, e.g. functions marked `#[test]`, then\n add the `--scrape-tests` flag.\n+\n+### `--check-cfg`: check configuration flags\n+\n+This flag accepts the same values as `rustc --check-cfg`, and uses it to check configuration flags.\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs -Z unstable-options \\\n+    --check-cfg='names()' --check-cfg='values(feature, \"foo\", \"bar\")'\n+```\n+\n+The example above check every well known names (`target_os`, `doc`, `test`, ... via `names()`)\n+and check the values of `feature`: `foo` and `bar`."}, {"sha": "93f90b90e0a0d6db6afffa3b2c0db72d6d690321", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -80,6 +80,8 @@ crate struct Options {\n     crate extern_strs: Vec<String>,\n     /// List of `cfg` flags to hand to the compiler. Always includes `rustdoc`.\n     crate cfgs: Vec<String>,\n+    /// List of check cfg flags to hand to the compiler.\n+    crate check_cfgs: Vec<String>,\n     /// Codegen options to hand to the compiler.\n     crate codegen_options: CodegenOptions,\n     /// Codegen options strings to hand to the compiler.\n@@ -172,6 +174,7 @@ impl fmt::Debug for Options {\n             .field(\"libs\", &self.libs)\n             .field(\"externs\", &FmtExterns(&self.externs))\n             .field(\"cfgs\", &self.cfgs)\n+            .field(\"check-cfgs\", &self.check_cfgs)\n             .field(\"codegen_options\", &\"...\")\n             .field(\"debugging_options\", &\"...\")\n             .field(\"target\", &self.target)\n@@ -506,6 +509,7 @@ impl Options {\n         };\n \n         let cfgs = matches.opt_strs(\"cfg\");\n+        let check_cfgs = matches.opt_strs(\"check-cfg\");\n \n         let extension_css = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n \n@@ -677,6 +681,7 @@ impl Options {\n             externs,\n             extern_strs,\n             cfgs,\n+            check_cfgs,\n             codegen_options,\n             codegen_options_strs,\n             debugging_opts,"}, {"sha": "2b82575f71083626af0af14977bd5418b0957761", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -192,6 +192,7 @@ crate fn create_config(\n         libs,\n         externs,\n         mut cfgs,\n+        check_cfgs,\n         codegen_options,\n         debugging_opts,\n         target,\n@@ -219,6 +220,7 @@ crate fn create_config(\n         // these are definitely not part of rustdoc, but we want to warn on them anyway.\n         rustc_lint::builtin::RENAMED_AND_REMOVED_LINTS.name.to_string(),\n         rustc_lint::builtin::UNKNOWN_LINTS.name.to_string(),\n+        rustc_lint::builtin::UNEXPECTED_CFGS.name.to_string(),\n     ];\n     lints_to_show.extend(crate::lint::RUSTDOC_LINTS.iter().map(|lint| lint.name.to_string()));\n \n@@ -253,7 +255,7 @@ crate fn create_config(\n     interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n-        crate_check_cfg: interface::parse_check_cfg(vec![]),\n+        crate_check_cfg: interface::parse_check_cfg(check_cfgs),\n         input,\n         input_path: cpath,\n         output_file: None,"}, {"sha": "5b6c7626239bcea3a41cb58524231fde34f4f753", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -91,7 +91,7 @@ crate fn run(options: RustdocOptions) -> Result<(), ErrorReported> {\n     let config = interface::Config {\n         opts: sessopts,\n         crate_cfg: interface::parse_cfgspecs(cfgs),\n-        crate_check_cfg: interface::parse_check_cfg(vec![]),\n+        crate_check_cfg: interface::parse_check_cfg(options.check_cfgs.clone()),\n         input,\n         input_path: None,\n         output_file: None,\n@@ -321,6 +321,12 @@ fn run_test(\n     for cfg in &rustdoc_options.cfgs {\n         compiler.arg(\"--cfg\").arg(&cfg);\n     }\n+    if !rustdoc_options.check_cfgs.is_empty() {\n+        compiler.arg(\"-Z\").arg(\"unstable-options\");\n+        for check_cfg in &rustdoc_options.check_cfgs {\n+            compiler.arg(\"--check-cfg\").arg(&check_cfg);\n+        }\n+    }\n     if let Some(sysroot) = rustdoc_options.maybe_sysroot {\n         compiler.arg(\"--sysroot\").arg(sysroot);\n     }"}, {"sha": "5c8a8fb80f1f422c90dc289d8d6a2e3f86852d17", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -260,6 +260,7 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optmulti(\"L\", \"library-path\", \"directory to add to crate search path\", \"DIR\")\n         }),\n         stable(\"cfg\", |o| o.optmulti(\"\", \"cfg\", \"pass a --cfg to rustc\", \"\")),\n+        unstable(\"check-cfg\", |o| o.optmulti(\"\", \"check-cfg\", \"pass a --check-cfg to rustc\", \"\")),\n         stable(\"extern\", |o| o.optmulti(\"\", \"extern\", \"pass an --extern to rustc\", \"NAME[=PATH]\")),\n         unstable(\"extern-html-root-url\", |o| {\n             o.optmulti("}, {"sha": "626cc838704b3673682b36ece4ac27d64ea42213", "filename": "src/test/rustdoc-ui/check-cfg-test.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// compile-flags: --test --nocapture --check-cfg=values(feature,\"test\") -Z unstable-options\n+// normalize-stderr-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+\n+/// The doctest will produce a warning because feature invalid is unexpected\n+/// ```\n+/// #[cfg(feature = \"invalid\")]\n+/// assert!(false);\n+/// ```\n+pub struct Foo;"}, {"sha": "dc25205da772eec3f7982cf682c88c5cb177c697", "filename": "src/test/rustdoc-ui/check-cfg-test.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stderr?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,11 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/check-cfg-test.rs:9:7\n+   |\n+LL | #[cfg(feature = \"invalid\")]\n+   |       ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: expected values for `feature` are: test\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b7db49bcfa87a425f0a4ac9105f6cfa2783b4ad4", "filename": "src/test/rustdoc-ui/check-cfg-test.stdout", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-test.stdout?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,6 @@\n+\n+running 1 test\n+test $DIR/check-cfg-test.rs - Foo (line 8) ... ok\n+\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "5c500ce6ce08219f169606e045c5d34cffe12301", "filename": "src/test/rustdoc-ui/check-cfg-unstable.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-unstable.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,2 @@\n+// check-fail\n+// compile-flags: --check-cfg=names()"}, {"sha": "9b27c2bc058a73760e18439b943d0d8bd1b74577", "filename": "src/test/rustdoc-ui/check-cfg-unstable.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg-unstable.stderr?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,2 @@\n+error: the `-Z unstable-options` flag must also be passed to enable the flag `check-cfg`\n+"}, {"sha": "fa8789ad3ede4c9a72a2f73fe140a6a2a37e249d", "filename": "src/test/rustdoc-ui/check-cfg.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+// compile-flags: --check-cfg=names() -Z unstable-options\n+\n+/// uniz is nor a builtin nor pass as arguments so is unexpected\n+#[cfg(uniz)]\n+//~^ WARNING unexpected `cfg` condition name\n+pub struct Bar;"}, {"sha": "1db8e1d91c249cf84290b21531d0993182b23f47", "filename": "src/test/rustdoc-ui/check-cfg.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcheck-cfg.stderr?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/check-cfg.rs:5:7\n+   |\n+LL | #[cfg(uniz)]\n+   |       ^^^^ help: did you mean: `unix`\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "30a0c445466861415415e9363acf5f6538a09647", "filename": "src/test/ui/extern/extern-static-size-overflow.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,43 @@\n+#[repr(C)]\n+struct ReallyBig {\n+    _a: [u8; usize::MAX],\n+}\n+\n+// The limit for \"too big for the current architecture\" is dependent on the target pointer size\n+// however it's artifically limited on 64 bits\n+// logic copied from rustc_target::abi::TargetDataLayout::obj_size_bound()\n+const fn max_size() -> usize {\n+    #[cfg(target_pointer_width = \"16\")]\n+    {\n+        1 << 15\n+    }\n+\n+    #[cfg(target_pointer_width = \"32\")]\n+    {\n+        1 << 31\n+    }\n+\n+    #[cfg(target_pointer_width = \"64\")]\n+    {\n+        1 << 47\n+    }\n+\n+    #[cfg(not(any(\n+        target_pointer_width = \"16\",\n+        target_pointer_width = \"32\",\n+        target_pointer_width = \"64\"\n+    )))]\n+    {\n+        isize::MAX as usize\n+    }\n+}\n+\n+extern \"C\" {\n+    static FOO: [u8; 1];\n+    static BAR: [u8; max_size() - 1];\n+    static BAZ: [u8; max_size()]; //~ ERROR extern static is too large\n+    static UWU: [usize; usize::MAX]; //~ ERROR extern static is too large\n+    static A: ReallyBig; //~ ERROR extern static is too large\n+}\n+\n+fn main() {}"}, {"sha": "f5173feec75d490ab1722b14c966a41774ea892c", "filename": "src/test/ui/extern/extern-static-size-overflow.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -0,0 +1,20 @@\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:38:5\n+   |\n+LL |     static BAZ: [u8; max_size()];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:39:5\n+   |\n+LL |     static UWU: [usize; usize::MAX];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:40:5\n+   |\n+LL |     static A: ReallyBig;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "45a5317fccc6e7c508a901736ebc049da5e531fb", "filename": "src/test/ui/lint/unused/must_use-array.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-array.stderr?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -32,7 +32,7 @@ error: unused array of boxed `T` trait objects in tuple element 1 that must be u\n   --> $DIR/must_use-array.rs:43:5\n    |\n LL |     impl_array();\n-   |     ^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n \n error: unused array of arrays of arrays of `S` that must be used\n   --> $DIR/must_use-array.rs:45:5"}, {"sha": "a42eb8841789dfb0f0071a4e1d2d65b833b877a1", "filename": "src/test/ui/lint/unused/must_use-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-trait.stderr?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -26,13 +26,13 @@ error: unused boxed `Critical` trait object in tuple element 1 that must be used\n   --> $DIR/must_use-trait.rs:37:5\n    |\n LL |     get_critical_tuple();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: unused implementer of `Critical` in tuple element 2 that must be used\n   --> $DIR/must_use-trait.rs:37:5\n    |\n LL |     get_critical_tuple();\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "e5709a5f0af5a1e04e0acf3bdf37f88fcb3ac36c", "filename": "src/test/ui/lint/unused/must_use-tuple.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3ad51b48f83329fac0cd8a9f1253f3146613c1c/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fmust_use-tuple.stderr?ref=d3ad51b48f83329fac0cd8a9f1253f3146613c1c", "patch": "@@ -31,15 +31,15 @@ error: unused `Result` in tuple element 0 that must be used\n   --> $DIR/must_use-tuple.rs:14:5\n    |\n LL |     foo();\n-   |     ^^^^^^\n+   |     ^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n \n error: unused `Result` in tuple element 0 that must be used\n-  --> $DIR/must_use-tuple.rs:16:6\n+  --> $DIR/must_use-tuple.rs:16:7\n    |\n LL |     ((Err::<(), ()>(()), ()), ());\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |       ^^^^^^^^^^^^^^^^^\n    |\n    = note: this `Result` may be an `Err` variant, which should be handled\n "}]}