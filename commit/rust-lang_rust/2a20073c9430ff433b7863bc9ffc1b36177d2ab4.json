{"sha": "2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMjAwNzNjOTQzMGZmNDMzYjc4NjNiYzlmZmMxYjM2MTc3ZDJhYjQ=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-15T06:21:01Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-15T06:21:01Z"}, "message": "Prohibit parenthesized params in bounds etc.", "tree": {"sha": "6a76bee7bce9793641666ad19fa0fc5344146d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a76bee7bce9793641666ad19fa0fc5344146d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZGUjNAAoJEHynqF4EmoLouH4P/24eS1PMFOpOdJZpu9dCfu38\nnCz8sa+0KVgvRhyp/IPLNheTdVjo1mV2u6Gb4ioGynOy8x5rDwVBZWmAMbTDRekc\nu4JOVL1DCcm64bp41OQtbbBKlwi921A2dpSKlMoJh9pmEy146ZiN+nNtAxeb4dmg\nAotBxEJnMP6bpQpgQuHTnJFftJpavCMArUavH5S9Ns7QmCZCOkPA3A9Ok9CWMkf4\n/cEMMaxHwIpEHliooNslW6XC2p+VHYsRY9mv+lEn/F0ikzGIzxnF06gWHP0u2f03\n6CbsrMMhoMTZd+Y5sBRSKiFmZNUOw2SUdNae7CALZObmwWbJBPIa6B8KNeuCZR+c\npwyCwwD/gaQqBvh7xu8HvyIJv6R+FzKDp/Ttjom35U5OlaJJ91y/dWsF4MkW6eCW\nAivAHeImFCVlob4ubKeYXH8BfIB1d1UX0GM1TxUVabTR7KaMT0mWnLGKW2P90XdI\n7w7sv1zexczM7NqHFdq8Kg5kIotqnSqaeBJyZSiRETCjE+TQcSHSw8Uh6yCACbS6\nuLEKPlDzFUNWpL/qegeo8hR2bwizD37Rmn/Xd4cYxTkK03xdAO/7+uZh/BJIH5KS\nhwhx1M8zZvTorsL11zgSd+1zgSw0VvyY6KMj3j3vQloQYS5kdFtBl+uQyp9A6x0N\nC8k2y0735gwetyCEL0UZ\n=gMbj\n-----END PGP SIGNATURE-----", "payload": "tree 6a76bee7bce9793641666ad19fa0fc5344146d2e\nparent 63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4\nauthor Masaki Hara <ackie.h.gmai@gmail.com> 1494829261 +0900\ncommitter Masaki Hara <ackie.h.gmai@gmail.com> 1494829261 +0900\n\nProhibit parenthesized params in bounds etc.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "html_url": "https://github.com/rust-lang/rust/commit/2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4", "html_url": "https://github.com/rust-lang/rust/commit/63ecd6aa0f2c8a6807528d8bdf5eb30211b3fcd4"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "d8a3ebe063a4560f3ec56e8321bd74591c2d4ca5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "patch": "@@ -372,6 +372,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         self_ty: Ty<'tcx>)\n         -> ty::TraitRef<'tcx>\n     {\n+        self.prohibit_type_params(trait_ref.path.segments.split_last().unwrap().1);\n+\n         let trait_def_id = self.trait_def_id(trait_ref);\n         self.ast_path_to_mono_trait_ref(trait_ref.path.span,\n                                         trait_def_id,\n@@ -404,6 +406,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         debug!(\"ast_path_to_poly_trait_ref({:?}, def_id={:?})\", trait_ref, trait_def_id);\n \n+        self.prohibit_type_params(trait_ref.path.segments.split_last().unwrap().1);\n+\n         let (substs, assoc_bindings) =\n             self.create_substs_for_ast_trait_ref(trait_ref.path.span,\n                                                  trait_def_id,\n@@ -625,6 +629,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                                         dummy_self,\n                                                         &mut projection_bounds);\n \n+        for trait_bound in trait_bounds[1..].iter() {\n+            // Sanity check for non-principal trait bounds\n+            self.instantiate_poly_trait_ref(trait_bound,\n+                                            dummy_self,\n+                                            &mut vec![]);\n+        }\n+\n         let (auto_traits, trait_bounds) = split_auto_traits(tcx, &trait_bounds[1..]);\n \n         if !trait_bounds.is_empty() {"}, {"sha": "05594cff8a02e2c1cb26894c2cd9c742534fe21d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "patch": "@@ -4495,7 +4495,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     (&data.lifetimes[..], &data.types[..], data.infer_types, &data.bindings[..])\n                 }\n                 Some(&hir::ParenthesizedParameters(_)) => {\n-                    span_bug!(span, \"parenthesized parameters cannot appear in ExprPath\");\n+                    AstConv::prohibit_parenthesized_params(self, &segment.as_ref().unwrap().0);\n+                    (&[][..], &[][..], true, &[][..])\n                 }\n                 None => (&[][..], &[][..], true, &[][..])\n             }"}, {"sha": "80113d3b4ec73e15c200f1ca091138b0b6200f8a", "filename": "src/test/compile-fail/issue-32995-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs?ref=2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+\n+fn main() {\n+    { fn f<X: ::std::marker()::Send>() {} }\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+\n+    { fn f() -> impl ::std::marker()::Send { } }\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+}\n+\n+#[derive(Clone)]\n+struct X;\n+\n+impl ::std::marker()::Copy for X {}\n+//~^ ERROR parenthesized parameters may only be used with a trait"}, {"sha": "d38bec455134e896ae7a4870ee164db6ef43f27d", "filename": "src/test/compile-fail/issue-32995.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a20073c9430ff433b7863bc9ffc1b36177d2ab4/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs?ref=2a20073c9430ff433b7863bc9ffc1b36177d2ab4", "patch": "@@ -17,6 +17,22 @@ fn main() {\n \n     let b: ::std::boxed()::Box<_> = Box::new(1);\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+\n+    macro_rules! pathexpr {\n+        ($p:path) => { $p }\n+    }\n+\n+    let p = pathexpr!(::std::str()::from_utf8)(b\"foo\").unwrap();\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+\n+    let p = pathexpr!(::std::str::from_utf8())(b\"foo\").unwrap();\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+\n+    let o : Box<::std::marker()::Send> = Box::new(1);\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n+\n+    let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n+    //~^ ERROR parenthesized parameters may only be used with a trait\n }\n \n fn foo<X:Default>() {"}]}