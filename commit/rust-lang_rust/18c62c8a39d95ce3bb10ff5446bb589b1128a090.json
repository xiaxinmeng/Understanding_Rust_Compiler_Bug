{"sha": "18c62c8a39d95ce3bb10ff5446bb589b1128a090", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YzYyYzhhMzlkOTVjZTNiYjEwZmY1NDQ2YmI1ODliMTEyOGEwOTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-29T10:29:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-29T10:29:33Z"}, "message": "Merge #6019\n\n6019: Remove make::path_from_text r=matklad a=Veykril\n\nThis removes the `make::path_from_text` function, which according to a note should've been private. I removed it since it didn't really serve a purpose as it was simply wrapping `make::ast_from_text`.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f829779003722fb50082b5aa55a725aed841d449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f829779003722fb50082b5aa55a725aed841d449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c62c8a39d95ce3bb10ff5446bb589b1128a090", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfcwyNCRBK7hj4Ov3rIwAAdHIIAJmVWygqKEvP/Q16ATSTn6GR\nYAhKfaZxaF616nOB3GBzu/mv5d1a4ck3TxUBHWWmM4pcRzkXqohvKCswyHF0CNr7\nKvWI9kPvtGZDPd01c+XQdWovYdj55gzhdf1CEG5vTRqqT9/RIzXvSfu+EbpcM17Z\n6I1M7c/Ulnd2CupRShzagWraRWtO+DekAMC01Yx1OyTqVCsHwQ+xqjJwe2kTXC98\nA1ftlezPU7aRQKYscPnd1JQY7YBQmR6VzaUhFOvScJofeQf7ZhefFqQBCBmBGDKx\n7PyXBwOOS0P0e5PMg7YlhmENpJSeFJ9cYn8DjAV9RfHXq2lYVFp9mlD9lYGVLZk=\n=X9Y5\n-----END PGP SIGNATURE-----\n", "payload": "tree f829779003722fb50082b5aa55a725aed841d449\nparent 7b674f9ab491fdd01278c21f539e65239518e296\nparent f2ae412ccfa96c4bde42f0b004594c4d6fa54634\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601375373 +0000\ncommitter GitHub <noreply@github.com> 1601375373 +0000\n\nMerge #6019\n\n6019: Remove make::path_from_text r=matklad a=Veykril\n\nThis removes the `make::path_from_text` function, which according to a note should've been private. I removed it since it didn't really serve a purpose as it was simply wrapping `make::ast_from_text`.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c62c8a39d95ce3bb10ff5446bb589b1128a090", "html_url": "https://github.com/rust-lang/rust/commit/18c62c8a39d95ce3bb10ff5446bb589b1128a090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c62c8a39d95ce3bb10ff5446bb589b1128a090/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b674f9ab491fdd01278c21f539e65239518e296", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b674f9ab491fdd01278c21f539e65239518e296", "html_url": "https://github.com/rust-lang/rust/commit/7b674f9ab491fdd01278c21f539e65239518e296"}, {"sha": "f2ae412ccfa96c4bde42f0b004594c4d6fa54634", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ae412ccfa96c4bde42f0b004594c4d6fa54634", "html_url": "https://github.com/rust-lang/rust/commit/f2ae412ccfa96c4bde42f0b004594c4d6fa54634"}], "stats": {"total": 108, "additions": 61, "deletions": 47}, "files": [{"sha": "fa524ffd97f5e398c8ac4633401373ff26afaa22", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=18c62c8a39d95ce3bb10ff5446bb589b1128a090", "patch": "@@ -1,6 +1,5 @@\n use std::collections::BTreeSet;\n \n-use ast::make;\n use either::Either;\n use hir::{\n     AsAssocItem, AssocItemContainer, ModPath, Module, ModuleDef, PathResolution, Semantics, Trait,\n@@ -54,11 +53,8 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n             format!(\"Import `{}`\", &import),\n             range,\n             |builder| {\n-                let new_syntax = insert_use(\n-                    &scope,\n-                    make::path_from_text(&import.to_string()),\n-                    ctx.config.insert_use.merge,\n-                );\n+                let new_syntax =\n+                    insert_use(&scope, import.to_ast_path(), ctx.config.insert_use.merge);\n                 builder.replace(syntax.text_range(), new_syntax.to_string())\n             },\n         );"}, {"sha": "d1adff972e2def2083c05b4b0bb49ff06e481139", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=18c62c8a39d95ce3bb10ff5446bb589b1128a090", "patch": "@@ -264,12 +264,8 @@ fn replace_ast(\n     match use_trees.as_slice() {\n         [name] => {\n             if let Some(end_path) = name.path() {\n-                let replacement = make::use_tree(\n-                    make::path_from_text(&format!(\"{}::{}\", path, end_path)),\n-                    None,\n-                    None,\n-                    false,\n-                );\n+                let replacement =\n+                    make::use_tree(make::path_concat(path, end_path), None, None, false);\n \n                 algo::diff(\n                     &parent.either(|n| n.syntax().clone(), |n| n.syntax().clone()),"}, {"sha": "d1eadaa996ec0cf64a9db99d744925b851e0631a", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=18c62c8a39d95ce3bb10ff5446bb589b1128a090", "patch": "@@ -12,7 +12,6 @@ use syntax::{\n use crate::{\n     assist_context::AssistBuilder, utils::insert_use, AssistContext, AssistId, AssistKind, Assists,\n };\n-use ast::make;\n use insert_use::ImportScope;\n \n // Assist: extract_struct_from_enum_variant\n@@ -112,11 +111,7 @@ fn insert_import(\n         let scope = ImportScope::find_insert_use_container(path.syntax(), ctx)?;\n         let syntax = scope.as_syntax_node();\n \n-        let new_syntax = insert_use(\n-            &scope,\n-            make::path_from_text(&mod_path.to_string()),\n-            ctx.config.insert_use.merge,\n-        );\n+        let new_syntax = insert_use(&scope, mod_path.to_ast_path(), ctx.config.insert_use.merge);\n         // FIXME: this will currently panic as multiple imports will have overlapping text ranges\n         builder.replace(syntax.text_range(), new_syntax.to_string())\n     }"}, {"sha": "74afc123b9b46c3497cb37200398d634902651f3", "filename": "crates/assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=18c62c8a39d95ce3bb10ff5446bb589b1128a090", "patch": "@@ -1,11 +1,10 @@\n-use syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SyntaxNode, TextRange};\n+use syntax::{algo::SyntaxRewriter, ast, match_ast, AstNode, SyntaxNode};\n use test_utils::mark;\n \n use crate::{\n     utils::{insert_use, ImportScope},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n-use ast::make;\n \n // Assist: replace_qualified_name_with_use\n //\n@@ -33,15 +32,6 @@ pub(crate) fn replace_qualified_name_with_use(\n         mark::hit!(dont_import_trivial_paths);\n         return None;\n     }\n-    let path_to_import = path.to_string();\n-    let path_to_import = match path.segment()?.generic_arg_list() {\n-        Some(generic_args) => {\n-            let generic_args_start =\n-                generic_args.syntax().text_range().start() - path.syntax().text_range().start();\n-            &path_to_import[TextRange::up_to(generic_args_start)]\n-        }\n-        None => path_to_import.as_str(),\n-    };\n \n     let target = path.syntax().text_range();\n     let scope = ImportScope::find_insert_use_container(path.syntax(), ctx)?;\n@@ -54,22 +44,18 @@ pub(crate) fn replace_qualified_name_with_use(\n             // Now that we've brought the name into scope, re-qualify all paths that could be\n             // affected (that is, all paths inside the node we added the `use` to).\n             let mut rewriter = SyntaxRewriter::default();\n-            shorten_paths(&mut rewriter, syntax.clone(), path);\n+            shorten_paths(&mut rewriter, syntax.clone(), &path);\n             let rewritten_syntax = rewriter.rewrite(&syntax);\n             if let Some(ref import_scope) = ImportScope::from(rewritten_syntax) {\n-                let new_syntax = insert_use(\n-                    import_scope,\n-                    make::path_from_text(path_to_import),\n-                    ctx.config.insert_use.merge,\n-                );\n+                let new_syntax = insert_use(import_scope, path, ctx.config.insert_use.merge);\n                 builder.replace(syntax.text_range(), new_syntax.to_string())\n             }\n         },\n     )\n }\n \n /// Adds replacements to `re` that shorten `path` in all descendants of `node`.\n-fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path: ast::Path) {\n+fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path: &ast::Path) {\n     for child in node.children() {\n         match_ast! {\n             match child {\n@@ -82,10 +68,10 @@ fn shorten_paths(rewriter: &mut SyntaxRewriter<'static>, node: SyntaxNode, path:\n                 ast::Path(p) => {\n                     match maybe_replace_path(rewriter, p.clone(), path.clone()) {\n                         Some(()) => {},\n-                        None => shorten_paths(rewriter, p.syntax().clone(), path.clone()),\n+                        None => shorten_paths(rewriter, p.syntax().clone(), path),\n                     }\n                 },\n-                _ => shorten_paths(rewriter, child, path.clone()),\n+                _ => shorten_paths(rewriter, child, path),\n             }\n         }\n     }"}, {"sha": "209b18e78a476c850b4d8f063ddb2b86be0d3aaf", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=18c62c8a39d95ce3bb10ff5446bb589b1128a090", "patch": "@@ -13,7 +13,7 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{AsName, Name},\n };\n-use syntax::ast;\n+use syntax::ast::{self, make};\n \n use crate::{\n     type_ref::{TypeBound, TypeRef},\n@@ -100,6 +100,26 @@ impl ModPath {\n         }\n         self.segments.first()\n     }\n+\n+    pub fn to_ast_path(&self) -> ast::Path {\n+        let mut segments = Vec::new();\n+        let mut is_abs = false;\n+        match self.kind {\n+            PathKind::Plain => {}\n+            PathKind::Super(0) => segments.push(make::path_segment_self()),\n+            PathKind::Super(n) => segments.extend((0..n).map(|_| make::path_segment_super())),\n+            PathKind::Crate => segments.push(make::path_segment_crate()),\n+            PathKind::Abs => is_abs = true,\n+            PathKind::DollarCrate(_) => (),\n+        }\n+\n+        segments.extend(\n+            self.segments\n+                .iter()\n+                .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n+        );\n+        make::path_from_segments(segments, is_abs)\n+    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -286,10 +306,8 @@ impl Display for ModPath {\n         };\n         match self.kind {\n             PathKind::Plain => {}\n+            PathKind::Super(0) => add_segment(\"self\")?,\n             PathKind::Super(n) => {\n-                if n == 0 {\n-                    add_segment(\"self\")?;\n-                }\n                 for _ in 0..n {\n                     add_segment(\"super\")?;\n                 }"}, {"sha": "3a184094c8e8e3160c56b9ad25b37e94afc48929", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c62c8a39d95ce3bb10ff5446bb589b1128a090/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=18c62c8a39d95ce3bb10ff5446bb589b1128a090", "patch": "@@ -28,18 +28,41 @@ pub fn assoc_item_list() -> ast::AssocItemList {\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"use {};\", name_ref))\n }\n+\n pub fn path_segment_self() -> ast::PathSegment {\n     ast_from_text(\"use self;\")\n }\n+\n+pub fn path_segment_super() -> ast::PathSegment {\n+    ast_from_text(\"use super;\")\n+}\n+\n+pub fn path_segment_crate() -> ast::PathSegment {\n+    ast_from_text(\"use crate;\")\n+}\n+\n pub fn path_unqualified(segment: ast::PathSegment) -> ast::Path {\n-    path_from_text(&format!(\"use {}\", segment))\n+    ast_from_text(&format!(\"use {}\", segment))\n }\n+\n pub fn path_qualified(qual: ast::Path, segment: ast::PathSegment) -> ast::Path {\n-    path_from_text(&format!(\"{}::{}\", qual, segment))\n+    ast_from_text(&format!(\"{}::{}\", qual, segment))\n }\n-// FIXME: make this private\n-pub fn path_from_text(text: &str) -> ast::Path {\n-    ast_from_text(text)\n+\n+pub fn path_concat(first: ast::Path, second: ast::Path) -> ast::Path {\n+    ast_from_text(&format!(\"{}::{}\", first, second))\n+}\n+\n+pub fn path_from_segments(\n+    segments: impl IntoIterator<Item = ast::PathSegment>,\n+    is_abs: bool,\n+) -> ast::Path {\n+    let segments = segments.into_iter().map(|it| it.syntax().clone()).join(\"::\");\n+    ast_from_text(&if is_abs {\n+        format!(\"use ::{};\", segments)\n+    } else {\n+        format!(\"use {};\", segments)\n+    })\n }\n \n pub fn glob_use_tree() -> ast::UseTree {"}]}