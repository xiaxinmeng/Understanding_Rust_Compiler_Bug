{"sha": "ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5", "node_id": "C_kwDOAAsO6NoAKGNlMmIzYTliNGM2MDg0ZWRkYzRkMWM2MTQzNmI5ZDQxYmIxNDgzZTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-10T01:18:06Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-14T03:06:44Z"}, "message": "Rename the `ConstS::val` field as `kind`.\n\nAnd likewise for the `Const::val` method.\n\nBecause its type is called `ConstKind`. Also `val` is a confusing name\nbecause `ConstKind` is an enum with seven variants, one of which is\ncalled `Value`. Also, this gives consistency with `TyS` and `PredicateS`\nwhich have `kind` fields.\n\nThe commit also renames a few `Const` variables from `val` to `c`, to\navoid confusion with the `ConstKind::Value` variant.", "tree": {"sha": "b9ad4a508ec51aa4d9e28048566359570d8cd342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ad4a508ec51aa4d9e28048566359570d8cd342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5", "html_url": "https://github.com/rust-lang/rust/commit/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b867d41ed42c8ef5cd13a78d299577c3d4ab589b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b867d41ed42c8ef5cd13a78d299577c3d4ab589b", "html_url": "https://github.com/rust-lang/rust/commit/b867d41ed42c8ef5cd13a78d299577c3d4ab589b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "fbe830b2b1030400ec121ff1f5753ef238341ed5", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5", "patch": "@@ -710,7 +710,7 @@ fn codegen_stmt<'tcx>(\n                     let times = fx\n                         .monomorphize(times)\n                         .eval(fx.tcx, ParamEnv::reveal_all())\n-                        .val()\n+                        .kind()\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n                     if operand.layout().size.bytes() == 0 {"}, {"sha": "3d14a0eca52bb31ce2a620d5c0f3732f058a9b01", "filename": "src/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=ce2b3a9b4c6084eddc4d1c61436b9d41bb1483e5", "patch": "@@ -45,7 +45,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n             ConstantKind::Ty(ct) => ct,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.val() {\n+        match const_.kind() {\n             ConstKind::Value(_) => {}\n             ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n@@ -126,7 +126,7 @@ pub(crate) fn codegen_constant<'tcx>(\n         ConstantKind::Ty(ct) => ct,\n         ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n     };\n-    let const_val = match const_.val() {\n+    let const_val = match const_.kind() {\n         ConstKind::Value(const_val) => const_val,\n         ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n             if fx.tcx.is_static(def.did) =>\n@@ -469,7 +469,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     match operand {\n         Operand::Constant(const_) => match const_.literal {\n             ConstantKind::Ty(const_) => {\n-                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).val().try_to_value()\n+                fx.monomorphize(const_).eval(fx.tcx, ParamEnv::reveal_all()).kind().try_to_value()\n             }\n             ConstantKind::Val(val, _) => Some(val),\n         },"}]}