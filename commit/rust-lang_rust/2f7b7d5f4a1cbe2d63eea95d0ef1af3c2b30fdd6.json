{"sha": "2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6", "node_id": "C_kwDOAAsO6NoAKDJmN2I3ZDVmNGExY2JlMmQ2M2VlYTk1ZDBlZjFhZjNjMmIzMGZkZDY", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-01-27T00:51:32Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2022-01-27T00:51:49Z"}, "message": "Don't use is_local to determine function cleaning method call intent", "tree": {"sha": "a890eff0f5de16ee8230dc0349dbcaba1a10015b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a890eff0f5de16ee8230dc0349dbcaba1a10015b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6", "html_url": "https://github.com/rust-lang/rust/commit/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6abb6385b2cb7249f67b9b3ce7522527767dd907", "url": "https://api.github.com/repos/rust-lang/rust/commits/6abb6385b2cb7249f67b9b3ce7522527767dd907", "html_url": "https://github.com/rust-lang/rust/commit/6abb6385b2cb7249f67b9b3ce7522527767dd907"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "4fe433188c90cb3bb00231c37429af9ecb863962", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6", "patch": "@@ -228,7 +228,7 @@ fn build_external_function(cx: &mut DocContext<'_>, did: DefId) -> clean::Functi\n     let (generics, decl) = clean::enter_impl_trait(cx, |cx| {\n         // NOTE: generics need to be cleaned before the decl!\n         let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n-        let decl = clean_fn_decl_from_did_and_sig(cx, did, sig);\n+        let decl = clean_fn_decl_from_did_and_sig(cx, Some(did), sig);\n         (generics, decl)\n     });\n     clean::Function {"}, {"sha": "f9b4d1435bd03e1d3f2830283b4bfeb114dff137", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2f7b7d5f4a1cbe2d63eea95d0ef1af3c2b30fdd6", "patch": "@@ -890,10 +890,10 @@ fn clean_fn_decl_with_args(\n \n fn clean_fn_decl_from_did_and_sig(\n     cx: &mut DocContext<'_>,\n-    did: DefId,\n+    did: Option<DefId>,\n     sig: ty::PolyFnSig<'_>,\n ) -> FnDecl {\n-    let mut names = if did.is_local() { &[] } else { cx.tcx.fn_arg_names(did) }.iter();\n+    let mut names = did.map_or(&[] as &[_], |did| cx.tcx.fn_arg_names(did)).iter();\n \n     FnDecl {\n         output: Return(sig.skip_binder().output().clean(cx)),\n@@ -1067,7 +1067,7 @@ impl Clean<Item> for ty::AssocItem {\n                     tcx.explicit_predicates_of(self.def_id),\n                 );\n                 let sig = tcx.fn_sig(self.def_id);\n-                let mut decl = clean_fn_decl_from_did_and_sig(cx, self.def_id, sig);\n+                let mut decl = clean_fn_decl_from_did_and_sig(cx, Some(self.def_id), sig);\n \n                 if self.fn_has_self_parameter {\n                     let self_ty = match self.container {\n@@ -1466,8 +1466,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::FnDef(..) | ty::FnPtr(_) => {\n                 let ty = cx.tcx.lift(*self).expect(\"FnPtr lift failed\");\n                 let sig = ty.fn_sig(cx.tcx);\n-                let def_id = DefId::local(CRATE_DEF_INDEX);\n-                let decl = clean_fn_decl_from_did_and_sig(cx, def_id, sig);\n+                let decl = clean_fn_decl_from_did_and_sig(cx, None, sig);\n                 BareFunction(box BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),"}]}