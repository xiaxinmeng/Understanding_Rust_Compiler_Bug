{"sha": "b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "node_id": "C_kwDOAAsO6NoAKGIyMGM2Y2ZkODFiOGRmMjBlMDcxNGUzYmM4YTYwNTRiZTY4MmQ1ZjE", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2021-12-08T03:05:13Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-05-22T22:23:01Z"}, "message": "Factor current-span logic into a lazy caching handle", "tree": {"sha": "457126747bc837b81fca19a3f74175f41d39826f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/457126747bc837b81fca19a3f74175f41d39826f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "html_url": "https://github.com/rust-lang/rust/commit/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62ea0c8c394d80669a336609181592effd887288", "url": "https://api.github.com/repos/rust-lang/rust/commits/62ea0c8c394d80669a336609181592effd887288", "html_url": "https://github.com/rust-lang/rust/commit/62ea0c8c394d80669a336609181592effd887288"}], "stats": {"total": 141, "additions": 79, "deletions": 62}, "files": [{"sha": "2d1fffc6a125f3b845307a8414bb394e4e2ef6ff", "filename": "src/helpers.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "patch": "@@ -2,7 +2,6 @@ pub mod convert;\n \n use std::mem;\n use std::num::NonZeroUsize;\n-use std::rc::Rc;\n use std::time::Duration;\n \n use log::trace;\n@@ -14,7 +13,7 @@ use rustc_middle::ty::{\n     layout::{LayoutOf, TyAndLayout},\n     List, TyCtxt,\n };\n-use rustc_span::{def_id::CrateNum, sym, Symbol};\n+use rustc_span::{def_id::CrateNum, sym, Span, Symbol};\n use rustc_target::abi::{Align, FieldsShape, Size, Variants};\n use rustc_target::spec::abi::Abi;\n \n@@ -800,6 +799,43 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n+impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n+    pub fn current_span(&self) -> CurrentSpan<'_, 'mir, 'tcx> {\n+        CurrentSpan { span: None, machine: self }\n+    }\n+}\n+\n+/// A `CurrentSpan` should be created infrequently (ideally once) per interpreter step. It does\n+/// nothing on creation, but when `CurrentSpan::get` is called, searches the current stack for the\n+/// topmost frame which corresponds to a local crate, and returns the current span in that frame.\n+/// The result of that search is cached so that later calls are approximately free.\n+#[derive(Clone)]\n+pub struct CurrentSpan<'a, 'tcx, 'mir> {\n+    span: Option<Span>,\n+    machine: &'a Evaluator<'tcx, 'mir>,\n+}\n+\n+impl<'a, 'tcx, 'mir> CurrentSpan<'a, 'tcx, 'mir> {\n+    pub fn get(&mut self) -> Span {\n+        *self.span.get_or_insert_with(|| Self::current_span(&self.machine))\n+    }\n+\n+    #[inline(never)]\n+    fn current_span(machine: &Evaluator<'_, '_>) -> Span {\n+        machine\n+            .threads\n+            .active_thread_stack()\n+            .into_iter()\n+            .rev()\n+            .find(|frame| {\n+                let def_id = frame.instance.def_id();\n+                def_id.is_local() || machine.local_crates.contains(&def_id.krate)\n+            })\n+            .map(|frame| frame.current_span())\n+            .unwrap_or(rustc_span::DUMMY_SP)\n+    }\n+}\n+\n /// Check that the number of args is what we expect.\n pub fn check_arg_count<'a, 'tcx, const N: usize>(\n     args: &'a [OpTy<'tcx, Tag>],\n@@ -822,7 +858,7 @@ pub fn isolation_abort_error(name: &str) -> InterpResult<'static> {\n \n /// Retrieve the list of local crates that should have been passed by cargo-miri in\n /// MIRI_LOCAL_CRATES and turn them into `CrateNum`s.\n-pub fn get_local_crates(tcx: &TyCtxt<'_>) -> Rc<[CrateNum]> {\n+pub fn get_local_crates(tcx: &TyCtxt<'_>) -> Vec<CrateNum> {\n     // Convert the local crate names from the passed-in config into CrateNums so that they can\n     // be looked up quickly during execution\n     let local_crate_names = std::env::var(\"MIRI_LOCAL_CRATES\")\n@@ -836,7 +872,7 @@ pub fn get_local_crates(tcx: &TyCtxt<'_>) -> Rc<[CrateNum]> {\n             local_crates.push(crate_num);\n         }\n     }\n-    Rc::from(local_crates.as_slice())\n+    local_crates\n }\n \n /// Formats an AllocRange like [0x1..0x3], for use in diagnostics."}, {"sha": "9fa2c61fd831a0b081948343758a5431d8ce6393", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "patch": "@@ -77,7 +77,7 @@ pub use crate::diagnostics::{\n pub use crate::eval::{\n     create_ecx, eval_entry, AlignmentCheck, BacktraceStyle, IsolatedOp, MiriConfig, RejectOpWith,\n };\n-pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n+pub use crate::helpers::{CurrentSpan, EvalContextExt as HelpersEvalContextExt};\n pub use crate::machine::{\n     AllocExtra, Evaluator, FrameData, MiriEvalContext, MiriEvalContextExt, MiriMemoryKind, Tag,\n     NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,"}, {"sha": "d78b0135e94fbe3f1d752f3a6e2b7b01755e00be", "filename": "src/machine.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "patch": "@@ -6,7 +6,6 @@ use std::cell::RefCell;\n use std::collections::HashSet;\n use std::fmt;\n use std::num::NonZeroU64;\n-use std::rc::Rc;\n use std::time::Instant;\n \n use rand::rngs::StdRng;\n@@ -278,7 +277,7 @@ pub struct Evaluator<'mir, 'tcx> {\n     pub(crate) backtrace_style: BacktraceStyle,\n \n     /// Crates which are considered local for the purposes of error reporting.\n-    pub(crate) local_crates: Rc<[CrateNum]>,\n+    pub(crate) local_crates: Vec<CrateNum>,\n \n     /// Mapping extern static names to their base pointer.\n     extern_statics: FxHashMap<Symbol, Pointer<Tag>>,\n@@ -584,8 +583,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n                 alloc.size(),\n                 stacked_borrows,\n                 kind,\n-                &ecx.machine.threads,\n-                ecx.machine.local_crates.clone(),\n+                ecx.machine.current_span(),\n             ))\n         } else {\n             None\n@@ -667,7 +665,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n                 tag,\n                 range,\n                 machine.stacked_borrows.as_ref().unwrap(),\n-                &machine.threads,\n+                machine.current_span(),\n             )\n         } else {\n             Ok(())\n@@ -691,7 +689,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n                 tag,\n                 range,\n                 machine.stacked_borrows.as_ref().unwrap(),\n-                &machine.threads,\n+                machine.current_span(),\n             )\n         } else {\n             Ok(())"}, {"sha": "625ffb2c5d202526020efedfe9142810cfa3d496", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "patch": "@@ -5,7 +5,6 @@ use log::trace;\n use std::cell::RefCell;\n use std::fmt;\n use std::num::NonZeroU64;\n-use std::rc::Rc;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::Mutability;\n@@ -14,17 +13,14 @@ use rustc_middle::ty::{\n     self,\n     layout::{HasParamEnv, LayoutOf},\n };\n-use rustc_span::def_id::CrateNum;\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::Size;\n use std::collections::HashSet;\n \n use crate::*;\n \n pub mod diagnostics;\n-use diagnostics::AllocHistory;\n-\n-use diagnostics::TagHistory;\n+use diagnostics::{AllocHistory, TagHistory};\n \n pub type PtrId = NonZeroU64;\n pub type CallId = NonZeroU64;\n@@ -376,7 +372,7 @@ impl<'tcx> Stack {\n         tag: SbTag,\n         (alloc_id, alloc_range, offset): (AllocId, AllocRange, Size), // just for debug printing and error messages\n         global: &mut GlobalStateInner,\n-        threads: &ThreadManager<'_, 'tcx>,\n+        current_span: &mut CurrentSpan<'_, '_, 'tcx>,\n         alloc_history: &mut AllocHistory,\n     ) -> InterpResult<'tcx> {\n         // Two main steps: Find granting item, remove incompatible items above.\n@@ -400,7 +396,7 @@ impl<'tcx> Stack {\n                     global,\n                     alloc_history,\n                 )?;\n-                alloc_history.log_invalidation(item.tag, alloc_range, threads);\n+                alloc_history.log_invalidation(item.tag, alloc_range, current_span);\n             }\n         } else {\n             // On a read, *disable* all `Unique` above the granting item.  This ensures U2 for read accesses.\n@@ -422,7 +418,7 @@ impl<'tcx> Stack {\n                         alloc_history,\n                     )?;\n                     item.perm = Permission::Disabled;\n-                    alloc_history.log_invalidation(item.tag, alloc_range, threads);\n+                    alloc_history.log_invalidation(item.tag, alloc_range, current_span);\n                 }\n             }\n         }\n@@ -471,7 +467,7 @@ impl<'tcx> Stack {\n         new: Item,\n         (alloc_id, alloc_range, offset): (AllocId, AllocRange, Size), // just for debug printing and error messages\n         global: &mut GlobalStateInner,\n-        threads: &ThreadManager<'_, 'tcx>,\n+        current_span: &mut CurrentSpan<'_, '_, 'tcx>,\n         alloc_history: &mut AllocHistory,\n     ) -> InterpResult<'tcx> {\n         // Figure out which access `perm` corresponds to.\n@@ -505,7 +501,7 @@ impl<'tcx> Stack {\n                 derived_from,\n                 (alloc_id, alloc_range, offset),\n                 global,\n-                threads,\n+                current_span,\n                 alloc_history,\n             )?;\n \n@@ -533,13 +529,13 @@ impl<'tcx> Stack {\n /// Map per-stack operations to higher-level per-location-range operations.\n impl<'tcx> Stacks {\n     /// Creates new stack with initial tag.\n-    fn new(size: Size, perm: Permission, tag: SbTag, local_crates: Rc<[CrateNum]>) -> Self {\n+    fn new(size: Size, perm: Permission, tag: SbTag) -> Self {\n         let item = Item { perm, tag, protector: None };\n         let stack = Stack { borrows: vec![item] };\n \n         Stacks {\n             stacks: RefCell::new(RangeMap::new(size, stack)),\n-            history: RefCell::new(AllocHistory::new(local_crates)),\n+            history: RefCell::new(AllocHistory::new()),\n         }\n     }\n \n@@ -579,8 +575,7 @@ impl Stacks {\n         size: Size,\n         state: &GlobalState,\n         kind: MemoryKind<MiriMemoryKind>,\n-        threads: &ThreadManager<'_, '_>,\n-        local_crates: Rc<[CrateNum]>,\n+        mut current_span: CurrentSpan<'_, '_, '_>,\n     ) -> Self {\n         let mut extra = state.borrow_mut();\n         let (base_tag, perm) = match kind {\n@@ -614,12 +609,12 @@ impl Stacks {\n                 (tag, Permission::SharedReadWrite)\n             }\n         };\n-        let stacks = Stacks::new(size, perm, base_tag, local_crates);\n+        let stacks = Stacks::new(size, perm, base_tag);\n         stacks.history.borrow_mut().log_creation(\n             None,\n             base_tag,\n             alloc_range(Size::ZERO, size),\n-            threads,\n+            &mut current_span,\n         );\n         stacks\n     }\n@@ -631,7 +626,7 @@ impl Stacks {\n         tag: SbTag,\n         range: AllocRange,\n         state: &GlobalState,\n-        threads: &ThreadManager<'_, 'tcx>,\n+        mut current_span: CurrentSpan<'_, '_, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         trace!(\n             \"read access with tag {:?}: {:?}, size {}\",\n@@ -646,7 +641,7 @@ impl Stacks {\n                 tag,\n                 (alloc_id, range, offset),\n                 &mut state,\n-                threads,\n+                &mut current_span,\n                 history,\n             )\n         })\n@@ -659,7 +654,7 @@ impl Stacks {\n         tag: SbTag,\n         range: AllocRange,\n         state: &GlobalState,\n-        threads: &ThreadManager<'_, 'tcx>,\n+        mut current_span: CurrentSpan<'_, '_, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         trace!(\n             \"write access with tag {:?}: {:?}, size {}\",\n@@ -674,7 +669,7 @@ impl Stacks {\n                 tag,\n                 (alloc_id, range, offset),\n                 &mut state,\n-                threads,\n+                &mut current_span,\n                 history,\n             )\n         })\n@@ -723,6 +718,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         let (alloc_id, base_offset, orig_tag) = this.ptr_get_alloc_id(place.ptr)?;\n \n+        let mut current_span = this.machine.current_span();\n         {\n             let extra = this.get_alloc_extra(alloc_id)?;\n             let stacked_borrows =\n@@ -732,10 +728,10 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 Some(orig_tag),\n                 new_tag,\n                 alloc_range(base_offset, size),\n-                &this.machine.threads,\n+                &mut current_span,\n             );\n             if protect {\n-                alloc_history.log_protector(orig_tag, new_tag, &this.machine.threads);\n+                alloc_history.log_protector(orig_tag, new_tag, &mut current_span);\n             }\n         }\n \n@@ -804,7 +800,7 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                             item,\n                             (alloc_id, range, offset),\n                             &mut *global,\n-                            &this.machine.threads,\n+                            &mut current_span,\n                             history,\n                         )\n                     })\n@@ -821,13 +817,14 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let item = Item { perm, tag: new_tag, protector };\n         let range = alloc_range(base_offset, size);\n         let mut global = machine.stacked_borrows.as_ref().unwrap().borrow_mut();\n+        let mut current_span = machine.current_span();\n         stacked_borrows.for_each_mut(range, |offset, stack, history| {\n             stack.grant(\n                 orig_tag,\n                 item,\n                 (alloc_id, range, offset),\n                 &mut global,\n-                &machine.threads,\n+                &mut current_span,\n                 history,\n             )\n         })?;"}, {"sha": "f3692cdeeb043c02b09e399f590f13126531b922", "filename": "src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20c6cfd81b8df20e0714e3bc8a6054be682d5f1/src%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fdiagnostics.rs?ref=b20c6cfd81b8df20e0714e3bc8a6054be682d5f1", "patch": "@@ -1,17 +1,14 @@\n use smallvec::SmallVec;\n-use std::rc::Rc;\n \n use rustc_middle::mir::interpret::{AllocId, AllocRange};\n-use rustc_span::def_id::CrateNum;\n use rustc_span::{Span, SpanData};\n use rustc_target::abi::Size;\n \n-use crate::helpers::HexRange;\n+use crate::helpers::{CurrentSpan, HexRange};\n use crate::stacked_borrows::{err_sb_ub, AccessKind, Permission};\n use crate::Item;\n use crate::SbTag;\n use crate::Stack;\n-use crate::ThreadManager;\n \n use rustc_middle::mir::interpret::InterpError;\n \n@@ -23,8 +20,6 @@ pub struct AllocHistory {\n     creations: smallvec::SmallVec<[Event; 2]>,\n     invalidations: smallvec::SmallVec<[Event; 1]>,\n     protectors: smallvec::SmallVec<[Protection; 1]>,\n-    /// This field is a clone of the `local_crates` field on `Evaluator`.\n-    local_crates: Rc<[CrateNum]>,\n }\n \n #[derive(Clone, Debug)]\n@@ -59,37 +54,23 @@ pub enum TagHistory {\n }\n \n impl AllocHistory {\n-    pub fn new(local_crates: Rc<[CrateNum]>) -> Self {\n+    pub fn new() -> Self {\n         Self {\n             current_time: 0,\n             creations: SmallVec::new(),\n             invalidations: SmallVec::new(),\n             protectors: SmallVec::new(),\n-            local_crates,\n         }\n     }\n \n-    fn current_span(&self, threads: &ThreadManager<'_, '_>) -> Span {\n-        threads\n-            .active_thread_stack()\n-            .into_iter()\n-            .rev()\n-            .find(|frame| {\n-                let def_id = frame.instance.def_id();\n-                def_id.is_local() || self.local_crates.contains(&def_id.krate)\n-            })\n-            .map(|frame| frame.current_span())\n-            .unwrap_or(rustc_span::DUMMY_SP)\n-    }\n-\n     pub fn log_creation(\n         &mut self,\n         parent: Option<SbTag>,\n         tag: SbTag,\n         range: AllocRange,\n-        threads: &ThreadManager<'_, '_>,\n+        current_span: &mut CurrentSpan<'_, '_, '_>,\n     ) {\n-        let span = self.current_span(threads);\n+        let span = current_span.get();\n         self.creations.push(Event { parent, tag, range, span, time: self.current_time });\n         self.current_time += 1;\n     }\n@@ -98,15 +79,20 @@ impl AllocHistory {\n         &mut self,\n         tag: SbTag,\n         range: AllocRange,\n-        threads: &ThreadManager<'_, '_>,\n+        current_span: &mut CurrentSpan<'_, '_, '_>,\n     ) {\n-        let span = self.current_span(threads);\n+        let span = current_span.get();\n         self.invalidations.push(Event { parent: None, tag, range, span, time: self.current_time });\n         self.current_time += 1;\n     }\n \n-    pub fn log_protector(&mut self, orig_tag: SbTag, tag: SbTag, threads: &ThreadManager<'_, '_>) {\n-        let span = self.current_span(threads);\n+    pub fn log_protector(\n+        &mut self,\n+        orig_tag: SbTag,\n+        tag: SbTag,\n+        current_span: &mut CurrentSpan<'_, '_, '_>,\n+    ) {\n+        let span = current_span.get();\n         self.protectors.push(Protection { orig_tag, tag, span });\n         self.current_time += 1;\n     }"}]}