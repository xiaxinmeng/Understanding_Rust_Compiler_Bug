{"sha": "1d129a7172bbe502182be6cc3b50b3250cb6f3a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMTI5YTcxNzJiYmU1MDIxODJiZTZjYzNiNTBiMzI1MGNiNmYzYTk=", "commit": {"author": {"name": "dragfire", "email": "asem.devajit@gmail.com", "date": "2020-08-23T20:30:07Z"}, "committer": {"name": "dragfire", "email": "asem.devajit@gmail.com", "date": "2020-08-24T04:30:34Z"}, "message": "Invert if should be smart about is_some, is_none, is_ok, is_err", "tree": {"sha": "7b9e694ab43ffebde2a39c4e99d5b2a6c774a005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9e694ab43ffebde2a39c4e99d5b2a6c774a005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d129a7172bbe502182be6cc3b50b3250cb6f3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d129a7172bbe502182be6cc3b50b3250cb6f3a9", "html_url": "https://github.com/rust-lang/rust/commit/1d129a7172bbe502182be6cc3b50b3250cb6f3a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d129a7172bbe502182be6cc3b50b3250cb6f3a9/comments", "author": {"login": "dragfire", "id": 6277978, "node_id": "MDQ6VXNlcjYyNzc5Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6277978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dragfire", "html_url": "https://github.com/dragfire", "followers_url": "https://api.github.com/users/dragfire/followers", "following_url": "https://api.github.com/users/dragfire/following{/other_user}", "gists_url": "https://api.github.com/users/dragfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/dragfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dragfire/subscriptions", "organizations_url": "https://api.github.com/users/dragfire/orgs", "repos_url": "https://api.github.com/users/dragfire/repos", "events_url": "https://api.github.com/users/dragfire/events{/privacy}", "received_events_url": "https://api.github.com/users/dragfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dragfire", "id": 6277978, "node_id": "MDQ6VXNlcjYyNzc5Nzg=", "avatar_url": "https://avatars.githubusercontent.com/u/6277978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dragfire", "html_url": "https://github.com/dragfire", "followers_url": "https://api.github.com/users/dragfire/followers", "following_url": "https://api.github.com/users/dragfire/following{/other_user}", "gists_url": "https://api.github.com/users/dragfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/dragfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dragfire/subscriptions", "organizations_url": "https://api.github.com/users/dragfire/orgs", "repos_url": "https://api.github.com/users/dragfire/repos", "events_url": "https://api.github.com/users/dragfire/events{/privacy}", "received_events_url": "https://api.github.com/users/dragfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87", "html_url": "https://github.com/rust-lang/rust/commit/e65d48d1fb3d4d91d9dc1148a7a836ff5c9a3c87"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "294256297b6780ce670d522ecc1e6cfb1847fd2b", "filename": "crates/assists/src/handlers/invert_if.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1d129a7172bbe502182be6cc3b50b3250cb6f3a9/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d129a7172bbe502182be6cc3b50b3250cb6f3a9/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=1d129a7172bbe502182be6cc3b50b3250cb6f3a9", "patch": "@@ -106,4 +106,22 @@ mod tests {\n             \"fn f() { i<|>f let Some(_) = Some(1) { 1 } else { 0 } }\",\n         )\n     }\n+\n+    #[test]\n+    fn invert_if_option_case() {\n+        check_assist(\n+            invert_if,\n+            \"fn f() { if<|> doc_style.is_some() { Class::DocComment } else { Class::Comment } }\",\n+            \"fn f() { if doc_style.is_none() { Class::Comment } else { Class::DocComment } }\",\n+        )\n+    }\n+\n+    #[test]\n+    fn invert_if_result_case() {\n+        check_assist(\n+            invert_if,\n+            \"fn f() { i<|>f doc_style.is_err() { Class::Err } else { Class::Ok } }\",\n+            \"fn f() { if doc_style.is_ok() { Class::Ok } else { Class::Err } }\",\n+        )\n+    }\n }"}, {"sha": "e15c982e75e86b3d5a366666b19d8b115e3369d5", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1d129a7172bbe502182be6cc3b50b3250cb6f3a9/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d129a7172bbe502182be6cc3b50b3250cb6f3a9/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=1d129a7172bbe502182be6cc3b50b3250cb6f3a9", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n     ast::{self, make, NameOwner},\n     AstNode, Direction,\n     SyntaxKind::*,\n-    SyntaxNode, TextSize, T,\n+    SyntaxNode, SyntaxText, TextSize, T,\n };\n \n use crate::assist_config::SnippetCap;\n@@ -179,6 +179,25 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n             ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n             _ => None,\n         },\n+        ast::Expr::MethodCallExpr(mce) => {\n+            const IS_SOME_TEXT: &str = \"is_some\";\n+            const IS_NONE_TEXT: &str = \"is_none\";\n+            const IS_OK_TEXT: &str = \"is_ok\";\n+            const IS_ERR_TEXT: &str = \"is_err\";\n+\n+            let name = mce.name_ref()?;\n+            let name_text = name.text();\n+\n+            let caller = || -> Option<SyntaxText> { Some(mce.receiver()?.syntax().text()) };\n+\n+            match name_text {\n+                x if x == IS_SOME_TEXT => make::expr_method_call(IS_NONE_TEXT, caller),\n+                x if x == IS_NONE_TEXT => make::expr_method_call(IS_SOME_TEXT, caller),\n+                x if x == IS_OK_TEXT => make::expr_method_call(IS_ERR_TEXT, caller),\n+                x if x == IS_ERR_TEXT => make::expr_method_call(IS_OK_TEXT, caller),\n+                _ => None,\n+            }\n+        }\n         ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => pe.expr(),\n         // FIXME:\n         // ast::Expr::Literal(true | false )"}, {"sha": "7958721e24266f2a6e85ceed00e82779657aaa28", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d129a7172bbe502182be6cc3b50b3250cb6f3a9/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d129a7172bbe502182be6cc3b50b3250cb6f3a9/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=1d129a7172bbe502182be6cc3b50b3250cb6f3a9", "patch": "@@ -7,7 +7,7 @@\n use itertools::Itertools;\n use stdx::format_to;\n \n-use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxToken};\n+use crate::{ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, SyntaxText, SyntaxToken};\n \n pub fn name(text: &str) -> ast::Name {\n     ast_from_text(&format!(\"mod {};\", text))\n@@ -137,6 +137,12 @@ pub fn expr_prefix(op: SyntaxKind, expr: ast::Expr) -> ast::Expr {\n pub fn expr_call(f: ast::Expr, arg_list: ast::ArgList) -> ast::Expr {\n     expr_from_text(&format!(\"{}{}\", f, arg_list))\n }\n+pub fn expr_method_call<F>(text: &str, caller: F) -> Option<ast::Expr>\n+where\n+    F: FnOnce() -> Option<SyntaxText>,\n+{\n+    try_expr_from_text(&format!(\"{}.{}()\", caller()?, text))\n+}\n fn expr_from_text(text: &str) -> ast::Expr {\n     ast_from_text(&format!(\"const C: () = {};\", text))\n }"}]}