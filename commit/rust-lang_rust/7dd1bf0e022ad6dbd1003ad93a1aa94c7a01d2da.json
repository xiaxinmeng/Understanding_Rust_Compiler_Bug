{"sha": "7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZDFiZjBlMDIyYWQ2ZGJkMTAwM2FkOTNhMWFhOTRjN2EwMWQyZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-11T04:37:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-11T04:37:04Z"}, "message": "auto merge of #17936 : TeXitoi/rust/remove-shootout-warnings, r=alexcrichton\n\nOnly one warning remain, and I can't find a way to remove it without doing more bound checks:\r\n\r\n```\r\nshootout-nbody.rs:105:36: 105:51 warning: use of deprecated item: use iter_mut, #[warn(deprecated)] on by default\r\nshootout-nbody.rs:105             let bi = match b_slice.mut_shift_ref() {\r\n```\r\n\r\nusing `split_at_mut` may be an option, but it will do more bound checking.\r\n\r\nIf anyone have an idea, I'll update this PR.", "tree": {"sha": "95d4724ae9a18cf8cdcf082f9ebe42a328c53d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d4724ae9a18cf8cdcf082f9ebe42a328c53d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "html_url": "https://github.com/rust-lang/rust/commit/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "url": "https://api.github.com/repos/rust-lang/rust/commits/1add4dedc131d5f98d82feafe80d92ed1f3f6d49", "html_url": "https://github.com/rust-lang/rust/commit/1add4dedc131d5f98d82feafe80d92ed1f3f6d49"}, {"sha": "5653b4da17446dd2b4862c03a434b76c3e30946c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5653b4da17446dd2b4862c03a434b76c3e30946c", "html_url": "https://github.com/rust-lang/rust/commit/5653b4da17446dd2b4862c03a434b76c3e30946c"}], "stats": {"total": 64, "additions": 33, "deletions": 31}, "files": [{"sha": "4ed0de2a13883699f2ca6c684a7c0a53dd8f6c66", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "patch": "@@ -72,7 +72,7 @@ struct CreatureInfo {\n fn show_color_list(set: Vec<Color>) -> String {\n     let mut out = String::new();\n     for col in set.iter() {\n-        out.push_char(' ');\n+        out.push(' ');\n         out.push_str(col.to_string().as_slice());\n     }\n     out"}, {"sha": "e61ed474504231e4c40ef5bf4bf65765c7b98e5e", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "patch": "@@ -85,8 +85,9 @@ impl<'a> Iterator<u8> for AAGen<'a> {\n \n fn make_fasta<W: Writer, I: Iterator<u8>>(\n     wr: &mut W, header: &str, mut it: I, mut n: uint)\n+    -> std::io::IoResult<()>\n {\n-    wr.write(header.as_bytes());\n+    try!(wr.write(header.as_bytes()));\n     let mut line = [0u8, .. LINE_LENGTH + 1];\n     while n > 0 {\n         let nb = min(LINE_LENGTH, n);\n@@ -95,11 +96,12 @@ fn make_fasta<W: Writer, I: Iterator<u8>>(\n         }\n         n -= nb;\n         line[nb] = '\\n' as u8;\n-        wr.write(line[..nb+1]);\n+        try!(wr.write(line[..nb+1]));\n     }\n+    Ok(())\n }\n \n-fn run<W: Writer>(writer: &mut W) {\n+fn run<W: Writer>(writer: &mut W) -> std::io::IoResult<()> {\n     let args = os::args();\n     let args = args.as_slice();\n     let n = if os::getenv(\"RUST_BENCH\").is_some() {\n@@ -129,21 +131,22 @@ fn run<W: Writer>(writer: &mut W) {\n                         ('g', 0.1975473066391),\n                         ('t', 0.3015094502008)];\n \n-    make_fasta(writer, \">ONE Homo sapiens alu\\n\",\n-               alu.as_bytes().iter().cycle().map(|c| *c), n * 2);\n-    make_fasta(writer, \">TWO IUB ambiguity codes\\n\",\n-               AAGen::new(rng, iub), n * 3);\n-    make_fasta(writer, \">THREE Homo sapiens frequency\\n\",\n-               AAGen::new(rng, homosapiens), n * 5);\n+    try!(make_fasta(writer, \">ONE Homo sapiens alu\\n\",\n+                    alu.as_bytes().iter().cycle().map(|c| *c), n * 2));\n+    try!(make_fasta(writer, \">TWO IUB ambiguity codes\\n\",\n+                    AAGen::new(rng, iub), n * 3));\n+    try!(make_fasta(writer, \">THREE Homo sapiens frequency\\n\",\n+                    AAGen::new(rng, homosapiens), n * 5));\n \n-    writer.flush();\n+    writer.flush()\n }\n \n fn main() {\n-    if os::getenv(\"RUST_BENCH\").is_some() {\n+    let res = if os::getenv(\"RUST_BENCH\").is_some() {\n         let mut file = BufferedWriter::new(File::create(&Path::new(\"./shootout-fasta.data\")));\n-        run(&mut file);\n+        run(&mut file)\n     } else {\n-        run(&mut io::stdout());\n-    }\n+        run(&mut io::stdout())\n+    };\n+    res.unwrap()\n }"}, {"sha": "1799504eb4782eb29f9728add818c8ec969b5823", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "patch": "@@ -123,8 +123,8 @@ struct Entry {\n }\n \n struct Table {\n-    count: uint,\n-    items: Vec<Option<Box<Entry>>> }\n+    items: Vec<Option<Box<Entry>>>\n+}\n \n struct Items<'a> {\n     cur: Option<&'a Entry>,\n@@ -134,7 +134,6 @@ struct Items<'a> {\n impl Table {\n     fn new() -> Table {\n         Table {\n-            count: 0,\n             items: Vec::from_fn(TABLE_SIZE, |_| None),\n         }\n     }\n@@ -165,7 +164,7 @@ impl Table {\n         let index = key.hash() % (TABLE_SIZE as u64);\n \n         {\n-            if self.items.get(index as uint).is_none() {\n+            if self.items[index as uint].is_none() {\n                 let mut entry = box Entry {\n                     code: key,\n                     count: 0,\n@@ -178,7 +177,7 @@ impl Table {\n         }\n \n         {\n-            let entry = &mut *self.items.get_mut(index as uint).get_mut_ref();\n+            let entry = self.items.get_mut(index as uint).as_mut().unwrap();\n             if entry.code == key {\n                 c.f(&mut **entry);\n                 return;\n@@ -286,7 +285,7 @@ fn get_sequence<R: Buffer>(r: &mut R, key: &str) -> Vec<u8> {\n         res.push_all(l.as_slice().trim().as_bytes());\n     }\n     for b in res.iter_mut() {\n-        *b = b.to_ascii().to_upper().to_byte();\n+        *b = b.to_ascii().to_uppercase().to_byte();\n     }\n     res\n }"}, {"sha": "a9d0f4a82b4502ebfbecd1ae5fc0f42df3977501", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "patch": "@@ -109,8 +109,8 @@ fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n \n     for res in precalc_futures.into_iter() {\n         let (rs, is) = res.unwrap();\n-        precalc_r.push_all_move(rs);\n-        precalc_i.push_all_move(is);\n+        precalc_r.extend(rs.into_iter());\n+        precalc_i.extend(is.into_iter());\n     }\n \n     assert_eq!(precalc_r.len(), w);"}, {"sha": "8e8378641853bbe30994bc9447028b595e0953e1", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "patch": "@@ -193,9 +193,9 @@ fn is_board_unfeasible(board: u64, masks: &Vec<Vec<Vec<u64>>>) -> bool {\n // Filter the masks that we can prove to result to unfeasible board.\n fn filter_masks(masks: &mut Vec<Vec<Vec<u64>>>) {\n     for i in range(0, masks.len()) {\n-        for j in range(0, masks.get(i).len()) {\n+        for j in range(0, (*masks)[i].len()) {\n             *masks.get_mut(i).get_mut(j) =\n-                masks.get(i).get(j).iter().map(|&m| m)\n+                (*masks)[i][j].iter().map(|&m| m)\n                 .filter(|&m| !is_board_unfeasible(m, masks))\n                 .collect();\n         }\n@@ -287,12 +287,12 @@ fn search(\n     while board & (1 << i)  != 0 && i < 50 {i += 1;}\n     // the board is full: a solution is found.\n     if i >= 50 {return handle_sol(&cur, data);}\n-    let masks_at = masks.get(i);\n+    let masks_at = &masks[i];\n \n     // for every unused piece\n     for id in range(0u, 10).filter(|id| board & (1 << (id + 50)) == 0) {\n         // for each mask that fits on the board\n-        for m in masks_at.get(id).iter().filter(|&m| board & *m == 0) {\n+        for m in masks_at[id].iter().filter(|&m| board & *m == 0) {\n             // This check is too costly.\n             //if is_board_unfeasible(board | m, masks) {continue;}\n             search(masks, board | *m, i + 1, Cons(*m, &cur), data);\n@@ -306,7 +306,7 @@ fn par_search(masks: Vec<Vec<Vec<u64>>>) -> Data {\n \n     // launching the search in parallel on every masks at minimum\n     // coordinate (0,0)\n-    for m in masks.get(0).iter().flat_map(|masks_pos| masks_pos.iter()) {\n+    for m in (*masks)[0].iter().flat_map(|masks_pos| masks_pos.iter()) {\n         let masks = masks.clone();\n         let tx = tx.clone();\n         let m = *m;"}, {"sha": "3c8e83895647b0c58cfeac337bf10dee8b8f615f", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=7dd1bf0e022ad6dbd1003ad93a1aa94c7a01d2da", "patch": "@@ -133,14 +133,14 @@ fn advance(bodies: &mut [Planet, ..N_BODIES], dt: f64, steps: int) {\n \n fn energy(bodies: &[Planet, ..N_BODIES]) -> f64 {\n     let mut e = 0.0;\n-    let mut bodies = bodies.as_slice();\n+    let mut bodies = bodies.iter();\n     loop {\n-        let bi = match bodies.shift_ref() {\n+        let bi = match bodies.next() {\n             Some(bi) => bi,\n             None => break\n         };\n         e += (bi.vx * bi.vx + bi.vy * bi.vy + bi.vz * bi.vz) * bi.mass / 2.0;\n-        for bj in bodies.iter() {\n+        for bj in bodies.clone() {\n             let dx = bi.x - bj.x;\n             let dy = bi.y - bj.y;\n             let dz = bi.z - bj.z;"}]}