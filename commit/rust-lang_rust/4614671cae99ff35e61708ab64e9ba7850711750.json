{"sha": "4614671cae99ff35e61708ab64e9ba7850711750", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MTQ2NzFjYWU5OWZmMzVlNjE3MDhhYjY0ZTliYTc4NTA3MTE3NTA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-09-01T21:28:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-01-13T12:49:45Z"}, "message": "Update code to account for extern ABI requirement", "tree": {"sha": "484521562c7103cf8943221696678d2365791086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/484521562c7103cf8943221696678d2365791086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4614671cae99ff35e61708ab64e9ba7850711750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4614671cae99ff35e61708ab64e9ba7850711750", "html_url": "https://github.com/rust-lang/rust/commit/4614671cae99ff35e61708ab64e9ba7850711750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4614671cae99ff35e61708ab64e9ba7850711750/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "920b5ee722c11a86811858368c95d8d85659680a", "url": "https://api.github.com/repos/rust-lang/rust/commits/920b5ee722c11a86811858368c95d8d85659680a", "html_url": "https://github.com/rust-lang/rust/commit/920b5ee722c11a86811858368c95d8d85659680a"}], "stats": {"total": 321, "additions": 155, "deletions": 166}, "files": [{"sha": "4d1f0c47829c9b9662143f7036374465d995fdf4", "filename": "compiler/rustc_error_codes/src/error_codes/E0633.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0633.md", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0633.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0633.md?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -6,7 +6,7 @@ Erroneous code example:\n #![feature(unwind_attributes)]\n \n #[unwind()] // error: expected one argument\n-pub extern fn something() {}\n+pub extern \"C\" fn something() {}\n \n fn main() {}\n ```"}, {"sha": "6b06539a0940f73aee6bfcaff679c7a9f4b167e9", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -401,7 +401,7 @@ mod enum_keyword {}\n ///\n /// ```rust\n /// #[no_mangle]\n-/// pub extern fn callable_from_c(x: i32) -> bool {\n+/// pub extern \"C\" fn callable_from_c(x: i32) -> bool {\n ///     x % 3 == 0\n /// }\n /// ```"}, {"sha": "432fe4c33bcc461b40ce2a54a3a2f927fbc5479b", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -28,7 +28,7 @@ use crate::sync::atomic::{self, AtomicUsize, Ordering};\n \n macro_rules! weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n-        static $name: crate::sys::weak::Weak<unsafe extern fn($($t),*) -> $ret> =\n+        static $name: crate::sys::weak::Weak<unsafe extern \"C\" fn($($t),*) -> $ret> =\n             crate::sys::weak::Weak::new(concat!(stringify!($name), '\\0'));\n     )\n }"}, {"sha": "9011a7da51db8e72e8f755c953b45f6ae4199818", "filename": "src/test/codegen/debug-linkage-name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdebug-linkage-name.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -26,17 +26,17 @@ pub mod xyz {\n     // CHECK: !DISubprogram(name: \"e\",\n     // CHECK:               linkageName:\n     // CHECK-SAME:          line: 29,\n-    pub extern fn e() {}\n+    pub extern \"C\" fn e() {}\n \n     // CHECK: !DISubprogram(name: \"f\",\n     // CHECK-NOT:           linkageName:\n     // CHECK-SAME:          line: 35,\n     #[no_mangle]\n-    pub extern fn f() {}\n+    pub extern \"C\" fn f() {}\n \n     // CHECK: !DISubprogram(name: \"g\",\n     // CHECK-NOT:           linkageName:\n     // CHECK-SAME:          line: 41,\n     #[export_name = \"g\"]\n-    pub extern fn g() {}\n+    pub extern \"C\" fn g() {}\n }"}, {"sha": "a89d48ee1533ff655617e0e333a1e03bef64680b", "filename": "src/test/codegen/export-no-mangle.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -13,19 +13,19 @@ mod private {\n \n     // CHECK: void @a()\n     #[no_mangle]\n-    pub extern fn a() {}\n+    pub extern \"C\" fn a() {}\n \n     // CHECK: void @b()\n     #[export_name = \"b\"]\n-    extern fn b() {}\n+    extern \"C\" fn b() {}\n \n     // CHECK: void @c()\n     #[export_name = \"c\"]\n     #[inline]\n-    extern fn c() {}\n+    extern \"C\" fn c() {}\n \n     // CHECK: void @d()\n     #[export_name = \"d\"]\n     #[inline(always)]\n-    extern fn d() {}\n+    extern \"C\" fn d() {}\n }"}, {"sha": "9076274f45e94e19393c2ea424b88c5afa8d9bc2", "filename": "src/test/codegen/issue-47278.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Fissue-47278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Fissue-47278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-47278.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -6,4 +6,4 @@ pub struct Foo(u64);\n \n // CHECK: define {{.*}} @foo(\n #[no_mangle]\n-pub extern fn foo(_: Foo) -> Foo { loop {} }\n+pub extern \"C\" fn foo(_: Foo) -> Foo { loop {} }"}, {"sha": "2b8d3c8bc1d22bdcdcbc2d998ceb849ad1abc12d", "filename": "src/test/codegen/repr-transparent-aggregates-1.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-1.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -36,19 +36,19 @@ pub enum TeBigS {\n \n // CHECK: define void @test_BigS(%BigS* [[BIGS_RET_ATTRS:.*]], %BigS* [[BIGS_ARG_ATTRS1:.*]] byval(%BigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n-pub extern fn test_BigS(_: BigS) -> BigS { loop {} }\n+pub extern \"C\" fn test_BigS(_: BigS) -> BigS { loop {} }\n \n // CHECK: define void @test_TsBigS(%TsBigS* [[BIGS_RET_ATTRS]], %TsBigS* [[BIGS_ARG_ATTRS1]] byval(%TsBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n-pub extern fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n+pub extern \"C\" fn test_TsBigS(_: TsBigS) -> TsBigS { loop {} }\n \n // CHECK: define void @test_TuBigS(%TuBigS* [[BIGS_RET_ATTRS]], %TuBigS* [[BIGS_ARG_ATTRS1]] byval(%TuBigS) [[BIGS_ARG_ATTRS2:.*]])\n #[no_mangle]\n-pub extern fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n+pub extern \"C\" fn test_TuBigS(_: TuBigS) -> TuBigS { loop {} }\n \n // CHECK: define void @test_TeBigS(%\"TeBigS::Variant\"* [[BIGS_RET_ATTRS]], %\"TeBigS::Variant\"* [[BIGS_ARG_ATTRS1]] byval(%\"TeBigS::Variant\") [[BIGS_ARG_ATTRS2]])\n #[no_mangle]\n-pub extern fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n+pub extern \"C\" fn test_TeBigS(_: TeBigS) -> TeBigS { loop {} }\n \n \n #[derive(Clone, Copy)]\n@@ -72,16 +72,16 @@ pub enum TeBigU {\n \n // CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], %BigU* [[BIGU_ARG_ATTRS1:.*]] byval(%BigU) [[BIGU_ARG_ATTRS2:.*]])\n #[no_mangle]\n-pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n+pub extern \"C\" fn test_BigU(_: BigU) -> BigU { loop {} }\n \n // CHECK: define void @test_TsBigU(%TsBigU* [[BIGU_RET_ATTRS:.*]], %TsBigU* [[BIGU_ARG_ATTRS1]] byval(%TsBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n-pub extern fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n+pub extern \"C\" fn test_TsBigU(_: TsBigU) -> TsBigU { loop {} }\n \n // CHECK: define void @test_TuBigU(%TuBigU* [[BIGU_RET_ATTRS]], %TuBigU* [[BIGU_ARG_ATTRS1]] byval(%TuBigU) [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n-pub extern fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n+pub extern \"C\" fn test_TuBigU(_: TuBigU) -> TuBigU { loop {} }\n \n // CHECK: define void @test_TeBigU(%\"TeBigU::Variant\"* [[BIGU_RET_ATTRS]], %\"TeBigU::Variant\"* [[BIGU_ARG_ATTRS1]] byval(%\"TeBigU::Variant\") [[BIGU_ARG_ATTRS2]])\n #[no_mangle]\n-pub extern fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }\n+pub extern \"C\" fn test_TeBigU(_: TeBigU) -> TeBigU { loop {} }"}, {"sha": "29997313511b21bed74c3401704b556900725e9f", "filename": "src/test/codegen/repr-transparent.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Frepr-transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -19,36 +19,36 @@ pub struct F32(f32);\n \n // CHECK: define float @test_F32(float %_1)\n #[no_mangle]\n-pub extern fn test_F32(_: F32) -> F32 { loop {} }\n+pub extern \"C\" fn test_F32(_: F32) -> F32 { loop {} }\n \n #[repr(transparent)]\n pub struct Ptr(*mut u8);\n \n // CHECK: define i8* @test_Ptr(i8* %_1)\n #[no_mangle]\n-pub extern fn test_Ptr(_: Ptr) -> Ptr { loop {} }\n+pub extern \"C\" fn test_Ptr(_: Ptr) -> Ptr { loop {} }\n \n #[repr(transparent)]\n pub struct WithZst(u64, Zst1);\n \n // CHECK: define i64 @test_WithZst(i64 %_1)\n #[no_mangle]\n-pub extern fn test_WithZst(_: WithZst) -> WithZst { loop {} }\n+pub extern \"C\" fn test_WithZst(_: WithZst) -> WithZst { loop {} }\n \n #[repr(transparent)]\n pub struct WithZeroSizedArray(*const f32, [i8; 0]);\n \n // Apparently we use i32* when newtype-unwrapping f32 pointers. Whatever.\n // CHECK: define i32* @test_WithZeroSizedArray(i32* %_1)\n #[no_mangle]\n-pub extern fn test_WithZeroSizedArray(_: WithZeroSizedArray) -> WithZeroSizedArray { loop {} }\n+pub extern \"C\" fn test_WithZeroSizedArray(_: WithZeroSizedArray) -> WithZeroSizedArray { loop {} }\n \n #[repr(transparent)]\n pub struct Generic<T>(T);\n \n // CHECK: define double @test_Generic(double %_1)\n #[no_mangle]\n-pub extern fn test_Generic(_: Generic<f64>) -> Generic<f64> { loop {} }\n+pub extern \"C\" fn test_Generic(_: Generic<f64>) -> Generic<f64> { loop {} }\n \n #[repr(transparent)]\n pub struct GenericPlusZst<T>(T, Zst2);\n@@ -58,14 +58,14 @@ pub enum Bool { True, False, FileNotFound }\n \n // CHECK: define{{( zeroext)?}} i8 @test_Gpz(i8{{( zeroext)?}} %_1)\n #[no_mangle]\n-pub extern fn test_Gpz(_: GenericPlusZst<Bool>) -> GenericPlusZst<Bool> { loop {} }\n+pub extern \"C\" fn test_Gpz(_: GenericPlusZst<Bool>) -> GenericPlusZst<Bool> { loop {} }\n \n #[repr(transparent)]\n pub struct LifetimePhantom<'a, T: 'a>(*const T, PhantomData<&'a T>);\n \n // CHECK: define i16* @test_LifetimePhantom(i16* %_1)\n #[no_mangle]\n-pub extern fn test_LifetimePhantom(_: LifetimePhantom<i16>) -> LifetimePhantom<i16> { loop {} }\n+pub extern \"C\" fn test_LifetimePhantom(_: LifetimePhantom<i16>) -> LifetimePhantom<i16> { loop {} }\n \n // This works despite current alignment resrictions because PhantomData is always align(1)\n #[repr(transparent)]\n@@ -75,28 +75,28 @@ pub struct Px;\n \n // CHECK: define float @test_UnitPhantom(float %_1)\n #[no_mangle]\n-pub extern fn test_UnitPhantom(_: UnitPhantom<f32, Px>) -> UnitPhantom<f32, Px> { loop {} }\n+pub extern \"C\" fn test_UnitPhantom(_: UnitPhantom<f32, Px>) -> UnitPhantom<f32, Px> { loop {} }\n \n #[repr(transparent)]\n pub struct TwoZsts(Zst1, i8, Zst2);\n \n // CHECK: define{{( signext)?}} i8 @test_TwoZsts(i8{{( signext)?}} %_1)\n #[no_mangle]\n-pub extern fn test_TwoZsts(_: TwoZsts) -> TwoZsts { loop {} }\n+pub extern \"C\" fn test_TwoZsts(_: TwoZsts) -> TwoZsts { loop {} }\n \n #[repr(transparent)]\n pub struct Nested1(Zst2, Generic<f64>);\n \n // CHECK: define double @test_Nested1(double %_1)\n #[no_mangle]\n-pub extern fn test_Nested1(_: Nested1) -> Nested1 { loop {} }\n+pub extern \"C\" fn test_Nested1(_: Nested1) -> Nested1 { loop {} }\n \n #[repr(transparent)]\n pub struct Nested2(Nested1, Zst1);\n \n // CHECK: define double @test_Nested2(double %_1)\n #[no_mangle]\n-pub extern fn test_Nested2(_: Nested2) -> Nested2 { loop {} }\n+pub extern \"C\" fn test_Nested2(_: Nested2) -> Nested2 { loop {} }\n \n #[repr(simd)]\n struct f32x4(f32, f32, f32, f32);\n@@ -106,7 +106,7 @@ pub struct Vector(f32x4);\n \n // CHECK: define <4 x float> @test_Vector(<4 x float> %_1)\n #[no_mangle]\n-pub extern fn test_Vector(_: Vector) -> Vector { loop {} }\n+pub extern \"C\" fn test_Vector(_: Vector) -> Vector { loop {} }\n \n trait Mirror { type It: ?Sized; }\n impl<T: ?Sized> Mirror for T { type It = Self; }\n@@ -116,7 +116,7 @@ pub struct StructWithProjection(<f32 as Mirror>::It);\n \n // CHECK: define float @test_Projection(float %_1)\n #[no_mangle]\n-pub extern fn test_Projection(_: StructWithProjection) -> StructWithProjection { loop {} }\n+pub extern \"C\" fn test_Projection(_: StructWithProjection) -> StructWithProjection { loop {} }\n \n #[repr(transparent)]\n pub enum EnumF32 {\n@@ -125,7 +125,7 @@ pub enum EnumF32 {\n \n // CHECK: define float @test_EnumF32(float %_1)\n #[no_mangle]\n-pub extern fn test_EnumF32(_: EnumF32) -> EnumF32 { loop {} }\n+pub extern \"C\" fn test_EnumF32(_: EnumF32) -> EnumF32 { loop {} }\n \n #[repr(transparent)]\n pub enum EnumF32WithZsts {\n@@ -134,7 +134,7 @@ pub enum EnumF32WithZsts {\n \n // CHECK: define float @test_EnumF32WithZsts(float %_1)\n #[no_mangle]\n-pub extern fn test_EnumF32WithZsts(_: EnumF32WithZsts) -> EnumF32WithZsts { loop {} }\n+pub extern \"C\" fn test_EnumF32WithZsts(_: EnumF32WithZsts) -> EnumF32WithZsts { loop {} }\n \n #[repr(transparent)]\n pub union UnionF32 {\n@@ -143,7 +143,7 @@ pub union UnionF32 {\n \n // CHECK: define float @test_UnionF32(float %_1)\n #[no_mangle]\n-pub extern fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n+pub extern \"C\" fn test_UnionF32(_: UnionF32) -> UnionF32 { loop {} }\n \n #[repr(transparent)]\n pub union UnionF32WithZsts {\n@@ -154,7 +154,7 @@ pub union UnionF32WithZsts {\n \n // CHECK: define float @test_UnionF32WithZsts(float %_1)\n #[no_mangle]\n-pub extern fn test_UnionF32WithZsts(_: UnionF32WithZsts) -> UnionF32WithZsts { loop {} }\n+pub extern \"C\" fn test_UnionF32WithZsts(_: UnionF32WithZsts) -> UnionF32WithZsts { loop {} }\n \n \n // All that remains to be tested are aggregates. They are tested in separate files called repr-"}, {"sha": "7544ac01309525bdf94bc6bb9c876cb91fb59341", "filename": "src/test/codegen/target-cpu-on-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -9,7 +9,7 @@\n \n // CHECK-LABEL: define {{.*}} @exported() {{.*}} #0\n #[no_mangle]\n-pub extern fn exported() {\n+pub extern \"C\" fn exported() {\n     not_exported();\n }\n "}, {"sha": "487de20671a2c0bffda69955eab1be4ac79926b6", "filename": "src/test/codegen/unwind-extern-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-extern-exports.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -11,7 +11,7 @@\n // \"C\" ABI\n // pub extern fn foo() {} // FIXME right now we don't abort-on-panic but add `nounwind` nevertheless\n #[unwind(allowed)]\n-pub extern fn foo_allowed() {}\n+pub extern \"C\" fn foo_allowed() {}\n \n // \"Rust\"\n // (`extern \"Rust\"` could be removed as all `fn` get it implicitly; we leave it in for clarity.)"}, {"sha": "2e98abae58b3d356d5b634350dfda566919bd698", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -271,7 +271,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes,fn_sig,typeck\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n-    pub extern fn make_method_extern(&self) { }\n+    pub extern \"C\" fn make_method_extern(&self) { }\n }\n \n "}, {"sha": "4dab032e47f353fba3eaeee1a659a0f2d91856af", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -312,7 +312,7 @@ trait TraitAddExternModifier {\n trait TraitAddExternModifier {\n     #[rustc_dirty(label=\"hir_owner\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"hir_owner\", cfg=\"cfail3\")]\n-    extern fn method();\n+    extern \"C\" fn method();\n }\n \n "}, {"sha": "c4069495aaff1670d9084e004844024f095c56b4", "filename": "src/test/run-make-fulldeps/cdylib-dylib-linkage/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-dylib-linkage%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-dylib-linkage%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-dylib-linkage%2Ffoo.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,11 +3,11 @@\n extern crate bar;\n \n #[no_mangle]\n-pub extern fn foo() {\n+pub extern \"C\" fn foo() {\n     bar::bar();\n }\n \n #[no_mangle]\n-pub extern fn bar(a: u32, b: u32) -> u32 {\n+pub extern \"C\" fn bar(a: u32, b: u32) -> u32 {\n     a + b\n }"}, {"sha": "af37bc8e9534d3cc5241224b6e07c80af86a4354", "filename": "src/test/run-make-fulldeps/cdylib-fewer-symbols/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib-fewer-symbols%2Ffoo.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"cdylib\"]\n \n #[no_mangle]\n-pub extern fn foo() -> u32 {\n+pub extern \"C\" fn foo() -> u32 {\n     3\n }"}, {"sha": "c4069495aaff1670d9084e004844024f095c56b4", "filename": "src/test/run-make-fulldeps/cdylib/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcdylib%2Ffoo.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,11 +3,11 @@\n extern crate bar;\n \n #[no_mangle]\n-pub extern fn foo() {\n+pub extern \"C\" fn foo() {\n     bar::bar();\n }\n \n #[no_mangle]\n-pub extern fn bar(a: u32, b: u32) -> u32 {\n+pub extern \"C\" fn bar(a: u32, b: u32) -> u32 {\n     a + b\n }"}, {"sha": "34951dda3b6ec0236d96b401aba1d20850331ff9", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/staticlib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fstaticlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fstaticlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2Fstaticlib.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,6 +3,6 @@\n extern crate upstream;\n \n #[no_mangle]\n-pub extern fn bar() {\n+pub extern \"C\" fn bar() {\n     upstream::foo();\n }"}, {"sha": "5ab627a2ac1a282531a92a42cdacce95b489f6bd", "filename": "src/test/run-make-fulldeps/glibc-staticlib-args/library.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fglibc-staticlib-args%2Flibrary.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,4 +1,4 @@\n #[no_mangle]\n-pub extern fn args_check() {\n+pub extern \"C\" fn args_check() {\n     assert_ne!(std::env::args_os().count(), 0);\n }"}, {"sha": "7c19c1f2c678a632c43cd1db85bca5b8e2b38cca", "filename": "src/test/run-make-fulldeps/issue-14500/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-14500%2Ffoo.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,5 +1,5 @@\n #[no_mangle]\n-pub extern fn foo() {}\n+pub extern \"C\" fn foo() {}\n \n #[no_mangle]\n pub static FOO_STATIC: u8 = 0;"}, {"sha": "f2a52cb5ca1c50faff3b60499fe6a46f2c3ddeb6", "filename": "src/test/run-make-fulldeps/sanitizer-cdylib-link/library.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-cdylib-link%2Flibrary.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,5 +1,5 @@\n #[no_mangle]\n-pub extern fn overflow() {\n+pub extern \"C\" fn overflow() {\n     let xs = [0, 1, 2, 3];\n     let _y = unsafe { *xs.as_ptr().offset(4) };\n }"}, {"sha": "f2a52cb5ca1c50faff3b60499fe6a46f2c3ddeb6", "filename": "src/test/run-make-fulldeps/sanitizer-dylib-link/library.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-dylib-link%2Flibrary.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,5 +1,5 @@\n #[no_mangle]\n-pub extern fn overflow() {\n+pub extern \"C\" fn overflow() {\n     let xs = [0, 1, 2, 3];\n     let _y = unsafe { *xs.as_ptr().offset(4) };\n }"}, {"sha": "f2a52cb5ca1c50faff3b60499fe6a46f2c3ddeb6", "filename": "src/test/run-make-fulldeps/sanitizer-staticlib-link/library.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-staticlib-link%2Flibrary.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,5 +1,5 @@\n #[no_mangle]\n-pub extern fn overflow() {\n+pub extern \"C\" fn overflow() {\n     let xs = [0, 1, 2, 3];\n     let _y = unsafe { *xs.as_ptr().offset(4) };\n }"}, {"sha": "14421165e2da1367b46f3909a606c80239be27c2", "filename": "src/test/run-make-fulldeps/static-dylib-by-default/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fstatic-dylib-by-default%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fstatic-dylib-by-default%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstatic-dylib-by-default%2Fbar.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,6 +3,6 @@\n extern crate foo;\n \n #[no_mangle]\n-pub extern fn bar() {\n+pub extern \"C\" fn bar() {\n     foo::foo();\n }"}, {"sha": "6aa6e1ac3c50599a528579ff4a9e04e59674ea71", "filename": "src/test/run-make-fulldeps/std-core-cycle/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fstd-core-cycle%2Ffoo.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -6,6 +6,6 @@ extern crate bar;\n static A: bar::A = bar::A;\n \n #[no_mangle]\n-pub extern fn a(a: u32, b: u32) -> u32 {\n+pub extern \"C\" fn a(a: u32, b: u32) -> u32 {\n     a / b\n }"}, {"sha": "19b901d49a4280dccb0927c9bc95c9cd28c7fd04", "filename": "src/test/ui/abi/extern/extern-call-direct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-direct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-direct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fextern%2Fextern-call-direct.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -2,7 +2,7 @@\n // Test direct calls to extern fns.\n \n \n-extern fn f(x: usize) -> usize { x * 2 }\n+extern \"C\" fn f(x: usize) -> usize { x * 2 }\n \n pub fn main() {\n     let x = f(22);"}, {"sha": "ec6d05603578458ba6df96433330b2e844c70d97", "filename": "src/test/ui/auxiliary/lto-duplicate-symbols1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols1.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,4 +3,4 @@\n #![crate_type = \"rlib\"]\n \n #[no_mangle]\n-pub extern fn foo() {}\n+pub extern \"C\" fn foo() {}"}, {"sha": "ec6d05603578458ba6df96433330b2e844c70d97", "filename": "src/test/ui/auxiliary/lto-duplicate-symbols2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Flto-duplicate-symbols2.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,4 +3,4 @@\n #![crate_type = \"rlib\"]\n \n #[no_mangle]\n-pub extern fn foo() {}\n+pub extern \"C\" fn foo() {}"}, {"sha": "c83b3f4a5bbf0908fbd72c6188ef18a2d356d64d", "filename": "src/test/ui/consts/auxiliary/cci_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fcci_const.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,4 +1,4 @@\n-pub extern fn bar() {\n+pub extern \"C\" fn bar() {\n }\n \n pub const foopy: &'static str = \"hi there\";"}, {"sha": "2dc9539ba527b2875d13060d0588dfeec7cf9ab5", "filename": "src/test/ui/consts/auxiliary/issue-63226.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fissue-63226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fissue-63226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fissue-63226.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,5 +1,5 @@\n pub struct VTable{\n-    state:extern fn(),\n+    state:extern \"C\" fn(),\n }\n \n impl VTable{\n@@ -11,4 +11,4 @@ impl VTable{\n         &VTable{state};\n }\n \n-extern fn state() {}\n+extern \"C\" fn state() {}"}, {"sha": "abeb24121eb16ade37675c1ad03b382caafd3729", "filename": "src/test/ui/consts/const-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -7,7 +7,7 @@ struct TestStruct {\n \n unsafe impl Sync for TestStruct {}\n \n-extern fn foo() {}\n+extern \"C\" fn foo() {}\n const x: extern \"C\" fn() = foo;\n static y: TestStruct = TestStruct { x: x as *const u8 };\n "}, {"sha": "ee07dfae47c38e0a318cc18806b7a0eef9ef48ec", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-call-extern-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-call-extern-fn.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -4,16 +4,16 @@ extern \"C\" {\n     fn regular_in_block();\n }\n \n-const extern fn bar() {\n+const extern \"C\" fn bar() {\n     unsafe {\n         regular_in_block();\n         //~^ ERROR: calls in constant functions\n     }\n }\n \n-extern fn regular() {}\n+extern \"C\" fn regular() {}\n \n-const extern fn foo() {\n+const extern \"C\" fn foo() {\n     unsafe {\n         regular();\n         //~^ ERROR: calls in constant functions"}, {"sha": "76380ebcb6599b13a671da959749f61249a6da13", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,10 +1,10 @@\n #![feature(const_extern_fn)]\n \n-const extern fn unsize(x: &[u8; 3]) -> &[u8] { x }\n+const extern \"C\" fn unsize(x: &[u8; 3]) -> &[u8] { x }\n const unsafe extern \"C\" fn closure() -> fn() { || {} }\n //~^ ERROR function pointer\n //~| ERROR function pointer cast\n-const unsafe extern fn use_float() { 1.0 + 1.0; }\n+const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n //~^ ERROR floating point arithmetic\n const extern \"C\" fn ptr_cast(val: *const u8) { val as usize; }\n //~^ ERROR casting pointers to integers"}, {"sha": "80d234b0e881eefe992f83eeb265b39f5ddec67c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-min-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-min-const-fn.stderr?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -17,10 +17,10 @@ LL | const unsafe extern \"C\" fn closure() -> fn() { || {} }\n    = help: add `#![feature(const_fn_fn_ptr_basics)]` to the crate attributes to enable\n \n error[E0658]: floating point arithmetic is not allowed in constant functions\n-  --> $DIR/const-extern-fn-min-const-fn.rs:7:38\n+  --> $DIR/const-extern-fn-min-const-fn.rs:7:42\n    |\n-LL | const unsafe extern fn use_float() { 1.0 + 1.0; }\n-   |                                      ^^^^^^^^^\n+LL | const unsafe extern \"C\" fn use_float() { 1.0 + 1.0; }\n+   |                                          ^^^^^^^^^\n    |\n    = note: see issue #57241 <https://github.com/rust-lang/rust/issues/57241> for more information\n    = help: add `#![feature(const_fn_floating_point_arithmetic)]` to the crate attributes to enable"}, {"sha": "71e6c2cb85859bb6966420b4bdd04440bad4dfa7", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,6 +1,6 @@\n #![feature(const_extern_fn)]\n \n-const unsafe extern fn foo() -> usize { 5 }\n+const unsafe extern \"C\" fn foo() -> usize { 5 }\n \n fn main() {\n     let a: [u8; foo()];"}, {"sha": "2ce2eafd54507ef2b74581ff191fb5595223a761", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,15 +1,15 @@\n // run-pass\n #![feature(const_extern_fn)]\n \n-const extern fn foo1(val: u8) -> u8 {\n+const extern \"C\" fn foo1(val: u8) -> u8 {\n     val + 1\n }\n \n const extern \"C\" fn foo2(val: u8) -> u8 {\n     val + 1\n }\n \n-const unsafe extern fn bar1(val: bool) -> bool {\n+const unsafe extern \"C\" fn bar1(val: bool) -> bool {\n     !val\n }\n \n@@ -28,8 +28,8 @@ fn main() {\n     assert!(bar1_res);\n     assert_eq!(bar1_res, bar2_res);\n \n-    let _foo1_cast: extern fn(u8) -> u8 = foo1;\n-    let _foo2_cast: extern fn(u8) -> u8 = foo2;\n-    let _bar1_cast: unsafe extern fn(bool) -> bool = bar1;\n-    let _bar2_cast: unsafe extern fn(bool) -> bool = bar2;\n+    let _foo1_cast: extern \"C\" fn(u8) -> u8 = foo1;\n+    let _foo2_cast: extern \"C\" fn(u8) -> u8 = foo2;\n+    let _bar1_cast: unsafe extern \"C\" fn(bool) -> bool = bar1;\n+    let _bar2_cast: unsafe extern \"C\" fn(bool) -> bool = bar2;\n }"}, {"sha": "01f487a7d7558fa703d4756f0c051107a461e139", "filename": "src/test/ui/consts/const-extern-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-function.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n #![allow(non_upper_case_globals)]\n \n-extern fn foopy() {}\n+extern \"C\" fn foopy() {}\n \n static f: extern \"C\" fn() = foopy;\n static s: S = S { f: foopy };"}, {"sha": "c83b3f4a5bbf0908fbd72c6188ef18a2d356d64d", "filename": "src/test/ui/cross-crate/auxiliary/cci_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fcci_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fcci_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross-crate%2Fauxiliary%2Fcci_const.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,4 +1,4 @@\n-pub extern fn bar() {\n+pub extern \"C\" fn bar() {\n }\n \n pub const foopy: &'static str = \"hi there\";"}, {"sha": "e303a790bafcaf4aa4efde906cf74649e04f213b", "filename": "src/test/ui/duplicate/dupe-symbols-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -6,13 +6,13 @@\n \n pub mod a {\n     #[no_mangle]\n-    pub extern fn fail() {\n+    pub extern \"C\" fn fail() {\n     }\n }\n \n pub mod b {\n     #[no_mangle]\n-    pub extern fn fail() {\n+    pub extern \"C\" fn fail() {\n     //~^ symbol `fail` is already defined\n     }\n }"}, {"sha": "b132eae4b88d73e93eb145b2117cc14f908b070d", "filename": "src/test/ui/duplicate/dupe-symbols-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fdupe-symbols-2.stderr?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,8 +1,8 @@\n error: symbol `fail` is already defined\n   --> $DIR/dupe-symbols-2.rs:15:5\n    |\n-LL |     pub extern fn fail() {\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+LL |     pub extern \"C\" fn fail() {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "56256aa1927eebe0f3c07495a720bdedabfa6020", "filename": "src/test/ui/extern/auxiliary/extern-take-value.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern-take-value.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,5 +1,5 @@\n-pub extern fn f() -> i32 { 1 }\n-pub extern fn g() -> i32 { 2 }\n+pub extern \"C\" fn f() -> i32 { 1 }\n+pub extern \"C\" fn g() -> i32 { 2 }\n \n-pub fn get_f() -> extern fn() -> i32 { f }\n-pub fn get_g() -> extern fn() -> i32 { g }\n+pub fn get_f() -> extern \"C\" fn() -> i32 { f }\n+pub fn get_g() -> extern \"C\" fn() -> i32 { g }"}, {"sha": "e24cf9fdaa0c54b95ce213228e09da7a4ec39ad0", "filename": "src/test/ui/extern/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fauxiliary%2Fextern_calling_convention.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -15,7 +15,7 @@ pub extern \"win64\" fn foo(a: isize, b: isize, c: isize, d: isize) {\n \n #[inline(never)]\n #[cfg(not(target_arch = \"x86_64\"))]\n-pub extern fn foo(a: isize, b: isize, c: isize, d: isize) {\n+pub extern \"C\" fn foo(a: isize, b: isize, c: isize, d: isize) {\n     assert_eq!(a, 1);\n     assert_eq!(b, 2);\n     assert_eq!(c, 3);"}, {"sha": "66e560501720c6bf8107a72e6f97c3dea96228c1", "filename": "src/test/ui/extern/extern-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-1.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -2,7 +2,7 @@\n #![allow(dead_code)]\n // pretty-expanded FIXME #23616\n \n-extern fn f() {\n+extern \"C\" fn f() {\n }\n \n pub fn main() {"}, {"sha": "1ddfc77a4c43a2fc9a8ee4bf73a1adc81cbd302f", "filename": "src/test/ui/extern/extern-compare-with-return-type.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-compare-with-return-type.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,23 +3,23 @@\n #![allow(non_camel_case_types)]\n \n // `dbg!()` differentiates these functions to ensure they won't be merged.\n-extern fn voidret1() { dbg!() }\n-extern fn voidret2() { dbg!() }\n+extern \"C\" fn voidret1() { dbg!() }\n+extern \"C\" fn voidret2() { dbg!() }\n \n-extern fn uintret() -> usize { 22 }\n+extern \"C\" fn uintret() -> usize { 22 }\n \n-extern fn uintvoidret(_x: usize) {}\n+extern \"C\" fn uintvoidret(_x: usize) {}\n \n-extern fn uintuintuintuintret(x: usize, y: usize, z: usize) -> usize { x+y+z }\n-type uintuintuintuintret = extern fn(usize,usize,usize) -> usize;\n+extern \"C\" fn uintuintuintuintret(x: usize, y: usize, z: usize) -> usize { x+y+z }\n+type uintuintuintuintret = extern \"C\" fn(usize,usize,usize) -> usize;\n \n pub fn main() {\n-    assert!(voidret1 as extern fn() == voidret1 as extern fn());\n-    assert!(voidret1 as extern fn() != voidret2 as extern fn());\n+    assert!(voidret1 as extern \"C\" fn() == voidret1 as extern \"C\" fn());\n+    assert!(voidret1 as extern \"C\" fn() != voidret2 as extern \"C\" fn());\n \n-    assert!(uintret as extern fn() -> usize == uintret as extern fn() -> usize);\n+    assert!(uintret as extern \"C\" fn() -> usize == uintret as extern \"C\" fn() -> usize);\n \n-    assert!(uintvoidret as extern fn(usize) == uintvoidret as extern fn(usize));\n+    assert!(uintvoidret as extern \"C\" fn(usize) == uintvoidret as extern \"C\" fn(usize));\n \n     assert!(uintuintuintuintret as uintuintuintuintret ==\n             uintuintuintuintret as uintuintuintuintret);"}, {"sha": "bb1468a70fb1e7cc1470eb54044e078cab76fe83", "filename": "src/test/ui/extern/extern-main-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1 +1 @@\n-extern fn main() {} //~ ERROR: `main` function has wrong type [E0580]\n+extern \"C\" fn main() {} //~ ERROR: `main` function has wrong type [E0580]"}, {"sha": "136c957538248d5f9b0228630da50480b6820cfe", "filename": "src/test/ui/extern/extern-main-fn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-main-fn.stderr?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,8 +1,8 @@\n error[E0580]: `main` function has wrong type\n   --> $DIR/extern-main-fn.rs:1:1\n    |\n-LL | extern fn main() {}\n-   | ^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n+LL | extern \"C\" fn main() {}\n+   | ^^^^^^^^^^^^^^^^^^^^ expected \"Rust\" fn, found \"C\" fn\n    |\n    = note: expected fn pointer `fn()`\n               found fn pointer `extern \"C\" fn()`"}, {"sha": "97559a68442199d4fd1e73a7689304356d50c406", "filename": "src/test/ui/extern/extern-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-methods.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -5,7 +5,7 @@\n \n trait A {\n     extern \"fastcall\" fn test1(i: i32);\n-    extern fn test2(i: i32);\n+    extern \"C\" fn test2(i: i32);\n }\n \n struct S;\n@@ -19,7 +19,7 @@ impl A for S {\n     extern \"fastcall\" fn test1(i: i32) {\n         assert_eq!(i, 1);\n     }\n-    extern fn test2(i: i32) {\n+    extern \"C\" fn test2(i: i32) {\n         assert_eq!(i, 2);\n     }\n }"}, {"sha": "7cea8be59215fc44ce99ac6bf75b711a435006a6", "filename": "src/test/ui/extern/extern-rust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-rust.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -5,7 +5,7 @@\n pub struct Foo(u32);\n \n // ICE trigger, bad handling of differing types between rust and external ABIs\n-pub extern fn bar() -> Foo {\n+pub extern \"C\" fn bar() -> Foo {\n     Foo(0)\n }\n "}, {"sha": "337865ec18d51522a682f97d623ac2a977611c8b", "filename": "src/test/ui/extern/extern-wrong-value-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,4 +1,4 @@\n-extern fn f() {\n+extern \"C\" fn f() {\n }\n \n fn is_fn<F>(_: F) where F: Fn() {}"}, {"sha": "4439b4685251f5556e813f8aa297a267fb5a22d2", "filename": "src/test/ui/extern/issue-10025.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fissue-10025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fextern%2Fissue-10025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fissue-10025.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n-#![allow(dead_code)]\n // pretty-expanded FIXME #23616\n+#![allow(dead_code)]\n \n unsafe extern fn foo() {}\n unsafe extern \"C\" fn bar() {}"}, {"sha": "ace9fbdfd0c59e8376fcd74eecac0027de16109e", "filename": "src/test/ui/functions-closures/auxiliary/fn-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Ffunctions-closures%2Fauxiliary%2Ffn-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Ffunctions-closures%2Fauxiliary%2Ffn-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Fauxiliary%2Ffn-abi.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,2 +1,2 @@\n #[no_mangle]\n-pub extern fn foo() {}\n+pub extern \"C\" fn foo() {}"}, {"sha": "207d8a91b00289ac8e47baf34b48d115a29fd403", "filename": "src/test/ui/generics/generic-no-mangle.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.fixed?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -6,7 +6,7 @@\n pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n \n \n-pub extern fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+pub extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n \n #[no_mangle]\n pub fn baz(x: &i32) -> &i32 { x }"}, {"sha": "146896cdc3d024f66fb42f17352800de86a4a897", "filename": "src/test/ui/generics/generic-no-mangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -6,7 +6,7 @@\n pub fn foo<T>() {} //~ ERROR functions generic over types or consts must be mangled\n \n #[no_mangle]\n-pub extern fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n+pub extern \"C\" fn bar<T>() {} //~ ERROR functions generic over types or consts must be mangled\n \n #[no_mangle]\n pub fn baz(x: &i32) -> &i32 { x }"}, {"sha": "b437417c0b180c5f76dde70062d30d8df1675b7d", "filename": "src/test/ui/generics/generic-no-mangle.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-no-mangle.stderr?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -17,8 +17,8 @@ error: functions generic over types or consts must be mangled\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n-LL | pub extern fn bar<T>() {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub extern \"C\" fn bar<T>() {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2031196ab215eb4b240780d8d283e93052467621", "filename": "src/test/ui/hashmap/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-memory.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -23,7 +23,7 @@ mod map_reduce {\n \n     pub type putter<'a> = Box<dyn FnMut(String, String) + 'a>;\n \n-    pub type mapper = extern fn(String, putter);\n+    pub type mapper = extern \"C\" fn(String, putter);\n \n     enum ctrl_proto { find_reducer(Vec<u8>, Sender<isize>), mapper_done, }\n "}, {"sha": "a77aa5a71553ae6cc83e51d4cdf1e15dc27a0f53", "filename": "src/test/ui/issues/auxiliary/issue-13620-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-13620-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-13620-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-13620-1.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,8 +1,8 @@\n pub struct Foo {\n-    pub foo: extern fn()\n+    pub foo: extern \"C\" fn()\n }\n \n-extern fn the_foo() {}\n+extern \"C\" fn the_foo() {}\n \n pub const FOO: Foo = Foo {\n     foo: the_foo"}, {"sha": "bb915f58d9d252cb5b3f6726076d18f21f34594c", "filename": "src/test/ui/issues/issue-10764.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-10764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-10764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10764.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,5 +1,5 @@\n fn f(_: extern \"Rust\" fn()) {}\n-extern fn bar() {}\n+extern \"C\" fn bar() {}\n \n fn main() { f(bar) }\n //~^ ERROR mismatched types"}, {"sha": "dc0ecd365226cefb790ed65b0de95d63e748428b", "filename": "src/test/ui/issues/issue-15562.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-15562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-15562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15562.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -16,4 +16,4 @@ pub fn main() {\n // The above extern is NOT `extern \"rust-intrinsic\"` and thus\n // means it'll try to find a corresponding symbol to link to.\n #[no_mangle]\n-pub extern fn transmute() {}\n+pub extern \"C\" fn transmute() {}"}, {"sha": "3653e62732d419903da02616a1cebdc792632728", "filename": "src/test/ui/issues/issue-26997.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -7,7 +7,7 @@ pub struct Foo {\n \n impl Foo {\n     #[allow(improper_ctypes_definitions)]\n-    pub extern fn foo_new() -> Foo {\n+    pub extern \"C\" fn foo_new() -> Foo {\n         Foo { x: 21, y: 33 }\n     }\n }"}, {"sha": "52db0d5fd84a9520bc0b5e5798a39c7c0d6284cb", "filename": "src/test/ui/issues/issue-28600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -7,7 +7,7 @@ impl Test {\n     #[allow(dead_code)]\n     #[allow(unused_variables)]\n     #[allow(improper_ctypes_definitions)]\n-    pub extern fn test(val: &str) {\n+    pub extern \"C\" fn test(val: &str) {\n \n     }\n }"}, {"sha": "9378f4357134b001e29611bac30e31f8f5354840", "filename": "src/test/ui/issues/issue-51907.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,15 +1,15 @@\n // run-pass\n trait Foo {\n-    extern fn borrow(&self);\n-    extern fn take(self: Box<Self>);\n+    extern \"C\" fn borrow(&self);\n+    extern \"C\" fn take(self: Box<Self>);\n }\n \n struct Bar;\n impl Foo for Bar {\n     #[allow(improper_ctypes_definitions)]\n-    extern fn borrow(&self) {}\n+    extern \"C\" fn borrow(&self) {}\n     #[allow(improper_ctypes_definitions)]\n-    extern fn take(self: Box<Self>) {}\n+    extern \"C\" fn take(self: Box<Self>) {}\n }\n \n fn main() {"}, {"sha": "e69d0dab49642267dc7e8a87f600cf4221081ed3", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -27,7 +27,7 @@ pub struct ZeroSize;\n \n pub type RustFn = fn();\n \n-pub type RustBadRet = extern fn() -> Box<u32>;\n+pub type RustBadRet = extern \"C\" fn() -> Box<u32>;\n \n pub type CVoidRet = ();\n \n@@ -116,17 +116,17 @@ pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n \n pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n \n-pub extern \"C\" fn good3(fptr: Option<extern fn()>) { }\n+pub extern \"C\" fn good3(fptr: Option<extern \"C\" fn()>) { }\n \n pub extern \"C\" fn good4(aptr: &[u8; 4 as usize]) { }\n \n pub extern \"C\" fn good5(s: StructWithProjection) { }\n \n pub extern \"C\" fn good6(s: StructWithProjectionAndLifetime) { }\n \n-pub extern \"C\" fn good7(fptr: extern fn() -> ()) { }\n+pub extern \"C\" fn good7(fptr: extern \"C\" fn() -> ()) { }\n \n-pub extern \"C\" fn good8(fptr: extern fn() -> !) { }\n+pub extern \"C\" fn good8(fptr: extern \"C\" fn() -> !) { }\n \n pub extern \"C\" fn good9() -> () { }\n "}, {"sha": "6a5a4dace6492008f3b4f8f9401ab15b0b7d8bcc", "filename": "src/test/ui/mir/mir_codegen_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -75,7 +75,7 @@ fn test8() -> isize {\n }\n \n #[allow(improper_ctypes_definitions)]\n-extern fn simple_extern(x: u32, y: (u32, u32)) -> u32 {\n+extern \"C\" fn simple_extern(x: u32, y: (u32, u32)) -> u32 {\n     x + y.0 * y.1\n }\n "}, {"sha": "c22b44ffca2a4e354fab2cd7ecfaedda8791510d", "filename": "src/test/ui/no_owned_box_lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     let x = box 1i32;\n }\n \n-#[lang = \"eh_personality\"] extern fn eh_personality() {}\n+#[lang = \"eh_personality\"] extern \"C\" fn eh_personality() {}\n #[lang = \"eh_catch_typeinfo\"] static EH_CATCH_TYPEINFO: u8 = 0;\n #[lang = \"panic_impl\"] fn panic_impl(panic: &PanicInfo) -> ! { loop {} }"}, {"sha": "0384553b6993f7c46ebfe4bd01d4a0d0a9e77dd4", "filename": "src/test/ui/nullable-pointer-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnullable-pointer-size.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -31,5 +31,5 @@ macro_rules! check_type {\n pub fn main() {\n     check_type!(&'static isize);\n     check_type!(Box<isize>);\n-    check_type!(extern fn());\n+    check_type!(extern \"C\" fn());\n }"}, {"sha": "c92015eeebcc2775136004a87c8e37eaf2f0f9de", "filename": "src/test/ui/panic-runtime/auxiliary/panic-runtime-abort.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-abort.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -8,10 +8,10 @@\n #![panic_runtime]\n \n #[no_mangle]\n-pub extern fn __rust_maybe_catch_panic() {}\n+pub extern \"C\" fn __rust_maybe_catch_panic() {}\n \n #[no_mangle]\n-pub extern fn __rust_start_panic() {}\n+pub extern \"C\" fn __rust_start_panic() {}\n \n #[no_mangle]\n-pub extern fn rust_eh_personality() {}\n+pub extern \"C\" fn rust_eh_personality() {}"}, {"sha": "2f7aed9248a0696bc6494fdbbc1d4980a32cdb42", "filename": "src/test/ui/panic-runtime/auxiliary/panic-runtime-unwind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-unwind.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -8,10 +8,10 @@\n #![panic_runtime]\n \n #[no_mangle]\n-pub extern fn __rust_maybe_catch_panic() {}\n+pub extern \"C\" fn __rust_maybe_catch_panic() {}\n \n #[no_mangle]\n-pub extern fn __rust_start_panic() {}\n+pub extern \"C\" fn __rust_start_panic() {}\n \n #[no_mangle]\n-pub extern fn rust_eh_personality() {}\n+pub extern \"C\" fn rust_eh_personality() {}"}, {"sha": "2f7aed9248a0696bc6494fdbbc1d4980a32cdb42", "filename": "src/test/ui/panic-runtime/auxiliary/panic-runtime-unwind2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-unwind2.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -8,10 +8,10 @@\n #![panic_runtime]\n \n #[no_mangle]\n-pub extern fn __rust_maybe_catch_panic() {}\n+pub extern \"C\" fn __rust_maybe_catch_panic() {}\n \n #[no_mangle]\n-pub extern fn __rust_start_panic() {}\n+pub extern \"C\" fn __rust_start_panic() {}\n \n #[no_mangle]\n-pub extern fn rust_eh_personality() {}\n+pub extern \"C\" fn rust_eh_personality() {}"}, {"sha": "9b596571481b9653b1ebe13044bc7316c750a746", "filename": "src/test/ui/parser/bad-lit-suffixes.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-lit-suffixes.stderr?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -110,16 +110,5 @@ LL |     1.0e10suffix;\n    |\n    = help: valid suffixes are `f32` and `f64`\n \n-error: extern declarations without an explicit ABI are deprecated\n-  --> $DIR/bad-lit-suffixes.rs:5:1\n-   |\n-LL | / extern\n-LL | |     \"C\"suffix\n-LL | | {}\n-   | |__^ ABI should be specified here\n-   |\n-   = note: `#[deny(missing_abi)]` on by default\n-   = help: the default ABI is C\n-\n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n "}, {"sha": "e08928716b05b12896b4921a7da917aaeebda825", "filename": "src/test/ui/proc-macro/signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -7,7 +7,7 @@\n extern crate proc_macro;\n \n #[proc_macro_derive(A)]\n-pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n+pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n     //~^ ERROR: mismatched types\n     loop {}\n }"}, {"sha": "80a459c41257fab71d9309952db32d518c857f08", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/signature.rs:10:1\n    |\n-LL | / pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n+LL | / pub unsafe extern \"C\" fn foo(a: i32, b: u32) -> u32 {\n LL | |\n LL | |     loop {}\n LL | | }"}, {"sha": "0c7358655582285d87c88d31c83b24c11f4743c8", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -35,7 +35,7 @@ fn c() {\n }\n \n #[recollect_attr]\n-extern fn bar() {\n+extern \"C\" fn bar() {\n     0 //~ ERROR mismatched types\n }\n "}, {"sha": "9e91ed4068b1fb8df8fee5e0cd19e61c80c4cb43", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -37,8 +37,8 @@ LL |     let y = Foo { a: 10, b: 10isize };\n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:39:5\n    |\n-LL | extern fn bar() {\n-   |                 - possibly return type missing here?\n+LL | extern \"C\" fn bar() {\n+   |                     - possibly return type missing here?\n LL |     0\n    |     ^ expected `()`, found integer\n "}, {"sha": "ab1a025b521a95e93606bb0ce56613c9b322b684", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -13,7 +13,7 @@ use core::ops::RangeBounds;\n \n #[cfg(any(not(target_arch = \"wasm32\"), target_os = \"emscripten\"))]\n #[lang = \"eh_personality\"]\n-extern fn eh_personality() {}\n+extern \"C\" fn eh_personality() {}\n #[cfg(target_os = \"emscripten\")]\n #[lang = \"eh_catch_typeinfo\"]\n static EH_CATCH_TYPEINFO: u8 = 0;"}, {"sha": "8a6d738959e4c1dceb52f3e9d4d0c5fc9ed901dd", "filename": "src/test/ui/signal-alternate-stack-cleanup.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fsignal-alternate-stack-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fsignal-alternate-stack-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsignal-alternate-stack-cleanup.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -13,11 +13,11 @@ extern crate libc;\n \n use libc::*;\n \n-unsafe extern fn signal_handler(signum: c_int, _: *mut siginfo_t, _: *mut c_void) {\n+unsafe extern \"C\" fn signal_handler(signum: c_int, _: *mut siginfo_t, _: *mut c_void) {\n     assert_eq!(signum, SIGWINCH);\n }\n \n-extern fn send_signal() {\n+extern \"C\" fn send_signal() {\n     unsafe {\n         raise(SIGWINCH);\n     }"}, {"sha": "583a5e24098590e9a6ed7591d7659349e8ea4187", "filename": "src/test/ui/structs-enums/class-dtor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fclass-dtor.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -5,7 +5,7 @@\n // pretty-expanded FIXME #23616\n \n struct cat {\n-  done : extern fn(usize),\n+  done : extern \"C\" fn(usize),\n   meows : usize,\n }\n \n@@ -15,7 +15,7 @@ impl Drop for cat {\n     }\n }\n \n-fn cat(done: extern fn(usize)) -> cat {\n+fn cat(done: extern \"C\" fn(usize)) -> cat {\n     cat {\n         meows: 0,\n         done: done"}, {"sha": "24bdf6d669e881a9b9bb3a64ed1fdd6eace4f0bb", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -60,7 +60,7 @@ fn main() {\n         }\n \n         // Test type mangling, by putting them in an `impl` header.\n-        impl Bar for [&'_ (dyn Foo<Assoc = extern fn(&u8, ...)> + AutoTrait); 3] {\n+        impl Bar for [&'_ (dyn Foo<Assoc = extern \"C\" fn(&u8, ...)> + AutoTrait); 3] {\n             #[rustc_symbol_name]\n             //[legacy]~^ ERROR symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n             //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method"}, {"sha": "ca2f24d379bc6ce2458832e47717bae209d1245d", "filename": "src/test/ui/type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Ftype-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Ftype-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-param.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -6,6 +6,6 @@\n \n // pretty-expanded FIXME #23616\n \n-type lteq<T> = extern fn(T) -> bool;\n+type lteq<T> = extern \"C\" fn(T) -> bool;\n \n pub fn main() { }"}, {"sha": "53475d2804794a620171d42cef0abc42ba7b395b", "filename": "src/test/ui/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-params-in-for-each.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -14,7 +14,7 @@ fn range_<F>(lo: usize, hi: usize, mut it: F) where F: FnMut(usize) {\n     while lo_ < hi { it(lo_); lo_ += 1; }\n }\n \n-fn create_index<T>(_index: Vec<S<T>> , _hash_fn: extern fn(T) -> usize) {\n+fn create_index<T>(_index: Vec<S<T>> , _hash_fn: extern \"C\" fn(T) -> usize) {\n     range_(0, 256, |_i| {\n         let _bucket: Vec<T> = Vec::new();\n     })"}, {"sha": "77b5ead26337a72ece43747368f55d7e2ed743a9", "filename": "src/test/ui/unique/unique-ffi-symbols.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Funique%2Funique-ffi-symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4614671cae99ff35e61708ab64e9ba7850711750/src%2Ftest%2Fui%2Funique%2Funique-ffi-symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funique%2Funique-ffi-symbols.rs?ref=4614671cae99ff35e61708ab64e9ba7850711750", "patch": "@@ -3,12 +3,12 @@\n // whenever the item path wasn't enough to disambiguate between them.\n fn main() {\n     let a = {\n-        extern fn good() -> i32 { return 0; }\n-        good as extern fn() -> i32\n+        extern \"C\" fn good() -> i32 { return 0; }\n+        good as extern \"C\" fn() -> i32\n     };\n     let b = {\n-        extern fn good() -> i32 { return 5; }\n-        good as extern fn() -> i32\n+        extern \"C\" fn good() -> i32 { return 5; }\n+        good as extern \"C\" fn() -> i32\n     };\n \n     assert!(a != b);"}]}