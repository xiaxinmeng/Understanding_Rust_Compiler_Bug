{"sha": "de7abcf6d3d2d0928fa03a7522e23f4aba0d5254", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2FiY2Y2ZDNkMmQwOTI4ZmEwM2E3NTIyZTIzZjRhYmEwZDUyNTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:09Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:27:34Z"}, "message": "rollup merge of #20014: kballard/unsized-marker-type-params\n\nTweak CovariantType, ContravariantType, and InvariantType to allow their\ntype parameter to be unsized.", "tree": {"sha": "88b1f4c9b7d4f7c3e0bc27ae7dce4cb355fad75a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b1f4c9b7d4f7c3e0bc27ae7dce4cb355fad75a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7abcf6d3d2d0928fa03a7522e23f4aba0d5254", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7abcf6d3d2d0928fa03a7522e23f4aba0d5254", "html_url": "https://github.com/rust-lang/rust/commit/de7abcf6d3d2d0928fa03a7522e23f4aba0d5254", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7abcf6d3d2d0928fa03a7522e23f4aba0d5254/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85", "html_url": "https://github.com/rust-lang/rust/commit/fc40812b0f7a07834b2ad557ec3d5a0e98e80f85"}, {"sha": "14a5992ef614a76cd36972191ea4507a3d3daccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/14a5992ef614a76cd36972191ea4507a3d3daccb", "html_url": "https://github.com/rust-lang/rust/commit/14a5992ef614a76cd36972191ea4507a3d3daccb"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "b0f46e3d68c908a1850962274d83ba5007f03945", "filename": "src/libcore/kinds.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/de7abcf6d3d2d0928fa03a7522e23f4aba0d5254/src%2Flibcore%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7abcf6d3d2d0928fa03a7522e23f4aba0d5254/src%2Flibcore%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fkinds.rs?ref=de7abcf6d3d2d0928fa03a7522e23f4aba0d5254", "patch": "@@ -91,7 +91,8 @@ pub trait Sync for Sized? {\n /// implemented using unsafe code. In that case, you may want to embed\n /// some of the marker types below into your type.\n pub mod marker {\n-    use super::Copy;\n+    use super::{Copy,Sized};\n+    use clone::Clone;\n \n     /// A marker type whose type parameter `T` is considered to be\n     /// covariant with respect to the type itself. This is (typically)\n@@ -131,10 +132,13 @@ pub mod marker {\n     /// (for example, `S<&'static int>` is a subtype of `S<&'a int>`\n     /// for some lifetime `'a`, but not the other way around).\n     #[lang=\"covariant_type\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    pub struct CovariantType<T>;\n+    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    pub struct CovariantType<Sized? T>;\n \n-    impl<T> Copy for CovariantType<T> {}\n+    impl<Sized? T> Copy for CovariantType<T> {}\n+    impl<Sized? T> Clone for CovariantType<T> {\n+        fn clone(&self) -> CovariantType<T> { *self }\n+    }\n \n     /// A marker type whose type parameter `T` is considered to be\n     /// contravariant with respect to the type itself. This is (typically)\n@@ -176,10 +180,13 @@ pub mod marker {\n     /// function requires arguments of type `T`, it must also accept\n     /// arguments of type `U`, hence such a conversion is safe.\n     #[lang=\"contravariant_type\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    pub struct ContravariantType<T>;\n+    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    pub struct ContravariantType<Sized? T>;\n \n-    impl<T> Copy for ContravariantType<T> {}\n+    impl<Sized? T> Copy for ContravariantType<T> {}\n+    impl<Sized? T> Clone for ContravariantType<T> {\n+        fn clone(&self) -> ContravariantType<T> { *self }\n+    }\n \n     /// A marker type whose type parameter `T` is considered to be\n     /// invariant with respect to the type itself. This is (typically)\n@@ -203,10 +210,13 @@ pub mod marker {\n     /// never written, but in fact `Cell` uses unsafe code to achieve\n     /// interior mutability.\n     #[lang=\"invariant_type\"]\n-    #[deriving(Clone, PartialEq, Eq, PartialOrd, Ord)]\n-    pub struct InvariantType<T>;\n+    #[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+    pub struct InvariantType<Sized? T>;\n \n-    impl<T> Copy for InvariantType<T> {}\n+    impl<Sized? T> Copy for InvariantType<T> {}\n+    impl<Sized? T> Clone for InvariantType<T> {\n+        fn clone(&self) -> InvariantType<T> { *self }\n+    }\n \n     /// As `CovariantType`, but for lifetime parameters. Using\n     /// `CovariantLifetime<'a>` indicates that it is ok to substitute"}]}