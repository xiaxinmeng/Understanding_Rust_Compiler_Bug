{"sha": "11354963b3c532f0e4465be62191772398c14c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMzU0OTYzYjNjNTMyZjBlNDQ2NWJlNjIxOTE3NzIzOThjMTRjNzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-03T01:33:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-03T01:35:29Z"}, "message": "rustc: Hack around some FFI bustage. Unbreak servo", "tree": {"sha": "ccf93ad9a67a6f7cd3d4162b11dfa168b6f1f6bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccf93ad9a67a6f7cd3d4162b11dfa168b6f1f6bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11354963b3c532f0e4465be62191772398c14c70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11354963b3c532f0e4465be62191772398c14c70", "html_url": "https://github.com/rust-lang/rust/commit/11354963b3c532f0e4465be62191772398c14c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11354963b3c532f0e4465be62191772398c14c70/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e410f6206cee9f75cc156fba1e467cad8f16fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e410f6206cee9f75cc156fba1e467cad8f16fdc", "html_url": "https://github.com/rust-lang/rust/commit/1e410f6206cee9f75cc156fba1e467cad8f16fdc"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "97e439f235bd8bcab29a9b066464969cdbc08b14", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11354963b3c532f0e4465be62191772398c14c70/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11354963b3c532f0e4465be62191772398c14c70/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=11354963b3c532f0e4465be62191772398c14c70", "patch": "@@ -766,6 +766,7 @@ native mod llvm {\n     fn LLVMAddTargetData(TD: TargetDataRef, PM: PassManagerRef);\n     /** Returns the size of a type. FIXME: rv is actually a C_Ulonglong! */\n     fn LLVMStoreSizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n+    fn LLVMABISizeOfType(TD: TargetDataRef, Ty: TypeRef) -> c_uint;\n     /** Returns the preferred alignment of a type. */\n     fn LLVMPreferredAlignmentOfType(TD: TargetDataRef,\n                                     Ty: TypeRef) -> c_uint;"}, {"sha": "1af4cf7fd8b0771597cd62966a4c2ebe981cc560", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/11354963b3c532f0e4465be62191772398c14c70/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11354963b3c532f0e4465be62191772398c14c70/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=11354963b3c532f0e4465be62191772398c14c70", "patch": "@@ -81,6 +81,10 @@ fn classify_ty(ty: TypeRef) -> [x86_64_reg_class] {\n                     uint::max(a, ty_align(t))\n                 }\n             }\n+            11 /* array */ {\n+                let elt = llvm::LLVMGetElementType(ty);\n+                ty_align(elt)\n+            }\n             _ {\n                 fail \"ty_size: unhandled type\"\n             }\n@@ -100,6 +104,12 @@ fn classify_ty(ty: TypeRef) -> [x86_64_reg_class] {\n                     s + ty_size(t)\n                 }\n             }\n+            11 /* array */ {\n+              let len = llvm::LLVMGetArrayLength(ty) as uint;\n+              let elt = llvm::LLVMGetElementType(ty);\n+              let eltsz = ty_size(elt);\n+              len * eltsz\n+            }\n             _ {\n                 fail \"ty_size: unhandled type\"\n             }\n@@ -187,6 +197,16 @@ fn classify_ty(ty: TypeRef) -> [x86_64_reg_class] {\n             10 /* struct */ {\n                 classify_struct(struct_tys(ty), cls, i, off);\n             }\n+            11 /* array */ {\n+              // FIXME: I HAVE NO IDEA WHAT I AM DOING THIS MUST BE WRONG\n+              let len = llvm::LLVMGetArrayLength(ty) as uint;\n+              if len == 0u {\n+              } else {\n+                  let elt = llvm::LLVMGetElementType(ty);\n+                  let tys = vec::from_elem(len, elt);\n+                  classify_struct(tys, cls, i, off);\n+              }\n+            }\n             _ {\n                 fail \"classify: unhandled type\";\n             }"}, {"sha": "68166cbf7288ff4f2568c435bf7bce89b1fe97eb", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11354963b3c532f0e4465be62191772398c14c70/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11354963b3c532f0e4465be62191772398c14c70/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=11354963b3c532f0e4465be62191772398c14c70", "patch": "@@ -630,6 +630,10 @@ fn llsize_of_real(cx: @crate_ctxt, t: TypeRef) -> uint {\n     ret llvm::LLVMStoreSizeOfType(cx.td.lltd, t) as uint;\n }\n \n+fn llsize_of_alloc(cx: @crate_ctxt, t: TypeRef) -> uint {\n+    ret llvm::LLVMABISizeOfType(cx.td.lltd, t) as uint;\n+}\n+\n // Returns the preferred alignment of the given type for the current target.\n // The preffered alignment may be larger than the alignment used when\n // packing the type into structs"}, {"sha": "2661ebebc199adc2891bf1dcf01529607dd55369", "filename": "src/test/run-pass/native-struct.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11354963b3c532f0e4465be62191772398c14c70/src%2Ftest%2Frun-pass%2Fnative-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11354963b3c532f0e4465be62191772398c14c70/src%2Ftest%2Frun-pass%2Fnative-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnative-struct.rs?ref=11354963b3c532f0e4465be62191772398c14c70", "patch": "@@ -0,0 +1,10 @@\n+// Passing enums by value\n+\n+enum void { }\n+\n+#[nolink]\n+native mod bindgen {\n+    fn printf(++v: void);\n+}\n+\n+fn main() { }"}]}