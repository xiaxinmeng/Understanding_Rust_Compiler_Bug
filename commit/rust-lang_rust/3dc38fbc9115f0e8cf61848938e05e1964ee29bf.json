{"sha": "3dc38fbc9115f0e8cf61848938e05e1964ee29bf", "node_id": "C_kwDOAAsO6NoAKDNkYzM4ZmJjOTExNWYwZThjZjYxODQ4OTM4ZTA1ZTE5NjRlZTI5YmY", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-17T15:55:07Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T17:35:35Z"}, "message": "Switch from for-loop to filter_map", "tree": {"sha": "3930e5008da76b859f68df090d6e0c57dba1e3c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3930e5008da76b859f68df090d6e0c57dba1e3c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc38fbc9115f0e8cf61848938e05e1964ee29bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPyXecACgkQ0XoHIV9o\n5xMgqw//Qx9P4BgCNeLuRalAqXVgTvu6tQh4IBleO14S9UgVwJp8OcOqZc2lgByN\nX/h6YPlsN9OCi7HjLkMDSsEvUDuZvUua9Z5nybFPYzpoPM1VSfke9ZB8Q32Ai8t1\n1hkyfH6Zh1nLZjDIc7q0fblX9CIGetfvnX+DDnDYKaLacrnc6vJ971nYyIzbMn8z\nlO1uC+t5ZvOC1nZaMX/oE03JVxcrJn4CfNCYqiaL0KVgy9qe7m1hj0QoEu3WCO/z\nuGSUMLgh+iMJmsvxZTYZStiL0HlOP6NjdxBZ8a3jbBULc08LF7bCyP1e9GmxF+30\nIMx0idArwPqOVgIO2v59odCR58HystVmD43+GHL2Vaast6ItgOQzUYyfFlcJi8YD\nKaXNYnQZqSN3xDJtAzR3Z/f+83u7i6/QKBLG/4/K8jhR/2XtW41ha/9d3gfCI4eS\nXO0kL3qZme/IiR/tb+zZ90DWdHGM2duBOKdZm8zuJkRBnTipdjqkCnO1e/i2wmRL\nQwrQXvO/xjasoKzgmbIAUPivmHjHas5E7liMHGohZNWoWhaQ/ssJpDjdNxNoi3Ui\nuLHVSu53pdm3E5nzYn89E5z1kUxDBcmbkhlBGzDLUugWy5xCKoA2lG3DYeZbp0DA\necBu1UJrqG6GFG1C1xdHrVfYcq7d78CHMv4ZhULC0IswFVcr5uE=\n=LIZc\n-----END PGP SIGNATURE-----", "payload": "tree 3930e5008da76b859f68df090d6e0c57dba1e3c4\nparent b5e73bfe90f7b4905829f1a6509b61ac5577ee07\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676649307 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676828135 +0100\n\nSwitch from for-loop to filter_map\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc38fbc9115f0e8cf61848938e05e1964ee29bf", "html_url": "https://github.com/rust-lang/rust/commit/3dc38fbc9115f0e8cf61848938e05e1964ee29bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc38fbc9115f0e8cf61848938e05e1964ee29bf/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5e73bfe90f7b4905829f1a6509b61ac5577ee07", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e73bfe90f7b4905829f1a6509b61ac5577ee07", "html_url": "https://github.com/rust-lang/rust/commit/b5e73bfe90f7b4905829f1a6509b61ac5577ee07"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "c8ff609dea555be0b7b53985d8ba218d584e7048", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3dc38fbc9115f0e8cf61848938e05e1964ee29bf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc38fbc9115f0e8cf61848938e05e1964ee29bf/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3dc38fbc9115f0e8cf61848938e05e1964ee29bf", "patch": "@@ -2232,41 +2232,40 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let param_env = tcx.param_env(block.owner.to_def_id());\n         let cause = ObligationCause::misc(span, block.owner.def_id);\n         let mut fulfillment_errors = Vec::new();\n-        let mut applicable_candidates = Vec::new();\n-\n-        for &(impl_, (assoc_item, def_scope)) in &candidates {\n-            let ocx = ObligationCtxt::new(&infcx);\n+        let mut applicable_candidates: Vec<_> = candidates\n+            .iter()\n+            .filter_map(|&(impl_, (assoc_item, def_scope))| {\n+                let ocx = ObligationCtxt::new(&infcx);\n \n-            let impl_ty = tcx.type_of(impl_);\n-            let impl_substs = self.fresh_item_substs(impl_, &infcx);\n-            let impl_ty = impl_ty.subst(tcx, impl_substs);\n-            let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n+                let impl_ty = tcx.type_of(impl_);\n+                let impl_substs = self.fresh_item_substs(impl_, &infcx);\n+                let impl_ty = impl_ty.subst(tcx, impl_substs);\n+                let impl_ty = ocx.normalize(&cause, param_env, impl_ty);\n \n-            // Check that the Self-types can be related.\n-            // FIXME(fmease): Should we use `eq` here?\n-            if ocx.sup(&ObligationCause::dummy(), param_env, impl_ty, self_ty).is_err() {\n-                continue;\n-            }\n+                // Check that the Self-types can be related.\n+                // FIXME(fmease): Should we use `eq` here?\n+                ocx.sup(&ObligationCause::dummy(), param_env, impl_ty, self_ty).ok()?;\n \n-            // Check whether the impl imposes obligations we have to worry about.\n-            let impl_bounds = tcx.predicates_of(impl_);\n-            let impl_bounds = impl_bounds.instantiate(tcx, impl_substs);\n+                // Check whether the impl imposes obligations we have to worry about.\n+                let impl_bounds = tcx.predicates_of(impl_);\n+                let impl_bounds = impl_bounds.instantiate(tcx, impl_substs);\n \n-            let impl_bounds = ocx.normalize(&cause, param_env, impl_bounds);\n+                let impl_bounds = ocx.normalize(&cause, param_env, impl_bounds);\n \n-            let impl_obligations =\n-                traits::predicates_for_generics(|_, _| cause.clone(), param_env, impl_bounds);\n+                let impl_obligations =\n+                    traits::predicates_for_generics(|_, _| cause.clone(), param_env, impl_bounds);\n \n-            ocx.register_obligations(impl_obligations);\n+                ocx.register_obligations(impl_obligations);\n \n-            let errors = ocx.select_where_possible();\n-            if !errors.is_empty() {\n-                fulfillment_errors = errors;\n-                continue;\n-            }\n+                let errors = ocx.select_where_possible();\n+                if !errors.is_empty() {\n+                    fulfillment_errors = errors;\n+                    return None;\n+                }\n \n-            applicable_candidates.push((assoc_item, def_scope));\n-        }\n+                Some((assoc_item, def_scope))\n+            })\n+            .collect();\n \n         if applicable_candidates.len() > 1 {\n             return Err(self.complain_about_ambiguous_inherent_assoc_type("}]}