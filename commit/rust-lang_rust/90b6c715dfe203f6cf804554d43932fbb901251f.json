{"sha": "90b6c715dfe203f6cf804554d43932fbb901251f", "node_id": "C_kwDOAAsO6NoAKDkwYjZjNzE1ZGZlMjAzZjZjZjgwNDU1NGQ0MzkzMmZiYjkwMTI1MWY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-28T05:01:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-28T05:01:11Z"}, "message": "Rollup merge of #109682 - clubby789:c-str-inline, r=scottmcm\n\nAdd `#[inline]` to CStr trait implementations\n\nFixes #109674\n\nI noticed other usages of traits on `CStr` weren't being inlined, so also added hints to the other implementations", "tree": {"sha": "0f9035b72deaf1499f0533fe4d6759d4c729ab37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f9035b72deaf1499f0533fe4d6759d4c729ab37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90b6c715dfe203f6cf804554d43932fbb901251f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkInSXCRBK7hj4Ov3rIwAA32cIACMBDat2QRB8b0LYK1ZJymjE\nPd8rJbP1jZpceiIbwTVJAE5b4UkNumPgjfTPB1YANRXu9XinZZTyD9usNGUjptXo\nsSf2nbgQ6qy21/ptCWkHhDNQQuUyYcjX8GtEcMH9BpxFBr6Jbv+8p0H0wVpiqKYb\ndI6ot7xf+DRgy6fQ6w0PEaBgg0D9pNRO6noZqjfiq9OBgSGmozO30vbdJN25GmKj\n2ell/L384MsnJnitXrMarcq0o5/UHV084452GLy0z/vxNi6cy9jAXwvVtmikmWLF\nlNtpxil83/nweXg8P4x5zW0NODx5GE2H7cEdaSHmAaoYrxlpDzwquO9HXu4v0m8=\n=40eR\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f9035b72deaf1499f0533fe4d6759d4c729ab37\nparent fceb3d49f4c1eab9a6768730b4f653715a4bc6a3\nparent 901f10899c32db30f36afe9908284737ad5775e9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679979671 +0200\ncommitter GitHub <noreply@github.com> 1679979671 +0200\n\nRollup merge of #109682 - clubby789:c-str-inline, r=scottmcm\n\nAdd `#[inline]` to CStr trait implementations\n\nFixes #109674\n\nI noticed other usages of traits on `CStr` weren't being inlined, so also added hints to the other implementations\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90b6c715dfe203f6cf804554d43932fbb901251f", "html_url": "https://github.com/rust-lang/rust/commit/90b6c715dfe203f6cf804554d43932fbb901251f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90b6c715dfe203f6cf804554d43932fbb901251f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fceb3d49f4c1eab9a6768730b4f653715a4bc6a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fceb3d49f4c1eab9a6768730b4f653715a4bc6a3", "html_url": "https://github.com/rust-lang/rust/commit/fceb3d49f4c1eab9a6768730b4f653715a4bc6a3"}, {"sha": "901f10899c32db30f36afe9908284737ad5775e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/901f10899c32db30f36afe9908284737ad5775e9", "html_url": "https://github.com/rust-lang/rust/commit/901f10899c32db30f36afe9908284737ad5775e9"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "4a5306ccaa7923f60632b428782fdd27bff0cf24", "filename": "library/core/src/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90b6c715dfe203f6cf804554d43932fbb901251f/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b6c715dfe203f6cf804554d43932fbb901251f/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fc_str.rs?ref=90b6c715dfe203f6cf804554d43932fbb901251f", "patch": "@@ -172,6 +172,7 @@ impl fmt::Debug for CStr {\n \n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n impl Default for &CStr {\n+    #[inline]\n     fn default() -> Self {\n         const SLICE: &[c_char] = &[0];\n         // SAFETY: `SLICE` is indeed pointing to a valid nul-terminated string.\n@@ -623,6 +624,7 @@ impl CStr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialEq for CStr {\n+    #[inline]\n     fn eq(&self, other: &CStr) -> bool {\n         self.to_bytes().eq(other.to_bytes())\n     }\n@@ -631,12 +633,14 @@ impl PartialEq for CStr {\n impl Eq for CStr {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl PartialOrd for CStr {\n+    #[inline]\n     fn partial_cmp(&self, other: &CStr) -> Option<Ordering> {\n         self.to_bytes().partial_cmp(&other.to_bytes())\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Ord for CStr {\n+    #[inline]\n     fn cmp(&self, other: &CStr) -> Ordering {\n         self.to_bytes().cmp(&other.to_bytes())\n     }\n@@ -646,6 +650,7 @@ impl Ord for CStr {\n impl ops::Index<ops::RangeFrom<usize>> for CStr {\n     type Output = CStr;\n \n+    #[inline]\n     fn index(&self, index: ops::RangeFrom<usize>) -> &CStr {\n         let bytes = self.to_bytes_with_nul();\n         // we need to manually check the starting index to account for the null"}]}