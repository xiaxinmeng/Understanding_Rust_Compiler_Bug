{"sha": "462fc37fa897f38cf7c08425b0a435d35a3a20c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MmZjMzdmYTg5N2YzOGNmN2MwODQyNWIwYTQzNWQzNWEzYTIwYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-23T03:48:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-23T03:48:07Z"}, "message": "Auto merge of #68298 - Mark-Simulacrum:binary-depdep-fix, r=petrochenkov\n\nAvoid declaring a fake dependency edge\n\nWhen we're producing an rlib, we do not need anything more than an rmeta file\nfor each of our dependencies (this is indeed utilized by Cargo for pipelining).\nPreviously, we were still storing the paths of possible rlib/dylib crates, which\nmeant that they could still plausibly be accessed. With -Zbinary-dep-depinfo,\nthat meant that Cargo thought that rustc was using both the rlib and an (earlier\nemitted) rmeta, and so needed a recompile, as the rlib may have finished writing\n*after* compilation started (for more detail, see issue 68149).\n\nThis commit changes metadata loading to not store the filepaths of dylib/rlib if\nwe're going to end up creating an rlib only.\n\nFixes #68149.", "tree": {"sha": "c0fddf669631e584fc3f3621df71a1ff73ea68e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0fddf669631e584fc3f3621df71a1ff73ea68e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/462fc37fa897f38cf7c08425b0a435d35a3a20c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/462fc37fa897f38cf7c08425b0a435d35a3a20c8", "html_url": "https://github.com/rust-lang/rust/commit/462fc37fa897f38cf7c08425b0a435d35a3a20c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/462fc37fa897f38cf7c08425b0a435d35a3a20c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23dd6687f7677a715765bff1fe5e63b906cb96b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e23dd6687f7677a715765bff1fe5e63b906cb96b", "html_url": "https://github.com/rust-lang/rust/commit/e23dd6687f7677a715765bff1fe5e63b906cb96b"}, {"sha": "be663bf850fcdcedc678782e5e0945124d5791fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/be663bf850fcdcedc678782e5e0945124d5791fb", "html_url": "https://github.com/rust-lang/rust/commit/be663bf850fcdcedc678782e5e0945124d5791fb"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "2157b8ce15931e836453a7f929994a19d83b487f", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/462fc37fa897f38cf7c08425b0a435d35a3a20c8/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462fc37fa897f38cf7c08425b0a435d35a3a20c8/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=462fc37fa897f38cf7c08425b0a435d35a3a20c8", "patch": "@@ -654,14 +654,36 @@ impl<'a> CrateLocator<'a> {\n         dylibs: FxHashMap<PathBuf, PathKind>,\n     ) -> Option<(Svh, Library)> {\n         let mut slot = None;\n+        // Order here matters, rmeta should come first. See comment in\n+        // `extract_one` below.\n         let source = CrateSource {\n-            rlib: self.extract_one(rlibs, CrateFlavor::Rlib, &mut slot),\n             rmeta: self.extract_one(rmetas, CrateFlavor::Rmeta, &mut slot),\n+            rlib: self.extract_one(rlibs, CrateFlavor::Rlib, &mut slot),\n             dylib: self.extract_one(dylibs, CrateFlavor::Dylib, &mut slot),\n         };\n         slot.map(|(svh, metadata)| (svh, Library { source, metadata }))\n     }\n \n+    fn needs_crate_flavor(&self, flavor: CrateFlavor) -> bool {\n+        if flavor == CrateFlavor::Dylib && self.is_proc_macro == Some(true) {\n+            return true;\n+        }\n+\n+        // The all loop is because `--crate-type=rlib --crate-type=rlib` is\n+        // legal and produces both inside this type.\n+        let is_rlib = self.sess.crate_types.borrow().iter().all(|c| *c == config::CrateType::Rlib);\n+        let needs_object_code = self.sess.opts.output_types.should_codegen();\n+        // If we're producing an rlib, then we don't need object code.\n+        // Or, if we're not producing object code, then we don't need it either\n+        // (e.g., if we're a cdylib but emitting just metadata).\n+        if is_rlib || !needs_object_code {\n+            flavor == CrateFlavor::Rmeta\n+        } else {\n+            // we need all flavors (perhaps not true, but what we do for now)\n+            true\n+        }\n+    }\n+\n     // Attempts to extract *one* library from the set `m`. If the set has no\n     // elements, `None` is returned. If the set has more than one element, then\n     // the errors and notes are emitted about the set of libraries.\n@@ -679,12 +701,22 @@ impl<'a> CrateLocator<'a> {\n         let mut ret: Option<(PathBuf, PathKind)> = None;\n         let mut error = 0;\n \n+        // If we are producing an rlib, and we've already loaded metadata, then\n+        // we should not attempt to discover further crate sources (unless we're\n+        // locating a proc macro; exact logic is in needs_crate_flavor). This means\n+        // that under -Zbinary-dep-depinfo we will not emit a dependency edge on\n+        // the *unused* rlib, and by returning `None` here immediately we\n+        // guarantee that we do indeed not use it.\n+        //\n+        // See also #68149 which provides more detail on why emitting the\n+        // dependency on the rlib is a bad thing.\n+        //\n+        // We currenty do not verify that these other sources are even in sync,\n+        // and this is arguably a bug (see #10786), but because reading metadata\n+        // is quite slow (especially from dylibs) we currently do not read it\n+        // from the other crate sources.\n         if slot.is_some() {\n-            // FIXME(#10786): for an optimization, we only read one of the\n-            //                libraries' metadata sections. In theory we should\n-            //                read both, but reading dylib metadata is quite\n-            //                slow.\n-            if m.is_empty() {\n+            if m.is_empty() || !self.needs_crate_flavor(flavor) {\n                 return None;\n             } else if m.len() == 1 {\n                 return Some(m.into_iter().next().unwrap());"}, {"sha": "173a6a394eb057d16f3252b6c52dc717149567f3", "filename": "src/test/ui/rmeta-rpass.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/462fc37fa897f38cf7c08425b0a435d35a3a20c8/src%2Ftest%2Fui%2Frmeta-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/462fc37fa897f38cf7c08425b0a435d35a3a20c8/src%2Ftest%2Fui%2Frmeta-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frmeta-rpass.rs?ref=462fc37fa897f38cf7c08425b0a435d35a3a20c8", "patch": "@@ -1,6 +1,11 @@\n // run-pass\n // Test that using rlibs and rmeta dep crates work together. Specifically, that\n-// there can be both an rmeta and an rlib file and rustc will prefer the rlib.\n+// there can be both an rmeta and an rlib file and rustc will prefer the rmeta\n+// file.\n+//\n+// This behavior is simply making sure this doesn't accidentally change; in this\n+// case we want to make sure that the rlib isn't being used as that would cause\n+// bugs in -Zbinary-dep-depinfo (see #68298).\n \n // aux-build:rmeta-rmeta.rs\n // aux-build:rmeta-rlib-rpass.rs\n@@ -9,5 +14,5 @@ extern crate rmeta_aux;\n use rmeta_aux::Foo;\n \n pub fn main() {\n-    let _ = Foo { field: 42 };\n+    let _ = Foo { field2: 42 };\n }"}]}