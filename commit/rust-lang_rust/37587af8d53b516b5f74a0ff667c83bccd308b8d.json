{"sha": "37587af8d53b516b5f74a0ff667c83bccd308b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NTg3YWY4ZDUzYjUxNmI1Zjc0YTBmZjY2N2M4M2JjY2QzMDhiOGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-22T14:58:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T14:58:36Z"}, "message": "Rollup merge of #72399 - Lucretiel:ipv4-display-fast, r=kennytm\n\nAdd fast-path optimization for Ipv4Addr::fmt\n\nDon't use an intermediary buffer when writing an IPv4 address without any specific alignment options", "tree": {"sha": "b89df02ec644a31fffd773a1f9259b96d2998454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89df02ec644a31fffd773a1f9259b96d2998454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37587af8d53b516b5f74a0ff667c83bccd308b8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex+icCRBK7hj4Ov3rIwAAdHIIAJjqJhjwhNAehttMbiYqpP30\n9xVM0+ogkZ1JYQSNj428iC7Ue87xOvkzZ42Su5eRhy/OLZ8sehSUs7AlIXNGWbTG\n6POZ6cRL6BMCKq4YAK3a0NyvQo5AOtIJEA51ubtge0cAuusGxuK5x2Paa3N7G2bC\nqMGnP4eZaFwje2+gffsSY3jjbeTNByLAVQSE5LiueYpyqasAWBGoo+CGaaLWvLwg\nRKNE3TCns8w2zNhDNYR45gGt5oioLJ0/EKwVAg7/VfZBiZ6skVkdkx36xTbHRhVG\nRvvxhE3QbWx0cA+oOn+FsijSJqErAronB9frE24NiEm4XcWgreMiyAZu9eZzzyQ=\n=1ssZ\n-----END PGP SIGNATURE-----\n", "payload": "tree b89df02ec644a31fffd773a1f9259b96d2998454\nparent a116e7b02fa407e06303e5118da9bf7ae1caf493\nparent dc3de7cb2ae9d886ddac91d71f2e9517ff123e90\nauthor Ralf Jung <post@ralfj.de> 1590159516 +0200\ncommitter GitHub <noreply@github.com> 1590159516 +0200\n\nRollup merge of #72399 - Lucretiel:ipv4-display-fast, r=kennytm\n\nAdd fast-path optimization for Ipv4Addr::fmt\n\nDon't use an intermediary buffer when writing an IPv4 address without any specific alignment options\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37587af8d53b516b5f74a0ff667c83bccd308b8d", "html_url": "https://github.com/rust-lang/rust/commit/37587af8d53b516b5f74a0ff667c83bccd308b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37587af8d53b516b5f74a0ff667c83bccd308b8d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a116e7b02fa407e06303e5118da9bf7ae1caf493", "url": "https://api.github.com/repos/rust-lang/rust/commits/a116e7b02fa407e06303e5118da9bf7ae1caf493", "html_url": "https://github.com/rust-lang/rust/commit/a116e7b02fa407e06303e5118da9bf7ae1caf493"}, {"sha": "dc3de7cb2ae9d886ddac91d71f2e9517ff123e90", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc3de7cb2ae9d886ddac91d71f2e9517ff123e90", "html_url": "https://github.com/rust-lang/rust/commit/dc3de7cb2ae9d886ddac91d71f2e9517ff123e90"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "6e2478b8308af7d443c6986bbe8166c9748d3fc8", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/37587af8d53b516b5f74a0ff667c83bccd308b8d/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37587af8d53b516b5f74a0ff667c83bccd308b8d/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=37587af8d53b516b5f74a0ff667c83bccd308b8d", "patch": "@@ -856,16 +856,23 @@ impl From<Ipv6Addr> for IpAddr {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for Ipv4Addr {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        const IPV4_BUF_LEN: usize = 15; // Long enough for the longest possible IPv4 address\n-        let mut buf = [0u8; IPV4_BUF_LEN];\n-        let mut buf_slice = &mut buf[..];\n         let octets = self.octets();\n-        // Note: The call to write should never fail, hence the unwrap\n-        write!(buf_slice, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3]).unwrap();\n-        let len = IPV4_BUF_LEN - buf_slice.len();\n-        // This unsafe is OK because we know what is being written to the buffer\n-        let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n-        fmt.pad(buf)\n+        // Fast Path: if there's no alignment stuff, write directly to the buffer\n+        if fmt.precision().is_none() && fmt.width().is_none() {\n+            write!(fmt, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3])\n+        } else {\n+            const IPV4_BUF_LEN: usize = 15; // Long enough for the longest possible IPv4 address\n+            let mut buf = [0u8; IPV4_BUF_LEN];\n+            let mut buf_slice = &mut buf[..];\n+\n+            // Note: The call to write should never fail, hence the unwrap\n+            write!(buf_slice, \"{}.{}.{}.{}\", octets[0], octets[1], octets[2], octets[3]).unwrap();\n+            let len = IPV4_BUF_LEN - buf_slice.len();\n+\n+            // This unsafe is OK because we know what is being written to the buffer\n+            let buf = unsafe { crate::str::from_utf8_unchecked(&buf[..len]) };\n+            fmt.pad(buf)\n+        }\n     }\n }\n "}]}