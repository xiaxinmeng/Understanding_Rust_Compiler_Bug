{"sha": "f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZDc0NDNhNmJkOTBiNzhlNjFiOWM0N2U1MDMyYjVlMWJlMWU0OWY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-23T03:02:55Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-10-23T15:06:41Z"}, "message": "Suggest semicolon removal and boxing when appropriate", "tree": {"sha": "bf0509e672ceff695c2644354710687fd8f1a17d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0509e672ceff695c2644354710687fd8f1a17d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f", "html_url": "https://github.com/rust-lang/rust/commit/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5485115dcbbb5a0837c2ac8cabd5ead8a3b8a66", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5485115dcbbb5a0837c2ac8cabd5ead8a3b8a66", "html_url": "https://github.com/rust-lang/rust/commit/c5485115dcbbb5a0837c2ac8cabd5ead8a3b8a66"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "f7e4ace8fc5fcadf499d65fc81c56c58702c2aa9", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f", "patch": "@@ -688,12 +688,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let msg = \"`match` arms have incompatible types\";\n                     err.span_label(outer_error_span, msg);\n                     if let Some((sp, boxed)) = semi_span {\n-                        if matches!(boxed, StatementAsExpression::NeedsBoxing) {\n-                            err.span_suggestion_verbose(\n+                        if let (StatementAsExpression::NeedsBoxing, [.., prior_arm]) =\n+                            (boxed, &prior_arms[..])\n+                        {\n+                            err.multipart_suggestion(\n+                                \"consider removing this semicolon and boxing the expressions\",\n+                                vec![\n+                                    (prior_arm.shrink_to_lo(), \"Box::new(\".to_string()),\n+                                    (prior_arm.shrink_to_hi(), \")\".to_string()),\n+                                    (arm_span.shrink_to_lo(), \"Box::new(\".to_string()),\n+                                    (arm_span.shrink_to_hi(), \")\".to_string()),\n+                                    (sp, String::new()),\n+                                ],\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        } else if matches!(boxed, StatementAsExpression::NeedsBoxing) {\n+                            err.span_suggestion_short(\n                                 sp,\n-                                \"consider removing this semicolon and boxing the expression\",\n+                                \"consider removing this semicolon and boxing the expressions\",\n                                 String::new(),\n-                                Applicability::HasPlaceholders,\n+                                Applicability::MachineApplicable,\n                             );\n                         } else {\n                             err.span_suggestion_short(\n@@ -727,11 +741,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 if let Some((sp, boxed)) = semicolon {\n                     if matches!(boxed, StatementAsExpression::NeedsBoxing) {\n-                        err.span_suggestion_verbose(\n-                            sp,\n+                        err.multipart_suggestion(\n                             \"consider removing this semicolon and boxing the expression\",\n-                            String::new(),\n-                            Applicability::HasPlaceholders,\n+                            vec![\n+                                (then.shrink_to_lo(), \"Box::new(\".to_string()),\n+                                (then.shrink_to_hi(), \")\".to_string()),\n+                                (else_sp.shrink_to_lo(), \"Box::new(\".to_string()),\n+                                (else_sp.shrink_to_hi(), \")\".to_string()),\n+                                (sp, String::new()),\n+                            ],\n+                            Applicability::MachineApplicable,\n                         );\n                     } else {\n                         err.span_suggestion_short("}, {"sha": "e9803a78f94b3c3571813648083bc03542b7d64e", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=f5d7443a6bd90b78e61b9c47e5032b5e1be1e49f", "patch": "@@ -24,10 +24,13 @@ help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n    |                               ^^^^^^\n-help: consider removing this semicolon and boxing the expression\n+help: consider removing this semicolon and boxing the expressions\n+   |\n+LL |             Box::new(async_dummy())\n+LL |\n+LL |         }\n+LL |         false => Box::new(async_dummy()),\n    |\n-LL |             async_dummy()\n-   |                         --\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-prev-arm-needing-semi.rs:39:18\n@@ -55,10 +58,13 @@ help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy2().await,\n    |                                ^^^^^^\n-help: consider removing this semicolon and boxing the expression\n+help: consider removing this semicolon and boxing the expressions\n+   |\n+LL |             Box::new(async_dummy())\n+LL |\n+LL |         }\n+LL |         false => Box::new(async_dummy2()),\n    |\n-LL |             async_dummy()\n-   |                         --\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-prev-arm-needing-semi.rs:50:18\n@@ -70,10 +76,10 @@ LL |       let _ = match true {\n    |  _____________-\n LL | |         true => async_dummy(),\n    | |                 ------------- this is found to be of type `impl Future`\n+LL | |\n LL | |         false => async_dummy2(),\n    | |                  ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n-LL | |\n-LL | |\n+...  |\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n@@ -84,6 +90,7 @@ LL | |     };\n help: consider `await`ing on both `Future`s\n    |\n LL |         true => async_dummy().await,\n+LL |\n LL |         false => async_dummy2().await,\n    |\n "}]}