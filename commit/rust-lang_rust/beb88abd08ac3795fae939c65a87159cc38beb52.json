{"sha": "beb88abd08ac3795fae939c65a87159cc38beb52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlYjg4YWJkMDhhYzM3OTVmYWU5MzljNjVhODcxNTljYzM4YmViNTI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-15T23:41:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-15T23:41:39Z"}, "message": "Merge pull request #1884 from topecongiro/better-error-report\n\nEnhance error messages", "tree": {"sha": "09ccb9a0e680f3153e4a4459d2e5bb3661ea5172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09ccb9a0e680f3153e4a4459d2e5bb3661ea5172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beb88abd08ac3795fae939c65a87159cc38beb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beb88abd08ac3795fae939c65a87159cc38beb52", "html_url": "https://github.com/rust-lang/rust/commit/beb88abd08ac3795fae939c65a87159cc38beb52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beb88abd08ac3795fae939c65a87159cc38beb52/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d28bf41cbec4748633bbe336145a862429b265", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d28bf41cbec4748633bbe336145a862429b265", "html_url": "https://github.com/rust-lang/rust/commit/a1d28bf41cbec4748633bbe336145a862429b265"}, {"sha": "5c50766b361f54ab39b0726ed65164a5e13b666d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c50766b361f54ab39b0726ed65164a5e13b666d", "html_url": "https://github.com/rust-lang/rust/commit/5c50766b361f54ab39b0726ed65164a5e13b666d"}], "stats": {"total": 211, "additions": 177, "deletions": 34}, "files": [{"sha": "3ac1c3e4cf734d27c13b6ce5fe3d3d05e0b3c418", "filename": "src/lib.rs", "status": "modified", "additions": 157, "deletions": 15, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/beb88abd08ac3795fae939c65a87159cc38beb52/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb88abd08ac3795fae939c65a87159cc38beb52/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=beb88abd08ac3795fae939c65a87159cc38beb52", "patch": "@@ -27,6 +27,7 @@ extern crate unicode_segmentation;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, Write};\n+use std::iter::repeat;\n use std::ops::{Add, Sub};\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n@@ -42,7 +43,7 @@ use checkstyle::{output_footer, output_header};\n use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n-use utils::{mk_sp, outer_attributes};\n+use utils::{isatty, mk_sp, outer_attributes};\n use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n@@ -456,7 +457,7 @@ impl fmt::Display for ErrorKind {\n         match *self {\n             ErrorKind::LineOverflow(found, maximum) => write!(\n                 fmt,\n-                \"line exceeded maximum length (maximum: {}, found: {})\",\n+                \"line exceeded maximum width (maximum: {}, found: {})\",\n                 maximum,\n                 found\n             ),\n@@ -468,22 +469,43 @@ impl fmt::Display for ErrorKind {\n \n // Formatting errors that are identified *after* rustfmt has run.\n pub struct FormattingError {\n-    line: u32,\n+    line: usize,\n     kind: ErrorKind,\n+    is_comment: bool,\n+    line_buffer: String,\n }\n \n impl FormattingError {\n     fn msg_prefix(&self) -> &str {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"Rustfmt failed at\",\n+            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"error:\",\n             ErrorKind::BadIssue(_) => \"WARNING:\",\n         }\n     }\n \n-    fn msg_suffix(&self) -> &str {\n+    fn msg_suffix(&self) -> String {\n         match self.kind {\n-            ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"(sorry)\",\n-            ErrorKind::BadIssue(_) => \"\",\n+            ErrorKind::LineOverflow(..) if self.is_comment => format!(\n+                \"use `error_on_lineoverflow_comments = false` to suppress \\\n+                 the warning against line comments\\n\",\n+            ),\n+            _ => String::from(\"\"),\n+        }\n+    }\n+\n+    // (space, target)\n+    pub fn format_len(&self) -> (usize, usize) {\n+        match self.kind {\n+            ErrorKind::LineOverflow(found, max) => (max, found - max),\n+            ErrorKind::TrailingWhitespace => {\n+                let trailing_ws_len = self.line_buffer\n+                    .chars()\n+                    .rev()\n+                    .take_while(|c| c.is_whitespace())\n+                    .count();\n+                (self.line_buffer.len() - trailing_ws_len, trailing_ws_len)\n+            }\n+            _ => (0, 0), // unreachable\n         }\n     }\n }\n@@ -510,24 +532,127 @@ impl FormatReport {\n     pub fn has_warnings(&self) -> bool {\n         self.warning_count() > 0\n     }\n+\n+    pub fn print_warnings_fancy(\n+        &self,\n+        mut t: Box<term::Terminal<Output = io::Stderr>>,\n+    ) -> Result<(), term::Error> {\n+        for (file, errors) in &self.file_error_map {\n+            for error in errors {\n+                let prefix_space_len = error.line.to_string().len();\n+                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+\n+                // First line: the overview of error\n+                t.fg(term::color::RED)?;\n+                t.attr(term::Attr::Bold)?;\n+                write!(t, \"{} \", error.msg_prefix())?;\n+                t.reset()?;\n+                t.attr(term::Attr::Bold)?;\n+                write!(t, \"{}\\n\", error.kind)?;\n+\n+                // Second line: file info\n+                write!(t, \"{}--> \", &prefix_spaces[1..])?;\n+                t.reset()?;\n+                write!(t, \"{}:{}\\n\", file, error.line)?;\n+\n+                // Third to fifth lines: show the line which triggered error, if available.\n+                if !error.line_buffer.is_empty() {\n+                    let (space_len, target_len) = error.format_len();\n+                    t.attr(term::Attr::Bold)?;\n+                    write!(t, \"{}|\\n{} | \", prefix_spaces, error.line)?;\n+                    t.reset()?;\n+                    write!(t, \"{}\\n\", error.line_buffer)?;\n+                    t.attr(term::Attr::Bold)?;\n+                    write!(t, \"{}| \", prefix_spaces)?;\n+                    t.fg(term::color::RED)?;\n+                    write!(t, \"{}\\n\", target_str(space_len, target_len))?;\n+                    t.reset()?;\n+                }\n+\n+                // The last line: show note if available.\n+                let msg_suffix = error.msg_suffix();\n+                if !msg_suffix.is_empty() {\n+                    t.attr(term::Attr::Bold)?;\n+                    write!(t, \"{}= note: \", prefix_spaces)?;\n+                    t.reset()?;\n+                    write!(t, \"{}\\n\", error.msg_suffix())?;\n+                } else {\n+                    write!(t, \"\\n\")?;\n+                }\n+                t.reset()?;\n+            }\n+        }\n+\n+        if !self.file_error_map.is_empty() {\n+            t.attr(term::Attr::Bold)?;\n+            write!(t, \"warning: \")?;\n+            t.reset()?;\n+            write!(\n+                t,\n+                \"rustfmt may have failed to format. See previous {} errors.\\n\\n\",\n+                self.warning_count(),\n+            )?;\n+        }\n+\n+        Ok(())\n+    }\n+}\n+\n+fn target_str(space_len: usize, target_len: usize) -> String {\n+    let empty_line: String = repeat(\" \").take(space_len).collect();\n+    let overflowed: String = repeat(\"^\").take(target_len).collect();\n+    empty_line + &overflowed\n }\n \n impl fmt::Display for FormatReport {\n     // Prints all the formatting errors.\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         for (file, errors) in &self.file_error_map {\n             for error in errors {\n+                let prefix_space_len = error.line.to_string().len();\n+                let prefix_spaces: String = repeat(\" \").take(1 + prefix_space_len).collect();\n+\n+                let error_line_buffer = if error.line_buffer.is_empty() {\n+                    String::from(\" \")\n+                } else {\n+                    let (space_len, target_len) = error.format_len();\n+                    format!(\n+                        \"{}|\\n{} | {}\\n{}| {}\",\n+                        prefix_spaces,\n+                        error.line,\n+                        error.line_buffer,\n+                        prefix_spaces,\n+                        target_str(space_len, target_len)\n+                    )\n+                };\n+\n+                let error_info = format!(\"{} {}\", error.msg_prefix(), error.kind);\n+                let file_info = format!(\"{}--> {}:{}\", &prefix_spaces[1..], file, error.line);\n+                let msg_suffix = error.msg_suffix();\n+                let note = if msg_suffix.is_empty() {\n+                    String::new()\n+                } else {\n+                    format!(\"{}note= \", prefix_spaces)\n+                };\n+\n                 write!(\n                     fmt,\n-                    \"{} {}:{}: {} {}\\n\",\n-                    error.msg_prefix(),\n-                    file,\n-                    error.line,\n-                    error.kind,\n+                    \"{}\\n{}\\n{}\\n{}{}\\n\",\n+                    error_info,\n+                    file_info,\n+                    error_line_buffer,\n+                    note,\n                     error.msg_suffix()\n                 )?;\n             }\n         }\n+        if !self.file_error_map.is_empty() {\n+            write!(\n+                fmt,\n+                \"warning: rustfmt may have failed to format. See previous {} errors.\\n\",\n+                self.warning_count(),\n+            )?;\n+        }\n         Ok(())\n     }\n }\n@@ -601,6 +726,7 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n     let mut issue_seeker = BadIssueSeeker::new(config.report_todo(), config.report_fixme());\n     let mut prev_char: Option<char> = None;\n     let mut is_comment = false;\n+    let mut line_buffer = String::with_capacity(config.max_width() * 2);\n \n     for (c, b) in text.chars() {\n         if c == '\\r' {\n@@ -615,6 +741,8 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n                 errors.push(FormattingError {\n                     line: cur_line,\n                     kind: ErrorKind::BadIssue(issue),\n+                    is_comment: false,\n+                    line_buffer: String::new(),\n                 });\n             }\n         }\n@@ -623,7 +751,7 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n             if format_line {\n                 // Check for (and record) trailing whitespace.\n                 if let Some(lw) = last_wspace {\n-                    trims.push((cur_line, lw, b));\n+                    trims.push((cur_line, lw, b, line_buffer.clone()));\n                     line_len -= 1;\n                 }\n \n@@ -634,6 +762,8 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n                     errors.push(FormattingError {\n                         line: cur_line,\n                         kind: ErrorKind::LineOverflow(line_len, config.max_width()),\n+                        is_comment: is_comment,\n+                        line_buffer: line_buffer.clone(),\n                     });\n                 }\n             }\n@@ -644,6 +774,7 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n             last_wspace = None;\n             prev_char = None;\n             is_comment = false;\n+            line_buffer.clear();\n         } else {\n             newline_count = 0;\n             line_len += 1;\n@@ -661,6 +792,7 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n                 last_wspace = None;\n             }\n             prev_char = Some(c);\n+            line_buffer.push(c);\n         }\n     }\n \n@@ -670,10 +802,12 @@ fn format_lines(text: &mut StringBuffer, name: &str, config: &Config, report: &m\n         text.truncate(line);\n     }\n \n-    for &(l, _, _) in &trims {\n+    for &(l, _, _, ref b) in &trims {\n         errors.push(FormattingError {\n             line: l,\n             kind: ErrorKind::TrailingWhitespace,\n+            is_comment: false,\n+            line_buffer: b.clone(),\n         });\n     }\n \n@@ -803,7 +937,15 @@ pub fn run(input: Input, config: &Config) -> Summary {\n             output_footer(out, config.write_mode()).ok();\n \n             if report.has_warnings() {\n-                msg!(\"{}\", report);\n+                match term::stderr() {\n+                    Some(ref t) if isatty() && t.supports_color() => {\n+                        match report.print_warnings_fancy(term::stderr().unwrap()) {\n+                            Ok(..) => (),\n+                            Err(..) => panic!(\"Unable to write to stderr: {}\", report),\n+                        }\n+                    }\n+                    _ => msg!(\"{}\", report),\n+                }\n             }\n \n             summary"}, {"sha": "3fb228653851541da06dee98136776a044fb88ae", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/beb88abd08ac3795fae939c65a87159cc38beb52/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb88abd08ac3795fae939c65a87159cc38beb52/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=beb88abd08ac3795fae939c65a87159cc38beb52", "patch": "@@ -12,6 +12,7 @@ use diff;\n use std::collections::VecDeque;\n use std::io;\n use term;\n+use utils::isatty;\n \n #[derive(Debug, PartialEq)]\n pub enum DiffLine {\n@@ -105,25 +106,6 @@ where\n         }\n         _ => print_diff_basic(diff, get_section_title),\n     }\n-\n-    // isatty shamelessly adapted from cargo.\n-    #[cfg(unix)]\n-    fn isatty() -> bool {\n-        extern crate libc;\n-\n-        unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-    }\n-    #[cfg(windows)]\n-    fn isatty() -> bool {\n-        extern crate kernel32;\n-        extern crate winapi;\n-\n-        unsafe {\n-            let handle = kernel32::GetStdHandle(winapi::winbase::STD_OUTPUT_HANDLE);\n-            let mut out = 0;\n-            kernel32::GetConsoleMode(handle, &mut out) != 0\n-        }\n-    }\n }\n \n fn print_diff_fancy<F>("}, {"sha": "bd46ef1bc6ad20de917f510f570e3dfdb6e75c82", "filename": "src/utils.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/beb88abd08ac3795fae939c65a87159cc38beb52/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beb88abd08ac3795fae939c65a87159cc38beb52/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=beb88abd08ac3795fae939c65a87159cc38beb52", "patch": "@@ -516,3 +516,22 @@ pub fn left_most_sub_expr(e: &ast::Expr) -> &ast::Expr {\n         _ => e,\n     }\n }\n+\n+// isatty shamelessly adapted from cargo.\n+#[cfg(unix)]\n+pub fn isatty() -> bool {\n+    extern crate libc;\n+\n+    unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n+}\n+#[cfg(windows)]\n+pub fn isatty() -> bool {\n+    extern crate kernel32;\n+    extern crate winapi;\n+\n+    unsafe {\n+        let handle = kernel32::GetStdHandle(winapi::winbase::STD_OUTPUT_HANDLE);\n+        let mut out = 0;\n+        kernel32::GetConsoleMode(handle, &mut out) != 0\n+    }\n+}"}]}