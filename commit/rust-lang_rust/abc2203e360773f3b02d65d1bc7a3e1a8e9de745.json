{"sha": "abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "node_id": "C_kwDOAAsO6NoAKGFiYzIyMDNlMzYwNzczZjNiMDJkNjVkMWJjN2EzZTFhOGU5ZGU3NDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-08T17:32:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-08T17:32:43Z"}, "message": "Rollup merge of #107758 - Zoxc:arena-enref, r=cjgillot\n\nChange `arena_cache` to not alter the declared query result\n\nThis makes the return types a bit clearer, limiting `arena_cache`'s effect to just the computation side. It also makes it easier to potentially remove `arena_cache`.\n\nr? ```@cjgillot```", "tree": {"sha": "9c06dca796951baeddfd60c40328547a5c7474b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c06dca796951baeddfd60c40328547a5c7474b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj49y7CRBK7hj4Ov3rIwAAuakIAJidO/6sZVZT7jp+sj7PyQsV\nFxFvVoTOZbhO4PVV6OAuQ0WIZ0LmWcHhNtUjEouGFuGhor5Bt/oJTmR+jWtFEfqu\nNyAlYx7aUFBRvggZ+DS2orBHjf4sX1jSoIKrXki+nkstpH9hgD1UVT7LNg/KMTsb\n5h4kNtM1xWxs9X3IB1w722SWQFYRR8DBeOPgmgRFwBQxqnSIgviSOqp3REG9xs2E\n6kDH2wXjNjLcybl/I7H+XiCREqpIe50kYRgFjwWr4+OqWRnDxheYXlwg3+TKXBcB\nK9Nig+dzai6sPkHFzf5b8Hw2SEgRHc/V4La0rkJMj3gH3+wldbPboMWi4UutY3A=\n=zlYP\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c06dca796951baeddfd60c40328547a5c7474b0\nparent f696e699a0523d9c147e1980059d6099a17d35e6\nparent a0b96fdb50b1a57447e840f2a904aad9912cd3c4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675877563 +0100\ncommitter GitHub <noreply@github.com> 1675877563 +0100\n\nRollup merge of #107758 - Zoxc:arena-enref, r=cjgillot\n\nChange `arena_cache` to not alter the declared query result\n\nThis makes the return types a bit clearer, limiting `arena_cache`'s effect to just the computation side. It also makes it easier to potentially remove `arena_cache`.\n\nr? ```@cjgillot```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "html_url": "https://github.com/rust-lang/rust/commit/abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abc2203e360773f3b02d65d1bc7a3e1a8e9de745/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f696e699a0523d9c147e1980059d6099a17d35e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f696e699a0523d9c147e1980059d6099a17d35e6", "html_url": "https://github.com/rust-lang/rust/commit/f696e699a0523d9c147e1980059d6099a17d35e6"}, {"sha": "a0b96fdb50b1a57447e840f2a904aad9912cd3c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b96fdb50b1a57447e840f2a904aad9912cd3c4", "html_url": "https://github.com/rust-lang/rust/commit/a0b96fdb50b1a57447e840f2a904aad9912cd3c4"}], "stats": {"total": 148, "additions": 78, "deletions": 70}, "files": [{"sha": "0a16ede64991de8d36cd4adf23c1ac435a783e07", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 55, "deletions": 54, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/abc2203e360773f3b02d65d1bc7a3e1a8e9de745/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc2203e360773f3b02d65d1bc7a3e1a8e9de745/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "patch": "@@ -54,14 +54,14 @@ rustc_queries! {\n     /// This is because the `hir_crate` query gives you access to all other items.\n     /// To avoid this fate, do not call `tcx.hir().krate()`; instead,\n     /// prefer wrappers like `tcx.visit_all_items_in_krate()`.\n-    query hir_crate(key: ()) -> Crate<'tcx> {\n+    query hir_crate(key: ()) -> &'tcx Crate<'tcx> {\n         arena_cache\n         eval_always\n         desc { \"getting the crate HIR\" }\n     }\n \n     /// All items in the crate.\n-    query hir_crate_items(_: ()) -> rustc_middle::hir::ModuleItems {\n+    query hir_crate_items(_: ()) -> &'tcx rustc_middle::hir::ModuleItems {\n         arena_cache\n         eval_always\n         desc { \"getting HIR crate items\" }\n@@ -71,7 +71,7 @@ rustc_queries! {\n     ///\n     /// This can be conveniently accessed by `tcx.hir().visit_item_likes_in_module`.\n     /// Avoid calling this query directly.\n-    query hir_module_items(key: LocalDefId) -> rustc_middle::hir::ModuleItems {\n+    query hir_module_items(key: LocalDefId) -> &'tcx rustc_middle::hir::ModuleItems {\n         arena_cache\n         desc { |tcx| \"getting HIR module items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         cache_on_disk_if { true }\n@@ -183,7 +183,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query unsizing_params_for_adt(key: DefId) -> rustc_index::bit_set::BitSet<u32>\n+    query unsizing_params_for_adt(key: DefId) -> &'tcx rustc_index::bit_set::BitSet<u32>\n     {\n         arena_cache\n         desc { |tcx|\n@@ -218,7 +218,7 @@ rustc_queries! {\n \n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n     /// associated generics.\n-    query generics_of(key: DefId) -> ty::Generics {\n+    query generics_of(key: DefId) -> &'tcx ty::Generics {\n         desc { |tcx| \"computing generics of `{}`\", tcx.def_path_str(key) }\n         arena_cache\n         cache_on_disk_if { key.is_local() }\n@@ -295,19 +295,19 @@ rustc_queries! {\n     /// These are assembled from the following places:\n     /// - `extern` blocks (depending on their `link` attributes)\n     /// - the `libs` (`-l`) option\n-    query native_libraries(_: CrateNum) -> Vec<NativeLib> {\n+    query native_libraries(_: CrateNum) -> &'tcx Vec<NativeLib> {\n         arena_cache\n         desc { \"looking up the native libraries of a linked crate\" }\n         separate_provide_extern\n     }\n \n-    query shallow_lint_levels_on(key: hir::OwnerId) -> rustc_middle::lint::ShallowLintLevelMap {\n+    query shallow_lint_levels_on(key: hir::OwnerId) -> &'tcx rustc_middle::lint::ShallowLintLevelMap {\n         eval_always // fetches `resolutions`\n         arena_cache\n         desc { |tcx| \"looking up lint levels for `{}`\", tcx.def_path_str(key.to_def_id()) }\n     }\n \n-    query lint_expectations(_: ()) -> Vec<(LintExpectationId, LintExpectation)> {\n+    query lint_expectations(_: ()) -> &'tcx Vec<(LintExpectationId, LintExpectation)> {\n         arena_cache\n         desc { \"computing `#[expect]`ed lints in this crate\" }\n     }\n@@ -347,7 +347,7 @@ rustc_queries! {\n     }\n \n     /// Set of param indexes for type params that are in the type's representation\n-    query params_in_repr(key: DefId) -> rustc_index::bit_set::BitSet<u32> {\n+    query params_in_repr(key: DefId) -> &'tcx rustc_index::bit_set::BitSet<u32> {\n         desc { \"finding type parameters in the representation\" }\n         arena_cache\n         no_hash\n@@ -364,14 +364,14 @@ rustc_queries! {\n     }\n \n     /// Create a THIR tree for debugging.\n-    query thir_tree(key: ty::WithOptConstParam<LocalDefId>) -> String {\n+    query thir_tree(key: ty::WithOptConstParam<LocalDefId>) -> &'tcx String {\n         no_hash\n         arena_cache\n         desc { |tcx| \"constructing THIR tree for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n     }\n \n     /// Create a list-like THIR representation for debugging.\n-    query thir_flat(key: ty::WithOptConstParam<LocalDefId>) -> String {\n+    query thir_flat(key: ty::WithOptConstParam<LocalDefId>) -> &'tcx String {\n         no_hash\n         arena_cache\n         desc { |tcx| \"constructing flat THIR representation for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n@@ -380,7 +380,7 @@ rustc_queries! {\n     /// Set of all the `DefId`s in this crate that have MIR associated with\n     /// them. This includes all the body owners, but also things like struct\n     /// constructors.\n-    query mir_keys(_: ()) -> rustc_data_structures::fx::FxIndexSet<LocalDefId> {\n+    query mir_keys(_: ()) -> &'tcx rustc_data_structures::fx::FxIndexSet<LocalDefId> {\n         arena_cache\n         desc { \"getting a list of all mir_keys\" }\n     }\n@@ -478,7 +478,7 @@ rustc_queries! {\n \n     query symbols_for_closure_captures(\n         key: (LocalDefId, LocalDefId)\n-    ) -> Vec<rustc_span::Symbol> {\n+    ) -> &'tcx Vec<rustc_span::Symbol> {\n         arena_cache\n         desc {\n             |tcx| \"finding symbols for captures of closure `{}` in `{}`\",\n@@ -487,7 +487,7 @@ rustc_queries! {\n         }\n     }\n \n-    query mir_generator_witnesses(key: DefId) -> mir::GeneratorLayout<'tcx> {\n+    query mir_generator_witnesses(key: DefId) -> &'tcx mir::GeneratorLayout<'tcx> {\n         arena_cache\n         desc { |tcx| \"generator witness types for `{}`\", tcx.def_path_str(key) }\n         cache_on_disk_if { key.is_local() }\n@@ -508,14 +508,14 @@ rustc_queries! {\n \n     /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n     /// MIR pass (assuming the -Cinstrument-coverage option is enabled).\n-    query coverageinfo(key: ty::InstanceDef<'tcx>) -> mir::CoverageInfo {\n+    query coverageinfo(key: ty::InstanceDef<'tcx>) -> &'tcx mir::CoverageInfo {\n         desc { |tcx| \"retrieving coverage info from MIR for `{}`\", tcx.def_path_str(key.def_id()) }\n         arena_cache\n     }\n \n     /// Returns the `CodeRegions` for a function that has instrumented coverage, in case the\n     /// function was optimized out before codegen, and before being added to the Coverage Map.\n-    query covered_code_regions(key: DefId) -> Vec<&'tcx mir::coverage::CodeRegion> {\n+    query covered_code_regions(key: DefId) -> &'tcx Vec<&'tcx mir::coverage::CodeRegion> {\n         desc {\n             |tcx| \"retrieving the covered `CodeRegion`s, if instrumented, for `{}`\",\n             tcx.def_path_str(key)\n@@ -557,7 +557,7 @@ rustc_queries! {\n         desc { \"erasing regions from `{}`\", ty }\n     }\n \n-    query wasm_import_module_map(_: CrateNum) -> FxHashMap<DefId, String> {\n+    query wasm_import_module_map(_: CrateNum) -> &'tcx FxHashMap<DefId, String> {\n         arena_cache\n         desc { \"getting wasm import module map\" }\n     }\n@@ -632,7 +632,7 @@ rustc_queries! {\n         desc { |tcx| \"computing the bounds for type parameter `{}`\", tcx.hir().ty_param_name(key.1) }\n     }\n \n-    query trait_def(key: DefId) -> ty::TraitDef {\n+    query trait_def(key: DefId) -> &'tcx ty::TraitDef {\n         desc { |tcx| \"computing trait definition for `{}`\", tcx.def_path_str(key) }\n         arena_cache\n         cache_on_disk_if { key.is_local() }\n@@ -703,7 +703,7 @@ rustc_queries! {\n     }\n \n     /// Gets a map with the variance of every item; use `item_variance` instead.\n-    query crate_variances(_: ()) -> ty::CrateVariancesMap<'tcx> {\n+    query crate_variances(_: ()) -> &'tcx ty::CrateVariancesMap<'tcx> {\n         arena_cache\n         desc { \"computing the variances for items in this crate\" }\n     }\n@@ -716,7 +716,7 @@ rustc_queries! {\n     }\n \n     /// Maps from thee `DefId` of a type to its (inferred) outlives.\n-    query inferred_outlives_crate(_: ()) -> ty::CratePredicatesMap<'tcx> {\n+    query inferred_outlives_crate(_: ()) -> &'tcx ty::CratePredicatesMap<'tcx> {\n         arena_cache\n         desc { \"computing the inferred outlives predicates for items in this crate\" }\n     }\n@@ -729,15 +729,15 @@ rustc_queries! {\n     }\n \n     /// Maps from a trait item to the trait item \"descriptor\".\n-    query associated_item(key: DefId) -> ty::AssocItem {\n+    query associated_item(key: DefId) -> &'tcx ty::AssocItem {\n         desc { |tcx| \"computing associated item data for `{}`\", tcx.def_path_str(key) }\n         arena_cache\n         cache_on_disk_if { key.is_local() }\n         separate_provide_extern\n     }\n \n     /// Collects the associated items defined on a trait or impl.\n-    query associated_items(key: DefId) -> ty::AssocItems<'tcx> {\n+    query associated_items(key: DefId) -> &'tcx ty::AssocItems<'tcx> {\n         arena_cache\n         desc { |tcx| \"collecting associated items of `{}`\", tcx.def_path_str(key) }\n     }\n@@ -763,7 +763,7 @@ rustc_queries! {\n     ///\n     /// The map returned for `tcx.impl_item_implementor_ids(impl_id)` would be\n     ///`{ trait_f: impl_f, trait_g: impl_g }`\n-    query impl_item_implementor_ids(impl_id: DefId) -> FxHashMap<DefId, DefId> {\n+    query impl_item_implementor_ids(impl_id: DefId) -> &'tcx FxHashMap<DefId, DefId> {\n         arena_cache\n         desc { |tcx| \"comparing impl items against trait for `{}`\", tcx.def_path_str(impl_id) }\n     }\n@@ -884,7 +884,7 @@ rustc_queries! {\n     ///\n     /// The second return value maps from ADTs to ignored derived traits (e.g. Debug and Clone) and\n     /// their respective impl (i.e., part of the derive macro)\n-    query live_symbols_and_ignored_derived_traits(_: ()) -> (\n+    query live_symbols_and_ignored_derived_traits(_: ()) -> &'tcx (\n         FxHashSet<LocalDefId>,\n         FxHashMap<LocalDefId, Vec<(DefId, DefId)>>\n     ) {\n@@ -964,7 +964,7 @@ rustc_queries! {\n \n     /// Gets a complete map from all types to their inherent impls.\n     /// Not meant to be used directly outside of coherence.\n-    query crate_inherent_impls(k: ()) -> CrateInherentImpls {\n+    query crate_inherent_impls(k: ()) -> &'tcx CrateInherentImpls {\n         arena_cache\n         desc { \"finding all inherent impls defined in crate\" }\n     }\n@@ -1099,7 +1099,7 @@ rustc_queries! {\n         desc { \"checking for private elements in public interfaces\" }\n     }\n \n-    query reachable_set(_: ()) -> FxHashSet<LocalDefId> {\n+    query reachable_set(_: ()) -> &'tcx FxHashSet<LocalDefId> {\n         arena_cache\n         desc { \"reachability\" }\n     }\n@@ -1111,7 +1111,7 @@ rustc_queries! {\n     }\n \n     /// Generates a MIR body for the shim.\n-    query mir_shims(key: ty::InstanceDef<'tcx>) -> mir::Body<'tcx> {\n+    query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::Body<'tcx> {\n         arena_cache\n         desc { |tcx| \"generating MIR shim for `{}`\", tcx.def_path_str(key.def_id()) }\n     }\n@@ -1191,7 +1191,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query codegen_fn_attrs(def_id: DefId) -> CodegenFnAttrs {\n+    query codegen_fn_attrs(def_id: DefId) -> &'tcx CodegenFnAttrs {\n         desc { |tcx| \"computing codegen attributes of `{}`\", tcx.def_path_str(def_id) }\n         arena_cache\n         cache_on_disk_if { def_id.is_local() }\n@@ -1209,7 +1209,7 @@ rustc_queries! {\n     }\n     /// Gets the rendered value of the specified constant or associated constant.\n     /// Used by rustdoc.\n-    query rendered_const(def_id: DefId) -> String {\n+    query rendered_const(def_id: DefId) -> &'tcx String {\n         arena_cache\n         desc { |tcx| \"rendering constant initializer of `{}`\", tcx.def_path_str(def_id) }\n         cache_on_disk_if { def_id.is_local() }\n@@ -1268,12 +1268,12 @@ rustc_queries! {\n     }\n \n     /// Given a trait `trait_id`, return all known `impl` blocks.\n-    query trait_impls_of(trait_id: DefId) -> ty::trait_def::TraitImpls {\n+    query trait_impls_of(trait_id: DefId) -> &'tcx ty::trait_def::TraitImpls {\n         arena_cache\n         desc { |tcx| \"finding trait impls of `{}`\", tcx.def_path_str(trait_id) }\n     }\n \n-    query specialization_graph_of(trait_id: DefId) -> specialization_graph::Graph {\n+    query specialization_graph_of(trait_id: DefId) -> &'tcx specialization_graph::Graph {\n         arena_cache\n         desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(trait_id) }\n         cache_on_disk_if { true }\n@@ -1403,7 +1403,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query dependency_formats(_: ()) -> Lrc<crate::middle::dependency_format::Dependencies> {\n+    query dependency_formats(_: ()) -> &'tcx Lrc<crate::middle::dependency_format::Dependencies> {\n         arena_cache\n         desc { \"getting the linkage format of all dependencies\" }\n     }\n@@ -1503,7 +1503,7 @@ rustc_queries! {\n     // Does not include external symbols that don't have a corresponding DefId,\n     // like the compiler-generated `main` function and so on.\n     query reachable_non_generics(_: CrateNum)\n-        -> DefIdMap<SymbolExportInfo> {\n+        -> &'tcx DefIdMap<SymbolExportInfo> {\n         arena_cache\n         desc { \"looking up the exported symbols of a crate\" }\n         separate_provide_extern\n@@ -1526,7 +1526,7 @@ rustc_queries! {\n     /// added or removed in any upstream crate. Instead use the narrower\n     /// `upstream_monomorphizations_for`, `upstream_drop_glue_for`, or, even\n     /// better, `Instance::upstream_monomorphization()`.\n-    query upstream_monomorphizations(_: ()) -> DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+    query upstream_monomorphizations(_: ()) -> &'tcx DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n         arena_cache\n         desc { \"collecting available upstream monomorphizations\" }\n     }\n@@ -1568,7 +1568,7 @@ rustc_queries! {\n     }\n \n     /// Returns a list of all `extern` blocks of a crate.\n-    query foreign_modules(_: CrateNum) -> FxHashMap<DefId, ForeignModule> {\n+    query foreign_modules(_: CrateNum) -> &'tcx FxHashMap<DefId, ForeignModule> {\n         arena_cache\n         desc { \"looking up the foreign modules of a linked crate\" }\n         separate_provide_extern\n@@ -1602,15 +1602,15 @@ rustc_queries! {\n \n     /// Gets the extra data to put in each output filename for a crate.\n     /// For example, compiling the `foo` crate with `extra-filename=-a` creates a `libfoo-b.rlib` file.\n-    query extra_filename(_: CrateNum) -> String {\n+    query extra_filename(_: CrateNum) -> &'tcx String {\n         arena_cache\n         eval_always\n         desc { \"looking up the extra filename for a crate\" }\n         separate_provide_extern\n     }\n \n     /// Gets the paths where the crate came from in the file system.\n-    query crate_extern_paths(_: CrateNum) -> Vec<PathBuf> {\n+    query crate_extern_paths(_: CrateNum) -> &'tcx Vec<PathBuf> {\n         arena_cache\n         eval_always\n         desc { \"looking up the paths for extern crates\" }\n@@ -1641,7 +1641,7 @@ rustc_queries! {\n     /// Does lifetime resolution on items. Importantly, we can't resolve\n     /// lifetimes directly on things like trait methods, because of trait params.\n     /// See `rustc_resolve::late::lifetimes for details.\n-    query resolve_lifetimes(_: hir::OwnerId) -> ResolveLifetimes {\n+    query resolve_lifetimes(_: hir::OwnerId) -> &'tcx ResolveLifetimes {\n         arena_cache\n         desc { \"resolving lifetimes\" }\n     }\n@@ -1712,15 +1712,15 @@ rustc_queries! {\n         desc { |tcx| \"computing crate imported by `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n-    query lib_features(_: ()) -> LibFeatures {\n+    query lib_features(_: ()) -> &'tcx LibFeatures {\n         arena_cache\n         desc { \"calculating the lib features map\" }\n     }\n     query defined_lib_features(_: CrateNum) -> &'tcx [(Symbol, Option<Symbol>)] {\n         desc { \"calculating the lib features defined in a crate\" }\n         separate_provide_extern\n     }\n-    query stability_implications(_: CrateNum) -> FxHashMap<Symbol, Symbol> {\n+    query stability_implications(_: CrateNum) -> &'tcx FxHashMap<Symbol, Symbol> {\n         arena_cache\n         desc { \"calculating the implications between `#[unstable]` features defined in a crate\" }\n         separate_provide_extern\n@@ -1731,14 +1731,14 @@ rustc_queries! {\n         separate_provide_extern\n     }\n     /// Returns the lang items defined in another crate by loading it from metadata.\n-    query get_lang_items(_: ()) -> LanguageItems {\n+    query get_lang_items(_: ()) -> &'tcx LanguageItems {\n         arena_cache\n         eval_always\n         desc { \"calculating the lang items map\" }\n     }\n \n     /// Returns all diagnostic items defined in all crates.\n-    query all_diagnostic_items(_: ()) -> rustc_hir::diagnostic_items::DiagnosticItems {\n+    query all_diagnostic_items(_: ()) -> &'tcx rustc_hir::diagnostic_items::DiagnosticItems {\n         arena_cache\n         eval_always\n         desc { \"calculating the diagnostic items map\" }\n@@ -1751,7 +1751,7 @@ rustc_queries! {\n     }\n \n     /// Returns the diagnostic items defined in a crate.\n-    query diagnostic_items(_: CrateNum) -> rustc_hir::diagnostic_items::DiagnosticItems {\n+    query diagnostic_items(_: CrateNum) -> &'tcx rustc_hir::diagnostic_items::DiagnosticItems {\n         arena_cache\n         desc { \"calculating the diagnostic items map in a crate\" }\n         separate_provide_extern\n@@ -1761,11 +1761,11 @@ rustc_queries! {\n         desc { \"calculating the missing lang items in a crate\" }\n         separate_provide_extern\n     }\n-    query visible_parent_map(_: ()) -> DefIdMap<DefId> {\n+    query visible_parent_map(_: ()) -> &'tcx DefIdMap<DefId> {\n         arena_cache\n         desc { \"calculating the visible parent map\" }\n     }\n-    query trimmed_def_paths(_: ()) -> FxHashMap<DefId, Symbol> {\n+    query trimmed_def_paths(_: ()) -> &'tcx FxHashMap<DefId, Symbol> {\n         arena_cache\n         desc { \"calculating trimmed def paths\" }\n     }\n@@ -1774,14 +1774,14 @@ rustc_queries! {\n         desc { \"seeing if we're missing an `extern crate` item for this crate\" }\n         separate_provide_extern\n     }\n-    query used_crate_source(_: CrateNum) -> Lrc<CrateSource> {\n+    query used_crate_source(_: CrateNum) -> &'tcx Lrc<CrateSource> {\n         arena_cache\n         eval_always\n         desc { \"looking at the source for a crate\" }\n         separate_provide_extern\n     }\n     /// Returns the debugger visualizers defined for this crate.\n-    query debugger_visualizers(_: CrateNum) -> Vec<rustc_span::DebuggerVisualizerFile> {\n+    query debugger_visualizers(_: CrateNum) -> &'tcx Vec<rustc_span::DebuggerVisualizerFile> {\n         arena_cache\n         desc { \"looking up the debugger visualizers for this crate\" }\n         separate_provide_extern\n@@ -1819,7 +1819,7 @@ rustc_queries! {\n         desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n \n-    query stability_index(_: ()) -> stability::Index {\n+    query stability_index(_: ()) -> &'tcx stability::Index {\n         arena_cache\n         eval_always\n         desc { \"calculating the stability index for the local crate\" }\n@@ -1883,7 +1883,7 @@ rustc_queries! {\n     ///\n     /// This query returns an `&Arc` because codegen backends need the value even after the `TyCtxt`\n     /// has been destroyed.\n-    query output_filenames(_: ()) -> Arc<OutputFilenames> {\n+    query output_filenames(_: ()) -> &'tcx Arc<OutputFilenames> {\n         feedable\n         desc { \"getting output filenames\" }\n         arena_cache\n@@ -2056,7 +2056,7 @@ rustc_queries! {\n         remap_env_constness\n     }\n \n-    query supported_target_features(_: CrateNum) -> FxHashMap<String, Option<Symbol>> {\n+    query supported_target_features(_: CrateNum) -> &'tcx FxHashMap<String, Option<Symbol>> {\n         arena_cache\n         eval_always\n         desc { \"looking up supported target features\" }\n@@ -2115,23 +2115,24 @@ rustc_queries! {\n     /// span) for an *existing* error. Therefore, it is best-effort, and may never handle\n     /// all of the cases that the normal `ty::Ty`-based wfcheck does. This is fine,\n     /// because the `ty::Ty`-based wfcheck is always run.\n-    query diagnostic_hir_wf_check(key: (ty::Predicate<'tcx>, traits::WellFormedLoc)) -> Option<traits::ObligationCause<'tcx>> {\n+    query diagnostic_hir_wf_check(\n+        key: (ty::Predicate<'tcx>, traits::WellFormedLoc)\n+    ) -> &'tcx Option<traits::ObligationCause<'tcx>> {\n         arena_cache\n         eval_always\n         no_hash\n         desc { \"performing HIR wf-checking for predicate `{:?}` at item `{:?}`\", key.0, key.1 }\n     }\n \n-\n     /// The list of backend features computed from CLI flags (`-Ctarget-cpu`, `-Ctarget-feature`,\n     /// `--target` and similar).\n-    query global_backend_features(_: ()) -> Vec<String> {\n+    query global_backend_features(_: ()) -> &'tcx Vec<String> {\n         arena_cache\n         eval_always\n         desc { \"computing the backend features for CLI flags\" }\n     }\n \n-    query generator_diagnostic_data(key: DefId) -> Option<GeneratorDiagnosticData<'tcx>> {\n+    query generator_diagnostic_data(key: DefId) -> &'tcx Option<GeneratorDiagnosticData<'tcx>> {\n         arena_cache\n         desc { |tcx| \"looking up generator diagnostic data of `{}`\", tcx.def_path_str(key) }\n         separate_provide_extern"}, {"sha": "933aaadd62e1dd4a34dfc36410a192d904b2f259", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/abc2203e360773f3b02d65d1bc7a3e1a8e9de745/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abc2203e360773f3b02d65d1bc7a3e1a8e9de745/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "patch": "@@ -112,15 +112,15 @@ macro_rules! query_helper_param_ty {\n     ($K:ty) => { $K };\n }\n \n-macro_rules! query_storage {\n-    ([][$K:ty, $V:ty]) => {\n-        <<$K as Key>::CacheSelector as CacheSelector<'tcx, $V>>::Cache\n+macro_rules! query_if_arena {\n+    ([] $arena:ty, $no_arena:ty) => {\n+        $no_arena\n     };\n-    ([(arena_cache) $($rest:tt)*][$K:ty, $V:ty]) => {\n-        <<$K as Key>::CacheSelector as CacheSelector<'tcx, $V>>::ArenaCache\n+    ([(arena_cache) $($rest:tt)*] $arena:ty, $no_arena:ty) => {\n+        $arena\n     };\n-    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n-        query_storage!([$($modifiers)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*]$($args:tt)*) => {\n+        query_if_arena!([$($modifiers)*]$($args)*)\n     };\n }\n \n@@ -184,23 +184,30 @@ macro_rules! define_callbacks {\n \n             $(pub type $name<'tcx> = $($K)*;)*\n         }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n+        #[allow(nonstandard_style, unused_lifetimes, unused_parens)]\n         pub mod query_values {\n             use super::*;\n \n-            $(pub type $name<'tcx> = $V;)*\n+            $(pub type $name<'tcx> = query_if_arena!([$($modifiers)*] <$V as Deref>::Target, $V);)*\n         }\n-        #[allow(nonstandard_style, unused_lifetimes)]\n+        #[allow(nonstandard_style, unused_lifetimes, unused_parens)]\n         pub mod query_storage {\n             use super::*;\n \n-            $(pub type $name<'tcx> = query_storage!([$($modifiers)*][$($K)*, $V]);)*\n+            $(\n+                pub type $name<'tcx> = query_if_arena!([$($modifiers)*]\n+                    <<$($K)* as Key>::CacheSelector\n+                        as CacheSelector<'tcx, <$V as Deref>::Target>>::ArenaCache,\n+                    <<$($K)* as Key>::CacheSelector as CacheSelector<'tcx, $V>>::Cache\n+                );\n+            )*\n         }\n+\n         #[allow(nonstandard_style, unused_lifetimes)]\n         pub mod query_stored {\n             use super::*;\n \n-            $(pub type $name<'tcx> = <query_storage::$name<'tcx> as QueryStorage>::Stored;)*\n+            $(pub type $name<'tcx> = $V;)*\n         }\n \n         #[derive(Default)]\n@@ -226,7 +233,7 @@ macro_rules! define_callbacks {\n             $($(#[$attr])*\n             #[inline(always)]\n             #[must_use]\n-            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<'tcx>\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V\n             {\n                 self.at(DUMMY_SP).$name(key)\n             })*\n@@ -235,7 +242,7 @@ macro_rules! define_callbacks {\n         impl<'tcx> TyCtxtAt<'tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<'tcx>\n+            pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V\n             {\n                 let key = key.into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n@@ -306,7 +313,7 @@ macro_rules! define_callbacks {\n                 span: Span,\n                 key: query_keys::$name<'tcx>,\n                 mode: QueryMode,\n-            ) -> Option<query_stored::$name<'tcx>>;)*\n+            ) -> Option<$V>;)*\n         }\n     };\n }\n@@ -328,7 +335,7 @@ macro_rules! define_feedable {\n         $(impl<'tcx, K: IntoQueryParam<$($K)*> + Copy> TyCtxtFeed<'tcx, K> {\n             $(#[$attr])*\n             #[inline(always)]\n-            pub fn $name(self, value: $V) -> query_stored::$name<'tcx> {\n+            pub fn $name(self, value: query_values::$name<'tcx>) -> $V {\n                 let key = self.key().into_query_param();\n                 opt_remap_env_constness!([$($modifiers)*][key]);\n "}]}