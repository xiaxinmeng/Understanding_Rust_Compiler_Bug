{"sha": "34ece7ad718469b4634d5eadd91d078d95bbd6c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZWNlN2FkNzE4NDY5YjQ2MzRkNWVhZGQ5MWQwNzhkOTViYmQ2YzU=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-04-08T17:47:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:21:59Z"}, "message": "rustdoc: Clean the `initSearch` routine up.", "tree": {"sha": "2c06eeeebce4303f2d5eba7a1090fd78f6491e93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c06eeeebce4303f2d5eba7a1090fd78f6491e93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ece7ad718469b4634d5eadd91d078d95bbd6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ece7ad718469b4634d5eadd91d078d95bbd6c5", "html_url": "https://github.com/rust-lang/rust/commit/34ece7ad718469b4634d5eadd91d078d95bbd6c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ece7ad718469b4634d5eadd91d078d95bbd6c5/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd00bf37910058d3509a7a709de7b98ca11de091", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd00bf37910058d3509a7a709de7b98ca11de091", "html_url": "https://github.com/rust-lang/rust/commit/dd00bf37910058d3509a7a709de7b98ca11de091"}], "stats": {"total": 82, "additions": 39, "deletions": 43}, "files": [{"sha": "1904ab27d17d94f4927281c3bd899e098f5aa4cf", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/34ece7ad718469b4634d5eadd91d078d95bbd6c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/34ece7ad718469b4634d5eadd91d078d95bbd6c5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=34ece7ad718469b4634d5eadd91d078d95bbd6c5", "patch": "@@ -137,8 +137,6 @@\n                 val = valLower,\n                 typeFilter = query.type,\n                 results = [],\n-                aa = 0,\n-                bb = 0,\n                 split = valLower.split(\"::\");\n \n             //remove empty keywords\n@@ -150,16 +148,16 @@\n             }\n \n             // quoted values mean literal search\n-            bb = searchWords.length;\n+            var nSearchWords = searchWords.length;\n             if ((val.charAt(0) === \"\\\"\" || val.charAt(0) === \"'\") &&\n                 val.charAt(val.length - 1) === val.charAt(0))\n             {\n                 val = val.substr(1, val.length - 2);\n-                for (aa = 0; aa < bb; aa += 1) {\n-                    if (searchWords[aa] === val) {\n+                for (var i = 0; i < nSearchWords; i += 1) {\n+                    if (searchWords[i] === val) {\n                         // filter type: ... queries\n-                        if (!typeFilter || typeFilter === searchIndex[aa].ty) {\n-                            results.push([aa, -1]);\n+                        if (!typeFilter || typeFilter === searchIndex[i].ty) {\n+                            results.push({id: i, index: -1});\n                         }\n                     }\n                     if (results.length === max) {\n@@ -170,14 +168,14 @@\n                 // gather matching search results up to a certain maximum\n                 val = val.replace(/\\_/g, \"\");\n                 for (var i = 0; i < split.length; i++) {\n-                    for (aa = 0; aa < bb; aa += 1) {\n-                        if (searchWords[aa].indexOf(split[i]) > -1 ||\n-                            searchWords[aa].indexOf(val) > -1 ||\n-                            searchWords[aa].replace(/_/g, \"\").indexOf(val) > -1)\n+                    for (var j = 0; j < nSearchWords; j += 1) {\n+                        if (searchWords[j].indexOf(split[i]) > -1 ||\n+                            searchWords[j].indexOf(val) > -1 ||\n+                            searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n                         {\n                             // filter type: ... queries\n-                            if (!typeFilter || typeFilter === searchIndex[aa].ty) {\n-                                results.push([aa, searchWords[aa].replace(/_/g, \"\").indexOf(val)]);\n+                            if (!typeFilter || typeFilter === searchIndex[j].ty) {\n+                                results.push({id: j, index: searchWords[j].replace(/_/g, \"\").indexOf(val)});\n                             }\n                         }\n                         if (results.length === max) {\n@@ -187,13 +185,12 @@\n                 }\n             }\n \n-            bb = results.length;\n-            for (aa = 0; aa < bb; aa += 1) {\n-                results[aa].push(searchIndex[results[aa][0]].ty);\n-                results[aa].push(searchIndex[results[aa][0]].path);\n-                results[aa].push(searchIndex[results[aa][0]].name);\n-                results[aa].push(searchIndex[results[aa][0]].parent);\n-                results[aa].push(searchIndex[results[aa][0]].crate);\n+            var nresults = results.length;\n+            for (var i = 0; i < nresults; i += 1) {\n+                results[i].word = searchWords[results[i].id];\n+                results[i].item = searchIndex[results[i].id] || {};\n+                results[i].ty = results[i].item.ty;\n+                results[i].path = results[i].item.path;\n             }\n             // if there are no results then return to default and fail\n             if (results.length === 0) {\n@@ -202,70 +199,70 @@\n \n             // sort by exact match\n             results.sort(function search_complete_sort0(aaa, bbb) {\n-                if (searchWords[aaa[0]] === valLower &&\n-                    searchWords[bbb[0]] !== valLower) {\n+                if (aaa.word === valLower &&\n+                    bbb.word !== valLower) {\n                     return 1;\n                 }\n             });\n             // first sorting attempt\n             // sort by item name length\n             results.sort(function search_complete_sort1(aaa, bbb) {\n-                if (searchWords[aaa[0]].length > searchWords[bbb[0]].length) {\n+                if (aaa.word.length > bbb.word.length) {\n                     return 1;\n                 }\n             });\n             // second sorting attempt\n             // sort by item name\n             results.sort(function search_complete_sort1(aaa, bbb) {\n-                if (searchWords[aaa[0]].length === searchWords[bbb[0]].length &&\n-                    searchWords[aaa[0]] > searchWords[bbb[0]]) {\n+                if (aaa.word.length === bbb.word.length &&\n+                    aaa.word > bbb.word) {\n                     return 1;\n                 }\n             });\n             // third sorting attempt\n             // sort by index of keyword in item name\n-            if (results[0][1] !== -1) {\n+            if (results[0].index !== -1) {\n                 results.sort(function search_complete_sort1(aaa, bbb) {\n-                    if (aaa[1] > bbb[1] && bbb[1] === 0) {\n+                    if (aaa.index > bbb.index && bbb.index === 0) {\n                         return 1;\n                     }\n                 });\n             }\n             // fourth sorting attempt\n             // sort by type\n             results.sort(function search_complete_sort3(aaa, bbb) {\n-                if (searchWords[aaa[0]] === searchWords[bbb[0]] &&\n-                    aaa[2] > bbb[2]) {\n+                if (aaa.word === bbb.word &&\n+                    aaa.ty > bbb.ty) {\n                     return 1;\n                 }\n             });\n             // fifth sorting attempt\n             // sort by path\n             results.sort(function search_complete_sort4(aaa, bbb) {\n-                if (searchWords[aaa[0]] === searchWords[bbb[0]] &&\n-                    aaa[2] === bbb[2] && aaa[3] > bbb[3]) {\n+                if (aaa.word === bbb.word &&\n+                    aaa.ty === bbb.ty && aaa.path > bbb.path) {\n                     return 1;\n                 }\n             });\n             // sixth sorting attempt\n             // remove duplicates, according to the data provided\n-            for (aa = results.length - 1; aa > 0; aa -= 1) {\n-                if (searchWords[results[aa][0]] === searchWords[results[aa - 1][0]] &&\n-                    results[aa][2] === results[aa - 1][2] &&\n-                    results[aa][3] === results[aa - 1][3])\n+            for (var i = results.length - 1; i > 0; i -= 1) {\n+                if (results[i].word === results[i - 1].word &&\n+                    results[i].ty === results[i - 1].ty &&\n+                    results[i].path === results[i - 1].path)\n                 {\n-                    results[aa][0] = -1;\n+                    results[i].id = -1;\n                 }\n             }\n             for (var i = 0; i < results.length; i++) {\n                 var result = results[i],\n-                    name = result[4].toLowerCase(),\n-                    path = result[3].toLowerCase(),\n-                    parent = allPaths[result[6]][result[5]];\n+                    name = result.item.name.toLowerCase(),\n+                    path = result.item.path.toLowerCase(),\n+                    parent = allPaths[result.item.crate][result.item.parent];\n \n                 var valid = validateResult(name, path, split, parent);\n                 if (!valid) {\n-                    result[0] = -1;\n+                    result.id = -1;\n                 }\n             }\n             return results;\n@@ -495,8 +492,8 @@\n             resultIndex = execQuery(query, 20000, index);\n             len = resultIndex.length;\n             for (i = 0; i < len; i += 1) {\n-                if (resultIndex[i][0] > -1) {\n-                    obj = searchIndex[resultIndex[i][0]];\n+                if (resultIndex[i].id > -1) {\n+                    obj = searchIndex[resultIndex[i].id];\n                     filterdata.push([obj.name, obj.ty, obj.path, obj.desc]);\n                     results.push(obj);\n                 }\n@@ -580,7 +577,6 @@\n \n         // Draw a convenient sidebar of known crates if we have a listing\n         if (rootPath == '../') {\n-            console.log('here');\n             var sidebar = $('.sidebar');\n             var div = $('<div>').attr('class', 'block crate');\n             div.append($('<h2>').text('Crates'));"}]}