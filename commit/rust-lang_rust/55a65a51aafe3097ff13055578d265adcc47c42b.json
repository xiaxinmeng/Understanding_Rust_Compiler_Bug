{"sha": "55a65a51aafe3097ff13055578d265adcc47c42b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YTY1YTUxYWFmZTMwOTdmZjEzMDU1NTc4ZDI2NWFkY2M0N2M0MmI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-27T22:14:59Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-27T22:22:11Z"}, "message": "Eliminate \"target\" field in closures.", "tree": {"sha": "c069290f2a652495b97cfd6da92356e30af422f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c069290f2a652495b97cfd6da92356e30af422f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a65a51aafe3097ff13055578d265adcc47c42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a65a51aafe3097ff13055578d265adcc47c42b", "html_url": "https://github.com/rust-lang/rust/commit/55a65a51aafe3097ff13055578d265adcc47c42b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a65a51aafe3097ff13055578d265adcc47c42b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b977b5c508bc34fea27a2bfa4b637ab6df8ad7f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b977b5c508bc34fea27a2bfa4b637ab6df8ad7f4", "html_url": "https://github.com/rust-lang/rust/commit/b977b5c508bc34fea27a2bfa4b637ab6df8ad7f4"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "4fbf46c424324bbfe20bcdd2581c40d55aa42565", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55a65a51aafe3097ff13055578d265adcc47c42b/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a65a51aafe3097ff13055578d265adcc47c42b/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=55a65a51aafe3097ff13055578d265adcc47c42b", "patch": "@@ -97,11 +97,9 @@ const fn_field_box: int = 1;\n \n const closure_elt_tydesc: int = 0;\n \n-const closure_elt_target: int = 1;\n+const closure_elt_bindings: int = 1;\n \n-const closure_elt_bindings: int = 2;\n-\n-const closure_elt_ty_params: int = 3;\n+const closure_elt_ty_params: int = 2;\n \n const ivec_default_length: uint = 4u;\n "}, {"sha": "1475887ae4d05b1683ea4c7e5e3f4b7337358abf", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55a65a51aafe3097ff13055578d265adcc47c42b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a65a51aafe3097ff13055578d265adcc47c42b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=55a65a51aafe3097ff13055578d265adcc47c42b", "patch": "@@ -3721,14 +3721,14 @@ fn build_environment(cx: &@block_ctxt, upvars: &freevar_set) ->\n     }\n \n     // Create an environment and populate it with the bindings.\n-    let tydesc_count = std::ivec::len[ValueRef](cx.fcx.lltydescs);\n+    let tydesc_count = std::ivec::len(cx.fcx.lltydescs);\n     let llenvptrty =\n-        T_closure_ptr(*bcx_ccx(cx), T_ptr(T_nil()), val_ty(llbindingsptr),\n-                      tydesc_count);\n+        T_closure_ptr(*bcx_ccx(cx), val_ty(llbindingsptr), tydesc_count);\n     let llenvptr = alloca(cx, llvm::LLVMGetElementType(llenvptrty));\n     let llbindingsptrptr =\n         cx.build.GEP(llenvptr,\n-                     ~[C_int(0), C_int(abi::box_rc_field_body), C_int(2)]);\n+                     ~[C_int(0), C_int(abi::box_rc_field_body),\n+                       C_int(abi::closure_elt_bindings)]);\n     cx.build.Store(llbindingsptr, llbindingsptrptr);\n \n     // Copy in our type descriptors, in case the iterator body needs to refer\n@@ -4610,8 +4610,7 @@ fn trans_bind_1(cx: &@block_ctxt, f: &@ast::expr, f_res: &lval_result,\n     // closure_tys = [tydesc_ty, outgoing_fty, [bound_ty1, bound_ty2,\n     // ...], [tydesc_ty, tydesc_ty, ...]]\n     let closure_tys: ty::t[] =\n-        ~[tydesc_ty, outgoing_fty, bindings_ty,\n-          ty::mk_imm_tup(bcx_tcx(cx), captured_tys)];\n+        ~[tydesc_ty, bindings_ty, ty::mk_imm_tup(bcx_tcx(cx), captured_tys)];\n \n     // Finally, synthesize a type for that whole vector.\n     let closure_ty: ty::t = ty::mk_imm_tup(bcx_tcx(cx), closure_tys);"}, {"sha": "443d4e1de4c48f79df868b36597f018f3f28eb53", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55a65a51aafe3097ff13055578d265adcc47c42b/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a65a51aafe3097ff13055578d265adcc47c42b/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=55a65a51aafe3097ff13055578d265adcc47c42b", "patch": "@@ -674,23 +674,20 @@ fn T_typaram(tn: &type_names) -> TypeRef {\n \n fn T_typaram_ptr(tn: &type_names) -> TypeRef { ret T_ptr(T_typaram(tn)); }\n \n-fn T_closure_ptr(cx: &crate_ctxt, lltarget_ty: TypeRef,\n-                 llbindings_ty: TypeRef, n_ty_params: uint) -> TypeRef {\n+fn T_closure_ptr(cx: &crate_ctxt, llbindings_ty: TypeRef,\n+                 n_ty_params: uint) -> TypeRef {\n     // NB: keep this in sync with code in trans_bind; we're making\n     // an LLVM typeref structure that has the same \"shape\" as the ty::t\n     // it constructs.\n-\n-    ret T_ptr(T_box(T_struct(~[T_ptr(cx.tydesc_type), lltarget_ty,\n+    ret T_ptr(T_box(T_struct(~[T_ptr(cx.tydesc_type),\n                                llbindings_ty,\n                                T_captured_tydescs(cx, n_ty_params)])));\n }\n \n fn T_opaque_closure_ptr(cx: &crate_ctxt) -> TypeRef {\n     let s = \"*closure\";\n     if cx.tn.name_has_type(s) { ret cx.tn.get_type(s); }\n-    let t =\n-        T_closure_ptr(cx, T_struct(~[T_ptr(T_nil()), T_ptr(T_nil())]),\n-                      T_nil(), 0u);\n+    let t = T_closure_ptr(cx, T_nil(), 0u);\n     cx.tn.associate(s, t);\n     ret t;\n }\n@@ -836,4 +833,4 @@ fn C_named_struct(T: TypeRef, elts: &ValueRef[]) -> ValueRef {\n fn C_array(ty: TypeRef, elts: &ValueRef[]) -> ValueRef {\n     ret llvm::LLVMConstArray(ty, std::ivec::to_ptr(elts),\n                              std::ivec::len(elts));\n-}\n\\ No newline at end of file\n+}"}]}