{"sha": "a47e3c077cd7f201dbbf12140c12663df0fcda6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0N2UzYzA3N2NkN2YyMDFkYmJmMTIxNDBjMTI2NjNkZjBmY2RhNmY=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-21T14:57:22Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-21T14:57:22Z"}, "message": "fixes", "tree": {"sha": "f3d8c8647fff9e00367df0eaf067e7270a8fa31a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d8c8647fff9e00367df0eaf067e7270a8fa31a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a47e3c077cd7f201dbbf12140c12663df0fcda6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a47e3c077cd7f201dbbf12140c12663df0fcda6f", "html_url": "https://github.com/rust-lang/rust/commit/a47e3c077cd7f201dbbf12140c12663df0fcda6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a47e3c077cd7f201dbbf12140c12663df0fcda6f/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fd9450aa2111fcbe981006a9c391d57775ec14", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fd9450aa2111fcbe981006a9c391d57775ec14", "html_url": "https://github.com/rust-lang/rust/commit/88fd9450aa2111fcbe981006a9c391d57775ec14"}], "stats": {"total": 143, "additions": 69, "deletions": 74}, "files": [{"sha": "3280c4990dc66cf0444332095bf4a7574cb4526e", "filename": "src/libstd/sys/wasi/args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -1,10 +1,10 @@\n-use crate::ffi::CStr;\n-use crate::io;\n use crate::ffi::OsString;\n use crate::marker::PhantomData;\n use crate::os::wasi::ffi::OsStringExt;\n use crate::vec;\n \n+use ::wasi::wasi_unstable as wasi;\n+\n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n }\n \n@@ -20,7 +20,7 @@ pub struct Args {\n pub fn args() -> Args {\n     let buf = wasi::args_sizes_get().and_then(|args_sizes| {\n         let mut buf = Vec::with_capacity(args_sizes.get_count());\n-        wasi::get_args(args_sizes, |arg| {\n+        wasi::args_get(args_sizes, |arg| {\n             let arg = OsString::from_vec(arg.to_vec());\n             buf.push(arg);\n         })?;"}, {"sha": "9fa4abfd171b5e61ac97c50283f49988bf3b76ef", "filename": "src/libstd/sys/wasi/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -8,6 +8,8 @@ use crate::os::wasi::ffi::OsStrExt;\n use crate::path::{Path, PathBuf};\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n \n+use ::wasi::wasi_unstable as wasi;\n+\n /// WASI-specific extensions to [`File`].\n ///\n /// [`File`]: ../../../../std/fs/struct.File.html"}, {"sha": "f1839df380112d5403e7c7ddd46a424b91c84fb0", "filename": "src/libstd/sys/wasi/ext/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -8,7 +8,7 @@ use crate::sys;\n use crate::net;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n-use wasi::wasi_unstable as wasi;\n+use ::wasi::wasi_unstable as wasi;\n \n /// Raw file descriptors.\n pub type RawFd = u32;"}, {"sha": "275e1319be6adfa2e3010b6190cceb7ac56efc85", "filename": "src/libstd/sys/wasi/fd.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -3,14 +3,15 @@\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::mem;\n use crate::net::Shutdown;\n-use wasi::wasi_unstable as wasi;\n+use super::err2io;\n+use ::wasi::wasi_unstable as wasi;\n \n #[derive(Debug)]\n pub struct WasiFd {\n     fd: wasi::Fd,\n }\n \n-fn iovec(a: &mut [IoSliceMut<'_>]) -> &[wasi::IoVec] {\n+fn iovec<'a>(a: &'a mut [IoSliceMut<'_>]) -> &'a [wasi::IoVec] {\n     assert_eq!(\n         mem::size_of::<IoSliceMut<'_>>(),\n         mem::size_of::<wasi::IoVec>()\n@@ -23,7 +24,7 @@ fn iovec(a: &mut [IoSliceMut<'_>]) -> &[wasi::IoVec] {\n     unsafe { mem::transmute(a) }\n }\n \n-fn ciovec(a: &[IoSlice<'_>]) -> &[wasi::CIoVec] {\n+fn ciovec<'a>(a: &'a [IoSlice<'_>]) -> &'a [wasi::CIoVec] {\n     assert_eq!(\n         mem::size_of::<IoSlice<'_>>(),\n         mem::size_of::<wasi::CIoVec>()\n@@ -52,23 +53,23 @@ impl WasiFd {\n     }\n \n     pub fn datasync(&self) -> io::Result<()> {\n-        wasi::fd_datasync(self.fd).map_err(From::from)\n+        wasi::fd_datasync(self.fd).map_err(err2io)\n     }\n \n     pub fn pread(&self, bufs: &mut [IoSliceMut<'_>], offset: u64) -> io::Result<usize> {\n-        wasi::fd_pread(self.fd, iovec(bufs), offset).map_err(From::from)\n+        wasi::fd_pread(self.fd, iovec(bufs), offset).map_err(err2io)\n     }\n \n     pub fn pwrite(&self, bufs: &[IoSlice<'_>], offset: u64) -> io::Result<usize> {\n-        wasi::fd_pwrite(self.fd, ciovec(bufs), offset).map_err(From::from)\n+        wasi::fd_pwrite(self.fd, ciovec(bufs), offset).map_err(err2io)\n     }\n \n     pub fn read(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        wasi::fd_read(self.fd, iovec(bufs)).map_err(From::from)\n+        wasi::fd_read(self.fd, iovec(bufs)).map_err(err2io)\n     }\n \n     pub fn write(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        wasi::fd_write(self.fd, ciovec(bufs)).map_err(From::from)\n+        wasi::fd_write(self.fd, ciovec(bufs)).map_err(err2io)\n     }\n \n     pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {\n@@ -77,37 +78,37 @@ impl WasiFd {\n             SeekFrom::End(pos) => (wasi::WHENCE_END, pos),\n             SeekFrom::Current(pos) => (wasi::WHENCE_CUR, pos),\n         };\n-        wasi::fd_seek(self.fd, offset, whence).map_err(From::from)\n+        wasi::fd_seek(self.fd, offset, whence).map_err(err2io)\n     }\n \n     pub fn tell(&self) -> io::Result<u64> {\n-        wasi::fd_tell(self.fd).map_err(From::from)\n+        wasi::fd_tell(self.fd).map_err(err2io)\n     }\n \n     // FIXME: __wasi_fd_fdstat_get\n \n     pub fn set_flags(&self, flags: wasi::FdFlags) -> io::Result<()> {\n-        wasi::fd_fdstat_set_flags(self.fd, flags).map_err(From::from)\n+        wasi::fd_fdstat_set_flags(self.fd, flags).map_err(err2io)\n     }\n \n     pub fn set_rights(&self, base: wasi::Rights, inheriting: wasi::Rights) -> io::Result<()> {\n-        wasi::fd_fdstat_set_rights(self.fd, base, inheriting).map_err(From::from)\n+        wasi::fd_fdstat_set_rights(self.fd, base, inheriting).map_err(err2io)\n     }\n \n     pub fn sync(&self) -> io::Result<()> {\n-        wasi::fd_sync(self.fd).map_err(From::from)\n+        wasi::fd_sync(self.fd).map_err(err2io)\n     }\n \n     pub fn advise(&self, offset: u64, len: u64, advice: wasi::Advice) -> io::Result<()> {\n-        wasi::fd_advise(self.fd, offset, len, advice).map_err(From::from)\n+        wasi::fd_advise(self.fd, offset, len, advice).map_err(err2io)\n     }\n \n     pub fn allocate(&self, offset: u64, len: u64) -> io::Result<()> {\n-        wasi::fd_allocate(self.fd, offset, len).map_err(From::from)\n+        wasi::fd_allocate(self.fd, offset, len).map_err(err2io)\n     }\n \n     pub fn create_directory(&self, path: &[u8]) -> io::Result<()> {\n-        wasi::path_create_directory(self.fd, path).map_err(From::from)\n+        wasi::path_create_directory(self.fd, path).map_err(err2io)\n     }\n \n     pub fn link(\n@@ -118,7 +119,7 @@ impl WasiFd {\n         new_path: &[u8],\n     ) -> io::Result<()> {\n         wasi::path_link(self.fd, old_flags, old_path, new_fd.fd, new_path)\n-            .map_err(From::from)\n+            .map_err(err2io)\n     }\n \n     pub fn open(\n@@ -130,33 +131,32 @@ impl WasiFd {\n         fs_rights_inheriting: wasi::Rights,\n         fs_flags: wasi::FdFlags,\n     ) -> io::Result<WasiFd> {\n-        let fd = wasi_path_open(\n+        wasi::path_open(\n             self.fd,\n             dirflags,\n             path,\n             oflags,\n             fs_rights_base,\n             fs_rights_inheriting,\n             fs_flags,\n-        )?;\n-        Ok(WasiFd::from_raw(fd))\n+        ).map(|fd| unsafe { WasiFd::from_raw(fd) }).map_err(err2io)\n     }\n \n     pub fn readdir(&self, buf: &mut [u8], cookie: wasi::DirCookie) -> io::Result<usize> {\n-        wasi::fd_readdir(self.fd, buf, cookie).map_err(From::from)\n+        wasi::fd_readdir(self.fd, buf, cookie).map_err(err2io)\n     }\n \n     pub fn readlink(&self, path: &[u8], buf: &mut [u8]) -> io::Result<usize> {\n-        wasi::path_readlink(self.fd, path, buf).map_err(From::from)\n+        wasi::path_readlink(self.fd, path, buf).map_err(err2io)\n     }\n \n     pub fn rename(&self, old_path: &[u8], new_fd: &WasiFd, new_path: &[u8]) -> io::Result<()> {\n         wasi::path_rename(self.fd, old_path, new_fd.fd, new_path)\n-            .map_err(From::from)\n+            .map_err(err2io)\n     }\n \n-    pub fn filestat_get(&self) -> io::Result<wasi::Filestat> {\n-        wasi::fd_filestat_get(self.fd, buf).map_err(From::from)\n+    pub fn filestat_get(&self) -> io::Result<wasi::FileStat> {\n+        wasi::fd_filestat_get(self.fd).map_err(err2io)\n     }\n \n     pub fn filestat_set_times(\n@@ -166,19 +166,19 @@ impl WasiFd {\n         fstflags: wasi::FstFlags,\n     ) -> io::Result<()> {\n         wasi::fd_filestat_set_times(self.fd, atim, mtim, fstflags)\n-            .map_err(From::from)\n+            .map_err(err2io)\n     }\n \n     pub fn filestat_set_size(&self, size: u64) -> io::Result<()> {\n-        wasi::fd_filestat_set_size(self.fd, size).map_err(From::from)\n+        wasi::fd_filestat_set_size(self.fd, size).map_err(err2io)\n     }\n \n     pub fn path_filestat_get(\n         &self,\n         flags: wasi::LookupFlags,\n         path: &[u8],\n     ) -> io::Result<wasi::FileStat> {\n-        wasi::path_filestat_get(self.fd, flags, path).map_err(From::from)\n+        wasi::path_filestat_get(self.fd, flags, path).map_err(err2io)\n     }\n \n     pub fn path_filestat_set_times(\n@@ -196,40 +196,40 @@ impl WasiFd {\n             atim,\n             mtim,\n             fstflags,\n-        ).map_err(From::from)\n+        ).map_err(err2io)\n     }\n \n     pub fn symlink(&self, old_path: &[u8], new_path: &[u8]) -> io::Result<()> {\n-        wasi::path_symlink(old_path, self.fd, new_path).map_err(From::from)\n+        wasi::path_symlink(old_path, self.fd, new_path).map_err(err2io)\n     }\n \n     pub fn unlink_file(&self, path: &[u8]) -> io::Result<()> {\n-        wasi::path_unlink_file(self.fd, path).map_err(From::from)\n+        wasi::path_unlink_file(self.fd, path).map_err(err2io)\n     }\n \n     pub fn remove_directory(&self, path: &[u8]) -> io::Result<()> {\n-        wasi::path_remove_directory(self.fd, path).map_err(From::from)\n+        wasi::path_remove_directory(self.fd, path).map_err(err2io)\n     }\n \n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],\n         ri_flags: wasi::RiFlags,\n     ) -> io::Result<(usize, wasi::RoFlags)> {\n-        wasi::sock_recv(self.fd, iovec(ri_data), ri_flags).map_err(From::from)\n+        wasi::sock_recv(self.fd, iovec(ri_data), ri_flags).map_err(err2io)\n     }\n \n     pub fn sock_send(&self, si_data: &[IoSlice<'_>], si_flags: wasi::SiFlags) -> io::Result<usize> {\n-        wasi::sock_send(self.fd, ciovec(si_data), si_flags).map_err(From::from)\n+        wasi::sock_send(self.fd, ciovec(si_data), si_flags).map_err(err2io)\n     }\n \n     pub fn sock_shutdown(&self, how: Shutdown) -> io::Result<()> {\n         let how = match how {\n-            Shutdown::Read => WASI::SHUT_RD,\n-            Shutdown::Write => WASI::SHUT_WR,\n-            Shutdown::Both => WASI::SHUT_WR | WASI::SHUT_RD,\n+            Shutdown::Read => wasi::SHUT_RD,\n+            Shutdown::Write => wasi::SHUT_WR,\n+            Shutdown::Both => wasi::SHUT_WR | wasi::SHUT_RD,\n         };\n-        wasi::sock_shutdown(self.fd, how).map_err(From::from)\n+        wasi::sock_shutdown(self.fd, how).map_err(err2io)\n     }\n }\n "}, {"sha": "4113f6a2e09c0e21e7080102df326095182957af", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -7,15 +7,15 @@ use crate::os::wasi::ffi::{OsStrExt, OsStringExt};\n use crate::path::{Path, PathBuf};\n use crate::ptr;\n use crate::sync::Arc;\n-use crate::sys::fd::{DirCookie, WasiFd};\n+use crate::sys::fd::WasiFd;\n use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n \n pub use crate::sys_common::fs::copy;\n pub use crate::sys_common::fs::remove_dir_all;\n \n-use wasi::wasi_unstable as wasi;\n+use ::wasi::wasi_unstable as wasi;\n \n pub struct File {\n     fd: WasiFd,\n@@ -28,7 +28,7 @@ pub struct FileAttr {\n \n pub struct ReadDir {\n     inner: Arc<ReadDirInner>,\n-    cookie: Option<DirCookie>,\n+    cookie: Option<wasi::DirCookie>,\n     buf: Vec<u8>,\n     offset: usize,\n     cap: usize,\n@@ -70,12 +70,6 @@ pub struct FileType {\n pub struct DirBuilder {}\n \n impl FileAttr {\n-    fn zero() -> FileAttr {\n-        FileAttr {\n-            meta: unsafe { mem::zeroed() },\n-        }\n-    }\n-\n     pub fn size(&self) -> u64 {\n         self.meta.st_size\n     }\n@@ -390,7 +384,7 @@ impl File {\n     }\n \n     pub fn file_attr(&self) -> io::Result<FileAttr> {\n-        self.fd.filestat_get().map_ok(|meta| FileAttr { meta })\n+        self.fd.filestat_get().map(|meta| FileAttr { meta })\n     }\n \n     pub fn metadata_at(\n@@ -601,7 +595,7 @@ fn metadata_at(\n     path: &Path,\n ) -> io::Result<FileAttr> {\n     fd.path_filestat_get(flags, path.as_os_str().as_bytes())\n-        .map_ok(|meta| FileAttr { meta })\n+        .map(|meta| FileAttr { meta })\n }\n \n pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {"}, {"sha": "4be92faed308fe91632a5e2588234202d1a338d9", "filename": "src/libstd/sys/wasi/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -1,7 +1,7 @@\n use crate::marker::PhantomData;\n use crate::slice;\n \n-use wasi::wasi_unstable as wasi;\n+use ::wasi::wasi_unstable as wasi;\n use core::ffi::c_void;\n \n #[repr(transparent)]"}, {"sha": "89f7c887aafc04055344e02a5a0890d55f358278", "filename": "src/libstd/sys/wasi/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -14,10 +14,10 @@\n //! compiling for wasm. That way it's a compile time error for something that's\n //! guaranteed to be a runtime error!\n \n-use crate::io;\n+use crate::io as std_io;\n use crate::mem;\n use crate::os::raw::c_char;\n-use wasi::wasi_unstable as wasi;\n+use ::wasi::wasi_unstable as wasi;\n \n pub mod alloc;\n pub mod args;\n@@ -56,16 +56,19 @@ pub mod ext;\n pub fn init() {\n }\n \n-pub fn unsupported<T>() -> crate::io::Result<T> {\n+pub fn unsupported<T>() -> std_io::Result<T> {\n     Err(unsupported_err())\n }\n \n-pub fn unsupported_err() -> io::Error {\n-    io::Error::new(io::ErrorKind::Other, \"operation not supported on wasm yet\")\n+pub fn unsupported_err() -> std_io::Error {\n+    std_io::Error::new(\n+        std_io::ErrorKind::Other,\n+        \"operation not supported on wasm yet\",\n+    )\n }\n \n-pub fn decode_error_kind(_code: i32) -> io::ErrorKind {\n-    io::ErrorKind::Other\n+pub fn decode_error_kind(_code: i32) -> std_io::ErrorKind {\n+    std_io::ErrorKind::Other\n }\n \n // This enum is used as the storage for a bunch of types which can't actually\n@@ -114,16 +117,14 @@ macro_rules! impl_is_minus_one {\n \n impl_is_minus_one! { i8 i16 i32 i64 isize }\n \n-pub fn cvt<T: IsMinusOne>(t: T) -> crate::io::Result<T> {\n+pub fn cvt<T: IsMinusOne>(t: T) -> std_io::Result<T> {\n     if t.is_minus_one() {\n-        Err(io::Error::last_os_error())\n+        Err(std_io::Error::last_os_error())\n     } else {\n         Ok(t)\n     }\n }\n \n-impl From<wasi::Error> for io::Error {\n-    fn from(err: wasi::Error) -> Self {\n-        Self::from_raw_os_error(err as i32)\n-    }\n+fn err2io(err: wasi::Error) -> std_io::Error {\n+    std_io::Error::from_raw_os_error(err.get() as i32)\n }"}, {"sha": "7ee23c9a35ec7367bd0b6e26cca2ac42ec8927d6", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -12,8 +12,6 @@ use crate::sys::memchr;\n use crate::sys::{cvt, unsupported, Void};\n use crate::vec;\n \n-use wasi::wasi_unstable as wasi;\n-\n #[cfg(not(target_feature = \"atomics\"))]\n pub unsafe fn env_lock() -> impl Any {\n     // No need for a lock if we're single-threaded, but this function will need"}, {"sha": "1d57b9922e5993770c828484e6d28916515164d4", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -2,7 +2,7 @@ use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n use crate::sys::fd::WasiFd;\n \n-use wasi::wasi_unstable as wasi;\n+use ::wasi::wasi_unstable as wasi;\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -74,7 +74,7 @@ impl io::Write for Stderr {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(wasi::EBADF as i32)\n+    err.raw_os_error() == Some(wasi::EBADF.get() as i32)\n }\n \n pub fn panic_output() -> Option<impl io::Write> {"}, {"sha": "dc5a72e82a35479b4f22af714d82a58d459ccc94", "filename": "src/libstd/sys/wasi/thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -1,10 +1,11 @@\n-use crate::cmp;\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n use crate::sys::{unsupported, Void};\n use crate::time::Duration;\n \n+use ::wasi::wasi_unstable as wasi;\n+\n pub struct Thread(Void);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;"}, {"sha": "4394a22f9c233253cbcb8f8a323ecaeacf8b6f91", "filename": "src/libstd/sys/wasi/time.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a47e3c077cd7f201dbbf12140c12663df0fcda6f/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs?ref=a47e3c077cd7f201dbbf12140c12663df0fcda6f", "patch": "@@ -1,6 +1,5 @@\n use crate::time::Duration;\n-use crate::mem;\n-use wasi::wasi_unstable as wasi;\n+use ::wasi::wasi_unstable as wasi;\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n pub struct Instant(Duration);"}]}