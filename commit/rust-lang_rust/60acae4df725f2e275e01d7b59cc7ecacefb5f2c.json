{"sha": "60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWNhZTRkZjcyNWYyZTI3NWUwMWQ3YjU5Y2M3ZWNhY2VmYjVmMmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-19T09:21:31Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-19T09:43:23Z"}, "message": "Add type argument field to expr_path\n\nThis way, you can explicitly provide type parameters when calling a\ngeneric method.\n\nIssue #1227", "tree": {"sha": "3bc5fef7ff7a8fd22ae3d94e18c7c662af789121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc5fef7ff7a8fd22ae3d94e18c7c662af789121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "html_url": "https://github.com/rust-lang/rust/commit/60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d524b957ffbaadfee0491e740c78187c240cad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d524b957ffbaadfee0491e740c78187c240cad0", "html_url": "https://github.com/rust-lang/rust/commit/4d524b957ffbaadfee0491e740c78187c240cad0"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "d9b78d27cfbbb7d3185b39332bd953ceae7c4e02", "filename": "src/comp/middle/mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Fmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Fmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fmut.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -47,7 +47,7 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n     let ds: [deref] = [], ex = ex;\n     while true {\n         alt copy ex.node {\n-          expr_field(base, ident) {\n+          expr_field(base, ident, _) {\n             let auto_unbox = maybe_auto_unbox(tcx, ty::expr_ty(tcx, base));\n             let is_mut = false;\n             alt ty::struct(tcx, auto_unbox.t) {"}, {"sha": "fa0e67fa22ae43dfcf7e9d221235906214a30a48", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -1771,7 +1771,7 @@ fn visit_mod_with_impl_scope(e: @env, m: ast::_mod, s: span, sc: iscopes,\n \n fn resolve_impl_in_expr(e: @env, x: @ast::expr, sc: iscopes, v: vt<iscopes>) {\n     alt x.node {\n-      ast::expr_field(_, _) { e.impl_map.insert(x.id, sc); }\n+      ast::expr_field(_, _, _) { e.impl_map.insert(x.id, sc); }\n       _ {}\n     }\n     visit::visit_expr(x, sc, v);"}, {"sha": "f9237199ba16675ce249b78243e8675c3f4e65c5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -2858,7 +2858,7 @@ fn trans_method_callee(bcx: @block_ctxt, e: @ast::expr, base: @ast::expr,\n fn trans_callee(bcx: @block_ctxt, e: @ast::expr) -> lval_maybe_callee {\n     alt e.node {\n       ast::expr_path(p) { ret trans_path(bcx, p, e.id); }\n-      ast::expr_field(base, ident) {\n+      ast::expr_field(base, ident, _) {\n         // Lval means this is a record field, so not a method\n         if !expr_is_lval(bcx, e) {\n             alt bcx_ccx(bcx).method_map.find(e.id) {\n@@ -2889,7 +2889,7 @@ fn trans_lval(cx: @block_ctxt, e: @ast::expr) -> lval_result {\n         let v = trans_path(cx, p, e.id);\n         ret lval_maybe_callee_to_lval(v, ty::expr_ty(bcx_tcx(cx), e));\n       }\n-      ast::expr_field(base, ident) {\n+      ast::expr_field(base, ident, _) {\n         ret trans_rec_field(cx, base, ident);\n       }\n       ast::expr_index(base, idx) {\n@@ -3580,7 +3580,7 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n       ast::expr_call(f, args, _) {\n         ret trans_call(bcx, f, args, e.id, dest);\n       }\n-      ast::expr_field(_, _) {\n+      ast::expr_field(_, _, _) {\n         fail \"Taking the value of a method does not work yet (issue #435)\";\n       }\n "}, {"sha": "33ab3da4f39e02adb36098c05f6a8012b460a398", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -476,7 +476,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         set_pre_and_post(fcx.ccx, e.id, alts_overall_pp.precondition,\n                          alts_overall_pp.postcondition);\n       }\n-      expr_field(operator, _) {\n+      expr_field(operator, _, _) {\n         find_pre_post_expr(fcx, operator);\n         copy_pre_post(fcx.ccx, e.id, operator);\n       }"}, {"sha": "701ac5e04b01419d838001a64531f5b0dee663c1", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -551,7 +551,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         }\n         ret changed | set_poststate_ann(fcx.ccx, e.id, a_post);\n       }\n-      expr_field(val, _) {\n+      expr_field(val, _, _) {\n         ret find_pre_post_state_sub(fcx, pres, val, e.id, none);\n       }\n       expr_unary(_, operand) {"}, {"sha": "bf317b3b59007ff7113d6febc18c8587a06461da", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -1678,7 +1678,7 @@ fn expr_is_lval(method_map: typeck::method_map, tcx: ty::ctxt,\n     alt e.node {\n       ast::expr_path(_) | ast::expr_index(_, _) |\n       ast::expr_unary(ast::deref., _) { true }\n-      ast::expr_field(base, ident) {\n+      ast::expr_field(base, ident, _) {\n         method_map.contains_key(e.id) ? false : {\n             let basety = type_autoderef(tcx, expr_ty(tcx, base));\n             alt struct(tcx, basety) {"}, {"sha": "4beb93d0bfabddde95f66bf5de82bc520c6829fc", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -2132,15 +2132,20 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           }\n         }\n       }\n-      ast::expr_field(base, field) {\n+      ast::expr_field(base, field, tys) {\n         bot |= check_expr(fcx, base);\n         let expr_t = expr_ty(tcx, base);\n         let base_t = do_autoderef(fcx, expr.span, expr_t);\n-        let handled = false;\n+        let handled = false, n_tys = vec::len(tys);\n         alt structure_of(fcx, expr.span, base_t) {\n           ty::ty_rec(fields) {\n             alt ty::field_idx(field, fields) {\n               some(ix) {\n+                if n_tys > 0u {\n+                    tcx.sess.span_err(expr.span,\n+                                      \"can't provide type parameters \\\n+                                       to a field access\");\n+                }\n                 write::ty_only_fixup(fcx, id, fields[ix].mt.ty);\n                 handled = true;\n               }\n@@ -2150,6 +2155,11 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           ty::ty_obj(methods) {\n             alt ty::method_idx(field, methods) {\n               some(ix) {\n+                if n_tys > 0u {\n+                    tcx.sess.span_err(expr.span,\n+                                      \"can't provide type parameters \\\n+                                       to an obj method\");\n+                }\n                 let meth = methods[ix];\n                 let t = ty::mk_fn(tcx, meth.proto, meth.inputs,\n                                   meth.output, meth.cf, meth.constrs);\n@@ -2181,6 +2191,25 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                                                 fty, method.n_tps);\n                     ids += b.ids;\n                     fty = b.ty;\n+                    if n_tys > 0u {\n+                        if n_tys != method.n_tps {\n+                            tcx.sess.span_fatal\n+                                (expr.span, \"incorrect number of type \\\n+                                           parameters given for this method\");\n+\n+                        }\n+                        let i = 0u;\n+                        for ty in tys {\n+                            let tvar = ty::mk_var(fcx.ccx.tcx, b.ids[i]);\n+                            let t_subst = ast_ty_to_ty_crate(fcx.ccx, ty);\n+                            demand::simple(fcx, expr.span, tvar, t_subst);\n+                            i += 1u;\n+                        }\n+                    }\n+                } else if n_tys > 0u {\n+                    tcx.sess.span_fatal(expr.span,\n+                                        \"this method does not take type \\\n+                                         parameters\");\n                 }\n                 let substs = vec::map(ids, {|id| ty::mk_var(tcx, id)});\n                 write::ty_fixup(fcx, id, {substs: some(substs), ty: fty});"}, {"sha": "0b3a03c6b1acd99f36aebe9c8be3f603224c61f9", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -238,7 +238,7 @@ tag expr_ {\n     expr_assign(@expr, @expr);\n     expr_swap(@expr, @expr);\n     expr_assign_op(binop, @expr, @expr);\n-    expr_field(@expr, ident);\n+    expr_field(@expr, ident, [@ty]);\n     expr_index(@expr, @expr);\n     expr_path(@path);\n     expr_fail(option::t<@expr>);"}, {"sha": "e55326dbdcead1a82869d3cef3f55a19c3f1525e", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -401,8 +401,9 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_assign_op(op, el, er) {\n             expr_assign_op(op, fld.fold_expr(el), fld.fold_expr(er))\n           }\n-          expr_field(el, id) {\n-            expr_field(fld.fold_expr(el), fld.fold_ident(id))\n+          expr_field(el, id, tys) {\n+            expr_field(fld.fold_expr(el), fld.fold_ident(id),\n+                       vec::map(tys, fld.fold_ty))\n           }\n           expr_index(el, er) {\n             expr_index(fld.fold_expr(el), fld.fold_expr(er))"}, {"sha": "f1db62e24e2001451bd3cdd72dad7cd0a97bfab7", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -1025,7 +1025,12 @@ fn parse_dot_or_call_expr_with(p: parser, e: @ast::expr) -> @ast::expr {\n               token::IDENT(i, _) {\n                 hi = p.get_hi_pos();\n                 p.bump();\n-                e = mk_expr(p, lo, hi, ast::expr_field(e, p.get_str(i)));\n+                let tys = if eat(p, token::MOD_SEP) {\n+                    expect(p, token::LT);\n+                    parse_seq_to_gt(some(token::COMMA),\n+                                    {|p| parse_ty(p, false)}, p)\n+                } else { [] };\n+                e = mk_expr(p, lo, hi, ast::expr_field(e, p.get_str(i), tys));\n               }\n               t { unexpected(p, t); }\n             }"}, {"sha": "92a5d228c26e0ddf5b2b8a5d096e526899e89b5c", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -879,7 +879,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         word_space(s, \"=\");\n         print_expr(s, rhs);\n       }\n-      ast::expr_field(expr, id) {\n+      ast::expr_field(expr, id, tys) {\n         // Deal with '10.x'\n         if ends_in_lit_int(expr) {\n             popen(s); print_expr(s, expr); pclose(s);\n@@ -888,6 +888,11 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         }\n         word(s.s, \".\");\n         word(s.s, id);\n+        if vec::len(tys) > 0u {\n+            word(s.s, \"::<\");\n+            commasep(s, inconsistent, tys, print_type);\n+            word(s.s, \">\");\n+        }\n       }\n       ast::expr_index(expr, index) {\n         print_expr_parens_if_not_bot(s, expr);"}, {"sha": "7ca54272edf3b280a9f26b6aef0f4b21a1bb4ed8", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -295,7 +295,10 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         v.visit_expr(b, e, v);\n         v.visit_expr(a, e, v);\n       }\n-      expr_field(x, _) { v.visit_expr(x, e, v); }\n+      expr_field(x, _, tys) {\n+        v.visit_expr(x, e, v);\n+        for tp in tys { v.visit_ty(tp, e, v); }\n+      }\n       expr_index(a, b) { v.visit_expr(a, e, v); v.visit_expr(b, e, v); }\n       expr_path(p) { visit_path(p, e, v); }\n       expr_fail(eo) { visit_expr_opt(eo, e, v); }"}, {"sha": "8f9acab6128d05454a788f1978f6015c1fe081bf", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60acae4df725f2e275e01d7b59cc7ecacefb5f2c/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=60acae4df725f2e275e01d7b59cc7ecacefb5f2c", "patch": "@@ -35,6 +35,7 @@ fn main() {\n \n     assert [1].len().str() == \"1\";\n     assert [3, 4].map({|a| a + 4})[0] == 7;\n+    assert [3, 4].map::<uint>({|a| a as uint + 4u})[0] == 7u;\n     let x = 0u;\n     10u.times {|_n| x += 2u;}\n     assert x == 20u;"}]}