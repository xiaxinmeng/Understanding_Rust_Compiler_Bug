{"sha": "e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMWY3YjdjNzRmNTRjYzgwZjkwOGRjMDc0ZjNlZmI5NWU1YjM2ZDU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-10T02:44:12Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-10T23:32:09Z"}, "message": "std: add serialize {read,emit}_tuple{,_arg,_struct,_struct_arg}", "tree": {"sha": "67c8215d1ab550138d6e9c768a702873b0909823", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c8215d1ab550138d6e9c768a702873b0909823"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "html_url": "https://github.com/rust-lang/rust/commit/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441df26f5a1f76ed0ea185cca22c6b2c6e1307b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/441df26f5a1f76ed0ea185cca22c6b2c6e1307b1", "html_url": "https://github.com/rust-lang/rust/commit/441df26f5a1f76ed0ea185cca22c6b2c6e1307b1"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "a7a6e827febe0d1ac0778dbd7f5eed0d66ccf9ef", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "patch": "@@ -356,6 +356,26 @@ pub mod reader {\n             f()\n         }\n \n+        fn read_tuple<T>(&self, f: &fn(uint) -> T) -> T {\n+            debug!(\"read_tuple()\");\n+            self.read_seq(f)\n+        }\n+\n+        fn read_tuple_arg<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+            debug!(\"read_tuple_arg(idx=%u)\", idx);\n+            self.read_seq_elt(idx, f)\n+        }\n+\n+        fn read_tuple_struct<T>(&self, name: &str, f: &fn(uint) -> T) -> T {\n+            debug!(\"read_tuple_struct(name=%?)\", name);\n+            self.read_tuple(f)\n+        }\n+\n+        fn read_tuple_struct_arg<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+            debug!(\"read_tuple_struct_arg(idx=%u)\", idx);\n+            self.read_tuple_arg(idx, f)\n+        }\n+\n         fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n             debug!(\"read_option()\");\n             do self.read_enum(\"Option\") || {\n@@ -637,6 +657,12 @@ pub mod writer {\n             f()\n         }\n \n+        fn emit_tuple(&self, len: uint, f: &fn()) { self.emit_seq(len, f) }\n+        fn emit_tuple_arg(&self, idx: uint, f: &fn()) { self.emit_seq_elt(idx, f) }\n+\n+        fn emit_tuple_struct(&self, _name: &str, len: uint, f: &fn()) { self.emit_seq(len, f) }\n+        fn emit_tuple_struct_arg(&self, idx: uint, f: &fn()) { self.emit_seq_elt(idx, f) }\n+\n         fn emit_option(&self, f: &fn()) {\n             self.emit_enum(\"Option\", f);\n         }"}, {"sha": "658a6ce281f20c7e98aaa81edbb88e926e1608fe", "filename": "src/libstd/json.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "patch": "@@ -152,6 +152,12 @@ impl serialize::Encoder for Encoder {\n         f();\n     }\n \n+    fn emit_tuple(&self, len: uint, f: &fn()) { self.emit_seq(len, f) }\n+    fn emit_tuple_arg(&self, idx: uint, f: &fn()) { self.emit_seq_elt(idx, f) }\n+\n+    fn emit_tuple_struct(&self, _name: &str, len: uint, f: &fn()) { self.emit_seq(len, f) }\n+    fn emit_tuple_struct_arg(&self, idx: uint, f: &fn()) { self.emit_seq_elt(idx, f) }\n+\n     fn emit_option(&self, f: &fn()) { f(); }\n     fn emit_option_none(&self) { self.emit_nil(); }\n     fn emit_option_some(&self, f: &fn()) { f(); }\n@@ -291,6 +297,12 @@ impl serialize::Encoder for PrettyEncoder {\n         f();\n     }\n \n+    fn emit_tuple(&self, len: uint, f: &fn()) { self.emit_seq(len, f) }\n+    fn emit_tuple_arg(&self, idx: uint, f: &fn()) { self.emit_seq_elt(idx, f) }\n+\n+    fn emit_tuple_struct(&self, _name: &str, len: uint, f: &fn()) { self.emit_seq(len, f) }\n+    fn emit_tuple_struct_arg(&self, idx: uint, f: &fn()) { self.emit_seq_elt(idx, f) }\n+\n     fn emit_option(&self, f: &fn()) { f(); }\n     fn emit_option_none(&self) { self.emit_nil(); }\n     fn emit_option_some(&self, f: &fn()) { f(); }\n@@ -901,6 +913,26 @@ impl serialize::Decoder for Decoder {\n         }\n     }\n \n+    fn read_tuple<T>(&self, f: &fn(uint) -> T) -> T {\n+        debug!(\"read_tuple()\");\n+        self.read_seq(f)\n+    }\n+\n+    fn read_tuple_arg<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+        debug!(\"read_tuple_arg(idx=%u)\", idx);\n+        self.read_seq_elt(idx, f)\n+    }\n+\n+    fn read_tuple_struct<T>(&self, name: &str, f: &fn(uint) -> T) -> T {\n+        debug!(\"read_tuple_struct(name=%?)\", name);\n+        self.read_tuple(f)\n+    }\n+\n+    fn read_tuple_struct_arg<T>(&self, idx: uint, f: &fn() -> T) -> T {\n+        debug!(\"read_tuple_struct_arg(idx=%u)\", idx);\n+        self.read_tuple_arg(idx, f)\n+    }\n+\n     fn read_option<T>(&self, f: &fn(bool) -> T) -> T {\n         match self.stack.pop() {\n             Null => f(false),"}, {"sha": "2a685b2f1d62b9c4030413e614f88ba96ddb4523", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "patch": "@@ -56,6 +56,12 @@ pub trait Encoder {\n     #[cfg(stage3)]\n     fn emit_struct_field(&self, f_name: &str, f_idx: uint, f: &fn());\n \n+    fn emit_tuple(&self, len: uint, f: &fn());\n+    fn emit_tuple_arg(&self, idx: uint, f: &fn());\n+\n+    fn emit_tuple_struct(&self, name: &str, len: uint, f: &fn());\n+    fn emit_tuple_struct_arg(&self, f_idx: uint, f: &fn());\n+\n     // Specialized types:\n     fn emit_option(&self, f: &fn());\n     fn emit_option_none(&self);\n@@ -102,6 +108,12 @@ pub trait Decoder {\n     #[cfg(stage3)]\n     fn read_struct_field<T>(&self, f_name: &str, f_idx: uint, f: &fn() -> T) -> T;\n \n+    fn read_tuple<T>(&self, f: &fn(uint) -> T) -> T;\n+    fn read_tuple_arg<T>(&self, a_idx: uint, f: &fn() -> T) -> T;\n+\n+    fn read_tuple_struct<T>(&self, s_name: &str, f: &fn(uint) -> T) -> T;\n+    fn read_tuple_struct_arg<T>(&self, a_idx: uint, f: &fn() -> T) -> T;\n+\n     // Specialized types:\n     fn read_option<T>(&self, f: &fn(bool) -> T) -> T;\n "}, {"sha": "287c2d7ba84f81a4dae14fe8423212d7fbf05e57", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31f7b7c74f54cc80f908dc074f3efb95e5b36d5/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=e31f7b7c74f54cc80f908dc074f3efb95e5b36d5", "patch": "@@ -1260,6 +1260,20 @@ mod test {\n             self.add_to_log(CallToEmitField (name.to_str(),idx)); f();\n         }\n \n+        fn emit_tuple(&self, _len: uint, f: &fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+        fn emit_tuple_arg(&self, _idx: uint, f: &fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+\n+        fn emit_tuple_struct(&self, _name: &str, _len: uint, f: &fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+        fn emit_tuple_struct_arg(&self, _idx: uint, f: &fn()) {\n+            self.add_unknown_to_log(); f();\n+        }\n+\n         fn emit_option(&self, f: &fn()) {\n             self.add_to_log(CallToEmitOption);\n             f();"}]}