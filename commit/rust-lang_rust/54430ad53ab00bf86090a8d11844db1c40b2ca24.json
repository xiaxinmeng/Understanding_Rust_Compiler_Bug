{"sha": "54430ad53ab00bf86090a8d11844db1c40b2ca24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NDMwYWQ1M2FiMDBiZjg2MDkwYThkMTE4NDRkYjFjNDBiMmNhMjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-06T23:00:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-06T23:00:21Z"}, "message": "review comments: fix typo and add comments", "tree": {"sha": "b47e2216f7d0b19222d5d91af00d7240f7430074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b47e2216f7d0b19222d5d91af00d7240f7430074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54430ad53ab00bf86090a8d11844db1c40b2ca24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54430ad53ab00bf86090a8d11844db1c40b2ca24", "html_url": "https://github.com/rust-lang/rust/commit/54430ad53ab00bf86090a8d11844db1c40b2ca24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54430ad53ab00bf86090a8d11844db1c40b2ca24/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a4b5270a0007e950546828a7f6fc7c54354b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a4b5270a0007e950546828a7f6fc7c54354b96", "html_url": "https://github.com/rust-lang/rust/commit/f6a4b5270a0007e950546828a7f6fc7c54354b96"}], "stats": {"total": 24, "additions": 15, "deletions": 9}, "files": [{"sha": "cc73e1753d4708ae9269bbd9247166c197819535", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=54430ad53ab00bf86090a8d11844db1c40b2ca24", "patch": "@@ -4174,7 +4174,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                     oprnd_t,\n                                 );\n                                 let sp = tcx.sess.source_map().start_point(expr.span);\n-                                if let Some(sp) = tcx.sess.parse_sess.abiguous_block_expr_parse\n+                                if let Some(sp) = tcx.sess.parse_sess.ambiguous_block_expr_parse\n                                     .borrow().get(&sp)\n                                 {\n                                     tcx.sess.parse_sess.expr_parentheses_needed("}, {"sha": "4e5a51bdd9afaf2d18b74824f7d8328621b1b4a7", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=54430ad53ab00bf86090a8d11844db1c40b2ca24", "patch": "@@ -1918,7 +1918,7 @@ mod tests {\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             buffered_lints: Lock::new(vec![]),\n-            abiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n+            ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n "}, {"sha": "0ad6036942280e11cebf35522ef3827fa227dfe8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=54430ad53ab00bf86090a8d11844db1c40b2ca24", "patch": "@@ -50,7 +50,7 @@ pub struct ParseSess {\n     /// Contains the spans of block expressions that could have been incomplete based on the\n     /// operation token that followed it, but that the parser cannot identify without further\n     /// analysis.\n-    pub abiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n+    pub ambiguous_block_expr_parse: Lock<FxHashMap<Span, Span>>,\n }\n \n impl ParseSess {\n@@ -74,7 +74,7 @@ impl ParseSess {\n             included_mod_stack: Lock::new(vec![]),\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n-            abiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n+            ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n "}, {"sha": "460d829fc0676539d98796541b12dfc0634a20ce", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=54430ad53ab00bf86090a8d11844db1c40b2ca24", "patch": "@@ -2928,7 +2928,7 @@ impl<'a> Parser<'a> {\n                                               self.this_token_descr());\n                             let mut err = self.fatal(&msg);\n                             let sp = self.sess.source_map().start_point(self.span);\n-                            if let Some(sp) = self.sess.abiguous_block_expr_parse.borrow()\n+                            if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow()\n                                 .get(&sp)\n                             {\n                                 self.sess.expr_parentheses_needed(&mut err, *sp, None);\n@@ -3630,12 +3630,15 @@ impl<'a> Parser<'a> {\n                 return Ok(lhs);\n             }\n             (false, _) => {} // continue parsing the expression\n-            (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;`\n+            // An exhaustive check is done in the following block, but these are checked first\n+            // because they *are* ambiguous but also reasonable looking incorrect syntax, so we\n+            // want to keep their span info to improve diagnostics in these cases in a later stage.\n+            (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n             (true, Some(AssocOp::Add)) => { // `{ 42 } + 42\n                 // These cases are ambiguous and can't be identified in the parser alone\n                 let sp = self.sess.source_map().start_point(self.span);\n-                self.sess.abiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n+                self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n                 return Ok(lhs);\n             }\n             (true, Some(ref op)) if !op.can_continue_expr_unambiguously() => {\n@@ -4968,7 +4971,7 @@ impl<'a> Parser<'a> {\n                         let mut err = self.fatal(&msg);\n                         err.span_label(self.span, format!(\"expected {}\", expected));\n                         let sp = self.sess.source_map().start_point(self.span);\n-                        if let Some(sp) = self.sess.abiguous_block_expr_parse.borrow().get(&sp) {\n+                        if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n                             self.sess.expr_parentheses_needed(&mut err, *sp, None);\n                         }\n                         return Err(err);"}, {"sha": "828fbaef98540ed0fcebfd26e00651b56f81e150", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54430ad53ab00bf86090a8d11844db1c40b2ca24/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=54430ad53ab00bf86090a8d11844db1c40b2ca24", "patch": "@@ -208,6 +208,10 @@ impl AssocOp {\n         }\n     }\n \n+    /// This operator could be used to follow a block unambiguously.\n+    ///\n+    /// This is used for error recovery at the moment, providing a suggestion to wrap blocks with\n+    /// parentheses while having a high degree of confidence on the correctness of the suggestion.\n     pub fn can_continue_expr_unambiguously(&self) -> bool {\n         use AssocOp::*;\n         match self {\n@@ -227,7 +231,6 @@ impl AssocOp {\n             Colon => true, // `{ 42 }: usize`\n             _ => false,\n         }\n-\n     }\n }\n "}]}