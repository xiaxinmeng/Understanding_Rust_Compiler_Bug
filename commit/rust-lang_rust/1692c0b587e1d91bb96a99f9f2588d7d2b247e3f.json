{"sha": "1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OTJjMGI1ODdlMWQ5MWJiOTZhOTlmOWYyNTg4ZDdkMmIyNDdlM2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-06T10:54:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-06T10:54:45Z"}, "message": "Auto merge of #37973 - vadimcn:dllimport, r=alexcrichton\n\nImplement RFC 1717\n\nImplement the first two points from #37403.\n\nr? @alexcrichton", "tree": {"sha": "97531974dddac60a84b7e0576382abfe9c07e6c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97531974dddac60a84b7e0576382abfe9c07e6c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "html_url": "https://github.com/rust-lang/rust/commit/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff261d3a6b5964e1e3744d055238de624afc5d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff261d3a6b5964e1e3744d055238de624afc5d76", "html_url": "https://github.com/rust-lang/rust/commit/ff261d3a6b5964e1e3744d055238de624afc5d76"}, {"sha": "7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d05d1e7f0add9e5151d48d51d92b6fb5885e257", "html_url": "https://github.com/rust-lang/rust/commit/7d05d1e7f0add9e5151d48d51d92b6fb5885e257"}], "stats": {"total": 592, "additions": 437, "deletions": 155}, "files": [{"sha": "78bbb03f40dac04074d823e043657dc90eb7fd22", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -131,6 +131,7 @@ pub struct NativeLibrary {\n     pub kind: NativeLibraryKind,\n     pub name: Symbol,\n     pub cfg: Option<ast::MetaItem>,\n+    pub foreign_items: Vec<DefIndex>,\n }\n \n /// The data we save and restore about an inlined item or method.  This is not\n@@ -305,7 +306,8 @@ pub trait CrateStore<'tcx> {\n     fn is_defaulted_trait(&self, did: DefId) -> bool;\n     fn is_default_impl(&self, impl_did: DefId) -> bool;\n     fn is_foreign_item(&self, did: DefId) -> bool;\n-    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool;\n+    fn is_dllimport_foreign_item(&self, def: DefId) -> bool;\n+    fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n@@ -463,7 +465,8 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_defaulted_trait(&self, did: DefId) -> bool { bug!(\"is_defaulted_trait\") }\n     fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n     fn is_foreign_item(&self, did: DefId) -> bool { bug!(\"is_foreign_item\") }\n-    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool { false }\n+    fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }\n+    fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: CrateNum)\n@@ -529,9 +532,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // This is basically a 1-based range of ints, which is a little\n     // silly - I may fix that.\n     fn crates(&self) -> Vec<CrateNum> { vec![] }\n-    fn used_libraries(&self) -> Vec<NativeLibrary> {\n-        vec![]\n-    }\n+    fn used_libraries(&self) -> Vec<NativeLibrary> { vec![] }\n     fn used_link_args(&self) -> Vec<String> { vec![] }\n \n     // utility functions"}, {"sha": "47f0de3ce5770c3e46ddcbb061ae05c0e66bc8cb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 50, "deletions": 22, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -262,7 +262,7 @@ top_level_options!(\n         //            much sense: The search path can stay the same while the\n         //            things discovered there might have changed on disk.\n         search_paths: SearchPaths [TRACKED],\n-        libs: Vec<(String, cstore::NativeLibraryKind)> [TRACKED],\n+        libs: Vec<(String, Option<String>, cstore::NativeLibraryKind)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [TRACKED],\n \n         target_triple: String [TRACKED],\n@@ -1449,6 +1449,8 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n     }\n \n     let libs = matches.opt_strs(\"l\").into_iter().map(|s| {\n+        // Parse string of the form \"[KIND=]lib[:new_name]\",\n+        // where KIND is one of \"dylib\", \"framework\", \"static\".\n         let mut parts = s.splitn(2, '=');\n         let kind = parts.next().unwrap();\n         let (name, kind) = match (parts.next(), kind) {\n@@ -1462,7 +1464,10 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n                                                  s));\n             }\n         };\n-        (name.to_string(), kind)\n+        let mut name_parts = name.splitn(2, ':');\n+        let name = name_parts.next().unwrap();\n+        let new_name = name_parts.next();\n+        (name.to_string(), new_name.map(|n| n.to_string()), kind)\n     }).collect();\n \n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n@@ -1728,8 +1733,8 @@ mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(CrateType);\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n-    impl_dep_tracking_hash_for_sortable_vec_of!((String, cstore::NativeLibraryKind));\n-\n+    impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>,\n+                                                 cstore::NativeLibraryKind));\n     impl DepTrackingHash for SearchPaths {\n         fn hash(&self, hasher: &mut DefaultHasher, _: ErrorOutputType) {\n             let mut elems: Vec<_> = self\n@@ -1752,6 +1757,21 @@ mod dep_tracking {\n         }\n     }\n \n+    impl<T1, T2, T3> DepTrackingHash for (T1, T2, T3)\n+        where T1: DepTrackingHash,\n+              T2: DepTrackingHash,\n+              T3: DepTrackingHash\n+    {\n+        fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType) {\n+            Hash::hash(&0, hasher);\n+            DepTrackingHash::hash(&self.0, hasher, error_format);\n+            Hash::hash(&1, hasher);\n+            DepTrackingHash::hash(&self.1, hasher, error_format);\n+            Hash::hash(&2, hasher);\n+            DepTrackingHash::hash(&self.2, hasher, error_format);\n+        }\n+    }\n+\n     // This is a stable hash because BTreeMap is a sorted container\n     pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &DepTrackingHash>,\n                        hasher: &mut DefaultHasher,\n@@ -2155,29 +2175,37 @@ mod tests {\n         let mut v1 = super::basic_options();\n         let mut v2 = super::basic_options();\n         let mut v3 = super::basic_options();\n+        let mut v4 = super::basic_options();\n \n         // Reference\n-        v1.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeFramework),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v1.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n         // Change label\n-        v2.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"X\"), cstore::NativeFramework),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v2.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"X\"), None, cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n         // Change kind\n-        v3.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeStatic),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v3.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeStatic),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n+\n+        // Change new-name\n+        v4.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), Some(String::from(\"X\")), cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n         assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() != v3.dep_tracking_hash());\n+        assert!(v1.dep_tracking_hash() != v4.dep_tracking_hash());\n \n         // Check clone\n         assert_eq!(v1.dep_tracking_hash(), v1.clone().dep_tracking_hash());\n         assert_eq!(v2.dep_tracking_hash(), v2.clone().dep_tracking_hash());\n         assert_eq!(v3.dep_tracking_hash(), v3.clone().dep_tracking_hash());\n+        assert_eq!(v4.dep_tracking_hash(), v4.clone().dep_tracking_hash());\n     }\n \n     #[test]\n@@ -2187,17 +2215,17 @@ mod tests {\n         let mut v3 = super::basic_options();\n \n         // Reference\n-        v1.libs = vec![(String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeFramework),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v1.libs = vec![(String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeFramework),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n-        v2.libs = vec![(String::from(\"b\"), cstore::NativeFramework),\n-                       (String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"c\"), cstore::NativeUnknown)];\n+        v2.libs = vec![(String::from(\"b\"), None, cstore::NativeFramework),\n+                       (String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"c\"), None, cstore::NativeUnknown)];\n \n-        v3.libs = vec![(String::from(\"c\"), cstore::NativeUnknown),\n-                       (String::from(\"a\"), cstore::NativeStatic),\n-                       (String::from(\"b\"), cstore::NativeFramework)];\n+        v3.libs = vec![(String::from(\"c\"), None, cstore::NativeUnknown),\n+                       (String::from(\"a\"), None, cstore::NativeStatic),\n+                       (String::from(\"b\"), None, cstore::NativeFramework)];\n \n         assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());\n         assert!(v1.dep_tracking_hash() == v3.dep_tracking_hash());"}, {"sha": "a6b2fe471dfe517a0d761d39964c6243a28fb13e", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -471,11 +471,9 @@ pub mod debuginfo {\n // generates an llvmdeps.rs file next to this one which will be\n // automatically updated whenever LLVM is updated to include an up-to-date\n // set of the libraries we need to link to LLVM for.\n-#[link(name = \"rustllvm\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}\n-\n-#[linked_from = \"rustllvm\"] // not quite true but good enough\n+#[cfg_attr(not(all(stage0,cargobuild)),\n+           link(name = \"rustllvm\", kind = \"static\"))] // not quite true but good enough\n+#[cfg_attr(stage0, linked_from = \"rustllvm\")]\n extern \"C\" {\n     // Create and destroy contexts.\n     pub fn LLVMContextCreate() -> ContextRef;"}, {"sha": "a15edcd44be2a21083d98dd3d46de94f1fea0d5a", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -27,7 +27,7 @@\n #![feature(concat_idents)]\n #![feature(libc)]\n #![feature(link_args)]\n-#![feature(linked_from)]\n+#![cfg_attr(stage0, feature(linked_from))]\n #![feature(staged_api)]\n #![cfg_attr(not(stage0), feature(rustc_private))]\n "}, {"sha": "d36242537b8e54a255f9920796d4102f7bb97c54", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 108, "deletions": 48, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -22,7 +22,7 @@ use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, validate_crate_name, ExternCrate};\n-use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc::util::nodemap::FxHashSet;\n use rustc::middle::cstore::NativeLibrary;\n use rustc::hir::map::Definitions;\n \n@@ -52,7 +52,6 @@ pub struct CrateLoader<'a> {\n     pub sess: &'a Session,\n     cstore: &'a CStore,\n     next_crate_num: CrateNum,\n-    foreign_item_map: FxHashMap<String, Vec<ast::NodeId>>,\n     local_crate_name: Symbol,\n }\n \n@@ -114,6 +113,13 @@ fn register_native_lib(sess: &Session,\n     cstore.add_used_library(lib);\n }\n \n+fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n+    match lib.cfg {\n+        Some(ref cfg) => attr::cfg_matches(cfg, &sess.parse_sess, None),\n+        None => true,\n+    }\n+}\n+\n // Extra info about a crate loaded for plugins or exported macros.\n struct ExtensionCrate {\n     metadata: PMDSource,\n@@ -148,7 +154,6 @@ impl<'a> CrateLoader<'a> {\n             sess: sess,\n             cstore: cstore,\n             next_crate_num: cstore.next_crate_num(),\n-            foreign_item_map: FxHashMap(),\n             local_crate_name: Symbol::intern(local_crate_name),\n         }\n     }\n@@ -292,7 +297,7 @@ impl<'a> CrateLoader<'a> {\n \n         let cnum_map = self.resolve_crate_deps(root, &crate_root, &metadata, cnum, span, dep_kind);\n \n-        let cmeta = Rc::new(cstore::CrateMetadata {\n+        let mut cmeta = cstore::CrateMetadata {\n             name: name,\n             extern_crate: Cell::new(None),\n             key_map: metadata.load_key_map(crate_root.index),\n@@ -310,8 +315,18 @@ impl<'a> CrateLoader<'a> {\n                 rlib: rlib,\n                 rmeta: rmeta,\n             },\n-        });\n+            dllimport_foreign_items: FxHashSet(),\n+        };\n \n+        let dllimports: Vec<_> = cmeta.get_native_libraries().iter()\n+                            .filter(|lib| relevant_lib(self.sess, lib) &&\n+                                          lib.kind == cstore::NativeLibraryKind::NativeUnknown)\n+                            .flat_map(|lib| &lib.foreign_items)\n+                            .map(|id| *id)\n+                            .collect();\n+        cmeta.dllimport_foreign_items.extend(dllimports);\n+\n+        let cmeta = Rc::new(cmeta);\n         self.cstore.set_crate_data(cnum, cmeta.clone());\n         (cnum, cmeta)\n     }\n@@ -640,18 +655,28 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn register_statically_included_foreign_items(&mut self) {\n+    fn get_foreign_items_of_kind(&self, kind: cstore::NativeLibraryKind) -> Vec<DefIndex> {\n+        let mut items = vec![];\n         let libs = self.cstore.get_used_libraries();\n-        for (foreign_lib, list) in self.foreign_item_map.iter() {\n-            let is_static = libs.borrow().iter().any(|lib| {\n-                lib.name == &**foreign_lib && lib.kind == cstore::NativeStatic\n-            });\n-            if is_static {\n-                for id in list {\n-                    self.cstore.add_statically_included_foreign_item(*id);\n-                }\n+        for lib in libs.borrow().iter() {\n+            if relevant_lib(self.sess, lib) && lib.kind == kind {\n+                items.extend(&lib.foreign_items);\n             }\n         }\n+        items\n+    }\n+\n+    fn register_statically_included_foreign_items(&mut self) {\n+        for id in self.get_foreign_items_of_kind(cstore::NativeStatic) {\n+            self.cstore.add_statically_included_foreign_item(id);\n+        }\n+    }\n+\n+    fn register_dllimport_foreign_items(&mut self) {\n+        let mut dllimports = self.cstore.dllimport_foreign_items.borrow_mut();\n+        for id in self.get_foreign_items_of_kind(cstore::NativeUnknown) {\n+            dllimports.insert(id);\n+        }\n     }\n \n     fn inject_panic_runtime(&mut self, krate: &ast::Crate) {\n@@ -861,7 +886,8 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n-    fn process_foreign_mod(&mut self, i: &ast::Item, fm: &ast::ForeignMod) {\n+    fn process_foreign_mod(&mut self, i: &ast::Item, fm: &ast::ForeignMod,\n+                           definitions: &Definitions) {\n         if fm.abi == Abi::Rust || fm.abi == Abi::RustIntrinsic || fm.abi == Abi::PlatformIntrinsic {\n             return;\n         }\n@@ -912,24 +938,17 @@ impl<'a> CrateLoader<'a> {\n             let cfg = cfg.map(|list| {\n                 list[0].meta_item().unwrap().clone()\n             });\n+            let foreign_items = fm.items.iter()\n+                .map(|it| definitions.opt_def_index(it.id).unwrap())\n+                .collect();\n             let lib = NativeLibrary {\n                 name: n,\n                 kind: kind,\n                 cfg: cfg,\n+                foreign_items: foreign_items,\n             };\n             register_native_lib(self.sess, self.cstore, Some(m.span), lib);\n         }\n-\n-        // Finally, process the #[linked_from = \"...\"] attribute\n-        for m in i.attrs.iter().filter(|a| a.check_name(\"linked_from\")) {\n-            let lib_name = match m.value_str() {\n-                Some(name) => name,\n-                None => continue,\n-            };\n-            let list = self.foreign_item_map.entry(lib_name.to_string())\n-                                                    .or_insert(Vec::new());\n-            list.extend(fm.items.iter().map(|it| it.id));\n-        }\n     }\n }\n \n@@ -942,35 +961,76 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n             dump_crates(&self.cstore);\n         }\n \n-        for &(ref name, kind) in &self.sess.opts.libs {\n-            let lib = NativeLibrary {\n-                name: Symbol::intern(name),\n-                kind: kind,\n-                cfg: None,\n-            };\n-            register_native_lib(self.sess, self.cstore, None, lib);\n+        // Process libs passed on the command line\n+        // First, check for errors\n+        let mut renames = FxHashSet();\n+        for &(ref name, ref new_name, _) in &self.sess.opts.libs {\n+            if let &Some(ref new_name) = new_name {\n+                if new_name.is_empty() {\n+                    self.sess.err(\n+                        &format!(\"an empty renaming target was specified for library `{}`\",name));\n+                } else if !self.cstore.get_used_libraries().borrow().iter()\n+                                                           .any(|lib| lib.name == name as &str) {\n+                    self.sess.err(&format!(\"renaming of the library `{}` was specified, \\\n+                                            however this crate contains no #[link(...)] \\\n+                                            attributes referencing this library.\", name));\n+                } else if renames.contains(name) {\n+                    self.sess.err(&format!(\"multiple renamings were specified for library `{}` .\",\n+                                            name));\n+                } else {\n+                    renames.insert(name);\n+                }\n+            }\n+        }\n+        // Update kind and, optionally, the name of all native libaries\n+        // (there may be more than one) with the specified name.\n+        for &(ref name, ref new_name, kind) in &self.sess.opts.libs {\n+            let mut found = false;\n+            for lib in self.cstore.get_used_libraries().borrow_mut().iter_mut() {\n+                if lib.name == name as &str {\n+                    lib.kind = kind;\n+                    if let &Some(ref new_name) = new_name {\n+                        lib.name = Symbol::intern(new_name);\n+                    }\n+                    found = true;\n+                }\n+            }\n+            if !found {\n+                // Add if not found\n+                let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n+                let lib = NativeLibrary {\n+                    name: Symbol::intern(new_name.unwrap_or(name)),\n+                    kind: kind,\n+                    cfg: None,\n+                    foreign_items: Vec::new(),\n+                };\n+                register_native_lib(self.sess, self.cstore, None, lib);\n+            }\n         }\n         self.register_statically_included_foreign_items();\n+        self.register_dllimport_foreign_items();\n     }\n \n     fn process_item(&mut self, item: &ast::Item, definitions: &Definitions) {\n         match item.node {\n-            ast::ItemKind::ExternCrate(_) => {}\n-            ast::ItemKind::ForeignMod(ref fm) => return self.process_foreign_mod(item, fm),\n-            _ => return,\n-        }\n-\n-        let info = self.extract_crate_info(item).unwrap();\n-        let (cnum, ..) = self.resolve_crate(\n-            &None, info.ident, info.name, None, item.span, PathKind::Crate, info.dep_kind,\n-        );\n+            ast::ItemKind::ForeignMod(ref fm) => {\n+                self.process_foreign_mod(item, fm, definitions)\n+            },\n+            ast::ItemKind::ExternCrate(_) => {\n+                let info = self.extract_crate_info(item).unwrap();\n+                let (cnum, ..) = self.resolve_crate(\n+                    &None, info.ident, info.name, None, item.span, PathKind::Crate, info.dep_kind,\n+                );\n \n-        let def_id = definitions.opt_local_def_id(item.id).unwrap();\n-        let len = definitions.def_path(def_id.index).data.len();\n+                let def_id = definitions.opt_local_def_id(item.id).unwrap();\n+                let len = definitions.def_path(def_id.index).data.len();\n \n-        let extern_crate =\n-            ExternCrate { def_id: def_id, span: item.span, direct: true, path_len: len };\n-        self.update_extern_crate(cnum, extern_crate, &mut FxHashSet());\n-        self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n+                let extern_crate =\n+                    ExternCrate { def_id: def_id, span: item.span, direct: true, path_len: len };\n+                self.update_extern_crate(cnum, extern_crate, &mut FxHashSet());\n+                self.cstore.add_extern_mod_stmt_cnum(info.id, cnum);\n+            }\n+            _ => {}\n+        }\n     }\n }"}, {"sha": "7700ebde181333772a7fbda715e721ed85831e18", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -15,13 +15,13 @@ use locator;\n use schema;\n \n use rustc::dep_graph::DepGraph;\n-use rustc::hir::def_id::{CRATE_DEF_INDEX, CrateNum, DefIndex, DefId};\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, LOCAL_CRATE, CrateNum, DefIndex, DefId};\n use rustc::hir::map::DefKey;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate};\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc::util::nodemap::{FxHashMap, NodeMap, NodeSet, DefIdMap};\n+use rustc::util::nodemap::{FxHashMap, FxHashSet, NodeMap, DefIdMap};\n \n use std::cell::{RefCell, Cell};\n use std::rc::Rc;\n@@ -31,7 +31,7 @@ use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax_pos;\n \n-pub use rustc::middle::cstore::{NativeLibrary, LinkagePreference};\n+pub use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind, LinkagePreference};\n pub use rustc::middle::cstore::{NativeStatic, NativeFramework, NativeUnknown};\n pub use rustc::middle::cstore::{CrateSource, LinkMeta, LibSource};\n \n@@ -84,6 +84,8 @@ pub struct CrateMetadata {\n     pub source: CrateSource,\n \n     pub proc_macros: Option<Vec<(ast::Name, Rc<SyntaxExtension>)>>,\n+    // Foreign items imported from a dylib (Windows only)\n+    pub dllimport_foreign_items: FxHashSet<DefIndex>,\n }\n \n pub struct CachedInlinedItem {\n@@ -100,7 +102,8 @@ pub struct CStore {\n     extern_mod_crate_map: RefCell<NodeMap<CrateNum>>,\n     used_libraries: RefCell<Vec<NativeLibrary>>,\n     used_link_args: RefCell<Vec<String>>,\n-    statically_included_foreign_items: RefCell<NodeSet>,\n+    statically_included_foreign_items: RefCell<FxHashSet<DefIndex>>,\n+    pub dllimport_foreign_items: RefCell<FxHashSet<DefIndex>>,\n     pub inlined_item_cache: RefCell<DefIdMap<Option<CachedInlinedItem>>>,\n     pub defid_for_inlined_node: RefCell<NodeMap<DefId>>,\n     pub visible_parent_map: RefCell<DefIdMap<DefId>>,\n@@ -114,7 +117,8 @@ impl CStore {\n             extern_mod_crate_map: RefCell::new(FxHashMap()),\n             used_libraries: RefCell::new(Vec::new()),\n             used_link_args: RefCell::new(Vec::new()),\n-            statically_included_foreign_items: RefCell::new(NodeSet()),\n+            statically_included_foreign_items: RefCell::new(FxHashSet()),\n+            dllimport_foreign_items: RefCell::new(FxHashSet()),\n             visible_parent_map: RefCell::new(FxHashMap()),\n             inlined_item_cache: RefCell::new(FxHashMap()),\n             defid_for_inlined_node: RefCell::new(FxHashMap()),\n@@ -246,12 +250,13 @@ impl CStore {\n         self.extern_mod_crate_map.borrow_mut().insert(emod_id, cnum);\n     }\n \n-    pub fn add_statically_included_foreign_item(&self, id: ast::NodeId) {\n+    pub fn add_statically_included_foreign_item(&self, id: DefIndex) {\n         self.statically_included_foreign_items.borrow_mut().insert(id);\n     }\n \n-    pub fn do_is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool {\n-        self.statically_included_foreign_items.borrow().contains(&id)\n+    pub fn do_is_statically_included_foreign_item(&self, def_id: DefId) -> bool {\n+        assert!(def_id.krate == LOCAL_CRATE);\n+        self.statically_included_foreign_items.borrow().contains(&def_id.index)\n     }\n \n     pub fn do_extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<CrateNum> {"}, {"sha": "2882efb75b072cb63ec6c6afdf4c24e801a1efdb", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -19,7 +19,7 @@ use rustc::hir::def::{self, Def};\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n@@ -217,9 +217,17 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(did.krate).is_foreign_item(did.index)\n     }\n \n-    fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool\n+    fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool\n     {\n-        self.do_is_statically_included_foreign_item(id)\n+        self.do_is_statically_included_foreign_item(def_id)\n+    }\n+\n+    fn is_dllimport_foreign_item(&self, def_id: DefId) -> bool {\n+        if def_id.krate == LOCAL_CRATE {\n+            self.dllimport_foreign_items.borrow().contains(&def_id.index)\n+        } else {\n+            self.get_crate_data(def_id.krate).is_dllimport_foreign_item(def_id.index)\n+        }\n     }\n \n     fn dylib_dependency_formats(&self, cnum: CrateNum)"}, {"sha": "2a6063cc4bda95c614daae68b524873463638603", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -1068,6 +1068,10 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    pub fn is_dllimport_foreign_item(&self, id: DefIndex) -> bool {\n+        self.dllimport_foreign_items.contains(&id)\n+    }\n+\n     pub fn is_defaulted_trait(&self, trait_id: DefIndex) -> bool {\n         match self.entry(trait_id).kind {\n             EntryKind::Trait(data) => data.decode(self).has_default_impl,"}, {"sha": "5b79f040d0f69f387b3e4be57f5f373e8d364545", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -1536,7 +1536,8 @@ pub fn find_exported_symbols(tcx: TyCtxt, reachable: NodeSet) -> NodeSet {\n         // let it through if it's included statically.\n         match tcx.map.get(id) {\n             hir_map::NodeForeignItem(..) => {\n-                tcx.sess.cstore.is_statically_included_foreign_item(id)\n+                let def_id = tcx.map.local_def_id(id);\n+                tcx.sess.cstore.is_statically_included_foreign_item(def_id)\n             }\n \n             // Only consider nodes that actually have exported symbols."}, {"sha": "d7e9f1372e06d1af5a206f7243c1a5c84cc98345", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -637,7 +637,11 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                 llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n             }\n         }\n-\n+        if ccx.use_dll_storage_attrs() && ccx.sess().cstore.is_dllimport_foreign_item(def_id) {\n+            unsafe {\n+                llvm::LLVMSetDLLStorageClass(llfn, llvm::DLLStorageClass::DllImport);\n+            }\n+        }\n         llfn\n     };\n "}, {"sha": "730a4025a59a8ab3b0bd301302039080e0ae762d", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -191,14 +191,25 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n                 llvm::set_thread_local(g, true);\n             }\n         }\n-        if ccx.use_dll_storage_attrs() {\n+        if ccx.use_dll_storage_attrs() && !ccx.sess().cstore.is_foreign_item(def_id) {\n+            // This item is external but not foreign, i.e. it originates from an external Rust\n+            // crate. Since we don't know whether this crate will be linked dynamically or\n+            // statically in the final application, we always mark such symbols as 'dllimport'.\n+            // If final linkage happens to be static, we rely on compiler-emitted __imp_ stubs to\n+            // make things work.\n             unsafe {\n                 llvm::LLVMSetDLLStorageClass(g, llvm::DLLStorageClass::DllImport);\n             }\n         }\n         g\n     };\n \n+    if ccx.use_dll_storage_attrs() && ccx.sess().cstore.is_dllimport_foreign_item(def_id) {\n+        // For foreign (native) libs we know the exact storage type to use.\n+        unsafe {\n+            llvm::LLVMSetDLLStorageClass(g, llvm::DLLStorageClass::DllImport);\n+        }\n+    }\n     ccx.instances().borrow_mut().insert(instance, g);\n     ccx.statics().borrow_mut().insert(g, def_id);\n     g"}, {"sha": "72ea781bc2217552accf643be233c16538f046d6", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -132,7 +132,6 @@ declare_features! (\n \n     (active, allocator, \"1.0.0\", Some(27389)),\n     (active, fundamental, \"1.0.0\", Some(29635)),\n-    (active, linked_from, \"1.3.0\", Some(29629)),\n     (active, main, \"1.0.0\", Some(29634)),\n     (active, needs_allocator, \"1.4.0\", Some(27389)),\n     (active, on_unimplemented, \"1.0.0\", Some(29628)),\n@@ -638,12 +637,6 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                         is an experimental feature\",\n                                        cfg_fn!(fundamental))),\n \n-    (\"linked_from\", Normal, Gated(Stability::Unstable,\n-                                  \"linked_from\",\n-                                  \"the `#[linked_from]` attribute \\\n-                                   is an experimental feature\",\n-                                  cfg_fn!(linked_from))),\n-\n     (\"proc_macro_derive\", Normal, Gated(Stability::Unstable,\n                                         \"proc_macro\",\n                                         \"the `#[proc_macro_derive]` attribute \\"}, {"sha": "06001c6b01426f1a0b18fa66f46019dfbb922b81", "filename": "src/test/codegen/dllimports/auxiliary/dummy.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcodegen%2Fdllimports%2Fauxiliary%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcodegen%2Fdllimports%2Fauxiliary%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdllimports%2Fauxiliary%2Fdummy.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![crate_type = \"staticlib\"]\n+\n+// Since codegen tests don't actually perform linking, this library doesn't need to export\n+// any symbols.  It's here just to satisfy the compiler looking for a .lib file when processing\n+// #[link(...)] attributes in wrapper.rs."}, {"sha": "c03f88092e583bd098c40915dd3b0b293cf2b0bc", "filename": "src/test/codegen/dllimports/auxiliary/wrapper.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcodegen%2Fdllimports%2Fauxiliary%2Fwrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcodegen%2Fdllimports%2Fauxiliary%2Fwrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdllimports%2Fauxiliary%2Fwrapper.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![crate_type = \"rlib\"]\n+\n+#[link(name = \"dummy\", kind=\"dylib\")]\n+extern \"C\" {\n+    pub fn dylib_func2(x: i32) -> i32;\n+    pub static dylib_global2: i32;\n+}\n+\n+#[link(name = \"dummy\", kind=\"static\")]\n+extern \"C\" {\n+    pub fn static_func2(x: i32) -> i32;\n+    pub static static_global2: i32;\n+}"}, {"sha": "64f516aa272e6338cc376fc9955a6b873e5f167a", "filename": "src/test/codegen/dllimports/main.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fdllimports%2Fmain.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test is for *-windows-msvc only.\n+// ignore-gnu\n+// ignore-android\n+// ignore-bitrig\n+// ignore-macos\n+// ignore-dragonfly\n+// ignore-freebsd\n+// ignore-haiku\n+// ignore-ios\n+// ignore-linux\n+// ignore-netbsd\n+// ignore-openbsd\n+// ignore-solaris\n+// ignore-emscripten\n+\n+// aux-build:dummy.rs\n+// aux-build:wrapper.rs\n+\n+extern crate wrapper;\n+\n+// Check that external symbols coming from foreign dylibs are adorned with 'dllimport',\n+// whereas symbols coming from foreign staticlibs are not. (RFC-1717)\n+\n+// CHECK: @dylib_global1 = external dllimport local_unnamed_addr global i32\n+// CHECK: @dylib_global2 = external dllimport local_unnamed_addr global i32\n+// CHECK: @static_global1 = external local_unnamed_addr global i32\n+// CHECK: @static_global2 = external local_unnamed_addr global i32\n+\n+// CHECK: declare dllimport i32 @dylib_func1(i32)\n+// CHECK: declare dllimport i32 @dylib_func2(i32)\n+// CHECK: declare i32 @static_func1(i32)\n+// CHECK: declare i32 @static_func2(i32)\n+\n+#[link(name = \"dummy\", kind=\"dylib\")]\n+extern \"C\" {\n+    pub fn dylib_func1(x: i32) -> i32;\n+    pub static dylib_global1: i32;\n+}\n+\n+#[link(name = \"dummy\", kind=\"static\")]\n+extern \"C\" {\n+    pub fn static_func1(x: i32) -> i32;\n+    pub static static_global1: i32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        dylib_func1(dylib_global1);\n+        wrapper::dylib_func2(wrapper::dylib_global2);\n+\n+        static_func1(static_global1);\n+        wrapper::static_func2(wrapper::static_global2);\n+    }\n+}"}, {"sha": "810efdedfd6c693e9a2f9c2eaccb7e7056c70e4a", "filename": "src/test/compile-fail/rfc1717/missing-link-attr.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmissing-link-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmissing-link-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmissing-link-attr.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -l foo:bar\n+// error-pattern: renaming of the library `foo` was specified\n+\n+#![crate_type = \"lib\"]"}, {"sha": "e75c1a14b24d3ccd8485d6e532bf8f7436ada545", "filename": "src/test/compile-fail/rfc1717/multiple-renames.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmultiple-renames.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmultiple-renames.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1717%2Fmultiple-renames.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -l foo:bar -l foo:baz\n+// error-pattern: multiple renamings were specified for library\n+\n+#![crate_type = \"lib\"]\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {}"}, {"sha": "ab8c238bc27a38cdbdbce7c4d81ef3550508190a", "filename": "src/test/compile-fail/rfc1717/rename-to-empty.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcompile-fail%2Frfc1717%2Frename-to-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Fcompile-fail%2Frfc1717%2Frename-to-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1717%2Frename-to-empty.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -l foo:\n+// error-pattern: an empty renaming target was specified for library\n+\n+#![crate_type = \"lib\"]\n+\n+#[link(name = \"foo\")]\n+extern \"C\" {}"}, {"sha": "44be5ac890d6e3b0bcf924d49f398dd6549815bf", "filename": "src/test/run-make/c-static-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Ffoo.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type = \"dylib\"]\n \n-#[link(name = \"cfoo\")]\n+#[link(name = \"cfoo\", kind = \"static\")]\n extern {\n     fn foo();\n }"}, {"sha": "cbd7b020bd8126420018069bce321ebd53695bfb", "filename": "src/test/run-make/c-static-rlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Ffoo.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type = \"rlib\"]\n \n-#[link(name = \"cfoo\")]\n+#[link(name = \"cfoo\", kind = \"static\")]\n extern {\n     fn foo();\n }"}, {"sha": "8f5ff091b3b6b81296fd9ce77a862b0403c938ff", "filename": "src/test/run-make/extern-fn-generic/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftest.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -12,7 +12,7 @@ extern crate testcrate;\n \n extern \"C\" fn bar<T>(ts: testcrate::TestStruct<T>) -> T { ts.y }\n \n-#[link(name = \"test\")]\n+#[link(name = \"test\", kind = \"static\")]\n extern {\n     fn call(c: extern \"C\" fn(testcrate::TestStruct<i32>) -> i32) -> i32;\n }"}, {"sha": "d02c05047c0099fd6f9a72f849ccffdd4162ac4d", "filename": "src/test/run-make/extern-fn-generic/testcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftestcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftestcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-generic%2Ftestcrate.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -18,7 +18,7 @@ pub struct TestStruct<T> {\n \n pub extern \"C\" fn foo<T>(ts: TestStruct<T>) -> T { ts.y }\n \n-#[link(name = \"test\")]\n+#[link(name = \"test\", kind = \"static\")]\n extern {\n     pub fn call(c: extern \"C\" fn(TestStruct<i32>) -> i32) -> i32;\n }"}, {"sha": "1963976b4b0f5e63ee294dbe709974da9277e3e1", "filename": "src/test/run-make/interdependent-c-libraries/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Fbar.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -12,7 +12,7 @@\n \n extern crate foo;\n \n-#[link(name = \"bar\")]\n+#[link(name = \"bar\", kind = \"static\")]\n extern {\n     fn bar();\n }"}, {"sha": "7a0fe6bb18f90528f0b5fc727adb267071c98adf", "filename": "src/test/run-make/interdependent-c-libraries/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finterdependent-c-libraries%2Ffoo.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -10,7 +10,7 @@\n \n #![crate_type = \"rlib\"]\n \n-#[link(name = \"foo\")]\n+#[link(name = \"foo\", kind = \"static\")]\n extern {\n     fn foo();\n }"}, {"sha": "6917fa55579801da9e10c8fc76b3a83257303340", "filename": "src/test/run-make/issue-15460/foo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-15460%2Ffoo.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -8,11 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(linked_from)]\n #![crate_type = \"dylib\"]\n \n #[link(name = \"foo\", kind = \"static\")]\n-#[linked_from = \"foo\"]\n extern {\n     pub fn foo();\n }"}, {"sha": "6717d16cb7c41dbae655b6130079782dccf59e2a", "filename": "src/test/run-make/issue-25581/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fissue-25581%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Fissue-25581%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-25581%2Ftest.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -12,7 +12,7 @@\n \n extern crate libc;\n \n-#[link(name = \"test\")]\n+#[link(name = \"test\", kind = \"static\")]\n extern {\n     fn slice_len(s: &[u8]) -> libc::size_t;\n     fn slice_elem(s: &[u8], idx: libc::size_t) -> u8;"}, {"sha": "aaac3927f1cf3996eaf47324843a46e8a5c2fea0", "filename": "src/test/run-make/link-path-order/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flink-path-order%2Fmain.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -12,7 +12,7 @@\n \n extern crate libc;\n \n-#[link(name=\"foo\")]\n+#[link(name=\"foo\", kind = \"static\")]\n extern {\n     fn should_return_one() -> libc::c_int;\n }"}, {"sha": "23dd060318484ab9a1cf7c4f7c34a4a90d1e6930", "filename": "src/test/run-pass/abi-sysv64-arg-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fabi-sysv64-arg-passing.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -98,7 +98,7 @@ mod tests {\n     #[derive(Copy, Clone)]\n     pub struct Floats { a: f64, b: u8, c: f64 }\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern \"sysv64\" {\n         pub fn rust_int8_to_int32(_: i8) -> i32;\n         pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;"}, {"sha": "208b4df3c3e7e5c542c0666e558dfb3b58c47521", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -14,7 +14,7 @@\n \n extern crate libc;\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "741ce351da38e090cda35b208aa84c418ab9e73b", "filename": "src/test/run-pass/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -13,7 +13,7 @@\n \n extern crate libc;\n \n-#[link(name=\"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_get_test_int() -> libc::intptr_t;\n }"}, {"sha": "150dffeea886c3d7701737772db700393db4482e", "filename": "src/test/run-pass/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -17,7 +17,7 @@ extern crate libc;\n pub mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "cef36274c625e4884bdd17971a5eb52ab5acda9e", "filename": "src/test/run-pass/auxiliary/foreign_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fforeign_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fforeign_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fforeign_lib.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -15,7 +15,7 @@\n pub mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }"}, {"sha": "b9da39cbbcb4e35a516c4456b5b9a2c0f16b5ef6", "filename": "src/test/run-pass/auxiliary/issue-25185-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-25185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-25185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-25185-1.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -10,12 +10,9 @@\n \n // no-prefer-dynamic\n \n-#![feature(linked_from)]\n-\n #![crate_type = \"rlib\"]\n \n #[link(name = \"rust_test_helpers\", kind = \"static\")]\n-#[linked_from = \"rust_test_helpers\"]\n extern {\n     pub fn rust_dbg_extern_identity_u32(u: u32) -> u32;\n }"}, {"sha": "5319693405b5dd5b2e76f9c97d7c7a1ede1fefd8", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -15,7 +15,7 @@\n mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }"}, {"sha": "bf94dd178821a1176d6aba642cfcfc5c9f586f0a", "filename": "src/test/run-pass/cabi-int-widening.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fcabi-int-widening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fcabi-int-widening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcabi-int-widening.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_int8_to_int32(_: i8) -> i32;\n }"}, {"sha": "6a9da767ad6ebb633ac5ab7f9741cee6737daa11", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -15,7 +15,7 @@ extern crate libc;\n mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "3bdc8c18864fd6b0250ff0f96db3f3f41d9137ca", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -18,7 +18,7 @@ use std::thread;\n mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "256eedccb8bfaa9bac1ddb1453b4678910f60dd5", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -15,7 +15,7 @@ extern crate libc;\n mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "a27474dcf866a1669bcf24c633d63184a53ff2fe", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -22,7 +22,7 @@ use std::thread;\n mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t) -> libc::uintptr_t,\n                              data: libc::uintptr_t)"}, {"sha": "afdd53db775a85fa5e81bef7b84a3fb42d630e9a", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -16,7 +16,7 @@ pub struct TwoU16s {\n     one: u16, two: u16\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n }"}, {"sha": "035084ae9bd3a96d177f2c636a1f84bdca7e26f5", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -16,7 +16,7 @@ pub struct TwoU32s {\n     one: u32, two: u32\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU32s(v: TwoU32s) -> TwoU32s;\n }"}, {"sha": "cb1a4d278256a72b501bcdbe34763802926ac375", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -16,7 +16,7 @@ pub struct TwoU64s {\n     one: u64, two: u64\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU64s(v: TwoU64s) -> TwoU64s;\n }"}, {"sha": "657348c99aad8741626a591a76a294810084b018", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -16,7 +16,7 @@ pub struct TwoU8s {\n     one: u8, two: u8\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n }"}, {"sha": "9042aed6639b80ab209face85154d1d7bcff2622", "filename": "src/test/run-pass/extern-pass-char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-char.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -11,7 +11,7 @@\n // Test a function that takes/returns a u8.\n \n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_u8(v: u8) -> u8;\n }"}, {"sha": "38d29180fbc8f72328788f47d0f8200f8992f3f5", "filename": "src/test/run-pass/extern-pass-double.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-double.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_double(v: f64) -> f64;\n }"}, {"sha": "cce7dc5bf32ef8e23815840e811d03818ae55cd5", "filename": "src/test/run-pass/extern-pass-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-empty.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -30,7 +30,7 @@ struct ManyInts {\n \n struct Empty;\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_dbg_extern_empty_struct(v1: ManyInts, e: Empty, v2: ManyInts);\n }"}, {"sha": "ed254ac46f20bf9ad7fa277ee08638bb1200ee2f", "filename": "src/test/run-pass/extern-pass-u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u32.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -11,7 +11,7 @@\n // Test a function that takes/returns a u32.\n \n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_u32(v: u32) -> u32;\n }"}, {"sha": "6fc630e6d7e1a2612b855bf08ece0a7249ff5012", "filename": "src/test/run-pass/extern-pass-u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-u64.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -11,7 +11,7 @@\n // Test a call to a function that takes/returns a u64.\n \n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_identity_u64(v: u64) -> u64;\n }"}, {"sha": "ec1c6130e7adca5181df211a774d9c08704413f8", "filename": "src/test/run-pass/extern-return-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU16s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -13,7 +13,7 @@ pub struct TwoU16s {\n     one: u16, two: u16\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU16s() -> TwoU16s;\n }"}, {"sha": "e829e993052a50bcdc073e7bda45b7a94d3c8178", "filename": "src/test/run-pass/extern-return-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU32s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -13,7 +13,7 @@ pub struct TwoU32s {\n     one: u32, two: u32\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU32s() -> TwoU32s;\n }"}, {"sha": "ef7325b33fe3d080211abf3240d5aa86225ccadb", "filename": "src/test/run-pass/extern-return-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU64s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -13,7 +13,7 @@ pub struct TwoU64s {\n     one: u64, two: u64\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU64s() -> TwoU64s;\n }"}, {"sha": "46f2e81a5564ac5fe20e2a5bba42deff64ac0564", "filename": "src/test/run-pass/extern-return-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-return-TwoU8s.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -13,7 +13,7 @@ pub struct TwoU8s {\n     one: u8, two: u8\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn rust_dbg_extern_return_TwoU8s() -> TwoU8s;\n }"}, {"sha": "697e9074c448c1056889f906cc5ae174881ea267", "filename": "src/test/run-pass/foreign-call-no-runtime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-call-no-runtime.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -18,7 +18,7 @@ extern crate libc;\n use std::mem;\n use std::thread;\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_dbg_call(cb: extern \"C\" fn(libc::uintptr_t),\n                      data: libc::uintptr_t) -> libc::uintptr_t;"}, {"sha": "2d4542540e7a3df8db4dde6cd4d16d691bc5cf92", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -16,7 +16,7 @@ pub struct S {\n     z: u64,\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     pub fn get_x(x: S) -> u64;\n     pub fn get_y(x: S) -> u64;"}, {"sha": "979e57eba9d1a49dd13caf8ec25feb953ce1cad8", "filename": "src/test/run-pass/foreign-no-abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-no-abi.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -17,7 +17,7 @@\n mod rustrt {\n     extern crate libc;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_get_test_int() -> libc::intptr_t;\n     }"}, {"sha": "8f83e51f0a02de2a18f9fc03e5349cf568ec6b6c", "filename": "src/test/run-pass/issue-28676.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fissue-28676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fissue-28676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-28676.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -15,7 +15,7 @@ pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n mod rustrt {\n     use super::Quad;\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn get_c_many_params(_: *const (), _: *const (),\n                                  _: *const (), _: *const (), f: Quad) -> u64;"}, {"sha": "e4d528e80e1044fa47fde4a2b0b2b4143d5d2a81", "filename": "src/test/run-pass/mir_trans_calls_variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_interesting_average(_: i64, ...) -> f64;\n }"}, {"sha": "7438ba21bfc4a064a7303e047ef553ef72fd28e4", "filename": "src/test/run-pass/rfc1717/auxiliary/clibrary.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Frfc1717%2Fauxiliary%2Fclibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Frfc1717%2Fauxiliary%2Fclibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1717%2Fauxiliary%2Fclibrary.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[linked_from = \"foo\"] //~ ERROR experimental feature\n-extern {\n-    fn foo();\n-}\n+// no-prefer-dynamic\n+#![crate_type = \"staticlib\"]\n \n-fn main() {}\n+#[no_mangle]\n+pub extern \"C\" fn foo(x:i32) -> i32 { x }", "previous_filename": "src/test/compile-fail/feature-gate-linked-from.rs"}, {"sha": "d6ef96c5add0134939bfe01ab2ce1f5e7c7020c8", "filename": "src/test/run-pass/rfc1717/library-override.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Frfc1717%2Flibrary-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Frfc1717%2Flibrary-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1717%2Flibrary-override.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:clibrary.rs\n+// compile-flags: -lstatic=wronglibrary:clibrary\n+\n+#[link(name = \"wronglibrary\", kind = \"dylib\")]\n+extern \"C\" {\n+    pub fn foo(x:i32) -> i32;\n+}\n+\n+fn main() {\n+    unsafe {\n+        foo(42);\n+    }\n+}"}, {"sha": "0f98cfe27f648a554d05312030d1d44f91c20270", "filename": "src/test/run-pass/segfault-no-out-of-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsegfault-no-out-of-stack.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -17,7 +17,7 @@ extern crate libc;\n use std::process::{Command, ExitStatus};\n use std::env;\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_get_null_ptr() -> *mut ::libc::c_char;\n }"}, {"sha": "24d58487f061e986d7e6302a105b77fa0562c7c3", "filename": "src/test/run-pass/static-mut-foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-mut-foreign.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -17,7 +17,7 @@\n \n extern crate libc;\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     static mut rust_dbg_static_mut: libc::c_int;\n     pub fn rust_dbg_static_mut_check_four();"}, {"sha": "3d4601ad0cfa120dc2eafdadcb01dd00e46e3782", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -18,7 +18,7 @@ pub struct Floats { a: f64, b: u8, c: f64 }\n mod rustrt {\n     use super::{Floats, Quad};\n \n-    #[link(name = \"rust_test_helpers\")]\n+    #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern {\n         pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n         pub fn rust_dbg_abi_2(f: Floats) -> Floats;"}, {"sha": "13dfd414615c5db642239597ea8adac9a6e40408", "filename": "src/test/run-pass/union/union-c-interop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Funion%2Funion-c-interop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Funion%2Funion-c-interop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-c-interop.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -25,7 +25,7 @@ union LARGE_INTEGER {\n   QuadPart: u64,\n }\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern \"C\" {\n     fn increment_all_parts(_: LARGE_INTEGER) -> LARGE_INTEGER;\n }"}, {"sha": "ec6261febc54db26ad14bb018e442ac7c374049f", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1692c0b587e1d91bb96a99f9f2588d7d2b247e3f/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=1692c0b587e1d91bb96a99f9f2588d7d2b247e3f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[link(name = \"rust_test_helpers\")]\n+#[link(name = \"rust_test_helpers\", kind = \"static\")]\n extern {\n     fn rust_interesting_average(_: u64, ...) -> f64;\n }"}]}