{"sha": "f7521db243a90d77d8f8cc263c97abb1e598e03d", "node_id": "C_kwDOAAsO6NoAKGY3NTIxZGIyNDNhOTBkNzdkOGY4Y2MyNjNjOTdhYmIxZTU5OGUwM2Q", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-21T12:06:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-21T12:08:55Z"}, "message": "rustdoc: Remove `ItemFragment(Kind)`", "tree": {"sha": "b51ec6f7456d397b97da1ba34eba7d5d0543a894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b51ec6f7456d397b97da1ba34eba7d5d0543a894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7521db243a90d77d8f8cc263c97abb1e598e03d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7521db243a90d77d8f8cc263c97abb1e598e03d", "html_url": "https://github.com/rust-lang/rust/commit/f7521db243a90d77d8f8cc263c97abb1e598e03d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7521db243a90d77d8f8cc263c97abb1e598e03d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f33adce1bfe01e4c0c8754400bf782a95af88c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f33adce1bfe01e4c0c8754400bf782a95af88c9", "html_url": "https://github.com/rust-lang/rust/commit/5f33adce1bfe01e4c0c8754400bf782a95af88c9"}], "stats": {"total": 104, "additions": 30, "deletions": 74}, "files": [{"sha": "976d89bec3b34f98bd604fd8a5bc169516e97cfc", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 30, "deletions": 74, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/f7521db243a90d77d8f8cc263c97abb1e598e03d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7521db243a90d77d8f8cc263c97abb1e598e03d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f7521db243a90d77d8f8cc263c97abb1e598e03d", "patch": "@@ -220,80 +220,40 @@ enum MalformedGenerics {\n \n #[derive(Clone, Debug, Hash, PartialEq, Eq)]\n pub(crate) enum UrlFragment {\n-    Item(ItemFragment),\n+    Item(DefId),\n     UserWritten(String),\n }\n \n impl UrlFragment {\n     /// Render the fragment, including the leading `#`.\n     pub(crate) fn render(&self, s: &mut String, tcx: TyCtxt<'_>) -> std::fmt::Result {\n+        s.push('#');\n         match self {\n-            UrlFragment::Item(frag) => frag.render(s, tcx),\n-            UrlFragment::UserWritten(raw) => write!(s, \"#{}\", raw),\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub(crate) struct ItemFragment(FragmentKind, DefId);\n-\n-#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub(crate) enum FragmentKind {\n-    Method,\n-    TyMethod,\n-    AssociatedConstant,\n-    AssociatedType,\n-\n-    StructField,\n-    Variant,\n-    VariantField,\n-}\n-\n-impl FragmentKind {\n-    fn from_def_id(tcx: TyCtxt<'_>, def_id: DefId) -> FragmentKind {\n-        match tcx.def_kind(def_id) {\n-            DefKind::AssocFn => {\n-                if tcx.associated_item(def_id).defaultness.has_value() {\n-                    FragmentKind::Method\n-                } else {\n-                    FragmentKind::TyMethod\n-                }\n-            }\n-            DefKind::AssocConst => FragmentKind::AssociatedConstant,\n-            DefKind::AssocTy => FragmentKind::AssociatedType,\n-            DefKind::Variant => FragmentKind::Variant,\n-            DefKind::Field => {\n-                if tcx.def_kind(tcx.parent(def_id)) == DefKind::Variant {\n-                    FragmentKind::VariantField\n-                } else {\n-                    FragmentKind::StructField\n-                }\n-            }\n-            kind => bug!(\"unexpected associated item kind: {:?}\", kind),\n-        }\n-    }\n-}\n-\n-impl ItemFragment {\n-    /// Render the fragment, including the leading `#`.\n-    pub(crate) fn render(&self, s: &mut String, tcx: TyCtxt<'_>) -> std::fmt::Result {\n-        write!(s, \"#\")?;\n-        match *self {\n-            ItemFragment(kind, def_id) => {\n+            &UrlFragment::Item(def_id) => {\n                 let name = tcx.item_name(def_id);\n-                match kind {\n-                    FragmentKind::Method => write!(s, \"method.{}\", name),\n-                    FragmentKind::TyMethod => write!(s, \"tymethod.{}\", name),\n-                    FragmentKind::AssociatedConstant => write!(s, \"associatedconstant.{}\", name),\n-                    FragmentKind::AssociatedType => write!(s, \"associatedtype.{}\", name),\n-                    FragmentKind::StructField => write!(s, \"structfield.{}\", name),\n-                    FragmentKind::Variant => write!(s, \"variant.{}\", name),\n-                    FragmentKind::VariantField => {\n-                        let variant = tcx.item_name(tcx.parent(def_id));\n-                        write!(s, \"variant.{}.field.{}\", variant, name)\n+                match tcx.def_kind(def_id) {\n+                    DefKind::AssocFn => {\n+                        if tcx.associated_item(def_id).defaultness.has_value() {\n+                            write!(s, \"method.{}\", name)\n+                        } else {\n+                            write!(s, \"tymethod.{}\", name)\n+                        }\n                     }\n+                    DefKind::AssocConst => write!(s, \"associatedconstant.{}\", name),\n+                    DefKind::AssocTy => write!(s, \"associatedtype.{}\", name),\n+                    DefKind::Variant => write!(s, \"variant.{}\", name),\n+                    DefKind::Field => {\n+                        let parent_id = tcx.parent(def_id);\n+                        if tcx.def_kind(parent_id) == DefKind::Variant {\n+                            write!(s, \"variant.{}.field.{}\", tcx.item_name(parent_id), name)\n+                        } else {\n+                            write!(s, \"structfield.{}\", name)\n+                        }\n+                    }\n+                    kind => bug!(\"unexpected associated item kind: {:?}\", kind),\n                 }\n             }\n+            UrlFragment::UserWritten(raw) => Ok(s.push_str(&raw)),\n         }\n     }\n }\n@@ -1124,7 +1084,7 @@ impl LinkCollector<'_, '_> {\n \n         match res {\n             Res::Primitive(prim) => {\n-                if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n+                if let Some(UrlFragment::Item(id)) = fragment {\n                     // We're actually resolving an associated item of a primitive, so we need to\n                     // verify the disambiguator (if any) matches the type of the associated item.\n                     // This case should really follow the same flow as the `Res::Def` branch below,\n@@ -1172,12 +1132,11 @@ impl LinkCollector<'_, '_> {\n                 })\n             }\n             Res::Def(kind, id) => {\n-                let (kind_for_dis, id_for_dis) =\n-                    if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n-                        (self.cx.tcx.def_kind(id), id)\n-                    } else {\n-                        (kind, id)\n-                    };\n+                let (kind_for_dis, id_for_dis) = if let Some(UrlFragment::Item(id)) = fragment {\n+                    (self.cx.tcx.def_kind(id), id)\n+                } else {\n+                    (kind, id)\n+                };\n                 self.verify_disambiguator(\n                     path_str,\n                     &ori_link,\n@@ -1318,10 +1277,7 @@ impl LinkCollector<'_, '_> {\n                     return None;\n                 }\n                 (Some(u_frag), None) => Some(UrlFragment::UserWritten(u_frag.clone())),\n-                (None, Some(def_id)) => Some(UrlFragment::Item(ItemFragment(\n-                    FragmentKind::from_def_id(self.cx.tcx, def_id),\n-                    def_id,\n-                ))),\n+                (None, Some(def_id)) => Some(UrlFragment::Item(def_id)),\n                 (None, None) => None,\n             };\n             Some((res, fragment))"}]}