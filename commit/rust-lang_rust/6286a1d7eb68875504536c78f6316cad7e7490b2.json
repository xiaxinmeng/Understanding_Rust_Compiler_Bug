{"sha": "6286a1d7eb68875504536c78f6316cad7e7490b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyODZhMWQ3ZWI2ODg3NTUwNDUzNmM3OGY2MzE2Y2FkN2U3NDkwYjI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T22:31:27Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-19T22:31:27Z"}, "message": "`slice_or_array_pattern`: remove dead code.\n\nAfter #62550, it is no longer possible for `slice`\nto be other than `None | Some(Binding(..) | Wild)`.\nIn particular, `lower_pat_slice` may never generate\n`Some(Array(..) | Slice(..))` and so there is nothing\nto flatten into `slice`.", "tree": {"sha": "838f4244123ae85fc1fc8899ff4d91e36c10f7f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/838f4244123ae85fc1fc8899ff4d91e36c10f7f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6286a1d7eb68875504536c78f6316cad7e7490b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6286a1d7eb68875504536c78f6316cad7e7490b2", "html_url": "https://github.com/rust-lang/rust/commit/6286a1d7eb68875504536c78f6316cad7e7490b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6286a1d7eb68875504536c78f6316cad7e7490b2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc3160bbbfc42225deba96d98cf7ef709972d748", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc3160bbbfc42225deba96d98cf7ef709972d748", "html_url": "https://github.com/rust-lang/rust/commit/cc3160bbbfc42225deba96d98cf7ef709972d748"}], "stats": {"total": 43, "additions": 1, "deletions": 42}, "files": [{"sha": "9a0c31568303995a17bff5424e89d80356ede264", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6286a1d7eb68875504536c78f6316cad7e7490b2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6286a1d7eb68875504536c78f6316cad7e7490b2/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=6286a1d7eb68875504536c78f6316cad7e7490b2", "patch": "@@ -549,10 +549,6 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             }\n \n             hir::PatKind::Slice(ref prefix, ref slice, ref suffix) => {\n-                match ty.kind {\n-                    ty::Slice(..) | ty::Array(..) => {}\n-                    _ => span_bug!(pat.span, \"unexpanded type for vector pattern: {:?}\", ty),\n-                }\n                 self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix)\n             }\n \n@@ -658,44 +654,10 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         pats.iter().map(|p| self.lower_pattern(p)).collect()\n     }\n \n-    fn lower_opt_pattern(&mut self, pat: &'tcx Option<P<hir::Pat>>) -> Option<Pat<'tcx>>\n-    {\n+    fn lower_opt_pattern(&mut self, pat: &'tcx Option<P<hir::Pat>>) -> Option<Pat<'tcx>> {\n         pat.as_ref().map(|p| self.lower_pattern(p))\n     }\n \n-    fn flatten_nested_slice_patterns(\n-        &mut self,\n-        prefix: Vec<Pat<'tcx>>,\n-        slice: Option<Pat<'tcx>>,\n-        suffix: Vec<Pat<'tcx>>,\n-    ) -> (Vec<Pat<'tcx>>, Option<Pat<'tcx>>, Vec<Pat<'tcx>>) {\n-        let orig_slice = match slice {\n-            Some(orig_slice) => orig_slice,\n-            None => return (prefix, slice, suffix)\n-        };\n-        let orig_prefix = prefix;\n-        let orig_suffix = suffix;\n-\n-        // dance because of intentional borrow-checker stupidity.\n-        let kind = *orig_slice.kind;\n-        match kind {\n-            PatKind::Slice { prefix, slice, mut suffix } |\n-            PatKind::Array { prefix, slice, mut suffix } => {\n-                let mut orig_prefix = orig_prefix;\n-\n-                orig_prefix.extend(prefix);\n-                suffix.extend(orig_suffix);\n-\n-                (orig_prefix, slice, suffix)\n-            }\n-            _ => {\n-                (orig_prefix, Some(Pat {\n-                    kind: box kind, ..orig_slice\n-                }), orig_suffix)\n-            }\n-        }\n-    }\n-\n     fn slice_or_array_pattern(\n         &mut self,\n         span: Span,\n@@ -707,9 +669,6 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         let prefix = self.lower_patterns(prefix);\n         let slice = self.lower_opt_pattern(slice);\n         let suffix = self.lower_patterns(suffix);\n-        let (prefix, slice, suffix) = self.flatten_nested_slice_patterns(prefix, slice, suffix);\n-\n-        // Some validation:\n         match ty.kind {\n             // Matching a slice, `[T]`.\n             ty::Slice(..) => PatKind::Slice { prefix, slice, suffix },"}]}