{"sha": "2b2acf1002f8ee516fe064b2c4b5173bcbd21342", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMmFjZjEwMDJmOGVlNTE2ZmUwNjRiMmM0YjUxNzNiY2JkMjEzNDI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-22T03:44:09Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-02T14:53:57Z"}, "message": "Fix dogfood error.", "tree": {"sha": "912e822a1d5f2dc4ad4e62741971d3a459ce6e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/912e822a1d5f2dc4ad4e62741971d3a459ce6e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b2acf1002f8ee516fe064b2c4b5173bcbd21342", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvcZQUACgkQ/vbIBR0O\nATycIg//ZsBb4NX3IMmdBa6yCnA73KmR4oVgX0e1PRVJ23WEtlieVI0zVsVcSFzO\ncb7cOk4o57G20R0aCiOWnfTFt5KRcnLj/P4727AB58gXnV+UgFuqoReIun6DAMxz\n0dD/V4jUbrkph0sMBkdVr/jjm9OG/ROXE28V+YCsQq1hNRSx0kzAO0NUogWZuBDB\nB90YxFilsOl3EaHpDD2TeCQzkSOGRCTw7ILGBzuZt30p1dU+6oRwdivd3PXuA6y9\n4zYvLiuVBqLmCiUyiKjOQndAwhfQtbvNC83HsN9mFhzryyhoERhscsde6y3fNbWJ\nGHmTGTzEOz10C2xznAjXjGwpq1Yj9st6BXOnosrShZqwT10yksfO5/NMJ4Jh4DnY\nqN8FJ5+KJhtx0xQ4cZXSbKOU6CL/Nm78UYTCFDvAsd/y1YNWCX36YpmPT7PYTOl0\no1d/+HfEK04m+wJVp+/nOqTKOiDtnwRjaFGuh5xtabUJ0lzTQYfv4O8xHtCljHY1\nZ9shvqRz3MkYRMDTucRQ2HJe1NUmoI1mchMKYMV/ARKFE6CkQTK8Isxl/S/utv8o\nU9UEDW7FzACr0bxzDjvVFuhHjoSHvPnIZY2zErLnnYNTXykMbVoZ1iPcFbshP//I\nl4zyFQpVBrG+L9knBJ3MfsKKc8E7/bdCGU9MpPYzvWQERfhVxdI=\n=NA0w\n-----END PGP SIGNATURE-----", "payload": "tree 912e822a1d5f2dc4ad4e62741971d3a459ce6e85\nparent 2d1c9313b0e901229c0ed69f030302917cf8fd18\nauthor kennytm <kennytm@gmail.com> 1540179849 +0800\ncommitter kennytm <kennytm@gmail.com> 1541170437 +0800\n\nFix dogfood error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b2acf1002f8ee516fe064b2c4b5173bcbd21342", "html_url": "https://github.com/rust-lang/rust/commit/2b2acf1002f8ee516fe064b2c4b5173bcbd21342", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b2acf1002f8ee516fe064b2c4b5173bcbd21342/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1c9313b0e901229c0ed69f030302917cf8fd18", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1c9313b0e901229c0ed69f030302917cf8fd18", "html_url": "https://github.com/rust-lang/rust/commit/2d1c9313b0e901229c0ed69f030302917cf8fd18"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "f029dd65b395d1cde784d45e5b4043c11742456c", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b2acf1002f8ee516fe064b2c4b5173bcbd21342/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2acf1002f8ee516fe064b2c4b5173bcbd21342/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=2b2acf1002f8ee516fe064b2c4b5173bcbd21342", "patch": "@@ -210,7 +210,7 @@ impl<'a> DigitInfo<'a> {\n                 .filter(|&c| c != '_')\n                 .collect::<Vec<_>>()\n                 .chunks(group_size)\n-                .map(|chunk| chunk.into_iter().rev().collect())\n+                .map(|chunk| chunk.iter().rev().collect())\n                 .rev()\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n@@ -221,7 +221,7 @@ impl<'a> DigitInfo<'a> {\n                 .filter(|&c| c != '_')\n                 .collect::<Vec<_>>()\n                 .chunks(group_size)\n-                .map(|chunk| chunk.into_iter().collect())\n+                .map(|chunk| chunk.iter().collect())\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n             format!(\n@@ -238,7 +238,7 @@ impl<'a> DigitInfo<'a> {\n                 .collect::<Vec<_>>();\n             let mut hint = filtered_digits_vec\n                 .chunks(group_size)\n-                .map(|chunk| chunk.into_iter().rev().collect())\n+                .map(|chunk| chunk.iter().rev().collect())\n                 .rev()\n                 .collect::<Vec<String>>()\n                 .join(\"_\");"}, {"sha": "149e39758ca78b13b6054f8516e210b8084575c3", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2b2acf1002f8ee516fe064b2c4b5173bcbd21342/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b2acf1002f8ee516fe064b2c4b5173bcbd21342/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2b2acf1002f8ee516fe064b2c4b5173bcbd21342", "patch": "@@ -575,7 +575,7 @@ declare_clippy_lint! {\n /// temporary placeholder for dealing with the `Option` type, then this does\n /// not mitigate the need for error handling. If there is a chance that `.get()`\n /// will be `None` in your program, then it is advisable that the `None` case\n-/// is handled in a future refactor instead of using `.unwrap()` or the Index \n+/// is handled in a future refactor instead of using `.unwrap()` or the Index\n /// trait.\n ///\n /// **Example:**\n@@ -2135,22 +2135,6 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n }\n \n fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: ty::Ty<'_>) -> Option<(&'static Lint, &'static str, &'static str)> {\n-    let (self_ty, mutbl) = match self_ref_ty.sty {\n-        ty::TyKind::Ref(_, self_ty, mutbl) => (self_ty, mutbl),\n-        _ => unreachable!(),\n-    };\n-    let method_name = match mutbl {\n-        hir::MutImmutable => \"iter\",\n-        hir::MutMutable => \"iter_mut\",\n-    };\n-\n-    let def_id = match self_ty.sty {\n-        ty::TyKind::Array(..) => return Some((INTO_ITER_ON_ARRAY, \"array\", method_name)),\n-        ty::TyKind::Slice(..) => return Some((INTO_ITER_ON_REF, \"slice\", method_name)),\n-        ty::Adt(adt, _) => adt.did,\n-        _ => return None,\n-    };\n-\n     // FIXME: instead of this hard-coded list, we should check if `<adt>::iter`\n     // exists and has the desired signature. Unfortunately FnCtxt is not exported\n     // so we can't use its `lookup_method` method.\n@@ -2170,6 +2154,22 @@ fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: ty::Ty<'_>) -> Opti\n         (INTO_ITER_ON_REF, &[\"std\", \"sync\", \"mpsc\", \"Receiver\"]),\n     ];\n \n+    let (self_ty, mutbl) = match self_ref_ty.sty {\n+        ty::TyKind::Ref(_, self_ty, mutbl) => (self_ty, mutbl),\n+        _ => unreachable!(),\n+    };\n+    let method_name = match mutbl {\n+        hir::MutImmutable => \"iter\",\n+        hir::MutMutable => \"iter_mut\",\n+    };\n+\n+    let def_id = match self_ty.sty {\n+        ty::TyKind::Array(..) => return Some((INTO_ITER_ON_ARRAY, \"array\", method_name)),\n+        ty::TyKind::Slice(..) => return Some((INTO_ITER_ON_REF, \"slice\", method_name)),\n+        ty::Adt(adt, _) => adt.did,\n+        _ => return None,\n+    };\n+\n     for (lint, path) in &INTO_ITER_COLLECTIONS {\n         if match_def_path(cx.tcx, def_id, path) {\n             return Some((lint, path.last().unwrap(), method_name))"}]}