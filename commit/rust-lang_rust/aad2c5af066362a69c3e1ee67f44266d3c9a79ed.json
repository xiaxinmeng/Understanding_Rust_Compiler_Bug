{"sha": "aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZDJjNWFmMDY2MzYyYTY5YzNlMWVlNjdmNDQyNjZkM2M5YTc5ZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T18:39:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T18:39:06Z"}, "message": "Auto merge of #1321 - RalfJung:float, r=RalfJung\n\nEven more float cast tests\n\nCopy a bunch of float cast tests from https://github.com/WebAssembly/testsuite/blob/master/conversions.wast. I didn't do all of them though, too lazy... maybe we should have a wasm interpreter written in Rust and run that in Miri and use the wasm test suite directly that way? :P", "tree": {"sha": "91f000e416eba1ca9d6c93541d4cf6bba019b5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91f000e416eba1ca9d6c93541d4cf6bba019b5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "html_url": "https://github.com/rust-lang/rust/commit/aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aad2c5af066362a69c3e1ee67f44266d3c9a79ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c396609d077ae94f290aceebfbf2f39bdbec9d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c396609d077ae94f290aceebfbf2f39bdbec9d2", "html_url": "https://github.com/rust-lang/rust/commit/8c396609d077ae94f290aceebfbf2f39bdbec9d2"}, {"sha": "e5e0ced87e04ee866b5064978b2d88115e03ffa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e0ced87e04ee866b5064978b2d88115e03ffa3", "html_url": "https://github.com/rust-lang/rust/commit/e5e0ced87e04ee866b5064978b2d88115e03ffa3"}], "stats": {"total": 260, "additions": 208, "deletions": 52}, "files": [{"sha": "738df2f6c59e7fba5a74a7e8030b91c6278467c9", "filename": "tests/run-pass/float.rs", "status": "modified", "additions": 191, "deletions": 49, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/aad2c5af066362a69c3e1ee67f44266d3c9a79ed/tests%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad2c5af066362a69c3e1ee67f44266d3c9a79ed/tests%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat.rs?ref=aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "patch": "@@ -11,74 +11,216 @@ fn assert_eq<T: PartialEq + Debug>(x: T, y: T) {\n }\n \n fn main() {\n+    basic();\n+    casts();\n+    ops();\n+}\n+\n+fn basic() {\n     // basic arithmetic\n     assert_eq(6.0_f32*6.0_f32, 36.0_f32);\n     assert_eq(6.0_f64*6.0_f64, 36.0_f64);\n     assert_eq(-{5.0_f32}, -5.0_f32);\n     assert_eq(-{5.0_f64}, -5.0_f64);\n     // infinities, NaN\n     assert!((5.0_f32/0.0).is_infinite());\n+    assert_ne!({5.0_f32/0.0}, {-5.0_f32/0.0});\n     assert!((5.0_f64/0.0).is_infinite());\n+    assert_ne!({5.0_f64/0.0}, {5.0_f64/-0.0});\n     assert!((-5.0_f32).sqrt().is_nan());\n     assert!((-5.0_f64).sqrt().is_nan());\n+    assert_ne!(f32::NAN, f32::NAN);\n+    assert_ne!(f64::NAN, f64::NAN);\n+    // negative zero\n+    let posz = 0.0f32;\n+    let negz = -0.0f32;\n+    assert_eq(posz, negz);\n+    assert_ne!(posz.to_bits(), negz.to_bits());\n+    let posz = 0.0f64;\n+    let negz = -0.0f64;\n+    assert_eq(posz, negz);\n+    assert_ne!(posz.to_bits(), negz.to_bits());\n     // byte-level transmute\n     let x: u64 = unsafe { std::mem::transmute(42.0_f64) };\n     let y: f64 = unsafe { std::mem::transmute(x) };\n     assert_eq(y, 42.0_f64);\n     let x: u32 = unsafe { std::mem::transmute(42.0_f32) };\n     let y: f32 = unsafe { std::mem::transmute(x) };\n     assert_eq(y, 42.0_f32);\n+}\n+\n+fn casts() {\n+    // f32 -> i32\n+    assert_eq::<i32>(0.0f32 as i32, 0);\n+    assert_eq::<i32>(-0.0f32 as i32, 0);\n+    assert_eq::<i32>(/*0x1p-149*/ f32::from_bits(0x00000001) as i32, 0);\n+    assert_eq::<i32>(/*-0x1p-149*/ f32::from_bits(0x80000001) as i32, 0);\n+    assert_eq::<i32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd) as i32, 1);\n+    assert_eq::<i32>(/*-0x1.19999ap+0*/ f32::from_bits(0xbf8ccccd) as i32, -1);\n+    assert_eq::<i32>(1.9f32 as i32, 1);\n+    assert_eq::<i32>(-1.9f32 as i32, -1);\n+    assert_eq::<i32>(5.0f32 as i32, 5);\n+    assert_eq::<i32>(-5.0f32 as i32, -5);\n+    assert_eq::<i32>(2147483520.0f32 as i32, 2147483520);\n+    assert_eq::<i32>(-2147483648.0f32 as i32, -2147483648);\n+    // unrepresentable casts\n+    assert_eq::<i32>(2147483648.0f32 as i32, i32::MAX);\n+    assert_eq::<i32>(-2147483904.0f32 as i32, i32::MIN);\n+    assert_eq::<i32>(f32::MAX as i32, i32::MAX);\n+    assert_eq::<i32>(f32::MIN as i32, i32::MIN);\n+    assert_eq::<i32>(f32::INFINITY as i32, i32::MAX);\n+    assert_eq::<i32>(f32::NEG_INFINITY as i32, i32::MIN);\n+    assert_eq::<i32>(f32::NAN as i32, 0);\n+    assert_eq::<i32>((-f32::NAN) as i32, 0);\n+\n+    // f32 -> u32\n+    assert_eq::<u32>(0.0f32 as u32, 0);\n+    assert_eq::<u32>(-0.0f32 as u32, 0);\n+    assert_eq::<u32>(/*0x1p-149*/ f32::from_bits(0x1) as u32, 0);\n+    assert_eq::<u32>(/*-0x1p-149*/ f32::from_bits(0x80000001) as u32, 0);\n+    assert_eq::<u32>(/*0x1.19999ap+0*/ f32::from_bits(0x3f8ccccd) as u32, 1);\n+    assert_eq::<u32>(1.9f32 as u32, 1);\n+    assert_eq::<u32>(5.0f32 as u32, 5);\n+    assert_eq::<u32>(2147483648.0f32 as u32, 0x8000_0000);\n+    assert_eq::<u32>(4294967040.0f32 as u32, 0u32.wrapping_sub(256));\n+    assert_eq::<u32>(/*-0x1.ccccccp-1*/ f32::from_bits(0xbf666666) as u32, 0);\n+    assert_eq::<u32>(/*-0x1.fffffep-1*/ f32::from_bits(0xbf7fffff) as u32, 0);\n+    assert_eq::<u32>((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n+    assert_eq::<u32>((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n+    // unrepresentable casts\n+    assert_eq::<u32>(4294967296.0f32 as u32, u32::MAX);\n+    assert_eq::<u32>(-5.0f32 as u32, 0);\n+    assert_eq::<u32>(f32::MAX as u32, u32::MAX);\n+    assert_eq::<u32>(f32::MIN as u32, 0);\n+    assert_eq::<u32>(f32::INFINITY as u32, u32::MAX);\n+    assert_eq::<u32>(f32::NEG_INFINITY as u32, 0);\n+    assert_eq::<u32>(f32::NAN as u32, 0);\n+    assert_eq::<u32>((-f32::NAN) as u32, 0);\n+\n+    // f32 -> i64\n+    assert_eq::<i64>(4294967296.0f32 as i64, 4294967296);\n+    assert_eq::<i64>(-4294967296.0f32 as i64, -4294967296);\n+    assert_eq::<i64>(9223371487098961920.0f32 as i64, 9223371487098961920);\n+    assert_eq::<i64>(-9223372036854775808.0f32 as i64, -9223372036854775808);\n+\n+    // f64 -> i32\n+    assert_eq::<i32>(0.0f64 as i32, 0);\n+    assert_eq::<i32>(-0.0f64 as i32, 0);\n+    assert_eq::<i32>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a) as i32, 1);\n+    assert_eq::<i32>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a) as i32, -1);\n+    assert_eq::<i32>(1.9f64 as i32, 1);\n+    assert_eq::<i32>(-1.9f64 as i32, -1);\n+    assert_eq::<i32>(1e8f64 as i32, 100_000_000);\n+    assert_eq::<i32>(2147483647.0f64 as i32, 2147483647);\n+    assert_eq::<i32>(-2147483648.0f64 as i32, -2147483648);\n+    // unrepresentable casts\n+    assert_eq::<i32>(2147483648.0f64 as i32, i32::MAX);\n+    assert_eq::<i32>(-2147483649.0f64 as i32, i32::MIN);\n+\n+    // f64 -> i64\n+    assert_eq::<i64>(0.0f64 as i64, 0);\n+    assert_eq::<i64>(-0.0f64 as i64, 0);\n+    assert_eq::<i64>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1) as i64, 0);\n+    assert_eq::<i64>(/*-0x0.0000000000001p-1022*/ f64::from_bits(0x8000000000000001) as i64, 0);\n+    assert_eq::<i64>(/*0x1.199999999999ap+0*/ f64::from_bits(0x3ff199999999999a) as i64, 1);\n+    assert_eq::<i64>(/*-0x1.199999999999ap+0*/ f64::from_bits(0xbff199999999999a) as i64, -1);\n+    assert_eq::<i64>(5.0f64 as i64, 5);\n+    assert_eq::<i64>(5.9f64 as i64, 5);\n+    assert_eq::<i64>(-5.0f64 as i64, -5);\n+    assert_eq::<i64>(-5.9f64 as i64, -5);\n+    assert_eq::<i64>(4294967296.0f64 as i64, 4294967296);\n+    assert_eq::<i64>(-4294967296.0f64 as i64, -4294967296);\n+    assert_eq::<i64>(9223372036854774784.0f64 as i64, 9223372036854774784);\n+    assert_eq::<i64>(-9223372036854775808.0f64 as i64, -9223372036854775808);\n+    // unrepresentable casts\n+    assert_eq::<i64>(9223372036854775808.0f64 as i64, i64::MAX);\n+    assert_eq::<i64>(-9223372036854777856.0f64 as i64, i64::MIN);\n+    assert_eq::<i64>(f64::MAX as i64, i64::MAX);\n+    assert_eq::<i64>(f64::MIN as i64, i64::MIN);\n+    assert_eq::<i64>(f64::INFINITY as i64, i64::MAX);\n+    assert_eq::<i64>(f64::NEG_INFINITY as i64, i64::MIN);\n+    assert_eq::<i64>(f64::NAN as i64, 0);\n+    assert_eq::<i64>((-f64::NAN) as i64, 0);\n \n-    // f32 <-> int casts\n-    assert_eq(5.0f32 as u32, 5);\n-    assert_eq(-5.0f32 as u32, 0);\n-    assert_eq(5.0f32 as i32, 5);\n-    assert_eq(-5.0f32 as i32, -5);\n-    assert_eq(f32::MAX as i32, i32::MAX);\n-    assert_eq(f32::INFINITY as i32, i32::MAX);\n-    assert_eq(f32::MAX as u32, u32::MAX);\n-    assert_eq(f32::INFINITY as u32, u32::MAX);\n-    assert_eq(f32::MIN as i32, i32::MIN);\n-    assert_eq(f32::NEG_INFINITY as i32, i32::MIN);\n-    assert_eq(f32::MIN as u32, 0);\n-    assert_eq(f32::NEG_INFINITY as u32, 0);\n-    assert_eq(f32::NAN as i32, 0);\n-    assert_eq(f32::NAN as u32, 0);\n-    assert_eq((u32::MAX-127) as f32 as u32, u32::MAX); // rounding loss\n-    assert_eq((u32::MAX-128) as f32 as u32, u32::MAX-255); // rounding loss\n-    assert_eq(127i8 as f32, 127.0f32);\n-    assert_eq(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n-    assert_eq(u128::MAX as f32, f32::INFINITY); // saturation\n-\n-    // f64 <-> int casts\n-    assert_eq(5.0f64 as u64, 5);\n-    assert_eq(-5.0f64 as u64, 0);\n-    assert_eq(5.0f64 as i64, 5);\n-    assert_eq(-5.0f64 as i64, -5);\n-    assert_eq(f64::MAX as i64, i64::MAX);\n-    assert_eq(f64::INFINITY as i64, i64::MAX);\n-    assert_eq(f64::MAX as u64, u64::MAX);\n-    assert_eq(f64::INFINITY as u64, u64::MAX);\n-    assert_eq(f64::MIN as i64, i64::MIN);\n-    assert_eq(f64::NEG_INFINITY as i64, i64::MIN);\n-    assert_eq(f64::MIN as u64, 0);\n-    assert_eq(f64::NEG_INFINITY as u64, 0);\n-    assert_eq(f64::NAN as i64, 0);\n-    assert_eq(f64::NAN as u64, 0);\n-    assert_eq((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n-    assert_eq((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n-    assert_eq(u128::MAX as f64 as u128, u128::MAX);\n-    assert_eq(i16::MIN as f64, -32768.0f64);\n-    assert_eq(u128::MAX as f64, 340282366920938463463374607431768211455.0f64); // even that fits...\n-\n-    // f32 <-> f64 casts\n-    assert_eq(5.0f64 as f32, 5.0f32);\n-    assert_eq(5.0f32 as f64, 5.0f64);\n-    assert_eq(f64::MAX as f32, f32::INFINITY);\n-    assert_eq(f64::MIN as f32, f32::NEG_INFINITY);\n-    assert_eq(f32::INFINITY as f64, f64::INFINITY);\n-    assert_eq(f32::NEG_INFINITY as f64, f64::NEG_INFINITY);\n+    // f64 -> u64\n+    assert_eq::<u64>(0.0f64 as u64, 0);\n+    assert_eq::<u64>(-0.0f64 as u64, 0);\n+    assert_eq::<u64>(5.0f64 as u64, 5);\n+    assert_eq::<u64>(-5.0f64 as u64, 0);\n+    assert_eq::<u64>(1e16f64 as u64, 10000000000000000);\n+    assert_eq::<u64>((u64::MAX-1023) as f64 as u64, u64::MAX); // rounding loss\n+    assert_eq::<u64>((u64::MAX-1024) as f64 as u64, u64::MAX-2047); // rounding loss\n+    assert_eq::<u64>(9223372036854775808.0f64 as u64, 9223372036854775808);\n+    // unrepresentable casts\n+    assert_eq::<u64>(18446744073709551616.0f64 as u64, u64::MAX);\n+    assert_eq::<u64>(f64::MAX as u64, u64::MAX);\n+    assert_eq::<u64>(f64::MIN as u64, 0);\n+    assert_eq::<u64>(f64::INFINITY as u64, u64::MAX);\n+    assert_eq::<u64>(f64::NEG_INFINITY as u64, 0);\n+    assert_eq::<u64>(f64::NAN as u64, 0);\n+    assert_eq::<u64>((-f64::NAN) as u64, 0);\n+\n+    // int -> f32\n+    assert_eq::<f32>(127i8 as f32, 127.0);\n+    assert_eq::<f32>(2147483647i32 as f32, 2147483648.0);\n+    assert_eq::<f32>((-2147483648i32) as f32, -2147483648.0);\n+    assert_eq::<f32>(1234567890i32 as f32, /*0x1.26580cp+30*/ f32::from_bits(0x4e932c06));\n+    assert_eq::<f32>(16777217i32 as f32, 16777216.0);\n+    assert_eq::<f32>((-16777217i32) as f32, -16777216.0);\n+    assert_eq::<f32>(16777219i32 as f32, 16777220.0);\n+    assert_eq::<f32>((-16777219i32) as f32, -16777220.0);\n+    assert_eq::<f32>(0x7fffff4000000001i64 as f32, /*0x1.fffffep+62*/ f32::from_bits(0x5effffff));\n+    assert_eq::<f32>(0x8000004000000001u64 as i64 as f32, /*-0x1.fffffep+62*/ f32::from_bits(0xdeffffff));\n+    assert_eq::<f32>(0x0020000020000001i64 as f32, /*0x1.000002p+53*/ f32::from_bits(0x5a000001));\n+    assert_eq::<f32>(0xffdfffffdfffffffu64 as i64 as f32, /*-0x1.000002p+53*/ f32::from_bits(0xda000001));\n+    assert_eq::<f32>(i128::MIN as f32, -170141183460469231731687303715884105728.0f32);\n+    assert_eq::<f32>(u128::MAX as f32, f32::INFINITY); // saturation\n+\n+    // int -> f64\n+    assert_eq::<f64>(127i8 as f64, 127.0);\n+    assert_eq::<f64>(i16::MIN as f64, -32768.0f64);\n+    assert_eq::<f64>(2147483647i32 as f64, 2147483647.0);\n+    assert_eq::<f64>(-2147483648i32 as f64, -2147483648.0);\n+    assert_eq::<f64>(987654321i32 as f64, 987654321.0);\n+    assert_eq::<f64>(9223372036854775807i64 as f64, 9223372036854775807.0);\n+    assert_eq::<f64>(-9223372036854775808i64 as f64, -9223372036854775808.0);\n+    assert_eq::<f64>(4669201609102990i64 as f64, 4669201609102990.0); // Feigenbaum (?)\n+    assert_eq::<f64>(9007199254740993i64 as f64, 9007199254740992.0);\n+    assert_eq::<f64>(-9007199254740993i64 as f64, -9007199254740992.0);\n+    assert_eq::<f64>(9007199254740995i64 as f64, 9007199254740996.0);\n+    assert_eq::<f64>(-9007199254740995i64 as f64, -9007199254740996.0);\n+    assert_eq::<f64>(u128::MAX as f64, 340282366920938463463374607431768211455.0f64); // even that fits...\n+\n+    // f32 -> f64\n+    assert_eq::<u64>((0.0f32 as f64).to_bits(), 0.0f64.to_bits());\n+    assert_eq::<u64>(((-0.0f32) as f64).to_bits(), (-0.0f64).to_bits());\n+    assert_eq::<f64>(5.0f32 as f64, 5.0f64);\n+    assert_eq::<f64>(/*0x1p-149*/ f32::from_bits(0x1) as f64, /*0x1p-149*/ f64::from_bits(0x36a0000000000000));\n+    assert_eq::<f64>(/*-0x1p-149*/ f32::from_bits(0x80000001) as f64, /*-0x1p-149*/ f64::from_bits(0xb6a0000000000000));\n+    assert_eq::<f64>(/*0x1.fffffep+127*/ f32::from_bits(0x7f7fffff) as f64, /*0x1.fffffep+127*/ f64::from_bits(0x47efffffe0000000));\n+    assert_eq::<f64>(/*-0x1.fffffep+127*/ (-f32::from_bits(0x7f7fffff)) as f64, /*-0x1.fffffep+127*/ -f64::from_bits(0x47efffffe0000000));\n+    assert_eq::<f64>(/*0x1p-119*/ f32::from_bits(0x4000000) as f64, /*0x1p-119*/ f64::from_bits(0x3880000000000000));\n+    assert_eq::<f64>(/*0x1.8f867ep+125*/ f32::from_bits(0x7e47c33f) as f64, 6.6382536710104395e+37);\n+    assert_eq::<f64>(f32::INFINITY as f64, f64::INFINITY);\n+    assert_eq::<f64>(f32::NEG_INFINITY as f64, f64::NEG_INFINITY);\n+\n+    // f64 -> f32\n+    assert_eq::<u32>((0.0f64 as f32).to_bits(), 0.0f32.to_bits());\n+    assert_eq::<u32>(((-0.0f64) as f32).to_bits(), (-0.0f32).to_bits());\n+    assert_eq::<f32>(5.0f64 as f32, 5.0f32);\n+    assert_eq::<f32>(/*0x0.0000000000001p-1022*/ f64::from_bits(0x1) as f32, 0.0);\n+    assert_eq::<f32>(/*-0x0.0000000000001p-1022*/ (-f64::from_bits(0x1)) as f32, -0.0);\n+\n+    assert_eq::<f32>(/*0x1.fffffe0000000p-127*/ f64::from_bits(0x380fffffe0000000) as f32, /*0x1p-149*/ f32::from_bits(0x800000));\n+    assert_eq::<f32>(/*0x1.4eae4f7024c7p+108*/ f64::from_bits(0x46b4eae4f7024c70) as f32, /*0x1.4eae5p+108*/ f32::from_bits(0x75a75728));\n+\n+    assert_eq::<f32>(f64::MAX as f32, f32::INFINITY);\n+    assert_eq::<f32>(f64::MIN as f32, f32::NEG_INFINITY);\n+    assert_eq::<f32>(f64::INFINITY as f32, f32::INFINITY);\n+    assert_eq::<f32>(f64::NEG_INFINITY as f32, f32::NEG_INFINITY);\n+}\n \n+fn ops() {\n     // f32 min/max\n     assert_eq((1.0 as f32).max(-1.0), 1.0);\n     assert_eq((1.0 as f32).min(-1.0), -1.0);"}, {"sha": "8e5a88ff336a215afd422ebb9833759c507f72a3", "filename": "tests/run-pass/float_fast_math.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aad2c5af066362a69c3e1ee67f44266d3c9a79ed/tests%2Frun-pass%2Ffloat_fast_math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aad2c5af066362a69c3e1ee67f44266d3c9a79ed/tests%2Frun-pass%2Ffloat_fast_math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffloat_fast_math.rs?ref=aad2c5af066362a69c3e1ee67f44266d3c9a79ed", "patch": "@@ -3,7 +3,19 @@\n use std::intrinsics::{fadd_fast, fsub_fast, fmul_fast, fdiv_fast, frem_fast};\n \n #[inline(never)]\n-pub fn test_operations(a: f64, b: f64) {\n+pub fn test_operations_f64(a: f64, b: f64) {\n+    // make sure they all map to the correct operation\n+    unsafe {\n+        assert_eq!(fadd_fast(a, b), a + b);\n+        assert_eq!(fsub_fast(a, b), a - b);\n+        assert_eq!(fmul_fast(a, b), a * b);\n+        assert_eq!(fdiv_fast(a, b), a / b);\n+        assert_eq!(frem_fast(a, b), a % b);\n+    }\n+}\n+\n+#[inline(never)]\n+pub fn test_operations_f32(a: f32, b: f32) {\n     // make sure they all map to the correct operation\n     unsafe {\n         assert_eq!(fadd_fast(a, b), a + b);\n@@ -15,6 +27,8 @@ pub fn test_operations(a: f64, b: f64) {\n }\n \n fn main() {\n-    test_operations(1., 2.);\n-    test_operations(10., 5.);\n+    test_operations_f64(1., 2.);\n+    test_operations_f64(10., 5.);\n+    test_operations_f32(11., 2.);\n+    test_operations_f32(10., 15.);\n }"}]}