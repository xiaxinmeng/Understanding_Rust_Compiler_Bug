{"sha": "7d786318a1b0f9315164716b46306d68e3b9560f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNzg2MzE4YTFiMGY5MzE1MTY0NzE2YjQ2MzA2ZDY4ZTNiOTU2MGY=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-16T17:18:34Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-16T17:18:34Z"}, "message": "std: declared fns as pure where sensible", "tree": {"sha": "279d9fbf3953e6b8ddda824fd8aa56b318d82c4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/279d9fbf3953e6b8ddda824fd8aa56b318d82c4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d786318a1b0f9315164716b46306d68e3b9560f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d786318a1b0f9315164716b46306d68e3b9560f", "html_url": "https://github.com/rust-lang/rust/commit/7d786318a1b0f9315164716b46306d68e3b9560f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d786318a1b0f9315164716b46306d68e3b9560f/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfbaadc694141935660fb73bbc1800389ede18e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfbaadc694141935660fb73bbc1800389ede18e9", "html_url": "https://github.com/rust-lang/rust/commit/bfbaadc694141935660fb73bbc1800389ede18e9"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "a8e6d98b3cf2b1aa579e1312efe4e76d759f8d30", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=7d786318a1b0f9315164716b46306d68e3b9560f", "patch": "@@ -128,7 +128,7 @@ Function: get\n \n Retreive the value at index `i`\n */\n-fn get(v: t, i: uint) -> bool {\n+pure fn get(v: t, i: uint) -> bool {\n     assert (i < v.nbits);\n     let bits = uint_bits;\n     let w = i / bits;"}, {"sha": "67025cc90ac801dbe986f37ebb0dddd208bf3307", "filename": "src/libstd/list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=7d786318a1b0f9315164716b46306d68e3b9560f", "patch": "@@ -112,7 +112,7 @@ Function: tail\n \n Returns all but the first element of a list\n */\n-fn tail<copy T>(ls: list<T>) -> list<T> {\n+pure fn tail<copy T>(ls: list<T>) -> list<T> {\n     alt ls { cons(_, tl) { ret *tl; } nil. { fail \"list empty\" } }\n }\n \n@@ -121,7 +121,7 @@ Function: head\n \n Returns the first element of a list\n */\n-fn head<copy T>(ls: list<T>) -> T {\n+pure fn head<copy T>(ls: list<T>) -> T {\n     alt ls { cons(hd, _) { ret hd; } nil. { fail \"list empty\" } }\n }\n \n@@ -130,7 +130,7 @@ Function: append\n \n Appends one list to another\n */\n-fn append<copy T>(l: list<T>, m: list<T>) -> list<T> {\n+pure fn append<copy T>(l: list<T>, m: list<T>) -> list<T> {\n     alt l {\n       nil. { ret m; }\n       cons(x, xs) { let rest = append(*xs, m); ret cons(x, @rest); }"}, {"sha": "e774650f980b5b208fc585e03865a0d6603ea880", "filename": "src/libstd/posix_fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fposix_fs.rs?ref=7d786318a1b0f9315164716b46306d68e3b9560f", "patch": "@@ -30,6 +30,7 @@ fn list_dir(path: str) -> [str] {\n \n }\n \n+// FIXME make pure when str::char_at is\n fn path_is_absolute(p: str) -> bool { ret str::char_at(p, 0u) == '/'; }\n \n const path_sep: char = '/';"}, {"sha": "bd07b6a8bc7e6d61aba056de57e8940401a65991", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=7d786318a1b0f9315164716b46306d68e3b9560f", "patch": "@@ -310,7 +310,7 @@ Returns:\n \n A negative value if `left < right`, 0 if eq(left, right) or a positive\n value if `left > right`\n- */\n+*/\n fn cmp(left: rope, right: rope) -> int {\n     alt((left, right)) {\n       (node::empty., node::empty.) { ret 0; }"}, {"sha": "a3d11cbc55b23f38940f33092f09db53e953c2c8", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d786318a1b0f9315164716b46306d68e3b9560f/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=7d786318a1b0f9315164716b46306d68e3b9560f", "patch": "@@ -151,16 +151,16 @@ mod icu {\n     #[link_name = \"icuuc\"]\n     #[abi = \"cdecl\"]\n     native mod libicu {\n-        fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n+        pure fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n     }\n }\n \n-fn is_XID_start(c: char) -> bool {\n+pure fn is_XID_start(c: char) -> bool {\n     ret icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n         == icu::TRUE;\n }\n \n-fn is_XID_continue(c: char) -> bool {\n+pure fn is_XID_continue(c: char) -> bool {\n     ret icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n         == icu::TRUE;\n }"}]}