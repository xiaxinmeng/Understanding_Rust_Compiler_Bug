{"sha": "8ae58b9fe45aac9534475e2042729327c4485d5f", "node_id": "C_kwDOAAsO6NoAKDhhZTU4YjlmZTQ1YWFjOTUzNDQ3NWUyMDQyNzI5MzI3YzQ0ODVkNWY", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-09-02T07:52:58Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-09-02T11:31:15Z"}, "message": "Record enabled unstable features into DefMap", "tree": {"sha": "cb3ca7dc71a0571bd81d3afab923d6da68f49353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb3ca7dc71a0571bd81d3afab923d6da68f49353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ae58b9fe45aac9534475e2042729327c4485d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae58b9fe45aac9534475e2042729327c4485d5f", "html_url": "https://github.com/rust-lang/rust/commit/8ae58b9fe45aac9534475e2042729327c4485d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ae58b9fe45aac9534475e2042729327c4485d5f/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a", "html_url": "https://github.com/rust-lang/rust/commit/1fa9d5e07b1b2035be2eca70d0e2bb81f10edd8a"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "fc8444394cf505c158fcf70f99d0446c258f4158", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=8ae58b9fe45aac9534475e2042729327c4485d5f", "patch": "@@ -64,7 +64,7 @@ use hir_expand::{name::Name, InFile, MacroCallId, MacroDefId};\n use itertools::Itertools;\n use la_arena::Arena;\n use profile::Count;\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::format_to;\n use syntax::{ast, SmolStr};\n \n@@ -114,6 +114,8 @@ pub struct DefMap {\n     registered_attrs: Vec<SmolStr>,\n     /// Custom tool modules registered with `#![register_tool]`.\n     registered_tools: Vec<SmolStr>,\n+    /// Unstable features of Rust enabled with `#![feature(A, B)]`.\n+    unstable_features: FxHashSet<SmolStr>,\n \n     edition: Edition,\n     recursion_limit: Option<u32>,\n@@ -284,6 +286,7 @@ impl DefMap {\n             modules,\n             registered_attrs: Vec::new(),\n             registered_tools: Vec::new(),\n+            unstable_features: FxHashSet::default(),\n             diagnostics: Vec::new(),\n         }\n     }\n@@ -314,6 +317,10 @@ impl DefMap {\n         &self.registered_attrs\n     }\n \n+    pub fn is_unstable_feature_enabled(&self, feature: &str) -> bool {\n+        self.unstable_features.contains(feature)\n+    }\n+\n     pub fn root(&self) -> LocalModuleId {\n         self.root\n     }\n@@ -483,6 +490,7 @@ impl DefMap {\n             registered_tools,\n             fn_proc_macro_mapping,\n             derive_helpers_in_scope,\n+            unstable_features,\n             proc_macro_loading_error: _,\n             block: _,\n             edition: _,\n@@ -500,6 +508,7 @@ impl DefMap {\n         registered_tools.shrink_to_fit();\n         fn_proc_macro_mapping.shrink_to_fit();\n         derive_helpers_in_scope.shrink_to_fit();\n+        unstable_features.shrink_to_fit();\n         for (_, module) in modules.iter_mut() {\n             module.children.shrink_to_fit();\n             module.scope.shrink_to_fit();"}, {"sha": "ee27aa2554a38dffa97fd4f912bd20a1d98192c3", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=8ae58b9fe45aac9534475e2042729327c4485d5f", "patch": "@@ -294,6 +294,17 @@ impl DefCollector<'_> {\n                     continue;\n                 }\n \n+                if *attr_name == hir_expand::name![feature] {\n+                    let features =\n+                        attr.parse_path_comma_token_tree().into_iter().flatten().filter_map(\n+                            |feat| match feat.segments() {\n+                                [name] => Some(name.to_smol_str()),\n+                                _ => None,\n+                            },\n+                        );\n+                    self.def_map.unstable_features.extend(features);\n+                }\n+\n                 let attr_is_register_like = *attr_name == hir_expand::name![register_attr]\n                     || *attr_name == hir_expand::name![register_tool];\n                 if !attr_is_register_like {"}, {"sha": "4ce21a57967c72048f59b5db4517c544d075b528", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=8ae58b9fe45aac9534475e2042729327c4485d5f", "patch": "@@ -336,6 +336,7 @@ pub mod known {\n         test,\n         test_case,\n         recursion_limit,\n+        feature,\n         // Safe intrinsics\n         abort,\n         add_with_overflow,"}, {"sha": "c4d709a975b0299a7a0a0374b83d9e12824a8236", "filename": "crates/hir-ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ae58b9fe45aac9534475e2042729327c4485d5f/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=8ae58b9fe45aac9534475e2042729327c4485d5f", "patch": "@@ -274,7 +274,6 @@\n use std::iter::once;\n \n use hir_def::{AdtId, DefWithBodyId, HasModule, ModuleId};\n-use once_cell::unsync::OnceCell;\n use smallvec::{smallvec, SmallVec};\n use typed_arena::Arena;\n \n@@ -290,7 +289,7 @@ pub(crate) struct MatchCheckCtx<'a, 'p> {\n     pub(crate) db: &'a dyn HirDatabase,\n     /// Lowered patterns from arms plus generated by the check.\n     pub(crate) pattern_arena: &'p Arena<DeconstructedPat<'p>>,\n-    feature_exhaustive_patterns: OnceCell<bool>,\n+    exhaustive_patterns: bool,\n }\n \n impl<'a, 'p> MatchCheckCtx<'a, 'p> {\n@@ -300,7 +299,9 @@ impl<'a, 'p> MatchCheckCtx<'a, 'p> {\n         db: &'a dyn HirDatabase,\n         pattern_arena: &'p Arena<DeconstructedPat<'p>>,\n     ) -> Self {\n-        Self { module, body, db, pattern_arena, feature_exhaustive_patterns: Default::default() }\n+        let def_map = db.crate_def_map(module.krate());\n+        let exhaustive_patterns = def_map.is_unstable_feature_enabled(\"exhaustive_patterns\");\n+        Self { module, body, db, pattern_arena, exhaustive_patterns }\n     }\n \n     pub(super) fn is_uninhabited(&self, ty: &Ty) -> bool {\n@@ -326,20 +327,7 @@ impl<'a, 'p> MatchCheckCtx<'a, 'p> {\n \n     // Rust's unstable feature described as \"Allows exhaustive pattern matching on types that contain uninhabited types.\"\n     pub(super) fn feature_exhaustive_patterns(&self) -> bool {\n-        *self.feature_exhaustive_patterns.get_or_init(|| {\n-            let def_map = self.db.crate_def_map(self.module.krate());\n-            let root_mod = def_map.module_id(def_map.root());\n-            let rood_attrs = self.db.attrs(root_mod.into());\n-            let mut nightly_features = rood_attrs\n-                .by_key(\"feature\")\n-                .attrs()\n-                .map(|attr| attr.parse_path_comma_token_tree())\n-                .flatten()\n-                .flatten();\n-            nightly_features.any(\n-            |feat| matches!(feat.segments(), [name] if name.to_smol_str() == \"exhaustive_patterns\"),\n-        )\n-        })\n+        self.exhaustive_patterns\n     }\n }\n "}]}