{"sha": "312d27d0a2aa0c47a00b6803c54a9281d2038c68", "node_id": "C_kwDOAAsO6NoAKDMxMmQyN2QwYTJhYTBjNDdhMDBiNjgwM2M1NGE5MjgxZDIwMzhjNjg", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T08:43:39Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T08:43:39Z"}, "message": "Remove some unnecessary clones", "tree": {"sha": "9d0a9187fb97bea5e3caec9e74237706ffb5faad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d0a9187fb97bea5e3caec9e74237706ffb5faad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/312d27d0a2aa0c47a00b6803c54a9281d2038c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/312d27d0a2aa0c47a00b6803c54a9281d2038c68", "html_url": "https://github.com/rust-lang/rust/commit/312d27d0a2aa0c47a00b6803c54a9281d2038c68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/312d27d0a2aa0c47a00b6803c54a9281d2038c68/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ea2ced2beec11b1c0e8d42e45a270684618367f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ea2ced2beec11b1c0e8d42e45a270684618367f", "html_url": "https://github.com/rust-lang/rust/commit/2ea2ced2beec11b1c0e8d42e45a270684618367f"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "e5d4dfe891eff3d0e9c41bae55688e74b05d72d3", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/312d27d0a2aa0c47a00b6803c54a9281d2038c68/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312d27d0a2aa0c47a00b6803c54a9281d2038c68/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=312d27d0a2aa0c47a00b6803c54a9281d2038c68", "patch": "@@ -143,10 +143,6 @@ impl<'tcx> ObligationCause<'tcx> {\n         ObligationCause { span, body_id: hir::CRATE_HIR_ID, code: None }\n     }\n \n-    pub fn make_mut_code(&mut self) -> &mut ObligationCauseCode<'tcx> {\n-        Lrc::make_mut(self.code.get_or_insert_with(|| Lrc::new(MISC_OBLIGATION_CAUSE_CODE)))\n-    }\n-\n     pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {\n         match *self.code() {\n             ObligationCauseCode::CompareImplMethodObligation { .. }\n@@ -173,6 +169,16 @@ impl<'tcx> ObligationCause<'tcx> {\n             None => Lrc::new(MISC_OBLIGATION_CAUSE_CODE),\n         }\n     }\n+\n+    pub fn map_code(\n+        &mut self,\n+        f: impl FnOnce(Lrc<ObligationCauseCode<'tcx>>) -> Lrc<ObligationCauseCode<'tcx>>,\n+    ) {\n+        self.code = Some(f(match self.code.take() {\n+            Some(code) => code,\n+            None => Lrc::new(MISC_OBLIGATION_CAUSE_CODE),\n+        }));\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift)]"}, {"sha": "1ee5b385f9a2379a96a6261c1d95ef6101b6aace", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/312d27d0a2aa0c47a00b6803c54a9281d2038c68/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312d27d0a2aa0c47a00b6803c54a9281d2038c68/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=312d27d0a2aa0c47a00b6803c54a9281d2038c68", "patch": "@@ -294,30 +294,28 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n         let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n \n         debug!(\"compute_trait_ref obligations {:?}\", obligations);\n-        let cause = self.cause(traits::MiscObligation);\n         let param_env = self.param_env;\n         let depth = self.recursion_depth;\n \n         let item = self.item;\n \n-        let extend = |obligation: traits::PredicateObligation<'tcx>| {\n-            let mut cause = cause.clone();\n-            if let Some(parent_trait_pred) = obligation.predicate.to_opt_poly_trait_pred() {\n-                let derived_cause = traits::DerivedObligationCause {\n-                    parent_trait_pred,\n-                    parent_code: obligation.cause.clone_code(),\n-                };\n-                *cause.make_mut_code() =\n-                    traits::ObligationCauseCode::DerivedObligation(derived_cause);\n+        let extend = |traits::PredicateObligation { predicate, mut cause, .. }| {\n+            if let Some(parent_trait_pred) = predicate.to_opt_poly_trait_pred() {\n+                cause.map_code(|parent_code| {\n+                    {\n+                        traits::ObligationCauseCode::DerivedObligation(\n+                            traits::DerivedObligationCause { parent_trait_pred, parent_code },\n+                        )\n+                    }\n+                    .into()\n+                });\n+            } else {\n+                cause = traits::ObligationCause::misc(self.span, self.body_id);\n             }\n             extend_cause_with_original_assoc_item_obligation(\n-                tcx,\n-                trait_ref,\n-                item,\n-                &mut cause,\n-                obligation.predicate,\n+                tcx, trait_ref, item, &mut cause, predicate,\n             );\n-            traits::Obligation::with_depth(cause, depth, param_env, obligation.predicate)\n+            traits::Obligation::with_depth(cause, depth, param_env, predicate)\n         };\n \n         if let Elaborate::All = elaborate {\n@@ -339,17 +337,17 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 })\n                 .filter(|(_, arg)| !arg.has_escaping_bound_vars())\n                 .map(|(i, arg)| {\n-                    let mut new_cause = cause.clone();\n+                    let mut cause = traits::ObligationCause::misc(self.span, self.body_id);\n                     // The first subst is the self ty - use the correct span for it.\n                     if i == 0 {\n                         if let Some(hir::ItemKind::Impl(hir::Impl { self_ty, .. })) =\n                             item.map(|i| &i.kind)\n                         {\n-                            new_cause.span = self_ty.span;\n+                            cause.span = self_ty.span;\n                         }\n                     }\n                     traits::Obligation::with_depth(\n-                        new_cause,\n+                        cause,\n                         depth,\n                         param_env,\n                         ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(tcx),"}, {"sha": "604228d57a30b37cfef0d89687fe938281442d1d", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/312d27d0a2aa0c47a00b6803c54a9281d2038c68/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312d27d0a2aa0c47a00b6803c54a9281d2038c68/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=312d27d0a2aa0c47a00b6803c54a9281d2038c68", "patch": "@@ -1668,13 +1668,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // We make sure that only *one* argument matches the obligation failure\n                 // and we assign the obligation's span to its expression's.\n                 error.obligation.cause.span = args[ref_in].span;\n-                let parent_code = error.obligation.cause.clone_code();\n-                *error.obligation.cause.make_mut_code() =\n+                error.obligation.cause.map_code(|parent_code| {\n                     ObligationCauseCode::FunctionArgumentObligation {\n                         arg_hir_id: args[ref_in].hir_id,\n                         call_hir_id: expr.hir_id,\n                         parent_code,\n-                    };\n+                    }\n+                    .into()\n+                });\n             } else if error.obligation.cause.span == call_sp {\n                 // Make function calls point at the callee, not the whole thing.\n                 if let hir::ExprKind::Call(callee, _) = expr.kind {"}]}