{"sha": "efb487b503d87f04448fc5e6f75038ca98b8670e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYjQ4N2I1MDNkODdmMDQ0NDhmYzVlNmY3NTAzOGNhOThiODY3MGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:28:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-06T03:28:30Z"}, "message": "Rollup merge of #22980 - alexcrichton:debug-assertions, r=pnkfelix\n\n This commit is an implementation of [RFC 563][rfc] which adds a new\n`cfg(debug_assertions)` directive which is specially recognized and calculated\nby the compiler. The flag is turned off at any optimization level greater than 1\nand may also be explicitly controlled through the `-C debug-assertions`\nflag.\n\n[rfc]: https://github.com/rust-lang/rfcs/pull/563\n\nThe `debug_assert!` and `debug_assert_eq!` macros now respect this instead of\nthe `ndebug` variable and `ndebug` no longer holds any meaning to the standard\nlibrary.\n\nCode which was previously relying on `not(ndebug)` to gate expensive code should\nbe updated to rely on `debug_assertions` instead.\n\nCloses #22492\n[breaking-change]", "tree": {"sha": "61baab48b0fb84ec3f95e617db7dbff2f4dcfc01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61baab48b0fb84ec3f95e617db7dbff2f4dcfc01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb487b503d87f04448fc5e6f75038ca98b8670e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb487b503d87f04448fc5e6f75038ca98b8670e", "html_url": "https://github.com/rust-lang/rust/commit/efb487b503d87f04448fc5e6f75038ca98b8670e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb487b503d87f04448fc5e6f75038ca98b8670e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb596ce8f4b70ba73e8671f9b42147c91319842", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb596ce8f4b70ba73e8671f9b42147c91319842", "html_url": "https://github.com/rust-lang/rust/commit/9eb596ce8f4b70ba73e8671f9b42147c91319842"}, {"sha": "d5d834551cd5a7e7d89ac9f2ae642a93409ed989", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d834551cd5a7e7d89ac9f2ae642a93409ed989", "html_url": "https://github.com/rust-lang/rust/commit/d5d834551cd5a7e7d89ac9f2ae642a93409ed989"}], "stats": {"total": 119, "additions": 100, "deletions": 19}, "files": [{"sha": "ef38abcab651877dfdd0a6a9c9358d4176cadce6", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -590,7 +590,7 @@ TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n \n # The tests select when to use debug configuration on their own;\n # remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n-CTEST_RUSTC_FLAGS := $$(subst --cfg ndebug,,$$(CFG_RUSTC_FLAGS))\n+CTEST_RUSTC_FLAGS := $$(subst -C debug-assertions,,$$(CFG_RUSTC_FLAGS))\n \n # The tests cannot be optimized while the rest of the compiler is optimized, so\n # filter out the optimization (if any) from rustc and then figure out if we need"}, {"sha": "c2860d435114f64329d48c30daae5224a4c7b4cf", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -100,10 +100,12 @@ macro_rules! assert_eq {\n /// This will invoke the `panic!` macro if the provided expression cannot be\n /// evaluated to `true` at runtime.\n ///\n-/// Unlike `assert!`, `debug_assert!` statements can be disabled by passing\n-/// `--cfg ndebug` to the compiler. This makes `debug_assert!` useful for\n-/// checks that are too expensive to be present in a release build but may be\n-/// helpful during development.\n+/// Unlike `assert!`, `debug_assert!` statements are only enabled in non\n+/// optimized builds by default. An optimized build will omit all\n+/// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n+/// compiler. This makes `debug_assert!` useful for checks that are too\n+/// expensive to be present in a release build but may be helpful during\n+/// development.\n ///\n /// # Example\n ///\n@@ -125,18 +127,20 @@ macro_rules! assert_eq {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! debug_assert {\n-    ($($arg:tt)*) => (if cfg!(not(ndebug)) { assert!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert!($($arg)*); })\n }\n \n /// Asserts that two expressions are equal to each other, testing equality in\n /// both directions.\n ///\n /// On panic, this macro will print the values of the expressions.\n ///\n-/// Unlike `assert_eq!`, `debug_assert_eq!` statements can be disabled by\n-/// passing `--cfg ndebug` to the compiler. This makes `debug_assert_eq!`\n-/// useful for checks that are too expensive to be present in a release build\n-/// but may be helpful during development.\n+/// Unlike `assert_eq!`, `debug_assert_eq!` statements are only enabled in non\n+/// optimized builds by default. An optimized build will omit all\n+/// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n+/// compiler. This makes `debug_assert_eq!` useful for checks that are too\n+/// expensive to be present in a release build but may be helpful during\n+/// development.\n ///\n /// # Example\n ///\n@@ -147,7 +151,7 @@ macro_rules! debug_assert {\n /// ```\n #[macro_export]\n macro_rules! debug_assert_eq {\n-    ($($arg:tt)*) => (if cfg!(not(ndebug)) { assert_eq!($($arg)*); })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { assert_eq!($($arg)*); })\n }\n \n /// Short circuiting evaluation on Err"}, {"sha": "f0f861a3831a126efe176495d163f55d486b6cb1", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -157,7 +157,7 @@ macro_rules! info {\n /// ```\n #[macro_export]\n macro_rules! debug {\n-    ($($arg:tt)*) => (if cfg!(not(ndebug)) { log!(::log::DEBUG, $($arg)*) })\n+    ($($arg:tt)*) => (if cfg!(debug_assertions) { log!(::log::DEBUG, $($arg)*) })\n }\n \n /// A macro to test whether a log level is enabled for the current module.\n@@ -192,7 +192,7 @@ macro_rules! debug {\n macro_rules! log_enabled {\n     ($lvl:expr) => ({\n         let lvl = $lvl;\n-        (lvl != ::log::DEBUG || cfg!(not(ndebug))) &&\n+        (lvl != ::log::DEBUG || cfg!(debug_assertions)) &&\n         lvl <= ::log::log_level() &&\n         ::log::mod_enabled(lvl, module_path!())\n     })"}, {"sha": "1b09be050203bd82b894d0e981b43f5417a0f524", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -81,6 +81,7 @@ pub struct Options {\n \n     pub gc: bool,\n     pub optimize: OptLevel,\n+    pub debug_assertions: bool,\n     pub debuginfo: DebugInfoLevel,\n     pub lint_opts: Vec<(String, lint::Level)>,\n     pub describe_lints: bool,\n@@ -238,7 +239,8 @@ pub fn basic_options() -> Options {\n         crate_name: None,\n         alt_std_name: None,\n         libs: Vec::new(),\n-        unstable_features: UnstableFeatures::Disallow\n+        unstable_features: UnstableFeatures::Disallow,\n+        debug_assertions: true,\n     }\n }\n \n@@ -528,6 +530,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          2 = full debug info with variable and type information\"),\n     opt_level: Option<uint> = (None, parse_opt_uint,\n         \"Optimize with possible levels 0-3\"),\n+    debug_assertions: Option<bool> = (None, parse_opt_bool,\n+        \"explicitly enable the cfg(debug_assertions) directive\"),\n }\n \n \n@@ -621,15 +625,19 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     };\n \n     let mk = attr::mk_name_value_item_str;\n-    return vec!(// Target bindings.\n+    let mut ret = vec![ // Target bindings.\n          attr::mk_word_item(fam.clone()),\n          mk(InternedString::new(\"target_os\"), intern(os)),\n          mk(InternedString::new(\"target_family\"), fam),\n          mk(InternedString::new(\"target_arch\"), intern(arch)),\n          mk(InternedString::new(\"target_endian\"), intern(end)),\n          mk(InternedString::new(\"target_pointer_width\"),\n             intern(wordsz))\n-    );\n+    ];\n+    if sess.opts.debug_assertions {\n+        ret.push(attr::mk_word_item(InternedString::new(\"debug_assertions\")));\n+    }\n+    return ret;\n }\n \n pub fn append_configuration(cfg: &mut ast::CrateConfig,\n@@ -923,6 +931,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n         }\n     };\n+    let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == No);\n     let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if cg.debuginfo.is_some() {\n@@ -1064,6 +1073,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         alt_std_name: None,\n         libs: libs,\n         unstable_features: get_unstable_features_setting(),\n+        debug_assertions: debug_assertions,\n     }\n }\n "}, {"sha": "f49905613d24cbd2a241880971d395022b2dd4a8", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -3089,7 +3089,7 @@ pub fn trans_crate<'tcx>(analysis: ty::CrateAnalysis<'tcx>)\n     let check_overflow = if let Some(v) = tcx.sess.opts.debugging_opts.force_overflow_checks {\n         v\n     } else {\n-        !attr::contains_name(&krate.config, \"ndebug\")\n+        tcx.sess.opts.debug_assertions\n     };\n \n     // Before we touch LLVM, make sure that multithreading is enabled."}, {"sha": "cd13b817c2b8c5fc6d7f2ac64257bff0b3b1db6d", "filename": "src/test/run-fail/overflowing-add.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-fail%2Foverflowing-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-add.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n+// compile-flags: -C debug-assertions\n \n // (Work around constant-evaluation)\n fn value() -> u8 { 200 }"}, {"sha": "5d2f53962406c5427793320805a0b068ef75c40e", "filename": "src/test/run-fail/overflowing-mul.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-mul.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n+// compile-flags: -C debug-assertions\n \n // (Work around constant-evaluation)\n fn value() -> u8 { 200 }"}, {"sha": "b089dccbaa52f0c54b18abcb4ec65377ccd0c383", "filename": "src/test/run-fail/overflowing-sub.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-sub.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern:thread '<main>' panicked at 'arithmetic operation overflowed'\n+// compile-flags: -C debug-assertions\n \n // (Work around constant-evaluation)\n fn value() -> u8 { 42 }"}, {"sha": "7129756276864302d28843813c3097f7d26587cf", "filename": "src/test/run-make/debug-assertions/Makefile", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdebug-assertions%2FMakefile?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -0,0 +1,21 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) debug.rs -C debug-assertions=no\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=0\n+\t$(call RUN,debug) bad\n+\t$(RUSTC) debug.rs -C opt-level=1\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=2\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -C opt-level=3\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs -O\n+\t$(call RUN,debug) good\n+\t$(RUSTC) debug.rs\n+\t$(call RUN,debug) bad\n+\t$(RUSTC) debug.rs -C debug-assertions=yes -O\n+\t$(call RUN,debug) bad\n+\t$(RUSTC) debug.rs -C debug-assertions=yes -C opt-level=1\n+\t$(call RUN,debug) bad"}, {"sha": "a0ccc75afd05b5c6ea9f0029dc69049abd7d444c", "filename": "src/test/run-make/debug-assertions/debug.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdebug-assertions%2Fdebug.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(warnings)]\n+\n+use std::env;\n+use std::thread;\n+\n+fn main() {\n+    let should_fail = env::args().nth(1) == Some(\"bad\".to_string());\n+\n+    assert_eq!(thread::spawn(debug_assert_eq).join().is_err(), should_fail);\n+    assert_eq!(thread::spawn(debug_assert).join().is_err(), should_fail);\n+    assert_eq!(thread::spawn(overflow).join().is_err(), should_fail);\n+}\n+\n+fn debug_assert_eq() {\n+    let mut hit1 = false;\n+    let mut hit2 = false;\n+    debug_assert_eq!({ hit1 = true; 1 }, { hit2 = true; 2 });\n+    assert!(!hit1);\n+    assert!(!hit2);\n+}\n+\n+fn debug_assert() {\n+    let mut hit = false;\n+    debug_assert!({ hit = true; false });\n+    assert!(!hit);\n+}\n+\n+fn overflow() {\n+    fn add(a: u8, b: u8) -> u8 { a + b }\n+\n+    add(200u8, 200u8);\n+}"}, {"sha": "90142350772b82693c6b3b1da58c63513aa62358", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --cfg ndebug\n+// compile-flags: -C debug-assertions=no\n // exec-env:RUST_LOG=conditional-debug-macro-off=4\n \n #[macro_use]"}, {"sha": "dfc9272827066c517138209ab1851338af90e681", "filename": "src/test/run-pass/logging-enabled-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-enabled-debug.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:--cfg ndebug\n+// compile-flags:-C debug-assertions=no\n // exec-env:RUST_LOG=logging-enabled-debug=debug\n \n #[macro_use]"}, {"sha": "82a155b117301980bb74b123fa524a4cc74c37e7", "filename": "src/test/run-pass/logging-separate-lines.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb487b503d87f04448fc5e6f75038ca98b8670e/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-separate-lines.rs?ref=efb487b503d87f04448fc5e6f75038ca98b8670e", "patch": "@@ -10,6 +10,7 @@\n \n // ignore-windows\n // exec-env:RUST_LOG=debug\n+// compile-flags:-C debug-assertions=y\n \n #[macro_use]\n extern crate log;"}]}