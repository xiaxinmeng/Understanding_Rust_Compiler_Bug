{"sha": "13e77934e52a4d17f765412df391fadab8a839a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZTc3OTM0ZTUyYTRkMTdmNzY1NDEyZGYzOTFmYWRhYjhhODM5YTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-07T08:35:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "create `InfcxTypeOp` that only depend on an `infcx`\n\nWe want any add'l context required to be passed through the struct\nitself.", "tree": {"sha": "4496eaab4392f7317533735debd236ea555ab161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4496eaab4392f7317533735debd236ea555ab161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13e77934e52a4d17f765412df391fadab8a839a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13e77934e52a4d17f765412df391fadab8a839a2", "html_url": "https://github.com/rust-lang/rust/commit/13e77934e52a4d17f765412df391fadab8a839a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13e77934e52a4d17f765412df391fadab8a839a2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846cc263cf4aee40064598c8a9c1d26c50daa7c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/846cc263cf4aee40064598c8a9c1d26c50daa7c2", "html_url": "https://github.com/rust-lang/rust/commit/846cc263cf4aee40064598c8a9c1d26c50daa7c2"}], "stats": {"total": 117, "additions": 69, "deletions": 48}, "files": [{"sha": "739f1eeb05f9172b7b423ab0173087a3b763c1ca", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13e77934e52a4d17f765412df391fadab8a839a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e77934e52a4d17f765412df391fadab8a839a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=13e77934e52a4d17f765412df391fadab8a839a2", "patch": "@@ -821,18 +821,20 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         sup: Ty<'tcx>,\n         locations: Locations,\n     ) -> UnitResult<'tcx> {\n+        let param_env = self.param_env;\n         self.fully_perform_op(\n             locations,\n             || format!(\"sub_types({:?} <: {:?})\", sub, sup),\n-            type_op::Subtype::new(sub, sup),\n+            type_op::Subtype::new(param_env, sub, sup),\n         )\n     }\n \n     fn eq_types(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, locations: Locations) -> UnitResult<'tcx> {\n+        let param_env = self.param_env;\n         self.fully_perform_op(\n             locations,\n             || format!(\"eq_types({:?} = {:?})\", a, b),\n-            type_op::Eq::new(b, a),\n+            type_op::Eq::new(param_env, b, a),\n         )\n     }\n \n@@ -1648,11 +1650,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         T: fmt::Debug + TypeFoldable<'tcx>,\n     {\n         debug!(\"normalize(value={:?}, location={:?})\", value, location);\n+        let param_env = self.param_env;\n         let value1 = value.clone(); // FIXME move describe into type_op\n         self.fully_perform_op(\n             location.to_locations(),\n             || format!(\"normalize(value={:?})\", value1),\n-            type_op::Normalize::new(value),\n+            type_op::Normalize::new(param_env, value),\n         ).unwrap()\n     }\n }"}, {"sha": "b39ae0ed4ee7405d80ec0c0d4ef1c2442f55a456", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op.rs", "status": "modified", "additions": 63, "deletions": 45, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/13e77934e52a4d17f765412df391fadab8a839a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13e77934e52a4d17f765412df391fadab8a839a2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs?ref=13e77934e52a4d17f765412df391fadab8a839a2", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use borrow_check::nll::type_check::TypeChecker;\n-use rustc::infer::{InferOk, InferResult};\n-use rustc::traits::{Normalized, Obligation, ObligationCause, PredicateObligation};\n+use rustc::infer::{InferCtxt, InferOk, InferResult};\n use rustc::traits::query::NoSolution;\n-use rustc::ty::{ParamEnv, Predicate, Ty};\n+use rustc::traits::{Normalized, Obligation, ObligationCause, PredicateObligation};\n use rustc::ty::fold::TypeFoldable;\n+use rustc::ty::{ParamEnv, Predicate, Ty};\n use std::fmt;\n \n pub(super) trait TypeOp<'gcx, 'tcx>: Sized {\n@@ -58,18 +58,52 @@ where\n     }\n }\n \n+pub(super) trait InfcxTypeOp<'gcx, 'tcx>: Sized {\n+    type Output;\n+\n+    /// Micro-optimization: returns `Ok(x)` if we can trivially\n+    /// produce the output, else returns `Err(self)` back.\n+    fn trivial_noop(self) -> Result<Self::Output, Self>;\n+\n+    /// Produce a description of the operation for the debug logs.\n+    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output>;\n+}\n+\n+impl<'gcx, 'tcx, OP> TypeOp<'gcx, 'tcx> for OP\n+where\n+    OP: InfcxTypeOp<'gcx, 'tcx>,\n+{\n+    type Output = OP::Output;\n+\n+    fn trivial_noop(self) -> Result<Self::Output, Self> {\n+        InfcxTypeOp::trivial_noop(self)\n+    }\n+\n+    fn perform(\n+        self,\n+        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n+    ) -> InferResult<'tcx, OP::Output> {\n+        InfcxTypeOp::perform(self, type_checker.infcx)\n+    }\n+}\n+\n pub(super) struct Subtype<'tcx> {\n+    param_env: ParamEnv<'tcx>,\n     sub: Ty<'tcx>,\n     sup: Ty<'tcx>,\n }\n \n impl<'tcx> Subtype<'tcx> {\n-    pub(super) fn new(sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n-        Self { sub, sup }\n+    pub(super) fn new(param_env: ParamEnv<'tcx>, sub: Ty<'tcx>, sup: Ty<'tcx>) -> Self {\n+        Self {\n+            param_env,\n+            sub,\n+            sup,\n+        }\n     }\n }\n \n-impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n+impl<'gcx, 'tcx> InfcxTypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     type Output = ();\n \n     fn trivial_noop(self) -> Result<Self::Output, Self> {\n@@ -80,29 +114,26 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n         }\n     }\n \n-    fn perform(\n-        self,\n-        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    ) -> InferResult<'tcx, Self::Output> {\n-        type_checker\n-            .infcx\n-            .at(&ObligationCause::dummy(), type_checker.param_env)\n+    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n+        infcx\n+            .at(&ObligationCause::dummy(), self.param_env)\n             .sup(self.sup, self.sub)\n     }\n }\n \n pub(super) struct Eq<'tcx> {\n+    param_env: ParamEnv<'tcx>,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n }\n \n impl<'tcx> Eq<'tcx> {\n-    pub(super) fn new(a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n-        Self { a, b }\n+    pub(super) fn new(param_env: ParamEnv<'tcx>, a: Ty<'tcx>, b: Ty<'tcx>) -> Self {\n+        Self { param_env, a, b }\n     }\n }\n \n-impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Eq<'tcx> {\n+impl<'gcx, 'tcx> InfcxTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     type Output = ();\n \n     fn trivial_noop(self) -> Result<Self::Output, Self> {\n@@ -113,13 +144,9 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Eq<'tcx> {\n         }\n     }\n \n-    fn perform(\n-        self,\n-        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    ) -> InferResult<'tcx, Self::Output> {\n-        type_checker\n-            .infcx\n-            .at(&ObligationCause::dummy(), type_checker.param_env)\n+    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n+        infcx\n+            .at(&ObligationCause::dummy(), self.param_env)\n             .eq(self.a, self.b)\n     }\n }\n@@ -142,7 +169,7 @@ impl<'tcx> ProvePredicates<'tcx> {\n     }\n }\n \n-impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n+impl<'gcx, 'tcx> InfcxTypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n     type Output = ();\n \n     fn trivial_noop(self) -> Result<Self::Output, Self> {\n@@ -153,33 +180,29 @@ impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n         }\n     }\n \n-    fn perform(\n-        self,\n-        _type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    ) -> InferResult<'tcx, Self::Output> {\n+    fn perform(self, _infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n         Ok(InferOk {\n             value: (),\n             obligations: self.obligations,\n         })\n     }\n }\n \n-pub(super) struct Normalize<T> {\n-    value: T\n+pub(super) struct Normalize<'tcx, T> {\n+    param_env: ParamEnv<'tcx>,\n+    value: T,\n }\n \n-impl<'tcx, T> Normalize<T>\n+impl<'tcx, T> Normalize<'tcx, T>\n where\n     T: fmt::Debug + TypeFoldable<'tcx>,\n {\n-    pub(super) fn new(\n-        value: T\n-    ) -> Self {\n-        Self { value }\n+    pub(super) fn new(param_env: ParamEnv<'tcx>, value: T) -> Self {\n+        Self { param_env, value }\n     }\n }\n \n-impl<'gcx, 'tcx, T> TypeOp<'gcx, 'tcx> for Normalize<T>\n+impl<'gcx, 'tcx, T> InfcxTypeOp<'gcx, 'tcx> for Normalize<'tcx, T>\n where\n     T: fmt::Debug + TypeFoldable<'tcx>,\n {\n@@ -193,17 +216,12 @@ where\n         }\n     }\n \n-    fn perform(\n-        self,\n-        type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n-    ) -> InferResult<'tcx, Self::Output> {\n-        let Normalized { value, obligations } = type_checker\n-            .infcx\n-            .at(&ObligationCause::dummy(), type_checker.param_env)\n+    fn perform(self, infcx: &InferCtxt<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n+        let Normalized { value, obligations } = infcx\n+            .at(&ObligationCause::dummy(), self.param_env)\n             .normalize(&self.value)\n             .unwrap_or_else(|NoSolution| {\n-                span_bug!(\n-                    type_checker.last_span,\n+                bug!(\n                     \"normalization of `{:?}` failed\",\n                     self.value,\n                 );"}]}