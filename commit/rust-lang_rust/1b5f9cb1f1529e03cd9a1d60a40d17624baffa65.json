{"sha": "1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNWY5Y2IxZjE1MjllMDNjZDlhMWQ2MGE0MGQxNzYyNGJhZmZhNjU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-28T06:24:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-28T17:14:42Z"}, "message": "std: Add an option to disable ELF based TLS\n\nThis commit adds a ./configure option called `--disable-elf-tls` which disables\nELF based TLS (that which is communicated to LLVM) on platforms which already\nsupport it. OSX 10.6 does not support this form of TLS, and some users of Rust\nneed to target 10.6 and are unable to do so due to the usage of TLS. The\nstandard library will continue to use ELF based TLS on OSX by default (as the\nofficially supported platform is 10.7+), but this adds an option to compile the\nstandard library in a way that is compatible with 10.6.", "tree": {"sha": "62afaaf8265b17bfcefeadfb651f923b8368a98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62afaaf8265b17bfcefeadfb651f923b8368a98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "html_url": "https://github.com/rust-lang/rust/commit/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcc1d1bcb48122ae1c522b0f4a996188791f38a", "url": "https://api.github.com/repos/rust-lang/rust/commits/efcc1d1bcb48122ae1c522b0f4a996188791f38a", "html_url": "https://github.com/rust-lang/rust/commit/efcc1d1bcb48122ae1c522b0f4a996188791f38a"}], "stats": {"total": 107, "additions": 80, "deletions": 27}, "files": [{"sha": "fd3ebb2856c81c9ad16ccbaa7f4ae6c480f9b040", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/configure", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "patch": "@@ -593,6 +593,7 @@ valopt musl-root \"/usr/local\" \"MUSL root installation directory\"\n opt_nosave manage-submodules 1 \"let the build manage the git submodules\"\n opt_nosave clang 0 \"prefer clang to gcc for building the runtime\"\n opt_nosave jemalloc 1 \"build liballoc with jemalloc\"\n+opt elf-tls 1 \"elf thread local storage on platforms where supported\"\n \n valopt_nosave prefix \"/usr/local\" \"set installation prefix\"\n valopt_nosave local-rust-root \"/usr/local\" \"set prefix for local rust binary\""}, {"sha": "93be1e6ba6326a96989bed6ae81d5b8a9b83b132", "filename": "mk/crates.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "patch": "@@ -150,3 +150,7 @@ TOOL_INPUTS_$(1) := $$(call rwildcard,$$(dir $$(TOOL_SOURCE_$(1))),*.rs)\n endef\n \n $(foreach crate,$(TOOLS),$(eval $(call RUST_TOOL,$(crate))))\n+\n+ifdef CFG_DISABLE_ELF_TLS\n+RUSTFLAGS_std := --cfg no_elf_tls\n+endif"}, {"sha": "cdd7dff010837e6e1ab57ac579f7df6ec5cbc22c", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "patch": "@@ -99,37 +99,60 @@ pub struct LocalKey<T> {\n \n /// Declare a new thread local storage key of type `std::thread::LocalKey`.\n ///\n-/// See [LocalKey documentation](thread/struct.LocalKey.html) for more information.\n+/// See [LocalKey documentation](thread/struct.LocalKey.html) for more\n+/// information.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n+#[cfg(not(no_elf_tls))]\n macro_rules! thread_local {\n     (static $name:ident: $t:ty = $init:expr) => (\n-        static $name: ::std::thread::LocalKey<$t> = {\n-            #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n-                           not(target_arch = \"aarch64\")),\n-                       thread_local)]\n-            static __KEY: ::std::thread::__LocalKeyInner<$t> =\n-                ::std::thread::__LocalKeyInner::new();\n-            fn __init() -> $t { $init }\n-            fn __getit() -> &'static ::std::thread::__LocalKeyInner<$t> { &__KEY }\n-            ::std::thread::LocalKey::new(__getit, __init)\n-        };\n+        static $name: ::std::thread::LocalKey<$t> =\n+            __thread_local_inner!($t, $init,\n+                #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n+                               not(target_arch = \"aarch64\")),\n+                           thread_local)]);\n     );\n     (pub static $name:ident: $t:ty = $init:expr) => (\n-        pub static $name: ::std::thread::LocalKey<$t> = {\n-            #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n-                           not(target_arch = \"aarch64\")),\n-                       thread_local)]\n-            static __KEY: ::std::thread::__LocalKeyInner<$t> =\n-                ::std::thread::__LocalKeyInner::new();\n-            fn __init() -> $t { $init }\n-            fn __getit() -> &'static ::std::thread::__LocalKeyInner<$t> { &__KEY }\n-            ::std::thread::LocalKey::new(__getit, __init)\n-        };\n+        pub static $name: ::std::thread::LocalKey<$t> =\n+            __thread_local_inner!($t, $init,\n+                #[cfg_attr(all(any(target_os = \"macos\", target_os = \"linux\"),\n+                               not(target_arch = \"aarch64\")),\n+                           thread_local)]);\n     );\n }\n \n+#[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n+#[cfg(no_elf_tls)]\n+macro_rules! thread_local {\n+    (static $name:ident: $t:ty = $init:expr) => (\n+        static $name: ::std::thread::LocalKey<$t> =\n+            __thread_local_inner!($t, $init, #[]);\n+    );\n+    (pub static $name:ident: $t:ty = $init:expr) => (\n+        pub static $name: ::std::thread::LocalKey<$t> =\n+            __thread_local_inner!($t, $init, #[]);\n+    );\n+}\n+\n+#[doc(hidden)]\n+#[unstable(feature = \"thread_local_internals\",\n+           reason = \"should not be necessary\")]\n+#[macro_export]\n+#[allow_internal_unstable]\n+macro_rules! __thread_local_inner {\n+    ($t:ty, $init:expr, #[$($attr:meta),*]) => {{\n+        $(#[$attr])*\n+        static __KEY: ::std::thread::__LocalKeyInner<$t> =\n+            ::std::thread::__LocalKeyInner::new();\n+        fn __init() -> $t { $init }\n+        fn __getit() -> &'static ::std::thread::__LocalKeyInner<$t> { &__KEY }\n+        ::std::thread::LocalKey::new(__getit, __init)\n+    }}\n+}\n+\n /// Indicator of the state of a thread local storage key.\n #[unstable(feature = \"std_misc\",\n            reason = \"state querying was recently added\")]\n@@ -163,7 +186,10 @@ pub enum LocalKeyState {\n \n impl<T: 'static> LocalKey<T> {\n     #[doc(hidden)]\n-    pub const fn new(inner: fn() -> &'static __KeyInner<T>, init: fn() -> T) -> LocalKey<T> {\n+    #[unstable(feature = \"thread_local_internals\",\n+               reason = \"recently added to create a key\")]\n+    pub const fn new(inner: fn() -> &'static __KeyInner<T>,\n+                     init: fn() -> T) -> LocalKey<T> {\n         LocalKey {\n             inner: inner,\n             init: init\n@@ -240,7 +266,9 @@ impl<T: 'static> LocalKey<T> {\n     }\n }\n \n-#[cfg(all(any(target_os = \"macos\", target_os = \"linux\"), not(target_arch = \"aarch64\")))]\n+#[cfg(all(any(target_os = \"macos\", target_os = \"linux\"),\n+          not(target_arch = \"aarch64\"),\n+          not(no_elf_tls)))]\n #[doc(hidden)]\n mod imp {\n     use prelude::v1::*;\n@@ -371,7 +399,9 @@ mod imp {\n     }\n }\n \n-#[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")), target_arch = \"aarch64\"))]\n+#[cfg(any(not(any(target_os = \"macos\", target_os = \"linux\")),\n+          target_arch = \"aarch64\",\n+          no_elf_tls))]\n #[doc(hidden)]\n mod imp {\n     use prelude::v1::*;"}, {"sha": "f0a4c318d91272de5655ea84ea993cb31aa1ec20", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5f9cb1f1529e03cd9a1d60a40d17624baffa65/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=1b5f9cb1f1529e03cd9a1d60a40d17624baffa65", "patch": "@@ -60,9 +60,11 @@ pub struct ScopedKey<T> { inner: imp::KeyInner<T> }\n /// This macro declares a `static` item on which methods are used to get and\n /// set the value stored within.\n ///\n-/// See [ScopedKey documentation](thread/struct.ScopedKey.html) for more information.\n+/// See [ScopedKey documentation](thread/struct.ScopedKey.html) for more\n+/// information.\n #[macro_export]\n #[allow_internal_unstable]\n+#[cfg(not(no_elf_tls))]\n macro_rules! scoped_thread_local {\n     (static $name:ident: $t:ty) => (\n         #[cfg_attr(not(any(windows,\n@@ -86,6 +88,20 @@ macro_rules! scoped_thread_local {\n     );\n }\n \n+#[macro_export]\n+#[allow_internal_unstable]\n+#[cfg(no_elf_tls)]\n+macro_rules! scoped_thread_local {\n+    (static $name:ident: $t:ty) => (\n+        static $name: ::std::thread::ScopedKey<$t> =\n+            ::std::thread::ScopedKey::new();\n+    );\n+    (pub static $name:ident: $t:ty) => (\n+        pub static $name: ::std::thread::ScopedKey<$t> =\n+            ::std::thread::ScopedKey::new();\n+    );\n+}\n+\n #[unstable(feature = \"scoped_tls\",\n            reason = \"scoped TLS has yet to have wide enough use to fully consider \\\n                      stabilizing its interface\")]\n@@ -187,7 +203,8 @@ impl<T> ScopedKey<T> {\n               target_os = \"android\",\n               target_os = \"ios\",\n               target_os = \"openbsd\",\n-              target_arch = \"aarch64\")))]\n+              target_arch = \"aarch64\",\n+              no_elf_tls)))]\n mod imp {\n     use std::cell::Cell;\n \n@@ -208,7 +225,8 @@ mod imp {\n           target_os = \"android\",\n           target_os = \"ios\",\n           target_os = \"openbsd\",\n-          target_arch = \"aarch64\"))]\n+          target_arch = \"aarch64\",\n+          no_elf_tls))]\n mod imp {\n     use prelude::v1::*;\n "}]}