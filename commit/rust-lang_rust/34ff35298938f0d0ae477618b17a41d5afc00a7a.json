{"sha": "34ff35298938f0d0ae477618b17a41d5afc00a7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ZmYzNTI5ODkzOGYwZDBhZTQ3NzYxOGIxN2E0MWQ1YWZjMDBhN2E=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-07-21T18:56:21Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2020-10-05T13:01:42Z"}, "message": "don't refer to async as 'generators'\n\nand give return of async fn a better span", "tree": {"sha": "85e85c741a158efd482d794d4c62c7d24c253221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85e85c741a158efd482d794d4c62c7d24c253221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34ff35298938f0d0ae477618b17a41d5afc00a7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34ff35298938f0d0ae477618b17a41d5afc00a7a", "html_url": "https://github.com/rust-lang/rust/commit/34ff35298938f0d0ae477618b17a41d5afc00a7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34ff35298938f0d0ae477618b17a41d5afc00a7a/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62bfcfd8a3b1603e2b5f5e2c011aa0f35f117af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/62bfcfd8a3b1603e2b5f5e2c011aa0f35f117af1", "html_url": "https://github.com/rust-lang/rust/commit/62bfcfd8a3b1603e2b5f5e2c011aa0f35f117af1"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "bf51245156833daf72630f19271729147f5d5013", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/34ff35298938f0d0ae477618b17a41d5afc00a7a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff35298938f0d0ae477618b17a41d5afc00a7a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=34ff35298938f0d0ae477618b17a41d5afc00a7a", "patch": "@@ -657,15 +657,33 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n \n         let (return_span, mir_description) = match tcx.hir().get(self.mir_hir_id()) {\n             hir::Node::Expr(hir::Expr {\n-                kind: hir::ExprKind::Closure(_, return_ty, _, span, gen_move),\n+                kind: hir::ExprKind::Closure(_, return_ty, body_id, span, _),\n                 ..\n-            }) => (\n-                match return_ty.output {\n+            }) => {\n+                let mut span = match return_ty.output {\n                     hir::FnRetTy::DefaultReturn(_) => tcx.sess.source_map().end_point(*span),\n                     hir::FnRetTy::Return(_) => return_ty.output.span(),\n-                },\n-                if gen_move.is_some() { \" of generator\" } else { \" of closure\" },\n-            ),\n+                };\n+                let mir_description = match tcx.hir().body(*body_id).generator_kind {\n+                    Some(hir::GeneratorKind::Async(gen)) => match gen {\n+                        hir::AsyncGeneratorKind::Block => \" of async block\",\n+                        hir::AsyncGeneratorKind::Closure => \" of async closure\",\n+                        hir::AsyncGeneratorKind::Fn => {\n+                            span = tcx\n+                                .hir()\n+                                .get(tcx.hir().get_parent_item(mir_hir_id))\n+                                .fn_decl()\n+                                .expect(\"generator lowered from async fn should be in fn\")\n+                                .output\n+                                .span();\n+                            \" of async function\"\n+                        }\n+                    },\n+                    Some(hir::GeneratorKind::Gen) => \" of generator\",\n+                    None => \" of closure\",\n+                };\n+                (span, mir_description)\n+            }\n             hir::Node::ImplItem(hir::ImplItem {\n                 kind: hir::ImplItemKind::Fn(method_sig, _),\n                 .."}, {"sha": "f8e116333592fff9e019a267ba9dd079abfc622f", "filename": "src/test/ui/async-await/issue-74072-lifetime-name-annotations.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/34ff35298938f0d0ae477618b17a41d5afc00a7a/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34ff35298938f0d0ae477618b17a41d5afc00a7a/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.rs?ref=34ff35298938f0d0ae477618b17a41d5afc00a7a", "patch": "@@ -0,0 +1,29 @@\n+// edition:2018\n+#![feature(async_closure)]\n+use std::future::Future;\n+\n+// test the quality of annotations giving lifetimes names (`'1`) when async constructs are involved\n+\n+pub async fn async_fn(x: &mut i32) -> &i32 {\n+    let y = &*x;\n+    *x += 1; //~ ERROR cannot assign to `*x` because it is borrowed\n+    y\n+}\n+\n+pub fn async_closure(x: &mut i32) -> impl Future<Output=&i32> {\n+    (async move || {\n+        let y = &*x;\n+        *x += 1; //~ ERROR cannot assign to `*x` because it is borrowed\n+        y\n+    })()\n+}\n+\n+pub fn async_block(x: &mut i32) -> impl Future<Output=&i32> {\n+    async move {\n+        let y = &*x;\n+        *x += 1; //~ ERROR cannot assign to `*x` because it is borrowed\n+        y\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "997e36fe22cfe9702314b38be4d80f36c63fc12e", "filename": "src/test/ui/async-await/issue-74072-lifetime-name-annotations.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/34ff35298938f0d0ae477618b17a41d5afc00a7a/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/34ff35298938f0d0ae477618b17a41d5afc00a7a/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74072-lifetime-name-annotations.stderr?ref=34ff35298938f0d0ae477618b17a41d5afc00a7a", "patch": "@@ -0,0 +1,39 @@\n+error[E0506]: cannot assign to `*x` because it is borrowed\n+  --> $DIR/issue-74072-lifetime-name-annotations.rs:9:5\n+   |\n+LL | pub async fn async_fn(x: &mut i32) -> &i32 {\n+   |                                       ---- return type of async function is &'1 i32\n+LL |     let y = &*x;\n+   |             --- borrow of `*x` occurs here\n+LL |     *x += 1;\n+   |     ^^^^^^^ assignment to borrowed `*x` occurs here\n+LL |     y\n+   |     - returning this value requires that `*x` is borrowed for `'1`\n+\n+error[E0506]: cannot assign to `*x` because it is borrowed\n+  --> $DIR/issue-74072-lifetime-name-annotations.rs:16:9\n+   |\n+LL |         let y = &*x;\n+   |                 --- borrow of `*x` occurs here\n+LL |         *x += 1;\n+   |         ^^^^^^^ assignment to borrowed `*x` occurs here\n+LL |         y\n+   |         - returning this value requires that `*x` is borrowed for `'1`\n+LL |     })()\n+   |     - return type of async closure is &'1 i32\n+\n+error[E0506]: cannot assign to `*x` because it is borrowed\n+  --> $DIR/issue-74072-lifetime-name-annotations.rs:24:9\n+   |\n+LL |         let y = &*x;\n+   |                 --- borrow of `*x` occurs here\n+LL |         *x += 1;\n+   |         ^^^^^^^ assignment to borrowed `*x` occurs here\n+LL |         y\n+   |         - returning this value requires that `*x` is borrowed for `'1`\n+LL |     }\n+   |     - return type of async block is &'1 i32\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0506`."}]}