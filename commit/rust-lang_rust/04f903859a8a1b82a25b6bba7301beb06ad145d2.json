{"sha": "04f903859a8a1b82a25b6bba7301beb06ad145d2", "node_id": "C_kwDOAAsO6NoAKDA0ZjkwMzg1OWE4YTFiODJhMjViNmJiYTczMDFiZWIwNmFkMTQ1ZDI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-18T06:41:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-18T06:41:14Z"}, "message": "Rollup merge of #95979 - lcnr:coherence-docs, r=compiler-errors\n\nupdate coherence docs, fix generator + opaque type ICE\n\nthe world is confusing, this makes it slightly less so", "tree": {"sha": "5880103c94f39d02c037f452e0973fddbaf7f0bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5880103c94f39d02c037f452e0973fddbaf7f0bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f903859a8a1b82a25b6bba7301beb06ad145d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJihJULCRBK7hj4Ov3rIwAAgV4IAGyaY9qKb+SGFdl1pbtnjFyg\n287fngzqOsaU/GrdcE6+IPURz3D6qZ3AKQdW8UOowCE7B+9LsGOImlEzimjz30ma\nxefZVIIxr4c5vNHwHTOyW2lB06cqrrl8pgQudkGIE3sO7gpC7hDaBRWI4UA5SqoV\nU+zUP66RQrxw29LMgOFLUjQyJcV2ZqlTyPhNxoxeR/2djmhTJCWWHmsw2+JQpEg3\nTNPwSYqnDo1TA5G2+J/A4WUPg2AZA0zwmWzN1RPwGtfl3scxN7cNDISO+icNXwUF\nMeXRMGPvXevsbS/AUCkwkYlyR/sypj4hHrbEE1BQgXCyji22ZadXUJr5l7POCUo=\n=bMxo\n-----END PGP SIGNATURE-----\n", "payload": "tree 5880103c94f39d02c037f452e0973fddbaf7f0bb\nparent 64c58a1a4ab6ba68db6d87a6a1f813679875110e\nparent 58781edc5459d9835b80d819d0469a23bdfc0026\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1652856074 +0200\ncommitter GitHub <noreply@github.com> 1652856074 +0200\n\nRollup merge of #95979 - lcnr:coherence-docs, r=compiler-errors\n\nupdate coherence docs, fix generator + opaque type ICE\n\nthe world is confusing, this makes it slightly less so\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f903859a8a1b82a25b6bba7301beb06ad145d2", "html_url": "https://github.com/rust-lang/rust/commit/04f903859a8a1b82a25b6bba7301beb06ad145d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f903859a8a1b82a25b6bba7301beb06ad145d2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64c58a1a4ab6ba68db6d87a6a1f813679875110e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64c58a1a4ab6ba68db6d87a6a1f813679875110e", "html_url": "https://github.com/rust-lang/rust/commit/64c58a1a4ab6ba68db6d87a6a1f813679875110e"}, {"sha": "58781edc5459d9835b80d819d0469a23bdfc0026", "url": "https://api.github.com/repos/rust-lang/rust/commits/58781edc5459d9835b80d819d0469a23bdfc0026", "html_url": "https://github.com/rust-lang/rust/commit/58781edc5459d9835b80d819d0469a23bdfc0026"}], "stats": {"total": 142, "additions": 120, "deletions": 22}, "files": [{"sha": "4d30c0e35e4726d42ba46517da1ff58350a2d41d", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04f903859a8a1b82a25b6bba7301beb06ad145d2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f903859a8a1b82a25b6bba7301beb06ad145d2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=04f903859a8a1b82a25b6bba7301beb06ad145d2", "patch": "@@ -61,6 +61,9 @@ pub enum Reveal {\n     ///     let x: <() as Assoc>::Output = true;\n     /// }\n     /// ```\n+    ///\n+    /// We also do not reveal the hidden type of opaque types during\n+    /// type-checking.\n     UserFacing,\n \n     /// At codegen time, all monomorphic projections will succeed."}, {"sha": "e56173b2dc50f9013e14b1192d1f4ebcbc5c2137", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/04f903859a8a1b82a25b6bba7301beb06ad145d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f903859a8a1b82a25b6bba7301beb06ad145d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=04f903859a8a1b82a25b6bba7301beb06ad145d2", "patch": "@@ -645,7 +645,7 @@ fn orphan_check_trait_ref<'tcx>(\n                 .substs\n                 .types()\n                 .flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n-                .find(|ty| ty_is_local_constructor(*ty, in_crate));\n+                .find(|&ty| ty_is_local_constructor(tcx, ty, in_crate));\n \n             debug!(\"orphan_check_trait_ref: uncovered ty local_type: `{:?}`\", local_type);\n \n@@ -677,7 +677,7 @@ fn contained_non_local_types<'tcx>(\n     ty: Ty<'tcx>,\n     in_crate: InCrate,\n ) -> Vec<Ty<'tcx>> {\n-    if ty_is_local_constructor(ty, in_crate) {\n+    if ty_is_local_constructor(tcx, ty, in_crate) {\n         Vec::new()\n     } else {\n         match fundamental_ty_inner_tys(tcx, ty) {\n@@ -730,7 +730,7 @@ fn def_id_is_local(def_id: DefId, in_crate: InCrate) -> bool {\n     }\n }\n \n-fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n+fn ty_is_local_constructor(tcx: TyCtxt<'_>, ty: Ty<'_>, in_crate: InCrate) -> bool {\n     debug!(\"ty_is_local_constructor({:?})\", ty);\n \n     match *ty.kind() {\n@@ -789,11 +789,6 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n             false\n         }\n \n-        ty::Closure(..) => {\n-            // Similar to the `Opaque` case (#83613).\n-            false\n-        }\n-\n         ty::Dynamic(ref tt, ..) => {\n             if let Some(principal) = tt.principal() {\n                 def_id_is_local(principal.def_id(), in_crate)\n@@ -804,8 +799,20 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n \n         ty::Error(_) => true,\n \n-        ty::Generator(..) | ty::GeneratorWitness(..) => {\n-            bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty)\n+        // These variants should never appear during coherence checking because they\n+        // cannot be named directly.\n+        //\n+        // They could be indirectly used through an opaque type. While using opaque types\n+        // in impls causes an error, this path can still be hit afterwards.\n+        //\n+        // See `test/ui/coherence/coherence-with-closure.rs` for an example where this\n+        // could happens.\n+        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n+            tcx.sess.delay_span_bug(\n+                DUMMY_SP,\n+                format!(\"ty_is_local invoked on closure or generator: {:?}\", ty),\n+            );\n+            true\n         }\n     }\n }"}, {"sha": "57ded504b3c422527e03faea09fe9d52d7d713a2", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/04f903859a8a1b82a25b6bba7301beb06ad145d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f903859a8a1b82a25b6bba7301beb06ad145d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=04f903859a8a1b82a25b6bba7301beb06ad145d2", "patch": "@@ -103,22 +103,31 @@ pub struct SelectionContext<'cx, 'tcx> {\n     /// require themselves.\n     freshener: TypeFreshener<'cx, 'tcx>,\n \n-    /// If `true`, indicates that the evaluation should be conservative\n-    /// and consider the possibility of types outside this crate.\n+    /// During coherence we have to assume that other crates may add\n+    /// additional impls which we currently don't know about.\n+    ///\n+    /// To deal with this evaluation should be conservative\n+    /// and consider the possibility of impls from outside this crate.\n     /// This comes up primarily when resolving ambiguity. Imagine\n     /// there is some trait reference `$0: Bar` where `$0` is an\n     /// inference variable. If `intercrate` is true, then we can never\n     /// say for sure that this reference is not implemented, even if\n     /// there are *no impls at all for `Bar`*, because `$0` could be\n     /// bound to some type that in a downstream crate that implements\n-    /// `Bar`. This is the suitable mode for coherence. Elsewhere,\n-    /// though, we set this to false, because we are only interested\n-    /// in types that the user could actually have written --- in\n-    /// other words, we consider `$0: Bar` to be unimplemented if\n+    /// `Bar`.\n+    ///\n+    /// Outside of coherence we set this to false because we are only\n+    /// interested in types that the user could actually have written.\n+    /// In other words, we consider `$0: Bar` to be unimplemented if\n     /// there is no type that the user could *actually name* that\n     /// would satisfy it. This avoids crippling inference, basically.\n     intercrate: bool,\n-\n+    /// If `intercrate` is set, we remember predicates which were\n+    /// considered ambiguous because of impls potentially added in other crates.\n+    /// This is used in coherence to give improved diagnostics.\n+    /// We don't do his until we detect a coherence error because it can\n+    /// lead to false overflow results (#47139) and because always\n+    /// computing it may negatively impact performance.\n     intercrate_ambiguity_causes: Option<Vec<IntercrateAmbiguityCause>>,\n \n     /// The mode that trait queries run in, which informs our error handling\n@@ -240,11 +249,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    /// Enables tracking of intercrate ambiguity causes. These are\n-    /// used in coherence to give improved diagnostics. We don't do\n-    /// this until we detect a coherence error because it can lead to\n-    /// false overflow results (#47139) and because it costs\n-    /// computation time.\n+    /// Enables tracking of intercrate ambiguity causes. See\n+    /// the documentation of [`Self::intercrate_ambiguity_causes`] for more.\n     pub fn enable_tracking_intercrate_ambiguity_causes(&mut self) {\n         assert!(self.intercrate);\n         assert!(self.intercrate_ambiguity_causes.is_none());"}, {"sha": "6e3281d8508abfae6215f65a53f919205ce227b3", "filename": "src/test/ui/coherence/coherence-with-closure.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.rs?ref=04f903859a8a1b82a25b6bba7301beb06ad145d2", "patch": "@@ -0,0 +1,15 @@\n+// Test that encountering closures during coherence does not cause issues.\n+#![feature(type_alias_impl_trait)]\n+type OpaqueClosure = impl Sized;\n+fn defining_use() -> OpaqueClosure {\n+    || ()\n+}\n+\n+struct Wrapper<T>(T);\n+trait Trait {}\n+impl Trait for Wrapper<OpaqueClosure> {}\n+//~^ ERROR cannot implement trait on type alias impl trait\n+impl<T: Sync> Trait for Wrapper<T> {}\n+//~^ ERROR conflicting implementations of trait `Trait` for type `Wrapper<OpaqueClosure>`\n+\n+fn main() {}"}, {"sha": "20b986cee6913488c4b0fd7c206a1a37741809a9", "filename": "src/test/ui/coherence/coherence-with-closure.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr?ref=04f903859a8a1b82a25b6bba7301beb06ad145d2", "patch": "@@ -0,0 +1,24 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/coherence-with-closure.rs:10:24\n+   |\n+LL | impl Trait for Wrapper<OpaqueClosure> {}\n+   |                        ^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/coherence-with-closure.rs:3:22\n+   |\n+LL | type OpaqueClosure = impl Sized;\n+   |                      ^^^^^^^^^^\n+\n+error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueClosure>`\n+  --> $DIR/coherence-with-closure.rs:12:1\n+   |\n+LL | impl Trait for Wrapper<OpaqueClosure> {}\n+   | ------------------------------------- first implementation here\n+LL |\n+LL | impl<T: Sync> Trait for Wrapper<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueClosure>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "d34c391db9fb0bcb1f7306fd793a05b01f1a3541", "filename": "src/test/ui/coherence/coherence-with-generator.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.rs?ref=04f903859a8a1b82a25b6bba7301beb06ad145d2", "patch": "@@ -0,0 +1,19 @@\n+// Test that encountering closures during coherence does not cause issues.\n+#![feature(type_alias_impl_trait, generators)]\n+type OpaqueGenerator = impl Sized;\n+fn defining_use() -> OpaqueGenerator {\n+    || {\n+        for i in 0..10 {\n+            yield i;\n+        }\n+    }\n+}\n+\n+struct Wrapper<T>(T);\n+trait Trait {}\n+impl Trait for Wrapper<OpaqueGenerator> {}\n+//~^ ERROR cannot implement trait on type alias impl trait\n+impl<T: Sync> Trait for Wrapper<T> {}\n+//~^ ERROR conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n+\n+fn main() {}"}, {"sha": "249ad3cb9ec7fe6dce2b1e5c640b0ba030d22f0f", "filename": "src/test/ui/coherence/coherence-with-generator.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04f903859a8a1b82a25b6bba7301beb06ad145d2/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr?ref=04f903859a8a1b82a25b6bba7301beb06ad145d2", "patch": "@@ -0,0 +1,24 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/coherence-with-generator.rs:14:24\n+   |\n+LL | impl Trait for Wrapper<OpaqueGenerator> {}\n+   |                        ^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/coherence-with-generator.rs:3:24\n+   |\n+LL | type OpaqueGenerator = impl Sized;\n+   |                        ^^^^^^^^^^\n+\n+error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n+  --> $DIR/coherence-with-generator.rs:16:1\n+   |\n+LL | impl Trait for Wrapper<OpaqueGenerator> {}\n+   | --------------------------------------- first implementation here\n+LL |\n+LL | impl<T: Sync> Trait for Wrapper<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueGenerator>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0119`."}]}