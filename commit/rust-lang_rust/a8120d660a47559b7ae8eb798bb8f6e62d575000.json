{"sha": "a8120d660a47559b7ae8eb798bb8f6e62d575000", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTIwZDY2MGE0NzU1OWI3YWU4ZWI3OThiYjhmNmU2MmQ1NzUwMDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-20T18:45:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-20T18:45:25Z"}, "message": "Tweak incorrect escaped char diagnostic", "tree": {"sha": "879c1f9370f928f5e954aba80318ee86fcd4e48d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/879c1f9370f928f5e954aba80318ee86fcd4e48d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8120d660a47559b7ae8eb798bb8f6e62d575000", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8120d660a47559b7ae8eb798bb8f6e62d575000", "html_url": "https://github.com/rust-lang/rust/commit/a8120d660a47559b7ae8eb798bb8f6e62d575000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8120d660a47559b7ae8eb798bb8f6e62d575000/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf074a1e655ac07d04d045667278fa1a9970b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf074a1e655ac07d04d045667278fa1a9970b93", "html_url": "https://github.com/rust-lang/rust/commit/7cf074a1e655ac07d04d045667278fa1a9970b93"}], "stats": {"total": 123, "additions": 51, "deletions": 72}, "files": [{"sha": "cd4944deadb109c9b14558fc5520f419e32deff7", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -968,9 +968,10 @@ impl<'a> StringReader<'a> {\n                                 } else {\n                                     let span = self.mk_sp(start, self.pos);\n                                     let mut suggestion = \"\\\\u{\".to_owned();\n+                                    let msg = \"incorrect unicode escape sequence\";\n                                     let mut err = self.sess.span_diagnostic.struct_span_err(\n                                         span,\n-                                        \"incorrect unicode escape sequence\",\n+                                        msg,\n                                     );\n                                     let mut i = 0;\n                                     while let (Some(ch), true) = (self.ch, i < 6) {\n@@ -991,8 +992,8 @@ impl<'a> StringReader<'a> {\n                                             Applicability::MaybeIncorrect,\n                                         );\n                                     } else {\n-                                        err.span_help(\n-                                            span,\n+                                        err.span_label(span, msg);\n+                                        err.help(\n                                             \"format of unicode escape sequences is `\\\\u{...}`\",\n                                         );\n                                     }\n@@ -1018,25 +1019,24 @@ impl<'a> StringReader<'a> {\n                             }\n                             c => {\n                                 let pos = self.pos;\n-                                let mut err = self.struct_err_span_char(escaped_pos,\n-                                                                        pos,\n-                                                                        if ascii_only {\n-                                                                            \"unknown byte escape\"\n-                                                                        } else {\n-                                                                            \"unknown character \\\n-                                                                             escape\"\n-                                                                        },\n-                                                                        c);\n+                                let msg = if ascii_only {\n+                                    \"unknown byte escape\"\n+                                } else {\n+                                    \"unknown character escape\"\n+                                };\n+                                let mut err = self.struct_err_span_char(escaped_pos, pos, msg, c);\n+                                err.span_label(self.mk_sp(escaped_pos, pos), msg);\n                                 if e == '\\r' {\n-                                    err.span_help(self.mk_sp(escaped_pos, pos),\n-                                                  \"this is an isolated carriage return; consider \\\n-                                                   checking your editor and version control \\\n-                                                   settings\");\n+                                    err.help(\n+                                        \"this is an isolated carriage return; consider checking \\\n+                                         your editor and version control settings\",\n+                                    );\n                                 }\n                                 if (e == '{' || e == '}') && !ascii_only {\n-                                    err.span_help(self.mk_sp(escaped_pos, pos),\n-                                                  \"if used in a formatting string, curly braces \\\n-                                                   are escaped with `{{` and `}}`\");\n+                                    err.help(\n+                                        \"if used in a formatting string, curly braces are escaped \\\n+                                         with `{{` and `}}`\",\n+                                    );\n                                 }\n                                 err.emit();\n                                 false"}, {"sha": "48702cf3c4cba189e8a0ce224f45fd58d6e56276", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -4229,19 +4229,24 @@ impl<'a> Parser<'a> {\n     fn parse_pat_list(&mut self) -> PResult<'a, (Vec<P<Pat>>, Option<usize>, bool)> {\n         let mut fields = Vec::new();\n         let mut ddpos = None;\n+        let mut prev_dd_sp = None;\n         let mut trailing_comma = false;\n         loop {\n             if self.eat(&token::DotDot) {\n                 if ddpos.is_none() {\n                     ddpos = Some(fields.len());\n+                    prev_dd_sp = Some(self.prev_span);\n                 } else {\n                     // Emit a friendly error, ignore `..` and continue parsing\n-                    self.struct_span_err(\n+                    let mut err = self.struct_span_err(\n                         self.prev_span,\n                         \"`..` can only be used once per tuple or tuple struct pattern\",\n-                    )\n-                        .span_label(self.prev_span, \"can only be used once per pattern\")\n-                        .emit();\n+                    );\n+                    err.span_label(self.prev_span, \"can only be used once per pattern\");\n+                    if let Some(sp) = prev_dd_sp {\n+                        err.span_label(sp, \"previously present here\");\n+                    }\n+                    err.emit();\n                 }\n             } else if !self.check(&token::CloseDelim(token::Paren)) {\n                 fields.push(self.parse_pat(None)?);"}, {"sha": "4edeccfe47556db9a8316b8e94e342b9807e9491", "filename": "src/test/ui/parser/byte-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-literals.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -2,13 +2,13 @@ error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:6:21\n    |\n LL | static FOO: u8 = b'/f';\n-   |                     ^\n+   |                     ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-literals.rs:9:8\n    |\n LL |     b'/f';\n-   |        ^\n+   |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-literals.rs:10:10"}, {"sha": "45c1a94b519a302b378050ae13d8de4b7bbb6818", "filename": "src/test/ui/parser/byte-string-literals.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbyte-string-literals.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -2,13 +2,13 @@ error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:6:32\n    |\n LL | static FOO: &'static [u8] = b\"/f\";\n-   |                                ^\n+   |                                ^ unknown byte escape\n \n error: unknown byte escape: f\n   --> $DIR/byte-string-literals.rs:9:8\n    |\n LL |     b\"/f\";\n-   |        ^\n+   |        ^ unknown byte escape\n \n error: invalid character in numeric character escape: Z\n   --> $DIR/byte-string-literals.rs:10:10"}, {"sha": "669a6d26905d16b83cb5f32ce6644b9b5760121a", "filename": "src/test/ui/parser/issue-23620-invalid-escapes.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-23620-invalid-escapes.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -14,13 +14,9 @@ error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n    |\n LL |     let _ = b'/u';\n-   |               ^^\n-   |\n-help: format of unicode escape sequences is `/u{...}`\n-  --> $DIR/issue-23620-invalid-escapes.rs:10:15\n+   |               ^^ incorrect unicode escape sequence\n    |\n-LL |     let _ = b'/u';\n-   |               ^^\n+   = help: format of unicode escape sequences is `/u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:10:15\n@@ -80,13 +76,9 @@ error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n    |\n LL |     let _ = b\"/u{a4a4} /xf /u\";\n-   |                            ^^\n+   |                            ^^ incorrect unicode escape sequence\n    |\n-help: format of unicode escape sequences is `/u{...}`\n-  --> $DIR/issue-23620-invalid-escapes.rs:28:28\n-   |\n-LL |     let _ = b\"/u{a4a4} /xf /u\";\n-   |                            ^^\n+   = help: format of unicode escape sequences is `/u{...}`\n \n error: unicode escape sequences cannot be used as a byte or in a byte string\n   --> $DIR/issue-23620-invalid-escapes.rs:28:28\n@@ -110,13 +102,9 @@ error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:34:18\n    |\n LL |     let _ = \"/xf /u\";\n-   |                  ^^\n+   |                  ^^ incorrect unicode escape sequence\n    |\n-help: format of unicode escape sequences is `/u{...}`\n-  --> $DIR/issue-23620-invalid-escapes.rs:34:18\n-   |\n-LL |     let _ = \"/xf /u\";\n-   |                  ^^\n+   = help: format of unicode escape sequences is `/u{...}`\n \n error: incorrect unicode escape sequence\n   --> $DIR/issue-23620-invalid-escapes.rs:39:14"}, {"sha": "e6b71108086dfa26618b344dcff810e977b5614c", "filename": "src/test/ui/parser/lex-bad-char-literals-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-1.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -14,13 +14,13 @@ error: unknown character escape: /u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:11:7\n    |\n LL |     '/\u25cf'\n-   |       ^\n+   |       ^ unknown character escape\n \n error: unknown character escape: /u{25cf}\n   --> $DIR/lex-bad-char-literals-1.rs:15:7\n    |\n LL |     \"/\u25cf\"\n-   |       ^\n+   |       ^ unknown character escape\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b4d538bf6131206de4d60989e2beca301f91738d", "filename": "src/test/ui/parser/lex-bare-cr-string-literal-doc-comment.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bare-cr-string-literal-doc-comment.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -38,13 +38,9 @@ error: unknown character escape: /r\n   --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n    |\n LL |     let _s = \"foo/\rbar\";\n-   |                   ^\n+   |                   ^ unknown character escape\n    |\n-help: this is an isolated carriage return; consider checking your editor and version control settings\n-  --> $DIR/lex-bare-cr-string-literal-doc-comment.rs:27:19\n-   |\n-LL |     let _s = \"foo/\rbar\";\n-   |                   ^\n+   = help: this is an isolated carriage return; consider checking your editor and version control settings\n \n error: aborting due to 7 previous errors\n "}, {"sha": "c9f14bb90429b90e3c0b97cf456bf8aa8760c1b9", "filename": "src/test/ui/parser/pat-tuple-3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fpat-tuple-3.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -2,7 +2,9 @@ error: `..` can only be used once per tuple or tuple struct pattern\n   --> $DIR/pat-tuple-3.rs:3:19\n    |\n LL |         (.., pat, ..) => {}\n-   |                   ^^ can only be used once per pattern\n+   |          --       ^^ can only be used once per pattern\n+   |          |\n+   |          previously present here\n \n error: aborting due to previous error\n "}, {"sha": "f70f8ac8d7751def4f2f1d5487e5f7a5e8888122", "filename": "src/test/ui/parser/trailing-carriage-return-in-string.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-carriage-return-in-string.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -2,13 +2,9 @@ error: unknown character escape: /r\n   --> $DIR/trailing-carriage-return-in-string.rs:10:25\n    |\n LL |     let bad = \"This is /\r a test\";\n-   |                         ^\n+   |                         ^ unknown character escape\n    |\n-help: this is an isolated carriage return; consider checking your editor and version control settings\n-  --> $DIR/trailing-carriage-return-in-string.rs:10:25\n-   |\n-LL |     let bad = \"This is /\r a test\";\n-   |                         ^\n+   = help: this is an isolated carriage return; consider checking your editor and version control settings\n \n error: aborting due to previous error\n "}, {"sha": "346eba04c6500d671ce2bc3673c47ff6948f57bd", "filename": "src/test/ui/parser/wrong-escape-of-curly-braces.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a8120d660a47559b7ae8eb798bb8f6e62d575000/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwrong-escape-of-curly-braces.stderr?ref=a8120d660a47559b7ae8eb798bb8f6e62d575000", "patch": "@@ -2,25 +2,17 @@ error: unknown character escape: {\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n    |\n LL |     let bad = \"/{it is wrong/}\";\n-   |                 ^\n+   |                 ^ unknown character escape\n    |\n-help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n-  --> $DIR/wrong-escape-of-curly-braces.rs:3:17\n-   |\n-LL |     let bad = \"/{it is wrong/}\";\n-   |                 ^\n+   = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n error: unknown character escape: }\n   --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n    |\n LL |     let bad = \"/{it is wrong/}\";\n-   |                              ^\n+   |                              ^ unknown character escape\n    |\n-help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n-  --> $DIR/wrong-escape-of-curly-braces.rs:3:30\n-   |\n-LL |     let bad = \"/{it is wrong/}\";\n-   |                              ^\n+   = help: if used in a formatting string, curly braces are escaped with `{{` and `}}`\n \n error: aborting due to 2 previous errors\n "}]}