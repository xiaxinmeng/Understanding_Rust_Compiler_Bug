{"sha": "c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OGI0YzhmZGRlNzgxMmQ3YWY1YTA2MGExZTIyZmQ3ZTM3NzVkM2Y=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-06-13T15:03:31Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-06-13T15:03:31Z"}, "message": "Add error note when trying  fn as Fn trait", "tree": {"sha": "0a6ea958d39081dcfb46dc2982cb51ca484c07ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6ea958d39081dcfb46dc2982cb51ca484c07ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f", "html_url": "https://github.com/rust-lang/rust/commit/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "144206e6d8c1ab4ffdbaf6d7b0f5a4201c0f2da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/144206e6d8c1ab4ffdbaf6d7b0f5a4201c0f2da4", "html_url": "https://github.com/rust-lang/rust/commit/144206e6d8c1ab4ffdbaf6d7b0f5a4201c0f2da4"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "39530853318e313fbfc035bc7abda933bbb15a71", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f", "patch": "@@ -286,6 +286,20 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             .starts_with(\"std::convert::From<\");\n                         let is_unsize =\n                             { Some(trait_ref.def_id()) == self.tcx.lang_items().unsize_trait() };\n+                        let is_fn_trait = [\n+                            self.tcx.lang_items().fn_trait(),\n+                            self.tcx.lang_items().fn_mut_trait(),\n+                            self.tcx.lang_items().fn_once_trait(),\n+                        ]\n+                        .contains(&Some(trait_ref.def_id()));\n+                        let is_safe_target_feature_fn =\n+                            if let ty::FnDef(def_id, _) = trait_ref.skip_binder().self_ty().kind {\n+                                trait_ref.skip_binder().self_ty().fn_sig(self.tcx).unsafety()\n+                                    == hir::Unsafety::Normal\n+                                    && !self.tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+                            } else {\n+                                false\n+                            };\n                         let (message, note) = if is_try && is_from {\n                             (\n                                 Some(format!(\n@@ -427,6 +441,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             );\n                         }\n \n+                        if is_fn_trait && is_safe_target_feature_fn {\n+                            err.note(&format!(\n+                                \"`{}` has `#[target_feature]` and is unsafe to call\",\n+                                trait_ref.skip_binder().self_ty(),\n+                            ));\n+                        }\n+\n                         // Try to report a help message\n                         if !trait_ref.has_infer_types_or_consts()\n                             && self.predicate_can_apply(obligation.param_env, trait_ref)"}, {"sha": "5c838fd719cd9492eabdce4e54c6e93897eae0d7", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.rs?ref=c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f", "patch": "@@ -5,6 +5,9 @@\n #[target_feature(enable = \"avx\")]\n fn foo() {}\n \n+#[target_feature(enable = \"avx\")]\n+unsafe fn foo_unsafe() {}\n+\n fn call(f: impl Fn()) {\n     f()\n }\n@@ -21,4 +24,11 @@ fn main() {\n     call(foo); //~ ERROR expected a `std::ops::Fn<()>` closure, found `fn() {foo}`\n     call_mut(foo); //~ ERROR expected a `std::ops::FnMut<()>` closure, found `fn() {foo}`\n     call_once(foo); //~ ERROR expected a `std::ops::FnOnce<()>` closure, found `fn() {foo}`\n+\n+    call(foo_unsafe);\n+    //~^ ERROR expected a `std::ops::Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+    call_mut(foo_unsafe);\n+    //~^ ERROR expected a `std::ops::FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+    call_once(foo_unsafe);\n+    //~^ ERROR expected a `std::ops::FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n }"}, {"sha": "3ae85af76d3061d85cbff54eee0b7f440136d5a2", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 43, "deletions": 4, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=c98b4c8fdde7812d7af5a060a1e22fd7e3775d3f", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: expected a `std::ops::Fn<()>` closure, found `fn() {foo}`\n-  --> $DIR/fn-traits.rs:21:10\n+  --> $DIR/fn-traits.rs:24:10\n    |\n LL | fn call(f: impl Fn()) {\n    |                 ---- required by this bound in `call`\n@@ -9,9 +9,10 @@ LL |     call(foo);\n    |\n    = help: the trait `std::ops::Fn<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `fn() {foo}` has `#[target_feature]` and is unsafe to call\n \n error[E0277]: expected a `std::ops::FnMut<()>` closure, found `fn() {foo}`\n-  --> $DIR/fn-traits.rs:22:14\n+  --> $DIR/fn-traits.rs:25:14\n    |\n LL | fn call_mut(f: impl FnMut()) {\n    |                     ------- required by this bound in `call_mut`\n@@ -21,9 +22,10 @@ LL |     call_mut(foo);\n    |\n    = help: the trait `std::ops::FnMut<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `fn() {foo}` has `#[target_feature]` and is unsafe to call\n \n error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `fn() {foo}`\n-  --> $DIR/fn-traits.rs:23:15\n+  --> $DIR/fn-traits.rs:26:15\n    |\n LL | fn call_once(f: impl FnOnce()) {\n    |                      -------- required by this bound in `call_once`\n@@ -33,7 +35,44 @@ LL |     call_once(foo);\n    |\n    = help: the trait `std::ops::FnOnce<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }\n+   = note: `fn() {foo}` has `#[target_feature]` and is unsafe to call\n \n-error: aborting due to 3 previous errors\n+error[E0277]: expected a `std::ops::Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+  --> $DIR/fn-traits.rs:28:10\n+   |\n+LL | fn call(f: impl Fn()) {\n+   |                 ---- required by this bound in `call`\n+...\n+LL |     call(foo_unsafe);\n+   |          ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |\n+   = help: the trait `std::ops::Fn<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+\n+error[E0277]: expected a `std::ops::FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+  --> $DIR/fn-traits.rs:30:14\n+   |\n+LL | fn call_mut(f: impl FnMut()) {\n+   |                     ------- required by this bound in `call_mut`\n+...\n+LL |     call_mut(foo_unsafe);\n+   |              ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |\n+   = help: the trait `std::ops::FnMut<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+\n+error[E0277]: expected a `std::ops::FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+  --> $DIR/fn-traits.rs:32:15\n+   |\n+LL | fn call_once(f: impl FnOnce()) {\n+   |                      -------- required by this bound in `call_once`\n+...\n+LL |     call_once(foo_unsafe);\n+   |               ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |\n+   = help: the trait `std::ops::FnOnce<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n+   = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}