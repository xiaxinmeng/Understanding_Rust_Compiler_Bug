{"sha": "8ed11209d6f7ae0ca8ea21a1ffed902345a4217f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZDExMjA5ZDZmN2FlMGNhOGVhMjFhMWZmZWQ5MDIzNDVhNDIxN2Y=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-16T23:50:53Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:27Z"}, "message": "Minor cleanup to context", "tree": {"sha": "0a7e9a926d3c7b80572e8e9ee6348091bf83362f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a7e9a926d3c7b80572e8e9ee6348091bf83362f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f", "html_url": "https://github.com/rust-lang/rust/commit/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f6173af8cccda2154211a6de41c3eaa4bceaac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f6173af8cccda2154211a6de41c3eaa4bceaac", "html_url": "https://github.com/rust-lang/rust/commit/c4f6173af8cccda2154211a6de41c3eaa4bceaac"}], "stats": {"total": 50, "additions": 1, "deletions": 49}, "files": [{"sha": "0f1fe15a7ecb5116dce9cbcf0103f3e33bfc32a4", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed11209d6f7ae0ca8ea21a1ffed902345a4217f/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=8ed11209d6f7ae0ca8ea21a1ffed902345a4217f", "patch": "@@ -315,38 +315,6 @@ impl<'a, 'tcx> Iterator for CrateContextIterator<'a,'tcx> {\n     }\n }\n \n-/// The iterator produced by `CrateContext::maybe_iter`.\n-pub struct CrateContextMaybeIterator<'a, 'tcx: 'a> {\n-    shared: &'a SharedCrateContext<'a, 'tcx>,\n-    local_ccxs: &'a [LocalCrateContext<'tcx>],\n-    index: usize,\n-    single: bool,\n-    origin: usize,\n-}\n-\n-impl<'a, 'tcx> Iterator for CrateContextMaybeIterator<'a, 'tcx> {\n-    type Item = (CrateContext<'a, 'tcx>, bool);\n-\n-    fn next(&mut self) -> Option<(CrateContext<'a, 'tcx>, bool)> {\n-        if self.index >= self.local_ccxs.len() {\n-            return None;\n-        }\n-\n-        let index = self.index;\n-        self.index += 1;\n-        if self.single {\n-            self.index = self.local_ccxs.len();\n-        }\n-\n-        let ccx = CrateContext {\n-            shared: self.shared,\n-            index: index,\n-            local_ccxs: self.local_ccxs\n-        };\n-        Some((ccx, index == self.origin))\n-    }\n-}\n-\n pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n     let reloc_model_arg = match sess.opts.cg.relocation_model {\n         Some(ref s) => &s[..],\n@@ -702,26 +670,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         self.shared\n     }\n \n-    pub fn local(&self) -> &'b LocalCrateContext<'tcx> {\n+    fn local(&self) -> &'b LocalCrateContext<'tcx> {\n         &self.local_ccxs[self.index]\n     }\n \n-    /// Either iterate over only `self`, or iterate over all `CrateContext`s in\n-    /// the `SharedCrateContext`.  The iterator produces `(ccx, is_origin)`\n-    /// pairs, where `is_origin` is `true` if `ccx` is `self` and `false`\n-    /// otherwise.  This method is useful for avoiding code duplication in\n-    /// cases where it may or may not be necessary to translate code into every\n-    /// context.\n-    pub fn maybe_iter(&self, iter_all: bool) -> CrateContextMaybeIterator<'b, 'tcx> {\n-        CrateContextMaybeIterator {\n-            shared: self.shared,\n-            index: if iter_all { 0 } else { self.index },\n-            single: !iter_all,\n-            origin: self.index,\n-            local_ccxs: self.local_ccxs,\n-        }\n-    }\n-\n     pub fn tcx<'a>(&'a self) -> TyCtxt<'a, 'tcx, 'tcx> {\n         self.shared.tcx\n     }"}]}