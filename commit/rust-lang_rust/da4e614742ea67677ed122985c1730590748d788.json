{"sha": "da4e614742ea67677ed122985c1730590748d788", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNGU2MTQ3NDJlYTY3Njc3ZWQxMjI5ODVjMTczMDU5MDc0OGQ3ODg=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T20:02:24Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-06-14T20:03:42Z"}, "message": "Fix line lengths in terminfo", "tree": {"sha": "6254e188a5b610b2223646d61f4b81a133b8066f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6254e188a5b610b2223646d61f4b81a133b8066f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da4e614742ea67677ed122985c1730590748d788", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da4e614742ea67677ed122985c1730590748d788", "html_url": "https://github.com/rust-lang/rust/commit/da4e614742ea67677ed122985c1730590748d788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da4e614742ea67677ed122985c1730590748d788/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f31767df66b9468cea81a3aceb34633fad213d67", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31767df66b9468cea81a3aceb34633fad213d67", "html_url": "https://github.com/rust-lang/rust/commit/f31767df66b9468cea81a3aceb34633fad213d67"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "17d80ded47f81b09825d5aa95e8e538911e56709", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da4e614742ea67677ed122985c1730590748d788/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e614742ea67677ed122985c1730590748d788/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=da4e614742ea67677ed122985c1730590748d788", "patch": "@@ -105,7 +105,8 @@ impl Terminal {\n     }\n     pub fn reset(&self) {\n         if self.color_supported {\n-            let s = expand(*self.ti.strings.find_equiv(&(\"op\")).unwrap(), [], &mut Variables::new());\n+            let mut vars = Variables::new();\n+            let s = expand(*self.ti.strings.find_equiv(&(\"op\")).unwrap(), [], &mut vars);\n             if s.is_ok() {\n                 self.out.write(s.get());\n             } else {"}, {"sha": "c395b57219c2c8da77f7a3e25862f3d2044c9578", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da4e614742ea67677ed122985c1730590748d788/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e614742ea67677ed122985c1730590748d788/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=da4e614742ea67677ed122985c1730590748d788", "patch": "@@ -176,19 +176,22 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables)\n                     } else { return Err(~\"stack is empty\") },\n                     '=' => if stack.len() > 1 {\n                         match (stack.pop(), stack.pop()) {\n-                            (Number(y), Number(x)) => stack.push(Number(if x == y { 1 } else { 0 })),\n+                            (Number(y), Number(x)) => stack.push(Number(if x == y { 1 }\n+                                                                        else { 0 })),\n                             _ => return Err(~\"non-numbers on stack with =\")\n                         }\n                     } else { return Err(~\"stack is empty\") },\n                     '>' => if stack.len() > 1 {\n                         match (stack.pop(), stack.pop()) {\n-                            (Number(y), Number(x)) => stack.push(Number(if x > y { 1 } else { 0 })),\n+                            (Number(y), Number(x)) => stack.push(Number(if x > y { 1 }\n+                                                                        else { 0 })),\n                             _ => return Err(~\"non-numbers on stack with >\")\n                         }\n                     } else { return Err(~\"stack is empty\") },\n                     '<' => if stack.len() > 1 {\n                         match (stack.pop(), stack.pop()) {\n-                            (Number(y), Number(x)) => stack.push(Number(if x < y { 1 } else { 0 })),\n+                            (Number(y), Number(x)) => stack.push(Number(if x < y { 1 }\n+                                                                        else { 0 })),\n                             _ => return Err(~\"non-numbers on stack with <\")\n                         }\n                     } else { return Err(~\"stack is empty\") },\n@@ -353,12 +356,14 @@ mod test {\n     #[test]\n     fn test_basic_setabf() {\n         let s = bytes!(\"\\\\E[48;5;%p1%dm\");\n-        assert_eq!(expand(s, [Number(1)], &mut Variables::new()).unwrap(), bytes!(\"\\\\E[48;5;1m\").to_owned());\n+        assert_eq!(expand(s, [Number(1)], &mut Variables::new()).unwrap(),\n+                   bytes!(\"\\\\E[48;5;1m\").to_owned());\n     }\n \n     #[test]\n     fn test_multiple_int_constants() {\n-        assert_eq!(expand(bytes!(\"%{1}%{2}%d%d\"), [], &mut Variables::new()).unwrap(), bytes!(\"21\").to_owned());\n+        assert_eq!(expand(bytes!(\"%{1}%{2}%d%d\"), [], &mut Variables::new()).unwrap(),\n+                   bytes!(\"21\").to_owned());\n     }\n \n     #[test]"}]}