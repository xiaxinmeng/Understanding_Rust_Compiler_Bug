{"sha": "2111d6f2768911a8449df93ea5c826801e1dbf79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMTFkNmYyNzY4OTExYTg0NDlkZjkzZWE1YzgyNjgwMWUxZGJmNzk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-02T20:06:14Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "add const generic tests", "tree": {"sha": "98ac7e13ddadd63eaa8fa89e7931bd520696ee75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98ac7e13ddadd63eaa8fa89e7931bd520696ee75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2111d6f2768911a8449df93ea5c826801e1dbf79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2111d6f2768911a8449df93ea5c826801e1dbf79", "html_url": "https://github.com/rust-lang/rust/commit/2111d6f2768911a8449df93ea5c826801e1dbf79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2111d6f2768911a8449df93ea5c826801e1dbf79/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "html_url": "https://github.com/rust-lang/rust/commit/567ad7455d5f25f6b38d2fded1cb621e0c34a48b"}], "stats": {"total": 333, "additions": 333, "deletions": 0}, "files": [{"sha": "c8db91b62b58c0f64a104563026c0dfbe72a489a", "filename": "src/test/ui/const-generics/type-dependent/auxiliary/type_dependent_lib.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fauxiliary%2Ftype_dependent_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fauxiliary%2Ftype_dependent_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fauxiliary%2Ftype_dependent_lib.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,36 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+pub struct Struct<const N: usize>(());\n+\n+impl<const N: usize> Struct<N> {\n+    pub fn new() -> Self {\n+        Struct(())\n+    }\n+\n+    pub fn same_ty<const M: usize>(&self) -> (usize, usize) {\n+        (N, M)\n+    }\n+\n+    pub fn different_ty<const M: u8>(&self) -> (usize, u8) {\n+        (N, M)\n+    }\n+\n+    pub fn containing_ty<T, const M: u8>(&self) -> (usize, u8) {\n+        (std::mem::size_of::<T>() +  N, M)\n+    }\n+\n+    pub fn we_have_to_go_deeper<const M: usize>(&self) -> Struct<M> {\n+        Struct(())\n+    }\n+}\n+\n+pub trait Foo {\n+    fn foo<const M: usize>(&self) -> usize;\n+}\n+\n+impl Foo for Struct<7> {\n+    fn foo<const M: usize>(&self) -> usize {\n+        M\n+    }\n+}"}, {"sha": "ae50252facd2514acc53b96bff9ed69054349a5f", "filename": "src/test/ui/const-generics/type-dependent/const-arg-in-const-arg.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+#![feature(const_fn)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo<const N: usize>(&self) -> usize {\n+        let f = self;\n+        f.bar::<{\n+            let f = Foo;\n+            f.bar::<7>()\n+        }>() + N\n+    }\n+\n+    const fn bar<const M: usize>(&self) -> usize {\n+        M\n+    }\n+}\n+\n+fn main() {\n+    let f = Foo;\n+\n+    assert_eq!(f.foo::<13>(), 20)\n+}"}, {"sha": "2dd6c0cd24191045baa23f580277e22b68ac2aed", "filename": "src/test/ui/const-generics/type-dependent/issue-61936.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait SliceExt<T: Clone> {\n+    fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N>;\n+}\n+\n+impl <T: Clone> SliceExt<T> for [T] {\n+   fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N> {\n+       ArrayWindows{ idx: 0, slice: &self }\n+   }\n+}\n+\n+struct ArrayWindows<'a, T, const N: usize> {\n+    slice: &'a [T],\n+    idx: usize,\n+}\n+\n+impl <'a, T: Clone, const N: usize> Iterator for ArrayWindows<'a, T, N> {\n+    type Item = [T; N];\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let mut res = unsafe{ std::mem::zeroed() };\n+        let mut ptr = &mut res as *mut [T; N] as *mut T;\n+\n+        for i in 0..N {\n+            match self.slice[i..].get(i) {\n+                None => return None,\n+                Some(elem) => unsafe { std::ptr::write_volatile(ptr, elem.clone())},\n+            };\n+            ptr = ptr.wrapping_add(1);\n+            self.idx += 1;\n+        }\n+\n+        Some(res)\n+    }\n+}\n+\n+const FOUR: usize = 4;\n+\n+fn main() {\n+    let v: Vec<usize> = vec![100; 0usize];\n+\n+    for array in v.as_slice().array_windows::<FOUR>() {\n+        assert_eq!(array, [0, 0, 0, 0])\n+    }\n+}"}, {"sha": "f3c2e1775940f4baff688f8059f514b4016aeee2", "filename": "src/test/ui/const-generics/type-dependent/issue-63695.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait T {\n+    fn test<const A: i32>(&self) -> i32 { A }\n+}\n+\n+struct S();\n+\n+impl T for S {}\n+\n+fn main() {\n+    let foo = S();\n+    assert_eq!(foo.test::<8i32>(), 8);\n+    assert_eq!(foo.test::<16i32>(), 16);\n+}"}, {"sha": "cbe86cef3230f4616c7f67d4c4efdf285f28a5aa", "filename": "src/test/ui/const-generics/type-dependent/issue-69816.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait IterExt: Sized + Iterator {\n+    fn default_for_size<const N: usize>(self) -> [Self::Item; N]\n+    where\n+        [Self::Item; N]: Default,\n+    {\n+        Default::default()\n+    }\n+}\n+\n+impl<T: Iterator> IterExt for T {}\n+\n+fn main(){\n+    const N: usize = 10;\n+    let arr = (0u32..10).default_for_size::<N>();\n+    assert_eq!(arr, [0; 10]);\n+}"}, {"sha": "6fcf4116d437c2f6efed5aa7ad0e39dceaed2a9f", "filename": "src/test/ui/const-generics/type-dependent/issue-70507.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait ConstChunksExactTrait<T> {\n+    fn const_chunks_exact<const N: usize>(&self) -> ConstChunksExact<'_, T, {N}>;\n+}\n+\n+impl <T> ConstChunksExactTrait<T> for [T] {\n+    fn const_chunks_exact<const N: usize>(&self) -> ConstChunksExact<'_, T, {N}> {\n+        assert!(N != 0);\n+        let rem = self.len() % N;\n+        let len = self.len() - rem;\n+        let (fst, _) = self.split_at(len);\n+        ConstChunksExact { v: fst, }\n+    }\n+}\n+\n+struct ConstChunksExact<'a, T: 'a, const N: usize> {\n+    v: &'a [T],\n+}\n+\n+impl <'a, T: std::fmt::Debug, const N: usize> Iterator for ConstChunksExact<'a, T, {N}> {\n+    type Item = &'a [T; N];\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.v.len() < N {\n+            None\n+        } else {\n+            let (fst, snd) = self.v.split_at(N);\n+\n+            self.v = snd;\n+            let ptr = fst.as_ptr() as *const _;\n+            Some(unsafe { &*ptr})\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let slice = &[1i32, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+\n+    let mut iter = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].iter();\n+\n+    for a in slice.const_chunks_exact::<3>() {\n+        assert_eq!(a, iter.next().unwrap());\n+    }\n+}"}, {"sha": "05abd488816ffcfde06cf895465d21ccc7a04137", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,24 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+struct Test;\n+\n+fn pass() -> u8 {\n+    42\n+}\n+\n+impl Test {\n+    pub fn call_me(&self) -> u8 {\n+        self.test::<pass>()\n+    }\n+\n+    fn test<const FN: fn() -> u8>(&self) -> u8 {\n+        //~^ ERROR using function pointers as const generic parameters is forbidden\n+        FN()\n+    }\n+}\n+\n+fn main() {\n+    let x = Test;\n+    assert_eq!(x.call_me(), 42);\n+}"}, {"sha": "f441b71031ece1a8a3df2b0c83b6cb33820c1638", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-71382.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71382.rs:15:23\n+   |\n+LL |     fn test<const FN: fn() -> u8>(&self) -> u8 {\n+   |                       ^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "e6f3eb075f1da1138deff1752a5d5427413469b6", "filename": "src/test/ui/const-generics/type-dependent/non-local.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:type_dependent_lib.rs\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+extern crate type_dependent_lib;\n+\n+use type_dependent_lib::*;\n+\n+fn main() {\n+    let s = Struct::<42>::new();\n+    assert_eq!(s.same_ty::<7>(), (42, 7));\n+    assert_eq!(s.different_ty::<19>(), (42, 19));\n+    assert_eq!(Struct::<1337>::new().different_ty::<96>(), (1337, 96));\n+    assert_eq!(\n+        Struct::<18>::new()\n+            .we_have_to_go_deeper::<19>()\n+            .containing_ty::<Option<u32>, 3>(),\n+        (27, 3),\n+    );\n+\n+    let s = Struct::<7>::new();\n+    assert_eq!(s.foo::<18>(), 18);\n+}"}, {"sha": "f3f98e5faf52da38c7b9de379110ea4b8535ee21", "filename": "src/test/ui/const-generics/type-dependent/qpath.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct A;\n+impl A {\n+    fn foo<const N: usize>() -> usize { N + 1 }\n+}\n+\n+fn main() {\n+    assert_eq!(A::foo::<7>(), 8);\n+}"}, {"sha": "cc7c50d8fd835d9762d91d4132c0810c5a57cb20", "filename": "src/test/ui/const-generics/type-dependent/simple.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct R;\n+\n+impl R {\n+    fn method<const N: u8>(&self) -> u8 { N }\n+}\n+fn main() {\n+    assert_eq!(R.method::<1u8>(), 1);\n+}"}, {"sha": "0c71f338bd2629dfe3f938733d03c03931ebad00", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+struct R;\n+\n+impl R {\n+    fn method<const N: u8>(&self) -> u8 { N }\n+}\n+fn main() {\n+    assert_eq!(R.method::<1u16>(), 1);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "5bb7c5b0ea9bf9e4aa75c8bac8c39f56c6dd1bae", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-mismatch.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:10:27\n+   |\n+LL |     assert_eq!(R.method::<1u16>(), 1);\n+   |                           ^^^^ expected `u8`, found `u16`\n+   |\n+help: change the type of the numeric literal from `u16` to `u8`\n+   |\n+LL |     assert_eq!(R.method::<1u8>(), 1);\n+   |                           ^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0ba9945b399ae62fba70ceca9d55a445209a90e6", "filename": "src/test/ui/const-generics/unknown_adt.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,7 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    let _: UnknownStruct<7>;\n+    //~^ ERROR cannot find type `UnknownStruct`\n+}"}, {"sha": "b2e287b762c69001b8773fb3751c96e254f64564", "filename": "src/test/ui/const-generics/unknown_adt.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2111d6f2768911a8449df93ea5c826801e1dbf79/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr?ref=2111d6f2768911a8449df93ea5c826801e1dbf79", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `UnknownStruct` in this scope\n+  --> $DIR/unknown_adt.rs:5:12\n+   |\n+LL |     let _: UnknownStruct<7>;\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}]}