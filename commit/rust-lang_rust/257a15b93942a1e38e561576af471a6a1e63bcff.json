{"sha": "257a15b93942a1e38e561576af471a6a1e63bcff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1N2ExNWI5Mzk0MmExZTM4ZTU2MTU3NmFmNDcxYTZhMWU2M2JjZmY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-15T09:45:55Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-15T09:45:55Z"}, "message": "Merge #1404\n\n1404: Fight down failures! r=matklad a=mominul\n\nissue #1400 \r\n\r\nNow only `ra_tools` crate depends on `failure`, should I also fight those? :grin:\n\nCo-authored-by: Muhammad Mominul Huque <mominul2082@gmail.com>", "tree": {"sha": "3586eda54dab85be6d24325e597a1d8f060e36b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3586eda54dab85be6d24325e597a1d8f060e36b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257a15b93942a1e38e561576af471a6a1e63bcff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257a15b93942a1e38e561576af471a6a1e63bcff", "html_url": "https://github.com/rust-lang/rust/commit/257a15b93942a1e38e561576af471a6a1e63bcff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257a15b93942a1e38e561576af471a6a1e63bcff/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "9dbf985df5515f4b9b40a7dcf74f916fa8d57ee3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dbf985df5515f4b9b40a7dcf74f916fa8d57ee3", "html_url": "https://github.com/rust-lang/rust/commit/9dbf985df5515f4b9b40a7dcf74f916fa8d57ee3"}, {"sha": "408e173bb9737f9484ca773ee57cc791f5c57e16", "url": "https://api.github.com/repos/rust-lang/rust/commits/408e173bb9737f9484ca773ee57cc791f5c57e16", "html_url": "https://github.com/rust-lang/rust/commit/408e173bb9737f9484ca773ee57cc791f5c57e16"}], "stats": {"total": 139, "additions": 61, "deletions": 78}, "files": [{"sha": "03b5794fa1badd57e8b39209d785b727de967195", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -490,7 +490,6 @@ name = \"gen_lsp_server\"\n version = \"0.2.0\"\n dependencies = [\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.11.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.57.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1021,7 +1020,6 @@ dependencies = [\n name = \"ra_batch\"\n version = \"0.1.0\"\n dependencies = [\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_db 0.1.0\",\n  \"ra_hir 0.1.0\",\n@@ -1037,7 +1035,6 @@ name = \"ra_cli\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.11.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"indicatif 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1129,8 +1126,6 @@ name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n  \"crossbeam-channel 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flexi_logger 0.11.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gen_lsp_server 0.2.0\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1188,7 +1183,6 @@ name = \"ra_project_model\"\n version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\","}, {"sha": "d375606d0ba0298eeacceed81d039ea13b066788", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -10,7 +10,6 @@ description = \"Generic LSP server scaffold.\"\n [dependencies]\n lsp-types = \"0.57.0\"\n log = \"0.4.3\"\n-failure = \"0.1.4\"\n serde_json = \"1.0.34\"\n serde = { version = \"1.0.83\", features = [\"derive\"] }\n crossbeam-channel = \"0.3.5\""}, {"sha": "bc497f74a1e6bdf054308c63c43e377b1e18ab47", "filename": "crates/gen_lsp_server/examples/01_gen_lsp_server.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fexamples%2F01_gen_lsp_server.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -1,11 +1,13 @@\n+use std::error::Error;\r\n+\r\n use crossbeam_channel::{Sender, Receiver};\r\n use lsp_types::{\r\n     ServerCapabilities, InitializeParams,\r\n     request::{GotoDefinition, GotoDefinitionResponse},\r\n };\r\n use gen_lsp_server::{run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse};\r\n \r\n-fn main() -> Result<(), failure::Error> {\r\n+fn main() -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     let (receiver, sender, io_threads) = stdio_transport();\r\n     run_server(ServerCapabilities::default(), receiver, sender, main_loop)?;\r\n     io_threads.join()?;\r\n@@ -16,7 +18,7 @@ fn main_loop(\n     _params: InitializeParams,\r\n     receiver: &Receiver<RawMessage>,\r\n     sender: &Sender<RawMessage>,\r\n-) -> Result<(), failure::Error> {\r\n+) -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     for msg in receiver {\r\n         match msg {\r\n             RawMessage::Request(req) => {\r"}, {"sha": "1a6174462cf7e69f191a6731c9dbab067ca1196b", "filename": "crates/gen_lsp_server/examples/02_gen_lsp_server_with_logging.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fexamples%2F02_gen_lsp_server_with_logging.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -42,6 +42,8 @@\n //! {\"jsonrpc\": \"2.0\", \"method\": \"exit\", \"params\": null}\r\n //! ```\r\n \r\n+use std::error::Error;\r\n+\r\n use crossbeam_channel::{Sender, Receiver};\r\n use lsp_types::{\r\n     ServerCapabilities, InitializeParams,\r\n@@ -52,7 +54,7 @@ use gen_lsp_server::{\n     run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse, RawRequest,\r\n };\r\n \r\n-fn main() -> Result<(), failure::Error> {\r\n+fn main() -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     // Set up logging. Because `stdio_transport` gets a lock on stdout and stdin, we must have\r\n     // our logging only write out to stderr.\r\n     flexi_logger::Logger::with_str(\"info\").start().unwrap();\r\n@@ -75,7 +77,7 @@ fn main_loop(\n     _params: InitializeParams,\r\n     receiver: &Receiver<RawMessage>,\r\n     sender: &Sender<RawMessage>,\r\n-) -> Result<(), failure::Error> {\r\n+) -> Result<(), Box<dyn Error + Sync + Send>> {\r\n     info!(\"starting example main loop\");\r\n     for msg in receiver {\r\n         info!(\"got msg: {:?}\", msg);\r"}, {"sha": "7ecef83cb1858890b6137b43b25a72ad8129c0aa", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -5,11 +5,12 @@\n //! Run with `RUST_LOG=gen_lsp_server=debug` to see all the messages.\n //!\n //! ```no_run\n+//! use std::error::Error;\n //! use crossbeam_channel::{Sender, Receiver};\n //! use lsp_types::{ServerCapabilities, InitializeParams, request::{GotoDefinition, GotoDefinitionResponse}};\n //! use gen_lsp_server::{run_server, stdio_transport, handle_shutdown, RawMessage, RawResponse};\n //!\n-//! fn main() -> Result<(), failure::Error> {\n+//! fn main() -> Result<(), Box<dyn Error + Send + Sync>> {\n //!     let (receiver, sender, io_threads) = stdio_transport();\n //!     run_server(\n //!         ServerCapabilities::default(),\n@@ -25,7 +26,7 @@\n //!     _params: InitializeParams,\n //!     receiver: &Receiver<RawMessage>,\n //!     sender: &Sender<RawMessage>,\n-//! ) -> Result<(), failure::Error> {\n+//! ) -> Result<(), Box<dyn Error + Send + Sync>> {\n //!     for msg in receiver {\n //!         match msg {\n //!             RawMessage::Request(req) => {\n@@ -54,7 +55,7 @@\n //! }\n //! ```\n \n-use failure::{bail, format_err};\n+use std::error::Error;\n \n mod msg;\n mod stdio;\n@@ -66,7 +67,7 @@ use lsp_types::{\n     InitializeParams, InitializeResult, ServerCapabilities,\n };\n \n-pub type Result<T> = ::std::result::Result<T, failure::Error>;\n+pub type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n pub use crate::{\n     msg::{ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse, RawResponseError},\n     stdio::{stdio_transport, Threads},\n@@ -92,8 +93,8 @@ pub fn run_server(\n     match receiver.recv() {\n         Ok(RawMessage::Notification(n)) => n\n             .cast::<Exit>()\n-            .map_err(|n| format_err!(\"unexpected notification during shutdown: {:?}\", n))?,\n-        m => bail!(\"unexpected message during shutdown: {:?}\", m),\n+            .map_err(|n| format!(\"unexpected notification during shutdown: {:?}\", n))?,\n+        m => Err(format!(\"unexpected message during shutdown: {:?}\", m))?,\n     }\n     log::info!(\"lsp server shutdown complete\");\n     Ok(())\n@@ -118,19 +119,18 @@ fn initialize(\n ) -> Result<InitializeParams> {\n     let (id, params) = match receiver.recv() {\n         Ok(RawMessage::Request(req)) => match req.cast::<Initialize>() {\n-            Err(req) => bail!(\"expected initialize request, got {:?}\", req),\n+            Err(req) => Err(format!(\"expected initialize request, got {:?}\", req))?,\n             Ok(req) => req,\n         },\n-        msg => bail!(\"expected initialize request, got {:?}\", msg),\n+        msg => Err(format!(\"expected initialize request, got {:?}\", msg))?,\n     };\n     let resp = RawResponse::ok::<Initialize>(id, &InitializeResult { capabilities: caps });\n     sender.send(RawMessage::Response(resp)).unwrap();\n     match receiver.recv() {\n         Ok(RawMessage::Notification(n)) => {\n-            n.cast::<Initialized>()\n-                .map_err(|_| format_err!(\"expected initialized notification\"))?;\n+            n.cast::<Initialized>().map_err(|_| \"expected initialized notification\")?;\n         }\n-        _ => bail!(\"expected initialized notification\"),\n+        _ => Err(format!(\"expected initialized notification\"))?,\n     }\n     Ok(params)\n }"}, {"sha": "2928e4f8bdef52455432345aebfd4f4eb8e2ccf2", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -3,7 +3,6 @@ use std::io::{BufRead, Write};\n use lsp_types::{notification::Notification, request::Request};\n use serde::{Deserialize, Serialize};\n use serde_json::{from_str, from_value, to_string, to_value, Value};\n-use failure::{bail, format_err};\n \n use crate::Result;\n \n@@ -175,21 +174,20 @@ fn read_msg_text(inp: &mut impl BufRead) -> Result<Option<String>> {\n             return Ok(None);\n         }\n         if !buf.ends_with(\"\\r\\n\") {\n-            bail!(\"malformed header: {:?}\", buf);\n+            Err(format!(\"malformed header: {:?}\", buf))?;\n         }\n         let buf = &buf[..buf.len() - 2];\n         if buf.is_empty() {\n             break;\n         }\n         let mut parts = buf.splitn(2, \": \");\n         let header_name = parts.next().unwrap();\n-        let header_value =\n-            parts.next().ok_or_else(|| format_err!(\"malformed header: {:?}\", buf))?;\n+        let header_value = parts.next().ok_or_else(|| format!(\"malformed header: {:?}\", buf))?;\n         if header_name == \"Content-Length\" {\n             size = Some(header_value.parse::<usize>()?);\n         }\n     }\n-    let size = size.ok_or_else(|| format_err!(\"no Content-Length\"))?;\n+    let size = size.ok_or(\"no Content-Length\")?;\n     let mut buf = buf.into_bytes();\n     buf.resize(size, 0);\n     inp.read_exact(&mut buf)?;"}, {"sha": "f8931f2dcea7fdea2fe40ecdbed7c7b2fcb16ac5", "filename": "crates/gen_lsp_server/src/stdio.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -4,7 +4,6 @@ use std::{\n };\n \n use crossbeam_channel::{bounded, Receiver, Sender};\n-use failure::bail;\n use lsp_types::notification::Exit;\n \n use crate::{RawMessage, Result};\n@@ -48,11 +47,11 @@ impl Threads {\n     pub fn join(self) -> Result<()> {\n         match self.reader.join() {\n             Ok(r) => r?,\n-            Err(_) => bail!(\"reader panicked\"),\n+            Err(_) => Err(\"reader panicked\")?,\n         }\n         match self.writer.join() {\n             Ok(r) => r,\n-            Err(_) => bail!(\"writer panicked\"),\n+            Err(_) => Err(\"writer panicked\")?,\n         }\n     }\n }"}, {"sha": "8bf085bbfbcadc9ef5fdc30374806617e6daeeec", "filename": "crates/ra_batch/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_batch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_batch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2FCargo.toml?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -8,8 +8,6 @@ authors = [\"rust-analyzer developers\"]\n log = \"0.4.5\"\n rustc-hash = \"1.0\"\n \n-failure = \"0.1.4\"\n-\n ra_vfs = \"0.2.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "96b32d9fe46bee7761067e3872df6e9d582c75bd", "filename": "crates/ra_batch/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_batch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_batch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_batch%2Fsrc%2Flib.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -1,8 +1,6 @@\n mod vfs_filter;\n \n-use std::sync::Arc;\n-use std::path::Path;\n-use std::collections::HashSet;\n+use std::{sync::Arc, path::Path, collections::HashSet, error::Error};\n \n use rustc_hash::FxHashMap;\n \n@@ -14,7 +12,7 @@ use ra_project_model::ProjectWorkspace;\n use ra_vfs::{Vfs, VfsChange};\n use vfs_filter::IncludeRustFiles;\n \n-type Result<T> = std::result::Result<T, failure::Error>;\n+type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n #[salsa::database(\n     ra_db::SourceDatabaseStorage,"}, {"sha": "57bd0c3d7de02558980513230b3277cef617146a", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -7,7 +7,6 @@ publish = false\n \n [dependencies]\n clap = \"2.32.0\"\n-failure = \"0.1.4\"\n join_to_string = \"0.1.1\"\n flexi_logger = \"0.11.0\"\n indicatif = \"0.11.0\""}, {"sha": "1db98aec13076f17c576d8664d8a76bbcfaa6e0b", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -1,14 +1,14 @@\n mod analysis_stats;\n \n-use std::io::Read;\n+use std::{io::Read, error::Error};\n \n use clap::{App, Arg, SubCommand};\n use ra_ide_api::{file_structure, Analysis};\n use ra_syntax::{SourceFile, TreeArc, AstNode};\n use flexi_logger::Logger;\n use ra_prof::profile;\n \n-type Result<T> = ::std::result::Result<T, failure::Error>;\n+type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n fn main() -> Result<()> {\n     Logger::with_env().start()?;"}, {"sha": "142467cc9039291f0d5254bd8447bf0fb780b55c", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -7,8 +7,6 @@ authors = [\"rust-analyzer developers\"]\n [dependencies]\n threadpool = \"1.7.1\"\n relative-path = \"0.4.0\"\n-failure = \"0.1.4\"\n-failure_derive = \"0.1.4\"\n serde_json = \"1.0.34\"\n serde = { version = \"1.0.83\", features = [\"derive\"] }\n crossbeam-channel = \"0.3.5\""}, {"sha": "14cfa401f5c18b3e3ce93ce48b33cc518198fd09", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -9,5 +9,5 @@ pub mod req;\n pub mod init;\n mod world;\n \n-pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+pub type Result<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;\n pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError, init::InitializationOptions};"}, {"sha": "7749d97d6edbf8009cf08595fbadb9e37b6c08a0", "filename": "crates/ra_lsp_server/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -25,7 +25,7 @@ fn main() -> Result<()> {\n         }\n         Err(_) => {\n             log::error!(\"server panicked\");\n-            failure::bail!(\"server panicked\")\n+            Err(\"server panicked\")?\n         }\n     }\n }"}, {"sha": "aeb8a22992aa770a2d37931a46ce44abc94a814e", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -2,11 +2,9 @@ mod handlers;\n mod subscriptions;\n pub(crate) mod pending_requests;\n \n-use std::{fmt, path::PathBuf, sync::Arc, time::Instant};\n+use std::{fmt, path::PathBuf, sync::Arc, time::Instant, error::Error};\n \n use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n-use failure::{bail, format_err};\n-use failure_derive::Fail;\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n@@ -32,8 +30,7 @@ use crate::{\n const THREADPOOL_SIZE: usize = 8;\n const MAX_IN_FLIGHT_LIBS: usize = THREADPOOL_SIZE - 3;\n \n-#[derive(Debug, Fail)]\n-#[fail(display = \"Language Server request failed with {}. ({})\", code, message)]\n+#[derive(Debug)]\n pub struct LspError {\n     pub code: i32,\n     pub message: String,\n@@ -45,6 +42,14 @@ impl LspError {\n     }\n }\n \n+impl fmt::Display for LspError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"Language Server request failed with {}. ({})\", self.code, self.message)\n+    }\n+}\n+\n+impl Error for LspError {}\n+\n pub fn main_loop(\n     ws_roots: Vec<PathBuf>,\n     options: InitializationOptions,\n@@ -177,12 +182,12 @@ fn main_loop_inner(\n         let event = select! {\n             recv(msg_receiver) -> msg => match msg {\n                 Ok(msg) => Event::Msg(msg),\n-                Err(RecvError) => bail!(\"client exited without shutdown\"),\n+                Err(RecvError) => Err(\"client exited without shutdown\")?,\n             },\n             recv(task_receiver) -> task => Event::Task(task.unwrap()),\n             recv(state.vfs.read().task_receiver()) -> task => match task {\n                 Ok(task) => Event::Vfs(task),\n-                Err(RecvError) => bail!(\"vfs died\"),\n+                Err(RecvError) => Err(\"vfs died\")?,\n             },\n             recv(libdata_receiver) -> data => Event::Lib(data.unwrap())\n         };\n@@ -380,7 +385,7 @@ fn on_notification(\n     let not = match not.cast::<req::DidOpenTextDocument>() {\n         Ok(params) => {\n             let uri = params.text_document.uri;\n-            let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+            let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) =\n                 state.vfs.write().add_file_overlay(&path, params.text_document.text)\n             {\n@@ -393,9 +398,8 @@ fn on_notification(\n     let not = match not.cast::<req::DidChangeTextDocument>() {\n         Ok(mut params) => {\n             let uri = params.text_document.uri;\n-            let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n-            let text =\n-                params.content_changes.pop().ok_or_else(|| format_err!(\"empty changes\"))?.text;\n+            let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n+            let text = params.content_changes.pop().ok_or_else(|| format!(\"empty changes\"))?.text;\n             state.vfs.write().change_file_overlay(path.as_path(), text);\n             return Ok(());\n         }\n@@ -404,7 +408,7 @@ fn on_notification(\n     let not = match not.cast::<req::DidCloseTextDocument>() {\n         Ok(params) => {\n             let uri = params.text_document.uri;\n-            let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+            let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) = state.vfs.write().remove_file_overlay(path.as_path()) {\n                 subs.remove_sub(FileId(file_id.0));\n             }\n@@ -543,11 +547,7 @@ where\n                         error: None,\n                     }\n                 } else {\n-                    RawResponse::err(\n-                        id,\n-                        ErrorCode::InternalError as i32,\n-                        format!(\"{}\\n{}\", e, e.backtrace()),\n-                    )\n+                    RawResponse::err(id, ErrorCode::InternalError as i32, e.to_string())\n                 }\n             }\n         },\n@@ -599,6 +599,6 @@ fn show_message(typ: req::MessageType, message: impl Into<String>, sender: &Send\n     sender.send(not.into()).unwrap();\n }\n \n-fn is_canceled(e: &failure::Error) -> bool {\n+fn is_canceled(e: &Box<dyn std::error::Error + Send + Sync>) -> bool {\n     e.downcast_ref::<Canceled>().is_some()\n }"}, {"sha": "7822e1c1c5c29dc6489fbcc7a4a1968ea91f1abd", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -11,7 +11,6 @@ use ra_ide_api::{\n use ra_vfs::{Vfs, VfsChange, VfsFile, VfsRoot};\n use relative_path::RelativePathBuf;\n use parking_lot::RwLock;\n-use failure::{Error, format_err};\n use gen_lsp_server::ErrorCode;\n \n use crate::{\n@@ -169,29 +168,29 @@ impl WorldSnapshot {\n     }\n \n     pub fn uri_to_file_id(&self, uri: &Url) -> Result<FileId> {\n-        let path = uri.to_file_path().map_err(|()| format_err!(\"invalid uri: {}\", uri))?;\n+        let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n         let file = self.vfs.read().path2file(&path).ok_or_else(|| {\n             // Show warning as this file is outside current workspace\n-            Error::from(LspError {\n+            LspError {\n                 code: ErrorCode::InvalidRequest as i32,\n                 message: \"Rust file outside current workspace is not supported yet.\".to_string(),\n-            })\n+            }\n         })?;\n         Ok(FileId(file.0))\n     }\n \n     pub fn file_id_to_uri(&self, id: FileId) -> Result<Url> {\n         let path = self.vfs.read().file2path(VfsFile(id.0));\n         let url = Url::from_file_path(&path)\n-            .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.display()))?;\n         Ok(url)\n     }\n \n     pub fn path_to_uri(&self, root: SourceRootId, path: &RelativePathBuf) -> Result<Url> {\n         let base = self.vfs.read().root2path(VfsRoot(root.0));\n         let path = path.to_path(base);\n         let url = Url::from_file_path(&path)\n-            .map_err(|_| format_err!(\"can't convert path to url: {}\", path.display()))?;\n+            .map_err(|_| format!(\"can't convert path to url: {}\", path.display()))?;\n         Ok(url)\n     }\n "}, {"sha": "c1a91d9502b11edde389f2750a0d01f65ee4b80e", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -9,8 +9,6 @@ log = \"0.4.5\"\n rustc-hash = \"1.0\"\n relative-path = \"0.4.0\"\n \n-failure = \"0.1.4\"\n-\n walkdir = \"2.2.7\"\n \n cargo_metadata = \"0.7.0\""}, {"sha": "d5ebf2c7a84a61db312000fe07b5d3e56af236a3", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -3,7 +3,6 @@ use std::path::{Path, PathBuf};\n use cargo_metadata::{MetadataCommand, CargoOpt};\n use ra_arena::{Arena, RawId, impl_arena_id};\n use rustc_hash::FxHashMap;\n-use failure::format_err;\n use ra_db::Edition;\n \n use crate::Result;\n@@ -127,7 +126,7 @@ impl CargoWorkspace {\n         if let Some(parent) = cargo_toml.parent() {\n             meta.current_dir(parent);\n         }\n-        let meta = meta.exec().map_err(|e| format_err!(\"cargo metadata failed: {}\", e))?;\n+        let meta = meta.exec().map_err(|e| format!(\"cargo metadata failed: {}\", e))?;\n         let mut pkg_by_id = FxHashMap::default();\n         let mut packages = Arena::default();\n         let mut targets = Arena::default();"}, {"sha": "a3af153f1aa02dd36451136f98a8af492d40f9d0", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -6,9 +6,9 @@ use std::{\n     fs::File,\n     io::BufReader,\n     path::{Path, PathBuf},\n+    error::Error\n };\n \n-use failure::bail;\n use rustc_hash::FxHashMap;\n \n use ra_db::{CrateGraph, FileId, Edition};\n@@ -24,7 +24,7 @@ pub use crate::{\n };\n \n // FIXME use proper error enum\n-pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n+pub type Result<T> = ::std::result::Result<T, Box<dyn Error + Send + Sync>>;\n \n #[derive(Debug, Clone)]\n pub enum ProjectWorkspace {\n@@ -298,5 +298,5 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n         }\n         curr = path.parent();\n     }\n-    bail!(\"can't find Cargo.toml at {}\", path.display())\n+    Err(format!(\"can't find Cargo.toml at {}\", path.display()))?\n }"}, {"sha": "9e0d8aaac73025528bc27e09bdf564115a938616", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -38,18 +38,18 @@ impl Sysroot {\n             .args(&[\"--print\", \"sysroot\"])\n             .output()?;\n         if !rustc_output.status.success() {\n-            failure::bail!(\"failed to locate sysroot\")\n+            Err(\"failed to locate sysroot\")?\n         }\n         let stdout = String::from_utf8(rustc_output.stdout)?;\n         let sysroot_path = Path::new(stdout.trim());\n         let src = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n         if !src.exists() {\n-            failure::bail!(\n+            Err(format!(\n                 \"can't load standard library from sysroot\\n\\\n                  {:?}\\n\\\n                  try running `rustup component add rust-src`\",\n                 src,\n-            );\n+            ))?;\n         }\n \n         let mut sysroot = Sysroot { crates: Arena::default() };"}, {"sha": "e46ad12dbf107f6a98b380b98c8e7555f29cbe72", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257a15b93942a1e38e561576af471a6a1e63bcff/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=257a15b93942a1e38e561576af471a6a1e63bcff", "patch": "@@ -11,7 +11,7 @@\n //!\n //! The most interesting modules here are `syntax_node` (which defines concrete\n //! syntax tree) and `ast` (which defines abstract syntax tree on top of the\n-//! CST). The actual parser live in a separate `ra_parser` crate, thought the\n+//! CST). The actual parser live in a separate `ra_parser` crate, though the\n //! lexer lives in this crate.\n //!\n //! See `api_walkthrough` test in this file for a quick API tour!"}]}