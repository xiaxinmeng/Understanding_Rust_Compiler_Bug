{"sha": "67762ffe35734c14b0aa1b90597dee164e73831a", "node_id": "C_kwDOAAsO6NoAKDY3NzYyZmZlMzU3MzRjMTRiMGFhMWI5MDU5N2RlZTE2NGU3MzgzMWE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-28T22:45:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-28T22:45:17Z"}, "message": "Rollup merge of #90833 - tmiasko:optimization-remarks, r=nikic\n\nEmit LLVM optimization remarks when enabled with `-Cremark`\n\nThe default diagnostic handler considers all remarks to be disabled by\ndefault unless configured otherwise through LLVM internal flags:\n`-pass-remarks`, `-pass-remarks-missed`, and `-pass-remarks-analysis`.\nThis behaviour makes `-Cremark` ineffective on its own.\n\nFix this by configuring a custom diagnostic handler that enables\noptimization remarks based on the value of `-Cremark` option. With\n`-Cremark=all` enabling all remarks.\n\nFixes #90924.\n\nr? `@nikic`", "tree": {"sha": "9cde84b9a4477fdcba7fac9da4eefdb2ac36b759", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cde84b9a4477fdcba7fac9da4eefdb2ac36b759"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67762ffe35734c14b0aa1b90597dee164e73831a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhpAZ9CRBK7hj4Ov3rIwAAMmoIAJqlMXlV0san2mXsUMXUln5M\njDaUtfbPCyACl5WGI38t95bsFT4zexaa/sUXCob22yQEbFofmO23Sm5sdxY3y2Ul\nyThwUvhT342SP3NvEKsxSHhdsN0oiLfCBbesPupBeJyLuGXpyb2AJnoYFOWpdAIh\nTLJFzX3oIwu2vzm3Wo1j5ZXSG4h5S/DchKQAZvBxMZ10+PIKg6cx3L3U1tfPSGl7\nS5pU/FbewgvasvZ7GhiuoZw9M8NJtIFhR4DgYw0PtLlnu8HSkqex6h3NlmUUKkgs\nBkmMipCutf17+3puOLun1gVWHyus2byUSFizfBwQYvzno9pBsfzwVf4xfjsh/+c=\n=aama\n-----END PGP SIGNATURE-----\n", "payload": "tree 9cde84b9a4477fdcba7fac9da4eefdb2ac36b759\nparent 9ef0bcfc6843f510027fd007a4bb2d999514e036\nparent 8fa45295f44febfa7035caeb149b2adfaa58fc50\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638139517 +0100\ncommitter GitHub <noreply@github.com> 1638139517 +0100\n\nRollup merge of #90833 - tmiasko:optimization-remarks, r=nikic\n\nEmit LLVM optimization remarks when enabled with `-Cremark`\n\nThe default diagnostic handler considers all remarks to be disabled by\ndefault unless configured otherwise through LLVM internal flags:\n`-pass-remarks`, `-pass-remarks-missed`, and `-pass-remarks-analysis`.\nThis behaviour makes `-Cremark` ineffective on its own.\n\nFix this by configuring a custom diagnostic handler that enables\noptimization remarks based on the value of `-Cremark` option. With\n`-Cremark=all` enabling all remarks.\n\nFixes #90924.\n\nr? `@nikic`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67762ffe35734c14b0aa1b90597dee164e73831a", "html_url": "https://github.com/rust-lang/rust/commit/67762ffe35734c14b0aa1b90597dee164e73831a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67762ffe35734c14b0aa1b90597dee164e73831a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef0bcfc6843f510027fd007a4bb2d999514e036", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef0bcfc6843f510027fd007a4bb2d999514e036", "html_url": "https://github.com/rust-lang/rust/commit/9ef0bcfc6843f510027fd007a4bb2d999514e036"}, {"sha": "8fa45295f44febfa7035caeb149b2adfaa58fc50", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa45295f44febfa7035caeb149b2adfaa58fc50", "html_url": "https://github.com/rust-lang/rust/commit/8fa45295f44febfa7035caeb149b2adfaa58fc50"}], "stats": {"total": 182, "additions": 163, "deletions": 19}, "files": [{"sha": "460a8cc69128e9f72c2b64f9977b8e185a4712f0", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/67762ffe35734c14b0aa1b90597dee164e73831a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67762ffe35734c14b0aa1b90597dee164e73831a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=67762ffe35734c14b0aa1b90597dee164e73831a", "patch": "@@ -259,6 +259,7 @@ pub(crate) fn save_temp_bitcode(\n pub struct DiagnosticHandlers<'a> {\n     data: *mut (&'a CodegenContext<LlvmCodegenBackend>, &'a Handler),\n     llcx: &'a llvm::Context,\n+    old_handler: Option<&'a llvm::DiagnosticHandler>,\n }\n \n impl<'a> DiagnosticHandlers<'a> {\n@@ -267,12 +268,35 @@ impl<'a> DiagnosticHandlers<'a> {\n         handler: &'a Handler,\n         llcx: &'a llvm::Context,\n     ) -> Self {\n+        let remark_passes_all: bool;\n+        let remark_passes: Vec<CString>;\n+        match &cgcx.remark {\n+            Passes::All => {\n+                remark_passes_all = true;\n+                remark_passes = Vec::new();\n+            }\n+            Passes::Some(passes) => {\n+                remark_passes_all = false;\n+                remark_passes =\n+                    passes.iter().map(|name| CString::new(name.as_str()).unwrap()).collect();\n+            }\n+        };\n+        let remark_passes: Vec<*const c_char> =\n+            remark_passes.iter().map(|name: &CString| name.as_ptr()).collect();\n         let data = Box::into_raw(Box::new((cgcx, handler)));\n         unsafe {\n+            let old_handler = llvm::LLVMRustContextGetDiagnosticHandler(llcx);\n+            llvm::LLVMRustContextConfigureDiagnosticHandler(\n+                llcx,\n+                diagnostic_handler,\n+                data.cast(),\n+                remark_passes_all,\n+                remark_passes.as_ptr(),\n+                remark_passes.len(),\n+            );\n             llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data.cast());\n-            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, data.cast());\n+            DiagnosticHandlers { data, llcx, old_handler }\n         }\n-        DiagnosticHandlers { data, llcx }\n     }\n }\n \n@@ -281,7 +305,7 @@ impl<'a> Drop for DiagnosticHandlers<'a> {\n         use std::ptr::null_mut;\n         unsafe {\n             llvm::LLVMRustSetInlineAsmDiagnosticHandler(self.llcx, inline_asm_handler, null_mut());\n-            llvm::LLVMContextSetDiagnosticHandler(self.llcx, diagnostic_handler, null_mut());\n+            llvm::LLVMRustContextSetDiagnosticHandler(self.llcx, self.old_handler);\n             drop(Box::from_raw(self.data));\n         }\n     }\n@@ -337,13 +361,8 @@ unsafe extern \"C\" fn diagnostic_handler(info: &DiagnosticInfo, user: *mut c_void\n \n             if enabled {\n                 diag_handler.note_without_error(&format!(\n-                    \"optimization {} for {} at {}:{}:{}: {}\",\n-                    opt.kind.describe(),\n-                    opt.pass_name,\n-                    opt.filename,\n-                    opt.line,\n-                    opt.column,\n-                    opt.message\n+                    \"{}:{}:{}: {}: {}\",\n+                    opt.filename, opt.line, opt.column, opt.pass_name, opt.message,\n                 ));\n             }\n         }"}, {"sha": "6eb0fb560467f40a3ccdbbf8a60e4799c08d171c", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/67762ffe35734c14b0aa1b90597dee164e73831a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67762ffe35734c14b0aa1b90597dee164e73831a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=67762ffe35734c14b0aa1b90597dee164e73831a", "patch": "@@ -675,8 +675,12 @@ pub struct OperandBundleDef<'a>(InvariantOpaque<'a>);\n #[repr(C)]\n pub struct Linker<'a>(InvariantOpaque<'a>);\n \n-pub type DiagnosticHandler = unsafe extern \"C\" fn(&DiagnosticInfo, *mut c_void);\n-pub type InlineAsmDiagHandler = unsafe extern \"C\" fn(&SMDiagnostic, *const c_void, c_uint);\n+extern \"C\" {\n+    pub type DiagnosticHandler;\n+}\n+\n+pub type DiagnosticHandlerTy = unsafe extern \"C\" fn(&DiagnosticInfo, *mut c_void);\n+pub type InlineAsmDiagHandlerTy = unsafe extern \"C\" fn(&SMDiagnostic, *const c_void, c_uint);\n \n pub mod coverageinfo {\n     use super::coverage_map;\n@@ -2289,12 +2293,6 @@ extern \"C\" {\n     #[allow(improper_ctypes)]\n     pub fn LLVMRustWriteTwineToString(T: &Twine, s: &RustString);\n \n-    pub fn LLVMContextSetDiagnosticHandler(\n-        C: &Context,\n-        Handler: DiagnosticHandler,\n-        DiagnosticContext: *mut c_void,\n-    );\n-\n     #[allow(improper_ctypes)]\n     pub fn LLVMRustUnpackOptimizationDiagnostic(\n         DI: &'a DiagnosticInfo,\n@@ -2324,7 +2322,7 @@ extern \"C\" {\n \n     pub fn LLVMRustSetInlineAsmDiagnosticHandler(\n         C: &Context,\n-        H: InlineAsmDiagHandler,\n+        H: InlineAsmDiagHandlerTy,\n         CX: *mut c_void,\n     );\n \n@@ -2439,4 +2437,19 @@ extern \"C\" {\n         mod_id: *const c_char,\n         data: &ThinLTOData,\n     );\n+\n+    pub fn LLVMRustContextGetDiagnosticHandler(Context: &Context) -> Option<&DiagnosticHandler>;\n+    pub fn LLVMRustContextSetDiagnosticHandler(\n+        context: &Context,\n+        diagnostic_handler: Option<&DiagnosticHandler>,\n+    );\n+    pub fn LLVMRustContextConfigureDiagnosticHandler(\n+        context: &Context,\n+        diagnostic_handler_callback: DiagnosticHandlerTy,\n+        diagnostic_handler_context: *mut c_void,\n+        remark_all_passes: bool,\n+        remark_passes: *const *const c_char,\n+        remark_passes_len: usize,\n+    );\n+\n }"}, {"sha": "94d2a4b8e4c9be23d2b505b48e576fbc6c1c79d7", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/67762ffe35734c14b0aa1b90597dee164e73831a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/67762ffe35734c14b0aa1b90597dee164e73831a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=67762ffe35734c14b0aa1b90597dee164e73831a", "patch": "@@ -1,5 +1,6 @@\n #include \"LLVMWrapper.h\"\n #include \"llvm/IR/DebugInfoMetadata.h\"\n+#include \"llvm/IR/DiagnosticHandler.h\"\n #include \"llvm/IR/DiagnosticInfo.h\"\n #include \"llvm/IR/DiagnosticPrinter.h\"\n #include \"llvm/IR/GlobalVariable.h\"\n@@ -1177,10 +1178,13 @@ static LLVMRustDiagnosticKind toRust(DiagnosticKind Kind) {\n   case DK_SampleProfile:\n     return LLVMRustDiagnosticKind::SampleProfile;\n   case DK_OptimizationRemark:\n+  case DK_MachineOptimizationRemark:\n     return LLVMRustDiagnosticKind::OptimizationRemark;\n   case DK_OptimizationRemarkMissed:\n+  case DK_MachineOptimizationRemarkMissed:\n     return LLVMRustDiagnosticKind::OptimizationRemarkMissed;\n   case DK_OptimizationRemarkAnalysis:\n+  case DK_MachineOptimizationRemarkAnalysis:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysis;\n   case DK_OptimizationRemarkAnalysisFPCommute:\n     return LLVMRustDiagnosticKind::OptimizationRemarkAnalysisFPCommute;\n@@ -1783,3 +1787,92 @@ extern \"C\" LLVMRustResult LLVMRustWriteImportLibrary(\n     return LLVMRustResult::Success;\n   }\n }\n+\n+// Transfers ownership of DiagnosticHandler unique_ptr to the caller.\n+extern \"C\" DiagnosticHandler *\n+LLVMRustContextGetDiagnosticHandler(LLVMContextRef C) {\n+  std::unique_ptr<DiagnosticHandler> DH = unwrap(C)->getDiagnosticHandler();\n+  return DH.release();\n+}\n+\n+// Sets unique_ptr to object of DiagnosticHandler to provide custom diagnostic\n+// handling. Ownership of the handler is moved to the LLVMContext.\n+extern \"C\" void LLVMRustContextSetDiagnosticHandler(LLVMContextRef C,\n+                                                    DiagnosticHandler *DH) {\n+  unwrap(C)->setDiagnosticHandler(std::unique_ptr<DiagnosticHandler>(DH));\n+}\n+\n+using LLVMDiagnosticHandlerTy = DiagnosticHandler::DiagnosticHandlerTy;\n+\n+// Configures a diagnostic handler that invokes provided callback when a\n+// backend needs to emit a diagnostic.\n+//\n+// When RemarkAllPasses is true, remarks are enabled for all passes. Otherwise\n+// the RemarkPasses array specifies individual passes for which remarks will be\n+// enabled.\n+extern \"C\" void LLVMRustContextConfigureDiagnosticHandler(\n+    LLVMContextRef C, LLVMDiagnosticHandlerTy DiagnosticHandlerCallback,\n+    void *DiagnosticHandlerContext, bool RemarkAllPasses,\n+    const char * const * RemarkPasses, size_t RemarkPassesLen) {\n+\n+  class RustDiagnosticHandler final : public DiagnosticHandler {\n+  public:\n+    RustDiagnosticHandler(LLVMDiagnosticHandlerTy DiagnosticHandlerCallback,\n+                          void *DiagnosticHandlerContext,\n+                          bool RemarkAllPasses,\n+                          std::vector<std::string> RemarkPasses)\n+        : DiagnosticHandlerCallback(DiagnosticHandlerCallback),\n+          DiagnosticHandlerContext(DiagnosticHandlerContext),\n+          RemarkAllPasses(RemarkAllPasses),\n+          RemarkPasses(RemarkPasses) {}\n+\n+    virtual bool handleDiagnostics(const DiagnosticInfo &DI) override {\n+      if (DiagnosticHandlerCallback) {\n+        DiagnosticHandlerCallback(DI, DiagnosticHandlerContext);\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    bool isAnalysisRemarkEnabled(StringRef PassName) const override {\n+      return isRemarkEnabled(PassName);\n+    }\n+\n+    bool isMissedOptRemarkEnabled(StringRef PassName) const override {\n+      return isRemarkEnabled(PassName);\n+    }\n+\n+    bool isPassedOptRemarkEnabled(StringRef PassName) const override {\n+      return isRemarkEnabled(PassName);\n+    }\n+\n+    bool isAnyRemarkEnabled() const override {\n+      return RemarkAllPasses || !RemarkPasses.empty();\n+    }\n+\n+  private:\n+    bool isRemarkEnabled(StringRef PassName) const {\n+      if (RemarkAllPasses)\n+        return true;\n+\n+      for (auto &Pass : RemarkPasses)\n+        if (Pass == PassName)\n+          return true;\n+\n+      return false;\n+    }\n+\n+    LLVMDiagnosticHandlerTy DiagnosticHandlerCallback = nullptr;\n+    void *DiagnosticHandlerContext = nullptr;\n+\n+    bool RemarkAllPasses = false;\n+    std::vector<std::string> RemarkPasses;\n+  };\n+\n+  std::vector<std::string> Passes;\n+  for (size_t I = 0; I != RemarkPassesLen; ++I)\n+    Passes.push_back(RemarkPasses[I]);\n+\n+  unwrap(C)->setDiagnosticHandler(std::make_unique<RustDiagnosticHandler>(\n+      DiagnosticHandlerCallback, DiagnosticHandlerContext, RemarkAllPasses, Passes));\n+}"}, {"sha": "7aedb09928b6491edbee6154fe3cd01eb1ce90e6", "filename": "src/test/ui/optimization-remark.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67762ffe35734c14b0aa1b90597dee164e73831a/src%2Ftest%2Fui%2Foptimization-remark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67762ffe35734c14b0aa1b90597dee164e73831a/src%2Ftest%2Fui%2Foptimization-remark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foptimization-remark.rs?ref=67762ffe35734c14b0aa1b90597dee164e73831a", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+// ignore-pass\n+// no-system-llvm\n+// revisions: all inline\n+//          compile-flags: --crate-type=lib -Cdebuginfo=1 -Copt-level=2\n+// [all]    compile-flags: -Cremark=all\n+// [inline] compile-flags: -Cremark=inline\n+// error-pattern: inline: f not inlined into g\n+// dont-check-compiler-stderr\n+\n+#[no_mangle]\n+#[inline(never)]\n+pub fn f() {\n+}\n+\n+#[no_mangle]\n+pub fn g() {\n+    f();\n+}"}]}