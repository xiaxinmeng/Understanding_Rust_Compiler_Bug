{"sha": "b163247d4e13e31a6b553e18d363f0bc31f2bc28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNjMyNDdkNGUxM2UzMWE2YjU1M2UxOGQzNjNmMGJjMzFmMmJjMjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T01:30:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-13T01:30:21Z"}, "message": "rustc: Beginnings of a \"shape\" module to convert types to shapes", "tree": {"sha": "f2db5f4d3c13617299bad12c367784c30b37bfa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2db5f4d3c13617299bad12c367784c30b37bfa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b163247d4e13e31a6b553e18d363f0bc31f2bc28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b163247d4e13e31a6b553e18d363f0bc31f2bc28", "html_url": "https://github.com/rust-lang/rust/commit/b163247d4e13e31a6b553e18d363f0bc31f2bc28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b163247d4e13e31a6b553e18d363f0bc31f2bc28/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033b38b636eb6323b57fd9905caa4a3833155db5", "url": "https://api.github.com/repos/rust-lang/rust/commits/033b38b636eb6323b57fd9905caa4a3833155db5", "html_url": "https://github.com/rust-lang/rust/commit/033b38b636eb6323b57fd9905caa4a3833155db5"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "c11431e7bc9875ac3503111914cdeebe462ceac9", "filename": "src/comp/middle/shape.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b163247d4e13e31a6b553e18d363f0bc31f2bc28/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b163247d4e13e31a6b553e18d363f0bc31f2bc28/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=b163247d4e13e31a6b553e18d363f0bc31f2bc28", "patch": "@@ -0,0 +1,98 @@\n+// The \"shape\" of a type is best defined as \"how a value of a type looks from\n+// the standpoint of a certain built-in operation\".\n+//\n+// This is used to collapse glues that would otherwise be separate. For\n+// instance, a boxed tuple of 3 ints and a boxed tuple of 3 uints look the\n+// same as far as reference count manipulation is concerned, so they get the\n+// same shape so that their reference count glues can be collapsed together.\n+// To give another example, an int and float have the same (nonexistent!) glue\n+// as far as reference counting is concerned, since they aren't reference\n+// counted.\n+\n+import front::ast;\n+import middle::trans::variant_info;\n+import middle::ty;\n+\n+type variant_getter = fn(&ast::def_id) -> vec[variant_info];\n+\n+\n+// Reference counting shapes.\n+\n+mod rc {\n+    // TODO: Re-export, so that users can just say shape::rc.\n+    // FIXME: The bottom two should be just \"vec[rc]\", but that causes an\n+    // infinite loop in trans.\n+    tag rc {\n+        rs_none;                        // No reference count.\n+        rs_ref;                         // Reference counted box.\n+        rs_tag(vec[@rc]);               // Discriminated union.\n+        rs_tup(vec[@rc]);               // Tuple.\n+    }\n+\n+    fn shape_of(&ty::ctxt tcx, variant_getter getter, ty::t t) -> rc {\n+        alt (ty::struct(tcx, t)) {\n+            // TODO: Or-patterns\n+            case (ty::ty_nil) { ret rs_none; }\n+            case (ty::ty_bool) { ret rs_none; }\n+            case (ty::ty_int) { ret rs_none; }\n+            case (ty::ty_uint) { ret rs_none; }\n+            case (ty::ty_machine(_)) { ret rs_none; }\n+            case (ty::ty_char) { ret rs_none; }\n+            case (ty::ty_str) { ret rs_none; }\n+            case (ty::ty_tag(?did, ?params)) {\n+                let vec[@rc] result = vec();\n+\n+                auto vinfos = getter(did);\n+                for (variant_info vinfo in vinfos) {\n+                    let vec[@rc] variant_rcs = vec();\n+                    for (ty::t typ in vinfo.args) {\n+                        auto ty_1 = ty::bind_params_in_type(tcx, typ);\n+                        ty_1 = ty::substitute_type_params(tcx, params, ty_1);\n+                        variant_rcs += vec(@shape_of(tcx, getter, ty_1));\n+                    }\n+                    result += vec(@rs_tup(variant_rcs));\n+                }\n+\n+                ret rs_tag(result);\n+            }\n+            case (ty::ty_box(_)) { ret rs_ref; }\n+            case (ty::ty_vec(_)) { ret rs_ref; }\n+            case (ty::ty_port(_)) { ret rs_ref; }\n+            case (ty::ty_chan(_)) { ret rs_ref; }\n+            case (ty::ty_task) { ret rs_ref; }\n+            case (ty::ty_tup(?mts)) {\n+                let vec[@rc] result = vec();\n+                for (ty::mt tm in mts) {\n+                    result += vec(@shape_of(tcx, getter, tm.ty));\n+                }\n+                ret rs_tup(result);\n+            }\n+            case (ty::ty_rec(?fields)) {\n+                let vec[@rc] result = vec();\n+                for (ty::field fld in fields) {\n+                    result += vec(@shape_of(tcx, getter, fld.mt.ty));\n+                }\n+                ret rs_tup(result);\n+            }\n+            case (ty::ty_fn(_, _, _)) { ret rs_ref; }\n+            case (ty::ty_native_fn(_, _, _)) { ret rs_ref; }\n+            case (ty::ty_obj(_)) { ret rs_ref; }\n+            case (ty::ty_var(_)) { log_err \"var in rc::shape_of()\"; fail; }\n+            case (ty::ty_local(_)) {\n+                log_err \"local in rc::shape_of()\";\n+                fail;\n+            }\n+            case (ty::ty_param(_)) {\n+                log_err \"param in rc::shape_of()\";\n+                fail;\n+            }\n+            case (ty::ty_bound_param(_)) {\n+                log_err \"bound param in rc::shape_of()\";\n+                fail;\n+            }\n+            case (ty::ty_type) { ret rs_ref; }\n+            case (ty::ty_native) { ret rs_none; }\n+        }\n+    }\n+}\n+"}, {"sha": "0d011eeee68d98946ca82014968cb577c24feae7", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b163247d4e13e31a6b553e18d363f0bc31f2bc28/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/b163247d4e13e31a6b553e18d363f0bc31f2bc28/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=b163247d4e13e31a6b553e18d363f0bc31f2bc28", "patch": "@@ -10,6 +10,7 @@ meta (name = \"rustc\",\n use std;\n \n mod middle {\n+    mod shape;\n     mod trans;\n     mod ty;\n     mod fold;"}]}