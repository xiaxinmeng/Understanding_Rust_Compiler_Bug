{"sha": "3b09c3deaa9a376d0ae40a783713ece3720ca08f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMDljM2RlYWE5YTM3NmQwYWU0MGE3ODM3MTNlY2UzNzIwY2EwOGY=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-21T02:30:53Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-21T02:31:17Z"}, "message": "Document arc::unwrap. Close #3123.", "tree": {"sha": "fc80cb0bd03c58583c177ad7e3295b4793a01e5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc80cb0bd03c58583c177ad7e3295b4793a01e5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b09c3deaa9a376d0ae40a783713ece3720ca08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b09c3deaa9a376d0ae40a783713ece3720ca08f", "html_url": "https://github.com/rust-lang/rust/commit/3b09c3deaa9a376d0ae40a783713ece3720ca08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b09c3deaa9a376d0ae40a783713ece3720ca08f/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ec545614e72b815a3685bb461c7853368b92b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ec545614e72b815a3685bb461c7853368b92b0", "html_url": "https://github.com/rust-lang/rust/commit/71ec545614e72b815a3685bb461c7853368b92b0"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "355567e07e2a17b7ea841078fa47066d751e6205", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b09c3deaa9a376d0ae40a783713ece3720ca08f/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b09c3deaa9a376d0ae40a783713ece3720ca08f/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=3b09c3deaa9a376d0ae40a783713ece3720ca08f", "patch": "@@ -93,6 +93,15 @@ fn clone<T: const send>(rc: &arc<T>) -> arc<T> {\n     arc { x: unsafe { clone_shared_mutable_state(&rc.x) } }\n }\n \n+/**\n+ * Retrieve the data back out of the ARC. This function blocks until the\n+ * reference given to it is the last existing one, and then unwrap the data\n+ * instead of destroying it.\n+ *\n+ * If multiple tasks call unwrap, all but the first will fail. Do not call\n+ * unwrap from a task that holds another reference to the same ARC; it is\n+ * guaranteed to deadlock.\n+ */\n fn unwrap<T: const send>(+rc: arc<T>) -> T {\n     let arc { x: x } = rc;\n     unsafe { unwrap_shared_mutable_state(x) }\n@@ -186,6 +195,12 @@ impl<T: send> &mutex_arc<T> {\n     }\n }\n \n+/**\n+ * Retrieves the data, blocking until all other references are dropped,\n+ * exactly as arc::unwrap.\n+ *\n+ * Will additionally fail if another task has failed while accessing the arc.\n+ */\n // FIXME(#2585) make this a by-move method on the arc\n fn unwrap_mutex_arc<T: send>(+arc: mutex_arc<T>) -> T {\n     let mutex_arc { x: x } = arc;\n@@ -363,6 +378,13 @@ impl<T: const send> &rw_arc<T> {\n     }\n }\n \n+/**\n+ * Retrieves the data, blocking until all other references are dropped,\n+ * exactly as arc::unwrap.\n+ *\n+ * Will additionally fail if another task has failed while accessing the arc\n+ * in write mode.\n+ */\n // FIXME(#2585) make this a by-move method on the arc\n fn unwrap_rw_arc<T: const send>(+arc: rw_arc<T>) -> T {\n     let rw_arc { x: x, _ } = arc;"}]}