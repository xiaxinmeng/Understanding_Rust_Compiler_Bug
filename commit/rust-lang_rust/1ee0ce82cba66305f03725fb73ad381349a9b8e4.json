{"sha": "1ee0ce82cba66305f03725fb73ad381349a9b8e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZTBjZTgyY2JhNjYzMDVmMDM3MjVmYjczYWQzODEzNDlhOWI4ZTQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-22T13:18:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:04:07Z"}, "message": "syntax: Migrate built-in macros to the regular stability checking", "tree": {"sha": "bfa302da7bb973a871d27f726e2c3a95e07ba668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfa302da7bb973a871d27f726e2c3a95e07ba668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ee0ce82cba66305f03725fb73ad381349a9b8e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee0ce82cba66305f03725fb73ad381349a9b8e4", "html_url": "https://github.com/rust-lang/rust/commit/1ee0ce82cba66305f03725fb73ad381349a9b8e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ee0ce82cba66305f03725fb73ad381349a9b8e4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0817fc6c6cd880c51318d476de9ecb43327e12b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0817fc6c6cd880c51318d476de9ecb43327e12b1", "html_url": "https://github.com/rust-lang/rust/commit/0817fc6c6cd880c51318d476de9ecb43327e12b1"}], "stats": {"total": 370, "additions": 161, "deletions": 209}, "files": [{"sha": "66410482cc6d71749426dfa5ce37f76b57e3fff3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1684,6 +1684,9 @@ pub struct Resolver<'a> {\n     current_type_ascription: Vec<Span>,\n \n     injected_crate: Option<Module<'a>>,\n+\n+    /// Features enabled for this crate.\n+    active_features: FxHashSet<Symbol>,\n }\n \n /// Nothing really interesting here; it just provides memory for the rest of the crate.\n@@ -1922,6 +1925,7 @@ impl<'a> Resolver<'a> {\n         let mut macro_defs = FxHashMap::default();\n         macro_defs.insert(Mark::root(), root_def_id);\n \n+        let features = session.features_untracked();\n         let non_macro_attr = |mark_used| Lrc::new(SyntaxExtension::default(\n             SyntaxExtensionKind::NonMacroAttr { mark_used }, session.edition()\n         ));\n@@ -2009,6 +2013,10 @@ impl<'a> Resolver<'a> {\n             unused_macros: Default::default(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n+            active_features:\n+                features.declared_lib_features.iter().map(|(feat, ..)| *feat)\n+                    .chain(features.declared_lang_features.iter().map(|(feat, ..)| *feat))\n+                    .collect(),\n         }\n     }\n "}, {"sha": "6d669aafc81a41edd493b02179975fde77fa2812", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1013,9 +1013,8 @@ impl<'a> Resolver<'a> {\n     fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &str, span: Span) {\n         if let Some(stability) = &ext.stability {\n             if let StabilityLevel::Unstable { reason, issue } = stability.level {\n-                let (feature, features) = (stability.feature, self.session.features_untracked());\n-                if !span.allows_unstable(feature) &&\n-                   features.declared_lib_features.iter().all(|(feat, _)| *feat != feature) {\n+                let feature = stability.feature;\n+                if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n                     stability::report_unstable(self.session, feature, reason, issue, span);\n                 }\n             }"}, {"sha": "77947a4be7ff857a1fde00f80aa49cc8edbbbb11", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -103,6 +103,7 @@\n //!\n //! ```rust\n //! # #![feature(rustc_private)]\n+//! # #![allow(deprecated)]\n //! extern crate serialize;\n //! use serialize::json::{self, ToJson, Json};\n //!\n@@ -143,6 +144,7 @@\n //!\n //! ```rust\n //! # #![feature(rustc_private)]\n+//! # #![allow(deprecated)]\n //! extern crate serialize;\n //! use std::collections::BTreeMap;\n //! use serialize::json::{self, Json, ToJson};"}, {"sha": "b41f1047fcba3765c952f4d3197b5e19a926a472", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -135,6 +135,19 @@ pub enum StabilityLevel {\n     Stable { since: Symbol },\n }\n \n+impl Stability {\n+    pub fn unstable(feature: Symbol, reason: Option<Symbol>, issue: u32) -> Stability {\n+        Stability {\n+            level: StabilityLevel::Unstable { reason, issue },\n+            feature,\n+            rustc_depr: None,\n+            const_stability: None,\n+            promotable: false,\n+            allow_const_fn_ptr: false,\n+        }\n+    }\n+}\n+\n impl StabilityLevel {\n     pub fn is_unstable(&self) -> bool {\n         if let StabilityLevel::Unstable {..} = *self {"}, {"sha": "74ef5cbe9177ebf767c6206fa87e95acdbfaf7d2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 28, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -487,7 +487,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n     fn expand_invoc(&mut self, invoc: Invocation, ext: &SyntaxExtension) -> Option<AstFragment> {\n         if invoc.fragment_kind == AstFragmentKind::ForeignItems &&\n-           !self.cx.ecfg.macros_in_extern_enabled() {\n+           !self.cx.ecfg.macros_in_extern() {\n             if let SyntaxExtensionKind::NonMacroAttr { .. } = ext.kind {} else {\n                 emit_feature_err(&self.cx.parse_sess, sym::macros_in_extern,\n                                  invoc.span(), GateIssue::Language,\n@@ -919,7 +919,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                         })\n                         .map(|i| attrs.remove(i));\n         if let Some(attr) = &attr {\n-            if !self.cx.ecfg.enable_custom_inner_attributes() &&\n+            if !self.cx.ecfg.custom_inner_attributes() &&\n                attr.style == ast::AttrStyle::Inner && attr.path != sym::test {\n                 emit_feature_err(&self.cx.parse_sess, sym::custom_inner_attributes,\n                                  attr.span, GateIssue::Language,\n@@ -1432,19 +1432,6 @@ pub struct ExpansionConfig<'feat> {\n     pub keep_macs: bool,\n }\n \n-macro_rules! feature_tests {\n-    ($( fn $getter:ident = $field:ident, )*) => {\n-        $(\n-            pub fn $getter(&self) -> bool {\n-                match self.features {\n-                    Some(&Features { $field: true, .. }) => true,\n-                    _ => false,\n-                }\n-            }\n-        )*\n-    }\n-}\n-\n impl<'feat> ExpansionConfig<'feat> {\n     pub fn default(crate_name: String) -> ExpansionConfig<'static> {\n         ExpansionConfig {\n@@ -1458,20 +1445,13 @@ impl<'feat> ExpansionConfig<'feat> {\n         }\n     }\n \n-    feature_tests! {\n-        fn enable_asm = asm,\n-        fn enable_custom_test_frameworks = custom_test_frameworks,\n-        fn enable_global_asm = global_asm,\n-        fn enable_log_syntax = log_syntax,\n-        fn enable_concat_idents = concat_idents,\n-        fn enable_trace_macros = trace_macros,\n-        fn enable_allow_internal_unstable = allow_internal_unstable,\n-        fn enable_format_args_nl = format_args_nl,\n-        fn macros_in_extern_enabled = macros_in_extern,\n-        fn proc_macro_hygiene = proc_macro_hygiene,\n+    fn macros_in_extern(&self) -> bool {\n+        self.features.map_or(false, |features| features.macros_in_extern)\n     }\n-\n-    fn enable_custom_inner_attributes(&self) -> bool {\n+    fn proc_macro_hygiene(&self) -> bool {\n+        self.features.map_or(false, |features| features.proc_macro_hygiene)\n+    }\n+    fn custom_inner_attributes(&self) -> bool {\n         self.features.map_or(false, |features| features.custom_inner_attributes)\n     }\n }"}, {"sha": "c2ba8b983f5a84b2393bd7a948183ddc162023f4", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -4,7 +4,7 @@ use crate::ext::build::AstBuilder;\n use crate::parse::{self, token, DirectoryOwnership};\n use crate::print::pprust;\n use crate::ptr::P;\n-use crate::symbol::{Symbol, sym};\n+use crate::symbol::Symbol;\n use crate::tokenstream;\n \n use smallvec::SmallVec;\n@@ -41,16 +41,6 @@ pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTr\n     base::MacEager::expr(cx.expr_u32(topmost, loc.col.to_usize() as u32 + 1))\n }\n \n-/* __rust_unstable_column!(): expands to the current column number */\n-pub fn expand_column_gated(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n-                  -> Box<dyn base::MacResult+'static> {\n-    if sp.allows_unstable(sym::__rust_unstable_column) {\n-        expand_column(cx, sp, tts)\n-    } else {\n-        cx.span_fatal(sp, \"the __rust_unstable_column macro is unstable\");\n-    }\n-}\n-\n /// file!(): expands to the current filename */\n /// The source_file (`loc.file`) contains a bunch more information we could spit\n /// out if we wanted."}, {"sha": "f4f0d041e64d8cbfa624b437bbd8b3e6e57e7d6d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1568,7 +1568,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     (sym::type_length_limit, CrateLevel, template!(NameValueStr: \"N\"), Ungated),\n     (sym::test_runner, CrateLevel, template!(List: \"path\"), Gated(Stability::Unstable,\n                     sym::custom_test_frameworks,\n-                    EXPLAIN_CUSTOM_TEST_FRAMEWORKS,\n+                    \"custom test frameworks are an unstable feature\",\n                     cfg_fn!(custom_test_frameworks))),\n ];\n \n@@ -1819,26 +1819,6 @@ const EXPLAIN_BOX_SYNTAX: &str =\n pub const EXPLAIN_STMT_ATTR_SYNTAX: &str =\n     \"attributes on expressions are experimental\";\n \n-pub const EXPLAIN_ASM: &str =\n-    \"inline assembly is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_GLOBAL_ASM: &str =\n-    \"`global_asm!` is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_CUSTOM_TEST_FRAMEWORKS: &str =\n-    \"custom test frameworks are an unstable feature\";\n-\n-pub const EXPLAIN_LOG_SYNTAX: &str =\n-    \"`log_syntax!` is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_CONCAT_IDENTS: &str =\n-    \"`concat_idents` is not stable enough for use and is subject to change\";\n-\n-pub const EXPLAIN_FORMAT_ARGS_NL: &str =\n-    \"`format_args_nl` is only for internal language use and is subject to change\";\n-\n-pub const EXPLAIN_TRACE_MACROS: &str =\n-    \"`trace_macros` is not stable enough for use and is subject to change\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &str =\n     \"allow_internal_unstable side-steps feature gating and stability checks\";\n pub const EXPLAIN_ALLOW_INTERNAL_UNSAFE: &str ="}, {"sha": "c1c2732605c46d5c199c1142527bee315d41c211", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -8,7 +8,6 @@ use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n-use syntax::feature_gate;\n use syntax::parse;\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n@@ -46,14 +45,6 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n                        tts: &[tokenstream::TokenTree])\n                        -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_asm() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::asm,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_ASM);\n-    }\n-\n     let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n         Ok(Some(inline_asm)) => inline_asm,\n         Ok(None) => return DummyResult::expr(sp),"}, {"sha": "df9191416038d7f825671f642e6f1aba83705d63", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -2,25 +2,16 @@ use rustc_data_structures::thin_vec::ThinVec;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n-use syntax::feature_gate;\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use syntax_pos::symbol::{Symbol, sym};\n+use syntax_pos::symbol::Symbol;\n use syntax::tokenstream::TokenTree;\n \n pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_concat_idents() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::concat_idents,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_CONCAT_IDENTS);\n-    }\n-\n     if tts.is_empty() {\n         cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n         return DummyResult::any(sp);"}, {"sha": "8009f42b8cf95b8650839101d50d1facb5139fac", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -3,7 +3,6 @@\n use crate::deriving::{self, pathvec_std};\n use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n-use crate::deriving::warn_if_deprecated;\n \n use syntax::ast;\n use syntax::ast::{Expr, MetaItem, Mutability};\n@@ -26,7 +25,6 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt<'_>,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n                                  push: &mut dyn FnMut(Annotatable)) {\n-    warn_if_deprecated(cx, span, \"Decodable\");\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n "}, {"sha": "cd89a42cf82703a083fb0bcfa47b9abe0a7f1eba", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -85,7 +85,6 @@\n use crate::deriving::{self, pathvec_std};\n use crate::deriving::generic::*;\n use crate::deriving::generic::ty::*;\n-use crate::deriving::warn_if_deprecated;\n \n use syntax::ast::{Expr, ExprKind, MetaItem, Mutability};\n use syntax::ext::base::{Annotatable, ExtCtxt};\n@@ -107,7 +106,6 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt<'_>,\n                                  mitem: &MetaItem,\n                                  item: &Annotatable,\n                                  push: &mut dyn FnMut(Annotatable)) {\n-    warn_if_deprecated(cx, span, \"Encodable\");\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n }\n "}, {"sha": "f7889b9cac08c840b10c508c768389ccf9b44d77", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast::{self, MetaItem};\n+use syntax::attr::Deprecation;\n use syntax::edition::Edition;\n use syntax::ext::base::{Annotatable, ExtCtxt, Resolver, MultiItemModifier};\n use syntax::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n@@ -60,7 +61,7 @@ impl MultiItemModifier for BuiltinDerive {\n }\n \n macro_rules! derive_traits {\n-    ($( $name:expr => $func:path, )+) => {\n+    ($( [$deprecation:expr] $name:expr => $func:path, )+) => {\n         pub fn is_builtin_trait(name: ast::Name) -> bool {\n             match &*name.as_str() {\n                 $( $name )|+ => true,\n@@ -81,6 +82,10 @@ macro_rules! derive_traits {\n                 resolver.add_builtin(\n                     ast::Ident::with_empty_ctxt(Symbol::intern($name)),\n                     Lrc::new(SyntaxExtension {\n+                        deprecation: $deprecation.map(|msg| Deprecation {\n+                            since: Some(Symbol::intern(\"1.0.0\")),\n+                            note: Some(Symbol::intern(msg)),\n+                        }),\n                         allow_internal_unstable: allow_internal_unstable.clone(),\n                         ..SyntaxExtension::default(\n                             SyntaxExtensionKind::LegacyDerive(Box::new(BuiltinDerive($func))),\n@@ -94,44 +99,43 @@ macro_rules! derive_traits {\n }\n \n derive_traits! {\n+    [None]\n     \"Clone\" => clone::expand_deriving_clone,\n \n+    [None]\n     \"Hash\" => hash::expand_deriving_hash,\n \n+    [None]\n     \"RustcEncodable\" => encodable::expand_deriving_rustc_encodable,\n \n+    [None]\n     \"RustcDecodable\" => decodable::expand_deriving_rustc_decodable,\n \n+    [None]\n     \"PartialEq\" => partial_eq::expand_deriving_partial_eq,\n+    [None]\n     \"Eq\" => eq::expand_deriving_eq,\n+    [None]\n     \"PartialOrd\" => partial_ord::expand_deriving_partial_ord,\n+    [None]\n     \"Ord\" => ord::expand_deriving_ord,\n \n+    [None]\n     \"Debug\" => debug::expand_deriving_debug,\n \n+    [None]\n     \"Default\" => default::expand_deriving_default,\n \n+    [None]\n     \"Copy\" => bounds::expand_deriving_copy,\n \n     // deprecated\n+    [Some(\"derive(Encodable) is deprecated in favor of derive(RustcEncodable)\")]\n     \"Encodable\" => encodable::expand_deriving_encodable,\n+    [Some(\"derive(Decodable) is deprecated in favor of derive(RustcDecodable)\")]\n     \"Decodable\" => decodable::expand_deriving_decodable,\n }\n \n-#[inline] // because `name` is a compile-time constant\n-fn warn_if_deprecated(ecx: &mut ExtCtxt<'_>, sp: Span, name: &str) {\n-    if let Some(replacement) = match name {\n-        \"Encodable\" => Some(\"RustcEncodable\"),\n-        \"Decodable\" => Some(\"RustcDecodable\"),\n-        _ => None,\n-    } {\n-        ecx.span_warn(sp,\n-                      &format!(\"derive({}) is deprecated in favor of derive({})\",\n-                               name,\n-                               replacement));\n-    }\n-}\n-\n /// Construct a name for the inner type parameter that can't collide with any type parameters of\n /// the item. This is achieved by starting with a base and then concatenating the names of all\n /// other type parameters."}, {"sha": "c3dbd48cc6e4e8bbebcfd83138c2e8b7fcc2e9c7", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -9,7 +9,6 @@ use errors::Applicability;\n use syntax::ast;\n use syntax::ext::base::{self, *};\n use syntax::ext::build::AstBuilder;\n-use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n@@ -686,14 +685,16 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n }\n \n-pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n-                               mut sp: Span,\n-                               tts: &[tokenstream::TokenTree])\n-                               -> Box<dyn base::MacResult + 'cx> {\n+fn expand_format_args_impl<'cx>(\n+    ecx: &'cx mut ExtCtxt<'_>,\n+    mut sp: Span,\n+    tts: &[tokenstream::TokenTree],\n+    nl: bool,\n+) -> Box<dyn base::MacResult + 'cx> {\n     sp = sp.apply_mark(ecx.current_expansion.mark);\n     match parse_args(ecx, sp, tts) {\n         Ok((efmt, args, names)) => {\n-            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, false))\n+            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, nl))\n         }\n         Err(mut err) => {\n             err.emit();\n@@ -702,34 +703,20 @@ pub fn expand_format_args<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n     }\n }\n \n+pub fn expand_format_args<'cx>(\n+    ecx: &'cx mut ExtCtxt<'_>,\n+    sp: Span,\n+    tts: &[tokenstream::TokenTree],\n+) -> Box<dyn base::MacResult + 'cx> {\n+    expand_format_args_impl(ecx, sp, tts, false)\n+}\n+\n pub fn expand_format_args_nl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n-    mut sp: Span,\n+    sp: Span,\n     tts: &[tokenstream::TokenTree],\n ) -> Box<dyn base::MacResult + 'cx> {\n-    //if !ecx.ecfg.enable_allow_internal_unstable() {\n-\n-    // For some reason, the only one that actually works for `println` is the first check\n-    if !sp.allows_unstable(sym::format_args_nl) // the span is marked `#[allow_insternal_unsable]`\n-        && !ecx.ecfg.enable_allow_internal_unstable()  // NOTE: when is this enabled?\n-        && !ecx.ecfg.enable_format_args_nl()  // enabled using `#[feature(format_args_nl]`\n-    {\n-        feature_gate::emit_feature_err(&ecx.parse_sess,\n-                                       sym::format_args_nl,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_FORMAT_ARGS_NL);\n-    }\n-    sp = sp.apply_mark(ecx.current_expansion.mark);\n-    match parse_args(ecx, sp, tts) {\n-        Ok((efmt, args, names)) => {\n-            MacEager::expr(expand_preparsed_format_args(ecx, sp, efmt, args, names, true))\n-        }\n-        Err(mut err) => {\n-            err.emit();\n-            DummyResult::expr(sp)\n-        }\n-    }\n+    expand_format_args_impl(ecx, sp, tts, true)\n }\n \n /// Take the various parts of `format_args!(efmt, args..., name=names...)`"}, {"sha": "112192fac5d26dd79531eaf808eb0e6a479561d7", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -13,27 +13,15 @@ use errors::DiagnosticBuilder;\n use syntax::ast;\n use syntax::source_map::respan;\n use syntax::ext::base::{self, *};\n-use syntax::feature_gate;\n use syntax::parse::token;\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, sym};\n use syntax_pos::Span;\n use syntax::tokenstream;\n use smallvec::smallvec;\n \n-pub const MACRO: Symbol = sym::global_asm;\n-\n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n                               tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_global_asm() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       MACRO,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_GLOBAL_ASM);\n-    }\n-\n     match parse_global_asm(cx, sp, tts) {\n         Ok(Some(global_asm)) => {\n             MacEager::items(smallvec![P(ast::Item {"}, {"sha": "1ca5cc47fa25bf68651e1561ea5234273fcf4dc4", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 63, "deletions": 17, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -41,12 +41,29 @@ pub mod proc_macro_impl;\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n-\n+use syntax::attr::Stability;\n use syntax::ext::base::MacroExpanderFn;\n use syntax::ext::base::{NamedSyntaxExtension, SyntaxExtension, SyntaxExtensionKind};\n use syntax::edition::Edition;\n use syntax::symbol::{sym, Symbol};\n \n+const EXPLAIN_ASM: &str =\n+    \"inline assembly is not stable enough for use and is subject to change\";\n+const EXPLAIN_GLOBAL_ASM: &str =\n+    \"`global_asm!` is not stable enough for use and is subject to change\";\n+const EXPLAIN_CUSTOM_TEST_FRAMEWORKS: &str =\n+    \"custom test frameworks are an unstable feature\";\n+const EXPLAIN_LOG_SYNTAX: &str =\n+    \"`log_syntax!` is not stable enough for use and is subject to change\";\n+const EXPLAIN_CONCAT_IDENTS: &str =\n+    \"`concat_idents` is not stable enough for use and is subject to change\";\n+const EXPLAIN_FORMAT_ARGS_NL: &str =\n+    \"`format_args_nl` is only for internal language use and is subject to change\";\n+const EXPLAIN_TRACE_MACROS: &str =\n+    \"`trace_macros` is not stable enough for use and is subject to change\";\n+const EXPLAIN_UNSTABLE_COLUMN: &str =\n+    \"internal implementation detail of the `column` macro\";\n+\n pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                          user_exts: Vec<NamedSyntaxExtension>,\n                          edition: Edition) {\n@@ -62,45 +79,69 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n             ));\n         )* }\n     }\n-    macro_rules! register_attr {\n-        ($( $name:ident: $f:expr, )*) => { $(\n-            register(Symbol::intern(stringify!($name)), SyntaxExtension::default(\n-                SyntaxExtensionKind::LegacyAttr(Box::new($f)), edition\n-            ));\n+    macro_rules! register_unstable {\n+        ($( [$feature:expr, $reason:expr, $issue:expr] $name:ident: $f:expr, )*) => { $(\n+            register(Symbol::intern(stringify!($name)), SyntaxExtension {\n+                stability: Some(Stability::unstable(\n+                    $feature, Some(Symbol::intern($reason)), $issue\n+                )),\n+                ..SyntaxExtension::default(\n+                    SyntaxExtensionKind::LegacyBang(Box::new($f as MacroExpanderFn)), edition\n+                )\n+            });\n         )* }\n     }\n \n     use syntax::ext::source_util::*;\n     register! {\n         line: expand_line,\n-        __rust_unstable_column: expand_column_gated,\n         column: expand_column,\n         file: expand_file,\n         stringify: expand_stringify,\n         include: expand_include,\n         include_str: expand_include_str,\n         include_bytes: expand_include_bytes,\n         module_path: expand_mod,\n-\n-        asm: asm::expand_asm,\n-        global_asm: global_asm::expand_global_asm,\n         cfg: cfg::expand_cfg,\n         concat: concat::expand_syntax_ext,\n-        concat_idents: concat_idents::expand_syntax_ext,\n         env: env::expand_env,\n         option_env: env::expand_option_env,\n-        log_syntax: log_syntax::expand_syntax_ext,\n-        trace_macros: trace_macros::expand_trace_macros,\n         compile_error: compile_error::expand_compile_error,\n         assert: assert::expand_assert,\n     }\n \n-    register_attr! {\n-        test_case: test_case::expand,\n-        test: test::expand_test,\n-        bench: test::expand_bench,\n+    register_unstable! {\n+        [sym::__rust_unstable_column, EXPLAIN_UNSTABLE_COLUMN, 0]\n+        __rust_unstable_column: expand_column,\n+        [sym::asm, EXPLAIN_ASM, 29722]\n+        asm: asm::expand_asm,\n+        [sym::global_asm, EXPLAIN_GLOBAL_ASM, 35119]\n+        global_asm: global_asm::expand_global_asm,\n+        [sym::concat_idents, EXPLAIN_CONCAT_IDENTS, 29599]\n+        concat_idents: concat_idents::expand_syntax_ext,\n+        [sym::log_syntax, EXPLAIN_LOG_SYNTAX, 29598]\n+        log_syntax: log_syntax::expand_syntax_ext,\n+        [sym::trace_macros, EXPLAIN_TRACE_MACROS, 29598]\n+        trace_macros: trace_macros::expand_trace_macros,\n     }\n \n+    register(sym::test_case, SyntaxExtension {\n+        stability: Some(Stability::unstable(\n+            sym::custom_test_frameworks,\n+            Some(Symbol::intern(EXPLAIN_CUSTOM_TEST_FRAMEWORKS)),\n+            50297,\n+        )),\n+        ..SyntaxExtension::default(\n+            SyntaxExtensionKind::LegacyAttr(Box::new(test_case::expand)), edition\n+        )\n+    });\n+    register(sym::test, SyntaxExtension::default(\n+        SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_test)), edition\n+    ));\n+    register(sym::bench, SyntaxExtension::default(\n+        SyntaxExtensionKind::LegacyAttr(Box::new(test::expand_bench)), edition\n+    ));\n+\n     // format_args uses `unstable` things internally.\n     let allow_internal_unstable = Some([sym::fmt_internals][..].into());\n     register(Symbol::intern(\"format_args\"), SyntaxExtension {\n@@ -110,6 +151,11 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n         )\n     });\n     register(sym::format_args_nl, SyntaxExtension {\n+        stability: Some(Stability::unstable(\n+            sym::format_args_nl,\n+            Some(Symbol::intern(EXPLAIN_FORMAT_ARGS_NL)),\n+            0,\n+        )),\n         allow_internal_unstable,\n         ..SyntaxExtension::default(\n             SyntaxExtensionKind::LegacyBang(Box::new(format::expand_format_args_nl)), edition"}, {"sha": "cbdfd08b4977f2f5a6c946f4f516adef6aa5d0eb", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,22 +1,12 @@\n use syntax::ext::base;\n-use syntax::feature_gate;\n use syntax::print;\n use syntax::tokenstream;\n-use syntax::symbol::sym;\n use syntax_pos;\n \n-pub fn expand_syntax_ext<'cx>(cx: &'cx mut base::ExtCtxt<'_>,\n+pub fn expand_syntax_ext<'cx>(_cx: &'cx mut base::ExtCtxt<'_>,\n                               sp: syntax_pos::Span,\n                               tts: &[tokenstream::TokenTree])\n                               -> Box<dyn base::MacResult + 'cx> {\n-    if !cx.ecfg.enable_log_syntax() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::log_syntax,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_LOG_SYNTAX);\n-    }\n-\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n \n     // any so that `log_syntax` can be invoked as an expression and item."}, {"sha": "186673c142f14b13db8daeb72df7155548329bcc", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -17,22 +17,13 @@ use syntax::source_map::respan;\n use syntax::symbol::sym;\n use syntax_pos::Span;\n use syntax::source_map::{ExpnInfo, MacroAttribute};\n-use syntax::feature_gate;\n \n pub fn expand(\n     ecx: &mut ExtCtxt<'_>,\n     attr_sp: Span,\n     _meta_item: &ast::MetaItem,\n     anno_item: Annotatable\n ) -> Vec<Annotatable> {\n-    if !ecx.ecfg.enable_custom_test_frameworks() {\n-        feature_gate::emit_feature_err(&ecx.parse_sess,\n-                                       sym::custom_test_frameworks,\n-                                       attr_sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_CUSTOM_TEST_FRAMEWORKS);\n-    }\n-\n     if !ecx.ecfg.should_test { return vec![]; }\n \n     let sp = {"}, {"sha": "0dce8a36f4c7b24c39b769eb58c1dbeba3913c07", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,21 +1,12 @@\n use syntax::ext::base::{self, ExtCtxt};\n-use syntax::feature_gate;\n-use syntax::symbol::{kw, sym};\n+use syntax::symbol::kw;\n use syntax_pos::Span;\n use syntax::tokenstream::TokenTree;\n \n pub fn expand_trace_macros(cx: &mut ExtCtxt<'_>,\n                            sp: Span,\n                            tt: &[TokenTree])\n                            -> Box<dyn base::MacResult + 'static> {\n-    if !cx.ecfg.enable_trace_macros() {\n-        feature_gate::emit_feature_err(&cx.parse_sess,\n-                                       sym::trace_macros,\n-                                       sp,\n-                                       feature_gate::GateIssue::Language,\n-                                       feature_gate::EXPLAIN_TRACE_MACROS);\n-    }\n-\n     match tt {\n         [TokenTree::Token(token)] if token.is_keyword(kw::True) => {\n             cx.set_trace_macros(true);"}, {"sha": "9afb3a35cb402898e05c1910a64e47bea00e6ee4", "filename": "src/test/ui-fulldeps/deprecated-derive.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdeprecated-derive.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,6 +1,8 @@\n-warning: derive(Encodable) is deprecated in favor of derive(RustcEncodable)\n+warning: use of deprecated item 'Encodable': derive(Encodable) is deprecated in favor of derive(RustcEncodable)\n   --> $DIR/deprecated-derive.rs:8:10\n    |\n LL | #[derive(Encodable)]\n    |          ^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n "}, {"sha": "30a7582a92bd4d7d2a851bd9ce0a8607cf0995c8", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: inline assembly is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-asm.rs:3:9\n    |\n LL |         asm!(\"\");"}, {"sha": "8f4c6806a97010bb27532f4088a867149abb655a", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: inline assembly is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'asm': inline assembly is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-asm2.rs:5:26\n    |\n LL |         println!(\"{:?}\", asm!(\"\"));"}, {"sha": "2a1e5f54592f80368c36304049cc3938c8dc5802", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents.rs:5:13\n    |\n LL |     let a = concat_idents!(X, Y_1);\n@@ -7,7 +7,7 @@ LL |     let a = concat_idents!(X, Y_1);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents.rs:6:13\n    |\n LL |     let b = concat_idents!(X, Y_2);"}, {"sha": "0dc6c13734ef11708fd1051369d1e127c0bba6a0", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents2.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents2.rs:4:5\n    |\n LL |     concat_idents!(a, b);"}, {"sha": "543570f0afc3ffe723af9d4215f82c1bddec1e4a", "filename": "src/test/ui/feature-gates/feature-gate-concat_idents3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-concat_idents3.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents3.rs:7:20\n    |\n LL |     assert_eq!(10, concat_idents!(X, Y_1));\n@@ -7,7 +7,7 @@ LL |     assert_eq!(10, concat_idents!(X, Y_1));\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29599\n    = help: add #![feature(concat_idents)] to the crate attributes to enable\n \n-error[E0658]: `concat_idents` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'concat_idents': `concat_idents` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-concat_idents3.rs:8:20\n    |\n LL |     assert_eq!(20, concat_idents!(X, Y_2));"}, {"sha": "5cf48d8749c8f69f0575708b17ccd8d338761b09", "filename": "src/test/ui/feature-gates/feature-gate-format_args_nl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-format_args_nl.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `format_args_nl` is only for internal language use and is subject to change\n+error[E0658]: use of unstable library feature 'format_args_nl': `format_args_nl` is only for internal language use and is subject to change\n   --> $DIR/feature-gate-format_args_nl.rs:2:5\n    |\n LL |     format_args_nl!(\"\");"}, {"sha": "c65f8d87a6a2356f32917dd451368645e4ee4a17", "filename": "src/test/ui/feature-gates/feature-gate-global_asm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-global_asm.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `global_asm!` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'global_asm': `global_asm!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-global_asm.rs:1:1\n    |\n LL | global_asm!(\"\");"}, {"sha": "f6a07616c5308bd683724696b9f4f6140e7db8bd", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `log_syntax!` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-log_syntax.rs:2:5\n    |\n LL |     log_syntax!()"}, {"sha": "cfc2beb80879cacd65deb00a32e9df4fbe13f9b1", "filename": "src/test/ui/feature-gates/feature-gate-log_syntax2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-log_syntax2.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `log_syntax!` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'log_syntax': `log_syntax!` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-log_syntax2.rs:4:22\n    |\n LL |     println!(\"{:?}\", log_syntax!());"}, {"sha": "e08b173ae84ad0ffc2241314aef57b735224480b", "filename": "src/test/ui/feature-gates/feature-gate-trace_macros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-trace_macros.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/feature-gate-trace_macros.rs:2:5\n    |\n LL |     trace_macros!(true);"}, {"sha": "053806ead2d12bcc50c1923793923ac3a21bb94d", "filename": "src/test/ui/rust-unstable-column-gated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.rs?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     println!(\"{}\", __rust_unstable_column!());\n-    //~^ERROR the __rust_unstable_column macro is unstable\n+    //~^ ERROR use of unstable library feature '__rust_unstable_column'\n }"}, {"sha": "70b3654b5af7e5446d718e81f5df4597dba0f53d", "filename": "src/test/ui/rust-unstable-column-gated.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-unstable-column-gated.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,8 +1,11 @@\n-error: the __rust_unstable_column macro is unstable\n+error[E0658]: use of unstable library feature '__rust_unstable_column': internal implementation detail of the `column` macro\n   --> $DIR/rust-unstable-column-gated.rs:2:20\n    |\n LL |     println!(\"{}\", __rust_unstable_column!());\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(__rust_unstable_column)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "18745e9ab5a6c90de863e11c58a21e150d29958f", "filename": "src/test/ui/trace_macros-gate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1ee0ce82cba66305f03725fb73ad381349a9b8e4/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrace_macros-gate.stderr?ref=1ee0ce82cba66305f03725fb73ad381349a9b8e4", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:4:5\n    |\n LL |     trace_macros!();\n@@ -13,7 +13,7 @@ error: trace_macros! accepts only `true` or `false`\n LL |     trace_macros!();\n    |     ^^^^^^^^^^^^^^^^\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:6:5\n    |\n LL |     trace_macros!(true);\n@@ -22,7 +22,7 @@ LL |     trace_macros!(true);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:7:5\n    |\n LL |     trace_macros!(false);\n@@ -31,7 +31,7 @@ LL |     trace_macros!(false);\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29598\n    = help: add #![feature(trace_macros)] to the crate attributes to enable\n \n-error[E0658]: `trace_macros` is not stable enough for use and is subject to change\n+error[E0658]: use of unstable library feature 'trace_macros': `trace_macros` is not stable enough for use and is subject to change\n   --> $DIR/trace_macros-gate.rs:10:26\n    |\n LL |         ($x: ident) => { trace_macros!($x) }"}]}