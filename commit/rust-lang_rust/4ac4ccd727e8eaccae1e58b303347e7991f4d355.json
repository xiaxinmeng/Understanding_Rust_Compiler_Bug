{"sha": "4ac4ccd727e8eaccae1e58b303347e7991f4d355", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYzRjY2Q3MjdlOGVhY2NhZTFlNThiMzAzMzQ3ZTc5OTFmNGQzNTU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-19T16:59:19Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:22:46Z"}, "message": "Generalise JobOwner::try_start.", "tree": {"sha": "85adbbf0f90e472f6d6abc467b1d2fdd09af0c4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85adbbf0f90e472f6d6abc467b1d2fdd09af0c4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ac4ccd727e8eaccae1e58b303347e7991f4d355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac4ccd727e8eaccae1e58b303347e7991f4d355", "html_url": "https://github.com/rust-lang/rust/commit/4ac4ccd727e8eaccae1e58b303347e7991f4d355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ac4ccd727e8eaccae1e58b303347e7991f4d355/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "decfd704fe17b4da16d57cb133ff3d29f9bcf295", "url": "https://api.github.com/repos/rust-lang/rust/commits/decfd704fe17b4da16d57cb133ff3d29f9bcf295", "html_url": "https://github.com/rust-lang/rust/commit/decfd704fe17b4da16d57cb133ff3d29f9bcf295"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "75420634a5a0e7a8638c4879770a6181e0695714", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4ac4ccd727e8eaccae1e58b303347e7991f4d355/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ac4ccd727e8eaccae1e58b303347e7991f4d355/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=4ac4ccd727e8eaccae1e58b303347e7991f4d355", "patch": "@@ -162,9 +162,9 @@ where\n     id: QueryJobId<CTX::DepKind>,\n }\n \n-impl<'tcx, C> JobOwner<'tcx, TyCtxt<'tcx>, C>\n+impl<'tcx, CTX: QueryContext, C> JobOwner<'tcx, CTX, C>\n where\n-    C: QueryCache<TyCtxt<'tcx>> + 'tcx,\n+    C: QueryCache<CTX>,\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n@@ -177,14 +177,16 @@ where\n     /// This function is inlined because that results in a noticeable speed-up\n     /// for some compile-time benchmarks.\n     #[inline(always)]\n-    fn try_start<'a, 'b, Q>(\n-        tcx: TyCtxt<'tcx>,\n+    fn try_start<'a, 'b, Q, K>(\n+        tcx: CTX,\n         span: Span,\n         key: &C::Key,\n-        mut lookup: QueryLookup<'a, TyCtxt<'tcx>, C::Key, C::Sharded>,\n-    ) -> TryGetJob<'b, TyCtxt<'tcx>, C>\n+        mut lookup: QueryLookup<'a, CTX, C::Key, C::Sharded>,\n+    ) -> TryGetJob<'b, CTX, C>\n     where\n-        Q: QueryDescription<TyCtxt<'tcx>, Key = C::Key, Value = C::Value, Cache = C>,\n+        K: DepKind,\n+        Q: QueryDescription<CTX, Key = C::Key, Value = C::Value, Cache = C>,\n+        CTX: QueryContext<DepKind = K>,\n     {\n         let lock = &mut *lookup.lock;\n \n@@ -196,7 +198,7 @@ where\n                         // in another thread has completed. Record how long we wait in the\n                         // self-profiler.\n                         let _query_blocked_prof_timer = if cfg!(parallel_compiler) {\n-                            Some(tcx.prof.query_blocked())\n+                            Some(tcx.profiler().query_blocked())\n                         } else {\n                             None\n                         };\n@@ -219,7 +221,7 @@ where\n \n                 let global_id = QueryJobId::new(id, lookup.shard, Q::DEP_KIND);\n \n-                let job = tls::with_related_context(tcx, |icx| QueryJob::new(id, span, icx.query));\n+                let job = tcx.read_query_job(|query| QueryJob::new(id, span, query));\n \n                 entry.insert(QueryResult::Started(job));\n \n@@ -262,14 +264,7 @@ where\n             return TryGetJob::JobCompleted(cached);\n         }\n     }\n-}\n \n-impl<'tcx, CTX: QueryContext, C> JobOwner<'tcx, CTX, C>\n-where\n-    C: QueryCache<CTX>,\n-    C::Key: Eq + Hash + Clone + Debug,\n-    C::Value: Clone,\n-{\n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n     #[inline(always)]\n@@ -573,7 +568,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             <Q::Cache as QueryCache<TyCtxt<'tcx>>>::Sharded,\n         >,\n     ) -> Q::Value {\n-        let job = match JobOwner::try_start::<Q>(self, span, &key, lookup) {\n+        let job = match JobOwner::try_start::<Q, _>(self, span, &key, lookup) {\n             TryGetJob::NotYetStarted(job) => job,\n             TryGetJob::Cycle(result) => return result,\n             #[cfg(parallel_compiler)]\n@@ -832,7 +827,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 // Cache hit, do nothing\n             },\n             |key, lookup| {\n-                let job = match JobOwner::try_start::<Q>(self, span, &key, lookup) {\n+                let job = match JobOwner::try_start::<Q, _>(self, span, &key, lookup) {\n                     TryGetJob::NotYetStarted(job) => job,\n                     TryGetJob::Cycle(_) => return,\n                     #[cfg(parallel_compiler)]"}]}