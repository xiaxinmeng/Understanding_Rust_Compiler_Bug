{"sha": "5c9d7c2072ef93adf9912643d025e48ac832c3a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOWQ3YzIwNzJlZjkzYWRmOTkxMjY0M2QwMjVlNDhhYzgzMmMzYTY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-13T14:31:42Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@gmail", "date": "2013-08-16T20:30:42Z"}, "message": "debuginfo: Added test cases for generic structs and enums.\n\nAlso, always set no_monomorphic_collapse flags if debuginfo is generated.", "tree": {"sha": "13920d12e3448ec0e4a36fd92c617421b5ac60b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13920d12e3448ec0e4a36fd92c617421b5ac60b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c9d7c2072ef93adf9912643d025e48ac832c3a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c9d7c2072ef93adf9912643d025e48ac832c3a6", "html_url": "https://github.com/rust-lang/rust/commit/5c9d7c2072ef93adf9912643d025e48ac832c3a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c9d7c2072ef93adf9912643d025e48ac832c3a6/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c49c2df763f8cf1817bc651582deba8bb35a29d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c49c2df763f8cf1817bc651582deba8bb35a29d", "html_url": "https://github.com/rust-lang/rust/commit/6c49c2df763f8cf1817bc651582deba8bb35a29d"}], "stats": {"total": 219, "additions": 213, "deletions": 6}, "files": [{"sha": "5227d68774b5ffad235e4aad1df0b233bd8a69ff", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=5c9d7c2072ef93adf9912643d025e48ac832c3a6", "patch": "@@ -691,6 +691,14 @@ pub fn build_session_options(binary: @str,\n     let extra_debuginfo = debugging_opts & session::extra_debug_info != 0;\n     let debuginfo = debugging_opts & session::debug_info != 0 ||\n         extra_debuginfo;\n+\n+    // If debugging info is generated, do not collapse monomorphized function instances.\n+    // Functions with equivalent llvm code still need separate debugging descriptions because names\n+    // might differ.\n+    if debuginfo {\n+        debugging_opts |= session::no_monomorphic_collapse;\n+    }\n+\n     let statik = debugging_opts & session::statik != 0;\n \n     let addl_lib_search_paths = getopts::opt_strs(matches, \"L\").map(|s| Path(*s));"}, {"sha": "2bf79a1c75799b91981f70b8c5a88af5b8c080a8", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=5c9d7c2072ef93adf9912643d025e48ac832c3a6", "patch": "@@ -256,9 +256,10 @@ pub fn create_argument_metadata(bcx: @mut Block,\n     }\n }\n \n-/// Sets the current debug location at the beginning of the span\n+/// Sets the current debug location at the beginning of the span.\n ///\n-/// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...)\n+/// Maps to a call to llvm::LLVMSetCurrentDebugLocation(...). The node_id parameter is used to\n+/// reliably find the correct visibility scope for the code position.\n pub fn update_source_pos(fcx: &FunctionContext,\n                          node_id: ast::NodeId,\n                          span: span) {\n@@ -357,6 +358,7 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n         llvm::LLVMDIBuilderCreateSubroutineType(DIB(cx), file_metadata, fn_signature)\n     };\n \n+    // get_template_parameters() will append a `<...>` clause to the function name if necessary.\n     let mut function_name = cx.sess.str_of(ident).to_owned();\n     let template_parameters = get_template_parameters(fcx,\n                                                       generics,\n@@ -404,8 +406,8 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n             }\n             _ => cx.sess.span_bug(span,\n                     fmt!(\"debuginfo::create_function_metadata() - \\\n-                         FunctionContext::entry_bcx::node_info points to wrong type of ast_map entry. \\\n-                         Expected: ast_map::node_block, actual: %?\", *entry_block))\n+                         FunctionContext::entry_bcx::node_info points to wrong type of ast_map \\\n+                         entry. Expected: ast_map::node_block, actual: %?\", *entry_block))\n         }\n \n         fcx.debug_context = Some(fn_debug_context);\n@@ -508,7 +510,7 @@ pub fn create_function_metadata(fcx: &mut FunctionContext) -> DISubprogram {\n                         let actual_type_name = ty_to_str(cx.tcx, actual_type);\n                         name_to_append_suffix_to.push_str(actual_type_name);\n                         if index != generics.ty_params.len() - 1 {\n-                            name_to_append_suffix_to.push_str(\", \");\n+                            name_to_append_suffix_to.push_str(\",\");\n                         }\n \n                         do cx.sess.str_of(ident).to_c_str().with_ref |name| {"}, {"sha": "77ac7895366d78bb51f3db2857c923e30721aaa7", "filename": "src/test/debug-info/generic-struct-style-enum.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct-style-enum.rs?ref=5c9d7c2072ef93adf9912643d025e48ac832c3a6", "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print union on\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print case1\n+// check:$1 = {{Case1, a = 0, b = 31868, c = 31868, d = 31868, e = 31868}, {Case1, a = 0, b = 2088533116, c = 2088533116}, {Case1, a = 0, b = 8970181431921507452}}\n+\n+// debugger:print case2\n+// check:$2 = {{Case2, a = 0, b = 4369, c = 4369, d = 4369, e = 4369}, {Case2, a = 0, b = 286331153, c = 286331153}, {Case2, a = 0, b = 1229782938247303441}}\n+\n+// debugger:print case3\n+// check:$3 = {{Case3, a = 0, b = 22873, c = 22873, d = 22873, e = 22873}, {Case3, a = 0, b = 1499027801, c = 1499027801}, {Case3, a = 0, b = 6438275382588823897}}\n+\n+// debugger:print univariant\n+// check:$4 = {a = -1}\n+\n+// NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n+// substituted with something of size `xx` bits and the same alignment as an integer type of the\n+// same size.\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum Regular<T16, T32, T64> {\n+    Case1 { a: T64, b: T16, c: T16, d: T16, e: T16},\n+    Case2 { a: T64, b: T32, c: T32},\n+    Case3 { a: T64, b: T64 }\n+}\n+\n+enum Univariant<T> {\n+    TheOnlyCase { a: T }\n+}\n+\n+fn main() {\n+\n+    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // repeated byte. This way each interpretation of the union should look the same, no matter if\n+    // this is a big or little endian machine.\n+\n+    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+    // 0b01111100011111000111110001111100 = 2088533116\n+    // 0b0111110001111100 = 31868\n+    // 0b01111100 = 124\n+    let case1: Regular<u16, u32, i64> = Case1 { a: 0, b: 31868, c: 31868, d: 31868, e: 31868 };\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let case2: Regular<i16, u32, i64>  = Case2 { a: 0, b: 286331153, c: 286331153 };\n+\n+    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n+    // 0b01011001010110010101100101011001 = 1499027801\n+    // 0b0101100101011001 = 22873\n+    // 0b01011001 = 89\n+    let case3: Regular<u16, i32, u64>  = Case3 { a: 0, b: 6438275382588823897 };\n+\n+    let univariant = TheOnlyCase { a: -1 };\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}"}, {"sha": "0044def2707d465ae10ab65c9fe994878ce1e274", "filename": "src/test/debug-info/generic-struct.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-struct.rs?ref=5c9d7c2072ef93adf9912643d025e48ac832c3a6", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:break zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print int_int\n+// check:$1 = {key = 0, value = 1}\n+// debugger:print int_float\n+// check:$2 = {key = 2, value = 3.5}\n+// debugger:print float_int\n+// check:$3 = {key = 4.5, value = 5}\n+// debugger:print float_int_float\n+// check:$4 = {key = 6.5, value = {key = 7, value = 8.5}}\n+\n+struct AGenericStruct<TKey, TValue> {\n+    key: TKey,\n+    value: TValue\n+}\n+\n+fn main() {\n+\n+    let int_int = AGenericStruct { key: 0, value: 1 };\n+    let int_float = AGenericStruct { key: 2, value: 3.5 };\n+    let float_int = AGenericStruct { key: 4.5, value: 5 };\n+    let float_int_float = AGenericStruct { key: 6.5, value: AGenericStruct { key: 7, value: 8.5 } };\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}"}, {"sha": "d6350e033f0ce3a05dd7e7c064b651826f774b79", "filename": "src/test/debug-info/generic-tuple-style-enum.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fgeneric-tuple-style-enum.rs?ref=5c9d7c2072ef93adf9912643d025e48ac832c3a6", "patch": "@@ -0,0 +1,78 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n+\n+// compile-flags:-Z extra-debug-info\n+// debugger:set print union on\n+// debugger:break zzz\n+// debugger:run\n+// debugger:finish\n+\n+// debugger:print case1\n+// check:$1 = {{Case1, 0, 31868, 31868, 31868, 31868}, {Case1, 0, 2088533116, 2088533116}, {Case1, 0, 8970181431921507452}}\n+\n+// debugger:print case2\n+// check:$2 = {{Case2, 0, 4369, 4369, 4369, 4369}, {Case2, 0, 286331153, 286331153}, {Case2, 0, 1229782938247303441}}\n+\n+// debugger:print case3\n+// check:$3 = {{Case3, 0, 22873, 22873, 22873, 22873}, {Case3, 0, 1499027801, 1499027801}, {Case3, 0, 6438275382588823897}}\n+\n+// debugger:print univariant\n+// check:$4 = {-1}\n+\n+\n+// NOTE: This is a copy of the non-generic test case. The `Txx` type parameters have to be\n+// substituted with something of size `xx` bits and the same alignment as an integer type of the\n+// same size.\n+\n+// The first element is to ensure proper alignment, irrespective of the machines word size. Since\n+// the size of the discriminant value is machine dependent, this has be taken into account when\n+// datatype layout should be predictable as in this case.\n+enum Regular<T16, T32, T64> {\n+    Case1(T64, T16, T16, T16, T16),\n+    Case2(T64, T32, T32),\n+    Case3(T64, T64)\n+}\n+\n+enum Univariant<T64> {\n+    TheOnlyCase(T64)\n+}\n+\n+fn main() {\n+\n+    // In order to avoid endianess trouble all of the following test values consist of a single\n+    // repeated byte. This way each interpretation of the union should look the same, no matter if\n+    // this is a big or little endian machine.\n+\n+    // 0b0111110001111100011111000111110001111100011111000111110001111100 = 8970181431921507452\n+    // 0b01111100011111000111110001111100 = 2088533116\n+    // 0b0111110001111100 = 31868\n+    // 0b01111100 = 124\n+    let case1: Regular<u16, u32, u64> = Case1(0_u64, 31868_u16, 31868_u16, 31868_u16, 31868_u16);\n+\n+    // 0b0001000100010001000100010001000100010001000100010001000100010001 = 1229782938247303441\n+    // 0b00010001000100010001000100010001 = 286331153\n+    // 0b0001000100010001 = 4369\n+    // 0b00010001 = 17\n+    let case2: Regular<i16, i32, i64> = Case2(0_i64, 286331153_i32, 286331153_i32);\n+\n+    // 0b0101100101011001010110010101100101011001010110010101100101011001 = 6438275382588823897\n+    // 0b01011001010110010101100101011001 = 1499027801\n+    // 0b0101100101011001 = 22873\n+    // 0b01011001 = 89\n+    let case3: Regular<i16, i32, i64> = Case3(0_i64, 6438275382588823897_i64);\n+\n+    let univariant = TheOnlyCase(-1_i64);\n+\n+    zzz();\n+}\n+\n+fn zzz() {()}"}, {"sha": "77d7746e2df86b94eb509d87fbd5e3c56f2bc566", "filename": "src/test/debug-info/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c9d7c2072ef93adf9912643d025e48ac832c3a6/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct-style-enum.rs?ref=5c9d7c2072ef93adf9912643d025e48ac832c3a6", "patch": "@@ -70,4 +70,4 @@ fn main() {\n     zzz();\n }\n \n-fn zzz() {()}\n\\ No newline at end of file\n+fn zzz() {()}"}]}