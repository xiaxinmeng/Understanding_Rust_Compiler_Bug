{"sha": "3fdf3cb80cc262e71461b6809b0e320a1958b03c", "node_id": "C_kwDOAAsO6NoAKDNmZGYzY2I4MGNjMjYyZTcxNDYxYjY4MDliMGUzMjBhMTk1OGIwM2M", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-08T00:13:41Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-08T00:13:41Z"}, "message": "Adjust wording", "tree": {"sha": "bd331bf189b6b6801a5f6f673ff1d1fc0d1ea834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd331bf189b6b6801a5f6f673ff1d1fc0d1ea834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fdf3cb80cc262e71461b6809b0e320a1958b03c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fdf3cb80cc262e71461b6809b0e320a1958b03c", "html_url": "https://github.com/rust-lang/rust/commit/3fdf3cb80cc262e71461b6809b0e320a1958b03c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fdf3cb80cc262e71461b6809b0e320a1958b03c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750f04d30973b5615e54ee27c7336846d19943ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/750f04d30973b5615e54ee27c7336846d19943ee", "html_url": "https://github.com/rust-lang/rust/commit/750f04d30973b5615e54ee27c7336846d19943ee"}], "stats": {"total": 145, "additions": 77, "deletions": 68}, "files": [{"sha": "e4f918b4b0eaebce14bb850d5da16da1115b5fde", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1626,16 +1626,16 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n         if Some(pred.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output() {\n             Some(format!(\n-                \"expected `{self_ty}` to be a {fn_kind} that returns `{expected_ty}`, but it actually returns `{normalized_ty}`\",\n+                \"expected `{self_ty}` to be a {fn_kind} that returns `{expected_ty}`, but it returns `{normalized_ty}`\",\n                 fn_kind = self_ty.prefix_string(self.tcx)\n             ))\n         } else if Some(trait_def_id) == self.tcx.lang_items().future_trait() {\n             Some(format!(\n-                \"expected `{self_ty}` to be a future that yields `{expected_ty}`, but it actually yields `{normalized_ty}`\"\n+                \"expected `{self_ty}` to be a future that resolves to `{expected_ty}`, but it resolves to `{normalized_ty}`\"\n             ))\n         } else if Some(trait_def_id) == self.tcx.get_diagnostic_item(sym::Iterator) {\n             Some(format!(\n-                \"expected `{self_ty}` to be an iterator of `{expected_ty}`, but it actually returns items of `{normalized_ty}`\"\n+                \"expected `{self_ty}` to be an iterator that yields `{expected_ty}`, but it yields `{normalized_ty}`\"\n             ))\n         } else {\n             None"}, {"sha": "26b9f4b3a92660ea78b923adb3884545ea4eb81a", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -4,5 +4,5 @@ trait I32Iterator = Iterator<Item = i32>;\n \n fn main() {\n     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();\n-    //~^ ERROR expected `std::vec::IntoIter<u32>` to be an iterator of `i32`, but it actually returns items of `u32`\n+    //~^ ERROR expected `std::vec::IntoIter<u32>` to be an iterator that yields `i32`, but it yields `u32`\n }"}, {"sha": "2d25f68de44ad1c34a7c36976ce21a9300699deb", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: expected `std::vec::IntoIter<u32>` to be an iterator of `i32`, but it actually returns items of `u32`\n+error[E0271]: expected `std::vec::IntoIter<u32>` to be an iterator that yields `i32`, but it yields `u32`\n   --> $DIR/associated-types-overridden-binding-2.rs:6:43\n    |\n LL |     let _: &dyn I32Iterator<Item = u32> = &vec![42].into_iter();"}, {"sha": "446212ca767c430206b8609e1526925a35f06c35", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -15,7 +15,7 @@ fn return_targets_async_block_not_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n+    //~^ ERROR expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n }\n \n async fn return_targets_async_block_not_async_fn() -> u8 {\n@@ -24,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n+    //~^ ERROR expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n }\n \n fn no_break_in_async_block() {\n@@ -42,7 +42,9 @@ fn no_break_in_async_block_even_with_outer_loop() {\n }\n \n struct MyErr;\n-fn err() -> Result<u8, MyErr> { Err(MyErr) }\n+fn err() -> Result<u8, MyErr> {\n+    Err(MyErr)\n+}\n \n fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n     //~^ ERROR mismatched types"}, {"sha": "2a08d5d6ce5f8305aa24a50bb95f9445e7d00701", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n+error[E0271]: expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -47,7 +47,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: expected `impl Future<Output = u8>` to be a future that yields `()`, but it actually yields `u8`\n+error[E0271]: expected `impl Future<Output = u8>` to be a future that resolves to `()`, but it resolves to `u8`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -56,7 +56,7 @@ LL |     let _: &dyn Future<Output = ()> = &block;\n    = note: required for the cast from `impl Future<Output = u8>` to the object type `dyn Future<Output = ()>`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:47:44\n+  --> $DIR/async-block-control-flow-static-semantics.rs:49:44\n    |\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`\n@@ -67,7 +67,7 @@ LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/async-block-control-flow-static-semantics.rs:56:50\n+  --> $DIR/async-block-control-flow-static-semantics.rs:58:50\n    |\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`"}, {"sha": "ae21dbce011398b060b4e9fd62a659d24ef74a76", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -38,9 +38,13 @@ fn main() {\n     let v = Unit2.m(\n         //~^ ERROR type mismatch\n         L {\n-        //~^ ERROR to be a closure that returns `Unit3`, but it actually returns `Unit4`\n-            f : |x| { drop(x); Unit4 }\n-        });\n+            //~^ ERROR to be a closure that returns `Unit3`, but it returns `Unit4`\n+            f: |x| {\n+                drop(x);\n+                Unit4\n+            },\n+        },\n+    );\n }\n \n impl<'a> Ty<'a> for Unit2 {"}, {"sha": "8365fd0c79e1b52031fdda59825593ec9c5026b9", "filename": "src/test/ui/hrtb/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-62203-hrtb-ice.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:38:19\n    |\n LL |     let v = Unit2.m(\n-   |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+   |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14\n@@ -22,19 +22,22 @@ LL |     where\n LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n    |                                                   ^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n-error[E0271]: expected `[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]` to be a closure that returns `Unit3`, but it actually returns `Unit4`\n+error[E0271]: expected `[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]` to be a closure that returns `Unit3`, but it returns `Unit4`\n   --> $DIR/issue-62203-hrtb-ice.rs:40:9\n    |\n LL |       let v = Unit2.m(\n    |                     - required by a bound introduced by this call\n LL |\n LL | /         L {\n LL | |\n-LL | |             f : |x| { drop(x); Unit4 }\n-LL | |         });\n+LL | |             f: |x| {\n+LL | |                 drop(x);\n+LL | |                 Unit4\n+LL | |             },\n+LL | |         },\n    | |_________^ expected struct `Unit3`, found struct `Unit4`\n    |\n-note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:17: 42:20]>`\n+note: required because of the requirements on the impl of `for<'r> T0<'r, (&'r u8,)>` for `L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]>`\n   --> $DIR/issue-62203-hrtb-ice.rs:17:16\n    |\n LL | impl<'a, A, T> T0<'a, A> for L<T>"}, {"sha": "90d1cd3798a83b2ae89a2b7cc4a173c2d3e235f2", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -7,7 +7,7 @@ type F = impl core::future::Future<Output = u8>;\n struct Bug {\n     V1: [(); {\n         fn concrete_use() -> F {\n-            //~^ ERROR expected `impl Future<Output = ()>` to be a future that yields `u8`, but it actually yields `()`\n+            //~^ ERROR expected `impl Future<Output = ()>` to be a future that resolves to `u8`, but it resolves to `()`\n             async {}\n         }\n         let f: F = async { 1 };"}, {"sha": "9a0ffbc89d92e6ce1321fd371f53f39cc035b52e", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -16,7 +16,7 @@ LL |         let f: F = async { 1 };\n LL |     }],\n    |     - value is dropped here\n \n-error[E0271]: expected `impl Future<Output = ()>` to be a future that yields `u8`, but it actually yields `()`\n+error[E0271]: expected `impl Future<Output = ()>` to be a future that resolves to `u8`, but it resolves to `()`\n   --> $DIR/issue-78722.rs:9:30\n    |\n LL |         fn concrete_use() -> F {"}, {"sha": "e5640f5ab53b192ab352109e039dc3b4616a59fe", "filename": "src/test/ui/intrinsics/const-eval-select-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -27,7 +27,7 @@ fn baz(n: bool) -> i32 {\n \n const fn return_ty_mismatch() {\n     const_eval_select((1,), foo, bar);\n-    //~^ ERROR expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it actually returns `bool`\n+    //~^ ERROR expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it returns `bool`\n }\n \n const fn args_ty_mismatch() {"}, {"sha": "e7b7e4a4a910c85d9251fc6e32959f6a1c0a7ee1", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -51,7 +51,7 @@ note: required by a bound in `const_eval_select`\n LL |     G: FnOnce<ARG, Output = RET> + ~const Destruct,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n-error[E0271]: expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it actually returns `bool`\n+error[E0271]: expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it returns `bool`\n   --> $DIR/const-eval-select-bad.rs:29:5\n    |\n LL |     const_eval_select((1,), foo, bar);"}, {"sha": "472a95d4636bc16e39b756a08df4aacb00a29782", "filename": "src/test/ui/issues/issue-31173.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -3,12 +3,13 @@ use std::vec::IntoIter;\n pub fn get_tok(it: &mut IntoIter<u8>) {\n     let mut found_e = false;\n \n-    let temp: Vec<u8> = it.take_while(|&x| {\n-        found_e = true;\n-        false\n-    })\n+    let temp: Vec<u8> = it\n+        .take_while(|&x| {\n+            found_e = true;\n+            false\n+        })\n         .cloned()\n-        //~^ ERROR to be an iterator of `&_`, but it actually returns items of `u8`\n+        //~^ ERROR to be an iterator that yields `&_`, but it yields `u8`\n         .collect(); //~ ERROR the method\n }\n "}, {"sha": "e89105540dfb22fac332455c81ced467fc02bf19", "filename": "src/test/ui/issues/issue-31173.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31173.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,5 +1,5 @@\n-error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>` to be an iterator of `&_`, but it actually returns items of `u8`\n-  --> $DIR/issue-31173.rs:10:10\n+error[E0271]: expected `TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>` to be an iterator that yields `&_`, but it yields `u8`\n+  --> $DIR/issue-31173.rs:11:10\n    |\n LL |         .cloned()\n    |          ^^^^^^ expected reference, found `u8`\n@@ -12,11 +12,11 @@ note: required by a bound in `cloned`\n LL |         Self: Sized + Iterator<Item = &'a T>,\n    |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n-error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>`, but its trait bounds were not satisfied\n-  --> $DIR/issue-31173.rs:12:10\n+error[E0599]: the method `collect` exists for struct `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-31173.rs:13:10\n    |\n LL |         .collect();\n-   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>` due to unsatisfied trait bounds\n+   |          ^^^^^^^ method cannot be called on `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>` due to unsatisfied trait bounds\n    |\n   ::: $SRC_DIR/core/src/iter/adapters/cloned.rs:LL:COL\n    |\n@@ -29,10 +29,10 @@ LL | pub struct TakeWhile<I, P> {\n    | -------------------------- doesn't satisfy `<_ as Iterator>::Item = &_`\n    |\n    = note: the following trait bounds were not satisfied:\n-           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]> as Iterator>::Item = &_`\n-           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n-           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n-           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:6:39: 6:43]>>: Iterator`\n+           `<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]> as Iterator>::Item = &_`\n+           which is required by `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n+           `Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n+           which is required by `&mut Cloned<TakeWhile<&mut std::vec::IntoIter<u8>, [closure@$DIR/issue-31173.rs:7:21: 7:25]>>: Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8430e85df871514f1269f49b6c7b9bccfe2b6efa", "filename": "src/test/ui/issues/issue-33941.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -3,7 +3,7 @@\n use std::collections::HashMap;\n \n fn main() {\n-    for _ in HashMap::new().iter().cloned() {} //~ ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n-    //~^ ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n-    //~| ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n+    for _ in HashMap::new().iter().cloned() {} //~ ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n+    //~^ ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n+    //~| ERROR expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n }"}, {"sha": "565a7fef379411cdd21ad61145fe9fb38c1eb2ca", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n+error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:36\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n@@ -12,7 +12,7 @@ note: required by a bound in `cloned`\n LL |         Self: Sized + Iterator<Item = &'a T>,\n    |                                ^^^^^^^^^^^^ required by this bound in `cloned`\n \n-error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n+error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}\n@@ -23,7 +23,7 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n \n-error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator of `&_`, but it actually returns items of `(&_, &_)`\n+error[E0271]: expected `std::collections::hash_map::Iter<'_, _, _>` to be an iterator that yields `&_`, but it yields `(&_, &_)`\n   --> $DIR/issue-33941.rs:6:14\n    |\n LL |     for _ in HashMap::new().iter().cloned() {}"}, {"sha": "45cf3723483f3a05f0ca60546bc6c949bb7df68a", "filename": "src/test/ui/never_type/fallback-closure-wrap.fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.fallback.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: expected `[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]` to be a closure that returns `()`, but it actually returns `!`\n+error[E0271]: expected `[closure@$DIR/fallback-closure-wrap.rs:18:40: 18:47]` to be a closure that returns `()`, but it returns `!`\n   --> $DIR/fallback-closure-wrap.rs:18:31\n    |\n LL |       let error = Closure::wrap(Box::new(move || {"}, {"sha": "35052da6760b64ecfe443cbc67eed82304b30aba", "filename": "src/test/ui/never_type/fallback-closure-wrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Ffallback-closure-wrap.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -16,7 +16,7 @@ use std::marker::PhantomData;\n \n fn main() {\n     let error = Closure::wrap(Box::new(move || {\n-        //[fallback]~^ to be a closure that returns `()`, but it actually returns `!`\n+        //[fallback]~^ to be a closure that returns `()`, but it returns `!`\n         panic!(\"Can't connect to server.\");\n     }) as Box<dyn FnMut()>);\n }"}, {"sha": "d7d6241ef708cda1a68a922940d7a3963417a6ba", "filename": "src/test/ui/traits/assoc-type-in-superbad.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -4,14 +4,13 @@\n \n use std::vec::IntoIter;\n \n-pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n+pub trait Foo: Iterator<Item = <Self as Foo>::Key> {\n     type Key;\n }\n \n impl Foo for IntoIter<i32> {\n     type Key = u32;\n-    //~^ ERROR expected `std::vec::IntoIter<i32>` to be an iterator of `u32`, but it actually returns items of `i32`\n+    //~^ ERROR expected `std::vec::IntoIter<i32>` to be an iterator that yields `u32`, but it yields `i32`\n }\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "3e2d9d9038aa7c1e6b8655cd3fdf668cc42f6190", "filename": "src/test/ui/traits/assoc-type-in-superbad.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassoc-type-in-superbad.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: expected `std::vec::IntoIter<i32>` to be an iterator of `u32`, but it actually returns items of `i32`\n+error[E0271]: expected `std::vec::IntoIter<i32>` to be an iterator that yields `u32`, but it yields `i32`\n   --> $DIR/assoc-type-in-superbad.rs:12:16\n    |\n LL |     type Key = u32;\n@@ -7,8 +7,8 @@ LL |     type Key = u32;\n note: required by a bound in `Foo`\n   --> $DIR/assoc-type-in-superbad.rs:7:25\n    |\n-LL | pub trait Foo: Iterator<Item=<Self as Foo>::Key> {\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo`\n+LL | pub trait Foo: Iterator<Item = <Self as Foo>::Key> {\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "24b3a045856a6accd5656b25a2531e4afae89465", "filename": "src/test/ui/type-alias-impl-trait/issue-57961.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -8,7 +8,7 @@ trait Foo {\n \n impl Foo for () {\n     type Bar = std::vec::IntoIter<u32>;\n-    //~^ ERROR expected `std::vec::IntoIter<u32>` to be an iterator of `X`, but it actually returns items of `u32`\n+    //~^ ERROR expected `std::vec::IntoIter<u32>` to be an iterator that yields `X`, but it yields `u32`\n }\n \n fn incoherent() {"}, {"sha": "fb40895c49f15d13e28a81527f3ef4ac2e159014", "filename": "src/test/ui/type-alias-impl-trait/issue-57961.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-57961.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: expected `std::vec::IntoIter<u32>` to be an iterator of `X`, but it actually returns items of `u32`\n+error[E0271]: expected `std::vec::IntoIter<u32>` to be an iterator that yields `X`, but it yields `u32`\n   --> $DIR/issue-57961.rs:10:16\n    |\n LL | type X = impl Sized;"}, {"sha": "32c2f9ed51edf3476df927c63f6465635a7946a0", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,13 +1,11 @@\n // edition:2018\n \n-type AsyncFnPtr = Box<\n-    dyn Fn() -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,\n->;\n+type AsyncFnPtr = Box<dyn Fn() -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>>;\n \n async fn test() {}\n \n #[allow(unused_must_use)]\n fn main() {\n     Box::new(test) as AsyncFnPtr;\n-    //~^ ERROR expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it actually returns `impl Future<Output = ()>`\n+    //~^ ERROR expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n }"}, {"sha": "92d01eb0d3d5ea0a1128208af5075fff0435b3e2", "filename": "src/test/ui/type-alias-impl-trait/issue-98604.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98604.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,11 +1,11 @@\n-error[E0271]: expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it actually returns `impl Future<Output = ()>`\n-  --> $DIR/issue-98604.rs:11:5\n+error[E0271]: expected `fn() -> impl Future<Output = ()> {test}` to be a fn item that returns `Pin<Box<(dyn Future<Output = ()> + 'static)>>`, but it returns `impl Future<Output = ()>`\n+  --> $DIR/issue-98604.rs:9:5\n    |\n LL |     Box::new(test) as AsyncFnPtr;\n    |     ^^^^^^^^^^^^^^ expected struct `Pin`, found opaque type\n    |\n note: while checking the return type of the `async fn`\n-  --> $DIR/issue-98604.rs:7:17\n+  --> $DIR/issue-98604.rs:5:17\n    |\n LL | async fn test() {}\n    |                 ^ checked the `Output` of this `async fn`, found opaque type"}, {"sha": "1f89af0457653b066d09f2c0455f9cdf915329ff", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.rs?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,8 +1,10 @@\n-fn hi() -> impl Sized { std::ptr::null::<u8>() }\n+fn hi() -> impl Sized {\n+    std::ptr::null::<u8>()\n+}\n \n fn main() {\n     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);\n-    //~^ ERROR expected `fn() -> impl Sized {hi}` to be a fn item that returns `Box<u8>`, but it actually returns `impl Sized`\n+    //~^ ERROR expected `fn() -> impl Sized {hi}` to be a fn item that returns `Box<u8>`, but it returns `impl Sized`\n     let boxed = b();\n     let null = *boxed;\n     println!(\"{null:?}\");"}, {"sha": "916a58451baa2f8b5c7d0f1a3414e98ae51faa02", "filename": "src/test/ui/type-alias-impl-trait/issue-98608.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fdf3cb80cc262e71461b6809b0e320a1958b03c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-98608.stderr?ref=3fdf3cb80cc262e71461b6809b0e320a1958b03c", "patch": "@@ -1,7 +1,7 @@\n-error[E0271]: expected `fn() -> impl Sized {hi}` to be a fn item that returns `Box<u8>`, but it actually returns `impl Sized`\n-  --> $DIR/issue-98608.rs:4:39\n+error[E0271]: expected `fn() -> impl Sized {hi}` to be a fn item that returns `Box<u8>`, but it returns `impl Sized`\n+  --> $DIR/issue-98608.rs:6:39\n    |\n-LL | fn hi() -> impl Sized { std::ptr::null::<u8>() }\n+LL | fn hi() -> impl Sized {\n    |            ---------- the found opaque type\n ...\n LL |     let b: Box<dyn Fn() -> Box<u8>> = Box::new(hi);"}]}