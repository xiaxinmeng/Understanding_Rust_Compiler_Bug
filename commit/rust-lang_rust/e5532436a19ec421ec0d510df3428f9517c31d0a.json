{"sha": "e5532436a19ec421ec0d510df3428f9517c31d0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NTMyNDM2YTE5ZWM0MjFlYzBkNTEwZGYzNDI4Zjk1MTdjMzFkMGE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-14T05:23:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-14T05:23:08Z"}, "message": "Rollup merge of #74046 - ehuss:deny-warnings-caching, r=Mark-Simulacrum\n\nFix caching issue when building tools.\n\nThis fixes a problem with tool builds not being cached properly.\n\n#73297 changed it so that Clippy will participate in the \"deny warnings\" setting. Unfortunately this causes a problem because Clippy shares the build directory with other tools which do not participate in \"deny warnings\".  Because Cargo does not independently cache artifacts based on different RUSTFLAGS settings, it causes all the shared dependencies to get rebuilt if Clippy ever gets built.\n\nThe solution here is to stop using RUSTFLAGS, and just sneak the settings in through the rustc wrapper. Cargo won't know about the different settings, so it will not bust the cache. This should be safe since lint settings on dependencies are ignored. This is how things used to work in the past before #64316.\n\nAlternate solutions:\n* Treat Clippy as a \"submodule\" and don't enforce warnings on it. This was the behavior before #73297. The consequence is that if a warning sneaks into clippy, that the clippy maintainers will need to fix it when they sync clippy back to the clippy repo.\n* Just deny warnings on all tools (removing the in-tree/submodule distinction). This is tempting, but with some issues (cc #52336):\n  * Adding or changing warnings in rustc can be difficult to land because tools have to be updated if they trip the warning. In practice, this isn't too bad.  Cargo (and rustfmt) already runs with `deny(warnings)`, so this has been the de-facto standard already (although they do not use the extra lints like `unused_lifetimes`).\n* Teach Cargo to add flags to the workspace members, but not dependencies.\n* Teach Cargo to add flags without fingerprinting them?\n* Teach Cargo to independently cache different RUSTFLAGS artifacts (this was [reverted](https://github.com/rust-lang/cargo/pull/7417) due to complications). This would also unnecessarily rebuild dependencies, but would avoid cache thrashing.\n* Teach Cargo about lint settings.\n\nCloses #74016", "tree": {"sha": "cd4b86c77ee8e5c1107bd9e5b7032b9617f89ef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd4b86c77ee8e5c1107bd9e5b7032b9617f89ef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5532436a19ec421ec0d510df3428f9517c31d0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfDUE8CRBK7hj4Ov3rIwAAdHIIAICyKMZzmbgjLWeOR8noY4pN\nbWV65yK6l+iLHvyS6jFupmMcVyb1nj1pORd6leLe0QJOYEaxc55u4V+YQNtTx/BZ\nukaG43BSH1EbPbHyJsCOCqUVTvtVqXQgQLS8flV3GuHGtpAT/KTdJt1wZG3k4Lte\n3mZVStsDJIJ7j3xO6BGbV+MzKcXoPKzn7LmkswGsRh3GDrbTdITTAD63GNBhuuOc\nSPnRu0Nb3vSJx0RkmAkufEelXiqz/JFyAAOf2y00IoOCeUs3igTePP4MmvBuVVLD\nUJaCNa1wFGtoa9UBWGeMs/EusLUU7A+WpH9QYdpZWsplo5eYA4MuunElkMZw7cw=\n=QcDz\n-----END PGP SIGNATURE-----\n", "payload": "tree cd4b86c77ee8e5c1107bd9e5b7032b9617f89ef7\nparent d9614dbe477dcc814815cd64fc8867360bdf0b4f\nparent 310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594704188 -0700\ncommitter GitHub <noreply@github.com> 1594704188 -0700\n\nRollup merge of #74046 - ehuss:deny-warnings-caching, r=Mark-Simulacrum\n\nFix caching issue when building tools.\n\nThis fixes a problem with tool builds not being cached properly.\n\n#73297 changed it so that Clippy will participate in the \"deny warnings\" setting. Unfortunately this causes a problem because Clippy shares the build directory with other tools which do not participate in \"deny warnings\".  Because Cargo does not independently cache artifacts based on different RUSTFLAGS settings, it causes all the shared dependencies to get rebuilt if Clippy ever gets built.\n\nThe solution here is to stop using RUSTFLAGS, and just sneak the settings in through the rustc wrapper. Cargo won't know about the different settings, so it will not bust the cache. This should be safe since lint settings on dependencies are ignored. This is how things used to work in the past before #64316.\n\nAlternate solutions:\n* Treat Clippy as a \"submodule\" and don't enforce warnings on it. This was the behavior before #73297. The consequence is that if a warning sneaks into clippy, that the clippy maintainers will need to fix it when they sync clippy back to the clippy repo.\n* Just deny warnings on all tools (removing the in-tree/submodule distinction). This is tempting, but with some issues (cc #52336):\n  * Adding or changing warnings in rustc can be difficult to land because tools have to be updated if they trip the warning. In practice, this isn't too bad.  Cargo (and rustfmt) already runs with `deny(warnings)`, so this has been the de-facto standard already (although they do not use the extra lints like `unused_lifetimes`).\n* Teach Cargo to add flags to the workspace members, but not dependencies.\n* Teach Cargo to add flags without fingerprinting them?\n* Teach Cargo to independently cache different RUSTFLAGS artifacts (this was [reverted](https://github.com/rust-lang/cargo/pull/7417) due to complications). This would also unnecessarily rebuild dependencies, but would avoid cache thrashing.\n* Teach Cargo about lint settings.\n\nCloses #74016\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5532436a19ec421ec0d510df3428f9517c31d0a", "html_url": "https://github.com/rust-lang/rust/commit/e5532436a19ec421ec0d510df3428f9517c31d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5532436a19ec421ec0d510df3428f9517c31d0a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9614dbe477dcc814815cd64fc8867360bdf0b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9614dbe477dcc814815cd64fc8867360bdf0b4f", "html_url": "https://github.com/rust-lang/rust/commit/d9614dbe477dcc814815cd64fc8867360bdf0b4f"}, {"sha": "310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "html_url": "https://github.com/rust-lang/rust/commit/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "fd36cd9bd8bebf7d7b9744113df3b6ec6f93fc6e", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5532436a19ec421ec0d510df3428f9517c31d0a/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5532436a19ec421ec0d510df3428f9517c31d0a/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=e5532436a19ec421ec0d510df3428f9517c31d0a", "patch": "@@ -76,6 +76,10 @@ fn main() {\n         cmd.env(\"RUST_BACKTRACE\", \"1\");\n     }\n \n+    if let Ok(lint_flags) = env::var(\"RUSTC_LINT_FLAGS\") {\n+        cmd.args(lint_flags.split_whitespace());\n+    }\n+\n     if target.is_some() {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option,"}, {"sha": "557fb1aa550a5862b70910fd697b2978c3595d58", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e5532436a19ec421ec0d510df3428f9517c31d0a/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5532436a19ec421ec0d510df3428f9517c31d0a/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e5532436a19ec421ec0d510df3428f9517c31d0a", "patch": "@@ -1130,22 +1130,32 @@ impl<'a> Builder<'a> {\n         cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n         if source_type == SourceType::InTree {\n+            let mut lint_flags = Vec::new();\n             // When extending this list, add the new lints to the RUSTFLAGS of the\n             // build_bootstrap function of src/bootstrap/bootstrap.py as well as\n             // some code doesn't go through this `rustc` wrapper.\n-            rustflags.arg(\"-Wrust_2018_idioms\");\n-            rustflags.arg(\"-Wunused_lifetimes\");\n+            lint_flags.push(\"-Wrust_2018_idioms\");\n+            lint_flags.push(\"-Wunused_lifetimes\");\n \n             if self.config.deny_warnings {\n-                rustflags.arg(\"-Dwarnings\");\n+                lint_flags.push(\"-Dwarnings\");\n             }\n \n             // FIXME(#58633) hide \"unused attribute\" errors in incremental\n             // builds of the standard library, as the underlying checks are\n             // not yet properly integrated with incremental recompilation.\n             if mode == Mode::Std && compiler.stage == 0 && self.config.incremental {\n-                rustflags.arg(\"-Aunused-attributes\");\n+                lint_flags.push(\"-Aunused-attributes\");\n             }\n+            // This does not use RUSTFLAGS due to caching issues with Cargo.\n+            // Clippy is treated as an \"in tree\" tool, but shares the same\n+            // cache as other \"submodule\" tools. With these options set in\n+            // RUSTFLAGS, that causes *every* shared dependency to be rebuilt.\n+            // By injecting this into the rustc wrapper, this circumvents\n+            // Cargo's fingerprint detection. This is fine because lint flags\n+            // are always ignored in dependencies. Eventually this should be\n+            // fixed via better support from Cargo.\n+            cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n         }\n \n         if let Mode::Rustc | Mode::Codegen = mode {"}]}