{"sha": "f69259ecf8cc5577cd24065f9a5a6498cfff77db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OTI1OWVjZjhjYzU1NzdjZDI0MDY1ZjlhNWE2NDk4Y2ZmZjc3ZGI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-08T15:19:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-08T15:19:47Z"}, "message": "Rollup merge of #39462 - emilio:improper-ctypes, r=nikomatsakis\n\nlint/ctypes: Don't warn on sized structs with PhantomData.\n\nFixes #34798", "tree": {"sha": "d603c25e8572283234e8d647da5c0389c67c8fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d603c25e8572283234e8d647da5c0389c67c8fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69259ecf8cc5577cd24065f9a5a6498cfff77db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69259ecf8cc5577cd24065f9a5a6498cfff77db", "html_url": "https://github.com/rust-lang/rust/commit/f69259ecf8cc5577cd24065f9a5a6498cfff77db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69259ecf8cc5577cd24065f9a5a6498cfff77db/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f6a5c4431e09d355a0ba319a630e02a1e38361", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f6a5c4431e09d355a0ba319a630e02a1e38361", "html_url": "https://github.com/rust-lang/rust/commit/10f6a5c4431e09d355a0ba319a630e02a1e38361"}, {"sha": "e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e", "html_url": "https://github.com/rust-lang/rust/commit/e866d07f55b1b3ed6e37625ef35f61ac5c10f40e"}], "stats": {"total": 86, "additions": 79, "deletions": 7}, "files": [{"sha": "8feb07953db81b4df59b70fcc0d677136d0b8432", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f69259ecf8cc5577cd24065f9a5a6498cfff77db/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69259ecf8cc5577cd24065f9a5a6498cfff77db/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=f69259ecf8cc5577cd24065f9a5a6498cfff77db", "patch": "@@ -339,6 +339,7 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n \n enum FfiResult {\n     FfiSafe,\n+    FfiPhantom,\n     FfiUnsafe(&'static str),\n     FfiBadStruct(DefId, &'static str),\n     FfiBadUnion(DefId, &'static str),\n@@ -383,8 +384,11 @@ fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// Check if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n-    fn check_type_for_ffi(&self, cache: &mut FxHashSet<Ty<'tcx>>, ty: Ty<'tcx>) -> FfiResult {\n+    fn check_type_for_ffi(&self,\n+                          cache: &mut FxHashSet<Ty<'tcx>>,\n+                          ty: Ty<'tcx>) -> FfiResult {\n         use self::FfiResult::*;\n+\n         let cx = self.cx.tcx;\n \n         // Protect against infinite recursion, for example\n@@ -397,6 +401,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match ty.sty {\n             ty::TyAdt(def, substs) => {\n+                if def.is_phantom_data() {\n+                    return FfiPhantom;\n+                }\n                 match def.adt_kind() {\n                     AdtKind::Struct => {\n                         if !cx.lookup_repr_hints(def.did).contains(&attr::ReprExtern) {\n@@ -405,18 +412,22 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n-                        // We can't completely trust repr(C) markings; make sure the\n-                        // fields are actually safe.\n                         if def.struct_variant().fields.is_empty() {\n                             return FfiUnsafe(\"found zero-size struct in foreign module, consider \\\n                                               adding a member to this struct\");\n                         }\n \n+                        // We can't completely trust repr(C) markings; make sure the\n+                        // fields are actually safe.\n+                        let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n                             let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n-                                FfiSafe => {}\n+                                FfiSafe => {\n+                                    all_phantom = false;\n+                                }\n+                                FfiPhantom => {}\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n@@ -425,7 +436,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 }\n                             }\n                         }\n-                        FfiSafe\n+\n+                        if all_phantom { FfiPhantom } else { FfiSafe }\n                     }\n                     AdtKind::Union => {\n                         if !cx.lookup_repr_hints(def.did).contains(&attr::ReprExtern) {\n@@ -434,11 +446,20 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n+                        if def.struct_variant().fields.is_empty() {\n+                            return FfiUnsafe(\"found zero-size union in foreign module, consider \\\n+                                              adding a member to this union\");\n+                        }\n+\n+                        let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n                             let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n-                                FfiSafe => {}\n+                                FfiSafe => {\n+                                    all_phantom = false;\n+                                }\n+                                FfiPhantom => {}\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n@@ -447,7 +468,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 }\n                             }\n                         }\n-                        FfiSafe\n+\n+                        if all_phantom { FfiPhantom } else { FfiSafe }\n                     }\n                     AdtKind::Enum => {\n                         if def.variants.is_empty() {\n@@ -498,6 +520,10 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                     FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                         return r;\n                                     }\n+                                    FfiPhantom => {\n+                                        return FfiBadEnum(def.did,\n+                                                          \"Found phantom data in enum variant\");\n+                                    }\n                                     FfiUnsafe(s) => {\n                                         return FfiBadEnum(def.did, s);\n                                     }\n@@ -591,6 +617,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}\n+            FfiResult::FfiPhantom => {\n+                self.cx.span_lint(IMPROPER_CTYPES,\n+                                  sp,\n+                                  &format!(\"found zero-sized type composed only \\\n+                                            of phantom-data in a foreign-function.\"));\n+            }\n             FfiResult::FfiUnsafe(s) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp, s);\n             }"}, {"sha": "608b1eb0872ad8243f502781da1fd75496474fa7", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f69259ecf8cc5577cd24065f9a5a6498cfff77db/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69259ecf8cc5577cd24065f9a5a6498cfff77db/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=f69259ecf8cc5577cd24065f9a5a6498cfff77db", "patch": "@@ -29,6 +29,9 @@ pub type RustBadRet = extern fn() -> Box<u32>;\n pub type CVoidRet = ();\n pub struct Foo;\n \n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n+\n extern {\n     pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n     pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n@@ -40,6 +43,9 @@ extern {\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n     pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n     pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n+    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR found zero-sized type\n+    pub fn zero_size_phantom_toplevel()\n+        -> ::std::marker::PhantomData<bool>; //~ ERROR: found zero-sized type\n     pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n     pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n     pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without"}, {"sha": "e217d07ed725d86ffc216de1eda7fb0f6b21059c", "filename": "src/test/run-pass/issue-34798.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f69259ecf8cc5577cd24065f9a5a6498cfff77db/src%2Ftest%2Frun-pass%2Fissue-34798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69259ecf8cc5577cd24065f9a5a6498cfff77db/src%2Ftest%2Frun-pass%2Fissue-34798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34798.rs?ref=f69259ecf8cc5577cd24065f9a5a6498cfff77db", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![forbid(improper_ctypes)]\n+#![allow(dead_code)]\n+\n+#[repr(C)]\n+pub struct Foo {\n+    size: u8,\n+    __value: ::std::marker::PhantomData<i32>,\n+}\n+\n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData<T>(::std::marker::PhantomData<T>);\n+\n+#[repr(C)]\n+pub struct Bar {\n+    size: u8,\n+    baz: ZeroSizeWithPhantomData<i32>,\n+}\n+\n+extern \"C\" {\n+    pub fn bar(_: *mut Foo, _: *mut Bar);\n+}\n+\n+fn main() {\n+}"}]}