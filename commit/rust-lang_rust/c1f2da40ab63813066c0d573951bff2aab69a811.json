{"sha": "c1f2da40ab63813066c0d573951bff2aab69a811", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZjJkYTQwYWI2MzgxMzA2NmMwZDU3Mzk1MWJmZjJhYWI2OWE4MTE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-04-14T10:25:45Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-04-14T10:25:45Z"}, "message": "rustup https://github.com/rust-lang/rust/pull/70643", "tree": {"sha": "a1bbaf70573cd38a3e3f4873afa941a47d03ebb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1bbaf70573cd38a3e3f4873afa941a47d03ebb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f2da40ab63813066c0d573951bff2aab69a811", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f2da40ab63813066c0d573951bff2aab69a811", "html_url": "https://github.com/rust-lang/rust/commit/c1f2da40ab63813066c0d573951bff2aab69a811", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f2da40ab63813066c0d573951bff2aab69a811/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74e92566d5cbe670a74a4ce340973716760479db", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e92566d5cbe670a74a4ce340973716760479db", "html_url": "https://github.com/rust-lang/rust/commit/74e92566d5cbe670a74a4ce340973716760479db"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "5d94013cb65d80b81cc5afbb04cc17ea9696d32f", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=c1f2da40ab63813066c0d573951bff2aab69a811", "patch": "@@ -121,7 +121,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LenZero {\n fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_items: &[TraitItemRef]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &TraitItemRef, name: &str) -> bool {\n         item.ident.name.as_str() == name\n-            && if let AssocItemKind::Method { has_self } = item.kind {\n+            && if let AssocItemKind::Fn { has_self } = item.kind {\n                 has_self && {\n                     let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n@@ -149,8 +149,8 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_i\n             .iter()\n             .flat_map(|&i| cx.tcx.associated_items(i).in_definition_order())\n             .any(|i| {\n-                i.kind == ty::AssocKind::Method\n-                    && i.method_has_self_argument\n+                i.kind == ty::AssocKind::Fn\n+                    && i.fn_has_self_parameter\n                     && i.ident.name == sym!(is_empty)\n                     && cx.tcx.fn_sig(i.def_id).inputs().skip_binder().len() == 1\n             });\n@@ -172,7 +172,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item<'_>, trait_i\n fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[ImplItemRef<'_>]) {\n     fn is_named_self(cx: &LateContext<'_, '_>, item: &ImplItemRef<'_>, name: &str) -> bool {\n         item.ident.name.as_str() == name\n-            && if let AssocItemKind::Method { has_self } = item.kind {\n+            && if let AssocItemKind::Fn { has_self } = item.kind {\n                 has_self && {\n                     let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n                     cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n@@ -261,7 +261,7 @@ fn check_len(\n fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_, '_>, item: &ty::AssocItem) -> bool {\n-        if let ty::AssocKind::Method = item.kind {\n+        if let ty::AssocKind::Fn = item.kind {\n             if item.ident.name.as_str() == \"is_empty\" {\n                 let sig = cx.tcx.fn_sig(item.def_id);\n                 let ty = sig.skip_binder();"}, {"sha": "9d065005c99d7697d245afc1f4c0fbeeaf2948ce", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=c1f2da40ab63813066c0d573951bff2aab69a811", "patch": "@@ -100,7 +100,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n         } = item.kind\n         {\n             for assoc_item in items {\n-                if let hir::AssocItemKind::Method { has_self: false } = assoc_item.kind {\n+                if let hir::AssocItemKind::Fn { has_self: false } = assoc_item.kind {\n                     let impl_item = cx.tcx.hir().impl_item(assoc_item.id);\n                     if in_external_macro(cx.sess(), impl_item.span) {\n                         return;"}, {"sha": "4483059e9eca409074d5a006b7513e9db8c21fca", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=c1f2da40ab63813066c0d573951bff2aab69a811", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n         let assoc_item = cx.tcx.associated_item(def_id);\n         if_chain! {\n             if let ItemKind::Impl { of_trait: None, .. } = parent_item.kind;\n-            if assoc_item.method_has_self_argument;\n+            if assoc_item.fn_has_self_parameter;\n             if let ImplItemKind::Fn(.., body_id) = &impl_item.kind;\n             let body = cx.tcx.hir().body(*body_id);\n             if !body.params.is_empty();"}, {"sha": "f8e1aff33e7731f5e887c6a2fa5958b2b7664076", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f2da40ab63813066c0d573951bff2aab69a811/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=c1f2da40ab63813066c0d573951bff2aab69a811", "patch": "@@ -119,7 +119,7 @@ fn check_trait_method_impl_decl<'a, 'tcx>(\n     let trait_method = cx\n         .tcx\n         .associated_items(impl_trait_ref.def_id)\n-        .find_by_name_and_kind(cx.tcx, impl_item.ident, ty::AssocKind::Method, impl_trait_ref.def_id)\n+        .find_by_name_and_kind(cx.tcx, impl_item.ident, ty::AssocKind::Fn, impl_trait_ref.def_id)\n         .expect(\"impl method matches a trait method\");\n \n     let trait_method_sig = cx.tcx.fn_sig(trait_method.def_id);"}]}