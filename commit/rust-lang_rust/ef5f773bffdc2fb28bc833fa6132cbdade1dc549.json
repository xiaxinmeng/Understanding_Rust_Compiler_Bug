{"sha": "ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "node_id": "C_kwDOAAsO6NoAKGVmNWY3NzNiZmZkYzJmYjI4YmM4MzNmYTYxMzJjYmRhZGUxZGM1NDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-27T21:48:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-28T17:07:01Z"}, "message": "Check for overflow in assemble_candidates_after_normalizing_self_ty", "tree": {"sha": "401cb9b5fccf1c584534478d1ba9971035508c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/401cb9b5fccf1c584534478d1ba9971035508c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "html_url": "https://github.com/rust-lang/rust/commit/ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf57e8ada6dc62369d1cee7ab055fb4074bd2d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf57e8ada6dc62369d1cee7ab055fb4074bd2d10", "html_url": "https://github.com/rust-lang/rust/commit/bf57e8ada6dc62369d1cee7ab055fb4074bd2d10"}], "stats": {"total": 123, "additions": 105, "deletions": 18}, "files": [{"sha": "0f7a0eb337ba6a51aaf767cff5b94dadd9b42fff", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "patch": "@@ -1,5 +1,6 @@\n //! Code shared by trait and projection goals for candidate assembly.\n \n+use super::search_graph::OverflowHandler;\n #[cfg(doc)]\n use super::trait_goals::structural_traits::*;\n use super::{EvalCtxt, SolverMode};\n@@ -279,25 +280,38 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             return\n         };\n \n-        self.probe(|ecx| {\n-            let normalized_ty = ecx.next_ty_infer();\n-            let normalizes_to_goal = goal.with(\n-                tcx,\n-                ty::Binder::dummy(ty::ProjectionPredicate {\n-                    projection_ty,\n-                    term: normalized_ty.into(),\n-                }),\n-            );\n-            ecx.add_goal(normalizes_to_goal);\n-            if let Ok(_) = ecx.try_evaluate_added_goals() {\n-                let normalized_ty = ecx.resolve_vars_if_possible(normalized_ty);\n-\n-                // NOTE: Alternatively we could call `evaluate_goal` here and only have a `Normalized` candidate.\n-                // This doesn't work as long as we use `CandidateSource` in winnowing.\n-                let goal = goal.with(tcx, goal.predicate.with_self_ty(tcx, normalized_ty));\n-                candidates.extend(ecx.assemble_and_evaluate_candidates(goal));\n-            }\n+        let normalized_self_candidates: Result<_, NoSolution> = self.probe(|ecx| {\n+            ecx.with_incremented_depth(\n+                |ecx| {\n+                    let result = ecx.evaluate_added_goals_and_make_canonical_response(\n+                        Certainty::Maybe(MaybeCause::Overflow),\n+                    )?;\n+                    Ok(vec![Candidate { source: CandidateSource::BuiltinImpl, result }])\n+                },\n+                |ecx| {\n+                    let normalized_ty = ecx.next_ty_infer();\n+                    let normalizes_to_goal = goal.with(\n+                        tcx,\n+                        ty::Binder::dummy(ty::ProjectionPredicate {\n+                            projection_ty,\n+                            term: normalized_ty.into(),\n+                        }),\n+                    );\n+                    ecx.add_goal(normalizes_to_goal);\n+                    let _ = ecx.try_evaluate_added_goals()?;\n+                    let normalized_ty = ecx.resolve_vars_if_possible(normalized_ty);\n+                    // NOTE: Alternatively we could call `evaluate_goal` here and only\n+                    // have a `Normalized` candidate. This doesn't work as long as we\n+                    // use `CandidateSource` in winnowing.\n+                    let goal = goal.with(tcx, goal.predicate.with_self_ty(tcx, normalized_ty));\n+                    Ok(ecx.assemble_and_evaluate_candidates(goal))\n+                },\n+            )\n         });\n+\n+        if let Ok(normalized_self_candidates) = normalized_self_candidates {\n+            candidates.extend(normalized_self_candidates);\n+        }\n     }\n \n     fn assemble_impl_candidates<G: GoalKind<'tcx>>("}, {"sha": "574f3e9a5772d3cc406b601aa60b16f775202b49", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/overflow.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Foverflow.rs?ref=ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "patch": "@@ -73,6 +73,27 @@ pub(in crate::solve) trait OverflowHandler<'tcx> {\n         self.search_graph().overflow_data.deal_with_overflow();\n         on_overflow(self)\n     }\n+\n+    // Increment the `additional_depth` by one and evaluate `body`, or `on_overflow`\n+    // if the depth is overflown.\n+    fn with_incremented_depth<T>(\n+        &mut self,\n+        on_overflow: impl FnOnce(&mut Self) -> T,\n+        body: impl FnOnce(&mut Self) -> T,\n+    ) -> T {\n+        let depth = self.search_graph().stack.len();\n+        self.search_graph().overflow_data.additional_depth += 1;\n+\n+        let result = if self.search_graph().overflow_data.has_overflow(depth) {\n+            self.search_graph().overflow_data.deal_with_overflow();\n+            on_overflow(self)\n+        } else {\n+            body(self)\n+        };\n+\n+        self.search_graph().overflow_data.additional_depth -= 1;\n+        result\n+    }\n }\n \n impl<'tcx> OverflowHandler<'tcx> for EvalCtxt<'_, 'tcx> {"}, {"sha": "7417d6018a131e881359100bba62cd9d32ec2455", "filename": "tests/ui/traits/new-solver/recursive-self-normalization-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.rs?ref=ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+trait Foo1 {\n+    type Assoc1;\n+}\n+\n+trait Foo2 {\n+    type Assoc2;\n+}\n+\n+trait Bar {}\n+fn needs_bar<S: Bar>() {}\n+\n+fn test<T: Foo1<Assoc1 = <T as Foo2>::Assoc2> + Foo2<Assoc2 = <T as Foo1>::Assoc1>>() {\n+    needs_bar::<T::Assoc1>();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "29cfa47a1050a38133a7b7c13744cdc316f681e1", "filename": "tests/ui/traits/new-solver/recursive-self-normalization-2.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization-2.stderr?ref=ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/recursive-self-normalization-2.rs:15:5\n+   |\n+LL |     needs_bar::<T::Assoc1>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `S` declared on the function `needs_bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "f3e3d71d813e4da2f2c534a0b5c59d5b32171dd3", "filename": "tests/ui/traits/new-solver/recursive-self-normalization.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.rs?ref=ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+trait Foo {\n+    type Assoc;\n+}\n+\n+trait Bar {}\n+fn needs_bar<S: Bar>() {}\n+\n+fn test<T: Foo<Assoc = <T as Foo>::Assoc>>() {\n+    needs_bar::<T::Assoc>();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "ba39981893d447134c8955cfaf40e04c478ccbb1", "filename": "tests/ui/traits/new-solver/recursive-self-normalization.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f773bffdc2fb28bc833fa6132cbdade1dc549/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Frecursive-self-normalization.stderr?ref=ef5f773bffdc2fb28bc833fa6132cbdade1dc549", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/recursive-self-normalization.rs:11:5\n+   |\n+LL |     needs_bar::<T::Assoc>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `S` declared on the function `needs_bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}]}