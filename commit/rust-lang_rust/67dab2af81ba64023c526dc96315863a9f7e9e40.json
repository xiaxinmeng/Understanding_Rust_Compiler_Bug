{"sha": "67dab2af81ba64023c526dc96315863a9f7e9e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZGFiMmFmODFiYTY0MDIzYzUyNmRjOTYzMTU4NjNhOWY3ZTllNDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-31T18:49:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-31T19:41:39Z"}, "message": "Include projection bounds in superpredicates.\n\nFixes #19451.\nFixes #20345.", "tree": {"sha": "1bce99583f93b23643c13a6f84f5010ef3708619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bce99583f93b23643c13a6f84f5010ef3708619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67dab2af81ba64023c526dc96315863a9f7e9e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67dab2af81ba64023c526dc96315863a9f7e9e40", "html_url": "https://github.com/rust-lang/rust/commit/67dab2af81ba64023c526dc96315863a9f7e9e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67dab2af81ba64023c526dc96315863a9f7e9e40/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9675488ef9480365c2d26e23bfd649128037880f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9675488ef9480365c2d26e23bfd649128037880f", "html_url": "https://github.com/rust-lang/rust/commit/9675488ef9480365c2d26e23bfd649128037880f"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "dab24f6a1638029b820d78b7497d1f9f53ffdbc5", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/67dab2af81ba64023c526dc96315863a9f7e9e40/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67dab2af81ba64023c526dc96315863a9f7e9e40/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=67dab2af81ba64023c526dc96315863a9f7e9e40", "patch": "@@ -5449,8 +5449,15 @@ pub fn predicates_for_trait_ref<'tcx>(tcx: &ctxt<'tcx>,\n         .map(|poly_trait_ref| ty::Binder(poly_trait_ref.0.subst(tcx, trait_ref.substs())))\n         .collect();\n \n-    debug!(\"bounds_for_trait_ref: trait_bounds={}\",\n-           trait_bounds.repr(tcx));\n+    let projection_bounds: Vec<_> =\n+        trait_def.bounds.projection_bounds\n+        .iter()\n+        .map(|poly_proj| ty::Binder(poly_proj.0.subst(tcx, trait_ref.substs())))\n+        .collect();\n+\n+    debug!(\"bounds_for_trait_ref: trait_bounds={} projection_bounds={}\",\n+           trait_bounds.repr(tcx),\n+           projection_bounds.repr(tcx));\n \n     // The region bounds and builtin bounds do not currently introduce\n     // binders so we can just substitute in a straightforward way here.\n@@ -5463,11 +5470,7 @@ pub fn predicates_for_trait_ref<'tcx>(tcx: &ctxt<'tcx>,\n         trait_bounds: trait_bounds,\n         region_bounds: region_bounds,\n         builtin_bounds: builtin_bounds,\n-\n-        // FIXME(#19451) -- if a trait has a bound like `trait Foo :\n-        // Bar<T=X>`, we should probably be returning that, but this\n-        // code here will just ignore it.\n-        projection_bounds: Vec::new(),\n+        projection_bounds: projection_bounds,\n     };\n \n     predicates(tcx, trait_ref.self_ty(), &bounds)"}, {"sha": "c7ffb56cc839438fb7db9526dff15636e0f154cb", "filename": "src/test/run-pass/associated-types-projection-bound-in-supertraits.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/67dab2af81ba64023c526dc96315863a9f7e9e40/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67dab2af81ba64023c526dc96315863a9f7e9e40/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs?ref=67dab2af81ba64023c526dc96315863a9f7e9e40", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we correctly handle projection bounds appearing in the\n+// supertrait list (and in conjunction with overloaded operators). In\n+// this case, the `Result=Self` binding in the supertrait listing of\n+// `Int` was being ignored.\n+\n+#![feature(associated_types)]\n+\n+trait Not {\n+    type Result;\n+\n+    fn not(self) -> Self::Result;\n+}\n+\n+trait Int: Not<Result=Self> {\n+    fn count_ones(self) -> uint;\n+    fn count_zeros(self) -> uint {\n+        // neither works\n+        let x: Self = self.not();\n+\t    0\n+    }\n+}\n+\n+fn main() { }"}]}