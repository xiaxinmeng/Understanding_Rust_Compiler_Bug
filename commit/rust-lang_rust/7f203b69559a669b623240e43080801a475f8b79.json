{"sha": "7f203b69559a669b623240e43080801a475f8b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMjAzYjY5NTU5YTY2OWI2MjMyNDBlNDMwODA4MDFhNDc1ZjhiNzk=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-04-16T20:33:58Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:08Z"}, "message": "pprust: Add parentheses to some Expr\n\nSome `Expr` needs parentheses when printed. For example, without\nparentheses, `ExprUnary(UnNeg, ExprBinary(BiAdd, ..))` becomes\n`-lhs + rhs` which is wrong.\n\nThose cases don't appear in ordinary code (since parentheses are\nexplicitly added) but they can appear in manually crafted ast by\nextensions.", "tree": {"sha": "46fdb9612d11f47289c5dd81afaa9b0f4ac3bf20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46fdb9612d11f47289c5dd81afaa9b0f4ac3bf20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f203b69559a669b623240e43080801a475f8b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f203b69559a669b623240e43080801a475f8b79", "html_url": "https://github.com/rust-lang/rust/commit/7f203b69559a669b623240e43080801a475f8b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f203b69559a669b623240e43080801a475f8b79/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa", "html_url": "https://github.com/rust-lang/rust/commit/6d535b5b8d71e1cdbdbe54958bcfc4dd956121aa"}], "stats": {"total": 48, "additions": 45, "deletions": 3}, "files": [{"sha": "c8894c1f816b4e5ac8b6e162eb7b13ea67170562", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7f203b69559a669b623240e43080801a475f8b79/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f203b69559a669b623240e43080801a475f8b79/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7f203b69559a669b623240e43080801a475f8b79", "patch": "@@ -247,6 +247,15 @@ pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> StrBuf {\n     }\n }\n \n+fn needs_parentheses(expr: &ast::Expr) -> bool {\n+    match expr.node {\n+        ast::ExprAssign(..) | ast::ExprBinary(..) |\n+        ast::ExprFnBlock(..) | ast::ExprProc(..) |\n+        ast::ExprAssignOp(..) | ast::ExprCast(..) => true,\n+        _ => false,\n+    }\n+}\n+\n impl<'a> State<'a> {\n     pub fn ibox(&mut self, u: uint) -> IoResult<()> {\n         self.boxes.push(pp::Inconsistent);\n@@ -1136,6 +1145,18 @@ impl<'a> State<'a> {\n         self.pclose()\n     }\n \n+    pub fn print_expr_maybe_paren(&mut self, expr: &ast::Expr) -> IoResult<()> {\n+        let needs_par = needs_parentheses(expr);\n+        if needs_par {\n+            try!(self.popen());\n+        }\n+        try!(self.print_expr(expr));\n+        if needs_par {\n+            try!(self.pclose());\n+        }\n+        Ok(())\n+    }\n+\n     pub fn print_expr(&mut self, expr: &ast::Expr) -> IoResult<()> {\n         try!(self.maybe_print_comment(expr.span.lo));\n         try!(self.ibox(indent_unit));\n@@ -1209,7 +1230,7 @@ impl<'a> State<'a> {\n                 try!(self.pclose());\n             }\n             ast::ExprCall(func, ref args) => {\n-                try!(self.print_expr(func));\n+                try!(self.print_expr_maybe_paren(func));\n                 try!(self.print_call_post(args.as_slice()));\n             }\n             ast::ExprMethodCall(ident, ref tys, ref args) => {\n@@ -1233,17 +1254,38 @@ impl<'a> State<'a> {\n             }\n             ast::ExprUnary(op, expr) => {\n                 try!(word(&mut self.s, ast_util::unop_to_str(op)));\n-                try!(self.print_expr(expr));\n+                try!(self.print_expr_maybe_paren(expr));\n             }\n             ast::ExprAddrOf(m, expr) => {\n                 try!(word(&mut self.s, \"&\"));\n+\n+                // `ExprAddrOf(ExprLit(\"str\"))` should be `&&\"str\"` instead of `&\"str\"`\n+                // since `&\"str\"` is `ExprVstore(ExprLit(\"str\"))` which has same meaning to\n+                // `\"str\"`.\n+                // In many cases adding parentheses (`&(\"str\")`) would help, but it become invalid\n+                // if expr is in `PatLit()`.\n+                let needs_extra_amp = match expr.node {\n+                    ast::ExprLit(lit) => {\n+                        match lit.node {\n+                            ast::LitStr(..) => true,\n+                            _ => false,\n+                        }\n+                    }\n+                    ast::ExprVec(..) => true,\n+                    _ => false,\n+                };\n+                if needs_extra_amp {\n+                    try!(word(&mut self.s, \"&\"));\n+                }\n+\n                 try!(self.print_mutability(m));\n                 // Avoid `& &e` => `&&e`.\n                 match (m, &expr.node) {\n                     (ast::MutImmutable, &ast::ExprAddrOf(..)) => try!(space(&mut self.s)),\n                     _ => { }\n                 }\n-                try!(self.print_expr(expr));\n+\n+                try!(self.print_expr_maybe_paren(expr));\n             }\n             ast::ExprLit(lit) => try!(self.print_literal(lit)),\n             ast::ExprCast(expr, ty) => {"}]}