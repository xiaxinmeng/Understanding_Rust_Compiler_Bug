{"sha": "2179d9157ec0817ef0715f490382c6b95db355ee", "node_id": "C_kwDOAAsO6NoAKDIxNzlkOTE1N2VjMDgxN2VmMDcxNWY0OTAzODJjNmI5NWRiMzU1ZWU", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-13T23:30:02Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-14T00:06:36Z"}, "message": "rustdoc-search: use ES6 `Map` for aliases instead of `Object`", "tree": {"sha": "db33471d94d823bec2e9d097c9619c6375bb49b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db33471d94d823bec2e9d097c9619c6375bb49b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2179d9157ec0817ef0715f490382c6b95db355ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2179d9157ec0817ef0715f490382c6b95db355ee", "html_url": "https://github.com/rust-lang/rust/commit/2179d9157ec0817ef0715f490382c6b95db355ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2179d9157ec0817ef0715f490382c6b95db355ee/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a41fc00eaf352541008965fec0dee811e44373b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a41fc00eaf352541008965fec0dee811e44373b3", "html_url": "https://github.com/rust-lang/rust/commit/a41fc00eaf352541008965fec0dee811e44373b3"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "b0df5a28837de6b54bbe1a462aa3e987d7d4a428", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2179d9157ec0817ef0715f490382c6b95db355ee/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/2179d9157ec0817ef0715f490382c6b95db355ee/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=2179d9157ec0817ef0715f490382c6b95db355ee", "patch": "@@ -191,7 +191,7 @@ function initSearch(rawSearchIndex) {\n      */\n     let searchIndex;\n     let currentResults;\n-    const ALIASES = Object.create(null);\n+    const ALIASES = new Map();\n \n     function isWhitespace(c) {\n         return \" \\t\\n\\r\".indexOf(c) !== -1;\n@@ -1424,22 +1424,22 @@ function initSearch(rawSearchIndex) {\n             const aliases = [];\n             const crateAliases = [];\n             if (filterCrates !== null) {\n-                if (ALIASES[filterCrates] && ALIASES[filterCrates][lowerQuery]) {\n-                    const query_aliases = ALIASES[filterCrates][lowerQuery];\n+                if (ALIASES.has(filterCrates) && ALIASES.get(filterCrates).has(lowerQuery)) {\n+                    const query_aliases = ALIASES.get(filterCrates).get(lowerQuery);\n                     for (const alias of query_aliases) {\n                         aliases.push(createAliasFromItem(searchIndex[alias]));\n                     }\n                 }\n             } else {\n-                Object.keys(ALIASES).forEach(crate => {\n-                    if (ALIASES[crate][lowerQuery]) {\n+                for (const [crate, crateAliasesIndex] of ALIASES) {\n+                    if (crateAliasesIndex.has(lowerQuery)) {\n                         const pushTo = crate === currentCrate ? crateAliases : aliases;\n-                        const query_aliases = ALIASES[crate][lowerQuery];\n+                        const query_aliases = crateAliasesIndex.get(lowerQuery);\n                         for (const alias of query_aliases) {\n                             pushTo.push(createAliasFromItem(searchIndex[alias]));\n                         }\n                     }\n-                });\n+                }\n             }\n \n             const sortFunc = (aaa, bbb) => {\n@@ -2345,17 +2345,22 @@ function initSearch(rawSearchIndex) {\n             }\n \n             if (aliases) {\n-                ALIASES[crate] = Object.create(null);\n+                const currentCrateAliases = new Map();\n+                ALIASES.set(crate, currentCrateAliases);\n                 for (const alias_name in aliases) {\n                     if (!hasOwnPropertyRustdoc(aliases, alias_name)) {\n                         continue;\n                     }\n \n-                    if (!hasOwnPropertyRustdoc(ALIASES[crate], alias_name)) {\n-                        ALIASES[crate][alias_name] = [];\n+                    let currentNameAliases;\n+                    if (currentCrateAliases.has(alias_name)) {\n+                        currentNameAliases = currentCrateAliases.get(alias_name);\n+                    } else {\n+                        currentNameAliases = [];\n+                        currentCrateAliases.set(alias_name, currentNameAliases);\n                     }\n                     for (const local_alias of aliases[alias_name]) {\n-                        ALIASES[crate][alias_name].push(local_alias + currentIndex);\n+                        currentNameAliases.push(local_alias + currentIndex);\n                     }\n                 }\n             }"}]}