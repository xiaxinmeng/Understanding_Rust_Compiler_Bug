{"sha": "5a684099e9aa3482b408002030fafe1dcd0fa9a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNjg0MDk5ZTlhYTM0ODJiNDA4MDAyMDMwZmFmZTFkY2QwZmE5YTk=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-24T18:56:49Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-24T18:56:49Z"}, "message": "Merge #893\n\n893: Completion presentation r=matklad a=matklad\n\nJust moves completion code around a bit, to keep logic for producing completions and logic for rendering them into completion items separate.\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "20e86fbc586b350c336277d2b0886a60f9844de8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20e86fbc586b350c336277d2b0886a60f9844de8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a684099e9aa3482b408002030fafe1dcd0fa9a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a684099e9aa3482b408002030fafe1dcd0fa9a9", "html_url": "https://github.com/rust-lang/rust/commit/5a684099e9aa3482b408002030fafe1dcd0fa9a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a684099e9aa3482b408002030fafe1dcd0fa9a9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "67528c4b3943a2027839a25770d079132a9ea130", "url": "https://api.github.com/repos/rust-lang/rust/commits/67528c4b3943a2027839a25770d079132a9ea130", "html_url": "https://github.com/rust-lang/rust/commit/67528c4b3943a2027839a25770d079132a9ea130"}, {"sha": "d5f6a5f5e29df3005533502b49f78daae314ac5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f6a5f5e29df3005533502b49f78daae314ac5b", "html_url": "https://github.com/rust-lang/rust/commit/d5f6a5f5e29df3005533502b49f78daae314ac5b"}], "stats": {"total": 626, "additions": 295, "deletions": 331}, "files": [{"sha": "f2e0aae6ccccf5cc6eb6f63bce2af480430ed7c7", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -55,7 +55,7 @@ pub use self::{\n     ids::{HirFileId, MacroCallId, MacroCallLoc, HirInterner},\n     macros::{MacroDef, MacroInput, MacroExpansion},\n     nameres::{ItemMap, PerNs, Namespace},\n-    ty::Ty,\n+    ty::{Ty, Substs},\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},\n     adt::AdtDef,"}, {"sha": "fbfd7e3e7282919160a567058f328ccef060cdb7", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,5 +1,6 @@\n mod completion_item;\n mod completion_context;\n+mod presentation;\n \n mod complete_dot;\n mod complete_struct_literal;\n@@ -20,7 +21,10 @@ use crate::{\n         completion_item::{Completions, CompletionKind},\n         completion_context::CompletionContext,\n     },\n+\n };\n+#[cfg(test)]\n+use crate::completion::completion_item::{do_completion, check_completion};\n \n pub use crate::completion::completion_item::{CompletionItem, CompletionItemKind, InsertTextFormat};\n "}, {"sha": "d5ad2e79f79885909bb8cd07a2d5fe82140a22ba", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,7 +1,6 @@\n-use hir::{Ty, AdtDef, Docs};\n+use hir::{Ty, AdtDef};\n \n-use crate::completion::{CompletionContext, Completions, CompletionItem, CompletionItemKind};\n-use crate::completion::completion_item::CompletionKind;\n+use crate::completion::{CompletionContext, Completions};\n \n /// Complete dot accesses, i.e. fields or methods (currently only fields).\n pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -29,15 +28,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n                 match def_id {\n                     AdtDef::Struct(s) => {\n                         for field in s.fields(ctx.db) {\n-                            CompletionItem::new(\n-                                CompletionKind::Reference,\n-                                ctx.source_range(),\n-                                field.name(ctx.db).to_string(),\n-                            )\n-                            .kind(CompletionItemKind::Field)\n-                            .detail(field.ty(ctx.db).subst(substs).to_string())\n-                            .set_documentation(field.docs(ctx.db))\n-                            .add_to(acc);\n+                            acc.add_field(ctx, field, substs);\n                         }\n                     }\n \n@@ -47,14 +38,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n             }\n             Ty::Tuple(fields) => {\n                 for (i, ty) in fields.iter().enumerate() {\n-                    CompletionItem::new(\n-                        CompletionKind::Reference,\n-                        ctx.source_range(),\n-                        i.to_string(),\n-                    )\n-                    .kind(CompletionItemKind::Field)\n-                    .detail(ty.to_string())\n-                    .add_to(acc);\n+                    acc.add_pos_field(ctx, i, ty);\n                 }\n             }\n             _ => {}\n@@ -66,23 +50,15 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty\n     receiver.iterate_methods(ctx.db, |_ty, func| {\n         let sig = func.signature(ctx.db);\n         if sig.has_self_param() {\n-            CompletionItem::new(\n-                CompletionKind::Reference,\n-                ctx.source_range(),\n-                sig.name().to_string(),\n-            )\n-            .from_function(ctx, func)\n-            .kind(CompletionItemKind::Method)\n-            .add_to(acc);\n+            acc.add_function(ctx, func);\n         }\n         None::<()>\n     });\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::*;\n-    use crate::completion::completion_item::check_completion;\n+    use crate::completion::{check_completion, CompletionKind};\n \n     fn check_ref_completion(name: &str, code: &str) {\n         check_completion(name, code, CompletionKind::Reference);"}, {"sha": "ffdc744b21431f35e3f07b8af464c1760afc8cf7", "filename": "crates/ra_ide_api/src/completion/complete_fn_param.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -54,8 +54,7 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::*;\n-    use crate::completion::completion_item::check_completion;\n+    use crate::completion::{check_completion, CompletionKind};\n \n     fn check_magic_completion(name: &str, code: &str) {\n         check_completion(name, code, CompletionKind::Magic);"}, {"sha": "841c0c554b75e6b78a3270415ac53fb406b2a21c", "filename": "crates/ra_ide_api/src/completion/complete_keyword.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -109,8 +109,7 @@ fn complete_return(\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::CompletionKind;\n-    use crate::completion::completion_item::check_completion;\n+    use crate::completion::{check_completion, CompletionKind};\n \n     fn check_keyword_completion(name: &str, code: &str) {\n         check_completion(name, code, CompletionKind::Keyword);"}, {"sha": "629a7ee774bfc6f54ef39eee80bd221444acacc5", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 19, "deletions": 74, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,9 +1,8 @@\n-use join_to_string::join;\n-use hir::{Docs, Resolution};\n-use ra_syntax::{AstNode, ast::NameOwner};\n+use hir::Resolution;\n+use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n-use crate::completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext};\n+use crate::completion::{Completions, CompletionContext};\n \n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let path = match &ctx.path_prefix {\n@@ -28,79 +27,28 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                         }\n                     }\n                 }\n-\n-                CompletionItem::new(\n-                    CompletionKind::Reference,\n-                    ctx.source_range(),\n-                    name.to_string(),\n-                )\n-                .from_resolution(ctx, &res.def.map(hir::Resolution::Def))\n-                .add_to(acc);\n+                acc.add_resolution(ctx, name.to_string(), &res.def.map(hir::Resolution::Def));\n             }\n         }\n         hir::ModuleDef::Enum(e) => {\n-            e.variants(ctx.db).into_iter().for_each(|variant| {\n-                if let Some(name) = variant.name(ctx.db) {\n-                    let detail_types =\n-                        variant.fields(ctx.db).into_iter().map(|field| field.ty(ctx.db));\n-                    let detail =\n-                        join(detail_types).separator(\", \").surround_with(\"(\", \")\").to_string();\n-\n-                    CompletionItem::new(\n-                        CompletionKind::Reference,\n-                        ctx.source_range(),\n-                        name.to_string(),\n-                    )\n-                    .kind(CompletionItemKind::EnumVariant)\n-                    .set_documentation(variant.docs(ctx.db))\n-                    .set_detail(Some(detail))\n-                    .add_to(acc)\n-                }\n-            });\n+            for variant in e.variants(ctx.db) {\n+                acc.add_enum_variant(ctx, variant);\n+            }\n         }\n         hir::ModuleDef::Struct(s) => {\n             let ty = s.ty(ctx.db);\n-            ty.iterate_impl_items(ctx.db, |item| match item {\n-                hir::ImplItem::Method(func) => {\n-                    let sig = func.signature(ctx.db);\n-                    if !sig.has_self_param() {\n-                        CompletionItem::new(\n-                            CompletionKind::Reference,\n-                            ctx.source_range(),\n-                            sig.name().to_string(),\n-                        )\n-                        .from_function(ctx, func)\n-                        .kind(CompletionItemKind::Method)\n-                        .add_to(acc);\n-                    }\n-                    None::<()>\n-                }\n-                hir::ImplItem::Const(ct) => {\n-                    let source = ct.source(ctx.db);\n-                    if let Some(name) = source.1.name() {\n-                        CompletionItem::new(\n-                            CompletionKind::Reference,\n-                            ctx.source_range(),\n-                            name.text().to_string(),\n-                        )\n-                        .from_const(ctx, ct)\n-                        .add_to(acc);\n-                    }\n-                    None::<()>\n-                }\n-                hir::ImplItem::Type(ty) => {\n-                    let source = ty.source(ctx.db);\n-                    if let Some(name) = source.1.name() {\n-                        CompletionItem::new(\n-                            CompletionKind::Reference,\n-                            ctx.source_range(),\n-                            name.text().to_string(),\n-                        )\n-                        .from_type(ctx, ty)\n-                        .add_to(acc);\n+            ty.iterate_impl_items(ctx.db, |item| {\n+                match item {\n+                    hir::ImplItem::Method(func) => {\n+                        let sig = func.signature(ctx.db);\n+                        if !sig.has_self_param() {\n+                            acc.add_function(ctx, func);\n+                        }\n                     }\n-                    None::<()>\n+                    hir::ImplItem::Const(ct) => acc.add_const(ctx, ct),\n+                    hir::ImplItem::Type(ty) => acc.add_type(ctx, ty),\n                 }\n+                None::<()>\n             });\n         }\n         _ => return,\n@@ -109,13 +57,10 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::{\n-        CompletionKind,\n-        completion_item::{check_completion, do_completion},\n-};\n-\n     use test_utils::covers;\n \n+    use crate::completion::{CompletionKind, check_completion, do_completion};\n+\n     fn check_reference_completion(code: &str, expected_completions: &str) {\n         check_completion(code, expected_completions, CompletionKind::Reference);\n     }"}, {"sha": "4dfa5f176078fb425585daabf5323dc6b047adda", "filename": "crates/ra_ide_api/src/completion/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -56,8 +56,7 @@ pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::completion_item::CompletionKind;\n-    use crate::completion::completion_item::check_completion;\n+    use crate::completion::{CompletionKind, check_completion};\n \n     fn check_snippet_completion(test_name: &str, code: &str) {\n         check_completion(test_name, code, CompletionKind::Postfix);"}, {"sha": "6146b7bb690576f43110a34cf9670b32514c1294", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,22 +1,17 @@\n-use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionContext};\n+use crate::completion::{Completions, CompletionContext};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n         return;\n     }\n     let names = ctx.resolver.all_names(ctx.db);\n \n-    names.into_iter().for_each(|(name, res)| {\n-        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n-            .from_resolution(ctx, &res)\n-            .add_to(acc)\n-    });\n+    names.into_iter().for_each(|(name, res)| acc.add_resolution(ctx, name.to_string(), &res));\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::CompletionKind;\n-    use crate::completion::completion_item::check_completion;\n+    use crate::completion::{CompletionKind, check_completion};\n \n     fn check_reference_completion(name: &str, code: &str) {\n         check_completion(name, code, CompletionKind::Reference);"}, {"sha": "e1df9e62512ae1ad9706eb5104dd4fddc07c625c", "filename": "crates/ra_ide_api/src/completion/complete_snippet.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -36,8 +36,7 @@ fn ${1:feature}() {\n \n #[cfg(test)]\n mod tests {\n-    use crate::completion::CompletionKind;\n-    use crate::completion::completion_item::check_completion;\n+    use crate::completion::{CompletionKind, check_completion};\n \n     fn check_snippet_completion(name: &str, code: &str) {\n         check_completion(name, code, CompletionKind::Snippet);"}, {"sha": "afb092f59777f8556e419c5c80392149f2918109", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,7 +1,6 @@\n-use hir::{Ty, AdtDef, Docs};\n+use hir::{Ty, AdtDef};\n \n-use crate::completion::{CompletionContext, Completions, CompletionItem, CompletionItemKind};\n-use crate::completion::completion_item::CompletionKind;\n+use crate::completion::{CompletionContext, Completions};\n \n /// Complete fields in fields literals.\n pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -23,15 +22,7 @@ pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionCon\n     match adt {\n         AdtDef::Struct(s) => {\n             for field in s.fields(ctx.db) {\n-                CompletionItem::new(\n-                    CompletionKind::Reference,\n-                    ctx.source_range(),\n-                    field.name(ctx.db).to_string(),\n-                )\n-                .kind(CompletionItemKind::Field)\n-                .detail(field.ty(ctx.db).subst(substs).to_string())\n-                .set_documentation(field.docs(ctx.db))\n-                .add_to(acc);\n+                acc.add_field(ctx, field, substs);\n             }\n         }\n \n@@ -43,10 +34,10 @@ pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionCon\n #[cfg(test)]\n mod tests {\n     use insta::assert_debug_snapshot_matches;\n-    use crate::completion::{CompletionItem, CompletionKind};\n+    use crate::completion::{CompletionItem, CompletionKind, do_completion};\n \n     fn complete(code: &str) -> Vec<CompletionItem> {\n-        crate::completion::completion_item::do_completion(code, CompletionKind::Reference)\n+        do_completion(code, CompletionKind::Reference)\n     }\n \n     #[test]"}, {"sha": "f515fcc14f27c5b5d86f548dcef99f5c3b18abde", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 190, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,16 +1,8 @@\n use std::fmt;\n \n-use hir::{Docs, Documentation, PerNs, Resolution};\n+use hir::Documentation;\n use ra_syntax::TextRange;\n-use ra_text_edit::{ TextEditBuilder, TextEdit};\n-use test_utils::tested_by;\n-\n-use crate::completion::{\n-    completion_context::CompletionContext,\n-    function_label,\n-    const_label,\n-    type_label\n-};\n+use ra_text_edit::{TextEditBuilder, TextEdit};\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n@@ -255,91 +247,6 @@ impl Builder {\n         self.documentation = docs.map(Into::into);\n         self\n     }\n-    pub(super) fn from_resolution(\n-        mut self,\n-        ctx: &CompletionContext,\n-        resolution: &PerNs<Resolution>,\n-    ) -> Builder {\n-        use hir::ModuleDef::*;\n-\n-        let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n-        let def = match def {\n-            None => return self,\n-            Some(it) => it,\n-        };\n-        let (kind, docs) = match def {\n-            Resolution::Def(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n-            Resolution::Def(Function(func)) => return self.from_function(ctx, *func),\n-            Resolution::Def(Struct(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n-            Resolution::Def(Enum(it)) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n-            Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n-            Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n-            Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n-            Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n-            Resolution::Def(Type(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n-            Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n-            Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n-            Resolution::SelfType(..) => (\n-                CompletionItemKind::TypeParam, // (does this need its own kind?)\n-                None,\n-            ),\n-        };\n-        self.kind = Some(kind);\n-        self.documentation = docs;\n-\n-        self\n-    }\n-\n-    pub(super) fn from_function(\n-        mut self,\n-        ctx: &CompletionContext,\n-        function: hir::Function,\n-    ) -> Builder {\n-        // If not an import, add parenthesis automatically.\n-        if ctx.use_item_syntax.is_none() && !ctx.is_call {\n-            tested_by!(inserts_parens_for_function_calls);\n-            let sig = function.signature(ctx.db);\n-            if sig.params().is_empty() || sig.has_self_param() && sig.params().len() == 1 {\n-                self.insert_text = Some(format!(\"{}()$0\", self.label));\n-            } else {\n-                self.insert_text = Some(format!(\"{}($0)\", self.label));\n-            }\n-            self.insert_text_format = InsertTextFormat::Snippet;\n-        }\n-\n-        if let Some(docs) = function.docs(ctx.db) {\n-            self.documentation = Some(docs);\n-        }\n-\n-        if let Some(label) = function_item_label(ctx, function) {\n-            self.detail = Some(label);\n-        }\n-\n-        self.kind = Some(CompletionItemKind::Function);\n-        self\n-    }\n-\n-    pub(super) fn from_const(mut self, ctx: &CompletionContext, ct: hir::Const) -> Builder {\n-        if let Some(docs) = ct.docs(ctx.db) {\n-            self.documentation = Some(docs);\n-        }\n-\n-        self.detail = Some(const_item_label(ctx, ct));\n-        self.kind = Some(CompletionItemKind::Const);\n-\n-        self\n-    }\n-\n-    pub(super) fn from_type(mut self, ctx: &CompletionContext, ty: hir::Type) -> Builder {\n-        if let Some(docs) = ty.docs(ctx.db) {\n-            self.documentation = Some(docs);\n-        }\n-\n-        self.detail = Some(type_item_label(ctx, ty));\n-        self.kind = Some(CompletionItemKind::TypeAlias);\n-\n-        self\n-    }\n }\n \n impl<'a> Into<CompletionItem> for Builder {\n@@ -373,21 +280,6 @@ impl Into<Vec<CompletionItem>> for Completions {\n     }\n }\n \n-fn function_item_label(ctx: &CompletionContext, function: hir::Function) -> Option<String> {\n-    let node = function.source(ctx.db).1;\n-    function_label(&node)\n-}\n-\n-fn const_item_label(ctx: &CompletionContext, ct: hir::Const) -> String {\n-    let node = ct.source(ctx.db).1;\n-    const_label(&node)\n-}\n-\n-fn type_item_label(ctx: &CompletionContext, ty: hir::Type) -> String {\n-    let node = ty.source(ctx.db).1;\n-    type_label(&node)\n-}\n-\n #[cfg(test)]\n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n     use crate::mock_analysis::{single_file_with_position, analysis_and_position};\n@@ -411,83 +303,3 @@ pub(crate) fn check_completion(test_name: &str, code: &str, kind: CompletionKind\n     let kind_completions = do_completion(code, kind);\n     assert_debug_snapshot_matches!(test_name, kind_completions);\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use test_utils::covers;\n-\n-    use super::*;\n-\n-    fn check_reference_completion(code: &str, expected_completions: &str) {\n-        check_completion(code, expected_completions, CompletionKind::Reference);\n-    }\n-\n-    #[test]\n-    fn inserts_parens_for_function_calls() {\n-        covers!(inserts_parens_for_function_calls);\n-        check_reference_completion(\n-            \"inserts_parens_for_function_calls1\",\n-            r\"\n-            fn no_args() {}\n-            fn main() { no_<|> }\n-            \",\n-        );\n-        check_reference_completion(\n-            \"inserts_parens_for_function_calls2\",\n-            r\"\n-            fn with_args(x: i32, y: String) {}\n-            fn main() { with_<|> }\n-            \",\n-        );\n-        check_reference_completion(\n-            \"inserts_parens_for_function_calls3\",\n-            r\"\n-            struct S {}\n-            impl S {\n-                fn foo(&self) {}\n-            }\n-            fn bar(s: &S) {\n-                s.f<|>\n-            }\n-            \",\n-        )\n-    }\n-\n-    #[test]\n-    fn dont_render_function_parens_in_use_item() {\n-        check_reference_completion(\n-            \"dont_render_function_parens_in_use_item\",\n-            \"\n-            //- /lib.rs\n-            mod m { pub fn foo() {} }\n-            use crate::m::f<|>;\n-            \",\n-        )\n-    }\n-\n-    #[test]\n-    fn dont_render_function_parens_if_already_call() {\n-        check_reference_completion(\n-            \"dont_render_function_parens_if_already_call\",\n-            \"\n-            //- /lib.rs\n-            fn frobnicate() {}\n-            fn main() {\n-                frob<|>();\n-            }\n-            \",\n-        );\n-        check_reference_completion(\n-            \"dont_render_function_parens_if_already_call_assoc_fn\",\n-            \"\n-            //- /lib.rs\n-            struct Foo {}\n-            impl Foo { fn new() -> Foo {} }\n-            fn main() {\n-                Foo::ne<|>();\n-            }\n-            \",\n-        )\n-    }\n-\n-}"}, {"sha": "6454436c9be3853a6fd65a922ddc5ebf8191b73e", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "added", "additions": 245, "deletions": 0, "changes": 245, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -0,0 +1,245 @@\n+//! This modules takes care of rendering various defenitions as completion items.\n+use join_to_string::join;\n+use test_utils::tested_by;\n+use hir::{Docs, PerNs, Resolution};\n+use ra_syntax::ast::NameOwner;\n+\n+use crate::completion::{\n+    Completions, CompletionKind, CompletionItemKind, CompletionContext, CompletionItem,\n+    function_label, const_label, type_label,\n+};\n+\n+impl Completions {\n+    pub(crate) fn add_field(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        field: hir::StructField,\n+        substs: &hir::Substs,\n+    ) {\n+        CompletionItem::new(\n+            CompletionKind::Reference,\n+            ctx.source_range(),\n+            field.name(ctx.db).to_string(),\n+        )\n+        .kind(CompletionItemKind::Field)\n+        .detail(field.ty(ctx.db).subst(substs).to_string())\n+        .set_documentation(field.docs(ctx.db))\n+        .add_to(self);\n+    }\n+\n+    pub(crate) fn add_pos_field(&mut self, ctx: &CompletionContext, field: usize, ty: &hir::Ty) {\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), field.to_string())\n+            .kind(CompletionItemKind::Field)\n+            .detail(ty.to_string())\n+            .add_to(self);\n+    }\n+\n+    pub(crate) fn add_resolution(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        local_name: String,\n+        resolution: &PerNs<Resolution>,\n+    ) {\n+        use hir::ModuleDef::*;\n+\n+        let def = resolution.as_ref().take_types().or_else(|| resolution.as_ref().take_values());\n+        let def = match def {\n+            None => {\n+                self.add(CompletionItem::new(\n+                    CompletionKind::Reference,\n+                    ctx.source_range(),\n+                    local_name,\n+                ));\n+                return;\n+            }\n+            Some(it) => it,\n+        };\n+        let (kind, docs) = match def {\n+            Resolution::Def(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n+            Resolution::Def(Function(func)) => {\n+                return self.add_function_with_name(ctx, Some(local_name), *func);\n+            }\n+            Resolution::Def(Struct(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n+            Resolution::Def(Enum(it)) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n+            Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n+            Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n+            Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n+            Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n+            Resolution::Def(Type(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n+            Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n+            Resolution::SelfType(..) => (\n+                CompletionItemKind::TypeParam, // (does this need its own kind?)\n+                None,\n+            ),\n+        };\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n+            .kind(kind)\n+            .set_documentation(docs)\n+            .add_to(self)\n+    }\n+\n+    pub(crate) fn add_function(&mut self, ctx: &CompletionContext, func: hir::Function) {\n+        self.add_function_with_name(ctx, None, func)\n+    }\n+\n+    fn add_function_with_name(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        name: Option<String>,\n+        func: hir::Function,\n+    ) {\n+        let sig = func.signature(ctx.db);\n+        let name = name.unwrap_or_else(|| sig.name().to_string());\n+        let (_, ast_node) = func.source(ctx.db);\n+        let detail = function_label(&ast_node);\n+\n+        let mut builder = CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name)\n+            .kind(if sig.has_self_param() {\n+                CompletionItemKind::Method\n+            } else {\n+                CompletionItemKind::Function\n+            })\n+            .set_documentation(func.docs(ctx.db))\n+            .set_detail(detail);\n+        // If not an import, add parenthesis automatically.\n+        if ctx.use_item_syntax.is_none() && !ctx.is_call {\n+            tested_by!(inserts_parens_for_function_calls);\n+            let snippet =\n+                if sig.params().is_empty() || sig.has_self_param() && sig.params().len() == 1 {\n+                    format!(\"{}()$0\", sig.name())\n+                } else {\n+                    format!(\"{}($0)\", sig.name())\n+                };\n+            builder = builder.insert_snippet(snippet);\n+        }\n+        self.add(builder)\n+    }\n+\n+    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n+        let (_file_id, ast_node) = constant.source(ctx.db);\n+        let name = match ast_node.name() {\n+            Some(name) => name,\n+            _ => return,\n+        };\n+        let (_, ast_node) = constant.source(ctx.db);\n+        let detail = const_label(&ast_node);\n+\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n+            .kind(CompletionItemKind::Const)\n+            .set_documentation(constant.docs(ctx.db))\n+            .detail(detail)\n+            .add_to(self);\n+    }\n+\n+    pub(crate) fn add_type(&mut self, ctx: &CompletionContext, type_alias: hir::Type) {\n+        let (_file_id, type_def) = type_alias.source(ctx.db);\n+        let name = match type_def.name() {\n+            Some(name) => name,\n+            _ => return,\n+        };\n+        let (_, ast_node) = type_alias.source(ctx.db);\n+        let detail = type_label(&ast_node);\n+\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n+            .kind(CompletionItemKind::TypeAlias)\n+            .set_documentation(type_alias.docs(ctx.db))\n+            .detail(detail)\n+            .add_to(self);\n+    }\n+\n+    pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n+        let name = match variant.name(ctx.db) {\n+            Some(it) => it,\n+            None => return,\n+        };\n+        let detail_types = variant.fields(ctx.db).into_iter().map(|field| field.ty(ctx.db));\n+        let detail = join(detail_types).separator(\", \").surround_with(\"(\", \")\").to_string();\n+\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n+            .kind(CompletionItemKind::EnumVariant)\n+            .set_documentation(variant.docs(ctx.db))\n+            .detail(detail)\n+            .add_to(self);\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use test_utils::covers;\n+\n+    use crate::completion::{CompletionKind, check_completion};\n+\n+    fn check_reference_completion(code: &str, expected_completions: &str) {\n+        check_completion(code, expected_completions, CompletionKind::Reference);\n+    }\n+\n+    #[test]\n+    fn inserts_parens_for_function_calls() {\n+        covers!(inserts_parens_for_function_calls);\n+        check_reference_completion(\n+            \"inserts_parens_for_function_calls1\",\n+            r\"\n+            fn no_args() {}\n+            fn main() { no_<|> }\n+            \",\n+        );\n+        check_reference_completion(\n+            \"inserts_parens_for_function_calls2\",\n+            r\"\n+            fn with_args(x: i32, y: String) {}\n+            fn main() { with_<|> }\n+            \",\n+        );\n+        check_reference_completion(\n+            \"inserts_parens_for_function_calls3\",\n+            r\"\n+            struct S {}\n+            impl S {\n+                fn foo(&self) {}\n+            }\n+            fn bar(s: &S) {\n+                s.f<|>\n+            }\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn dont_render_function_parens_in_use_item() {\n+        check_reference_completion(\n+            \"dont_render_function_parens_in_use_item\",\n+            \"\n+            //- /lib.rs\n+            mod m { pub fn foo() {} }\n+            use crate::m::f<|>;\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn dont_render_function_parens_if_already_call() {\n+        check_reference_completion(\n+            \"dont_render_function_parens_if_already_call\",\n+            \"\n+            //- /lib.rs\n+            fn frobnicate() {}\n+            fn main() {\n+                frob<|>();\n+            }\n+            \",\n+        );\n+        check_reference_completion(\n+            \"dont_render_function_parens_if_already_call_assoc_fn\",\n+            \"\n+            //- /lib.rs\n+            struct Foo {}\n+            impl Foo { fn new() -> Foo {} }\n+            fn main() {\n+                Foo::ne<|>();\n+            }\n+            \",\n+        )\n+    }\n+\n+}"}, {"sha": "19375ea958bf62dc5ccdf5d220a5018531da8ca6", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__dont_render_function_parens_if_already_call_assoc_fn.snap", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_if_already_call_assoc_fn.snap", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_if_already_call_assoc_fn.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__dont_render_function_parens_if_already_call_assoc_fn.snap?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,6 +1,6 @@\n ---\n-created: \"2019-02-18T09:22:24.268227065Z\"\n-creator: insta@0.6.2\n+created: \"2019-02-24T16:33:48.008220694Z\"\n+creator: insta@0.6.3\n source: crates/ra_ide_api/src/completion/completion_item.rs\n expression: kind_completions\n ---\n@@ -10,7 +10,7 @@ expression: kind_completions\n         source_range: [67; 69),\n         delete: [67; 69),\n         insert: \"new\",\n-        kind: Method,\n+        kind: Function,\n         detail: \"fn new() -> Foo\"\n     }\n ]"}, {"sha": "7c69eebeb335b362574925355284b2857bf17db6", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__struct_associated_method.snap", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_method.snap", "raw_url": "https://github.com/rust-lang/rust/raw/5a684099e9aa3482b408002030fafe1dcd0fa9a9/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_method.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_method.snap?ref=5a684099e9aa3482b408002030fafe1dcd0fa9a9", "patch": "@@ -1,6 +1,6 @@\n ---\n-created: \"2019-02-18T09:22:24.093082839Z\"\n-creator: insta@0.6.2\n+created: \"2019-02-24T16:33:47.990111169Z\"\n+creator: insta@0.6.3\n source: crates/ra_ide_api/src/completion/completion_item.rs\n expression: kind_completions\n ---\n@@ -10,7 +10,7 @@ expression: kind_completions\n         source_range: [100; 100),\n         delete: [100; 100),\n         insert: \"m()$0\",\n-        kind: Method,\n+        kind: Function,\n         detail: \"fn m()\",\n         documentation: Documentation(\n             \"An associated method\""}]}