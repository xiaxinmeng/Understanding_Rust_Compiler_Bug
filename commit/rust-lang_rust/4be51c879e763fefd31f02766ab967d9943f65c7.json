{"sha": "4be51c879e763fefd31f02766ab967d9943f65c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZTUxYzg3OWU3NjNmZWZkMzFmMDI3NjZhYjk2N2Q5OTQzZjY1Yzc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-20T18:58:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-22T18:33:13Z"}, "message": "Point at type param when it's cause of unfulfilled obligation", "tree": {"sha": "e385b9d461a40a3ff51172fe0cafd614f62f7f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e385b9d461a40a3ff51172fe0cafd614f62f7f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4be51c879e763fefd31f02766ab967d9943f65c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4be51c879e763fefd31f02766ab967d9943f65c7", "html_url": "https://github.com/rust-lang/rust/commit/4be51c879e763fefd31f02766ab967d9943f65c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4be51c879e763fefd31f02766ab967d9943f65c7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0437ee8e51c43b76ff2e1a4ea717f18d279f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0437ee8e51c43b76ff2e1a4ea717f18d279f72", "html_url": "https://github.com/rust-lang/rust/commit/4e0437ee8e51c43b76ff2e1a4ea717f18d279f72"}], "stats": {"total": 285, "additions": 176, "deletions": 109}, "files": [{"sha": "710d847384e6cb28fcc5f295b820a4311bf4bed1", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -263,7 +263,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_builtin_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         callee_ty: Ty<'tcx>,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n@@ -425,7 +425,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n         self.check_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             inputs,\n             &expected_arg_tys[..],\n             arg_exprs,\n@@ -439,7 +439,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_deferred_closure_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n         fn_sig: ty::FnSig<'tcx>,\n@@ -458,7 +458,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.check_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             fn_sig.inputs(),\n             &expected_arg_tys,\n             arg_exprs,\n@@ -472,14 +472,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn confirm_overloaded_call(\n         &self,\n-        call_expr: &hir::Expr,\n+        call_expr: &'tcx hir::Expr,\n         arg_exprs: &'tcx [hir::Expr],\n         expected: Expectation<'tcx>,\n         method_callee: MethodCallee<'tcx>,\n     ) -> Ty<'tcx> {\n         let output_type = self.check_method_argument_types(\n             call_expr.span,\n-            call_expr.span,\n+            call_expr,\n             Ok(method_callee),\n             arg_exprs,\n             TupleArgumentsFlag::TupleArguments,"}, {"sha": "e34a2c6f61c24dd5139f45258dc5907658bd2281", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -796,7 +796,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Call the generic checker.\n         self.check_method_argument_types(\n             span,\n-            expr.span,\n+            expr,\n             method,\n             &args[1..],\n             DontTupleArguments,"}, {"sha": "5fe554de2586f43eb280505e10339f9850374fb3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 70, "deletions": 9, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -3070,12 +3070,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_method_argument_types(\n         &self,\n         sp: Span,\n-        expr_sp: Span,\n+        expr: &'tcx hir::Expr,\n         method: Result<MethodCallee<'tcx>, ()>,\n         args_no_rcvr: &'tcx [hir::Expr],\n         tuple_arguments: TupleArgumentsFlag,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n+\n         let has_error = match method {\n             Ok(method) => {\n                 method.substs.references_error() || method.sig.references_error()\n@@ -3090,8 +3091,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 TupleArguments => vec![self.tcx.intern_tup(&err_inputs[..])],\n             };\n \n-            self.check_argument_types(sp, expr_sp, &err_inputs[..], &[], args_no_rcvr,\n-                                      false, tuple_arguments, None);\n+            self.check_argument_types(\n+                sp,\n+                expr,\n+                &err_inputs[..],\n+                &[],\n+                args_no_rcvr,\n+                false,\n+                tuple_arguments,\n+                None,\n+            );\n             return self.tcx.types.err;\n         }\n \n@@ -3103,9 +3112,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             method.sig.output(),\n             &method.sig.inputs()[1..]\n         );\n-        self.check_argument_types(sp, expr_sp, &method.sig.inputs()[1..], &expected_arg_tys[..],\n-                                  args_no_rcvr, method.sig.c_variadic, tuple_arguments,\n-                                  self.tcx.hir().span_if_local(method.def_id));\n+        self.check_argument_types(\n+            sp,\n+            expr,\n+            &method.sig.inputs()[1..],\n+            &expected_arg_tys[..],\n+            args_no_rcvr,\n+            method.sig.c_variadic,\n+            tuple_arguments,\n+            self.tcx.hir().span_if_local(method.def_id),\n+        );\n         method.sig.output()\n     }\n \n@@ -3182,7 +3198,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     fn check_argument_types(\n         &self,\n         sp: Span,\n-        expr_sp: Span,\n+        expr: &'tcx hir::Expr,\n         fn_inputs: &[Ty<'tcx>],\n         expected_arg_tys: &[Ty<'tcx>],\n         args: &'tcx [hir::Expr],\n@@ -3191,7 +3207,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         def_span: Option<Span>,\n     ) {\n         let tcx = self.tcx;\n-\n         // Grab the argument types, supplying fresh type variables\n         // if the wrong number of arguments were supplied\n         let supplied_arg_count = if tuple_arguments == DontTupleArguments {\n@@ -3225,7 +3240,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_label(def_s, \"defined here\");\n             }\n             if sugg_unit {\n-                let sugg_span = tcx.sess.source_map().end_point(expr_sp);\n+                let sugg_span = tcx.sess.source_map().end_point(expr.span);\n                 // remove closing `)` from the span\n                 let sugg_span = sugg_span.shrink_to_lo();\n                 err.span_suggestion(\n@@ -3319,6 +3334,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // the call. This helps coercions.\n             if check_closures {\n                 self.select_obligations_where_possible(false, |errors| {\n+                    self.point_at_type_arg_instead_of_call_if_possible(errors, expr);\n                     self.point_at_arg_instead_of_call_if_possible(\n                         errors,\n                         &final_arg_types[..],\n@@ -3456,6 +3472,51 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Given a vec of evaluated `FullfillmentError`s and an `fn` call expression, we walk the\n+    /// `PathSegment`s and resolve their type parameters to see if any of the `FullfillmentError`s\n+    /// were caused by them. If they were, we point at the corresponding type argument's span\n+    /// instead of the `fn` call path span.\n+    fn point_at_type_arg_instead_of_call_if_possible(\n+        &self,\n+        errors: &mut Vec<traits::FulfillmentError<'_>>,\n+        call_expr: &'tcx hir::Expr,\n+    ) {\n+        if let hir::ExprKind::Call(path, _args) = &call_expr.node {\n+            if let hir::ExprKind::Path(qpath) = &path.node {\n+                if let hir::QPath::Resolved(_self, path) = &qpath {\n+                    for error in errors {\n+                        if let ty::Predicate::Trait(predicate) = error.obligation.predicate {\n+                            // If any of the type arguments in this path segment caused the\n+                            // `FullfillmentError`, point at its span (#61860).\n+                            for segment in &path.segments {\n+                                if let Some(args) = &segment.args {\n+                                    for arg in &args.args {\n+                                        if let hir::GenericArg::Type(hir_ty) = &arg {\n+                                            if let hir::TyKind::Path(\n+                                                hir::QPath::TypeRelative(..),\n+                                            ) = &hir_ty.node {\n+                                                // Avoid ICE with associated types. As this is best\n+                                                // effort only, it's ok to ignore the case. It\n+                                                // would trigger in `is_send::<T::AssocType>();`\n+                                                // from `typeck-default-trait-impl-assoc-type.rs`.\n+                                            } else {\n+                                                let ty = AstConv::ast_ty_to_ty(self, hir_ty);\n+                                                let ty = self.resolve_vars_if_possible(&ty);\n+                                                if ty == predicate.skip_binder().self_ty() {\n+                                                    error.obligation.cause.span = hir_ty.span;\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // AST fragment checking\n     fn check_lit(&self,\n                  lit: &hir::Lit,"}, {"sha": "45b6cc9ba5f982761c276dc5c26148064aa5ed72", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -27,15 +27,15 @@ LL |     bar::<IntStruct>();\n               found type `&usize`\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:91:5\n+  --> $DIR/associated-types-eq-hr.rs:91:17\n    |\n LL | fn tuple_one<T>()\n    |    ---------\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'x isize>\n    |               ---------------------------------------------------------- required by this bound in `tuple_one`\n ...\n LL |     tuple_one::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>\n@@ -52,15 +52,15 @@ LL |     tuple_one::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:97:5\n+  --> $DIR/associated-types-eq-hr.rs:97:17\n    |\n LL | fn tuple_two<T>()\n    |    ---------\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize), A = &'y isize>\n    |               ---------------------------------------------------------- required by this bound in `tuple_two`\n ...\n LL |     tuple_two::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |                 ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>\n@@ -77,15 +77,15 @@ LL |     tuple_two::<Tuple>();\n    |     ^^^^^^^^^^^^^^^^^^ expected bound lifetime parameter 'x, found concrete lifetime\n \n error[E0277]: the trait bound `for<'x, 'y> Tuple: TheTrait<(&'x isize, &'y isize)>` is not satisfied\n-  --> $DIR/associated-types-eq-hr.rs:107:5\n+  --> $DIR/associated-types-eq-hr.rs:107:18\n    |\n LL | fn tuple_four<T>()\n    |    ----------\n LL |     where T : for<'x,'y> TheTrait<(&'x isize, &'y isize)>\n    |               ------------------------------------------- required by this bound in `tuple_four`\n ...\n LL |     tuple_four::<Tuple>();\n-   |     ^^^^^^^^^^^^^^^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n+   |                  ^^^^^ the trait `for<'x, 'y> TheTrait<(&'x isize, &'y isize)>` is not implemented for `Tuple`\n    |\n    = help: the following implementations were found:\n              <Tuple as TheTrait<(&'a isize, &'a isize)>>"}, {"sha": "c395f3875ea0e0419912ab8d2b5dabc55fe08ecc", "filename": "src/test/ui/extern/extern-types-not-sync-send.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,22 +1,22 @@\n error[E0277]: `A` cannot be shared between threads safely\n-  --> $DIR/extern-types-not-sync-send.rs:13:5\n+  --> $DIR/extern-types-not-sync-send.rs:13:19\n    |\n LL | fn assert_sync<T: ?Sized + Sync>() { }\n    |    -----------             ---- required by this bound in `assert_sync`\n ...\n LL |     assert_sync::<A>();\n-   |     ^^^^^^^^^^^^^^^^ `A` cannot be shared between threads safely\n+   |                   ^ `A` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `A`\n \n error[E0277]: `A` cannot be sent between threads safely\n-  --> $DIR/extern-types-not-sync-send.rs:16:5\n+  --> $DIR/extern-types-not-sync-send.rs:16:19\n    |\n LL | fn assert_send<T: ?Sized + Send>() { }\n    |    -----------             ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<A>();\n-   |     ^^^^^^^^^^^^^^^^ `A` cannot be sent between threads safely\n+   |                   ^ `A` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `A`\n "}, {"sha": "0417186eed346c4c91d17203654f62e5a21b0a08", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/extern-types-unsized.rs:22:5\n+  --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n    |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n-   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}, {"sha": "9822b48f4f48fe4412697e1690b82c3c6684fe6a", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,13 +1,13 @@\n error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n-  --> $DIR/hrtb-conflate-regions.rs:27:10\n+  --> $DIR/hrtb-conflate-regions.rs:27:22\n    |\n LL | fn want_foo2<T>()\n    |    ---------\n LL |     where T : for<'a,'b> Foo<(&'a isize, &'b isize)>\n    |               -------------------------------------- required by this bound in `want_foo2`\n ...\n LL | fn b() { want_foo2::<SomeStruct>(); }\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n+   |                      ^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`\n    |\n    = help: the following implementations were found:\n              <SomeStruct as Foo<(&'a isize, &'a isize)>>"}, {"sha": "969d9eda7351970b8541e4d039b5d9ca469a2ed6", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(&'b u32)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:5\n+  --> $DIR/hrtb-exists-forall-trait-contravariant.rs:34:11\n    |\n LL | fn foo<T>()\n    |    ---\n@@ -8,7 +8,7 @@ LL |     T: Trait<for<'b> fn(&'b u32)>,\n    |        -------------------------- required by this bound in `foo`\n ...\n LL |     foo::<()>();\n-   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n+   |           ^^ the trait `Trait<for<'b> fn(&'b u32)>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(&'a u32)>>"}, {"sha": "dddc2bcce49e5d06b2466d2324c62415530c9a72", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(fn(&'b u32))>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:5\n+  --> $DIR/hrtb-exists-forall-trait-covariant.rs:36:11\n    |\n LL | fn foo<T>()\n    |    ---\n@@ -8,7 +8,7 @@ LL |     T: Trait<for<'b> fn(fn(&'b u32))>,\n    |        ------------------------------ required by this bound in `foo`\n ...\n LL |     foo::<()>();\n-   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n+   |           ^^ the trait `Trait<for<'b> fn(fn(&'b u32))>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(fn(&'a u32))>>"}, {"sha": "23ef75944d317bc0c352d5efe08af8ef384d11f5", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `(): Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not satisfied\n-  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:11\n    |\n LL | fn foo<T>()\n    |    ---\n@@ -8,7 +8,7 @@ LL |     T: Trait<for<'b> fn(Cell<&'b u32>)>,\n    |        -------------------------------- required by this bound in `foo`\n ...\n LL |     foo::<()>();\n-   |     ^^^^^^^^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n+   |           ^^ the trait `Trait<for<'b> fn(std::cell::Cell<&'b u32>)>` is not implemented for `()`\n    |\n    = help: the following implementations were found:\n              <() as Trait<fn(std::cell::Cell<&'a u32>)>>"}, {"sha": "6ec0beefd60e39f900989e54ba590dbefde98788", "filename": "src/test/ui/hrtb/hrtb-just-for-static.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-just-for-static.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,27 +1,27 @@\n error[E0277]: the trait bound `for<'a> StaticInt: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:24:5\n+  --> $DIR/hrtb-just-for-static.rs:24:17\n    |\n LL | fn want_hrtb<T>()\n    |    ---------\n LL |     where T : for<'a> Foo<&'a isize>\n    |               ---------------------- required by this bound in `want_hrtb`\n ...\n LL |     want_hrtb::<StaticInt>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n+   |                 ^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `StaticInt`\n    |\n    = help: the following implementations were found:\n              <StaticInt as Foo<&'static isize>>\n \n error[E0277]: the trait bound `for<'a> &'a u32: Foo<&'a isize>` is not satisfied\n-  --> $DIR/hrtb-just-for-static.rs:30:5\n+  --> $DIR/hrtb-just-for-static.rs:30:17\n    |\n LL | fn want_hrtb<T>()\n    |    ---------\n LL |     where T : for<'a> Foo<&'a isize>\n    |               ---------------------- required by this bound in `want_hrtb`\n ...\n LL |     want_hrtb::<&'a u32>()\n-   |     ^^^^^^^^^^^^^^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n+   |                 ^^^^^^^ the trait `for<'a> Foo<&'a isize>` is not implemented for `&'a u32`\n    |\n    = help: the following implementations were found:\n              <&'a u32 as Foo<&'a isize>>"}, {"sha": "c818041e596321a53f88ab251889a450c3a675a9", "filename": "src/test/ui/hrtb/issue-46989.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-46989.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `for<'r> fn(&'r i32): Foo` is not satisfied\n-  --> $DIR/issue-46989.rs:40:5\n+  --> $DIR/issue-46989.rs:40:18\n    |\n LL | fn assert_foo<T: Foo>() {}\n    |    ----------    --- required by this bound in `assert_foo`\n ...\n LL |     assert_foo::<fn(&i32)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n+   |                  ^^^^^^^^ the trait `Foo` is not implemented for `for<'r> fn(&'r i32)`\n    |\n    = help: the following implementations were found:\n              <fn(A) as Foo>"}, {"sha": "089968ede7d0ff4453e5b6a41f80aa53c1dcb4ee", "filename": "src/test/ui/issues/issue-1920-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `foo::issue_1920::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-1.rs:12:5\n+  --> $DIR/issue-1920-1.rs:12:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n    |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `foo::issue_1920::S`\n \n error: aborting due to previous error\n "}, {"sha": "eaf34e076c088b88e32d0550754aacf932f17e60", "filename": "src/test/ui/issues/issue-1920-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `bar::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-2.rs:10:5\n+  --> $DIR/issue-1920-2.rs:10:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n    |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<bar::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`\n+   |                    ^^^^^^ the trait `std::clone::Clone` is not implemented for `bar::S`\n \n error: aborting due to previous error\n "}, {"sha": "0550f5feba5bee6677f82e438de6b0e498148f63", "filename": "src/test/ui/issues/issue-1920-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `issue_1920::S: std::clone::Clone` is not satisfied\n-  --> $DIR/issue-1920-3.rs:14:5\n+  --> $DIR/issue-1920-3.rs:14:20\n    |\n LL | fn assert_clone<T>() where T : Clone { }\n    |    ------------                ----- required by this bound in `assert_clone`\n ...\n LL |     assert_clone::<foo::issue_1920::S>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `issue_1920::S`\n \n error: aborting due to previous error\n "}, {"sha": "fee9e2802a6c3888e2aec4ca957696d26794f30e", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 24, "deletions": 18, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,62 +1,68 @@\n error[E0277]: the trait bound `&'static mut isize: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:27:5\n+  --> $DIR/kindck-copy.rs:27:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'static mut isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n+   |                   -^^^^^^^^^^^^^^^^^\n+   |                   |\n+   |                   the trait `std::marker::Copy` is not implemented for `&'static mut isize`\n+   |                   help: consider removing 1 leading `&`-references\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n \n error[E0277]: the trait bound `&'a mut isize: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:28:5\n+  --> $DIR/kindck-copy.rs:28:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n+   |                   -^^^^^^^^^^^^\n+   |                   |\n+   |                   the trait `std::marker::Copy` is not implemented for `&'a mut isize`\n+   |                   help: consider removing 1 leading `&`-references\n    |\n    = help: the following implementations were found:\n              <isize as std::marker::Copy>\n \n error[E0277]: the trait bound `std::boxed::Box<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:31:5\n+  --> $DIR/kindck-copy.rs:31:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n+   |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<isize>`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:32:5\n+  --> $DIR/kindck-copy.rs:32:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<String>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |                   ^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n \n error[E0277]: the trait bound `std::vec::Vec<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:33:5\n+  --> $DIR/kindck-copy.rs:33:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Vec<isize> >();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n+   |                   ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::vec::Vec<isize>`\n \n error[E0277]: the trait bound `std::boxed::Box<&'a mut isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:34:5\n+  --> $DIR/kindck-copy.rs:34:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Box<&'a mut isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n+   |                   ^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<&'a mut isize>`\n \n error[E0277]: the trait bound `std::boxed::Box<dyn Dummy>: std::marker::Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:42:5\n@@ -77,31 +83,31 @@ LL |     assert_copy::<Box<dyn Dummy + Send>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::boxed::Box<dyn Dummy + std::marker::Send>`\n \n error[E0277]: the trait bound `&'a mut (dyn Dummy + std::marker::Send + 'a): std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:46:5\n+  --> $DIR/kindck-copy.rs:46:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `&'a mut (dyn Dummy + std::marker::Send + 'a)`\n \n error[E0277]: the trait bound `MyNoncopyStruct: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:64:5\n+  --> $DIR/kindck-copy.rs:64:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<MyNoncopyStruct>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n+   |                   ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `MyNoncopyStruct`\n \n error[E0277]: the trait bound `std::rc::Rc<isize>: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-copy.rs:67:5\n+  --> $DIR/kindck-copy.rs:67:19\n    |\n LL | fn assert_copy<T:Copy>() { }\n    |    -----------   ---- required by this bound in `assert_copy`\n ...\n LL |     assert_copy::<Rc<isize>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`\n+   |                   ^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::rc::Rc<isize>`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "05ed51d0f117597bbb99ff5f1d9ae8b34a2b7072", "filename": "src/test/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n-  --> $DIR/kindck-send-unsafe.rs:6:5\n+  --> $DIR/kindck-send-unsafe.rs:6:19\n    |\n LL | fn assert_send<T:Send>() { }\n    |    -----------   ---- required by this bound in `assert_send`\n ...\n LL |     assert_send::<*mut &'a isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n+   |                   ^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `*mut &'a isize`\n "}, {"sha": "4508870746bcbd2ffc932aeaa864b759e2a86a04", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n-  --> $DIR/overlap-marker-trait.rs:27:5\n+  --> $DIR/overlap-marker-trait.rs:27:17\n    |\n LL | fn is_marker<T: Marker>() { }\n    |    ---------    ------ required by this bound in `is_marker`\n ...\n LL |     is_marker::<NotDebugOrDisplay>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n \n error: aborting due to previous error\n "}, {"sha": "2daf4781c7e6f3e4ef83182288a60c97809fbb36", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n    |\n LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n    |    -------   ------------------------- required by this bound in `call_it`"}, {"sha": "8bb4ce2e2c77340904ff5a0d95759e38c469f552", "filename": "src/test/ui/not-sync.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-sync.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,66 +1,66 @@\n error[E0277]: `std::cell::Cell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:8:5\n+  --> $DIR/not-sync.rs:8:12\n    |\n LL | fn test<T: Sync>() {}\n    |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Cell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^ `std::cell::Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n \n error[E0277]: `std::cell::RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:10:5\n+  --> $DIR/not-sync.rs:10:12\n    |\n LL | fn test<T: Sync>() {}\n    |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<RefCell<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^^ `std::cell::RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::RefCell<i32>`\n \n error[E0277]: `std::rc::Rc<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:13:5\n+  --> $DIR/not-sync.rs:13:12\n    |\n LL | fn test<T: Sync>() {}\n    |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Rc<i32>>();\n-   |     ^^^^^^^^^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^ `std::rc::Rc<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Rc<i32>`\n \n error[E0277]: `std::rc::Weak<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:15:5\n+  --> $DIR/not-sync.rs:15:12\n    |\n LL | fn test<T: Sync>() {}\n    |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Weak<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Weak<i32>`\n \n error[E0277]: `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:18:5\n+  --> $DIR/not-sync.rs:18:12\n    |\n LL | fn test<T: Sync>() {}\n    |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Receiver<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Receiver<i32>`\n \n error[E0277]: `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n-  --> $DIR/not-sync.rs:20:5\n+  --> $DIR/not-sync.rs:20:12\n    |\n LL | fn test<T: Sync>() {}\n    |    ----    ---- required by this bound in `test`\n ...\n LL |     test::<Sender<i32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n+   |            ^^^^^^^^^^^ `std::sync::mpsc::Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::sync::mpsc::Sender<i32>`\n "}, {"sha": "15ebcd17b0dbc7d37170d79bf40d99846a13d8fd", "filename": "src/test/ui/overlap-marker-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverlap-marker-trait.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n-  --> $DIR/overlap-marker-trait.rs:30:5\n+  --> $DIR/overlap-marker-trait.rs:30:17\n    |\n LL | fn is_marker<T: Marker>() { }\n    |    ---------    ------ required by this bound in `is_marker`\n ...\n LL |     is_marker::<NotDebugOrDisplay>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n \n error: aborting due to previous error\n "}, {"sha": "cad5c81f5a6ca4bf8bdc7e625af685fccd9818dc", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,22 +1,22 @@\n error[E0277]: `std::rc::Rc<u32>` cannot be sent between threads safely\n-  --> $DIR/trait-alias-cross-crate.rs:14:5\n+  --> $DIR/trait-alias-cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n    |    ---------    -------- required by this bound in `use_alias`\n ...\n LL |     use_alias::<Rc<u32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<u32>` cannot be sent between threads safely\n+   |                 ^^^^^^^ `std::rc::Rc<u32>` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `std::rc::Rc<u32>`\n \n error[E0277]: `std::rc::Rc<u32>` cannot be shared between threads safely\n-  --> $DIR/trait-alias-cross-crate.rs:14:5\n+  --> $DIR/trait-alias-cross-crate.rs:14:17\n    |\n LL | fn use_alias<T: SendSync>() {}\n    |    ---------    -------- required by this bound in `use_alias`\n ...\n LL |     use_alias::<Rc<u32>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `std::rc::Rc<u32>` cannot be shared between threads safely\n+   |                 ^^^^^^^ `std::rc::Rc<u32>` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `std::rc::Rc<u32>`\n "}, {"sha": "d15edaa9c814683bc64ea3cd76c9cef10baa0852", "filename": "src/test/ui/traits/trait-suggest-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-suggest-where-clause.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: the size for values of type `U` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:9:5\n+  --> $DIR/trait-suggest-where-clause.rs:9:20\n    |\n LL |     mem::size_of::<U>();\n-   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^ doesn't have a size known at compile-time\n    | \n   ::: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n    |\n@@ -56,10 +56,10 @@ LL |     <Misc<_> as From<T>>::from;\n    = note: required by `std::convert::From::from`\n \n error[E0277]: the size for values of type `[T]` cannot be known at compilation time\n-  --> $DIR/trait-suggest-where-clause.rs:30:5\n+  --> $DIR/trait-suggest-where-clause.rs:30:20\n    |\n LL |     mem::size_of::<[T]>();\n-   |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |                    ^^^ doesn't have a size known at compile-time\n    | \n   ::: $SRC_DIR/libcore/mem/mod.rs:LL:COL\n    |"}, {"sha": "d2f1a04837b86b4a21bc18aca2bc3d84bb9d63d2", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -17,10 +17,10 @@ LL |     ()?;\n    = note: required by `std::ops::Try::into_result`\n \n error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n-  --> $DIR/try-operator-on-main.rs:15:5\n+  --> $DIR/try-operator-on-main.rs:15:25\n    |\n LL |     try_trait_generic::<()>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n+   |                         ^^ the trait `std::ops::Try` is not implemented for `()`\n ...\n LL | fn try_trait_generic<T: Try>() -> T {\n    |    -----------------    --- required by this bound in `try_trait_generic`"}, {"sha": "22a2cb3e0ecb8c61bdaa97c038a58eea58ae1af5", "filename": "src/test/ui/typeck/typeck-default-trait-impl-constituent-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-constituent-types.rs:20:5\n+  --> $DIR/typeck-default-trait-impl-constituent-types.rs:20:18\n    |\n LL | fn is_mytrait<T: MyTrait>() {}\n    |    ----------    ------- required by this bound in `is_mytrait`\n ...\n LL |     is_mytrait::<MyS2>();\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `MyS2`\n+   |                  ^^^^ the trait `MyTrait` is not implemented for `MyS2`\n    |\n    = help: the following implementations were found:\n              <MyS2 as MyTrait>"}, {"sha": "e30d4dfa1b3c49d7b074604a0a855fb54c813562", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-send.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `MyNotSendable` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-send.rs:19:5\n+  --> $DIR/typeck-default-trait-impl-negation-send.rs:19:15\n    |\n LL | fn is_send<T: Send>() {}\n    |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send::<MyNotSendable>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `MyNotSendable` cannot be sent between threads safely\n+   |               ^^^^^^^^^^^^^ `MyNotSendable` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `MyNotSendable`\n "}, {"sha": "4dd8e01cf2d36227a367b8addc78114da5075770", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `MyNotSync` cannot be shared between threads safely\n-  --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:5\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:15\n    |\n LL | fn is_sync<T: Sync>() {}\n    |    -------    ---- required by this bound in `is_sync`\n ...\n LL |     is_sync::<MyNotSync>();\n-   |     ^^^^^^^^^^^^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n+   |               ^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `MyNotSync`\n "}, {"sha": "4b13fcc885a0d5d7d12653f19adbd68ed805e1eb", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,23 +1,23 @@\n error[E0277]: the trait bound `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:21:5\n+  --> $DIR/typeck-default-trait-impl-negation.rs:21:19\n    |\n LL | fn is_my_trait<T: MyTrait>() {}\n    |    -----------    ------- required by this bound in `is_my_trait`\n ...\n LL |     is_my_trait::<ThisImplsUnsafeTrait>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `ThisImplsUnsafeTrait`\n+   |                   ^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `ThisImplsUnsafeTrait`\n    |\n    = help: the following implementations were found:\n              <ThisImplsUnsafeTrait as MyTrait>\n \n error[E0277]: the trait bound `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n-  --> $DIR/typeck-default-trait-impl-negation.rs:24:5\n+  --> $DIR/typeck-default-trait-impl-negation.rs:24:26\n    |\n LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n    |    ------------------    ------------- required by this bound in `is_my_unsafe_trait`\n ...\n LL |     is_my_unsafe_trait::<ThisImplsTrait>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyUnsafeTrait` is not implemented for `ThisImplsTrait`\n+   |                          ^^^^^^^^^^^^^^ the trait `MyUnsafeTrait` is not implemented for `ThisImplsTrait`\n    |\n    = help: the following implementations were found:\n              <ThisImplsTrait as MyUnsafeTrait>"}, {"sha": "b3139083b1ac8ec7186785e3df8a7b5f5df81bc3", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/typeck-default-trait-impl-send-param.rs:5:5\n+  --> $DIR/typeck-default-trait-impl-send-param.rs:5:15\n    |\n LL |     is_send::<T>()\n-   |     ^^^^^^^^^^^^ `T` cannot be sent between threads safely\n+   |               ^ `T` cannot be sent between threads safely\n ...\n LL | fn is_send<T:Send>() {\n    |    -------   ---- required by this bound in `is_send`"}, {"sha": "e56176690a113d9898e041cbff0885723f44ebc7", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4be51c879e763fefd31f02766ab967d9943f65c7/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=4be51c879e763fefd31f02766ab967d9943f65c7", "patch": "@@ -1,10 +1,10 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/unsized-bare-typaram.rs:2:23\n+  --> $DIR/unsized-bare-typaram.rs:2:29\n    |\n LL | fn bar<T: Sized>() { }\n    |    --- - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n-   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |                             ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `T`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>"}]}