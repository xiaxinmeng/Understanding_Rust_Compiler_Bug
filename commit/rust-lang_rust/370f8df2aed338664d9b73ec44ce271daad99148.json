{"sha": "370f8df2aed338664d9b73ec44ce271daad99148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MGY4ZGYyYWVkMzM4NjY0ZDliNzNlYzQ0Y2UyNzFkYWFkOTkxNDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-10T07:35:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-10T07:35:41Z"}, "message": "auto merge of #17108 : steveklabnik/rust/explicitness, r=alexcrichton\n\nI missed some annotations, and some were in a different style.", "tree": {"sha": "79c4ba5bc8ba19cf58fc0cc0c784fd457ec5304d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c4ba5bc8ba19cf58fc0cc0c784fd457ec5304d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/370f8df2aed338664d9b73ec44ce271daad99148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/370f8df2aed338664d9b73ec44ce271daad99148", "html_url": "https://github.com/rust-lang/rust/commit/370f8df2aed338664d9b73ec44ce271daad99148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/370f8df2aed338664d9b73ec44ce271daad99148/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "036f38033f2f94ce5b706ada2871054e9b8b56ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/036f38033f2f94ce5b706ada2871054e9b8b56ce", "html_url": "https://github.com/rust-lang/rust/commit/036f38033f2f94ce5b706ada2871054e9b8b56ce"}, {"sha": "c8e5068ec93ff7af550bcd0276f10c1321e4b337", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e5068ec93ff7af550bcd0276f10c1321e4b337", "html_url": "https://github.com/rust-lang/rust/commit/c8e5068ec93ff7af550bcd0276f10c1321e4b337"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "ec5e544fa75298a6845e5ec9c185781e4dae965e", "filename": "src/doc/guide.md", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/370f8df2aed338664d9b73ec44ce271daad99148/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/370f8df2aed338664d9b73ec44ce271daad99148/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=370f8df2aed338664d9b73ec44ce271daad99148", "patch": "@@ -150,7 +150,7 @@ in your file name, use an underscore. `hello_world.rs` versus `goodbye.rs`.\n \n Now that you've got your file open, type this in:\n \n-```\n+```{rust}\n fn main() {\n     println!(\"Hello, world!\");\n }\n@@ -166,7 +166,7 @@ Hello, world!\n \n Success! Let's go over what just happened in detail.\n \n-```\n+```{rust}\n fn main() {\n \n }\n@@ -186,7 +186,7 @@ declaration, with one space in between.\n \n Next up is this line:\n \n-```\n+```{rust}\n     println!(\"Hello, world!\");\n ```\n \n@@ -562,7 +562,7 @@ the block is executed. If it's `false`, then it is not.\n \n If you want something to happen in the `false` case, use an `else`:\n \n-```\n+```{rust}\n let x = 5i;\n \n if x == 5i {\n@@ -574,7 +574,8 @@ if x == 5i {\n \n This is all pretty standard. However, you can also do this:\n \n-```\n+\n+```{rust}\n let x = 5i;\n \n let y = if x == 5i {\n@@ -586,7 +587,7 @@ let y = if x == 5i {\n \n Which we can (and probably should) write like this:\n \n-```\n+```{rust}\n let x = 5i;\n \n let y = if x == 5i { 10i } else { 15i };\n@@ -643,7 +644,7 @@ every line of Rust code you see.\n What is this exception that makes us say 'almost?' You saw it already, in this\n code:\n \n-```\n+```{rust}\n let x = 5i;\n \n let y: int = if x == 5i { 10i } else { 15i };\n@@ -989,7 +990,7 @@ notation: `origin.x`.\n The values in structs are immutable, like other bindings in Rust. However, you\n can use `mut` to make them mutable:\n \n-```rust\n+```{rust}\n struct Point {\n     x: int,\n     y: int,\n@@ -1013,7 +1014,7 @@ called a **tuple struct**. Tuple structs do have a name, but their fields\n don't:\n \n \n-```\n+```{rust}\n struct Color(int, int, int);\n struct Point(int, int, int);\n ```\n@@ -1028,7 +1029,7 @@ let origin = Point(0, 0, 0);\n It is almost always better to use a struct than a tuple struct. We would write\n `Color` and `Point` like this instead:\n \n-```rust\n+```{rust}\n struct Color {\n     red: int,\n     blue: int,\n@@ -1049,7 +1050,7 @@ There _is_ one case when a tuple struct is very useful, though, and that's a\n tuple struct with only one element. We call this a 'newtype,' because it lets\n you create a new type that's a synonym for another one:\n \n-```\n+```{rust}\n struct Inches(int);\n \n let length = Inches(10);\n@@ -1166,7 +1167,7 @@ what's the solution?\n Rust has a keyword, `match`, that allows you to replace complicated `if`/`else`\n groupings with something more powerful. Check it out:\n \n-```rust\n+```{rust}\n let x = 5i;\n \n match x {\n@@ -1407,7 +1408,7 @@ We now loop forever with `loop`, and use `break` to break out early.\n `continue` is similar, but instead of ending the loop, goes to the next\n iteration: This will only print the odd numbers:\n \n-```\n+```{rust}\n for x in range(0i, 10i) {\n     if x % 2 == 0 { continue; }\n \n@@ -4122,7 +4123,7 @@ the ability to use this **method call syntax** via the `impl` keyword.\n \n Here's how it works:\n \n-```\n+```{rust}\n struct Circle {\n     x: f64,\n     y: f64,\n@@ -4161,7 +4162,7 @@ multiplications later, and we have our area.\n You can also define methods that do not take a `self` parameter. Here's a\n pattern that's very common in Rust code:\n \n-```\n+```{rust}\n struct Circle {\n     x: f64,\n     y: f64,"}]}