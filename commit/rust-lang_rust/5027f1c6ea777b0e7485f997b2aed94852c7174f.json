{"sha": "5027f1c6ea777b0e7485f997b2aed94852c7174f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMjdmMWM2ZWE3NzdiMGU3NDg1Zjk5N2IyYWVkOTQ4NTJjNzE3NGY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-10-27T17:46:43Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-08T16:55:46Z"}, "message": "Use a field for has_params.", "tree": {"sha": "f6bf8312742ea411ecdb0cb398e23d490ed84722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6bf8312742ea411ecdb0cb398e23d490ed84722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5027f1c6ea777b0e7485f997b2aed94852c7174f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5027f1c6ea777b0e7485f997b2aed94852c7174f", "html_url": "https://github.com/rust-lang/rust/commit/5027f1c6ea777b0e7485f997b2aed94852c7174f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5027f1c6ea777b0e7485f997b2aed94852c7174f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8c87ac080a67327eaaefc336733bc3e5f937448", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c87ac080a67327eaaefc336733bc3e5f937448", "html_url": "https://github.com/rust-lang/rust/commit/d8c87ac080a67327eaaefc336733bc3e5f937448"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "bd89b8cfe7c6e354c963f7c9bdf853f11d5221f9", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5027f1c6ea777b0e7485f997b2aed94852c7174f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5027f1c6ea777b0e7485f997b2aed94852c7174f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=5027f1c6ea777b0e7485f997b2aed94852c7174f", "patch": "@@ -76,6 +76,9 @@ pub use rustc_query_system::dep_graph::{DepContext, DepNodeParams};\n /// of the `DepKind`. Overall, this allows to implement `DepContext` using this manual\n /// jump table instead of large matches.\n pub struct DepKindStruct {\n+    /// Whether the DepNode has parameters (query keys).\n+    pub(super) has_params: bool,\n+\n     /// Anonymous queries cannot be replayed from one compiler invocation to the next.\n     /// When their result is needed, it is recomputed. They are useful for fine-grained\n     /// dependency tracking, and caching within one compiler invocation.\n@@ -132,26 +135,31 @@ pub mod dep_kind {\n     use super::*;\n \n     // We use this for most things when incr. comp. is turned off.\n-    pub const Null: DepKindStruct = DepKindStruct { is_anon: false, is_eval_always: false };\n+    pub const Null: DepKindStruct =\n+        DepKindStruct { has_params: false, is_anon: false, is_eval_always: false };\n \n     // Represents metadata from an extern crate.\n-    pub const CrateMetadata: DepKindStruct = DepKindStruct { is_anon: false, is_eval_always: true };\n+    pub const CrateMetadata: DepKindStruct =\n+        DepKindStruct { has_params: true, is_anon: false, is_eval_always: true };\n \n-    pub const TraitSelect: DepKindStruct = DepKindStruct { is_anon: true, is_eval_always: false };\n+    pub const TraitSelect: DepKindStruct =\n+        DepKindStruct { has_params: false, is_anon: true, is_eval_always: false };\n \n     pub const CompileCodegenUnit: DepKindStruct =\n-        DepKindStruct { is_anon: false, is_eval_always: false };\n+        DepKindStruct { has_params: true, is_anon: false, is_eval_always: false };\n \n     macro_rules! define_query_dep_kinds {\n         ($(\n             [$($attrs:tt)*]\n             $variant:ident $(( $tuple_arg_ty:ty $(,)? ))*\n         ,)*) => (\n             $(pub const $variant: DepKindStruct = {\n+                const has_params: bool = $({ erase!($tuple_arg_ty); true } |)* false;\n                 const is_anon: bool = contains_anon_attr!($($attrs)*);\n                 const is_eval_always: bool = contains_eval_always_attr!($($attrs)*);\n \n                 DepKindStruct {\n+                    has_params,\n                     is_anon,\n                     is_eval_always,\n                 }\n@@ -199,23 +207,6 @@ macro_rules! define_dep_nodes {\n                     )*\n                 }\n             }\n-\n-            #[allow(unreachable_code)]\n-            pub fn has_params(&self) -> bool {\n-                match *self {\n-                    $(\n-                        DepKind :: $variant => {\n-                            // tuple args\n-                            $({\n-                                erase!($tuple_arg_ty);\n-                                return true;\n-                            })*\n-\n-                            false\n-                        }\n-                    )*\n-                }\n-            }\n         }\n \n         pub struct DepConstructor;\n@@ -308,7 +299,7 @@ impl DepNodeExt for DepNode {\n     /// method will assert that the given DepKind actually requires a\n     /// single DefId/DefPathHash parameter.\n     fn from_def_path_hash(def_path_hash: DefPathHash, kind: DepKind) -> DepNode {\n-        debug_assert!(kind.can_reconstruct_query_key() && kind.has_params());\n+        debug_assert!(kind.can_reconstruct_query_key() && kind.has_params);\n         DepNode { kind, hash: def_path_hash.0.into() }\n     }\n \n@@ -341,7 +332,7 @@ impl DepNodeExt for DepNode {\n             return Err(());\n         }\n \n-        if kind.has_params() {\n+        if kind.has_params {\n             Ok(DepNode::from_def_path_hash(def_path_hash, kind))\n         } else {\n             Ok(DepNode::new_no_params(kind))"}, {"sha": "546c3877e4d8e234f55dfeaa2f88a9c47244418d", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5027f1c6ea777b0e7485f997b2aed94852c7174f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5027f1c6ea777b0e7485f997b2aed94852c7174f/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=5027f1c6ea777b0e7485f997b2aed94852c7174f", "patch": "@@ -31,14 +31,15 @@ impl rustc_query_system::dep_graph::DepKind for DepKind {\n         self.is_eval_always\n     }\n \n+    #[inline(always)]\n     fn has_params(&self) -> bool {\n-        DepKind::has_params(self)\n+        self.has_params\n     }\n \n     fn debug_node(node: &DepNode, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         write!(f, \"{:?}\", node.kind)?;\n \n-        if !node.kind.has_params() && !node.kind.is_anon {\n+        if !node.kind.has_params && !node.kind.is_anon {\n             return Ok(());\n         }\n "}]}