{"sha": "b15ca6635f752fefebfd101aa944c6167128183c", "node_id": "C_kwDOAAsO6NoAKGIxNWNhNjYzNWY3NTJmZWZlYmZkMTAxYWE5NDRjNjE2NzEyODE4M2M", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-29T01:24:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-29T01:24:26Z"}, "message": "Auto merge of #105741 - pietroalbini:pa-1.68-nightly, r=Mark-Simulacrum\n\nBump master bootstrap compiler\n\nThis PR bumps the bootstrap compiler to the beta created earlier this week, cherry-picks the stabilization version number updates, and updates the `cfg(bootstrap)`s.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "6b1f604d2bd07d58e024a9411dfdf6dac237d0d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1f604d2bd07d58e024a9411dfdf6dac237d0d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b15ca6635f752fefebfd101aa944c6167128183c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b15ca6635f752fefebfd101aa944c6167128183c", "html_url": "https://github.com/rust-lang/rust/commit/b15ca6635f752fefebfd101aa944c6167128183c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b15ca6635f752fefebfd101aa944c6167128183c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9709a438721d679572f0f7c389cd1fa60922fbef", "url": "https://api.github.com/repos/rust-lang/rust/commits/9709a438721d679572f0f7c389cd1fa60922fbef", "html_url": "https://github.com/rust-lang/rust/commit/9709a438721d679572f0f7c389cd1fa60922fbef"}, {"sha": "cc4e434854a982e22ca207c298e63f88dc5128aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e434854a982e22ca207c298e63f88dc5128aa", "html_url": "https://github.com/rust-lang/rust/commit/cc4e434854a982e22ca207c298e63f88dc5128aa"}], "stats": {"total": 1524, "additions": 451, "deletions": 1073}, "files": [{"sha": "e2f30fb89b91e9b3dd12943a7741fa9e6d9a1ade", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -194,7 +194,7 @@ declare_features! (\n     /// Allows irrefutable patterns in `if let` and `while let` statements (RFC 2086).\n     (accepted, irrefutable_let_patterns, \"1.33.0\", Some(44495), None),\n     /// Allows `#[instruction_set(_)]` attribute.\n-    (accepted, isa_attribute, \"CURRENT_RUSTC_VERSION\", Some(74727), None),\n+    (accepted, isa_attribute, \"1.67.0\", Some(74727), None),\n     /// Allows some increased flexibility in the name resolution rules,\n     /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n@@ -240,7 +240,7 @@ declare_features! (\n     /// Allows specifying the bundle link modifier\n     (accepted, native_link_modifiers_bundle, \"1.63.0\", Some(81490), None),\n     /// Allows specifying the verbatim link modifier\n-    (accepted, native_link_modifiers_verbatim, \"CURRENT_RUSTC_VERSION\", Some(81490), None),\n+    (accepted, native_link_modifiers_verbatim, \"1.67.0\", Some(81490), None),\n     /// Allows specifying the whole-archive link modifier\n     (accepted, native_link_modifiers_whole_archive, \"1.61.0\", Some(81490), None),\n     /// Allows using non lexical lifetimes (RFC 2094)."}, {"sha": "34fc62e0549dad38b33bcc8be4bfca645fba5834", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -420,7 +420,7 @@ declare_features! (\n     /// Allows `impl Trait` as output type in `Fn` traits in return position of functions.\n     (active, impl_trait_in_fn_trait_return, \"1.64.0\", Some(99697), None),\n     /// Allows referencing `Self` and projections in impl-trait.\n-    (active, impl_trait_projections, \"CURRENT_RUSTC_VERSION\", Some(103532), None),\n+    (active, impl_trait_projections, \"1.67.0\", Some(103532), None),\n     /// Allows using imported `main` function\n     (active, imported_main, \"1.53.0\", Some(28937), None),\n     /// Allows associated types in inherent impls.\n@@ -507,7 +507,7 @@ declare_features! (\n     /// Allows lints part of the strict provenance effort.\n     (active, strict_provenance, \"1.61.0\", Some(95228), None),\n     /// Allows string patterns to dereference values to match them.\n-    (active, string_deref_patterns, \"CURRENT_RUSTC_VERSION\", Some(87121), None),\n+    (active, string_deref_patterns, \"1.67.0\", Some(87121), None),\n     /// Allows the use of `#[target_feature]` on safe functions.\n     (active, target_feature_11, \"1.45.0\", Some(69098), None),\n     /// Allows using `#[thread_local]` on `static` items."}, {"sha": "4932c7d8640e170eb3646ba17add4aad56b656f3", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -3609,16 +3609,9 @@ mod size_asserts {\n     static_assert_size!(Res, 12);\n     static_assert_size!(Stmt<'_>, 32);\n     static_assert_size!(StmtKind<'_>, 16);\n-    // tidy-alphabetical-end\n-    // FIXME: move the tidy directive to the end after the next bootstrap bump\n-    #[cfg(bootstrap)]\n-    static_assert_size!(TraitItem<'_>, 88);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(TraitItem<'_>, 80);\n-    #[cfg(bootstrap)]\n-    static_assert_size!(TraitItemKind<'_>, 48);\n-    #[cfg(not(bootstrap))]\n     static_assert_size!(TraitItemKind<'_>, 40);\n     static_assert_size!(Ty<'_>, 48);\n     static_assert_size!(TyKind<'_>, 32);\n+    // tidy-alphabetical-end\n }"}, {"sha": "10b2dc712a69e31f00a759e4237d63bc32b882a5", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -404,19 +404,6 @@ pub mod __alloc_error_handler {\n     pub unsafe fn __rdl_oom(size: usize, _align: usize) -> ! {\n         panic!(\"memory allocation of {size} bytes failed\")\n     }\n-\n-    #[cfg(bootstrap)]\n-    #[rustc_std_internal_symbol]\n-    pub unsafe fn __rg_oom(size: usize, align: usize) -> ! {\n-        use crate::alloc::Layout;\n-\n-        let layout = unsafe { Layout::from_size_align_unchecked(size, align) };\n-        extern \"Rust\" {\n-            #[lang = \"oom\"]\n-            fn oom_impl(layout: Layout) -> !;\n-        }\n-        unsafe { oom_impl(layout) }\n-    }\n }\n \n /// Specialize clones into pre-allocated, uninitialized memory."}, {"sha": "a563b2587236c57abdec2689aac5f1e1127cbde4", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -158,7 +158,6 @@ use core::hash::{Hash, Hasher};\n #[cfg(not(no_global_oom_handling))]\n use core::iter::FromIterator;\n use core::iter::{FusedIterator, Iterator};\n-#[cfg(not(bootstrap))]\n use core::marker::Tuple;\n use core::marker::{Destruct, Unpin, Unsize};\n use core::mem;\n@@ -1981,17 +1980,6 @@ impl<I: ExactSizeIterator + ?Sized, A: Allocator> ExactSizeIterator for Box<I, A\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<I: FusedIterator + ?Sized, A: Allocator> FusedIterator for Box<I, A> {}\n \n-#[cfg(bootstrap)]\n-#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n-impl<Args, F: FnOnce<Args> + ?Sized, A: Allocator> FnOnce<Args> for Box<F, A> {\n-    type Output = <F as FnOnce<Args>>::Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output {\n-        <F as FnOnce<Args>>::call_once(*self, args)\n-    }\n-}\n-\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n impl<Args: Tuple, F: FnOnce<Args> + ?Sized, A: Allocator> FnOnce<Args> for Box<F, A> {\n     type Output = <F as FnOnce<Args>>::Output;\n@@ -2001,31 +1989,13 @@ impl<Args: Tuple, F: FnOnce<Args> + ?Sized, A: Allocator> FnOnce<Args> for Box<F\n     }\n }\n \n-#[cfg(bootstrap)]\n-#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n-impl<Args, F: FnMut<Args> + ?Sized, A: Allocator> FnMut<Args> for Box<F, A> {\n-    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output {\n-        <F as FnMut<Args>>::call_mut(self, args)\n-    }\n-}\n-\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n impl<Args: Tuple, F: FnMut<Args> + ?Sized, A: Allocator> FnMut<Args> for Box<F, A> {\n     extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output {\n         <F as FnMut<Args>>::call_mut(self, args)\n     }\n }\n \n-#[cfg(bootstrap)]\n-#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n-impl<Args, F: Fn<Args> + ?Sized, A: Allocator> Fn<Args> for Box<F, A> {\n-    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output {\n-        <F as Fn<Args>>::call(self, args)\n-    }\n-}\n-\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]\n impl<Args: Tuple, F: Fn<Args> + ?Sized, A: Allocator> Fn<Args> for Box<F, A> {\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output {"}, {"sha": "6912466448fab444c6860425ba5970a41ef75a8b", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -318,7 +318,10 @@ impl<BorrowType: marker::BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type>\n     pub fn ascend(\n         self,\n     ) -> Result<Handle<NodeRef<BorrowType, K, V, marker::Internal>, marker::Edge>, Self> {\n-        let _ = BorrowType::TRAVERSAL_PERMIT;\n+        const {\n+            assert!(BorrowType::TRAVERSAL_PERMIT);\n+        }\n+\n         // We need to use raw pointers to nodes because, if BorrowType is marker::ValMut,\n         // there might be outstanding mutable references to values that we must not invalidate.\n         let leaf_ptr: *const _ = Self::as_leaf_ptr(&self);\n@@ -1003,7 +1006,10 @@ impl<BorrowType: marker::BorrowType, K, V>\n     /// `edge.descend().ascend().unwrap()` and `node.ascend().unwrap().descend()` should\n     /// both, upon success, do nothing.\n     pub fn descend(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        let _ = BorrowType::TRAVERSAL_PERMIT;\n+        const {\n+            assert!(BorrowType::TRAVERSAL_PERMIT);\n+        }\n+\n         // We need to use raw pointers to nodes because, if BorrowType is\n         // marker::ValMut, there might be outstanding mutable references to\n         // values that we must not invalidate. There's no worry accessing the\n@@ -1666,17 +1672,17 @@ pub mod marker {\n     pub struct ValMut<'a>(PhantomData<&'a mut ()>);\n \n     pub trait BorrowType {\n-        // If node references of this borrow type allow traversing to other\n-        // nodes in the tree, this constant can be evaluated. Thus reading it\n-        // serves as a compile-time assertion.\n-        const TRAVERSAL_PERMIT: () = ();\n+        /// If node references of this borrow type allow traversing to other\n+        /// nodes in the tree, this constant is set to `true`. It can be used\n+        /// for a compile-time assertion.\n+        const TRAVERSAL_PERMIT: bool = true;\n     }\n     impl BorrowType for Owned {\n-        // Reject evaluation, because traversal isn't needed. Instead traversal\n-        // happens using the result of `borrow_mut`.\n-        // By disabling traversal, and only creating new references to roots,\n-        // we know that every reference of the `Owned` type is to a root node.\n-        const TRAVERSAL_PERMIT: () = panic!();\n+        /// Reject traversal, because it isn't needed. Instead traversal\n+        /// happens using the result of `borrow_mut`.\n+        /// By disabling traversal, and only creating new references to roots,\n+        /// we know that every reference of the `Owned` type is to a root node.\n+        const TRAVERSAL_PERMIT: bool = false;\n     }\n     impl BorrowType for Dying {}\n     impl<'a> BorrowType for Immut<'a> {}"}, {"sha": "09f459f84f738d100c48aa0c9e54f6a84d7af1e3", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -123,6 +123,7 @@\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(hasher_prefixfree_extras)]\n+#![feature(inline_const)]\n #![feature(inplace_iteration)]\n #![feature(iter_advance_by)]\n #![feature(iter_next_chunk)]\n@@ -153,7 +154,7 @@\n #![feature(trusted_len)]\n #![feature(trusted_random_access)]\n #![feature(try_trait_v2)]\n-#![cfg_attr(not(bootstrap), feature(tuple_trait))]\n+#![feature(tuple_trait)]\n #![feature(unchecked_math)]\n #![feature(unicode_internals)]\n #![feature(unsize)]"}, {"sha": "fb5d86f0f2d88686fbfb43c85ddae1ca8238f195", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -363,7 +363,7 @@ use crate::vec::Vec;\n /// [`as_str()`]: String::as_str\n #[derive(PartialOrd, Eq, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(all(not(bootstrap), not(test)), lang = \"String\")]\n+#[cfg_attr(not(test), lang = \"String\")]\n pub struct String {\n     vec: Vec<u8>,\n }"}, {"sha": "3e7383b4cd199fa5996a6429a2151819d5a5b55b", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -140,7 +140,7 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"1.67.0\")]\n     #[must_use]\n     #[inline]\n     pub const fn from_u32(i: u32) -> Option<char> {\n@@ -241,7 +241,7 @@ impl char {\n     /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"1.67.0\")]\n     #[must_use]\n     #[inline]\n     pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n@@ -338,7 +338,7 @@ impl char {\n     /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"1.67.0\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]"}, {"sha": "af98059cf42c3e36d882e031ed7a2bd770a10c9f", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -110,7 +110,7 @@ pub fn decode_utf16<I: IntoIterator<Item = u16>>(iter: I) -> DecodeUtf16<I::Into\n \n /// Converts a `u32` to a `char`. Use [`char::from_u32`] instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_const_stable(feature = \"const_char_convert\", since = \"1.67.0\")]\n #[must_use]\n #[inline]\n pub const fn from_u32(i: u32) -> Option<char> {\n@@ -130,7 +130,7 @@ pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n \n /// Converts a digit in the given radix to a `char`. Use [`char::from_digit`] instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[rustc_const_stable(feature = \"const_char_convert\", since = \"1.67.0\")]\n #[must_use]\n #[inline]\n pub const fn from_digit(num: u32, radix: u32) -> Option<char> {"}, {"sha": "6a6e30c01d6a7d476ea087000a56defd24a1345b", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -24,8 +24,6 @@\n \n use crate::const_closure::ConstFnMutClosure;\n use crate::marker::Destruct;\n-#[cfg(bootstrap)]\n-use crate::marker::StructuralPartialEq;\n \n use self::Ordering::*;\n \n@@ -333,7 +331,7 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// assert_eq!(Ordering::Greater, result);\n /// ```\n #[derive(Clone, Copy, Eq, Debug, Hash)]\n-#[cfg_attr(not(bootstrap), derive_const(PartialOrd, Ord, PartialEq))]\n+#[derive_const(PartialOrd, Ord, PartialEq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(i8)]\n pub enum Ordering {\n@@ -879,40 +877,6 @@ pub macro Ord($item:item) {\n     /* compiler built-in */\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg(bootstrap)]\n-impl StructuralPartialEq for Ordering {}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n-#[cfg(bootstrap)]\n-impl const PartialEq for Ordering {\n-    #[inline]\n-    fn eq(&self, other: &Self) -> bool {\n-        (*self as i32).eq(&(*other as i32))\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n-#[cfg(bootstrap)]\n-impl const Ord for Ordering {\n-    #[inline]\n-    fn cmp(&self, other: &Ordering) -> Ordering {\n-        (*self as i32).cmp(&(*other as i32))\n-    }\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n-#[cfg(bootstrap)]\n-impl const PartialOrd for Ordering {\n-    #[inline]\n-    fn partial_cmp(&self, other: &Ordering) -> Option<Ordering> {\n-        (*self as i32).partial_cmp(&(*other as i32))\n-    }\n-}\n-\n /// Trait for types that form a [partial order](https://en.wikipedia.org/wiki/Partial_order).\n ///\n /// The `lt`, `le`, `gt`, and `ge` methods of this trait can be called using"}, {"sha": "97900a4862f5653fc49c537fdc95c3690d71d9a0", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -1,5 +1,4 @@\n use crate::marker::Destruct;\n-#[cfg(not(bootstrap))]\n use crate::marker::Tuple;\n \n /// Struct representing a closure with mutably borrowed data.\n@@ -46,33 +45,6 @@ impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData,\n \n macro_rules! impl_fn_mut_tuple {\n     ($($var:ident)*) => {\n-        #[cfg(bootstrap)]\n-        #[allow(unused_parens)]\n-        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n-            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-        where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n-        {\n-            type Output = ClosureReturnValue;\n-\n-            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-            self.call_mut(args)\n-            }\n-        }\n-        #[cfg(bootstrap)]\n-        #[allow(unused_parens)]\n-        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n-            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n-        where\n-            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue + ~const Destruct,\n-        {\n-            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-                #[allow(non_snake_case)]\n-                let ($($var),*) = &mut self.data;\n-                (self.func)(($($var),*), args)\n-            }\n-        }\n-        #[cfg(not(bootstrap))]\n         #[allow(unused_parens)]\n         impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n             FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n@@ -85,7 +57,6 @@ macro_rules! impl_fn_mut_tuple {\n             self.call_mut(args)\n             }\n         }\n-        #[cfg(not(bootstrap))]\n         #[allow(unused_parens)]\n         impl<'a, $($var,)* ClosureArguments: Tuple, Function, ClosureReturnValue> const\n             FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>"}, {"sha": "5bfe001de46e3775f456a9c42c026b0b4230e253", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -44,7 +44,7 @@ pub use poll_fn::{poll_fn, PollFn};\n ///    non-Send/Sync as well, and we don't want that.\n ///\n /// It also simplifies the HIR lowering of `.await`.\n-#[cfg_attr(not(bootstrap), lang = \"ResumeTy\")]\n+#[lang = \"ResumeTy\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[derive(Debug, Copy, Clone)]\n@@ -61,7 +61,6 @@ unsafe impl Sync for ResumeTy {}\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n // This is `const` to avoid extra errors after we recover from `const async fn`\n-#[cfg_attr(bootstrap, lang = \"from_generator\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[rustc_const_unstable(feature = \"gen_future\", issue = \"50547\")]\n@@ -113,10 +112,10 @@ pub unsafe fn get_context<'a, 'b>(cx: ResumeTy) -> &'a mut Context<'b> {\n     unsafe { &mut *cx.0.as_ptr().cast() }\n }\n \n-#[cfg_attr(not(bootstrap), lang = \"identity_future\")]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]\n+#[lang = \"identity_future\"]\n pub const fn identity_future<O, Fut: Future<Output = O>>(f: Fut) -> Fut {\n     f\n }"}, {"sha": "a315a28fb0d943f24deb882e1cdf8937637c5315", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -55,7 +55,6 @@\n #![allow(missing_docs)]\n \n use crate::marker::DiscriminantKind;\n-#[cfg(not(bootstrap))]\n use crate::marker::Tuple;\n use crate::mem;\n \n@@ -2175,66 +2174,6 @@ extern \"rust-intrinsic\" {\n     /// `unreachable_unchecked` is actually being reached. The bug is in *crate A*,\n     /// which violates the principle that a `const fn` must behave the same at\n     /// compile-time and at run-time. The unsafe code in crate B is fine.\n-    #[cfg(bootstrap)]\n-    #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n-    pub fn const_eval_select<ARG, F, G, RET>(arg: ARG, called_in_const: F, called_at_rt: G) -> RET\n-    where\n-        G: FnOnce<ARG, Output = RET>,\n-        F: FnOnce<ARG, Output = RET>;\n-\n-    /// Selects which function to call depending on the context.\n-    ///\n-    /// If this function is evaluated at compile-time, then a call to this\n-    /// intrinsic will be replaced with a call to `called_in_const`. It gets\n-    /// replaced with a call to `called_at_rt` otherwise.\n-    ///\n-    /// # Type Requirements\n-    ///\n-    /// The two functions must be both function items. They cannot be function\n-    /// pointers or closures. The first function must be a `const fn`.\n-    ///\n-    /// `arg` will be the tupled arguments that will be passed to either one of\n-    /// the two functions, therefore, both functions must accept the same type of\n-    /// arguments. Both functions must return RET.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The two functions must behave observably equivalent. Safe code in other\n-    /// crates may assume that calling a `const fn` at compile-time and at run-time\n-    /// produces the same result. A function that produces a different result when\n-    /// evaluated at run-time, or has any other observable side-effects, is\n-    /// *unsound*.\n-    ///\n-    /// Here is an example of how this could cause a problem:\n-    /// ```no_run\n-    /// #![feature(const_eval_select)]\n-    /// #![feature(core_intrinsics)]\n-    /// use std::hint::unreachable_unchecked;\n-    /// use std::intrinsics::const_eval_select;\n-    ///\n-    /// // Crate A\n-    /// pub const fn inconsistent() -> i32 {\n-    ///     fn runtime() -> i32 { 1 }\n-    ///     const fn compiletime() -> i32 { 2 }\n-    ///\n-    ///     unsafe {\n-    //          // \u26a0 This code violates the required equivalence of `compiletime`\n-    ///         // and `runtime`.\n-    ///         const_eval_select((), compiletime, runtime)\n-    ///     }\n-    /// }\n-    ///\n-    /// // Crate B\n-    /// const X: i32 = inconsistent();\n-    /// let x = inconsistent();\n-    /// if x != X { unsafe { unreachable_unchecked(); }}\n-    /// ```\n-    ///\n-    /// This code causes Undefined Behavior when being run, since the\n-    /// `unreachable_unchecked` is actually being reached. The bug is in *crate A*,\n-    /// which violates the principle that a `const fn` must behave the same at\n-    /// compile-time and at run-time. The unsafe code in crate B is fine.\n-    #[cfg(not(bootstrap))]\n     #[rustc_const_unstable(feature = \"const_eval_select\", issue = \"none\")]\n     pub fn const_eval_select<ARG: Tuple, F, G, RET>(\n         arg: ARG,"}, {"sha": "399d54f18c5b3803b7b4d3fc69da33dccbf8e692", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -60,7 +60,8 @@\n //!\n //! # Examples\n //!\n-//! ```rust\n+#![cfg_attr(bootstrap, doc = \"```rust,compile_fail\")]\n+#![cfg_attr(not(bootstrap), doc = \"```rust\")]\n //! #![feature(core_intrinsics, custom_mir)]\n //!\n //! extern crate core;\n@@ -291,7 +292,8 @@ define!(\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    #[cfg_attr(bootstrap, doc = \"```rust,compile_fail\")]\n+    #[cfg_attr(not(bootstrap), doc = \"```rust\")]\n     /// #![feature(custom_mir, core_intrinsics)]\n     ///\n     /// extern crate core;"}, {"sha": "ab29f7bdeebdf613325dce81a4d0323e01f981cf", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -195,7 +195,7 @@\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(deprecated_suggestion)]\n-#![cfg_attr(not(bootstrap), feature(derive_const))]\n+#![feature(derive_const)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(rustdoc_internals)]"}, {"sha": "cfc1cabe229e59d45005e49120752a4998554421", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -1461,7 +1461,6 @@ pub(crate) mod builtin {\n     /// [the reference]: ../../../reference/attributes/derive.html\n     #[unstable(feature = \"derive_const\", issue = \"none\")]\n     #[rustc_builtin_macro]\n-    #[cfg(not(bootstrap))]\n     pub macro derive_const($item:item) {\n         /* compiler built-in */\n     }\n@@ -1516,7 +1515,6 @@ pub(crate) mod builtin {\n     /// Attribute macro applied to a function to register it as a handler for allocation failure.\n     ///\n     /// See also [`std::alloc::handle_alloc_error`](../../../std/alloc/fn.handle_alloc_error.html).\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"alloc_error_handler\", issue = \"51540\")]\n     #[allow_internal_unstable(rustc_attrs)]\n     #[rustc_builtin_macro]\n@@ -1553,7 +1551,6 @@ pub(crate) mod builtin {\n         issue = \"23416\",\n         reason = \"placeholder syntax for type ascription\"\n     )]\n-    #[cfg(not(bootstrap))]\n     pub macro type_ascribe($expr:expr, $ty:ty) {\n         /* compiler built-in */\n     }"}, {"sha": "c0fb954ce2d9d39c0a291902a021894ca820db2d", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -96,7 +96,7 @@ unsafe impl<T: Sync + ?Sized> Send for &T {}\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]\n-#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n+#[rustc_deny_explicit_impl]\n pub trait Sized {\n     // Empty.\n }\n@@ -128,7 +128,7 @@ pub trait Sized {\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"unsize\", issue = \"18598\")]\n #[lang = \"unsize\"]\n-#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n+#[rustc_deny_explicit_impl]\n pub trait Unsize<T: ?Sized> {\n     // Empty.\n }\n@@ -695,7 +695,7 @@ impl<T: ?Sized> StructuralEq for PhantomData<T> {}\n     reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n )]\n #[lang = \"discriminant_kind\"]\n-#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n+#[rustc_deny_explicit_impl]\n pub trait DiscriminantKind {\n     /// The type of the discriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n@@ -796,7 +796,7 @@ impl<T: ?Sized> Unpin for *mut T {}\n #[lang = \"destruct\"]\n #[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n #[const_trait]\n-#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n+#[rustc_deny_explicit_impl]\n pub trait Destruct {}\n \n /// A marker for tuple types.\n@@ -806,12 +806,12 @@ pub trait Destruct {}\n #[unstable(feature = \"tuple_trait\", issue = \"none\")]\n #[lang = \"tuple_trait\"]\n #[rustc_on_unimplemented(message = \"`{Self}` is not a tuple\")]\n-#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n+#[rustc_deny_explicit_impl]\n pub trait Tuple {}\n \n /// A marker for things\n #[unstable(feature = \"pointer_sized_trait\", issue = \"none\")]\n-#[cfg_attr(not(bootstrap), lang = \"pointer_sized\")]\n+#[lang = \"pointer_sized\"]\n #[rustc_on_unimplemented(\n     message = \"`{Self}` needs to be a pointer-sized type\",\n     label = \"`{Self}` needs to be a pointer-sized type\""}, {"sha": "57096f4397436359d84f12b354598eb7f673f48c", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -2290,8 +2290,8 @@ macro_rules! int_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".ilog(5), 1);\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n@@ -2313,8 +2313,8 @@ macro_rules! int_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".ilog2(), 1);\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n@@ -2335,8 +2335,8 @@ macro_rules! int_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".ilog10(), 1);\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n@@ -2360,8 +2360,8 @@ macro_rules! int_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_ilog(5), Some(1));\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -2396,8 +2396,8 @@ macro_rules! int_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".checked_ilog2(), Some(1));\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -2420,8 +2420,8 @@ macro_rules! int_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".checked_ilog10(), Some(1));\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "fbda8f82b1bd906726775816fc920de7abb30c4b", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -462,8 +462,8 @@ macro_rules! nonzero_unsigned_operations {\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(8).unwrap().ilog2(), 3);\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(9).unwrap().ilog2(), 3);\")]\n                 /// ```\n-                #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+                #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -486,8 +486,8 @@ macro_rules! nonzero_unsigned_operations {\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(100).unwrap().ilog10(), 2);\")]\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::new(101).unwrap().ilog10(), 2);\")]\n                 /// ```\n-                #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-                #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+                #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n                 #[must_use = \"this returns the result of the operation, \\\n                               without modifying the original\"]\n                 #[inline]\n@@ -1253,7 +1253,7 @@ macro_rules! nonzero_bits {\n                 ///\n                 #[doc = concat!(\"assert_eq!(\", stringify!($Ty), \"::BITS, \", stringify!($Int), \"::BITS);\")]\n                 /// ```\n-                #[stable(feature = \"nonzero_bits\", since = \"CURRENT_RUSTC_VERSION\")]\n+                #[stable(feature = \"nonzero_bits\", since = \"1.67.0\")]\n                 pub const BITS: u32 = <$Int>::BITS;\n             }\n         )+"}, {"sha": "1c97c46862833a2e2c351c69649f782ac18a6b97", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -703,8 +703,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".ilog(5), 1);\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n@@ -726,8 +726,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".ilog2(), 1);\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n@@ -748,8 +748,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".ilog10(), 1);\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[rustc_allow_const_fn_unstable(const_option)]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n@@ -773,8 +773,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".checked_ilog(5), Some(1));\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -809,8 +809,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(2\", stringify!($SelfT), \".checked_ilog2(), Some(1));\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -831,8 +831,8 @@ macro_rules! uint_impl {\n         /// ```\n         #[doc = concat!(\"assert_eq!(10\", stringify!($SelfT), \".checked_ilog10(), Some(1));\")]\n         /// ```\n-        #[stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"int_log\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"int_log\", since = \"1.67.0\")]\n+        #[rustc_const_stable(feature = \"int_log\", since = \"1.67.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "b7e1aee9d84d123be63137e0ea81b026e7d855c7", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 0, "deletions": 319, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -1,4 +1,3 @@\n-#[cfg(not(bootstrap))]\n use crate::marker::Tuple;\n \n /// The version of the call operator that takes an immutable receiver.\n@@ -54,87 +53,6 @@ use crate::marker::Tuple;\n /// let double = |x| x * 2;\n /// assert_eq!(call_with_one(double), 2);\n /// ```\n-#[cfg(bootstrap)]\n-#[lang = \"fn\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_paren_sugar]\n-#[rustc_on_unimplemented(\n-    on(\n-        Args = \"()\",\n-        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n-    ),\n-    on(\n-        _Self = \"unsafe fn\",\n-        note = \"unsafe function cannot be called generically without an unsafe block\",\n-        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n-        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n-    ),\n-    message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n-    label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n-)]\n-#[fundamental] // so that regex can rely that `&str: !FnMut`\n-#[must_use = \"closures are lazy and do nothing unless called\"]\n-#[const_trait]\n-pub trait Fn<Args>: FnMut<Args> {\n-    /// Performs the call operation.\n-    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-    extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n-}\n-\n-/// The version of the call operator that takes an immutable receiver.\n-///\n-/// Instances of `Fn` can be called repeatedly without mutating state.\n-///\n-/// *This trait (`Fn`) is not to be confused with [function pointers]\n-/// (`fn`).*\n-///\n-/// `Fn` is implemented automatically by closures which only take immutable\n-/// references to captured variables or don't capture anything at all, as well\n-/// as (safe) [function pointers] (with some caveats, see their documentation\n-/// for more details). Additionally, for any type `F` that implements `Fn`, `&F`\n-/// implements `Fn`, too.\n-///\n-/// Since both [`FnMut`] and [`FnOnce`] are supertraits of `Fn`, any\n-/// instance of `Fn` can be used as a parameter where a [`FnMut`] or [`FnOnce`]\n-/// is expected.\n-///\n-/// Use `Fn` as a bound when you want to accept a parameter of function-like\n-/// type and need to call it repeatedly and without mutating state (e.g., when\n-/// calling it concurrently). If you do not need such strict requirements, use\n-/// [`FnMut`] or [`FnOnce`] as bounds.\n-///\n-/// See the [chapter on closures in *The Rust Programming Language*][book] for\n-/// some more information on this topic.\n-///\n-/// Also of note is the special syntax for `Fn` traits (e.g.\n-/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n-/// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n-///\n-/// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: fn\n-/// [nomicon]: ../../nomicon/hrtb.html\n-///\n-/// # Examples\n-///\n-/// ## Calling a closure\n-///\n-/// ```\n-/// let square = |x| x * x;\n-/// assert_eq!(square(5), 25);\n-/// ```\n-///\n-/// ## Using a `Fn` parameter\n-///\n-/// ```\n-/// fn call_with_one<F>(func: F) -> usize\n-///     where F: Fn(usize) -> usize {\n-///     func(1)\n-/// }\n-///\n-/// let double = |x| x * 2;\n-/// assert_eq!(call_with_one(double), 2);\n-/// ```\n-#[cfg(not(bootstrap))]\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n@@ -222,95 +140,6 @@ pub trait Fn<Args: Tuple>: FnMut<Args> {\n ///\n /// assert_eq!(x, 5);\n /// ```\n-#[cfg(bootstrap)]\n-#[lang = \"fn_mut\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_paren_sugar]\n-#[rustc_on_unimplemented(\n-    on(\n-        Args = \"()\",\n-        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n-    ),\n-    on(\n-        _Self = \"unsafe fn\",\n-        note = \"unsafe function cannot be called generically without an unsafe block\",\n-        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n-        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n-    ),\n-    message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n-    label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n-)]\n-#[fundamental] // so that regex can rely that `&str: !FnMut`\n-#[must_use = \"closures are lazy and do nothing unless called\"]\n-#[const_trait]\n-pub trait FnMut<Args>: FnOnce<Args> {\n-    /// Performs the call operation.\n-    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-    extern \"rust-call\" fn call_mut(&mut self, args: Args) -> Self::Output;\n-}\n-\n-/// The version of the call operator that takes a mutable receiver.\n-///\n-/// Instances of `FnMut` can be called repeatedly and may mutate state.\n-///\n-/// `FnMut` is implemented automatically by closures which take mutable\n-/// references to captured variables, as well as all types that implement\n-/// [`Fn`], e.g., (safe) [function pointers] (since `FnMut` is a supertrait of\n-/// [`Fn`]). Additionally, for any type `F` that implements `FnMut`, `&mut F`\n-/// implements `FnMut`, too.\n-///\n-/// Since [`FnOnce`] is a supertrait of `FnMut`, any instance of `FnMut` can be\n-/// used where a [`FnOnce`] is expected, and since [`Fn`] is a subtrait of\n-/// `FnMut`, any instance of [`Fn`] can be used where `FnMut` is expected.\n-///\n-/// Use `FnMut` as a bound when you want to accept a parameter of function-like\n-/// type and need to call it repeatedly, while allowing it to mutate state.\n-/// If you don't want the parameter to mutate state, use [`Fn`] as a\n-/// bound; if you don't need to call it repeatedly, use [`FnOnce`].\n-///\n-/// See the [chapter on closures in *The Rust Programming Language*][book] for\n-/// some more information on this topic.\n-///\n-/// Also of note is the special syntax for `Fn` traits (e.g.\n-/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n-/// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n-///\n-/// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: fn\n-/// [nomicon]: ../../nomicon/hrtb.html\n-///\n-/// # Examples\n-///\n-/// ## Calling a mutably capturing closure\n-///\n-/// ```\n-/// let mut x = 5;\n-/// {\n-///     let mut square_x = || x *= x;\n-///     square_x();\n-/// }\n-/// assert_eq!(x, 25);\n-/// ```\n-///\n-/// ## Using a `FnMut` parameter\n-///\n-/// ```\n-/// fn do_twice<F>(mut func: F)\n-///     where F: FnMut()\n-/// {\n-///     func();\n-///     func();\n-/// }\n-///\n-/// let mut x: usize = 1;\n-/// {\n-///     let add_two_to_x = || x += 2;\n-///     do_twice(add_two_to_x);\n-/// }\n-///\n-/// assert_eq!(x, 5);\n-/// ```\n-#[cfg(not(bootstrap))]\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n@@ -390,92 +219,6 @@ pub trait FnMut<Args: Tuple>: FnOnce<Args> {\n ///\n /// // `consume_and_return_x` can no longer be invoked at this point\n /// ```\n-#[cfg(bootstrap)]\n-#[lang = \"fn_once\"]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_paren_sugar]\n-#[rustc_on_unimplemented(\n-    on(\n-        Args = \"()\",\n-        note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n-    ),\n-    on(\n-        _Self = \"unsafe fn\",\n-        note = \"unsafe function cannot be called generically without an unsafe block\",\n-        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n-        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n-    ),\n-    message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n-    label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\"\n-)]\n-#[fundamental] // so that regex can rely that `&str: !FnMut`\n-#[must_use = \"closures are lazy and do nothing unless called\"]\n-#[const_trait]\n-pub trait FnOnce<Args> {\n-    /// The returned type after the call operator is used.\n-    #[lang = \"fn_once_output\"]\n-    #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]\n-    type Output;\n-\n-    /// Performs the call operation.\n-    #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n-    extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-}\n-\n-/// The version of the call operator that takes a by-value receiver.\n-///\n-/// Instances of `FnOnce` can be called, but might not be callable multiple\n-/// times. Because of this, if the only thing known about a type is that it\n-/// implements `FnOnce`, it can only be called once.\n-///\n-/// `FnOnce` is implemented automatically by closures that might consume captured\n-/// variables, as well as all types that implement [`FnMut`], e.g., (safe)\n-/// [function pointers] (since `FnOnce` is a supertrait of [`FnMut`]).\n-///\n-/// Since both [`Fn`] and [`FnMut`] are subtraits of `FnOnce`, any instance of\n-/// [`Fn`] or [`FnMut`] can be used where a `FnOnce` is expected.\n-///\n-/// Use `FnOnce` as a bound when you want to accept a parameter of function-like\n-/// type and only need to call it once. If you need to call the parameter\n-/// repeatedly, use [`FnMut`] as a bound; if you also need it to not mutate\n-/// state, use [`Fn`].\n-///\n-/// See the [chapter on closures in *The Rust Programming Language*][book] for\n-/// some more information on this topic.\n-///\n-/// Also of note is the special syntax for `Fn` traits (e.g.\n-/// `Fn(usize, bool) -> usize`). Those interested in the technical details of\n-/// this can refer to [the relevant section in the *Rustonomicon*][nomicon].\n-///\n-/// [book]: ../../book/ch13-01-closures.html\n-/// [function pointers]: fn\n-/// [nomicon]: ../../nomicon/hrtb.html\n-///\n-/// # Examples\n-///\n-/// ## Using a `FnOnce` parameter\n-///\n-/// ```\n-/// fn consume_with_relish<F>(func: F)\n-///     where F: FnOnce() -> String\n-/// {\n-///     // `func` consumes its captured variables, so it cannot be run more\n-///     // than once.\n-///     println!(\"Consumed: {}\", func());\n-///\n-///     println!(\"Delicious!\");\n-///\n-///     // Attempting to invoke `func()` again will throw a `use of moved\n-///     // value` error for `func`.\n-/// }\n-///\n-/// let x = String::from(\"x\");\n-/// let consume_and_return_x = move || x;\n-/// consume_with_relish(consume_and_return_x);\n-///\n-/// // `consume_and_return_x` can no longer be invoked at this point\n-/// ```\n-#[cfg(not(bootstrap))]\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n@@ -507,68 +250,6 @@ pub trait FnOnce<Args: Tuple> {\n     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n }\n \n-#[cfg(bootstrap)]\n-mod impls {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n-    impl<A, F: ?Sized> const Fn<A> for &F\n-    where\n-        F: ~const Fn<A>,\n-    {\n-        extern \"rust-call\" fn call(&self, args: A) -> F::Output {\n-            (**self).call(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n-    impl<A, F: ?Sized> const FnMut<A> for &F\n-    where\n-        F: ~const Fn<A>,\n-    {\n-        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n-            (**self).call(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n-    impl<A, F: ?Sized> const FnOnce<A> for &F\n-    where\n-        F: ~const Fn<A>,\n-    {\n-        type Output = F::Output;\n-\n-        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n-            (*self).call(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n-    impl<A, F: ?Sized> const FnMut<A> for &mut F\n-    where\n-        F: ~const FnMut<A>,\n-    {\n-        extern \"rust-call\" fn call_mut(&mut self, args: A) -> F::Output {\n-            (*self).call_mut(args)\n-        }\n-    }\n-\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_fn_trait_ref_impls\", issue = \"101803\")]\n-    impl<A, F: ?Sized> const FnOnce<A> for &mut F\n-    where\n-        F: ~const FnMut<A>,\n-    {\n-        type Output = F::Output;\n-        extern \"rust-call\" fn call_once(self, args: A) -> F::Output {\n-            (*self).call_mut(args)\n-        }\n-    }\n-}\n-\n-#[cfg(not(bootstrap))]\n mod impls {\n     use crate::marker::Tuple;\n "}, {"sha": "10525a16f3a66ebd8970cf8a13afb23351c6d22a", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -75,14 +75,12 @@ pub use crate::macros::builtin::{RustcDecodable, RustcEncodable};\n \n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use crate::macros::builtin::alloc_error_handler;\n-#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use crate::macros::builtin::{bench, derive, global_allocator, test, test_case};\n+pub use crate::macros::builtin::{\n+    alloc_error_handler, bench, derive, global_allocator, test, test_case,\n+};\n \n #[unstable(feature = \"derive_const\", issue = \"none\")]\n-#[cfg(not(bootstrap))]\n pub use crate::macros::builtin::derive_const;\n \n #[unstable(\n@@ -104,5 +102,4 @@ pub use crate::macros::builtin::cfg_eval;\n     issue = \"23416\",\n     reason = \"placeholder syntax for type ascription\"\n )]\n-#[cfg(not(bootstrap))]\n pub use crate::macros::builtin::type_ascribe;"}, {"sha": "2123147c7e44c1779226bf2b9bce9783bffb990a", "filename": "library/core/src/ptr/alignment.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Falignment.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -10,8 +10,7 @@ use crate::{cmp, fmt, hash, mem, num};\n /// are likely not to be supported by actual allocators and linkers.\n #[unstable(feature = \"ptr_alignment_type\", issue = \"102070\")]\n #[derive(Copy, Clone, Eq)]\n-#[cfg_attr(bootstrap, derive(PartialEq))]\n-#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n+#[derive_const(PartialEq)]\n #[repr(transparent)]\n pub struct Alignment(AlignmentEnum);\n \n@@ -203,8 +202,7 @@ type AlignmentEnum = AlignmentEnum32;\n type AlignmentEnum = AlignmentEnum64;\n \n #[derive(Copy, Clone, Eq)]\n-#[cfg_attr(bootstrap, derive(PartialEq))]\n-#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n+#[derive_const(PartialEq)]\n #[repr(u16)]\n enum AlignmentEnum16 {\n     _Align1Shl0 = 1 << 0,\n@@ -226,8 +224,7 @@ enum AlignmentEnum16 {\n }\n \n #[derive(Copy, Clone, Eq)]\n-#[cfg_attr(bootstrap, derive(PartialEq))]\n-#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n+#[derive_const(PartialEq)]\n #[repr(u32)]\n enum AlignmentEnum32 {\n     _Align1Shl0 = 1 << 0,\n@@ -265,8 +262,7 @@ enum AlignmentEnum32 {\n }\n \n #[derive(Copy, Clone, Eq)]\n-#[cfg_attr(bootstrap, derive(PartialEq))]\n-#[cfg_attr(not(bootstrap), derive_const(PartialEq))]\n+#[derive_const(PartialEq)]\n #[repr(u64)]\n enum AlignmentEnum64 {\n     _Align1Shl0 = 1 << 0,"}, {"sha": "9a18857d49ffadc2fc4bd927d35aef61d22972af", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -1350,26 +1350,6 @@ impl<T: ?Sized> *const T {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n \n-        #[cfg(bootstrap)]\n-        {\n-            fn rt_impl<T>(p: *const T, align: usize) -> usize {\n-                // SAFETY: `align` has been checked to be a power of 2 above\n-                unsafe { align_offset(p, align) }\n-            }\n-\n-            const fn ctfe_impl<T>(_: *const T, _: usize) -> usize {\n-                usize::MAX\n-            }\n-\n-            // SAFETY:\n-            // It is permissible for `align_offset` to always return `usize::MAX`,\n-            // algorithm correctness can not depend on `align_offset` returning non-max values.\n-            //\n-            // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n-            unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n-        }\n-\n-        #[cfg(not(bootstrap))]\n         {\n             // SAFETY: `align` has been checked to be a power of 2 above\n             unsafe { align_offset(self, align) }\n@@ -1406,8 +1386,7 @@ impl<T: ?Sized> *const T {\n     /// is never aligned if cast to a type with a stricter alignment than the reference's\n     /// underlying allocation.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1433,8 +1412,7 @@ impl<T: ?Sized> *const T {\n     /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n     /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1460,8 +1438,7 @@ impl<T: ?Sized> *const T {\n     /// If a pointer is created from a fixed address, this function behaves the same during\n     /// runtime and compiletime.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1537,8 +1514,7 @@ impl<T: ?Sized> *const T {\n     /// return `true` if the pointer is guaranteed to be aligned. This means that the pointer\n     /// cannot be stricter aligned than the reference's underlying allocation.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1563,8 +1539,7 @@ impl<T: ?Sized> *const T {\n     /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n     /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1588,8 +1563,7 @@ impl<T: ?Sized> *const T {\n     /// If a pointer is created from a fixed address, this function behaves the same during\n     /// runtime and compiletime.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///"}, {"sha": "2ea032d4affe052abb3898f2182ccccb241040b5", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -50,7 +50,7 @@ use crate::hash::{Hash, Hasher};\n ///\n /// [`to_raw_parts`]: *const::to_raw_parts\n #[lang = \"pointee_trait\"]\n-#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n+#[rustc_deny_explicit_impl]\n pub trait Pointee {\n     /// The type for metadata in pointers and references to `Self`.\n     #[lang = \"metadata_type\"]"}, {"sha": "8b9c1f7780ae4c3da09a3d1a028f361f0da2fd92", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 32, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -1618,26 +1618,6 @@ impl<T: ?Sized> *mut T {\n             panic!(\"align_offset: align is not a power-of-two\");\n         }\n \n-        #[cfg(bootstrap)]\n-        {\n-            fn rt_impl<T>(p: *mut T, align: usize) -> usize {\n-                // SAFETY: `align` has been checked to be a power of 2 above\n-                unsafe { align_offset(p, align) }\n-            }\n-\n-            const fn ctfe_impl<T>(_: *mut T, _: usize) -> usize {\n-                usize::MAX\n-            }\n-\n-            // SAFETY:\n-            // It is permissible for `align_offset` to always return `usize::MAX`,\n-            // algorithm correctness can not depend on `align_offset` returning non-max values.\n-            //\n-            // As such the behaviour can't change after replacing `align_offset` with `usize::MAX`, only performance can.\n-            unsafe { intrinsics::const_eval_select((self, align), ctfe_impl, rt_impl) }\n-        }\n-\n-        #[cfg(not(bootstrap))]\n         {\n             // SAFETY: `align` has been checked to be a power of 2 above\n             unsafe { align_offset(self, align) }\n@@ -1674,8 +1654,7 @@ impl<T: ?Sized> *mut T {\n     /// is never aligned if cast to a type with a stricter alignment than the reference's\n     /// underlying allocation.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     /// #![feature(const_mut_refs)]\n@@ -1702,8 +1681,7 @@ impl<T: ?Sized> *mut T {\n     /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n     /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1730,8 +1708,7 @@ impl<T: ?Sized> *mut T {\n     /// If a pointer is created from a fixed address, this function behaves the same during\n     /// runtime and compiletime.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1807,8 +1784,7 @@ impl<T: ?Sized> *mut T {\n     /// return `true` if the pointer is guaranteed to be aligned. This means that the pointer\n     /// cannot be stricter aligned than the reference's underlying allocation.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     /// #![feature(const_mut_refs)]\n@@ -1834,8 +1810,7 @@ impl<T: ?Sized> *mut T {\n     /// Due to this behavior, it is possible that a runtime pointer derived from a compiletime\n     /// pointer is aligned, even if the compiletime pointer wasn't aligned.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///\n@@ -1860,8 +1835,7 @@ impl<T: ?Sized> *mut T {\n     /// If a pointer is created from a fixed address, this function behaves the same during\n     /// runtime and compiletime.\n     ///\n-    #[cfg_attr(bootstrap, doc = \"```ignore\")]\n-    #[cfg_attr(not(bootstrap), doc = \"```\")]\n+    /// ```\n     /// #![feature(pointer_is_aligned)]\n     /// #![feature(const_pointer_is_aligned)]\n     ///"}, {"sha": "25b61c0e66641d9beaf8a11fd88afef387317ae4", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -9,7 +9,7 @@ use crate::task::Ready;\n /// scheduled to receive a wakeup instead.\n #[must_use = \"this `Poll` may be a `Pending` variant, which should be handled\"]\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]\n-#[cfg_attr(not(bootstrap), lang = \"Poll\")]\n+#[lang = \"Poll\"]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub enum Poll<T> {\n     /// Represents that a value is immediately ready."}, {"sha": "a8f6b7ebb925029d799c1b74af314c2f815937c1", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -131,7 +131,6 @@ fn distinct_type_names() {\n     assert_ne!(type_name_of_val(Velocity), type_name_of_val(Velocity(0.0, -9.8)),);\n }\n \n-#[cfg(not(bootstrap))]\n #[test]\n fn dyn_type_name() {\n     trait Foo {"}, {"sha": "f7740a114e738d84f86b87a083cd92b82d5dc1ad", "filename": "library/core/tests/mem.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Ftests%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Ftests%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fmem.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -77,7 +77,6 @@ fn align_of_val_basic() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))] // stage 0 doesn't have the fix yet, so the test fails\n fn align_of_val_raw_packed() {\n     #[repr(C, packed)]\n     struct B {"}, {"sha": "a71691a8115ba57273b5d190bd14058aa0418dfb", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -359,7 +359,6 @@ fn align_offset_zst() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn align_offset_zst_const() {\n     const {\n         // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n@@ -397,7 +396,6 @@ fn align_offset_stride_one() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn align_offset_stride_one_const() {\n     const {\n         // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n@@ -493,7 +491,6 @@ fn align_offset_various_strides() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn align_offset_various_strides_const() {\n     const unsafe fn test_stride<T>(ptr: *const T, numptr: usize, align: usize) {\n         let mut expected = usize::MAX;\n@@ -561,7 +558,6 @@ fn align_offset_various_strides_const() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn align_offset_with_provenance_const() {\n     const {\n         // On some platforms (e.g. msp430-none-elf), the alignment of `i32` is less than 4.\n@@ -681,7 +677,6 @@ fn align_offset_issue_103361() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn align_offset_issue_103361_const() {\n     #[cfg(target_pointer_width = \"64\")]\n     const SIZE: usize = 1 << 47;\n@@ -715,7 +710,6 @@ fn is_aligned() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn is_aligned_const() {\n     const {\n         let data = 42;\n@@ -734,18 +728,6 @@ fn is_aligned_const() {\n     }\n }\n \n-#[test]\n-#[cfg(bootstrap)]\n-fn is_aligned_const() {\n-    const {\n-        let data = 42;\n-        let ptr: *const i32 = &data;\n-        // The bootstrap compiler always returns false for is_aligned.\n-        assert!(!ptr.is_aligned());\n-        assert!(!ptr.is_aligned_to(1));\n-    }\n-}\n-\n #[test]\n fn offset_from() {\n     let mut a = [0; 5];"}, {"sha": "2aefd7c513dc8d88421600a69b408a23a5b10aa7", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -59,14 +59,12 @@ pub use core::prelude::v1::{RustcDecodable, RustcEncodable};\n \n // Do not `doc(no_inline)` so that they become doc items on their own\n // (no public module for them to be re-exported from).\n-#[cfg(not(bootstrap))]\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use core::prelude::v1::alloc_error_handler;\n-#[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-pub use core::prelude::v1::{bench, derive, global_allocator, test, test_case};\n+pub use core::prelude::v1::{\n+    alloc_error_handler, bench, derive, global_allocator, test, test_case,\n+};\n \n #[unstable(feature = \"derive_const\", issue = \"none\")]\n-#[cfg(not(bootstrap))]\n pub use core::prelude::v1::derive_const;\n \n // Do not `doc(no_inline)` either.\n@@ -91,7 +89,6 @@ pub use core::prelude::v1::cfg_eval;\n     issue = \"23416\",\n     reason = \"placeholder syntax for type ascription\"\n )]\n-#[cfg(not(bootstrap))]\n pub use core::prelude::v1::type_ascribe;\n \n // The file so far is equivalent to src/libcore/prelude/v1.rs,"}, {"sha": "62ce2cb33dc55e9df04055a0efc1efe67512e497", "filename": "library/std/src/process.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -2164,18 +2164,11 @@ pub fn id() -> u32 {\n /// to provide similar functionality.\n #[cfg_attr(not(test), lang = \"termination\")]\n #[stable(feature = \"termination_trait_lib\", since = \"1.61.0\")]\n-#[rustc_on_unimplemented(\n-    on(\n-        all(not(bootstrap), cause = \"MainFunctionType\"),\n-        message = \"`main` has invalid return type `{Self}`\",\n-        label = \"`main` can only return types that implement `{Termination}`\"\n-    ),\n-    on(\n-        bootstrap,\n-        message = \"`main` has invalid return type `{Self}`\",\n-        label = \"`main` can only return types that implement `{Termination}`\"\n-    )\n-)]\n+#[rustc_on_unimplemented(on(\n+    cause = \"MainFunctionType\",\n+    message = \"`main` has invalid return type `{Self}`\",\n+    label = \"`main` can only return types that implement `{Termination}`\"\n+))]\n pub trait Termination {\n     /// Is called to get the representation of the value as status code.\n     /// This status code is returned to the operating system."}, {"sha": "233e4a26bdc060d8bd1a0785e5ffe63e3b2fc52f", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -184,12 +184,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8, sigpipe: u8) {\n                 sigpipe::SIG_DFL => (true, Some(libc::SIG_DFL)),\n                 _ => unreachable!(),\n             };\n-            // The bootstrap compiler doesn't know about sigpipe::DEFAULT, and always passes in\n-            // SIG_IGN. This causes some tests to fail because they expect SIGPIPE to be reset to\n-            // default on process spawning (which doesn't happen if #[unix_sigpipe] is specified).\n-            // Since we can't differentiate between the cases here, treat SIG_IGN as DEFAULT\n-            // unconditionally.\n-            if sigpipe_attr_specified && !(cfg!(bootstrap) && sigpipe == sigpipe::SIG_IGN) {\n+            if sigpipe_attr_specified {\n                 UNIX_SIGPIPE_ATTR_SPECIFIED.store(true, crate::sync::atomic::Ordering::Relaxed);\n             }\n             if let Some(handler) = handler {"}, {"sha": "f92d6052cc628314bcee716d12b0d7f4fd64b9bb", "filename": "library/std/src/sys/unix/weak.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fweak.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -29,7 +29,7 @@ use crate::ptr;\n use crate::sync::atomic::{self, AtomicPtr, Ordering};\n \n // We can use true weak linkage on ELF targets.\n-#[cfg(all(not(any(target_os = \"macos\", target_os = \"ios\")), not(bootstrap)))]\n+#[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n pub(crate) macro weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n         let ref $name: ExternWeak<unsafe extern \"C\" fn($($t),*) -> $ret> = {\n@@ -43,30 +43,14 @@ pub(crate) macro weak {\n     )\n }\n \n-#[cfg(all(not(any(target_os = \"macos\", target_os = \"ios\")), bootstrap))]\n-pub(crate) macro weak {\n-    (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n-        let ref $name: ExternWeak<unsafe extern \"C\" fn($($t),*) -> $ret> = {\n-            extern \"C\" {\n-                #[linkage = \"extern_weak\"]\n-                static $name: *const libc::c_void;\n-            }\n-            #[allow(unused_unsafe)]\n-            ExternWeak::new(unsafe { $name })\n-        };\n-    )\n-}\n-\n // On non-ELF targets, use the dlsym approximation of weak linkage.\n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n pub(crate) use self::dlsym as weak;\n \n-#[cfg(not(bootstrap))]\n pub(crate) struct ExternWeak<F: Copy> {\n     weak_ptr: Option<F>,\n }\n \n-#[cfg(not(bootstrap))]\n impl<F: Copy> ExternWeak<F> {\n     #[inline]\n     pub(crate) fn new(weak_ptr: Option<F>) -> Self {\n@@ -79,34 +63,6 @@ impl<F: Copy> ExternWeak<F> {\n     }\n }\n \n-#[cfg(bootstrap)]\n-pub(crate) struct ExternWeak<F> {\n-    weak_ptr: *const libc::c_void,\n-    _marker: PhantomData<F>,\n-}\n-\n-#[cfg(bootstrap)]\n-impl<F> ExternWeak<F> {\n-    #[inline]\n-    pub(crate) fn new(weak_ptr: *const libc::c_void) -> Self {\n-        ExternWeak { weak_ptr, _marker: PhantomData }\n-    }\n-}\n-\n-#[cfg(bootstrap)]\n-impl<F> ExternWeak<F> {\n-    #[inline]\n-    pub(crate) fn get(&self) -> Option<F> {\n-        unsafe {\n-            if self.weak_ptr.is_null() {\n-                None\n-            } else {\n-                Some(mem::transmute_copy::<*const libc::c_void, F>(&self.weak_ptr))\n-            }\n-        }\n-    }\n-}\n-\n pub(crate) macro dlsym {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n          dlsym!(fn $name($($t),*) -> $ret, stringify!($name));"}, {"sha": "7fbfe3daaa826c7e7aebe4bbbd70f6a52952e57c", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -3,7 +3,6 @@\n #![cfg_attr(\n     any(\n         all(target_arch = \"arm\", any(target_os = \"linux\", target_os = \"android\")),\n-        all(bootstrap, target_arch = \"aarch64\", any(target_os = \"linux\", target_os = \"android\")),\n         all(target_arch = \"powerpc\", target_os = \"linux\"),\n         all(target_arch = \"powerpc64\", target_os = \"linux\"),\n     ),"}, {"sha": "1030247b890c36c742428e10e4465a1bfc1f259a", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -691,7 +691,8 @@ impl Step for Rustc {\n             ));\n         }\n \n-        // cfg(bootstrap): remove if condition once the bootstrap compiler supports dylib LTO\n+        // We currently don't support cross-crate LTO in stage0. This also isn't hugely necessary\n+        // and may just be a time sink.\n         if compiler.stage != 0 {\n             match builder.config.rust_lto {\n                 RustcLto::Thin | RustcLto::Fat => {"}, {"sha": "c8b4134391e5f1fe712e0df330f666382a3ebf7d", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -1048,7 +1048,7 @@ impl Step for RustdocGUI {\n                 if entry.file_name() == \"link_to_definition\" {\n                     cargo.env(\"RUSTDOCFLAGS\", \"-Zunstable-options --generate-link-to-definition\");\n                 } else if entry.file_name() == \"scrape_examples\" {\n-                    cargo.arg(\"-Zrustdoc-scrape-examples=examples\");\n+                    cargo.arg(\"-Zrustdoc-scrape-examples\");\n                 }\n                 builder.run(&mut cargo);\n             }"}, {"sha": "6a389a64406f9043a746aec08dd69a9acad3df6d", "filename": "src/stage0.json", "status": "modified", "additions": 344, "deletions": 338, "changes": 682, "blob_url": "https://github.com/rust-lang/rust/blob/b15ca6635f752fefebfd101aa944c6167128183c/src%2Fstage0.json", "raw_url": "https://github.com/rust-lang/rust/raw/b15ca6635f752fefebfd101aa944c6167128183c/src%2Fstage0.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.json?ref=b15ca6635f752fefebfd101aa944c6167128183c", "patch": "@@ -17,349 +17,355 @@\n     \"tool is executed.\"\n   ],\n   \"compiler\": {\n-    \"date\": \"2022-11-01\",\n+    \"date\": \"2022-12-27\",\n     \"version\": \"beta\"\n   },\n   \"rustfmt\": {\n-    \"date\": \"2022-11-01\",\n+    \"date\": \"2022-12-27\",\n     \"version\": \"nightly\"\n   },\n   \"checksums_sha256\": {\n-    \"dist/2022-11-01/cargo-beta-aarch64-apple-darwin.tar.gz\": \"ebc0b11a2af0385bf11a5183dc159d890161be45d231acc34c6326aa25b84b95\",\n-    \"dist/2022-11-01/cargo-beta-aarch64-apple-darwin.tar.xz\": \"a0e44bf77337518e2200c34cb297a91dd4db51f0d331ca4cc496989da61676b3\",\n-    \"dist/2022-11-01/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"a4beae1c53df4d35fe991ebc713e37246d4d89e5543ec740274605a7124806b3\",\n-    \"dist/2022-11-01/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"5f8ec5c8b012d7e6bc28ca3d700c1c7c742f6532adb044539cee3b2280c1056c\",\n-    \"dist/2022-11-01/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"54d8fc5ce70b1f06164e17e34d33abde7260c6b1f3356d98d77271ec89766fb1\",\n-    \"dist/2022-11-01/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"f2debb6ae264fefc49380997759bb0b5022ac1c65ced9bc17bc146671be37116\",\n-    \"dist/2022-11-01/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"7a8e10be17c8cd624fb3ae2bb7eaab3c493b637c2c1c1100b5333982d1dfd962\",\n-    \"dist/2022-11-01/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"553decfc64b56d9967ae067bc942ef7117c81d6976b5fa4cf8e5171397836af7\",\n-    \"dist/2022-11-01/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"64bdb603cdc05b983393d707e9e6e6cd1c71dd8213d08b3d0d1cdf168ceb165b\",\n-    \"dist/2022-11-01/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"0afe4ca54c65668257dcad5941c678498ab917bbf82a808f39c093719a53f2ed\",\n-    \"dist/2022-11-01/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"c7fe3bacc9c4acb9b42677281655904b5ed5aec27042b9a8cf9743b737b6b657\",\n-    \"dist/2022-11-01/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"57f985ccaa2452778c90733e2586a991969dc15697bdbc9547da8a62c871b674\",\n-    \"dist/2022-11-01/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"873b2a0c2990eef29d689984293394e6972b4659bd6e4c31fb9bc9c8f1c679f9\",\n-    \"dist/2022-11-01/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"f8a9e74159594d57ce8dda1f7ce7ee4e1d494b9135a0f32b3afc89a637cad8ae\",\n-    \"dist/2022-11-01/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"9570141b118c2339237aac12c1e6d71c138ccef784db2effdfd9d02fb12d0d0d\",\n-    \"dist/2022-11-01/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"183b63cded6c4cc26feaa14be036a619289b155a6718f4964f94c38a9208742b\",\n-    \"dist/2022-11-01/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"9382bf364c5fc9400fb22b046c0a951001961efac221f5cd0f9bf45b1005d36e\",\n-    \"dist/2022-11-01/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"aae0a58b9711365ce1d76966af7387f310b496859a9e02ddbff8e23da93226c7\",\n-    \"dist/2022-11-01/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"507727f9b5a920ea28e7104c9aae681c50fa8aaea446a3e10b991a9408adaefc\",\n-    \"dist/2022-11-01/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"4ebfaf11ffc346eec9f05b2d93123483b784b83a322cca6f5fd406066ecf0fcc\",\n-    \"dist/2022-11-01/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"6407889854bee2e45a00585abb4fc8b387103e33e3e67244dba4e140abe46480\",\n-    \"dist/2022-11-01/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"1aeba894f0ca756dd9c3d9b99c7c94bf1f49d5d87ea919249fd0fcf195eb9c52\",\n-    \"dist/2022-11-01/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"292a95a8de3387832173d9adde633b3d34a019879f97bf196cb41556c3909337\",\n-    \"dist/2022-11-01/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"872819f00ab0a848401d7dfbb18cf139f85b3d8e48eee0a034cf7f0b970bd865\",\n-    \"dist/2022-11-01/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"15eb49c334688e48e83f2565c620b3f1af29775599406efa1814c78ee80673cc\",\n-    \"dist/2022-11-01/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"e74f6884e71109d36d03f7147b7e506f374ba291aadbe4246f6c429bd6fffd1f\",\n-    \"dist/2022-11-01/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"7f3cf8b35465e4df5fc18cc7cb4f4db6e1b240a39f7583126d7f8ad6d18e8bf0\",\n-    \"dist/2022-11-01/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"c59f2893999dd88a55c0a5bdb4436640ae9c18f943baf48f63eff6069f7a3e8d\",\n-    \"dist/2022-11-01/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"566c315b6206a63bf33acf178547bb757a8803e3cfc71f1f63ee033eb6a17138\",\n-    \"dist/2022-11-01/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"814a8e8f8f5caf5bb4018e54ffc2c1bd9d23df94dcaffbc04881b91bb3c8aefe\",\n-    \"dist/2022-11-01/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"5db8a63532be5fb9511238d7976075496aba6c732302dcc27bed9ae61188f917\",\n-    \"dist/2022-11-01/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"6b95c8cc4dda3847f53fb62ea711ca99c1b1b1639249b8b01d54a9ecbc4421ec\",\n-    \"dist/2022-11-01/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"2ad497be28760f7e4ec6dfa6421a6c10ab049e0dbf45ecb3a2dbde5db7a959de\",\n-    \"dist/2022-11-01/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"6e9b982857c64518c10392779528e7065191262a95e091ee289c8668b6cbfc4c\",\n-    \"dist/2022-11-01/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"88a0751ef36816f9e26e9f6d72809687b1f6821b32a3a17c58feaa32f882aecf\",\n-    \"dist/2022-11-01/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"bd6f626002a0c5a3af975419a1258a77c9db91e0db5d4acccbc7dbf25ffd17c8\",\n-    \"dist/2022-11-01/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"69bad5758f27f53d3e48abcd5aa70b16eb29d5445233c65ab50a8ad0a1629077\",\n-    \"dist/2022-11-01/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"06212f4cb605fb79d811060d3096bc4b43cf00e1a4fe4a375154b56ff60c92f5\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-apple-darwin.tar.gz\": \"741f3490b5562afd57cdda846ab322c69e20940bcc11f3ca5690d662d5de280b\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-apple-darwin.tar.xz\": \"2d698df7c00b7c227ca388830732a8787b2a85b328b554c0f8c417813d97ef46\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"9c22b476f25c3f0946cb834da3904516248137cf22c5eed30432401ff061a4cf\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"1604c5d60379227d26d819bd2f7a57c79a9e000a6077ec06e95b418bb0351180\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"673d8941202c2113a431fcef396e604d7ea79000c97a64ef6e93b26956f75fe7\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"3d613d04b48a2eb8644e2bfbb07a88cefe02c7b5cc7bf061b8ef307980230d47\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"e0ce6fa69af565e3b79f7059a4de88e39955d7ea6866d56c2b0946b47929192f\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"de602b7802b1448a861df05c41430dcde4f07358a05711784a1ca37836525b74\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"c4eacf4821c126b321a67e0233d2f84571b3dcf25686165cad00d9645787f03d\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"01ec5ab637010498b784ea2fe6aacea626fc341792eaa5a50756f9b483a765e5\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"2e6efadbcf138ab72750c1375bfeaf2d5102559aa9b745294b9973821e193703\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"e089b1b4248ad8e05ba54cfb278101a74aa34154bd2d44dd50119026bf436d1d\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"ca079fce260accce11c1fb27e550421cd0900027e29b18e24e54a298d78031c3\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"ff33e9fd6f06e02277f580f13d82f753987f4dad7d7926405b63dcb362eec498\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"46101fc5f53595ae53f3ceb755cc72c078471479a337b5319c85e629e5df3b28\",\n-    \"dist/2022-11-01/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"b063425ccc69284e8788211bbde5a7843bd16a3b9c779fab68a11d22ebdf319b\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"77bb5db904089e087032c24fa2e011536e13d3982299285a7515beb97f445078\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"63aae4b9f10f15fb48b2ac20aa7f112a685d49bdf94d8997d036472e928fcbde\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"8f63b6be668e6a25411582db9145c9de8192d58acb42c490b0de89489a3e36c6\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"d862bdeaf2c78b15babaf74cf1c6feaa5c4871a90095f3d4239d81f44217cff4\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-apple-ios.tar.gz\": \"e5b1e9420d387a1442c77bed10efebd7b0268713820a728a067bb4ead6088041\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-apple-ios.tar.xz\": \"569c667e422ca7ac373d59b6e13c299cdb7f334164c84e6f0c8d0f076352fbf0\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-fuchsia.tar.gz\": \"3f945c43c09704b3df6af66a2132da12243b13752094383965d6a8a83c6edb0a\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-fuchsia.tar.xz\": \"3662f02892ab184be99f93a9d0f99e030a73cc61447934b74fcba84e05b022b1\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-linux-android.tar.gz\": \"ab04a0228074e974d70a15e594d57479fe22ed37c8acfa5104201dbbe57747a7\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-linux-android.tar.xz\": \"fb96925878a24dc9e90d356e96cf4fd1fc9152c39f8914f9a9bb676d78069cba\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"45e824f75ac530ee9eaf0b0a01cacd5b8dd64ddf5203c032c49fd2bc4fabb245\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"a6488faf4c87cabb4467f4cbe7348d553045c2f10f450bc6e000fcf18ca9b073\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"e2a66e04b24aad8a8898d6c0270d8dcff63205213cea3b893807ef186e8c0936\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"a4244ac1600726b5abe6b5f9a171fc2e4cc57bbe7cecdeaf23b69e906f05e303\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"9e3e0f675ca50b7a2a1afeacdaf5d7f2f4ec1536f596ff99aadacfcb59fd42f5\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"7e7a8fb4fe0283b71deb79c5ccb1ae61b2099392b3c8e09d03d4a68fbab7a184\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"7543df1d71d805b079d19ccd785f777918b3f11b131bca05d079cb5d3952a38b\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"eb082e894047cd77ac3fcc9c03eaaef77e6bafbd075cb0d62ba3a3ba277f5d64\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-none.tar.gz\": \"144fc6973b06ffb12b5ad0bbfc9fcdcb2a0732de50bb140d62d6af3d6b462908\",\n-    \"dist/2022-11-01/rust-std-beta-aarch64-unknown-none.tar.xz\": \"8ee2ba2d4eca35a426fb089e0f0b50b2ac3ad1ab036c5f8f4786e2953405092f\",\n-    \"dist/2022-11-01/rust-std-beta-arm-linux-androideabi.tar.gz\": \"4a46d6591c1983d0853f7596f7b76e7c82b6b0cbfd97802b565a17aece0d13be\",\n-    \"dist/2022-11-01/rust-std-beta-arm-linux-androideabi.tar.xz\": \"3888fe036b5fa9a5dfa009462a002a05c70e56eb70db3a0c872fab1432e9c9ed\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"529d668389506443f87bd93e98dc72d12be9a4ab41675dc6a1c7373e934ca017\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"dffa1a94f4166435d6fe2a76a4d35deb8c128cc93146f181979416816e77e29a\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"2913bc06d6b49c52804a8dc18d1d3cb1b564e0272cba93f8594747731d360f9c\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"c12bb97fcbeeb0a9a71b2575b2d5113948c515616f720dae3891e2aa886d03a7\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"a844ad8a80fa07b9196dc040d5171749daf94443c57348bca04e69b8dad37cba\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"c261662fa988748ed03722d6034228c893e02a0e473f906bba61c1f43be7cd79\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"1ae5967f4fb80047711519dafea21fed8d6afd308566033e468c11587073d216\",\n-    \"dist/2022-11-01/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"150393cde94d8349eb488a161572589c53fed456c8401e5b1a59d1dd87003f7c\",\n-    \"dist/2022-11-01/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"b1777a389e4db0ccd80ece774865bc99731c4b483be80c909f1b5a2a185dc5a1\",\n-    \"dist/2022-11-01/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"877a00491650bac92e93760c2457b644d2b5ee28d410c1e29fc4b40c05da493a\",\n-    \"dist/2022-11-01/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"3dfbf001db319a41874e2c0de2f55407285d88156fa0563cfe3c3bb1939998fb\",\n-    \"dist/2022-11-01/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"b2d6a543cdf64a5c147001ea30d07bd13b98e2918a343bff08bb57eed1f81462\",\n-    \"dist/2022-11-01/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"cd8f0803ef86052d09606601b09dde05d1997a93fad7a22604fda1176157040e\",\n-    \"dist/2022-11-01/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"748cef6595fcd30da6735c29476639ac80cba94eb627d6654665d656da2979ec\",\n-    \"dist/2022-11-01/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"1dcae3588a3e552778ff1079a92750bee15835f08f8b9ff1123e4e6c5a73c087\",\n-    \"dist/2022-11-01/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"3711105029d28fd91f413f488b7041ea42c70e5a244f992e9259b4e9d52abed1\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"a2af3f6d3681e1c545d0c21bf04fbfe3de1cdb2273fadcbbb4408f5590054d11\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"23e658070e1cbe8011d48678f57bedbbde819cd64f43509858af563a7073a3fd\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"ff7b429d5a6d33f0e467b333225f7c42de279ccf3e91f3ef7c5463dc06939579\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"8d41b293656c5cf93f46754499e5723a89dd997d3723bfbe56f953a7d864c435\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"6dd89ed0f20a0ea4a279dd4f810c7908c3e8a377da8a2983f8890efeea169177\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"504fb533fca6c46ad98c728781ab31170d65e5b35cbc9199aab97b1146a24702\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"f9a731fd3ea961f0c5eff24e6290aed19d79d5444bf562670abc0cd46ee309fe\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"825acb16e4bbba0c9b535e635b972ec581fe6ef115c5a41bace9b85c704eccad\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"41da8404f0e3cef386f6efef9b27fde27de77de71140dceeaddd8e15260ce45d\",\n-    \"dist/2022-11-01/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"c8f81fa9cfb40ce92f2c95ef8b57e8a62d819628111e1dfe0c6760fb48802be3\",\n-    \"dist/2022-11-01/rust-std-beta-armv7a-none-eabi.tar.gz\": \"fa8c3168dff5c167c6ed25f9c605941ab51e73e70c0dd162a5fd17287c5fd5a5\",\n-    \"dist/2022-11-01/rust-std-beta-armv7a-none-eabi.tar.xz\": \"36a5ff7865f8a16b867ab3fff4ac32f0c62c260a5c27385098e67b75b21790fb\",\n-    \"dist/2022-11-01/rust-std-beta-armv7r-none-eabi.tar.gz\": \"0417cef6468fd66bf626729e7c0089b47b149cfc43e8e0d4281f76f73ed17edc\",\n-    \"dist/2022-11-01/rust-std-beta-armv7r-none-eabi.tar.xz\": \"1de6cb38a68ef336e1edf2c1c51d999482898df99e2bc078cafe6ac5380bf3f2\",\n-    \"dist/2022-11-01/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"91003d4648fb01306d6e0a0214e089d444a57c5ff09138040f07cc81e89af639\",\n-    \"dist/2022-11-01/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"884306ac77518ece0cb2f22d898e3d2aa50698bd4181ca23a1dada6d82778682\",\n-    \"dist/2022-11-01/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"f17ca8f54eca5d73006659fd08142d537eff23731b6e5a35bd67efafe0dc8cb1\",\n-    \"dist/2022-11-01/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"b04a17d33d7b9b1caae666dfa5ee9a98e5dc079773b6345f6c49733731e14bfe\",\n-    \"dist/2022-11-01/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"55e61aa74bdb50df54394a0f62b9edc88682c37b51fe9d8d5c05c0619eacd1e3\",\n-    \"dist/2022-11-01/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"ec3d887742289ef9c171ae56ca20c3e9cf1972cc3e6c511611404070c55dac8a\",\n-    \"dist/2022-11-01/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"a36444f0ba0e7e03d06fbf65d830cb7067c675ed061e8f6efd6ed445d5955e88\",\n-    \"dist/2022-11-01/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"dfc07297ee8cb63f76d2019ae822352e6b42e5cccd225eaa5597a63ecff3624f\",\n-    \"dist/2022-11-01/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"e8de9f830cf277be584b54d86d6621a249fb2987fdf32d5f16cde9b492722d45\",\n-    \"dist/2022-11-01/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"f9d8bd74788e2209ecb8d0cc49d94b4e2752c9239f89bcdff3e8fae315d1d923\",\n-    \"dist/2022-11-01/rust-std-beta-i686-linux-android.tar.gz\": \"b15636654925fdba1e9ec1704573e4af1fc5f1158a0657b245901e22c06cd378\",\n-    \"dist/2022-11-01/rust-std-beta-i686-linux-android.tar.xz\": \"9abbfcaa40d86e8a4cf49f2a58b1c7b2f422b6890303cb43feb83cfb8f650a42\",\n-    \"dist/2022-11-01/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"30953eb457a397966221dad058ff7ebd99ca4497f184016b5a61db0f122bdee9\",\n-    \"dist/2022-11-01/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"f9d6d266eb3bb46c058615786483d817138aa29efc3c62c3cd9c87e572956b12\",\n-    \"dist/2022-11-01/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"b55202c349a4e9a493a2de7a3d48788befce32274998d3dfc1d1b6f4a96ba9e3\",\n-    \"dist/2022-11-01/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"6dd8d42e5712d699704e85bb90cd42e0142a4fab7cf7f80132cb0902cc415ccb\",\n-    \"dist/2022-11-01/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"d2a7c9e7f1dba3a317692a46f8efec8d7ba1e9e943c88d3f342a820c34829aa0\",\n-    \"dist/2022-11-01/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"ecf6abb631dd6887b5630d1ea0b8778fc1539405e6c00d7585c8afa2230ef9ec\",\n-    \"dist/2022-11-01/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"93c5912258a49a003a12ca01101f5935d5894f9a133301a47047cca934a7439e\",\n-    \"dist/2022-11-01/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"f8a6e67723cb968e874827a6148a5e25d3d45c56577faee627010347d0f03d92\",\n-    \"dist/2022-11-01/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"8838592167a8d68f463dc18e55d5d2d55c474426e8a4ec0f28fd2cd4230cf638\",\n-    \"dist/2022-11-01/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"c8330a06862a7f375b57774b382a54a1280c33ddc1b94d5d5ec45eb6ff0de8cb\",\n-    \"dist/2022-11-01/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"4b50cc174eb1da9dc831de828e6ee2fc8a81abf8e6dd52b041e4ab00eaff73ac\",\n-    \"dist/2022-11-01/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"4820db058569be7350a81396fdedf9a28233b8061c9bcf607cf2d1058cbf437a\",\n-    \"dist/2022-11-01/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"dfbc460e8322114bde5614b0b45e90066805adbaca999ccdc4f2aae456fc3f1f\",\n-    \"dist/2022-11-01/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"d98c19268b0c84f44f1224f432847a93eb809a85ca48fbe2e4b68fb436bc36aa\",\n-    \"dist/2022-11-01/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"8617edc6d62591d50dbadc4a7bc41b31b66bee6fee830af46636c5206027217f\",\n-    \"dist/2022-11-01/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"98a6132c8dd7558eb5f44007fa681a3a91b2dfd98d1f68e59f0a4660dc37b500\",\n-    \"dist/2022-11-01/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"81f794c54d7a8c680c52a8fc1a0e479526744205d51266007fc3c542496957ba\",\n-    \"dist/2022-11-01/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"dedc5b1a76f8454d1b3d7fda0a05398e5a9ae4cf16ddc4b44477799217a1fb75\",\n-    \"dist/2022-11-01/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"6d9b3d469ae92e38144d9578de8cf0c891e4bf3e667e4e465eb6f0d498140c3c\",\n-    \"dist/2022-11-01/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"f9deb84c24bd0f21ed02d763d3ad8dd92c009de4ceb2b78ec06d90d66609c5f6\",\n-    \"dist/2022-11-01/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"073882815493668dd484b8f107efc047f6e07d8c563703d0e7f73ef33dae0efc\",\n-    \"dist/2022-11-01/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"d1ab3758d1b08937a3f98737ff9fad20377e5bc43d7ab3a9359b4131ea11dcbc\",\n-    \"dist/2022-11-01/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"bc82f3d23dfb7b331558180f474c334ca3798322e19cc64657cbe894d0682901\",\n-    \"dist/2022-11-01/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"fcc12f82ea0c02e8434420165f1ee072bf4587a82ff5ecf34d19f754ffc091ef\",\n-    \"dist/2022-11-01/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"1c4507c7824c02b1af2857c88ff1624e9ead3f38c1456aa031586b43223e9490\",\n-    \"dist/2022-11-01/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"932598fbcc35ee4958be4778450f5b809ce9eabb2aa3d7573fd79744ed4d18ad\",\n-    \"dist/2022-11-01/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"c17f11707c1edef2353fba7e3f4800cecb8a273233825817b6d07ed78d6acd50\",\n-    \"dist/2022-11-01/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"7e90a819b8887f0b1a3ab02fb9a56a9b9eb752408a7bb934c99c7f6ddda48a71\",\n-    \"dist/2022-11-01/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"c437a6fc7cd7869df7cdbb52c51ae1e602ed1206517c38689deb73da6d7b4877\",\n-    \"dist/2022-11-01/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"76c1fc55b16a809ab1c8dfce894899f40d24b20dc670d318a7679953beb6c3a1\",\n-    \"dist/2022-11-01/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"d62396390fb85d5543a80ffbeaf7c32b5297a513dce14790124c35835813032b\",\n-    \"dist/2022-11-01/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"4595485492c650aa53bb9deaeb425ea956f2052c5b5503bb477778f7bcaf6ac6\",\n-    \"dist/2022-11-01/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"ee841bb8fbb0075a0bf51db2007bee2962830a89649c00fd15c67b31fd9226a3\",\n-    \"dist/2022-11-01/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"cac036fafa93f2860a5a2622394e12938c35e629ff81d7cc5930d99c980f9321\",\n-    \"dist/2022-11-01/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"025d70e57d608b81d61799c84ccce9bca3603736c4d3e006fc662c3a7b39e8db\",\n-    \"dist/2022-11-01/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"9450b1b1f95e188bcb9050085d612c8bef36e819881255fc20d70da1f45fa61e\",\n-    \"dist/2022-11-01/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"ff707c6d209f9d8e421fc530a11d41a46daaebdb4aebd5cfbaab761b2cf192ff\",\n-    \"dist/2022-11-01/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"8eb48a94c58440e2afc8ef7bbdbc725f403fe38724c0afde4e7c29a1ba2c7591\",\n-    \"dist/2022-11-01/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"e921a841b7a9e02e28182e91c921746042330d90f0478fc7e01230cb1b881c1c\",\n-    \"dist/2022-11-01/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"122135e161a4cc7dd857e3cb35b64ff7db450dcc07cbb990c8aa83e06bb4b346\",\n-    \"dist/2022-11-01/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"084824d6daeca6a0662ef1e11df84c651138d8d4e7d5c8ef66c5811354b16211\",\n-    \"dist/2022-11-01/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"09e3df606e10a0a59a67bf7b49825a04c23062e6050cebed674e0bdb2c396fcc\",\n-    \"dist/2022-11-01/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"f9929f62ffec9c6b3342da8dd21b1c14526e033174a4f86015182acdbb93a985\",\n-    \"dist/2022-11-01/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"932450fc6b5e8fa4813886baa389b53c6ff1c5b1e71f7370017b9658b04fd13c\",\n-    \"dist/2022-11-01/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"e7776d188a04779e7f6a7257bf367d8671e7d5d804d74db426592f683cabf562\",\n-    \"dist/2022-11-01/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"bbc765adc116c6a1bcbf659853b7169d95b240ffc15227cbb1d60b46d63e120a\",\n-    \"dist/2022-11-01/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"a0ff6e9ea827d7f93563aaec213eacd00efe4be9c921b448405b2af8bbf0066e\",\n-    \"dist/2022-11-01/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"7603744cbbbbdec5b2a322aabe68751e848ac7379c710866c59dcc22e4b873bd\",\n-    \"dist/2022-11-01/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"1f67446eb09505e87a5218b8504dfc678d0a712a5add763362f3c74306010bea\",\n-    \"dist/2022-11-01/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"1baca6f0e7f18a8eb9efcf35bca4320a493d51f08e62bf96a31036e2f2c433fc\",\n-    \"dist/2022-11-01/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"455e52fa3f232c2239112030483c0a657e7f69754d8d36ab72423c76c056fb68\",\n-    \"dist/2022-11-01/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"913801ca45eb1d70c9ddfcdd66aa21edaafccc85acf9864e88991bf8a5a7cf25\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"14e4f69fbf710f16275ccb582a90eee1399ea1226945c7c96f75335df9118966\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"40549d9d9c923a73381b8e45628cfa1896d0e78caabf2aa921c767e0bc979136\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"d40bd56883abc142155188674580c4e29100fd7303fccc70b0c55b964721a156\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"874c97a01d06e1516a89797d7a6effeabf34afb4933956aa34e907a65ea78690\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"cf7acd2b4a083522c01f1909891aaba27502ea0a3a5eff93dfb41971f832bba6\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"e9544acbefa3effe55537de85311b00077a0567d64345aa80414752037212b5f\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"247e9dae16f46c64da895528f3e902030110e2aad8270f169c636ca14bfc28aa\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"b7de9e8bf7b7d04fc9575390d69eacbcc62a39c35c81f37d2170424cffe6a356\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"bd3dc986a11967e8ed050a88d03d1c0814b08cc1ab0cf929561fbf5a941a335e\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"262b4c4ccbe20c9e913a7417c8ca72c6fb7e71f187103929057dcd0fc0b49cea\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"85f6a725e5a726afab9ae019944567b42ee769db98a8d3c335d449eca92344e0\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"07e897f4320f249b3f458e44e5440591962105a3b6032b54f4448c0bd21da964\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"e92855841ae93990f88f3893a1bf511853fc3f10938eda767d5c7ff7d310aa4f\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"3c3412a67f769ead9e8bafbcb5ff6dfc8ef89f0d8234baee7b39ab9df9fadebf\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"f3cd623fdd466e5c0b5749dc4e90a75122f1989f6fcae0ace8c76f3b394a0752\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"3793ab2a42f1bc59ad560ad1af75ed90c49e25f665330b5b8ce50ed73ef88508\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"cc6c715e320c7fc5fd90f446f7c2ce6b356e95934d05f79c4e2d0fc304f212bd\",\n-    \"dist/2022-11-01/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"42a47ce6768b24c2b40c6a724003a401bfb37201a773e3c31ee413cc559cda70\",\n-    \"dist/2022-11-01/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"4c09e5b03a921d8c1d8a10d9535e81be3b3bbed961d229311cc691396ae10cbb\",\n-    \"dist/2022-11-01/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"775f7223bc5d962b5356a4884565a948d3cb5289fafe3e2eb2b8ad67550d72b4\",\n-    \"dist/2022-11-01/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"bc027d9170132c36faa47da1ff8f26d26d383a5145cb9dd2dce20e769ea300ba\",\n-    \"dist/2022-11-01/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"9a721d3550132930820d9b809074535d2b63ecb91d5c061effded92b503bf0c2\",\n-    \"dist/2022-11-01/rust-std-beta-wasm32-wasi.tar.gz\": \"047d58ef5e10ab51a81dbc11646fca184945a1c52e7a91552449c67952c8d898\",\n-    \"dist/2022-11-01/rust-std-beta-wasm32-wasi.tar.xz\": \"a490ce6ebc77a4a49c2fdeec471dd9e586b2aa26f1e7f2fc1323cc06b2b336d5\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"df73bc81d446792d9366772944a04f69ad32f427e1949e05d4f7c202c350c269\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"450aec3ec53594869bbf16ffe1713dfa19b8dcadd812a4af811bd56f1f58c929\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-apple-ios.tar.gz\": \"fb698f63336a186983b09c2c49109dd080c22653f3367dabfcbae564144aff35\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-apple-ios.tar.xz\": \"0d475ba4a4444f4da5fb39d26c9cdbc0352ea799d7e30f57e2e79d8c3c7a7021\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"137234fc37b93ef4fa543f4e33217079137b4dbb51efbea669b93e561932b5e9\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"01e1978d9359a5112aa77409ff17c3d0e0dec774815f679065db6c6293aaa623\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-fuchsia.tar.gz\": \"662e62862b1586f29372339319680c88b7cebe41e98401b5dd62e320755f0d62\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-fuchsia.tar.xz\": \"4a644c6c85c8e427d68a669b0f598669023e2c0db2b69b94a7124c18772052dd\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-linux-android.tar.gz\": \"752a57eb3de0060c1ffc6eb0af71d88d5f881b543b11b209593be2b18af1f902\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-linux-android.tar.xz\": \"19effccfd9d63e955cb0736968c4c300c6d919217a64cde464c30a499ae9fd9c\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"aa8a36ec1892c68a1c1ea0d9ac1b92b03c975a0d8ee538aaee5d757ad84d5b2e\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"955ad79007d397a9e24d819e95017880b25424bdac01386cb8fc6d50247b1274\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"9f15bf80a2384f2fd333dee41289fdd8529170192dcbdd8cba0a73d32715ccc3\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"539bcefcd6b888c5f38abca47792dcff1676ef31eeb9a4a045703582262758c1\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"748fd22a993be659f85c3799871c4de09a99fcd7805c6d0e9d5a18dddfd2e26b\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"68c22dfa2ef5ecd2d43661716e8a8394eaa36e8e960d34dc421bbbe57c3e0d23\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"f06118445fc6671d491c61dd8e6ff83ca21fc1d692058eea072cbe01ff798fb2\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"b3fdd56baadf3a8bffd17730d61b2ccef25ffa25d5cd826bb9a45940bf573fb5\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"2dfab0336a523182d200c7a6096fb29c199339b282ba03b469a9a1e5c5a5bb0b\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"ee5b9158ca0c2e829bb79ac526d17a2ba27ca4e305e134241ba1f8347a9bace5\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"fe62b766d11e9ac55db5011a63086af5d87ce560c0656dc214c668db752675e4\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"e4b1068de2812c62e7ac0ec080f605fa90123a94563dc4f898221275fbd5178b\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"c5ce6885405ba4d1694a7eb767837320ece5a02133e94c1c22ac07143d6f752c\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"eac46cc9200125be2548d6b9f2c2d37b046b8b43b25dd7f7347d88ef6795a3c7\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"1b3d1d051cf355eb26bf9de5096d984f83dc92fdeab3bdcd18d88152c0e2a2bf\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"a17cf4a9df1b1be17f5163f05665bc40638e62210d8e0623fb1afeeb96acad2a\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"90a2e5712bc37f28a0d1f71c54cc04233049c638e4f0592b50adea352e21038f\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"ad76d090357f5e272b1598c35dd24137fb9950e1bdc50b9332fa1d2fcc33a00b\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"37e0954add559b24c08ad284fb80294e435491159db63ea78a6183af5926dcec\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"d6542bd592edd3924999e690416b6bc559486388add76fa77044114b70700fac\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-none.tar.gz\": \"d021e49b68b8321354d99ae0fe80a6b042ec798ca7fe37cc92d4f0c0480f7ebf\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-none.tar.xz\": \"f6202c50c6d3575fdb398a8c98adeb0d86794b60c3951887c90a9e4acb6a89c0\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"b8ca678975c0c18d0fda1bb118b35366d1261e366639b8bb455b6bc59388082f\",\n-    \"dist/2022-11-01/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"119f9e65dc3484f677064e068da42a1e7b8dc0be21d0cbf5185c9836589b39be\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-apple-darwin.tar.gz\": \"11aa79c56a9dea2d5305ed049485a1257912fc0dfca1feff37b768971f4c1701\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-apple-darwin.tar.xz\": \"a031051ccf97100bd8b4d2e4df7a67371cdf300df4697e1d05a7cec33a7d8c09\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"4d015042d7d06929488f607bc56d925002e6f352d74fe192dc30e7feebb9947c\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"d72824112c96514d927df46f6e755898d26ddd5b805f6c2c0411c773105ad61f\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"3e70261ed7c130cb7256717cec0c37476961932be228e46e028818f9076dfccf\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"452f07f63888cf27ca2d061751602bb07a43348eca9cab30db27940a36f496e5\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"995a6410305d43234eb94710ddc251bafd9f5fe4ecacc51c4dc1447f364be30a\",\n-    \"dist/2022-11-01/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"2d586e5d1a72194ce2798d4f07c873d52ea441cabe5040ff682664d618b98d4e\",\n-    \"dist/2022-11-01/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"65954bc862cd149cae2702f25b186fa2166d80cb45bfe6867d075381f2614464\",\n-    \"dist/2022-11-01/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"f3a5f8318efee7eb9ba4d861876b0a5415f308c9dc2cea751a10b2e259303627\",\n-    \"dist/2022-11-01/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"d4be89140f0bd4ef9f73a1b54f949973ce560c4dd62c664974f82278ca0d6079\",\n-    \"dist/2022-11-01/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"5b381b513c27f95f9d170e9c532839a27facfe6eb4dd215c078b44fde40e3ba3\",\n-    \"dist/2022-11-01/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"ffdf714a07408901962c861103b062adf334e0febc1abfa8c538c40b0070793e\",\n-    \"dist/2022-11-01/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"ada55533236ef8c629ca72f929bb87db4b68f8c3d4c6fb3e7001f892a84a2b82\",\n-    \"dist/2022-11-01/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"b7e059973b61a4d7a0c96b4642629bf72668380a5ad8a2962181b1229ac2174c\",\n-    \"dist/2022-11-01/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"9aa3bc05e1782b8ff5d278f5b5baac4b0ae523ad8bba2bacd46e1bca11cd38b9\",\n-    \"dist/2022-11-01/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"acab77f5641be0d7102e6b911f134aa36b6fcad5ac594100889ed0e494eccca3\",\n-    \"dist/2022-11-01/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"e9af106c009e5fa0da36450a7a89a148ec176bd672ff636010846ab978804e4a\",\n-    \"dist/2022-11-01/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"546e7b52f7f9e8c9a99163265dbc8a5ce65dac0fef4f6e1dc8b1bed79f0a24c3\",\n-    \"dist/2022-11-01/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"b5ea7fc6016a4abcae3337261724ca2bd21025856134e1c2a1a1922d12ec19a8\",\n-    \"dist/2022-11-01/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"0f3e0c8e7883dc7ebbec38e1f3446a33651ebba9a725443856b09ae7e8bcfec0\",\n-    \"dist/2022-11-01/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"42871f7f098008f61f6cfd3cf78240156280cc7f5e52860d8125e22b3733a207\",\n-    \"dist/2022-11-01/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"ded0d4da36a0658d46c6705c04fa40d0894b6e113776d2ef8e954e9675e98f9a\",\n-    \"dist/2022-11-01/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"2f9ec1ba69a7abbe4efbc5fa00715f520b4c69792b96e98ed8a72e3f798eb137\",\n-    \"dist/2022-11-01/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"090431409021fa0167576c717cf5daac750f9baf7badc3bc031547dad8dedb18\",\n-    \"dist/2022-11-01/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"0542d0336c8cdacf8a830d2a7c3218b76a00ae37db23fb2f12b928bb7b7dd488\",\n-    \"dist/2022-11-01/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"2d6db76bc5242af8c2199c5e74f152bbd8103477855379e7c5c200b498ccf901\",\n-    \"dist/2022-11-01/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"0dc803a305497cc905f3937691e4f1679c72a385b57ee931b19ac5347052c502\",\n-    \"dist/2022-11-01/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"809f547fb5c27c7d15816642839f9ff5fee20f03a3ce390d5b2bfdc983a7c7e2\",\n-    \"dist/2022-11-01/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"bd8403226676b78b40c7a494b3a89f9bed956e7eedf3a65a61cba41a6382f5b6\",\n-    \"dist/2022-11-01/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"12cd357dc72d67911a521dc0ea44a8d05bc4c214a7f6b9e88872ddc03811dc15\",\n-    \"dist/2022-11-01/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"d92f790cabb85373455b5adee9e692dc934dff60eccb70c077f29cde35e7cd00\",\n-    \"dist/2022-11-01/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"a175a2b7d948459c12f44592c1ee5c79825a120557ff0c488fb0bd4e45c7ee99\",\n-    \"dist/2022-11-01/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"d047a4ed562cc91469785fed44d97061d60e1f9c677b5de05245648373df111f\",\n-    \"dist/2022-11-01/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"1b1f20032337e6a0b5e4745a3542a5638747bf2f3b62b2eb855c0ea1ac54d81c\",\n-    \"dist/2022-11-01/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"c8a46c9c002ce19e940a449a4787055b4ad45076a606bd68626a1c8d892d8191\",\n-    \"dist/2022-11-01/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"547c670fd6a5f38f98e7b47daaf6822fd5a1abd5a7c11b6f2b5838cb145c615e\",\n-    \"dist/2022-11-01/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"16a0783135c22b64541cbf9201e5f84ab4befbc9ec0117f3e9639cd42dcb81bf\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-apple-darwin.tar.gz\": \"3121d060a0306c539334fb42c0c6edb6295eb4b5d05b63e55df98d5dc1cb0eba\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-apple-darwin.tar.xz\": \"4697febb60fdecb5cd70bde0cffad77cdcf8cce057349b4e1f26e3dd4f2f4a51\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"c33bb5e98d83f0a7393c631b6b53eb4a8517bdbf506e1ceb6f0bdd8493fa24b9\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"167e1ab52c4478e6aa8b2bea563f2d8caf3605158731a892181f9d24b027ffff\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"efbe536d85810f2edb6bb7232617f12d3f208e077d177c24f507ff02c8e83a11\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"b6acaa3206a3af7fe0e97d4d9211fc76ba972afcdd188443a72027dd34236658\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"8eb739094411afb56ad791b84aa2ddcd2c98b6ca5a4c1cd7fa631571702f1d67\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"4572c19bf416c188a3691cc9542422b92a124594bdf83c82213d07a3aaeef465\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"eca080758173b3bee5a1ed7d04473a8334422fc58c762031877e690a255202c8\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"68b1ced7efbd6bb4cac647e7417b2ad982f58a1cc546b9391213e85e5852ce6c\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"3a4870b33c0f223dc295fcf3f1c4e331a2631dbc07279f4ca7452d86c5f6e730\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"556821823576a5c0387f0dc89139d3cddc2a17072199607c352fe4b190b7f02f\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"4e1723c8f268eecc9bf3efb16241ce03bf109b9f7c6f4f62e430b7ccd1c092cb\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"47bb3fb8f8529f19fa9725a43a57abd8bc3c7b2a30e17f86b137df0c57a3c549\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"530c24d950028d0745110672fad230da8a2a0e4cd4e5ac5afcf1ff8562288925\",\n-    \"dist/2022-11-01/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"cd3654b33b3a8e7fbcde2e380bf2914cb07fe6f8355c8810a5bcfe3a05d63f84\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"47527c62b813c0612b80c864b3720b7e0673eb2dd762887254fd6a80f11c94b0\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"82248dd276ecc0fd45031ba131cb2c870a4b3c09b822d8ad4454f26f506d7810\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"fdc9cc842850023e7c22ac22173a18aa5383a2e2fecb713c802e59d55cc5232d\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"10ddbe6a89cadde47f6f52ef0c4f9ab08f4ced2281fadd1ecbc6a0e4736c9787\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"2135c6d129fa7ecd831e451e173c38677ea39975a91cd6092252e4c0bd93eeaa\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"387d43021bd0ec1586155d1b977470646a68e2625fc192331b76180755687d37\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"41da916cbac667f5f238c3aee3bfb230c3345a4d625779c1fcf57813c9138696\",\n-    \"dist/2022-11-01/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"f28cf712bc617f1755e78a7a442633a7aff78857b98d9aae473effc5684ce8aa\",\n-    \"dist/2022-11-01/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"065fd7fdcb9f38a9c08b256b46627c8ce38a6433dc162034a306f4d4f4627a31\",\n-    \"dist/2022-11-01/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"1fc14261867b540e6d014cc5a21c557d0a4bb31d2619ae98a330585915365614\",\n-    \"dist/2022-11-01/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"1a9ebea072c333e99a3339a87ac3971deb4fe2baca9bd0e8429321a81cce847f\",\n-    \"dist/2022-11-01/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"1c7a72cf8e9cda52d02bd5f4244164aea829914087501cb0bedd75f05f464a91\",\n-    \"dist/2022-11-01/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"1f8405178138601f65dbe10f93d326c705ea91f9e7200f253d6123f618d09ad8\",\n-    \"dist/2022-11-01/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"00365767eb739ecd82c6264795768baba07a101aacec59e137a7495afd0b3288\",\n-    \"dist/2022-11-01/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"b2e4c4672f440e1f97913497ee158280cb8ed70c81cb47a85e5382cb3de0b03c\",\n-    \"dist/2022-11-01/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"01bea91a3ab8203b32cbd1fb2945a1eca68179e8f4011e387a230587fc2736a4\",\n-    \"dist/2022-11-01/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"2d0db2a9f187d300c183cfe2ac6778547ab6492720c0e9df3e78f5b06004e758\",\n-    \"dist/2022-11-01/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"b89b02b9fdedb9a93dee602dd9c818e97c397ef73c3f1d0164ddd2ab809cddc2\",\n-    \"dist/2022-11-01/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"4498a8e6d0ae7a793a9f3c84e3bbe9218c37053a1f3dd6a0b4ad7edd1a41493f\",\n-    \"dist/2022-11-01/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"27041aa61921b767be6670f0f08aad1a1ab8d09d0e86cd2e431e54744ed25d0b\",\n-    \"dist/2022-11-01/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"870923556049bd4be8da03fa6d876fa8249e4acf0ea2c83850c4e23a09fe577f\",\n-    \"dist/2022-11-01/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"8c05e1f60a59064c05db7522245d482b559ae858a5c9c772db81a05daa60a4c6\",\n-    \"dist/2022-11-01/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"1a88c20701cc6f7dd2b3e32bef72a78936c39095a35237fc4a4b5a497790a048\",\n-    \"dist/2022-11-01/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"9b5ccf5413650144a79f382efd12204aeddf3421ea6f06615afc489cdf30691e\",\n-    \"dist/2022-11-01/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"4bcf264ba7ce42aee79d76ba0f19818aff71ee666ac4ac417c2a60b0dafa8865\",\n-    \"dist/2022-11-01/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"fd6ff248063cd53ee6b0538c8b3c8af1758ae5c42cc2f5fc805ab96799033f7d\",\n-    \"dist/2022-11-01/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"a03cf4d831ba58d1e562d6fd48dd7558d9034046ae7050883eb1d0fc2cad6895\",\n-    \"dist/2022-11-01/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"30be7166fa091929d1a4b5eed4b72c4b5c94898861f4e91fb45a2b9ad4333ca6\",\n-    \"dist/2022-11-01/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"59f3910a559994863f1910ffcf34cae348d0c07128d00ce5ac085bbca349f7f5\",\n-    \"dist/2022-11-01/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"817df1ddab344e47df34c73918c5bbb3a7b33048f8ac5c5794cb35624f5bce24\",\n-    \"dist/2022-11-01/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"7825a5f19cb29245de96eb22183fbfc38b75eda0ba63d2255fa062f9c6764bbf\",\n-    \"dist/2022-11-01/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"0d6384aa1162d821edb6d22326b0a1d481e6735d4343a70df7bead694bb71567\",\n-    \"dist/2022-11-01/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"aef195c86920cfecafc29f80ce6a88c704f09d72011ad1fd462564bf858c75a6\",\n-    \"dist/2022-11-01/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"da43e621a113d88f7c4805f70cb5208bac66f97c68485a60f95cf11f5ae0f55c\",\n-    \"dist/2022-11-01/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"2603b5061d059655e3298df94875fa4876d5ea9af1e04dd197ec5cefa3e1eb4c\",\n-    \"dist/2022-11-01/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"f79606c20ce3bf64a9ede63e878cda199e7f1b0b13f40bd51d7108b3d4c72cb0\",\n-    \"dist/2022-11-01/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"f6c46ffbb38f8838c496e1eddea7d6f27392699abfafd0d13b234eee39238181\",\n-    \"dist/2022-11-01/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"9244fc29cd3c32c971f44fcdaa26623b8976efaf0a4705b573798af5b0b0896e\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"bd502f9105d56af252da1038687a4e942a477c7047cac9730de7414cdbbfbc48\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"426785558da44683a554c542475c9402932c72d63148c37917e8cc6e429ad413\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"52646c86ad464c5803f74ab37166dc1692383bc5fd94818bd579e518c327251e\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"67d1490a41932c2a89981e18c9735d4437faedd1e708e26f75dfd21d4709488b\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"9feb7b704a6d3e6b019a99ecd033042ce81a4b126e4288e0b4772266c6e0a65e\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"fba240009d3f27e04200133120c46112ac64281e99952da44d6fe8a01557f236\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"ce15bda4992ada52f94dae6b1a0e220f26324acefb62094035abe112aa878fec\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"189a8579cf3fe99b9c084821ce1ee9bec6977470341e2ae45b859dcdacf65d21\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"15abcd9e43f2c87fc894b3e280a99865508f9079badcbe7be07c6b79e85f01b4\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"f52dab31a428e568518b00d3afc1426569810bcd20a7db1c0093200c6db86d24\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"57ec35b95a5fd803b2d4dacf7657847111a6cc9bda3cda962174965cd6005085\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"96987349e20e3f602bb6f518924660c09a4575887730b1bbe36adee921921956\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"76d6f5882573169985f5b8a9e13cee8bbe3bd3b423ad287280a0809c6a5efc5a\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"9a2c79685b4ac57efea65e43dafa28b59cead1c14e98f10e0196cb2cfd2fa0b6\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"0be98b45af7e666955e6e0adb5b4cc3f5517c8d144702b10daedd053450cd5d5\",\n-    \"dist/2022-11-01/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"ae9ac6e1c0e14bfba746f3a85bfa3f009113d0edbf880a2cf20ece6046ee27bb\"\n+    \"dist/2022-12-27/cargo-beta-aarch64-apple-darwin.tar.gz\": \"00b7df89de07931d150940536a1e6c980897ed0e9880bb6f24d5ebbad896c8f2\",\n+    \"dist/2022-12-27/cargo-beta-aarch64-apple-darwin.tar.xz\": \"17e1e9cf2c4dad4fec7f420f43cea21923d76ba2d6f87ad67c90ea9c8e4a04f6\",\n+    \"dist/2022-12-27/cargo-beta-aarch64-pc-windows-msvc.tar.gz\": \"783b7e2569490dffc953d4b24e659fec384739ceb8bad37e3a97df374945a91d\",\n+    \"dist/2022-12-27/cargo-beta-aarch64-pc-windows-msvc.tar.xz\": \"a9402480620b03c010cb18dacca9a95c82e7b6078d2c1163543bc4292d7dd300\",\n+    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-gnu.tar.gz\": \"7fa9aa92c2b1268420f60af2826dffa50b61c9926a2a1cd1c8273fe5861cde11\",\n+    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-gnu.tar.xz\": \"97d583ed82db1fd5a03ce44a660f1163d0812b6f352adc6d78e61d7ae4fbfe23\",\n+    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-musl.tar.gz\": \"69236898b091d6ef31445eb1223acfc01adf21fb1aa277a7d441eaa300c0c9ad\",\n+    \"dist/2022-12-27/cargo-beta-aarch64-unknown-linux-musl.tar.xz\": \"4a92788cdba1705b79ce9999d45a62d4631dbc59cc980437e1635dc908458b66\",\n+    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabi.tar.gz\": \"b35b72b16c59b38e38acddf2c06c2c819ca78f146bbf4f3ce9d7ff982b86655e\",\n+    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabi.tar.xz\": \"81d7fbe3f50cbad04c2ad0e118001976a880d23ad2a894ee49c6f6c10583d10d\",\n+    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"942f6860e2cf9da7c5399d308acad43f862750bf7d383444c2dd636b86553e14\",\n+    \"dist/2022-12-27/cargo-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"5f2f3c7186a2cb28f96bba8db7d404b0f3338bbe57edd631bb16fe4d2c8d493a\",\n+    \"dist/2022-12-27/cargo-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"f15932518f114587c3639ed270cab3e4ef4eb28e0abb6b59b5f63138fa43e829\",\n+    \"dist/2022-12-27/cargo-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"41116748ab087e0c7a5354508fb95e1a966212ef5cac40da59e363108077c3a9\",\n+    \"dist/2022-12-27/cargo-beta-i686-pc-windows-gnu.tar.gz\": \"37bbf0a9dcc1b3fbc11a5f72de922fb0f5dc80a632d803fa0a892d72bdd457c1\",\n+    \"dist/2022-12-27/cargo-beta-i686-pc-windows-gnu.tar.xz\": \"7a8afd8a69e1e25e47122096920217bbe765e82e831583420487702831241d5c\",\n+    \"dist/2022-12-27/cargo-beta-i686-pc-windows-msvc.tar.gz\": \"c40ec16780156f6568bf8f1353a3bb367d4bec09dc6e98b03de44bd2ed301ae8\",\n+    \"dist/2022-12-27/cargo-beta-i686-pc-windows-msvc.tar.xz\": \"94320949f071236d828fb1252159f0f2b1f18030303af1ae0b7ca06cd9567de0\",\n+    \"dist/2022-12-27/cargo-beta-i686-unknown-linux-gnu.tar.gz\": \"1fb3fc33289ae716f950feca832196bb32cde0556e41e501d05c84116836d916\",\n+    \"dist/2022-12-27/cargo-beta-i686-unknown-linux-gnu.tar.xz\": \"4f112ea5a91abbf63db484368090fdf8fbc6b7abc1a5d7c8353df15e7908c2e3\",\n+    \"dist/2022-12-27/cargo-beta-mips-unknown-linux-gnu.tar.gz\": \"b90f3c17c73f4dd7b36e0ff56b17be8e1c90f82b33c9be28b7b813fc5c788e05\",\n+    \"dist/2022-12-27/cargo-beta-mips-unknown-linux-gnu.tar.xz\": \"8754bb3f116b09a8b38ac0684014532a19ccb57e4e94d1097a8484e8d67e31ce\",\n+    \"dist/2022-12-27/cargo-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"549733dbbc3ec23976d6975e78ec8b8a30396eb45e4a8f5eef6d4c846cf04da1\",\n+    \"dist/2022-12-27/cargo-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"f5997ebe7c67969b7d14a2233897b6014ebd9b38010eee101d9e484d42b220c9\",\n+    \"dist/2022-12-27/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"3450c71c082bf84115fb035239453e39230afa0575dca0fc52586222b474a0c2\",\n+    \"dist/2022-12-27/cargo-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"a16c397c5e980a926e0122cff5f8d30c4b54c2dba7f48ef00b587c5cda8f500d\",\n+    \"dist/2022-12-27/cargo-beta-mipsel-unknown-linux-gnu.tar.gz\": \"62e025463eca2dac0547275c7827e6ecd109d1b84d056526e647abd220b3e1fc\",\n+    \"dist/2022-12-27/cargo-beta-mipsel-unknown-linux-gnu.tar.xz\": \"99c5f5511b23d93707df394c2ab90ddd98e7876c9ee74c861dc919cdd498399b\",\n+    \"dist/2022-12-27/cargo-beta-powerpc-unknown-linux-gnu.tar.gz\": \"eee574420f365d02d52f5f4754563bc1fe4f0b07d02a554f6aa886bccbe4c092\",\n+    \"dist/2022-12-27/cargo-beta-powerpc-unknown-linux-gnu.tar.xz\": \"64e53a591e2d4dee9935fca4a2df18fbbed1b00b74dd6631473ba2d5b257891b\",\n+    \"dist/2022-12-27/cargo-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"37d2a5f1c496c8ad8d2b5af5e89a4a325ddcef32ebd7087ef3cc9e653e5a8f4a\",\n+    \"dist/2022-12-27/cargo-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"8753d9bfdda6decdcc4f58d2391956609e0aeb75ce4368c7ed52c23ed3f28943\",\n+    \"dist/2022-12-27/cargo-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"303c63a294f2112fceb70cee063f35cbee3296b93ca91e43300e72b064d80da7\",\n+    \"dist/2022-12-27/cargo-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"96b752dd307d2709dbf2b91c687a55992f4e0e5a143223a8c2a267883b4a2832\",\n+    \"dist/2022-12-27/cargo-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"e5c279922e9adb47e6ecaee191ad291bfc627aa05e4c026628664bc47e5ce254\",\n+    \"dist/2022-12-27/cargo-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"7e0145fe22bfca7070dcace196e3229a86f9f5b31ab1cfc4fd7ff158db5b1388\",\n+    \"dist/2022-12-27/cargo-beta-s390x-unknown-linux-gnu.tar.gz\": \"49df0b5774471ced53703942c6551c045ed56c92a3a224615f583511bc845a61\",\n+    \"dist/2022-12-27/cargo-beta-s390x-unknown-linux-gnu.tar.xz\": \"955e67ac19fc7a2a882f759339343c466da9658b2cd95799dd78328c13d6527e\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-apple-darwin.tar.gz\": \"a0e01a9ded551ea1f411da70d4481627579e870c2ff7592efde1d8be83ca46d5\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-apple-darwin.tar.xz\": \"a9205d81dff07cbf2468fa6f6999fd0f1266ad4faf84f5688e3e5cb330bdce0f\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-gnu.tar.gz\": \"d6406b59361cdc97df606901beeafe6660a4cf557b9de4a313d4659c83f10255\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-gnu.tar.xz\": \"ae15fd38cfcd149de306280a48785fe269ea36b1a958de6815adc7a80792d798\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-msvc.tar.gz\": \"d75a793188af608b8bbd92907ff69294bc66b85b7ffe03882abcb661fd8c27f9\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-pc-windows-msvc.tar.xz\": \"26f4ed51fc227dccc67d4c68fcac78374fb1441093d3524ec157b1b6b6e90012\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-freebsd.tar.gz\": \"6503b65a5258b5517c5213f0fb858aeff7e00c453a3633749d1a72f7f645050b\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-freebsd.tar.xz\": \"75ba61fe1670d0e4cf9f9f35460c663701c75ceca95917ed25e98f20cc2f0ef5\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-illumos.tar.gz\": \"e003c3a1ed8b57546e6ecdcbbcb58a97896a8e511b6a8fdc31100c24b8dd5a17\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-illumos.tar.xz\": \"b377d76b8fae7ebc607f33400cc0b37974fbf02a4d29187b1f0f6f668c12ff01\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-gnu.tar.gz\": \"0dcfb9c65b5ad5c6af905c78d6914f5d7f8a62def817e64192b29c957b848783\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-gnu.tar.xz\": \"1ca64be7777194c3191350723e8a909cce93d8ac28ceafb5df641f3066c6a8b9\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-musl.tar.gz\": \"9c24ff865929e88db27285fcb4a10adf97289a388f93ff5fa421211f35267047\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-linux-musl.tar.xz\": \"b794e0397ca0ec274e307468ed56b8116438c0b8a444f593eb56350d687e8137\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-netbsd.tar.gz\": \"0fc5f8716933c46509cc05492e5bf75f6d06575dd6f803882397929b95394e12\",\n+    \"dist/2022-12-27/cargo-beta-x86_64-unknown-netbsd.tar.xz\": \"0cfe7415cb4c0a96019eefe0363c1d61934d76f3b5fb72a113b9de1401ecfad9\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-apple-darwin.tar.gz\": \"777b016bebe68ea79bfb336eedb595174466bfd54321523b9913f5c2741d0135\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-apple-darwin.tar.xz\": \"c4ab94494052bf3fb37a226e1313886546bde1ec4d7188049cb95dbf2963e1fa\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios-sim.tar.gz\": \"884004f47fea38414ed805abda4afce3adf5a83fcd072ddececfa888e55bdef4\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios-sim.tar.xz\": \"db0858bd63fa8609ceb6ee42cbddc31f31b2a0ce0c02e1fe1c2d32f0c8d607c6\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios.tar.gz\": \"996c8612a39bddb3047ce0f23f761deeca61d15b36f2ea270f5a220d14c1ed27\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-apple-ios.tar.xz\": \"c06360094800d069261d363b709ca552d3899d50c12d39c23eb58d75015c980a\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-fuchsia.tar.gz\": \"891f1909fcc78019f77d704c3b3b1031c605dee01a116f04e7f4f402d6b9b2af\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-fuchsia.tar.xz\": \"3033d409735b299b6754852c28c1dac378a94ad892144ed76199d542a265c8a7\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-linux-android.tar.gz\": \"080c97ad158327dfdd24a3c17477614de1dfe27f1236c73ed43b1e7e881f6b06\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-linux-android.tar.xz\": \"80b89416148f4ed917978686ba337ebdbb3d4a50903a792831fa3b83032c43cb\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-pc-windows-msvc.tar.gz\": \"854badcf35650c196b2051be46254d2f4e86b4522dbfa9f1d1a64148cae7bf1e\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-pc-windows-msvc.tar.xz\": \"e4ccf358da4cb13b281c999318816fc99948a3531e9ecd6d0abad9b819c117be\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-gnu.tar.gz\": \"9473f12fc35106ab9144b38bddc3c35d56b0413bec06c2d1d5f43d4fde614331\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-gnu.tar.xz\": \"5cb44be7d8adc0589afca90ef0669c42f03a61a622d856fb057d450554d24c01\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-musl.tar.gz\": \"25ebf045fc59488abc07ed24aa3364fb64cc186f6c852b12cb5c094f81d5fd69\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-linux-musl.tar.xz\": \"d43bca65f55159d6eafb7e342ec5d4598d63bc8fad0c9fc15b6bd88743321d4e\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none-softfloat.tar.gz\": \"91198741990d9300024da5113843cbeff02ed9ea344d9feb57736e9334136d27\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none-softfloat.tar.xz\": \"0aee6204d34246480be1d0f6efd6a66eb10d83a9dd1c215433e840949687c598\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none.tar.gz\": \"97f3193bfde82b997346b49231a0f24a6960da88773bf27c73f57f40ec4f84e6\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-none.tar.xz\": \"1d2122442cc0a6595c901831e8cbaaeafd2043fbc8c4b028265310d2086673cb\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-uefi.tar.gz\": \"6d351f35cb9252c2825311eb22049283534cc2877cfd673fc1b5b3c94c6ef864\",\n+    \"dist/2022-12-27/rust-std-beta-aarch64-unknown-uefi.tar.xz\": \"054bb5a98df25830201ab04e81f63630dc329f48daa0d715a3443f95d2c0f442\",\n+    \"dist/2022-12-27/rust-std-beta-arm-linux-androideabi.tar.gz\": \"93b70e7c6b686ed5695bcf2f0b2da14e89a50e54304d445ebfc35107f689c442\",\n+    \"dist/2022-12-27/rust-std-beta-arm-linux-androideabi.tar.xz\": \"9b8983be6089216428007e968844f57bd88e2371dd592b1ca06aed2aa6479d8c\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabi.tar.gz\": \"753ef462dd47349fee5f45adadc073363250fbcbf566ff337250466d0ce73343\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabi.tar.xz\": \"c19389db997fd0e158e5a5e847f566f6b03f06b3161ce5644ca0178fae25d0f5\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"c819d6a3de743f54e28eab0f2c7744dd5a5be7c6677bb712bfd3f93938435194\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"4ca09f9df5476449c3510c82e284026329411253e2a02c90e6239f30a9a6074a\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabi.tar.gz\": \"f7994d565baee0fbdb010211fcd30398f7f90bd97770ce72e5ba34bf1f06a466\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabi.tar.xz\": \"f54e1efdb9a088a13371e5fd7e1599a7bcadc5db4247e8811ab9d374c17fac8a\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabihf.tar.gz\": \"add3333e892ccfc31b8fa506e79d5633261daf13e7902549ac5ecfe8f3655bbd\",\n+    \"dist/2022-12-27/rust-std-beta-arm-unknown-linux-musleabihf.tar.xz\": \"bfa9a7cb0de16ecef093d593677e32164e4e68042806f543824c16f2a12b55ae\",\n+    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabi.tar.gz\": \"81c958b4ba5933c02cb2872efc4d5de86a2bc1a1d326bf563256ec74e256fd8f\",\n+    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabi.tar.xz\": \"634d2e35b2314826198eb2a7fd6f253cac5c2bbe7a5a7c7cdecc09949db23b3a\",\n+    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabihf.tar.gz\": \"62dd020647cfa88c6719b4b9a803d07f3ccae7c2f94c924e1529def264db1be8\",\n+    \"dist/2022-12-27/rust-std-beta-armebv7r-none-eabihf.tar.xz\": \"53a03694b610146cb80e0ef0033600ea4dd6f8b7d413c3ac675cb57c9b4c5cde\",\n+    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.gz\": \"ac7c396d35406501eda50191b92abab74e19148ec6caa2d5171bba35f2d3ec96\",\n+    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-gnueabi.tar.xz\": \"058c514636a2063193d278e16fc683dbe9c1dadcbca45707152d150dba71065a\",\n+    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-musleabi.tar.gz\": \"bc5400e734bc4747b3ea44bb5c3cf9af5f11d5b5f2e970bd4626a25a276f15f7\",\n+    \"dist/2022-12-27/rust-std-beta-armv5te-unknown-linux-musleabi.tar.xz\": \"0079d1cb3d1fd5be99bed480e6ec0b451dd9e2a2299e3347cbee33344cd8c718\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-linux-androideabi.tar.gz\": \"9dbc9e97f9990f03efe67c817c9dda7fcdc931c7605742182f4d128859c1a53f\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-linux-androideabi.tar.xz\": \"d0119bed6cb41629aa65d83f7c1021e05e2f90bd21a28e6f0d3b6f0ea9127dd4\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabi.tar.gz\": \"09cab74e4a6e38d07622fd80e97d424d7437d554c05ce1896acaaddad0e3b637\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabi.tar.xz\": \"4602ca768e8ba85cfc5a4d4a2964cccd048ad82f349b7453f077e38de918cb0d\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"b983a7699fce4c6f9c7f16ea3fd2905a8ddf21623bae71a9e7515b5cd5b288ec\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"ca2d6d4c09326559a1528cf32c7a899f985c7e3b7751cec8911d0facac149e51\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabi.tar.gz\": \"dfa375f608f297f4dd0fc39921609ecebb31101850d73a8bb8b67ce98e319f3d\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabi.tar.xz\": \"3159afaebb2b17f6b12128e2829944f9406e26cc7019eb33839fda311ea0b809\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabihf.tar.gz\": \"5a2c2361c944d85455b7a037bc820fbfe824180106f5a6d6fbf4066ef78236a3\",\n+    \"dist/2022-12-27/rust-std-beta-armv7-unknown-linux-musleabihf.tar.xz\": \"0bd7ac1cada0a3a3894d404ad5871ef3abc4963eeb5a1f05f59e6264b1e6cc3c\",\n+    \"dist/2022-12-27/rust-std-beta-armv7a-none-eabi.tar.gz\": \"1f9daa0af4695c51e4cda38235497923b9adfefd1a6eb4be086d720cffab7594\",\n+    \"dist/2022-12-27/rust-std-beta-armv7a-none-eabi.tar.xz\": \"b9e5b75720d71bc9e0e16b73b7cf04cd3e5a57da7a6b842926ffcf273308543b\",\n+    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabi.tar.gz\": \"4837b13f144f12e9edb5b49ddf5169d1cd13cff0a3ec3e54160714d45138448e\",\n+    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabi.tar.xz\": \"32a56e92757a9ee82ff71962c7c8144e4240133d44de77d5955510640a31061b\",\n+    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabihf.tar.gz\": \"d31ed0250a195a8043e71c8ae3b2e86111ec07b00892ae05c3783761b20774ee\",\n+    \"dist/2022-12-27/rust-std-beta-armv7r-none-eabihf.tar.xz\": \"06b70c26d9161b17c2e4ca9255ae1a73f7bbeadb24d733c320875e3dbbc77caf\",\n+    \"dist/2022-12-27/rust-std-beta-asmjs-unknown-emscripten.tar.gz\": \"6271afcf4b05fb4de2ed08ba441b3ee0b476e2e33dbda8a5efa3d7540475bca5\",\n+    \"dist/2022-12-27/rust-std-beta-asmjs-unknown-emscripten.tar.xz\": \"131c51bb571df676dbafd84d5015888c4bc15130bd7300d4c53c1667907f7f51\",\n+    \"dist/2022-12-27/rust-std-beta-i586-pc-windows-msvc.tar.gz\": \"d6bca2e8ba737a4704dc01dd6fca58a7c8dc8a065107f9fa98588c5fbdfe39a3\",\n+    \"dist/2022-12-27/rust-std-beta-i586-pc-windows-msvc.tar.xz\": \"d64aa029d4209256e18d7bed6e0e28156a965b1d50cb3eb8d70abab57be55a97\",\n+    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-gnu.tar.gz\": \"f48248f5fedc961ea4050254cf9bdbbe70420ebdaf712847a5374a3c97e21df3\",\n+    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-gnu.tar.xz\": \"c9287bc9be332f084a2779803964ae374930d3bec787155ac3c8d1d6be6a587d\",\n+    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-musl.tar.gz\": \"1914ba0edb77b0bc7cd83dd93d8a6ca53b29800844cdec9a976342982aad8b27\",\n+    \"dist/2022-12-27/rust-std-beta-i586-unknown-linux-musl.tar.xz\": \"30d5d1bf54eb6758e0bd3a3f48f186a957fdb1310ba8b3625b5f33994c8a58fb\",\n+    \"dist/2022-12-27/rust-std-beta-i686-linux-android.tar.gz\": \"6c05a59ff653bcde6a71dfcbd38718ca3cfeb89b7ec09d1cd380fdb589941d27\",\n+    \"dist/2022-12-27/rust-std-beta-i686-linux-android.tar.xz\": \"80b6b57ff73a9483046380c0d4cfc8c090fca5fc4174d5c47f71fffccb7178a6\",\n+    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-gnu.tar.gz\": \"941bb6f5107630a0b26b8749be29c6df920ccb467df367a5f55491b062352f4a\",\n+    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-gnu.tar.xz\": \"f3f2ece3bb0080980e099c176a8a1366171741450fa8b8e515362572b519e19f\",\n+    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-msvc.tar.gz\": \"a94fcee79bd5941e718a112d855163563f6e5377b59a9c1405ac8804131b0383\",\n+    \"dist/2022-12-27/rust-std-beta-i686-pc-windows-msvc.tar.xz\": \"4bea862e2d998e976526cb741b7d674a7d620fc7e4838955ef4c53d000cf24aa\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-freebsd.tar.gz\": \"e5cc60f1c00d966809cd76fd452bbb03452c5cc94a487ef4ad14af12608ae5fa\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-freebsd.tar.xz\": \"df8df7d1750cf9e92b3e4b57b83b195c1eea6ca62f38ad317882a69e2e813ba9\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-gnu.tar.gz\": \"4ff8fc04b63f7a80587d4f75376c74ade7721369ad1508faf5c0f83930e1cf7a\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-gnu.tar.xz\": \"4716141a8be8017adb8540c05f88e6463b2add95439320b0084ffb290bc0d943\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-musl.tar.gz\": \"d7cff128c80db94aaaa2bb708bafa3f857fe8b819ff21a85f7c6c7c5170576be\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-linux-musl.tar.xz\": \"bc83b17627e87ee4b555e9cc5912dbfbba74586f46719994be6832e22f70424b\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-uefi.tar.gz\": \"ec6723c138565c4d9ca87bcda199aceb7b3a42ddf979658cf9e8433a4dae9c70\",\n+    \"dist/2022-12-27/rust-std-beta-i686-unknown-uefi.tar.xz\": \"0e67f10a29f2826399604839a4dcbd173f8de39a755283a0c245c54b8a658210\",\n+    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-gnu.tar.gz\": \"a78f899f6fae1671e41aa7d76b37d9041cc32dfa6e9315dabff3afe21f93700b\",\n+    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-gnu.tar.xz\": \"4c74cece45b9271c77c4b328d1b3d876b50429077074580d771fc2b03f0d4738\",\n+    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-musl.tar.gz\": \"a854fbab503a0541d593cf9496a4e4cf8b9edb49422406b3a7f34e3fa21905f6\",\n+    \"dist/2022-12-27/rust-std-beta-mips-unknown-linux-musl.tar.xz\": \"f42a81564e7366d5d630632af3113b99c5de6d147d7eb9e31da762bb9d35d4ea\",\n+    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"de070d1ae3fb8a825092a9a78c26db553839c6d862e451a497d5f94230414bc5\",\n+    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"0a7092c99c587ef69801af713ef834bae809e4868dfcff43babd44bec532717e\",\n+    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-muslabi64.tar.gz\": \"7077c20142082b0e2b8d6299ffcd8739c8295d315b917563cffe6d42e129cd08\",\n+    \"dist/2022-12-27/rust-std-beta-mips64-unknown-linux-muslabi64.tar.xz\": \"86f0988f3baf0b5bbed81483e7d68004651f227ab22d1d36b34c73f132191dfb\",\n+    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"536fe3059a8095bcc1c44391c27b7d9832d6a057388b4de089915810cbe1baae\",\n+    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"6b4e397a3a175f4cbbddabb750df14d668c1f4c8520577d35fbcb9dfa8613097\",\n+    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.gz\": \"30f42499ab4f21caf21551e0e92bb5db9a2e0f42fd0b3e59ee9789dd40d10391\",\n+    \"dist/2022-12-27/rust-std-beta-mips64el-unknown-linux-muslabi64.tar.xz\": \"1190cfa1023a8d35d202979a1070863bb713495c2c9b720d0371b6d70d23bd7c\",\n+    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-gnu.tar.gz\": \"4ac79a395ba5d70e1a09d0e1ce232b9405b9995f7c459d176be52eade40bbab7\",\n+    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-gnu.tar.xz\": \"42f3666885680cbb2d15ec85cfbc9103e5b170346a9b8cff63a2d15f78472c67\",\n+    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-musl.tar.gz\": \"0b1c979205f8476ad6f0e35c05acb1976cb4c44006c25931e73c35025939f1ff\",\n+    \"dist/2022-12-27/rust-std-beta-mipsel-unknown-linux-musl.tar.xz\": \"7b6c76ae46ca56746b0bdea404125256636f05c1354e5dcf32c2a487d25e0ee1\",\n+    \"dist/2022-12-27/rust-std-beta-nvptx64-nvidia-cuda.tar.gz\": \"ad9cb2ec325e2a2f14ac4db6a5df53a7c06adfe8c4c58f0f2c83748a34d0c550\",\n+    \"dist/2022-12-27/rust-std-beta-nvptx64-nvidia-cuda.tar.xz\": \"1d507bb0cd8c80ee4e9155a0740c2319027ee5280552c1056ee7921a82bb9aa7\",\n+    \"dist/2022-12-27/rust-std-beta-powerpc-unknown-linux-gnu.tar.gz\": \"e8d3b7bb483d7b3b737840ddf7a27a28c216d9d0b3ffc7ccded547f76bc932c5\",\n+    \"dist/2022-12-27/rust-std-beta-powerpc-unknown-linux-gnu.tar.xz\": \"130edffa27b82def2876fb5562fc7a3971d33855e3ce023e18507b3e1bd47d10\",\n+    \"dist/2022-12-27/rust-std-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"b5659dcc18fb0e5849acb13df7153518c8df5ca9566852cabaeee33583321d1f\",\n+    \"dist/2022-12-27/rust-std-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"6bdfae3e9cf07608c862f4c042c47ed318c388bfcfb4cabfa233580b90c7a459\",\n+    \"dist/2022-12-27/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"f28795f8c2823bd817df63486d8a11b6b7cfb9538110e87d8d008ed979a81a3c\",\n+    \"dist/2022-12-27/rust-std-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"695f6acb6ddb4c4a87515646157b88d2f58e2114b100f22bedcd4e2fa8de00b8\",\n+    \"dist/2022-12-27/rust-std-beta-riscv32i-unknown-none-elf.tar.gz\": \"5f004e4b265efae872e8b0d8fda81f4e65cc50452d558ef90b9bef7639f6ba6d\",\n+    \"dist/2022-12-27/rust-std-beta-riscv32i-unknown-none-elf.tar.xz\": \"c93c1cb534e83d43c40c62ed6623559e3e380f177c4bd151a0d1389a80a58139\",\n+    \"dist/2022-12-27/rust-std-beta-riscv32imac-unknown-none-elf.tar.gz\": \"79988bb7bfa27dcacae0c459143be6a34f328ec6bcb73c2267d41a6f022fc045\",\n+    \"dist/2022-12-27/rust-std-beta-riscv32imac-unknown-none-elf.tar.xz\": \"11235a96e7e8e14a173db0be71cd1ce7955c79f5a7d20b7436238256a06342fd\",\n+    \"dist/2022-12-27/rust-std-beta-riscv32imc-unknown-none-elf.tar.gz\": \"a315accc791f1247e92a6362eb7bd6ab899c4688db7decb36b8d892c200186b1\",\n+    \"dist/2022-12-27/rust-std-beta-riscv32imc-unknown-none-elf.tar.xz\": \"a4f6ac1d21ecda00c9d3e34d900771a4c5a50e3e5071d2eba837c9e4738edc80\",\n+    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"06dd8941f63c3031fa0383dd34981c655b26fd10d5510cd06bdcabb4a592a435\",\n+    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"882e464b44acb7e286f49d45a4f5a41fbf570ee0d78f1915fd6f94ac392fa928\",\n+    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-none-elf.tar.gz\": \"734d6f54d143ddddc2141da72ee02a32d4d505e20eaf0041c86c89f8ad8730ea\",\n+    \"dist/2022-12-27/rust-std-beta-riscv64gc-unknown-none-elf.tar.xz\": \"be32ca1ddb2d48877c70c9a128dba02bfdca7a00e93c114c3c99127e7be04adf\",\n+    \"dist/2022-12-27/rust-std-beta-riscv64imac-unknown-none-elf.tar.gz\": \"a6c70d3715b7e50ff15f5473348d8e1c5a061036055a85784b5e84a99e4008ee\",\n+    \"dist/2022-12-27/rust-std-beta-riscv64imac-unknown-none-elf.tar.xz\": \"0dbbf637d310f7ef44cb1bc08122c172606c8ff1c886195eebbd52cad5789597\",\n+    \"dist/2022-12-27/rust-std-beta-s390x-unknown-linux-gnu.tar.gz\": \"3e2f7751028f9123d94ff72b08f8ce0b40da36eada77e1414d4178756b46313a\",\n+    \"dist/2022-12-27/rust-std-beta-s390x-unknown-linux-gnu.tar.xz\": \"382a35c79a03f7abebb9c5788f9dd19bd0973cb89e9b07a971eaafc611c3645a\",\n+    \"dist/2022-12-27/rust-std-beta-sparc64-unknown-linux-gnu.tar.gz\": \"3eb49f766b206966433eecc7cdbbf709e75991644eae6f44596e5ec893fb3e8b\",\n+    \"dist/2022-12-27/rust-std-beta-sparc64-unknown-linux-gnu.tar.xz\": \"9162e50f2ddb12fefecdc7c4c2d60e76874e78fd89b45d7fd81a6c95a856ee28\",\n+    \"dist/2022-12-27/rust-std-beta-sparcv9-sun-solaris.tar.gz\": \"dbf20b8fd52e1b6a553369a1690344574e6c660996ddd5121d4a05bfb71c87aa\",\n+    \"dist/2022-12-27/rust-std-beta-sparcv9-sun-solaris.tar.xz\": \"a40d8d444e57eabeecf8acf0b59f24b5d4e2c97ee538bfe38904a1f81a48fb14\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv6m-none-eabi.tar.gz\": \"1e63244aa865e6a115e603f238b64410606453fb38802b1684fa6397660a1501\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv6m-none-eabi.tar.xz\": \"ecd94de3f4a3aff8f9f920ff68383e342dc293ad2fb2584c9d9e48bf60eb82d5\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabi.tar.gz\": \"ad21ab2584999c7c528dcde2e435d0ee73686b9b94c4f31dfeb3abf3cf9b9821\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabi.tar.xz\": \"9394854e14bc3e671060630c01b6977ab5afcf9022790986c492fe58f0509191\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabihf.tar.gz\": \"1cbabb457c0546da725a548a88b3268bb0feca4269af2b9cd0b98455c2e0c468\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7em-none-eabihf.tar.xz\": \"1bb23d8d2783554e2043ed71cf982d9750bafa3ccac6e387b25d279137042867\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7m-none-eabi.tar.gz\": \"076a918e524cc33a02ab2c94e3a607dd293d5d6d63e0797b16f2246057d1082c\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7m-none-eabi.tar.xz\": \"de8f3e8907fde91bfcbff0c353eb3d1cb9d06dec31142479ef1ad2c6c368d5c6\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7neon-linux-androideabi.tar.gz\": \"658d66031594324821649058e16e3e0b06542e8c9dd17c5fe705c487b5915ffe\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7neon-linux-androideabi.tar.xz\": \"56a9a0235c0aacf561cfc9e7981c57a4d174dbedf5ed943d266302662246b10e\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.gz\": \"3318c23ea42624e26cf2a25dd5fae206ccb96137d6833f28d7bfebe3ba7e327c\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv7neon-unknown-linux-gnueabihf.tar.xz\": \"b91396e82a9c30711608c3650d637a3ad56ea90d682460c791210f8bfb5a6854\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv8m.base-none-eabi.tar.gz\": \"55b45e9863e197262bd97a9bcb80991c9c34385acaa228b062546b690621b530\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv8m.base-none-eabi.tar.xz\": \"dc0b7ed56a142475759164713bcdd7c64958c7e7febcafa5371414082ae495b2\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabi.tar.gz\": \"b2bed92d03b295035e4bc4e0fd63b44ee1cc634edb394cfbd7afdc00353a73e9\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabi.tar.xz\": \"bcce53fd7c0c494ea1c45227190a959e992f07851dd064b2a9c599fafb07077c\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabihf.tar.gz\": \"d6df9026c218b906671e89e433b165552a9486e41399a8f01a12d10495afc8dc\",\n+    \"dist/2022-12-27/rust-std-beta-thumbv8m.main-none-eabihf.tar.xz\": \"f5f2411e3ff94f6e524a14ee46e6e6bc2e9ec91e395b0382f7a40bc6e970d623\",\n+    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-emscripten.tar.gz\": \"c766ec36907ce0a7e76ba9a227fdd57eae7a744bc5679b67a6ce1d6ab41ea19f\",\n+    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-emscripten.tar.xz\": \"de5f398bc34fb22489e9f6f2a9847954d8231ff5732f2595e8be93eaf7849986\",\n+    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-unknown.tar.gz\": \"e3ed4bc39da4731443b3bbd584106444aceaf91720546ac66e98712fe65dfa93\",\n+    \"dist/2022-12-27/rust-std-beta-wasm32-unknown-unknown.tar.xz\": \"704a65e4f3e1afea9d1bd6a60c4d3e5fd57e3e14ba0dd2e2b94305c3e1c92cb8\",\n+    \"dist/2022-12-27/rust-std-beta-wasm32-wasi.tar.gz\": \"03e2ca41c758fb4f9a2ea562ac4ed7186e27607458bdd7b575d786368336ea11\",\n+    \"dist/2022-12-27/rust-std-beta-wasm32-wasi.tar.xz\": \"1ebc2ac44181d6d26928cbd550c64c5b496008e97356c68497f15f8cc8351f37\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-apple-darwin.tar.gz\": \"0f0520f7163ef3d659e5761b2f0c7a9f2de00b2f769eeec8d1e7e9b3b08daf6d\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-apple-darwin.tar.xz\": \"25795f1876330666b7fd6dd724661b364643448d0688d479f492c02faf2f7a4a\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-apple-ios.tar.gz\": \"014a022bbb524d8c550d5dc7d678b9764adcc9962538980e9596ebced9c5614d\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-apple-ios.tar.xz\": \"9b38e214e203c959eba0e8d651410f6cafc9e4b5725228c2bb4ac8f562e6cfa7\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.gz\": \"afd9236304892945334183b31072b9b9f9b4faef8b7cdc4ad1f45a9b3e080a58\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-fortanix-unknown-sgx.tar.xz\": \"33a7e5fd18f2166fb2b6cbe7630d80915533d59afc0080f1370bcfad1114eaa1\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-fuchsia.tar.gz\": \"7e91e1298da3676c4c051d7f34eec21f2fffa0a34af212c785b79c2d1048fe92\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-fuchsia.tar.xz\": \"fff70ed752d0760990f7a90bc3c50ac6586e8b012e61a15b6dfb325dd081b9a9\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-linux-android.tar.gz\": \"f9183794392422fbe8cfd61ea7bae0dadd8731e82b1d15a59f4e93acccd2048f\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-linux-android.tar.xz\": \"4fce2ab0dacac153de7d9805786b17d517863b0ff04a8224540daee86eff4056\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-pc-solaris.tar.gz\": \"d5b64111b3763063c38ae63915ca366a4fdb63f0dcf8121588a8953f01ebc669\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-pc-solaris.tar.xz\": \"c396b086773dc06db2e59bcdaff8ffbb7069efee5841b9e3cdd4dfb05fd95ce4\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-gnu.tar.gz\": \"e851812f69bcb2fe606bfbda125fa6b3f55752fd1a2330878c48ca99eedbb8b6\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-gnu.tar.xz\": \"689738a0952a0eab27ba3d3f9bc9b531ec29f338ea373bfa783a83786d5c2885\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-msvc.tar.gz\": \"b51f78199bfc1417f020e2d0dd16044f63f6b6675b2b6856f669f8604e44a6bf\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-pc-windows-msvc.tar.xz\": \"7713269f3c51717f6231cf4100043eca2330512b602c2962da81af561e90193b\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-sun-solaris.tar.gz\": \"9f0a129f4c2ea324e2dc94fad3f7acbc7bf2b988f66d9c42dd8abbc60c569acf\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-sun-solaris.tar.xz\": \"6ca71851fd0a7879aa750a63deb4ee587f82c28b27486f716e4fae5ebe599086\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-freebsd.tar.gz\": \"6cfbf0f85757854fba1551c3312baac820e398b573d50b005cc3958723db7c82\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-freebsd.tar.xz\": \"2e2dfb82fa7e23f888ae9541a30d15ba978cb29bbdfec6afb00590a39c16df5d\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-illumos.tar.gz\": \"92650856a7e74c8b912d5c84cd1002a490f9c8e3fa4506733fcbedb3cd42792b\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-illumos.tar.xz\": \"3dd302996bd3fb9f8b077e6d5fe3dc6f7dd9590d5fc3eb3bab2cffaada4e99d3\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnu.tar.gz\": \"3a1faf905ffc7263e725ce7571cb84dd8698adbc45b6902da86350299b2e3ccb\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnu.tar.xz\": \"daef635cdf88c8d9c924c0d66e2b26db1f56bda9b48ca0c21e089060b07dc997\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnux32.tar.gz\": \"567bb99f67737cca721d1dc6975daefd3dad29b13d531d3b939405ef4e7aee84\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-gnux32.tar.xz\": \"aa218c4547e77f33ba4bc45bba0b6fcf3cce9355c2cf11d74a3a4c5e49f9b3cd\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-musl.tar.gz\": \"de43b04cccb3c2bdcd2a7993c391299a4bde5041102ce0eb5e32b6cfae86cd79\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-linux-musl.tar.xz\": \"f99963704b4c3189361925ec8b53daa2ca15ae4af9215cbd87cfec23e044cefa\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-netbsd.tar.gz\": \"3d4949e63f137552e3b74e50b366f95d7a153e7c61cf5587634be51516fdc610\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-netbsd.tar.xz\": \"5b48095a35f862190536e64eff726327e25c23981c0bc1224c8c44bfccbb705d\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-none.tar.gz\": \"12b5c69138260daf976e963ba503c66ec4432f11cf7506bc9ba691ac2c1df4a1\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-none.tar.xz\": \"5c334a67f6586dc406b6e55c7f9d64b7701e1c7879bf5860b378069301c57854\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-redox.tar.gz\": \"58c15f9119e5f78d7c70b24e67af57ce10bb2d2cb1347b9b4631478665c624de\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-redox.tar.xz\": \"a2f8b635254d53ec5b902dbeb8ac63c6c3982f94dfbcaec3d093f17f0f5fa896\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-uefi.tar.gz\": \"1ce5c25480e97699b12c180ed6198766a0c12a3543dd317ba6f4a52538027b0d\",\n+    \"dist/2022-12-27/rust-std-beta-x86_64-unknown-uefi.tar.xz\": \"e4d9ffe34ba40e5ccf87007085dc4daa20a8a52944f092e2a075527702b55072\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-apple-darwin.tar.gz\": \"f5c8dadb8eb0335a50326a94f858625e4f01e3159e933d58f9d24338d47943be\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-apple-darwin.tar.xz\": \"0a6eeb32e4d85b628044c3e075e5f1414a42bb582905b199d360addae466d3ae\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-pc-windows-msvc.tar.gz\": \"0f7ce917f14a1d42637fbbbc343473596becceb22634cb7c7cdee6beaa2b9ca1\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-pc-windows-msvc.tar.xz\": \"49667bd902fb5fb2855e843ca5c1dcd453171f164a3dee2dcd9e09b0d9e1e57e\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-gnu.tar.gz\": \"d5a03695685afff4debff8e09f2d91db02d2ac29981a9ec230619c3e388ce1c9\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-gnu.tar.xz\": \"db1aeb772a08f111d8f024164b570322f45ecab0f6db4e931b91971b2b982323\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-musl.tar.gz\": \"0e51f97b677b5c813862bba3e5a3b0884f0ecdf9b7c3676089625431a3d0cb2c\",\n+    \"dist/2022-12-27/rustc-beta-aarch64-unknown-linux-musl.tar.xz\": \"f88c6c33ac3682f340ed60b4f62ee8ed61eb21069a1f0a912024d19e41c0d5c7\",\n+    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabi.tar.gz\": \"25abe3158ec3ab7c064341247d78ea265ad7e0dc2063837fb5cf0a3bea9d011e\",\n+    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabi.tar.xz\": \"1d430b8e35ebd63a79b34917edacebb76b2fa8f1cea4772ba2c4ef0340485fb3\",\n+    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabihf.tar.gz\": \"1858d5ed21a3132af4b56c841cbabc9fb834d501946956a0e9aeeddfa095344f\",\n+    \"dist/2022-12-27/rustc-beta-arm-unknown-linux-gnueabihf.tar.xz\": \"17cc52dbd6ccbed4677ad52fa666ea10295c11209528e78ac190f01b5d509f87\",\n+    \"dist/2022-12-27/rustc-beta-armv7-unknown-linux-gnueabihf.tar.gz\": \"3440edd99025f24f2640528d2d1c10047c834b93cb09a935c65ecfb72012e7d0\",\n+    \"dist/2022-12-27/rustc-beta-armv7-unknown-linux-gnueabihf.tar.xz\": \"7e1ff0a950db0ecbadef3a9ee55a593891f11a42c6c0ff59637074c8b5c4da74\",\n+    \"dist/2022-12-27/rustc-beta-i686-pc-windows-gnu.tar.gz\": \"90487ff490c4e71ae62e28492cf49600f8f92e0f35f5d76a50eafcf4bbcf4bcb\",\n+    \"dist/2022-12-27/rustc-beta-i686-pc-windows-gnu.tar.xz\": \"8b44fb934aba0eef296098bfc5a9f2994cdd595420ce10f4f310c5ee9d481071\",\n+    \"dist/2022-12-27/rustc-beta-i686-pc-windows-msvc.tar.gz\": \"0fefda6b62234a43976ebf18d7cd62057cad5b494c750f2d9730f5df64cadb00\",\n+    \"dist/2022-12-27/rustc-beta-i686-pc-windows-msvc.tar.xz\": \"c9eecbc06e7456bf5e383557a8e5720d00d09de640b8c46139121faadc354d74\",\n+    \"dist/2022-12-27/rustc-beta-i686-unknown-linux-gnu.tar.gz\": \"8b17d032192aa17e52a3f08a074079561ad7ad6c439f9274aef228af93adacc3\",\n+    \"dist/2022-12-27/rustc-beta-i686-unknown-linux-gnu.tar.xz\": \"c70638cad594097450a469837411b110e979c303727341623427e3c9e4e4f507\",\n+    \"dist/2022-12-27/rustc-beta-mips-unknown-linux-gnu.tar.gz\": \"3669ff9024092ab467a1b95aec2cb1692810ee716739f31e3aee7d89e6bd6d7f\",\n+    \"dist/2022-12-27/rustc-beta-mips-unknown-linux-gnu.tar.xz\": \"165859e42492e33bff634c80b6c96b13fd2252981b4be2821b96a6593933e22a\",\n+    \"dist/2022-12-27/rustc-beta-mips64-unknown-linux-gnuabi64.tar.gz\": \"2ac418c0cdeb2382aea7296169d747f65349d7e6d5aebbdde7b377e985de354e\",\n+    \"dist/2022-12-27/rustc-beta-mips64-unknown-linux-gnuabi64.tar.xz\": \"21ae51357508398527b6edd2e5fbb1745fda1c8db2683c40847216c0ce251d47\",\n+    \"dist/2022-12-27/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.gz\": \"3eb68935676424aa8c68bc32b06c010c5c1302fa6f77e9b33e5543565562d176\",\n+    \"dist/2022-12-27/rustc-beta-mips64el-unknown-linux-gnuabi64.tar.xz\": \"0eeb58035b510a166b8506168f67850993e278888986773c779bee24d7a6ec11\",\n+    \"dist/2022-12-27/rustc-beta-mipsel-unknown-linux-gnu.tar.gz\": \"f41d878b2e49beb9ee3a1bb8863ce1b81fae7100a786a78d9922bf8a4fd0dfc8\",\n+    \"dist/2022-12-27/rustc-beta-mipsel-unknown-linux-gnu.tar.xz\": \"e0cd18973c7651cd2e1e041f92900375a045bef62754d432df539000aa5946c4\",\n+    \"dist/2022-12-27/rustc-beta-powerpc-unknown-linux-gnu.tar.gz\": \"7206be82ba39971c6a734f4a89f7f750d581768d82253e31cd985fecd1d17c3e\",\n+    \"dist/2022-12-27/rustc-beta-powerpc-unknown-linux-gnu.tar.xz\": \"f9ec2a3e98a3b94b170237386256c763d62925b430d0e12a289982c7c79d2bfc\",\n+    \"dist/2022-12-27/rustc-beta-powerpc64-unknown-linux-gnu.tar.gz\": \"32be7fe5f359cb2312c9bd966eb43b143b336b4acbdf118bf09221574f157b16\",\n+    \"dist/2022-12-27/rustc-beta-powerpc64-unknown-linux-gnu.tar.xz\": \"a8163a5b527b1ee932e06589d690c17d8848dbfa8504de6984a718579698abb2\",\n+    \"dist/2022-12-27/rustc-beta-powerpc64le-unknown-linux-gnu.tar.gz\": \"3e875cb943dd0ffff907f6a582a64f923cb84a07ddd8b5e6f1ec2e1d4228342f\",\n+    \"dist/2022-12-27/rustc-beta-powerpc64le-unknown-linux-gnu.tar.xz\": \"22537364de01be77a2a5d79486b1090dbee7b3273fc634073031f82576a61a14\",\n+    \"dist/2022-12-27/rustc-beta-riscv64gc-unknown-linux-gnu.tar.gz\": \"230041ec7d0d4debc841abafe2f3314de51793d281a1077835d9190286a558f7\",\n+    \"dist/2022-12-27/rustc-beta-riscv64gc-unknown-linux-gnu.tar.xz\": \"2dafdb1a97469737123149608476c248a77ccebeb22834b6a2166fc30551a7ce\",\n+    \"dist/2022-12-27/rustc-beta-s390x-unknown-linux-gnu.tar.gz\": \"0bd96121550321138dad9f74f331eaefd77ab388843e5561c5c0cb32e9d80072\",\n+    \"dist/2022-12-27/rustc-beta-s390x-unknown-linux-gnu.tar.xz\": \"ecb02c8535c1518e589eefb10be17830010c40be61f3184576abe93e098d793d\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-apple-darwin.tar.gz\": \"600b83ea5c832dc6ad9746d74b7dbc8ea566adb9208c4260b183ef05078d2bff\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-apple-darwin.tar.xz\": \"175930f3062b433fc0a2b959917933bf3347d3f3e0900684785493d0ee9dc6f3\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-gnu.tar.gz\": \"d1701678ee1d2f2e91f3c1f898f852593ec1b109e430c53c13bc2898b08bca3f\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-gnu.tar.xz\": \"3400e923af537d28139b9d5d780caa039828e06677cbf499322614006552778c\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-msvc.tar.gz\": \"d462ca50803b13e136fbfd49ac4a6e186e416041f3cdaa8b4fe72e628cc10555\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-pc-windows-msvc.tar.xz\": \"81ca0992ec8306ff67b00f5f85f31c6617f78b7350116dd56df082c477c9069d\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-freebsd.tar.gz\": \"65fe64154264ab76bb94aa7f107efa9b58cb801c9aaabcc7e6ffa0ce14319ef9\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-freebsd.tar.xz\": \"cd6e9bfb6e8c08a46dce7bc623cfdc5a04e55c8377eaa3a75fae0bfe8e00b43e\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-illumos.tar.gz\": \"a66bb4b0d9dd9a21b54857c4fa7eb48a88789f0414fec4a1e36c798546c4b71f\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-illumos.tar.xz\": \"b63e6299e961b75d9c9bcb46e1dbc22b8fec89292ee6c8758edd43f4b89cb12e\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-gnu.tar.gz\": \"c768beca1350bdcbcc31c7d3f30c3ccec0ab2bea0c28bc4c89cdd32d9780cd00\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-gnu.tar.xz\": \"62a675d74274ddb4d8a9146c20942cb91b86e0c94a902169c2cf77f4d471d645\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-musl.tar.gz\": \"8f2b81b37bc34291f3d90bb6aec621da0ac760c39727bfd24449c288cc8cb3c3\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-linux-musl.tar.xz\": \"053c313c9a751bf0102448866fad2a80ca67b9f79afce82ce03805430e2e695b\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-netbsd.tar.gz\": \"a9f42eb0ffdc4bef87669d8fb5163e81a5d82ff6baf631f159b7bccafe9df453\",\n+    \"dist/2022-12-27/rustc-beta-x86_64-unknown-netbsd.tar.xz\": \"d1ea529e56d57132de1782396a767f8f00f30e2b5f7c9a5fa96c3289b43e3515\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-apple-darwin.tar.gz\": \"411b96fddfbcc90b4522e3f4e2d6e174f3440960e89193c97fcd5ca8afd62809\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-apple-darwin.tar.xz\": \"29db6fb11b411dc8351a8a8d1b148e81d9c87f9fb234b3a18722ee470b4d36c0\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-pc-windows-msvc.tar.gz\": \"32ab437117791eb7113ac522ee4119e2e43722528141302772adf9cda7306b24\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-pc-windows-msvc.tar.xz\": \"4d892f3c65ef8e32670ab3c3e8fb39a2ae623c59d1ff555ec94644254e954474\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.gz\": \"8bff3a1591d25d3e1acb70600e6cd54d712772247376ac5eb90a4b2aafd21a6a\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-gnu.tar.xz\": \"b81b094d128a37b178da1eda7c72399a9da4bd614e697c53e9c4d78589f859f5\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-musl.tar.gz\": \"b3a685d1abe4ac639a0a3ea187b83ec660cd838e7c5c010ed60f8620d17df906\",\n+    \"dist/2022-12-27/rustfmt-nightly-aarch64-unknown-linux-musl.tar.xz\": \"10b7563202520708fd27cc221ee8db34b368563eb1586be1395955ebf4313d6e\",\n+    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.gz\": \"34e5ca3d51b51ccd97ded5e0c31c999a84f9d5ca5ee3d010e15212a97ab40567\",\n+    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabi.tar.xz\": \"16638ba8478861276c10847b989fd23de942cb82a9d4da9d92858c6800a39a9e\",\n+    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.gz\": \"13fa3bf29e9d20291703bf2c03bc97cd8e2081d1c747b6835eb0a06f94dd5d19\",\n+    \"dist/2022-12-27/rustfmt-nightly-arm-unknown-linux-gnueabihf.tar.xz\": \"98dd01d90657e43ab3a2b91673137cd6ae4c171633db1f1e4b68b2e90bcb9bab\",\n+    \"dist/2022-12-27/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.gz\": \"1370e4c8ad5bab425c02fc924d5ac079ac1387368a3ea5d22c1cdc2edc9c6ba0\",\n+    \"dist/2022-12-27/rustfmt-nightly-armv7-unknown-linux-gnueabihf.tar.xz\": \"8c312da4ccd992c303fa3f181dc46f9b01022f72061ef43b2fd5848736547870\",\n+    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-gnu.tar.gz\": \"0d7a87816f50452349bd26cefdd9f53f2d93a53243290ac59bd5de414407aa1e\",\n+    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-gnu.tar.xz\": \"982fc6783ad07235d375c4c8964104fdc64a009ea359cca532cc268a8249e88c\",\n+    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-msvc.tar.gz\": \"a5b76840e49a912a819809a2b4c73a0e750422fad4876d11b409a8ed49a77911\",\n+    \"dist/2022-12-27/rustfmt-nightly-i686-pc-windows-msvc.tar.xz\": \"9566b6417a0bdb4c73272d167cc743b297db62f625449343a6f1ab60c52d5327\",\n+    \"dist/2022-12-27/rustfmt-nightly-i686-unknown-linux-gnu.tar.gz\": \"bf6cb5e886ce02a3f9b4b00a3696da0ee277af8f690f5a31119c5fce5779cd4d\",\n+    \"dist/2022-12-27/rustfmt-nightly-i686-unknown-linux-gnu.tar.xz\": \"7afa5129bc43346614869721e7094f65eba6681bb9b8ca8a3559925f29433f10\",\n+    \"dist/2022-12-27/rustfmt-nightly-mips-unknown-linux-gnu.tar.gz\": \"f9805697506a0c730299492fe04c53433c8c4deb70ca245ff1c2cf5151fe306e\",\n+    \"dist/2022-12-27/rustfmt-nightly-mips-unknown-linux-gnu.tar.xz\": \"f5d7d5a841a7e7a5d749e52cdb118d2f2cec09de68835a42748db4b3a0a79979\",\n+    \"dist/2022-12-27/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.gz\": \"dc903c64c969a3c21664263c2a30e9cb0dc42069a95f755545ce9648240a376e\",\n+    \"dist/2022-12-27/rustfmt-nightly-mips64-unknown-linux-gnuabi64.tar.xz\": \"de6591cc73244d99b3469d88439ad442f00037a1cdcaf5fdc5a694b52e47b2fb\",\n+    \"dist/2022-12-27/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.gz\": \"f4e8dba56a1b90d5871bf8722a5ecd2027a4f101299880a8689f5cf46df2606a\",\n+    \"dist/2022-12-27/rustfmt-nightly-mips64el-unknown-linux-gnuabi64.tar.xz\": \"496c19042848726db446cd3df4c52f3e8a5527002ca5492e2d6ef72528d6887a\",\n+    \"dist/2022-12-27/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.gz\": \"58742a5c8230e8749b01058acea639d92d45090bcec6fb7eb1d8f356b0f08631\",\n+    \"dist/2022-12-27/rustfmt-nightly-mipsel-unknown-linux-gnu.tar.xz\": \"bbbdaa32d8d29c407133b0ef2851970da884032effeb85c271d57e58b7d38a44\",\n+    \"dist/2022-12-27/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.gz\": \"1a8a59193dc15d331c3243a2cfaf5c81c023464becc4da63201583d2d2cdc27d\",\n+    \"dist/2022-12-27/rustfmt-nightly-powerpc-unknown-linux-gnu.tar.xz\": \"ee86ae7621804a7b57ccab06dc73b7d87453b53814d482ea43dc26dd01dae1c5\",\n+    \"dist/2022-12-27/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.gz\": \"21a79a050e4461305e280ed7de7c0ade2774ad5230f671c76667be7bdbdc47af\",\n+    \"dist/2022-12-27/rustfmt-nightly-powerpc64-unknown-linux-gnu.tar.xz\": \"033afa47c24a4887d40d62391f9f66b76dffdc1bd8f1ad622bfb14db91d7df03\",\n+    \"dist/2022-12-27/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.gz\": \"01cea51850a7f676803f5f8f9a556a71bfb8e7a7e04cc5fc0e7d1b706473338b\",\n+    \"dist/2022-12-27/rustfmt-nightly-powerpc64le-unknown-linux-gnu.tar.xz\": \"720bf138fb2c541d8d8d0c60d6584cff692c932c6f383901f999e7b3d4078770\",\n+    \"dist/2022-12-27/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.gz\": \"8c3f3fd601bc7d8670f6acfcda29206fd5590fb3a2a6cbb3794ba29cf749144d\",\n+    \"dist/2022-12-27/rustfmt-nightly-riscv64gc-unknown-linux-gnu.tar.xz\": \"8f1b43479a724197c7ac051c6a6d2a10bd87c6b24fed1d38c9e93f503c87e5b6\",\n+    \"dist/2022-12-27/rustfmt-nightly-s390x-unknown-linux-gnu.tar.gz\": \"b38b6dc1e65cc0f5031d2045a90404f3b2ce2648884db1f658641e76168d0109\",\n+    \"dist/2022-12-27/rustfmt-nightly-s390x-unknown-linux-gnu.tar.xz\": \"ed635e2388fcd3bbe94f497404b6787edd5e7471d6c6471345386a43444f46d1\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-apple-darwin.tar.gz\": \"457995f055ef35a2491326f95caf31376b21e3cc4c0316cf4536cb7604e472d3\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-apple-darwin.tar.xz\": \"d80b01e8c007da58250f7affea8d034a536437efd766eeb8de6d5b7feba9b0d5\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-gnu.tar.gz\": \"ee2ab7683e75fa68ad482c81e546cd71b9209497f16a0590507e5de884f1e627\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-gnu.tar.xz\": \"d08326f42bf7f38855e37c624a38923d09cbf162b666e8058891aff06ec017c8\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-msvc.tar.gz\": \"e42ee4dfdd0aa342dd8192204fd6cfb503eaa0069f70776adbbca352d7e7b661\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-pc-windows-msvc.tar.xz\": \"76ec230ae507729fb4ced016a45b0020775a9eef068c2b2e5ae6e3fcb451d32d\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-freebsd.tar.gz\": \"55f5c89950a81b00efc542c19b42cbfeb9c969af63280106fc78e8893df3d568\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-freebsd.tar.xz\": \"5a4cf3589d06e562ebed70bf0015af3e80f83de1c4d311c810ebf09feac640bf\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-illumos.tar.gz\": \"fb44bc69be6c89c7245b914324e23284dbd9887ac0c1c4a65379344ce78cfb28\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-illumos.tar.xz\": \"8d34915b54cd8ea6abf0bff01546f31f74342e1d21128b1e14c32cdfd3505afd\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.gz\": \"d15403f81b36c0a2829ad2dee5c1edf39a993a13ccc57f01bb45c77898e3b9ec\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\": \"4c0c61f404ec6bb87ab044c0850d116c577a2ff3cfda9ac1598a7858b4fe1a7d\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-musl.tar.gz\": \"8bc1fe0e2496769f52a576ccd13f706b26f706f060bebb2618e2c64c3831e2d3\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-linux-musl.tar.xz\": \"bcb527bb736bea88bbbb6974ba388b11fe20596c2c178314bbfdad5e2db65fcc\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-netbsd.tar.gz\": \"8bffdf816b12c53d5443e2523c0960a37ab67c93590b0bb753fd5a026e67d368\",\n+    \"dist/2022-12-27/rustfmt-nightly-x86_64-unknown-netbsd.tar.xz\": \"bb5c947ab6dfa28fa7c3d7050e9c14c02eaedf2a4e06d290bee554f569be2c30\"\n   }\n }"}]}