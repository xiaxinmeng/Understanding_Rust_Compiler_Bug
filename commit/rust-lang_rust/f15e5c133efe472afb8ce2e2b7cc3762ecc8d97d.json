{"sha": "f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNWU1YzEzM2VmZTQ3MmFmYjhjZTJlMmI3Y2MzNzYyZWNjOGQ5N2Q=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-27T21:53:30Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-27T21:53:30Z"}, "message": "Skip MIR optimisation for cargo check", "tree": {"sha": "aac0abd8eecd037911b16879a58ad10af6d88c30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac0abd8eecd037911b16879a58ad10af6d88c30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d", "html_url": "https://github.com/rust-lang/rust/commit/f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8b961677ac5c74762dcea955aa0ff4d7fe4915", "html_url": "https://github.com/rust-lang/rust/commit/ab8b961677ac5c74762dcea955aa0ff4d7fe4915"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "77e916305c5b3af8d283ddc7d928cfdd2bfeb208", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=f15e5c133efe472afb8ce2e2b7cc3762ecc8d97d", "patch": "@@ -28,7 +28,7 @@ use rustc::traits::specialization_graph;\n use rustc::ty::{self, Ty, TyCtxt, ReprOptions, SymbolName};\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n \n-use rustc::session::config::{self, CrateTypeProcMacro};\n+use rustc::session::config::{self, CrateTypeProcMacro, OutputType};\n use rustc::util::nodemap::FxHashMap;\n \n use rustc_data_structures::stable_hasher::StableHasher;\n@@ -833,6 +833,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         }\n     }\n \n+    fn metadata_output_only(&self) -> bool {\n+        // MIR optimisation can be skipped when we're just interested in the metadata.\n+        self.tcx.sess.opts.output_types.keys().count() == 1 &&\n+            self.tcx.sess.opts.output_types.contains_key(&OutputType::Metadata)\n+    }\n+\n     fn encode_info_for_impl_item(&mut self, def_id: DefId) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_impl_item({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -877,7 +883,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         } else if let hir::ImplItemKind::Method(ref sig, body) = ast_item.node {\n             let generics = self.tcx.generics_of(def_id);\n             let types = generics.parent_types as usize + generics.types.len();\n-            let needs_inline = types > 0 || tcx.trans_fn_attrs(def_id).requests_inline();\n+            let needs_inline = (types > 0 || tcx.trans_fn_attrs(def_id).requests_inline()) &&\n+                !self.metadata_output_only();\n             let is_const_fn = sig.constness == hir::Constness::Const;\n             let ast = if is_const_fn { Some(body) } else { None };\n             let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n@@ -1168,7 +1175,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 hir::ItemConst(..) => self.encode_optimized_mir(def_id),\n                 hir::ItemFn(_, _, constness, _, ref generics, _) => {\n                     let has_tps = generics.ty_params().next().is_some();\n-                    let needs_inline = has_tps || tcx.trans_fn_attrs(def_id).requests_inline();\n+                    let needs_inline = (has_tps || tcx.trans_fn_attrs(def_id).requests_inline()) &&\n+                        !self.metadata_output_only();\n                     let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n                     if needs_inline || constness == hir::Constness::Const || always_encode_mir {\n                         self.encode_optimized_mir(def_id)"}]}