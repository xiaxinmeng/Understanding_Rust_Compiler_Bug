{"sha": "d5a4c6253db548cdc428f324d2c4ab66906e5171", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YTRjNjI1M2RiNTQ4Y2RjNDI4ZjMyNGQyYzRhYjY2OTA2ZTUxNzE=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2019-11-30T15:24:04Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2019-11-30T15:24:04Z"}, "message": "remove trailing whitespace", "tree": {"sha": "4319bdf3cc7665dcfac9440643b0c8f51814e15d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4319bdf3cc7665dcfac9440643b0c8f51814e15d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5a4c6253db548cdc428f324d2c4ab66906e5171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5a4c6253db548cdc428f324d2c4ab66906e5171", "html_url": "https://github.com/rust-lang/rust/commit/d5a4c6253db548cdc428f324d2c4ab66906e5171", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5a4c6253db548cdc428f324d2c4ab66906e5171/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f3bee17f0c9c8f7d6293db32087b70e1de72cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/44f3bee17f0c9c8f7d6293db32087b70e1de72cb", "html_url": "https://github.com/rust-lang/rust/commit/44f3bee17f0c9c8f7d6293db32087b70e1de72cb"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "ee098a758da9d98129d859b463aa782708deb252", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d5a4c6253db548cdc428f324d2c4ab66906e5171/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5a4c6253db548cdc428f324d2c4ab66906e5171/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=d5a4c6253db548cdc428f324d2c4ab66906e5171", "patch": "@@ -816,15 +816,15 @@ mod loop_keyword { }\n /// be handled exhaustively either explicitly or by using wildcards like\n /// `_` in the `match`. Since `match` is an expression values can also be\n /// returned.\n-/// \n+///\n /// ```rust\n /// let opt = Option::None::<usize>;\n /// let x = match opt {\n ///     Some(int) => int,\n ///     None => 10,\n /// }\n /// assert_eq!(x, 10);\n-/// \n+///\n /// let a_number = Option::Some(10);\n /// match a_number {\n ///     Some(x) if x <= 5 => println!(\"0 to 5 num = {}\", x),\n@@ -833,27 +833,27 @@ mod loop_keyword { }\n ///     _ => all_other_numbers(),\n /// }\n /// ```\n-/// \n-/// `match` can be used to gain access to the inner members of an enum \n+///\n+/// `match` can be used to gain access to the inner members of an enum\n /// and use them directly.\n-/// \n+///\n /// ```rust\n /// enum Outer {\n ///     Double(Option<u8>, Option<String>),\n ///     Single(Option<u8>),\n ///     Empty\n /// }\n-/// \n+///\n /// let get_inner = Outer::Double(None, Some(String::new()));\n /// match get_inner {\n ///     Outer::Double(None, Some(st)) => println!(\"{}\", st),\n ///     Outer::Single(opt) => println!(\"{:?}\", opt),\n ///     _ => the_rest(),\n /// }\n /// ```\n-/// \n+///\n /// For more information on `match` and matching in general, see the [Reference].\n-/// \n+///\n /// [Reference]: ../reference/expressions/match-expr.html\n mod match_keyword { }\n \n@@ -874,29 +874,29 @@ mod mod_keyword { }\n /// `move` converts any variables captured by reference or mutable reference\n /// to owned by value variables. The three [`Fn` trait]'s mirror the ways to capture\n /// variables, when `move` is used the closures is represented by the `FnOnce` trait.\n-/// \n+///\n /// ```rust\n /// let capture = \"hello\";\n /// let closure = move || {\n ///     println!(\"we say {}\", capture);\n /// };\n /// ```\n-/// \n+///\n /// `move` is often used when [threads] are involved.\n-/// \n+///\n /// ```rust\n /// let x = 5;\n-/// \n+///\n /// std::thread::spawn(move || {\n ///     println!(\"captured {} by value\", x)\n /// }).join().unwrap();\n-/// \n+///\n /// // x is no longer available\n /// ```\n-/// \n+///\n /// For more information on the `move` keyword, see the [closure]'s section\n /// of the Rust book or the [threads] section\n-/// \n+///\n /// [`Fn` trait]: ../std/ops/trait.Fn.html\n /// [closure]: ../book/ch13-01-closures.html\n /// [threads]: ../book/ch16-01-threads.html#using-move-closures-with-threads"}]}