{"sha": "026922ad60a9529f16b792e8c2fe805ab3906259", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNjkyMmFkNjBhOTUyOWYxNmI3OTJlOGMyZmU4MDVhYjM5MDYyNTk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-17T11:11:01Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-17T11:12:04Z"}, "message": "make replace_prefix only take &str as arguments\n\nhttps://github.com/rust-lang/rust/pull/76828#issuecomment-694078200", "tree": {"sha": "dd2eb0a56c55fc8f2daadb3a05a282c2e6ad8a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2eb0a56c55fc8f2daadb3a05a282c2e6ad8a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/026922ad60a9529f16b792e8c2fe805ab3906259", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/026922ad60a9529f16b792e8c2fe805ab3906259", "html_url": "https://github.com/rust-lang/rust/commit/026922ad60a9529f16b792e8c2fe805ab3906259", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/026922ad60a9529f16b792e8c2fe805ab3906259/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "012974da7ad3737b296af4a401dfed2e8dcc22df", "url": "https://api.github.com/repos/rust-lang/rust/commits/012974da7ad3737b296af4a401dfed2e8dcc22df", "html_url": "https://github.com/rust-lang/rust/commit/012974da7ad3737b296af4a401dfed2e8dcc22df"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "247bbf637ceaf9c447be86b3840e4217b2c740b8", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/026922ad60a9529f16b792e8c2fe805ab3906259/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/026922ad60a9529f16b792e8c2fe805ab3906259/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=026922ad60a9529f16b792e8c2fe805ab3906259", "patch": "@@ -362,16 +362,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn replace_prefix<A, B, C>(&self, s: A, old: B, new: C) -> Option<String>\n-    where\n-        A: AsRef<str>,\n-        B: AsRef<str>,\n-        C: AsRef<str>,\n-    {\n-        let s = s.as_ref();\n-        let old = old.as_ref();\n+    fn replace_prefix(&self, s: &str, old: &str, new: &str) -> Option<String> {\n         if let Some(stripped) = s.strip_prefix(old) {\n-            Some(new.as_ref().to_owned() + stripped)\n+            Some(new.to_string() + stripped)\n         } else {\n             None\n         }\n@@ -422,7 +415,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Str, &ty::Array(arr, _) | &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = self.replace_prefix(src, \"b\\\"\", \"\\\"\") {\n+                            if let Some(src) = self.replace_prefix(&src, \"b\\\"\", \"\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider removing the leading `b`\",\n@@ -436,7 +429,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = self.replace_prefix(src, \"\\\"\", \"b\\\"\") {\n+                            if let Some(src) = self.replace_prefix(&src, \"\\\"\", \"b\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider adding a leading `b`\",\n@@ -561,7 +554,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // we may want to suggest removing a `&`.\n                 if sm.is_imported(expr.span) {\n                     if let Ok(src) = sm.span_to_snippet(sp) {\n-                        if let Some(src) = self.replace_prefix(src, \"&\", \"\") {\n+                        if let Some(src) = self.replace_prefix(&src, \"&\", \"\") {\n                             return Some((\n                                 sp,\n                                 \"consider removing the borrow\",\n@@ -598,7 +591,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     match mutbl_a {\n                                         hir::Mutability::Mut => {\n                                             if let Some(s) =\n-                                                self.replace_prefix(src, \"&mut \", new_prefix)\n+                                                self.replace_prefix(&src, \"&mut \", &new_prefix)\n                                             {\n                                                 Some((s, Applicability::MachineApplicable))\n                                             } else {\n@@ -607,7 +600,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         }\n                                         hir::Mutability::Not => {\n                                             if let Some(s) =\n-                                                self.replace_prefix(src, \"&\", new_prefix)\n+                                                self.replace_prefix(&src, \"&\", &new_prefix)\n                                             {\n                                                 Some((s, Applicability::Unspecified))\n                                             } else {\n@@ -621,7 +614,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     match mutbl_a {\n                                         hir::Mutability::Mut => {\n                                             if let Some(s) =\n-                                                self.replace_prefix(src, \"&mut \", new_prefix)\n+                                                self.replace_prefix(&src, \"&mut \", &new_prefix)\n                                             {\n                                                 Some((s, Applicability::MachineApplicable))\n                                             } else {\n@@ -630,7 +623,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         }\n                                         hir::Mutability::Not => {\n                                             if let Some(s) =\n-                                                self.replace_prefix(src, \"&\", new_prefix)\n+                                                self.replace_prefix(&src, \"&\", &new_prefix)\n                                             {\n                                                 Some((s, Applicability::MachineApplicable))\n                                             } else {"}]}