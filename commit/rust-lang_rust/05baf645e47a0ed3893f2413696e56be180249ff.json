{"sha": "05baf645e47a0ed3893f2413696e56be180249ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YmFmNjQ1ZTQ3YTBlZDM4OTNmMjQxMzY5NmU1NmJlMTgwMjQ5ZmY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-11T18:29:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T10:44:14Z"}, "message": "do not overwrite spans as eagerly\n\nthis was required to preserve the span from\nthe #[structural_match] attribute -- but honestly\nI am not 100% sure if it makes sense.", "tree": {"sha": "74204ea214726f32461351740403a146f0bde46b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74204ea214726f32461351740403a146f0bde46b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05baf645e47a0ed3893f2413696e56be180249ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05baf645e47a0ed3893f2413696e56be180249ff", "html_url": "https://github.com/rust-lang/rust/commit/05baf645e47a0ed3893f2413696e56be180249ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05baf645e47a0ed3893f2413696e56be180249ff/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99c2a6b335d953eca64e631f3e9946b1cc6643e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c2a6b335d953eca64e631f3e9946b1cc6643e1", "html_url": "https://github.com/rust-lang/rust/commit/99c2a6b335d953eca64e631f3e9946b1cc6643e1"}], "stats": {"total": 67, "additions": 61, "deletions": 6}, "files": [{"sha": "f771ee95bd1215696ca6557771290ca1a372755d", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/05baf645e47a0ed3893f2413696e56be180249ff/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05baf645e47a0ed3893f2413696e56be180249ff/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=05baf645e47a0ed3893f2413696e56be180249ff", "patch": "@@ -1304,6 +1304,31 @@ impl CodeMap {\n         return a;\n     }\n \n+    /// Check if the backtrace `subtrace` contains `suptrace` as a prefix.\n+    pub fn more_specific_trace(&self,\n+                              mut subtrace: ExpnId,\n+                              suptrace: ExpnId)\n+                              -> bool {\n+        loop {\n+            if subtrace == suptrace {\n+                return true;\n+            }\n+\n+            let stop = self.with_expn_info(subtrace, |opt_expn_info| {\n+                if let Some(expn_info) = opt_expn_info {\n+                    subtrace = expn_info.call_site.expn_id;\n+                    false\n+                } else {\n+                    true\n+                }\n+            });\n+\n+            if stop {\n+                return false;\n+            }\n+        }\n+    }\n+\n     pub fn record_expansion(&self, expn_info: ExpnInfo) -> ExpnId {\n         let mut expansions = self.expansions.borrow_mut();\n         expansions.push(expn_info);"}, {"sha": "8550617560df3ed7840259c812b60b6a3c2c9649", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/05baf645e47a0ed3893f2413696e56be180249ff/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05baf645e47a0ed3893f2413696e56be180249ff/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=05baf645e47a0ed3893f2413696e56be180249ff", "patch": "@@ -33,7 +33,7 @@ use visit::Visitor;\n use std_inject;\n \n use std::collections::HashSet;\n-\n+use std::env;\n \n pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n     let expr_span = e.span;\n@@ -1275,11 +1275,41 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n }\n \n fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n-    /* this discards information in the case of macro-defining macros */\n-    Span {\n-        lo: sp.lo,\n-        hi: sp.hi,\n-        expn_id: cx.backtrace(),\n+    debug!(\"new_span(sp={:?})\", sp);\n+\n+    if cx.codemap().more_specific_trace(sp.expn_id, cx.backtrace()) {\n+        // If the span we are looking at has a backtrace that has more\n+        // detail than our current backtrace, then we keep that\n+        // backtrace.  Honestly, I have no idea if this makes sense,\n+        // because I have no idea why we are stripping the backtrace\n+        // below. But the reason I made this change is because, in\n+        // deriving, we were generating attributes with a specific\n+        // backtrace, which was essential for `#[structural_match]` to\n+        // be properly supported, but these backtraces were being\n+        // stripped and replaced with a null backtrace. Sort of\n+        // unclear why this is the case. --nmatsakis\n+        debug!(\"new_span: keeping trace from {:?} because it is more specific\",\n+               sp.expn_id);\n+        sp\n+    } else {\n+        // This discards information in the case of macro-defining macros.\n+        //\n+        // The comment above was originally added in\n+        // b7ec2488ff2f29681fe28691d20fd2c260a9e454 in Feb 2012. I\n+        // *THINK* the reason we are doing this is because we want to\n+        // replace the backtrace of the macro contents with the\n+        // backtrace that contains the macro use. But it's pretty\n+        // unclear to me. --nmatsakis\n+        let sp1 = Span {\n+            lo: sp.lo,\n+            hi: sp.hi,\n+            expn_id: cx.backtrace(),\n+        };\n+        debug!(\"new_span({:?}) = {:?}\", sp, sp1);\n+        if sp.expn_id.into_u32() == 0 && env::var_os(\"NDM\").is_some() {\n+            panic!(\"NDM\");\n+        }\n+        sp1\n     }\n }\n "}]}