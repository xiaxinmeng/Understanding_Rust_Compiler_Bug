{"sha": "4615359e86b78f97f36cba7c8312d2a26ee51c7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MTUzNTllODZiNzhmOTdmMzZjYmE3YzgzMTJkMmEyNmVlNTFjN2U=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T14:58:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T14:58:07Z"}, "message": "Define data for all allocs during finalization", "tree": {"sha": "beadef7c03fbab1f2502aa4ee733f0f06609de58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beadef7c03fbab1f2502aa4ee733f0f06609de58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4615359e86b78f97f36cba7c8312d2a26ee51c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4615359e86b78f97f36cba7c8312d2a26ee51c7e", "html_url": "https://github.com/rust-lang/rust/commit/4615359e86b78f97f36cba7c8312d2a26ee51c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4615359e86b78f97f36cba7c8312d2a26ee51c7e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b707da40a5d0369201f80d2fed5847caeb781094", "url": "https://api.github.com/repos/rust-lang/rust/commits/b707da40a5d0369201f80d2fed5847caeb781094", "html_url": "https://github.com/rust-lang/rust/commit/b707da40a5d0369201f80d2fed5847caeb781094"}], "stats": {"total": 51, "additions": 25, "deletions": 26}, "files": [{"sha": "b393c91f7fb933e46b7925273c7a313825e69322", "filename": "src/constant.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4615359e86b78f97f36cba7c8312d2a26ee51c7e/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4615359e86b78f97f36cba7c8312d2a26ee51c7e/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=4615359e86b78f97f36cba7c8312d2a26ee51c7e", "patch": "@@ -6,13 +6,14 @@ use rustc_mir::interpret::{CompileTimeEvaluator, Memory};\n \n #[derive(Default)]\n pub struct ConstantCx {\n-    constants: HashMap<AllocId, DataId>,\n+    todo_allocs: HashSet<AllocId>,\n     done: HashSet<DataId>,\n }\n \n impl ConstantCx {\n-    pub fn finalize<B: Backend>(mut self, module: &mut Module<B>) {\n-        println!(\"constants {:?}\", self.constants);\n+    pub fn finalize<'a, 'tcx: 'a, B: Backend>(mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>, module: &mut Module<B>) {\n+        println!(\"todo allocs: {:?}\", self.todo_allocs);\n+        define_all_allocs(tcx, module, &mut self);\n         println!(\"done {:?}\", self.done);\n         for data_id in self.done.drain() {\n             module.finalize_data(data_id);\n@@ -111,7 +112,6 @@ fn trans_const_place<'a, 'tcx: 'a>(\n     //println!(\"const value: {:?} allocation: {:?}\", value, alloc);\n     let alloc_id = fx.tcx.alloc_map.lock().allocate(alloc);\n     let data_id = get_global_for_alloc_id(\n-        fx.tcx,\n         fx.module,\n         fx.constants,\n         alloc_id,\n@@ -127,43 +127,41 @@ fn define_global_for_alloc_id<'a, 'tcx: 'a, B: Backend>(\n     module: &mut Module<B>,\n     cx: &mut ConstantCx,\n     alloc_id: AllocId,\n-    todo: &mut HashSet<AllocId>,\n ) -> DataId {\n-    *cx.constants.entry(alloc_id).or_insert_with(|| {\n-        let data_id = module\n-            .declare_data(&alloc_id.0.to_string(), Linkage::Local, false)\n-            .unwrap();\n-        todo.insert(alloc_id);\n-        data_id\n-    })\n+    module\n+        .declare_data(&alloc_id.0.to_string(), Linkage::Local, false)\n+        .unwrap()\n }\n \n fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     module: &mut Module<B>,\n     cx: &mut ConstantCx,\n     alloc_id: AllocId,\n ) -> DataId {\n-    if let Some(data_id) = cx.constants.get(&alloc_id) {\n-        return *data_id;\n-    }\n+    cx.todo_allocs.insert(alloc_id);\n+    let data_id = define_global_for_alloc_id(module, cx, alloc_id);\n+    data_id\n+}\n \n+fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a> (\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &mut Module<B>,\n+    cx: &mut ConstantCx,\n+) {\n     let memory = Memory::<CompileTimeEvaluator>::new(tcx.at(DUMMY_SP), ());\n \n-    let mut todo = HashSet::new();\n-    todo.insert(alloc_id);\n-\n     loop {\n         let alloc_id = {\n-            if let Some(alloc_id) = todo.iter().next().map(|alloc_id| *alloc_id) {\n-                todo.remove(&alloc_id);\n+            if let Some(alloc_id) = cx.todo_allocs.iter().next().map(|alloc_id| *alloc_id) {\n+                cx.todo_allocs.remove(&alloc_id);\n                 alloc_id\n             } else {\n                 break;\n             }\n         };\n \n-        let data_id = define_global_for_alloc_id(module, cx, alloc_id, &mut todo);\n+        let data_id = define_global_for_alloc_id(module, cx, alloc_id);\n+        println!(\"alloc_id {} data_id {}\", alloc_id, data_id);\n         if cx.done.contains(&data_id) {\n             continue;\n         }\n@@ -178,7 +176,8 @@ fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n         );\n \n         for &(offset, reloc) in alloc.relocations.iter() {\n-            let data_id = define_global_for_alloc_id(module, cx, reloc, &mut todo);\n+            cx.todo_allocs.insert(reloc);\n+            let data_id = define_global_for_alloc_id(module, cx, reloc);\n \n             let reloc_offset = {\n                 let endianness = memory.endianness();\n@@ -188,13 +187,13 @@ fn get_global_for_alloc_id<'a, 'tcx: 'a, B: Backend + 'a>(\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n \n-            // TODO: is this a correct usage of the api\n             let global_value = module.declare_data_in_data(data_id, &mut data_ctx);\n             data_ctx.write_data_addr(reloc_offset as u32, global_value, 0);\n         }\n \n         module.define_data(data_id, &data_ctx).unwrap();\n         cx.done.insert(data_id);\n     }\n-    *cx.constants.get(&alloc_id).unwrap()\n+\n+    assert!(cx.todo_allocs.is_empty(), \"{:?}\", cx.todo_allocs);\n }"}, {"sha": "706d82ed2f61291485336fd94a3b5697b1911d04", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4615359e86b78f97f36cba7c8312d2a26ee51c7e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4615359e86b78f97f36cba7c8312d2a26ee51c7e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4615359e86b78f97f36cba7c8312d2a26ee51c7e", "patch": "@@ -281,7 +281,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                 }\n             }\n \n-            cx.constants.finalize(&mut cx.module);\n+            cx.constants.finalize(tcx, &mut cx.module);\n \n             let after = ::std::time::Instant::now();\n             println!(\"time: {:?}\", after - before);"}]}