{"sha": "3d7a6fee79a7a42ac69b185806733dbbd1fc664e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkN2E2ZmVlNzlhN2E0MmFjNjliMTg1ODA2NzMzZGJiZDFmYzY2NGU=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2017-11-20T17:26:54Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2017-11-20T20:18:48Z"}, "message": "Prevent repr(C, u8) from triggering a warning on non-clike enums", "tree": {"sha": "1b4093f176fb2410afb2d813e7a978acf6a6556a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b4093f176fb2410afb2d813e7a978acf6a6556a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7a6fee79a7a42ac69b185806733dbbd1fc664e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7a6fee79a7a42ac69b185806733dbbd1fc664e", "html_url": "https://github.com/rust-lang/rust/commit/3d7a6fee79a7a42ac69b185806733dbbd1fc664e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7a6fee79a7a42ac69b185806733dbbd1fc664e/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8293fe9fdf2d3398176297b82a72cd32d13538d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8293fe9fdf2d3398176297b82a72cd32d13538d8", "html_url": "https://github.com/rust-lang/rust/commit/8293fe9fdf2d3398176297b82a72cd32d13538d8"}], "stats": {"total": 30, "additions": 25, "deletions": 5}, "files": [{"sha": "003255f87966fb753bf5cf1808b2d32c9f4bafbb", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d7a6fee79a7a42ac69b185806733dbbd1fc664e/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7a6fee79a7a42ac69b185806733dbbd1fc664e/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=3d7a6fee79a7a42ac69b185806733dbbd1fc664e", "patch": "@@ -75,7 +75,9 @@ impl<'a> CheckAttrVisitor<'a> {\n             }\n         };\n \n-        let mut conflicting_reprs = 0;\n+        let mut int_reprs = 0;\n+        let mut is_c = false;\n+        let mut is_simd = false;\n \n         for word in words {\n \n@@ -86,7 +88,7 @@ impl<'a> CheckAttrVisitor<'a> {\n \n             let (message, label) = match &*name.as_str() {\n                 \"C\" => {\n-                    conflicting_reprs += 1;\n+                    is_c = true;\n                     if target != Target::Struct &&\n                             target != Target::Union &&\n                             target != Target::Enum {\n@@ -108,7 +110,7 @@ impl<'a> CheckAttrVisitor<'a> {\n                     }\n                 }\n                 \"simd\" => {\n-                    conflicting_reprs += 1;\n+                    is_simd = true;\n                     if target != Target::Struct {\n                         (\"attribute should be applied to struct\",\n                          \"a struct\")\n@@ -128,7 +130,7 @@ impl<'a> CheckAttrVisitor<'a> {\n                 \"i8\" | \"u8\" | \"i16\" | \"u16\" |\n                 \"i32\" | \"u32\" | \"i64\" | \"u64\" |\n                 \"isize\" | \"usize\" => {\n-                    conflicting_reprs += 1;\n+                    int_reprs += 1;\n                     if target != Target::Enum {\n                         (\"attribute should be applied to enum\",\n                          \"an enum\")\n@@ -142,7 +144,11 @@ impl<'a> CheckAttrVisitor<'a> {\n                 .span_label(item.span, format!(\"not {}\", label))\n                 .emit();\n         }\n-        if conflicting_reprs > 1 {\n+\n+        // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)\n+        if (int_reprs > 1)\n+           || (is_simd && is_c)\n+           || (int_reprs == 1 && is_c && is_c_like_enum(item)) {\n             span_warn!(self.sess, attr.span, E0566,\n                        \"conflicting representation hints\");\n         }\n@@ -162,3 +168,17 @@ impl<'a> Visitor<'a> for CheckAttrVisitor<'a> {\n pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     visit::walk_crate(&mut CheckAttrVisitor { sess: sess }, krate);\n }\n+\n+fn is_c_like_enum(item: &ast::Item) -> bool {\n+    if let ast::ItemKind::Enum(ref def, _) = item.node {\n+        for variant in &def.variants {\n+            match variant.node.data {\n+                ast::VariantData::Unit(_) => { /* continue */ }\n+                _ => { return false; }\n+            }\n+        }\n+        true\n+    } else {\n+        false\n+    }\n+}"}]}