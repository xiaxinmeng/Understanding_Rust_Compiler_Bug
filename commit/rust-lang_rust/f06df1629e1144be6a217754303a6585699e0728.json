{"sha": "f06df1629e1144be6a217754303a6585699e0728", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNmRmMTYyOWUxMTQ0YmU2YTIxNzc1NDMwM2E2NTg1Njk5ZTA3Mjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T17:05:40Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T17:00:01Z"}, "message": "ast: colocate AssocItem with ForeignItem", "tree": {"sha": "20b01eff42ed16cbd78d83e1a262a2ace180d90e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20b01eff42ed16cbd78d83e1a262a2ace180d90e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f06df1629e1144be6a217754303a6585699e0728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f06df1629e1144be6a217754303a6585699e0728", "html_url": "https://github.com/rust-lang/rust/commit/f06df1629e1144be6a217754303a6585699e0728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f06df1629e1144be6a217754303a6585699e0728/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fd15442f2f1c798718242eaa9817531a53c2134", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fd15442f2f1c798718242eaa9817531a53c2134", "html_url": "https://github.com/rust-lang/rust/commit/2fd15442f2f1c798718242eaa9817531a53c2134"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "2eab688fd9d46260095c0ae8173a5dec24539845", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 39, "deletions": 39, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f06df1629e1144be6a217754303a6585699e0728/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f06df1629e1144be6a217754303a6585699e0728/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f06df1629e1144be6a217754303a6585699e0728", "patch": "@@ -1605,45 +1605,6 @@ pub struct FnSig {\n     pub decl: P<FnDecl>,\n }\n \n-/// Represents associated items.\n-/// These include items in `impl` and `trait` definitions.\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct AssocItem {\n-    pub attrs: Vec<Attribute>,\n-    pub id: NodeId,\n-    pub span: Span,\n-    pub vis: Visibility,\n-    pub ident: Ident,\n-\n-    pub defaultness: Defaultness,\n-    pub kind: AssocItemKind,\n-    /// See `Item::tokens` for what this is.\n-    pub tokens: Option<TokenStream>,\n-}\n-\n-/// Represents various kinds of content within an `impl`.\n-///\n-/// The term \"provided\" in the variants below refers to the item having a default\n-/// definition / body. Meanwhile, a \"required\" item lacks a definition / body.\n-/// In an implementation, all items must be provided.\n-/// The `Option`s below denote the bodies, where `Some(_)`\n-/// means \"provided\" and conversely `None` means \"required\".\n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum AssocItemKind {\n-    /// An associated constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n-    /// If `def` is parsed, then the associated constant is provided, and otherwise required.\n-    Const(P<Ty>, Option<P<Expr>>),\n-\n-    /// An associated function.\n-    Fn(FnSig, Generics, Option<P<Block>>),\n-\n-    /// An associated type.\n-    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n-\n-    /// A macro expanding to an associated item.\n-    Macro(Mac),\n-}\n-\n #[derive(\n     Clone,\n     Copy,\n@@ -2664,3 +2625,42 @@ impl ForeignItemKind {\n         }\n     }\n }\n+\n+/// Represents associated items.\n+/// These include items in `impl` and `trait` definitions.\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct AssocItem {\n+    pub attrs: Vec<Attribute>,\n+    pub id: NodeId,\n+    pub span: Span,\n+    pub vis: Visibility,\n+    pub ident: Ident,\n+\n+    pub defaultness: Defaultness,\n+    pub kind: AssocItemKind,\n+    /// See `Item::tokens` for what this is.\n+    pub tokens: Option<TokenStream>,\n+}\n+\n+/// Represents various kinds of content within an `impl`.\n+///\n+/// The term \"provided\" in the variants below refers to the item having a default\n+/// definition / body. Meanwhile, a \"required\" item lacks a definition / body.\n+/// In an implementation, all items must be provided.\n+/// The `Option`s below denote the bodies, where `Some(_)`\n+/// means \"provided\" and conversely `None` means \"required\".\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub enum AssocItemKind {\n+    /// An associated constant, `const $ident: $ty $def?;` where `def ::= \"=\" $expr? ;`.\n+    /// If `def` is parsed, then the associated constant is provided, and otherwise required.\n+    Const(P<Ty>, Option<P<Expr>>),\n+\n+    /// An associated function.\n+    Fn(FnSig, Generics, Option<P<Block>>),\n+\n+    /// An associated type.\n+    TyAlias(Generics, GenericBounds, Option<P<Ty>>),\n+\n+    /// A macro expanding to an associated item.\n+    Macro(Mac),\n+}"}]}