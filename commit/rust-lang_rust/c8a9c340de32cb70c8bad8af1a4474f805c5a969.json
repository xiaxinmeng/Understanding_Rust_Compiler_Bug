{"sha": "c8a9c340de32cb70c8bad8af1a4474f805c5a969", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YTljMzQwZGUzMmNiNzBjOGJhZDhhZjFhNDQ3NGY4MDVjNWE5Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-16T06:22:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-16T06:22:52Z"}, "message": "Auto merge of #72962 - lcnr:ObligationCause-lrc, r=ecstatic-morse\n\nstore `ObligationCause` on the heap\n\nStores `ObligationCause` on the heap using an `Rc`.\n\nThis PR trades off some transient memory allocations to reduce the size of\u2013and thus the number of instructions required to memcpy\u2013a few widely used data structures in trait solving.", "tree": {"sha": "bf4dcf744636576c34c3ebb13d5908e42a3f93f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4dcf744636576c34c3ebb13d5908e42a3f93f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8a9c340de32cb70c8bad8af1a4474f805c5a969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a9c340de32cb70c8bad8af1a4474f805c5a969", "html_url": "https://github.com/rust-lang/rust/commit/c8a9c340de32cb70c8bad8af1a4474f805c5a969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8a9c340de32cb70c8bad8af1a4474f805c5a969/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f315c35a77e40bd11ce81fedc0556be0f410bbf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f315c35a77e40bd11ce81fedc0556be0f410bbf4", "html_url": "https://github.com/rust-lang/rust/commit/f315c35a77e40bd11ce81fedc0556be0f410bbf4"}, {"sha": "ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe", "html_url": "https://github.com/rust-lang/rust/commit/ea668d9c548d4490ae9e8ea9b4e8942bae02a8fe"}], "stats": {"total": 120, "additions": 82, "deletions": 38}, "files": [{"sha": "a15ac819be966b3a1c2ee2680919c12703ffb305", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -59,7 +59,7 @@ pub type TraitObligation<'tcx> = Obligation<'tcx, ty::PolyTraitPredicate<'tcx>>;\n \n // `PredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PredicateObligation<'_>, 88);\n+static_assert_size!(PredicateObligation<'_>, 48);\n \n pub type Obligations<'tcx, O> = Vec<Obligation<'tcx, O>>;\n pub type PredicateObligations<'tcx> = Vec<PredicateObligation<'tcx>>;"}, {"sha": "ee9846c64b67c1033608b52baf62e00cf11061e1", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -142,10 +142,12 @@ fn predicate_obligation<'tcx>(\n     predicate: ty::Predicate<'tcx>,\n     span: Option<Span>,\n ) -> PredicateObligation<'tcx> {\n-    let mut cause = ObligationCause::dummy();\n-    if let Some(span) = span {\n-        cause.span = span;\n-    }\n+    let cause = if let Some(span) = span {\n+        ObligationCause::dummy_with_span(span)\n+    } else {\n+        ObligationCause::dummy()\n+    };\n+\n     Obligation { cause, param_env: ty::ParamEnv::empty(), recursion_depth: 0, predicate }\n }\n "}, {"sha": "17ea84836bf0adda03fb96886e3a2f369b4900d8", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -20,7 +20,8 @@ use rustc_span::{Span, DUMMY_SP};\n use smallvec::SmallVec;\n \n use std::borrow::Cow;\n-use std::fmt::Debug;\n+use std::fmt;\n+use std::ops::Deref;\n use std::rc::Rc;\n \n pub use self::select::{EvaluationCache, EvaluationResult, OverflowError, SelectionCache};\n@@ -80,8 +81,39 @@ pub enum Reveal {\n }\n \n /// The reason why we incurred this obligation; used for error reporting.\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+///\n+/// As the happy path does not care about this struct, storing this on the heap\n+/// ends up increasing performance.\n+///\n+/// We do not want to intern this as there are a lot of obligation causes which\n+/// only live for a short period of time.\n+#[derive(Clone, PartialEq, Eq, Hash)]\n pub struct ObligationCause<'tcx> {\n+    /// `None` for `ObligationCause::dummy`, `Some` otherwise.\n+    data: Option<Rc<ObligationCauseData<'tcx>>>,\n+}\n+\n+const DUMMY_OBLIGATION_CAUSE_DATA: ObligationCauseData<'static> =\n+    ObligationCauseData { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: MiscObligation };\n+\n+// Correctly format `ObligationCause::dummy`.\n+impl<'tcx> fmt::Debug for ObligationCause<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ObligationCauseData::fmt(self, f)\n+    }\n+}\n+\n+impl Deref for ObligationCause<'tcx> {\n+    type Target = ObligationCauseData<'tcx>;\n+\n+    #[inline(always)]\n+    fn deref(&self) -> &Self::Target {\n+        self.data.as_deref().unwrap_or(&DUMMY_OBLIGATION_CAUSE_DATA)\n+    }\n+}\n+\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n+pub struct ObligationCauseData<'tcx> {\n     pub span: Span,\n \n     /// The ID of the fn body that triggered this obligation. This is\n@@ -102,15 +134,24 @@ impl<'tcx> ObligationCause<'tcx> {\n         body_id: hir::HirId,\n         code: ObligationCauseCode<'tcx>,\n     ) -> ObligationCause<'tcx> {\n-        ObligationCause { span, body_id, code }\n+        ObligationCause { data: Some(Rc::new(ObligationCauseData { span, body_id, code })) }\n     }\n \n     pub fn misc(span: Span, body_id: hir::HirId) -> ObligationCause<'tcx> {\n-        ObligationCause { span, body_id, code: MiscObligation }\n+        ObligationCause::new(span, body_id, MiscObligation)\n     }\n \n+    pub fn dummy_with_span(span: Span) -> ObligationCause<'tcx> {\n+        ObligationCause::new(span, hir::CRATE_HIR_ID, MiscObligation)\n+    }\n+\n+    #[inline(always)]\n     pub fn dummy() -> ObligationCause<'tcx> {\n-        ObligationCause { span: DUMMY_SP, body_id: hir::CRATE_HIR_ID, code: MiscObligation }\n+        ObligationCause { data: None }\n+    }\n+\n+    pub fn make_mut(&mut self) -> &mut ObligationCauseData<'tcx> {\n+        Rc::make_mut(self.data.get_or_insert_with(|| Rc::new(DUMMY_OBLIGATION_CAUSE_DATA)))\n     }\n \n     pub fn span(&self, tcx: TyCtxt<'tcx>) -> Span {"}, {"sha": "faaa576f17903d5187bebb574723b1956a57880a", "filename": "src/librustc_middle/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fstructural_impls.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -232,11 +232,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::DerivedObligationCause<'a> {\n impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCause<'a> {\n     type Lifted = traits::ObligationCause<'tcx>;\n     fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.code).map(|code| traits::ObligationCause {\n-            span: self.span,\n-            body_id: self.body_id,\n-            code,\n-        })\n+        tcx.lift(&self.code).map(|code| traits::ObligationCause::new(self.span, self.body_id, code))\n     }\n }\n "}, {"sha": "7cf4fdfcf3c5b05d16539023286f104e26a137fe", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -1250,7 +1250,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 |infcx| {\n                     let mut obligations = ObligationAccumulator::default();\n \n-                    let dummy_body_id = ObligationCause::dummy().body_id;\n+                    let dummy_body_id = hir::CRATE_HIR_ID;\n                     let (output_ty, opaque_type_map) =\n                         obligations.add(infcx.instantiate_opaque_types(\n                             anon_owner_def_id,"}, {"sha": "106753ed809a5944fe365b3513fb8e7eac9419a6", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -84,7 +84,7 @@ pub struct PendingPredicateObligation<'tcx> {\n \n // `PendingPredicateObligation` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(PendingPredicateObligation<'_>, 112);\n+static_assert_size!(PendingPredicateObligation<'_>, 72);\n \n impl<'a, 'tcx> FulfillmentContext<'tcx> {\n     /// Creates a new fulfillment context."}, {"sha": "61567aeb57cb0bfb4d2dda529a0ee5f4593f0f02", "filename": "src/librustc_trait_selection/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_trait_selection%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_trait_selection%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmisc.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -48,7 +48,7 @@ pub fn can_type_implement_copy(\n                     continue;\n                 }\n                 let span = tcx.def_span(field.did);\n-                let cause = ObligationCause { span, ..ObligationCause::dummy() };\n+                let cause = ObligationCause::dummy_with_span(span);\n                 let ctx = traits::FulfillmentContext::new();\n                 match traits::fully_normalize(&infcx, ctx, cause, param_env, &ty) {\n                     Ok(ty) => {"}, {"sha": "90a9b876d8ddf3b9fafecd9220156be29d545e22", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -205,7 +205,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n                 if let Some(impl_item_span) =\n                     items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n                 {\n-                    cause.span = impl_item_span;\n+                    cause.make_mut().span = impl_item_span;\n                 }\n             }\n         }\n@@ -222,7 +222,7 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n                         items.iter().find(|i| i.ident == trait_assoc_item.ident).map(fix_span)\n                     })\n                 {\n-                    cause.span = impl_item_span;\n+                    cause.make_mut().span = impl_item_span;\n                 }\n             }\n         }\n@@ -273,7 +273,8 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     parent_trait_ref,\n                     parent_code: Rc::new(obligation.cause.code.clone()),\n                 };\n-                cause.code = traits::ObligationCauseCode::DerivedObligation(derived_cause);\n+                cause.make_mut().code =\n+                    traits::ObligationCauseCode::DerivedObligation(derived_cause);\n             }\n             extend_cause_with_original_assoc_item_obligation(\n                 tcx,"}, {"sha": "b39cfcb377595a45d7611d53a448ac70d588bb4e", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -78,15 +78,16 @@ fn compare_predicate_entailment<'tcx>(\n     // `regionck_item` expects.\n     let impl_m_hir_id = tcx.hir().as_local_hir_id(impl_m.def_id.expect_local());\n \n-    let cause = ObligationCause {\n-        span: impl_m_span,\n-        body_id: impl_m_hir_id,\n-        code: ObligationCauseCode::CompareImplMethodObligation {\n+    // We sometimes modify the span further down.\n+    let mut cause = ObligationCause::new(\n+        impl_m_span,\n+        impl_m_hir_id,\n+        ObligationCauseCode::CompareImplMethodObligation {\n             item_name: impl_m.ident.name,\n             impl_item_def_id: impl_m.def_id,\n             trait_item_def_id: trait_m.def_id,\n         },\n-    };\n+    );\n \n     // This code is best explained by example. Consider a trait:\n     //\n@@ -280,7 +281,7 @@ fn compare_predicate_entailment<'tcx>(\n                 &infcx, param_env, &terr, &cause, impl_m, impl_sig, trait_m, trait_sig,\n             );\n \n-            let cause = ObligationCause { span: impl_err_span, ..cause };\n+            cause.make_mut().span = impl_err_span;\n \n             let mut diag = struct_span_err!(\n                 tcx.sess,\n@@ -965,8 +966,11 @@ crate fn compare_const_impl<'tcx>(\n         // Compute placeholder form of impl and trait const tys.\n         let impl_ty = tcx.type_of(impl_c.def_id);\n         let trait_ty = tcx.type_of(trait_c.def_id).subst(tcx, trait_to_impl_substs);\n-        let mut cause = ObligationCause::misc(impl_c_span, impl_c_hir_id);\n-        cause.code = ObligationCauseCode::CompareImplConstObligation;\n+        let mut cause = ObligationCause::new(\n+            impl_c_span,\n+            impl_c_hir_id,\n+            ObligationCauseCode::CompareImplConstObligation,\n+        );\n \n         // There is no \"body\" here, so just pass dummy id.\n         let impl_ty =\n@@ -992,7 +996,7 @@ crate fn compare_const_impl<'tcx>(\n \n             // Locate the Span containing just the type of the offending impl\n             match tcx.hir().expect_impl_item(impl_c_hir_id).kind {\n-                ImplItemKind::Const(ref ty, _) => cause.span = ty.span,\n+                ImplItemKind::Const(ref ty, _) => cause.make_mut().span = ty.span,\n                 _ => bug!(\"{:?} is not a impl const\", impl_c),\n             }\n \n@@ -1095,15 +1099,15 @@ fn compare_type_predicate_entailment(\n     // `ObligationCause` (and the `FnCtxt`). This is what\n     // `regionck_item` expects.\n     let impl_ty_hir_id = tcx.hir().as_local_hir_id(impl_ty.def_id.expect_local());\n-    let cause = ObligationCause {\n-        span: impl_ty_span,\n-        body_id: impl_ty_hir_id,\n-        code: ObligationCauseCode::CompareImplTypeObligation {\n+    let cause = ObligationCause::new(\n+        impl_ty_span,\n+        impl_ty_hir_id,\n+        ObligationCauseCode::CompareImplTypeObligation {\n             item_name: impl_ty.ident.name,\n             impl_item_def_id: impl_ty.def_id,\n             trait_item_def_id: trait_ty.def_id,\n         },\n-    };\n+    );\n \n     debug!(\"compare_type_predicate_entailment: trait_to_impl_substs={:?}\", trait_to_impl_substs);\n "}, {"sha": "c26acd7a47703828078b3c927d640473de3b8204", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8a9c340de32cb70c8bad8af1a4474f805c5a969/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c8a9c340de32cb70c8bad8af1a4474f805c5a969", "patch": "@@ -4218,7 +4218,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if let (Some(ref_in), None) = (referenced_in.pop(), referenced_in.pop()) {\n                     // We make sure that only *one* argument matches the obligation failure\n                     // and we assign the obligation's span to its expression's.\n-                    error.obligation.cause.span = args[ref_in].span;\n+                    error.obligation.cause.make_mut().span = args[ref_in].span;\n                     error.points_at_arg_span = true;\n                 }\n             }\n@@ -4261,7 +4261,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         let ty = AstConv::ast_ty_to_ty(self, hir_ty);\n                                         let ty = self.resolve_vars_if_possible(&ty);\n                                         if ty == predicate.skip_binder().self_ty() {\n-                                            error.obligation.cause.span = hir_ty.span;\n+                                            error.obligation.cause.make_mut().span = hir_ty.span;\n                                         }\n                                     }\n                                 }\n@@ -5689,7 +5689,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             // This makes the error point at the bound, but we want to point at the argument\n             if let Some(span) = spans.get(i) {\n-                obligation.cause.code = traits::BindingObligation(def_id, *span);\n+                obligation.cause.make_mut().code = traits::BindingObligation(def_id, *span);\n             }\n             self.register_predicate(obligation);\n         }"}]}