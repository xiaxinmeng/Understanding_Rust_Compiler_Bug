{"sha": "cb109a672d161ee305d21c98edb84ef50c6f997b", "node_id": "C_kwDOAAsO6NoAKGNiMTA5YTY3MmQxNjFlZTMwNWQyMWM5OGVkYjg0ZWY1MGM2Zjk5N2I", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-11-07T21:23:16Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2023-05-14T14:27:20Z"}, "message": "Shorten lifetime of panic temporaries in panic_fmt case", "tree": {"sha": "5148385ff4e4a1bb9f03487d6907143020e6c9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5148385ff4e4a1bb9f03487d6907143020e6c9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb109a672d161ee305d21c98edb84ef50c6f997b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmRg78gACgkQ+boUO5X/\nbYJHTw//bOo/Fr50yg7ccqEgBDZtODJ4lKw6vUzWkFIiYnhixd8cmaaWDLj4z08v\nl2wcP8sGUXhQNijU2WERtV33NRl/+f2Ps1zMh4f5o786aZ1EvCS2fnxM0sKw753C\ns83ly7Tji9Cn65hqxlEVtjsD59jOTduLeJ+HqfAcYTiHh0NAEtOq0pXNb4/4ck3F\niGGz0Q6QJ+E4SNjmcD61F85rqCnhBn3fhpWsBxGcLrwoxluMCqn0UjCCod//jEsO\nwthtTZ3gYluMVI1uq5JhzUfmL/A0iozXaYo4cZosFWYdt4VLbB2WvZpDdSW32o6O\n+THUmjVkmBmPhe0ocPMg3zIj0tVBHShPyEolcV/Lsrim9qLJZaaMQBJli+yljS09\nQIsMPHPrk+VIbeRbZP6pXKp4vBhjXe4jCYHfxzlJC8wKZfIW+stSQ+8odVomYL1j\nf5dPOl/ZlyY0G5YezvWVdIj+gvsTclruWQktSScbshOnD6vYvp6RUDQdSsN0/Sur\n/ufXH0lzGfuUecAbUAIdIZukkSg8Hcl/thEIF1+M+Ez4cTzbLkZppA+gDzWBv1aM\n9ueGPqQEwDvgzB4ia1Qg/SP8uXPAVu0L046z5InITkJbZ7aVvCcgDiZMT49J0EzO\nC4xz3p8LJC262vp6fZ3kli0x15+fuiU+F5DyUw0WlUmD7Eca59s=\n=T9M5\n-----END PGP SIGNATURE-----", "payload": "tree 5148385ff4e4a1bb9f03487d6907143020e6c9bc\nparent cbee2a1ec44dcc49a0a10b713d6b5dac66cd7ba6\nauthor David Tolnay <dtolnay@gmail.com> 1667856196 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1684074440 -0700\n\nShorten lifetime of panic temporaries in panic_fmt case\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb109a672d161ee305d21c98edb84ef50c6f997b", "html_url": "https://github.com/rust-lang/rust/commit/cb109a672d161ee305d21c98edb84ef50c6f997b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb109a672d161ee305d21c98edb84ef50c6f997b/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbee2a1ec44dcc49a0a10b713d6b5dac66cd7ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbee2a1ec44dcc49a0a10b713d6b5dac66cd7ba6", "html_url": "https://github.com/rust-lang/rust/commit/cbee2a1ec44dcc49a0a10b713d6b5dac66cd7ba6"}], "stats": {"total": 69, "additions": 24, "deletions": 45}, "files": [{"sha": "ebcce79b0f81ed2b5f82cd2498d3a9272c64838f", "filename": "library/core/src/panic.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb109a672d161ee305d21c98edb84ef50c6f997b/library%2Fcore%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb109a672d161ee305d21c98edb84ef50c6f997b/library%2Fcore%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic.rs?ref=cb109a672d161ee305d21c98edb84ef50c6f997b", "patch": "@@ -35,9 +35,11 @@ pub macro panic_2015 {\n     (\"{}\", $arg:expr $(,)?) => (\n         $crate::panicking::panic_display(&$arg)\n     ),\n-    ($fmt:expr, $($arg:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n-    ),\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::panicking::panic_fmt($crate::const_format_args!($fmt, $($arg)+));\n+    }),\n }\n \n #[doc(hidden)]\n@@ -53,9 +55,11 @@ pub macro panic_2021 {\n     (\"{}\", $arg:expr $(,)?) => (\n         $crate::panicking::panic_display(&$arg)\n     ),\n-    ($($t:tt)+) => (\n-        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+))\n-    ),\n+    ($($t:tt)+) => ({\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::panicking::panic_fmt($crate::const_format_args!($($t)+));\n+    }),\n }\n \n #[doc(hidden)]"}, {"sha": "a2ffd8b1e7eca3e3d55bdd94034c4ee1395ad7ea", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb109a672d161ee305d21c98edb84ef50c6f997b/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb109a672d161ee305d21c98edb84ef50c6f997b/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=cb109a672d161ee305d21c98edb84ef50c6f997b", "patch": "@@ -26,7 +26,9 @@ pub macro panic_2015 {\n         $crate::rt::panic_display(&$arg)\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n+        // Semicolon to prevent temporaries inside the formatting machinery from\n+        // being considered alive in the caller after the panic_fmt call.\n+        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+));\n     }),\n }\n "}, {"sha": "5b5b8b7c2d90b5928aafbb9417c5e1c3f9bbf898", "filename": "tests/ui/macros/panic-temporaries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb109a672d161ee305d21c98edb84ef50c6f997b/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb109a672d161ee305d21c98edb84ef50c6f997b/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries.rs?ref=cb109a672d161ee305d21c98edb84ef50c6f997b", "patch": "@@ -1,4 +1,4 @@\n-// check-fail\n+// check-pass\n // edition:2021\n \n #![allow(unreachable_code)]\n@@ -15,5 +15,5 @@ async fn g() {\n fn require_send(_: impl Send) {}\n \n fn main() {\n-    require_send(g()); //~ future cannot be sent between threads safely\n+    require_send(g());\n }"}, {"sha": "425409dda69384f222d3c1b6889f638eff796b98", "filename": "tests/ui/macros/panic-temporaries.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cbee2a1ec44dcc49a0a10b713d6b5dac66cd7ba6/tests%2Fui%2Fmacros%2Fpanic-temporaries.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbee2a1ec44dcc49a0a10b713d6b5dac66cd7ba6/tests%2Fui%2Fmacros%2Fpanic-temporaries.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fpanic-temporaries.stderr?ref=cbee2a1ec44dcc49a0a10b713d6b5dac66cd7ba6", "patch": "@@ -1,27 +0,0 @@\n-error: future cannot be sent between threads safely\n-  --> $DIR/panic-temporaries.rs:18:18\n-   |\n-LL |     require_send(g());\n-   |                  ^^^ future returned by `g` is not `Send`\n-   |\n-   = help: the trait `Sync` is not implemented for `core::fmt::Opaque`\n-note: future is not `Send` as this value is used across an await\n-  --> $DIR/panic-temporaries.rs:12:20\n-   |\n-LL |     f(todo!(\"...\")).await;\n-   |       ------------ ^^^^^^ await occurs here, with `$crate::format_args!($($arg)+)` maybe used later\n-   |       |\n-   |       has type `ArgumentV1<'_>` which is not `Send`\n-note: `$crate::format_args!($($arg)+)` is later dropped here\n-  --> $DIR/panic-temporaries.rs:12:26\n-   |\n-LL |     f(todo!(\"...\")).await;\n-   |                          ^\n-note: required by a bound in `require_send`\n-  --> $DIR/panic-temporaries.rs:15:25\n-   |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ^^^^ required by this bound in `require_send`\n-\n-error: aborting due to previous error\n-"}, {"sha": "b69b5bc3b53f26128d28fba0f4f5eb270a96e7b7", "filename": "tests/ui/macros/rfc-2011-nicer-assert-messages/non-consuming-methods-have-optimized-codegen.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cb109a672d161ee305d21c98edb84ef50c6f997b/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/cb109a672d161ee305d21c98edb84ef50c6f997b/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Frfc-2011-nicer-assert-messages%2Fnon-consuming-methods-have-optimized-codegen.stdout?ref=cb109a672d161ee305d21c98edb84ef50c6f997b", "patch": "@@ -26,7 +26,7 @@ fn arbitrary_consuming_method_for_demonstration_purposes() {\n \n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem as usize\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -42,7 +42,7 @@ fn addr_of() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: &elem\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -58,7 +58,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem == 1\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -71,7 +71,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem >= 1\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -84,7 +84,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem > 0\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -97,7 +97,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem < 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -110,7 +110,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem <= 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -123,7 +123,7 @@ fn binary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: elem != 3\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };\n@@ -139,7 +139,7 @@ fn unary() {\n                 (&::core::asserting::Wrapper(__local_bind0)).try_capture(&mut __capture0);\n                 {\n                     ::std::rt::panic_fmt(format_args!(\"Assertion failed: *elem\\nWith captures:\\n  elem = {0:?}\\n\",\n-                            __capture0))\n+                            __capture0));\n                 }\n             }\n     };"}]}