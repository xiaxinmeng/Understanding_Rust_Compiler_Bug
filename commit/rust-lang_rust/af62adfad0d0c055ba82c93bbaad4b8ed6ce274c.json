{"sha": "af62adfad0d0c055ba82c93bbaad4b8ed6ce274c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjJhZGZhZDBkMGMwNTViYTgyYzkzYmJhYWQ0YjhlZDZjZTI3NGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-14T13:21:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-14T13:21:21Z"}, "message": "auto merge of #9788 : geoffhill/rust/bare-fn-cast, r=pnkfelix\n\nBare functions are another example of a scalar but non-numeric\r\ntype (like char) that should be handled separately in casts.\r\nThis disallows expressions like `0 as extern \"Rust\" fn() -> int;`.\r\n\r\nIt might be advantageous to allow casts between bare functions\r\nand raw pointers in unsafe code in the future, to pass function\r\npointers between Rust and C.\r\n\r\nCloses #8728", "tree": {"sha": "9e6a17a25af87e0982fa457d3322db6480d52bce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6a17a25af87e0982fa457d3322db6480d52bce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c", "html_url": "https://github.com/rust-lang/rust/commit/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9cea4b3a082bc515bc237e0cdc1180b0abd14d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9cea4b3a082bc515bc237e0cdc1180b0abd14d2", "html_url": "https://github.com/rust-lang/rust/commit/f9cea4b3a082bc515bc237e0cdc1180b0abd14d2"}, {"sha": "e538c95e4d5c7df475772639e983770e6425da32", "url": "https://api.github.com/repos/rust-lang/rust/commits/e538c95e4d5c7df475772639e983770e6425da32", "html_url": "https://github.com/rust-lang/rust/commit/e538c95e4d5c7df475772639e983770e6425da32"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "bb92ececcbf6f0ee39954a06e73e89895675f2f7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=af62adfad0d0c055ba82c93bbaad4b8ed6ce274c", "patch": "@@ -2423,6 +2423,13 @@ pub fn type_is_char(ty: t) -> bool {\n     }\n }\n \n+pub fn type_is_bare_fn(ty: t) -> bool {\n+    match get(ty).sty {\n+        ty_bare_fn(*) => true,\n+        _ => false\n+    }\n+}\n+\n pub fn type_is_fp(ty: t) -> bool {\n     match get(ty).sty {\n       ty_infer(FloatVar(_)) | ty_float(_) => true,"}, {"sha": "f567a880db52757d1894b8b190f007d26358875a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=af62adfad0d0c055ba82c93bbaad4b8ed6ce274c", "patch": "@@ -3022,10 +3022,13 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n \n                     let t1 = structurally_resolved_type(fcx, e.span, t_1);\n                     let te = structurally_resolved_type(fcx, e.span, t_e);\n+                    let t_1_is_scalar = type_is_scalar(fcx, expr.span, t_1);\n                     let t_1_is_char = type_is_char(fcx, expr.span, t_1);\n+                    let t_1_is_bare_fn = type_is_bare_fn(fcx, expr.span, t_1);\n \n-                    // casts to scalars other than `char` are allowed\n-                    let t_1_is_trivial = type_is_scalar(fcx, expr.span, t_1) && !t_1_is_char;\n+                    // casts to scalars other than `char` and `bare fn` are trivial\n+                    let t_1_is_trivial = t_1_is_scalar &&\n+                        !t_1_is_char && !t_1_is_bare_fn;\n \n                     if type_is_c_like_enum(fcx, expr.span, t_e) && t_1_is_trivial {\n                         // casts from C-like enums are allowed\n@@ -3825,6 +3828,11 @@ pub fn type_is_char(fcx: @mut FnCtxt, sp: Span, typ: ty::t) -> bool {\n     return ty::type_is_char(typ_s);\n }\n \n+pub fn type_is_bare_fn(fcx: @mut FnCtxt, sp: Span, typ: ty::t) -> bool {\n+    let typ_s = structurally_resolved_type(fcx, sp, typ);\n+    return ty::type_is_bare_fn(typ_s);\n+}\n+\n pub fn type_is_unsafe_ptr(fcx: @mut FnCtxt, sp: Span, typ: ty::t) -> bool {\n     let typ_s = structurally_resolved_type(fcx, sp, typ);\n     return ty::type_is_unsafe_ptr(typ_s);"}, {"sha": "8d75c66cb827455754d744f24969faca6bbf76c2", "filename": "src/test/compile-fail/cast-to-bare-fn.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af62adfad0d0c055ba82c93bbaad4b8ed6ce274c/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-to-bare-fn.rs?ref=af62adfad0d0c055ba82c93bbaad4b8ed6ce274c", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo(_x: int) { }\n+\n+#[fixed_stack_segment]\n+fn main() {\n+    let v: u64 = 5;\n+    let x = foo as extern \"C\" fn() -> int;\n+    //~^ ERROR non-scalar cast\n+    let y = v as extern \"Rust\" fn(int) -> (int, int);\n+    //~^ ERROR non-scalar cast\n+    y(x());\n+}"}]}