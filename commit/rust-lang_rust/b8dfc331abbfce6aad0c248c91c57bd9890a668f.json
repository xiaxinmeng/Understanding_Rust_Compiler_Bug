{"sha": "b8dfc331abbfce6aad0c248c91c57bd9890a668f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZGZjMzMxYWJiZmNlNmFhZDBjMjQ4YzkxYzU3YmQ5ODkwYTY2OGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-18T12:04:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T12:04:49Z"}, "message": "Merge #5682\n\n5682: Add an option to disable diagnostics r=matklad a=popzxc\n\nAs far as I know, currently it's not possible to disable a selected type of diagnostics provided by `rust-analyzer`.\r\n\r\nThis causes an inconvenient situation with a false-positive warnings: you either have to disable all the diagnostics, or you have to ignore these warnings.\r\n\r\nThere are some open issues related to this problem, e.g.: https://github.com/rust-analyzer/rust-analyzer/issues/5412, https://github.com/rust-analyzer/rust-analyzer/issues/5502\r\n\r\nThis PR attempts to make it possible to selectively disable some diagnostics on per-project basis.\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "0c03882f96663e970c9d08637f677f6b037ddf6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c03882f96663e970c9d08637f677f6b037ddf6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8dfc331abbfce6aad0c248c91c57bd9890a668f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfO8PhCRBK7hj4Ov3rIwAAdHIIACGBobuj4q2RxOgtlVTrdXrx\n/yeTTm4s6PbMbccODhT+bJPEK8g62aOJPN9LnVhI+9WX9aANnJCG5cZfwhR+NQAR\nlQKSwYIfdwC3hear74eW655EJT4+NLa9glVsfRvxMivYczo1XfzgQvUP5NE1Mu+q\npjs8Q+cmslBBA3oOvKTm+/xoVZOMTJC8TUg3Z9K4Fvl86exeGww3xRRW77eTh3Td\nK+ETRwi+HJ72pA/StcHXJXqGARhJ6DOumZ6Yxc1yvzOfC/hGHtr5DUWEcRvt830V\n6M1ZM40Rwt1kZkuwup+ce0/NJ2wZuDOR3jr2Rn2M/On51iKkNho/0TbCWTm4CQ0=\n=mNQc\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c03882f96663e970c9d08637f677f6b037ddf6c\nparent 2252a65f238cac0ebf0c4c56d9b475fa0460d758\nparent 34847c8d96ddf98c40117ebacaecec38b9b758fc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597752289 +0000\ncommitter GitHub <noreply@github.com> 1597752289 +0000\n\nMerge #5682\n\n5682: Add an option to disable diagnostics r=matklad a=popzxc\n\nAs far as I know, currently it's not possible to disable a selected type of diagnostics provided by `rust-analyzer`.\r\n\r\nThis causes an inconvenient situation with a false-positive warnings: you either have to disable all the diagnostics, or you have to ignore these warnings.\r\n\r\nThere are some open issues related to this problem, e.g.: https://github.com/rust-analyzer/rust-analyzer/issues/5412, https://github.com/rust-analyzer/rust-analyzer/issues/5502\r\n\r\nThis PR attempts to make it possible to selectively disable some diagnostics on per-project basis.\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8dfc331abbfce6aad0c248c91c57bd9890a668f", "html_url": "https://github.com/rust-lang/rust/commit/b8dfc331abbfce6aad0c248c91c57bd9890a668f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8dfc331abbfce6aad0c248c91c57bd9890a668f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2252a65f238cac0ebf0c4c56d9b475fa0460d758", "url": "https://api.github.com/repos/rust-lang/rust/commits/2252a65f238cac0ebf0c4c56d9b475fa0460d758", "html_url": "https://github.com/rust-lang/rust/commit/2252a65f238cac0ebf0c4c56d9b475fa0460d758"}, {"sha": "34847c8d96ddf98c40117ebacaecec38b9b758fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/34847c8d96ddf98c40117ebacaecec38b9b758fc", "html_url": "https://github.com/rust-lang/rust/commit/34847c8d96ddf98c40117ebacaecec38b9b758fc"}], "stats": {"total": 170, "additions": 155, "deletions": 15}, "files": [{"sha": "c7723de0067a0d86baaea4a019a3f6def98717e1", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -15,6 +15,9 @@ pub struct UnresolvedModule {\n }\n \n impl Diagnostic for UnresolvedModule {\n+    fn name(&self) -> &'static str {\n+        \"unresolved-module\"\n+    }\n     fn message(&self) -> String {\n         \"unresolved module\".to_string()\n     }"}, {"sha": "6c81b2501a5ba52afdc29b940fd058a134b8bbe9", "filename": "crates/hir_expand/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdiagnostics.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -21,6 +21,7 @@ use syntax::SyntaxNodePtr;\n use crate::InFile;\n \n pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n+    fn name(&self) -> &'static str;\n     fn message(&self) -> String;\n     /// Used in highlighting and related purposes\n     fn display_source(&self) -> InFile<SyntaxNodePtr>;"}, {"sha": "38fa24ee0a264a08677f5784aeda8d2bc0c12643", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -32,6 +32,10 @@ pub struct NoSuchField {\n }\n \n impl Diagnostic for NoSuchField {\n+    fn name(&self) -> &'static str {\n+        \"no-such-field\"\n+    }\n+\n     fn message(&self) -> String {\n         \"no such field\".to_string()\n     }\n@@ -54,6 +58,9 @@ pub struct MissingFields {\n }\n \n impl Diagnostic for MissingFields {\n+    fn name(&self) -> &'static str {\n+        \"missing-structure-fields\"\n+    }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n         for field in &self.missed_fields {\n@@ -87,6 +94,9 @@ pub struct MissingPatFields {\n }\n \n impl Diagnostic for MissingPatFields {\n+    fn name(&self) -> &'static str {\n+        \"missing-pat-fields\"\n+    }\n     fn message(&self) -> String {\n         let mut buf = String::from(\"Missing structure fields:\\n\");\n         for field in &self.missed_fields {\n@@ -117,6 +127,9 @@ pub struct MissingMatchArms {\n }\n \n impl Diagnostic for MissingMatchArms {\n+    fn name(&self) -> &'static str {\n+        \"missing-match-arm\"\n+    }\n     fn message(&self) -> String {\n         String::from(\"Missing match arm\")\n     }\n@@ -135,6 +148,9 @@ pub struct MissingOkInTailExpr {\n }\n \n impl Diagnostic for MissingOkInTailExpr {\n+    fn name(&self) -> &'static str {\n+        \"missing-ok-in-tail-expr\"\n+    }\n     fn message(&self) -> String {\n         \"wrap return expression in Ok\".to_string()\n     }\n@@ -153,6 +169,9 @@ pub struct BreakOutsideOfLoop {\n }\n \n impl Diagnostic for BreakOutsideOfLoop {\n+    fn name(&self) -> &'static str {\n+        \"break-outside-of-loop\"\n+    }\n     fn message(&self) -> String {\n         \"break outside of loop\".to_string()\n     }\n@@ -171,6 +190,9 @@ pub struct MissingUnsafe {\n }\n \n impl Diagnostic for MissingUnsafe {\n+    fn name(&self) -> &'static str {\n+        \"missing-unsafe\"\n+    }\n     fn message(&self) -> String {\n         format!(\"This operation is unsafe and requires an unsafe function or block\")\n     }\n@@ -191,6 +213,9 @@ pub struct MismatchedArgCount {\n }\n \n impl Diagnostic for MismatchedArgCount {\n+    fn name(&self) -> &'static str {\n+        \"mismatched-arg-count\"\n+    }\n     fn message(&self) -> String {\n         let s = if self.expected == 1 { \"\" } else { \"s\" };\n         format!(\"Expected {} argument{}, found {}\", self.expected, s, self.found)"}, {"sha": "606a6064b42f796f3a68632d09eeb5e1c34ec896", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 75, "deletions": 7, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -4,7 +4,7 @@\n //! macro-expanded files, but we need to present them to the users in terms of\n //! original files. So we need to map the ranges.\n \n-use std::cell::RefCell;\n+use std::{cell::RefCell, collections::HashSet};\n \n use base_db::SourceDatabase;\n use hir::{diagnostics::DiagnosticSinkBuilder, Semantics};\n@@ -31,6 +31,7 @@ pub(crate) fn diagnostics(\n     db: &RootDatabase,\n     file_id: FileId,\n     enable_experimental: bool,\n+    disabled_diagnostics: Option<HashSet<String>>,\n ) -> Vec<Diagnostic> {\n     let _p = profile::span(\"diagnostics\");\n     let sema = Semantics::new(db);\n@@ -39,6 +40,7 @@ pub(crate) fn diagnostics(\n \n     // [#34344] Only take first 128 errors to prevent slowing down editor/ide, the number 128 is chosen arbitrarily.\n     res.extend(parse.errors().iter().take(128).map(|err| Diagnostic {\n+        name: None,\n         range: err.range(),\n         message: format!(\"Syntax Error: {}\", err),\n         severity: Severity::Error,\n@@ -50,7 +52,7 @@ pub(crate) fn diagnostics(\n         check_struct_shorthand_initialization(&mut res, file_id, &node);\n     }\n     let res = RefCell::new(res);\n-    let mut sink = DiagnosticSinkBuilder::new()\n+    let mut sink_builder = DiagnosticSinkBuilder::new()\n         .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n@@ -64,10 +66,19 @@ pub(crate) fn diagnostics(\n             res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n         })\n         // Only collect experimental diagnostics when they're enabled.\n-        .filter(|diag| !diag.is_experimental() || enable_experimental)\n+        .filter(|diag| !diag.is_experimental() || enable_experimental);\n+\n+    if let Some(disabled_diagnostics) = disabled_diagnostics {\n+        // Do not collect disabled diagnostics.\n+        sink_builder = sink_builder.filter(move |diag| !disabled_diagnostics.contains(diag.name()));\n+    }\n+\n+    // Finalize the `DiagnosticSink` building process.\n+    let mut sink = sink_builder\n         // Diagnostics not handled above get no fix and default treatment.\n         .build(|d| {\n             res.borrow_mut().push(Diagnostic {\n+                name: Some(d.name().into()),\n                 message: d.message(),\n                 range: sema.diagnostics_display_range(d).range,\n                 severity: Severity::Error,\n@@ -84,6 +95,7 @@ pub(crate) fn diagnostics(\n \n fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n     Diagnostic {\n+        name: Some(d.name().into()),\n         range: sema.diagnostics_display_range(d).range,\n         message: d.message(),\n         severity: Severity::Error,\n@@ -110,6 +122,7 @@ fn check_unnecessary_braces_in_use_statement(\n                 });\n \n         acc.push(Diagnostic {\n+            name: None,\n             range: use_range,\n             message: \"Unnecessary braces in use statement\".to_string(),\n             severity: Severity::WeakWarning,\n@@ -156,6 +169,7 @@ fn check_struct_shorthand_initialization(\n \n                 let field_range = record_field.syntax().text_range();\n                 acc.push(Diagnostic {\n+                    name: None,\n                     range: field_range,\n                     message: \"Shorthand struct initialization\".to_string(),\n                     severity: Severity::WeakWarning,\n@@ -173,6 +187,7 @@ fn check_struct_shorthand_initialization(\n \n #[cfg(test)]\n mod tests {\n+    use std::collections::HashSet;\n     use stdx::trim_indent;\n     use test_utils::assert_eq_text;\n \n@@ -188,7 +203,8 @@ mod tests {\n         let after = trim_indent(ra_fixture_after);\n \n         let (analysis, file_position) = analysis_and_position(ra_fixture_before);\n-        let diagnostic = analysis.diagnostics(file_position.file_id, true).unwrap().pop().unwrap();\n+        let diagnostic =\n+            analysis.diagnostics(file_position.file_id, true, None).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap().edit;\n         let target_file_contents = analysis.file_text(file_position.file_id).unwrap();\n@@ -214,7 +230,7 @@ mod tests {\n         let ra_fixture_after = &trim_indent(ra_fixture_after);\n         let (analysis, file_pos) = analysis_and_position(ra_fixture_before);\n         let current_file_id = file_pos.file_id;\n-        let diagnostic = analysis.diagnostics(current_file_id, true).unwrap().pop().unwrap();\n+        let diagnostic = analysis.diagnostics(current_file_id, true, None).unwrap().pop().unwrap();\n         let mut fix = diagnostic.fix.unwrap();\n         let edit = fix.source_change.source_file_edits.pop().unwrap();\n         let changed_file_id = edit.file_id;\n@@ -235,14 +251,58 @@ mod tests {\n         let analysis = mock.analysis();\n         let diagnostics = files\n             .into_iter()\n-            .flat_map(|file_id| analysis.diagnostics(file_id, true).unwrap())\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true, None).unwrap())\n             .collect::<Vec<_>>();\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n \n+    /// Takes a multi-file input fixture with annotated cursor position and the list of disabled diagnostics,\n+    /// and checks that provided diagnostics aren't spawned during analysis.\n+    fn check_disabled_diagnostics(ra_fixture: &str, disabled_diagnostics: &[&'static str]) {\n+        let disabled_diagnostics: HashSet<_> =\n+            disabled_diagnostics.into_iter().map(|diag| diag.to_string()).collect();\n+\n+        let mock = MockAnalysis::with_files(ra_fixture);\n+        let files = mock.files().map(|(it, _)| it).collect::<Vec<_>>();\n+        let analysis = mock.analysis();\n+\n+        let diagnostics = files\n+            .clone()\n+            .into_iter()\n+            .flat_map(|file_id| {\n+                analysis.diagnostics(file_id, true, Some(disabled_diagnostics.clone())).unwrap()\n+            })\n+            .collect::<Vec<_>>();\n+\n+        // First, we have to check that diagnostic is not emitted when it's added to the disabled diagnostics list.\n+        for diagnostic in diagnostics {\n+            if let Some(name) = diagnostic.name {\n+                assert!(!disabled_diagnostics.contains(&name), \"Diagnostic {} is disabled\", name);\n+            }\n+        }\n+\n+        // Then, we must reset the config and repeat the check, so that we'll be sure that without\n+        // config these diagnostics are emitted.\n+        // This is required for tests to not become outdated if e.g. diagnostics name changes:\n+        // without this additional run the test will pass simply because a diagnostic with an old name\n+        // will no longer exist.\n+        let diagnostics = files\n+            .into_iter()\n+            .flat_map(|file_id| analysis.diagnostics(file_id, true, None).unwrap())\n+            .collect::<Vec<_>>();\n+\n+        assert!(\n+            diagnostics\n+                .into_iter()\n+                .filter_map(|diag| diag.name)\n+                .any(|name| disabled_diagnostics.contains(&name)),\n+            \"At least one of the diagnostics was not emitted even without config; are the diagnostics names correct?\"\n+        );\n+    }\n+\n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = single_file(ra_fixture);\n-        let diagnostics = analysis.diagnostics(file_id, true).unwrap();\n+        let diagnostics = analysis.diagnostics(file_id, true, None).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n \n@@ -502,6 +562,9 @@ fn test_fn() {\n             expect![[r#\"\n                 [\n                     Diagnostic {\n+                        name: Some(\n+                            \"unresolved-module\",\n+                        ),\n                         message: \"unresolved module\",\n                         range: 0..8,\n                         severity: Error,\n@@ -675,4 +738,9 @@ struct Foo {\n             \",\n         )\n     }\n+\n+    #[test]\n+    fn test_disabled_diagnostics() {\n+        check_disabled_diagnostics(r#\"mod foo;\"#, &[\"unresolved-module\"]);\n+    }\n }"}, {"sha": "4b797f374c0e4ac504e651daccd8fe1f2120ee27", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -44,7 +44,7 @@ mod syntax_highlighting;\n mod syntax_tree;\n mod typing;\n \n-use std::sync::Arc;\n+use std::{collections::HashSet, sync::Arc};\n \n use base_db::{\n     salsa::{self, ParallelDatabase},\n@@ -101,6 +101,7 @@ pub type Cancelable<T> = Result<T, Canceled>;\n \n #[derive(Debug)]\n pub struct Diagnostic {\n+    pub name: Option<String>,\n     pub message: String,\n     pub range: TextRange,\n     pub severity: Severity,\n@@ -147,7 +148,7 @@ pub struct AnalysisHost {\n }\n \n impl AnalysisHost {\n-    pub fn new(lru_capacity: Option<usize>) -> AnalysisHost {\n+    pub fn new(lru_capacity: Option<usize>) -> Self {\n         AnalysisHost { db: RootDatabase::new(lru_capacity) }\n     }\n \n@@ -496,8 +497,11 @@ impl Analysis {\n         &self,\n         file_id: FileId,\n         enable_experimental: bool,\n+        disabled_diagnostics: Option<HashSet<String>>,\n     ) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| diagnostics::diagnostics(db, file_id, enable_experimental))\n+        self.with_db(|db| {\n+            diagnostics::diagnostics(db, file_id, enable_experimental, disabled_diagnostics)\n+        })\n     }\n \n     /// Returns the edit required to rename reference at the position to the new"}, {"sha": "43f0196afc6ba76cc9ae66640c9c4525c7f00498", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -71,7 +71,7 @@ impl BenchCmd {\n         match &self.what {\n             BenchWhat::Highlight { .. } => {\n                 let res = do_work(&mut host, file_id, |analysis| {\n-                    analysis.diagnostics(file_id, true).unwrap();\n+                    analysis.diagnostics(file_id, true, None).unwrap();\n                     analysis.highlight_as_html(file_id, false).unwrap()\n                 });\n                 if verbosity.is_verbose() {"}, {"sha": "31eb7ff3f889b6415f7e7f5a3467ed634168d03e", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -47,7 +47,7 @@ pub fn diagnostics(\n                 String::from(\"unknown\")\n             };\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n-            for diagnostic in analysis.diagnostics(file_id, true).unwrap() {\n+            for diagnostic in analysis.diagnostics(file_id, true, None).unwrap() {\n                 if matches!(diagnostic.severity, Severity::Error) {\n                     found_error = true;\n                 }"}, {"sha": "44fd7c286fdee443481ddc605e70ef98f36dfe63", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -7,7 +7,7 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n-use std::{ffi::OsString, path::PathBuf};\n+use std::{collections::HashSet, ffi::OsString, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use ide::{AssistConfig, CompletionConfig, HoverConfig, InlayHintsConfig};\n@@ -45,6 +45,14 @@ pub struct Config {\n     pub with_sysroot: bool,\n     pub linked_projects: Vec<LinkedProject>,\n     pub root_path: AbsPathBuf,\n+\n+    pub analysis: AnalysisConfig,\n+}\n+\n+/// Configuration parameters for the analysis run.\n+#[derive(Debug, Default, Clone)]\n+pub struct AnalysisConfig {\n+    pub disabled_diagnostics: HashSet<String>,\n }\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -176,6 +184,8 @@ impl Config {\n             hover: HoverConfig::default(),\n             linked_projects: Vec::new(),\n             root_path,\n+\n+            analysis: AnalysisConfig::default(),\n         }\n     }\n \n@@ -293,6 +303,8 @@ impl Config {\n             goto_type_def: data.hoverActions_enable && data.hoverActions_gotoTypeDef,\n         };\n \n+        self.analysis = AnalysisConfig { disabled_diagnostics: data.analysis_disabledDiagnostics };\n+\n         log::info!(\"Config::update() = {:#?}\", self);\n     }\n \n@@ -357,6 +369,14 @@ impl Config {\n             self.client_caps.status_notification = get_bool(\"statusNotification\");\n         }\n     }\n+\n+    pub fn disabled_diagnostics(&self) -> Option<HashSet<String>> {\n+        if self.analysis.disabled_diagnostics.is_empty() {\n+            None\n+        } else {\n+            Some(self.analysis.disabled_diagnostics.clone())\n+        }\n+    }\n }\n \n #[derive(Deserialize)]\n@@ -444,5 +464,7 @@ config_data! {\n         rustfmt_overrideCommand: Option<Vec<String>> = None,\n \n         withSysroot: bool = true,\n+\n+        analysis_disabledDiagnostics: HashSet<String> = HashSet::new(),\n     }\n }"}, {"sha": "4f77b1b4d26d970b3609ab979527a5e50cc87515", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -775,7 +775,11 @@ fn handle_fixes(\n         None => {}\n     };\n \n-    let diagnostics = snap.analysis.diagnostics(file_id, snap.config.experimental_diagnostics)?;\n+    let diagnostics = snap.analysis.diagnostics(\n+        file_id,\n+        snap.config.experimental_diagnostics,\n+        snap.config.disabled_diagnostics(),\n+    )?;\n \n     for fix in diagnostics\n         .into_iter()\n@@ -1049,7 +1053,11 @@ pub(crate) fn publish_diagnostics(\n     let line_index = snap.analysis.file_line_index(file_id)?;\n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n-        .diagnostics(file_id, snap.config.experimental_diagnostics)?\n+        .diagnostics(\n+            file_id,\n+            snap.config.experimental_diagnostics,\n+            snap.config.disabled_diagnostics(),\n+        )?\n         .into_iter()\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),"}, {"sha": "429ff5def414699c97934002761015717ab9160f", "filename": "editors/code/package.json", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8dfc331abbfce6aad0c248c91c57bd9890a668f/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b8dfc331abbfce6aad0c248c91c57bd9890a668f/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b8dfc331abbfce6aad0c248c91c57bd9890a668f", "patch": "@@ -609,6 +609,15 @@\n                     },\n                     \"description\": \"List of warnings that should be displayed with hint severity.\\nThe warnings will be indicated by faded text or three dots in code and will not show up in the problems panel.\",\n                     \"default\": []\n+                },\n+                \"rust-analyzer.analysis.disabledDiagnostics\": {\n+                    \"type\": \"array\",\n+                    \"uniqueItems\": true,\n+                    \"items\": {\n+                        \"type\": \"string\"\n+                    },\n+                    \"description\": \"List of rust-analyzer diagnostics to disable\",\n+                    \"default\": []\n                 }\n             }\n         },"}]}