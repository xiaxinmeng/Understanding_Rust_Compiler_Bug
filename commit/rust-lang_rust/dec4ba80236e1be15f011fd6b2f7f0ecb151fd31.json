{"sha": "dec4ba80236e1be15f011fd6b2f7f0ecb151fd31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzRiYTgwMjM2ZTFiZTE1ZjAxMWZkNmIyZjdmMGVjYjE1MWZkMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-24T15:01:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-24T15:01:40Z"}, "message": "Document some rust-analyzer specific protocol extensions", "tree": {"sha": "f218a60dfaa5acb9c2daac08114420531e413739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f218a60dfaa5acb9c2daac08114420531e413739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31", "html_url": "https://github.com/rust-lang/rust/commit/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "934227361623b258d833be20e464e1509cb432ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/934227361623b258d833be20e464e1509cb432ad", "html_url": "https://github.com/rust-lang/rust/commit/934227361623b258d833be20e464e1509cb432ad"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "c7e31c076300ca39cf296888387330ebc87afda8", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=dec4ba80236e1be15f011fd6b2f7f0ecb151fd31", "patch": "@@ -38,13 +38,6 @@ pub struct SyntaxTreeParams {\n     pub range: Option<Range>,\n }\n \n-#[derive(Deserialize, Serialize, Debug)]\n-#[serde(rename_all = \"camelCase\")]\n-pub struct ExpandedMacro {\n-    pub name: String,\n-    pub expansion: String,\n-}\n-\n pub enum ExpandMacro {}\n \n impl Request for ExpandMacro {\n@@ -60,6 +53,14 @@ pub struct ExpandMacroParams {\n     pub position: Option<Position>,\n }\n \n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct ExpandedMacro {\n+    pub name: String,\n+    pub expansion: String,\n+}\n+\n+\n pub enum MatchingBrace {}\n \n impl Request for MatchingBrace {"}, {"sha": "55035cfae183a38adb70cac262bbd8078be5d9dc", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/dec4ba80236e1be15f011fd6b2f7f0ecb151fd31/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=dec4ba80236e1be15f011fd6b2f7f0ecb151fd31", "patch": "@@ -217,3 +217,65 @@ Moreover, it would be cool if editors didn't need to implement even basic langua\n * Should we return a a nested brace structure, to allow paredit-like actions of jump *out* of the current brace pair?\n   This is how `SelectionRange` request works.\n * Alternatively, should we perhaps flag certain `SelectionRange`s as being brace pairs?\n+\n+## Analyzer Status\n+\n+**Method:** `rust-analyzer/analyzerStatus`\n+\n+**Request:** `null`\n+\n+**Response:** `string`\n+\n+Returns internal status message, mostly for debugging purposes.\n+\n+## Collect Garbage\n+\n+**Method:** `rust-analyzer/collectGarbage`\n+\n+**Request:** `null`\n+\n+**Response:** `null`\n+\n+Frees some caches. For internal use, and is mostly broken at the moment.\n+\n+## Syntax Tree\n+\n+**Method:** `rust-analyzer/syntaxTree`\n+\n+**Request:**\n+\n+```typescript\n+interface SyntaxTeeParams {\n+    textDocument: TextDocumentIdentifier,\n+    range?: Range,\n+}\n+```\n+\n+**Response:** `string`\n+\n+Returns textual representation of a parse tree for the file/selected region.\n+Primarily for debugging, but very useful for all people working on rust-analyzer itself.\n+\n+## Expand Macro\n+\n+**Method:** `rust-analyzer/expandMacro`\n+\n+**Request:**\n+\n+```typescript\n+interface ExpandMacroParams {\n+    textDocument: TextDocumentIdentifier,\n+    position?: Position,\n+}\n+```\n+\n+**Response:**\n+\n+```typescript\n+interface ExpandedMacro {\n+    name: string,\n+    expansion: string,\n+}\n+```\n+\n+Expands macro call at a given position."}]}