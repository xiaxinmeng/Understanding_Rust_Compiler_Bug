{"sha": "27d4737ef9f54613e01594b49217378ac05cca42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZDQ3MzdlZjlmNTQ2MTNlMDE1OTRiNDkyMTczNzhhYzA1Y2NhNDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-19T06:55:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T06:55:55Z"}, "message": "Rollup merge of #70740 - haraldh:static-pie, r=petrochenkov\n\nEnabling static-pie for musl\n\nand make it the default for the x86_64-unknown-linux-musl target\n\nThis is a quick implementation for https://github.com/rust-lang/rust/issues/70693\n\nOpening it as a draft PR to gather some feedback, before I put more work in it.\n\n```console\n\u276f cat hello.rs\nfn main() {\n    println!(\"main = {:#x}\", &main as *const _ as usize);\n}\n\n\u276f  /tmp/rust-musl/bin/rustc  --target x86_64-unknown-linux-musl  ~/hello.rs\n\n\u276f ldd hello\n\tstatically linked\n\n\u276f file hello\nhello: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=fec5cdc170f503a712a63a6958691ce5ce433654, with debug_info, not stripped\n\n\u276f ./hello\nmain = 0x7f233ca30008\n\n\u276f ./hello\nmain = 0x7f9ddc529008\n\n\u276f ./hello\nmain = 0x7f1e5a224008\n\n\u276f ./hello\nmain = 0x7f4485c7c008\n\n\u276f /tmp/rust-musl/bin/rustc  --target x86_64-unknown-linux-musl  -Z print-link-args  ~/hello.rs\n\"cc\" \"-Wl,--as-needed\" \"-Wl,-z,noexecstack\" \"-Wl,--eh-frame-hdr\" \"-m64\" \"-nostdlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/rcrt1.o\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/crti.o\" \"-L\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib\" \"hello.hello.7rcbfp3g-cgu.0.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.1.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.2.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.3.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.4.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.5.rcgu.o\" \"-o\" \"hello\" \"hello.1nxjf9so94czdgcz.rcgu.o\" \"-Wl,--gc-sections\" \"-static-pie\" \"-Wl,-zrelro\" \"-Wl,-znow\" \"-nodefaultlibs\" \"-L\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib\" \"-Wl,--start-group\" \"-Wl,-Bstatic\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libstd-0f9cb7646f9e2c34.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libpanic_unwind-ba857f2f2e4e7187.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libhashbrown-58ba5e25bbdf9d29.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/librustc_std_workspace_alloc-886bfe43afa847dc.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libbacktrace-fbfb8fe99f19a67b.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libbacktrace_sys-85fa859e7d364cc9.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/librustc_demangle-07ab026cd3ec0d82.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libunwind-a8ec5932d92ea864.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libcfg_if-0ba4cc2f38a198d5.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/liblibc-c1bb2b3ce4f78b7c.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/liballoc-0ff673c1cf0d451a.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/librustc_std_workspace_core-c8ff2001db856926.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libcore-2ae14177140eeca2.rlib\" \"-Wl,--end-group\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libcompiler_builtins-4fd81b5ce1b08a9c.rlib\" \"-static\" \"-Wl,-Bdynamic\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/crtn.o\"\n```\n\nCloses https://github.com/rust-lang/rust/issues/70693\nCloses https://github.com/rust-lang/rust/issues/53968", "tree": {"sha": "d87dcee9b0953267787f2cfadd20c2f1b5810321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87dcee9b0953267787f2cfadd20c2f1b5810321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27d4737ef9f54613e01594b49217378ac05cca42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7GF7CRBK7hj4Ov3rIwAAdHIIAG7q0WyjuWqT5p0jCixOsdgZ\nExF+VT5DOA4anVKb/6/6X+U4l2P2x1ZcCksyGXyzGlJCq8uPlInwb3pA7yROvWa0\nGmp8vSfydmd+rmwz9z6ZuU3d7EOpfSBM2NmwN66V+s6XOknTsIaJTH0Ehe4RNk+G\nvfvw33OZhX0OISTwGW498gJAkJJ/5kmosEGo8n3aWDgI3q2gpUROZZxW/n0vzmW6\njW9TktE71qi4kMOzBWUbk6JkenKGwQNQHgmCINcqRjY4eVW0rRkg5WI4vA1YVQ7T\nK3eCGwZXcVa+kEennR0fcHPbTtrDwHjdq8jZrNb5X4zj0stsuTIx+UJZ1aq92Ug=\n=bBc2\n-----END PGP SIGNATURE-----\n", "payload": "tree d87dcee9b0953267787f2cfadd20c2f1b5810321\nparent a39c7787ba246353178e099373b9240be0d9e603\nparent d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3\nauthor Ralf Jung <post@ralfj.de> 1592549755 +0200\ncommitter GitHub <noreply@github.com> 1592549755 +0200\n\nRollup merge of #70740 - haraldh:static-pie, r=petrochenkov\n\nEnabling static-pie for musl\n\nand make it the default for the x86_64-unknown-linux-musl target\n\nThis is a quick implementation for https://github.com/rust-lang/rust/issues/70693\n\nOpening it as a draft PR to gather some feedback, before I put more work in it.\n\n```console\n\u276f cat hello.rs\nfn main() {\n    println!(\"main = {:#x}\", &main as *const _ as usize);\n}\n\n\u276f  /tmp/rust-musl/bin/rustc  --target x86_64-unknown-linux-musl  ~/hello.rs\n\n\u276f ldd hello\n\tstatically linked\n\n\u276f file hello\nhello: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=fec5cdc170f503a712a63a6958691ce5ce433654, with debug_info, not stripped\n\n\u276f ./hello\nmain = 0x7f233ca30008\n\n\u276f ./hello\nmain = 0x7f9ddc529008\n\n\u276f ./hello\nmain = 0x7f1e5a224008\n\n\u276f ./hello\nmain = 0x7f4485c7c008\n\n\u276f /tmp/rust-musl/bin/rustc  --target x86_64-unknown-linux-musl  -Z print-link-args  ~/hello.rs\n\"cc\" \"-Wl,--as-needed\" \"-Wl,-z,noexecstack\" \"-Wl,--eh-frame-hdr\" \"-m64\" \"-nostdlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/rcrt1.o\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/crti.o\" \"-L\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib\" \"hello.hello.7rcbfp3g-cgu.0.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.1.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.2.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.3.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.4.rcgu.o\" \"hello.hello.7rcbfp3g-cgu.5.rcgu.o\" \"-o\" \"hello\" \"hello.1nxjf9so94czdgcz.rcgu.o\" \"-Wl,--gc-sections\" \"-static-pie\" \"-Wl,-zrelro\" \"-Wl,-znow\" \"-nodefaultlibs\" \"-L\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib\" \"-Wl,--start-group\" \"-Wl,-Bstatic\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libstd-0f9cb7646f9e2c34.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libpanic_unwind-ba857f2f2e4e7187.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libhashbrown-58ba5e25bbdf9d29.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/librustc_std_workspace_alloc-886bfe43afa847dc.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libbacktrace-fbfb8fe99f19a67b.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libbacktrace_sys-85fa859e7d364cc9.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/librustc_demangle-07ab026cd3ec0d82.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libunwind-a8ec5932d92ea864.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libcfg_if-0ba4cc2f38a198d5.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/liblibc-c1bb2b3ce4f78b7c.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/liballoc-0ff673c1cf0d451a.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/librustc_std_workspace_core-c8ff2001db856926.rlib\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libcore-2ae14177140eeca2.rlib\" \"-Wl,--end-group\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/libcompiler_builtins-4fd81b5ce1b08a9c.rlib\" \"-static\" \"-Wl,-Bdynamic\" \"/tmp/rust-musl/lib/rustlib/x86_64-unknown-linux-musl/lib/crtn.o\"\n```\n\nCloses https://github.com/rust-lang/rust/issues/70693\nCloses https://github.com/rust-lang/rust/issues/53968\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27d4737ef9f54613e01594b49217378ac05cca42", "html_url": "https://github.com/rust-lang/rust/commit/27d4737ef9f54613e01594b49217378ac05cca42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27d4737ef9f54613e01594b49217378ac05cca42/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39c7787ba246353178e099373b9240be0d9e603", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39c7787ba246353178e099373b9240be0d9e603", "html_url": "https://github.com/rust-lang/rust/commit/a39c7787ba246353178e099373b9240be0d9e603"}, {"sha": "d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3", "html_url": "https://github.com/rust-lang/rust/commit/d3ca6fd71ed3003e58c6b58d7beb0505d0c8adc3"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "3a22290da68583ceef070dcdfa1898d6237b42b5", "filename": "src/librustc_target/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27d4737ef9f54613e01594b49217378ac05cca42/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d4737ef9f54613e01594b49217378ac05cca42/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=27d4737ef9f54613e01594b49217378ac05cca42", "patch": "@@ -6,6 +6,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.stack_probes = true;\n+    base.static_position_independent_executables = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-musl\".to_string(),"}, {"sha": "1d3cc82138927a1018c97a10d2814b05814a6602", "filename": "src/test/run-make/static-pie/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/27d4737ef9f54613e01594b49217378ac05cca42/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/27d4737ef9f54613e01594b49217378ac05cca42/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2FMakefile?ref=27d4737ef9f54613e01594b49217378ac05cca42", "patch": "@@ -0,0 +1,15 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# only-x86_64-unknown-linux-musl\n+\n+# How to manually run this\n+# $ ./x.py test --target x86_64-unknown-linux-musl src/test/run-make/static-pie\n+\n+all:\n+\t$(RUSTC) --target $(TARGET) -C target-feature=+crt-static test-aslr.rs\n+\t# Check that no dynamic interpreter is set\n+\t! readelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) INTERP\n+\t# Check that we have a dynamic executable\n+\treadelf -l $(call RUN_BINFILE,test-aslr) | $(CGREP) DYNAMIC\n+\t# Check for address space layout randomization\n+\t$(call RUN,test-aslr) --test-aslr"}, {"sha": "f28e00f7f4cf93825df45defa08944b1fee17251", "filename": "src/test/run-make/static-pie/test-aslr.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/27d4737ef9f54613e01594b49217378ac05cca42/src%2Ftest%2Frun-make%2Fstatic-pie%2Ftest-aslr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27d4737ef9f54613e01594b49217378ac05cca42/src%2Ftest%2Frun-make%2Fstatic-pie%2Ftest-aslr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-pie%2Ftest-aslr.rs?ref=27d4737ef9f54613e01594b49217378ac05cca42", "patch": "@@ -0,0 +1,43 @@\n+const NUM_RUNS: usize = 10;\n+\n+fn run_self(exe: &str) -> usize {\n+    use std::process::Command;\n+    let mut set = std::collections::HashSet::new();\n+\n+    let mut cmd = Command::new(exe);\n+    cmd.arg(\"--report\");\n+    (0..NUM_RUNS).for_each(|_| {\n+        set.insert(cmd.output().expect(\"failed to execute process\").stdout);\n+    });\n+    set.len()\n+}\n+\n+fn main() {\n+    let mut args = std::env::args();\n+    let arg0 = args.next().unwrap();\n+    match args.next() {\n+        Some(s) if s.eq(\"--report\") => {\n+            println!(\"main = {:#?}\", &main as *const _);\n+        }\n+        Some(s) if s.eq(\"--test-no-aslr\") => {\n+            let cnt = run_self(&arg0);\n+            if cnt != 1 {\n+                eprintln!(\"FAIL: {} most likely ASLR\", arg0);\n+                std::process::exit(1);\n+            }\n+            println!(\"PASS: {} does no ASLR\", arg0);\n+        }\n+        Some(s) if s.eq(\"--test-aslr\") => {\n+            let cnt = run_self(&arg0);\n+            if cnt != NUM_RUNS {\n+                eprintln!(\"FAIL: {} most likely no ASLR\", arg0);\n+                std::process::exit(1);\n+            }\n+            println!(\"PASS: {} does ASLR\", arg0);\n+        }\n+        Some(_) | None => {\n+            println!(\"Usage: {} --test-no-aslr | --test-aslr\", arg0);\n+            std::process::exit(1);\n+        }\n+    }\n+}"}]}