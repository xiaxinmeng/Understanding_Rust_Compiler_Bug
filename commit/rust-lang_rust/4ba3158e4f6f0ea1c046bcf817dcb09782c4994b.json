{"sha": "4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYTMxNThlNGY2ZjBlYTFjMDQ2YmNmODE3ZGNiMDk3ODJjNDk5NGI=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-11-30T18:55:41Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-02T19:38:24Z"}, "message": "parse: typeck: enabling trivial casts of tail-call return values\n\nintroduces ctypes::m_* machine type aliases for int, uint, float\ndepending on cfg(target_arch) that are used in tests", "tree": {"sha": "a6d78f6b20d58c6efec397b9d4ab2d9e9d1e88a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6d78f6b20d58c6efec397b9d4ab2d9e9d1e88a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "html_url": "https://github.com/rust-lang/rust/commit/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6", "html_url": "https://github.com/rust-lang/rust/commit/29f7cdffa4688aa539be4f0f6d2eab7f5af8a2d6"}], "stats": {"total": 171, "additions": 124, "deletions": 47}, "files": [{"sha": "ae09250b2e5f998b89d835df814b64a0695b605b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -4088,10 +4088,8 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n       }\n       ast::expr_cast(val, _) {\n         alt tcx.cast_map.find(e.id) {\n-          option::none. { ret trans_cast(bcx, val, e.id, dest); }\n-          some { alt option::get(some) {\n-            ty::triv_cast. { ret trans_expr(bcx, val, dest); }\n-          } }\n+          some(ty::triv_cast.) { ret trans_expr(bcx, val, dest); }\n+          _ { ret trans_cast(bcx, val, e.id, dest); }\n         }\n       }\n       ast::expr_anon_obj(anon_obj) {\n@@ -4122,7 +4120,7 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n         // that is_call_expr(ex) -- but we don't support that\n         // yet\n         // FIXME\n-        check (ast_util::is_call_expr(ex));\n+        check (ast_util::is_tail_call_expr(ex));\n         ret trans_be(bcx, ex);\n       }\n       ast::expr_fail(expr) {\n@@ -4455,7 +4453,8 @@ fn trans_ret(bcx: @block_ctxt, e: option::t<@ast::expr>) -> @block_ctxt {\n fn build_return(bcx: @block_ctxt) { Br(bcx, bcx_fcx(bcx).llreturn); }\n \n // fn trans_be(cx: &@block_ctxt, e: &@ast::expr) -> result {\n-fn trans_be(cx: @block_ctxt, e: @ast::expr) : ast_util::is_call_expr(e) ->\n+fn trans_be(cx: @block_ctxt, e: @ast::expr) :\n+ast_util::is_tail_call_expr(e) ->\n    @block_ctxt {\n     // FIXME: Turn this into a real tail call once\n     // calling convention issues are settled"}, {"sha": "b5b5559f4aa18b3f6d007f2df33428b8e9fa23a4", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -1501,7 +1501,7 @@ fn eq_ty(&&a: t, &&b: t) -> bool { ret a == b; }\n // Convert type to machine type\n // (i.e. replace uint, int, float with target architecture machine types)\n //\n-// Somewhat expensive but casts that need this should be rare\n+// FIXME somewhat expensive but this should only be called rarely\n fn ty_to_machine_ty(cx: ctxt, ty: t) -> t {\n     fn sub_fn(cx: ctxt, uint_ty: t, int_ty: t, float_ty: t, in: t) -> t {\n         alt struct(cx, in) {\n@@ -1525,12 +1525,9 @@ fn ty_to_machine_ty(cx: ctxt, ty: t) -> t {\n // equal or if they are equal after substituting all occurences of\n //  machine independent primitive types by their machine type equivalents\n // for the current target architecture\n-//\n-// Somewhat expensive but casts that need this should be rare\n fn triv_eq_ty(cx: ctxt, &&a: t, &&b: t) -> bool {\n-    let mach_a = ty_to_machine_ty(cx, a);\n-    let mach_b = ty_to_machine_ty(cx, b );\n-    ret eq_ty(a, b) || eq_ty(mach_a, mach_b);\n+    ret eq_ty(a, b)\n+        || eq_ty(ty_to_machine_ty(cx, a), ty_to_machine_ty(cx, b));\n }\n \n // Type lookups"}, {"sha": "9731bcaf44428cbedd860f5a02dd3fda3d9090c0", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -1846,8 +1846,21 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n       }\n       ast::expr_be(e) {\n         // FIXME: prove instead of assert\n-        assert (ast_util::is_call_expr(e));\n+        assert (ast_util::is_tail_call_expr(e));\n         check_expr_with(fcx, e, fcx.ret_ty);\n+\n+        alt e.node {\n+          ast::expr_cast(_, _) {\n+            alt tcx.cast_map.find(e.id) {\n+              option::some(ty::triv_cast.) { }\n+              _ { tcx.sess.span_err(expr.span,\n+                    \"non-trivial cast of tail-call return value\");\n+                }\n+            }\n+          }\n+          _ { /* regular tail call */ }\n+        }\n+\n         bot = true;\n         write::nil_ty(tcx, id);\n       }\n@@ -2112,8 +2125,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                                   ty_to_str(tcx, t_1));\n         }\n \n+        // mark as triv_cast for later dropping in trans\n         if ty::triv_eq_ty(tcx, t_1, t_e)\n             { tcx.cast_map.insert(expr.id, ty::triv_cast); }\n+\n         write::ty_only_fixup(fcx, id, t_1);\n       }\n       ast::expr_vec(args, mut) {"}, {"sha": "e9b89b59cd51acfde0326b2ea41f9e81ad1c566f", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -175,6 +175,14 @@ pure fn is_call_expr(e: @expr) -> bool {\n     alt e.node { expr_call(_, _, _) { true } _ { false } }\n }\n \n+pure fn is_tail_call_expr(e: @expr) -> bool {\n+    alt e.node {\n+      expr_call(_, _, _) { true }\n+      expr_cast(inner_e, _) { is_call_expr(inner_e) }\n+      _ { false }\n+    }\n+}\n+\n fn is_constraint_arg(e: @expr) -> bool {\n     alt e.node {\n       expr_lit(_) { ret true; }"}, {"sha": "7523ec26238dcad3190de4d43b3df33a19e398eb", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -962,7 +962,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n         let e = parse_expr(p);\n \n         // FIXME: Is this the right place for this check?\n-        if /*check*/ast_util::is_call_expr(e) {\n+        if /*check*/ ast_util::is_tail_call_expr(e) {\n             hi = e.span.hi;\n             ex = ast::expr_be(e);\n         } else { p.fatal(\"Non-call expression in tail call\"); }"}, {"sha": "82e414a864ce54003b16fbb2a25884b19da86388", "filename": "src/lib/ctypes.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Flib%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Flib%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fctypes.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -5,6 +5,7 @@ Definitions useful for C interop\n */\n \n type c_int = i32;\n+type c_uint = u32;\n \n type void = int; // Not really the same as C\n type long = int;\n@@ -15,8 +16,20 @@ type intptr_t = uint;\n type uintptr_t = uint;\n type uint32_t = u32;\n \n-// This *must* match with \"import c_float = fXX\" in std::math per arch\n-type c_float = f64;\n+// machine type equivalents of rust int, uint, float\n+\n+#[cfg(target_arch=\"x86\")]\n+type m_int = i32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_int = i64;\n+\n+#[cfg(target_arch=\"x86\")]\n+type m_uint = u32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_uint = u64;\n+\n+// This *must* match with \"import m_float = fXX\" in std::math per arch\n+type m_float = f64;\n \n type size_t = uint;\n type ssize_t = int;"}, {"sha": "72056548ca57820544a947b95f3417fd5bc926fe", "filename": "src/lib/math.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Flib%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Flib%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmath.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -18,11 +18,11 @@ export\n \n // These two must match in width according to architecture\n \n-import ctypes::c_float;\n+import ctypes::m_float;\n import ctypes::c_int;\n-import c_float = math_f64;\n+import m_float = math_f64;\n \n-// FIXME replace with redirect to c_float::consts::FOO as soon as it works\n+// FIXME replace with redirect to m_float::consts::FOO as soon as it works\n mod consts {\n     /*\n     Const: pi\n@@ -140,23 +140,23 @@ Function: acos\n Returns the arccosine of an angle (measured in rad)\n */\n pure fn acos(x: float) -> float\n-    { c_float::acos(x as c_float) as float }\n+    { m_float::acos(x as m_float) as float }\n \n /*\n Function: asin\n \n Returns the arcsine of an angle (measured in rad)\n */\n pure fn asin(x: float) -> float\n-    { c_float::asin(x as c_float) as float }\n+    { m_float::asin(x as m_float) as float }\n \n /*\n Function: atan\n \n Returns the arctangents of an angle (measured in rad)\n */\n pure fn atan(x: float) -> float\n-    { c_float::atan(x as c_float) as float }\n+    { m_float::atan(x as m_float) as float }\n \n \n /*\n@@ -165,23 +165,23 @@ Function: atan2\n Returns the arctangent of an angle (measured in rad)\n */\n pure fn atan2(y: float, x: float) -> float\n-    { c_float::atan2(y as c_float, x as c_float) as float }\n+    { m_float::atan2(y as m_float, x as m_float) as float }\n \n /*\n Function: ceil\n \n Returns the smallest integral value less than or equal to `n`\n */\n pure fn ceil(n: float) -> float\n-    { c_float::ceil(n as c_float) as float }\n+    { m_float::ceil(n as m_float) as float }\n \n /*\n Function: cos\n \n Returns the cosine of an angle `x` (measured in rad)\n */\n pure fn cos(x: float) -> float\n-    { c_float::cos(x as c_float) as float }\n+    { m_float::cos(x as m_float) as float }\n \n /*\n Function: cosh\n@@ -190,7 +190,7 @@ Returns the hyperbolic cosine of `x`\n \n */\n pure fn cosh(x: float) -> float\n-    { c_float::cosh(x as c_float) as float }\n+    { m_float::cosh(x as m_float) as float }\n \n \n /*\n@@ -199,47 +199,47 @@ Function: exp\n Returns `consts::e` to the power of `n*\n */\n pure fn exp(n: float) -> float\n-    { c_float::exp(n as c_float) as float }\n+    { m_float::exp(n as m_float) as float }\n \n /*\n Function: abs\n \n Returns the absolute value of  `n`\n */\n pure fn abs(n: float) -> float\n-    { c_float::abs(n as c_float) as float }\n+    { m_float::abs(n as m_float) as float }\n \n /*\n Function: floor\n \n Returns the largest integral value less than or equal to `n`\n */\n pure fn floor(n: float) -> float\n-    { c_float::floor(n as c_float) as float }\n+    { m_float::floor(n as m_float) as float }\n \n /*\n Function: fmod\n \n Returns the floating-point remainder of `x/y`\n */\n pure fn fmod(x: float, y: float) -> float\n-    { c_float::fmod(x as c_float, y as c_float) as float }\n+    { m_float::fmod(x as m_float, y as m_float) as float }\n \n /*\n Function: ln\n \n Returns the natural logaritm of `n`\n */\n pure fn ln(n: float) -> float\n-    { c_float::ln(n as c_float) as float }\n+    { m_float::ln(n as m_float) as float }\n \n /*\n Function: ldexp\n \n Returns `x` multiplied by 2 to the power of `n`\n */\n pure fn ldexp(n: float, i: int) -> float\n-    { c_float::ldexp(n as c_float, i as c_int) as float }\n+    { m_float::ldexp(n as m_float, i as c_int) as float }\n \n /*\n Function: ln1p\n@@ -248,23 +248,23 @@ Returns the natural logarithm of `1+n` accurately,\n even for very small values of `n`\n */\n pure fn ln1p(n: float) -> float\n-    { c_float::ln1p(n as c_float) as float }\n+    { m_float::ln1p(n as m_float) as float }\n \n /*\n Function: log10\n \n Returns the logarithm to base 10 of `n`\n */\n pure fn log10(n: float) -> float\n-    { c_float::log10(n as c_float) as float }\n+    { m_float::log10(n as m_float) as float }\n \n /*\n Function: log2\n \n Returns the logarithm to base 2 of `n`\n */\n pure fn log2(n: float) -> float\n-    { c_float::log2(n as c_float) as float }\n+    { m_float::log2(n as m_float) as float }\n \n \n /*\n@@ -281,8 +281,8 @@ The fractional part of `n`\n */\n pure fn modf(n: float, &iptr: float) -> float {\n     unchecked {\n-        let f = iptr as c_float;\n-        let r = c_float::modf(n as c_float, f) as float;\n+        let f = iptr as m_float;\n+        let r = m_float::modf(n as m_float, f) as float;\n         iptr  = f as float;\n         ret r;\n     }\n@@ -303,13 +303,13 @@ Returns:\n The fractional part of `n`\n */\n pure fn frexp(n: float, &exp: c_int) -> float\n-    { c_float::frexp(n as c_float, exp) as float }\n+    { m_float::frexp(n as m_float, exp) as float }\n \n /*\n Function: pow\n */\n pure fn pow(v: float, e: float) -> float\n-    { c_float::pow(v as c_float, e as c_float) as float }\n+    { m_float::pow(v as m_float, e as m_float) as float }\n \n \n /*\n@@ -319,7 +319,7 @@ Returns the integral value nearest to `x` (according to the\n prevailing rounding mode) in floating-point format\n */\n pure fn rint(x: float) -> float\n-    { c_float::rint(x as c_float) as float }\n+    { m_float::rint(x as m_float) as float }\n \n /*\n Function: round\n@@ -329,31 +329,31 @@ Return the integral value nearest to `x` rounding half-way\n cases away from zero, regardless of the current rounding direction.\n */\n pure fn round(x: float) -> float\n-    { c_float::round(x as c_float) as float }\n+    { m_float::round(x as m_float) as float }\n \n /*\n Function: sin\n \n Returns the sine of an angle `x` (measured in rad)\n */\n pure fn sin(x: float) -> float\n-    { c_float::sin(x as c_float) as float }\n+    { m_float::sin(x as m_float) as float }\n \n /*\n Function: sinh\n \n Returns the hyperbolic sine of an angle `x` (measured in rad)\n */\n pure fn sinh(x: float) -> float\n-    { c_float::sinh(x as c_float) as float }\n+    { m_float::sinh(x as m_float) as float }\n \n /*\n Function: sqrt\n \n Returns the square root of `x`\n */\n pure fn sqrt(x: float) -> float\n-    { c_float::sqrt(x as c_float) as float }\n+    { m_float::sqrt(x as m_float) as float }\n \n /*\n Function: tan\n@@ -362,7 +362,7 @@ Returns the tangent of an angle `x` (measured in rad)\n \n */\n pure fn tan(x: float) -> float\n-    { c_float::tan(x as c_float) as float }\n+    { m_float::tan(x as m_float) as float }\n \n /*\n Function: tanh\n@@ -371,7 +371,7 @@ Returns the hyperbolic tangent of an angle `x` (measured in rad)\n \n */\n pure fn tanh(x: float) -> float\n-    { c_float::tanh(x as c_float) as float }\n+    { m_float::tanh(x as m_float) as float }\n \n /*\n Function: trunc\n@@ -380,7 +380,7 @@ Returns the integral value nearest to but no larger in magnitude than `x`\n \n */\n pure fn trunc(x: float) -> float\n-    { c_float::trunc(x as c_float) as float }\n+    { m_float::trunc(x as m_float) as float }\n \n \n "}, {"sha": "14f2c0bfdcd69e741d315833f195b0174d2814cc", "filename": "src/test/compile-fail/non-triv-cast-be.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Ftest%2Fcompile-fail%2Fnon-triv-cast-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Ftest%2Fcompile-fail%2Fnon-triv-cast-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-triv-cast-be.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -0,0 +1,19 @@\n+// error-pattern: non-trivial cast of tail-call return value\n+use std;\n+\n+import std::ctypes::*;\n+\n+fn foo_float() -> m_float { ret 0.0 as m_float; }\n+fn bar_float() -> bool { be foo_float() as bool; }\n+\n+fn foo_int() -> m_int { ret 0 as m_int; }\n+fn bar_int() -> bool { be foo_int() as bool; }\n+\n+fn foo_uint() -> m_uint { ret 0u as m_uint; }\n+fn bar_uint() -> bool { be foo_uint() as bool; }\n+\n+fn main() {\n+    assert bar_float() == 0.0;\n+    assert bar_int() == 0.0;\n+    assert bar_uint() == 0.0;\n+}\n\\ No newline at end of file"}, {"sha": "de78341a199c56108e1dcc4f55163e84a7133970", "filename": "src/test/run-pass/triv-cast-be.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Ftest%2Frun-pass%2Ftriv-cast-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ba3158e4f6f0ea1c046bcf817dcb09782c4994b/src%2Ftest%2Frun-pass%2Ftriv-cast-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftriv-cast-be.rs?ref=4ba3158e4f6f0ea1c046bcf817dcb09782c4994b", "patch": "@@ -0,0 +1,26 @@\n+use std;\n+\n+import std::ctypes::*;\n+\n+fn foo_float() -> m_float { ret 0.0 as m_float; }\n+fn bar_float() -> float { be foo_float() as float; }\n+\n+fn foo_int() -> m_int { ret 0 as m_int; }\n+fn bar_int() -> int { be foo_int() as int; }\n+\n+fn foo_uint() -> m_uint { ret 0u as m_uint; }\n+fn bar_uint() -> uint { be foo_uint() as uint; }\n+\n+fn foo_long() -> long { ret 0 as long; }\n+fn bar_long() -> int { be foo_long() as int; }\n+\n+fn foo_ulong() -> ulong { ret 0u as ulong; }\n+fn bar_ulong() -> uint { be foo_uint() as uint; }\n+\n+fn main() {\n+    assert bar_float() == 0.0;\n+    assert bar_int() == 0;\n+    assert bar_uint() == 0u;\n+    assert bar_long() == 0;\n+    assert bar_ulong() == 0u;\n+}\n\\ No newline at end of file"}]}