{"sha": "6a0a4a564accb12b48e703245655e3e3a0637445", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMGE0YTU2NGFjY2IxMmI0OGU3MDMyNDU2NTVlM2UzYTA2Mzc0NDU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-24T01:22:29Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-01-24T01:22:29Z"}, "message": "Merge #621\n\n621: Completion docs for code model r=kjeremy a=kjeremy\n\nAdds a way to access documentation through the code model and exposes it to completions. Also allows us to document enum variants.\n\nCo-authored-by: Jeremy A. Kolb <jkolb@ara.com>\nCo-authored-by: Jeremy Kolb <kjeremy@gmail.com>", "tree": {"sha": "248097d8ceaded63601e3d663ef795e3bae55bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/248097d8ceaded63601e3d663ef795e3bae55bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a0a4a564accb12b48e703245655e3e3a0637445", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0a4a564accb12b48e703245655e3e3a0637445", "html_url": "https://github.com/rust-lang/rust/commit/6a0a4a564accb12b48e703245655e3e3a0637445", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a0a4a564accb12b48e703245655e3e3a0637445/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "bf9cd6ee30b3044b61e99e24e82fad56d3965417", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf9cd6ee30b3044b61e99e24e82fad56d3965417", "html_url": "https://github.com/rust-lang/rust/commit/bf9cd6ee30b3044b61e99e24e82fad56d3965417"}, {"sha": "f87ce73579759fdb623f1d8d82880c0d6306746e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87ce73579759fdb623f1d8d82880c0d6306746e", "html_url": "https://github.com/rust-lang/rust/commit/f87ce73579759fdb623f1d8d82880c0d6306746e"}], "stats": {"total": 181, "additions": 138, "deletions": 43}, "files": [{"sha": "3ff07bd60c7cfb78de97134fcb8a15cd99774247", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 48, "deletions": 13, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -2,7 +2,7 @@ use std::sync::Arc;\n \n use relative_path::RelativePathBuf;\n use ra_db::{CrateId, FileId};\n-use ra_syntax::{ast::{self, AstNode, DocCommentsOwner}, TreeArc, SyntaxNode};\n+use ra_syntax::{ast::self, TreeArc, SyntaxNode};\n \n use crate::{\n     Name, DefId, Path, PerNs, ScopesWithSyntaxMapping, Ty, HirFileId,\n@@ -14,6 +14,7 @@ use crate::{\n     adt::VariantData,\n     generics::GenericParams,\n     code_model_impl::def_id_to_ast,\n+    docs::{Documentation, Docs, docs_from_ast}\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -208,6 +209,12 @@ impl Struct {\n     }\n }\n \n+impl Docs for Struct {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Enum {\n     pub(crate) def_id: DefId,\n@@ -239,6 +246,12 @@ impl Enum {\n     }\n }\n \n+impl Docs for Enum {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n     pub(crate) def_id: DefId,\n@@ -281,6 +294,12 @@ impl EnumVariant {\n     }\n }\n \n+impl Docs for EnumVariant {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Function {\n     pub(crate) def_id: DefId,\n@@ -352,19 +371,11 @@ impl Function {\n     pub fn generic_params(&self, db: &impl HirDatabase) -> Arc<GenericParams> {\n         db.generic_params(self.def_id)\n     }\n+}\n \n-    pub fn docs(&self, db: &impl HirDatabase) -> Option<String> {\n-        let def_loc = self.def_id.loc(db);\n-        let syntax = db.file_item(def_loc.source_item_id);\n-        let fn_def = ast::FnDef::cast(&syntax).expect(\"fn def should point to FnDef node\");\n-\n-        // doc_comment_text unconditionally returns a String\n-        let comments = fn_def.doc_comment_text();\n-        if comments.is_empty() {\n-            None\n-        } else {\n-            Some(comments)\n-        }\n+impl Docs for Function {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n     }\n }\n \n@@ -383,6 +394,12 @@ impl Const {\n     }\n }\n \n+impl Docs for Const {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Static {\n     pub(crate) def_id: DefId,\n@@ -398,6 +415,12 @@ impl Static {\n     }\n }\n \n+impl Docs for Static {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Trait {\n     pub(crate) def_id: DefId,\n@@ -417,6 +440,12 @@ impl Trait {\n     }\n }\n \n+impl Docs for Trait {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Type {\n     pub(crate) def_id: DefId,\n@@ -435,3 +464,9 @@ impl Type {\n         db.generic_params(self.def_id)\n     }\n }\n+\n+impl Docs for Type {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        docs_from_ast(&*self.source(db).1)\n+    }\n+}"}, {"sha": "b1b47af9e63476e42e04eae14a9f9298f386c1bd", "filename": "crates/ra_hir/src/docs.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -0,0 +1,36 @@\n+use ra_syntax::ast;\n+\n+use crate::HirDatabase;\n+\n+/// Holds documentation\n+#[derive(Debug, Clone)]\n+pub struct Documentation(String);\n+\n+impl Documentation {\n+    pub fn new(s: &str) -> Self {\n+        Self(s.into())\n+    }\n+\n+    pub fn contents(&self) -> &str {\n+        &self.0\n+    }\n+}\n+\n+impl Into<String> for Documentation {\n+    fn into(self) -> String {\n+        self.contents().into()\n+    }\n+}\n+\n+pub trait Docs {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation>;\n+}\n+\n+pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n+    let comments = node.doc_comment_text();\n+    if comments.is_empty() {\n+        None\n+    } else {\n+        Some(Documentation::new(&comments))\n+    }\n+}"}, {"sha": "f517f71e0c3938c61667d04e2becb20884c34be7", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -23,6 +23,7 @@ mod ty;\n mod impl_block;\n mod expr;\n mod generics;\n+mod docs;\n \n mod code_model_api;\n mod code_model_impl;\n@@ -45,6 +46,7 @@ pub use self::{\n     ty::Ty,\n     impl_block::{ImplBlock, ImplItem},\n     code_model_impl::function::{FnScopes, ScopesWithSyntaxMapping},\n+    docs::{Docs, Documentation}\n };\n \n pub use self::code_model_api::{"}, {"sha": "e44b76c4a9239c9a2eafd1b66c1251013fd70428", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -2,6 +2,8 @@ use crate::{\n     completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext},\n };\n \n+use hir::Docs;\n+\n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let (path, module) = match (&ctx.path_prefix, &ctx.module) {\n         (Some(path), Some(module)) => (path.clone(), module),\n@@ -27,13 +29,14 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         hir::Def::Enum(e) => {\n             e.variants(ctx.db)\n                 .into_iter()\n-                .for_each(|(variant_name, _variant)| {\n+                .for_each(|(variant_name, variant)| {\n                     CompletionItem::new(\n                         CompletionKind::Reference,\n                         ctx.source_range(),\n                         variant_name.to_string(),\n                     )\n                     .kind(CompletionItemKind::EnumVariant)\n+                    .set_documentation(variant.docs(ctx.db))\n                     .add_to(acc)\n                 });\n         }\n@@ -116,7 +119,13 @@ mod tests {\n             \"reference_completion\",\n             \"\n             //- /lib.rs\n-            enum E { Foo, Bar(i32) }\n+            /// An enum\n+            enum E {\n+                /// Foo Variant\n+                Foo,\n+                /// Bar Variant with i32\n+                Bar(i32)\n+            }\n             fn foo() { let _ = E::<|> }\n             \",\n         );"}, {"sha": "18c151932a87780f806832c0c8857534aba86b3e", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -1,4 +1,4 @@\n-use hir::PerNs;\n+use hir::{Docs, Documentation, PerNs};\n \n use crate::completion::completion_context::CompletionContext;\n use ra_syntax::{\n@@ -19,7 +19,7 @@ pub struct CompletionItem {\n     label: String,\n     kind: Option<CompletionItemKind>,\n     detail: Option<String>,\n-    documentation: Option<String>,\n+    documentation: Option<Documentation>,\n     lookup: Option<String>,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -98,7 +98,7 @@ impl CompletionItem {\n     }\n     /// A doc-comment\n     pub fn documentation(&self) -> Option<&str> {\n-        self.documentation.as_ref().map(|it| it.as_str())\n+        self.documentation.as_ref().map(|it| it.contents())\n     }\n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n@@ -137,7 +137,7 @@ pub(crate) struct Builder {\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n     detail: Option<String>,\n-    documentation: Option<String>,\n+    documentation: Option<Documentation>,\n     lookup: Option<String>,\n     kind: Option<CompletionItemKind>,\n     text_edit: Option<TextEdit>,\n@@ -197,10 +197,10 @@ impl Builder {\n         self\n     }\n     #[allow(unused)]\n-    pub(crate) fn documentation(self, docs: impl Into<String>) -> Builder {\n+    pub(crate) fn documentation(self, docs: Documentation) -> Builder {\n         self.set_documentation(Some(docs))\n     }\n-    pub(crate) fn set_documentation(mut self, docs: Option<impl Into<String>>) -> Builder {\n+    pub(crate) fn set_documentation(mut self, docs: Option<Documentation>) -> Builder {\n         self.documentation = docs.map(Into::into);\n         self\n     }\n@@ -210,42 +210,44 @@ impl Builder {\n         resolution: &hir::Resolution,\n     ) -> Builder {\n         let resolved = resolution.def_id.map(|d| d.resolve(ctx.db));\n-        let kind = match resolved {\n+        let (kind, docs) = match resolved {\n             PerNs {\n                 types: Some(hir::Def::Module(..)),\n                 ..\n-            } => CompletionItemKind::Module,\n+            } => (CompletionItemKind::Module, None),\n             PerNs {\n-                types: Some(hir::Def::Struct(..)),\n+                types: Some(hir::Def::Struct(s)),\n                 ..\n-            } => CompletionItemKind::Struct,\n+            } => (CompletionItemKind::Struct, s.docs(ctx.db)),\n             PerNs {\n-                types: Some(hir::Def::Enum(..)),\n+                types: Some(hir::Def::Enum(e)),\n                 ..\n-            } => CompletionItemKind::Enum,\n+            } => (CompletionItemKind::Enum, e.docs(ctx.db)),\n             PerNs {\n-                types: Some(hir::Def::Trait(..)),\n+                types: Some(hir::Def::Trait(t)),\n                 ..\n-            } => CompletionItemKind::Trait,\n+            } => (CompletionItemKind::Trait, t.docs(ctx.db)),\n             PerNs {\n-                types: Some(hir::Def::Type(..)),\n+                types: Some(hir::Def::Type(t)),\n                 ..\n-            } => CompletionItemKind::TypeAlias,\n+            } => (CompletionItemKind::TypeAlias, t.docs(ctx.db)),\n             PerNs {\n-                values: Some(hir::Def::Const(..)),\n+                values: Some(hir::Def::Const(c)),\n                 ..\n-            } => CompletionItemKind::Const,\n+            } => (CompletionItemKind::Const, c.docs(ctx.db)),\n             PerNs {\n-                values: Some(hir::Def::Static(..)),\n+                values: Some(hir::Def::Static(s)),\n                 ..\n-            } => CompletionItemKind::Static,\n+            } => (CompletionItemKind::Static, s.docs(ctx.db)),\n             PerNs {\n                 values: Some(hir::Def::Function(function)),\n                 ..\n             } => return self.from_function(ctx, function),\n             _ => return self,\n         };\n         self.kind = Some(kind);\n+        self.documentation = docs;\n+\n         self\n     }\n \n@@ -265,6 +267,7 @@ impl Builder {\n             }\n             self.insert_text_format = InsertTextFormat::Snippet;\n         }\n+\n         if let Some(docs) = function.docs(ctx.db) {\n             self.documentation = Some(docs);\n         }"}, {"sha": "e46f7807ba70284b94ec628268c36f36ff44b1f0", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__reference_completion.snap", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__reference_completion.snap", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__reference_completion.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__reference_completion.snap?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -1,6 +1,6 @@\n ---\n-created: \"2019-01-22T14:45:00.717917+00:00\"\n-creator: insta@0.4.0\n+created: \"2019-01-23T23:49:43.278245900+00:00\"\n+creator: insta@0.5.1\n expression: kind_completions\n source: \"crates\\\\ra_ide_api\\\\src\\\\completion\\\\completion_item.rs\"\n ---\n@@ -12,11 +12,15 @@ source: \"crates\\\\ra_ide_api\\\\src\\\\completion\\\\completion_item.rs\"\n             EnumVariant\n         ),\n         detail: None,\n-        documentation: None,\n+        documentation: Some(\n+            Documentation(\n+                \"Foo Variant\"\n+            )\n+        ),\n         lookup: None,\n         insert_text: None,\n         insert_text_format: PlainText,\n-        source_range: [47; 47),\n+        source_range: [116; 116),\n         text_edit: None\n     },\n     CompletionItem {\n@@ -26,11 +30,15 @@ source: \"crates\\\\ra_ide_api\\\\src\\\\completion\\\\completion_item.rs\"\n             EnumVariant\n         ),\n         detail: None,\n-        documentation: None,\n+        documentation: Some(\n+            Documentation(\n+                \"Bar Variant with i32\"\n+            )\n+        ),\n         lookup: None,\n         insert_text: None,\n         insert_text_format: PlainText,\n-        source_range: [47; 47),\n+        source_range: [116; 116),\n         text_edit: None\n     }\n ]"}, {"sha": "ac6c8a835955ab727d9e47f871ed79ef7aa8eae2", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -632,6 +632,7 @@ impl AstNode for EnumVariant {\n \n \n impl ast::NameOwner for EnumVariant {}\n+impl ast::DocCommentsOwner for EnumVariant {}\n impl EnumVariant {\n     pub fn expr(&self) -> Option<&Expr> {\n         super::child_opt(self)"}, {"sha": "c5297e46ddf292d992091268466962e6a2e447ba", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -279,7 +279,7 @@ Grammar(\n             \"DocCommentsOwner\"\n         ], options: [[\"variant_list\", \"EnumVariantList\"]] ),\n         \"EnumVariantList\": ( collections: [[\"variants\", \"EnumVariant\"]] ),\n-        \"EnumVariant\": ( traits: [\"NameOwner\"], options: [\"Expr\"] ),\n+        \"EnumVariant\": ( traits: [\"NameOwner\", \"DocCommentsOwner\"], options: [\"Expr\"] ),\n         \"TraitDef\": ( traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\"] ),\n         \"Module\": (\n             traits: [\"VisibilityOwner\", \"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\" ],"}, {"sha": "bd77fee89f9c98f2672bcdb682d60943d2d167fb", "filename": "crates/ra_syntax/src/parser_impl/event.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a0a4a564accb12b48e703245655e3e3a0637445/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparser_impl%2Fevent.rs?ref=6a0a4a564accb12b48e703245655e3e3a0637445", "patch": "@@ -249,7 +249,8 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        CONST_DEF | TYPE_DEF | STRUCT_DEF | ENUM_DEF | FN_DEF | TRAIT_DEF | MODULE => {\n+        CONST_DEF | TYPE_DEF | STRUCT_DEF | ENUM_DEF | ENUM_VARIANT | FN_DEF | TRAIT_DEF\n+        | MODULE => {\n             let mut res = 0;\n             for (i, (kind, text)) in trivias.enumerate() {\n                 match kind {"}]}