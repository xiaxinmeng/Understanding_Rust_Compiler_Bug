{"sha": "2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYTc3ZjFjOTZmNjBiNDRjMGQ1MWQ3ZDY5MDQ2YWQ5YTg1MzJhNDY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-05T14:34:35Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-05T14:39:33Z"}, "message": "collections: Convert SliceConcatExt to use associated types\n\nCoherence now allows this, we have SliceConcatExt<T> for [V] where T: Sized\n+ Clone and SliceConcatExt<str> for [S], these don't conflict because\nstr is never Sized.", "tree": {"sha": "cc5b8d6aa3c8325cad44af708a3a1189fccf9d98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5b8d6aa3c8325cad44af708a3a1189fccf9d98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "html_url": "https://github.com/rust-lang/rust/commit/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7d3ec9d2b314af0188a820c58fbd95ee905793", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7d3ec9d2b314af0188a820c58fbd95ee905793", "html_url": "https://github.com/rust-lang/rust/commit/0d7d3ec9d2b314af0188a820c58fbd95ee905793"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "3f9d6e64412a77bd2bed4ed8743498bb5f504aa6", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "patch": "@@ -996,9 +996,13 @@ impl<T> [T] {\n ////////////////////////////////////////////////////////////////////////////////\n // Extension traits for slices over specific kinds of data\n ////////////////////////////////////////////////////////////////////////////////\n-#[unstable(feature = \"collections\", reason = \"U should be an associated type\")]\n+#[unstable(feature = \"collections\", reason = \"recently changed\")]\n /// An extension trait for concatenating slices\n-pub trait SliceConcatExt<T: ?Sized, U> {\n+pub trait SliceConcatExt<T: ?Sized> {\n+    #[unstable(feature = \"collections\", reason = \"recently changed\")]\n+    /// The resulting type after concatenation\n+    type Output;\n+\n     /// Flattens a slice of `T` into a single value `U`.\n     ///\n     /// # Examples\n@@ -1011,7 +1015,7 @@ pub trait SliceConcatExt<T: ?Sized, U> {\n     /// println!(\"{}\", s); // prints \"helloworld\"\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn concat(&self) -> U;\n+    fn concat(&self) -> Self::Output;\n \n     /// Flattens a slice of `T` into a single value `U`, placing a given separator between each.\n     ///\n@@ -1025,10 +1029,12 @@ pub trait SliceConcatExt<T: ?Sized, U> {\n     /// println!(\"{}\", s); // prints \"hello world\"\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn connect(&self, sep: &T) -> U;\n+    fn connect(&self, sep: &T) -> Self::Output;\n }\n \n-impl<T: Clone, V: AsRef<[T]>> SliceConcatExt<T, Vec<T>> for [V] {\n+impl<T: Clone, V: AsRef<[T]>> SliceConcatExt<T> for [V] {\n+    type Output = Vec<T>;\n+\n     fn concat(&self) -> Vec<T> {\n         let size = self.iter().fold(0, |acc, v| acc + v.as_ref().len());\n         let mut result = Vec::with_capacity(size);"}, {"sha": "fd94b00a2dc4de5b039caaa6c19e9c87f782ae65", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ca77f1c96f60b44c0d51d7d69046ad9a8532a46/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=2ca77f1c96f60b44c0d51d7d69046ad9a8532a46", "patch": "@@ -83,7 +83,9 @@ pub use core::str::pattern;\n Section: Creating a string\n */\n \n-impl<S: AsRef<str>> SliceConcatExt<str, String> for [S] {\n+impl<S: AsRef<str>> SliceConcatExt<str> for [S] {\n+    type Output = String;\n+\n     fn concat(&self) -> String {\n         if self.is_empty() {\n             return String::new();"}]}