{"sha": "d2644e538ccbf99e6aea79f60de3449e5c90c3d5", "node_id": "C_kwDOAAsO6NoAKGQyNjQ0ZTUzOGNjYmY5OWU2YWVhNzlmNjBkZTM0NDllNWM5MGMzZDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-18T19:18:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-18T19:18:46Z"}, "message": "Rollup merge of #101889 - tspiteri:redoc-uint-adc-sbb, r=m-ou-se\n\ndoc: rewrite doc for uint::{carrying_add,borrowing_sub}\n\nReword the documentation for bigint helper methods `uint::{carrying_add,borrowing_sub}` (#85532).\n\nThe examples were also rewritten to demonstrate how the methods can be used in bignum arithmetic. No loops are used in the examples, but the variable names were chosen to include indices so that it is clear how this can be used in a loop if required.\n\nAlso, previously `carrying_add` had an example to say that if the input carry is false, the method is equivalent to `overflowing_add`. While the note was kept, the example was removed and an extra note was added to make sure this equivalence is not assumed for signed integers as well.", "tree": {"sha": "7a32cbdb1f24d6566be40db2422ca175ab59dc26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a32cbdb1f24d6566be40db2422ca175ab59dc26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2644e538ccbf99e6aea79f60de3449e5c90c3d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjTvwWCRBK7hj4Ov3rIwAAUxcIAA87TuBg09y36lyUvWq68YgA\n8xCHzjQ2yUVh5tfjR59VpKL3msBmUUqAvFusxOlcW7zfYz4B4Iyf4miuKZXLQvFq\nuqvtXCgeTNr5hXf1mxGwyRb34lbxr2nYBBnHSjAKtnIsvTin0OKeLxXcaOBhAzTD\nR2cXbF+G6Cp22xmpGwcna39xaIO7498kw1wHCF1D6eJIkwsRqvMnP07sb4dslMfE\n4YDV2oNZ0MAwzUTpHmps546MTD1qOdxsJAowLV+sdUoCRjHMgiJXcRvxwHx/vuin\nSiDEDtKSel0ThUFv5gktkN0hb5LydQFWAQ7jqFueZm/Gisimw6VMfWUrZZXVlJg=\n=I6AC\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a32cbdb1f24d6566be40db2422ca175ab59dc26\nparent e94827e5b09b5b098ea10d0c57a84892fc73b5a7\nparent 33421da030eeaf40ed0aca6bec41125c18ca34e4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1666120726 +0200\ncommitter GitHub <noreply@github.com> 1666120726 +0200\n\nRollup merge of #101889 - tspiteri:redoc-uint-adc-sbb, r=m-ou-se\n\ndoc: rewrite doc for uint::{carrying_add,borrowing_sub}\n\nReword the documentation for bigint helper methods `uint::{carrying_add,borrowing_sub}` (#85532).\n\nThe examples were also rewritten to demonstrate how the methods can be used in bignum arithmetic. No loops are used in the examples, but the variable names were chosen to include indices so that it is clear how this can be used in a loop if required.\n\nAlso, previously `carrying_add` had an example to say that if the input carry is false, the method is equivalent to `overflowing_add`. While the note was kept, the example was removed and an extra note was added to make sure this equivalence is not assumed for signed integers as well.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2644e538ccbf99e6aea79f60de3449e5c90c3d5", "html_url": "https://github.com/rust-lang/rust/commit/d2644e538ccbf99e6aea79f60de3449e5c90c3d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2644e538ccbf99e6aea79f60de3449e5c90c3d5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94827e5b09b5b098ea10d0c57a84892fc73b5a7", "html_url": "https://github.com/rust-lang/rust/commit/e94827e5b09b5b098ea10d0c57a84892fc73b5a7"}, {"sha": "33421da030eeaf40ed0aca6bec41125c18ca34e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/33421da030eeaf40ed0aca6bec41125c18ca34e4", "html_url": "https://github.com/rust-lang/rust/commit/33421da030eeaf40ed0aca6bec41125c18ca34e4"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "93f65c5c7aaf3a6111abe21c9bfcf3ceee415b62", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 49, "deletions": 31, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/d2644e538ccbf99e6aea79f60de3449e5c90c3d5/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2644e538ccbf99e6aea79f60de3449e5c90c3d5/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=d2644e538ccbf99e6aea79f60de3449e5c90c3d5", "patch": "@@ -1469,37 +1469,42 @@ macro_rules! uint_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self + rhs + carry` without the ability to overflow.\n+        /// Calculates `self` + `rhs` + `carry` and returns a tuple containing\n+        /// the sum and the output carry.\n         ///\n-        /// Performs \"ternary addition\" which takes in an extra bit to add, and may return an\n-        /// additional bit of overflow. This allows for chaining together multiple additions\n-        /// to create \"big integers\" which represent larger values.\n+        /// Performs \"ternary addition\" of two integer operands and a carry-in\n+        /// bit, and returns an output integer and a carry-out bit. This allows\n+        /// chaining together multiple additions to create a wider addition, and\n+        /// can be useful for bignum addition.\n         ///\n         #[doc = concat!(\"This can be thought of as a \", stringify!($BITS), \"-bit \\\"full adder\\\", in the electronics sense.\")]\n         ///\n-        /// # Examples\n+        /// If the input carry is false, this method is equivalent to\n+        /// [`overflowing_add`](Self::overflowing_add), and the output carry is\n+        /// equal to the overflow flag. Note that although carry and overflow\n+        /// flags are similar for unsigned integers, they are different for\n+        /// signed integers.\n         ///\n-        /// Basic usage\n+        /// # Examples\n         ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, false), (7, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, true), (8, false));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), (0, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(0, true), (0, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, true), (1, true));\")]\n-        #[doc = concat!(\"assert_eq!(\",\n-            stringify!($SelfT), \"::MAX.carrying_add(\", stringify!($SelfT), \"::MAX, true), \",\n-            \"(\", stringify!($SelfT), \"::MAX, true));\"\n-        )]\n-        /// ```\n         ///\n-        /// If `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n+        #[doc = concat!(\"//    3  MAX    (a = 3 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        #[doc = concat!(\"// +  5    7    (b = 5 \u00d7 2^\", stringify!($BITS), \" + 7)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//    9    6    (sum = 9 \u00d7 2^\", stringify!($BITS), \" + 6)\")]\n         ///\n-        /// ```\n-        /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5_\", stringify!($SelfT), \".carrying_add(2, false), 5_\", stringify!($SelfT), \".overflowing_add(2));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), \", stringify!($SelfT), \"::MAX.overflowing_add(1));\")]\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (3, \", stringify!($SelfT), \"::MAX);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (5, 7);\")]\n+        /// let carry0 = false;\n+        ///\n+        /// let (sum0, carry1) = a0.carrying_add(b0, carry0);\n+        /// assert_eq!(carry1, true);\n+        /// let (sum1, carry2) = a1.carrying_add(b1, carry1);\n+        /// assert_eq!(carry2, false);\n+        ///\n+        /// assert_eq!((sum1, sum0), (9, 6));\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]\n@@ -1563,22 +1568,35 @@ macro_rules! uint_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self - rhs - borrow` without the ability to overflow.\n+        /// Calculates `self` &minus; `rhs` &minus; `borrow` and returns a tuple\n+        /// containing the difference and the output borrow.\n         ///\n-        /// Performs \"ternary subtraction\" which takes in an extra bit to subtract, and may return\n-        /// an additional bit of overflow. This allows for chaining together multiple subtractions\n-        /// to create \"big integers\" which represent larger values.\n+        /// Performs \"ternary subtraction\" by subtracting both an integer\n+        /// operand and a borrow-in bit from `self`, and returns an output\n+        /// integer and a borrow-out bit. This allows chaining together multiple\n+        /// subtractions to create a wider subtraction, and can be useful for\n+        /// bignum subtraction.\n         ///\n         /// # Examples\n         ///\n-        /// Basic usage\n-        ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, false), (3, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, true), (2, false));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, false), (\", stringify!($SelfT), \"::MAX, true));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, true), (\", stringify!($SelfT), \"::MAX - 1, true));\")]\n+        ///\n+        #[doc = concat!(\"//    9    6    (a = 9 \u00d7 2^\", stringify!($BITS), \" + 6)\")]\n+        #[doc = concat!(\"// -  5    7    (b = 5 \u00d7 2^\", stringify!($BITS), \" + 7)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//    3  MAX    (diff = 3 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        ///\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (9, 6);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($SelfT), \") = (5, 7);\")]\n+        /// let borrow0 = false;\n+        ///\n+        /// let (diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n+        /// assert_eq!(borrow1, true);\n+        /// let (diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n+        /// assert_eq!(borrow2, false);\n+        ///\n+        #[doc = concat!(\"assert_eq!((diff1, diff0), (3, \", stringify!($SelfT), \"::MAX));\")]\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]"}]}