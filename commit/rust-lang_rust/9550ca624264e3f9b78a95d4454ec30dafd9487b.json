{"sha": "9550ca624264e3f9b78a95d4454ec30dafd9487b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1NTBjYTYyNDI2NGUzZjliNzhhOTVkNDQ1NGVjMzBkYWZkOTQ4N2I=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-24T08:18:51Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-24T08:18:51Z"}, "message": "Deduplicate the \"needs partialeq derive\" message creation sites", "tree": {"sha": "c0c61325815fda54c6473eb63265c39344e2dea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0c61325815fda54c6473eb63265c39344e2dea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9550ca624264e3f9b78a95d4454ec30dafd9487b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9550ca624264e3f9b78a95d4454ec30dafd9487b", "html_url": "https://github.com/rust-lang/rust/commit/9550ca624264e3f9b78a95d4454ec30dafd9487b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9550ca624264e3f9b78a95d4454ec30dafd9487b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4928d77a1eceea9f53e30bd6af9fdf5be205fae", "html_url": "https://github.com/rust-lang/rust/commit/e4928d77a1eceea9f53e30bd6af9fdf5be205fae"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "37f5d5f6cc30fdbc452b3e65aa9dcda68c4f89db", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9550ca624264e3f9b78a95d4454ec30dafd9487b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9550ca624264e3f9b78a95d4454ec30dafd9487b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=9550ca624264e3f9b78a95d4454ec30dafd9487b", "patch": "@@ -3,7 +3,7 @@ use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::Field;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::Span;\n use rustc_trait_selection::traits::predicate_for_trait_def;\n@@ -89,18 +89,20 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    fn adt_derive_msg(&self, adt_def: &AdtDef) -> String {\n+        let path = self.tcx().def_path_str(adt_def.did);\n+        format!(\n+            \"to use a constant of type `{}` in a pattern, \\\n+            `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+            path, path,\n+        )\n+    }\n+\n     fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n         traits::search_for_structural_match_violation(self.id, self.span, self.tcx(), ty).map(\n             |non_sm_ty| {\n                 with_no_trimmed_paths(|| match non_sm_ty {\n-                    traits::NonStructuralMatchTy::Adt(adt_def) => {\n-                        let path = self.tcx().def_path_str(adt_def.did);\n-                        format!(\n-                            \"to use a constant of type `{}` in a pattern, \\\n-                         `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                            path, path,\n-                        )\n-                    }\n+                    traits::NonStructuralMatchTy::Adt(adt) => self.adt_derive_msg(adt),\n                     traits::NonStructuralMatchTy::Dynamic => {\n                         \"trait objects cannot be used in patterns\".to_string()\n                     }\n@@ -412,12 +414,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                             && !self.saw_const_match_lint.get()\n                         {\n                             self.saw_const_match_lint.set(true);\n-                            let path = self.tcx().def_path_str(adt_def.did);\n-                            let msg = format!(\n-                                \"to use a constant of type `{}` in a pattern, \\\n-                                `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                path, path,\n-                            );\n+                            let msg = self.adt_derive_msg(adt_def);\n                             self.tcx().struct_span_lint_hir(\n                                 lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                                 self.id,\n@@ -429,12 +426,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     } else {\n                         if !self.saw_const_match_error.get() {\n                             self.saw_const_match_error.set(true);\n-                            let path = self.tcx().def_path_str(adt_def.did);\n-                            let msg = format!(\n-                                \"to use a constant of type `{}` in a pattern, \\\n-                                `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                                path, path,\n-                            );\n+                            let msg = self.adt_derive_msg(adt_def);\n                             if self.include_lint_checks {\n                                 tcx.sess.span_err(span, &msg);\n                             } else {"}]}