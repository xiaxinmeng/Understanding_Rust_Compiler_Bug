{"sha": "92dac67d0cf9036557249aa8801b0dfed1fd0320", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZGFjNjdkMGNmOTAzNjU1NzI0OWFhODgwMWIwZGZlZDFmZDAzMjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T14:31:22Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T14:31:22Z"}, "message": "Simplify", "tree": {"sha": "b36600814ed46b5e01f4c946aed8829e99eff380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b36600814ed46b5e01f4c946aed8829e99eff380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92dac67d0cf9036557249aa8801b0dfed1fd0320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92dac67d0cf9036557249aa8801b0dfed1fd0320", "html_url": "https://github.com/rust-lang/rust/commit/92dac67d0cf9036557249aa8801b0dfed1fd0320", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92dac67d0cf9036557249aa8801b0dfed1fd0320/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939ca83b34f9a5648d196f85e5cc7d844ba22604", "url": "https://api.github.com/repos/rust-lang/rust/commits/939ca83b34f9a5648d196f85e5cc7d844ba22604", "html_url": "https://github.com/rust-lang/rust/commit/939ca83b34f9a5648d196f85e5cc7d844ba22604"}], "stats": {"total": 138, "additions": 52, "deletions": 86}, "files": [{"sha": "079248511bf31dbc69ac53787f257024441b59bd", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92dac67d0cf9036557249aa8801b0dfed1fd0320/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dac67d0cf9036557249aa8801b0dfed1fd0320/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=92dac67d0cf9036557249aa8801b0dfed1fd0320", "patch": "@@ -4,7 +4,7 @@ mod highlights;\n mod injector;\n \n mod format;\n-mod injection;\n+mod inject;\n mod macro_rules;\n \n mod html;\n@@ -135,9 +135,7 @@ pub(crate) fn highlight(\n                 if ast::Attr::can_cast(node.kind()) {\n                     inside_attribute = false\n                 }\n-                if let Some((new_comments, inj)) = injection::extract_doc_comments(node) {\n-                    injection::highlight_doc_comment(new_comments, inj, &mut hl);\n-                }\n+                inject::doc_comment(&mut hl, node);\n             }\n             WalkEvent::Enter(NodeOrToken::Node(node)) if ast::Attr::can_cast(node.kind()) => {\n                 inside_attribute = true\n@@ -181,7 +179,7 @@ pub(crate) fn highlight(\n         if let Some(token) = element.as_token().cloned().and_then(ast::String::cast) {\n             if token.is_raw() {\n                 let expanded = element_to_highlight.as_token().unwrap().clone();\n-                if injection::highlight_injection(&mut hl, &sema, token, expanded).is_some() {\n+                if inject::ra_fixture(&mut hl, &sema, token, expanded).is_some() {\n                     continue;\n                 }\n             }"}, {"sha": "4647a72c2ad73957098192db6604195ef3425892", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "renamed", "additions": 49, "deletions": 81, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/92dac67d0cf9036557249aa8801b0dfed1fd0320/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92dac67d0cf9036557249aa8801b0dfed1fd0320/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=92dac67d0cf9036557249aa8801b0dfed1fd0320", "patch": "@@ -1,17 +1,14 @@\n //! Syntax highlighting injections such as highlighting of documentation tests.\n \n-use std::convert::TryFrom;\n-\n use hir::Semantics;\n use ide_db::call_info::ActiveParameter;\n-use itertools::Itertools;\n use syntax::{ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize};\n \n use crate::{Analysis, HlMod, HlRange, HlTag, RootDatabase};\n \n use super::{highlights::Highlights, injector::Injector};\n \n-pub(super) fn highlight_injection(\n+pub(super) fn ra_fixture(\n     hl: &mut Highlights,\n     sema: &Semantics<RootDatabase>,\n     literal: ast::String,\n@@ -84,107 +81,78 @@ const RUSTDOC_FENCE_TOKENS: &[&'static str] = &[\n     \"edition2021\",\n ];\n \n-/// Extracts Rust code from documentation comments as well as a mapping from\n-/// the extracted source code back to the original source ranges.\n-/// Lastly, a vector of new comment highlight ranges (spanning only the\n-/// comment prefix) is returned which is used in the syntax highlighting\n-/// injection to replace the previous (line-spanning) comment ranges.\n-pub(super) fn extract_doc_comments(node: &SyntaxNode) -> Option<(Vec<HlRange>, Injector)> {\n+/// Injection of syntax highlighting of doctests.\n+pub(super) fn doc_comment(hl: &mut Highlights, node: &SyntaxNode) {\n+    let doc_comments = node\n+        .children_with_tokens()\n+        .filter_map(|it| it.into_token().and_then(ast::Comment::cast))\n+        .filter(|it| it.kind().doc.is_some());\n+\n+    if !doc_comments.clone().any(|it| it.text().contains(RUSTDOC_FENCE)) {\n+        return;\n+    }\n+\n     let mut inj = Injector::default();\n-    // wrap the doctest into function body to get correct syntax highlighting\n-    let prefix = \"fn doctest() {\\n\";\n-    let suffix = \"}\\n\";\n+    inj.add_unmapped(\"fn doctest() {\\n\");\n \n-    let mut line_start = TextSize::of(prefix);\n     let mut is_codeblock = false;\n     let mut is_doctest = false;\n+\n     // Replace the original, line-spanning comment ranges by new, only comment-prefix\n     // spanning comment ranges.\n     let mut new_comments = Vec::new();\n-\n-    inj.add_unmapped(prefix);\n-    let doctest = node\n-        .children_with_tokens()\n-        .filter_map(|el| el.into_token().and_then(ast::Comment::cast))\n-        .filter(|comment| comment.kind().doc.is_some())\n-        .filter(|comment| {\n-            if let Some(idx) = comment.text().find(RUSTDOC_FENCE) {\n+    for comment in doc_comments {\n+        match comment.text().find(RUSTDOC_FENCE) {\n+            Some(idx) => {\n                 is_codeblock = !is_codeblock;\n                 // Check whether code is rust by inspecting fence guards\n                 let guards = &comment.text()[idx + RUSTDOC_FENCE.len()..];\n                 let is_rust =\n                     guards.split(',').all(|sub| RUSTDOC_FENCE_TOKENS.contains(&sub.trim()));\n                 is_doctest = is_codeblock && is_rust;\n-                false\n-            } else {\n-                is_doctest\n+                continue;\n             }\n-        })\n-        .map(|comment| {\n-            let prefix_len = comment.prefix().len();\n-            let line: &str = comment.text().as_str();\n-            let range = comment.syntax().text_range();\n-\n-            // whitespace after comment is ignored\n-            let pos = if let Some(ws) = line.chars().nth(prefix_len).filter(|c| c.is_whitespace()) {\n-                prefix_len + ws.len_utf8()\n-            } else {\n-                prefix_len\n-            };\n-\n-            // lines marked with `#` should be ignored in output, we skip the `#` char\n-            let pos = if let Some(ws) = line.chars().nth(pos).filter(|&c| c == '#') {\n-                pos + ws.len_utf8()\n-            } else {\n-                pos\n-            };\n-\n-            new_comments.push(HlRange {\n-                range: TextRange::new(\n-                    range.start(),\n-                    range.start() + TextSize::try_from(pos).unwrap(),\n-                ),\n-                highlight: HlTag::Comment | HlMod::Documentation,\n-                binding_hash: None,\n-            });\n-            line_start += range.len() - TextSize::try_from(pos).unwrap();\n-            line_start += TextSize::of(\"\\n\");\n-\n-            inj.add(\n-                &line[pos..],\n-                TextRange::new(range.start() + TextSize::try_from(pos).unwrap(), range.end()),\n-            );\n-            inj.add_unmapped(\"\\n\");\n-            line[pos..].to_owned()\n-        })\n-        .join(\"\\n\");\n-    inj.add_unmapped(suffix);\n-\n-    if doctest.is_empty() {\n-        return None;\n-    }\n+            None if !is_doctest => continue,\n+            None => (),\n+        }\n \n-    Some((new_comments, inj))\n-}\n+        let line: &str = comment.text().as_str();\n+        let range = comment.syntax().text_range();\n \n-/// Injection of syntax highlighting of doctests.\n-pub(super) fn highlight_doc_comment(\n-    new_comments: Vec<HlRange>,\n-    inj: Injector,\n-    stack: &mut Highlights,\n-) {\n-    let (analysis, tmp_file_id) = Analysis::from_single_file(inj.text().to_string());\n-    for comment in new_comments {\n-        stack.add(comment);\n+        let mut pos = TextSize::of(comment.prefix());\n+        // whitespace after comment is ignored\n+        if let Some(ws) = line[pos.into()..].chars().next().filter(|c| c.is_whitespace()) {\n+            pos += TextSize::of(ws);\n+        }\n+        // lines marked with `#` should be ignored in output, we skip the `#` char\n+        if let Some(ws) = line[pos.into()..].chars().next().filter(|&c| c == '#') {\n+            pos += TextSize::of(ws);\n+        }\n+\n+        new_comments.push(TextRange::at(range.start(), pos));\n+\n+        inj.add(&line[pos.into()..], TextRange::new(range.start() + pos, range.end()));\n+        inj.add_unmapped(\"\\n\");\n     }\n+    inj.add_unmapped(\"\\n}\");\n+\n+    let (analysis, tmp_file_id) = Analysis::from_single_file(inj.text().to_string());\n \n     for h in analysis.with_db(|db| super::highlight(db, tmp_file_id, None, true)).unwrap() {\n         for r in inj.map_range_up(h.range) {\n-            stack.add(HlRange {\n+            hl.add(HlRange {\n                 range: r,\n                 highlight: h.highlight | HlMod::Injected,\n                 binding_hash: h.binding_hash,\n             });\n         }\n     }\n+\n+    for range in new_comments {\n+        hl.add(HlRange {\n+            range,\n+            highlight: HlTag::Comment | HlMod::Documentation,\n+            binding_hash: None,\n+        });\n+    }\n }", "previous_filename": "crates/ide/src/syntax_highlighting/injection.rs"}]}