{"sha": "557df6ff3f90196417df7c7a9903c5dfd09a4f47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1N2RmNmZmM2Y5MDE5NjQxN2RmN2M3YTk5MDNjNWRmZDA5YTRmNDc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-20T11:49:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-20T11:50:40Z"}, "message": "Use correct HirFileId in find_related_test", "tree": {"sha": "fa86880a3104dec7813e8e972df18ea0d5faa5ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa86880a3104dec7813e8e972df18ea0d5faa5ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/557df6ff3f90196417df7c7a9903c5dfd09a4f47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/557df6ff3f90196417df7c7a9903c5dfd09a4f47", "html_url": "https://github.com/rust-lang/rust/commit/557df6ff3f90196417df7c7a9903c5dfd09a4f47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/557df6ff3f90196417df7c7a9903c5dfd09a4f47/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7342dcf0b0e4ff24a683424b1308b062d062dfe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7342dcf0b0e4ff24a683424b1308b062d062dfe0", "html_url": "https://github.com/rust-lang/rust/commit/7342dcf0b0e4ff24a683424b1308b062d062dfe0"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "68b52ddbc49383582845317468738dca7d633419", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/557df6ff3f90196417df7c7a9903c5dfd09a4f47/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557df6ff3f90196417df7c7a9903c5dfd09a4f47/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=557df6ff3f90196417df7c7a9903c5dfd09a4f47", "patch": "@@ -173,6 +173,10 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_node_at_offset(node, offset).find_map(N::cast)\n     }\n \n+    pub fn hir_file_for(&self, syntax_node: &SyntaxNode) -> HirFileId {\n+        self.imp.find_file(syntax_node.clone()).file_id\n+    }\n+\n     pub fn original_range(&self, node: &SyntaxNode) -> FileRange {\n         self.imp.original_range(node)\n     }"}, {"sha": "4c09b2ab1951b9fbc53e142ee670d2c94125a764", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/557df6ff3f90196417df7c7a9903c5dfd09a4f47/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557df6ff3f90196417df7c7a9903c5dfd09a4f47/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=557df6ff3f90196417df7c7a9903c5dfd09a4f47", "patch": "@@ -22,7 +22,7 @@ use either::Either;\n pub use mbe::{ExpandError, ExpandResult};\n pub use parser::FragmentKind;\n \n-use std::{hash::Hash, sync::Arc};\n+use std::{hash::Hash, iter, sync::Arc};\n \n use base_db::{impl_intern_key, salsa, CrateId, FileId, FileRange};\n use syntax::{\n@@ -454,7 +454,7 @@ impl InFile<SyntaxNode> {\n         self,\n         db: &dyn db::AstDatabase,\n     ) -> impl Iterator<Item = InFile<SyntaxNode>> + '_ {\n-        std::iter::successors(Some(self), move |node| match node.value.parent() {\n+        iter::successors(Some(self), move |node| match node.value.parent() {\n             Some(parent) => Some(node.with_value(parent)),\n             None => {\n                 let parent_node = node.file_id.call_node(db)?;\n@@ -570,19 +570,14 @@ impl<N: AstNode> InFile<N> {\n     where\n         N: 'db,\n     {\n-        std::iter::successors(Some(self), move |node| {\n+        iter::successors(Some(self), move |node| {\n             let InFile { file_id, value } = node.file_id.call_node(db)?;\n             N::cast(value).map(|n| InFile::new(file_id, n))\n         })\n     }\n \n     pub fn node_with_attributes(self, db: &dyn db::AstDatabase) -> InFile<N> {\n-        std::iter::successors(Some(self), move |node| {\n-            let InFile { file_id, value } = node.file_id.call_node(db)?;\n-            N::cast(value).map(|n| InFile::new(file_id, n))\n-        })\n-        .last()\n-        .unwrap()\n+        self.nodes_with_attributes(db).last().unwrap()\n     }\n }\n "}, {"sha": "d2350db037720213c9f99d9a42fbb104b99ec263", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/557df6ff3f90196417df7c7a9903c5dfd09a4f47/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557df6ff3f90196417df7c7a9903c5dfd09a4f47/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=557df6ff3f90196417df7c7a9903c5dfd09a4f47", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n use ast::NameOwner;\n use cfg::CfgExpr;\n use either::Either;\n-use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, Semantics};\n+use hir::{AsAssocItem, HasAttrs, HasSource, HirDisplay, InFile, Semantics};\n use ide_assists::utils::test_related_attribute;\n use ide_db::{\n     base_db::{FilePosition, FileRange},\n@@ -232,22 +232,21 @@ fn find_related_tests(\n             let functions = refs.iter().filter_map(|(range, _)| {\n                 let token = file.token_at_offset(range.start()).next()?;\n                 let token = sema.descend_into_macros(token);\n-                // FIXME: This is the wrong file_id\n                 token\n                     .ancestors()\n                     .find_map(ast::Fn::cast)\n-                    .map(|f| hir::InFile::new(file_id.into(), f))\n+                    .map(|f| hir::InFile::new(sema.hir_file_for(f.syntax()), f))\n             });\n \n             for fn_def in functions {\n                 // #[test/bench] expands to just the item causing us to lose the attribute, so recover them by going out of the attribute\n-                let fn_def = fn_def.node_with_attributes(sema.db);\n-                if let Some(runnable) = as_test_runnable(sema, &fn_def.value) {\n+                let InFile { value: fn_def, .. } = &fn_def.node_with_attributes(sema.db);\n+                if let Some(runnable) = as_test_runnable(sema, fn_def) {\n                     // direct test\n                     tests.insert(runnable);\n-                } else if let Some(module) = parent_test_module(sema, &fn_def.value) {\n+                } else if let Some(module) = parent_test_module(sema, fn_def) {\n                     // indirect test\n-                    find_related_tests_in_module(sema, &fn_def.value, &module, tests);\n+                    find_related_tests_in_module(sema, fn_def, &module, tests);\n                 }\n             }\n         }"}]}