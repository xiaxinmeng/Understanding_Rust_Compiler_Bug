{"sha": "cc527464bb3c891e062c58cd954c63b556d059ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNTI3NDY0YmIzYzg5MWUwNjJjNThjZDk1NGM2M2I1NTZkMDU5ZWM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-05T17:56:11Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-06-06T10:35:56Z"}, "message": "Make visit_place traverse place and have visit_place_base and visit_projection doing the real work", "tree": {"sha": "54dcf5b87665315a1baf737d1f04cd795964d54c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54dcf5b87665315a1baf737d1f04cd795964d54c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc527464bb3c891e062c58cd954c63b556d059ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc527464bb3c891e062c58cd954c63b556d059ec", "html_url": "https://github.com/rust-lang/rust/commit/cc527464bb3c891e062c58cd954c63b556d059ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc527464bb3c891e062c58cd954c63b556d059ec/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f4975cd751a03c941431b35cd7a6cba6201730", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f4975cd751a03c941431b35cd7a6cba6201730", "html_url": "https://github.com/rust-lang/rust/commit/47f4975cd751a03c941431b35cd7a6cba6201730"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "2f19f591830f9d9233894f4468ece66a1222c7d1", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cc527464bb3c891e062c58cd954c63b556d059ec/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc527464bb3c891e062c58cd954c63b556d059ec/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=cc527464bb3c891e062c58cd954c63b556d059ec", "patch": "@@ -151,17 +151,17 @@ macro_rules! make_mir_visitor {\n                 self.super_place(place, context, location);\n             }\n \n-            fn visit_projection(&mut self,\n-                                place: & $($mutability)? Projection<'tcx>,\n+            fn visit_place_base(&mut self,\n+                                place_base: & $($mutability)? PlaceBase<'tcx>,\n                                 context: PlaceContext,\n                                 location: Location) {\n-                self.super_projection(place, context, location);\n+                self.super_place_base(place_base, context, location);\n             }\n \n-            fn visit_projection_elem(&mut self,\n-                                     place: & $($mutability)? PlaceElem<'tcx>,\n-                                     location: Location) {\n-                self.super_projection_elem(place, location);\n+            fn visit_projection(&mut self,\n+                                place: & $($mutability)? Projection<'tcx>,\n+                                location: Location) {\n+                self.super_projection(place, location);\n             }\n \n             fn visit_constant(&mut self,\n@@ -676,36 +676,40 @@ macro_rules! make_mir_visitor {\n                             context: PlaceContext,\n                             location: Location) {\n                 match place {\n-                    Place::Base(PlaceBase::Local(local)) => {\n-                        self.visit_local(local, context, location);\n-                    }\n-                    Place::Base(PlaceBase::Static(box Static { kind: _, ty })) => {\n-                        self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n+                    Place::Base(place_base) => {\n+                        self.visit_place_base(place_base, context, location);\n                     }\n                     Place::Projection(proj) => {\n-                        self.visit_projection(proj, context, location);\n+                        let context = if context.is_mutating_use() {\n+                            PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+                        } else {\n+                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n+                        };\n+\n+                        self.visit_place(& $($mutability)? proj.base, context, location);\n+                        self.visit_projection(proj, location);\n                     }\n                 }\n             }\n \n-            fn super_projection(&mut self,\n-                                proj: & $($mutability)? Projection<'tcx>,\n+            fn super_place_base(&mut self,\n+                                place_base: & $($mutability)? PlaceBase<'tcx>,\n                                 context: PlaceContext,\n                                 location: Location) {\n-                let Projection { base, elem } = proj;\n-                let context = if context.is_mutating_use() {\n-                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                } else {\n-                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                };\n-                self.visit_place(base, context, location);\n-                self.visit_projection_elem(elem, location);\n+                match place_base {\n+                    PlaceBase::Local(local) => {\n+                        self.visit_local(local, context, location);\n+                    }\n+                    PlaceBase::Static(box Static { kind: _, ty }) => {\n+                        self.visit_ty(& $($mutability)? *ty, TyContext::Location(location));\n+                    }\n+                }\n             }\n \n-            fn super_projection_elem(&mut self,\n-                                     proj: & $($mutability)? PlaceElem<'tcx>,\n-                                     location: Location) {\n-                match proj {\n+            fn super_projection(&mut self,\n+                                proj: & $($mutability)? Projection<'tcx>,\n+                                location: Location) {\n+                match & $($mutability)? proj.elem {\n                     ProjectionElem::Deref => {\n                     }\n                     ProjectionElem::Subslice { from: _, to: _ } => {"}]}