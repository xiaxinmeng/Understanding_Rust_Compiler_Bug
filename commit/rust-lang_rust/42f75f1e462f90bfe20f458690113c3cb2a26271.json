{"sha": "42f75f1e462f90bfe20f458690113c3cb2a26271", "node_id": "C_kwDOAAsO6NoAKDQyZjc1ZjFlNDYyZjkwYmZlMjBmNDU4NjkwMTEzYzNjYjJhMjYyNzE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-07T08:42:21Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-16T14:46:40Z"}, "message": "Group some commonly passed together values into a struct", "tree": {"sha": "48a8f97af4fda779178da389e51dad48f4ce497b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a8f97af4fda779178da389e51dad48f4ce497b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f75f1e462f90bfe20f458690113c3cb2a26271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f75f1e462f90bfe20f458690113c3cb2a26271", "html_url": "https://github.com/rust-lang/rust/commit/42f75f1e462f90bfe20f458690113c3cb2a26271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f75f1e462f90bfe20f458690113c3cb2a26271/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2", "html_url": "https://github.com/rust-lang/rust/commit/f5c601492ee520d2ee4f6c133f7f4dfa7b0c13e2"}], "stats": {"total": 196, "additions": 77, "deletions": 119}, "files": [{"sha": "feb78cb0984e8d1121c9900eefd72faee4747a65", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 31, "deletions": 49, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=42f75f1e462f90bfe20f458690113c3cb2a26271", "patch": "@@ -26,6 +26,7 @@ use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorGuaranteed, PResult};\n use rustc_feature::find_gated_cfg;\n use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_interface::interface::CompilerIO;\n use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n@@ -262,10 +263,8 @@ fn run_compiler(\n                     let should_stop = print_crate_info(\n                         &***compiler.codegen_backend(),\n                         compiler.session(),\n-                        None,\n-                        compiler.output_dir(),\n-                        compiler.output_file(),\n-                        compiler.temps_dir(),\n+                        false,\n+                        compiler.io(),\n                     );\n \n                     if should_stop == Compilation::Stop {\n@@ -288,18 +287,16 @@ fn run_compiler(\n \n     interface::run_compiler(config, |compiler| {\n         let sess = compiler.session();\n-        let should_stop = print_crate_info(\n-            &***compiler.codegen_backend(),\n-            sess,\n-            Some(compiler.input()),\n-            compiler.output_dir(),\n-            compiler.output_file(),\n-            compiler.temps_dir(),\n-        )\n-        .and_then(|| {\n-            list_metadata(sess, &*compiler.codegen_backend().metadata_loader(), compiler.input())\n-        })\n-        .and_then(|| try_process_rlink(sess, compiler));\n+        let should_stop =\n+            print_crate_info(&***compiler.codegen_backend(), sess, true, compiler.io())\n+                .and_then(|| {\n+                    list_metadata(\n+                        sess,\n+                        &*compiler.codegen_backend().metadata_loader(),\n+                        &compiler.io().input,\n+                    )\n+                })\n+                .and_then(|| try_process_rlink(sess, compiler));\n \n         if should_stop == Compilation::Stop {\n             return sess.compile_status();\n@@ -315,22 +312,15 @@ fn run_compiler(\n                     queries.global_ctxt()?.enter(|tcx| {\n                         pretty::print_after_hir_lowering(\n                             tcx,\n-                            compiler.input(),\n+                            compiler.io(),\n                             &*expanded_crate,\n                             *ppm,\n-                            compiler.output_file().as_deref(),\n                         );\n                         Ok(())\n                     })?;\n                 } else {\n                     let krate = queries.parse()?.steal();\n-                    pretty::print_after_parsing(\n-                        sess,\n-                        compiler.input(),\n-                        &krate,\n-                        *ppm,\n-                        compiler.output_file().as_deref(),\n-                    );\n+                    pretty::print_after_parsing(sess, compiler.io(), &krate, *ppm);\n                 }\n                 trace!(\"finished pretty-printing\");\n                 return early_exit();\n@@ -380,9 +370,9 @@ fn run_compiler(\n                         save::process_crate(\n                             tcx,\n                             crate_name,\n-                            compiler.input(),\n+                            &compiler.io().input,\n                             None,\n-                            DumpHandler::new(compiler.output_dir().as_deref(), crate_name),\n+                            DumpHandler::new(compiler.io().output_dir.as_deref(), crate_name),\n                         )\n                     });\n                 }\n@@ -556,7 +546,7 @@ fn show_content_with_pager(content: &str) {\n \n pub fn try_process_rlink(sess: &Session, compiler: &interface::Compiler) -> Compilation {\n     if sess.opts.unstable_opts.link_only {\n-        if let Input::File(file) = compiler.input() {\n+        if let Input::File(file) = &compiler.io().input {\n             // FIXME: #![crate_type] and #![crate_name] support not implemented yet\n             sess.init_crate_types(collect_crate_types(sess, &[]));\n             let outputs = compiler.build_output_filenames(sess, &[]);\n@@ -623,10 +613,8 @@ pub fn list_metadata(\n fn print_crate_info(\n     codegen_backend: &dyn CodegenBackend,\n     sess: &Session,\n-    input: Option<&Input>,\n-    odir: &Option<PathBuf>,\n-    ofile: &Option<PathBuf>,\n-    temps_dir: &Option<PathBuf>,\n+    parse_attrs: bool,\n+    io: &CompilerIO,\n ) -> Compilation {\n     use rustc_session::config::PrintRequest::*;\n     // NativeStaticLibs and LinkArgs are special - printed during linking\n@@ -635,18 +623,17 @@ fn print_crate_info(\n         return Compilation::Continue;\n     }\n \n-    let attrs = match input {\n-        None => None,\n-        Some(input) => {\n-            let result = parse_crate_attrs(sess, input);\n-            match result {\n-                Ok(attrs) => Some(attrs),\n-                Err(mut parse_error) => {\n-                    parse_error.emit();\n-                    return Compilation::Stop;\n-                }\n+    let attrs = if parse_attrs {\n+        let result = parse_crate_attrs(sess, &io.input);\n+        match result {\n+            Ok(attrs) => Some(attrs),\n+            Err(mut parse_error) => {\n+                parse_error.emit();\n+                return Compilation::Stop;\n             }\n         }\n+    } else {\n+        None\n     };\n     for req in &sess.opts.prints {\n         match *req {\n@@ -661,14 +648,9 @@ fn print_crate_info(\n                 println!(\"{}\", serde_json::to_string_pretty(&sess.target.to_json()).unwrap());\n             }\n             FileNames | CrateName => {\n-                let input = input.unwrap_or_else(|| {\n-                    early_error(ErrorOutputType::default(), \"no input file provided\")\n-                });\n                 let attrs = attrs.as_ref().unwrap();\n-                let t_outputs = rustc_interface::util::build_output_filenames(\n-                    input, odir, ofile, temps_dir, attrs, sess,\n-                );\n-                let id = rustc_session::output::find_crate_name(sess, attrs, input);\n+                let t_outputs = rustc_interface::util::build_output_filenames(io, attrs, sess);\n+                let id = rustc_session::output::find_crate_name(sess, attrs, &io.input);\n                 if *req == PrintRequest::CrateName {\n                     println!(\"{id}\");\n                     continue;"}, {"sha": "dd24f0bc98f10f47b3817d3293bb85211baaf333", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=42f75f1e462f90bfe20f458690113c3cb2a26271", "patch": "@@ -6,6 +6,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir_pretty as pprust_hir;\n+use rustc_interface::interface::CompilerIO;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::mir::{write_mir_graphviz, write_mir_pretty};\n use rustc_middle::ty::{self, TyCtxt};\n@@ -16,7 +17,7 @@ use rustc_span::FileName;\n \n use std::cell::Cell;\n use std::fmt::Write;\n-use std::path::Path;\n+use std::path::PathBuf;\n \n pub use self::PpMode::*;\n pub use self::PpSourceMode::*;\n@@ -358,7 +359,7 @@ fn get_source(input: &Input, sess: &Session) -> (String, FileName) {\n     (src, src_name)\n }\n \n-fn write_or_print(out: &str, ofile: Option<&Path>, sess: &Session) {\n+fn write_or_print(out: &str, ofile: &Option<PathBuf>, sess: &Session) {\n     match ofile {\n         None => print!(\"{out}\"),\n         Some(p) => {\n@@ -372,14 +373,8 @@ fn write_or_print(out: &str, ofile: Option<&Path>, sess: &Session) {\n     }\n }\n \n-pub fn print_after_parsing(\n-    sess: &Session,\n-    input: &Input,\n-    krate: &ast::Crate,\n-    ppm: PpMode,\n-    ofile: Option<&Path>,\n-) {\n-    let (src, src_name) = get_source(input, sess);\n+pub fn print_after_parsing(sess: &Session, io: &CompilerIO, krate: &ast::Crate, ppm: PpMode) {\n+    let (src, src_name) = get_source(&io.input, sess);\n \n     let out = match ppm {\n         Source(s) => {\n@@ -407,22 +402,21 @@ pub fn print_after_parsing(\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, ofile, sess);\n+    write_or_print(&out, &io.output_file, sess);\n }\n \n pub fn print_after_hir_lowering<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    input: &Input,\n+    io: &CompilerIO,\n     krate: &ast::Crate,\n     ppm: PpMode,\n-    ofile: Option<&Path>,\n ) {\n     if ppm.needs_analysis() {\n-        abort_on_err(print_with_analysis(tcx, ppm, ofile), tcx.sess);\n+        abort_on_err(print_with_analysis(tcx, ppm, &io.output_file), tcx.sess);\n         return;\n     }\n \n-    let (src, src_name) = get_source(input, tcx.sess);\n+    let (src, src_name) = get_source(&io.input, tcx.sess);\n \n     let out = match ppm {\n         Source(s) => {\n@@ -474,7 +468,7 @@ pub fn print_after_hir_lowering<'tcx>(\n         _ => unreachable!(),\n     };\n \n-    write_or_print(&out, ofile, tcx.sess);\n+    write_or_print(&out, &io.output_file, tcx.sess);\n }\n \n // In an ideal world, this would be a public function called by the driver after\n@@ -484,7 +478,7 @@ pub fn print_after_hir_lowering<'tcx>(\n fn print_with_analysis(\n     tcx: TyCtxt<'_>,\n     ppm: PpMode,\n-    ofile: Option<&Path>,\n+    ofile: &Option<PathBuf>,\n ) -> Result<(), ErrorGuaranteed> {\n     tcx.analysis(())?;\n     let out = match ppm {"}, {"sha": "e3c4f9052cebe41abce6b75f5285f00d6f971b60", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 17, "deletions": 27, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=42f75f1e462f90bfe20f458690113c3cb2a26271", "patch": "@@ -35,33 +35,28 @@ pub type Result<T> = result::Result<T, ErrorGuaranteed>;\n pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n-    pub(crate) input: Input,\n-    pub(crate) output_dir: Option<PathBuf>,\n-    pub(crate) output_file: Option<PathBuf>,\n-    pub(crate) temps_dir: Option<PathBuf>,\n+    pub(crate) io: CompilerIO,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>>,\n     pub(crate) override_queries:\n         Option<fn(&Session, &mut ty::query::Providers, &mut ty::query::ExternProviders)>,\n }\n \n+pub struct CompilerIO {\n+    pub input: Input,\n+    pub output_dir: Option<PathBuf>,\n+    pub output_file: Option<PathBuf>,\n+    pub temps_dir: Option<PathBuf>,\n+}\n+\n impl Compiler {\n     pub fn session(&self) -> &Lrc<Session> {\n         &self.sess\n     }\n     pub fn codegen_backend(&self) -> &Lrc<Box<dyn CodegenBackend>> {\n         &self.codegen_backend\n     }\n-    pub fn input(&self) -> &Input {\n-        &self.input\n-    }\n-    pub fn output_dir(&self) -> &Option<PathBuf> {\n-        &self.output_dir\n-    }\n-    pub fn output_file(&self) -> &Option<PathBuf> {\n-        &self.output_file\n-    }\n-    pub fn temps_dir(&self) -> &Option<PathBuf> {\n-        &self.temps_dir\n+    pub fn io(&self) -> &CompilerIO {\n+        &self.io\n     }\n     pub fn register_lints(&self) -> &Option<Box<dyn Fn(&Session, &mut LintStore) + Send + Sync>> {\n         &self.register_lints\n@@ -71,14 +66,7 @@ impl Compiler {\n         sess: &Session,\n         attrs: &[ast::Attribute],\n     ) -> OutputFilenames {\n-        util::build_output_filenames(\n-            &self.input,\n-            &self.output_dir,\n-            &self.output_file,\n-            &self.temps_dir,\n-            attrs,\n-            sess,\n-        )\n+        util::build_output_filenames(&self.io, attrs, sess)\n     }\n }\n \n@@ -305,10 +293,12 @@ pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Se\n             let compiler = Compiler {\n                 sess: Lrc::new(sess),\n                 codegen_backend: Lrc::new(codegen_backend),\n-                input: config.input,\n-                output_dir: config.output_dir,\n-                output_file: config.output_file,\n-                temps_dir,\n+                io: CompilerIO {\n+                    input: config.input,\n+                    output_dir: config.output_dir,\n+                    output_file: config.output_file,\n+                    temps_dir,\n+                },\n                 register_lints: config.register_lints,\n                 override_queries: config.override_queries,\n             };"}, {"sha": "8545cbefa262f237520d6f660034c77d4a400400", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=42f75f1e462f90bfe20f458690113c3cb2a26271", "patch": "@@ -673,20 +673,13 @@ pub fn prepare_outputs(\n     let _timer = sess.timer(\"prepare_outputs\");\n \n     // FIXME: rustdoc passes &[] instead of &krate.attrs here\n-    let outputs = util::build_output_filenames(\n-        &compiler.input,\n-        &compiler.output_dir,\n-        &compiler.output_file,\n-        &compiler.temps_dir,\n-        &krate.attrs,\n-        sess,\n-    );\n+    let outputs = util::build_output_filenames(&compiler.io, &krate.attrs, sess);\n \n     let output_paths =\n-        generated_output_paths(sess, &outputs, compiler.output_file.is_some(), crate_name);\n+        generated_output_paths(sess, &outputs, compiler.io.output_file.is_some(), crate_name);\n \n     // Ensure the source file isn't accidentally overwritten during compilation.\n-    if let Some(ref input_path) = compiler.input.opt_path() {\n+    if let Some(ref input_path) = compiler.io.input.opt_path() {\n         if sess.opts.will_create_output_file() {\n             if output_contains_path(&output_paths, input_path) {\n                 let reported = sess.emit_err(InputFileWouldBeOverWritten { path: input_path });\n@@ -700,7 +693,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    if let Some(ref dir) = compiler.temps_dir {\n+    if let Some(ref dir) = compiler.io.temps_dir {\n         if fs::create_dir_all(dir).is_err() {\n             let reported = sess.emit_err(TempsDirError);\n             return Err(reported);\n@@ -713,7 +706,7 @@ pub fn prepare_outputs(\n         && sess.opts.output_types.len() == 1;\n \n     if !only_dep_info {\n-        if let Some(ref dir) = compiler.output_dir {\n+        if let Some(ref dir) = compiler.io.output_dir {\n             if fs::create_dir_all(dir).is_err() {\n                 let reported = sess.emit_err(OutDirError);\n                 return Err(reported);"}, {"sha": "32348fd72edd3752cc50cfbf1f717917c148a56e", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=42f75f1e462f90bfe20f458690113c3cb2a26271", "patch": "@@ -129,7 +129,7 @@ impl<'tcx> Queries<'tcx> {\n \n     pub fn parse(&self) -> Result<QueryResult<'_, ast::Crate>> {\n         self.parse.compute(|| {\n-            passes::parse(self.session(), &self.compiler.input)\n+            passes::parse(self.session(), &self.compiler.io.input)\n                 .map_err(|mut parse_error| parse_error.emit())\n         })\n     }\n@@ -165,7 +165,7 @@ impl<'tcx> Queries<'tcx> {\n                 let parse_result = self.parse()?;\n                 let krate = parse_result.borrow();\n                 // parse `#[crate_name]` even if `--crate-name` was passed, to make sure it matches.\n-                find_crate_name(self.session(), &krate.attrs, &self.compiler.input)\n+                find_crate_name(self.session(), &krate.attrs, &self.compiler.io.input)\n             })\n         })\n     }"}, {"sha": "f19b03c75ebfd1379635db8d15d0787a56c0d6c4", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f75f1e462f90bfe20f458690113c3cb2a26271/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=42f75f1e462f90bfe20f458690113c3cb2a26271", "patch": "@@ -8,7 +8,7 @@ use rustc_parse::validate_attr;\n use rustc_session as session;\n use rustc_session::config::CheckCfg;\n use rustc_session::config::{self, CrateType};\n-use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::config::{ErrorOutputType, OutputFilenames};\n use rustc_session::filesearch::sysroot_candidates;\n use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n@@ -25,6 +25,8 @@ use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::OnceLock;\n use std::thread;\n \n+use crate::interface::CompilerIO;\n+\n /// Function pointer type that constructs a new CodegenBackend.\n pub type MakeBackendFn = fn() -> Box<dyn CodegenBackend>;\n \n@@ -487,33 +489,30 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<C\n }\n \n pub fn build_output_filenames(\n-    input: &Input,\n-    odir: &Option<PathBuf>,\n-    ofile: &Option<PathBuf>,\n-    temps_dir: &Option<PathBuf>,\n+    io: &CompilerIO,\n     attrs: &[ast::Attribute],\n     sess: &Session,\n ) -> OutputFilenames {\n-    match *ofile {\n+    match io.output_file {\n         None => {\n             // \"-\" as input file will cause the parser to read from stdin so we\n             // have to make up a name\n             // We want to toss everything after the final '.'\n-            let dirpath = (*odir).as_ref().cloned().unwrap_or_default();\n+            let dirpath = io.output_dir.clone().unwrap_or_default();\n \n             // If a crate name is present, we use it as the link name\n             let stem = sess\n                 .opts\n                 .crate_name\n                 .clone()\n                 .or_else(|| rustc_attr::find_crate_name(sess, attrs).map(|n| n.to_string()))\n-                .unwrap_or_else(|| input.filestem().to_owned());\n+                .unwrap_or_else(|| io.input.filestem().to_owned());\n \n             OutputFilenames::new(\n                 dirpath,\n                 stem,\n                 None,\n-                temps_dir.clone(),\n+                io.temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )\n@@ -534,15 +533,15 @@ pub fn build_output_filenames(\n                 }\n                 Some(out_file.clone())\n             };\n-            if *odir != None {\n+            if io.output_dir != None {\n                 sess.warn(\"ignoring --out-dir flag due to -o flag\");\n             }\n \n             OutputFilenames::new(\n                 out_file.parent().unwrap_or_else(|| Path::new(\"\")).to_path_buf(),\n                 out_file.file_stem().unwrap_or_default().to_str().unwrap().to_string(),\n                 ofile,\n-                temps_dir.clone(),\n+                io.temps_dir.clone(),\n                 sess.opts.cg.extra_filename.clone(),\n                 sess.opts.output_types.clone(),\n             )"}, {"sha": "d52c7819c567a180980b53f0d8f45af4ec35b206", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42f75f1e462f90bfe20f458690113c3cb2a26271/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f75f1e462f90bfe20f458690113c3cb2a26271/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=42f75f1e462f90bfe20f458690113c3cb2a26271", "patch": "@@ -75,7 +75,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n             let mut config = self.miri_config.clone();\n \n             // Add filename to `miri` arguments.\n-            config.args.insert(0, compiler.input().filestem().to_string());\n+            config.args.insert(0, compiler.io().input.filestem().to_string());\n \n             // Adjust working directory for interpretation.\n             if let Some(cwd) = env::var_os(\"MIRI_CWD\") {"}]}