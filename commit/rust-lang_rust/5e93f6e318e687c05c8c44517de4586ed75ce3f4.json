{"sha": "5e93f6e318e687c05c8c44517de4586ed75ce3f4", "node_id": "C_kwDOAAsO6NoAKDVlOTNmNmUzMThlNjg3YzA1YzhjNDQ1MTdkZTQ1ODZlZDc1Y2UzZjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-05T00:38:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-05T00:38:01Z"}, "message": "Auto merge of #91539 - matthiaskrgr:rollup-rnl10yb, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #89642 (environ on macos uses directly libc which has the correct signature.)\n - #90022 (Explain why `Self` is invalid in generic parameters)\n - #90023 (Postpone the evaluation of constant expressions that depend on inference variables)\n - #91215 (Implement VecDeque::retain_mut)\n - #91355 (std: Stabilize the `thread_local_const_init` feature)\n - #91528 (LLVM support .insn directive)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ac83a3ac1202cb5e2f6ba5b1f46a7c59d3885e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac83a3ac1202cb5e2f6ba5b1f46a7c59d3885e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e93f6e318e687c05c8c44517de4586ed75ce3f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e93f6e318e687c05c8c44517de4586ed75ce3f4", "html_url": "https://github.com/rust-lang/rust/commit/5e93f6e318e687c05c8c44517de4586ed75ce3f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e93f6e318e687c05c8c44517de4586ed75ce3f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efec545293b9263be9edfb283a7aa66350b3acbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/efec545293b9263be9edfb283a7aa66350b3acbf", "html_url": "https://github.com/rust-lang/rust/commit/efec545293b9263be9edfb283a7aa66350b3acbf"}, {"sha": "2ba5917cbce8fd4888214b155f8873b07b13e3ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba5917cbce8fd4888214b155f8873b07b13e3ea", "html_url": "https://github.com/rust-lang/rust/commit/2ba5917cbce8fd4888214b155f8873b07b13e3ea"}], "stats": {"total": 484, "additions": 396, "deletions": 88}, "files": [{"sha": "32c02033dc9b93e4c1f77abbe944ce5d2774c5b5", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 66, "deletions": 26, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -1,5 +1,6 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n+use crate::rustc_middle::ty::TypeFoldable;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n@@ -400,36 +401,75 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GenericArgKind::Const(ct) => {\n-                if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n-                    let origin =\n-                        self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n-                    if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n-                        origin.kind\n-                    {\n-                        return InferenceDiagnosticsData {\n-                            name: name.to_string(),\n+                match ct.val {\n+                    ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+                        let origin = self\n+                            .inner\n+                            .borrow_mut()\n+                            .const_unification_table()\n+                            .probe_value(vid)\n+                            .origin;\n+                        if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n+                            origin.kind\n+                        {\n+                            return InferenceDiagnosticsData {\n+                                name: name.to_string(),\n+                                span: Some(origin.span),\n+                                kind: UnderspecifiedArgKind::Const { is_parameter: true },\n+                                parent: InferenceDiagnosticsParentData::for_def_id(\n+                                    self.tcx, def_id,\n+                                ),\n+                            };\n+                        }\n+\n+                        debug_assert!(!origin.span.is_dummy());\n+                        let mut s = String::new();\n+                        let mut printer =\n+                            ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n+                        if let Some(highlight) = highlight {\n+                            printer.region_highlight_mode = highlight;\n+                        }\n+                        let _ = ct.print(printer);\n+                        InferenceDiagnosticsData {\n+                            name: s,\n                             span: Some(origin.span),\n-                            kind: UnderspecifiedArgKind::Const { is_parameter: true },\n-                            parent: InferenceDiagnosticsParentData::for_def_id(self.tcx, def_id),\n-                        };\n+                            kind: UnderspecifiedArgKind::Const { is_parameter: false },\n+                            parent: None,\n+                        }\n                     }\n-\n-                    debug_assert!(!origin.span.is_dummy());\n-                    let mut s = String::new();\n-                    let mut printer =\n-                        ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n-                    if let Some(highlight) = highlight {\n-                        printer.region_highlight_mode = highlight;\n+                    ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                        substs_: Some(substs), ..\n+                    }) => {\n+                        assert!(substs.has_infer_types_or_consts());\n+\n+                        // FIXME: We only use the first inference variable we encounter in\n+                        // `substs` here, this gives insufficiently informative diagnostics\n+                        // in case there are multiple inference variables\n+                        for s in substs.iter() {\n+                            match s.unpack() {\n+                                GenericArgKind::Type(t) => match t.kind() {\n+                                    ty::Infer(_) => {\n+                                        return self.extract_inference_diagnostics_data(s, None);\n+                                    }\n+                                    _ => {}\n+                                },\n+                                GenericArgKind::Const(c) => match c.val {\n+                                    ty::ConstKind::Infer(InferConst::Var(_)) => {\n+                                        return self.extract_inference_diagnostics_data(s, None);\n+                                    }\n+                                    _ => {}\n+                                },\n+                                _ => {}\n+                            }\n+                        }\n+                        bug!(\n+                            \"expected an inference variable in substs of unevaluated const {:?}\",\n+                            ct\n+                        );\n                     }\n-                    let _ = ct.print(printer);\n-                    InferenceDiagnosticsData {\n-                        name: s,\n-                        span: Some(origin.span),\n-                        kind: UnderspecifiedArgKind::Const { is_parameter: false },\n-                        parent: None,\n+                    _ => {\n+                        bug!(\"unexpect const: {:?}\", ct);\n                     }\n-                } else {\n-                    bug!(\"unexpect const: {:?}\", ct);\n                 }\n             }\n             GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),"}, {"sha": "48dfa0b6342d9d90734943ba038904ba6039ffae", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -21,6 +21,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::interpret::EvalToConstValueResult;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n@@ -1584,13 +1585,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        let mut original_values = OriginalQueryValues::default();\n-        let canonical = self.canonicalize_query((param_env, unevaluated), &mut original_values);\n+        let mut substs = unevaluated.substs(self.tcx);\n+        substs = self.resolve_vars_if_possible(substs);\n+\n+        // Postpone the evaluation of constants whose substs depend on inference\n+        // variables\n+        if substs.has_infer_types_or_consts() {\n+            return Err(ErrorHandled::TooGeneric);\n+        }\n+\n+        let param_env_erased = self.tcx.erase_regions(param_env);\n+        let substs_erased = self.tcx.erase_regions(substs);\n+\n+        let unevaluated = ty::Unevaluated {\n+            def: unevaluated.def,\n+            substs_: Some(substs_erased),\n+            promoted: unevaluated.promoted,\n+        };\n \n-        let (param_env, unevaluated) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n-        self.tcx.const_eval_resolve(param_env, unevaluated, span)\n+        self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)\n     }\n \n     /// If `typ` is a type variable of some kind, resolve it one level"}, {"sha": "66d1ae1420a143d11f46ff2aaaae422cb38e4862", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -51,7 +51,6 @@\n #![feature(control_flow_enum)]\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]\n-#![feature(thread_local_const_init)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![feature(try_reserve_kind)]"}, {"sha": "07887a7a59c1db8321c026a43cda4ecb97b6562c", "filename": "compiler/rustc_parse/src/parser/generics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fgenerics.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -92,6 +92,19 @@ impl<'a> Parser<'a> {\n             let attrs = self.parse_outer_attributes()?;\n             let param =\n                 self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n+                    if this.eat_keyword_noexpect(kw::SelfUpper) {\n+                        // `Self` as a generic param is invalid. Here we emit the diagnostic and continue parsing\n+                        // as if `Self` never existed.\n+                        this.struct_span_err(\n+                            this.prev_token.span,\n+                            \"unexpected keyword `Self` in generic parameters\",\n+                        )\n+                        .note(\"you cannot use `Self` as a generic parameter because it is reserved for associated items\")\n+                        .emit();\n+\n+                        this.eat(&token::Comma);\n+                    }\n+\n                     let param = if this.check_lifetime() {\n                         let lifetime = this.expect_lifetime();\n                         // Parse lifetime parameter."}, {"sha": "0da141f6836f68a3281c963124009697b81c4eeb", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -5,7 +5,6 @@\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n-#![feature(thread_local_const_init)]\n #![feature(extern_types)]\n \n #[macro_use]"}, {"sha": "ea3d3363b80655edbfb5eb15f7e0b885356600a0", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -20,7 +20,6 @@\n #![feature(negative_impls)]\n #![feature(nll)]\n #![feature(min_specialization)]\n-#![feature(thread_local_const_init)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "42eae6a54b5311c1e6d9a3c22c6982a70bf9e207", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -2148,14 +2148,45 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     pub fn retain<F>(&mut self, mut f: F)\n     where\n         F: FnMut(&T) -> bool,\n+    {\n+        self.retain_mut(|elem| f(elem));\n+    }\n+\n+    /// Retains only the elements specified by the predicate.\n+    ///\n+    /// In other words, remove all elements `e` such that `f(&e)` returns false.\n+    /// This method operates in place, visiting each element exactly once in the\n+    /// original order, and preserves the order of the retained elements.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_retain_mut)]\n+    ///\n+    /// use std::collections::VecDeque;\n+    ///\n+    /// let mut buf = VecDeque::new();\n+    /// buf.extend(1..5);\n+    /// buf.retain_mut(|x| if *x % 2 == 0 {\n+    ///     *x += 1;\n+    ///     true\n+    /// } else {\n+    ///     false\n+    /// });\n+    /// assert_eq!(buf, [3, 5]);\n+    /// ```\n+    #[unstable(feature = \"vec_retain_mut\", issue = \"90829\")]\n+    pub fn retain_mut<F>(&mut self, mut f: F)\n+    where\n+        F: FnMut(&mut T) -> bool,\n     {\n         let len = self.len();\n         let mut idx = 0;\n         let mut cur = 0;\n \n         // Stage 1: All values are retained.\n         while cur < len {\n-            if !f(&self[cur]) {\n+            if !f(&mut self[cur]) {\n                 cur += 1;\n                 break;\n             }\n@@ -2164,7 +2195,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n         // Stage 2: Swap retained value into current idx.\n         while cur < len {\n-            if !f(&self[cur]) {\n+            if !f(&mut self[cur]) {\n                 cur += 1;\n                 continue;\n             }\n@@ -2173,7 +2204,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n             cur += 1;\n             idx += 1;\n         }\n-        // Stage 3: Trancate all values after idx.\n+        // Stage 3: Truncate all values after idx.\n         if cur != idx {\n             self.truncate(idx);\n         }"}, {"sha": "67846e78835706581d67db9adb889278312be023", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -216,10 +216,7 @@\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n #![feature(rustc_allow_const_fn_unstable)]\n-#![cfg_attr(\n-    test,\n-    feature(internal_output_capture, print_internals, update_panic_count, thread_local_const_init)\n-)]\n+#![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n     feature(slice_index_methods, coerce_unsized, sgx_platform)"}, {"sha": "8a028d99306dbae16acad8f47732e4a563a8a692", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -473,10 +473,7 @@ impl Iterator for Env {\n \n #[cfg(target_os = \"macos\")]\n pub unsafe fn environ() -> *mut *const *const c_char {\n-    extern \"C\" {\n-        fn _NSGetEnviron() -> *mut *const *const c_char;\n-    }\n-    _NSGetEnviron()\n+    libc::_NSGetEnviron() as *mut *const *const c_char\n }\n \n #[cfg(not(target_os = \"macos\"))]"}, {"sha": "c03fe116320aa4378a38a4acd7d76fb12714847a", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -178,7 +178,6 @@ macro_rules! __thread_local_inner {\n     (@key $t:ty, const $init:expr) => {{\n         #[cfg_attr(not(windows), inline)] // see comments below\n         unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n-            const _REQUIRE_UNSTABLE: () = $crate::thread::require_unstable_const_init_thread_local();\n             const INIT_EXPR: $t = $init;\n \n             // wasm without atomics maps directly to `static mut`, and dtors"}, {"sha": "64f6c7fa022fc7268392897dacbf9bb7ae47dd9b", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -204,13 +204,6 @@ pub use self::local::os::Key as __OsLocalKeyInner;\n #[doc(hidden)]\n pub use self::local::statik::Key as __StaticLocalKeyInner;\n \n-// This is only used to make thread locals with `const { .. }` initialization\n-// expressions unstable. If and/or when that syntax is stabilized with thread\n-// locals this will simply be removed.\n-#[doc(hidden)]\n-#[unstable(feature = \"thread_local_const_init\", issue = \"84223\")]\n-pub const fn require_unstable_const_init_thread_local() {}\n-\n ////////////////////////////////////////////////////////////////////////////////\n // Builder\n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "2b9078f4afae82f60c5ac0fdb4af42d269e2f2f3", "filename": "src/llvm-project", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm-project?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -1 +1 @@\n-Subproject commit 01c8b654f9a01371414d1fd69cba38b289510a9e\n+Subproject commit 2b9078f4afae82f60c5ac0fdb4af42d269e2f2f3"}, {"sha": "bebaa7754dd5a55dd061beac22bbdb5a63b8661e", "filename": "src/test/codegen/auxiliary/thread_local_aux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fcodegen%2Fauxiliary%2Fthread_local_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fcodegen%2Fauxiliary%2Fthread_local_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fauxiliary%2Fthread_local_aux.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"lib\"]\n-#![feature(thread_local_const_init)]\n \n use std::cell::Cell;\n "}, {"sha": "5ac30d949fa4e4c5aff0611d88ca4fca41a6e892", "filename": "src/test/codegen/thread-local.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fcodegen%2Fthread-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fcodegen%2Fthread-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fthread-local.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -6,7 +6,6 @@\n // ignore-android does not use #[thread_local]\n \n #![crate_type = \"lib\"]\n-#![feature(thread_local_const_init)]\n \n extern crate thread_local_aux as aux;\n "}, {"sha": "18f33acaabbba19fbcc73a699924d4c26b0cad2b", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n@@ -22,8 +21,11 @@ where\n }\n \n fn main() {\n-    // Test that we can correctly infer `T` which requires evaluating\n-    // `{ N + 1 }` which has substs containing an inference var\n+    // FIXME(generic_const_exprs): We can't correctly infer `T` which requires\n+    // evaluating `{ N + 1 }` which has substs containing an inference var\n     let mut _q = Default::default();\n+    //~^ ERROR type annotations needed\n+\n     _q = foo::<_, 2>(_q);\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "e59f1ac8027de3edde0a3324e2a32d848c99d57b", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,33 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/const_eval_resolve_canonical.rs:26:9\n+   |\n+LL |     let mut _q = Default::default();\n+   |         ^^^^^^ consider giving `_q` a type\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/const_eval_resolve_canonical.rs:29:10\n+   |\n+LL |     _q = foo::<_, 2>(_q);\n+   |          ^^^^^^^^^^^ cannot infer type\n+   |\n+note: multiple `impl`s satisfying `(): Foo<{ N + 1 }>` found\n+  --> $DIR/const_eval_resolve_canonical.rs:8:1\n+   |\n+LL | impl Foo<0> for () {\n+   | ^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl Foo<3> for () {\n+   | ^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `foo`\n+  --> $DIR/const_eval_resolve_canonical.rs:18:9\n+   |\n+LL | fn foo<T, const N: usize>(_: T) -> <() as Foo<{ N + 1 }>>::Assoc\n+   |    --- required by a bound in this\n+LL | where\n+LL |     (): Foo<{ N + 1 }>,\n+   |         ^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "65148c55ee54140bb40ae8ae550bd930898be274", "filename": "src/test/ui/const-generics/issues/issue-83249.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,23 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait Foo {\n+    const N: usize;\n+}\n+\n+impl Foo for u8 {\n+    const N: usize = 1;\n+}\n+\n+fn foo<T: Foo>(_: [u8; T::N]) -> T {\n+    todo!()\n+}\n+\n+pub fn bar() {\n+    let _: u8 = foo([0; 1]);\n+\n+    let _ = foo([0; 1]);\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "402b3aa2d61dcfca63815196aa639c036f48fae0", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-83249.rs:19:13\n+   |\n+LL |     let _ = foo([0; 1]);\n+   |         -   ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |         |\n+   |         consider giving this pattern a type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "a24596d242e0d9ad67ec5f9b4771394f0c741968", "filename": "src/test/ui/const-generics/issues/issue-83288.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83288.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,69 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+use std::{marker::PhantomData, ops::Mul};\n+\n+pub enum Nil {}\n+pub struct Cons<T, L> {\n+    _phantom: PhantomData<(T, L)>,\n+}\n+\n+pub trait Indices<const N: usize> {\n+    const RANK: usize;\n+    const NUM_ELEMS: usize;\n+}\n+\n+impl<const N: usize> Indices<N> for Nil {\n+    const RANK: usize = 0;\n+    const NUM_ELEMS: usize = 1;\n+}\n+\n+impl<T, I: Indices<N>, const N: usize> Indices<N> for Cons<T, I> {\n+    const RANK: usize = I::RANK + 1;\n+    const NUM_ELEMS: usize = I::NUM_ELEMS * N;\n+}\n+\n+pub trait Concat<J> {\n+    type Output;\n+}\n+\n+impl<J> Concat<J> for Nil {\n+    type Output = J;\n+}\n+\n+impl<T, I, J> Concat<J> for Cons<T, I>\n+where\n+    I: Concat<J>,\n+{\n+    type Output = Cons<T, <I as Concat<J>>::Output>;\n+}\n+\n+pub struct Tensor<I: Indices<N>, const N: usize>\n+where\n+    [u8; I::NUM_ELEMS]: Sized,\n+{\n+    pub data: [u8; I::NUM_ELEMS],\n+    _phantom: PhantomData<I>,\n+}\n+\n+impl<I: Indices<N>, J: Indices<N>, const N: usize> Mul<Tensor<J, N>> for Tensor<I, N>\n+where\n+    I: Concat<J>,\n+    <I as Concat<J>>::Output: Indices<N>,\n+    [u8; I::NUM_ELEMS]: Sized,\n+    [u8; J::NUM_ELEMS]: Sized,\n+    [u8; <I as Concat<J>>::Output::NUM_ELEMS]: Sized,\n+{\n+    type Output = Tensor<<I as Concat<J>>::Output, N>;\n+\n+    fn mul(self, _rhs: Tensor<J, N>) -> Self::Output {\n+        Tensor {\n+            data: [0u8; <I as Concat<J>>::Output::NUM_ELEMS],\n+            _phantom: PhantomData,\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d60181a418a157bcd59511b3d9fed427dee9ab0a", "filename": "src/test/ui/const-generics/issues/issue-87470.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87470.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,24 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait TraitWithConst {\n+    const SOME_CONST: usize;\n+}\n+\n+pub trait OtherTrait: TraitWithConst {\n+    fn some_fn(self) -> [u8 ; <Self as TraitWithConst>::SOME_CONST];\n+}\n+\n+impl TraitWithConst for f32 {\n+    const SOME_CONST: usize = 32;\n+}\n+\n+impl OtherTrait for f32 {\n+    fn some_fn(self) -> [u8 ; <Self as TraitWithConst>::SOME_CONST] {\n+        [0; 32]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "116686abb9e3d93d8fdeafc432cfbeefd1caaeda", "filename": "src/test/ui/const-generics/issues/issue-87964.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87964.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,29 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Target {\n+    const LENGTH: usize;\n+}\n+\n+\n+pub struct Container<T: Target>\n+where\n+    [(); T::LENGTH]: Sized,\n+{\n+    _target: T,\n+}\n+\n+impl<T: Target> Container<T>\n+where\n+    [(); T::LENGTH]: Sized,\n+{\n+    pub fn start(\n+        _target: T,\n+    ) -> Container<T> {\n+        Container { _target }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e3540f46f1e81ef2d3a06419a1613d762efbfe8c", "filename": "src/test/ui/const-generics/issues/issue-89146.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89146.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89146.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89146.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,26 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+pub trait Foo {\n+    const SIZE: usize;\n+\n+    fn to_bytes(&self) -> [u8; Self::SIZE];\n+}\n+\n+pub fn bar<G: Foo>(a: &G) -> u8\n+where\n+    [(); G::SIZE]: Sized,\n+{\n+    deeper_bar(a)\n+}\n+\n+fn deeper_bar<G: Foo>(a: &G) -> u8\n+where\n+    [(); G::SIZE]: Sized,\n+{\n+    a.to_bytes()[0]\n+}\n+\n+fn main() {}"}, {"sha": "afa5c8fab74e8ed8b46759303023d1a307ff964f", "filename": "src/test/ui/const-generics/issues/issue-89320.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89320.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89320.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89320.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Enumerable {\n+    const N: usize;\n+}\n+\n+#[derive(Clone)]\n+pub struct SymmetricGroup<S>\n+where\n+    S: Enumerable,\n+    [(); S::N]: Sized,\n+{\n+    _phantom: std::marker::PhantomData<S>,\n+}\n+\n+fn main() {}"}, {"sha": "6584ffa7cf949f91833cdf9e69b55a851bd8ba74", "filename": "src/test/ui/feature-gates/thread-local-const-init.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efec545293b9263be9edfb283a7aa66350b3acbf/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efec545293b9263be9edfb283a7aa66350b3acbf/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.rs?ref=efec545293b9263be9edfb283a7aa66350b3acbf", "patch": "@@ -1,4 +0,0 @@\n-thread_local!(static X: u32 = const { 0 });\n-//~^ ERROR: use of unstable library feature 'thread_local_const_init'\n-\n-fn main() {}"}, {"sha": "f80506831b4e8172a3c3d4a69f99e8a17ba2b12f", "filename": "src/test/ui/feature-gates/thread-local-const-init.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efec545293b9263be9edfb283a7aa66350b3acbf/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efec545293b9263be9edfb283a7aa66350b3acbf/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fthread-local-const-init.stderr?ref=efec545293b9263be9edfb283a7aa66350b3acbf", "patch": "@@ -1,13 +0,0 @@\n-error[E0658]: use of unstable library feature 'thread_local_const_init'\n-  --> $DIR/thread-local-const-init.rs:1:1\n-   |\n-LL | thread_local!(static X: u32 = const { 0 });\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #84223 <https://github.com/rust-lang/rust/issues/84223> for more information\n-   = help: add `#![feature(thread_local_const_init)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "55c7ac128ffdecaa49b1d9f5d5b4b5843ab43008", "filename": "src/test/ui/keyword/keyword-self-as-type-param.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.rs?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -1,10 +1,10 @@\n // Regression test of #36638.\n \n struct Foo<Self>(Self);\n-//~^ ERROR expected identifier, found keyword `Self`\n-//~^^ ERROR E0392\n+//~^ ERROR unexpected keyword `Self` in generic parameters\n+//~| ERROR recursive type `Foo` has infinite size\n \n trait Bar<Self> {}\n-//~^ ERROR expected identifier, found keyword `Self`\n+//~^ ERROR unexpected keyword `Self` in generic parameters\n \n fn main() {}"}, {"sha": "fd101b32b4c9c0c2e30c12fea48376c30de10de4", "filename": "src/test/ui/keyword/keyword-self-as-type-param.stderr", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e93f6e318e687c05c8c44517de4586ed75ce3f4/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-self-as-type-param.stderr?ref=5e93f6e318e687c05c8c44517de4586ed75ce3f4", "patch": "@@ -1,24 +1,33 @@\n-error: expected identifier, found keyword `Self`\n+error: unexpected keyword `Self` in generic parameters\n   --> $DIR/keyword-self-as-type-param.rs:3:12\n    |\n LL | struct Foo<Self>(Self);\n-   |            ^^^^ expected identifier, found keyword\n+   |            ^^^^\n+   |\n+   = note: you cannot use `Self` as a generic parameter because it is reserved for associated items\n \n-error: expected identifier, found keyword `Self`\n+error: unexpected keyword `Self` in generic parameters\n   --> $DIR/keyword-self-as-type-param.rs:7:11\n    |\n LL | trait Bar<Self> {}\n-   |           ^^^^ expected identifier, found keyword\n+   |           ^^^^\n+   |\n+   = note: you cannot use `Self` as a generic parameter because it is reserved for associated items\n \n-error[E0392]: parameter `Self` is never used\n-  --> $DIR/keyword-self-as-type-param.rs:3:12\n+error[E0072]: recursive type `Foo` has infinite size\n+  --> $DIR/keyword-self-as-type-param.rs:3:1\n    |\n LL | struct Foo<Self>(Self);\n-   |            ^^^^ unused parameter\n+   | ^^^^^^^^^^^^^^^^^----^^\n+   | |                |\n+   | |                recursive without indirection\n+   | recursive type has infinite size\n+   |\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n    |\n-   = help: consider removing `Self`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `Self` to be a const parameter, use `const Self: usize` instead\n+LL | struct Foo<Self>(Box<Self>);\n+   |                  ++++    +\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0072`."}]}