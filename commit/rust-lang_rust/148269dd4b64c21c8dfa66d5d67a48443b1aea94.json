{"sha": "148269dd4b64c21c8dfa66d5d67a48443b1aea94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ODI2OWRkNGI2NGMyMWM4ZGZhNjZkNWQ2N2E0ODQ0M2IxYWVhOTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-04T12:01:06Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-04T12:01:06Z"}, "message": "finally stop using min/max_value and the integer modules", "tree": {"sha": "89865bd9178837f77be0b1aab5b15fef64aca5d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89865bd9178837f77be0b1aab5b15fef64aca5d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/148269dd4b64c21c8dfa66d5d67a48443b1aea94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/148269dd4b64c21c8dfa66d5d67a48443b1aea94", "html_url": "https://github.com/rust-lang/rust/commit/148269dd4b64c21c8dfa66d5d67a48443b1aea94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/148269dd4b64c21c8dfa66d5d67a48443b1aea94/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "974c8be95ec17cd986251d7700cd432a39576939", "url": "https://api.github.com/repos/rust-lang/rust/commits/974c8be95ec17cd986251d7700cd432a39576939", "html_url": "https://github.com/rust-lang/rust/commit/974c8be95ec17cd986251d7700cd432a39576939"}], "stats": {"total": 68, "additions": 31, "deletions": 37}, "files": [{"sha": "62e7b6845d518f976d7d1d01acd767dc93fbb652", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -1 +1 @@\n-4d71c164a89b705df6affd31a5262c832d1bc48d\n+7a3700c37132385e8e965c18e73d0a09f9146335"}, {"sha": "88ebc269cf1bd8f7fb0724d9abf612a3b167ea99", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -443,10 +443,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 // Saturating cast to i16. Even those are outside the valid exponent range to\n                 // `scalbn` below will do its over/underflow handling.\n-                let exp = if exp > i16::max_value() as i32 {\n-                    i16::max_value()\n-                } else if exp < i16::min_value() as i32 {\n-                    i16::min_value()\n+                let exp = if exp > i16::MAX as i32 {\n+                    i16::MAX\n+                } else if exp < i16::MIN as i32 {\n+                    i16::MIN\n                 } else {\n                     exp.try_into().unwrap()\n                 };"}, {"sha": "0ea53b16fd191132e910df53516b11529b0d32e2", "filename": "src/shims/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -427,15 +427,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of read bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.isize_max() as u64).min(isize::max_value() as u64);\n+        let count = count.min(this.isize_max() as u64).min(isize::MAX as u64);\n \n         if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n             // This can never fail because `count` was capped to be smaller than\n-            // `isize::max_value()`.\n+            // `isize::MAX`.\n             let count = isize::try_from(count).unwrap();\n             // We want to read at most `count` bytes. We are sure that `count` is not negative\n             // because it was a target's `usize`. Also we are sure that its smaller than\n-            // `usize::max_value()` because it is a host's `isize`.\n+            // `usize::MAX` because it is a host's `isize`.\n             let mut bytes = vec![0; count as usize];\n             let result = file\n                 .read(&mut bytes)\n@@ -481,7 +481,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of written bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.isize_max() as u64).min(isize::max_value() as u64);\n+        let count = count.min(this.isize_max() as u64).min(isize::MAX as u64);\n \n         if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n             let bytes = this.memory.read_bytes(buf, Size::from_bytes(count))?;"}, {"sha": "04379553587dacf482155608f7856f57f3cd73c7", "filename": "src/shims/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -27,7 +27,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let (dest, ret) = ret.unwrap();\n             let n = this\n                 .align_offset(args[0], args[1])?\n-                .unwrap_or_else(|| this.truncate(u128::max_value(), dest.layout));\n+                .unwrap_or_else(|| this.truncate(u128::MAX, dest.layout));\n             this.write_scalar(Scalar::from_uint(n, dest.layout.size), dest)?;\n             this.go_to_block(ret);\n             return Ok(None);"}, {"sha": "c241b2df660e4c9581065e3e63df81d1f7da82cd", "filename": "tests/compile-fail/exact_div4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Fexact_div4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Fexact_div4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexact_div4.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -1,5 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n-    // divison of min_value by -1\n-    unsafe { std::intrinsics::exact_div(i64::min_value(), -1); } //~ ERROR result of dividing MIN by -1 cannot be represented\n+    // divison of MIN by -1\n+    unsafe { std::intrinsics::exact_div(i64::MIN, -1); } //~ ERROR result of dividing MIN by -1 cannot be represented\n }"}, {"sha": "452bf341c9e200bfce36224bca240514e73c53de", "filename": "tests/compile-fail/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_overflow.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -2,5 +2,5 @@\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;\n-    let _val = unsafe { x.offset(isize::min_value()) };\n+    let _val = unsafe { x.offset(isize::MIN) };\n }"}, {"sha": "157ea03bc932a00700125baab1e1712d10d75bae", "filename": "tests/compile-fail/slice-too-big.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Fslice-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Fslice-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fslice-too-big.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -1,5 +1,4 @@\n use std::mem;\n-use std::usize;\n \n fn main() { unsafe {\n     let ptr = Box::into_raw(Box::new(0u8));"}, {"sha": "b42b34ff462d4157a2d8c844bfa0873b83cfd7d4", "filename": "tests/compile-fail/unchecked_div1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Funchecked_div1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Fcompile-fail%2Funchecked_div1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funchecked_div1.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -1,5 +1,5 @@\n #![feature(core_intrinsics)]\n fn main() {\n     // MIN/-1 cannot be represented\n-    unsafe { std::intrinsics::unchecked_div(i16::min_value(), -1); } //~ ERROR Overflow executing `unchecked_div`\n+    unsafe { std::intrinsics::unchecked_div(i16::MIN, -1); } //~ ERROR Overflow executing `unchecked_div`\n }"}, {"sha": "f9216346470865c815557443384530ef5e55bf44", "filename": "tests/run-pass/align_offset.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Falign_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Falign_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Falign_offset.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -5,15 +5,15 @@ fn test_align_offset() {\n \n     assert_eq!(raw.align_offset(2), 0);\n     assert_eq!(raw.align_offset(4), 0);\n-    assert_eq!(raw.align_offset(8), usize::max_value()); // requested alignment higher than allocation alignment\n+    assert_eq!(raw.align_offset(8), usize::MAX); // requested alignment higher than allocation alignment\n \n     assert_eq!(raw.wrapping_offset(1).align_offset(2), 1);\n     assert_eq!(raw.wrapping_offset(1).align_offset(4), 3);\n-    assert_eq!(raw.wrapping_offset(1).align_offset(8), usize::max_value()); // requested alignment higher than allocation alignment\n+    assert_eq!(raw.wrapping_offset(1).align_offset(8), usize::MAX); // requested alignment higher than allocation alignment\n \n     assert_eq!(raw.wrapping_offset(2).align_offset(2), 0);\n     assert_eq!(raw.wrapping_offset(2).align_offset(4), 2);\n-    assert_eq!(raw.wrapping_offset(2).align_offset(8), usize::max_value()); // requested alignment higher than allocation alignment\n+    assert_eq!(raw.wrapping_offset(2).align_offset(8), usize::MAX); // requested alignment higher than allocation alignment\n }\n \n fn test_align_to() {"}, {"sha": "4ae42df59200212c804aaa83a6aa1414342a0ead", "filename": "tests/run-pass/integer-ops.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Finteger-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Finteger-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Finteger-ops.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -8,16 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::i32;\n-\n pub fn main() {\n     // This tests that do (not) do sign extension properly when loading integers\n-    assert_eq!(u32::max_value() as i64, 4294967295);\n-    assert_eq!(i32::min_value() as i64, -2147483648);\n-\n-    assert_eq!(i8::min_value(), -128);\n+    assert_eq!(u32::MAX as i64, 4294967295);\n+    assert_eq!(i32::MIN as i64, -2147483648);\n \n-    assert_eq!(i8::max_value(), 127);\n+    assert_eq!(i8::MAX, 127);\n+    assert_eq!(i8::MIN, -128);\n \n     assert_eq!(i32::from_str_radix(\"A\", 16), Ok(10));\n "}, {"sha": "5d7c383088deef0660364ac96e26e7239ce4cab9", "filename": "tests/run-pass/ints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fints.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -51,8 +51,8 @@ fn main() {\n     assert_eq!(arith(), 5*5);\n     assert_eq!(match_int(), 20);\n     assert_eq!(match_int_range(), 4);\n-    assert_eq!(i64::min_value().overflowing_mul(-1), (i64::min_value(), true));\n-    assert_eq!(i32::min_value().overflowing_mul(-1), (i32::min_value(), true));\n-    assert_eq!(i16::min_value().overflowing_mul(-1), (i16::min_value(), true));\n-    assert_eq!(i8::min_value().overflowing_mul(-1), (i8::min_value(), true));\n+    assert_eq!(i64::MIN.overflowing_mul(-1), (i64::MIN, true));\n+    assert_eq!(i32::MIN.overflowing_mul(-1), (i32::MIN, true));\n+    assert_eq!(i16::MIN.overflowing_mul(-1), (i16::MIN, true));\n+    assert_eq!(i8::MIN.overflowing_mul(-1), (i8::MIN, true));\n }"}, {"sha": "27cc65fa7685b4355c673ae90b3c5a74c92129a5", "filename": "tests/run-pass/panic/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Foverflowing-rsh-2.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -3,5 +3,5 @@\n \n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n-    let _n = 1i64 >> (u32::max_value() as i64 + 1);\n+    let _n = 1i64 >> (u32::MAX as i64 + 1);\n }"}, {"sha": "5bf60c32541db27f23859ed0eecf15c9302dd715", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -1,5 +1,3 @@\n-use std::usize;\n-\n fn one_line_ref() -> i16 {\n     *&1\n }"}, {"sha": "fdd980e2177b5beed16fbc59ff6490f10392c2c5", "filename": "tests/run-pass/ptr_arith_offset_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -5,8 +5,8 @@ fn main() {\n     let x = &mut ptr::null(); // going through memory as there are more sanity checks along that path\n     *x = v.as_ptr().wrapping_offset(1); // ptr to the 2nd element\n     // Adding 2*isize::max and then 1 is like substracting 1\n-    *x = x.wrapping_offset(isize::max_value());\n-    *x = x.wrapping_offset(isize::max_value());\n+    *x = x.wrapping_offset(isize::MAX);\n+    *x = x.wrapping_offset(isize::MAX);\n     *x = x.wrapping_offset(1);\n     assert_eq!(unsafe { **x }, 1);\n }"}, {"sha": "468b37af5beaacf9494aaf65d873d1384410c1ed", "filename": "tests/run-pass/ptr_int_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_casts.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     // this used to trigger an ICE on 32bit)\n     let val = &mut ptr::null();\n     *val = (1 as *const u8).wrapping_offset(-4);\n-    assert_eq!(*val as usize, usize::max_value() - 2);\n+    assert_eq!(*val as usize, usize::MAX - 2);\n \n     {   // ptr-int-ptr\n         let x = 13;"}, {"sha": "a2ca7746b1c05148edb8a054c0337c8b0eed1ef9", "filename": "tests/run-pass/u128.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148269dd4b64c21c8dfa66d5d67a48443b1aea94/tests%2Frun-pass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fu128.rs?ref=148269dd4b64c21c8dfa66d5d67a48443b1aea94", "patch": "@@ -48,14 +48,14 @@ fn main() {\n     assert_eq!(\"10000000000000000000000000000000000000000000000000000000000000000000\",\n                format!(\"{:b}\", j));\n     assert_eq!(\"340282366920938463463374607431768211455\",\n-        format!(\"{}\", u128::max_value()));\n+        format!(\"{}\", u128::MAX));\n     assert_eq!(\"147573952589676412928\", format!(\"{:?}\", j));\n     // common traits\n     assert_eq!(x, b(x.clone()));\n     // overflow checks\n     assert_eq!((z).checked_mul(z), Some(0x734C_C2F2_A521));\n     assert_eq!((k).checked_mul(k), None);\n-    let l: u128 = b(u128::max_value() - 10);\n+    let l: u128 = b(u128::MAX - 10);\n     let o: u128 = b(17);\n     assert_eq!(l.checked_add(b(11)), None);\n     assert_eq!(l.checked_sub(l), Some(0));"}]}