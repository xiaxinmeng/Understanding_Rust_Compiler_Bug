{"sha": "213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxM2Y3YjI0Y2NkOWE2ODMzYWY3ZTFhMzI5YzVlN2ZmYzhmOWUzZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-03T08:36:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-03T08:36:37Z"}, "message": "auto merge of #6207 : sanxiyn/rust/tc-big, r=thestinger", "tree": {"sha": "a9e831542f534ce191f48a4eab19e46b7466b4be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9e831542f534ce191f48a4eab19e46b7466b4be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2", "html_url": "https://github.com/rust-lang/rust/commit/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984180c600b083b272237c0b343bb3e3dd844086", "url": "https://api.github.com/repos/rust-lang/rust/commits/984180c600b083b272237c0b343bb3e3dd844086", "html_url": "https://github.com/rust-lang/rust/commit/984180c600b083b272237c0b343bb3e3dd844086"}, {"sha": "6883814a84d584e1fd65a1d40229807ff3d34efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6883814a84d584e1fd65a1d40229807ff3d34efb", "html_url": "https://github.com/rust-lang/rust/commit/6883814a84d584e1fd65a1d40229807ff3d34efb"}], "stats": {"total": 78, "additions": 0, "deletions": 78}, "files": [{"sha": "411c9534343119347384dd525ac4f9c628b54f7c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=213f7b24ccd9a6833af7e1a329c5e7ffc8f9e3d2", "patch": "@@ -1808,15 +1808,6 @@ pub impl TypeContents {\n         if cx.vecs_implicitly_copyable {base} else {base + TC_OWNED_VEC}\n     }\n \n-    fn is_safe_for_default_mode(&self, cx: ctxt) -> bool {\n-        !self.intersects(TypeContents::nondefault_mode(cx))\n-    }\n-\n-    fn nondefault_mode(cx: ctxt) -> TypeContents {\n-        let tc = TypeContents::nonimplicitly_copyable(cx);\n-        tc + TC_BIG + TC_OWNED_VEC // disregard cx.vecs_implicitly_copyable\n-    }\n-\n     fn needs_drop(&self, cx: ctxt) -> bool {\n         let tc = TC_MANAGED + TC_DTOR + TypeContents::owned(cx);\n         self.intersects(tc)\n@@ -1876,9 +1867,6 @@ static TC_MUTABLE: TypeContents =          TypeContents{bits:0b000010000000};\n /// Mutable content, whether owned or by ref\n static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits:0b000100000000};\n \n-/// Something we estimate to be \"big\"\n-static TC_BIG: TypeContents =              TypeContents{bits:0b001000000000};\n-\n /// An enum with no variants.\n static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits:0b010000000000};\n \n@@ -2099,10 +2087,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n         };\n \n-        if type_size(cx, ty) > 4 {\n-            result = result + TC_BIG;\n-        }\n-\n         cache.insert(ty_id, result);\n         return result;\n     }\n@@ -2178,68 +2162,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         debug!(\"result = %s\", r.to_str());\n         return r;\n     }\n-\n-    /// gives a rough estimate of how much space it takes to represent\n-    /// an instance of `ty`.  Used for the mode transition.\n-    fn type_size(cx: ctxt, ty: t) -> uint {\n-        match get(ty).sty {\n-          ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n-          ty_ptr(_) | ty_box(_) | ty_uniq(_) | ty_estr(vstore_uniq) |\n-          ty_trait(*) | ty_rptr(*) | ty_evec(_, vstore_uniq) |\n-          ty_evec(_, vstore_box) | ty_estr(vstore_box) => {\n-            1\n-          }\n-\n-          ty_evec(_, vstore_slice(_)) |\n-          ty_estr(vstore_slice(_)) |\n-          ty_bare_fn(*) |\n-          ty_closure(*) => {\n-            2\n-          }\n-\n-          ty_evec(t, vstore_fixed(n)) => {\n-            type_size(cx, t.ty) * n\n-          }\n-\n-          ty_estr(vstore_fixed(n)) => {\n-            n\n-          }\n-\n-          ty_struct(did, ref substs) => {\n-            let flds = struct_fields(cx, did, substs);\n-            flds.foldl(0, |s, f| *s + type_size(cx, f.mt.ty))\n-          }\n-\n-          ty_tup(ref tys) => {\n-            tys.foldl(0, |s, t| *s + type_size(cx, *t))\n-          }\n-\n-          ty_enum(did, ref substs) => {\n-            let variants = substd_enum_variants(cx, did, substs);\n-            variants.foldl( // find max size of any variant\n-                0,\n-                |m, v| uint::max(\n-                    *m,\n-                    // find size of this variant:\n-                    v.args.foldl(0, |s, a| *s + type_size(cx, *a))))\n-          }\n-\n-          ty_param(_) | ty_self(_) => {\n-            1\n-          }\n-\n-          ty_infer(_) => {\n-            cx.sess.bug(~\"Asked to compute kind of a type variable\");\n-          }\n-          ty_type => 1,\n-          ty_opaque_closure_ptr(_) => 1,\n-          ty_opaque_box => 1,\n-          ty_unboxed_vec(_) => 10,\n-          ty_err => {\n-            cx.sess.bug(~\"Asked to compute kind of fictitious type\");\n-          }\n-        }\n-    }\n }\n \n pub fn type_moves_by_default(cx: ctxt, ty: t) -> bool {"}]}