{"sha": "d7efc76b7ef8c60aefd603dd4773b2fa039bab80", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3ZWZjNzZiN2VmOGM2MGFlZmQ2MDNkZDQ3NzNiMmZhMDM5YmFiODA=", "commit": {"author": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-06T23:12:21Z"}, "committer": {"name": "Patrick McCarter", "email": "p.mccarter@gmail.com", "date": "2019-02-06T23:12:21Z"}, "message": "tidy line length", "tree": {"sha": "d413198b69580ef8d8423280c82dc3b2709411d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d413198b69580ef8d8423280c82dc3b2709411d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7efc76b7ef8c60aefd603dd4773b2fa039bab80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7efc76b7ef8c60aefd603dd4773b2fa039bab80", "html_url": "https://github.com/rust-lang/rust/commit/d7efc76b7ef8c60aefd603dd4773b2fa039bab80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7efc76b7ef8c60aefd603dd4773b2fa039bab80/comments", "author": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmccarter", "id": 1185163, "node_id": "MDQ6VXNlcjExODUxNjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1185163?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmccarter", "html_url": "https://github.com/pmccarter", "followers_url": "https://api.github.com/users/pmccarter/followers", "following_url": "https://api.github.com/users/pmccarter/following{/other_user}", "gists_url": "https://api.github.com/users/pmccarter/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmccarter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmccarter/subscriptions", "organizations_url": "https://api.github.com/users/pmccarter/orgs", "repos_url": "https://api.github.com/users/pmccarter/repos", "events_url": "https://api.github.com/users/pmccarter/events{/privacy}", "received_events_url": "https://api.github.com/users/pmccarter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f857199073753956db92e6710f9178e34de4122e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f857199073753956db92e6710f9178e34de4122e", "html_url": "https://github.com/rust-lang/rust/commit/f857199073753956db92e6710f9178e34de4122e"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "5ec18d133c66564a9a35c537c5c839cc04f75028", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7efc76b7ef8c60aefd603dd4773b2fa039bab80/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7efc76b7ef8c60aefd603dd4773b2fa039bab80/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=d7efc76b7ef8c60aefd603dd4773b2fa039bab80", "patch": "@@ -139,7 +139,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                             Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))\n                         }\n                     } else {\n-                        Scalar::from_uint(u128::max_value() >> (128 - num_bits), Size::from_bits(num_bits))\n+                        Scalar::from_uint(u128::max_value() >> (128 - num_bits),\n+                            Size::from_bits(num_bits))\n                     };\n                     self.write_scalar(val, dest)?;\n                 } else {\n@@ -156,7 +157,8 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     let val = if l.layout.abi.is_signed() {\n                         if first_term & (1 << (num_bits-1)) == 0 {  // first term is positive\n                             // so overflow is positive\n-                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1, Size::from_bits(num_bits))\n+                            Scalar::from_uint((1u128 << (num_bits - 1)) - 1,\n+                                Size::from_bits(num_bits))\n                         } else {\n                             // if first term negative, overflow must be negative\n                             Scalar::from_uint(1u128 << (num_bits - 1), Size::from_bits(num_bits))"}]}