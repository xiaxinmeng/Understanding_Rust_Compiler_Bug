{"sha": "eac8921ccffa45f39f8b0826882ad8c705184079", "node_id": "C_kwDOAAsO6NoAKGVhYzg5MjFjY2ZmYTQ1ZjM5ZjhiMDgyNjg4MmFkOGM3MDUxODQwNzk", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-11-25T10:53:14Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-11-25T10:53:14Z"}, "message": "jsondoclint: Recognise Typedef as valid kind for Type::ResolvedPath\n\nCloses #104851", "tree": {"sha": "043956b4f535bc36d33443f0d00dedd44762ac2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/043956b4f535bc36d33443f0d00dedd44762ac2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac8921ccffa45f39f8b0826882ad8c705184079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac8921ccffa45f39f8b0826882ad8c705184079", "html_url": "https://github.com/rust-lang/rust/commit/eac8921ccffa45f39f8b0826882ad8c705184079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac8921ccffa45f39f8b0826882ad8c705184079/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41e0363055ade59584cff667c79f64937e6ef3f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e0363055ade59584cff667c79f64937e6ef3f9", "html_url": "https://github.com/rust-lang/rust/commit/41e0363055ade59584cff667c79f64937e6ef3f9"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "2578bb49ad339ab465f3d0a7d8f65612a0132b63", "filename": "src/test/rustdoc-json/fns/return_type_alias.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eac8921ccffa45f39f8b0826882ad8c705184079/src%2Ftest%2Frustdoc-json%2Ffns%2Freturn_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac8921ccffa45f39f8b0826882ad8c705184079/src%2Ftest%2Frustdoc-json%2Ffns%2Freturn_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ffns%2Freturn_type_alias.rs?ref=eac8921ccffa45f39f8b0826882ad8c705184079", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/104851>\n+\n+/// @set foo = \"$.index[*][?(@.name=='Foo')].id\"\n+pub type Foo = i32;\n+\n+// @is \"$.index[*][?(@.name=='demo')].inner.decl.output.kind\" '\"resolved_path\"'\n+// @is \"$.index[*][?(@.name=='demo')].inner.decl.output.inner.id\" $foo\n+pub fn demo() -> Foo {\n+    42\n+}"}, {"sha": "a533e3671223632ce916d0ec7a2dacab79103bb3", "filename": "src/tools/jsondoclint/src/item_kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac8921ccffa45f39f8b0826882ad8c705184079/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac8921ccffa45f39f8b0826882ad8c705184079/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fitem_kind.rs?ref=eac8921ccffa45f39f8b0826882ad8c705184079", "patch": "@@ -114,8 +114,8 @@ impl Kind {\n     pub fn is_trait(self) -> bool {\n         matches!(self, Kind::Trait)\n     }\n-    pub fn is_struct_enum_union(self) -> bool {\n-        matches!(self, Kind::Struct | Kind::Enum | Kind::Union)\n+    pub fn is_type(self) -> bool {\n+        matches!(self, Kind::Struct | Kind::Enum | Kind::Union | Kind::Typedef)\n     }\n \n     pub fn from_item(i: &Item) -> Self {"}, {"sha": "9548276d826fb61830c95f6bdee7b8331d2d70fa", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eac8921ccffa45f39f8b0826882ad8c705184079/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac8921ccffa45f39f8b0826882ad8c705184079/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=eac8921ccffa45f39f8b0826882ad8c705184079", "patch": "@@ -32,7 +32,10 @@ pub struct Validator<'a> {\n \n enum PathKind {\n     Trait,\n-    StructEnumUnion,\n+    /// Structs, Enums, Unions and Typedefs.\n+    ///\n+    /// This doesn't include trait's because traits are not types.\n+    Type,\n }\n \n impl<'a> Validator<'a> {\n@@ -224,7 +227,7 @@ impl<'a> Validator<'a> {\n \n     fn check_type(&mut self, x: &'a Type) {\n         match x {\n-            Type::ResolvedPath(path) => self.check_path(path, PathKind::StructEnumUnion),\n+            Type::ResolvedPath(path) => self.check_path(path, PathKind::Type),\n             Type::DynTrait(dyn_trait) => self.check_dyn_trait(dyn_trait),\n             Type::Generic(_) => {}\n             Type::Primitive(_) => {}\n@@ -264,7 +267,7 @@ impl<'a> Validator<'a> {\n     fn check_path(&mut self, x: &'a Path, kind: PathKind) {\n         match kind {\n             PathKind::Trait => self.add_trait_id(&x.id),\n-            PathKind::StructEnumUnion => self.add_struct_enum_union_id(&x.id),\n+            PathKind::Type => self.add_type_id(&x.id),\n         }\n         if let Some(args) = &x.args {\n             self.check_generic_args(&**args);\n@@ -392,8 +395,8 @@ impl<'a> Validator<'a> {\n         self.add_id_checked(id, Kind::is_trait, \"Trait\");\n     }\n \n-    fn add_struct_enum_union_id(&mut self, id: &'a Id) {\n-        self.add_id_checked(id, Kind::is_struct_enum_union, \"Struct or Enum or Union\");\n+    fn add_type_id(&mut self, id: &'a Id) {\n+        self.add_id_checked(id, Kind::is_type, \"Type (Struct, Enum, Union or Typedef)\");\n     }\n \n     /// Add an Id that appeared in a trait"}]}