{"sha": "f971264fd7b40fe5a2326b317eaf86d849a5d54f", "node_id": "C_kwDOAAsO6NoAKGY5NzEyNjRmZDdiNDBmZTVhMjMyNmIzMTdlYWY4NmQ4NDlhNWQ1NGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-04-21T15:05:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-21T15:05:28Z"}, "message": "Rollup merge of #110608 - a1phyr:specialize_io_methods, r=thomcc\n\nSpecialize some `io::Read` and `io::Write` methods for `VecDeque<u8>` and `&[u8]`\n\nThis improves implementation of:\n- `<&[u8]>::read_to_string`\n- `VecDeque<u8>::read_to_end`\n- `VecDeque<u8>::read_to_string`\n- `VecDeque<u8>::write_vectored`", "tree": {"sha": "8d07dba4f095f9f088e11f5d9675a3f4202a4738", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d07dba4f095f9f088e11f5d9675a3f4202a4738"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f971264fd7b40fe5a2326b317eaf86d849a5d54f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQqY4CRBK7hj4Ov3rIwAAXIYIAF9v2EXyL1CsxT74h60Q/e/y\nQuGP3S0KNDOu5T5B2RK05nf1ChGYFA+8+gsSOd2vdMUlm6mz+EQFMrnkAp11qOIl\n4Ch2tW4Xx4+GkUa800fO6B/LFMLLFgd5y3lbVWXi0rLxCqFeCFPj8OXVQx8AI/EW\ng8WGzacq77XPUFxqzHPWGzVyImC736oxo9HJd7RbZA17209DxuGZgUXp4+DRb2T2\n3c/gQzvi6nmpzKYLkyvqMfR+T1XCsQVk6Nk6IRteRr6Yqp0eqXgtm5RaMGEC1l8j\nb89zwx3veVdqpzzwpQOkuTbF5iM8xGBJsa1D3AqADYSeFATxGWKbJe1HSECRso4=\n=yOba\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d07dba4f095f9f088e11f5d9675a3f4202a4738\nparent fbc905e16adfbc934226a8bd9a5a4e16c8196aed\nparent 1e6a7b458002f8a91e1f48733248cde2326d239a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1682089528 +0530\ncommitter GitHub <noreply@github.com> 1682089528 +0530\n\nRollup merge of #110608 - a1phyr:specialize_io_methods, r=thomcc\n\nSpecialize some `io::Read` and `io::Write` methods for `VecDeque<u8>` and `&[u8]`\n\nThis improves implementation of:\n- `<&[u8]>::read_to_string`\n- `VecDeque<u8>::read_to_end`\n- `VecDeque<u8>::read_to_string`\n- `VecDeque<u8>::write_vectored`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f971264fd7b40fe5a2326b317eaf86d849a5d54f", "html_url": "https://github.com/rust-lang/rust/commit/f971264fd7b40fe5a2326b317eaf86d849a5d54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f971264fd7b40fe5a2326b317eaf86d849a5d54f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc905e16adfbc934226a8bd9a5a4e16c8196aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc905e16adfbc934226a8bd9a5a4e16c8196aed", "html_url": "https://github.com/rust-lang/rust/commit/fbc905e16adfbc934226a8bd9a5a4e16c8196aed"}, {"sha": "1e6a7b458002f8a91e1f48733248cde2326d239a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6a7b458002f8a91e1f48733248cde2326d239a", "html_url": "https://github.com/rust-lang/rust/commit/1e6a7b458002f8a91e1f48733248cde2326d239a"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "7511438b02bad0ec6e7180762f694dc3baec7624", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f971264fd7b40fe5a2326b317eaf86d849a5d54f/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f971264fd7b40fe5a2326b317eaf86d849a5d54f/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=f971264fd7b40fe5a2326b317eaf86d849a5d54f", "patch": "@@ -9,6 +9,7 @@ use crate::io::{\n     self, BorrowedCursor, BufRead, ErrorKind, IoSlice, IoSliceMut, Read, Seek, SeekFrom, Write,\n };\n use crate::mem;\n+use crate::str;\n \n // =============================================================================\n // Forwarding implementations\n@@ -307,6 +308,17 @@ impl Read for &[u8] {\n         *self = &self[len..];\n         Ok(len)\n     }\n+\n+    #[inline]\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        let content = str::from_utf8(self).map_err(|_| {\n+            io::const_io_error!(ErrorKind::InvalidData, \"stream did not contain valid UTF-8\")\n+        })?;\n+        buf.push_str(content);\n+        let len = self.len();\n+        *self = &self[len..];\n+        Ok(len)\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -434,6 +446,33 @@ impl<A: Allocator> Read for VecDeque<u8, A> {\n         self.drain(..n);\n         Ok(())\n     }\n+\n+    #[inline]\n+    fn read_to_end(&mut self, buf: &mut Vec<u8>) -> io::Result<usize> {\n+        // The total len is known upfront so we can reserve it in a single call.\n+        let len = self.len();\n+        buf.reserve(len);\n+\n+        let (front, back) = self.as_slices();\n+        buf.extend_from_slice(front);\n+        buf.extend_from_slice(back);\n+        self.clear();\n+        Ok(len)\n+    }\n+\n+    #[inline]\n+    fn read_to_string(&mut self, buf: &mut String) -> io::Result<usize> {\n+        // We have to use a single contiguous slice because the `VecDequeue` might be split in the\n+        // middle of an UTF-8 character.\n+        let len = self.len();\n+        let content = self.make_contiguous();\n+        let string = str::from_utf8(content).map_err(|_| {\n+            io::const_io_error!(ErrorKind::InvalidData, \"stream did not contain valid UTF-8\")\n+        })?;\n+        buf.push_str(string);\n+        self.clear();\n+        Ok(len)\n+    }\n }\n \n /// Write is implemented for `VecDeque<u8>` by appending to the `VecDeque`, growing it as needed.\n@@ -445,6 +484,21 @@ impl<A: Allocator> Write for VecDeque<u8, A> {\n         Ok(buf.len())\n     }\n \n+    #[inline]\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        let len = bufs.iter().map(|b| b.len()).sum();\n+        self.reserve(len);\n+        for buf in bufs {\n+            self.extend(&**buf);\n+        }\n+        Ok(len)\n+    }\n+\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n     #[inline]\n     fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n         self.extend(buf);"}]}