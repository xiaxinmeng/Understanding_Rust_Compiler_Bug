{"sha": "0e0ae47b47f80e30fca366e5922c19ff81b0a2e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMGFlNDdiNDdmODBlMzBmY2EzNjZlNTkyMmMxOWZmODFiMGEyZTI=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-02-19T16:54:00Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2019-04-21T22:13:00Z"}, "message": "auto_import: use TextEditBuilder instead of AssistBuilder to make it more reusable", "tree": {"sha": "bba8c09076b79a20fea2984799d36fca85083d1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bba8c09076b79a20fea2984799d36fca85083d1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2", "html_url": "https://github.com/rust-lang/rust/commit/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc5c1d24e1a641b134f634516828301e8cfc320", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc5c1d24e1a641b134f634516828301e8cfc320", "html_url": "https://github.com/rust-lang/rust/commit/bbc5c1d24e1a641b134f634516828301e8cfc320"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "17a9041c5b4e33e6896262b0d397e3a0d2e41c85", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=0e0ae47b47f80e30fca366e5922c19ff81b0a2e2", "patch": "@@ -144,6 +144,10 @@ impl AssistBuilder {\n         self.replace(node.range(), replace_with)\n     }\n \n+    pub(crate) fn set_edit_builder(&mut self, edit: TextEditBuilder) {\n+        self.edit = edit;\n+    }\n+\n     #[allow(unused)]\n     pub(crate) fn delete(&mut self, range: TextRange) {\n         self.edit.delete(range)"}, {"sha": "6bc5caf76434c164efba0c2f3cf602313e7192a1", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0ae47b47f80e30fca366e5922c19ff81b0a2e2/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=0e0ae47b47f80e30fca366e5922c19ff81b0a2e2", "patch": "@@ -1,3 +1,4 @@\n+use ra_text_edit::TextEditBuilder;\n use hir::db::HirDatabase;\n \n use ra_syntax::{\n@@ -374,7 +375,7 @@ fn best_action_for_target<'b, 'a: 'b>(\n     }\n }\n \n-fn make_assist(action: &ImportAction, target: &[&ast::PathSegment], edit: &mut AssistBuilder) {\n+fn make_assist(action: &ImportAction, target: &[&ast::PathSegment], edit: &mut TextEditBuilder) {\n     match action {\n         ImportAction::AddNewUse { anchor, add_after_anchor } => {\n             make_assist_add_new_use(anchor, *add_after_anchor, target, edit)\n@@ -408,7 +409,7 @@ fn make_assist_add_new_use(\n     anchor: &Option<&SyntaxNode>,\n     after: bool,\n     target: &[&ast::PathSegment],\n-    edit: &mut AssistBuilder,\n+    edit: &mut TextEditBuilder,\n ) {\n     if let Some(anchor) = anchor {\n         let indent = ra_fmt::leading_indent(anchor);\n@@ -437,7 +438,7 @@ fn make_assist_add_in_tree_list(\n     tree_list: &ast::UseTreeList,\n     target: &[&ast::PathSegment],\n     add_self: bool,\n-    edit: &mut AssistBuilder,\n+    edit: &mut TextEditBuilder,\n ) {\n     let last = tree_list.use_trees().last();\n     if let Some(last) = last {\n@@ -466,7 +467,7 @@ fn make_assist_add_nested_import(\n     first_segment_to_split: &Option<&ast::PathSegment>,\n     target: &[&ast::PathSegment],\n     add_self: bool,\n-    edit: &mut AssistBuilder,\n+    edit: &mut TextEditBuilder,\n ) {\n     let use_tree = path.syntax().ancestors().find_map(ast::UseTree::cast);\n     if let Some(use_tree) = use_tree {\n@@ -491,15 +492,15 @@ fn make_assist_add_nested_import(\n             buf.push_str(\", \");\n         }\n         edit.insert(start, buf);\n-        edit.insert(end, \"}\");\n+        edit.insert(end, \"}\".to_string());\n     }\n }\n \n fn apply_auto_import<'a>(\n     container: &SyntaxNode,\n     path: &ast::Path,\n     target: &[&'a ast::PathSegment],\n-    edit: &mut AssistBuilder,\n+    edit: &mut TextEditBuilder,\n ) {\n     let action = best_action_for_target(container, path, target);\n     make_assist(&action, target, edit);\n@@ -513,6 +514,25 @@ fn apply_auto_import<'a>(\n     }\n }\n \n+pub fn auto_import_text_edit<'a>(\n+    position: &SyntaxNode,\n+    path: &ast::Path,\n+    target: &[&'a ast::PathSegment],\n+    edit: &mut TextEditBuilder,\n+) {\n+    let container = position.ancestors().find_map(|n| {\n+        if let Some(module) = ast::Module::cast(n) {\n+            return module.item_list().map(ast::AstNode::syntax);\n+        }\n+        ast::SourceFile::cast(n).map(ast::AstNode::syntax)\n+    });\n+\n+    if let Some(container) = container {\n+        let action = best_action_for_target(container, path, target);\n+        make_assist(&action, target, edit);\n+    }\n+}\n+\n pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let path: &ast::Path = ctx.node_at_offset()?;\n     // We don't want to mess with use statements\n@@ -531,7 +551,9 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n                 AssistId(\"auto_import\"),\n                 format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n                 |edit| {\n-                    apply_auto_import(item_list.syntax(), path, &segments, edit);\n+                    let mut text_edit = TextEditBuilder::default();\n+                    apply_auto_import(item_list.syntax(), path, &segments, &mut text_edit);\n+                    edit.set_edit_builder(text_edit);\n                 },\n             );\n         }\n@@ -541,7 +563,9 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n             AssistId(\"auto_import\"),\n             format!(\"import {} in the current file\", fmt_segments(&segments)),\n             |edit| {\n-                apply_auto_import(current_file.syntax(), path, &segments, edit);\n+                let mut text_edit = TextEditBuilder::default();\n+                apply_auto_import(current_file.syntax(), path, &segments, &mut text_edit);\n+                edit.set_edit_builder(text_edit);\n             },\n         );\n     }"}]}