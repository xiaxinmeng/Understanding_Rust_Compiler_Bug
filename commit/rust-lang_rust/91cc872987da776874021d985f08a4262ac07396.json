{"sha": "91cc872987da776874021d985f08a4262ac07396", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxY2M4NzI5ODdkYTc3Njg3NDAyMWQ5ODVmMDhhNDI2MmFjMDczOTY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-24T03:57:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-24T03:57:00Z"}, "message": "Rollup merge of #49727 - stjepang:cell-update, r=SimonSapin\n\nAdd Cell::update\n\nThis commit adds a new method `Cell::update`, which applies a function to the value inside the cell.\n\nPreviously discussed in: https://github.com/rust-lang/rfcs/issues/2171\n\n### Motivation\n\nUpdating `Cell`s is currently a bit verbose. Here are several real examples (taken from rustc and crossbeam):\n\n```rust\nself.print_fuel.set(self.print_fuel.get() + 1);\n\nself.diverges.set(self.diverges.get() | Diverges::Always);\n\nlet guard_count = self.guard_count.get();\nself.guard_count.set(guard_count.checked_add(1).unwrap());\nif guard_count == 0 {\n    // ...\n}\n```\n\nWith the addition of the new method `Cell::update`, this code can be simplified to:\n\n```rust\nself.print_fuel.update(|x| x + 1);\n\nself.diverges.update(|x| x | Diverges::Always);\n\nif self.guard_count.update(|x| x.checked_add(1).unwrap()) == 1 {\n    // ...\n}\n```\n\n### Unresolved questions\n\n1. Should we return the old value instead of the new value (like in `fetch_add` and `fetch_update`)?\n2. Should the return type simply be `()`?\n3. Naming: `update` vs `modify` vs `mutate` etc.\n\ncc @SimonSapin", "tree": {"sha": "ef1155a6ed17d4c4df03df892e102c6974d0ac36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef1155a6ed17d4c4df03df892e102c6974d0ac36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91cc872987da776874021d985f08a4262ac07396", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa3qsMCRBK7hj4Ov3rIwAAdHIIAJovIk3OI9bEsgYsiBsPip8z\nDdZRyqdL2KDiR/waryfQWq8sYIP3Bofx29UGxy7GZkySn5+jj85nvHWsF9k4E8E8\nFYK+1gS61PYcbiaTJqW6vKThIr50nR7vCRmxIC0p1WbmL6KT88Gdj3HyMjKtmpc/\nx3vLqzK2zrmkX41g9DHtlDgT254OeOx9xpDNgs10zSZPSMd3sUrxd3g7C5h9sYB6\nj7Tuqg/DQJN4XEHaYYdthLkve8KnWD6VMqgRJ+Z5SIZ/2KsZu86BG+HKnmUHVK3X\ny7bVFybGd66RxaOEEVMaSWzLEIl4c3SbJFJ5m0UmhPfm1y6pMg04b0eUY5QAzZU=\n=Apm8\n-----END PGP SIGNATURE-----\n", "payload": "tree ef1155a6ed17d4c4df03df892e102c6974d0ac36\nparent cefdd6d5e99618f193c1cd3365aa18b786731d97\nparent 29e9de85d6ae185d7d66c7ba0f2c418082d2df5f\nauthor kennytm <kennytm@gmail.com> 1524542220 +0800\ncommitter GitHub <noreply@github.com> 1524542220 +0800\n\nRollup merge of #49727 - stjepang:cell-update, r=SimonSapin\n\nAdd Cell::update\n\nThis commit adds a new method `Cell::update`, which applies a function to the value inside the cell.\n\nPreviously discussed in: https://github.com/rust-lang/rfcs/issues/2171\n\n### Motivation\n\nUpdating `Cell`s is currently a bit verbose. Here are several real examples (taken from rustc and crossbeam):\n\n```rust\nself.print_fuel.set(self.print_fuel.get() + 1);\n\nself.diverges.set(self.diverges.get() | Diverges::Always);\n\nlet guard_count = self.guard_count.get();\nself.guard_count.set(guard_count.checked_add(1).unwrap());\nif guard_count == 0 {\n    // ...\n}\n```\n\nWith the addition of the new method `Cell::update`, this code can be simplified to:\n\n```rust\nself.print_fuel.update(|x| x + 1);\n\nself.diverges.update(|x| x | Diverges::Always);\n\nif self.guard_count.update(|x| x.checked_add(1).unwrap()) == 1 {\n    // ...\n}\n```\n\n### Unresolved questions\n\n1. Should we return the old value instead of the new value (like in `fetch_add` and `fetch_update`)?\n2. Should the return type simply be `()`?\n3. Naming: `update` vs `modify` vs `mutate` etc.\n\ncc @SimonSapin\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91cc872987da776874021d985f08a4262ac07396", "html_url": "https://github.com/rust-lang/rust/commit/91cc872987da776874021d985f08a4262ac07396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91cc872987da776874021d985f08a4262ac07396/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cefdd6d5e99618f193c1cd3365aa18b786731d97", "url": "https://api.github.com/repos/rust-lang/rust/commits/cefdd6d5e99618f193c1cd3365aa18b786731d97", "html_url": "https://github.com/rust-lang/rust/commit/cefdd6d5e99618f193c1cd3365aa18b786731d97"}, {"sha": "29e9de85d6ae185d7d66c7ba0f2c418082d2df5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e9de85d6ae185d7d66c7ba0f2c418082d2df5f", "html_url": "https://github.com/rust-lang/rust/commit/29e9de85d6ae185d7d66c7ba0f2c418082d2df5f"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "1ff187ed3f109722f397f705ce728e886494c87e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91cc872987da776874021d985f08a4262ac07396/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cc872987da776874021d985f08a4262ac07396/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=91cc872987da776874021d985f08a4262ac07396", "patch": "@@ -256,6 +256,33 @@ impl<T:Copy> Cell<T> {\n     pub fn get(&self) -> T {\n         unsafe{ *self.value.get() }\n     }\n+\n+    /// Updates the contained value using a function and returns the new value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_update)]\n+    ///\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// let new = c.update(|x| x + 1);\n+    ///\n+    /// assert_eq!(new, 6);\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"cell_update\", issue = \"50186\")]\n+    pub fn update<F>(&self, f: F) -> T\n+    where\n+        F: FnOnce(T) -> T,\n+    {\n+        let old = self.get();\n+        let new = f(old);\n+        self.set(new);\n+        new\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "962fb2f0e027b3924507205b43145beccef82485", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91cc872987da776874021d985f08a4262ac07396/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cc872987da776874021d985f08a4262ac07396/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=91cc872987da776874021d985f08a4262ac07396", "patch": "@@ -26,6 +26,17 @@ fn smoketest_cell() {\n     assert!(y.get() == (30, 40));\n }\n \n+#[test]\n+fn cell_update() {\n+    let x = Cell::new(10);\n+\n+    assert_eq!(x.update(|x| x + 5), 15);\n+    assert_eq!(x.get(), 15);\n+\n+    assert_eq!(x.update(|x| x / 3), 5);\n+    assert_eq!(x.get(), 5);\n+}\n+\n #[test]\n fn cell_has_sensible_show() {\n     let x = Cell::new(\"foo bar\");"}, {"sha": "2b69f04013d201a320a927648a011a4319baa0e2", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91cc872987da776874021d985f08a4262ac07396/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91cc872987da776874021d985f08a4262ac07396/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=91cc872987da776874021d985f08a4262ac07396", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(ascii_ctype)]\n #![feature(box_syntax)]\n+#![feature(cell_update)]\n #![feature(core_float)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]"}]}