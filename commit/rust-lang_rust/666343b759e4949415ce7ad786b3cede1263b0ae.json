{"sha": "666343b759e4949415ce7ad786b3cede1263b0ae", "node_id": "C_kwDOAAsO6NoAKDY2NjM0M2I3NTllNDk0OTQxNWNlN2FkNzg2YjNjZWRlMTI2M2IwYWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T13:08:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T13:08:57Z"}, "message": "Auto merge of #12727 - DorianListens:dscheidt/extract-var-field-name, r=jonas-schievink\n\nfix: Improve suggested names for extracted variables\n\nWhen extracting a field expression, if RA was unable to resolve the type of the\nfield, we would previously fall back to using \"var_name\" as the variable name.\n\nNow, when the `Expr` being extracted matches a `FieldExpr`, we can use the\n`NameRef`'s ident token as a fallback option.\n\nfixes #10035", "tree": {"sha": "9d9773aa9feb4cd70ef52657d1b0823fa2ffd9cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9773aa9feb4cd70ef52657d1b0823fa2ffd9cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/666343b759e4949415ce7ad786b3cede1263b0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/666343b759e4949415ce7ad786b3cede1263b0ae", "html_url": "https://github.com/rust-lang/rust/commit/666343b759e4949415ce7ad786b3cede1263b0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/666343b759e4949415ce7ad786b3cede1263b0ae/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2836dd15f753a490ea5b89e02c6cfcecd2f32984", "url": "https://api.github.com/repos/rust-lang/rust/commits/2836dd15f753a490ea5b89e02c6cfcecd2f32984", "html_url": "https://github.com/rust-lang/rust/commit/2836dd15f753a490ea5b89e02c6cfcecd2f32984"}, {"sha": "21062f9201ca05929a11c87a51850d45c8d8ef00", "url": "https://api.github.com/repos/rust-lang/rust/commits/21062f9201ca05929a11c87a51850d45c8d8ef00", "html_url": "https://github.com/rust-lang/rust/commit/21062f9201ca05929a11c87a51850d45c8d8ef00"}], "stats": {"total": 33, "additions": 28, "deletions": 5}, "files": [{"sha": "71fa3ac334953472dd81c3cc60f353e6f192fc41", "filename": "crates/ide-assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/666343b759e4949415ce7ad786b3cede1263b0ae/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666343b759e4949415ce7ad786b3cede1263b0ae/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=666343b759e4949415ce7ad786b3cede1263b0ae", "patch": "@@ -943,8 +943,8 @@ struct S {\n }\n \n fn foo(s: &mut S) {\n-    let $0var_name = &mut s.vec;\n-    var_name.push(0);\n+    let $0vec = &mut s.vec;\n+    vec.push(0);\n }\"#,\n         );\n     }\n@@ -979,8 +979,8 @@ struct S {\n }\n \n fn foo(f: &mut Y) {\n-    let $0var_name = &mut f.field.field.vec;\n-    var_name.push(0);\n+    let $0vec = &mut f.field.field.vec;\n+    vec.push(0);\n }\"#,\n         );\n     }"}, {"sha": "411e5b25b73107f252d641502b5ee447e32bdad8", "filename": "crates/ide-assists/src/utils/suggest_name.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/666343b759e4949415ce7ad786b3cede1263b0ae/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/666343b759e4949415ce7ad786b3cede1263b0ae/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=666343b759e4949415ce7ad786b3cede1263b0ae", "patch": "@@ -94,7 +94,8 @@ pub(crate) fn for_variable(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>)\n \n     let mut next_expr = Some(expr.clone());\n     while let Some(expr) = next_expr {\n-        let name = from_call(&expr).or_else(|| from_type(&expr, sema));\n+        let name =\n+            from_call(&expr).or_else(|| from_type(&expr, sema)).or_else(|| from_field_name(&expr));\n         if let Some(name) = name {\n             return name;\n         }\n@@ -263,6 +264,15 @@ fn trait_name(trait_: &hir::Trait, db: &RootDatabase) -> Option<String> {\n     Some(name)\n }\n \n+fn from_field_name(expr: &ast::Expr) -> Option<String> {\n+    let field = match expr {\n+        ast::Expr::FieldExpr(field) => field,\n+        _ => return None,\n+    };\n+    let ident = field.name_ref()?.ident_token()?;\n+    normalize(ident.text())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ide_db::base_db::{fixture::WithFixture, FileRange};\n@@ -734,4 +744,17 @@ fn foo() { $0function.name().as_ref().unwrap().to_string()$0 }\n             \"name\",\n         );\n     }\n+\n+    #[test]\n+    fn struct_field_name() {\n+        check(\n+            r#\"\n+struct S<T> {\n+    some_field: T;\n+}\n+fn foo<T>(some_struct: S<T>) { $0some_struct.some_field$0 }\n+\"#,\n+            \"some_field\",\n+        );\n+    }\n }"}]}