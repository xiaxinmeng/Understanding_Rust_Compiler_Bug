{"sha": "cf76e637450a861e94ef583340b8f080379a159a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmNzZlNjM3NDUwYTg2MWU5NGVmNTgzMzQwYjhmMDgwMzc5YTE1OWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-08T01:32:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-08T01:32:59Z"}, "message": "Auto merge of #25136 - alexcrichton:drop-the-two, r=aturon\n\n* Remove the 2-suffix from some modules\r\n* Remove some unused files\r\n* Remove double-boxing for `ReentrantMutex`", "tree": {"sha": "f01e7c305dbe832c5283d229168223c5e8a24cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f01e7c305dbe832c5283d229168223c5e8a24cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf76e637450a861e94ef583340b8f080379a159a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf76e637450a861e94ef583340b8f080379a159a", "html_url": "https://github.com/rust-lang/rust/commit/cf76e637450a861e94ef583340b8f080379a159a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf76e637450a861e94ef583340b8f080379a159a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b402c43f088882db8a03bfcbb5eb8429ef7def0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b402c43f088882db8a03bfcbb5eb8429ef7def0e", "html_url": "https://github.com/rust-lang/rust/commit/b402c43f088882db8a03bfcbb5eb8429ef7def0e"}, {"sha": "7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7", "html_url": "https://github.com/rust-lang/rust/commit/7529bd60c3cbc4c7b635ee43a89d5b14f6fb8bf7"}], "stats": {"total": 311, "additions": 72, "deletions": 239}, "files": [{"sha": "fc5405ea7f69ec220f93fe971dbdc9446e494d40", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -23,7 +23,7 @@ use fmt;\n use ffi::OsString;\n use io::{self, Error, ErrorKind, SeekFrom, Seek, Read, Write};\n use path::{Path, PathBuf};\n-use sys::fs2 as fs_imp;\n+use sys::fs as fs_imp;\n use sys_common::{AsInnerMut, FromInner, AsInner};\n use vec::Vec;\n "}, {"sha": "bff9774bcd04a978b91608b1e2ddaff367da3852", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,7 +15,7 @@\n use prelude::v1::*;\n \n use io::{self, Error, ErrorKind};\n-use sys_common::net2 as net_imp;\n+use sys_common::net as net_imp;\n \n pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};"}, {"sha": "db2cdb7319880abb0bbf71a2a0c8e0e29f916072", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -17,7 +17,7 @@ use io::prelude::*;\n use fmt;\n use io;\n use net::{ToSocketAddrs, SocketAddr, Shutdown};\n-use sys_common::net2 as net_imp;\n+use sys_common::net as net_imp;\n use sys_common::{AsInner, FromInner};\n \n /// A structure which represents a TCP stream between a local socket and a"}, {"sha": "67c7096904d6f9abe2e9da4cfba0d4d038650692", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -16,7 +16,7 @@ use prelude::v1::*;\n use fmt;\n use io::{self, Error, ErrorKind};\n use net::{ToSocketAddrs, SocketAddr, IpAddr};\n-use sys_common::net2 as net_imp;\n+use sys_common::net as net_imp;\n use sys_common::{AsInner, FromInner};\n \n /// A User Datagram Protocol socket."}, {"sha": "a94abba5d12bf7c25c1eafab788f0ce2057f8056", "filename": "src/libstd/os/android/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "1fe5fdd4e146c925fff3a86c4e6a01c3bd829c77", "filename": "src/libstd/os/bitrig/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "d5c7c58173333fbee0410def34bc64e93efa9340", "filename": "src/libstd/os/dragonfly/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "28c9f8321f8a95163b319952bde45d2b74abb87f", "filename": "src/libstd/os/freebsd/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "dd2878c6e383cd6933022927f0b56ab9b711e069", "filename": "src/libstd/os/ios/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fios%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "d2f9bcc3bcf9e8b993fb7288d9a6af763a6e6b6d", "filename": "src/libstd/os/linux/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Flinux%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "6c96909f382e8c16617587077582bece0030dfe9", "filename": "src/libstd/os/macos/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "413bb72f6e1c3e3ae2e93a20cc8de34f98131e06", "filename": "src/libstd/os/nacl/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnacl%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "5654a7a0229634f45f0cc89cbbda9de7f98dac94", "filename": "src/libstd/os/openbsd/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,5 +15,5 @@\n pub mod raw;\n \n pub mod fs {\n-    pub use sys::fs2::MetadataExt;\n+    pub use sys::fs::MetadataExt;\n }"}, {"sha": "61398e16ba03613e4063433b155e1fb97d41a081", "filename": "src/libstd/process.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -21,11 +21,11 @@ use fmt;\n use io::{self, Error, ErrorKind};\n use path;\n use sync::mpsc::{channel, Receiver};\n-use sys::pipe2::{self, AnonPipe};\n-use sys::process2::Command as CommandImp;\n-use sys::process2::Process as ProcessImp;\n-use sys::process2::ExitStatus as ExitStatusImp;\n-use sys::process2::Stdio as StdioImp2;\n+use sys::pipe::{self, AnonPipe};\n+use sys::process::Command as CommandImp;\n+use sys::process::Process as ProcessImp;\n+use sys::process::ExitStatus as ExitStatusImp;\n+use sys::process::Stdio as StdioImp2;\n use sys_common::{AsInner, AsInnerMut};\n use thread;\n \n@@ -334,7 +334,7 @@ fn setup_io(io: &StdioImp, readable: bool)\n         Null => (StdioImp2::None, None),\n         Inherit => (StdioImp2::Inherit, None),\n         Piped => {\n-            let (reader, writer) = try!(pipe2::anon_pipe());\n+            let (reader, writer) = try!(pipe::anon_pipe());\n             if readable {\n                 (StdioImp2::Piped(reader), Some(writer))\n             } else {"}, {"sha": "34a58f6c83aa73002f781376b81c0bc049f211a5", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "removed", "additions": 0, "deletions": 170, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/b402c43f088882db8a03bfcbb5eb8429ef7def0e/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b402c43f088882db8a03bfcbb5eb8429ef7def0e/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=b402c43f088882db8a03bfcbb5eb8429ef7def0e", "patch": "@@ -1,170 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Implementation of the helper thread for the timer module\n-//!\n-//! This module contains the management necessary for the timer worker thread.\n-//! This thread is responsible for performing the send()s on channels for timers\n-//! that are using channels instead of a blocking call.\n-//!\n-//! The timer thread is lazily initialized, and it's shut down via the\n-//! `shutdown` function provided. It must be maintained as an invariant that\n-//! `shutdown` is only called when the entire program is finished. No new timers\n-//! can be created in the future and there must be no active timers at that\n-//! time.\n-\n-use prelude::v1::*;\n-\n-use boxed;\n-use cell::UnsafeCell;\n-use rt;\n-use sync::{StaticMutex, StaticCondvar};\n-use sync::mpsc::{channel, Sender, Receiver};\n-use sys::helper_signal;\n-\n-use thread;\n-\n-/// A structure for management of a helper thread.\n-///\n-/// This is generally a static structure which tracks the lifetime of a helper\n-/// thread.\n-///\n-/// The fields of this helper are all public, but they should not be used, this\n-/// is for static initialization.\n-pub struct Helper<M:Send> {\n-    /// Internal lock which protects the remaining fields\n-    pub lock: StaticMutex,\n-    pub cond: StaticCondvar,\n-\n-    // You'll notice that the remaining fields are UnsafeCell<T>, and this is\n-    // because all helper thread operations are done through &self, but we need\n-    // these to be mutable (once `lock` is held).\n-\n-    /// Lazily allocated channel to send messages to the helper thread.\n-    pub chan: UnsafeCell<*mut Sender<M>>,\n-\n-    /// OS handle used to wake up a blocked helper thread\n-    pub signal: UnsafeCell<usize>,\n-\n-    /// Flag if this helper thread has booted and been initialized yet.\n-    pub initialized: UnsafeCell<bool>,\n-\n-    /// Flag if this helper thread has shut down\n-    pub shutdown: UnsafeCell<bool>,\n-}\n-\n-unsafe impl<M:Send> Send for Helper<M> { }\n-\n-unsafe impl<M:Send> Sync for Helper<M> { }\n-\n-struct RaceBox(helper_signal::signal);\n-\n-unsafe impl Send for RaceBox {}\n-unsafe impl Sync for RaceBox {}\n-\n-macro_rules! helper_init { (static $name:ident: Helper<$m:ty>) => (\n-    static $name: Helper<$m> = Helper {\n-        lock: ::sync::MUTEX_INIT,\n-        cond: ::sync::CONDVAR_INIT,\n-        chan: ::cell::UnsafeCell { value: 0 as *mut Sender<$m> },\n-        signal: ::cell::UnsafeCell { value: 0 },\n-        initialized: ::cell::UnsafeCell { value: false },\n-        shutdown: ::cell::UnsafeCell { value: false },\n-    };\n-) }\n-\n-impl<M: Send> Helper<M> {\n-    /// Lazily boots a helper thread, becoming a no-op if the helper has already\n-    /// been spawned.\n-    ///\n-    /// This function will check to see if the thread has been initialized, and\n-    /// if it has it returns quickly. If initialization has not happened yet,\n-    /// the closure `f` will be run (inside of the initialization lock) and\n-    /// passed to the helper thread in a separate task.\n-    ///\n-    /// This function is safe to be called many times.\n-    pub fn boot<T, F>(&'static self, f: F, helper: fn(helper_signal::signal, Receiver<M>, T)) where\n-        T: Send + 'static,\n-        F: FnOnce() -> T,\n-    {\n-        unsafe {\n-            let _guard = self.lock.lock().unwrap();\n-            if *self.chan.get() as usize == 0 {\n-                let (tx, rx) = channel();\n-                *self.chan.get() = boxed::into_raw(box tx);\n-                let (receive, send) = helper_signal::new();\n-                *self.signal.get() = send as usize;\n-\n-                let receive = RaceBox(receive);\n-\n-                let t = f();\n-                thread::spawn(move || {\n-                    helper(receive.0, rx, t);\n-                    let _g = self.lock.lock().unwrap();\n-                    *self.shutdown.get() = true;\n-                    self.cond.notify_one()\n-                });\n-\n-                let _ = rt::at_exit(move || { self.shutdown() });\n-                *self.initialized.get() = true;\n-            } else if *self.chan.get() as usize == 1 {\n-                panic!(\"cannot continue usage after shutdown\");\n-            }\n-        }\n-    }\n-\n-    /// Sends a message to a spawned worker thread.\n-    ///\n-    /// This is only valid if the worker thread has previously booted\n-    pub fn send(&'static self, msg: M) {\n-        unsafe {\n-            let _guard = self.lock.lock().unwrap();\n-\n-            // Must send and *then* signal to ensure that the child receives the\n-            // message. Otherwise it could wake up and go to sleep before we\n-            // send the message.\n-            assert!(*self.chan.get() as usize != 0);\n-            assert!(*self.chan.get() as usize != 1,\n-                    \"cannot continue usage after shutdown\");\n-            (**self.chan.get()).send(msg).unwrap();\n-            helper_signal::signal(*self.signal.get() as helper_signal::signal);\n-        }\n-    }\n-\n-    fn shutdown(&'static self) {\n-        unsafe {\n-            // Shut down, but make sure this is done inside our lock to ensure\n-            // that we'll always receive the exit signal when the thread\n-            // returns.\n-            let mut guard = self.lock.lock().unwrap();\n-\n-            let ptr = *self.chan.get();\n-            if ptr as usize == 1 {\n-                panic!(\"cannot continue usage after shutdown\");\n-            }\n-            // Close the channel by destroying it\n-            let chan = Box::from_raw(*self.chan.get());\n-            *self.chan.get() = 1 as *mut Sender<M>;\n-            drop(chan);\n-            helper_signal::signal(*self.signal.get() as helper_signal::signal);\n-\n-            // Wait for the child to exit\n-            while !*self.shutdown.get() {\n-                guard = self.cond.wait(guard).unwrap();\n-            }\n-            drop(guard);\n-\n-            // Clean up after ourselves\n-            self.lock.destroy();\n-            helper_signal::close(*self.signal.get() as helper_signal::signal);\n-            *self.signal.get() = 0;\n-        }\n-    }\n-}"}, {"sha": "b528575bbed33a4906f869b9e090c70048e97c63", "filename": "src/libstd/sys/common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -15,7 +15,7 @@ use prelude::v1::*;\n pub mod backtrace;\n pub mod condvar;\n pub mod mutex;\n-pub mod net2;\n+pub mod net;\n pub mod poison;\n pub mod remutex;\n pub mod rwlock;"}, {"sha": "7da7071670ab631c575590df8e6b6dbd95d71a6c", "filename": "src/libstd/sys/common/net.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "previous_filename": "src/libstd/sys/common/net2.rs"}, {"sha": "1a467580672b3740ce62720ea3e41799013e1a5f", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -19,9 +19,9 @@ use sys::mutex as sys;\n \n /// A re-entrant mutual exclusion\n ///\n-/// This mutex will block *other* threads waiting for the lock to become available. The thread\n-/// which has already locked the mutex can lock it multiple times without blocking, preventing a\n-/// common source of deadlocks.\n+/// This mutex will block *other* threads waiting for the lock to become\n+/// available. The thread which has already locked the mutex can lock it\n+/// multiple times without blocking, preventing a common source of deadlocks.\n pub struct ReentrantMutex<T> {\n     inner: Box<sys::ReentrantMutex>,\n     poison: poison::Flag,\n@@ -51,10 +51,14 @@ impl<'a, T> !marker::Send for ReentrantMutexGuard<'a, T> {}\n impl<T> ReentrantMutex<T> {\n     /// Creates a new reentrant mutex in an unlocked state.\n     pub fn new(t: T) -> ReentrantMutex<T> {\n-        ReentrantMutex {\n-            inner: box unsafe { sys::ReentrantMutex::new() },\n-            poison: poison::FLAG_INIT,\n-            data: t,\n+        unsafe {\n+            let mut mutex = ReentrantMutex {\n+                inner: box sys::ReentrantMutex::uninitialized(),\n+                poison: poison::FLAG_INIT,\n+                data: t,\n+            };\n+            mutex.inner.init();\n+            return mutex\n         }\n     }\n "}, {"sha": "a6953437497f65f57c276efcc5e70d4676318656", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -102,7 +102,7 @@ impl OpenOptionsExt for OpenOptions {\n }\n \n #[unstable(feature = \"metadata_ext\", reason = \"recently added API\")]\n-pub struct Metadata(sys::fs2::FileAttr);\n+pub struct Metadata(sys::fs::FileAttr);\n \n #[unstable(feature = \"metadata_ext\", reason = \"recently added API\")]\n pub trait MetadataExt {\n@@ -111,7 +111,7 @@ pub trait MetadataExt {\n \n impl MetadataExt for fs::Metadata {\n     fn as_raw(&self) -> &Metadata {\n-        let inner: &sys::fs2::FileAttr = self.as_inner();\n+        let inner: &sys::fs::FileAttr = self.as_inner();\n         unsafe { mem::transmute(inner) }\n     }\n }\n@@ -187,7 +187,7 @@ impl DirEntryExt for fs::DirEntry {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n {\n-    sys::fs2::symlink(src.as_ref(), dst.as_ref())\n+    sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n #[unstable(feature = \"dir_builder\", reason = \"recently added API\")]"}, {"sha": "79e59ddab5be5fca16ad7a6623f1f9f19fda9dac", "filename": "src/libstd/sys/unix/ext/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fio.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -16,7 +16,7 @@ use fs;\n use net;\n use os::raw;\n use sys;\n-use sys_common::{net2, AsInner, FromInner};\n+use sys_common::{self, AsInner, FromInner};\n \n /// Raw file descriptors.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -68,7 +68,7 @@ impl AsRawFd for fs::File {\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for fs::File {\n     unsafe fn from_raw_fd(fd: RawFd) -> fs::File {\n-        fs::File::from_inner(sys::fs2::File::from_inner(fd))\n+        fs::File::from_inner(sys::fs::File::from_inner(fd))\n     }\n }\n \n@@ -89,20 +89,20 @@ impl AsRawFd for net::UdpSocket {\n impl FromRawFd for net::TcpStream {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n         let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpStream::from_inner(net2::TcpStream::from_inner(socket))\n+        net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(socket))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::TcpListener {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n         let socket = sys::net::Socket::from_inner(fd);\n-        net::TcpListener::from_inner(net2::TcpListener::from_inner(socket))\n+        net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(socket))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawFd for net::UdpSocket {\n     unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n         let socket = sys::net::Socket::from_inner(fd);\n-        net::UdpSocket::from_inner(net2::UdpSocket::from_inner(socket))\n+        net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(socket))\n     }\n }"}, {"sha": "45d0d62a01575b100683ca54d5a555b0bc90b51c", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -58,7 +58,7 @@ pub trait ExitStatusExt {\n impl ExitStatusExt for process::ExitStatus {\n     fn signal(&self) -> Option<i32> {\n         match *self.as_inner() {\n-            sys::process2::ExitStatus::Signal(s) => Some(s),\n+            sys::process::ExitStatus::Signal(s) => Some(s),\n             _ => None\n         }\n     }"}, {"sha": "350161c751cb89fa6af78ad8a88cd1f19c880ed9", "filename": "src/libstd/sys/unix/fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "previous_filename": "src/libstd/sys/unix/fs2.rs"}, {"sha": "c1a4e8cee9ed4079fdbac145417ef76c7b520351", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -33,13 +33,13 @@ pub mod c;\n pub mod condvar;\n pub mod ext;\n pub mod fd;\n-pub mod fs2;\n+pub mod fs;\n pub mod mutex;\n pub mod net;\n pub mod os;\n pub mod os_str;\n-pub mod pipe2;\n-pub mod process2;\n+pub mod pipe;\n+pub mod process;\n pub mod rwlock;\n pub mod stack_overflow;\n pub mod sync;"}, {"sha": "70d14f63dbcc62f25b60d1c7d965c38acbc36d13", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -69,30 +69,27 @@ impl Mutex {\n     }\n }\n \n-// FIXME: remove the box, because box happens twice now, once at the common layer and once here.\n-// Box is necessary here, because mutex may not change address after it is intialised on some\n-// platforms. Regular Mutex above handles this by offloading intialisation to the OS on first lock.\n-// Sadly, as far as reentrant mutexes go, this scheme is not quite portable and we must initialise\n-// when we create the mutex, in the `new`.\n-pub struct ReentrantMutex { inner: Box<UnsafeCell<ffi::pthread_mutex_t>> }\n+pub struct ReentrantMutex { inner: UnsafeCell<ffi::pthread_mutex_t> }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n-    pub unsafe fn new() -> ReentrantMutex {\n-        let mutex = ReentrantMutex { inner: box mem::uninitialized() };\n+    pub unsafe fn uninitialized() -> ReentrantMutex {\n+        ReentrantMutex { inner: mem::uninitialized() }\n+    }\n+\n+    pub unsafe fn init(&mut self) {\n         let mut attr: ffi::pthread_mutexattr_t = mem::uninitialized();\n         let result = ffi::pthread_mutexattr_init(&mut attr as *mut _);\n         debug_assert_eq!(result, 0);\n         let result = ffi::pthread_mutexattr_settype(&mut attr as *mut _,\n                                                     ffi::PTHREAD_MUTEX_RECURSIVE);\n         debug_assert_eq!(result, 0);\n-        let result = ffi::pthread_mutex_init(mutex.inner.get(), &attr as *const _);\n+        let result = ffi::pthread_mutex_init(self.inner.get(), &attr as *const _);\n         debug_assert_eq!(result, 0);\n         let result = ffi::pthread_mutexattr_destroy(&mut attr as *mut _);\n         debug_assert_eq!(result, 0);\n-        mutex\n     }\n \n     pub unsafe fn lock(&self) {"}, {"sha": "e9d8c69fefb52035cbdb2a341211dcbf76ccab48", "filename": "src/libstd/sys/unix/pipe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "previous_filename": "src/libstd/sys/unix/pipe2.rs"}, {"sha": "290310f4ad90181738f44866979318ad32ee3bdb", "filename": "src/libstd/sys/unix/process.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -18,9 +18,9 @@ use fmt;\n use io::{self, Error, ErrorKind};\n use libc::{self, pid_t, c_void, c_int, gid_t, uid_t};\n use ptr;\n-use sys::pipe2::AnonPipe;\n+use sys::pipe::AnonPipe;\n use sys::{self, c, cvt, cvt_r};\n-use sys::fs2::{File, OpenOptions};\n+use sys::fs::{File, OpenOptions};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n@@ -141,7 +141,7 @@ impl Process {\n \n         let (envp, _a, _b) = make_envp(cfg.env.as_ref());\n         let (argv, _a) = make_argv(&cfg.program, &cfg.args);\n-        let (input, output) = try!(sys::pipe2::anon_pipe());\n+        let (input, output) = try!(sys::pipe::anon_pipe());\n \n         let pid = unsafe {\n             match libc::fork() {", "previous_filename": "src/libstd/sys/unix/process2.rs"}, {"sha": "822e1b370c2cf4cd31cbbe85aad58ca93ebe0c30", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -125,7 +125,7 @@ impl MetadataExt for Metadata {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n                                                     -> io::Result<()> {\n-    sys::fs2::symlink_inner(src.as_ref(), dst.as_ref(), false)\n+    sys::fs::symlink_inner(src.as_ref(), dst.as_ref(), false)\n }\n \n /// Creates a new directory symlink on the filesystem.\n@@ -146,5 +146,5 @@ pub fn symlink_file<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn symlink_dir<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q)\n                                                    -> io::Result<()> {\n-    sys::fs2::symlink_inner(src.as_ref(), dst.as_ref(), true)\n+    sys::fs::symlink_inner(src.as_ref(), dst.as_ref(), true)\n }"}, {"sha": "f4717eb2425e16aa50590243c373f60967a8daf7", "filename": "src/libstd/sys/windows/ext/io.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fio.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -13,7 +13,7 @@\n use fs;\n use os::windows::raw;\n use net;\n-use sys_common::{net2, AsInner, FromInner};\n+use sys_common::{self, AsInner, FromInner};\n use sys;\n \n /// Raw HANDLEs.\n@@ -61,7 +61,7 @@ impl AsRawHandle for fs::File {\n impl FromRawHandle for fs::File {\n     unsafe fn from_raw_handle(handle: RawHandle) -> fs::File {\n         let handle = handle as ::libc::HANDLE;\n-        fs::File::from_inner(sys::fs2::File::from_inner(handle))\n+        fs::File::from_inner(sys::fs::File::from_inner(handle))\n     }\n }\n \n@@ -113,20 +113,20 @@ impl AsRawSocket for net::UdpSocket {\n impl FromRawSocket for net::TcpStream {\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpStream {\n         let sock = sys::net::Socket::from_inner(sock);\n-        net::TcpStream::from_inner(net2::TcpStream::from_inner(sock))\n+        net::TcpStream::from_inner(sys_common::net::TcpStream::from_inner(sock))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::TcpListener {\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::TcpListener {\n         let sock = sys::net::Socket::from_inner(sock);\n-        net::TcpListener::from_inner(net2::TcpListener::from_inner(sock))\n+        net::TcpListener::from_inner(sys_common::net::TcpListener::from_inner(sock))\n     }\n }\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n impl FromRawSocket for net::UdpSocket {\n     unsafe fn from_raw_socket(sock: RawSocket) -> net::UdpSocket {\n         let sock = sys::net::Socket::from_inner(sock);\n-        net::UdpSocket::from_inner(net2::UdpSocket::from_inner(sock))\n+        net::UdpSocket::from_inner(sys_common::net::UdpSocket::from_inner(sock))\n     }\n }"}, {"sha": "03a56e2958a6e9f485b050323ac42274b744b9eb", "filename": "src/libstd/sys/windows/fs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "previous_filename": "src/libstd/sys/windows/fs2.rs"}, {"sha": "4c30f0f86604f1552f9ec569b8a1402a5646a77c", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -25,14 +25,14 @@ pub mod backtrace;\n pub mod c;\n pub mod condvar;\n pub mod ext;\n-pub mod fs2;\n+pub mod fs;\n pub mod handle;\n pub mod mutex;\n pub mod net;\n pub mod os;\n pub mod os_str;\n-pub mod pipe2;\n-pub mod process2;\n+pub mod pipe;\n+pub mod process;\n pub mod rwlock;\n pub mod stack_overflow;\n pub mod sync;"}, {"sha": "9d2624f94180e5612fc4439dba3f9c5e5a3a73d9", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -59,16 +59,18 @@ impl Mutex {\n     }\n }\n \n-pub struct ReentrantMutex { inner: Box<UnsafeCell<ffi::CRITICAL_SECTION>> }\n+pub struct ReentrantMutex { inner: UnsafeCell<ffi::CRITICAL_SECTION> }\n \n unsafe impl Send for ReentrantMutex {}\n unsafe impl Sync for ReentrantMutex {}\n \n impl ReentrantMutex {\n-    pub unsafe fn new() -> ReentrantMutex {\n-        let mutex = ReentrantMutex { inner: box mem::uninitialized() };\n-        ffi::InitializeCriticalSection(mutex.inner.get());\n-        mutex\n+    pub unsafe fn uninitialized() -> ReentrantMutex {\n+        mem::uninitialized()\n+    }\n+\n+    pub unsafe fn init(&mut self) {\n+        ffi::InitializeCriticalSection(self.inner.get());\n     }\n \n     pub unsafe fn lock(&self) {"}, {"sha": "b441d8beedbc04dd7ab3569aafab81af3fc399c6", "filename": "src/libstd/sys/windows/pipe.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "previous_filename": "src/libstd/sys/windows/pipe2.rs"}, {"sha": "032a349b00eff11e211f6a6a6da2e7f3766d3003", "filename": "src/libstd/sys/windows/process.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf76e637450a861e94ef583340b8f080379a159a/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=cf76e637450a861e94ef583340b8f080379a159a", "patch": "@@ -26,9 +26,9 @@ use path::Path;\n use ptr;\n use sync::{StaticMutex, MUTEX_INIT};\n use sys::c;\n-use sys::fs2::{OpenOptions, File};\n+use sys::fs::{OpenOptions, File};\n use sys::handle::Handle;\n-use sys::pipe2::AnonPipe;\n+use sys::pipe::AnonPipe;\n use sys::stdio;\n use sys::{self, cvt};\n use sys_common::{AsInner, FromInner};", "previous_filename": "src/libstd/sys/windows/process2.rs"}]}