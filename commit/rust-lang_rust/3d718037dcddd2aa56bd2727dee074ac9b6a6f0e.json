{"sha": "3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNzE4MDM3ZGNkZGQyYWE1NmJkMjcyN2RlZTA3NGFjOWI2YTZmMGU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-24T15:25:55Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-27T22:02:22Z"}, "message": "Add default serialization for `Ident`s\n\nAdd tests for -Zast-json and -Zast-json-noexpand, which need this impl.", "tree": {"sha": "ca95b9980825f513fb9324434dd0cd19f39f4363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca95b9980825f513fb9324434dd0cd19f39f4363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "html_url": "https://github.com/rust-lang/rust/commit/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0396aace27eea97c3603e9683e921807dff2a314", "url": "https://api.github.com/repos/rust-lang/rust/commits/0396aace27eea97c3603e9683e921807dff2a314", "html_url": "https://github.com/rust-lang/rust/commit/0396aace27eea97c3603e9683e921807dff2a314"}], "stats": {"total": 100, "additions": 96, "deletions": 4}, "files": [{"sha": "674f8944f261a8fc218b727793d71b9b4fadabeb", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::sync::{Lrc, Lock, HashMapExt, Once};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use std::mem;\n-use syntax::ast::NodeId;\n+use syntax::ast::{Ident, NodeId};\n use syntax::source_map::{SourceMap, StableSourceFileId};\n use syntax_pos::{BytePos, Span, DUMMY_SP, SourceFile};\n use syntax_pos::hygiene::{ExpnId, SyntaxContext};\n@@ -591,7 +591,8 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx> {\n         // FIXME(mw): This method does not restore `ExpnData::parent` or\n         // `SyntaxContextData::prev_ctxt` or `SyntaxContextData::opaque`. These things\n         // don't seem to be used after HIR lowering, so everything should be fine\n-        // as long as incremental compilation does not kick in before that.\n+        // until we want incremental compilation to serialize Spans that we need\n+        // full hygiene information for.\n         let location = || Span::with_root_ctxt(lo, hi);\n         let recover_from_expn_data = |this: &Self, expn_data, transparency, pos| {\n             let span = location().fresh_expansion_with_transparency(expn_data, transparency);\n@@ -626,6 +627,13 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedDecoder<Ident> for CacheDecoder<'a, 'tcx> {\n+    fn specialized_decode(&mut self) -> Result<Ident, Self::Error> {\n+        // FIXME: Handle hygiene in incremental\n+        bug!(\"Trying to decode Ident for incremental\");\n+    }\n+}\n+\n // This impl makes sure that we get a runtime error when we try decode a\n // DefIndex that is not contained in a DefId. Such a case would be problematic\n // because we would not know how to transform the DefIndex to the current\n@@ -833,6 +841,19 @@ where\n     }\n }\n \n+impl<'a, 'tcx, E> SpecializedEncoder<Ident> for CacheEncoder<'a, 'tcx, E>\n+where\n+    E: 'a + ty_codec::TyEncoder,\n+{\n+    fn specialized_encode(&mut self, _: &Ident) -> Result<(), Self::Error> {\n+        // We don't currently encode enough information to ensure hygiene works\n+        // with incremental, so panic rather than risk incremental bugs.\n+\n+        // FIXME: Handle hygiene in incremental\n+        bug!(\"Trying to encode Ident for incremental\")\n+    }\n+}\n+\n impl<'a, 'tcx, E> ty_codec::TyEncoder for CacheEncoder<'a, 'tcx, E>\n where\n     E: 'a + ty_codec::TyEncoder,"}, {"sha": "2d8e97c1800f734b91a54fcf1cd469b438f9caa5", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "patch": "@@ -849,9 +849,29 @@ impl fmt::Display for Ident {\n     }\n }\n \n-impl UseSpecializedEncodable for Ident {}\n+impl UseSpecializedEncodable for Ident {\n+    fn default_encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_struct(\"Ident\", 2, |s| {\n+            s.emit_struct_field(\"name\", 0, |s| {\n+                self.name.encode(s)\n+            })?;\n+            s.emit_struct_field(\"span\", 1, |s| {\n+                self.span.encode(s)\n+            })\n+        })\n+    }\n+}\n \n-impl UseSpecializedDecodable for Ident {}\n+impl UseSpecializedDecodable for Ident {\n+    fn default_decode<D: Decoder>(d: &mut D) -> Result<Self, D::Error> {\n+        d.read_struct(\"Ident\", 2, |d| {\n+            Ok(Ident {\n+                name: d.read_struct_field(\"name\", 0, Decodable::decode)?,\n+                span: d.read_struct_field(\"span\", 1, Decodable::decode)?,\n+            })\n+        })\n+    }\n+}\n \n /// A symbol is an interned or gensymed string. A gensym is a symbol that is\n /// never equal to any other symbol."}, {"sha": "e8a622e1b8772691e146931479e7b708ec8316da", "filename": "src/test/ui/ast-json/ast-json-ice.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-ice.rs?ref=3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "patch": "@@ -0,0 +1,41 @@\n+// Test that AST json serialization doesn't ICE (#63728).\n+\n+// revisions: expand noexpand\n+\n+//[expand] compile-flags: -Zast-json\n+//[noexpand] compile-flags: -Zast-json-noexpand\n+\n+// check-pass\n+// dont-check-compiler-stdout - don't check for any AST change.\n+\n+#![feature(asm)]\n+\n+enum V {\n+    A(i32),\n+    B { f: [i64; 3 + 4] }\n+}\n+\n+trait X {\n+    type Output;\n+    fn read(&self) -> Self::Output;\n+    fn write(&mut self, _: Self::Output);\n+}\n+\n+macro_rules! call_println {\n+    ($y:ident) => { println!(\"{}\", $y) }\n+}\n+\n+fn main() {\n+    #[cfg(any(target_arch = \"x86\",\n+        target_arch = \"x86_64\",\n+        target_arch = \"arm\",\n+        target_arch = \"aarch64\"))]\n+    unsafe { asm!(\"\"::::); }\n+\n+    let x: (i32) = 35;\n+    let y = x as i64<> + 5;\n+\n+    call_println!(y);\n+\n+    struct A;\n+}"}, {"sha": "e444a074602483b48634cf039a1523d042cee075", "filename": "src/test/ui/ast-json/ast-json-output.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.rs?ref=3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "patch": "@@ -0,0 +1,9 @@\n+// Check that AST json printing works.\n+\n+// check-pass\n+// compile-flags: -Zast-json-noexpand\n+// normalize-stdout-test \":\\d+\" -> \":0\"\n+\n+// Only include a single item to reduce how often the test output needs\n+// updating.\n+extern crate core;"}, {"sha": "d23cbe0240ee15777eeebbaa62576d6ca76869cf", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3d718037dcddd2aa56bd2727dee074ac9b6a6f0e/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=3d718037dcddd2aa56bd2727dee074ac9b6a6f0e", "patch": "@@ -0,0 +1 @@\n+{\"module\":{\"inner\":{\"lo\":0,\"hi\":0},\"items\":[{\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"attrs\":[],\"id\":0,\"node\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"vis\":{\"node\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0}},\"span\":{\"lo\":0,\"hi\":0},\"tokens\":[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"extern\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"core\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Semi\",\"span\":{\"lo\":0,\"hi\":0}}]}]}],\"inline\":true},\"attrs\":[],\"span\":{\"lo\":0,\"hi\":0}}"}]}