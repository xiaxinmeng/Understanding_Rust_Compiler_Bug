{"sha": "98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YzdlZDY3ZmIwMGMzZWFjOGYxYmFhM2VhMjRiYzkwM2Y4M2U1NTA=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-03T18:29:07Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-03T18:29:07Z"}, "message": "DefKind::Method -> DefKind::AssocFn", "tree": {"sha": "ed3453de784ba387a2cbdc9194c09589907b2176", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed3453de784ba387a2cbdc9194c09589907b2176"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "html_url": "https://github.com/rust-lang/rust/commit/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b135c739fb542d2c78e30f3e945ff3e528942190", "url": "https://api.github.com/repos/rust-lang/rust/commits/b135c739fb542d2c78e30f3e945ff3e528942190", "html_url": "https://github.com/rust-lang/rust/commit/b135c739fb542d2c78e30f3e945ff3e528942190"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "2374d47ae8ee732ffe4e36726a7c226ebe0fe97e", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -326,12 +326,12 @@ impl<'hir> Map<'hir> {\n             },\n             Node::TraitItem(item) => match item.kind {\n                 TraitItemKind::Const(..) => DefKind::AssocConst,\n-                TraitItemKind::Method(..) => DefKind::Method,\n+                TraitItemKind::Method(..) => DefKind::AssocFn,\n                 TraitItemKind::Type(..) => DefKind::AssocTy,\n             },\n             Node::ImplItem(item) => match item.kind {\n                 ImplItemKind::Const(..) => DefKind::AssocConst,\n-                ImplItemKind::Method(..) => DefKind::Method,\n+                ImplItemKind::Method(..) => DefKind::AssocFn,\n                 ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n                 ImplItemKind::OpaqueTy(..) => DefKind::AssocOpaqueTy,\n             },"}, {"sha": "1f6725fb3950f19843bfd6362f3d9afbebdbf639", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -250,7 +250,7 @@ pub enum EvalResult {\n fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, mut def_id: DefId) -> bool {\n     // Check if `def_id` is a trait method.\n     match tcx.def_kind(def_id) {\n-        Some(DefKind::Method) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n+        Some(DefKind::AssocFn) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n             if let ty::TraitContainer(trait_def_id) = tcx.associated_item(def_id).container {\n                 // Trait methods do not declare visibility (even\n                 // for visibility info in cstore). Use containing"}, {"sha": "ec9ff55ffe4314405e55878bc863f9556c8262ff", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -611,7 +611,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n \n         match self.type_dependent_defs().get(expr.hir_id) {\n-            Some(Ok((DefKind::Method, _))) => true,\n+            Some(Ok((DefKind::AssocFn, _))) => true,\n             _ => false,\n         }\n     }"}, {"sha": "546686c20caa771554315adb97635329082b19e2", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -230,7 +230,7 @@ impl AssocItem {\n     pub fn def_kind(&self) -> DefKind {\n         match self.kind {\n             AssocKind::Const => DefKind::AssocConst,\n-            AssocKind::Method => DefKind::Method,\n+            AssocKind::Method => DefKind::AssocFn,\n             AssocKind::Type => DefKind::AssocTy,\n             AssocKind::OpaqueTy => DefKind::AssocOpaqueTy,\n         }\n@@ -2872,7 +2872,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         } else {\n             match self.def_kind(def_id).expect(\"no def for `DefId`\") {\n-                DefKind::AssocConst | DefKind::Method | DefKind::AssocTy => true,\n+                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy => true,\n                 _ => false,\n             }\n         };\n@@ -3051,7 +3051,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n         let item = if def_id.krate != LOCAL_CRATE {\n-            if let Some(DefKind::Method) = self.def_kind(def_id) {\n+            if let Some(DefKind::AssocFn) = self.def_kind(def_id) {\n                 Some(self.associated_item(def_id))\n             } else {\n                 None"}, {"sha": "db8517bfbf0c78825b51a8d438759a76d98c1fca", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             ParenthesizedGenericArgs::Ok\n                         }\n                         // `a::b::Trait(Args)::TraitItem`\n-                        Res::Def(DefKind::Method, _)\n+                        Res::Def(DefKind::AssocFn, _)\n                         | Res::Def(DefKind::AssocConst, _)\n                         | Res::Def(DefKind::AssocTy, _)\n                             if i + 2 == proj_start =>"}, {"sha": "5b2c1453de6424554c6fc84312519b97a70a08bc", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -72,7 +72,7 @@ pub enum DefKind {\n     Static,\n     /// Refers to the struct or enum variant's constructor.\n     Ctor(CtorOf, CtorKind),\n-    Method,\n+    AssocFn,\n     AssocConst,\n \n     // Macro namespace\n@@ -107,7 +107,8 @@ impl DefKind {\n             DefKind::Union => \"union\",\n             DefKind::Trait => \"trait\",\n             DefKind::ForeignTy => \"foreign type\",\n-            DefKind::Method => \"method\",\n+            // FIXME: Update the description to \"assoc fn\"\n+            DefKind::AssocFn => \"method\",\n             DefKind::Const => \"constant\",\n             DefKind::AssocConst => \"associated constant\",\n             DefKind::TyParam => \"type parameter\",\n@@ -150,7 +151,7 @@ impl DefKind {\n             | DefKind::ConstParam\n             | DefKind::Static\n             | DefKind::Ctor(..)\n-            | DefKind::Method\n+            | DefKind::AssocFn\n             | DefKind::AssocConst => ns == Namespace::ValueNS,\n \n             DefKind::Macro(..) => ns == Namespace::MacroNS,"}, {"sha": "56f8c8c2b9c76503cd29108183f18acd0c51291c", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -468,7 +468,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &segment.args,\n         ) {\n             let borrow = tables.borrow();\n-            if let Some((DefKind::Method, did)) = borrow.type_dependent_def(e.hir_id) {\n+            if let Some((DefKind::AssocFn, did)) = borrow.type_dependent_def(e.hir_id) {\n                 let generics = self.tcx.generics_of(did);\n                 if !generics.params.is_empty() {\n                     err.span_suggestion("}, {"sha": "49d05819c5ec939a49278f671c3a2c774754b79e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 match callee.kind {\n                     hir::ExprKind::Path(ref qpath) => {\n                         match cx.tables.qpath_res(qpath, callee.hir_id) {\n-                            Res::Def(DefKind::Fn, def_id) | Res::Def(DefKind::Method, def_id) => {\n+                            Res::Def(DefKind::Fn, def_id) | Res::Def(DefKind::AssocFn, def_id) => {\n                                 Some(def_id)\n                             }\n                             // `Res::Local` if it was a closure, for which we"}, {"sha": "d0a35c61564365abb50a4d657cc9c6d20014af59", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -504,7 +504,7 @@ impl EntryKind {\n             EntryKind::Struct(_, _) => DefKind::Struct,\n             EntryKind::Union(_, _) => DefKind::Union,\n             EntryKind::Fn(_) | EntryKind::ForeignFn(_) => DefKind::Fn,\n-            EntryKind::Method(_) => DefKind::Method,\n+            EntryKind::Method(_) => DefKind::AssocFn,\n             EntryKind::Type => DefKind::TyAlias,\n             EntryKind::TypeParam => DefKind::TyParam,\n             EntryKind::ConstParam => DefKind::ConstParam,"}, {"sha": "ee8de0e6b93112b4d9d8adff9e10f469bd66e3bb", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -545,7 +545,7 @@ fn write_mir_sig(\n     trace!(\"write_mir_sig: {:?}\", src.instance);\n     let kind = tcx.def_kind(src.def_id());\n     let is_function = match kind {\n-        Some(DefKind::Fn) | Some(DefKind::Method) | Some(DefKind::Ctor(..)) => true,\n+        Some(DefKind::Fn) | Some(DefKind::AssocFn) | Some(DefKind::Ctor(..)) => true,\n         _ => tcx.is_closure(src.def_id()),\n     };\n     match (kind, src.promoted) {"}, {"sha": "9f04bc1dc769703f6822536f70f8b017400716f9", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -600,7 +600,7 @@ fn user_substs_applied_to_res<'tcx>(\n         // a tuple-struct or tuple-variant. This has the type of a\n         // `Fn` but with the user-given substitutions.\n         Res::Def(DefKind::Fn, _)\n-        | Res::Def(DefKind::Method, _)\n+        | Res::Def(DefKind::AssocFn, _)\n         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n         | Res::Def(DefKind::Const, _)\n         | Res::Def(DefKind::AssocConst, _) => {\n@@ -703,7 +703,7 @@ fn convert_path_expr<'a, 'tcx>(\n     match res {\n         // A regular function, constructor function or a constant.\n         Res::Def(DefKind::Fn, _)\n-        | Res::Def(DefKind::Method, _)\n+        | Res::Def(DefKind::AssocFn, _)\n         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n         | Res::SelfCtor(..) => {\n             let user_ty = user_substs_applied_to_res(cx, expr.hir_id, res);"}, {"sha": "175b2390d3083c7691daf30f6f868d5bb7ffe270", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -620,7 +620,7 @@ impl EmbargoVisitor<'tcx> {\n             | DefKind::ForeignTy\n             | DefKind::Fn\n             | DefKind::OpaqueTy\n-            | DefKind::Method\n+            | DefKind::AssocFn\n             | DefKind::Trait\n             | DefKind::TyParam\n             | DefKind::Variant => (),\n@@ -1298,7 +1298,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             _ => None,\n         };\n         let def = def.filter(|(kind, _)| match kind {\n-            DefKind::Method\n+            DefKind::AssocFn\n             | DefKind::AssocConst\n             | DefKind::AssocTy\n             | DefKind::AssocOpaqueTy"}, {"sha": "1fc99e40d8303a33c0a62de611ec72dd75b7bc46", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -887,7 +887,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             | Res::PrimTy(..)\n             | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::Static, _)\n             | Res::Def(DefKind::Const, _)\n             | Res::Def(DefKind::AssocConst, _)\n@@ -911,7 +911,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n-            Res::Def(DefKind::Method, def_id) => {\n+            Res::Def(DefKind::AssocFn, def_id) => {\n                 if cstore.associated_item_cloned_untracked(def_id).method_has_self_argument {\n                     self.r.has_self.insert(def_id);\n                 }\n@@ -1257,7 +1257,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }\n-                (Res::Def(DefKind::Method, item_def_id), ValueNS)\n+                (Res::Def(DefKind::AssocFn, item_def_id), ValueNS)\n             }\n             AssocItemKind::TyAlias(..) => (Res::Def(DefKind::AssocTy, item_def_id), TypeNS),\n             AssocItemKind::Macro(_) => bug!(), // handled above"}, {"sha": "640b07d3d62be3e5c07648d5d70242ecb8b1c4f3", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -266,7 +266,7 @@ impl<'a> PathSource<'a> {\n                 | Res::Def(DefKind::Static, _)\n                 | Res::Local(..)\n                 | Res::Def(DefKind::Fn, _)\n-                | Res::Def(DefKind::Method, _)\n+                | Res::Def(DefKind::AssocFn, _)\n                 | Res::Def(DefKind::AssocConst, _)\n                 | Res::SelfCtor(..)\n                 | Res::Def(DefKind::ConstParam, _) => true,\n@@ -293,7 +293,7 @@ impl<'a> PathSource<'a> {\n                 _ => false,\n             },\n             PathSource::TraitItem(ns) => match res {\n-                Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::Method, _)\n+                Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _)\n                     if ns == ValueNS =>\n                 {\n                     true"}, {"sha": "a9463d970ce4bba7118d4d56bb656ee21128fb03", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -124,7 +124,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             .unwrap_or(false)\n                     }\n                     Res::Def(DefKind::Ctor(..), _)\n-                    | Res::Def(DefKind::Method, _)\n+                    | Res::Def(DefKind::AssocFn, _)\n                     | Res::Def(DefKind::Const, _)\n                     | Res::Def(DefKind::AssocConst, _)\n                     | Res::SelfCtor(_)"}, {"sha": "3a393314463443103a159fbf9a0cfb21d7907d65", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -742,7 +742,7 @@ impl<'a> NameBinding<'a> {\n     fn is_importable(&self) -> bool {\n         match self.res() {\n             Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::AssocTy, _) => false,\n             _ => true,\n         }"}, {"sha": "2bd335421e0f4518f7b0e12fb4588b0e516a198a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -716,7 +716,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             | Res::Def(HirDefKind::Ctor(..), _) => {\n                 Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) })\n             }\n-            Res::Def(HirDefKind::Method, decl_id) => {\n+            Res::Def(HirDefKind::AssocFn, decl_id) => {\n                 let def_id = if decl_id.is_local() {\n                     let ti = self.tcx.associated_item(decl_id);\n "}, {"sha": "d59923a0019f452cf42553b15996a785125f93e9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -2588,7 +2588,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             // Case 4. Reference to a method or associated const.\n-            DefKind::Method | DefKind::AssocConst => {\n+            DefKind::AssocFn | DefKind::AssocConst => {\n                 if segments.len() >= 2 {\n                     let generics = tcx.generics_of(def_id);\n                     path_segs.push(PathSeg(generics.parent.unwrap(), last - 1));"}, {"sha": "7e526573773936b1a5bf493c5d82ab91af3df169", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                         // ZST in a temporary, so skip its type, just in case it\n                         // can significantly complicate the generator type.\n                         Res::Def(DefKind::Fn, _)\n-                        | Res::Def(DefKind::Method, _)\n+                        | Res::Def(DefKind::AssocFn, _)\n                         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n                             // NOTE(eddyb) this assumes a path expression has\n                             // no nested expressions to keep track of."}, {"sha": "fd5cac5b24bf1817a3666d0011ba76b85b78c43a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -2976,7 +2976,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn write_method_call(&self, hir_id: hir::HirId, method: MethodCallee<'tcx>) {\n         debug!(\"write_method_call(hir_id={:?}, method={:?})\", hir_id, method);\n-        self.write_resolution(hir_id, Ok((DefKind::Method, method.def_id)));\n+        self.write_resolution(hir_id, Ok((DefKind::AssocFn, method.def_id)));\n         self.write_substs(hir_id, method.substs);\n \n         // When the method is confirmed, the `method.substs` includes\n@@ -5364,7 +5364,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     is_alias_variant_ctor = true;\n                 }\n             }\n-            Res::Def(DefKind::Method, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n+            Res::Def(DefKind::AssocFn, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {"}, {"sha": "c50274d19e3f63c2a1c2c75b15604205e6185971", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -682,7 +682,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.set_tainted_by_errors();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::Method, _)\n+            Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _)\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n                 report_unexpected_variant_res(tcx, res, pat.span, qpath);\n@@ -729,7 +729,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n             match (res, &pat.kind) {\n-                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::Method, _), _) => {\n+                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::AssocFn, _), _) => {\n                     err.span_label(pat.span, \"`fn` calls are not allowed in patterns\");\n                     err.help(\n                         \"for more information, visit \\\n@@ -766,7 +766,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 on_error();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::Method, _) => {\n+            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _) => {\n                 report_unexpected_res(res);\n                 return tcx.types.err;\n             }"}, {"sha": "8e06948a1095303a9784d75ad258f8f0272ffc77", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -425,7 +425,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | Res::Def(DefKind::ConstParam, _)\n             | Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::SelfCtor(..) => Ok(self.cat_rvalue(hir_id, span, expr_ty)),\n \n             Res::Def(DefKind::Static, _) => Ok(Place {"}, {"sha": "75355b84fee835963cfa838bb4504c8b02a59c45", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c7ed67fb00c3eac8f1baa3ea24bc903f83e550/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=98c7ed67fb00c3eac8f1baa3ea24bc903f83e550", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // In case this is a trait item, skip the\n                 // early return and try looking for the trait.\n                 let value = match res {\n-                    Res::Def(DefKind::Method, _) | Res::Def(DefKind::AssocConst, _) => true,\n+                    Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::AssocConst, _) => true,\n                     Res::Def(DefKind::AssocTy, _) => false,\n                     Res::Def(DefKind::Variant, _) => {\n                         return handle_variant(cx, res, extra_fragment);\n@@ -813,7 +813,7 @@ fn ambiguity_error(\n \n                     for (res, ns) in candidates {\n                         let (action, mut suggestion) = match res {\n-                            Res::Def(DefKind::Method, _) | Res::Def(DefKind::Fn, _) => {\n+                            Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::Fn, _) => {\n                                 (\"add parentheses\", format!(\"{}()\", path_str))\n                             }\n                             Res::Def(DefKind::Macro(..), _) => {"}]}