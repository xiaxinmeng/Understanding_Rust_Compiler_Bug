{"sha": "a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0NzhjZDQxZTNmMjAzZWM1MzFiZmNlN2VmYjhmYzYwMmFhZDVjN2Q=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-06T23:03:26Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-11T20:08:24Z"}, "message": "Improve diagnostics", "tree": {"sha": "9d281c05e049256d4ee313eac0ff25fc96afacc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d281c05e049256d4ee313eac0ff25fc96afacc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "html_url": "https://github.com/rust-lang/rust/commit/a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235905c080bf953a522ff86d4fec6134ac4fb371", "url": "https://api.github.com/repos/rust-lang/rust/commits/235905c080bf953a522ff86d4fec6134ac4fb371", "html_url": "https://github.com/rust-lang/rust/commit/235905c080bf953a522ff86d4fec6134ac4fb371"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "2195331f465bac5fc2f9879e92a3746bfc4d2fd7", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "patch": "@@ -348,7 +348,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                                 let mut err = struct_span_err!(self.session, span, E0642,\n                                     \"patterns aren't allowed in trait methods\");\n                                 let suggestion = \"give this argument a name or use an \\\n-                                                  underscore to ignore it, instead of a \\\n+                                                  underscore to ignore it instead of using a \\\n                                                   tuple pattern\";\n                                 err.span_suggestion(span, suggestion, \"_\".to_owned());\n                                 err.emit();"}, {"sha": "f1d0a4fee341e92502ddb9906fc58c3684d1c6d0", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "patch": "@@ -269,7 +269,15 @@ Example of erroneous code:\n ```compile_fail,E0642\n trait Foo {\n     fn foo((x, y): (i32, i32)); // error: patterns aren't allowed\n-                                // in methods without bodies\n+                                //        in trait methods\n+}\n+```\n+\n+You can instead use a single name for the argument:\n+\n+```\n+trait Foo {\n+    fn foo(x_and_y: (i32, i32)); // ok!\n }\n ```\n \"##,"}, {"sha": "a1dbe93fdfe35a0310b5bdea3c4ce52b52b3f6c2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "patch": "@@ -1744,7 +1744,7 @@ impl<'a> Parser<'a> {\n     fn parse_arg_general(&mut self, require_name: bool) -> PResult<'a, Arg> {\n         maybe_whole!(self, NtArg, |x| x);\n \n-        // If we see `ident :`, then we know that the argument is just of the\n+        // If we see `ident :`, then we know that the argument is not just of the\n         // form `type`, which means we won't need to recover from parsing a\n         // pattern and so we don't need to store a parser snapshot.\n         let parser_snapshot_before_pat = if"}, {"sha": "8c16b8b30cd53b2b6bf7b728380ca94980bb29d3", "filename": "src/test/ui/E0642.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Ftest%2Fui%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a478cd41e3f203ec531bfce7efb8fc602aad5c7d/src%2Ftest%2Fui%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0642.stderr?ref=a478cd41e3f203ec531bfce7efb8fc602aad5c7d", "patch": "@@ -3,7 +3,7 @@ error[E0642]: patterns aren't allowed in trait methods\n    |\n LL |     fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in trait methods\n    |            ^^^^^^\n-help: give this argument a name or use an underscore to ignore it, instead of a tuple pattern\n+help: give this argument a name or use an underscore to ignore it instead of using a tuple pattern\n    |\n LL |     fn foo(_: (i32, i32)); //~ ERROR patterns aren't allowed in trait methods\n    |            ^\n@@ -13,7 +13,7 @@ error[E0642]: patterns aren't allowed in trait methods\n    |\n LL |     fn bar((x, y): (i32, i32)) {} //~ ERROR patterns aren't allowed in trait methods\n    |            ^^^^^^\n-help: give this argument a name or use an underscore to ignore it, instead of a tuple pattern\n+help: give this argument a name or use an underscore to ignore it instead of using a tuple pattern\n    |\n LL |     fn bar(_: (i32, i32)) {} //~ ERROR patterns aren't allowed in trait methods\n    |            ^"}]}