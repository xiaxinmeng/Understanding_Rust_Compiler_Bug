{"sha": "107ee4067414dc02da091ce49fb491695bbb52f0", "node_id": "C_kwDOAAsO6NoAKDEwN2VlNDA2NzQxNGRjMDJkYTA5MWNlNDlmYjQ5MTY5NWJiYjUyZjA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-26T12:04:23Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-10T10:07:35Z"}, "message": "update clippy", "tree": {"sha": "c129fe31b84f63a1d684e4f72d45590751038f03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c129fe31b84f63a1d684e4f72d45590751038f03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107ee4067414dc02da091ce49fb491695bbb52f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107ee4067414dc02da091ce49fb491695bbb52f0", "html_url": "https://github.com/rust-lang/rust/commit/107ee4067414dc02da091ce49fb491695bbb52f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107ee4067414dc02da091ce49fb491695bbb52f0/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "670bc53c0350b461b0d9bdb9451261c0d805ecef", "url": "https://api.github.com/repos/rust-lang/rust/commits/670bc53c0350b461b0d9bdb9451261c0d805ecef", "html_url": "https://github.com/rust-lang/rust/commit/670bc53c0350b461b0d9bdb9451261c0d805ecef"}], "stats": {"total": 72, "additions": 27, "deletions": 45}, "files": [{"sha": "34a5f8444dea0af0d58a1d221db4a1ca3998999a", "filename": "clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderivable_impls.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{is_automatically_derived, is_default_equivalent, peel_blocks};\n+use clippy_utils::{is_default_equivalent, peel_blocks};\n use rustc_hir::{\n     def::{DefKind, Res},\n     Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, TyKind,\n@@ -71,8 +71,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n                 self_ty,\n                 ..\n             }) = item.kind;\n-            if let attrs = cx.tcx.hir().attrs(item.hir_id());\n-            if !is_automatically_derived(attrs);\n+            if !cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n             if !item.span.from_expansion();\n             if let Some(def_id) = trait_ref.trait_def_id();\n             if cx.tcx.is_diagnostic_item(sym::Default, def_id);\n@@ -81,6 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if let ImplItemKind::Fn(_, b) = &impl_item.kind;\n             if let Body { value: func_expr, .. } = cx.tcx.hir().body(*b);\n             if let Some(adt_def) = cx.tcx.type_of(item.def_id).ty_adt_def();\n+            if let attrs = cx.tcx.hir().attrs(item.hir_id());\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);\n             if !child_attrs.iter().any(|attr| attr.doc_str().is_some());"}, {"sha": "545bc7d210332706e960f0d96fa72f65c3e5f0f7", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_then};\n use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n-use clippy_utils::{is_automatically_derived, is_lint_allowed, match_def_path};\n+use clippy_utils::{is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n@@ -171,8 +171,8 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.def_id);\n-            let attrs = cx.tcx.hir().attrs(item.hir_id());\n-            let is_automatically_derived = is_automatically_derived(attrs);\n+            let is_automatically_derived =\n+                cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);\n@@ -201,7 +201,7 @@ fn check_hash_peq<'tcx>(\n         then {\n             // Look for the PartialEq implementations for `ty`\n             cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {\n-                let peq_is_automatically_derived = is_automatically_derived(cx.tcx.get_attrs(impl_id));\n+                let peq_is_automatically_derived = cx.tcx.has_attr(impl_id, sym::automatically_derived);\n \n                 if peq_is_automatically_derived == hash_is_automatically_derived {\n                     return;\n@@ -255,7 +255,7 @@ fn check_ord_partial_ord<'tcx>(\n         then {\n             // Look for the PartialOrd implementations for `ty`\n             cx.tcx.for_each_relevant_impl(partial_ord_trait_def_id, ty, |impl_id| {\n-                let partial_ord_is_automatically_derived = is_automatically_derived(cx.tcx.get_attrs(impl_id));\n+                let partial_ord_is_automatically_derived = cx.tcx.has_attr(impl_id, sym::automatically_derived);\n \n                 if partial_ord_is_automatically_derived == ord_is_automatically_derived {\n                     return;"}, {"sha": "6672a6cb0b58fb7be926b3d0f074021645f602e2", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -13,13 +13,13 @@ use clippy_utils::attrs::is_proc_macro;\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_must_use_ty;\n-use clippy_utils::{match_def_path, must_use_attr, return_ty, trait_ref_of_method};\n+use clippy_utils::{match_def_path, return_ty, trait_ref_of_method};\n \n use super::{DOUBLE_MUST_USE, MUST_USE_CANDIDATE, MUST_USE_UNIT};\n \n pub(super) fn check_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n     let attrs = cx.tcx.hir().attrs(item.hir_id());\n-    let attr = must_use_attr(attrs);\n+    let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n     if let hir::ItemKind::Fn(ref sig, _generics, ref body_id) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n@@ -44,7 +44,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = must_use_attr(attrs);\n+        let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n         } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id).is_none() {\n@@ -67,7 +67,7 @@ pub(super) fn check_trait_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Tr\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n \n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n-        let attr = must_use_attr(attrs);\n+        let attr = cx.tcx.get_attr(item.def_id.to_def_id(), sym::must_use);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n         } else if let hir::TraitFn::Provided(eid) = *eid {"}, {"sha": "09164690700ef0fa95b7c11584ac7b36938cba8d", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -1,4 +1,3 @@\n-use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::{is_lint_allowed, meets_msrv, msrvs};\n@@ -161,7 +160,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n                 let id = cx.tcx.hir().local_def_id(v.id);\n                 (matches!(v.data, hir::VariantData::Unit(_))\n                     && v.ident.as_str().starts_with('_')\n-                    && is_doc_hidden(cx.tcx.get_attrs(id.to_def_id())))\n+                    && cx.tcx.is_doc_hidden(id.to_def_id()))\n                 .then(|| (id, v.span))\n             });\n             if let Some((id, span)) = iter.next()"}, {"sha": "fc45ccee18528fbbffe6f6664cd3a91f7d298160", "filename": "clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -193,6 +193,5 @@ impl<'a> CommonPrefixSearcher<'a> {\n }\n \n fn is_hidden(cx: &LateContext<'_>, variant_def: &VariantDef) -> bool {\n-    let attrs = cx.tcx.get_attrs(variant_def.def_id);\n-    clippy_utils::attrs::is_doc_hidden(attrs) || clippy_utils::attrs::is_unstable(attrs)\n+    cx.tcx.is_doc_hidden(variant_def.def_id) || cx.tcx.has_attr(variant_def.def_id, sym::unstable)\n }"}, {"sha": "2bdccb425071b135ebb88e5ff403460912f03fa4", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -85,7 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             // can't be implemented for unsafe new\n                             return;\n                         }\n-                        if clippy_utils::is_doc_hidden(cx.tcx.hir().attrs(id)) {\n+                        if cx.tcx.is_doc_hidden(impl_item.def_id) {\n                             // shouldn't be implemented when it is hidden in docs\n                             return;\n                         }"}, {"sha": "09ac514d014eb1d67fc1f9a6ad9a58f5061bdaaf", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_hir;\n-use clippy_utils::is_automatically_derived;\n use if_chain::if_chain;\n use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -37,8 +36,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: Some(ref trait_ref), items: impl_items, .. }) = item.kind;\n-            let attrs = cx.tcx.hir().attrs(item.hir_id());\n-            if !is_automatically_derived(attrs);\n+            if !cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n             if let Some(eq_trait) = cx.tcx.lang_items().eq_trait();\n             if trait_ref.path.res.def_id() == eq_trait;\n             then {"}, {"sha": "f300acf0fb2ba4d300e490449e9a99a4d56c7f04", "filename": "clippy_lints/src/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -290,7 +290,7 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n \n     fn has_sig_drop_attr(&mut self, cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         if let Some(adt) = ty.ty_adt_def() {\n-            if get_attr(cx.sess(), cx.tcx.get_attrs(adt.did()), \"has_significant_drop\").count() > 0 {\n+            if get_attr(cx.sess(), cx.tcx.get_attrs_unchecked(adt.did()), \"has_significant_drop\").count() > 0 {\n                 return true;\n             }\n         }"}, {"sha": "904b1a05ccc30dfc50a81f0581bbb3431f751f88", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -1,6 +1,7 @@\n-use rustc_ast::{ast, attr};\n+use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_session::Session;\n+use rustc_ast::attr;\n use rustc_span::sym;\n use std::str::FromStr;\n \n@@ -158,7 +159,3 @@ pub fn is_doc_hidden(attrs: &[ast::Attribute]) -> bool {\n         .any(|l| attr::list_contains_name(&l, sym::hidden))\n }\n \n-/// Return true if the attributes contain `#[unstable]`\n-pub fn is_unstable(attrs: &[ast::Attribute]) -> bool {\n-    attrs.iter().any(|attr| attr.has_name(sym::unstable))\n-}"}, {"sha": "98a073d122e317cb532b1b6fb4c40eac925b17e9", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -66,7 +66,7 @@ use std::lazy::SyncOnceCell;\n use std::sync::{Mutex, MutexGuard};\n \n use if_chain::if_chain;\n-use rustc_ast::ast::{self, Attribute, LitKind};\n+use rustc_ast::ast::{self, LitKind};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n@@ -1472,12 +1472,6 @@ pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>\n     }\n }\n \n-/// Checks for the `#[automatically_derived]` attribute all `#[derive]`d\n-/// implementations have.\n-pub fn is_automatically_derived(attrs: &[ast::Attribute]) -> bool {\n-    has_attr(attrs, sym::automatically_derived)\n-}\n-\n pub fn is_self(slf: &Param<'_>) -> bool {\n     if let PatKind::Binding(.., name, _) = slf.pat.kind {\n         name.name == kw::SelfLower\n@@ -1724,11 +1718,6 @@ pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'t\n     None\n }\n \n-// Finds the `#[must_use]` attribute, if any\n-pub fn must_use_attr(attrs: &[Attribute]) -> Option<&Attribute> {\n-    attrs.iter().find(|a| a.has_name(sym::must_use))\n-}\n-\n // check if expr is calling method or function with #[must_use] attribute\n pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     let did = match expr.kind {\n@@ -1745,7 +1734,7 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         _ => None,\n     };\n \n-    did.map_or(false, |did| must_use_attr(cx.tcx.get_attrs(did)).is_some())\n+    did.map_or(false, |did| cx.tcx.has_attr(did, sym::must_use))\n }\n \n /// Checks if an expression represents the identity function"}, {"sha": "7f14a306d0e529a6601e3dab93921d7b10e9184b", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107ee4067414dc02da091ce49fb491695bbb52f0/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=107ee4067414dc02da091ce49fb491695bbb52f0", "patch": "@@ -22,7 +22,7 @@ use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::query::normalize::AtExt;\n use std::iter;\n \n-use crate::{match_def_path, must_use_attr, path_res, paths};\n+use crate::{match_def_path, path_res, paths};\n \n // Checks if the given type implements copy.\n pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n@@ -178,18 +178,18 @@ pub fn has_drop<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n // Returns whether the type has #[must_use] attribute\n pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => must_use_attr(cx.tcx.get_attrs(adt.did())).is_some(),\n-        ty::Foreign(ref did) => must_use_attr(cx.tcx.get_attrs(*did)).is_some(),\n+        ty::Adt(adt, _) => cx.tcx.has_attr(adt.did(), sym::must_use),\n+        ty::Foreign(did) => cx.tcx.has_attr(*did, sym::must_use),\n         ty::Slice(ty) | ty::Array(ty, _) | ty::RawPtr(ty::TypeAndMut { ty, .. }) | ty::Ref(_, ty, _) => {\n             // for the Array case we don't need to care for the len == 0 case\n             // because we don't want to lint functions returning empty arrays\n             is_must_use_ty(cx, *ty)\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(ref def_id, _) => {\n+        ty::Opaque(def_id, _) => {\n             for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() {\n-                    if must_use_attr(cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n+                    if cx.tcx.has_attr(trait_predicate.trait_ref.def_id, sym::must_use) {\n                         return true;\n                     }\n                 }\n@@ -199,7 +199,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Dynamic(binder, _) => {\n             for predicate in binder.iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n-                    if must_use_attr(cx.tcx.get_attrs(trait_ref.def_id)).is_some() {\n+                    if cx.tcx.has_attr(trait_ref.def_id, sym::must_use) {\n                         return true;\n                     }\n                 }"}]}