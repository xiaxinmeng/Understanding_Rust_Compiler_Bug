{"sha": "d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "node_id": "C_kwDOAAsO6NoAKGQ2M2QyYmQ2N2ZiNDc0MWVlYjhiODJlZmFmNWQyYWEyYWI4ZDYwYzc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-09T05:05:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T05:05:58Z"}, "message": "Rollup merge of #100238 - Bryysen:master, r=cjgillot\n\nFurther improve error message for E0081\n\nCloses #97533", "tree": {"sha": "e6bc757a582b3c924647f871264cedd0d543dc0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6bc757a582b3c924647f871264cedd0d543dc0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8es2CRBK7hj4Ov3rIwAAzEQIAD8hDL2ZbH3RJlsW3YOd+N/y\nM1f52vcAi5xtNQAmZPLtWBbJ7yMlbqpS/ZQHqpeSlTPjtqW/rOBbbxrHItSo9x90\n07kD2/yp5lABhYgwKJRt6l1A8pI6lKkeicNiaKvXO1QFeGnUenPPJbByEI6lq1ms\nZLWLOxBuxSPqenbShnf04jzlZu5Oa9YHwGwPc5m5hsKBIpUEFGXqyaDRuWX+9Kj8\nJNPYwYLpq6025QiH+DDyqBJ2z5qJ3+p1iAMGKnKPOCtoEGcdK8C/ksBAXY7RGPhn\nM8oQBSxj6oD0+fZ5eRn38l64qMRnHrou+9j+3FLo5zqMlzE9He4E/84XxJWjXRI=\n=Mo0r\n-----END PGP SIGNATURE-----\n", "payload": "tree e6bc757a582b3c924647f871264cedd0d543dc0c\nparent 65cc68b3fd164f351287ac88daf4302e9842cb37\nparent 74e71da5472f92988bed09d3b79470901ef8632f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660021558 +0200\ncommitter GitHub <noreply@github.com> 1660021558 +0200\n\nRollup merge of #100238 - Bryysen:master, r=cjgillot\n\nFurther improve error message for E0081\n\nCloses #97533\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "html_url": "https://github.com/rust-lang/rust/commit/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65cc68b3fd164f351287ac88daf4302e9842cb37", "url": "https://api.github.com/repos/rust-lang/rust/commits/65cc68b3fd164f351287ac88daf4302e9842cb37", "html_url": "https://github.com/rust-lang/rust/commit/65cc68b3fd164f351287ac88daf4302e9842cb37"}, {"sha": "74e71da5472f92988bed09d3b79470901ef8632f", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e71da5472f92988bed09d3b79470901ef8632f", "html_url": "https://github.com/rust-lang/rust/commit/74e71da5472f92988bed09d3b79470901ef8632f"}], "stats": {"total": 338, "additions": 173, "deletions": 165}, "files": [{"sha": "c5fa8a5db0312969132868869346d6a5ccc557c4", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 95, "deletions": 63, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "patch": "@@ -32,7 +32,6 @@ use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCtxt};\n use rustc_ty_utils::representability::{self, Representability};\n \n-use std::iter;\n use std::ops::ControlFlow;\n \n pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Abi) {\n@@ -1494,76 +1493,109 @@ fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, vs: &'tcx [hir::Variant<'tcx>], def_id: L\n         }\n     }\n \n-    let mut disr_vals: Vec<Discr<'tcx>> = Vec::with_capacity(vs.len());\n-    // This tracks the previous variant span (in the loop) incase we need it for diagnostics\n-    let mut prev_variant_span: Span = DUMMY_SP;\n-    for ((_, discr), v) in iter::zip(def.discriminants(tcx), vs) {\n-        // Check for duplicate discriminant values\n-        if let Some(i) = disr_vals.iter().position(|&x| x.val == discr.val) {\n-            let variant_did = def.variant(VariantIdx::new(i)).def_id;\n-            let variant_i_hir_id = tcx.hir().local_def_id_to_hir_id(variant_did.expect_local());\n-            let variant_i = tcx.hir().expect_variant(variant_i_hir_id);\n-            let i_span = match variant_i.disr_expr {\n-                Some(ref expr) => tcx.hir().span(expr.hir_id),\n-                None => tcx.def_span(variant_did),\n-            };\n-            let span = match v.disr_expr {\n-                Some(ref expr) => tcx.hir().span(expr.hir_id),\n-                None => v.span,\n-            };\n-            let display_discr = format_discriminant_overflow(tcx, v, discr);\n-            let display_discr_i = format_discriminant_overflow(tcx, variant_i, disr_vals[i]);\n-            let no_disr = v.disr_expr.is_none();\n-            let mut err = struct_span_err!(\n-                tcx.sess,\n-                sp,\n-                E0081,\n-                \"discriminant value `{}` assigned more than once\",\n-                discr,\n-            );\n-\n-            err.span_label(i_span, format!(\"first assignment of {display_discr_i}\"));\n-            err.span_label(span, format!(\"second assignment of {display_discr}\"));\n-\n-            if no_disr {\n-                err.span_label(\n-                    prev_variant_span,\n-                    format!(\n-                        \"assigned discriminant for `{}` was incremented from this discriminant\",\n-                        v.ident\n-                    ),\n-                );\n-            }\n-            err.emit();\n-        }\n-\n-        disr_vals.push(discr);\n-        prev_variant_span = v.span;\n-    }\n+    detect_discriminant_duplicate(tcx, def.discriminants(tcx).collect(), vs, sp);\n \n     check_representable(tcx, sp, def_id);\n     check_transparent(tcx, sp, def);\n }\n \n-/// In the case that a discriminant is both a duplicate and an overflowing literal,\n-/// we insert both the assigned discriminant and the literal it overflowed from into the formatted\n-/// output. Otherwise we format the discriminant normally.\n-fn format_discriminant_overflow<'tcx>(\n+/// Part of enum check. Given the discriminants of an enum, errors if two or more discriminants are equal\n+fn detect_discriminant_duplicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    variant: &hir::Variant<'_>,\n-    dis: Discr<'tcx>,\n-) -> String {\n-    if let Some(expr) = &variant.disr_expr {\n-        let body = &tcx.hir().body(expr.body).value;\n-        if let hir::ExprKind::Lit(lit) = &body.kind\n-            && let rustc_ast::LitKind::Int(lit_value, _int_kind) = &lit.node\n-            && dis.val != *lit_value\n-        {\n-                    return format!(\"`{dis}` (overflowed from `{lit_value}`)\");\n+    mut discrs: Vec<(VariantIdx, Discr<'tcx>)>,\n+    vs: &'tcx [hir::Variant<'tcx>],\n+    self_span: Span,\n+) {\n+    // Helper closure to reduce duplicate code. This gets called everytime we detect a duplicate.\n+    // Here `idx` refers to the order of which the discriminant appears, and its index in `vs`\n+    let report = |dis: Discr<'tcx>,\n+                  idx: usize,\n+                  err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>| {\n+        let var = &vs[idx]; // HIR for the duplicate discriminant\n+        let (span, display_discr) = match var.disr_expr {\n+            Some(ref expr) => {\n+                // In the case the discriminant is both a duplicate and overflowed, let the user know\n+                if let hir::ExprKind::Lit(lit) = &tcx.hir().body(expr.body).value.kind\n+                    && let rustc_ast::LitKind::Int(lit_value, _int_kind) = &lit.node\n+                    && *lit_value != dis.val\n+                {\n+                    (tcx.hir().span(expr.hir_id), format!(\"`{dis}` (overflowed from `{lit_value}`)\"))\n+                // Otherwise, format the value as-is\n+                } else {\n+                    (tcx.hir().span(expr.hir_id), format!(\"`{dis}`\"))\n+                }\n+            }\n+            None => {\n+                // At this point we know this discriminant is a duplicate, and was not explicitly\n+                // assigned by the user. Here we iterate backwards to fetch the HIR for the last\n+                // explictly assigned discriminant, and letting the user know that this was the\n+                // increment startpoint, and how many steps from there leading to the duplicate\n+                if let Some((n, hir::Variant { span, ident, .. })) =\n+                    vs[..idx].iter().rev().enumerate().find(|v| v.1.disr_expr.is_some())\n+                {\n+                    let ve_ident = var.ident;\n+                    let n = n + 1;\n+                    let sp = if n > 1 { \"variants\" } else { \"variant\" };\n+\n+                    err.span_label(\n+                        *span,\n+                        format!(\"discriminant for `{ve_ident}` incremented from this startpoint (`{ident}` + {n} {sp} later => `{ve_ident}` = {dis})\"),\n+                    );\n+                }\n+\n+                (vs[idx].span, format!(\"`{dis}`\"))\n+            }\n+        };\n+\n+        err.span_label(span, format!(\"{display_discr} assigned here\"));\n+    };\n+\n+    // Here we loop through the discriminants, comparing each discriminant to another.\n+    // When a duplicate is detected, we instatiate an error and point to both\n+    // initial and duplicate value. The duplicate discriminant is then discarded by swapping\n+    // it with the last element and decrementing the `vec.len` (which is why we have to evaluate\n+    // `discrs.len()` anew every iteration, and why this could be tricky to do in a functional\n+    // style as we are mutating `discrs` on the fly).\n+    let mut i = 0;\n+    while i < discrs.len() {\n+        let hir_var_i_idx = discrs[i].0.index();\n+        let mut error: Option<DiagnosticBuilder<'_, _>> = None;\n+\n+        let mut o = i + 1;\n+        while o < discrs.len() {\n+            let hir_var_o_idx = discrs[o].0.index();\n+\n+            if discrs[i].1.val == discrs[o].1.val {\n+                let err = error.get_or_insert_with(|| {\n+                    let mut ret = struct_span_err!(\n+                        tcx.sess,\n+                        self_span,\n+                        E0081,\n+                        \"discriminant value `{}` assigned more than once\",\n+                        discrs[i].1,\n+                    );\n+\n+                    report(discrs[i].1, hir_var_i_idx, &mut ret);\n+\n+                    ret\n+                });\n+\n+                report(discrs[o].1, hir_var_o_idx, err);\n+\n+                // Safe to unwrap here, as we wouldn't reach this point if `discrs` was empty\n+                discrs[o] = *discrs.last().unwrap();\n+                discrs.pop();\n+            } else {\n+                o += 1;\n+            }\n         }\n-    }\n \n-    format!(\"`{dis}`\")\n+        if let Some(mut e) = error {\n+            e.emit();\n+        }\n+\n+        i += 1;\n+    }\n }\n \n pub(super) fn check_type_params_are_used<'tcx>("}, {"sha": "199277abbc4845a0edb9db97ceec74d57e7ddffe", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "patch": "@@ -112,7 +112,6 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::{HirIdMap, ImplicitSelfKind, Node};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::Idx;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};"}, {"sha": "fc94d281c77e20578c4065eef3fd37f04d39e2b5", "filename": "src/test/ui/enum/enum-discrim-autosizing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.rs?ref=d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "patch": "@@ -6,9 +6,9 @@\n enum Eu64 {\n     //~^ ERROR discriminant value `0` assigned more than once\n     Au64 = 0,\n-    //~^NOTE first assignment of `0`\n+    //~^NOTE `0` assigned here\n     Bu64 = 0x8000_0000_0000_0000\n-    //~^NOTE second assignment of `0` (overflowed from `9223372036854775808`)\n+    //~^NOTE `0` (overflowed from `9223372036854775808`) assigned here\n }\n \n fn main() {}"}, {"sha": "be3d7c64e28bd988febb63697c6a99279a7b6736", "filename": "src/test/ui/enum/enum-discrim-autosizing.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum%2Fenum-discrim-autosizing.stderr?ref=d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "patch": "@@ -5,10 +5,10 @@ LL | enum Eu64 {\n    | ^^^^^^^^^\n LL |\n LL |     Au64 = 0,\n-   |            - first assignment of `0`\n+   |            - `0` assigned here\n LL |\n LL |     Bu64 = 0x8000_0000_0000_0000\n-   |            --------------------- second assignment of `0` (overflowed from `9223372036854775808`)\n+   |            --------------------- `0` (overflowed from `9223372036854775808`) assigned here\n \n error: aborting due to previous error\n "}, {"sha": "f53fda864d6558224b082fb5f454e446b7b3a977", "filename": "src/test/ui/error-codes/E0081.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.rs?ref=d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "patch": "@@ -1,30 +1,53 @@\n enum Enum {\n     //~^ ERROR discriminant value `3` assigned more than once\n     P = 3,\n-    //~^ NOTE first assignment of `3`\n+    //~^ NOTE `3` assigned here\n     X = 3,\n-    //~^ NOTE second assignment of `3`\n+    //~^ NOTE `3` assigned here\n     Y = 5\n }\n \n #[repr(u8)]\n enum EnumOverflowRepr {\n     //~^ ERROR discriminant value `1` assigned more than once\n     P = 257,\n-    //~^ NOTE first assignment of `1` (overflowed from `257`)\n+    //~^ NOTE `1` (overflowed from `257`) assigned here\n     X = 513,\n-    //~^ NOTE second assignment of `1` (overflowed from `513`)\n+    //~^ NOTE `1` (overflowed from `513`) assigned here\n }\n \n #[repr(i8)]\n enum NegDisEnum {\n     //~^ ERROR discriminant value `-1` assigned more than once\n     First = -1,\n-    //~^ NOTE first assignment of `-1`\n+    //~^ NOTE `-1` assigned here\n     Second = -2,\n-    //~^ NOTE assigned discriminant for `Last` was incremented from this discriminant\n+    //~^ NOTE discriminant for `Last` incremented from this startpoint (`Second` + 1 variant later => `Last` = -1)\n     Last,\n-    //~^ NOTE second assignment of `-1`\n+    //~^ NOTE `-1` assigned here\n+}\n+\n+enum MultipleDuplicates {\n+    //~^ ERROR discriminant value `0` assigned more than once\n+    //~^^ ERROR discriminant value `-2` assigned more than once\n+    V0,\n+    //~^ NOTE `0` assigned here\n+    V1 = 0,\n+    //~^ NOTE `0` assigned here\n+    V2,\n+    V3,\n+    V4 = 0,\n+    //~^ NOTE `0` assigned here\n+    V5 = -2,\n+    //~^ NOTE discriminant for `V7` incremented from this startpoint (`V5` + 2 variants later => `V7` = 0)\n+    //~^^ NOTE `-2` assigned here\n+    V6,\n+    V7,\n+    //~^ NOTE `0` assigned here\n+    V8 = -3,\n+    //~^ NOTE discriminant for `V9` incremented from this startpoint (`V8` + 1 variant later => `V9` = -2)\n+    V9,\n+    //~^ NOTE `-2` assigned here\n }\n \n fn main() {"}, {"sha": "64562fefc866c2dc707265a34df1ba346764f5fa", "filename": "src/test/ui/error-codes/E0081.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0081.stderr?ref=d63d2bd67fb4741eeb8b82efaf5d2aa2ab8d60c7", "patch": "@@ -5,10 +5,10 @@ LL | enum Enum {\n    | ^^^^^^^^^\n LL |\n LL |     P = 3,\n-   |         - first assignment of `3`\n+   |         - `3` assigned here\n LL |\n LL |     X = 3,\n-   |         - second assignment of `3`\n+   |         - `3` assigned here\n \n error[E0081]: discriminant value `1` assigned more than once\n   --> $DIR/E0081.rs:11:1\n@@ -17,10 +17,10 @@ LL | enum EnumOverflowRepr {\n    | ^^^^^^^^^^^^^^^^^^^^^\n LL |\n LL |     P = 257,\n-   |         --- first assignment of `1` (overflowed from `257`)\n+   |         --- `1` (overflowed from `257`) assigned here\n LL |\n LL |     X = 513,\n-   |         --- second assignment of `1` (overflowed from `513`)\n+   |         --- `1` (overflowed from `513`) assigned here\n \n error[E0081]: discriminant value `-1` assigned more than once\n   --> $DIR/E0081.rs:20:1\n@@ -29,14 +29,50 @@ LL | enum NegDisEnum {\n    | ^^^^^^^^^^^^^^^\n LL |\n LL |     First = -1,\n-   |             -- first assignment of `-1`\n+   |             -- `-1` assigned here\n LL |\n LL |     Second = -2,\n-   |     ----------- assigned discriminant for `Last` was incremented from this discriminant\n+   |     ----------- discriminant for `Last` incremented from this startpoint (`Second` + 1 variant later => `Last` = -1)\n LL |\n LL |     Last,\n-   |     ---- second assignment of `-1`\n+   |     ---- `-1` assigned here\n \n-error: aborting due to 3 previous errors\n+error[E0081]: discriminant value `0` assigned more than once\n+  --> $DIR/E0081.rs:30:1\n+   |\n+LL | enum MultipleDuplicates {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     V0,\n+   |     -- `0` assigned here\n+LL |\n+LL |     V1 = 0,\n+   |          - `0` assigned here\n+...\n+LL |     V4 = 0,\n+   |          - `0` assigned here\n+LL |\n+LL |     V5 = -2,\n+   |     ------- discriminant for `V7` incremented from this startpoint (`V5` + 2 variants later => `V7` = 0)\n+...\n+LL |     V7,\n+   |     -- `0` assigned here\n+\n+error[E0081]: discriminant value `-2` assigned more than once\n+  --> $DIR/E0081.rs:30:1\n+   |\n+LL | enum MultipleDuplicates {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     V5 = -2,\n+   |          -- `-2` assigned here\n+...\n+LL |     V8 = -3,\n+   |     ------- discriminant for `V9` incremented from this startpoint (`V8` + 1 variant later => `V9` = -2)\n+LL |\n+LL |     V9,\n+   |     -- `-2` assigned here\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0081`."}, {"sha": "565db2d0fcab82d44251853957b95b8c52b7a37a", "filename": "src/test/ui/issues/issue-15524.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Fissues%2Fissue-15524.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Fissues%2Fissue-15524.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15524.rs?ref=65cc68b3fd164f351287ac88daf4302e9842cb37", "patch": "@@ -1,16 +0,0 @@\n-const N: isize = 1;\n-\n-enum Foo {\n-    //~^ ERROR discriminant value `1` assigned more than once\n-    //~| ERROR discriminant value `1` assigned more than once\n-    //~| ERROR discriminant value `1` assigned more than once\n-    A = 1,\n-    B = 1,\n-    C = 0,\n-    D,\n-\n-    E = N,\n-\n-}\n-\n-fn main() {}"}, {"sha": "1195e0a346ddff0df37508d52559911c16a44426", "filename": "src/test/ui/issues/issue-15524.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15524.stderr?ref=65cc68b3fd164f351287ac88daf4302e9842cb37", "patch": "@@ -1,40 +0,0 @@\n-error[E0081]: discriminant value `1` assigned more than once\n-  --> $DIR/issue-15524.rs:3:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-...\n-LL |     A = 1,\n-   |         - first assignment of `1`\n-LL |     B = 1,\n-   |         - second assignment of `1`\n-\n-error[E0081]: discriminant value `1` assigned more than once\n-  --> $DIR/issue-15524.rs:3:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-...\n-LL |     A = 1,\n-   |         - first assignment of `1`\n-LL |     B = 1,\n-LL |     C = 0,\n-   |     ----- assigned discriminant for `D` was incremented from this discriminant\n-LL |     D,\n-   |     - second assignment of `1`\n-\n-error[E0081]: discriminant value `1` assigned more than once\n-  --> $DIR/issue-15524.rs:3:1\n-   |\n-LL | enum Foo {\n-   | ^^^^^^^^\n-...\n-LL |     A = 1,\n-   |         - first assignment of `1`\n-...\n-LL |     E = N,\n-   |         - second assignment of `1`\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0081`."}, {"sha": "e497f993da2801ac4b2ad2733c834c56131875ac", "filename": "src/test/ui/tag-variant-disr-dup.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Ftag-variant-disr-dup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Ftag-variant-disr-dup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-disr-dup.rs?ref=65cc68b3fd164f351287ac88daf4302e9842cb37", "patch": "@@ -1,12 +0,0 @@\n-// Black and White have the same discriminator value ...\n-\n-enum Color {\n-    //~^ ERROR discriminant value `0` assigned more than once\n-    Red = 0xff0000,\n-    Green = 0x00ff00,\n-    Blue = 0x0000ff,\n-    Black = 0x000000,\n-    White = 0x000000,\n-}\n-\n-fn main() { }"}, {"sha": "6b1ba43d2ba6e79c89051577d75200d5511c62c0", "filename": "src/test/ui/tag-variant-disr-dup.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65cc68b3fd164f351287ac88daf4302e9842cb37/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftag-variant-disr-dup.stderr?ref=65cc68b3fd164f351287ac88daf4302e9842cb37", "patch": "@@ -1,14 +0,0 @@\n-error[E0081]: discriminant value `0` assigned more than once\n-  --> $DIR/tag-variant-disr-dup.rs:3:1\n-   |\n-LL | enum Color {\n-   | ^^^^^^^^^^\n-...\n-LL |     Black = 0x000000,\n-   |             -------- first assignment of `0`\n-LL |     White = 0x000000,\n-   |             -------- second assignment of `0`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0081`."}]}