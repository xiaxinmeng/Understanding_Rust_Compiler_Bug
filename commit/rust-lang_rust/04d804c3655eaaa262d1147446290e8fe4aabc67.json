{"sha": "04d804c3655eaaa262d1147446290e8fe4aabc67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZDgwNGMzNjU1ZWFhYTI2MmQxMTQ3NDQ2MjkwZThmZTRhYWJjNjc=", "commit": {"author": {"name": "cad97", "email": "cad97@cad97.com", "date": "2018-08-23T21:10:46Z"}, "committer": {"name": "cad97", "email": "cad97@cad97.com", "date": "2018-08-23T21:10:46Z"}, "message": "Rename CodeMap/FileMap to SourceMap/SourceFile\n\n#2946", "tree": {"sha": "adcdb1a36349ad9d8b9687cfc02d0d6b62499bc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/adcdb1a36349ad9d8b9687cfc02d0d6b62499bc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04d804c3655eaaa262d1147446290e8fe4aabc67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04d804c3655eaaa262d1147446290e8fe4aabc67", "html_url": "https://github.com/rust-lang/rust/commit/04d804c3655eaaa262d1147446290e8fe4aabc67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04d804c3655eaaa262d1147446290e8fe4aabc67/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "693c7d69f94b6c1e41c4411bb27442290d7d6916", "url": "https://api.github.com/repos/rust-lang/rust/commits/693c7d69f94b6c1e41c4411bb27442290d7d6916", "html_url": "https://github.com/rust-lang/rust/commit/693c7d69f94b6c1e41c4411bb27442290d7d6916"}], "stats": {"total": 406, "additions": 203, "deletions": 203}, "files": [{"sha": "ac3fd7ab24275c7042eb72bd0c270ab766f1c667", "filename": "Cargo.lock", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -401,15 +401,15 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -418,16 +418,16 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -436,57 +436,57 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"230.0.0\"\n+version = \"235.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -541,9 +541,9 @@ dependencies = [\n  \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.71 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.71 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -820,14 +820,14 @@ dependencies = [\n \"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n \"checksum regex 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5bbbea44c5490a1e84357ff28b7d518b4619a159fed5d25f6c1de2d19cc42814\"\n \"checksum regex-syntax 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"747ba3b235651f6e2f67dfa8bcdcd073ddb7c243cb21c442fc12395dfcac212d\"\n-\"checksum rustc-ap-arena 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0cfa6cc1afa6a0f100f07052ae80fadb2af6034bad7e1eedc8b9c399f8f47ff8\"\n-\"checksum rustc-ap-rustc_cratesio_shim 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e771302cd244d9579c7ba3344415e88c56ad21eddd79356825fe022d7b2d81ab\"\n-\"checksum rustc-ap-rustc_data_structures 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a17d0e44cd437b65748e525111f6b170f9af50a625b45b55b6ef78217d3209c0\"\n-\"checksum rustc-ap-rustc_errors 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1553077b149a2272978e94281a8f4a457fe00fc21bb45947c406f50edb8bea72\"\n-\"checksum rustc-ap-rustc_target 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"919bf28c3d2e2f695fa6a8c3779a41275d45e02bcfec6156813bcdcc686e5a04\"\n-\"checksum rustc-ap-serialize 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96e676167b9a4b49e33ca92a5747205082e667d9064d8bb48447b75f8695e658\"\n-\"checksum rustc-ap-syntax 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9ad8cf79b47d76743be20371ec61bee5a7c11ffbd0590939378afb9ab573501d\"\n-\"checksum rustc-ap-syntax_pos 230.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd44296b68ba3b690f276dba8b5b3fe52aad24b35faa6c993d3ee31dc6b53bb\"\n+\"checksum rustc-ap-arena 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f322d66bfa4314b6bbc6e7a0dbce4f33f7a5ed08c5a1bb0588fa8a0d904a99f\"\n+\"checksum rustc-ap-rustc_cratesio_shim 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"082c176b1346fd356c086ffb9695d188bb6a2cffc1db987e1604f36d495797d5\"\n+\"checksum rustc-ap-rustc_data_structures 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"df2ce9493ece082cfb8301a718f2945646fc622386d4c68d8fe503b35f36194f\"\n+\"checksum rustc-ap-rustc_errors 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a43a08156fd6b8df7d7e4bae3edd0dc4c67b842518acbfc516cde2ce0638cd82\"\n+\"checksum rustc-ap-rustc_target 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36f7dc5977708040caf9a87f3ad877159c2573a75245280239083315f2f958a7\"\n+\"checksum rustc-ap-serialize 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca9beb1012c0120f95767975bc41f4b599c105da8d7561185ed22dfe2bc52cd6\"\n+\"checksum rustc-ap-syntax 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"32fee8563391d36dcef52b180540cf72543a0a4505ee361ac30ed48ce9884a1b\"\n+\"checksum rustc-ap-syntax_pos 235.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35b71f85a97f5c3ed6df05040f0e29227f9c302da4325c27c33a1701ecf9d6a0\"\n \"checksum rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcfe5b13211b4d78e5c2cadfebd7769197d95c639c35a50057eb4c05de811395\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c6d5a683c6ba4ed37959097e88d71c9e8e26659a3cb5be8b389078e7ad45306\""}, {"sha": "5583b056085530d0825a314c6d73244b353330f4", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -47,9 +47,9 @@ env_logger = \"0.5\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.6\"\n-rustc-ap-rustc_target = \"230.0.0\"\n-rustc-ap-syntax = \"230.0.0\"\n-rustc-ap-syntax_pos = \"230.0.0\"\n+rustc-ap-rustc_target = \"235.0.0\"\n+rustc-ap-syntax = \"235.0.0\"\n+rustc-ap-syntax_pos = \"235.0.0\"\n failure = \"0.1.1\"\n \n [dev-dependencies]"}, {"sha": "deaf2be46b80c1cdf357c8c31cd18e3903ce16fe", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -22,7 +22,7 @@ use utils::{count_newlines, mk_sp};\n \n use std::borrow::Cow;\n use syntax::ast;\n-use syntax::codemap::{BytePos, Span, DUMMY_SP};\n+use syntax::source_map::{BytePos, Span, DUMMY_SP};\n \n /// Returns attributes on the given statement.\n pub fn get_attrs_from_stmt(stmt: &ast::Stmt) -> &[ast::Attribute] {"}, {"sha": "8686d2c66b95442dbf8fb81cd60c69a79917d325", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -65,7 +65,7 @@\n //!            .qux\n //! ```\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use comment::rewrite_comment;\n use config::IndentStyle;\n use expr::rewrite_call;\n@@ -82,7 +82,7 @@ use std::borrow::Cow;\n use std::cmp::min;\n use std::iter;\n \n-use syntax::codemap::{BytePos, Span};\n+use syntax::source_map::{BytePos, Span};\n use syntax::{ast, ptr};\n \n pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -> Option<String> {"}, {"sha": "e786339ed7c0b7300be28af975d8d51182355205", "filename": "src/closures.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -9,11 +9,11 @@\n // except according to those terms.\n \n use config::lists::*;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax::parse::classify;\n use syntax::{ast, ptr};\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use expr::{block_contains_comment, is_simple_block, is_unsafe_block, rewrite_cond, ToExpr};\n use items::{span_hi_for_arg, span_lo_for_arg};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n@@ -51,7 +51,7 @@ pub fn rewrite_closure(\n \n     if let ast::ExprKind::Block(ref block, _) = body.node {\n         // The body of the closure is an empty block.\n-        if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) {\n+        if block.stmts.is_empty() && !block_contains_comment(block, context.source_map) {\n             return body\n                 .rewrite(context, shape)\n                 .map(|s| format!(\"{} {}\", prefix, s));\n@@ -114,7 +114,7 @@ fn get_inner_expr<'a>(\n fn needs_block(block: &ast::Block, prefix: &str, context: &RewriteContext) -> bool {\n     is_unsafe_block(block)\n         || block.stmts.len() > 1\n-        || block_contains_comment(block, context.codemap)\n+        || block_contains_comment(block, context.source_map)\n         || prefix.contains('\\n')\n }\n \n@@ -304,7 +304,7 @@ pub fn rewrite_last_closure(\n         let body = match body.node {\n             ast::ExprKind::Block(ref block, _)\n                 if !is_unsafe_block(block)\n-                    && is_simple_block(block, Some(&body.attrs), context.codemap) =>\n+                    && is_simple_block(block, Some(&body.attrs), context.source_map) =>\n             {\n                 stmt_expr(&block.stmts[0]).unwrap_or(body)\n             }"}, {"sha": "78d087ce7a48bdfc7581d7330c07c1169d5905cb", "filename": "src/comment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -13,7 +13,7 @@\n use std::{self, borrow::Cow, iter};\n \n use itertools::{multipeek, MultiPeek};\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n \n use config::Config;\n use rewrite::RewriteContext;\n@@ -1151,10 +1151,10 @@ pub fn recover_comment_removed(\n         // We missed some comments. Warn and keep the original text.\n         if context.config.error_on_unformatted() {\n             context.report.append(\n-                context.codemap.span_to_filename(span).into(),\n+                context.source_map.span_to_filename(span).into(),\n                 vec![FormattingError::from_span(\n                     &span,\n-                    &context.codemap,\n+                    &context.source_map,\n                     ErrorKind::LostComment,\n                 )],\n             );"}, {"sha": "ba317af8360fdb418393b895bcf90e60d84f5e72", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -19,11 +19,11 @@ use serde::de::{Deserialize, Deserializer};\n use serde::ser::{self, Serialize, Serializer};\n use serde_json as json;\n \n-use syntax::codemap::{self, FileMap};\n+use syntax::source_map::{self, SourceFile};\n \n /// A range of lines in a file, inclusive of both ends.\n pub struct LineRange {\n-    pub file: Rc<FileMap>,\n+    pub file: Rc<SourceFile>,\n     pub lo: usize,\n     pub hi: usize,\n }\n@@ -35,11 +35,11 @@ pub enum FileName {\n     Stdin,\n }\n \n-impl From<codemap::FileName> for FileName {\n-    fn from(name: codemap::FileName) -> FileName {\n+impl From<source_map::FileName> for FileName {\n+    fn from(name: source_map::FileName) -> FileName {\n         match name {\n-            codemap::FileName::Real(p) => FileName::Real(p),\n-            codemap::FileName::Custom(ref f) if f == \"stdin\" => FileName::Stdin,\n+            source_map::FileName::Real(p) => FileName::Real(p),\n+            source_map::FileName::Custom(ref f) if f == \"stdin\" => FileName::Stdin,\n             _ => unreachable!(),\n         }\n     }"}, {"sha": "909ea46f75d8bb06d7d13e015984b02b2ff6cf29", "filename": "src/expr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -12,13 +12,13 @@ use std::borrow::Cow;\n use std::cmp::min;\n \n use config::lists::*;\n-use syntax::codemap::{BytePos, CodeMap, Span};\n+use syntax::source_map::{BytePos, SourceMap, Span};\n use syntax::parse::token::DelimToken;\n use syntax::{ast, ptr};\n \n use chains::rewrite_chain;\n use closures;\n-use codemap::{LineRangeUtils, SpanUtils};\n+use source_map::{LineRangeUtils, SpanUtils};\n use comment::{\n     combine_strs_with_missing_comments, contains_comment, recover_comment_removed, rewrite_comment,\n     rewrite_missing_comment, CharClasses, FindUncommented,\n@@ -425,7 +425,7 @@ fn rewrite_empty_block(\n         return None;\n     }\n \n-    if block.stmts.is_empty() && !block_contains_comment(block, context.codemap) && shape.width >= 2\n+    if block.stmts.is_empty() && !block_contains_comment(block, context.source_map) && shape.width >= 2\n     {\n         return Some(format!(\"{}{}{{}}\", prefix, label_str));\n     }\n@@ -483,7 +483,7 @@ fn rewrite_single_line_block(\n     label: Option<ast::Label>,\n     shape: Shape,\n ) -> Option<String> {\n-    if is_simple_block(block, attrs, context.codemap) {\n+    if is_simple_block(block, attrs, context.source_map) {\n         let expr_shape = shape.offset_left(last_line_width(prefix))?;\n         let expr_str = block.stmts[0].rewrite(context, expr_shape)?;\n         let label_str = rewrite_label(label);\n@@ -769,8 +769,8 @@ impl<'a> ControlFlow<'a> {\n         let fixed_cost = self.keyword.len() + \"  {  } else {  }\".len();\n \n         if let ast::ExprKind::Block(ref else_node, _) = else_block.node {\n-            if !is_simple_block(self.block, None, context.codemap)\n-                || !is_simple_block(else_node, None, context.codemap)\n+            if !is_simple_block(self.block, None, context.source_map)\n+                || !is_simple_block(else_node, None, context.source_map)\n                 || pat_expr_str.contains('\\n')\n             {\n                 return None;\n@@ -1113,8 +1113,8 @@ fn extract_comment(span: Span, context: &RewriteContext, shape: Shape) -> Option\n     }\n }\n \n-pub fn block_contains_comment(block: &ast::Block, codemap: &CodeMap) -> bool {\n-    let snippet = codemap.span_to_snippet(block.span).unwrap();\n+pub fn block_contains_comment(block: &ast::Block, source_map: &SourceMap) -> bool {\n+    let snippet = source_map.span_to_snippet(block.span).unwrap();\n     contains_comment(&snippet)\n }\n \n@@ -1125,11 +1125,11 @@ pub fn block_contains_comment(block: &ast::Block, codemap: &CodeMap) -> bool {\n pub fn is_simple_block(\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n-    codemap: &CodeMap,\n+    source_map: &SourceMap,\n ) -> bool {\n     (block.stmts.len() == 1\n         && stmt_is_expr(&block.stmts[0])\n-        && !block_contains_comment(block, codemap)\n+        && !block_contains_comment(block, source_map)\n         && attrs.map_or(true, |a| a.is_empty()))\n }\n \n@@ -1138,10 +1138,10 @@ pub fn is_simple_block(\n pub fn is_simple_block_stmt(\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n-    codemap: &CodeMap,\n+    source_map: &SourceMap,\n ) -> bool {\n     block.stmts.len() <= 1\n-        && !block_contains_comment(block, codemap)\n+        && !block_contains_comment(block, source_map)\n         && attrs.map_or(true, |a| a.is_empty())\n }\n \n@@ -1150,10 +1150,10 @@ pub fn is_simple_block_stmt(\n pub fn is_empty_block(\n     block: &ast::Block,\n     attrs: Option<&[ast::Attribute]>,\n-    codemap: &CodeMap,\n+    source_map: &SourceMap,\n ) -> bool {\n     block.stmts.is_empty()\n-        && !block_contains_comment(block, codemap)\n+        && !block_contains_comment(block, source_map)\n         && attrs.map_or(true, |a| inner_attributes(a).is_empty())\n }\n "}, {"sha": "2c44f21417d1a3f450fe8a05688dc37d3b7f9341", "filename": "src/formatting.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -7,7 +7,7 @@ use std::rc::Rc;\n use std::time::{Duration, Instant};\n \n use syntax::ast;\n-use syntax::codemap::{CodeMap, FilePathMapping, Span};\n+use syntax::source_map::{SourceMap, FilePathMapping, Span};\n use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::errors::Handler;\n use syntax::parse::{self, ParseSess};\n@@ -16,10 +16,10 @@ use comment::{CharClasses, FullCodeCharKind};\n use config::{Config, FileName, Verbosity};\n use issues::BadIssueSeeker;\n use visitor::{FmtVisitor, SnippetProvider};\n-use {filemap, modules, ErrorKind, FormatReport, Input, Session};\n+use {source_file, modules, ErrorKind, FormatReport, Input, Session};\n \n // A map of the files of a crate, with their new content\n-pub(crate) type FileMap = Vec<FileRecord>;\n+pub(crate) type SourceFile = Vec<FileRecord>;\n pub(crate) type FileRecord = (FileName, String);\n \n impl<'b, T: Write + 'b> Session<'b, T> {\n@@ -70,19 +70,19 @@ fn format_project<T: FormatHandler>(\n     let input_is_stdin = main_file == FileName::Stdin;\n \n     // Parse the crate.\n-    let codemap = Rc::new(CodeMap::new(FilePathMapping::empty()));\n-    let mut parse_session = make_parse_sess(codemap.clone(), config);\n+    let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n+    let mut parse_session = make_parse_sess(source_map.clone(), config);\n     let mut report = FormatReport::new();\n     let krate = parse_crate(input, &parse_session, config, &mut report)?;\n     timer = timer.done_parsing();\n \n     // Suppress error output if we have to do any further parsing.\n-    let silent_emitter = silent_emitter(codemap);\n+    let silent_emitter = silent_emitter(source_map);\n     parse_session.span_diagnostic = Handler::with_emitter(true, false, silent_emitter);\n \n     let mut context = FormatContext::new(&krate, report, parse_session, config, handler);\n \n-    let files = modules::list_files(&krate, context.parse_session.codemap())?;\n+    let files = modules::list_files(&krate, context.parse_session.source_map())?;\n     for (path, module) in files {\n         if (config.skip_children() && path != main_file) || config.ignore().skip_file(&path) {\n             continue;\n@@ -122,14 +122,14 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n         module: &ast::Mod,\n         is_root: bool,\n     ) -> Result<(), ErrorKind> {\n-        let filemap = self\n+        let source_file = self\n             .parse_session\n-            .codemap()\n+            .source_map()\n             .lookup_char_pos(module.inner.lo())\n             .file;\n-        let big_snippet = filemap.src.as_ref().unwrap();\n-        let snippet_provider = SnippetProvider::new(filemap.start_pos, big_snippet);\n-        let mut visitor = FmtVisitor::from_codemap(\n+        let big_snippet = source_file.src.as_ref().unwrap();\n+        let snippet_provider = SnippetProvider::new(source_file.start_pos, big_snippet);\n+        let mut visitor = FmtVisitor::from_source_map(\n             &self.parse_session,\n             &self.config,\n             &snippet_provider,\n@@ -138,26 +138,26 @@ impl<'a, T: FormatHandler + 'a> FormatContext<'a, T> {\n \n         // Format inner attributes if available.\n         if !self.krate.attrs.is_empty() && is_root {\n-            visitor.skip_empty_lines(filemap.end_pos);\n+            visitor.skip_empty_lines(source_file.end_pos);\n             if visitor.visit_attrs(&self.krate.attrs, ast::AttrStyle::Inner) {\n                 visitor.push_rewrite(module.inner, None);\n             } else {\n-                visitor.format_separate_mod(module, &*filemap);\n+                visitor.format_separate_mod(module, &*source_file);\n             }\n         } else {\n-            visitor.last_pos = filemap.start_pos;\n-            visitor.skip_empty_lines(filemap.end_pos);\n-            visitor.format_separate_mod(module, &*filemap);\n+            visitor.last_pos = source_file.start_pos;\n+            visitor.skip_empty_lines(source_file.end_pos);\n+            visitor.format_separate_mod(module, &*source_file);\n         };\n \n         debug_assert_eq!(\n             visitor.line_number,\n             ::utils::count_newlines(&visitor.buffer)\n         );\n \n-        // For some reason, the codemap does not include terminating\n+        // For some reason, the source_map does not include terminating\n         // newlines so we must add one on for each file. This is sad.\n-        filemap::append_newline(&mut visitor.buffer);\n+        source_file::append_newline(&mut visitor.buffer);\n \n         format_lines(\n             &mut visitor.buffer,\n@@ -198,7 +198,7 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n         report: &mut FormatReport,\n     ) -> Result<(), ErrorKind> {\n         if let Some(ref mut out) = self.out {\n-            match filemap::write_file(&mut result, &path, out, &self.config) {\n+            match source_file::write_file(&mut result, &path, out, &self.config) {\n                 Ok(b) if b => report.add_diff(),\n                 Err(e) => {\n                     // Create a new error with path_str to help users see which files failed\n@@ -209,7 +209,7 @@ impl<'b, T: Write + 'b> FormatHandler for Session<'b, T> {\n             }\n         }\n \n-        self.filemap.push((path, result));\n+        self.source_file.push((path, result));\n         Ok(())\n     }\n }\n@@ -223,13 +223,13 @@ pub(crate) struct FormattingError {\n }\n \n impl FormattingError {\n-    pub(crate) fn from_span(span: &Span, codemap: &CodeMap, kind: ErrorKind) -> FormattingError {\n+    pub(crate) fn from_span(span: &Span, source_map: &SourceMap, kind: ErrorKind) -> FormattingError {\n         FormattingError {\n-            line: codemap.lookup_char_pos(span.lo()).line,\n+            line: source_map.lookup_char_pos(span.lo()).line,\n             is_comment: kind.is_comment(),\n             kind,\n             is_string: false,\n-            line_buffer: codemap\n+            line_buffer: source_map\n                 .span_to_lines(*span)\n                 .ok()\n                 .and_then(|fl| {\n@@ -587,7 +587,7 @@ fn parse_crate(\n         Input::File(file) => parse::new_parser_from_file(parse_session, &file),\n         Input::Text(text) => parse::new_parser_from_source_str(\n             parse_session,\n-            syntax::codemap::FileName::Custom(\"stdin\".to_owned()),\n+            syntax::source_map::FileName::Custom(\"stdin\".to_owned()),\n             text,\n         ),\n     };\n@@ -621,18 +621,18 @@ fn parse_crate(\n     Err(ErrorKind::ParseError)\n }\n \n-fn silent_emitter(codemap: Rc<CodeMap>) -> Box<EmitterWriter> {\n+fn silent_emitter(source_map: Rc<SourceMap>) -> Box<EmitterWriter> {\n     Box::new(EmitterWriter::new(\n         Box::new(Vec::new()),\n-        Some(codemap),\n+        Some(source_map),\n         false,\n         false,\n     ))\n }\n \n-fn make_parse_sess(codemap: Rc<CodeMap>, config: &Config) -> ParseSess {\n+fn make_parse_sess(source_map: Rc<SourceMap>, config: &Config) -> ParseSess {\n     let tty_handler = if config.hide_parse_errors() {\n-        let silent_emitter = silent_emitter(codemap.clone());\n+        let silent_emitter = silent_emitter(source_map.clone());\n         Handler::with_emitter(true, false, silent_emitter)\n     } else {\n         let supports_color = term::stderr().map_or(false, |term| term.supports_color());\n@@ -641,10 +641,10 @@ fn make_parse_sess(codemap: Rc<CodeMap>, config: &Config) -> ParseSess {\n         } else {\n             ColorConfig::Never\n         };\n-        Handler::with_tty_emitter(color_cfg, true, false, Some(codemap.clone()))\n+        Handler::with_tty_emitter(color_cfg, true, false, Some(source_map.clone()))\n     };\n \n-    ParseSess::with_span_handler(tty_handler, codemap)\n+    ParseSess::with_span_handler(tty_handler, source_map)\n }\n \n fn should_emit_verbose<F>(is_stdin: bool, config: &Config, f: F)"}, {"sha": "d964a21edc3d27607e65540805ae58d916d195e5", "filename": "src/imports.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -12,9 +12,9 @@ use std::cmp::Ordering;\n \n use config::lists::*;\n use syntax::ast::{self, UseTreeKind};\n-use syntax::codemap::{self, BytePos, Span, DUMMY_SP};\n+use syntax::source_map::{self, BytePos, Span, DUMMY_SP};\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n@@ -470,15 +470,15 @@ impl UseTree {\n     fn same_visibility(&self, other: &UseTree) -> bool {\n         match (&self.visibility, &other.visibility) {\n             (\n-                Some(codemap::Spanned {\n+                Some(source_map::Spanned {\n                     node: ast::VisibilityKind::Inherited,\n                     ..\n                 }),\n                 None,\n             )\n             | (\n                 None,\n-                Some(codemap::Spanned {\n+                Some(source_map::Spanned {\n                     node: ast::VisibilityKind::Inherited,\n                     ..\n                 }),\n@@ -785,7 +785,7 @@ impl Rewrite for UseTree {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use syntax::codemap::DUMMY_SP;\n+    use syntax::source_map::DUMMY_SP;\n \n     // Parse the path part of an import. This parser is not robust and is only\n     // suitable for use in a test harness."}, {"sha": "51f11d8f58aef9b556de32f4c1a737ad84eeede7", "filename": "src/items.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -16,11 +16,11 @@ use std::cmp::{min, Ordering};\n use config::lists::*;\n use regex::Regex;\n use rustc_target::spec::abi;\n-use syntax::codemap::{self, BytePos, Span};\n+use syntax::source_map::{self, BytePos, Span};\n use syntax::visit;\n use syntax::{ast, ptr, symbol};\n \n-use codemap::{LineRangeUtils, SpanUtils};\n+use source_map::{LineRangeUtils, SpanUtils};\n use comment::{\n     combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n     recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented,\n@@ -40,9 +40,9 @@ use utils::*;\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n-const DEFAULT_VISIBILITY: ast::Visibility = codemap::Spanned {\n+const DEFAULT_VISIBILITY: ast::Visibility = source_map::Spanned {\n     node: ast::VisibilityKind::Inherited,\n-    span: codemap::DUMMY_SP,\n+    span: source_map::DUMMY_SP,\n };\n \n fn type_annotation_separator(config: &Config) -> &str {\n@@ -380,16 +380,16 @@ impl<'a> FmtVisitor<'a> {\n             return None;\n         }\n \n-        let codemap = self.get_context().codemap;\n+        let source_map = self.get_context().source_map;\n \n         if self.config.empty_item_single_line()\n-            && is_empty_block(block, None, codemap)\n+            && is_empty_block(block, None, source_map)\n             && self.block_indent.width() + fn_str.len() + 2 <= self.config.max_width()\n         {\n             return Some(format!(\"{}{{}}\", fn_str));\n         }\n \n-        if self.config.fn_single_line() && is_simple_block_stmt(block, None, codemap) {\n+        if self.config.fn_single_line() && is_simple_block_stmt(block, None, source_map) {\n             let rewrite = {\n                 if let Some(stmt) = block.stmts.first() {\n                     match stmt_expr(stmt) {"}, {"sha": "0131aa875d7f9b0a7ffd1c6008538284340a18b4", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -49,7 +49,7 @@ use syntax::ast;\n \n use comment::LineClasses;\n use failure::Fail;\n-use formatting::{FileMap, FormatErrorMap, FormattingError, ReportedErrors};\n+use formatting::{SourceFile, FormatErrorMap, FormattingError, ReportedErrors};\n use issues::Issue;\n use shape::Indent;\n \n@@ -65,11 +65,11 @@ mod attr;\n mod chains;\n pub(crate) mod checkstyle;\n mod closures;\n-pub(crate) mod codemap;\n+pub(crate) mod source_map;\n mod comment;\n pub(crate) mod config;\n mod expr;\n-pub(crate) mod filemap;\n+pub(crate) mod source_file;\n pub(crate) mod formatting;\n mod imports;\n mod issues;\n@@ -459,7 +459,7 @@ pub struct Session<'b, T: Write + 'b> {\n     pub config: Config,\n     pub out: Option<&'b mut T>,\n     pub(crate) errors: ReportedErrors,\n-    filemap: FileMap,\n+    source_file: SourceFile,\n }\n \n impl<'b, T: Write + 'b> Session<'b, T> {\n@@ -472,7 +472,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             config,\n             out,\n             errors: ReportedErrors::default(),\n-            filemap: FileMap::new(),\n+            source_file: SourceFile::new(),\n         }\n     }\n "}, {"sha": "9b65fdbd1da75c8b6044e3253afa2f04012e17f0", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -14,7 +14,7 @@ use std::cmp;\n use std::iter::Peekable;\n \n use config::lists::*;\n-use syntax::codemap::BytePos;\n+use syntax::source_map::BytePos;\n \n use comment::{find_comment_end, rewrite_comment, FindUncommented};\n use config::{Config, IndentStyle};"}, {"sha": "9bbee1097e1d610fcb1b1a7c9b5a5b11afb01eda", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -22,7 +22,7 @@\n use std::collections::HashMap;\n \n use config::lists::*;\n-use syntax::codemap::{BytePos, Span};\n+use syntax::source_map::{BytePos, Span};\n use syntax::parse::new_parser_from_tts;\n use syntax::parse::parser::Parser;\n use syntax::parse::token::{BinOpToken, DelimToken, Token};\n@@ -32,7 +32,7 @@ use syntax::tokenstream::{Cursor, ThinTokenStream, TokenStream, TokenTree};\n use syntax::ThinVec;\n use syntax::{ast, ptr};\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use comment::{\n     contains_comment, remove_trailing_white_spaces, CharClasses, FindUncommented, FullCodeCharKind,\n     LineClasses,"}, {"sha": "0ee63fb0c5ad5797c4b7f26585b9c92fbb9f050b", "filename": "src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -13,10 +13,10 @@\n use std::iter::repeat;\n \n use config::lists::*;\n-use syntax::codemap::{BytePos, Span};\n+use syntax::source_map::{BytePos, Span};\n use syntax::{ast, ptr};\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use comment::{combine_strs_with_missing_comments, rewrite_comment};\n use config::{Config, ControlBraceStyle, IndentStyle};\n use expr::{\n@@ -302,7 +302,7 @@ fn block_can_be_flattened<'a>(\n     match expr.node {\n         ast::ExprKind::Block(ref block, _)\n             if !is_unsafe_block(block)\n-                && is_simple_block(block, Some(&expr.attrs), context.codemap) =>\n+                && is_simple_block(block, Some(&expr.attrs), context.source_map) =>\n         {\n             Some(&*block)\n         }\n@@ -347,7 +347,7 @@ fn rewrite_match_body(\n     let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block, _) = body.node {\n         (\n             true,\n-            is_empty_block(block, Some(&body.attrs), context.codemap),\n+            is_empty_block(block, Some(&body.attrs), context.source_map),\n         )\n     } else {\n         (false, false)"}, {"sha": "f61098ed87903e0e26732b8256560ee57fbd30ea", "filename": "src/missed_spans.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -10,9 +10,9 @@\n \n use std::borrow::Cow;\n \n-use syntax::codemap::{BytePos, Pos, Span};\n+use syntax::source_map::{BytePos, Pos, Span};\n \n-use codemap::LineRangeUtils;\n+use source_map::LineRangeUtils;\n use comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n use config::{EmitMode, FileName};\n use shape::{Indent, Shape};\n@@ -97,8 +97,8 @@ impl<'a> FmtVisitor<'a> {\n         assert!(\n             start < end,\n             \"Request to format inverted span: {:?} to {:?}\",\n-            self.codemap.lookup_char_pos(start),\n-            self.codemap.lookup_char_pos(end)\n+            self.source_map.lookup_char_pos(start),\n+            self.source_map.lookup_char_pos(end)\n         );\n \n         self.last_pos = end;\n@@ -159,9 +159,9 @@ impl<'a> FmtVisitor<'a> {\n         // Get a snippet from the file start to the span's hi without allocating.\n         // We need it to determine what precedes the current comment. If the comment\n         // follows code on the same line, we won't touch it.\n-        let big_span_lo = self.codemap.lookup_char_pos(span.lo()).file.start_pos;\n-        let local_begin = self.codemap.lookup_byte_offset(big_span_lo);\n-        let local_end = self.codemap.lookup_byte_offset(span.hi());\n+        let big_span_lo = self.source_map.lookup_char_pos(span.lo()).file.start_pos;\n+        let local_begin = self.source_map.lookup_byte_offset(big_span_lo);\n+        let local_end = self.source_map.lookup_byte_offset(span.hi());\n         let start_index = local_begin.pos.to_usize();\n         let end_index = local_end.pos.to_usize();\n         let big_snippet = &local_begin.fm.src.as_ref().unwrap()[start_index..end_index];\n@@ -187,7 +187,7 @@ impl<'a> FmtVisitor<'a> {\n         // Trim whitespace from the right hand side of each line.\n         // Annoyingly, the library functions for splitting by lines etc. are not\n         // quite right, so we must do it ourselves.\n-        let char_pos = self.codemap.lookup_char_pos(span.lo());\n+        let char_pos = self.source_map.lookup_char_pos(span.lo());\n         let file_name = &char_pos.file.name.clone().into();\n         let mut status = SnippetStatus::new(char_pos.line);\n "}, {"sha": "2f5743fbedf20b2729ce195068f0f5c18f4ca68e", "filename": "src/modules.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -13,7 +13,7 @@ use std::io;\n use std::path::{Path, PathBuf};\n \n use syntax::ast;\n-use syntax::codemap;\n+use syntax::source_map;\n use syntax::parse::{parser, DirectoryOwnership};\n use syntax_pos::symbol::Symbol;\n \n@@ -24,16 +24,16 @@ use utils::contains_skip;\n /// If a file is used twice in a crate, it appears only once.\n pub fn list_files<'a>(\n     krate: &'a ast::Crate,\n-    codemap: &codemap::CodeMap,\n+    source_map: &source_map::SourceMap,\n ) -> Result<BTreeMap<FileName, &'a ast::Mod>, io::Error> {\n     let mut result = BTreeMap::new(); // Enforce file order determinism\n-    let root_filename = codemap.span_to_filename(krate.span);\n+    let root_filename = source_map.span_to_filename(krate.span);\n     {\n         let parent = match root_filename {\n-            codemap::FileName::Real(ref path) => path.parent().unwrap(),\n+            source_map::FileName::Real(ref path) => path.parent().unwrap(),\n             _ => Path::new(\"\"),\n         };\n-        list_submodules(&krate.module, parent, None, codemap, &mut result)?;\n+        list_submodules(&krate.module, parent, None, source_map, &mut result)?;\n     }\n     result.insert(root_filename.into(), &krate.module);\n     Ok(result)\n@@ -59,15 +59,15 @@ fn list_submodules<'a>(\n     module: &'a ast::Mod,\n     search_dir: &Path,\n     relative: Option<ast::Ident>,\n-    codemap: &codemap::CodeMap,\n+    source_map: &source_map::SourceMap,\n     result: &mut BTreeMap<FileName, &'a ast::Mod>,\n ) -> Result<(), io::Error> {\n     debug!(\"list_submodules: search_dir: {:?}\", search_dir);\n     for item in &module.items {\n         if let ast::ItemKind::Mod(ref sub_mod) = item.node {\n             if !contains_skip(&item.attrs) {\n                 let is_internal =\n-                    codemap.span_to_filename(item.span) == codemap.span_to_filename(sub_mod.inner);\n+                    source_map.span_to_filename(item.span) == source_map.span_to_filename(sub_mod.inner);\n                 let (dir_path, relative) = if is_internal {\n                     if let Some(path) = find_path_value(&item.attrs) {\n                         (search_dir.join(&path.as_str()), None)\n@@ -76,12 +76,12 @@ fn list_submodules<'a>(\n                     }\n                 } else {\n                     let (mod_path, relative) =\n-                        module_file(item.ident, &item.attrs, search_dir, relative, codemap)?;\n+                        module_file(item.ident, &item.attrs, search_dir, relative, source_map)?;\n                     let dir_path = mod_path.parent().unwrap().to_owned();\n                     result.insert(FileName::Real(mod_path), sub_mod);\n                     (dir_path, relative)\n                 };\n-                list_submodules(sub_mod, &dir_path, relative, codemap, result)?;\n+                list_submodules(sub_mod, &dir_path, relative, source_map, result)?;\n             }\n         }\n     }\n@@ -94,13 +94,13 @@ fn module_file(\n     attrs: &[ast::Attribute],\n     dir_path: &Path,\n     relative: Option<ast::Ident>,\n-    codemap: &codemap::CodeMap,\n+    source_map: &source_map::SourceMap,\n ) -> Result<(PathBuf, Option<ast::Ident>), io::Error> {\n     if let Some(path) = parser::Parser::submod_path_from_attr(attrs, dir_path) {\n         return Ok((path, None));\n     }\n \n-    match parser::Parser::default_submod_path(id, relative, dir_path, codemap).result {\n+    match parser::Parser::default_submod_path(id, relative, dir_path, source_map).result {\n         Ok(parser::ModulePathSuccess {\n             path,\n             directory_ownership,"}, {"sha": "6e63649ca804599ebdd4a2fa267cfcd2b4d4564f", "filename": "src/overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -13,11 +13,11 @@\n \n use config::lists::*;\n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n use syntax::parse::token::DelimToken;\n \n use closures;\n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use expr::{is_every_expr_simple, is_method_call, is_nested_call, maybe_get_args_offset, ToExpr};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use rewrite::{Rewrite, RewriteContext};"}, {"sha": "b58431cbb65d3b83bad8329eb8e8c7bcb3f58096", "filename": "src/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -10,10 +10,10 @@\n \n use config::lists::*;\n use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n-use syntax::codemap::{self, BytePos, Span};\n+use syntax::source_map::{self, BytePos, Span};\n use syntax::ptr;\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use comment::FindUncommented;\n use expr::{can_be_overflowed_expr, rewrite_unary_prefix, wrap_struct_field};\n use lists::{\n@@ -171,7 +171,7 @@ impl Rewrite for Pat {\n \n fn rewrite_struct_pat(\n     path: &ast::Path,\n-    fields: &[codemap::Spanned<ast::FieldPat>],\n+    fields: &[source_map::Spanned<ast::FieldPat>],\n     ellipsis: bool,\n     span: Span,\n     context: &RewriteContext,\n@@ -332,7 +332,7 @@ fn rewrite_tuple_pat(\n             lo,\n             // 2 == \"..\".len()\n             lo + BytePos(2),\n-            codemap::NO_EXPANSION,\n+            source_map::NO_EXPANSION,\n         ));\n         pat_vec.insert(pos, dotdot);\n     }"}, {"sha": "21a3797a6e461495c032f3471ebd05ef5ea8b1d3", "filename": "src/reorder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -17,10 +17,10 @@\n // FIXME(#2455): Reorder trait items.\n \n use config::Config;\n-use syntax::{ast, attr, codemap::Span};\n+use syntax::{ast, attr, source_map::Span};\n \n use attr::filter_inline_attrs;\n-use codemap::LineRangeUtils;\n+use source_map::LineRangeUtils;\n use comment::combine_strs_with_missing_comments;\n use imports::{merge_use_trees, UseTree};\n use items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n@@ -226,13 +226,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         item_kind: ReorderableItemKind,\n         in_group: bool,\n     ) -> usize {\n-        let mut last = self.codemap.lookup_line_range(items[0].span());\n+        let mut last = self.source_map.lookup_line_range(items[0].span());\n         let item_length = items\n             .iter()\n             .take_while(|ppi| {\n                 item_kind.is_same_item_kind(&***ppi)\n                     && (!in_group || {\n-                        let current = self.codemap.lookup_line_range(ppi.span());\n+                        let current = self.source_map.lookup_line_range(ppi.span());\n                         let in_same_group = current.lo < last.hi + 2;\n                         last = current;\n                         in_same_group"}, {"sha": "232f4311155ae4bfe6ae0f9f039a5d29329daf50", "filename": "src/rewrite.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -10,7 +10,7 @@\n \n // A generic trait to abstract the rewriting of an element (of the AST).\n \n-use syntax::codemap::{CodeMap, Span};\n+use syntax::source_map::{SourceMap, Span};\n use syntax::parse::ParseSess;\n \n use config::{Config, IndentStyle};\n@@ -28,7 +28,7 @@ pub trait Rewrite {\n #[derive(Clone)]\n pub struct RewriteContext<'a> {\n     pub parse_session: &'a ParseSess,\n-    pub codemap: &'a CodeMap,\n+    pub source_map: &'a SourceMap,\n     pub config: &'a Config,\n     pub inside_macro: RefCell<bool>,\n     // Force block indent style even if we are using visual indent style."}, {"sha": "306f262663921a8037938ee302f22f267a885722", "filename": "src/source_file.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fsource_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fsource_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_file.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -25,7 +25,7 @@ pub fn append_newline(s: &mut String) {\n \n #[cfg(test)]\n pub(crate) fn write_all_files<T>(\n-    file_map: &[FileRecord],\n+    source_file: &[FileRecord],\n     out: &mut T,\n     config: &Config,\n ) -> Result<(), io::Error>\n@@ -35,7 +35,7 @@ where\n     if config.emit_mode() == EmitMode::Checkstyle {\n         write!(out, \"{}\", ::checkstyle::header())?;\n     }\n-    for &(ref filename, ref text) in file_map {\n+    for &(ref filename, ref text) in source_file {\n         write_file(text, filename, out, config)?;\n     }\n     if config.emit_mode() == EmitMode::Checkstyle {", "previous_filename": "src/filemap.rs"}, {"sha": "678e4fe4cc675e56bf60ada8722eb662d7ce9457", "filename": "src/source_map.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsource_map.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! This module contains utilities that work with the `CodeMap` from `libsyntax` / `syntex_syntax`.\n+//! This module contains utilities that work with the `SourceMap` from `libsyntax` / `syntex_syntax`.\n //! This includes extension traits and methods for looking up spans and line ranges for AST nodes.\n \n use config::file_lines::LineRange;\n-use syntax::codemap::{BytePos, CodeMap, Span};\n+use syntax::source_map::{BytePos, SourceMap, Span};\n use visitor::SnippetProvider;\n \n use comment::FindUncommented;\n@@ -71,7 +71,7 @@ impl<'a> SpanUtils for SnippetProvider<'a> {\n     }\n }\n \n-impl LineRangeUtils for CodeMap {\n+impl LineRangeUtils for SourceMap {\n     fn lookup_line_range(&self, span: Span) -> LineRange {\n         let lo = self.lookup_line(span.lo()).unwrap();\n         let hi = self.lookup_line(span.hi()).unwrap();", "previous_filename": "src/codemap.rs"}, {"sha": "a7ba0f1a72dfbc24dec9344f580fc96321500f57", "filename": "src/spanned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use syntax::ast;\n-use syntax::codemap::Span;\n+use syntax::source_map::Span;\n \n use macros::MacroArg;\n use utils::{mk_sp, outer_attributes};"}, {"sha": "35a720e4c56cdbdc97e10056cd968b226ccb2ae2", "filename": "src/test/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -20,8 +20,8 @@ use std::path::{Path, PathBuf};\n use std::str::Chars;\n \n use config::{Color, Config, EmitMode, FileName, ReportTactic};\n-use filemap;\n-use formatting::{FileMap, ModifiedChunk};\n+use source_file;\n+use formatting::{SourceFile, ModifiedChunk};\n use rustfmt_diff::{make_diff, print_diff, DiffLine, Mismatch, OutputWriter};\n use {FormatReport, Input, Session};\n \n@@ -197,11 +197,11 @@ fn modified_test() {\n // to a known output file generated by one of the write modes.\n fn assert_output(source: &Path, expected_filename: &Path) {\n     let config = read_config(source);\n-    let (_, file_map, _) = format_file(source, config.clone());\n+    let (_, source_file, _) = format_file(source, config.clone());\n \n     // Populate output by writing to a vec.\n     let mut out = vec![];\n-    let _ = filemap::write_all_files(&file_map, &mut out, &config);\n+    let _ = source_file::write_all_files(&source_file, &mut out, &config);\n     let output = String::from_utf8(out).unwrap();\n \n     let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n@@ -414,15 +414,15 @@ fn read_config(filename: &Path) -> Config {\n     config\n }\n \n-fn format_file<P: Into<PathBuf>>(filepath: P, config: Config) -> (bool, FileMap, FormatReport) {\n+fn format_file<P: Into<PathBuf>>(filepath: P, config: Config) -> (bool, SourceFile, FormatReport) {\n     let filepath = filepath.into();\n     let input = Input::File(filepath);\n     let mut session = Session::<io::Stdout>::new(config, None);\n     let result = session.format(input).unwrap();\n     let parsing_errors = session.has_parsing_errors();\n-    let mut filemap = FileMap::new();\n-    mem::swap(&mut session.filemap, &mut filemap);\n-    (parsing_errors, filemap, result)\n+    let mut source_file = SourceFile::new();\n+    mem::swap(&mut session.source_file, &mut source_file);\n+    (parsing_errors, source_file, result)\n }\n \n enum IdempotentCheckError {\n@@ -440,13 +440,13 @@ fn idempotent_check(\n     } else {\n         read_config(filename)\n     };\n-    let (parsing_errors, file_map, format_report) = format_file(filename, config);\n+    let (parsing_errors, source_file, format_report) = format_file(filename, config);\n     if parsing_errors {\n         return Err(IdempotentCheckError::Parse);\n     }\n \n     let mut write_result = HashMap::new();\n-    for (filename, text) in file_map {\n+    for (filename, text) in source_file {\n         if let FileName::Real(ref filename) = filename {\n             write_result.insert(filename.to_owned(), text);\n         }"}, {"sha": "601868bf1f384af19c2756f0f02135cb04b5c1b7", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -13,10 +13,10 @@ use std::ops::Deref;\n \n use config::lists::*;\n use syntax::ast::{self, FunctionRetTy, Mutability};\n-use syntax::codemap::{self, BytePos, Span};\n+use syntax::source_map::{self, BytePos, Span};\n use syntax::symbol::keywords;\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use config::{IndentStyle, TypeDensity};\n use expr::{rewrite_assign_rhs, rewrite_tuple, rewrite_unary_prefix, ToExpr};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n@@ -267,7 +267,7 @@ fn rewrite_segment(\n             ast::GenericArgs::Parenthesized(ref data) => {\n                 let output = match data.output {\n                     Some(ref ty) => FunctionRetTy::Ty(ty.clone()),\n-                    None => FunctionRetTy::Default(codemap::DUMMY_SP),\n+                    None => FunctionRetTy::Default(source_map::DUMMY_SP),\n                 };\n                 result.push_str(&format_function_type(\n                     data.inputs.iter().map(|x| &**x),"}, {"sha": "1bfccf237b4afbe8bda6faaf69a3d0301c4bcd04", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -15,7 +15,7 @@ use syntax::ast::{\n     self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind, Path,\n     Visibility, VisibilityKind,\n };\n-use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n+use syntax::source_map::{BytePos, Span, NO_EXPANSION};\n use syntax::ptr;\n \n use comment::filter_normal_code;\n@@ -327,7 +327,7 @@ macro_rules! out_of_file_lines_range {\n         !$self.config.file_lines().is_all() && !$self\n             .config\n             .file_lines()\n-            .intersects(&$self.codemap.lookup_line_range($span))\n+            .intersects(&$self.source_map.lookup_line_range($span))\n     };\n }\n "}, {"sha": "98f90530e8b0ad7c8950ee5b37cd5be17d50224d", "filename": "src/vertical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -14,9 +14,9 @@ use std::cmp;\n \n use config::lists::*;\n use syntax::ast;\n-use syntax::codemap::{BytePos, Span};\n+use syntax::source_map::{BytePos, Span};\n \n-use codemap::SpanUtils;\n+use source_map::SpanUtils;\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n use items::{rewrite_struct_field, rewrite_struct_field_prefix};"}, {"sha": "bc500281a88de52d4fe3c8ed65b1f96a4a055f4a", "filename": "src/visitor.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n use syntax::attr::HasAttrs;\n-use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n+use syntax::source_map::{self, BytePos, SourceMap, Pos, Span};\n use syntax::parse::ParseSess;\n use syntax::{ast, visit};\n \n use attr::*;\n-use codemap::{LineRangeUtils, SpanUtils};\n+use source_map::{LineRangeUtils, SpanUtils};\n use comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n use config::{BraceStyle, Config};\n use items::{\n@@ -61,7 +61,7 @@ impl<'a> SnippetProvider<'a> {\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n-    pub codemap: &'a CodeMap,\n+    pub source_map: &'a SourceMap,\n     pub buffer: String,\n     pub last_pos: BytePos,\n     // FIXME: use an RAII util or closure for indenting\n@@ -83,8 +83,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     fn visit_stmt(&mut self, stmt: &ast::Stmt) {\n         debug!(\n             \"visit_stmt: {:?} {:?}\",\n-            self.codemap.lookup_char_pos(stmt.span.lo()),\n-            self.codemap.lookup_char_pos(stmt.span.hi())\n+            self.source_map.lookup_char_pos(stmt.span.lo()),\n+            self.source_map.lookup_char_pos(stmt.span.hi())\n         );\n \n         match stmt.node {\n@@ -121,8 +121,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     ) {\n         debug!(\n             \"visit_block: {:?} {:?}\",\n-            self.codemap.lookup_char_pos(b.span.lo()),\n-            self.codemap.lookup_char_pos(b.span.hi())\n+            self.source_map.lookup_char_pos(b.span.lo()),\n+            self.source_map.lookup_char_pos(b.span.hi())\n         );\n \n         // Check if this block has braces.\n@@ -575,23 +575,23 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     pub fn from_context(ctx: &'a RewriteContext) -> FmtVisitor<'a> {\n-        FmtVisitor::from_codemap(\n+        FmtVisitor::from_source_map(\n             ctx.parse_session,\n             ctx.config,\n             ctx.snippet_provider,\n             ctx.report.clone(),\n         )\n     }\n \n-    pub(crate) fn from_codemap(\n+    pub(crate) fn from_source_map(\n         parse_session: &'a ParseSess,\n         config: &'a Config,\n         snippet_provider: &'a SnippetProvider,\n         report: FormatReport,\n     ) -> FmtVisitor<'a> {\n         FmtVisitor {\n             parse_session,\n-            codemap: parse_session.codemap(),\n+            source_map: parse_session.source_map(),\n             buffer: String::with_capacity(snippet_provider.big_snippet.len() * 2),\n             last_pos: BytePos(0),\n             block_indent: Indent::empty(),\n@@ -617,25 +617,25 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     pub fn visit_attrs(&mut self, attrs: &[ast::Attribute], style: ast::AttrStyle) -> bool {\n         for attr in attrs {\n             if attr.name() == DEPR_SKIP_ANNOTATION {\n-                let file_name = self.codemap.span_to_filename(attr.span).into();\n+                let file_name = self.source_map.span_to_filename(attr.span).into();\n                 self.report.append(\n                     file_name,\n                     vec![FormattingError::from_span(\n                         &attr.span,\n-                        &self.codemap,\n+                        &self.source_map,\n                         ErrorKind::DeprecatedAttr,\n                     )],\n                 );\n             } else if attr.path.segments[0].ident.to_string() == \"rustfmt\" {\n                 if attr.path.segments.len() == 1\n                     || attr.path.segments[1].ident.to_string() != \"skip\"\n                 {\n-                    let file_name = self.codemap.span_to_filename(attr.span).into();\n+                    let file_name = self.source_map.span_to_filename(attr.span).into();\n                     self.report.append(\n                         file_name,\n                         vec![FormattingError::from_span(\n                             &attr.span,\n-                            &self.codemap,\n+                            &self.source_map,\n                             ErrorKind::BadAttr,\n                         )],\n                     );\n@@ -741,10 +741,10 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n     }\n \n-    pub fn format_separate_mod(&mut self, m: &ast::Mod, filemap: &codemap::FileMap) {\n+    pub fn format_separate_mod(&mut self, m: &ast::Mod, source_file: &source_map::SourceFile) {\n         self.block_indent = Indent::empty();\n         self.walk_mod_items(m);\n-        self.format_missing_with_indent(filemap.end_pos);\n+        self.format_missing_with_indent(source_file.end_pos);\n     }\n \n     pub fn skip_empty_lines(&mut self, end_pos: BytePos) {\n@@ -779,7 +779,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     pub fn get_context(&self) -> RewriteContext {\n         RewriteContext {\n             parse_session: self.parse_session,\n-            codemap: self.codemap,\n+            source_map: self.source_map,\n             config: self.config,\n             inside_macro: RefCell::new(false),\n             use_block: RefCell::new(false),"}, {"sha": "48cc1fd72ae8819b011a702e3ac5234c1287ae59", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -77,7 +77,7 @@ fn arrays() {\n }\n \n fn function_calls() {\n-    let items = itemize_list(context.codemap,\n+    let items = itemize_list(context.source_map,\n                              args.iter(),\n                              \")\",\n                              |item| item.span.lo(),\n@@ -92,7 +92,7 @@ fn function_calls() {\n                              span.lo(),\n                              span.hi());\n \n-    itemize_list(context.codemap,\n+    itemize_list(context.source_map,\n                              args.iter(),\n                              \")\",\n                              |item| item.span.lo(),"}, {"sha": "7098d65f100b9dea3b24e4625e610fdfa4a83f68", "filename": "tests/source/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -9,7 +9,7 @@ fn foo() -> bool {\n     let very_long_variable_name = ( a +  first +   simple + test   );\n     let very_long_variable_name = (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB + b + c);\n \n-    let is_internalxxxx = self.codemap.span_to_filename(s) == self.codemap.span_to_filename(m.inner);\n+    let is_internalxxxx = self.source_map.span_to_filename(s) == self.source_map.span_to_filename(m.inner);\n \n     let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb / (bbbbbb -\n         function_call(x, *very_long_pointer, y))"}, {"sha": "d3a45566efa11a6d427c648a2ff6fbc1052fa0ea", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -73,7 +73,7 @@ fn arrays() {\n \n fn function_calls() {\n     let items = itemize_list(\n-        context.codemap,\n+        context.source_map,\n         args.iter(),\n         \")\",\n         |item| item.span.lo(),\n@@ -92,7 +92,7 @@ fn function_calls() {\n     );\n \n     itemize_list(\n-        context.codemap,\n+        context.source_map,\n         args.iter(),\n         \")\",\n         |item| item.span.lo(),"}, {"sha": "2e2312a11d503a1488eee0c40e431952a4d889f1", "filename": "tests/target/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -11,7 +11,7 @@ fn foo() -> bool {\n         (a + first + simple + test + AAAAAAAAAAAAA + BBBBBBBBBBBBBBBBB + b + c);\n \n     let is_internalxxxx =\n-        self.codemap.span_to_filename(s) == self.codemap.span_to_filename(m.inner);\n+        self.source_map.span_to_filename(s) == self.source_map.span_to_filename(m.inner);\n \n     let some_val = aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa * bbbb\n         / (bbbbbb - function_call(x, *very_long_pointer, y))"}, {"sha": "ed6c181fc7bf134937455c4074a06da0005a420c", "filename": "tests/target/nested-visual-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Ftarget%2Fnested-visual-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04d804c3655eaaa262d1147446290e8fe4aabc67/tests%2Ftarget%2Fnested-visual-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fnested-visual-block.rs?ref=04d804c3655eaaa262d1147446290e8fe4aabc67", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     // #1078\n     let items = itemize_list(\n-        context.codemap,\n+        context.source_map,\n         field_iter,\n         \"}\",\n         |item| match *item {\n@@ -33,7 +33,7 @@ fn main() {\n                 }\n             }\n         },\n-        context.codemap.span_after(span, \"{\"),\n+        context.source_map.span_after(span, \"{\"),\n         span.hi(),\n     );\n "}]}