{"sha": "685baed34ed2d5a94675bb5773c9f968ea133533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NWJhZWQzNGVkMmQ1YTk0Njc1YmI1NzczYzlmOTY4ZWExMzM1MzM=", "commit": {"author": {"name": "Jesse Luehrs", "email": "doy@tozt.net", "date": "2013-04-10T05:33:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-05-01T23:49:58Z"}, "message": "add a higher level glob() function to os\n\nthis could probably use expansion - it just uses all of the default\noptions, which is usually what we want, but not always. maybe add a\nseparate function that takes more options?", "tree": {"sha": "f202f6e8aa455799f0854e76f9ff6bc7e8d45bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f202f6e8aa455799f0854e76f9ff6bc7e8d45bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/685baed34ed2d5a94675bb5773c9f968ea133533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/685baed34ed2d5a94675bb5773c9f968ea133533", "html_url": "https://github.com/rust-lang/rust/commit/685baed34ed2d5a94675bb5773c9f968ea133533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/685baed34ed2d5a94675bb5773c9f968ea133533/comments", "author": {"login": "doy", "id": 78547, "node_id": "MDQ6VXNlcjc4NTQ3", "avatar_url": "https://avatars.githubusercontent.com/u/78547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doy", "html_url": "https://github.com/doy", "followers_url": "https://api.github.com/users/doy/followers", "following_url": "https://api.github.com/users/doy/following{/other_user}", "gists_url": "https://api.github.com/users/doy/gists{/gist_id}", "starred_url": "https://api.github.com/users/doy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doy/subscriptions", "organizations_url": "https://api.github.com/users/doy/orgs", "repos_url": "https://api.github.com/users/doy/repos", "events_url": "https://api.github.com/users/doy/events{/privacy}", "received_events_url": "https://api.github.com/users/doy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058346219a48ff6ac4c9c2fd38e8f478599ab078", "url": "https://api.github.com/repos/rust-lang/rust/commits/058346219a48ff6ac4c9c2fd38e8f478599ab078", "html_url": "https://github.com/rust-lang/rust/commit/058346219a48ff6ac4c9c2fd38e8f478599ab078"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "8efae3e0e6890caad1725693c9ba4e31fc11d307", "filename": "src/libcore/os.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/685baed34ed2d5a94675bb5773c9f968ea133533/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685baed34ed2d5a94675bb5773c9f968ea133533/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=685baed34ed2d5a94675bb5773c9f968ea133533", "patch": "@@ -38,6 +38,7 @@ use ptr;\n use str;\n use task;\n use uint;\n+use unstable::finally::Finally;\n use vec;\n \n pub use libc::fclose;\n@@ -1183,6 +1184,88 @@ pub fn set_args(new_args: ~[~str]) {\n     }\n }\n \n+// FIXME #6100 we should really use an internal implementation of this - using\n+// the POSIX glob functions isn't portable to windows, probably has slight\n+// inconsistencies even where it is implemented, and makes extending\n+// functionality a lot more difficult\n+// FIXME #6101 also provide a non-allocating version - each_glob or so?\n+/// Returns a vector of Path objects that match the given glob pattern\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"android\")]\n+#[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"macos\")]\n+pub fn glob(pattern: &str) -> ~[Path] {\n+    #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n+    fn default_glob_t () -> libc::glob_t {\n+        libc::glob_t {\n+            gl_pathc: 0,\n+            gl_pathv: ptr::null(),\n+            gl_offs: 0,\n+            __unused1: ptr::null(),\n+            __unused2: ptr::null(),\n+            __unused3: ptr::null(),\n+            __unused4: ptr::null(),\n+            __unused5: ptr::null(),\n+        }\n+    }\n+\n+    #[cfg(target_os = \"freebsd\")]\n+    fn default_glob_t () -> libc::glob_t {\n+        libc::glob_t {\n+            gl_pathc: 0,\n+            __unused1: 0,\n+            gl_offs: 0,\n+            __unused2: 0,\n+            gl_pathv: ptr::null(),\n+            __unused3: ptr::null(),\n+            __unused4: ptr::null(),\n+            __unused5: ptr::null(),\n+            __unused6: ptr::null(),\n+            __unused7: ptr::null(),\n+            __unused8: ptr::null(),\n+        }\n+    }\n+\n+    #[cfg(target_os = \"macos\")]\n+    fn default_glob_t () -> libc::glob_t {\n+        libc::glob_t {\n+            gl_pathc: 0,\n+            __unused1: 0,\n+            gl_offs: 0,\n+            __unused2: 0,\n+            gl_pathv: ptr::null(),\n+            __unused3: ptr::null(),\n+            __unused4: ptr::null(),\n+            __unused5: ptr::null(),\n+            __unused6: ptr::null(),\n+            __unused7: ptr::null(),\n+            __unused8: ptr::null(),\n+        }\n+    }\n+\n+    let mut g = default_glob_t();\n+    do str::as_c_str(pattern) |c_pattern| {\n+        unsafe { libc::glob(c_pattern, 0, ptr::null(), &mut g) }\n+    };\n+    do(|| {\n+        let paths = unsafe {\n+            vec::raw::from_buf_raw(g.gl_pathv, g.gl_pathc as uint)\n+        };\n+        do paths.map |&c_str| {\n+            Path(unsafe { str::raw::from_c_str(c_str) })\n+        }\n+    }).finally {\n+        unsafe { libc::globfree(&mut g) };\n+    }\n+}\n+\n+/// Returns a vector of Path objects that match the given glob pattern\n+#[cfg(target_os = \"win32\")]\n+pub fn glob(pattern: &str) -> ~[Path] {\n+    fail!(~\"glob() is unimplemented on Windows\")\n+}\n+\n #[cfg(target_os = \"macos\")]\n extern {\n     // These functions are in crt_externs.h."}]}