{"sha": "e51599932478db1d841912a6e0a10cbc20335e1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MTU5OTkzMjQ3OGRiMWQ4NDE5MTJhNmUwYTEwY2JjMjAzMzVlMWY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-23T23:40:01Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-23T23:40:01Z"}, "message": "rustdoc: Prune undocumented modules", "tree": {"sha": "bc939045785718b36f73893eeca74bc4a96595c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc939045785718b36f73893eeca74bc4a96595c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e51599932478db1d841912a6e0a10cbc20335e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e51599932478db1d841912a6e0a10cbc20335e1f", "html_url": "https://github.com/rust-lang/rust/commit/e51599932478db1d841912a6e0a10cbc20335e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e51599932478db1d841912a6e0a10cbc20335e1f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "521e58a3c4f45ffc30a914dd0bb517945d87a503", "url": "https://api.github.com/repos/rust-lang/rust/commits/521e58a3c4f45ffc30a914dd0bb517945d87a503", "html_url": "https://github.com/rust-lang/rust/commit/521e58a3c4f45ffc30a914dd0bb517945d87a503"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "dd7abf2f0ed7a0c8cfb1e67476479009bbd064d5", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e51599932478db1d841912a6e0a10cbc20335e1f/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51599932478db1d841912a6e0a10cbc20335e1f/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=e51599932478db1d841912a6e0a10cbc20335e1f", "patch": "@@ -18,13 +18,28 @@ fn run(\n         mutable have_docs: true\n     };\n     let fold = fold::fold({\n+        fold_mod: fold_mod,\n         fold_fn: fold_fn,\n+        fold_modlist: fold_modlist,\n         fold_fnlist: fold_fnlist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n }\n \n+fn fold_mod(\n+    fold: fold::fold<ctxt>,\n+    doc: doc::moddoc\n+) -> doc::moddoc {\n+    let doc = fold::default_seq_fold_mod(fold, doc);\n+    fold.ctxt.have_docs =\n+        doc.brief != none\n+        || doc.desc != none\n+        || vec::is_not_empty(*doc.mods)\n+        || vec::is_not_empty(*doc.fns);\n+    ret doc;\n+}\n+\n fn fold_fn(\n     fold: fold::fold<ctxt>,\n     doc: doc::fndoc\n@@ -36,6 +51,20 @@ fn fold_fn(\n     ret doc;\n }\n \n+fn fold_modlist(\n+    fold: fold::fold<ctxt>,\n+    list: doc::modlist\n+) -> doc::modlist {\n+    doc::modlist(vec::filter_map(*list) {|doc|\n+        let doc = fold_mod(fold, doc);\n+        if fold.ctxt.have_docs {\n+            some(doc)\n+        } else {\n+            none\n+        }\n+    })\n+}\n+\n fn fold_fnlist(\n     fold: fold::fold<ctxt>,\n     list: doc::fnlist\n@@ -52,6 +81,35 @@ fn fold_fnlist(\n \n #[cfg(test)]\n mod tests {\n+    #[test]\n+    fn should_elide_undocumented_mods() {\n+        let source = \"mod a { }\";\n+        let srv = astsrv::mk_srv_from_str(source);\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = run(srv, doc);\n+        assert vec::is_empty(*doc.topmod.mods);\n+    }\n+\n+    #[test]\n+    fn should_not_elide_undocument_mods_with_documented_mods() {\n+        let source = \"mod a { #[doc = \\\"b\\\"] mod b { } }\";\n+        let srv = astsrv::mk_srv_from_str(source);\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = attr_pass::mk_pass()(srv, doc);\n+        let doc = run(srv, doc);\n+        assert vec::is_not_empty(*doc.topmod.mods);\n+    }\n+\n+    #[test]\n+    fn should_not_elide_undocument_mods_with_documented_fns() {\n+        let source = \"mod a { #[doc = \\\"b\\\"] fn b() { } }\";\n+        let srv = astsrv::mk_srv_from_str(source);\n+        let doc = extract::from_srv(srv, \"\");\n+        let doc = attr_pass::mk_pass()(srv, doc);\n+        let doc = run(srv, doc);\n+        assert vec::is_not_empty(*doc.topmod.mods);\n+    }\n+\n     #[test]\n     fn should_elide_undocumented_fns() {\n         let source = \"fn a() { }\";"}]}