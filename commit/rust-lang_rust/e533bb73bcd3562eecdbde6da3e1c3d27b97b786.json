{"sha": "e533bb73bcd3562eecdbde6da3e1c3d27b97b786", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzNiYjczYmNkMzU2MmVlY2RiZGU2ZGEzZTFjM2QyN2I5N2I3ODY=", "commit": {"author": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-09-23T03:39:22Z"}, "committer": {"name": "LingMan", "email": "LingMan@users.noreply.github.com", "date": "2020-10-11T20:27:20Z"}, "message": "Don't duplicate char::is_ascii_digit", "tree": {"sha": "98b66c1076f485314d4182383c537ec8498c7c94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b66c1076f485314d4182383c537ec8498c7c94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e533bb73bcd3562eecdbde6da3e1c3d27b97b786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e533bb73bcd3562eecdbde6da3e1c3d27b97b786", "html_url": "https://github.com/rust-lang/rust/commit/e533bb73bcd3562eecdbde6da3e1c3d27b97b786", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e533bb73bcd3562eecdbde6da3e1c3d27b97b786/comments", "author": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LingMan", "id": 18645382, "node_id": "MDQ6VXNlcjE4NjQ1Mzgy", "avatar_url": "https://avatars.githubusercontent.com/u/18645382?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LingMan", "html_url": "https://github.com/LingMan", "followers_url": "https://api.github.com/users/LingMan/followers", "following_url": "https://api.github.com/users/LingMan/following{/other_user}", "gists_url": "https://api.github.com/users/LingMan/gists{/gist_id}", "starred_url": "https://api.github.com/users/LingMan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LingMan/subscriptions", "organizations_url": "https://api.github.com/users/LingMan/orgs", "repos_url": "https://api.github.com/users/LingMan/repos", "events_url": "https://api.github.com/users/LingMan/events{/privacy}", "received_events_url": "https://api.github.com/users/LingMan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cc82ee340ed96099680ec1165cf5e192d658d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cc82ee340ed96099680ec1165cf5e192d658d0f", "html_url": "https://github.com/rust-lang/rust/commit/8cc82ee340ed96099680ec1165cf5e192d658d0f"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "ec55eb2449b9fc01f17fcb30965463f7358f10dc", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e533bb73bcd3562eecdbde6da3e1c3d27b97b786/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e533bb73bcd3562eecdbde6da3e1c3d27b97b786/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=e533bb73bcd3562eecdbde6da3e1c3d27b97b786", "patch": "@@ -385,7 +385,7 @@ pub mod printf {\n         if let Start = state {\n             match c {\n                 '1'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     match end.next_cp() {\n                         // Yes, this *is* the parameter.\n                         Some(('$', end2)) => {\n@@ -427,7 +427,7 @@ pub mod printf {\n                     move_to!(next);\n                 }\n                 '1'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     state = Prec;\n                     width = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n                     move_to!(end);\n@@ -441,7 +441,7 @@ pub mod printf {\n         }\n \n         if let WidthArg = state {\n-            let end = at_next_cp_while(at, is_digit);\n+            let end = at_next_cp_while(at, char::is_ascii_digit);\n             match end.next_cp() {\n                 Some(('$', end2)) => {\n                     state = Prec;\n@@ -473,7 +473,7 @@ pub mod printf {\n         if let PrecInner = state {\n             match c {\n                 '*' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     match end.next_cp() {\n                         Some(('$', end2)) => {\n                             state = Length;\n@@ -488,7 +488,7 @@ pub mod printf {\n                     }\n                 }\n                 '0'..='9' => {\n-                    let end = at_next_cp_while(next, is_digit);\n+                    let end = at_next_cp_while(next, char::is_ascii_digit);\n                     state = Length;\n                     precision = Some(Num::from_str(at.slice_between(end).unwrap(), None));\n                     move_to!(end);\n@@ -563,12 +563,12 @@ pub mod printf {\n \n     fn at_next_cp_while<F>(mut cur: Cur<'_>, mut pred: F) -> Cur<'_>\n     where\n-        F: FnMut(char) -> bool,\n+        F: FnMut(&char) -> bool,\n     {\n         loop {\n             match cur.next_cp() {\n                 Some((c, next)) => {\n-                    if pred(c) {\n+                    if pred(&c) {\n                         cur = next;\n                     } else {\n                         return cur;\n@@ -579,14 +579,7 @@ pub mod printf {\n         }\n     }\n \n-    fn is_digit(c: char) -> bool {\n-        match c {\n-            '0'..='9' => true,\n-            _ => false,\n-        }\n-    }\n-\n-    fn is_flag(c: char) -> bool {\n+    fn is_flag(c: &char) -> bool {\n         match c {\n             '0' | '-' | '+' | ' ' | '#' | '\\'' => true,\n             _ => false,"}]}