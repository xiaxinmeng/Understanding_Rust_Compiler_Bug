{"sha": "33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzZTlhNmI1NjVkZGQ3ZjIwYTVmZDNmNDU1ZWIyZjMxMDlkNDE4MDE=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-07-04T15:49:51Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-07-09T20:00:19Z"}, "message": "Pass type when creating atomic load\n\nInstead of determining it from the pointer type, explicitly pass\nthe type to load.", "tree": {"sha": "104635f13538c1b8ed8157802f77289e12effc79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104635f13538c1b8ed8157802f77289e12effc79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "html_url": "https://github.com/rust-lang/rust/commit/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619c27a53959e2d79aadb01cba5b2c49756df771", "url": "https://api.github.com/repos/rust-lang/rust/commits/619c27a53959e2d79aadb01cba5b2c49756df771", "html_url": "https://github.com/rust-lang/rust/commit/619c27a53959e2d79aadb01cba5b2c49756df771"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "95caa9855a753beb0526354f9cd94b548c5e60bc", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "patch": "@@ -428,13 +428,15 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n     fn atomic_load(\n         &mut self,\n+        ty: &'ll Type,\n         ptr: &'ll Value,\n         order: rustc_codegen_ssa::common::AtomicOrdering,\n         size: Size,\n     ) -> &'ll Value {\n         unsafe {\n             let load = llvm::LLVMRustBuildAtomicLoad(\n                 self.llbuilder,\n+                ty,\n                 ptr,\n                 UNNAMED,\n                 AtomicOrdering::from_generic(order),"}, {"sha": "3f629220328fc27da651c4fcc4a4a8c592bf6b28", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "patch": "@@ -1631,6 +1631,7 @@ extern \"C\" {\n     // Atomic Operations\n     pub fn LLVMRustBuildAtomicLoad(\n         B: &Builder<'a>,\n+        ElementType: &'a Type,\n         PointerVal: &'a Value,\n         Name: *const c_char,\n         Order: AtomicOrdering,"}, {"sha": "56ff1b3934c13e1b070bf56d2becc9e3af7b18d7", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "patch": "@@ -448,15 +448,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             if ty.is_unsafe_ptr() {\n                                 // Some platforms do not support atomic operations on pointers,\n                                 // so we cast to integer first...\n-                                let ptr_llty = bx.type_ptr_to(bx.type_isize());\n+                                let llty = bx.type_isize();\n+                                let ptr_llty = bx.type_ptr_to(llty);\n                                 source = bx.pointercast(source, ptr_llty);\n-                            }\n-                            let result = bx.atomic_load(source, order, size);\n-                            if ty.is_unsafe_ptr() {\n+                                let result = bx.atomic_load(llty, source, order, size);\n                                 // ... and then cast the result back to a pointer\n                                 bx.inttoptr(result, bx.backend_type(layout))\n                             } else {\n-                                result\n+                                bx.atomic_load(bx.backend_type(layout), source, order, size)\n                             }\n                         } else {\n                             return invalid_monomorphization(ty);"}, {"sha": "c5d7c4f86c576b9477ed527a4fa649dc3729fd14", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "patch": "@@ -139,7 +139,13 @@ pub trait BuilderMethods<'a, 'tcx>:\n \n     fn load(&mut self, ptr: Self::Value, align: Align) -> Self::Value;\n     fn volatile_load(&mut self, ptr: Self::Value) -> Self::Value;\n-    fn atomic_load(&mut self, ptr: Self::Value, order: AtomicOrdering, size: Size) -> Self::Value;\n+    fn atomic_load(\n+        &mut self,\n+        ty: Self::Type,\n+        ptr: Self::Value,\n+        order: AtomicOrdering,\n+        size: Size,\n+    ) -> Self::Value;\n     fn load_operand(&mut self, place: PlaceRef<'tcx, Self::Value>)\n     -> OperandRef<'tcx, Self::Value>;\n "}, {"sha": "4cdc8a4155bcc58ba6489aab09e433a750afdace", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/33e9a6b565ddd7f20a5fd3f455eb2f3109d41801/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=33e9a6b565ddd7f20a5fd3f455eb2f3109d41801", "patch": "@@ -349,11 +349,10 @@ extern \"C\" void LLVMRustSetFastMath(LLVMValueRef V) {\n }\n \n extern \"C\" LLVMValueRef\n-LLVMRustBuildAtomicLoad(LLVMBuilderRef B, LLVMValueRef Source, const char *Name,\n-                        LLVMAtomicOrdering Order) {\n+LLVMRustBuildAtomicLoad(LLVMBuilderRef B, LLVMTypeRef Ty, LLVMValueRef Source,\n+                        const char *Name, LLVMAtomicOrdering Order) {\n   Value *Ptr = unwrap(Source);\n-  Type *Ty = Ptr->getType()->getPointerElementType();\n-  LoadInst *LI = unwrap(B)->CreateLoad(Ty, Ptr, Name);\n+  LoadInst *LI = unwrap(B)->CreateLoad(unwrap(Ty), Ptr, Name);\n   LI->setAtomic(fromRust(Order));\n   return wrap(LI);\n }"}]}