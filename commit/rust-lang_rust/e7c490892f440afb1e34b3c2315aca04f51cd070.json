{"sha": "e7c490892f440afb1e34b3c2315aca04f51cd070", "node_id": "C_kwDOAAsO6NoAKGU3YzQ5MDg5MmY0NDBhZmIxZTM0YjNjMjMxNWFjYTA0ZjUxY2QwNzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-14T19:15:43Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-22T20:18:14Z"}, "message": "Move associated type bounds check to ast lowering\n\nThis makes the check for when associated type bounds more accurate", "tree": {"sha": "fb4d07dae5667400f91cfbe6db8165093dd8e073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb4d07dae5667400f91cfbe6db8165093dd8e073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c490892f440afb1e34b3c2315aca04f51cd070", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c490892f440afb1e34b3c2315aca04f51cd070", "html_url": "https://github.com/rust-lang/rust/commit/e7c490892f440afb1e34b3c2315aca04f51cd070", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c490892f440afb1e34b3c2315aca04f51cd070/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b869e84e581612f4a30a4bca63bd9e90e9a17003", "url": "https://api.github.com/repos/rust-lang/rust/commits/b869e84e581612f4a30a4bca63bd9e90e9a17003", "html_url": "https://github.com/rust-lang/rust/commit/b869e84e581612f4a30a4bca63bd9e90e9a17003"}], "stats": {"total": 304, "additions": 168, "deletions": 136}, "files": [{"sha": "a2837deafdec4f38a16b61392228b709684edacd", "filename": "compiler/rustc_ast_lowering/locales/en-US.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Flocales%2Fen-US.ftl?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -19,6 +19,9 @@ ast_lowering_remove_parentheses = remove these parentheses\n ast_lowering_misplaced_impl_trait =\n     `impl Trait` only allowed in function and inherent method return types, not in {$position}\n \n+ast_lowering_misplaced_assoc_ty_binding =\n+    associated type bounds are only allowed in where clauses and function signatures, not in {$position}\n+\n ast_lowering_rustc_box_attribute_error =\n     #[rustc_box] requires precisely one argument and no other attributes are allowed\n "}, {"sha": "def74c2adeee944c36975b02f6b699202044f170", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -79,6 +79,14 @@ pub struct MisplacedImplTrait<'a> {\n     pub position: DiagnosticArgFromDisplay<'a>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(ast_lowering_misplaced_assoc_ty_binding)]\n+pub struct MisplacedAssocTyBinding<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub position: DiagnosticArgFromDisplay<'a>,\n+}\n+\n #[derive(Diagnostic, Clone, Copy)]\n #[diag(ast_lowering_rustc_box_attribute_error)]\n pub struct RustcBoxAttributeError {"}, {"sha": "60391f774499a55de7621a6a0095318dd8d24bfb", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -1002,8 +1002,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             self.arena.alloc(hir::GenericArgs::none())\n         };\n-        let itctx_tait = &ImplTraitContext::TypeAliasesOpaqueTy;\n-\n         let kind = match &constraint.kind {\n             AssocConstraintKind::Equality { term } => {\n                 let term = match term {\n@@ -1040,7 +1038,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // then to an opaque type).\n                     //\n                     // FIXME: this is only needed until `impl Trait` is allowed in type aliases.\n-                    ImplTraitContext::Disallowed(_) if self.is_in_dyn_type => (true, itctx_tait),\n+                    ImplTraitContext::Disallowed(position) if self.is_in_dyn_type => {\n+                        self.tcx.sess.emit_err(errors::MisplacedAssocTyBinding {\n+                            span: constraint.span,\n+                            position: DiagnosticArgFromDisplay(position),\n+                        });\n+                        (false, itctx)\n+                    }\n \n                     // We are in the parameter position, but not within a dyn type:\n                     //"}, {"sha": "128e7255c61e4dfd1fedf43b149918b5e236b18c", "filename": "compiler/rustc_ast_passes/locales/en-US.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Flocales%2Fen-US.ftl?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -11,9 +11,6 @@ ast_passes_forbidden_let_stable =\n ast_passes_deprecated_where_clause_location =\n     where clause not allowed here\n \n-ast_passes_forbidden_assoc_constraint =\n-    associated type bounds are not allowed within structs, enums, or unions\n-\n ast_passes_keyword_lifetime =\n     lifetimes cannot use keyword names\n "}, {"sha": "ee861e873550bb56b34b5be13c4f5f954778d594", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -71,10 +71,6 @@ struct AstValidator<'a> {\n     /// or `Foo::Bar<impl Trait>`\n     is_impl_trait_banned: bool,\n \n-    /// Used to ban associated type bounds (i.e., `Type<AssocType: Bounds>`) in\n-    /// certain positions.\n-    is_assoc_ty_bound_banned: bool,\n-\n     /// See [ForbiddenLetReason]\n     forbidden_let_reason: Option<ForbiddenLetReason>,\n \n@@ -180,30 +176,12 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn with_banned_assoc_ty_bound(&mut self, f: impl FnOnce(&mut Self)) {\n-        let old = mem::replace(&mut self.is_assoc_ty_bound_banned, true);\n-        f(self);\n-        self.is_assoc_ty_bound_banned = old;\n-    }\n-\n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n         f(self);\n         self.outer_impl_trait = old;\n     }\n \n-    fn visit_assoc_constraint_from_generic_args(&mut self, constraint: &'a AssocConstraint) {\n-        match constraint.kind {\n-            AssocConstraintKind::Equality { .. } => {}\n-            AssocConstraintKind::Bound { .. } => {\n-                if self.is_assoc_ty_bound_banned {\n-                    self.session.emit_err(ForbiddenAssocConstraint { span: constraint.span });\n-                }\n-            }\n-        }\n-        self.visit_assoc_constraint(constraint);\n-    }\n-\n     // Mirrors `visit::walk_ty`, but tracks relevant state.\n     fn walk_ty(&mut self, t: &'a Ty) {\n         match &t.kind {\n@@ -1248,7 +1226,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         // are allowed to contain nested `impl Trait`.\n                         AngleBracketedArg::Constraint(constraint) => {\n                             self.with_impl_trait(None, |this| {\n-                                this.visit_assoc_constraint_from_generic_args(constraint);\n+                                this.visit_assoc_constraint(constraint);\n                             });\n                         }\n                     }\n@@ -1373,14 +1351,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         visit::walk_param_bound(self, bound)\n     }\n \n-    fn visit_variant_data(&mut self, s: &'a VariantData) {\n-        self.with_banned_assoc_ty_bound(|this| visit::walk_struct_def(this, s))\n-    }\n-\n-    fn visit_enum_def(&mut self, enum_definition: &'a EnumDef) {\n-        self.with_banned_assoc_ty_bound(|this| visit::walk_enum_def(this, enum_definition))\n-    }\n-\n     fn visit_fn(&mut self, fk: FnKind<'a>, span: Span, id: NodeId) {\n         // Only associated `fn`s can have `self` parameters.\n         let self_semantic = match fk.ctxt() {\n@@ -1709,7 +1679,6 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n         outer_impl_trait: None,\n         disallow_tilde_const: None,\n         is_impl_trait_banned: false,\n-        is_assoc_ty_bound_banned: false,\n         forbidden_let_reason: Some(ForbiddenLetReason::GenericForbidden),\n         lint_buffer: lints,\n     };"}, {"sha": "f304f5a1956b81c8f81ad02370b62517821efa82", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -23,13 +23,6 @@ pub struct ForbiddenLetStable {\n     pub span: Span,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(ast_passes_forbidden_assoc_constraint)]\n-pub struct ForbiddenAssocConstraint {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_passes_keyword_lifetime)]\n pub struct KeywordLifetime {"}, {"sha": "2d04f6fc452ff3757ff45039a8d2afc87175d259", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.rs?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -0,0 +1,15 @@\n+#![feature(associated_type_bounds)]\n+\n+trait B {\n+    type AssocType;\n+}\n+\n+fn f()\n+where\n+    dyn for<'j> B<AssocType: 'j>:,\n+    //~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+    //~| ERROR the value of the associated type `AssocType` (from trait `B`) must be specified\n+{\n+}\n+\n+fn main() {}"}, {"sha": "ffba044e7e79470932573dadd76a4a0d8a4c4421", "filename": "tests/ui/associated-type-bounds/bad-universal-in-dyn-in-where-clause.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-dyn-in-where-clause.stderr?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -0,0 +1,18 @@\n+error: associated type bounds are only allowed in where clauses and function signatures, not in bound\n+  --> $DIR/bad-universal-in-dyn-in-where-clause.rs:9:19\n+   |\n+LL |     dyn for<'j> B<AssocType: 'j>:,\n+   |                   ^^^^^^^^^^^^^\n+\n+error[E0191]: the value of the associated type `AssocType` (from trait `B`) must be specified\n+  --> $DIR/bad-universal-in-dyn-in-where-clause.rs:9:9\n+   |\n+LL |     type AssocType;\n+   |     -------------- `AssocType` defined here\n+...\n+LL |     dyn for<'j> B<AssocType: 'j>:,\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `for<'j> B<AssocType: 'j, AssocType = Type>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0191`."}, {"sha": "dd59dbd243e9ebb4bd393339738d5ef7f1c037d4", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.rs?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -0,0 +1,14 @@\n+#![feature(associated_type_bounds)]\n+\n+trait Trait {\n+    type Item;\n+}\n+\n+trait Trait2 {}\n+\n+// It's not possible to insert a universal `impl Trait` here!\n+impl dyn Trait<Item: Trait2> {}\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Trait`) must be specified\n+\n+fn main() {}"}, {"sha": "df4b6328c52edddbc19d96504afac21fe2cf35dd", "filename": "tests/ui/associated-type-bounds/bad-universal-in-impl-sig.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Fbad-universal-in-impl-sig.stderr?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -0,0 +1,8 @@\n+error: associated type bounds are only allowed in where clauses and function signatures, not in impl header\n+  --> $DIR/bad-universal-in-impl-sig.rs:10:16\n+   |\n+LL | impl dyn Trait<Item: Trait2> {}\n+   |                ^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "70a30287092a547c9a7a25f7e4d7b16b63c8e246", "filename": "tests/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -3,28 +3,33 @@\n use std::mem::ManuallyDrop;\n \n struct S1 { f: dyn Iterator<Item: Copy> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n struct S3 { f: dyn Iterator<Item: 'static> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n \n enum E1 { V(dyn Iterator<Item: Copy>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n enum E3 { V(dyn Iterator<Item: 'static>) }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n \n union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n-//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n-//~| ERROR the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n+//~^ ERROR associated type bounds are only allowed in where clauses and function signatures\n+//~| ERROR the value of the associated type `Item` (from trait `Iterator`) must be specified\n \n fn main() {}"}, {"sha": "e1d35bd9c322c2f707ce72998576666cd50f501c", "filename": "tests/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 76, "deletions": 78, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e7c490892f440afb1e34b3c2315aca04f51cd070/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=e7c490892f440afb1e34b3c2315aca04f51cd070", "patch": "@@ -1,131 +1,129 @@\n-error: associated type bounds are not allowed within structs, enums, or unions\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n   --> $DIR/inside-adt.rs:5:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:7:33\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:8:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:9:29\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:11:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:12:26\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:15:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:15:30\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:18:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:17:26\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:21:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:21:41\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:25:41\n    |\n LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n    |                                         ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:24:45\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:28:45\n    |\n LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n    |                                             ^^^^^^^^^^\n \n-error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:26:41\n+error: associated type bounds are only allowed in where clauses and function signatures, not in field type\n+  --> $DIR/inside-adt.rs:31:41\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n    |                                         ^^^^^^^^^^^^^\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:12:13\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:5:20\n    |\n-LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | enum E1 { V(&dyn Iterator<Item: Copy>) }\n-   |             +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n+LL | struct S1 { f: dyn Iterator<Item: Copy> }\n+   |                    ^^^^^^^^^^^^^^^^^^^^\n+   |                    |\n+   |                    associated type `Item` must be specified\n+   |                    help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n+\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:8:24\n    |\n-LL | enum E1 { V(Box<dyn Iterator<Item: Copy>>) }\n-   |             ++++                        +\n+LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n+   |                        ^^^^^^^^^^^^^^^^^^^^\n+   |                        |\n+   |                        associated type `Item` must be specified\n+   |                        help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:17:13\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:11:20\n    |\n-LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+LL | struct S3 { f: dyn Iterator<Item: 'static> }\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Iterator<Item: 'static, Item = Type>`\n+\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:15:17\n    |\n-   = help: the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: no field of an enum variant may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n+LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n+   |                 ^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 associated type `Item` must be specified\n+   |                 help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n+\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:18:21\n    |\n-LL | enum E3 { V(&dyn Iterator<Item: 'static>) }\n-   |             +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n+LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n+   |                     ^^^^^^^^^^^^^^^^^^^^\n+   |                     |\n+   |                     associated type `Item` must be specified\n+   |                     help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n+\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:21:17\n    |\n-LL | enum E3 { V(Box<dyn Iterator<Item: 'static>>) }\n-   |             ++++                           +\n+LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Iterator<Item: 'static, Item = Type>`\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Copy> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:21:15\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:25:32\n    |\n LL | union U1 { f: ManuallyDrop<dyn Iterator<Item: Copy>> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Copy> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Copy> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Copy>>`\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | union U1 { f: &ManuallyDrop<dyn Iterator<Item: Copy>> }\n-   |               +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n+   |                                ^^^^^^^^^^^^^^^^^^^^\n+   |                                |\n+   |                                associated type `Item` must be specified\n+   |                                help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n+\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:28:36\n    |\n-LL | union U1 { f: Box<ManuallyDrop<dyn Iterator<Item: Copy>>> }\n-   |               ++++                                      +\n+LL | union U2 { f: ManuallyDrop<Box<dyn Iterator<Item: Copy>>> }\n+   |                                    ^^^^^^^^^^^^^^^^^^^^\n+   |                                    |\n+   |                                    associated type `Item` must be specified\n+   |                                    help: specify the associated types: `Iterator<Item: Copy, Item = Type>`\n \n-error[E0277]: the size for values of type `(dyn Iterator<Item = impl Sized + 'static> + 'static)` cannot be known at compilation time\n-  --> $DIR/inside-adt.rs:26:15\n+error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified\n+  --> $DIR/inside-adt.rs:31:32\n    |\n LL | union U3 { f: ManuallyDrop<dyn Iterator<Item: 'static>> }\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: within `ManuallyDrop<(dyn Iterator<Item = impl Sized + 'static> + 'static)>`, the trait `Sized` is not implemented for `(dyn Iterator<Item = impl Sized + 'static> + 'static)`\n-   = note: required because it appears within the type `ManuallyDrop<dyn Iterator<Item = impl Sized>>`\n-   = note: no field of a union may have a dynamically sized type\n-   = help: change the field's type to have a statically known size\n-help: borrowed types always have a statically known size\n-   |\n-LL | union U3 { f: &ManuallyDrop<dyn Iterator<Item: 'static>> }\n-   |               +\n-help: the `Box` type always has a statically known size and allocates its contents in the heap\n-   |\n-LL | union U3 { f: Box<ManuallyDrop<dyn Iterator<Item: 'static>>> }\n-   |               ++++                                         +\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: specify the associated type: `Iterator<Item: 'static, Item = Type>`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 18 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0191`."}]}