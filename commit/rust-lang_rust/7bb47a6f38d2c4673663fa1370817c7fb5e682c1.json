{"sha": "7bb47a6f38d2c4673663fa1370817c7fb5e682c1", "node_id": "C_kwDOAAsO6NoAKDdiYjQ3YTZmMzhkMmM0NjczNjYzZmExMzcwODE3YzdmYjVlNjgyYzE", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-08-20T07:03:33Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2022-08-28T01:52:06Z"}, "message": "Reinstate preloading of some dll imports", "tree": {"sha": "1062a0cd4c47ddc72156fb6f10804e20c3757b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1062a0cd4c47ddc72156fb6f10804e20c3757b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bb47a6f38d2c4673663fa1370817c7fb5e682c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmMKykcACgkQcTRy8vRW\nJ94oEA//cQA6FMcfchq0VNH6LtGNNks1JhRauh4oEicMt2NITgRZQwzlfreIPiyJ\nVmtMIh7xQrC1E1JmWXf8iy2hrcDnmFIxEMTLBEIxufd2rIJZ5tU2BEnWmCfln748\nQHJwjzuEmSR20a5qGXD5ZEfQf+mBWaqkvms/ApsgJhcKlmLJwfDypSL68L7D5ndI\n0bwpEBfb7WX8bzNQtBlKIgfnpkftNcZe2XU96kQlwL+DGrULt6T8+Lv+p6tbWVlx\nWXZWT5Wt+67NWySSvN1whQNkPmEHxzWY7JGA2QkpINPdZI4HYiiu/5lxXQznJ4n0\nnkIHe6PaOl9DiVzZzpx/Lo6icR73G++Cl2xMbIkKs0myPp+dmWBT9/yD27jRb2fD\nErc6RUWsYb5cXeMmX+9EwQoAv+lEGLLZ038Hr/EGm28lWEUPaG3G0J02BLafHq0d\nJBjv3AZDKGZnaXX4mjLDDwikgysf0U2cXVl4H0kWAw0Lj76iM7SRlOQzo5JP5Qft\nkcwZkysTXBCsNZDyl2jzaLqtO4ZbCzv89bMnipDQfOfunVp9BAfRJsxsgfOYu6m+\nJaQN3/0D3BgHJt4NFgpYulAGVU1TEPfPtFiADa6SmZ/b8kVahUf5GE7CrZoLkEwV\nr0KCHsVTwyy2JjB6g1YmcmDLfoMz35RY2AkgQaJELIoXUW6zqFk=\n=pRi/\n-----END PGP SIGNATURE-----", "payload": "tree 1062a0cd4c47ddc72156fb6f10804e20c3757b33\nparent 48853a361a5ff0e8215301c62f259a26eed7aa72\nauthor Chris Denton <christophersdenton@gmail.com> 1660979013 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1661651526 +0100\n\nReinstate preloading of some dll imports\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bb47a6f38d2c4673663fa1370817c7fb5e682c1", "html_url": "https://github.com/rust-lang/rust/commit/7bb47a6f38d2c4673663fa1370817c7fb5e682c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bb47a6f38d2c4673663fa1370817c7fb5e682c1/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48853a361a5ff0e8215301c62f259a26eed7aa72", "url": "https://api.github.com/repos/rust-lang/rust/commits/48853a361a5ff0e8215301c62f259a26eed7aa72", "html_url": "https://github.com/rust-lang/rust/commit/48853a361a5ff0e8215301c62f259a26eed7aa72"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "891d7e855f0b9a218f30ca013451195a66380c64", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7bb47a6f38d2c4673663fa1370817c7fb5e682c1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb47a6f38d2c4673663fa1370817c7fb5e682c1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=7bb47a6f38d2c4673663fa1370817c7fb5e682c1", "patch": "@@ -228,8 +228,6 @@ pub const IPV6_ADD_MEMBERSHIP: c_int = 12;\n pub const IPV6_DROP_MEMBERSHIP: c_int = 13;\n pub const MSG_PEEK: c_int = 0x2;\n \n-pub const LOAD_LIBRARY_SEARCH_SYSTEM32: u32 = 0x800;\n-\n #[repr(C)]\n #[derive(Copy, Clone)]\n pub struct linger {\n@@ -1032,7 +1030,6 @@ extern \"system\" {\n     pub fn GetProcAddress(handle: HMODULE, name: LPCSTR) -> *mut c_void;\n     pub fn GetModuleHandleA(lpModuleName: LPCSTR) -> HMODULE;\n     pub fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;\n-    pub fn LoadLibraryExA(lplibfilename: *const i8, hfile: HANDLE, dwflags: u32) -> HINSTANCE;\n \n     pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);\n     pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);"}, {"sha": "7dff81ecb8ddeebb6e4d938dad632c198727dc78", "filename": "library/std/src/sys/windows/compat.rs", "status": "modified", "additions": 52, "deletions": 30, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7bb47a6f38d2c4673663fa1370817c7fb5e682c1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7bb47a6f38d2c4673663fa1370817c7fb5e682c1/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fcompat.rs?ref=7bb47a6f38d2c4673663fa1370817c7fb5e682c1", "patch": "@@ -21,9 +21,52 @@\n \n use crate::ffi::{c_void, CStr};\n use crate::ptr::NonNull;\n-use crate::sync::atomic::{AtomicBool, Ordering};\n+use crate::sync::atomic::Ordering;\n use crate::sys::c;\n \n+// This uses a static initializer to preload some imported functions.\n+// The CRT (C runtime) executes static initializers before `main`\n+// is called (for binaries) and before `DllMain` is called (for DLLs).\n+//\n+// It works by contributing a global symbol to the `.CRT$XCT` section.\n+// The linker builds a table of all static initializer functions.\n+// The CRT startup code then iterates that table, calling each\n+// initializer function.\n+//\n+// NOTE: User code should instead use .CRT$XCU to reliably run after std's initializer.\n+// If you're reading this and would like a guarantee here, please\n+// file an issue for discussion; currently we don't guarantee any functionality\n+// before main.\n+// See https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-initialization?view=msvc-170\n+#[used]\n+#[link_section = \".CRT$XCT\"]\n+static INIT_TABLE_ENTRY: unsafe extern \"C\" fn() = init;\n+\n+/// Preload some imported functions.\n+///\n+/// Note that any functions included here will be unconditionally loaded in\n+/// the final binary, regardless of whether or not they're actually used.\n+///\n+/// Therefore, this should be limited to `compat_fn_optional` functions which\n+/// must be preloaded or any functions where lazier loading demonstrates a\n+/// negative performance impact in practical situations.\n+///\n+/// Currently we only preload `WaitOnAddress` and `WakeByAddressSingle`.\n+unsafe extern \"C\" fn init() {\n+    // In an exe this code is executed before main() so is single threaded.\n+    // In a DLL the system's loader lock will be held thereby synchronizing\n+    // access. So the same best practices apply here as they do to running in DllMain:\n+    // https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-best-practices\n+    //\n+    // DO NOT do anything interesting or complicated in this function! DO NOT call\n+    // any Rust functions or CRT functions if those functions touch any global state,\n+    // because this function runs during global initialization. For example, DO NOT\n+    // do any dynamic allocation, don't call LoadLibrary, etc.\n+\n+    // Attempt to preload the synch functions.\n+    load_synch_functions();\n+}\n+\n /// Helper macro for creating CStrs from literals and symbol names.\n macro_rules! ansi_str {\n     (sym $ident:ident) => {{\n@@ -75,20 +118,6 @@ impl Module {\n         NonNull::new(module).map(Self)\n     }\n \n-    /// Load the library (if not already loaded)\n-    ///\n-    /// # Safety\n-    ///\n-    /// The module must not be unloaded.\n-    pub unsafe fn load_system_library(name: &CStr) -> Option<Self> {\n-        let module = c::LoadLibraryExA(\n-            name.as_ptr(),\n-            crate::ptr::null_mut(),\n-            c::LOAD_LIBRARY_SEARCH_SYSTEM32,\n-        );\n-        NonNull::new(module).map(Self)\n-    }\n-\n     // Try to get the address of a function.\n     pub fn proc_address(self, name: &CStr) -> Option<NonNull<c_void>> {\n         // SAFETY:\n@@ -182,14 +211,10 @@ macro_rules! compat_fn_optional {\n \n                 #[inline(always)]\n                 pub fn option() -> Option<F> {\n-                    let f = PTR.load(Ordering::Acquire);\n-                    if !f.is_null() { Some(unsafe { mem::transmute(f) }) } else { try_load() }\n-                }\n-\n-                #[cold]\n-                fn try_load() -> Option<F> {\n-                    $load_functions;\n-                    NonNull::new(PTR.load(Ordering::Acquire)).map(|f| unsafe { mem::transmute(f) })\n+                    // Miri does not understand the way we do preloading\n+                    // therefore load the function here instead.\n+                    #[cfg(miri)] $load_functions;\n+                    NonNull::new(PTR.load(Ordering::Relaxed)).map(|f| unsafe { mem::transmute(f) })\n                 }\n             }\n         )+\n@@ -205,17 +230,14 @@ pub(super) fn load_synch_functions() {\n \n         // Try loading the library and all the required functions.\n         // If any step fails, then they all fail.\n-        let library = unsafe { Module::load_system_library(MODULE_NAME) }?;\n+        let library = unsafe { Module::new(MODULE_NAME) }?;\n         let wait_on_address = library.proc_address(WAIT_ON_ADDRESS)?;\n         let wake_by_address_single = library.proc_address(WAKE_BY_ADDRESS_SINGLE)?;\n \n-        c::WaitOnAddress::PTR.store(wait_on_address.as_ptr(), Ordering::Release);\n-        c::WakeByAddressSingle::PTR.store(wake_by_address_single.as_ptr(), Ordering::Release);\n+        c::WaitOnAddress::PTR.store(wait_on_address.as_ptr(), Ordering::Relaxed);\n+        c::WakeByAddressSingle::PTR.store(wake_by_address_single.as_ptr(), Ordering::Relaxed);\n         Some(())\n     }\n \n-    // Try to load the module but skip loading if a previous attempt failed.\n-    static LOAD_MODULE: AtomicBool = AtomicBool::new(true);\n-    let module_loaded = LOAD_MODULE.load(Ordering::Acquire) && try_load().is_some();\n-    LOAD_MODULE.store(module_loaded, Ordering::Release)\n+    try_load();\n }"}]}