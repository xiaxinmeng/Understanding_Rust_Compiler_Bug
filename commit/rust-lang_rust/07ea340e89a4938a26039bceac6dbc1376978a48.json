{"sha": "07ea340e89a4938a26039bceac6dbc1376978a48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZWEzNDBlODlhNDkzOGEyNjAzOWJjZWFjNmRiYzEzNzY5NzhhNDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-19T06:54:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T06:54:39Z"}, "message": "Rollup merge of #75685 - nixphix:docs/unix-ext, r=jyn514\n\nSwitch to intra-doc links in /src/sys/unix/ext/*.rs\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514\n\nThese two links are not resolving to either `crate::fs::File...` or `fs::File...`\n```\n# unix/ext/fs.rs\n   27:    /// [`File::read`]: ../../../../std/fs/struct.File.html#method.read\n\n  130:   /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n```", "tree": {"sha": "54f153779798d43bf66667e385982b6d2f9f9711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54f153779798d43bf66667e385982b6d2f9f9711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ea340e89a4938a26039bceac6dbc1376978a48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPMywCRBK7hj4Ov3rIwAAdHIIAEUeQjE8YP3xuibm995SOaoi\nTDjksn4J+64WV/mM2a/tm2FmP5Kt0wnlNYDdJ9QUciOCls/4wpxf4AbbMPuhELfW\nXtdEGrfRyz4KUNXhWkttaHGqURpfyLF3lU/kirrDHMmzhDVyR8YxLEqQgpDtnhDK\n54YPdalemT/JdFRpnlPQtKYafF7MUTO+hUULiS2pfXEYKYrWKgI7tcQ53j8cHfiz\nsr+xNlhfoGfkwv8aT9Ifg07ARXpzHOp6f2/OWtD/WRaEoid19vVNKP9dkEXuoyW5\n3RXZXCc2hu4Uh1Iz0LsTXJ4M7g+2pvwxm5fkxYUXIFv8eLrb7bo6kcIWiNHSSAE=\n=hFpO\n-----END PGP SIGNATURE-----\n", "payload": "tree 54f153779798d43bf66667e385982b6d2f9f9711\nparent 98f7d882c8ebd4e505fc407ed261b48c2f54c697\nparent 63d2e9b05f98ff49d593cc392cb31c8d82552726\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597820079 +0900\ncommitter GitHub <noreply@github.com> 1597820079 +0900\n\nRollup merge of #75685 - nixphix:docs/unix-ext, r=jyn514\n\nSwitch to intra-doc links in /src/sys/unix/ext/*.rs\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514\n\nThese two links are not resolving to either `crate::fs::File...` or `fs::File...`\n```\n# unix/ext/fs.rs\n   27:    /// [`File::read`]: ../../../../std/fs/struct.File.html#method.read\n\n  130:   /// [`File::write`]: ../../../../std/fs/struct.File.html#method.write\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ea340e89a4938a26039bceac6dbc1376978a48", "html_url": "https://github.com/rust-lang/rust/commit/07ea340e89a4938a26039bceac6dbc1376978a48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ea340e89a4938a26039bceac6dbc1376978a48/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98f7d882c8ebd4e505fc407ed261b48c2f54c697", "url": "https://api.github.com/repos/rust-lang/rust/commits/98f7d882c8ebd4e505fc407ed261b48c2f54c697", "html_url": "https://github.com/rust-lang/rust/commit/98f7d882c8ebd4e505fc407ed261b48c2f54c697"}, {"sha": "63d2e9b05f98ff49d593cc392cb31c8d82552726", "url": "https://api.github.com/repos/rust-lang/rust/commits/63d2e9b05f98ff49d593cc392cb31c8d82552726", "html_url": "https://github.com/rust-lang/rust/commit/63d2e9b05f98ff49d593cc392cb31c8d82552726"}], "stats": {"total": 102, "additions": 26, "deletions": 76}, "files": [{"sha": "b590a0280d1382e2888358c503cd01a76f2f95d8", "filename": "library/std/src/sys/unix/ext/fs.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Ffs.rs?ref=07ea340e89a4938a26039bceac6dbc1376978a48", "patch": "@@ -9,9 +9,7 @@ use crate::sys;\n use crate::sys::platform::fs::MetadataExt as UnixMetadataExt;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n \n-/// Unix-specific extensions to [`File`].\n-///\n-/// [`File`]: ../../../../std/fs/struct.File.html\n+/// Unix-specific extensions to [`fs::File`].\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Reads a number of bytes starting from a given offset.\n@@ -55,19 +53,18 @@ pub trait FileExt {\n     ///\n     /// The current file cursor is not affected by this function.\n     ///\n-    /// Similar to [`Read::read_exact`] but uses [`read_at`] instead of `read`.\n+    /// Similar to [`io::Read::read_exact`] but uses [`read_at`] instead of `read`.\n     ///\n-    /// [`Read::read_exact`]: ../../../../std/io/trait.Read.html#method.read_exact\n-    /// [`read_at`]: #tymethod.read_at\n+    /// [`read_at`]: FileExt::read_at\n     ///\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n+    /// [`io::ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If this function encounters an \"end of file\" before completely filling\n-    /// the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\n+    /// the buffer, it returns an error of the kind [`io::ErrorKind::UnexpectedEof`].\n     /// The contents of `buf` are unspecified in this case.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -77,9 +74,6 @@ pub trait FileExt {\n     /// has read, but it will never read more than would be necessary to\n     /// completely fill the buffer.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`ErrorKind::UnexpectedEof`]: ../../../../std/io/enum.ErrorKind.html#variant.UnexpectedEof\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -161,19 +155,18 @@ pub trait FileExt {\n     /// The current file cursor is not affected by this function.\n     ///\n     /// This method will continuously call [`write_at`] until there is no more data\n-    /// to be written or an error of non-[`ErrorKind::Interrupted`] kind is\n+    /// to be written or an error of non-[`io::ErrorKind::Interrupted`] kind is\n     /// returned. This method will not return until the entire buffer has been\n     /// successfully written or such an error occurs. The first error that is\n-    /// not of [`ErrorKind::Interrupted`] kind generated from this method will be\n+    /// not of [`io::ErrorKind::Interrupted`] kind generated from this method will be\n     /// returned.\n     ///\n     /// # Errors\n     ///\n     /// This function will return the first error of\n-    /// non-[`ErrorKind::Interrupted`] kind that [`write_at`] returns.\n+    /// non-[`io::ErrorKind::Interrupted`] kind that [`write_at`] returns.\n     ///\n-    /// [`ErrorKind::Interrupted`]: ../../../../std/io/enum.ErrorKind.html#variant.Interrupted\n-    /// [`write_at`]: #tymethod.write_at\n+    /// [`write_at`]: FileExt::write_at\n     ///\n     /// # Examples\n     ///\n@@ -223,8 +216,6 @@ impl FileExt for fs::File {\n }\n \n /// Unix-specific extensions to [`fs::Permissions`].\n-///\n-/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `st_mode` bits that contain the standard\n@@ -302,8 +293,6 @@ impl PermissionsExt for Permissions {\n }\n \n /// Unix-specific extensions to [`fs::OpenOptions`].\n-///\n-/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -372,8 +361,6 @@ impl OpenOptionsExt for OpenOptions {\n }\n \n /// Unix-specific extensions to [`fs::Metadata`].\n-///\n-/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the ID of the device containing the file.\n@@ -535,7 +522,7 @@ pub trait MetadataExt {\n     fn atime(&self) -> i64;\n     /// Returns the last access time of the file, in nanoseconds since [`atime`].\n     ///\n-    /// [`atime`]: #tymethod.atime\n+    /// [`atime`]: MetadataExt::atime\n     ///\n     /// # Examples\n     ///\n@@ -571,7 +558,7 @@ pub trait MetadataExt {\n     fn mtime(&self) -> i64;\n     /// Returns the last modification time of the file, in nanoseconds since [`mtime`].\n     ///\n-    /// [`mtime`]: #tymethod.mtime\n+    /// [`mtime`]: MetadataExt::mtime\n     ///\n     /// # Examples\n     ///\n@@ -607,7 +594,7 @@ pub trait MetadataExt {\n     fn ctime(&self) -> i64;\n     /// Returns the last status change time of the file, in nanoseconds since [`ctime`].\n     ///\n-    /// [`ctime`]: #tymethod.ctime\n+    /// [`ctime`]: MetadataExt::ctime\n     ///\n     /// # Examples\n     ///\n@@ -714,12 +701,10 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// Unix-specific extensions for [`FileType`].\n+/// Unix-specific extensions for [`fs::FileType`].\n ///\n /// Adds support for special Unix file types such as block/character devices,\n /// pipes, and sockets.\n-///\n-/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns `true` if this file type is a block device.\n@@ -813,8 +798,6 @@ impl FileTypeExt for fs::FileType {\n }\n \n /// Unix-specific extension methods for [`fs::DirEntry`].\n-///\n-/// [`fs::DirEntry`]: ../../../../std/fs/struct.DirEntry.html\n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n@@ -875,8 +858,6 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n }\n \n /// Unix-specific extensions to [`fs::DirBuilder`].\n-///\n-/// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to"}, {"sha": "55803ddfc43232209238a246ac65cafd5eb5313f", "filename": "library/std/src/sys/unix/ext/net.rs", "status": "modified", "additions": 11, "deletions": 34, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs?ref=07ea340e89a4938a26039bceac6dbc1376978a48", "patch": "@@ -408,10 +408,7 @@ impl UnixStream {\n     /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is passed to this\n     /// method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n-    /// [`read`]: ../../../../std/io/trait.Read.html#tymethod.read\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`read`]: io::Read::read\n     ///\n     /// # Examples\n     ///\n@@ -453,10 +450,7 @@ impl UnixStream {\n     /// indefinitely. An [`Err`] is returned if the zero [`Duration`] is\n     /// passed to this method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n-    /// [`write`]: ../../../../std/io/trait.Write.html#tymethod.write\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`read`]: io::Read::read\n     ///\n     /// # Examples\n     ///\n@@ -581,8 +575,6 @@ impl UnixStream {\n     /// specified portions to immediately return with an appropriate value\n     /// (see the documentation of [`Shutdown`]).\n     ///\n-    /// [`Shutdown`]: ../../../../std/net/enum.Shutdown.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -852,7 +844,7 @@ impl UnixListener {\n     /// is established. When established, the corresponding [`UnixStream`] and\n     /// the remote peer's address will be returned.\n     ///\n-    /// [`UnixStream`]: ../../../../std/os/unix/net/struct.UnixStream.html\n+    /// [`UnixStream`]: crate::os::unix::net::UnixStream\n     ///\n     /// # Examples\n     ///\n@@ -937,8 +929,6 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n-    ///\n-    /// [`io::ErrorKind::WouldBlock`]: ../../../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)\n@@ -973,9 +963,6 @@ impl UnixListener {\n     /// The iterator will never return [`None`] and will also not yield the\n     /// peer's [`SocketAddr`] structure.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`SocketAddr`]: struct.SocketAddr.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -1043,9 +1030,6 @@ impl<'a> IntoIterator for &'a UnixListener {\n ///\n /// It will never return [`None`].\n ///\n-/// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-/// [`UnixListener`]: struct.UnixListener.html\n-///\n /// # Examples\n ///\n /// ```no_run\n@@ -1205,9 +1189,9 @@ impl UnixDatagram {\n     /// The [`send`] method may be used to send data to the specified address.\n     /// [`recv`] and [`recv_from`] will only receive data from that address.\n     ///\n-    /// [`send`]: #method.send\n-    /// [`recv`]: #method.recv\n-    /// [`recv_from`]: #method.recv_from\n+    /// [`send`]: UnixDatagram::send\n+    /// [`recv`]: UnixDatagram::recv\n+    /// [`recv_from`]: UnixDatagram::recv_from\n     ///\n     /// # Examples\n     ///\n@@ -1284,7 +1268,7 @@ impl UnixDatagram {\n     ///\n     /// The [`connect`] method will connect the socket to a peer.\n     ///\n-    /// [`connect`]: #method.connect\n+    /// [`connect`]: UnixDatagram::connect\n     ///\n     /// # Examples\n     ///\n@@ -1432,11 +1416,8 @@ impl UnixDatagram {\n     /// block indefinitely. An [`Err`] is returned if the zero [`Duration`]\n     /// is passed to this method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`Err`]: ../../../../std/result/enum.Result.html#variant.Err\n-    /// [`recv`]: #method.recv\n-    /// [`recv_from`]: #method.recv_from\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`recv`]: UnixDatagram::recv\n+    /// [`recv_from`]: UnixDatagram::recv_from\n     ///\n     /// # Examples\n     ///\n@@ -1479,10 +1460,8 @@ impl UnixDatagram {\n     /// block indefinitely. An [`Err`] is returned if the zero [`Duration`] is passed to this\n     /// method.\n     ///\n-    /// [`None`]: ../../../../std/option/enum.Option.html#variant.None\n-    /// [`send`]: #method.send\n-    /// [`send_to`]: #method.send_to\n-    /// [`Duration`]: ../../../../std/time/struct.Duration.html\n+    /// [`send`]: UnixDatagram::send\n+    /// [`send_to`]: UnixDatagram::send_to\n     ///\n     /// # Examples\n     ///\n@@ -1605,8 +1584,6 @@ impl UnixDatagram {\n     /// specified portions to immediately return with an appropriate value\n     /// (see the documentation of [`Shutdown`]).\n     ///\n-    /// [`Shutdown`]: ../../../../std/net/enum.Shutdown.html\n-    ///\n     /// ```no_run\n     /// use std::os::unix::net::UnixDatagram;\n     /// use std::net::Shutdown;"}, {"sha": "82527c40e91382f8c6a7c2add76801fd1c46a20c", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=07ea340e89a4938a26039bceac6dbc1376978a48", "patch": "@@ -10,8 +10,6 @@ use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n /// Unix-specific extensions to the [`process::Command`] builder.\n-///\n-/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user ID. This translates to a\n@@ -65,7 +63,7 @@ pub trait CommandExt {\n     /// This method is stable and usable, but it should be unsafe. To fix\n     /// that, it got deprecated in favor of the unsafe [`pre_exec`].\n     ///\n-    /// [`pre_exec`]: #tymethod.pre_exec\n+    /// [`pre_exec`]: CommandExt::pre_exec\n     #[stable(feature = \"process_exec\", since = \"1.15.0\")]\n     #[rustc_deprecated(since = \"1.37.0\", reason = \"should be unsafe, use `pre_exec` instead\")]\n     fn before_exec<F>(&mut self, f: F) -> &mut process::Command\n@@ -94,8 +92,6 @@ pub trait CommandExt {\n     /// a new child. Like spawn, however, the default behavior for the stdio\n     /// descriptors will be to inherited from the current process.\n     ///\n-    /// [`process::exit`]: ../../../process/fn.exit.html\n-    ///\n     /// # Notes\n     ///\n     /// The process may be in a \"broken state\" if this function returns in\n@@ -151,8 +147,6 @@ impl CommandExt for process::Command {\n }\n \n /// Unix-specific extensions to [`process::ExitStatus`].\n-///\n-/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}, {"sha": "7221da1a9a7bbc998b891b43bb8d7fbe82ed37f0", "filename": "library/std/src/sys/unix/ext/thread.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ea340e89a4938a26039bceac6dbc1376978a48/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fthread.rs?ref=07ea340e89a4938a26039bceac6dbc1376978a48", "patch": "@@ -11,9 +11,7 @@ use crate::thread::JoinHandle;\n #[allow(deprecated)]\n pub type RawPthread = pthread_t;\n \n-/// Unix-specific extensions to [`thread::JoinHandle`].\n-///\n-/// [`thread::JoinHandle`]: ../../../../std/thread/struct.JoinHandle.html\n+/// Unix-specific extensions to [`JoinHandle`].\n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n pub trait JoinHandleExt {\n     /// Extracts the raw pthread_t without taking ownership"}]}