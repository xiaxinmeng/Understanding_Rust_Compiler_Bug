{"sha": "e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "node_id": "C_kwDOAAsO6NoAKGU0Y2ZhYTFhN2VkMzM2MzExZTI4MWZmMTg4ZTcwNGQ3ZWY2MGIxYmY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-21T05:11:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-21T05:11:10Z"}, "message": "Rollup merge of #90077 - woppopo:const_nonzero_from, r=oli-obk\n\nMake `From` impls of NonZero integer const.\n\nI also changed the feature gate added to `From` impls of Atomic integer to `const_num_from_num` from `const_convert`.\n\nTracking issue: #87852", "tree": {"sha": "4a1f89b3d93090d2e8adf7169c9c886fda8c2f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a1f89b3d93090d2e8adf7169c9c886fda8c2f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhcPZvCRBK7hj4Ov3rIwAAdU8IAHpm91Zy6tZtG3P3cHun7U3w\nF4Yl4tPhnvtLCnaGMbyHuduU2aF8ayn95BGWu/J6WTXBrLxlj8gE5tHL0Djq1RHf\niGIn3n+Bpy4Kn08t5BBoZ9spaH7Vod8z8/HlGLy4QJVeBcwt24iULyZfjffoKTdT\n3OeQo5JVgy9UGdW+dSIZEfYg2KTosvA/6o5nLnMKeMC1IjYVf7pPKDgAvSWgkr6P\n3xjXB/cZYqaTwlfsan4Sxv8qAEqLUuU0Ta0fj6cy4B+mo3SNLEBNPrez7peAYgH+\n6ay5xUa8q7PcLv0MAyBBpj9yFDj93pUxTyXyE3wux8Vxnes/LiIj0UyhbDzbftE=\n=dK8W\n-----END PGP SIGNATURE-----\n", "payload": "tree 4a1f89b3d93090d2e8adf7169c9c886fda8c2f78\nparent 371fd4f1c05bd0cf2cd6c4912e0cc83460075370\nparent 2fc780638e069155c87555da10ff234d1018fcaa\nauthor Yuki Okushi <jtitor@2k36.org> 1634793070 +0900\ncommitter GitHub <noreply@github.com> 1634793070 +0900\n\nRollup merge of #90077 - woppopo:const_nonzero_from, r=oli-obk\n\nMake `From` impls of NonZero integer const.\n\nI also changed the feature gate added to `From` impls of Atomic integer to `const_num_from_num` from `const_convert`.\n\nTracking issue: #87852\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "html_url": "https://github.com/rust-lang/rust/commit/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "371fd4f1c05bd0cf2cd6c4912e0cc83460075370", "url": "https://api.github.com/repos/rust-lang/rust/commits/371fd4f1c05bd0cf2cd6c4912e0cc83460075370", "html_url": "https://github.com/rust-lang/rust/commit/371fd4f1c05bd0cf2cd6c4912e0cc83460075370"}, {"sha": "2fc780638e069155c87555da10ff234d1018fcaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc780638e069155c87555da10ff234d1018fcaa", "html_url": "https://github.com/rust-lang/rust/commit/2fc780638e069155c87555da10ff234d1018fcaa"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "2b6ea90bf043019dd9f177fcb313716e8ab42d88", "filename": "library/core/src/convert/num.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fnum.rs?ref=e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "patch": "@@ -390,15 +390,16 @@ use crate::num::NonZeroUsize;\n macro_rules! nzint_impl_from {\n     ($Small: ty, $Large: ty, #[$attr:meta], $doc: expr) => {\n         #[$attr]\n-        impl From<$Small> for $Large {\n+        #[rustc_const_unstable(feature = \"const_num_from_num\", issue = \"87852\")]\n+        impl const From<$Small> for $Large {\n             // Rustdocs on the impl block show a \"[+] show undocumented items\" toggle.\n             // Rustdocs on functions do not.\n             #[doc = $doc]\n             #[inline]\n             fn from(small: $Small) -> Self {\n                 // SAFETY: input type guarantees the value is non-zero\n                 unsafe {\n-                    Self::new_unchecked(small.get().into())\n+                    Self::new_unchecked(From::from(small.get()))\n                 }\n             }\n         }"}, {"sha": "58a170401e7c123c5f08c97b164877022dfd2133", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "patch": "@@ -115,6 +115,7 @@\n #![feature(const_likely)]\n #![feature(const_maybe_uninit_as_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_num_from_num)]\n #![feature(const_option)]\n #![feature(const_pin)]\n #![feature(const_replace)]"}, {"sha": "9b1a4de5d80378ce7016c058f575f6f481241cff", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "patch": "@@ -82,7 +82,7 @@ macro_rules! nonzero_integers {\n             }\n \n             #[stable(feature = \"from_nonzero\", since = \"1.31.0\")]\n-            #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+            #[rustc_const_unstable(feature = \"const_num_from_num\", issue = \"87852\")]\n             impl const From<$Ty> for $Int {\n                 #[doc = concat!(\"Converts a `\", stringify!($Ty), \"` into an `\", stringify!($Int), \"`\")]\n                 #[inline]"}, {"sha": "1dd3b2d8e3c8d8c2ae4a0202aa090e64c96a16de", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "patch": "@@ -1365,7 +1365,7 @@ macro_rules! atomic_int {\n         }\n \n         #[$stable_from]\n-        #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+        #[rustc_const_unstable(feature = \"const_num_from_num\", issue = \"87852\")]\n         impl const From<$int_type> for $atomic_type {\n             #[doc = concat!(\"Converts an `\", stringify!($int_type), \"` into an `\", stringify!($atomic_type), \"`.\")]\n             #[inline]"}, {"sha": "a0ca919a851c36c15762c45e1001263f769dffe2", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cfaa1a7ed336311e281ff188e704d7ef60b1bf/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=e4cfaa1a7ed336311e281ff188e704d7ef60b1bf", "patch": "@@ -204,9 +204,9 @@ fn nonzero_const() {\n     // test that the methods of `NonZeroX>` are usable in a const context\n     // Note: only tests NonZero8\n \n-    const NONZERO: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };\n+    const NONZERO_U8: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };\n \n-    const GET: u8 = NONZERO.get();\n+    const GET: u8 = NONZERO_U8.get();\n     assert_eq!(GET, 5);\n \n     const ZERO: Option<NonZeroU8> = NonZeroU8::new(0);\n@@ -215,8 +215,11 @@ fn nonzero_const() {\n     const ONE: Option<NonZeroU8> = NonZeroU8::new(1);\n     assert!(ONE.is_some());\n \n-    const FROM_NONZERO: u8 = u8::from(NONZERO);\n-    assert_eq!(FROM_NONZERO, 5);\n+    const FROM_NONZERO_U8: u8 = u8::from(NONZERO_U8);\n+    assert_eq!(FROM_NONZERO_U8, 5);\n+\n+    const NONZERO_CONVERT: NonZeroU32 = NonZeroU32::from(NONZERO_U8);\n+    assert_eq!(NONZERO_CONVERT.get(), 5);\n }\n \n #[test]"}]}