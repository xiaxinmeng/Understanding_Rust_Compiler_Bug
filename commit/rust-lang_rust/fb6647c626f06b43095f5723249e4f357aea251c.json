{"sha": "fb6647c626f06b43095f5723249e4f357aea251c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNjY0N2M2MjZmMDZiNDMwOTVmNTcyMzI0OWU0ZjM1N2FlYTI1MWM=", "commit": {"author": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2019-11-11T17:55:49Z"}, "committer": {"name": "Elichai Turkel", "email": "elichai.turkel@gmail.com", "date": "2019-11-24T11:35:50Z"}, "message": "Add FFI raw array lint", "tree": {"sha": "156f52a748f0f7de8908f672284574ad39869800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156f52a748f0f7de8908f672284574ad39869800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb6647c626f06b43095f5723249e4f357aea251c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAl3aaxgZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf4o3EAC/Tlm0gEbSq6Lii6V755dJ\n4I6PTht3pGhO3TpGomEEFBUcvFc16GsQpIialS64vr4wRPR0eeLLveACYE2i9PfG\nr7lht0ZYIsecrpvNDrBqj87NKStcyE2w2oNhELHaGYKoyXeDbXDpKOsPIk5O4mks\n7/G8f+B/r8kjGaugdQFk1/w8nYs/J6TyywgeLhefWsk23nhvvSaCQclgdLNH9FjZ\nUHZrbqapeCHrB5ptF7XCqT1HAgQcAEvVu1l8r3zBKrqhIGrtHW50/v3mnDbq9Xfs\na/hFdB96dIiv8GnbjQs3nwdOHOUBaCKdBfWPwqWI5lHfM/bfZ1neMBfQCgHKg+tJ\ncPWftOvJJe+zFfYDJJTkICI+hWpV+RruEMATkYJ6wCDlW/33AWdW/dL33V9FlGP1\nZrNXDVlI3Y2MhwiHIJHuU/zcUASkklp8k1tqsBuA18sjfhTnhQEzqkU1JDRH7krl\na7IEnfO3SwIYHAhaKvsNXc96/vcbtxE2l4MAXYLGVYhnV6Cc+PJsMGctCWH08ltj\nGLFx7ZdYfoJQkMw2ug2gH8AXiuVlYd0aj5YKg1jGi4rAnpo9FSQqysbz5xrke1RB\nCbfENn6cd18vfBnXekGDCu9VIw5SPJivcBkRFpH4fjko6JdLxmP7xKmKn9KT+F0r\nAKrMmrvjrndc2wMoaPp/mw==\n=tpTJ\n-----END PGP SIGNATURE-----", "payload": "tree 156f52a748f0f7de8908f672284574ad39869800\nparent e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1573494949 +0200\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1574595350 +0200\n\nAdd FFI raw array lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb6647c626f06b43095f5723249e4f357aea251c", "html_url": "https://github.com/rust-lang/rust/commit/fb6647c626f06b43095f5723249e4f357aea251c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb6647c626f06b43095f5723249e4f357aea251c/comments", "author": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elichai", "id": 2167860, "node_id": "MDQ6VXNlcjIxNjc4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elichai", "html_url": "https://github.com/elichai", "followers_url": "https://api.github.com/users/elichai/followers", "following_url": "https://api.github.com/users/elichai/following{/other_user}", "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}", "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elichai/subscriptions", "organizations_url": "https://api.github.com/users/elichai/orgs", "repos_url": "https://api.github.com/users/elichai/repos", "events_url": "https://api.github.com/users/elichai/events{/privacy}", "received_events_url": "https://api.github.com/users/elichai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f", "html_url": "https://github.com/rust-lang/rust/commit/e41ced3f8d8e2f3f377ef931458e612d5f3d1f3f"}], "stats": {"total": 34, "additions": 29, "deletions": 5}, "files": [{"sha": "71b234964c6ae966f5cf3afb55eb2b2e4af66156", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fb6647c626f06b43095f5723249e4f357aea251c/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb6647c626f06b43095f5723249e4f357aea251c/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=fb6647c626f06b43095f5723249e4f357aea251c", "patch": "@@ -600,6 +600,23 @@ fn is_repr_nullable_ptr<'tcx>(\n }\n \n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n+\n+    /// Check if the type is array and emit an unsafe type lint.\n+    fn check_for_array_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n+        if let ty::Array(..) = ty.kind {\n+            self.emit_ffi_unsafe_type_lint(\n+                ty,\n+                sp,\n+                \"passing raw arrays by value is not FFI-safe\",\n+                Some(\"consider passing a pointer to the array\"),\n+            );\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n+\n     /// Checks if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n     fn check_type_for_ffi(&self,\n@@ -834,7 +851,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::RawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::Ref(_, ty, _) => self.check_type_for_ffi(cache, ty),\n \n-            ty::Array(ty, _) => self.check_type_for_ffi(cache, ty),\n+            ty::Array(inner_ty, _) => self.check_type_for_ffi(cache, inner_ty),\n \n             ty::FnPtr(sig) => {\n                 match sig.abi() {\n@@ -946,7 +963,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>) {\n+    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>, is_static: bool) {\n         // We have to check for opaque types before `normalize_erasing_regions`,\n         // which will replace opaque types with their underlying concrete type.\n         if self.check_for_opaque_ty(sp, ty) {\n@@ -957,6 +974,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n         let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+        // C doesn't really support passing arrays by value.\n+        // The only way to pass an array by value is through a struct.\n+        // So we first test that the top level isn't an array,\n+        // and then recursively check the types inside.\n+        if !is_static && self.check_for_array_ty(sp, ty) {\n+            return;\n+        }\n \n         match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n@@ -975,21 +999,21 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n \n         for (input_ty, input_hir) in sig.inputs().iter().zip(&decl.inputs) {\n-            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty);\n+            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false);\n         }\n \n         if let hir::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n             if !ret_ty.is_unit() {\n-                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty);\n+                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, false);\n             }\n         }\n     }\n \n     fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n-        self.check_type_for_ffi_and_report_errors(span, ty);\n+        self.check_type_for_ffi_and_report_errors(span, ty, true);\n     }\n }\n "}]}