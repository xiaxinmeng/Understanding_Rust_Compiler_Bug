{"sha": "a8340413fe8aa29864ce05875cc63f29af305e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzQwNDEzZmU4YWEyOTg2NGNlMDU4NzVjYzYzZjI5YWYzMDVlMzE=", "commit": {"author": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-02-04T08:38:07Z"}, "committer": {"name": "Waffle", "email": "waffle.lapkin@gmail.com", "date": "2020-02-04T08:38:07Z"}, "message": "Remove `finished` flag from `MapWhile`", "tree": {"sha": "19a8f0dc8bcd324847695dd0ff5d41a6c794ab17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a8f0dc8bcd324847695dd0ff5d41a6c794ab17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8340413fe8aa29864ce05875cc63f29af305e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8340413fe8aa29864ce05875cc63f29af305e31", "html_url": "https://github.com/rust-lang/rust/commit/a8340413fe8aa29864ce05875cc63f29af305e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8340413fe8aa29864ce05875cc63f29af305e31/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "266ecd6625060af304adc01f38773c2f013de1c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/266ecd6625060af304adc01f38773c2f013de1c5", "html_url": "https://github.com/rust-lang/rust/commit/266ecd6625060af304adc01f38773c2f013de1c5"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "177e48b05b3db4928d55efd8df65de00589d1306", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 21, "deletions": 47, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a8340413fe8aa29864ce05875cc63f29af305e31/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8340413fe8aa29864ce05875cc63f29af305e31/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=a8340413fe8aa29864ce05875cc63f29af305e31", "patch": "@@ -1752,6 +1752,14 @@ where\n     }\n }\n \n+#[stable(feature = \"fused\", since = \"1.26.0\")]\n+impl<I, P> FusedIterator for TakeWhile<I, P>\n+where\n+    I: FusedIterator,\n+    P: FnMut(&I::Item) -> bool,\n+{\n+}\n+\n /// An iterator that only accepts elements while `predicate` returns `Some(_)`.\n ///\n /// This `struct` is created by the [`map_while`] method on [`Iterator`]. See its\n@@ -1764,20 +1772,19 @@ where\n #[derive(Clone)]\n pub struct MapWhile<I, P> {\n     iter: I,\n-    finished: bool,\n     predicate: P,\n }\n \n impl<I, P> MapWhile<I, P> {\n     pub(super) fn new(iter: I, predicate: P) -> MapWhile<I, P> {\n-        MapWhile { iter, finished: false, predicate }\n+        MapWhile { iter, predicate }\n     }\n }\n \n #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n impl<I: fmt::Debug, P> fmt::Debug for MapWhile<I, P> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.debug_struct(\"MapWhile\").field(\"iter\", &self.iter).field(\"flag\", &self.finished).finish()\n+        f.debug_struct(\"MapWhile\").field(\"iter\", &self.iter).finish()\n     }\n }\n \n@@ -1790,65 +1797,32 @@ where\n \n     #[inline]\n     fn next(&mut self) -> Option<B> {\n-        if self.finished {\n-            None\n-        } else {\n-            let x = self.iter.next()?;\n-            let ret = (self.predicate)(x);\n-            self.finished = ret.is_none();\n-            ret\n-        }\n+        let x = self.iter.next()?;\n+        (self.predicate)(x)\n     }\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        if self.finished {\n-            (0, Some(0))\n-        } else {\n-            let (_, upper) = self.iter.size_hint();\n-            (0, upper) // can't know a lower bound, due to the predicate\n-        }\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper) // can't know a lower bound, due to the predicate\n     }\n \n     #[inline]\n-    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n+    fn try_fold<Acc, Fold, R>(&mut self, init: Acc, mut fold: Fold) -> R\n     where\n         Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Ok = Acc>,\n     {\n-        fn check<'a, B, T, Acc, R: Try<Ok = Acc>>(\n-            flag: &'a mut bool,\n-            p: &'a mut impl FnMut(T) -> Option<B>,\n-            mut fold: impl FnMut(Acc, B) -> R + 'a,\n-        ) -> impl FnMut(Acc, T) -> LoopState<Acc, R> + 'a {\n-            move |acc, x| match p(x) {\n-                Some(item) => LoopState::from_try(fold(acc, item)),\n-                None => {\n-                    *flag = true;\n-                    LoopState::Break(Try::from_ok(acc))\n-                }\n-            }\n-        }\n-\n-        if self.finished {\n-            Try::from_ok(init)\n-        } else {\n-            let flag = &mut self.finished;\n-            let p = &mut self.predicate;\n-            self.iter.try_fold(init, check(flag, p, fold)).into_try()\n-        }\n+        let Self { iter, predicate } = self;\n+        iter.try_fold(init, |acc, x| match predicate(x) {\n+            Some(item) => LoopState::from_try(fold(acc, item)),\n+            None => LoopState::Break(Try::from_ok(acc)),\n+        })\n+        .into_try()\n     }\n }\n \n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<I, P> FusedIterator for TakeWhile<I, P>\n-where\n-    I: FusedIterator,\n-    P: FnMut(&I::Item) -> bool,\n-{\n-}\n-\n /// An iterator that skips over `n` elements of `iter`.\n ///\n /// This `struct` is created by the [`skip`] method on [`Iterator`]. See its"}, {"sha": "3b1f3b3a4ead610991a3a1063fa4cf3f17a2edf1", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8340413fe8aa29864ce05875cc63f29af305e31/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8340413fe8aa29864ce05875cc63f29af305e31/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=a8340413fe8aa29864ce05875cc63f29af305e31", "patch": "@@ -1114,8 +1114,23 @@ pub trait Iterator {\n     /// The `-3` is no longer there, because it was consumed in order to see if\n     /// the iteration should stop, but wasn't placed back into the iterator.\n     ///\n+    /// Note that unlike [`take_while`] this iterator is **not** fused:\n+    ///\n+    /// ```\n+    /// #![feature(iter_map_while)]\n+    /// use std::convert::identity;\n+    ///\n+    /// let mut iter = vec![Some(0), None, Some(1)].into_iter().map_while(identity);\n+    /// assert_eq!(iter.next(), Some(0));\n+    /// assert_eq!(iter.next(), None);\n+    /// assert_eq!(iter.next(), Some(1));\n+    /// ```\n+    ///\n+    /// If you need fused iterator, use [`fuse`].\n+    ///\n     /// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`fuse`]: #method.fuse\n     #[inline]\n     #[unstable(feature = \"iter_map_while\", reason = \"recently added\", issue = \"68537\")]\n     fn map_while<B, P>(self, predicate: P) -> MapWhile<Self, P>"}]}