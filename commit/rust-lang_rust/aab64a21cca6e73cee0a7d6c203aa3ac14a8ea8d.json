{"sha": "aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYjY0YTIxY2NhNmU3M2NlZTBhN2Q2YzIwM2FhM2FjMTRhOGVhOGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-10T19:34:01Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-19T01:06:08Z"}, "message": "Reduce span range", "tree": {"sha": "94a2dec62b979c9313049eff33da88a7ca3c703c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94a2dec62b979c9313049eff33da88a7ca3c703c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d", "html_url": "https://github.com/rust-lang/rust/commit/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae872fe1c74d68d7d1e88079cc77c858268fcdbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae872fe1c74d68d7d1e88079cc77c858268fcdbf", "html_url": "https://github.com/rust-lang/rust/commit/ae872fe1c74d68d7d1e88079cc77c858268fcdbf"}], "stats": {"total": 35, "additions": 15, "deletions": 20}, "files": [{"sha": "860caad285865508503292d6fdbfe35527e72408", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_type, method_chain_args, paths, snippet, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{match_type, method_chain_args, paths, snippet_with_applicability, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::*;\n@@ -42,7 +42,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! { //begin checking variables\n             if let ExprKind::Match(ref op, ref body, source) = expr.kind; //test if expr is a match\n-            if let MatchSource::IfLetDesugar { contains_else_clause } = source; //test if it is an If Let\n+            if let MatchSource::IfLetDesugar { .. } = source; //test if it is an If Let\n             if let ExprKind::MethodCall(_, ok_span, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n@@ -53,24 +53,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n                 let trimed_ok_span = op.span.until(op.span.with_lo(ok_span.lo() - BytePos(1)));\n                 let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n                 let trimmed_ok = snippet_with_applicability(cx, trimed_ok_span, \"\", &mut applicability);\n-                let mut sugg = format!(\n-                    \"if let Ok({}) = {} {}\",\n+                let sugg = format!(\n+                    \"if let Ok({}) = {}\",\n                     some_expr_string,\n                     trimmed_ok,\n-                    snippet(cx, body[0].span, \"..\"),\n                 );\n-                if contains_else_clause {\n-                    sugg = format!(\"{} else {}\", sugg, snippet(cx, body[1].span, \"..\"));\n-                }\n                 if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type {\n-                    span_lint_and_sugg(\n+                    span_lint_and_then(\n                         cx,\n                         IF_LET_SOME_RESULT,\n                         expr.span,\n                         \"Matching on `Some` with `ok()` is redundant\",\n-                        &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n-                        sugg,\n-                        applicability,\n+                        |db| {\n+                            db.span_suggestion(\n+                                expr.span.shrink_to_lo().to(ok_span.with_hi(ok_span.hi() + BytePos(2))),\n+                                &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                                sugg,\n+                                applicability,\n+                            );\n+                        },\n                     );\n                 }\n             }"}, {"sha": "0084260b22afebb1a7cc9313adcf5419d689b6d5", "filename": "tests/ui/if_let_some_result.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d/tests%2Fui%2Fif_let_some_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d/tests%2Fui%2Fif_let_some_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.stderr?ref=aab64a21cca6e73cee0a7d6c203aa3ac14a8ea8d", "patch": "@@ -12,11 +12,7 @@ LL | |     }\n help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n LL |     if let Ok(y) = x.parse() {\n-LL |         y\n-LL |     } else {\n-LL |         0\n-LL |     }\n-   |\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Matching on `Some` with `ok()` is redundant\n   --> $DIR/if_let_some_result.rs:23:9\n@@ -29,9 +25,7 @@ LL | |         };\n help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n    |\n LL |         if let Ok(y) = x.parse() {\n-LL |             return y;\n-LL |         };\n-   |\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}