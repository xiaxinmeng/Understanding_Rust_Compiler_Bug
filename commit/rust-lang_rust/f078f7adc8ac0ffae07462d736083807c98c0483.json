{"sha": "f078f7adc8ac0ffae07462d736083807c98c0483", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNzhmN2FkYzhhYzBmZmFlMDc0NjJkNzM2MDgzODA3Yzk4YzA0ODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-23T13:55:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-23T13:55:01Z"}, "message": "introduce tree builder", "tree": {"sha": "e2f6611aaaf1459bb587f47dacaad9f07c4a8110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2f6611aaaf1459bb587f47dacaad9f07c4a8110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f078f7adc8ac0ffae07462d736083807c98c0483", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f078f7adc8ac0ffae07462d736083807c98c0483", "html_url": "https://github.com/rust-lang/rust/commit/f078f7adc8ac0ffae07462d736083807c98c0483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f078f7adc8ac0ffae07462d736083807c98c0483/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c1cb981820c55127c3c09d93868814a1df98246", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c1cb981820c55127c3c09d93868814a1df98246", "html_url": "https://github.com/rust-lang/rust/commit/0c1cb981820c55127c3c09d93868814a1df98246"}], "stats": {"total": 81, "additions": 61, "deletions": 20}, "files": [{"sha": "7334d53ef51722b63ce7d4aad0fea5459d2225bd", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f078f7adc8ac0ffae07462d736083807c98c0483/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f078f7adc8ac0ffae07462d736083807c98c0483/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=f078f7adc8ac0ffae07462d736083807c98c0483", "patch": "@@ -36,7 +36,7 @@ pub use crate::{\n     ast::AstNode,\n     syntax_error::{SyntaxError, SyntaxErrorKind, Location},\n     syntax_text::SyntaxText,\n-    syntax_node::{Direction,  SyntaxNode, WalkEvent, TreeArc},\n+    syntax_node::{Direction,  SyntaxNode, WalkEvent, TreeArc, SyntaxTreeBuilder},\n     ptr::{SyntaxNodePtr, AstPtr},\n     parsing::{tokenize, Token},\n };"}, {"sha": "961a91d41d99dc9953c188f5ca313198e2183376", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f078f7adc8ac0ffae07462d736083807c98c0483/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f078f7adc8ac0ffae07462d736083807c98c0483/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=f078f7adc8ac0ffae07462d736083807c98c0483", "patch": "@@ -1,13 +1,12 @@\n use std::mem;\n \n use ra_parser::{TreeSink, ParseError};\n-use rowan::GreenNodeBuilder;\n \n use crate::{\n-    SmolStr, SyntaxError, SyntaxErrorKind, TextUnit, TextRange,\n+    SmolStr, SyntaxError, TextUnit, TextRange, SyntaxTreeBuilder,\n     SyntaxKind::{self, *},\n     parsing::Token,\n-    syntax_node::{GreenNode, RaTypes},\n+    syntax_node::GreenNode,\n };\n \n /// Bridges the parser with our specific syntax tree representation.\n@@ -19,8 +18,7 @@ pub(crate) struct TextTreeSink<'a> {\n     text_pos: TextUnit,\n     token_pos: usize,\n     state: State,\n-    errors: Vec<SyntaxError>,\n-    inner: GreenNodeBuilder<RaTypes>,\n+    inner: SyntaxTreeBuilder,\n }\n \n enum State {\n@@ -33,7 +31,7 @@ impl<'a> TreeSink for TextTreeSink<'a> {\n     fn leaf(&mut self, kind: SyntaxKind, n_tokens: u8) {\n         match mem::replace(&mut self.state, State::Normal) {\n             State::PendingStart => unreachable!(),\n-            State::PendingFinish => self.inner.finish_internal(),\n+            State::PendingFinish => self.inner.finish_branch(),\n             State::Normal => (),\n         }\n         self.eat_trivias();\n@@ -48,12 +46,12 @@ impl<'a> TreeSink for TextTreeSink<'a> {\n     fn start_branch(&mut self, kind: SyntaxKind) {\n         match mem::replace(&mut self.state, State::Normal) {\n             State::PendingStart => {\n-                self.inner.start_internal(kind);\n+                self.inner.start_branch(kind);\n                 // No need to attach trivias to previous node: there is no\n                 // previous node.\n                 return;\n             }\n-            State::PendingFinish => self.inner.finish_internal(),\n+            State::PendingFinish => self.inner.finish_branch(),\n             State::Normal => (),\n         }\n \n@@ -73,21 +71,20 @@ impl<'a> TreeSink for TextTreeSink<'a> {\n             n_attached_trivias(kind, leading_trivias)\n         };\n         self.eat_n_trivias(n_trivias - n_attached_trivias);\n-        self.inner.start_internal(kind);\n+        self.inner.start_branch(kind);\n         self.eat_n_trivias(n_attached_trivias);\n     }\n \n     fn finish_branch(&mut self) {\n         match mem::replace(&mut self.state, State::PendingFinish) {\n             State::PendingStart => unreachable!(),\n-            State::PendingFinish => self.inner.finish_internal(),\n+            State::PendingFinish => self.inner.finish_branch(),\n             State::Normal => (),\n         }\n     }\n \n     fn error(&mut self, error: ParseError) {\n-        let error = SyntaxError::new(SyntaxErrorKind::ParseError(error), self.text_pos);\n-        self.errors.push(error)\n+        self.inner.error(error, self.text_pos)\n     }\n }\n \n@@ -99,21 +96,20 @@ impl<'a> TextTreeSink<'a> {\n             text_pos: 0.into(),\n             token_pos: 0,\n             state: State::PendingStart,\n-            errors: Vec::new(),\n-            inner: GreenNodeBuilder::new(),\n+            inner: SyntaxTreeBuilder::default(),\n         }\n     }\n \n     pub(super) fn finish(mut self) -> (GreenNode, Vec<SyntaxError>) {\n         match mem::replace(&mut self.state, State::Normal) {\n             State::PendingFinish => {\n                 self.eat_trivias();\n-                self.inner.finish_internal()\n+                self.inner.finish_branch()\n             }\n             State::PendingStart | State::Normal => unreachable!(),\n         }\n \n-        (self.inner.finish(), self.errors)\n+        self.inner.finish_raw()\n     }\n \n     fn eat_trivias(&mut self) {"}, {"sha": "e5b4cdb116b289b414e3e387d1eda43fe9d6a242", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f078f7adc8ac0ffae07462d736083807c98c0483/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f078f7adc8ac0ffae07462d736083807c98c0483/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=f078f7adc8ac0ffae07462d736083807c98c0483", "patch": "@@ -11,11 +11,12 @@ use std::{\n     borrow::Borrow,\n };\n \n-use rowan::{Types, TransparentNewType};\n+use ra_parser::ParseError;\n+use rowan::{Types, TransparentNewType, GreenNodeBuilder};\n \n use crate::{\n-    SmolStr, SyntaxKind, TextRange, SyntaxText, SourceFile, AstNode,\n-    syntax_error::SyntaxError,\n+    SmolStr, SyntaxKind, TextUnit, TextRange, SyntaxText, SourceFile, AstNode,\n+    syntax_error::{SyntaxError, SyntaxErrorKind},\n };\n \n pub use rowan::WalkEvent;\n@@ -276,3 +277,47 @@ fn has_short_text(kind: SyntaxKind) -> bool {\n         _ => false,\n     }\n }\n+\n+pub struct SyntaxTreeBuilder {\n+    errors: Vec<SyntaxError>,\n+    inner: GreenNodeBuilder<RaTypes>,\n+}\n+\n+impl Default for SyntaxTreeBuilder {\n+    fn default() -> SyntaxTreeBuilder {\n+        SyntaxTreeBuilder { errors: Vec::new(), inner: GreenNodeBuilder::new() }\n+    }\n+}\n+\n+impl SyntaxTreeBuilder {\n+    pub(crate) fn finish_raw(self) -> (GreenNode, Vec<SyntaxError>) {\n+        let green = self.inner.finish();\n+        (green, self.errors)\n+    }\n+\n+    pub fn finish(self) -> TreeArc<SyntaxNode> {\n+        let (green, errors) = self.finish_raw();\n+        let node = SyntaxNode::new(green, errors);\n+        if cfg!(debug_assertions) {\n+            crate::validation::validate_block_structure(&node);\n+        }\n+        node\n+    }\n+\n+    pub fn leaf(&mut self, kind: SyntaxKind, text: SmolStr) {\n+        self.inner.leaf(kind, text)\n+    }\n+\n+    pub fn start_branch(&mut self, kind: SyntaxKind) {\n+        self.inner.start_internal(kind)\n+    }\n+\n+    pub fn finish_branch(&mut self) {\n+        self.inner.finish_internal()\n+    }\n+\n+    pub fn error(&mut self, error: ParseError, text_pos: TextUnit) {\n+        let error = SyntaxError::new(SyntaxErrorKind::ParseError(error), text_pos);\n+        self.errors.push(error)\n+    }\n+}"}]}