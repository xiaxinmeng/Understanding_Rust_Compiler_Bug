{"sha": "afdc38da0a682d06525c888c8198d378d72c4518", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZGMzOGRhMGE2ODJkMDY1MjVjODg4YzgxOThkMzc4ZDcyYzQ1MTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-18T00:37:56Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-23T03:15:32Z"}, "message": "address review comments", "tree": {"sha": "1a792b8ca205921f4b72171ea8b0e3ed103b6fbd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a792b8ca205921f4b72171ea8b0e3ed103b6fbd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afdc38da0a682d06525c888c8198d378d72c4518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afdc38da0a682d06525c888c8198d378d72c4518", "html_url": "https://github.com/rust-lang/rust/commit/afdc38da0a682d06525c888c8198d378d72c4518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afdc38da0a682d06525c888c8198d378d72c4518/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c89872cb7d1d9467158d17b3a7e001efd436e192", "url": "https://api.github.com/repos/rust-lang/rust/commits/c89872cb7d1d9467158d17b3a7e001efd436e192", "html_url": "https://github.com/rust-lang/rust/commit/c89872cb7d1d9467158d17b3a7e001efd436e192"}], "stats": {"total": 37, "additions": 13, "deletions": 24}, "files": [{"sha": "a2d7815920e0b2418d63b3da4965578a9bd62949", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=afdc38da0a682d06525c888c8198d378d72c4518", "patch": "@@ -272,7 +272,7 @@ rustc_query_append! { [define_queries!][ <'tcx>\n \n     TypeChecking {\n         [] fn typeck_item_bodies:\n-                typeck_item_bodies_dep_node(CrateNum) -> Result<(), ErrorReported>,\n+                typeck_item_bodies_dep_node(CrateNum) -> (),\n \n         [] fn typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n     },\n@@ -325,8 +325,7 @@ rustc_query_append! { [define_queries!][ <'tcx>\n     },\n \n     TypeChecking {\n-        [] fn check_match: CheckMatch(DefId)\n-            -> Result<(), ErrorReported>,\n+        [] fn check_match: CheckMatch(DefId) -> (),\n \n         /// Performs part of the privacy check and computes \"access levels\".\n         [] fn privacy_access_levels: PrivacyAccessLevels(CrateNum) -> Lrc<AccessLevels>,"}, {"sha": "2c4fb5e07718c94ac161c162a1b9595d83f4e4c1", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=afdc38da0a682d06525c888c8198d378d72c4518", "patch": "@@ -438,17 +438,18 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // always convert all match-pairs into bindings.\n         self.simplify_candidate(&mut candidate);\n \n-        if !candidate.match_pairs.is_empty() && self.hir.tcx().sess.err_count() == 0 {\n+        if !candidate.match_pairs.is_empty() {\n             // Only abort compilation if no other errors have been emitted. This used to be a hard\n             // error that wouldn't be reached because `hair::pattern::check_match::check_match`\n             // wouldn't have let the compiler continue. In our tests this is only ever hit by\n             // `ui/consts/const-match-check.rs` with `--cfg eval1`, and that file already generates\n             // a different error before hand.\n-            span_bug!(\n+            self.hir.tcx().sess.delay_span_bug(\n                 candidate.match_pairs[0].pattern.span,\n-                \"match pairs {:?} remaining after simplifying \\\n-                 irrefutable pattern\",\n-                candidate.match_pairs\n+                &format!(\n+                    \"match pairs {:?} remaining after simplifying irrefutable pattern\",\n+                    candidate.match_pairs,\n+                ),\n             );\n         }\n "}, {"sha": "c78de80ac835c81f16154c4e0ac2aac1c4aa0905", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=afdc38da0a682d06525c888c8198d378d72c4518", "patch": "@@ -15,7 +15,6 @@ use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc::util::common::ErrorReported;\n \n use syntax::ast::Mutability;\n use syntax::source_map::{Span, DUMMY_SP};\n@@ -619,9 +618,7 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n         let tables = tcx.typeck_tables_of(def_id);\n \n         // Do match-check before building MIR\n-        if let Err(ErrorReported) = tcx.check_match(def_id) {\n-            return Err(ErrorHandled::Reported)\n-        }\n+        tcx.check_match(def_id);\n \n         if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind_by_hir_id(id) {\n             tcx.mir_const_qualif(def_id);"}, {"sha": "50df676aea9fb96502c81eb57e9ea238a60d803e", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=afdc38da0a682d06525c888c8198d378d72c4518", "patch": "@@ -14,7 +14,6 @@ use rustc::ty::{self, Ty, TyCtxt, TyKind};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::lint;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n-use rustc::util::common::ErrorReported;\n \n use rustc::hir::def::*;\n use rustc::hir::def_id::DefId;\n@@ -27,14 +26,11 @@ use std::slice;\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n \n-pub(crate) fn check_match<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_id: DefId,\n-) -> Result<(), ErrorReported> {\n+pub(crate) fn check_match<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n     let body_id = if let Some(id) = tcx.hir().as_local_hir_id(def_id) {\n         tcx.hir().body_owned_by(id)\n     } else {\n-        return Ok(());\n+        return;\n     };\n \n     MatchVisitor {\n@@ -44,7 +40,6 @@ pub(crate) fn check_match<'a, 'tcx>(\n         param_env: tcx.param_env(def_id),\n         identity_substs: InternalSubsts::identity_for_item(tcx, def_id),\n     }.visit_body(tcx.hir().body(body_id));\n-    Ok(())\n }\n \n fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> DiagnosticBuilder<'a> {"}, {"sha": "06ae097d9f08095bbe5e2aab29974e02ae0baf4d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=afdc38da0a682d06525c888c8198d378d72c4518", "patch": "@@ -702,14 +702,11 @@ fn check_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId)\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n-fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n-                                -> Result<(), ErrorReported>\n-{\n+fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) {\n     debug_assert!(crate_num == LOCAL_CRATE);\n     tcx.par_body_owners(|body_owner_def_id| {\n         tcx.ensure().typeck_tables_of(body_owner_def_id);\n     });\n-    Ok(())\n }\n \n fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {"}, {"sha": "b2c2b233c81ab3402d7dfc5e2844198de63668b6", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afdc38da0a682d06525c888c8198d378d72c4518/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=afdc38da0a682d06525c888c8198d378d72c4518", "patch": "@@ -363,7 +363,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n         })\n     })?;\n \n-    time(tcx.sess, \"item-bodies checking\", || tcx.typeck_item_bodies(LOCAL_CRATE))?;\n+    time(tcx.sess, \"item-bodies checking\", || tcx.typeck_item_bodies(LOCAL_CRATE));\n \n     check_unused::check_crate(tcx);\n     check_for_entry_fn(tcx);"}]}