{"sha": "93696f45fffbefa55ff57d91b12fc29c77ee6302", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNjk2ZjQ1ZmZmYmVmYTU1ZmY1N2Q5MWIxMmZjMjljNzdlZTYzMDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-15T10:01:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T10:01:03Z"}, "message": "Rollup merge of #72938 - lzutao:stabilize_option_zip, r=dtolnay\n\nStabilize Option::zip\n\nThis PR stabilizes the following API:\n\n```rust\nimpl<T> Option<T> {\n    pub fn zip<U>(self, other: Option<U>) -> Option<(T, U)>;\n}\n```\n\nThis API has real world usage as seen in <https://grep.app/search?q=-%3E%20Option%3C%5C%28T%2C%5Cs%3FU%5C%29%3E&regexp=true&filter[lang][0]=Rust>.\n\nThe `zip_with` method is left unstably as this API is kinda niche\nand it hasn't received much usage in Rust repositories on GitHub.\n\ncc #70086", "tree": {"sha": "1c17440e494b253fcf562e437c2dd372b8c35a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c17440e494b253fcf562e437c2dd372b8c35a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93696f45fffbefa55ff57d91b12fc29c77ee6302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93696f45fffbefa55ff57d91b12fc29c77ee6302", "html_url": "https://github.com/rust-lang/rust/commit/93696f45fffbefa55ff57d91b12fc29c77ee6302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93696f45fffbefa55ff57d91b12fc29c77ee6302/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9217ef20183851bb6e248e150b0c4f5724f7464f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9217ef20183851bb6e248e150b0c4f5724f7464f", "html_url": "https://github.com/rust-lang/rust/commit/9217ef20183851bb6e248e150b0c4f5724f7464f"}, {"sha": "994a83962237558b67aa0a6d4459a32073c543dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/994a83962237558b67aa0a6d4459a32073c543dd", "html_url": "https://github.com/rust-lang/rust/commit/994a83962237558b67aa0a6d4459a32073c543dd"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "88145015ba8bd529490705891d4fce901e481aaf", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93696f45fffbefa55ff57d91b12fc29c77ee6302/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93696f45fffbefa55ff57d91b12fc29c77ee6302/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=93696f45fffbefa55ff57d91b12fc29c77ee6302", "patch": "@@ -88,7 +88,7 @@ fn double_check<'a>(cx: &LateContext<'_, '_>, left: &'a Expr<'_>, right: &'a Exp\n         let upper = check_upper_bound(l);\n         let lower = check_lower_bound(r);\n \n-        transpose(upper, lower).and_then(|(l, r)| l.combine(r, cx))\n+        upper.zip(lower).and_then(|(l, r)| l.combine(r, cx))\n     };\n \n     upper_lower(left, right).or_else(|| upper_lower(right, left))\n@@ -131,7 +131,10 @@ impl<'a> Conversion<'a> {\n \n     /// Checks if the to-type is the same (if there is a type constraint)\n     fn has_compatible_to_type(&self, other: &Self) -> bool {\n-        transpose(self.to_type.as_ref(), other.to_type.as_ref()).map_or(true, |(l, r)| l == r)\n+        match (self.to_type, other.to_type) {\n+            (Some(l), Some(r)) => l == r,\n+            _ => true,\n+        }\n     }\n \n     /// Try to construct a new conversion if the conversion type is valid\n@@ -322,14 +325,6 @@ fn int_ty_to_sym<'tcx>(path: &QPath<'_>) -> Option<&'tcx str> {\n     }\n }\n \n-/// (Option<T>, Option<U>) -> Option<(T, U)>\n-fn transpose<T, U>(lhs: Option<T>, rhs: Option<U>) -> Option<(T, U)> {\n-    match (lhs, rhs) {\n-        (Some(l), Some(r)) => Some((l, r)),\n-        _ => None,\n-    }\n-}\n-\n /// Will return the expressions as if they were expr1 <= expr2\n fn normalize_le_ge<'a>(op: &BinOp, left: &'a Expr<'a>, right: &'a Expr<'a>) -> Option<(&'a Expr<'a>, &'a Expr<'a>)> {\n     match op.node {"}]}