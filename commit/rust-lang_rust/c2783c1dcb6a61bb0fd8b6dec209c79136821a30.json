{"sha": "c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNzgzYzFkY2I2YTYxYmIwZmQ4YjZkZWMyMDljNzkxMzY4MjFhMzA=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-09-14T16:48:30Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-09-14T16:59:06Z"}, "message": "Downgrade many_single_char_names to pedantic", "tree": {"sha": "ae732efcdeff72e2fd82bd22719604bcb3ab7e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae732efcdeff72e2fd82bd22719604bcb3ab7e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmFA1NoACgkQ+boUO5X/\nbYK7eA//XcBTZ9lGvIGqivo2vBcGnHB3ZhrSndnLsn1nIcAoLo5w+DkoQoZbEHt2\nNRIfign0TV6e90RnrFLm9nUfPxHVNawAK4Se/ndt6+wTP9vp/WLf3PHrA157+qB0\nRdtbcTwbj8ID7goAhOLt/6y2AXM9n2scTe47wAUkQynyQjbrMDwSYS9kTHNcdjTq\nuLxGf6QDMBSiZWq9TefUcGauuZlF2VWciHTobFC7MvbSepT8seZeRxbiN+ve8Jhw\nwczQ8QAXw/XAxaL4/ZCOfluHvK6jsY7c12/hHzpf9A8EFTTSuFDeJMCSCIIVksWr\n3uagrBsoNurGmx4ze0uJCW/MSB1txocPRSVzjcTaVJLzoj/Z+wM389DSef6HBq3w\nN5fxBEBakTMXvcXy0AHKVTdZwJa0QQILZdo7CwCuLIGqhaFJ3YaXtlf2IsM03Xpk\nNoV5jxMBCpxYONpW+5dd0+i0dWFHlWp6/pEbAteDnxTfWRRGjTM4VPepji6QrEN/\nbZucaBVxhv9BRttMBNamFsUEPxpuLiYYNTdYWCO69neFAUlQBL4F5guS/XBhmDCC\ngvH1aMYTwPg2ZFa/v9zJmj8SSNOJzpDYdXgHe8BlJqQFpk85YihsDpTcSy7iTZ35\n21J87VDdRt/MJ6zLNFxFBtXgRrNSDus/dRHIDAHNxACo7vb2XPY=\n=lTx4\n-----END PGP SIGNATURE-----", "payload": "tree ae732efcdeff72e2fd82bd22719604bcb3ab7e89\nparent 746a0051c3d61ef89ed8b8a118509fd407a69344\nauthor David Tolnay <dtolnay@gmail.com> 1631638110 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1631638746 -0700\n\nDowngrade many_single_char_names to pedantic\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "html_url": "https://github.com/rust-lang/rust/commit/c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "746a0051c3d61ef89ed8b8a118509fd407a69344", "url": "https://api.github.com/repos/rust-lang/rust/commits/746a0051c3d61ef89ed8b8a118509fd407a69344", "html_url": "https://github.com/rust-lang/rust/commit/746a0051c3d61ef89ed8b8a118509fd407a69344"}], "stats": {"total": 263, "additions": 124, "deletions": 139}, "files": [{"sha": "86cc76d45f8cd11ad777c3bcb378b8657a85bca2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1137,6 +1137,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(needless_continue::NEEDLESS_CONTINUE),\n         LintId::of(needless_for_each::NEEDLESS_FOR_EACH),\n         LintId::of(needless_pass_by_value::NEEDLESS_PASS_BY_VALUE),\n+        LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n         LintId::of(non_expressive_names::SIMILAR_NAMES),\n         LintId::of(pass_by_ref_or_value::LARGE_TYPES_PASSED_BY_VALUE),\n         LintId::of(pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n@@ -1393,7 +1394,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n         LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-        LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n         LintId::of(non_octal_unix_permissions::NON_OCTAL_UNIX_PERMISSIONS),\n         LintId::of(open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n@@ -1567,7 +1567,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n         LintId::of(non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n-        LintId::of(non_expressive_names::MANY_SINGLE_CHAR_NAMES),\n         LintId::of(ptr::CMP_NULL),\n         LintId::of(ptr::PTR_ARG),\n         LintId::of(ptr_eq::PTR_EQ),"}, {"sha": "5b254bc8133d2fecce4c6227b90d7c91e2206b6c", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// let (a, b, c, d, e, f, g) = (...);\n     /// ```\n     pub MANY_SINGLE_CHAR_NAMES,\n-    style,\n+    pedantic,\n     \"too many single character bindings\"\n }\n "}, {"sha": "7438b6eabf9e61f267670b1c3df24b4018414ebd", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.rules).hash(&mut self.s);\n     }\n \n-    #[allow(clippy::many_single_char_names, clippy::too_many_lines)]\n+    #[allow(clippy::too_many_lines)]\n     pub fn hash_expr(&mut self, e: &Expr<'_>) {\n         let simple_const = self\n             .maybe_typeck_results"}, {"sha": "fb0e226f3aa40b0ed32d63646b4e1b494740ac24", "filename": "tests/ui-toml/toml_trivially_copy/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -2,7 +2,6 @@\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n #![deny(clippy::trivially_copy_pass_by_ref)]\n-#![allow(clippy::many_single_char_names)]\n \n #[derive(Copy, Clone)]\n struct Foo(u8);"}, {"sha": "b3ef5928e8ea22302017c8ea3c2d79e238916570", "filename": "tests/ui-toml/toml_trivially_copy/test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_trivially_copy%2Ftest.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,5 +1,5 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:15:11\n+  --> $DIR/test.rs:14:11\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |           ^^^^ help: consider passing by value instead: `u16`\n@@ -11,7 +11,7 @@ LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/test.rs:15:20\n+  --> $DIR/test.rs:14:20\n    |\n LL | fn bad(x: &u16, y: &Foo) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`"}, {"sha": "d4832daa6895970746de537909bb6339af07331e", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -9,7 +9,7 @@ fn get_reference(n: &usize) -> &usize {\n     n\n }\n \n-#[allow(clippy::many_single_char_names, clippy::double_parens)]\n+#[allow(clippy::double_parens)]\n #[allow(unused_variables, unused_parens)]\n fn main() {\n     let a = 10;"}, {"sha": "be7cc669b5b6daf3c0cb855d6fe861e7920e943e", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -9,7 +9,7 @@ fn get_reference(n: &usize) -> &usize {\n     n\n }\n \n-#[allow(clippy::many_single_char_names, clippy::double_parens)]\n+#[allow(clippy::double_parens)]\n #[allow(unused_variables, unused_parens)]\n fn main() {\n     let a = 10;"}, {"sha": "707b449f82e4f04ea4e85b4efeb76b17820aaa33", "filename": "tests/ui/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -2,7 +2,7 @@\n \n #[rustfmt::skip]\n #[warn(clippy::eq_op)]\n-#[allow(clippy::identity_op, clippy::double_parens, clippy::many_single_char_names)]\n+#[allow(clippy::identity_op, clippy::double_parens)]\n #[allow(clippy::no_effect, unused_variables, clippy::unnecessary_operation, clippy::short_circuit_statement)]\n #[allow(clippy::nonminimal_bool)]\n #[allow(unused)]"}, {"sha": "1de79667f55fb51132117565b5197338612f4b73", "filename": "tests/ui/eta.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feta.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feta.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.fixed?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -4,7 +4,6 @@\n     unused,\n     clippy::no_effect,\n     clippy::redundant_closure_call,\n-    clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n     clippy::option_map_unit_fn\n )]"}, {"sha": "86abd347baa7885645fed4ebefe3f7d2d985d1ce", "filename": "tests/ui/eta.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -4,7 +4,6 @@\n     unused,\n     clippy::no_effect,\n     clippy::redundant_closure_call,\n-    clippy::many_single_char_names,\n     clippy::needless_pass_by_value,\n     clippy::option_map_unit_fn\n )]"}, {"sha": "8092f04c3fc3d28215844fdb850e19196da77bd3", "filename": "tests/ui/eta.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,131 +1,131 @@\n error: redundant closure\n-  --> $DIR/eta.rs:32:27\n+  --> $DIR/eta.rs:31:27\n    |\n LL |     let a = Some(1u8).map(|a| foo(a));\n    |                           ^^^^^^^^^^ help: replace the closure with the function itself: `foo`\n    |\n    = note: `-D clippy::redundant-closure` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:36:40\n+  --> $DIR/eta.rs:35:40\n    |\n LL |     let _: Option<Vec<u8>> = true.then(|| vec![]); // special case vec!\n    |                                        ^^^^^^^^^ help: replace the closure with `Vec::new`: `std::vec::Vec::new`\n \n error: redundant closure\n-  --> $DIR/eta.rs:37:35\n+  --> $DIR/eta.rs:36:35\n    |\n LL |     let d = Some(1u8).map(|a| foo((|b| foo2(b))(a))); //is adjusted?\n    |                                   ^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo2`\n \n error: this expression borrows a reference (`&u8`) that is immediately dereferenced by the compiler\n-  --> $DIR/eta.rs:38:21\n+  --> $DIR/eta.rs:37:21\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                     ^^^ help: change this to: `&2`\n    |\n    = note: `-D clippy::needless-borrow` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:38:26\n+  --> $DIR/eta.rs:37:26\n    |\n LL |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n    |                          ^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `below`\n \n error: redundant closure\n-  --> $DIR/eta.rs:44:27\n+  --> $DIR/eta.rs:43:27\n    |\n LL |     let e = Some(1u8).map(|a| divergent(a));\n    |                           ^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `divergent`\n \n error: redundant closure\n-  --> $DIR/eta.rs:45:27\n+  --> $DIR/eta.rs:44:27\n    |\n LL |     let e = Some(1u8).map(|a| generic(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `generic`\n \n error: redundant closure\n-  --> $DIR/eta.rs:91:51\n+  --> $DIR/eta.rs:90:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.foo());\n    |                                                   ^^^^^^^^^^^ help: replace the closure with the method itself: `TestStruct::foo`\n    |\n    = note: `-D clippy::redundant-closure-for-method-calls` implied by `-D warnings`\n \n error: redundant closure\n-  --> $DIR/eta.rs:92:51\n+  --> $DIR/eta.rs:91:51\n    |\n LL |     let e = Some(TestStruct { some_ref: &i }).map(|a| a.trait_foo());\n    |                                                   ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `TestTrait::trait_foo`\n \n error: redundant closure\n-  --> $DIR/eta.rs:94:42\n+  --> $DIR/eta.rs:93:42\n    |\n LL |     let e = Some(&mut vec![1, 2, 3]).map(|v| v.clear());\n    |                                          ^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::vec::Vec::clear`\n \n error: redundant closure\n-  --> $DIR/eta.rs:98:29\n+  --> $DIR/eta.rs:97:29\n    |\n LL |     let e = Some(\"str\").map(|s| s.to_string());\n    |                             ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`\n \n error: redundant closure\n-  --> $DIR/eta.rs:99:27\n+  --> $DIR/eta.rs:98:27\n    |\n LL |     let e = Some('a').map(|s| s.to_uppercase());\n    |                           ^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:101:65\n+  --> $DIR/eta.rs:100:65\n    |\n LL |     let e: std::vec::Vec<char> = vec!['a', 'b', 'c'].iter().map(|c| c.to_ascii_uppercase()).collect();\n    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::to_ascii_uppercase`\n \n error: redundant closure\n-  --> $DIR/eta.rs:164:22\n+  --> $DIR/eta.rs:163:22\n    |\n LL |     requires_fn_once(|| x());\n    |                      ^^^^^^ help: replace the closure with the function itself: `x`\n \n error: redundant closure\n-  --> $DIR/eta.rs:171:27\n+  --> $DIR/eta.rs:170:27\n    |\n LL |     let a = Some(1u8).map(|a| foo_ptr(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `foo_ptr`\n \n error: redundant closure\n-  --> $DIR/eta.rs:176:27\n+  --> $DIR/eta.rs:175:27\n    |\n LL |     let a = Some(1u8).map(|a| closure(a));\n    |                           ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `closure`\n \n error: redundant closure\n-  --> $DIR/eta.rs:208:28\n+  --> $DIR/eta.rs:207:28\n    |\n LL |     x.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:209:28\n+  --> $DIR/eta.rs:208:28\n    |\n LL |     y.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:210:28\n+  --> $DIR/eta.rs:209:28\n    |\n LL |     z.into_iter().for_each(|x| add_to_res(x));\n    |                            ^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `add_to_res`\n \n error: redundant closure\n-  --> $DIR/eta.rs:217:21\n+  --> $DIR/eta.rs:216:21\n    |\n LL |         Some(1).map(|n| closure(n));\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the function itself: `&mut closure`\n \n error: redundant closure\n-  --> $DIR/eta.rs:236:21\n+  --> $DIR/eta.rs:235:21\n    |\n LL |     map_str_to_path(|s| s.as_ref());\n    |                     ^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::convert::AsRef::as_ref`"}, {"sha": "8e6a32b7be33d2eccde04199653c2d467942f3c0", "filename": "tests/ui/eval_order_dependence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -4,7 +4,6 @@\n #[allow(\n     unused_assignments,\n     unused_variables,\n-    clippy::many_single_char_names,\n     clippy::no_effect,\n     dead_code,\n     clippy::blacklisted_name"}, {"sha": "4f611e308e18619e50f0b408ed7c07f60c28b47d", "filename": "tests/ui/eval_order_dependence.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,48 +1,48 @@\n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:17:9\n+  --> $DIR/eval_order_dependence.rs:16:9\n    |\n LL |     } + x;\n    |         ^\n    |\n    = note: `-D clippy::eval-order-dependence` implied by `-D warnings`\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:15:9\n+  --> $DIR/eval_order_dependence.rs:14:9\n    |\n LL |         x = 1;\n    |         ^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:20:5\n+  --> $DIR/eval_order_dependence.rs:19:5\n    |\n LL |     x += {\n    |     ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:21:9\n+  --> $DIR/eval_order_dependence.rs:20:9\n    |\n LL |         x = 20;\n    |         ^^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:33:12\n+  --> $DIR/eval_order_dependence.rs:32:12\n    |\n LL |         a: x,\n    |            ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:35:13\n+  --> $DIR/eval_order_dependence.rs:34:13\n    |\n LL |             x = 6;\n    |             ^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:42:9\n+  --> $DIR/eval_order_dependence.rs:41:9\n    |\n LL |         x += {\n    |         ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:43:13\n+  --> $DIR/eval_order_dependence.rs:42:13\n    |\n LL |             x = 20;\n    |             ^^^^^^"}, {"sha": "48e2aae75d0bf62893c56b4a375d7f9054e5f6c9", "filename": "tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.fixed?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![allow(unused_variables, clippy::clone_double_ref)]\n #![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};"}, {"sha": "d8c8c0c5ca329c52d703180117d472391d1888b0", "filename": "tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexplicit_deref_methods.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![allow(unused_variables, clippy::clone_double_ref)]\n #![warn(clippy::explicit_deref_methods)]\n \n use std::ops::{Deref, DerefMut};"}, {"sha": "a34458b9419516964d651f7fb281bec654d01604", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -4,8 +4,7 @@\n     clippy::no_effect,\n     clippy::op_ref,\n     clippy::unnecessary_operation,\n-    clippy::cast_lossless,\n-    clippy::many_single_char_names\n+    clippy::cast_lossless\n )]\n \n use std::ops::Add;"}, {"sha": "9cc1f1b75ed4492d679c55b200117670e7a61f9d", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,5 +1,5 @@\n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:58:5\n+  --> $DIR/float_cmp.rs:57:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(ONE as f64 - 2.0).abs() > error_margin`\n@@ -8,39 +8,39 @@ LL |     ONE as f64 != 2.0;\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:63:5\n+  --> $DIR/float_cmp.rs:62:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some margin of error: `(x - 1.0).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:66:5\n+  --> $DIR/float_cmp.rs:65:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(twice(x) - twice(ONE as f64)).abs() > error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:86:5\n+  --> $DIR/float_cmp.rs:85:5\n    |\n LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error_margin`\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64` arrays\n-  --> $DIR/float_cmp.rs:91:5\n+  --> $DIR/float_cmp.rs:90:5\n    |\n LL |     a1 == a2;\n    |     ^^^^^^^^\n    |\n    = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:92:5\n+  --> $DIR/float_cmp.rs:91:5\n    |\n LL |     a1[0] == a2[0];\n    |     ^^^^^^^^^^^^^^ help: consider comparing them within some margin of error: `(a1[0] - a2[0]).abs() < error_margin`"}, {"sha": "f0e4835415f306411b1a6d97049e9abc361194af", "filename": "tests/ui/for_loop_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffor_loop_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffor_loop_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.fixed?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -29,7 +29,7 @@ impl Unrelated {\n     clippy::unnecessary_mut_passed,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables)]\n+#[allow(unused_variables)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n "}, {"sha": "1edef175fb9833e297a91c5c7d550e2884e57e49", "filename": "tests/ui/for_loop_fixable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffor_loop_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ffor_loop_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop_fixable.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -29,7 +29,7 @@ impl Unrelated {\n     clippy::unnecessary_mut_passed,\n     clippy::similar_names\n )]\n-#[allow(clippy::many_single_char_names, unused_variables)]\n+#[allow(unused_variables)]\n fn main() {\n     let mut vec = vec![1, 2, 3, 4];\n "}, {"sha": "e86bd7bcf4faf0e5ed40c749fd0383b60fba22bc", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -16,7 +16,6 @@ fn foob() -> bool {\n     unimplemented!()\n }\n \n-#[allow(clippy::many_single_char_names)]\n fn immutable_condition() {\n     // Should warn when all vars mentioned are immutable\n     let y = 0;"}, {"sha": "69309b0da877cdbbd6c6ae2cf85749f56e2fdfb0", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,5 +1,5 @@\n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:23:11\n+  --> $DIR/infinite_loop.rs:22:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -8,71 +8,71 @@ LL |     while y < 10 {\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:28:11\n+  --> $DIR/infinite_loop.rs:27:11\n    |\n LL |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:35:11\n+  --> $DIR/infinite_loop.rs:34:11\n    |\n LL |     while !cond {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:79:11\n+  --> $DIR/infinite_loop.rs:78:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:84:11\n+  --> $DIR/infinite_loop.rs:83:11\n    |\n LL |     while i < 3 && j > 0 {\n    |           ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:88:11\n+  --> $DIR/infinite_loop.rs:87:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:103:11\n+  --> $DIR/infinite_loop.rs:102:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:108:11\n+  --> $DIR/infinite_loop.rs:107:11\n    |\n LL |     while i < 3 {\n    |           ^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:174:15\n+  --> $DIR/infinite_loop.rs:173:15\n    |\n LL |         while self.count < n {\n    |               ^^^^^^^^^^^^^^\n    |\n    = note: this may lead to an infinite or to a never running loop\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:182:11\n+  --> $DIR/infinite_loop.rs:181:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^\n@@ -82,7 +82,7 @@ LL |     while y < 10 {\n    = help: rewrite it as `if cond { loop { } }`\n \n error: variables in the condition are not mutated in the loop body\n-  --> $DIR/infinite_loop.rs:189:11\n+  --> $DIR/infinite_loop.rs:188:11\n    |\n LL |     while y < 10 {\n    |           ^^^^^^"}, {"sha": "aeb0a0c1e2e841814d5168ee241db632caae43ef", "filename": "tests/ui/inherent_to_string.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::inherent_to_string)]\n #![deny(clippy::inherent_to_string_shadow_display)]\n-#![allow(clippy::many_single_char_names)]\n \n use std::fmt;\n "}, {"sha": "4f331f5bec9e6fe87073d1cdb63991862db4bf28", "filename": "tests/ui/inherent_to_string.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finherent_to_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Finherent_to_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finherent_to_string.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,5 +1,5 @@\n error: implementation of inherent method `to_string(&self) -> String` for type `A`\n-  --> $DIR/inherent_to_string.rs:21:5\n+  --> $DIR/inherent_to_string.rs:20:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"A.to_string()\".to_string()\n@@ -10,7 +10,7 @@ LL | |     }\n    = help: implement trait `Display` for type `A` instead\n \n error: type `C` implements inherent method `to_string(&self) -> String` which shadows the implementation of `Display`\n-  --> $DIR/inherent_to_string.rs:45:5\n+  --> $DIR/inherent_to_string.rs:44:5\n    |\n LL | /     fn to_string(&self) -> String {\n LL | |         \"C.to_string()\".to_string()"}, {"sha": "4eaa2dd98eb2e386ae21e4bed3695a74a63b8896", "filename": "tests/ui/logic_bug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Flogic_bug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Flogic_bug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flogic_bug.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::many_single_char_names, clippy::diverging_sub_expression)]\n+#![allow(unused, clippy::diverging_sub_expression)]\n #![warn(clippy::logic_bug)]\n \n fn main() {"}, {"sha": "65769819110eb6f00b05332c7ae0b54c6ba8fa2b", "filename": "tests/ui/many_single_char_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fmany_single_char_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fmany_single_char_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmany_single_char_names.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,4 +1,4 @@\n-#[warn(clippy::many_single_char_names)]\n+#![warn(clippy::many_single_char_names)]\n \n fn bla() {\n     let a: i32;"}, {"sha": "b4ec525ada09a763059d8837fc06d572051f1a4b", "filename": "tests/ui/match_single_binding.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.fixed?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::match_single_binding)]\n-#![allow(unused_variables, clippy::many_single_char_names, clippy::toplevel_ref_arg)]\n+#![allow(unused_variables, clippy::toplevel_ref_arg)]\n \n struct Point {\n     x: i32,"}, {"sha": "e04c4018b98ddbb52e282768d113bb7e25ab4f63", "filename": "tests/ui/match_single_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_single_binding.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n \n #![warn(clippy::match_single_binding)]\n-#![allow(unused_variables, clippy::many_single_char_names, clippy::toplevel_ref_arg)]\n+#![allow(unused_variables, clippy::toplevel_ref_arg)]\n \n struct Point {\n     x: i32,"}, {"sha": "5a35b100afe07620e234479856f2ccae4500cf1e", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -3,7 +3,6 @@\n     dead_code,\n     clippy::single_match,\n     clippy::redundant_pattern_matching,\n-    clippy::many_single_char_names,\n     clippy::option_option,\n     clippy::redundant_clone\n )]"}, {"sha": "d960c86a9f0ef257e1bc27ca0ae63d9335d14c5f", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,61 +1,61 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:18:23\n+  --> $DIR/needless_pass_by_value.rs:17:23\n    |\n LL | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n    |                       ^^^^^^ help: consider changing the type to: `&[T]`\n    |\n    = note: `-D clippy::needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:32:11\n+  --> $DIR/needless_pass_by_value.rs:31:11\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:32:22\n+  --> $DIR/needless_pass_by_value.rs:31:22\n    |\n LL | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:38:71\n+  --> $DIR/needless_pass_by_value.rs:37:71\n    |\n LL | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:50:18\n+  --> $DIR/needless_pass_by_value.rs:49:18\n    |\n LL | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&Option<Option<String>>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:63:24\n+  --> $DIR/needless_pass_by_value.rs:62:24\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:63:36\n+  --> $DIR/needless_pass_by_value.rs:62:36\n    |\n LL | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:79:49\n+  --> $DIR/needless_pass_by_value.rs:78:49\n    |\n LL | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:81:18\n+  --> $DIR/needless_pass_by_value.rs:80:18\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:81:29\n+  --> $DIR/needless_pass_by_value.rs:80:29\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n@@ -70,13 +70,13 @@ LL |     let _ = t.to_string();\n    |             ~~~~~~~~~~~~~\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:81:40\n+  --> $DIR/needless_pass_by_value.rs:80:40\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:81:53\n+  --> $DIR/needless_pass_by_value.rs:80:53\n    |\n LL | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n@@ -91,85 +91,85 @@ LL |     let _ = v.to_owned();\n    |             ~~~~~~~~~~~~\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:94:12\n+  --> $DIR/needless_pass_by_value.rs:93:12\n    |\n LL |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:95:12\n+  --> $DIR/needless_pass_by_value.rs:94:12\n    |\n LL |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:104:23\n+  --> $DIR/needless_pass_by_value.rs:103:23\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                       ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:104:30\n+  --> $DIR/needless_pass_by_value.rs:103:30\n    |\n LL |     fn baz(&self, _u: U, _s: Self) {}\n    |                              ^^^^ help: consider taking a reference instead: `&Self`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:126:24\n+  --> $DIR/needless_pass_by_value.rs:125:24\n    |\n LL | fn bar_copy(x: u32, y: CopyWrapper) {\n    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as `Copy`\n-  --> $DIR/needless_pass_by_value.rs:124:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:132:29\n+  --> $DIR/needless_pass_by_value.rs:131:29\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as `Copy`\n-  --> $DIR/needless_pass_by_value.rs:124:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:132:45\n+  --> $DIR/needless_pass_by_value.rs:131:45\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as `Copy`\n-  --> $DIR/needless_pass_by_value.rs:124:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:132:61\n+  --> $DIR/needless_pass_by_value.rs:131:61\n    |\n LL | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n    |                                                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n    |\n help: consider marking this type as `Copy`\n-  --> $DIR/needless_pass_by_value.rs:124:1\n+  --> $DIR/needless_pass_by_value.rs:123:1\n    |\n LL | struct CopyWrapper(u32);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:144:40\n+  --> $DIR/needless_pass_by_value.rs:143:40\n    |\n LL | fn some_fun<'b, S: Bar<'b, ()>>(_item: S) {}\n    |                                        ^ help: consider taking a reference instead: `&S`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:149:20\n+  --> $DIR/needless_pass_by_value.rs:148:20\n    |\n LL | fn more_fun(_item: impl Club<'static, i32>) {}\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ help: consider taking a reference instead: `&impl Club<'static, i32>`"}, {"sha": "fa5743c11557722fecbf1216143d3b8e58b9dd20", "filename": "tests/ui/nonminimal_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fnonminimal_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fnonminimal_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::many_single_char_names, clippy::diverging_sub_expression)]\n+#![allow(unused, clippy::diverging_sub_expression)]\n #![warn(clippy::nonminimal_bool)]\n \n fn main() {"}, {"sha": "d0a289b7ea43e1f88ec324c33cdbd9f11c61a406", "filename": "tests/ui/nonminimal_bool_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fnonminimal_bool_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fnonminimal_bool_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnonminimal_bool_methods.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::many_single_char_names, clippy::diverging_sub_expression)]\n+#![allow(unused, clippy::diverging_sub_expression)]\n #![warn(clippy::nonminimal_bool)]\n \n fn methods_with_negation() {"}, {"sha": "ab9c4d34c88f6200faf8db7ed94946b7d9b724f0", "filename": "tests/ui/op_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,6 +1,5 @@\n #![allow(unused_variables, clippy::blacklisted_name)]\n #![warn(clippy::op_ref)]\n-#![allow(clippy::many_single_char_names)]\n use std::collections::HashSet;\n use std::ops::BitAnd;\n "}, {"sha": "992417084bda29499222b3036bcb8a8ca86dd029", "filename": "tests/ui/op_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fop_ref.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,5 +1,5 @@\n error: needlessly taken reference of both operands\n-  --> $DIR/op_ref.rs:12:15\n+  --> $DIR/op_ref.rs:11:15\n    |\n LL |     let foo = &5 - &6;\n    |               ^^^^^^^\n@@ -11,7 +11,7 @@ LL |     let foo = 5 - 6;\n    |               ~   ~\n \n error: taken reference of right operand\n-  --> $DIR/op_ref.rs:57:13\n+  --> $DIR/op_ref.rs:56:13\n    |\n LL |     let z = x & &y;\n    |             ^^^^--"}, {"sha": "5db75f5291becdaa4d517874db275aa5d6cb4973", "filename": "tests/ui/overflow_check_conditional.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,4 +1,3 @@\n-#![allow(clippy::many_single_char_names)]\n #![warn(clippy::overflow_check_conditional)]\n \n fn main() {"}, {"sha": "1b8b146b60ae72558f14c5a2cb34d0272ad39276", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,49 +1,49 @@\n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:8:8\n+  --> $DIR/overflow_check_conditional.rs:7:8\n    |\n LL |     if a + b < a {}\n    |        ^^^^^^^^^\n    |\n    = note: `-D clippy::overflow-check-conditional` implied by `-D warnings`\n \n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:9:8\n+  --> $DIR/overflow_check_conditional.rs:8:8\n    |\n LL |     if a > a + b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:10:8\n+  --> $DIR/overflow_check_conditional.rs:9:8\n    |\n LL |     if a + b < b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C overflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:11:8\n+  --> $DIR/overflow_check_conditional.rs:10:8\n    |\n LL |     if b > a + b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:12:8\n+  --> $DIR/overflow_check_conditional.rs:11:8\n    |\n LL |     if a - b > b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:13:8\n+  --> $DIR/overflow_check_conditional.rs:12:8\n    |\n LL |     if b < a - b {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:14:8\n+  --> $DIR/overflow_check_conditional.rs:13:8\n    |\n LL |     if a - b > a {}\n    |        ^^^^^^^^^\n \n error: you are trying to use classic C underflow conditions that will fail in Rust\n-  --> $DIR/overflow_check_conditional.rs:15:8\n+  --> $DIR/overflow_check_conditional.rs:14:8\n    |\n LL |     if a < a - b {}\n    |        ^^^^^^^^^"}, {"sha": "8656c17f29aaa8416b4fe7c8cf828ac31616fce1", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,4 +1,4 @@\n-#![allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n+#![allow(unused, clippy::redundant_clone)]\n #![warn(clippy::ptr_arg)]\n \n use std::borrow::Cow;"}, {"sha": "dc197e50300d8b11939db42d3ee7738bdb9fa9f7", "filename": "tests/ui/repeat_once.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Frepeat_once.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Frepeat_once.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat_once.fixed?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::repeat_once)]\n-#[allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n+#[allow(unused, clippy::redundant_clone)]\n fn main() {\n     const N: usize = 1;\n     let s = \"str\";"}, {"sha": "0ec5127117c6efab7484649994c9775cb68105e6", "filename": "tests/ui/repeat_once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat_once.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n #![warn(clippy::repeat_once)]\n-#[allow(unused, clippy::many_single_char_names, clippy::redundant_clone)]\n+#[allow(unused, clippy::redundant_clone)]\n fn main() {\n     const N: usize = 1;\n     let s = \"str\";"}, {"sha": "ea3dce17081b1a5cee5b00cbe39de303ec03ed7b", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -2,11 +2,7 @@\n // normalize-stderr-test \"\\(limit: \\d+ byte\\)\" -> \"(limit: N byte)\"\n \n #![deny(clippy::trivially_copy_pass_by_ref)]\n-#![allow(\n-    clippy::many_single_char_names,\n-    clippy::blacklisted_name,\n-    clippy::redundant_field_names\n-)]\n+#![allow(clippy::blacklisted_name, clippy::redundant_field_names)]\n \n #[derive(Copy, Clone)]\n struct Foo(u32);"}, {"sha": "a88d35f3ea5a96f643e4031b3a66563ef49cb1d2", "filename": "tests/ui/trivially_copy_pass_by_ref.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2783c1dcb6a61bb0fd8b6dec209c79136821a30/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.stderr?ref=c2783c1dcb6a61bb0fd8b6dec209c79136821a30", "patch": "@@ -1,5 +1,5 @@\n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:51:11\n+  --> $DIR/trivially_copy_pass_by_ref.rs:47:11\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |           ^^^^ help: consider passing by value instead: `u32`\n@@ -11,97 +11,97 @@ LL | #![deny(clippy::trivially_copy_pass_by_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:51:20\n+  --> $DIR/trivially_copy_pass_by_ref.rs:47:20\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                    ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:51:29\n+  --> $DIR/trivially_copy_pass_by_ref.rs:47:29\n    |\n LL | fn bad(x: &u32, y: &Foo, z: &Baz) {}\n    |                             ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:12\n+  --> $DIR/trivially_copy_pass_by_ref.rs:54:12\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |            ^^^^^ help: consider passing by value instead: `self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:22\n+  --> $DIR/trivially_copy_pass_by_ref.rs:54:22\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                      ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:31\n+  --> $DIR/trivially_copy_pass_by_ref.rs:54:31\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                               ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:58:40\n+  --> $DIR/trivially_copy_pass_by_ref.rs:54:40\n    |\n LL |     fn bad(&self, x: &u32, y: &Foo, z: &Baz) {}\n    |                                        ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:60:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:56:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:60:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:56:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:60:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:56:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:62:35\n+  --> $DIR/trivially_copy_pass_by_ref.rs:58:35\n    |\n LL |     fn bad_issue7518(self, other: &Self) {}\n    |                                   ^^^^^ help: consider passing by value instead: `Self`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:74:16\n+  --> $DIR/trivially_copy_pass_by_ref.rs:70:16\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                ^^^^ help: consider passing by value instead: `u32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:74:25\n+  --> $DIR/trivially_copy_pass_by_ref.rs:70:25\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                         ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:74:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:70:34\n    |\n LL |     fn bad2(x: &u32, y: &Foo, z: &Baz) {}\n    |                                  ^^^^ help: consider passing by value instead: `Baz`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:78:34\n+  --> $DIR/trivially_copy_pass_by_ref.rs:74:34\n    |\n LL |     fn trait_method(&self, _foo: &Foo);\n    |                                  ^^^^ help: consider passing by value instead: `Foo`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:110:21\n+  --> $DIR/trivially_copy_pass_by_ref.rs:106:21\n    |\n LL |     fn foo_never(x: &i32) {\n    |                     ^^^^ help: consider passing by value instead: `i32`\n \n error: this argument (N byte) is passed by reference, but would be more efficient if passed by value (limit: N byte)\n-  --> $DIR/trivially_copy_pass_by_ref.rs:115:15\n+  --> $DIR/trivially_copy_pass_by_ref.rs:111:15\n    |\n LL |     fn foo(x: &i32) {\n    |               ^^^^ help: consider passing by value instead: `i32`"}]}