{"sha": "ab1ae48cce6c200cb02f74a3ecb5efa846694927", "node_id": "C_kwDOAAsO6NoAKGFiMWFlNDhjY2U2YzIwMGNiMDJmNzRhM2VjYjVlZmE4NDY2OTQ5Mjc", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-05-02T01:41:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-02T01:41:58Z"}, "message": "Rollup merge of #96568 - EliasHolzmann:fmt_doc_fixes, r=joshtriplett\n\nstd::fmt: Various fixes and improvements to documentation\n\nThis PR contains the following changes:\n\n- **Added argument index comments to examples for specifying precision**\n\n  The examples for specifying the precision have comments explaining which\n  argument the specifier is referring to. However, for implicit positional\n  arguments, the examples simply refer to \"next arg\". To simplify following the\n  comments, \"next arg\" was supplemented with the actual resulting argument index.\n\n- **Fixed documentation for specifying precision via `.*`**\n\n  The documentation stated that in case of the syntax `{<arg>:<spec>.*}`, \"the\n  `<arg>` part refers to the value to print, and the precision must come in the\n  input preceding `<arg>`\". This is not correct: the <arg> part does indeed refer\n  to the value to print, but the precision does not come in the input preciding\n  arg, but in the next implicit input (as if specified with {}).\n\n  Fixes #96413.\n\n- **Fix the grammar documentation**\n\n  According to the grammar documented, the format specifier `{: }` should not be\n  legal because of the whitespace it contains. However, in reality, this is\n  perfectly fine because the actual implementation allows spaces before the\n  closing brace. Fixes #71088.\n\n  Also, the exact meaning of most of the terminal symbols was not specified, for\n  example the meaning of `identifier`.\n\n- **Removed reference to Formatter::buf and other private fields**\n\n  Formatter::buf is not a public field and therefore isn't very helpful in user-\n  facing documentation. Also, the other public fields of Formatter were removed\n  during stabilization of std::fmt (4af3494bb0) and can only be accessed via\n  getters.\n\n- **Improved list of formatting macros**\n\n  Two improvements:\n  1. write! can not only receive a `io::Write`, but also a `fmt::Write` as first argument.\n  2. The description texts now contain links to the actual macros for easier\n     navigation.", "tree": {"sha": "ea6627d6435dfc13929865652dad34ac196b343e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea6627d6435dfc13929865652dad34ac196b343e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab1ae48cce6c200cb02f74a3ecb5efa846694927", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJibzbmCRBK7hj4Ov3rIwAAvJ0IAKwgj5ogNK53zzz0bJEeCihg\nqMYdVFNLwNpJ0YEJOyqiheiQD82XiZdUC/M1XYJ0sHR0IwYyOsoqFF8XJiwtXN3V\nFKTozvMcKd/qmoHtZF1hAUtqocQ5Jad8HH5xZ0efpzazVu5F4VnpEZq1mhqewl6g\nEra/bYJ9Hddm9cuhrXccONDtvv2ggP4u/h7rhwSwoYDewuV9fOK4aONyll4Ko7cQ\ncNeBw4/RtCW2qoCOgwKHBxjyUqDhOFCVHRuqQOnAXYbeA4QaBbyN6jim5hMC7oXl\nruBkbHzwigZDGVQ4oOC6wqyVn4NS0sJW5slBAA/02FTzSDGKwX4sTQzrRA5oDyg=\n=B+nq\n-----END PGP SIGNATURE-----\n", "payload": "tree ea6627d6435dfc13929865652dad34ac196b343e\nparent f58135449e4bca069d27c98ede871e7a8c0f6a19\nparent f3b86c37ebdddbc7555ba560b6c4b4f4d44f991d\nauthor Yuki Okushi <jtitor@2k36.org> 1651455718 +0900\ncommitter GitHub <noreply@github.com> 1651455718 +0900\n\nRollup merge of #96568 - EliasHolzmann:fmt_doc_fixes, r=joshtriplett\n\nstd::fmt: Various fixes and improvements to documentation\n\nThis PR contains the following changes:\n\n- **Added argument index comments to examples for specifying precision**\n\n  The examples for specifying the precision have comments explaining which\n  argument the specifier is referring to. However, for implicit positional\n  arguments, the examples simply refer to \"next arg\". To simplify following the\n  comments, \"next arg\" was supplemented with the actual resulting argument index.\n\n- **Fixed documentation for specifying precision via `.*`**\n\n  The documentation stated that in case of the syntax `{<arg>:<spec>.*}`, \"the\n  `<arg>` part refers to the value to print, and the precision must come in the\n  input preceding `<arg>`\". This is not correct: the <arg> part does indeed refer\n  to the value to print, but the precision does not come in the input preciding\n  arg, but in the next implicit input (as if specified with {}).\n\n  Fixes #96413.\n\n- **Fix the grammar documentation**\n\n  According to the grammar documented, the format specifier `{: }` should not be\n  legal because of the whitespace it contains. However, in reality, this is\n  perfectly fine because the actual implementation allows spaces before the\n  closing brace. Fixes #71088.\n\n  Also, the exact meaning of most of the terminal symbols was not specified, for\n  example the meaning of `identifier`.\n\n- **Removed reference to Formatter::buf and other private fields**\n\n  Formatter::buf is not a public field and therefore isn't very helpful in user-\n  facing documentation. Also, the other public fields of Formatter were removed\n  during stabilization of std::fmt (4af3494bb0) and can only be accessed via\n  getters.\n\n- **Improved list of formatting macros**\n\n  Two improvements:\n  1. write! can not only receive a `io::Write`, but also a `fmt::Write` as first argument.\n  2. The description texts now contain links to the actual macros for easier\n     navigation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1ae48cce6c200cb02f74a3ecb5efa846694927", "html_url": "https://github.com/rust-lang/rust/commit/ab1ae48cce6c200cb02f74a3ecb5efa846694927", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab1ae48cce6c200cb02f74a3ecb5efa846694927/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f58135449e4bca069d27c98ede871e7a8c0f6a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/f58135449e4bca069d27c98ede871e7a8c0f6a19", "html_url": "https://github.com/rust-lang/rust/commit/f58135449e4bca069d27c98ede871e7a8c0f6a19"}, {"sha": "f3b86c37ebdddbc7555ba560b6c4b4f4d44f991d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b86c37ebdddbc7555ba560b6c4b4f4d44f991d", "html_url": "https://github.com/rust-lang/rust/commit/f3b86c37ebdddbc7555ba560b6c4b4f4d44f991d"}], "stats": {"total": 49, "additions": 31, "deletions": 18}, "files": [{"sha": "73b75ea4d83d5baff277aa164d5b8e2096d1d96a", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ab1ae48cce6c200cb02f74a3ecb5efa846694927/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1ae48cce6c200cb02f74a3ecb5efa846694927/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=ab1ae48cce6c200cb02f74a3ecb5efa846694927", "patch": "@@ -221,10 +221,12 @@\n //!\n //! 3. An asterisk `.*`:\n //!\n-//!    `.*` means that this `{...}` is associated with *two* format inputs rather than one: the\n-//!    first input holds the `usize` precision, and the second holds the value to print. Note that\n-//!    in this case, if one uses the format string `{<arg>:<spec>.*}`, then the `<arg>` part refers\n-//!    to the *value* to print, and the `precision` must come in the input preceding `<arg>`.\n+//!    `.*` means that this `{...}` is associated with *two* format inputs rather than one:\n+//!    - If a format string in the fashion of `{:<spec>.*}` is used, then the first input holds\n+//!      the `usize` precision, and the second holds the value to print.\n+//!    - If a format string in the fashion of `{<arg>:<spec>.*}` is used, then the `<arg>` part\n+//!      refers to the value to print, and the `precision` is taken like it was specified with an\n+//!      omitted positional parameter (`{}` instead of `{<arg>:}`).\n //!\n //! For example, the following calls all print the same thing `Hello x is 0.01000`:\n //!\n@@ -238,15 +240,19 @@\n //! // Hello {arg 0 (\"x\")} is {arg 2 (0.01) with precision specified in arg 1 (5)}\n //! println!(\"Hello {0} is {2:.1$}\", \"x\", 5, 0.01);\n //!\n-//! // Hello {next arg (\"x\")} is {second of next two args (0.01) with precision\n-//! //                          specified in first of next two args (5)}\n+//! // Hello {next arg -> arg 0 (\"x\")} is {second of next two args -> arg 2 (0.01) with precision\n+//! //                          specified in first of next two args -> arg 1 (5)}\n //! println!(\"Hello {} is {:.*}\",    \"x\", 5, 0.01);\n //!\n-//! // Hello {next arg (\"x\")} is {arg 2 (0.01) with precision\n-//! //                          specified in its predecessor (5)}\n+//! // Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision\n+//! //                          specified in next arg -> arg 0 (5)}\n+//! println!(\"Hello {1} is {2:.*}\",  5, \"x\", 0.01);\n+//!\n+//! // Hello {next arg -> arg 0 (\"x\")} is {arg 2 (0.01) with precision\n+//! //                          specified in next arg -> arg 1 (5)}\n //! println!(\"Hello {} is {2:.*}\",   \"x\", 5, 0.01);\n //!\n-//! // Hello {next arg (\"x\")} is {arg \"number\" (0.01) with precision specified\n+//! // Hello {next arg -> arg 0 (\"x\")} is {arg \"number\" (0.01) with precision specified\n //! //                          in arg \"prec\" (5)}\n //! println!(\"Hello {} is {number:.prec$}\", \"x\", prec = 5, number = 0.01);\n //! ```\n@@ -304,7 +310,7 @@\n //! ```text\n //! format_string := text [ maybe_format text ] *\n //! maybe_format := '{' '{' | '}' '}' | format\n-//! format := '{' [ argument ] [ ':' format_spec ] '}'\n+//! format := '{' [ argument ] [ ':' format_spec ] [ ws ] * '}'\n //! argument := integer | identifier\n //!\n //! format_spec := [[fill]align][sign]['#']['0'][width]['.' precision]type\n@@ -317,7 +323,12 @@\n //! count := parameter | integer\n //! parameter := argument '$'\n //! ```\n-//! In the above grammar, `text` must not contain any `'{'` or `'}'` characters.\n+//! In the above grammar,\n+//! - `text` must not contain any `'{'` or `'}'` characters,\n+//! - `ws` is any character for which [`char::is_whitespace`] returns `true`, has no semantic\n+//!   meaning and is completely optional,\n+//! - `integer` is a decimal integer that may contain leading zeroes and\n+//! - `identifier` is an `IDENTIFIER_OR_KEYWORD` (not an `IDENTIFIER`) as defined by the [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html).\n //!\n //! # Formatting traits\n //!\n@@ -358,9 +369,9 @@\n //! ```\n //!\n //! Your type will be passed as `self` by-reference, and then the function\n-//! should emit output into the `f.buf` stream. It is up to each format trait\n-//! implementation to correctly adhere to the requested formatting parameters.\n-//! The values of these parameters will be listed in the fields of the\n+//! should emit output into the Formatter `f` which implements `fmt::Write`. It is up to each\n+//! format trait implementation to correctly adhere to the requested formatting parameters.\n+//! The values of these parameters can be accessed with methods of the\n //! [`Formatter`] struct. In order to help with this, the [`Formatter`] struct also\n //! provides some helper methods.\n //!\n@@ -449,7 +460,7 @@\n //!\n //! ```ignore (only-for-syntax-highlight)\n //! format!      // described above\n-//! write!       // first argument is a &mut io::Write, the destination\n+//! write!       // first argument is either a &mut io::Write or a &mut fmt::Write, the destination\n //! writeln!     // same as write but appends a newline\n //! print!       // the format string is printed to the standard output\n //! println!     // same as print but appends a newline\n@@ -460,11 +471,11 @@\n //!\n //! ### `write!`\n //!\n-//! This and [`writeln!`] are two macros which are used to emit the format string\n+//! [`write!`] and [`writeln!`] are two macros which are used to emit the format string\n //! to a specified stream. This is used to prevent intermediate allocations of\n //! format strings and instead directly write the output. Under the hood, this\n //! function is actually invoking the [`write_fmt`] function defined on the\n-//! [`std::io::Write`] trait. Example usage is:\n+//! [`std::io::Write`] and the [`std::fmt::Write`] trait. Example usage is:\n //!\n //! ```\n //! # #![allow(unused_must_use)]\n@@ -491,7 +502,7 @@\n //!\n //! ### `format_args!`\n //!\n-//! This is a curious macro used to safely pass around\n+//! [`format_args!`] is a curious macro used to safely pass around\n //! an opaque object describing the format string. This object\n //! does not require any heap allocations to create, and it only\n //! references information on the stack. Under the hood, all of\n@@ -529,10 +540,12 @@\n //! [`to_string`]: crate::string::ToString::to_string \"ToString::to_string\"\n //! [`write_fmt`]: ../../std/io/trait.Write.html#method.write_fmt\n //! [`std::io::Write`]: ../../std/io/trait.Write.html\n+//! [`std::fmt::Write`]: ../../std/fmt/trait.Write.html\n //! [`print!`]: ../../std/macro.print.html \"print!\"\n //! [`println!`]: ../../std/macro.println.html \"println!\"\n //! [`eprint!`]: ../../std/macro.eprint.html \"eprint!\"\n //! [`eprintln!`]: ../../std/macro.eprintln.html \"eprintln!\"\n+//! [`format_args!`]: ../../std/macro.format_args.html \"format_args!\"\n //! [`fmt::Arguments`]: Arguments \"fmt::Arguments\"\n //! [`format`]: format() \"fmt::format\"\n "}]}