{"sha": "0019371e3d878c1031bd7395b52ab40f2441049c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTkzNzFlM2Q4NzhjMTAzMWJkNzM5NWI1MmFiNDBmMjQ0MTA0OWM=", "commit": {"author": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-11-11T16:16:05Z"}, "committer": {"name": "Guanqun Lu", "email": "guanqun.lu@gmail.com", "date": "2019-11-11T16:16:05Z"}, "message": "bootstrap: don't call support_xz in hot-path", "tree": {"sha": "6051c5a91870134f657b6c3ec8b459aeb5e2a4b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6051c5a91870134f657b6c3ec8b459aeb5e2a4b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0019371e3d878c1031bd7395b52ab40f2441049c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0019371e3d878c1031bd7395b52ab40f2441049c", "html_url": "https://github.com/rust-lang/rust/commit/0019371e3d878c1031bd7395b52ab40f2441049c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0019371e3d878c1031bd7395b52ab40f2441049c/comments", "author": null, "committer": null, "parents": [{"sha": "8d56bcc59c92c5770f585cd433230e7771da2dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d56bcc59c92c5770f585cd433230e7771da2dad", "html_url": "https://github.com/rust-lang/rust/commit/8d56bcc59c92c5770f585cd433230e7771da2dad"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "730e8cf05d41d784c02d25eb5bac589fcabe6de7", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0019371e3d878c1031bd7395b52ab40f2441049c/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/0019371e3d878c1031bd7395b52ab40f2441049c/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=0019371e3d878c1031bd7395b52ab40f2441049c", "patch": "@@ -331,17 +331,6 @@ def __init__(self):\n         self.use_vendored_sources = ''\n         self.verbose = False\n \n-        def support_xz():\n-            try:\n-                with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n-                    temp_path = temp_file.name\n-                with tarfile.open(temp_path, \"w:xz\") as tar:\n-                    pass\n-                return True\n-            except tarfile.CompressionError:\n-                return False\n-\n-        self.tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n \n     def download_stage0(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n@@ -356,19 +345,30 @@ def download_stage0(self):\n         rustc_channel = self.rustc_channel\n         cargo_channel = self.cargo_channel\n \n+        def support_xz():\n+            try:\n+                with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+                    temp_path = temp_file.name\n+                with tarfile.open(temp_path, \"w:xz\") as tar:\n+                    pass\n+                return True\n+            except tarfile.CompressionError:\n+                return False\n+\n         if self.rustc().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.rustc()) or\n                  self.program_out_of_date(self.rustc_stamp())):\n             if os.path.exists(self.bin_root()):\n                 shutil.rmtree(self.bin_root())\n+            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n             filename = \"rust-std-{}-{}{}\".format(\n-                rustc_channel, self.build, self.tarball_suffix)\n+                rustc_channel, self.build, tarball_suffix)\n             pattern = \"rust-std-{}\".format(self.build)\n-            self._download_stage0_helper(filename, pattern)\n+            self._download_stage0_helper(filename, pattern, tarball_suffix)\n \n             filename = \"rustc-{}-{}{}\".format(rustc_channel, self.build,\n-                                              self.tarball_suffix)\n-            self._download_stage0_helper(filename, \"rustc\")\n+                                              tarball_suffix)\n+            self._download_stage0_helper(filename, \"rustc\", tarball_suffix)\n             self.fix_executable(\"{}/bin/rustc\".format(self.bin_root()))\n             self.fix_executable(\"{}/bin/rustdoc\".format(self.bin_root()))\n             with output(self.rustc_stamp()) as rust_stamp:\n@@ -379,20 +379,21 @@ def download_stage0(self):\n             # the system MinGW ones.\n             if \"pc-windows-gnu\" in self.build:\n                 filename = \"rust-mingw-{}-{}{}\".format(\n-                    rustc_channel, self.build, self.tarball_suffix)\n-                self._download_stage0_helper(filename, \"rust-mingw\")\n+                    rustc_channel, self.build, tarball_suffix)\n+                self._download_stage0_helper(filename, \"rust-mingw\", tarball_suffix)\n \n         if self.cargo().startswith(self.bin_root()) and \\\n                 (not os.path.exists(self.cargo()) or\n                  self.program_out_of_date(self.cargo_stamp())):\n+            tarball_suffix = '.tar.xz' if support_xz() else '.tar.gz'\n             filename = \"cargo-{}-{}{}\".format(cargo_channel, self.build,\n-                                              self.tarball_suffix)\n-            self._download_stage0_helper(filename, \"cargo\")\n+                                              tarball_suffix)\n+            self._download_stage0_helper(filename, \"cargo\", tarball_suffix)\n             self.fix_executable(\"{}/bin/cargo\".format(self.bin_root()))\n             with output(self.cargo_stamp()) as cargo_stamp:\n                 cargo_stamp.write(self.date)\n \n-    def _download_stage0_helper(self, filename, pattern):\n+    def _download_stage0_helper(self, filename, pattern, tarball_suffix):\n         cache_dst = os.path.join(self.build_dir, \"cache\")\n         rustc_cache = os.path.join(cache_dst, self.date)\n         if not os.path.exists(rustc_cache):\n@@ -402,7 +403,7 @@ def _download_stage0_helper(self, filename, pattern):\n         tarball = os.path.join(rustc_cache, filename)\n         if not os.path.exists(tarball):\n             get(\"{}/{}\".format(url, filename), tarball, verbose=self.verbose)\n-        unpack(tarball, self.tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n+        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     @staticmethod\n     def fix_executable(fname):"}]}