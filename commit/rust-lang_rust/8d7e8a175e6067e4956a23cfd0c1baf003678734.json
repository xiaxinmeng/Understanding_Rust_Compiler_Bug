{"sha": "8d7e8a175e6067e4956a23cfd0c1baf003678734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkN2U4YTE3NWU2MDY3ZTQ5NTZhMjNjZmQwYzFiYWYwMDM2Nzg3MzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T19:30:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-20T19:30:30Z"}, "message": "generalize folding tests\n\nBy using xml-like tags, we will be able to test nested foldings.", "tree": {"sha": "8c30485c8652cc0c8a7d442744eaead61706c9e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c30485c8652cc0c8a7d442744eaead61706c9e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d7e8a175e6067e4956a23cfd0c1baf003678734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7e8a175e6067e4956a23cfd0c1baf003678734", "html_url": "https://github.com/rust-lang/rust/commit/8d7e8a175e6067e4956a23cfd0c1baf003678734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d7e8a175e6067e4956a23cfd0c1baf003678734/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61dcaa6addcb3fca522b298bdba12239772eb81e", "url": "https://api.github.com/repos/rust-lang/rust/commits/61dcaa6addcb3fca522b298bdba12239772eb81e", "html_url": "https://github.com/rust-lang/rust/commit/61dcaa6addcb3fca522b298bdba12239772eb81e"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "a4add8702cf4600767a2b59aa77c327052ecf2a0", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e8a175e6067e4956a23cfd0c1baf003678734/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e8a175e6067e4956a23cfd0c1baf003678734/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=8d7e8a175e6067e4956a23cfd0c1baf003678734", "patch": "@@ -170,7 +170,7 @@ mod tests {\n     use test_utils::extract_ranges;\n \n     fn do_check(text: &str, fold_kinds: &[FoldKind]) {\n-        let (ranges, text) = extract_ranges(text);\n+        let (ranges, text) = extract_ranges(text, \"fold\");\n         let file = SourceFileNode::parse(&text);\n         let folds = folding_ranges(&file);\n \n@@ -198,22 +198,22 @@ mod tests {\n     #[test]\n     fn test_fold_comments() {\n         let text = r#\"\n-<|>// Hello\n+<fold>// Hello\n // this is a multiline\n // comment\n-//<|>\n+//</fold>\n \n // But this is not\n \n fn main() {\n-    <|>// We should\n+    <fold>// We should\n     // also\n     // fold\n-    // this one.<|>\n-    <|>//! But this one is different\n-    //! because it has another flavor<|>\n-    <|>/* As does this\n-    multiline comment */<|>\n+    // this one.</fold>\n+    <fold>//! But this one is different\n+    //! because it has another flavor</fold>\n+    <fold>/* As does this\n+    multiline comment */</fold>\n }\"#;\n \n         let fold_kinds = &[\n@@ -228,11 +228,11 @@ fn main() {\n     #[test]\n     fn test_fold_imports() {\n         let text = r#\"\n-<|>use std::{\n+<fold>use std::{\n     str,\n     vec,\n     io as iop\n-};<|>\n+};</fold>\n \n fn main() {\n }\"#;\n@@ -244,12 +244,12 @@ fn main() {\n     #[test]\n     fn test_fold_import_groups() {\n         let text = r#\"\n-<|>use std::str;\n+<fold>use std::str;\n use std::vec;\n-use std::io as iop;<|>\n+use std::io as iop;</fold>\n \n-<|>use std::mem;\n-use std::f64;<|>\n+<fold>use std::mem;\n+use std::f64;</fold>\n \n use std::collections::HashMap;\n // Some random comment\n@@ -265,17 +265,17 @@ fn main() {\n     #[test]\n     fn test_fold_import_and_groups() {\n         let text = r#\"\n-<|>use std::str;\n+<fold>use std::str;\n use std::vec;\n-use std::io as iop;<|>\n+use std::io as iop;</fold>\n \n-<|>use std::mem;\n-use std::f64;<|>\n+<fold>use std::mem;\n+use std::f64;</fold>\n \n-<|>use std::collections::{\n+<fold>use std::collections::{\n     HashMap,\n     VecDeque,\n-};<|>\n+};</fold>\n // Some random comment\n \n fn main() {"}, {"sha": "894a22769bc400bad30020f0225649426ac391de", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8d7e8a175e6067e4956a23cfd0c1baf003678734/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7e8a175e6067e4956a23cfd0c1baf003678734/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=8d7e8a175e6067e4956a23cfd0c1baf003678734", "patch": "@@ -66,15 +66,39 @@ pub fn try_extract_range(text: &str) -> Option<(TextRange, String)> {\n     Some((TextRange::from_to(start, end), text))\n }\n \n-pub fn extract_ranges(text: &str) -> (Vec<TextRange>, String) {\n+/// Extracts ranges, marked with `<tag> </tag>` paris from the `text`\n+pub fn extract_ranges(mut text: &str, tag: &str) -> (Vec<TextRange>, String) {\n+    let open = format!(\"<{}>\", tag);\n+    let close = format!(\"</{}>\", tag);\n     let mut ranges = Vec::new();\n-    let mut text = String::from(text);\n-    while let Some((range, new_text)) = try_extract_range(&text) {\n-        text = new_text;\n-        ranges.push(range);\n+    let mut res = String::new();\n+    let mut stack = Vec::new();\n+    loop {\n+        match text.find('<') {\n+            None => {\n+                res.push_str(text);\n+                break;\n+            }\n+            Some(i) => {\n+                res.push_str(&text[..i]);\n+                text = &text[i..];\n+                if text.starts_with(&open) {\n+                    text = &text[open.len()..];\n+                    let from = TextUnit::of_str(&res);\n+                    stack.push(from);\n+                } else if text.starts_with(&close) {\n+                    text = &text[close.len()..];\n+                    let from = stack\n+                        .pop()\n+                        .unwrap_or_else(|| panic!(\"unmatched </{}>\", tag));\n+                    let to = TextUnit::of_str(&res);\n+                    ranges.push(TextRange::from_to(from, to));\n+                }\n+            }\n+        }\n     }\n-\n-    (ranges, text)\n+    assert!(stack.is_empty(), \"unmatched <{}>\", tag);\n+    (ranges, res)\n }\n \n pub fn add_cursor(text: &str, offset: TextUnit) -> String {"}]}