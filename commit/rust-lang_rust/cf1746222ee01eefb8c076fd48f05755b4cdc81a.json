{"sha": "cf1746222ee01eefb8c076fd48f05755b4cdc81a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMTc0NjIyMmVlMDFlZWZiOGMwNzZmZDQ4ZjA1NzU1YjRjZGM4MWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-13T16:05:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-15T20:22:05Z"}, "message": "we no longer even try pushing to a frozen location", "tree": {"sha": "b197e0073ac0984aaed3123a4e682f5495d6f72a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b197e0073ac0984aaed3123a4e682f5495d6f72a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf1746222ee01eefb8c076fd48f05755b4cdc81a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1746222ee01eefb8c076fd48f05755b4cdc81a", "html_url": "https://github.com/rust-lang/rust/commit/cf1746222ee01eefb8c076fd48f05755b4cdc81a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf1746222ee01eefb8c076fd48f05755b4cdc81a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f521fd5e0fbaa54d5a07f61a794a91a0576ff557", "url": "https://api.github.com/repos/rust-lang/rust/commits/f521fd5e0fbaa54d5a07f61a794a91a0576ff557", "html_url": "https://github.com/rust-lang/rust/commit/f521fd5e0fbaa54d5a07f61a794a91a0576ff557"}], "stats": {"total": 55, "additions": 23, "deletions": 32}, "files": [{"sha": "3790b5d13fed56f654efc5c703fe523fe903e1ae", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 23, "deletions": 32, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cf1746222ee01eefb8c076fd48f05755b4cdc81a/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf1746222ee01eefb8c076fd48f05755b4cdc81a/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=cf1746222ee01eefb8c076fd48f05755b4cdc81a", "patch": "@@ -245,40 +245,31 @@ impl<'tcx> Stack {\n     fn create(&mut self, bor: Borrow, kind: RefKind) {\n         // First, push the item.  We do this even if we will later freeze, because we\n         // will allow mutation of shared data at the expense of unfreezing.\n-        if let Some(itm_t) = self.frozen_since {\n-            // A frozen location, we won't change anything here!\n-            match bor {\n-                Borrow::Uniq(_) => bug!(\"Trying to create unique ref to frozen location\"),\n-                Borrow::Shr(Some(bor_t)) if kind == RefKind::Frozen => {\n-                    // Make sure we are frozen long enough.  This is part 1 of ensuring F1.\n-                    assert!(itm_t <= bor_t, \"Trying to freeze shorter than it was frozen?\");\n-                    trace!(\"create: Freezing a frozen location is a NOP\");\n-                }\n-                Borrow::Shr(_) => trace!(\"create: Sharing a frozen location is a NOP\"),\n-            }\n+        if self.frozen_since.is_some() {\n+            // A frozen location, this should be impossible!\n+            bug!(\"We should never try pushing to a frozen stack\");\n+        }\n+        // First, push.\n+        let itm = match bor {\n+            Borrow::Uniq(t) => BorStackItem::Uniq(t),\n+            Borrow::Shr(_) => BorStackItem::Shr,\n+        };\n+        if *self.borrows.last().unwrap() == itm {\n+            assert!(bor.is_shared());\n+            trace!(\"create: Sharing a shared location is a NOP\");\n         } else {\n-            // First push.\n-            let itm = match bor {\n-                Borrow::Uniq(t) => BorStackItem::Uniq(t),\n-                Borrow::Shr(_) => BorStackItem::Shr,\n+            // This ensures U1.\n+            trace!(\"create: Pushing {:?}\", itm);\n+            self.borrows.push(itm);\n+        }\n+        // Then, maybe freeze.  This is part 2 of ensuring F1.\n+        if kind == RefKind::Frozen {\n+            let bor_t = match bor {\n+                Borrow::Shr(Some(t)) => t,\n+                _ => bug!(\"Creating illegal borrow {:?} for frozen ref\", bor),\n             };\n-            if *self.borrows.last().unwrap() == itm {\n-                assert!(bor.is_shared());\n-                trace!(\"create: Sharing a shared location is a NOP\");\n-            } else {\n-                // This ensures U1.\n-                trace!(\"create: Pushing {:?}\", itm);\n-                self.borrows.push(itm);\n-            }\n-            // Now, maybe freeze.  This is part 2 of ensuring F1.\n-            if kind == RefKind::Frozen {\n-                let bor_t = match bor {\n-                    Borrow::Shr(Some(t)) => t,\n-                    _ => bug!(\"Creating illegal borrow {:?} for frozen ref\", bor),\n-                };\n-                trace!(\"create: Freezing\");\n-                self.frozen_since = Some(bor_t);\n-            }\n+            trace!(\"create: Freezing\");\n+            self.frozen_since = Some(bor_t);\n         }\n     }\n }"}]}