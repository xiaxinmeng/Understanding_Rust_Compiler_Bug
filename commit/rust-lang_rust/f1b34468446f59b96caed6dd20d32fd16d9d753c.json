{"sha": "f1b34468446f59b96caed6dd20d32fd16d9d753c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYjM0NDY4NDQ2ZjU5Yjk2Y2FlZDZkZDIwZDMyZmQxNmQ5ZDc1M2M=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-01T18:40:31Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-09T12:35:42Z"}, "message": "Emit test name in Run test runnables if it comes from a macro expansion", "tree": {"sha": "ee5fa5b91a287ea209a53e8af84f5debbc7b4d8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5fa5b91a287ea209a53e8af84f5debbc7b4d8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1b34468446f59b96caed6dd20d32fd16d9d753c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b34468446f59b96caed6dd20d32fd16d9d753c", "html_url": "https://github.com/rust-lang/rust/commit/f1b34468446f59b96caed6dd20d32fd16d9d753c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1b34468446f59b96caed6dd20d32fd16d9d753c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd69d4a97ce0ba7ad808909d4506668dc324d923", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd69d4a97ce0ba7ad808909d4506668dc324d923", "html_url": "https://github.com/rust-lang/rust/commit/dd69d4a97ce0ba7ad808909d4506668dc324d923"}], "stats": {"total": 497, "additions": 362, "deletions": 135}, "files": [{"sha": "f601fd6276604a0ea9136df964c671f9f715ebc2", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=f1b34468446f59b96caed6dd20d32fd16d9d753c", "patch": "@@ -1634,6 +1634,16 @@ impl HasVisibility for AssocItem {\n     }\n }\n \n+impl From<AssocItem> for ModuleDef {\n+    fn from(assoc: AssocItem) -> Self {\n+        match assoc {\n+            AssocItem::Function(it) => ModuleDef::Function(it),\n+            AssocItem::Const(it) => ModuleDef::Const(it),\n+            AssocItem::TypeAlias(it) => ModuleDef::TypeAlias(it),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, Debug, Hash)]\n pub enum GenericDef {\n     Function(Function),"}, {"sha": "6d4ba98d087d123ba789c33647b90b8834e28a16", "filename": "crates/ide/src/annotations.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fide%2Fsrc%2Fannotations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fide%2Fsrc%2Fannotations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fannotations.rs?ref=f1b34468446f59b96caed6dd20d32fd16d9d753c", "patch": "@@ -57,24 +57,22 @@ pub(crate) fn annotations(\n                 continue;\n             }\n \n-            let action = runnable.action();\n             let range = runnable.nav.focus_or_full_range();\n \n+            // dbg_runnable should go after the run annotation, to prevent a clone we do it this way\n+            let dbg_runnable = (runnable.debugee() && config.debug).then(|| Annotation {\n+                range,\n+                kind: AnnotationKind::Runnable { debug: true, runnable: runnable.clone() },\n+            });\n+\n             if config.run {\n                 annotations.push(Annotation {\n                     range,\n-\n-                    // FIXME: This one allocates without reason if run is enabled, but debug is disabled\n-                    kind: AnnotationKind::Runnable { debug: false, runnable: runnable.clone() },\n+                    kind: AnnotationKind::Runnable { debug: false, runnable },\n                 });\n             }\n \n-            if action.debugee && config.debug {\n-                annotations.push(Annotation {\n-                    range,\n-                    kind: AnnotationKind::Runnable { debug: true, runnable },\n-                });\n-            }\n+            annotations.extend(dbg_runnable);\n         }\n     }\n \n@@ -228,6 +226,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -247,6 +246,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -332,6 +332,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -351,6 +352,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -440,6 +442,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -459,6 +462,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -601,6 +605,7 @@ fn main() {}\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -620,6 +625,7 @@ fn main() {}\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -674,6 +680,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -693,6 +700,7 @@ fn main() {\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -816,6 +824,7 @@ mod tests {\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -835,6 +844,7 @@ mod tests {\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -854,6 +864,7 @@ mod tests {\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -876,6 +887,7 @@ mod tests {\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -898,6 +910,7 @@ mod tests {\n                         kind: Runnable {\n                             debug: false,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,\n@@ -924,6 +937,7 @@ mod tests {\n                         kind: Runnable {\n                             debug: true,\n                             runnable: Runnable {\n+                                use_name_in_title: false,\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         0,"}, {"sha": "6bb3624091cf4de32ccb447eedd671e716e7cbbb", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=f1b34468446f59b96caed6dd20d32fd16d9d753c", "patch": "@@ -2463,6 +2463,7 @@ fn foo_$0test() {}\n                     ),\n                     Runnable(\n                         Runnable {\n+                            use_name_in_title: false,\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n                                     0,\n@@ -2501,6 +2502,7 @@ mod tests$0 {\n                 [\n                     Runnable(\n                         Runnable {\n+                            use_name_in_title: false,\n                             nav: NavigationTarget {\n                                 file_id: FileId(\n                                     0,"}, {"sha": "c1a068170bb69191bf10a1e45d28f613dcbfc309", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 321, "deletions": 116, "changes": 437, "blob_url": "https://github.com/rust-lang/rust/blob/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=f1b34468446f59b96caed6dd20d32fd16d9d753c", "patch": "@@ -12,14 +12,15 @@ use ide_db::{\n     RootDatabase, SymbolKind,\n };\n use itertools::Itertools;\n-use rustc_hash::FxHashSet;\n-use stdx::always;\n+use rustc_hash::{FxHashMap, FxHashSet};\n+use stdx::{always, format_to};\n use syntax::ast::{self, AstNode, AttrsOwner};\n \n use crate::{display::TryToNav, references, FileId, NavigationTarget};\n \n #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n pub struct Runnable {\n+    pub use_name_in_title: bool,\n     pub nav: NavigationTarget,\n     pub kind: RunnableKind,\n     pub cfg: Option<CfgExpr>,\n@@ -49,20 +50,16 @@ pub enum RunnableKind {\n     Bin,\n }\n \n-#[derive(Debug, Eq, PartialEq)]\n-pub struct RunnableAction {\n-    pub run_title: &'static str,\n-    pub debugee: bool,\n+#[cfg(test)]\n+#[derive(Debug, Clone, Hash, PartialEq, Eq)]\n+enum RunnableTestKind {\n+    Test,\n+    TestMod,\n+    DocTest,\n+    Bench,\n+    Bin,\n }\n \n-const TEST: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Test\", debugee: true };\n-const TEST_MOD: RunnableAction =\n-    RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Tests\", debugee: true };\n-const DOCTEST: RunnableAction =\n-    RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Doctest\", debugee: false };\n-const BENCH: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run Bench\", debugee: true };\n-const BIN: RunnableAction = RunnableAction { run_title: \"\u25b6\\u{fe0e} Run\", debugee: true };\n-\n impl Runnable {\n     // test package::module::testname\n     pub fn label(&self, target: Option<String>) -> String {\n@@ -77,13 +74,43 @@ impl Runnable {\n         }\n     }\n \n-    pub fn action(&self) -> &'static RunnableAction {\n+    pub fn debugee(&self) -> bool {\n+        matches!(\n+            &self.kind,\n+            RunnableKind::TestMod { .. }\n+                | RunnableKind::Test { .. }\n+                | RunnableKind::Bench { .. }\n+                | RunnableKind::Bin\n+        )\n+    }\n+\n+    pub fn title(&self) -> String {\n+        let mut s = String::from(\"\u25b6\\u{fe0e} Run \");\n+        if self.use_name_in_title {\n+            format_to!(s, \"{}\", self.nav.name);\n+            if !matches!(self.kind, RunnableKind::Bin) {\n+                s.push(' ');\n+            }\n+        }\n+        let suffix = match &self.kind {\n+            RunnableKind::TestMod { .. } => \"Tests\",\n+            RunnableKind::Test { .. } => \"Test\",\n+            RunnableKind::DocTest { .. } => \"Doctest\",\n+            RunnableKind::Bench { .. } => \"Bench\",\n+            RunnableKind::Bin => return s,\n+        };\n+        s.push_str(suffix);\n+        s\n+    }\n+\n+    #[cfg(test)]\n+    fn test_kind(&self) -> RunnableTestKind {\n         match &self.kind {\n-            RunnableKind::TestMod { .. } => &TEST_MOD,\n-            RunnableKind::Test { .. } => &TEST,\n-            RunnableKind::DocTest { .. } => &DOCTEST,\n-            RunnableKind::Bench { .. } => &BENCH,\n-            RunnableKind::Bin => &BIN,\n+            RunnableKind::TestMod { .. } => RunnableTestKind::TestMod,\n+            RunnableKind::Test { .. } => RunnableTestKind::Test,\n+            RunnableKind::DocTest { .. } => RunnableTestKind::DocTest,\n+            RunnableKind::Bench { .. } => RunnableTestKind::Bench,\n+            RunnableKind::Bin => RunnableTestKind::Bin,\n         }\n     }\n }\n@@ -104,7 +131,10 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n     let sema = Semantics::new(db);\n \n     let mut res = Vec::new();\n-    let mut add_opt = |runnable: Option<Runnable>| {\n+    // Record all runnables that come from macro expansions here instead.\n+    // In case an expansion creates multiple runnables we want to name them to avoid emitting a bunch of equally named runnables.\n+    let mut in_macro_expansion = FxHashMap::<hir::HirFileId, Vec<Runnable>>::default();\n+    let mut add_opt = |runnable: Option<Runnable>, def| {\n         if let Some(runnable) = runnable.filter(|runnable| {\n             always!(\n                 runnable.nav.file_id == file_id,\n@@ -113,6 +143,17 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n                 file_id\n             )\n         }) {\n+            if let Some(def) = def {\n+                let file_id = match def {\n+                    hir::ModuleDef::Module(it) => it.declaration_source(db).map(|src| src.file_id),\n+                    hir::ModuleDef::Function(it) => it.source(db).map(|src| src.file_id),\n+                    _ => None,\n+                };\n+                if let Some(file_id) = file_id.filter(|file| file.call_node(db).is_some()) {\n+                    in_macro_expansion.entry(file_id).or_default().push(runnable);\n+                    return;\n+                }\n+            }\n             res.push(runnable);\n         }\n     };\n@@ -123,23 +164,35 @@ pub(crate) fn runnables(db: &RootDatabase, file_id: FileId) -> Vec<Runnable> {\n                 hir::ModuleDef::Function(it) => runnable_fn(&sema, it),\n                 _ => None,\n             };\n-            add_opt(runnable.or_else(|| module_def_doctest(&sema, def)));\n+            add_opt(runnable.or_else(|| module_def_doctest(&sema, def)), Some(def));\n         }\n         Either::Right(impl_) => {\n-            add_opt(runnable_impl(&sema, &impl_));\n+            add_opt(runnable_impl(&sema, &impl_), None);\n             impl_\n                 .items(db)\n                 .into_iter()\n-                .map(|assoc| match assoc {\n-                    hir::AssocItem::Function(it) => {\n-                        runnable_fn(&sema, it).or_else(|| module_def_doctest(&sema, it.into()))\n-                    }\n-                    hir::AssocItem::Const(it) => module_def_doctest(&sema, it.into()),\n-                    hir::AssocItem::TypeAlias(it) => module_def_doctest(&sema, it.into()),\n+                .map(|assoc| {\n+                    (\n+                        match assoc {\n+                            hir::AssocItem::Function(it) => runnable_fn(&sema, it)\n+                                .or_else(|| module_def_doctest(&sema, it.into())),\n+                            hir::AssocItem::Const(it) => module_def_doctest(&sema, it.into()),\n+                            hir::AssocItem::TypeAlias(it) => module_def_doctest(&sema, it.into()),\n+                        },\n+                        assoc,\n+                    )\n                 })\n-                .for_each(|r| add_opt(r));\n+                .for_each(|(r, assoc)| add_opt(r, Some(assoc.into())));\n         }\n     });\n+\n+    res.extend(in_macro_expansion.into_iter().flat_map(|(_, runnables)| {\n+        let use_name_in_title = runnables.len() != 1;\n+        runnables.into_iter().map(move |mut r| {\n+            r.use_name_in_title = use_name_in_title;\n+            r\n+        })\n+    }));\n     res\n }\n \n@@ -272,7 +325,7 @@ pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) ->\n         SymbolKind::Function,\n     );\n     let cfg = def.attrs(sema.db).cfg();\n-    Some(Runnable { nav, kind, cfg })\n+    Some(Runnable { use_name_in_title: false, nav, kind, cfg })\n }\n \n pub(crate) fn runnable_mod(sema: &Semantics<RootDatabase>, def: hir::Module) -> Option<Runnable> {\n@@ -285,7 +338,7 @@ pub(crate) fn runnable_mod(sema: &Semantics<RootDatabase>, def: hir::Module) ->\n     let attrs = def.attrs(sema.db);\n     let cfg = attrs.cfg();\n     let nav = NavigationTarget::from_module_to_decl(sema.db, def);\n-    Some(Runnable { nav, kind: RunnableKind::TestMod { path }, cfg })\n+    Some(Runnable { use_name_in_title: false, nav, kind: RunnableKind::TestMod { path }, cfg })\n }\n \n pub(crate) fn runnable_impl(sema: &Semantics<RootDatabase>, def: &hir::Impl) -> Option<Runnable> {\n@@ -305,7 +358,7 @@ pub(crate) fn runnable_impl(sema: &Semantics<RootDatabase>, def: &hir::Impl) ->\n     };\n     let test_id = TestId::Path(format!(\"{}{}\", adt_name, params));\n \n-    Some(Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg })\n+    Some(Runnable { use_name_in_title: false, nav, kind: RunnableKind::DocTest { test_id }, cfg })\n }\n \n fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Option<Runnable> {\n@@ -368,7 +421,12 @@ fn module_def_doctest(sema: &Semantics<RootDatabase>, def: hir::ModuleDef) -> Op\n     nav.description = None;\n     nav.docs = None;\n     nav.kind = None;\n-    let res = Runnable { nav, kind: RunnableKind::DocTest { test_id }, cfg: attrs.cfg() };\n+    let res = Runnable {\n+        use_name_in_title: false,\n+        nav,\n+        kind: RunnableKind::DocTest { test_id },\n+        cfg: attrs.cfg(),\n+    };\n     Some(res)\n }\n \n@@ -448,20 +506,20 @@ mod tests {\n \n     use crate::fixture;\n \n-    use super::*;\n+    use super::{RunnableTestKind::*, *};\n \n     fn check(\n         ra_fixture: &str,\n         // FIXME: fold this into `expect` as well\n-        actions: &[&RunnableAction],\n+        actions: &[RunnableTestKind],\n         expect: Expect,\n     ) {\n         let (analysis, position) = fixture::position(ra_fixture);\n         let runnables = analysis.runnables(position.file_id).unwrap();\n         expect.assert_debug_eq(&runnables);\n         assert_eq!(\n             actions,\n-            runnables.into_iter().map(|it| it.action()).collect::<Vec<_>>().as_slice()\n+            runnables.into_iter().map(|it| it.test_kind()).collect::<Vec<_>>().as_slice()\n         );\n     }\n \n@@ -493,10 +551,11 @@ mod not_a_root {\n     fn main() {}\n }\n \"#,\n-            &[&BIN, &TEST, &TEST, &BENCH],\n+            &[Bin, Test, Test, Bench],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -510,6 +569,7 @@ mod not_a_root {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -530,6 +590,7 @@ mod not_a_root {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -550,6 +611,7 @@ mod not_a_root {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -667,10 +729,11 @@ trait Test {\n /// ```\n impl Test for StructWithRunnable {}\n \"#,\n-            &[&BIN, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST, &DOCTEST],\n+            &[Bin, DocTest, DocTest, DocTest, DocTest, DocTest, DocTest, DocTest, DocTest],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -684,6 +747,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -699,6 +763,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -714,6 +779,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -729,6 +795,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -744,6 +811,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -759,6 +827,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -774,6 +843,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -791,6 +861,7 @@ impl Test for StructWithRunnable {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -828,10 +899,11 @@ impl Data {\n     fn foo() {}\n }\n \"#,\n-            &[&BIN, &DOCTEST],\n+            &[Bin, DocTest],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -845,6 +917,7 @@ impl Data {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -875,10 +948,11 @@ mod test_mod {\n     fn test_foo1() {}\n }\n \"#,\n-            &[&TEST_MOD, &TEST],\n+            &[TestMod, Test],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -895,6 +969,7 @@ mod test_mod {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -946,10 +1021,11 @@ mod root_tests {\n     mod nested_tests_4 {}\n }\n \"#,\n-            &[&TEST_MOD, &TEST_MOD, &TEST_MOD, &TEST, &TEST, &TEST],\n+            &[TestMod, TestMod, TestMod, Test, Test, Test],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -966,6 +1042,7 @@ mod root_tests {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -982,6 +1059,7 @@ mod root_tests {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -998,6 +1076,7 @@ mod root_tests {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1018,6 +1097,7 @@ mod root_tests {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1038,6 +1118,7 @@ mod root_tests {\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1072,10 +1153,11 @@ $0\n #[cfg(feature = \"foo\")]\n fn test_foo1() {}\n \"#,\n-            &[&TEST],\n+            &[Test],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1117,10 +1199,11 @@ $0\n #[cfg(all(feature = \"foo\", feature = \"bar\"))]\n fn test_foo1() {}\n \"#,\n-            &[&TEST],\n+            &[Test],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1194,10 +1277,11 @@ impl Foo {\n     fn foo() {}\n }\n         \"#,\n-            &[&DOCTEST],\n+            &[DocTest],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 1,\n@@ -1231,9 +1315,9 @@ macro_rules! gen {\n }\n macro_rules! gen2 {\n     () => {\n-        mod m_tests {\n+        mod tests2 {\n             #[test]\n-            fn foo_test() {}\n+            fn foo_test2() {}\n         }\n     }\n }\n@@ -1242,10 +1326,11 @@ mod tests {\n }\n gen2!();\n \"#,\n-            &[&TEST_MOD, &TEST_MOD, &TEST, &TEST],\n+            &[TestMod, TestMod, Test, Test],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1262,22 +1347,45 @@ gen2!();\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: true,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n                             ),\n                             full_range: 228..236,\n                             focus_range: 228..236,\n-                            name: \"m_tests\",\n+                            name: \"tests2\",\n                             kind: Module,\n-                            description: \"mod m_tests\",\n+                            description: \"mod tests2\",\n                         },\n                         kind: TestMod {\n-                            path: \"m_tests\",\n+                            path: \"tests2\",\n                         },\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 228..236,\n+                            focus_range: 228..236,\n+                            name: \"foo_test2\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests2::foo_test2\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1297,19 +1405,107 @@ gen2!();\n                         },\n                         cfg: None,\n                     },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn big_mac() {\n+        check(\n+            r#\"\n+//- /lib.rs\n+$0\n+macro_rules! foo {\n+    () => {\n+        mod foo_tests {\n+            #[test]\n+            fn foo0() {}\n+            #[test]\n+            fn foo1() {}\n+            #[test]\n+            fn foo2() {}\n+        }\n+    };\n+}\n+foo!();\n+\"#,\n+            &[TestMod, Test, Test, Test],\n+            expect![[r#\"\n+                [\n                     Runnable {\n+                        use_name_in_title: true,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n                             ),\n-                            full_range: 228..236,\n-                            focus_range: 228..236,\n-                            name: \"foo_test\",\n+                            full_range: 210..217,\n+                            focus_range: 210..217,\n+                            name: \"foo_tests\",\n+                            kind: Module,\n+                            description: \"mod foo_tests\",\n+                        },\n+                        kind: TestMod {\n+                            path: \"foo_tests\",\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 210..217,\n+                            focus_range: 210..217,\n+                            name: \"foo0\",\n                             kind: Function,\n                         },\n                         kind: Test {\n                             test_id: Path(\n-                                \"m_tests::foo_test\",\n+                                \"foo_tests::foo0\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 210..217,\n+                            focus_range: 210..217,\n+                            name: \"foo1\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"foo_tests::foo1\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n+                    },\n+                    Runnable {\n+                        use_name_in_title: true,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 210..217,\n+                            focus_range: 210..217,\n+                            name: \"foo2\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"foo_tests::foo2\",\n                             ),\n                             attr: TestAttr {\n                                 ignore: false,\n@@ -1355,10 +1551,11 @@ fn t0() {}\n #[test]\n fn t1() {}\n \"#,\n-            &[&TEST_MOD],\n+            &[TestMod],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1392,10 +1589,11 @@ fn t0() {}\n #[test]\n fn t1() {}\n \"#,\n-            &[&TEST, &TEST],\n+            &[Test, Test],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 1,\n@@ -1416,6 +1614,7 @@ fn t1() {}\n                         cfg: None,\n                     },\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 1,\n@@ -1470,6 +1669,7 @@ mod tests {\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1512,28 +1712,29 @@ mod tests {\n }\n \"#,\n             expect![[r#\"\n-            [\n-                Runnable {\n-                    nav: NavigationTarget {\n-                        file_id: FileId(\n-                            0,\n-                        ),\n-                        full_range: 71..122,\n-                        focus_range: 86..94,\n-                        name: \"foo_test\",\n-                        kind: Function,\n-                    },\n-                    kind: Test {\n-                        test_id: Path(\n-                            \"tests::foo_test\",\n-                        ),\n-                        attr: TestAttr {\n-                            ignore: false,\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 71..122,\n+                            focus_range: 86..94,\n+                            name: \"foo_test\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n                         },\n+                        cfg: None,\n                     },\n-                    cfg: None,\n-                },\n-            ]\n+                ]\n             \"#]],\n         );\n     }\n@@ -1565,6 +1766,7 @@ mod tests {\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,\n@@ -1614,48 +1816,50 @@ mod tests {\n }\n \"#,\n             expect![[r#\"\n-            [\n-                Runnable {\n-                    nav: NavigationTarget {\n-                        file_id: FileId(\n-                            0,\n-                        ),\n-                        full_range: 52..115,\n-                        focus_range: 67..75,\n-                        name: \"foo_test\",\n-                        kind: Function,\n-                    },\n-                    kind: Test {\n-                        test_id: Path(\n-                            \"tests::foo_test\",\n-                        ),\n-                        attr: TestAttr {\n-                            ignore: false,\n+                [\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 52..115,\n+                            focus_range: 67..75,\n+                            name: \"foo_test\",\n+                            kind: Function,\n                         },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n+                        },\n+                        cfg: None,\n                     },\n-                    cfg: None,\n-                },\n-                Runnable {\n-                    nav: NavigationTarget {\n-                        file_id: FileId(\n-                            0,\n-                        ),\n-                        full_range: 121..185,\n-                        focus_range: 136..145,\n-                        name: \"foo2_test\",\n-                        kind: Function,\n-                    },\n-                    kind: Test {\n-                        test_id: Path(\n-                            \"tests::foo2_test\",\n-                        ),\n-                        attr: TestAttr {\n-                            ignore: false,\n+                    Runnable {\n+                        use_name_in_title: false,\n+                        nav: NavigationTarget {\n+                            file_id: FileId(\n+                                0,\n+                            ),\n+                            full_range: 121..185,\n+                            focus_range: 136..145,\n+                            name: \"foo2_test\",\n+                            kind: Function,\n+                        },\n+                        kind: Test {\n+                            test_id: Path(\n+                                \"tests::foo2_test\",\n+                            ),\n+                            attr: TestAttr {\n+                                ignore: false,\n+                            },\n                         },\n+                        cfg: None,\n                     },\n-                    cfg: None,\n-                },\n-            ]\n+                ]\n             \"#]],\n         );\n     }\n@@ -1674,10 +1878,11 @@ impl<T, U> Foo<T, U> {\n     fn t() {}\n }\n \"#,\n-            &[&DOCTEST],\n+            &[DocTest],\n             expect![[r#\"\n                 [\n                     Runnable {\n+                        use_name_in_title: false,\n                         nav: NavigationTarget {\n                             file_id: FileId(\n                                 0,"}, {"sha": "06aaeed7444efe70cbfb125015adceefb9beeea2", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f1b34468446f59b96caed6dd20d32fd16d9d753c", "patch": "@@ -1554,12 +1554,12 @@ fn runnable_action_links(\n         return None;\n     }\n \n-    let action: &'static _ = runnable.action();\n+    let title = runnable.title();\n     to_proto::runnable(snap, runnable).ok().map(|r| {\n         let mut group = lsp_ext::CommandLinkGroup::default();\n \n         if hover_actions_config.run {\n-            let run_command = to_proto::command::run_single(&r, action.run_title);\n+            let run_command = to_proto::command::run_single(&r, &title);\n             group.commands.push(to_command_link(run_command, r.label.clone()));\n         }\n "}, {"sha": "723d6182b7205c71095c212241acfb0198750739", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1b34468446f59b96caed6dd20d32fd16d9d753c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f1b34468446f59b96caed6dd20d32fd16d9d753c", "patch": "@@ -958,15 +958,11 @@ pub(crate) fn code_lens(\n             let line_index = snap.file_line_index(run.nav.file_id)?;\n             let annotation_range = range(&line_index, annotation.range);\n \n-            let action = run.action();\n+            let title = run.title();\n             let r = runnable(snap, run)?;\n \n-            let command = if debug {\n-                command::debug_single(&r)\n-            } else {\n-                let title = action.run_title.to_string();\n-                command::run_single(&r, &title)\n-            };\n+            let command =\n+                if debug { command::debug_single(&r) } else { command::run_single(&r, &title) };\n \n             Ok(lsp_types::CodeLens { range: annotation_range, command: Some(command), data: None })\n         }"}]}