{"sha": "3e3613f2e2f8ff27499d263ae3cd95565f685dea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMzYxM2YyZTJmOGZmMjc0OTlkMjYzYWUzY2Q5NTU2NWY2ODVkZWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T07:27:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T07:33:22Z"}, "message": "merge packed_static and packed_struct", "tree": {"sha": "27342b3d9ed41f03fda131b3acb9d0d1a09d099f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27342b3d9ed41f03fda131b3acb9d0d1a09d099f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e3613f2e2f8ff27499d263ae3cd95565f685dea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3613f2e2f8ff27499d263ae3cd95565f685dea", "html_url": "https://github.com/rust-lang/rust/commit/3e3613f2e2f8ff27499d263ae3cd95565f685dea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e3613f2e2f8ff27499d263ae3cd95565f685dea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "974f9c30239a550ab8ccef75dd409ebb1faacf89", "url": "https://api.github.com/repos/rust-lang/rust/commits/974f9c30239a550ab8ccef75dd409ebb1faacf89", "html_url": "https://github.com/rust-lang/rust/commit/974f9c30239a550ab8ccef75dd409ebb1faacf89"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "1fa3a369670bbc2512f063a5b158fc8394b88e27", "filename": "tests/run-pass/packed_static.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fpacked_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974f9c30239a550ab8ccef75dd409ebb1faacf89/tests%2Frun-pass%2Fpacked_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_static.rs?ref=974f9c30239a550ab8ccef75dd409ebb1faacf89", "patch": "@@ -1,10 +0,0 @@\n-#[repr(packed)]\n-struct Foo {\n-    i: i32\n-}\n-\n-fn main() {\n-    assert_eq!({FOO.i}, 42);\n-}\n-\n-static FOO: Foo = Foo { i: 42 };"}, {"sha": "cb0bc9859345ab4f7ea16abbf01cc3864037d5a6", "filename": "tests/run-pass/packed_struct.rs", "status": "modified", "additions": 51, "deletions": 35, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3e3613f2e2f8ff27499d263ae3cd95565f685dea/tests%2Frun-pass%2Fpacked_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3613f2e2f8ff27499d263ae3cd95565f685dea/tests%2Frun-pass%2Fpacked_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpacked_struct.rs?ref=3e3613f2e2f8ff27499d263ae3cd95565f685dea", "patch": "@@ -1,28 +1,48 @@\n #![feature(unsize, coerce_unsized)]\n \n-#[repr(packed)]\n-struct S {\n-    a: i32,\n-    b: i64,\n-}\n \n-#[repr(packed)]\n-#[allow(dead_code)]\n-struct Test1<'a> {\n-    x: u8,\n-    other: &'a u32,\n-}\n+fn test_basic() {\n+    #[repr(packed)]\n+    struct S {\n+        a: i32,\n+        b: i64,\n+    }\n \n-#[repr(packed)]\n-#[allow(dead_code)]\n-struct Test2<'a> {\n-    x: u8,\n-    other: &'a Test1<'a>,\n-}\n+    #[repr(packed)]\n+    #[allow(dead_code)]\n+    struct Test1<'a> {\n+        x: u8,\n+        other: &'a u32,\n+    }\n+\n+    #[repr(packed)]\n+    #[allow(dead_code)]\n+    struct Test2<'a> {\n+        x: u8,\n+        other: &'a Test1<'a>,\n+    }\n \n-fn test(t: Test2) {\n-    let x = *t.other.other;\n-    assert_eq!(x, 42);\n+    fn test(t: Test2) {\n+        let x = *t.other.other;\n+        assert_eq!(x, 42);\n+    }\n+\n+    let mut x = S {\n+        a: 42,\n+        b: 99,\n+    };\n+    let a = x.a;\n+    let b = x.b;\n+    assert_eq!(a, 42);\n+    assert_eq!(b, 99);\n+    // can't do `assert_eq!(x.a, 42)`, because `assert_eq!` takes a reference\n+    assert_eq!({x.a}, 42);\n+    assert_eq!({x.b}, 99);\n+\n+    x.b = 77;\n+    assert_eq!({x.b}, 77);\n+\n+    test(Test2 { x: 0, other: &Test1 { x: 0, other: &42 }});\n }\n \n fn test_unsizing() {\n@@ -83,25 +103,21 @@ fn test_inner_packed() {\n     let _o2 = o.clone();\n }\n \n-fn main() {\n-    let mut x = S {\n-        a: 42,\n-        b: 99,\n-    };\n-    let a = x.a;\n-    let b = x.b;\n-    assert_eq!(a, 42);\n-    assert_eq!(b, 99);\n-    // can't do `assert_eq!(x.a, 42)`, because `assert_eq!` takes a reference\n-    assert_eq!({x.a}, 42);\n-    assert_eq!({x.b}, 99);\n+fn test_static() {\n+    #[repr(packed)]\n+    struct Foo {\n+        i: i32\n+    }\n \n-    x.b = 77;\n-    assert_eq!({x.b}, 77);\n+    static FOO: Foo = Foo { i: 42 };\n \n-    test(Test2 { x: 0, other: &Test1 { x: 0, other: &42 }});\n+    assert_eq!({FOO.i}, 42);\n+}\n \n+fn main() {\n+    test_basic();\n     test_unsizing();\n     test_drop();\n     test_inner_packed();\n+    test_static();\n }"}]}