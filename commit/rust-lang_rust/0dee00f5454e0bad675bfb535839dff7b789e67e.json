{"sha": "0dee00f5454e0bad675bfb535839dff7b789e67e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZWUwMGY1NDU0ZTBiYWQ2NzViZmI1MzU4MzlkZmY3Yjc4OWU2N2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-10-21T23:21:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-21T23:21:59Z"}, "message": "Rollup merge of #37244 - senior:add-error-desc-182-230-399, r=GuillaumeGomez\n\nAdd error explaination for E0182, E0230 and E0399\n\nThis PR adds some error descriptions requested in issue https://github.com/rust-lang/rust/issues/32777.\n\nr? @GuillaumeGomez\n\nSpecifically this adds descriptions for\n\nE0182 - unexpected binding of associated item in expression path\nE0230 - missing type parameter from on_unimplemented description\nE0399 - overriding a trait type without re-implementing default methods", "tree": {"sha": "acb6a19188728d388cf5064b84f526d71a793861", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb6a19188728d388cf5064b84f526d71a793861"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dee00f5454e0bad675bfb535839dff7b789e67e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dee00f5454e0bad675bfb535839dff7b789e67e", "html_url": "https://github.com/rust-lang/rust/commit/0dee00f5454e0bad675bfb535839dff7b789e67e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dee00f5454e0bad675bfb535839dff7b789e67e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8133a55e05ea08d41483b3a21d88774fb4b2a70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8133a55e05ea08d41483b3a21d88774fb4b2a70f", "html_url": "https://github.com/rust-lang/rust/commit/8133a55e05ea08d41483b3a21d88774fb4b2a70f"}, {"sha": "93655863a34d8bb5c9a840cc89975a79de3b35c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/93655863a34d8bb5c9a840cc89975a79de3b35c4", "html_url": "https://github.com/rust-lang/rust/commit/93655863a34d8bb5c9a840cc89975a79de3b35c4"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "2bd76f3ec6de17ca6564f68b5180f72f39a14930", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 101, "deletions": 4, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/0dee00f5454e0bad675bfb535839dff7b789e67e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dee00f5454e0bad675bfb535839dff7b789e67e/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=0dee00f5454e0bad675bfb535839dff7b789e67e", "patch": "@@ -1915,6 +1915,45 @@ More details can be found in [RFC 438].\n [RFC 438]: https://github.com/rust-lang/rfcs/pull/438\n \"##,\n \n+E0182: r##\"\n+You bound an associated type in an expression path which is not\n+allowed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0182\n+trait Foo {\n+    type A;\n+    fn bar() -> isize;\n+}\n+\n+impl Foo for isize {\n+    type A = usize;\n+    fn bar() -> isize { 42 }\n+}\n+\n+// error: unexpected binding of associated item in expression path\n+let x: isize = Foo::<A=usize>::bar();\n+```\n+\n+To give a concrete type when using the Universal Function Call Syntax,\n+use \"Type as Trait\". Example:\n+\n+```\n+trait Foo {\n+    type A;\n+    fn bar() -> isize;\n+}\n+\n+impl Foo for isize {\n+    type A = usize;\n+    fn bar() -> isize { 42 }\n+}\n+\n+let x: isize = <isize as Foo>::bar(); // ok!\n+```\n+\"##,\n+\n E0184: r##\"\n Explicitly implementing both Drop and Copy for a type is currently disallowed.\n This feature can make some sense in theory, but the current implementation is\n@@ -2752,6 +2791,30 @@ fn main() {\n ```\n \"##,\n \n+E0230: r##\"\n+The trait has more type parameters specified than appear in its definition.\n+\n+Erroneous example code:\n+\n+```compile_fail,E0230\n+#![feature(on_unimplemented)]\n+#[rustc_on_unimplemented = \"Trait error on `{Self}` with `<{A},{B},{C}>`\"]\n+// error: there is no type parameter C on trait TraitWithThreeParams\n+trait TraitWithThreeParams<A,B>\n+{}\n+```\n+\n+Include the correct number of type parameters and the compilation should\n+proceed:\n+\n+```\n+#![feature(on_unimplemented)]\n+#[rustc_on_unimplemented = \"Trait error on `{Self}` with `<{A},{B},{C}>`\"]\n+trait TraitWithThreeParams<A,B,C> // ok!\n+{}\n+```\n+\"##,\n+\n E0232: r##\"\n The attribute must have a value. Erroneous code example:\n \n@@ -3587,6 +3650,44 @@ fn together_we_will_rule_the_galaxy(son: &A<i32>) {} // Ok!\n ```\n \"##,\n \n+E0399: r##\"\n+You implemented a trait, overriding one or more of its associated types but did\n+not reimplement its default methods.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0399\n+#![feature(associated_type_defaults)]\n+\n+pub trait Foo {\n+    type Assoc = u8;\n+    fn bar(&self) {}\n+}\n+\n+impl Foo for i32 {\n+    // error - the following trait items need to be reimplemented as\n+    //         `Assoc` was overridden: `bar`\n+    type Assoc = i32;\n+}\n+```\n+\n+To fix this, add an implementation for each default method from the trait:\n+\n+```\n+#![feature(associated_type_defaults)]\n+\n+pub trait Foo {\n+    type Assoc = u8;\n+    fn bar(&self) {}\n+}\n+\n+impl Foo for i32 {\n+    type Assoc = i32;\n+    fn bar(&self) {} // ok!\n+}\n+```\n+\"##,\n+\n E0439: r##\"\n The length of the platform-intrinsic function `simd_shuffle`\n wasn't specified. Erroneous code example:\n@@ -4074,7 +4175,6 @@ register_diagnostics! {\n //  E0168,\n //  E0173, // manual implementations of unboxed closure traits are experimental\n //  E0174,\n-    E0182,\n     E0183,\n //  E0187, // can't infer the kind of the closure\n //  E0188, // can not cast an immutable reference to a mutable pointer\n@@ -4098,7 +4198,6 @@ register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0227, // ambiguous lifetime bound, explicit lifetime bound required\n     E0228, // explicit lifetime bound required\n-    E0230, // there is no type parameter on trait\n     E0231, // only named substitution parameters are allowed\n //  E0233,\n //  E0234,\n@@ -4120,8 +4219,6 @@ register_diagnostics! {\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0399, // trait items need to be implemented because the associated\n-           // type `{}` was overridden\n     E0436, // functional record update requires a struct\n     E0521, // redundant default implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant"}]}