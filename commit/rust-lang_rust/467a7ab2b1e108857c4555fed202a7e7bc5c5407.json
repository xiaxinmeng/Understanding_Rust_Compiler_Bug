{"sha": "467a7ab2b1e108857c4555fed202a7e7bc5c5407", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2N2E3YWIyYjFlMTA4ODU3YzQ1NTVmZWQyMDJhN2U3YmM1YzU0MDc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-02T23:05:00Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-08-06T20:20:04Z"}, "message": "Discern between various kinds of non-macro attributes", "tree": {"sha": "57e0f81c30b709eca25ac96574888fd18f53cdcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e0f81c30b709eca25ac96574888fd18f53cdcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/467a7ab2b1e108857c4555fed202a7e7bc5c5407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/467a7ab2b1e108857c4555fed202a7e7bc5c5407", "html_url": "https://github.com/rust-lang/rust/commit/467a7ab2b1e108857c4555fed202a7e7bc5c5407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/467a7ab2b1e108857c4555fed202a7e7bc5c5407/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2397437530eecef72a1524a7e0a4b42034fa360", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2397437530eecef72a1524a7e0a4b42034fa360", "html_url": "https://github.com/rust-lang/rust/commit/b2397437530eecef72a1524a7e0a4b42034fa360"}], "stats": {"total": 113, "additions": 73, "deletions": 40}, "files": [{"sha": "ea0b7ae5a1cbd8dc4a21952c14b2d5528eb1c5a1", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -28,6 +28,18 @@ pub enum CtorKind {\n     Fictive,\n }\n \n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+pub enum NonMacroAttrKind {\n+    /// Single-segment attribute defined by the language (`#[inline]`)\n+    Builtin,\n+    /// Multi-segment custom attribute living in a \"tool module\" (`#[rustfmt::skip]`).\n+    Tool,\n+    /// Single-segment custom attribute registered by a derive macro (`#[serde(default)]`).\n+    DeriveHelper,\n+    /// Single-segment custom attribute not registered in any way (`#[my_attr]`).\n+    Custom,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Def {\n     // Type namespace\n@@ -68,7 +80,7 @@ pub enum Def {\n \n     // Macro namespace\n     Macro(DefId, MacroKind),\n-    NonMacroAttr, // e.g. `#[inline]` or `#[rustfmt::skip]`\n+    NonMacroAttr(NonMacroAttrKind), // e.g. `#[inline]` or `#[rustfmt::skip]`\n \n     GlobalAsm(DefId),\n \n@@ -242,6 +254,17 @@ impl CtorKind {\n     }\n }\n \n+impl NonMacroAttrKind {\n+    fn descr(self) -> &'static str {\n+        match self {\n+            NonMacroAttrKind::Builtin => \"built-in attribute\",\n+            NonMacroAttrKind::Tool => \"tool attribute\",\n+            NonMacroAttrKind::DeriveHelper => \"derive helper attribute\",\n+            NonMacroAttrKind::Custom => \"custom attribute\",\n+        }\n+    }\n+}\n+\n impl Def {\n     pub fn def_id(&self) -> DefId {\n         match *self {\n@@ -262,7 +285,7 @@ impl Def {\n             Def::PrimTy(..) |\n             Def::SelfTy(..) |\n             Def::ToolMod |\n-            Def::NonMacroAttr |\n+            Def::NonMacroAttr(..) |\n             Def::Err => {\n                 bug!(\"attempted .def_id() on invalid def: {:?}\", self)\n             }\n@@ -304,7 +327,7 @@ impl Def {\n             Def::Macro(.., macro_kind) => macro_kind.descr(),\n             Def::GlobalAsm(..) => \"global asm\",\n             Def::ToolMod => \"tool module\",\n-            Def::NonMacroAttr => \"non-macro attribute\",\n+            Def::NonMacroAttr(attr_kind) => attr_kind.descr(),\n             Def::Err => \"unresolved item\",\n         }\n     }"}, {"sha": "4af68a499071fd620b0e0bf80f0a5bf4d2678fc8", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -988,6 +988,13 @@ impl_stable_hash_for!(enum hir::def::CtorKind {\n     Fictive\n });\n \n+impl_stable_hash_for!(enum hir::def::NonMacroAttrKind {\n+    Builtin,\n+    Tool,\n+    DeriveHelper,\n+    Custom,\n+});\n+\n impl_stable_hash_for!(enum hir::def::Def {\n     Mod(def_id),\n     Struct(def_id),\n@@ -1017,7 +1024,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     Macro(def_id, macro_kind),\n     GlobalAsm(def_id),\n     ToolMod,\n-    NonMacroAttr,\n+    NonMacroAttr(attr_kind),\n     Err\n });\n "}, {"sha": "f79e58f12a81f8df70a298fb908fed37c6183be8", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -630,8 +630,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n     pub fn get_macro(&mut self, def: Def) -> Lrc<SyntaxExtension> {\n         let def_id = match def {\n             Def::Macro(def_id, ..) => def_id,\n-            Def::NonMacroAttr => return Lrc::new(SyntaxExtension::NonMacroAttr),\n-            _ => panic!(\"Expected Def::Macro(..) or Def::NonMacroAttr\"),\n+            Def::NonMacroAttr(..) => return Lrc::new(SyntaxExtension::NonMacroAttr),\n+            _ => panic!(\"expected `Def::Macro` or `Def::NonMacroAttr`\"),\n         };\n         if let Some(ext) = self.macro_map.get(&def_id) {\n             return ext.clone();"}, {"sha": "cc5220de33bb63c94ab32fb30eaa8dab9ea3e822", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -3514,7 +3514,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     if let Some(next_module) = binding.module() {\n                         module = Some(next_module);\n                     } else if def == Def::ToolMod && i + 1 != path.len() {\n-                        return PathResult::NonModule(PathResolution::new(Def::NonMacroAttr))\n+                        let def = Def::NonMacroAttr(NonMacroAttrKind::Tool);\n+                        return PathResult::NonModule(PathResolution::new(def));\n                     } else if def == Def::Err {\n                         return PathResult::NonModule(err_path_resolution());\n                     } else if opt_ns.is_some() && (is_last || maybe_assoc) {"}, {"sha": "c728ebe08395952ec04357983f3082e70a8d894e", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -15,7 +15,7 @@ use build_reduced_graph::{BuildReducedGraphVisitor, IsMacroExport};\n use resolve_imports::ImportResolver;\n use rustc::hir::def_id::{DefId, BUILTIN_MACROS_CRATE, CRATE_DEF_INDEX, DefIndex,\n                          DefIndexAddressSpace};\n-use rustc::hir::def::{Def, Export};\n+use rustc::hir::def::{Def, Export, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n use rustc::{ty, lint};\n use rustc::middle::cstore::CrateStore;\n@@ -329,16 +329,17 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n         if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n             self.report_proc_macro_stub(invoc.span());\n             return Err(Determinacy::Determined);\n-        } else if let Def::NonMacroAttr = def {\n-            if let InvocationKind::Attr { .. } = invoc.kind {\n+        } else if let Def::NonMacroAttr(attr_kind) = def {\n+            let is_attr = if let InvocationKind::Attr { .. } = invoc.kind { true } else { false };\n+            if is_attr && attr_kind == NonMacroAttrKind::Tool {\n                 if !self.session.features_untracked().tool_attributes {\n                     feature_err(&self.session.parse_sess, \"tool_attributes\",\n                                 invoc.span(), GateIssue::Language,\n                                 \"tool attributes are unstable\").emit();\n                 }\n                 return Ok(Some(Lrc::new(SyntaxExtension::NonMacroAttr)));\n             } else {\n-                self.report_non_macro_attr(invoc.path_span());\n+                self.report_non_macro_attr(invoc.path_span(), def);\n                 return Err(Determinacy::Determined);\n             }\n         }\n@@ -363,8 +364,8 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             if let Def::Macro(_, MacroKind::ProcMacroStub) = def {\n                 self.report_proc_macro_stub(path.span);\n                 return Err(Determinacy::Determined);\n-            } else if let Def::NonMacroAttr = def {\n-                self.report_non_macro_attr(path.span);\n+            } else if let Def::NonMacroAttr(..) = def {\n+                self.report_non_macro_attr(path.span, def);\n                 return Err(Determinacy::Determined);\n             }\n             self.unused_macros.remove(&def.def_id());\n@@ -396,9 +397,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                               \"can't use a procedural macro from the same crate that defines it\");\n     }\n \n-    fn report_non_macro_attr(&self, span: Span) {\n-        self.session.span_err(span,\n-                              \"expected a macro, found non-macro attribute\");\n+    fn report_non_macro_attr(&self, span: Span, def: Def) {\n+        self.session.span_err(span, &format!(\"expected a macro, found {}\", def.kind_name()));\n     }\n \n     fn resolve_invoc_to_def(&mut self, invoc: &mut Invocation, scope: Mark, force: bool)\n@@ -481,7 +481,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                                       \"generic arguments in macro path\");\n             });\n         }\n-        if kind != MacroKind::Bang && path.segments.len() > 1 && def != Ok(Def::NonMacroAttr) {\n+        if kind != MacroKind::Bang && path.segments.len() > 1 &&\n+           def != Ok(Def::NonMacroAttr(NonMacroAttrKind::Tool)) {\n             if !self.session.features_untracked().proc_macro_path_invoc {\n                 emit_feature_err(\n                     &self.session.parse_sess,\n@@ -647,8 +648,9 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 }\n                 WhereToResolve::BuiltinAttrs => {\n                     if is_builtin_attr_name(ident.name) {\n-                        let binding = (Def::NonMacroAttr, ty::Visibility::Public,\n-                                       ident.span, Mark::root()).to_name_binding(self.arenas);\n+                        let binding = (Def::NonMacroAttr(NonMacroAttrKind::Builtin),\n+                                       ty::Visibility::Public, ident.span, Mark::root())\n+                                       .to_name_binding(self.arenas);\n                         Ok(MacroBinding::Global(binding))\n                     } else {\n                         Err(Determinacy::Determined)"}, {"sha": "24551e87d36b3b2326233afcab4bc88fa7ff571f", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -812,7 +812,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::Macro(..) |\n             HirDef::GlobalAsm(..) |\n             HirDef::ToolMod |\n-            HirDef::NonMacroAttr |\n+            HirDef::NonMacroAttr(..) |\n             HirDef::Err => None,\n         }\n     }"}, {"sha": "50525e03acf50cebfe0db56e82262cbdf6ddc9c9", "filename": "src/test/ui/issue-11692-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fissue-11692-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fissue-11692-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11692-2.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     concat!(test!());\n-    //~^ ERROR expected a macro, found non-macro attribute\n+    //~^ ERROR expected a macro, found built-in attribute\n }"}, {"sha": "0c130943fd873e789d5d828bc21f1eb228f3791a", "filename": "src/test/ui/issue-11692-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fissue-11692-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fissue-11692-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-11692-2.stderr?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -1,4 +1,4 @@\n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found built-in attribute\n   --> $DIR/issue-11692-2.rs:12:13\n    |\n LL |     concat!(test!());"}, {"sha": "bdbc7bd660fcdaf0f9cdbbfd8adfd0f91834733f", "filename": "src/test/ui/macro-path-prelude-fail-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -10,9 +10,9 @@\n \n #![feature(use_extern_macros)]\n \n-#[derive(inline)] //~ ERROR expected a macro, found non-macro attribute\n+#[derive(inline)] //~ ERROR expected a macro, found built-in attribute\n struct S;\n \n fn main() {\n-    inline!(); //~ ERROR expected a macro, found non-macro attribute\n+    inline!(); //~ ERROR expected a macro, found built-in attribute\n }"}, {"sha": "396bba2408f32231b07f5630100810ff18167b63", "filename": "src/test/ui/macro-path-prelude-fail-3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-path-prelude-fail-3.stderr?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -1,13 +1,13 @@\n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found built-in attribute\n   --> $DIR/macro-path-prelude-fail-3.rs:13:10\n    |\n-LL | #[derive(inline)] //~ ERROR expected a macro, found non-macro attribute\n+LL | #[derive(inline)] //~ ERROR expected a macro, found built-in attribute\n    |          ^^^^^^\n \n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found built-in attribute\n   --> $DIR/macro-path-prelude-fail-3.rs:17:5\n    |\n-LL |     inline!(); //~ ERROR expected a macro, found non-macro attribute\n+LL |     inline!(); //~ ERROR expected a macro, found built-in attribute\n    |     ^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "bdbd80e7a01b1f7a283b68c39cae130baabd2f4c", "filename": "src/test/ui/tool-attributes-misplaced-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -11,7 +11,7 @@\n #![feature(tool_attributes)]\n \n type A = rustfmt; //~ ERROR expected type, found tool module `rustfmt`\n-type B = rustfmt::skip; //~ ERROR expected type, found non-macro attribute `rustfmt::skip`\n+type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::skip`\n \n #[derive(rustfmt)] //~ ERROR cannot find derive macro `rustfmt` in this scope\n struct S;\n@@ -24,5 +24,5 @@ fn main() {\n     rustfmt; //~ ERROR expected value, found tool module `rustfmt`\n     rustfmt!(); //~ ERROR cannot find macro `rustfmt!` in this scope\n \n-    rustfmt::skip; //~ ERROR expected value, found non-macro attribute `rustfmt::skip`\n+    rustfmt::skip; //~ ERROR expected value, found tool attribute `rustfmt::skip`\n }"}, {"sha": "5673c7f5305226c4b033b7aab6fec59e12836caa", "filename": "src/test/ui/tool-attributes-misplaced-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-1.stderr?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -22,10 +22,10 @@ error[E0573]: expected type, found tool module `rustfmt`\n LL | type A = rustfmt; //~ ERROR expected type, found tool module `rustfmt`\n    |          ^^^^^^^ not a type\n \n-error[E0573]: expected type, found non-macro attribute `rustfmt::skip`\n+error[E0573]: expected type, found tool attribute `rustfmt::skip`\n   --> $DIR/tool-attributes-misplaced-1.rs:14:10\n    |\n-LL | type B = rustfmt::skip; //~ ERROR expected type, found non-macro attribute `rustfmt::skip`\n+LL | type B = rustfmt::skip; //~ ERROR expected type, found tool attribute `rustfmt::skip`\n    |          ^^^^^^^^^^^^^ not a type\n \n error[E0423]: expected value, found tool module `rustfmt`\n@@ -34,10 +34,10 @@ error[E0423]: expected value, found tool module `rustfmt`\n LL |     rustfmt; //~ ERROR expected value, found tool module `rustfmt`\n    |     ^^^^^^^ not a value\n \n-error[E0423]: expected value, found non-macro attribute `rustfmt::skip`\n+error[E0423]: expected value, found tool attribute `rustfmt::skip`\n   --> $DIR/tool-attributes-misplaced-1.rs:27:5\n    |\n-LL |     rustfmt::skip; //~ ERROR expected value, found non-macro attribute `rustfmt::skip`\n+LL |     rustfmt::skip; //~ ERROR expected value, found tool attribute `rustfmt::skip`\n    |     ^^^^^^^^^^^^^ not a value\n \n error: aborting due to 7 previous errors"}, {"sha": "102edf2813b213eaac89ebb7648eb95ab1849830", "filename": "src/test/ui/tool-attributes-misplaced-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.rs?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -10,9 +10,9 @@\n \n #![feature(tool_attributes)]\n \n-#[derive(rustfmt::skip)] //~ ERROR expected a macro, found non-macro attribute\n+#[derive(rustfmt::skip)] //~ ERROR expected a macro, found tool attribute\n struct S;\n \n fn main() {\n-    rustfmt::skip!(); //~ ERROR expected a macro, found non-macro attribute\n+    rustfmt::skip!(); //~ ERROR expected a macro, found tool attribute\n }"}, {"sha": "5b968cd6b8ecdd31268d54377f12001160a9a8c2", "filename": "src/test/ui/tool-attributes-misplaced-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/467a7ab2b1e108857c4555fed202a7e7bc5c5407/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes-misplaced-2.stderr?ref=467a7ab2b1e108857c4555fed202a7e7bc5c5407", "patch": "@@ -1,13 +1,13 @@\n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found tool attribute\n   --> $DIR/tool-attributes-misplaced-2.rs:13:10\n    |\n-LL | #[derive(rustfmt::skip)] //~ ERROR expected a macro, found non-macro attribute\n+LL | #[derive(rustfmt::skip)] //~ ERROR expected a macro, found tool attribute\n    |          ^^^^^^^^^^^^^\n \n-error: expected a macro, found non-macro attribute\n+error: expected a macro, found tool attribute\n   --> $DIR/tool-attributes-misplaced-2.rs:17:5\n    |\n-LL |     rustfmt::skip!(); //~ ERROR expected a macro, found non-macro attribute\n+LL |     rustfmt::skip!(); //~ ERROR expected a macro, found tool attribute\n    |     ^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}]}