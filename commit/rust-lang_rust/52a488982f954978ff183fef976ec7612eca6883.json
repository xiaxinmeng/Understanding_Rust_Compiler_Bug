{"sha": "52a488982f954978ff183fef976ec7612eca6883", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYTQ4ODk4MmY5NTQ5NzhmZjE4M2ZlZjk3NmVjNzYxMmVjYTY4ODM=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-06-27T07:26:28Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2020-06-27T10:56:54Z"}, "message": "Bump rustc_lexer", "tree": {"sha": "80ca0ff4d5fa66dca2a7db2e8865a5eee6e87676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80ca0ff4d5fa66dca2a7db2e8865a5eee6e87676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52a488982f954978ff183fef976ec7612eca6883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52a488982f954978ff183fef976ec7612eca6883", "html_url": "https://github.com/rust-lang/rust/commit/52a488982f954978ff183fef976ec7612eca6883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52a488982f954978ff183fef976ec7612eca6883/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d036006c95cde8844f527109c4a34b7e122c34e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d036006c95cde8844f527109c4a34b7e122c34e8", "html_url": "https://github.com/rust-lang/rust/commit/d036006c95cde8844f527109c4a34b7e122c34e8"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "c040bfb9589e7fe9ebc35e2e540ea85268fb8f1f", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52a488982f954978ff183fef976ec7612eca6883/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/52a488982f954978ff183fef976ec7612eca6883/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=52a488982f954978ff183fef976ec7612eca6883", "patch": "@@ -1420,9 +1420,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"661.0.0\"\n+version = \"666.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a6d88abd7c634b52557e46fc7ba47644f0cbe45c358c33f51c532d60d1da239e\"\n+checksum = \"4e00c526f9f8430ea4cd2178d25b02bfc7debe6677350c57292f92f50e65d2fe\"\n dependencies = [\n  \"unicode-xid\",\n ]"}, {"sha": "49696ce758dc1738ee2bf97526d2ba9ec0af73af", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52a488982f954978ff183fef976ec7612eca6883/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/52a488982f954978ff183fef976ec7612eca6883/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=52a488982f954978ff183fef976ec7612eca6883", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n itertools = \"0.9.0\"\n rowan = \"0.10.0\"\n-rustc_lexer = { version = \"661.0.0\", package = \"rustc-ap-rustc_lexer\" }\n+rustc_lexer = { version = \"666.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n once_cell = \"1.3.1\""}, {"sha": "fa3be101622d8a5afb4f5abce01f125c9ce42616", "filename": "crates/ra_syntax/src/parsing/lexer.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52a488982f954978ff183fef976ec7612eca6883/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52a488982f954978ff183fef976ec7612eca6883/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Flexer.rs?ref=52a488982f954978ff183fef976ec7612eca6883", "patch": "@@ -1,6 +1,8 @@\n //! Lexer analyzes raw input string and produces lexemes (tokens).\n //! It is just a bridge to `rustc_lexer`.\n \n+use rustc_lexer::{LiteralKind as LK, RawStrError};\n+\n use std::convert::TryInto;\n \n use crate::{\n@@ -180,8 +182,6 @@ fn rustc_token_kind_to_syntax_kind(\n     return (syntax_kind, None);\n \n     fn match_literal_kind(kind: &rustc_lexer::LiteralKind) -> (SyntaxKind, Option<&'static str>) {\n-        use rustc_lexer::{LexRawStrError, LiteralKind as LK};\n-\n         #[rustfmt::skip]\n         let syntax_kind = match *kind {\n             LK::Int { empty_int: false, .. } => INT_NUMBER,\n@@ -215,27 +215,27 @@ fn rustc_token_kind_to_syntax_kind(\n                 return (BYTE_STRING, Some(\"Missing trailing `\\\"` symbol to terminate the byte string literal\"))\n             }\n \n-            LK::RawStr(str) => match str.validate() {\n-                Ok(_) => RAW_STRING,\n-                Err(LexRawStrError::InvalidStarter) => return (RAW_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\")),\n-                Err(LexRawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n+            LK::RawStr { err, .. } => match err {\n+                None => RAW_STRING,\n+                Some(RawStrError::InvalidStarter { .. }) => return (RAW_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw string literal\")),\n+                Some(RawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n                     return (RAW_STRING, Some(\"Missing trailing `\\\"` to terminate the raw string literal\"))\n                 } else {\n                     return (RAW_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw string literal\"))\n \n                 },\n-                Err(LexRawStrError::TooManyDelimiters { .. }) => return (RAW_STRING, Some(\"Too many `#` symbols: raw strings may be delimited by up to 65535 `#` symbols\")),\n+                Some(RawStrError::TooManyDelimiters { .. }) => return (RAW_STRING, Some(\"Too many `#` symbols: raw strings may be delimited by up to 65535 `#` symbols\")),\n             },\n-            LK::RawByteStr(str) => match str.validate() {\n-                Ok(_) => RAW_BYTE_STRING,\n-                Err(LexRawStrError::InvalidStarter) => return (RAW_BYTE_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\")),\n-                Err(LexRawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n+            LK::RawByteStr { err, .. } => match err {\n+                None => RAW_BYTE_STRING,\n+                Some(RawStrError::InvalidStarter { .. }) => return (RAW_BYTE_STRING, Some(\"Missing `\\\"` symbol after `#` symbols to begin the raw byte string literal\")),\n+                Some(RawStrError::NoTerminator { expected, found, .. }) => if expected == found {\n                     return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` to terminate the raw byte string literal\"))\n                 } else {\n                     return (RAW_BYTE_STRING, Some(\"Missing trailing `\\\"` with `#` symbols to terminate the raw byte string literal\"))\n \n                 },\n-                Err(LexRawStrError::TooManyDelimiters { .. }) => return (RAW_BYTE_STRING, Some(\"Too many `#` symbols: raw byte strings may be delimited by up to 65535 `#` symbols\")),\n+                Some(RawStrError::TooManyDelimiters { .. }) => return (RAW_BYTE_STRING, Some(\"Too many `#` symbols: raw byte strings may be delimited by up to 65535 `#` symbols\")),\n             },\n         };\n "}]}