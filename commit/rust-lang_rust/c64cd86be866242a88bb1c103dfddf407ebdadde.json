{"sha": "c64cd86be866242a88bb1c103dfddf407ebdadde", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NGNkODZiZTg2NjI0MmE4OGJiMWMxMDNkZmRkZjQwN2ViZGFkZGU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-17T00:42:14Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-18T03:13:41Z"}, "message": "Add field `parent` to `ImportDirective`.", "tree": {"sha": "a832860e5b84ae510ccaa5b4080c93819e25f747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a832860e5b84ae510ccaa5b4080c93819e25f747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c64cd86be866242a88bb1c103dfddf407ebdadde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c64cd86be866242a88bb1c103dfddf407ebdadde", "html_url": "https://github.com/rust-lang/rust/commit/c64cd86be866242a88bb1c103dfddf407ebdadde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c64cd86be866242a88bb1c103dfddf407ebdadde/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d107d2259098a2d683bb7c92876ec0abdf4716ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d107d2259098a2d683bb7c92876ec0abdf4716ca", "html_url": "https://github.com/rust-lang/rust/commit/d107d2259098a2d683bb7c92876ec0abdf4716ca"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "742d955e38a2b28abb013a3a95d3bd25f3f16847", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c64cd86be866242a88bb1c103dfddf407ebdadde/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64cd86be866242a88bb1c103dfddf407ebdadde/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c64cd86be866242a88bb1c103dfddf407ebdadde", "patch": "@@ -756,7 +756,7 @@ pub struct ModuleS<'a> {\n \n     no_implicit_prelude: Cell<bool>,\n \n-    glob_importers: RefCell<Vec<(Module<'a>, &'a ImportDirective<'a>)>>,\n+    glob_importers: RefCell<Vec<&'a ImportDirective<'a>>>,\n     globs: RefCell<Vec<&'a ImportDirective<'a>>>,\n \n     // Used to memoize the traits in this module for faster searches through all traits in scope."}, {"sha": "83b1f64a33a9a063528493288f6d73b9181c5433", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c64cd86be866242a88bb1c103dfddf407ebdadde/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64cd86be866242a88bb1c103dfddf407ebdadde/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c64cd86be866242a88bb1c103dfddf407ebdadde", "patch": "@@ -63,6 +63,7 @@ impl ImportDirectiveSubclass {\n #[derive(Debug,Clone)]\n pub struct ImportDirective<'a> {\n     pub id: NodeId,\n+    parent: Module<'a>,\n     module_path: Vec<Name>,\n     target_module: Cell<Option<Module<'a>>>, // the resolution of `module_path`\n     subclass: ImportDirectiveSubclass,\n@@ -223,6 +224,7 @@ impl<'a> Resolver<'a> {\n                                 id: NodeId,\n                                 vis: ty::Visibility) {\n         let directive = self.arenas.alloc_import_directive(ImportDirective {\n+            parent: self.current_module,\n             module_path: module_path,\n             target_module: Cell::new(None),\n             subclass: subclass,\n@@ -306,9 +308,9 @@ impl<'a> Resolver<'a> {\n \n         // Define `new_binding` in `module`s glob importers.\n         if new_binding.is_importable() && new_binding.is_pseudo_public() {\n-            for &(importer, directive) in module.glob_importers.borrow_mut().iter() {\n+            for directive in module.glob_importers.borrow_mut().iter() {\n                 let imported_binding = self.import(new_binding, directive);\n-                let _ = self.try_define(importer, name, ns, imported_binding);\n+                let _ = self.try_define(directive.parent, name, ns, imported_binding);\n             }\n         }\n \n@@ -317,8 +319,6 @@ impl<'a> Resolver<'a> {\n }\n \n struct ImportResolvingError<'a> {\n-    /// Module where the error happened\n-    source_module: Module<'a>,\n     import_directive: &'a ImportDirective<'a>,\n     span: Span,\n     help: String,\n@@ -402,9 +402,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n     // Define a \"dummy\" resolution containing a Def::Err as a placeholder for a\n     // failed resolution\n-    fn import_dummy_binding(&mut self,\n-                            source_module: Module<'b>,\n-                            directive: &'b ImportDirective<'b>) {\n+    fn import_dummy_binding(&mut self, directive: &'b ImportDirective<'b>) {\n         if let SingleImport { target, .. } = directive.subclass {\n             let dummy_binding = self.arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Def(Def::Err),\n@@ -413,8 +411,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             });\n             let dummy_binding = self.import(dummy_binding, directive);\n \n-            let _ = self.try_define(source_module, target, ValueNS, dummy_binding.clone());\n-            let _ = self.try_define(source_module, target, TypeNS, dummy_binding);\n+            let _ = self.try_define(directive.parent, target, ValueNS, dummy_binding.clone());\n+            let _ = self.try_define(directive.parent, target, TypeNS, dummy_binding);\n         }\n     }\n \n@@ -423,7 +421,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n     fn import_resolving_error(&mut self, e: ImportResolvingError<'b>) {\n         // If the error is a single failed import then create a \"fake\" import\n         // resolution for it so that later resolve stages won't complain.\n-        self.import_dummy_binding(e.source_module, e.import_directive);\n+        self.import_dummy_binding(e.import_directive);\n         let path = import_path_to_string(&e.import_directive.module_path,\n                                          &e.import_directive.subclass);\n         resolve_error(self.resolver,\n@@ -445,7 +443,6 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         None => (import_directive.span, String::new()),\n                     };\n                     errors.push(ImportResolvingError {\n-                        source_module: self.current_module,\n                         import_directive: import_directive,\n                         span: span,\n                         help: help,\n@@ -511,7 +508,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                         .emit();\n                     // Do not import this illegal binding. Import a dummy binding and pretend\n                     // everything is fine\n-                    self.import_dummy_binding(module, directive);\n+                    self.import_dummy_binding(directive);\n                     return Success(());\n                 }\n                 Success(binding) if !self.is_accessible(binding.vis) => {}\n@@ -635,7 +632,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         }\n \n         // Add to target_module's glob_importers\n-        target_module.glob_importers.borrow_mut().push((module, directive));\n+        target_module.glob_importers.borrow_mut().push(directive);\n \n         // Ensure that `resolutions` isn't borrowed during `try_define`,\n         // since it might get updated via a glob cycle."}]}