{"sha": "ad1489195763b5f2603675dc75b0d86d903333db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkMTQ4OTE5NTc2M2I1ZjI2MDM2NzVkYzc1YjBkODZkOTAzMzMzZGI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-27T18:59:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-27T21:41:49Z"}, "message": "std: Stabilize the `env` module\n\nNow that the `std::env` module has had some time to bake this commit marks most\nof its APIs as `#[stable]`. Some notable APIs that are **not** stable (and still\nuse the same `env` feature gate) are:\n\n* `{set,get}_exit_status` - there are still questions about whether this is the\n  right interface for setting/getting the exit status of a process.\n* `page_size` - this may change location in the future or perhaps name as well.\n\nThis also effectively closes #22122 as the variants of `VarError` are\n`#[stable]` now. (this is done intentionally)", "tree": {"sha": "4dbaa50c73f832b50e7678718ad804b9f607137b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dbaa50c73f832b50e7678718ad804b9f607137b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad1489195763b5f2603675dc75b0d86d903333db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1489195763b5f2603675dc75b0d86d903333db", "html_url": "https://github.com/rust-lang/rust/commit/ad1489195763b5f2603675dc75b0d86d903333db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad1489195763b5f2603675dc75b0d86d903333db/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0d8e47e53f25bbd50418a0f117973c366c1b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0d8e47e53f25bbd50418a0f117973c366c1b08", "html_url": "https://github.com/rust-lang/rust/commit/bd0d8e47e53f25bbd50418a0f117973c366c1b08"}], "stats": {"total": 279, "additions": 86, "deletions": 193}, "files": [{"sha": "4993dd140d335daac402fd10c2bff54192bd3373", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -20,7 +20,6 @@\n #![feature(std_misc)]\n #![feature(test)]\n #![feature(unicode)]\n-#![feature(env)]\n #![feature(core)]\n \n #![deny(warnings)]"}, {"sha": "d0105bb65776eb6d216ba43580b2f768bbd41976", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -174,7 +174,6 @@\n #![feature(core)]\n #![feature(old_io)]\n #![feature(std_misc)]\n-#![feature(env)]\n \n use std::boxed;\n use std::cell::RefCell;"}, {"sha": "8b0d23b93415645a429f9b7ff996a7385fdd11cc", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -31,7 +31,6 @@\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]\n-#![feature(env)]\n #![feature(old_path)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "9005c666afbcdd254b1c3503b3796663e667a7e4", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -40,7 +40,6 @@\n #![feature(old_path)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(env)]\n #![feature(path)]\n \n extern crate syntax;"}, {"sha": "8ca61db99ac402ee566344659cce14557a676a98", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -26,7 +26,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]\n@@ -38,6 +37,7 @@\n #![feature(unsafe_destructor)]\n #![feature(staged_api)]\n #![feature(unicode)]\n+#![feature(exit_status)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "71317d5875b84fcdb1d3351632dfd0fa0dae1c06", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -30,7 +30,6 @@\n #![feature(core)]\n #![feature(int_uint)]\n #![feature(old_io)]\n-#![feature(env)]\n #![feature(libc)]\n #![feature(old_path)]\n #![feature(quote)]"}, {"sha": "a195de66fd46a60c83e9dce9fc70992805b11438", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -22,7 +22,7 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n+#![feature(exit_status)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]"}, {"sha": "1968ca4b9e7052cbad18612fd4ab8f21e13848df", "filename": "src/libstd/env.rs", "status": "modified", "additions": 84, "deletions": 183, "changes": 267, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -14,7 +14,7 @@\n //! environment varibles, process arguments, the current directory, and various\n //! other important directories.\n \n-#![unstable(feature = \"env\", reason = \"recently added via RFC 578\")]\n+#![stable(feature = \"env\", since = \"1.0.0\")]\n \n use prelude::v1::*;\n \n@@ -47,6 +47,7 @@ use sys::os as os_imp;\n /// let p = env::current_dir().unwrap();\n /// println!(\"The current directory is {}\", p.display());\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn current_dir() -> io::Result<PathBuf> {\n     os_imp::getcwd()\n }\n@@ -64,6 +65,7 @@ pub fn current_dir() -> io::Result<PathBuf> {\n /// assert!(env::set_current_dir(&root).is_ok());\n /// println!(\"Successfully changed working directory to {}!\", root.display());\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn set_current_dir<P: AsPath + ?Sized>(p: &P) -> io::Result<()> {\n     os_imp::chdir(p.as_path())\n }\n@@ -74,12 +76,14 @@ static ENV_LOCK: StaticMutex = MUTEX_INIT;\n ///\n /// This iterator is created through `std::env::vars()` and yields `(String,\n /// String)` pairs.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars { inner: VarsOs }\n \n /// An iterator over a snapshot of the environment variables of this process.\n ///\n /// This iterator is created through `std::env::vars_os()` and yields\n /// `(OsString, OsString)` pairs.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs { inner: os_imp::Env }\n \n /// Returns an iterator of (variable, value) pairs of strings, for all the\n@@ -106,6 +110,7 @@ pub struct VarsOs { inner: os_imp::Env }\n ///     println!(\"{}: {}\", key, value);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars() -> Vars {\n     Vars { inner: vars_os() }\n }\n@@ -128,11 +133,13 @@ pub fn vars() -> Vars {\n ///     println!(\"{:?}: {:?}\", key, value);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn vars_os() -> VarsOs {\n     let _g = ENV_LOCK.lock();\n     VarsOs { inner: os_imp::env() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for Vars {\n     type Item = (String, String);\n     fn next(&mut self) -> Option<(String, String)> {\n@@ -143,6 +150,7 @@ impl Iterator for Vars {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for VarsOs {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> { self.inner.next() }\n@@ -166,6 +174,7 @@ impl Iterator for VarsOs {\n ///     Err(e) => println!(\"couldn't interpret {}: {}\", key, e),\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n     match var_os(key) {\n         Some(s) => s.into_string().map_err(VarError::NotUnicode),\n@@ -187,24 +196,29 @@ pub fn var<K: ?Sized>(key: &K) -> Result<String, VarError> where K: AsOsStr {\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn var_os<K: ?Sized>(key: &K) -> Option<OsString> where K: AsOsStr {\n     let _g = ENV_LOCK.lock();\n     os_imp::getenv(key.as_os_str())\n }\n \n /// Possible errors from the `env::var` method.\n #[derive(Debug, PartialEq, Eq, Clone)]\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n     /// The specified environment variable was not present in the current\n     /// process's environment.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n     NotPresent,\n \n     /// The specified environment variable was found, but it did not contain\n     /// valid unicode data. The found data is returned as a payload of this\n     /// variant.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n     NotUnicode(OsString),\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl fmt::Display for VarError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -216,6 +230,7 @@ impl fmt::Display for VarError {\n     }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Error for VarError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -237,6 +252,7 @@ impl Error for VarError {\n /// env::set_var(key, \"VALUE\");\n /// assert_eq!(env::var(key), Ok(\"VALUE\".to_string()));\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n     where K: AsOsStr, V: AsOsStr\n {\n@@ -245,6 +261,7 @@ pub fn set_var<K: ?Sized, V: ?Sized>(k: &K, v: &V)\n }\n \n /// Remove a variable from the environment entirely.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn remove_var<K: ?Sized>(k: &K) where K: AsOsStr {\n     let _g = ENV_LOCK.lock();\n     os_imp::unsetenv(k.as_os_str())\n@@ -254,6 +271,7 @@ pub fn remove_var<K: ?Sized>(k: &K) where K: AsOsStr {\n /// according to platform-specific conventions.\n ///\n /// This structure is returned from `std::env::split_paths`.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n \n /// Parses input according to platform conventions for the `PATH`\n@@ -276,10 +294,12 @@ pub struct SplitPaths<'a> { inner: os_imp::SplitPaths<'a> }\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn split_paths<T: AsOsStr + ?Sized>(unparsed: &T) -> SplitPaths {\n     SplitPaths { inner: os_imp::split_paths(unparsed.as_os_str()) }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl<'a> Iterator for SplitPaths<'a> {\n     type Item = PathBuf;\n     fn next(&mut self) -> Option<PathBuf> { self.inner.next() }\n@@ -289,6 +309,7 @@ impl<'a> Iterator for SplitPaths<'a> {\n /// Error type returned from `std::env::join_paths` when paths fail to be\n /// joined.\n #[derive(Debug)]\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n     inner: os_imp::JoinPathsError\n }\n@@ -315,6 +336,7 @@ pub struct JoinPathsError {\n ///     env::set_var(\"PATH\", &new_path);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n     where I: Iterator<Item=T>, T: AsOsStr\n {\n@@ -323,12 +345,14 @@ pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n     })\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl fmt::Display for JoinPathsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.inner.fmt(f)\n     }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Error for JoinPathsError {\n     fn description(&self) -> &str { self.inner.description() }\n }\n@@ -357,6 +381,7 @@ impl Error for JoinPathsError {\n ///     None => println!(\"Impossible to get your home dir!\")\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn home_dir() -> Option<PathBuf> {\n     os_imp::home_dir()\n }\n@@ -371,6 +396,7 @@ pub fn home_dir() -> Option<PathBuf> {\n /// On Windows, returns the value of, in order, the 'TMP', 'TEMP',\n /// 'USERPROFILE' environment variable  if any are set and not the empty\n /// string. Otherwise, tmpdir returns the path to the Windows directory.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn temp_dir() -> PathBuf {\n     os_imp::temp_dir()\n }\n@@ -398,6 +424,7 @@ pub fn temp_dir() -> PathBuf {\n ///     Err(e) => println!(\"failed to get current exe path: {}\", e),\n /// };\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn current_exe() -> io::Result<PathBuf> {\n     os_imp::current_exe()\n }\n@@ -412,12 +439,14 @@ static EXIT_STATUS: AtomicIsize = ATOMIC_ISIZE_INIT;\n /// ignored and the process exits with the default panic status.\n ///\n /// Note that this is not synchronized against modifications of other threads.\n+#[unstable(feature = \"exit_status\", reason = \"managing the exit status may change\")]\n pub fn set_exit_status(code: i32) {\n     EXIT_STATUS.store(code as isize, Ordering::SeqCst)\n }\n \n /// Fetches the process's current exit code. This defaults to 0 and can change\n /// by calling `set_exit_status`.\n+#[unstable(feature = \"exit_status\", reason = \"managing the exit status may change\")]\n pub fn get_exit_status() -> i32 {\n     EXIT_STATUS.load(Ordering::SeqCst) as i32\n }\n@@ -426,12 +455,14 @@ pub fn get_exit_status() -> i32 {\n /// for each argument.\n ///\n /// This structure is created through the `std::env::args` method.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args { inner: ArgsOs }\n \n /// An iterator over the arguments of a process, yielding an `OsString` value\n /// for each argument.\n ///\n /// This structure is created through the `std::env::args_os` method.\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs { inner: os_imp::Args }\n \n /// Returns the arguments which this program was started with (normally passed\n@@ -457,6 +488,7 @@ pub struct ArgsOs { inner: os_imp::Args }\n ///     println!(\"{}\", argument);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn args() -> Args {\n     Args { inner: args_os() }\n }\n@@ -478,10 +510,12 @@ pub fn args() -> Args {\n ///     println!(\"{:?}\", argument);\n /// }\n /// ```\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn args_os() -> ArgsOs {\n     ArgsOs { inner: os_imp::args() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for Args {\n     type Item = String;\n     fn next(&mut self) -> Option<String> {\n@@ -490,333 +524,200 @@ impl Iterator for Args {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl ExactSizeIterator for Args {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl Iterator for ArgsOs {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> { self.inner.next() }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.inner.size_hint() }\n }\n \n+#[stable(feature = \"env\", since = \"1.0.0\")]\n impl ExactSizeIterator for ArgsOs {\n     fn len(&self) -> usize { self.inner.len() }\n }\n \n /// Returns the page size of the current architecture in bytes.\n+#[unstable(feature = \"page_size\", reason = \"naming and/or location may change\")]\n pub fn page_size() -> usize {\n     os_imp::page_size()\n }\n \n /// Constants associated with the current target\n-#[cfg(target_os = \"linux\")]\n+#[stable(feature = \"env\", since = \"1.0.0\")]\n pub mod consts {\n-    pub use super::arch_consts::ARCH;\n+    /// A string describing the architecture of the CPU that this is currently\n+    /// in use.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const ARCH: &'static str = super::arch::ARCH;\n \n-    pub const FAMILY: &'static str = \"unix\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const FAMILY: &'static str = super::os::FAMILY;\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `linux`.\n-    pub const OS: &'static str = \"linux\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const OS: &'static str = super::os::OS;\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n-    pub const DLL_PREFIX: &'static str = \"lib\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const DLL_PREFIX: &'static str = super::os::DLL_PREFIX;\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.so`.\n-    pub const DLL_SUFFIX: &'static str = \".so\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const DLL_SUFFIX: &'static str = super::os::DLL_SUFFIX;\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `so`.\n-    pub const DLL_EXTENSION: &'static str = \"so\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const DLL_EXTENSION: &'static str = super::os::DLL_EXTENSION;\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub const EXE_SUFFIX: &'static str = \"\";\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const EXE_SUFFIX: &'static str = super::os::EXE_SUFFIX;\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n+    #[stable(feature = \"env\", since = \"1.0.0\")]\n+    pub const EXE_EXTENSION: &'static str = super::os::EXE_EXTENSION;\n+\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"linux\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"macos\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `macos`.\n     pub const OS: &'static str = \"macos\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.dylib`.\n     pub const DLL_SUFFIX: &'static str = \".dylib\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `dylib`.\n     pub const DLL_EXTENSION: &'static str = \"dylib\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"ios\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `ios`.\n     pub const OS: &'static str = \"ios\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"freebsd\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `freebsd`.\n     pub const OS: &'static str = \"freebsd\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"dragonfly\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `dragonfly`.\n     pub const OS: &'static str = \"dragonfly\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"bitrig\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `bitrig`.\n     pub const OS: &'static str = \"bitrig\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"openbsd\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `openbsd`.\n     pub const OS: &'static str = \"openbsd\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"android\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"unix\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `android`.\n     pub const OS: &'static str = \"android\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, `lib`.\n     pub const DLL_PREFIX: &'static str = \"lib\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.so`.\n     pub const DLL_SUFFIX: &'static str = \".so\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `so`.\n     pub const DLL_EXTENSION: &'static str = \"so\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, the empty string.\n     pub const EXE_SUFFIX: &'static str = \"\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, the empty string.\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n-/// Constants associated with the current target\n #[cfg(target_os = \"windows\")]\n-pub mod consts {\n-    pub use super::arch_consts::ARCH;\n-\n+mod os {\n     pub const FAMILY: &'static str = \"windows\";\n-\n-    /// A string describing the specific operating system in use: in this\n-    /// case, `windows`.\n     pub const OS: &'static str = \"windows\";\n-\n-    /// Specifies the filename prefix used for shared libraries on this\n-    /// platform: in this case, the empty string.\n     pub const DLL_PREFIX: &'static str = \"\";\n-\n-    /// Specifies the filename suffix used for shared libraries on this\n-    /// platform: in this case, `.dll`.\n     pub const DLL_SUFFIX: &'static str = \".dll\";\n-\n-    /// Specifies the file extension used for shared libraries on this\n-    /// platform that goes after the dot: in this case, `dll`.\n     pub const DLL_EXTENSION: &'static str = \"dll\";\n-\n-    /// Specifies the filename suffix used for executable binaries on this\n-    /// platform: in this case, `.exe`.\n     pub const EXE_SUFFIX: &'static str = \".exe\";\n-\n-    /// Specifies the file extension, if any, used for executable binaries\n-    /// on this platform: in this case, `exe`.\n     pub const EXE_EXTENSION: &'static str = \"exe\";\n }\n \n #[cfg(target_arch = \"x86\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"x86\";\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"x86_64\";\n }\n \n #[cfg(target_arch = \"arm\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"arm\";\n }\n \n #[cfg(target_arch = \"aarch64\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"aarch64\";\n }\n \n #[cfg(target_arch = \"mips\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"mips\";\n }\n \n #[cfg(target_arch = \"mipsel\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"mipsel\";\n }\n \n #[cfg(target_arch = \"powerpc\")]\n-mod arch_consts {\n+mod arch {\n     pub const ARCH: &'static str = \"powerpc\";\n }\n "}, {"sha": "7acbd10ef03d818476adbcde6be57f32121c134c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -27,7 +27,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(libc)]"}, {"sha": "756d67b5db1e1a37212ee04f4e0a133d80ba856a", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -59,7 +59,6 @@\n #![feature(staged_api)]\n #![feature(unicode)]\n #![feature(std_misc)]\n-#![feature(env)]\n #![feature(os)]\n #![cfg_attr(windows, feature(libc))]\n "}, {"sha": "1e3428c3ff04e3249b125e447614877f5288e7f3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad1489195763b5f2603675dc75b0d86d903333db/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=ad1489195763b5f2603675dc75b0d86d903333db", "patch": "@@ -36,7 +36,6 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]\n-#![feature(env)]\n #![feature(int_uint)]\n #![feature(old_io)]\n #![feature(old_path)]"}]}