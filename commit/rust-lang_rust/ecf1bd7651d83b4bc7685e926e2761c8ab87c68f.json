{"sha": "ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZjFiZDc2NTFkODNiNGJjNzY4NWU5MjZlMjc2MWM4YWI4N2M2OGY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-06-04T20:04:40Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-06-04T21:10:04Z"}, "message": "rustc: Use spans on extfmt error messages\n\nIssue #444", "tree": {"sha": "295eea78b8bb4c298c72925f0ba92987139cff41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/295eea78b8bb4c298c72925f0ba92987139cff41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "html_url": "https://github.com/rust-lang/rust/commit/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "794221b353c1f0f031cdd6004476c3c6f4ebf867", "url": "https://api.github.com/repos/rust-lang/rust/commits/794221b353c1f0f031cdd6004476c3c6f4ebf867", "html_url": "https://github.com/rust-lang/rust/commit/794221b353c1f0f031cdd6004476c3c6f4ebf867"}], "stats": {"total": 97, "additions": 68, "deletions": 29}, "files": [{"sha": "e15bd3becf5224343d3f276e44532d0b422dab8c", "filename": "src/comp/front/extfmt.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Fcomp%2Ffront%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Fcomp%2Ffront%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fextfmt.rs?ref=ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "patch": "@@ -25,44 +25,45 @@ fn expand_syntax_ext(&ext_ctxt cx,\n                      option::t[str] body) -> @ast::expr {\n \n     if (vec::len[@ast::expr](args) == 0u) {\n-        // FIXME: Handle error correctly.\n-        log_err \"malformed #fmt call\";\n-        fail;\n+        cx.span_err(sp, \"#fmt requires a format string\");\n     }\n \n-    auto fmt = expr_to_str(args.(0));\n+    auto fmt = expr_to_str(cx, args.(0));\n \n     // log \"Format string:\";\n     // log fmt;\n \n     auto pieces = parse_fmt_string(fmt);\n     auto args_len = vec::len[@ast::expr](args);\n     auto fmt_args = vec::slice[@ast::expr](args, 1u, args_len - 1u);\n-    ret pieces_to_expr(p, pieces, args);\n+    ret pieces_to_expr(cx, p, sp, pieces, args);\n }\n \n-fn expr_to_str(@ast::expr expr) -> str {\n+fn expr_to_str(&ext_ctxt cx, @ast::expr expr) -> str {\n+    auto err_msg = \"first argument to #fmt must be a string literal\";\n     alt (expr.node) {\n         case (ast::expr_lit(?l, _)) {\n             alt (l.node) {\n                 case (ast::lit_str(?s)) {\n                     ret s;\n                 }\n-                case (_) { /* fallthrough */ }\n+                case (_) {\n+                    cx.span_err(l.span, err_msg);\n+                }\n             }\n         }\n-        case (_) { /* fallthrough */ }\n+        case (_) {\n+            cx.span_err(expr.span, err_msg);\n+        }\n     }\n-    log_err \"first argument to #fmt must be a string literal\";\n-    fail;\n }\n \n // FIXME: A lot of these functions for producing expressions can probably\n // be factored out in common with other code that builds expressions.\n // FIXME: Probably should be using the parser's span functions\n // FIXME: Cleanup the naming of these functions\n-fn pieces_to_expr(parser p, vec[piece] pieces, vec[@ast::expr] args)\n-        -> @ast::expr {\n+fn pieces_to_expr(&ext_ctxt cx, parser p, common::span sp,\n+                  vec[piece] pieces, vec[@ast::expr] args) -> @ast::expr {\n \n     fn make_new_lit(parser p, common::span sp, ast::lit_ lit) -> @ast::expr {\n         auto sp_lit = @rec(node=lit, span=sp);\n@@ -263,7 +264,8 @@ fn pieces_to_expr(parser p, vec[piece] pieces, vec[@ast::expr] args)\n         ret make_call(p, arg.span, path, args);\n     }\n \n-    fn make_new_conv(parser p, conv cnv, @ast::expr arg) -> @ast::expr {\n+    fn make_new_conv(&ext_ctxt cx, parser p, common::span sp,\n+                     conv cnv, @ast::expr arg) -> @ast::expr {\n \n         // FIXME: Extract all this validation into extfmt::ct\n         fn is_signed_type(conv cnv) -> bool {\n@@ -301,15 +303,14 @@ fn pieces_to_expr(parser p, vec[piece] pieces, vec[@ast::expr] args)\n                 }\n                 case (flag_sign_always) {\n                     if (!is_signed_type(cnv)) {\n-                        log_err \"+ flag only valid in signed #fmt conversion\";\n-                        fail;\n+                        cx.span_err(sp, \"+ flag only valid in \"\n+                                    + \"signed #fmt conversion\");\n                     }\n                 }\n                 case (flag_space_for_sign) {\n                     if (!is_signed_type(cnv)) {\n-                        log_err \"space flag only valid in \"\n-                            + \"signed #fmt conversions\";\n-                        fail;\n+                        cx.span_err(sp, \"space flag only valid in \"\n+                                    + \"signed #fmt conversions\");\n                     }\n                 }\n                 case (flag_left_zero_pad) {\n@@ -471,40 +472,41 @@ fn pieces_to_expr(parser p, vec[piece] pieces, vec[@ast::expr] args)\n         }\n     }\n \n-    auto sp = args.(0).span;\n+    auto fmt_sp = args.(0).span;\n     auto n = 0u;\n     auto tmp_expr = make_new_str(p, sp, \"\");\n     auto nargs = vec::len[@ast::expr](args);\n \n     for (piece pc in pieces) {\n         alt (pc) {\n             case (piece_string(?s)) {\n-                auto s_expr = make_new_str(p, sp, s);\n-                tmp_expr = make_add_expr(p, sp, tmp_expr, s_expr);\n+                auto s_expr = make_new_str(p, fmt_sp, s);\n+                tmp_expr = make_add_expr(p, fmt_sp, tmp_expr, s_expr);\n             }\n             case (piece_conv(?conv)) {\n+                n += 1u;\n+\n                 if (n >= nargs) {\n-                    log_err \"too many conversions in #fmt string\";\n-                    fail;\n+                    cx.span_err(sp, \"not enough arguments to #fmt \"\n+                                + \"for the given format string\");\n                 }\n \n                 // TODO: Remove debug logging\n                 //log \"Building conversion:\";\n                 //log_conv(conv);\n \n-                n += 1u;\n                 auto arg_expr = args.(n);\n-                auto c_expr = make_new_conv(p, conv, arg_expr);\n-                tmp_expr = make_add_expr(p, sp, tmp_expr, c_expr);\n+                auto c_expr = make_new_conv(cx, p, fmt_sp, conv, arg_expr);\n+                tmp_expr = make_add_expr(p, fmt_sp, tmp_expr, c_expr);\n             }\n         }\n     }\n \n     auto expected_nargs = n + 1u; // n conversions + the fmt string\n     if (expected_nargs < nargs) {\n-        log_err #fmt(\"too many arguments to #fmt. found %u, expected %u\",\n-                     nargs, expected_nargs);\n-        fail;\n+        cx.span_err(sp,\n+                    #fmt(\"too many arguments to #fmt. found %u, expected %u\",\n+                         nargs, expected_nargs));\n     }\n \n     // TODO: Remove this debug logging"}, {"sha": "d31939ead1b2583307b2cbc48b48febfb002b5ae", "filename": "src/test/compile-fail/extfmt-no-args.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-no-args.rs?ref=ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "patch": "@@ -0,0 +1,6 @@\n+// xfail-stage0\n+// error-pattern:format string\n+\n+fn main() {\n+  #fmt();\n+}"}, {"sha": "218263973d6b2edb404469fb90f7578b23814343", "filename": "src/test/compile-fail/extfmt-non-literal2.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-non-literal2.rs?ref=ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "patch": "@@ -0,0 +1,9 @@\n+// xfail-stage0\n+// error-pattern: literal\n+\n+fn main() {\n+  // #fmt's first argument must be a literal.  Hopefully this\n+  // restriction can be eased eventually to just require a\n+  // compile-time constant.\n+  auto x = #fmt(20);\n+}"}, {"sha": "80aad7bc03c5a4efce5568f8fcc7c02a246f216f", "filename": "src/test/compile-fail/extfmt-not-enough-args.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-not-enough-args.rs?ref=ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "patch": "@@ -0,0 +1,8 @@\n+// xfail-stage0\n+// error-pattern:not enough arguments\n+\n+use std;\n+\n+fn main() {\n+  auto s = #fmt(\"%s%s%s\", \"test\", \"test\");\n+}"}, {"sha": "a74f4dbfca0b17531ac76231bd75411cef5f3a36", "filename": "src/test/compile-fail/extfmt-unsigned-plus.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-plus.rs?ref=ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "patch": "@@ -0,0 +1,7 @@\n+// xfail-stage0\n+// error-pattern:only valid in signed #fmt conversion\n+\n+fn main() {\n+  // Can't use a sign on unsigned conversions\n+  #fmt(\"%+u\", 10u);\n+}"}, {"sha": "bd1b6c97968e0e1d571f2bfd4a16c3ba2423c416", "filename": "src/test/compile-fail/extfmt-unsigned-space.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf1bd7651d83b4bc7685e926e2761c8ab87c68f/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextfmt-unsigned-space.rs?ref=ecf1bd7651d83b4bc7685e926e2761c8ab87c68f", "patch": "@@ -0,0 +1,7 @@\n+// xfail-stage0\n+// error-pattern:only valid in signed #fmt conversion\n+\n+fn main() {\n+  // Can't use a space on unsigned conversions\n+  #fmt(\"% u\", 10u);\n+}"}]}