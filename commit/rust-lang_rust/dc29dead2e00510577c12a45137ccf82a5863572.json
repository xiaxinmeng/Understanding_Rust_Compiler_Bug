{"sha": "dc29dead2e00510577c12a45137ccf82a5863572", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMjlkZWFkMmUwMDUxMDU3N2MxMmE0NTEzN2NjZjgyYTU4NjM1NzI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-03T01:10:18Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-06-03T01:15:29Z"}, "message": "Removing redundant \"fail\"s.", "tree": {"sha": "243792b4d6f5c2cf0695f80c999c9dee3d80196c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/243792b4d6f5c2cf0695f80c999c9dee3d80196c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc29dead2e00510577c12a45137ccf82a5863572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc29dead2e00510577c12a45137ccf82a5863572", "html_url": "https://github.com/rust-lang/rust/commit/dc29dead2e00510577c12a45137ccf82a5863572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc29dead2e00510577c12a45137ccf82a5863572/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad9afefa1014e01e63bf1cb48c4f1f9d98a98201", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9afefa1014e01e63bf1cb48c4f1f9d98a98201", "html_url": "https://github.com/rust-lang/rust/commit/ad9afefa1014e01e63bf1cb48c4f1f9d98a98201"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "e7c5001f824e9112f40ba6128028788d8fd951a7", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/dc29dead2e00510577c12a45137ccf82a5863572/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc29dead2e00510577c12a45137ccf82a5863572/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=dc29dead2e00510577c12a45137ccf82a5863572", "patch": "@@ -423,7 +423,6 @@ fn mk_mach(&ctxt cx, &util::common::ty_mach tm) -> t {\n         case (ty_f32) { ret idx_f32; }\n         case (ty_f64) { ret idx_f64; }\n     }\n-    fail;\n }\n \n fn mk_char(&ctxt cx) -> t    { ret idx_char; }\n@@ -895,7 +894,6 @@ fn type_is_structural(&ctxt cx, &t ty) -> bool {\n         case (ty_obj(_))    { ret true; }\n         case (_)            { ret false; }\n     }\n-    fail;\n }\n \n fn type_is_sequence(&ctxt cx, &t ty) -> bool {\n@@ -904,14 +902,17 @@ fn type_is_sequence(&ctxt cx, &t ty) -> bool {\n         case (ty_vec(_))    { ret true; }\n         case (_)            { ret false; }\n     }\n-    fail;\n }\n \n fn sequence_element_type(&ctxt cx, &t ty) -> t {\n     alt (struct(cx, ty)) {\n         case (ty_str)      { ret mk_mach(cx, common::ty_u8); }\n         case (ty_vec(?mt)) { ret mt.ty; }\n+        // NB: This is not exhaustive.\n     }\n+\n+    // FIXME: add sess.err or sess.span_err explaining failure (issue\n+    // #444)\n     fail;\n }\n \n@@ -923,7 +924,6 @@ fn type_is_tup_like(&ctxt cx, &t ty) -> bool {\n         case (ty_tag(_,_))  { ret true; }\n         case (_)            { ret false; }\n     }\n-    fail;\n }\n \n fn get_element_type(&ctxt cx, &t ty, uint i) -> t {\n@@ -935,7 +935,11 @@ fn get_element_type(&ctxt cx, &t ty, uint i) -> t {\n         case (ty_rec(?flds)) {\n             ret flds.(i).mt.ty;\n         }\n+        // NB: This is not exhaustive -- struct(cx, ty) could be a box or a\n+        // tag.\n     }\n+\n+    // FIXME: add sess.err or sess.span_err explaining failure (issue #444)\n     fail;\n }\n \n@@ -944,7 +948,6 @@ fn type_is_box(&ctxt cx, &t ty) -> bool {\n         case (ty_box(_)) { ret true; }\n         case (_) { ret false; }\n     }\n-    fail;\n }\n \n fn type_is_boxed(&ctxt cx, &t ty) -> bool {\n@@ -957,7 +960,6 @@ fn type_is_boxed(&ctxt cx, &t ty) -> bool {\n         case (ty_task) { ret true; }\n         case (_) { ret false; }\n     }\n-    fail;\n }\n \n fn type_is_scalar(&ctxt cx, &t ty) -> bool {\n@@ -973,10 +975,8 @@ fn type_is_scalar(&ctxt cx, &t ty) -> bool {\n         case (ty_native) { ret true; }\n         case (_) { ret false; }\n     }\n-    fail;\n }\n \n-\n fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n     alt (struct(cx, ty)) {\n         // scalar types\n@@ -1017,7 +1017,6 @@ fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n         }\n         case (_) { ret true; }\n     }\n-    fail;\n }\n \n \n@@ -1028,7 +1027,6 @@ fn type_is_native(&ctxt cx, &t ty) -> bool {\n         case (ty_native) { ret true; }\n         case (_) { ret false; }\n     }\n-    fail;\n }\n \n fn type_has_dynamic_size(&ctxt cx, &t ty) -> bool {\n@@ -1083,7 +1081,6 @@ fn type_is_integral(&ctxt cx, &t ty) -> bool {\n         case (ty_char) { ret true; }\n         case (_) { ret false; }\n     }\n-    fail;\n }\n \n fn type_is_fp(&ctxt cx, &t ty) -> bool {\n@@ -1100,7 +1097,6 @@ fn type_is_fp(&ctxt cx, &t ty) -> bool {\n         }\n         case (_) { ret false; }\n     }\n-    fail;\n }\n \n fn type_is_signed(&ctxt cx, &t ty) -> bool {\n@@ -1117,7 +1113,6 @@ fn type_is_signed(&ctxt cx, &t ty) -> bool {\n         }\n         case (_) { ret false; }\n     }\n-    fail;\n }\n \n fn type_param(&ctxt cx, &t ty) -> option::t[uint] {\n@@ -1656,7 +1651,6 @@ fn is_fn_ty(&ctxt cx, &t fty) -> bool {\n         case (ty::ty_native_fn(_, _, _)) { ret true; }\n         case (_) { ret false; }\n     }\n-    ret false;\n }\n \n \n@@ -2642,9 +2636,6 @@ mod unify {\n                 ret cx.handler.record_param(expected_id, actual);\n             }\n         }\n-\n-        // TODO: remove me once match-exhaustiveness checking works\n-        fail;\n     }\n \n     // Performs type binding substitution."}, {"sha": "551184b037dda2327a42efaf1c2f77df18d539c7", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc29dead2e00510577c12a45137ccf82a5863572/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc29dead2e00510577c12a45137ccf82a5863572/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=dc29dead2e00510577c12a45137ccf82a5863572", "patch": "@@ -1578,8 +1578,6 @@ fn check_lit(@crate_ctxt ccx, &@ast::lit lit) -> ty::t {\n         case (ast::lit_nil)                 { ret ty::mk_nil(ccx.tcx);  }\n         case (ast::lit_bool(_))             { ret ty::mk_bool(ccx.tcx); }\n     }\n-\n-    fail; // not reached\n }\n \n // Pattern checking is top-down rather than bottom-up so that bindings get"}]}