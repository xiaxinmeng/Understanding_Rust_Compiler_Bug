{"sha": "ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOTQyNTIxNGJmNmI3MTY5MmM1ZDc5YjkyY2E0ZWMyMGZiZGNkNGE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T10:18:51Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-06T12:52:35Z"}, "message": "Rollup merge of #48474 - christianpoveda:new_cell_docs, r=steveklabnik\n\nNew Cell docs\n\nThis fixes https://github.com/rust-lang/rust/issues/44061", "tree": {"sha": "b9e3ed2e4c247b2c06e0b55b5f58947330467804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9e3ed2e4c247b2c06e0b55b5f58947330467804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqejxMACgkQ/vbIBR0O\nATzVTQ/9EEPMP9oqYFc8s679ImNWq5bbXi/RBgkkjoRzwG1iPPa7yXSCU8yay6VZ\n21EvtsLppP56sjF/XXiycdDfaHxc9hXEgV8hh8q94YJy5uzb176V3LedTf5jNLr+\nSsn17fPPO2v0JOG+u7yFZZAAHRrUAVcAa9mgLHl5fE0j3C2433VjyQ8ABlkfjRj9\nWRJKU3IYMkLvK69dazlM9MveXOitb18uKiyqPF7GzIuA1Ot9pbHQ26XNs4aHpkJG\n8gwDdV+GKGsmQq7AjRTERYA7BgYUGr0G/CeFhK9ejeNMWb4XAQeYnFh8JbeUyPwP\nNxA6evZ3meBdLq7nT54hQPRc8ZSx3CPrb9yb6HzTfotbEcTv0kcuGGkRlVl+3fGX\nzdG2ZRr7mU4LcbtoztlH9pf7T79FI37Yp34A1JblmKfkbSJkA9Qew57VAPUirS1k\nxwnxhho08vQr3pgYAq5cEb+BnArT3OIoViTVoCu94ulXlSxZfqwI610k/M79JW51\n03Dv6MJ1QEF8vDEubHPwrVIhn6f8b9Mu9CsolyrwMtAA2pj8Y1BKWnIP6dBiHtqO\nyDWOMyLhXlTh/xHuntLxnIZWDxVjOhcd9qLwVbhisni3/E6PxqSI3xQeJbi9Skab\nUVSgvdCO+M5cIVGFcsdExAAzwmeuc5xbUDQn+wGy81E6XiUoU9I=\n=aFn1\n-----END PGP SIGNATURE-----", "payload": "tree b9e3ed2e4c247b2c06e0b55b5f58947330467804\nparent fa374f91a1f3ca7950e32a83ea61fae48338feb4\nparent 9091584def3b566f24f8fbeac495e6dc87178be8\nauthor kennytm <kennytm@gmail.com> 1520331531 +0800\ncommitter kennytm <kennytm@gmail.com> 1520340755 +0800\n\nRollup merge of #48474 - christianpoveda:new_cell_docs, r=steveklabnik\n\nNew Cell docs\n\nThis fixes https://github.com/rust-lang/rust/issues/44061\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a", "html_url": "https://github.com/rust-lang/rust/commit/ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa374f91a1f3ca7950e32a83ea61fae48338feb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa374f91a1f3ca7950e32a83ea61fae48338feb4", "html_url": "https://github.com/rust-lang/rust/commit/fa374f91a1f3ca7950e32a83ea61fae48338feb4"}, {"sha": "9091584def3b566f24f8fbeac495e6dc87178be8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9091584def3b566f24f8fbeac495e6dc87178be8", "html_url": "https://github.com/rust-lang/rust/commit/9091584def3b566f24f8fbeac495e6dc87178be8"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "1372151b75369d5010a2c0266a38ce4992881c3c", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=ee9425214bf6b71692c5d79b92ca4ec20fbdcd4a", "patch": "@@ -10,6 +10,24 @@\n \n //! Shareable mutable containers.\n //!\n+//! Rust memory safety is based on this rule: Given an object `T`, it is only possible to\n+//! have one of the following:\n+//!\n+//! - Having several immutable references (`&T`) to the object (also known as **aliasing**).\n+//! - Having one mutable reference (`&mut T`) to the object (also known as **mutability**).\n+//!\n+//! This is enforced by the Rust compiler. However, there are situations where this rule is not\n+//! flexible enough. Sometimes it is required to have multiple references to an object and yet\n+//! mutate it.\n+//!\n+//! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n+//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n+//! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n+//! `Sync`). If you need to do aliasing and mutation between multiple threads it is possible to\n+//! use [`Mutex`](../../std/sync/struct.Mutex.html),\n+//! [`RwLock`](../../std/sync/struct.RwLock.html) or\n+//! [`atomic`](../../core/sync/atomic/index.html) types.\n+//!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n //! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)\n //! references. We say that `Cell<T>` and `RefCell<T>` provide 'interior mutability', in contrast"}]}