{"sha": "6bb4aad51f40536447cd7603ab5be7792bab0a3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYjRhYWQ1MWY0MDUzNjQ0N2NkNzYwM2FiNWJlNzc5MmJhYjBhM2Q=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-13T03:44:50Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-20T19:57:19Z"}, "message": "introducing `span_suggestion_short_with_applicability`\n\nSome would argue that this 40-character method name is ludicrously\nunwieldy (even ironic), but it's the unique continuation of the\nprecedent set by the other suggestion methods. (And there is some hope\nthat someday we'll just fold `Applicability` into the signature of the\n\"basic\" method `span_suggestion`.)\n\nThis is in support of #50723.", "tree": {"sha": "4ea5459b0377e8d8c4b64a3a1eb700806553608b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ea5459b0377e8d8c4b64a3a1eb700806553608b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb4aad51f40536447cd7603ab5be7792bab0a3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb4aad51f40536447cd7603ab5be7792bab0a3d", "html_url": "https://github.com/rust-lang/rust/commit/6bb4aad51f40536447cd7603ab5be7792bab0a3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb4aad51f40536447cd7603ab5be7792bab0a3d/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4384491615e2159653207b74760643b507d12f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4384491615e2159653207b74760643b507d12f8", "html_url": "https://github.com/rust-lang/rust/commit/b4384491615e2159653207b74760643b507d12f8"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "bb2badaf293b6a41a5e7b112b14bf0df846804d3", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6bb4aad51f40536447cd7603ab5be7792bab0a3d/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb4aad51f40536447cd7603ab5be7792bab0a3d/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=6bb4aad51f40536447cd7603ab5be7792bab0a3d", "patch": "@@ -311,6 +311,23 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn span_suggestion_short_with_applicability(\n+        &mut self, sp: Span, msg: &str, suggestion: String, applicability: Applicability\n+    ) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: vec![Substitution {\n+                parts: vec![SubstitutionPart {\n+                    snippet: suggestion,\n+                    span: sp,\n+                }],\n+            }],\n+            msg: msg.to_owned(),\n+            show_code_when_inline: false,\n+            applicability: applicability,\n+        });\n+        self\n+    }\n+\n     pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self {\n         self.span = sp.into();\n         self"}, {"sha": "41c3f7ce841e3a0d8c2a37354c844026512b284d", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bb4aad51f40536447cd7603ab5be7792bab0a3d/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb4aad51f40536447cd7603ab5be7792bab0a3d/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=6bb4aad51f40536447cd7603ab5be7792bab0a3d", "patch": "@@ -200,6 +200,12 @@ impl<'a> DiagnosticBuilder<'a> {\n                                                  suggestions: Vec<String>,\n                                                  applicability: Applicability)\n                                                  -> &mut Self);\n+    forward!(pub fn span_suggestion_short_with_applicability(&mut self,\n+                                                             sp: Span,\n+                                                             msg: &str,\n+                                                             suggestion: String,\n+                                                             applicability: Applicability)\n+                                                             -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n "}]}