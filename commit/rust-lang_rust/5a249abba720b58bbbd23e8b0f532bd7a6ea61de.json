{"sha": "5a249abba720b58bbbd23e8b0f532bd7a6ea61de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMjQ5YWJiYTcyMGI1OGJiYmQyM2U4YjBmNTMyYmQ3YTZlYTYxZGU=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-02-11T13:56:08Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-02-11T14:29:18Z"}, "message": "Add `SocketAddr{,V4,V6}::set_ip`.", "tree": {"sha": "5c44808547e1f5b6c074249c67de1f41ac92b9bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c44808547e1f5b6c074249c67de1f41ac92b9bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a249abba720b58bbbd23e8b0f532bd7a6ea61de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a249abba720b58bbbd23e8b0f532bd7a6ea61de", "html_url": "https://github.com/rust-lang/rust/commit/5a249abba720b58bbbd23e8b0f532bd7a6ea61de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a249abba720b58bbbd23e8b0f532bd7a6ea61de/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd01366279a35e12a39719b42b95c68dfcaa80f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd01366279a35e12a39719b42b95c68dfcaa80f6", "html_url": "https://github.com/rust-lang/rust/commit/cd01366279a35e12a39719b42b95c68dfcaa80f6"}], "stats": {"total": 55, "additions": 52, "deletions": 3}, "files": [{"sha": "296cd276ddbf93c0b9dfa521dc3f8344ff6a3b03", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5a249abba720b58bbbd23e8b0f532bd7a6ea61de/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a249abba720b58bbbd23e8b0f532bd7a6ea61de/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=5a249abba720b58bbbd23e8b0f532bd7a6ea61de", "patch": "@@ -67,6 +67,17 @@ impl SocketAddr {\n         }\n     }\n \n+    /// Change the IP address associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_ip(&mut self, new_ip: IpAddr) {\n+        // `match (*self, new_ip)` would have us mutate a copy of self only to throw it away.\n+        match (self, new_ip) {\n+            (&mut SocketAddr::V4(ref mut a), IpAddr::V4(new_ip)) => a.set_ip(new_ip),\n+            (&mut SocketAddr::V6(ref mut a), IpAddr::V6(new_ip)) => a.set_ip(new_ip),\n+            (self_, new_ip) => *self_ = Self::new(new_ip, self_.port()),\n+        }\n+    }\n+\n     /// Returns the port number associated with this socket address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 {\n@@ -77,7 +88,7 @@ impl SocketAddr {\n     }\n \n     /// Change the port number associated with this socket address.\n-    #[unstable(feature = \"sockaddr_set_port\", reason = \"recent addition\", issue = \"0\")]  // FIXME add tracking issue\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n     pub fn set_port(&mut self, new_port: u16) {\n         match *self {\n             SocketAddr::V4(ref mut a) => a.set_port(new_port),\n@@ -108,12 +119,16 @@ impl SocketAddrV4 {\n         }\n     }\n \n+    /// Change the IP address associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_ip(&mut self, new_ip: Ipv4Addr) { self.inner.sin_addr = *new_ip.as_inner() }\n+\n     /// Returns the port number associated with this socket address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 { ntoh(self.inner.sin_port) }\n \n     /// Change the port number associated with this socket address.\n-    #[unstable(feature = \"sockaddr_set_port\", reason = \"recent addition\", issue = \"0\")]  // FIXME add tracking issue\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n     pub fn set_port(&mut self, new_port: u16) { self.inner.sin_port = hton(new_port) }\n }\n \n@@ -143,12 +158,16 @@ impl SocketAddrV6 {\n         }\n     }\n \n+    /// Change the IP address associated with this socket address.\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n+    pub fn set_ip(&mut self, new_ip: Ipv6Addr) { self.inner.sin6_addr = *new_ip.as_inner() }\n+\n     /// Returns the port number associated with this socket address.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn port(&self) -> u16 { ntoh(self.inner.sin6_port) }\n \n     /// Change the port number associated with this socket address.\n-    #[unstable(feature = \"sockaddr_set_port\", reason = \"recent addition\", issue = \"0\")]  // FIXME add tracking issue\n+    #[unstable(feature = \"sockaddr_setters\", reason = \"recent addition\", issue = \"31572\")]\n     pub fn set_port(&mut self, new_port: u16) { self.inner.sin6_port = hton(new_port) }\n \n     /// Returns the flow information associated with this address,\n@@ -522,6 +541,36 @@ mod tests {\n         assert!(tsa(\"1200::AB00:1234::2552:7777:1313:34300\").is_err());\n     }\n \n+    #[test]\n+    fn set_ip() {\n+        fn ip4(low: u8) -> Ipv4Addr { Ipv4Addr::new(77, 88, 21, low) }\n+        fn ip6(low: u16) -> Ipv6Addr { Ipv6Addr::new(0x2a02, 0x6b8, 0, 1, 0, 0, 0, low) }\n+\n+        let mut v4 = SocketAddrV4::new(ip4(11), 80);\n+        assert_eq!(v4.ip(), &ip4(11));\n+        v4.set_ip(ip4(12));\n+        assert_eq!(v4.ip(), &ip4(12));\n+\n+        let mut addr = SocketAddr::V4(v4);\n+        assert_eq!(addr.ip(), IpAddr::V4(ip4(12)));\n+        addr.set_ip(IpAddr::V4(ip4(13)));\n+        assert_eq!(addr.ip(), IpAddr::V4(ip4(13)));\n+        addr.set_ip(IpAddr::V6(ip6(14)));\n+        assert_eq!(addr.ip(), IpAddr::V6(ip6(14)));\n+\n+        let mut v6 = SocketAddrV6::new(ip6(1), 80, 0, 0);\n+        assert_eq!(v6.ip(), &ip6(1));\n+        v6.set_ip(ip6(2));\n+        assert_eq!(v6.ip(), &ip6(2));\n+\n+        let mut addr = SocketAddr::V6(v6);\n+        assert_eq!(addr.ip(), IpAddr::V6(ip6(2)));\n+        addr.set_ip(IpAddr::V6(ip6(3)));\n+        assert_eq!(addr.ip(), IpAddr::V6(ip6(3)));\n+        addr.set_ip(IpAddr::V4(ip4(4)));\n+        assert_eq!(addr.ip(), IpAddr::V4(ip4(4)));\n+    }\n+\n     #[test]\n     fn set_port() {\n         let mut v4 = SocketAddrV4::new(Ipv4Addr::new(77, 88, 21, 11), 80);"}]}