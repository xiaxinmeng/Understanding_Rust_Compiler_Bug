{"sha": "cf05b7db4d185383f100ab9d53b460686280aaed", "node_id": "C_kwDOAAsO6NoAKGNmMDViN2RiNGQxODUzODNmMTAwYWI5ZDUzYjQ2MDY4NjI4MGFhZWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T13:34:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-31T13:34:43Z"}, "message": "Auto merge of #13051 - DropDemBits:attrs-and-comments-on-enum-variant, r=jonas-schievink\n\nfix: Only move comments when extracting a struct from an enum variant\n\nMotivating example:\n\n```rs\n#[derive(Debug, thiserror::Error)]\nenum Error {\n    /// Some explanation for this error\n    #[error(\"message\")]\n    $0Woops {\n        code: u32\n    }\n}\n```\nnow becomes\n```rs\n/// Some explanation for this error\n#[derive(Debug, thiserror::Error)]\nstruct Woops{\n    code: u32\n}\n\n#[derive(Debug, thiserror::Error)]\nenum Error {\n    #[error(\"message\")]\n    Woops(Woops)\n}\n```\n(the `thiserror::Error` derive being copied and the struct formatting aren't ideal, though those are issues for another day)", "tree": {"sha": "693ecb62a5554dd07aa25f589f44adcbda2f2c73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693ecb62a5554dd07aa25f589f44adcbda2f2c73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf05b7db4d185383f100ab9d53b460686280aaed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf05b7db4d185383f100ab9d53b460686280aaed", "html_url": "https://github.com/rust-lang/rust/commit/cf05b7db4d185383f100ab9d53b460686280aaed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf05b7db4d185383f100ab9d53b460686280aaed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e22079c4cb8ffb0076cf52c37be343582ad418", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e22079c4cb8ffb0076cf52c37be343582ad418", "html_url": "https://github.com/rust-lang/rust/commit/d9e22079c4cb8ffb0076cf52c37be343582ad418"}, {"sha": "45dac9a3ef029f216cc0369ee0f1522c2a2aa03e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e", "html_url": "https://github.com/rust-lang/rust/commit/45dac9a3ef029f216cc0369ee0f1522c2a2aa03e"}], "stats": {"total": 115, "additions": 68, "deletions": 47}, "files": [{"sha": "ddc2052e7aa240f92f32c3122423138edea0f4da", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 68, "deletions": 47, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/cf05b7db4d185383f100ab9d53b460686280aaed/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf05b7db4d185383f100ab9d53b460686280aaed/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=cf05b7db4d185383f100ab9d53b460686280aaed", "patch": "@@ -101,21 +101,22 @@ pub(crate) fn extract_struct_from_enum_variant(\n                 });\n             }\n \n-            let indent = enum_ast.indent_level();\n             let generic_params = enum_ast\n                 .generic_param_list()\n                 .and_then(|known_generics| extract_generic_params(&known_generics, &field_list));\n             let generics = generic_params.as_ref().map(|generics| generics.clone_for_update());\n             let def =\n                 create_struct_def(variant_name.clone(), &variant, &field_list, generics, &enum_ast);\n+\n+            let enum_ast = variant.parent_enum();\n+            let indent = enum_ast.indent_level();\n             def.reindent_to(indent);\n \n-            let start_offset = &variant.parent_enum().syntax().clone();\n-            ted::insert_all_raw(\n-                ted::Position::before(start_offset),\n+            ted::insert_all(\n+                ted::Position::before(enum_ast.syntax()),\n                 vec![\n                     def.syntax().clone().into(),\n-                    make::tokens::whitespace(&format!(\"\\n\\n{}\", indent)).into(),\n+                    make::tokens::whitespace(&format!(\"\\n\\n{indent}\")).into(),\n                 ],\n             );\n \n@@ -227,7 +228,7 @@ fn tag_generics_in_variant(ty: &ast::Type, generics: &mut [(ast::GenericParam, b\n }\n \n fn create_struct_def(\n-    variant_name: ast::Name,\n+    name: ast::Name,\n     variant: &ast::Variant,\n     field_list: &Either<ast::RecordFieldList, ast::TupleFieldList>,\n     generics: Option<ast::GenericParamList>,\n@@ -269,43 +270,27 @@ fn create_struct_def(\n             field_list.into()\n         }\n     };\n-\n     field_list.reindent_to(IndentLevel::single());\n \n-    let strukt = make::struct_(enum_vis, variant_name, generics, field_list).clone_for_update();\n-\n-    // FIXME: Consider making this an actual function somewhere (like in `AttrsOwnerEdit`) after some deliberation\n-    let attrs_and_docs = |node: &SyntaxNode| {\n-        let mut select_next_ws = false;\n-        node.children_with_tokens().filter(move |child| {\n-            let accept = match child.kind() {\n-                ATTR | COMMENT => {\n-                    select_next_ws = true;\n-                    return true;\n-                }\n-                WHITESPACE if select_next_ws => true,\n-                _ => false,\n-            };\n-            select_next_ws = false;\n-\n-            accept\n-        })\n-    };\n+    let strukt = make::struct_(enum_vis, name, generics, field_list).clone_for_update();\n \n-    // copy attributes & comments from variant\n-    let variant_attrs = attrs_and_docs(variant.syntax())\n-        .map(|tok| match tok.kind() {\n-            WHITESPACE => make::tokens::single_newline().into(),\n-            _ => tok,\n-        })\n-        .collect();\n-    ted::insert_all(ted::Position::first_child_of(strukt.syntax()), variant_attrs);\n+    // take comments from variant\n+    ted::insert_all(\n+        ted::Position::first_child_of(strukt.syntax()),\n+        take_all_comments(variant.syntax()),\n+    );\n \n     // copy attributes from enum\n     ted::insert_all(\n         ted::Position::first_child_of(strukt.syntax()),\n-        enum_.attrs().map(|it| it.syntax().clone_for_update().into()).collect(),\n+        enum_\n+            .attrs()\n+            .flat_map(|it| {\n+                vec![it.syntax().clone_for_update().into(), make::tokens::single_newline().into()]\n+            })\n+            .collect(),\n     );\n+\n     strukt\n }\n \n@@ -346,16 +331,48 @@ fn update_variant(variant: &ast::Variant, generics: Option<ast::GenericParamList\n         })\n         .unwrap_or_else(|| make::ty(&name.text()));\n \n+    // change from a record to a tuple field list\n     let tuple_field = make::tuple_field(None, ty);\n-    let replacement = make::variant(\n-        name,\n-        Some(ast::FieldList::TupleFieldList(make::tuple_field_list(iter::once(tuple_field)))),\n-    )\n-    .clone_for_update();\n-    ted::replace(variant.syntax(), replacement.syntax());\n+    let field_list = make::tuple_field_list(iter::once(tuple_field)).clone_for_update();\n+    ted::replace(variant.field_list()?.syntax(), field_list.syntax());\n+\n+    // remove any ws after the name\n+    if let Some(ws) = name\n+        .syntax()\n+        .siblings_with_tokens(syntax::Direction::Next)\n+        .find_map(|tok| tok.into_token().filter(|tok| tok.kind() == WHITESPACE))\n+    {\n+        ted::remove(SyntaxElement::Token(ws));\n+    }\n+\n     Some(())\n }\n \n+// Note: this also detaches whitespace after comments,\n+// since `SyntaxNode::splice_children` (and by extension `ted::insert_all_raw`)\n+// detaches nodes. If we only took the comments, we'd leave behind the old whitespace.\n+fn take_all_comments(node: &SyntaxNode) -> Vec<SyntaxElement> {\n+    let mut remove_next_ws = false;\n+    node.children_with_tokens()\n+        .filter_map(move |child| match child.kind() {\n+            COMMENT => {\n+                remove_next_ws = true;\n+                child.detach();\n+                Some(child)\n+            }\n+            WHITESPACE if remove_next_ws => {\n+                remove_next_ws = false;\n+                child.detach();\n+                Some(make::tokens::single_newline().into())\n+            }\n+            _ => {\n+                remove_next_ws = false;\n+                None\n+            }\n+        })\n+        .collect()\n+}\n+\n fn apply_references(\n     insert_use_cfg: InsertUseConfig,\n     segment: ast::PathSegment,\n@@ -480,10 +497,14 @@ enum En<T> { Var(Var<T>) }\"#,\n     fn test_extract_struct_carries_over_attributes() {\n         check_assist(\n             extract_struct_from_enum_variant,\n-            r#\"#[derive(Debug)]\n+            r#\"\n+#[derive(Debug)]\n #[derive(Clone)]\n enum Enum { Variant{ field: u32$0 } }\"#,\n-            r#\"#[derive(Debug)]#[derive(Clone)] struct Variant{ field: u32 }\n+            r#\"\n+#[derive(Debug)]\n+#[derive(Clone)]\n+struct Variant{ field: u32 }\n \n #[derive(Debug)]\n #[derive(Clone)]\n@@ -614,7 +635,7 @@ enum A { One(One) }\"#,\n     }\n \n     #[test]\n-    fn test_extract_struct_keep_comments_and_attrs_on_variant_struct() {\n+    fn test_extract_struct_move_struct_variant_comments() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"\n@@ -631,19 +652,19 @@ enum A {\n /* comment */\n // other\n /// comment\n-#[attr]\n struct One{\n     a: u32\n }\n \n enum A {\n+    #[attr]\n     One(One)\n }\"#,\n         );\n     }\n \n     #[test]\n-    fn test_extract_struct_keep_comments_and_attrs_on_variant_tuple() {\n+    fn test_extract_struct_move_tuple_variant_comments() {\n         check_assist(\n             extract_struct_from_enum_variant,\n             r#\"\n@@ -658,10 +679,10 @@ enum A {\n /* comment */\n // other\n /// comment\n-#[attr]\n struct One(u32, u32);\n \n enum A {\n+    #[attr]\n     One(One)\n }\"#,\n         );"}]}