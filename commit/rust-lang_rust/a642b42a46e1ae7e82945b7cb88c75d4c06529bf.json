{"sha": "a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDJiNDJhNDZlMWFlN2U4Mjk0NWI3Y2I4OGM3NWQ0YzA2NTI5YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T18:07:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-13T18:07:57Z"}, "message": "Auto merge of #6450 - matthiaskrgr:dont_format_local_repo, r=ebroto\n\ncargo dev fmt: don't format entire rustc repo if we ran ra_setup previously\n\nIt turns out that rustfmt sees a rustc repo that we pulled in as path dependency via `cargo dev ra-setup` as part of the tree and would try to format it :D\n\nOf course we don't want this, so skip formatting if we see that we ran `ra-setup` previously.\n\nchangelog: none", "tree": {"sha": "235876cc8febddf1a84f0b5c94430efba1e7fce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/235876cc8febddf1a84f0b5c94430efba1e7fce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "html_url": "https://github.com/rust-lang/rust/commit/a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2b3576ebe6d86388a1ee009a95d6b0b52c8471", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2b3576ebe6d86388a1ee009a95d6b0b52c8471", "html_url": "https://github.com/rust-lang/rust/commit/6b2b3576ebe6d86388a1ee009a95d6b0b52c8471"}, {"sha": "27dc565d28444fa488972e09a8117474cee1e752", "url": "https://api.github.com/repos/rust-lang/rust/commits/27dc565d28444fa488972e09a8117474cee1e752", "html_url": "https://github.com/rust-lang/rust/commit/27dc565d28444fa488972e09a8117474cee1e752"}], "stats": {"total": 137, "additions": 80, "deletions": 57}, "files": [{"sha": "49b64da1fb6bb438e8224c6d8d831e28b9be9086", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "patch": "@@ -19,10 +19,10 @@ All contributors are expected to follow the [Rust Code of Conduct].\n   - [Writing code](#writing-code)\n   - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n   - [How Clippy works](#how-clippy-works)\n-  - [Fixing build failures caused by Rust](#fixing-build-failures-caused-by-rust)\n+  - [Syncing changes between Clippy and [`rust-lang/rust`]](#syncing-changes-between-clippy-and-rust-langrust)\n     - [Patching git-subtree to work with big repos](#patching-git-subtree-to-work-with-big-repos)\n-    - [Performing the sync](#performing-the-sync)\n-    - [Syncing back changes in Clippy to [`rust-lang/rust`]](#syncing-back-changes-in-clippy-to-rust-langrust)\n+    - [Performing the sync from [`rust-lang/rust`] to Clippy](#performing-the-sync-from-rust-langrust-to-clippy)\n+    - [Performing the sync from Clippy to [`rust-lang/rust`]](#performing-the-sync-from-clippy-to-rust-langrust)\n     - [Defining remotes](#defining-remotes)\n   - [Issue and PR triage](#issue-and-pr-triage)\n   - [Bors and Homu](#bors-and-homu)\n@@ -111,7 +111,7 @@ To work around this, you need to have a copy of the [rustc-repo][rustc_repo] ava\n `git clone https://github.com/rust-lang/rust/`.\n Then you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies\n which rust-analyzer will be able to understand.\n-Run `cargo dev ra-setup --repo-path <repo-path>` where `<repo-path>` is an absolute path to the rustc repo\n+Run `cargo dev ra_setup --repo-path <repo-path>` where `<repo-path>` is an absolute path to the rustc repo\n you just cloned.\n The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to\n Clippys `Cargo.toml`s and should allow rust-analyzer to understand most of the types that Clippy uses."}, {"sha": "6b528d219df27d62a37f859f0900f3f6402b2b58", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "patch": "@@ -1,9 +1,9 @@\n use crate::clippy_project_root;\n use shell_escape::escape;\n use std::ffi::OsStr;\n-use std::io;\n use std::path::Path;\n use std::process::{self, Command};\n+use std::{fs, io};\n use walkdir::WalkDir;\n \n #[derive(Debug)]\n@@ -12,6 +12,7 @@ pub enum CliError {\n     IoError(io::Error),\n     RustfmtNotInstalled,\n     WalkDirError(walkdir::Error),\n+    RaSetupActive,\n }\n \n impl From<io::Error> for CliError {\n@@ -31,12 +32,23 @@ struct FmtContext {\n     verbose: bool,\n }\n \n+// the \"main\" function of cargo dev fmt\n pub fn run(check: bool, verbose: bool) {\n     fn try_run(context: &FmtContext) -> Result<bool, CliError> {\n         let mut success = true;\n \n         let project_root = clippy_project_root();\n \n+        // if we added a local rustc repo as path dependency to clippy for rust analyzer, we do NOT want to\n+        // format because rustfmt would also format the entire rustc repo as it is a local\n+        // dependency\n+        if fs::read_to_string(project_root.join(\"Cargo.toml\"))\n+            .expect(\"Failed to read clippy Cargo.toml\")\n+            .contains(&\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\")\n+        {\n+            return Err(CliError::RaSetupActive);\n+        }\n+\n         rustfmt_test(context)?;\n \n         success &= cargo_fmt(context, project_root.as_path())?;\n@@ -75,6 +87,13 @@ pub fn run(check: bool, verbose: bool) {\n             CliError::WalkDirError(err) => {\n                 eprintln!(\"error: {}\", err);\n             },\n+            CliError::RaSetupActive => {\n+                eprintln!(\n+                    \"error: a local rustc repo is enabled as path dependency via `cargo dev ra_setup`.\n+Not formatting because that would format the local repo as well!\n+Please revert the changes to Cargo.tomls first.\"\n+                );\n+            },\n         }\n     }\n "}, {"sha": "4fdae38e3ab7a409f5cf7ca8c8fbbc3e27038b57", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 53, "deletions": 49, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "patch": "@@ -1,10 +1,52 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n-use clap::{App, Arg, SubCommand};\n+use clap::{App, Arg, ArgMatches, SubCommand};\n use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n \n fn main() {\n-    let matches = App::new(\"Clippy developer tooling\")\n+    let matches = get_clap_config();\n+\n+    match matches.subcommand() {\n+        (\"bless\", Some(_)) => {\n+            bless::bless();\n+        },\n+        (\"fmt\", Some(matches)) => {\n+            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n+        },\n+        (\"update_lints\", Some(matches)) => {\n+            if matches.is_present(\"print-only\") {\n+                update_lints::print_lints();\n+            } else if matches.is_present(\"check\") {\n+                update_lints::run(update_lints::UpdateMode::Check);\n+            } else {\n+                update_lints::run(update_lints::UpdateMode::Change);\n+            }\n+        },\n+        (\"new_lint\", Some(matches)) => {\n+            match new_lint::create(\n+                matches.value_of(\"pass\"),\n+                matches.value_of(\"name\"),\n+                matches.value_of(\"category\"),\n+            ) {\n+                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n+                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n+            }\n+        },\n+        (\"limit_stderr_length\", _) => {\n+            stderr_length_check::check();\n+        },\n+        (\"ra_setup\", Some(matches)) => ra_setup::run(matches.value_of(\"rustc-repo-path\")),\n+        (\"serve\", Some(matches)) => {\n+            let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n+            let lint = matches.value_of(\"lint\");\n+            serve::run(port, lint);\n+        },\n+        _ => {},\n+    }\n+}\n+\n+fn get_clap_config<'a>() -> ArgMatches<'a> {\n+    App::new(\"Clippy developer tooling\")\n         .subcommand(SubCommand::with_name(\"bless\").about(\"bless the test output changes\"))\n         .subcommand(\n             SubCommand::with_name(\"fmt\")\n@@ -26,16 +68,16 @@ fn main() {\n                 .about(\"Updates lint registration and information from the source code\")\n                 .long_about(\n                     \"Makes sure that:\\n \\\n-                     * the lint count in README.md is correct\\n \\\n-                     * the changelog contains markdown link references at the bottom\\n \\\n-                     * all lint groups include the correct lints\\n \\\n-                     * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n-                     * all lints are registered in the lint store\",\n+                 * the lint count in README.md is correct\\n \\\n+                 * the changelog contains markdown link references at the bottom\\n \\\n+                 * all lint groups include the correct lints\\n \\\n+                 * lint modules in `clippy_lints/*` are visible in `src/lifb.rs` via `pub mod`\\n \\\n+                 * all lints are registered in the lint store\",\n                 )\n                 .arg(Arg::with_name(\"print-only\").long(\"print-only\").help(\n                     \"Print a table of lints to STDOUT. \\\n-                     This does not include deprecated and internal lints. \\\n-                     (Does not modify any files)\",\n+                 This does not include deprecated and internal lints. \\\n+                 (Does not modify any files)\",\n                 ))\n                 .arg(\n                     Arg::with_name(\"check\")\n@@ -89,7 +131,7 @@ fn main() {\n                 .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"ra-setup\")\n+            SubCommand::with_name(\"ra_setup\")\n                 .about(\"Alter dependencies so rust-analyzer can find rustc internals\")\n                 .arg(\n                     Arg::with_name(\"rustc-repo-path\")\n@@ -114,43 +156,5 @@ fn main() {\n                 )\n                 .arg(Arg::with_name(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n         )\n-        .get_matches();\n-\n-    match matches.subcommand() {\n-        (\"bless\", Some(_)) => {\n-            bless::bless();\n-        },\n-        (\"fmt\", Some(matches)) => {\n-            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n-        },\n-        (\"update_lints\", Some(matches)) => {\n-            if matches.is_present(\"print-only\") {\n-                update_lints::print_lints();\n-            } else if matches.is_present(\"check\") {\n-                update_lints::run(update_lints::UpdateMode::Check);\n-            } else {\n-                update_lints::run(update_lints::UpdateMode::Change);\n-            }\n-        },\n-        (\"new_lint\", Some(matches)) => {\n-            match new_lint::create(\n-                matches.value_of(\"pass\"),\n-                matches.value_of(\"name\"),\n-                matches.value_of(\"category\"),\n-            ) {\n-                Ok(_) => update_lints::run(update_lints::UpdateMode::Change),\n-                Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n-            }\n-        },\n-        (\"limit_stderr_length\", _) => {\n-            stderr_length_check::check();\n-        },\n-        (\"ra-setup\", Some(matches)) => ra_setup::run(matches.value_of(\"rustc-repo-path\")),\n-        (\"serve\", Some(matches)) => {\n-            let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n-            let lint = matches.value_of(\"lint\");\n-            serve::run(port, lint);\n-        },\n-        _ => {},\n-    }\n+        .get_matches()\n }"}, {"sha": "40bf4a9505a88632027b1878405dd49ad8e0bc19", "filename": "clippy_dev/src/ra_setup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/clippy_dev%2Fsrc%2Fra_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/clippy_dev%2Fsrc%2Fra_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fra_setup.rs?ref=a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "patch": "@@ -52,7 +52,7 @@ fn inject_deps_into_manifest(\n     // do not inject deps if we have aleady done so\n     if cargo_toml.contains(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\") {\n         eprintln!(\n-            \"cargo dev ra-setup: warning: deps already found inside {}, doing nothing.\",\n+            \"cargo dev ra_setup: warning: deps already found inside {}, doing nothing.\",\n             manifest_path\n         );\n         return Ok(());"}, {"sha": "954474a17aa8e35b31bafc2765f08ab2a14781aa", "filename": "doc/basics.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/doc%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/a642b42a46e1ae7e82945b7cb88c75d4c06529bf/doc%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fbasics.md?ref=a642b42a46e1ae7e82945b7cb88c75d4c06529bf", "patch": "@@ -8,7 +8,7 @@ the codebase take a look at [Adding Lints] or [Common Tools].\n [Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n \n - [Basics for hacking on Clippy](#basics-for-hacking-on-clippy)\n-  - [Get the code](#get-the-code)\n+  - [Get the Code](#get-the-code)\n   - [Building and Testing](#building-and-testing)\n   - [`cargo dev`](#cargo-dev)\n   - [PR](#pr)\n@@ -87,7 +87,7 @@ cargo dev update_lints\n # create a new lint and register it\n cargo dev new_lint\n # (experimental) Setup Clippy to work with rust-analyzer\n-cargo dev ra-setup\n+cargo dev ra_setup\n ```\n \n ## PR"}]}