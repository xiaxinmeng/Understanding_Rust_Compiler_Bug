{"sha": "bb37a0f948b02e6434dbe3ea615960052d37f784", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMzdhMGY5NDhiMDJlNjQzNGRiZTNlYTYxNTk2MDA1MmQzN2Y3ODQ=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-05-26T22:06:50Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2020-06-16T19:02:50Z"}, "message": "Avoid triggering similar names on code from expansion", "tree": {"sha": "642adc71b4fe1680223b9c78f51a652f2f7de212", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/642adc71b4fe1680223b9c78f51a652f2f7de212"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb37a0f948b02e6434dbe3ea615960052d37f784", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqv54U47RUUXZfOLnLO/Nsn7QvnkFAl7pF1oACgkQLO/Nsn7Q\nvnkJlQ//VvkRKeFc4m02whY0ToQStdOACc3GpU/e7GjKVsO57XYT85VQzFYSbM3D\nXZH9C6y7YjUuOWbT2McWZMwFK7WAcBbOggeI4c8qZNYz58t/RI0banmaFCoQsPI1\nKjlHG0CB8toKynwQxknN+6r84GRRyQ+XFjmuccm5fC+13ZakZb+hB082I4A9l4S3\nXAp5hIm1mnIhjwvM9GdF0zoCR8OLv0XlzXckEoyaeLA5q4UkPjZKWtEgFAYRF2oL\nTW4sdnUki8HaN4/kAc5w3IUD5u60zD76Fa5oGK1sHK3ahP6LmEneLsTEqS/1XlvR\neLlhi+ax1ew5o+NFgMVZVXiW6sdmS2xzpHRCGrnw/RKQh/GhngUNlylE19lCmmUH\nwqsH5gqUDjyr18bSCxtoKibhZxWjiQybHtGpyoizVn6Nna3R/gIdcCVU0MGuzMN8\nLlsMHKGTexl9IJzrFkdV926Jhkq32JQoFJZst4zby126eETGg6NuFV1mMvZ7VtwL\nu7ESXOrv76oQRPKFmTR1Fc5HUSGgQwt8wyvZU+RvmSzWcRGj4YutuyjnMEcTOCtW\nOMIW8uNSXlqxw2EFU9Omvk100w5lK+adWO3DL8hahK50PMF3CBy6YR5WGiUtzlAw\nXPtXhENYw6iJJaesO9l9ZRclBc3vjBolwmiqKWqoxJ5RLNQpIa4=\n=Tnii\n-----END PGP SIGNATURE-----", "payload": "tree 642adc71b4fe1680223b9c78f51a652f2f7de212\nparent efd3dcff97f67f376e354c047133ce9044c52991\nauthor Eduardo Broto <ebroto@tutanota.com> 1590530810 +0200\ncommitter flip1995 <hello@philkrones.com> 1592334170 +0200\n\nAvoid triggering similar names on code from expansion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb37a0f948b02e6434dbe3ea615960052d37f784", "html_url": "https://github.com/rust-lang/rust/commit/bb37a0f948b02e6434dbe3ea615960052d37f784", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb37a0f948b02e6434dbe3ea615960052d37f784/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd3dcff97f67f376e354c047133ce9044c52991", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd3dcff97f67f376e354c047133ce9044c52991", "html_url": "https://github.com/rust-lang/rust/commit/efd3dcff97f67f376e354c047133ce9044c52991"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "1ad631abe91ba4b363ca812047f69e4598beca68", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb37a0f948b02e6434dbe3ea615960052d37f784/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb37a0f948b02e6434dbe3ea615960052d37f784/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=bb37a0f948b02e6434dbe3ea615960052d37f784", "patch": "@@ -126,8 +126,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             return;\n                         }\n                         if sig.decl.inputs.is_empty() && name == sym!(new) && cx.access_levels.is_reachable(id) {\n-                            let self_did = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n-                            let self_ty = cx.tcx.type_of(self_did);\n+                            let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n+                            let self_ty = cx.tcx.type_of(self_def_id);\n                             if_chain! {\n                                 if same_tys(cx, self_ty, return_ty(cx, id));\n                                 if let Some(default_trait_id) = get_trait_def_id(cx, &paths::DEFAULT_TRAIT);\n@@ -148,10 +148,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                                     // generics\n                                     if_chain! {\n                                         if let Some(ref impling_types) = self.impling_types;\n-                                        if let Some(self_def) = cx.tcx.type_of(self_did).ty_adt_def();\n-                                        if let Some(self_def_id) = self_def.did.as_local();\n+                                        if let Some(self_def) = cx.tcx.type_of(self_def_id).ty_adt_def();\n+                                        if let Some(self_local_did) = self_def.did.as_local();\n                                         then {\n-                                            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_def_id);\n+                                            let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n                                             if impling_types.contains(&self_id) {\n                                                 return;\n                                             }"}, {"sha": "5331bf26e050c49a373136ff27740d9ab8cf84f3", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb37a0f948b02e6434dbe3ea615960052d37f784/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb37a0f948b02e6434dbe3ea615960052d37f784/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=bb37a0f948b02e6434dbe3ea615960052d37f784", "patch": "@@ -132,7 +132,11 @@ struct SimilarNamesNameVisitor<'a, 'tcx, 'b>(&'b mut SimilarNamesLocalVisitor<'a\n impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n     fn visit_pat(&mut self, pat: &'tcx Pat) {\n         match pat.kind {\n-            PatKind::Ident(_, ident, _) => self.check_ident(ident),\n+            PatKind::Ident(_, ident, _) => {\n+                if !pat.span.from_expansion() {\n+                    self.check_ident(ident);\n+                }\n+            },\n             PatKind::Struct(_, ref fields, _) => {\n                 for field in fields {\n                     if !field.is_shorthand {"}]}