{"sha": "c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NjIyZDFkMDVkMWVhNThjZmQ5YjU2Y2MzYTkxYjJjMTczMTZjOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-26T01:36:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-26T01:36:50Z"}, "message": "Auto merge of #76176 - marmeladema:fix-closure-path-printing, r=eddyb\n\nMove from {{closure}}#0 syntax to {closure#0} for (def) path components\n\nPart of #70334\n\nI followed the approach described by `@eddyb` and introduced a `DefPathDataName` enum.\nTo preserve compatibility, in various places, I had to rely on formatting manually by calling `format!(\"{{{{{}}}}}\", namespace)`.\n\nMy questions are:\n* Do we want to convert for places to use the new naming scheme? Or shall I re-add `DefPathData::as_symbol` but renamed as `DefPathData::as_legacy_symbol` to avoid manually allocating the legacy symbols?\n* Do we want to `impl Display for DisambiguatedDefPathData` to avoid manually calling `write!(s, \"{{{}#{}}}\", namespace, component.disambiguator)`?\n* We might also want to improve naming for `DefPathDataName` and `DefPathData::get_name`\n\nr? `@eddyb`", "tree": {"sha": "cf6a3a83acac49fed56f127a105fa6d50fed6633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6a3a83acac49fed56f127a105fa6d50fed6633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "html_url": "https://github.com/rust-lang/rust/commit/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043f6d747c15068f0053a0542e9b0f17ae7f4de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/043f6d747c15068f0053a0542e9b0f17ae7f4de4", "html_url": "https://github.com/rust-lang/rust/commit/043f6d747c15068f0053a0542e9b0f17ae7f4de4"}, {"sha": "5946c12476b488dbc4555741321321a1cbd4d68c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5946c12476b488dbc4555741321321a1cbd4d68c", "html_url": "https://github.com/rust-lang/rust/commit/5946c12476b488dbc4555741321321a1cbd4d68c"}], "stats": {"total": 580, "additions": 299, "deletions": 281}, "files": [{"sha": "9945d4f4282597901b1f84cf2c09d9ef0c2982a3", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/namespace.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fnamespace.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -27,11 +27,18 @@ pub fn item_namespace(cx: &CodegenCx<'ll, '_>, def_id: DefId) -> &'ll DIScope {\n         .parent\n         .map(|parent| item_namespace(cx, DefId { krate: def_id.krate, index: parent }));\n \n+    let crate_name_as_str;\n+    let name_to_string;\n     let namespace_name = match def_key.disambiguated_data.data {\n-        DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate),\n-        data => data.as_symbol(),\n+        DefPathData::CrateRoot => {\n+            crate_name_as_str = cx.tcx.crate_name(def_id.krate).as_str();\n+            &*crate_name_as_str\n+        }\n+        data => {\n+            name_to_string = data.to_string();\n+            &*name_to_string\n+        }\n     };\n-    let namespace_name = namespace_name.as_str();\n \n     let scope = unsafe {\n         llvm::LLVMRustDIBuilderCreateNameSpace("}, {"sha": "45ecb793387d0cb454a10db70b1be8bca5bbbc6f", "filename": "compiler/rustc_codegen_ssa/src/debuginfo/type_names.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fdebuginfo%2Ftype_names.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -5,6 +5,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::{self, subst::SubstsRef, Ty, TyCtxt};\n \n+use std::fmt::Write;\n+\n // Compute the name of the type as it should be stored in debuginfo. Does not do\n // any caching, i.e., calling the function twice with the same type will also do\n // the work twice. The `qualified` parameter only affects the first level of the\n@@ -228,8 +230,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n         if qualified {\n             output.push_str(&tcx.crate_name(def_id.krate).as_str());\n             for path_element in tcx.def_path(def_id).data {\n-                output.push_str(\"::\");\n-                output.push_str(&path_element.data.as_symbol().as_str());\n+                write!(output, \"::{}\", path_element.data).unwrap();\n             }\n         } else {\n             output.push_str(&tcx.item_name(def_id).as_str());"}, {"sha": "afefde07f92973b52f9d39d3bb8e42a087af5b24", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 54, "deletions": 42, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -13,9 +13,9 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_index::vec::IndexVec;\n use rustc_span::hygiene::ExpnId;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n \n-use std::fmt::Write;\n+use std::fmt::{self, Write};\n use std::hash::Hash;\n use tracing::debug;\n \n@@ -155,6 +155,29 @@ pub struct DisambiguatedDefPathData {\n     pub disambiguator: u32,\n }\n \n+impl DisambiguatedDefPathData {\n+    pub fn fmt_maybe_verbose(&self, writer: &mut impl Write, verbose: bool) -> fmt::Result {\n+        match self.data.name() {\n+            DefPathDataName::Named(name) => {\n+                if verbose && self.disambiguator != 0 {\n+                    write!(writer, \"{}#{}\", name, self.disambiguator)\n+                } else {\n+                    writer.write_str(&name.as_str())\n+                }\n+            }\n+            DefPathDataName::Anon { namespace } => {\n+                write!(writer, \"{{{}#{}}}\", namespace, self.disambiguator)\n+            }\n+        }\n+    }\n+}\n+\n+impl fmt::Display for DisambiguatedDefPathData {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.fmt_maybe_verbose(f, true)\n+    }\n+}\n+\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub struct DefPath {\n     /// The path leading from the crate root to the item.\n@@ -198,33 +221,11 @@ impl DefPath {\n     /// Returns a string representation of the `DefPath` without\n     /// the crate-prefix. This method is useful if you don't have\n     /// a `TyCtxt` available.\n-    pub fn to_string_no_crate(&self) -> String {\n+    pub fn to_string_no_crate_verbose(&self) -> String {\n         let mut s = String::with_capacity(self.data.len() * 16);\n \n         for component in &self.data {\n-            write!(s, \"::{}[{}]\", component.data.as_symbol(), component.disambiguator).unwrap();\n-        }\n-\n-        s\n-    }\n-\n-    /// Returns a filename-friendly string for the `DefPath`, with the\n-    /// crate-prefix.\n-    pub fn to_string_friendly<F>(&self, crate_imported_name: F) -> String\n-    where\n-        F: FnOnce(CrateNum) -> Symbol,\n-    {\n-        let crate_name_str = crate_imported_name(self.krate).as_str();\n-        let mut s = String::with_capacity(crate_name_str.len() + self.data.len() * 16);\n-\n-        write!(s, \"::{}\", crate_name_str).unwrap();\n-\n-        for component in &self.data {\n-            if component.disambiguator == 0 {\n-                write!(s, \"::{}\", component.data.as_symbol()).unwrap();\n-            } else {\n-                write!(s, \"{}[{}]\", component.data.as_symbol(), component.disambiguator).unwrap();\n-            }\n+            write!(s, \"::{}\", component).unwrap();\n         }\n \n         s\n@@ -240,12 +241,9 @@ impl DefPath {\n         for component in &self.data {\n             s.extend(opt_delimiter);\n             opt_delimiter = Some('-');\n-            if component.disambiguator == 0 {\n-                write!(s, \"{}\", component.data.as_symbol()).unwrap();\n-            } else {\n-                write!(s, \"{}[{}]\", component.data.as_symbol(), component.disambiguator).unwrap();\n-            }\n+            write!(s, \"{}\", component).unwrap();\n         }\n+\n         s\n     }\n }\n@@ -427,6 +425,12 @@ impl Definitions {\n     }\n }\n \n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum DefPathDataName {\n+    Named(Symbol),\n+    Anon { namespace: Symbol },\n+}\n+\n impl DefPathData {\n     pub fn get_opt_name(&self) -> Option<Symbol> {\n         use self::DefPathData::*;\n@@ -437,22 +441,30 @@ impl DefPathData {\n         }\n     }\n \n-    pub fn as_symbol(&self) -> Symbol {\n+    pub fn name(&self) -> DefPathDataName {\n         use self::DefPathData::*;\n         match *self {\n-            TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => name,\n+            TypeNs(name) | ValueNs(name) | MacroNs(name) | LifetimeNs(name) => {\n+                DefPathDataName::Named(name)\n+            }\n             // Note that this does not show up in user print-outs.\n-            CrateRoot => sym::double_braced_crate,\n-            Impl => sym::double_braced_impl,\n-            Misc => sym::double_braced_misc,\n-            ClosureExpr => sym::double_braced_closure,\n-            Ctor => sym::double_braced_constructor,\n-            AnonConst => sym::double_braced_constant,\n-            ImplTrait => sym::double_braced_opaque,\n+            CrateRoot => DefPathDataName::Anon { namespace: kw::Crate },\n+            Impl => DefPathDataName::Anon { namespace: kw::Impl },\n+            Misc => DefPathDataName::Anon { namespace: sym::misc },\n+            ClosureExpr => DefPathDataName::Anon { namespace: sym::closure },\n+            Ctor => DefPathDataName::Anon { namespace: sym::constructor },\n+            AnonConst => DefPathDataName::Anon { namespace: sym::constant },\n+            ImplTrait => DefPathDataName::Anon { namespace: sym::opaque },\n         }\n     }\n+}\n \n-    pub fn to_string(&self) -> String {\n-        self.as_symbol().to_string()\n+impl fmt::Display for DefPathData {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.name() {\n+            DefPathDataName::Named(name) => f.write_str(&name.as_str()),\n+            // FIXME(#70334): this will generate legacy {{closure}}, {{impl}}, etc\n+            DefPathDataName::Anon { namespace } => write!(f, \"{{{{{}}}}}\", namespace),\n+        }\n     }\n }"}, {"sha": "795c5a64d26b72e44b6b1c2d15dbed318f907b14", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 disambiguated_data: &DisambiguatedDefPathData,\n             ) -> Result<Self::Path, Self::Error> {\n                 let mut path = print_prefix(self)?;\n-                path.push(disambiguated_data.data.as_symbol().to_string());\n+                path.push(disambiguated_data.to_string());\n                 Ok(path)\n             }\n             fn path_generic_args("}, {"sha": "7a3035e5b463162f74cd17c6876ddcba8e16867a", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -846,7 +846,7 @@ impl<'tcx> LateContext<'tcx> {\n                     return Ok(path);\n                 }\n \n-                path.push(disambiguated_data.data.as_symbol());\n+                path.push(Symbol::intern(&disambiguated_data.data.to_string()));\n                 Ok(path)\n             }\n "}, {"sha": "d6869ab88751a52fbef06b1ca1cbaf68d2a5de17", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         if cfg!(debug_assertions) {\n             if hir_id.owner != self.current_dep_node_owner {\n                 let node_str = match self.definitions.opt_hir_id_to_local_def_id(hir_id) {\n-                    Some(def_id) => self.definitions.def_path(def_id).to_string_no_crate(),\n+                    Some(def_id) => self.definitions.def_path(def_id).to_string_no_crate_verbose(),\n                     None => format!(\"{:?}\", node),\n                 };\n \n@@ -254,9 +254,11 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n                      current_dep_node_owner={} ({:?}), hir_id.owner={} ({:?})\",\n                     self.source_map.span_to_string(span),\n                     node_str,\n-                    self.definitions.def_path(self.current_dep_node_owner).to_string_no_crate(),\n+                    self.definitions\n+                        .def_path(self.current_dep_node_owner)\n+                        .to_string_no_crate_verbose(),\n                     self.current_dep_node_owner,\n-                    self.definitions.def_path(hir_id.owner).to_string_no_crate(),\n+                    self.definitions.def_path(hir_id.owner).to_string_no_crate_verbose(),\n                     hir_id.owner,\n                 )\n             }"}, {"sha": "ceb873adf5cb6fcf766f484f4d725f40d7c85373", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1002,11 +1002,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId) -> String {\n                 let def_id = map.local_def_id(id);\n                 tcx.def_path_str(def_id.to_def_id())\n             } else if let Some(path) = map.def_path_from_hir_id(id) {\n-                path.data\n-                    .into_iter()\n-                    .map(|elem| elem.data.to_string())\n-                    .collect::<Vec<_>>()\n-                    .join(\"::\")\n+                path.data.into_iter().map(|elem| elem.to_string()).collect::<Vec<_>>().join(\"::\")\n             } else {\n                 String::from(\"<missing path>\")\n             }"}, {"sha": "22c3fd37be14d0d07620e8d19754b68a70e56258", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1272,7 +1272,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             // Don't print the whole crate disambiguator. That's just\n             // annoying in debug output.\n             &(crate_disambiguator.to_fingerprint().to_hex())[..4],\n-            self.def_path(def_id).to_string_no_crate()\n+            self.def_path(def_id).to_string_no_crate_verbose()\n         )\n     }\n "}, {"sha": "cfc4b062885b8e864378397c8d05c005efff5c09", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_hir::ItemKind;\n use rustc_session::config::TrimmedDefPaths;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -1498,25 +1498,21 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n \n         // FIXME(eddyb) `name` should never be empty, but it\n         // currently is for `extern { ... }` \"foreign modules\".\n-        let name = disambiguated_data.data.as_symbol();\n-        if name != kw::Invalid {\n+        let name = disambiguated_data.data.name();\n+        if name != DefPathDataName::Named(kw::Invalid) {\n             if !self.empty_path {\n                 write!(self, \"::\")?;\n             }\n-            if Ident::with_dummy_span(name).is_raw_guess() {\n-                write!(self, \"r#\")?;\n-            }\n-            write!(self, \"{}\", name)?;\n \n-            // FIXME(eddyb) this will print e.g. `{{closure}}#3`, but it\n-            // might be nicer to use something else, e.g. `{closure#3}`.\n-            let dis = disambiguated_data.disambiguator;\n-            let print_dis = disambiguated_data.data.get_opt_name().is_none()\n-                || dis != 0 && self.tcx.sess.verbose();\n-            if print_dis {\n-                write!(self, \"#{}\", dis)?;\n+            if let DefPathDataName::Named(name) = name {\n+                if Ident::with_dummy_span(name).is_raw_guess() {\n+                    write!(self, \"r#\")?;\n+                }\n             }\n \n+            let verbose = self.tcx.sess.verbose();\n+            disambiguated_data.fmt_maybe_verbose(&mut self, verbose)?;\n+\n             self.empty_path = false;\n         }\n "}, {"sha": "4e8db3194bdff623109ae4e0bfa3b7902d7229cb", "filename": "compiler/rustc_middle/src/ty/query/profiling_support.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fprofiling_support.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -55,18 +55,22 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n         };\n \n         let dis_buffer = &mut [0u8; 16];\n+        let crate_name;\n+        let other_name;\n         let name;\n         let dis;\n         let end_index;\n \n         match def_key.disambiguated_data.data {\n             DefPathData::CrateRoot => {\n-                name = self.tcx.original_crate_name(def_id.krate);\n+                crate_name = self.tcx.original_crate_name(def_id.krate).as_str();\n+                name = &*crate_name;\n                 dis = \"\";\n                 end_index = 3;\n             }\n             other => {\n-                name = other.as_symbol();\n+                other_name = other.to_string();\n+                name = other_name.as_str();\n                 if def_key.disambiguated_data.disambiguator == 0 {\n                     dis = \"\";\n                     end_index = 3;\n@@ -80,7 +84,6 @@ impl<'p, 'c, 'tcx> QueryKeyStringBuilder<'p, 'c, 'tcx> {\n             }\n         }\n \n-        let name = &*name.as_str();\n         let components = [\n             StringComponent::Ref(parent_string_id),\n             StringComponent::Value(\"::\"),"}, {"sha": "554ada1ab254cfe0969fe763650f2b6975ee4aa6", "filename": "compiler/rustc_mir/src/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -132,9 +132,8 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             return Ok(self);\n         }\n \n-        self.path.push_str(\"::\");\n+        write!(self.path, \"::{}\", disambiguated_data.data).unwrap();\n \n-        self.path.push_str(&disambiguated_data.data.as_symbol().as_str());\n         Ok(self)\n     }\n "}, {"sha": "3c89111a659f55ad929e9cfc3b7053c8bdb8dc3f", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -3,6 +3,7 @@ use std::collections::hash_map::Entry;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::definitions::DefPathDataName;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::exported_symbols::SymbolExportLevel;\n use rustc_middle::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, Linkage, Visibility};\n@@ -354,7 +355,10 @@ fn compute_codegen_unit_name(\n     *cache.entry((cgu_def_id, volatile)).or_insert_with(|| {\n         let def_path = tcx.def_path(cgu_def_id);\n \n-        let components = def_path.data.iter().map(|part| part.data.as_symbol());\n+        let components = def_path.data.iter().map(|part| match part.data.name() {\n+            DefPathDataName::Named(name) => name,\n+            DefPathDataName::Anon { .. } => unreachable!(),\n+        });\n \n         let volatile_suffix = volatile.then_some(\"volatile\");\n "}, {"sha": "24695f5cdfa0496f6dbbce7c8277eaeec2138335", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -112,14 +112,14 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                 missing_items.push(format!(\n                     \"[local_id: {}, owner: {}]\",\n                     local_id,\n-                    self.hir_map.def_path(owner).to_string_no_crate()\n+                    self.hir_map.def_path(owner).to_string_no_crate_verbose()\n                 ));\n             }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n                 Max ItemLocalId = {}, missing IDs = {:?}; seens IDs = {:?}\",\n-                    self.hir_map.def_path(owner).to_string_no_crate(),\n+                    self.hir_map.def_path(owner).to_string_no_crate_verbose(),\n                     max,\n                     missing_items,\n                     self.hir_ids_seen\n@@ -148,8 +148,8 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n                 format!(\n                     \"HirIdValidator: The recorded owner of {} is {} instead of {}\",\n                     self.hir_map.node_to_string(hir_id),\n-                    self.hir_map.def_path(hir_id.owner).to_string_no_crate(),\n-                    self.hir_map.def_path(owner).to_string_no_crate()\n+                    self.hir_map.def_path(hir_id.owner).to_string_no_crate_verbose(),\n+                    self.hir_map.def_path(owner).to_string_no_crate_verbose()\n                 )\n             });\n         }"}, {"sha": "602bb4a44a91b686dc90d2dc5ce9227eb13bdac9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -333,6 +333,7 @@ symbols! {\n         clone,\n         clone_closures,\n         clone_from,\n+        closure,\n         closure_to_fn_coercion,\n         cmp,\n         cmpxchg16b_target_feature,\n@@ -369,6 +370,8 @@ symbols! {\n         const_trait_bound_opt_out,\n         const_trait_impl,\n         const_transmute,\n+        constant,\n+        constructor,\n         contents,\n         context,\n         convert,\n@@ -438,13 +441,6 @@ symbols! {\n         document_private_items,\n         dotdot_in_tuple_patterns,\n         dotdoteq_in_patterns,\n-        double_braced_closure: \"{{closure}}\",\n-        double_braced_constant: \"{{constant}}\",\n-        double_braced_constructor: \"{{constructor}}\",\n-        double_braced_crate: \"{{crate}}\",\n-        double_braced_impl: \"{{impl}}\",\n-        double_braced_misc: \"{{misc}}\",\n-        double_braced_opaque: \"{{opaque}}\",\n         drop,\n         drop_in_place,\n         drop_types_in_const,\n@@ -679,6 +675,7 @@ symbols! {\n         minnumf32,\n         minnumf64,\n         mips_target_feature,\n+        misc,\n         module,\n         module_path,\n         more_struct_aliases,"}, {"sha": "b96e318bd3ea1a83cfe691c54aa083f1d002cc82", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -316,7 +316,8 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             self.path.finalize_pending_component();\n         }\n \n-        self.write_str(&disambiguated_data.data.as_symbol().as_str())?;\n+        write!(self, \"{}\", disambiguated_data.data)?;\n+\n         Ok(self)\n     }\n     fn path_generic_args("}, {"sha": "c2e06d067dc6ef0bdacb5d70fa594ed5c7f1801d", "filename": "src/test/codegen-units/polymorphization/unused_type_parameters.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpolymorphization%2Funused_type_parameters.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -64,7 +64,7 @@ mod closures {\n         add_one(3)\n     }\n \n-//~ MONO_ITEM fn closures::unused::<T>::{{closure}}#0\n+//~ MONO_ITEM fn closures::unused::<T>::{closure#0}\n //~ MONO_ITEM fn closures::unused::<T>\n \n     // Function has an unused type parameter in closure, but not in parent.\n@@ -74,7 +74,7 @@ mod closures {\n         add_one(3)\n     }\n \n-//~ MONO_ITEM fn closures::used_parent::<T>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_parent::<T>::{closure#0}\n //~ MONO_ITEM fn closures::used_parent::<u32>\n //~ MONO_ITEM fn closures::used_parent::<u64>\n \n@@ -88,8 +88,8 @@ mod closures {\n         x()\n     }\n \n-//~ MONO_ITEM fn closures::used_binding_value::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn closures::used_binding_value::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_binding_value::<u32>::{closure#0}\n+//~ MONO_ITEM fn closures::used_binding_value::<u64>::{closure#0}\n //~ MONO_ITEM fn closures::used_binding_value::<u32>\n //~ MONO_ITEM fn closures::used_binding_value::<u64>\n \n@@ -103,8 +103,8 @@ mod closures {\n         x()\n     }\n \n-//~ MONO_ITEM fn closures::used_binding_type::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn closures::used_binding_type::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_binding_type::<u32>::{closure#0}\n+//~ MONO_ITEM fn closures::used_binding_type::<u64>::{closure#0}\n //~ MONO_ITEM fn closures::used_binding_type::<u32>\n //~ MONO_ITEM fn closures::used_binding_type::<u64>\n \n@@ -114,8 +114,8 @@ mod closures {\n         x(t)\n     }\n \n-//~ MONO_ITEM fn closures::used_argument::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn closures::used_argument::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_argument::<u32>::{closure#0}\n+//~ MONO_ITEM fn closures::used_argument::<u64>::{closure#0}\n //~ MONO_ITEM fn closures::used_argument::<u32>\n //~ MONO_ITEM fn closures::used_argument::<u64>\n \n@@ -126,8 +126,8 @@ mod closures {\n         x(t)\n     }\n \n-//~ MONO_ITEM fn closures::used_argument_closure::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn closures::used_argument_closure::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_argument_closure::<u32>::{closure#0}\n+//~ MONO_ITEM fn closures::used_argument_closure::<u64>::{closure#0}\n //~ MONO_ITEM fn closures::used_argument_closure::<u32>\n //~ MONO_ITEM fn closures::used_argument_closure::<u64>\n \n@@ -138,8 +138,8 @@ mod closures {\n         y()\n     }\n \n-//~ MONO_ITEM fn closures::used_upvar::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn closures::used_upvar::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_upvar::<u32>::{closure#0}\n+//~ MONO_ITEM fn closures::used_upvar::<u64>::{closure#0}\n //~ MONO_ITEM fn closures::used_upvar::<u32>\n //~ MONO_ITEM fn closures::used_upvar::<u64>\n \n@@ -149,8 +149,8 @@ mod closures {\n         x()\n     }\n \n-//~ MONO_ITEM fn closures::used_substs::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn closures::used_substs::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn closures::used_substs::<u32>::{closure#0}\n+//~ MONO_ITEM fn closures::used_substs::<u64>::{closure#0}\n //~ MONO_ITEM fn closures::used_substs::<u32>\n //~ MONO_ITEM fn closures::used_substs::<u64>\n }\n@@ -210,7 +210,7 @@ mod methods {\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn methods::Foo::<F>::closure_unused_all::<G>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_unused_all::<G>::{closure#0}\n //~ MONO_ITEM fn methods::Foo::<F>::closure_unused_all::<G>\n \n         // Function uses type parameter from impl and fn in closure.\n@@ -224,8 +224,8 @@ mod methods {\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_both::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_both::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_both::<u32>::{closure#0}\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_both::<u64>::{closure#0}\n //~ MONO_ITEM fn methods::Foo::<u32>::closure_used_both::<u32>\n //~ MONO_ITEM fn methods::Foo::<u64>::closure_used_both::<u64>\n \n@@ -239,8 +239,8 @@ mod methods {\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u32>::{{closure}}#0\n-//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u64>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u32>::{closure#0}\n+//~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u64>::{closure#0}\n //~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u32>\n //~ MONO_ITEM fn methods::Foo::<F>::closure_used_fn::<u64>\n \n@@ -254,8 +254,8 @@ mod methods {\n             add_one(3)\n         }\n \n-//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_impl::<G>::{{closure}}#0\n-//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_impl::<G>::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_impl::<G>::{closure#0}\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_impl::<G>::{closure#0}\n //~ MONO_ITEM fn methods::Foo::<u32>::closure_used_impl::<G>\n //~ MONO_ITEM fn methods::Foo::<u64>::closure_used_impl::<G>\n \n@@ -265,8 +265,8 @@ mod methods {\n             x()\n         }\n \n-//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_substs::{{closure}}#0\n-//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_substs::{{closure}}#0\n+//~ MONO_ITEM fn methods::Foo::<u32>::closure_used_substs::{closure#0}\n+//~ MONO_ITEM fn methods::Foo::<u64>::closure_used_substs::{closure#0}\n //~ MONO_ITEM fn methods::Foo::<u32>::closure_used_substs\n //~ MONO_ITEM fn methods::Foo::<u64>::closure_used_substs\n     }"}, {"sha": "c8c15792a2b33c1fb69792f8690b7654b72b501d", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -22,15 +22,15 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc0))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44"}, {"sha": "ddf79fca9f6390633767af793622bc31081211b9", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -24,15 +24,15 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55"}, {"sha": "5f81cb6e9129f38f8a14deb29043186d53cb9812", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "5f81cb6e9129f38f8a14deb29043186d53cb9812", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "6034645864656af9de38ce46e792c1b28cf48857", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -19,10 +19,10 @@\n           _3 = const FOO;                  // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), const_param_did: None }, [], None)\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), const_param_did: None }, [], None) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main::FOO), const_param_did: None }, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "feef65f52ebe0f6d830d04a437d75fa13a96c1f7", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_4);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "e7ebfee7f3e013dfb5cc5a4c4a182f552a7dae7c", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -17,10 +17,10 @@\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +                                          // ty::Const\n +                                          // + ty: &i32\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "7ec0751263fb13b8e8214b4029d1b4d4fad736aa", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n                                            // + ty: &(i32, i32)\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = ((*_4).1: i32);             // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "588c291bcc37a1bf0a39db45f400dc1f50a1ff3c", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -17,10 +17,10 @@\n +         _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // ty::Const\n +                                          // + ty: &(i32, i32)\n-+                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "f15dcf2338841a73906b687e23df85ac377a8398", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "f15dcf2338841a73906b687e23df85ac377a8398", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "82c1292cbd05c603f0116cb962687acb4a6b7532", "filename": "src/test/mir-opt/generator-drop-cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -5,7 +5,7 @@\n // Regression test for #58892, generator drop shims should not have blocks\n // spuriously marked as cleanup\n \n-// EMIT_MIR generator_drop_cleanup.main-{{closure}}.generator_drop.0.mir\n+// EMIT_MIR generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir\n fn main() {\n     let gen = || {\n         let _s = String::new();"}, {"sha": "b72170adec37a818475d83d84f096d06c47674c5", "filename": "src/test/mir-opt/generator-storage-dead-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-storage-dead-unwind.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -17,7 +17,7 @@ struct Bar(i32);\n \n fn take<T>(_x: T) {}\n \n-// EMIT_MIR generator_storage_dead_unwind.main-{{closure}}.StateTransform.before.mir\n+// EMIT_MIR generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir\n fn main() {\n     let _gen = || {\n         let a = Foo(5);"}, {"sha": "7dad63a61d6d891d2eaed75d01edd3c9366fb0cb", "filename": "src/test/mir-opt/generator-tiny.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -14,7 +14,7 @@ impl Drop for HasDrop {\n \n fn callee() {}\n \n-// EMIT_MIR generator_tiny.main-{{closure}}.generator_resume.0.mir\n+// EMIT_MIR generator_tiny.main-{closure#0}.generator_resume.0.mir\n fn main() {\n     let _gen = |_x: u8| {\n         let _d = HasDrop;"}, {"sha": "31f85469c260670601714df077794d5a097a939a", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main::{{closure}}#0` 0 generator_drop\n+// MIR for `main::{closure#0}` 0 generator_drop\n /* generator_layout = GeneratorLayout {\n     field_tys: {\n         _0: std::string::String,\n@@ -14,7 +14,7 @@\n     },\n } */\n \n-fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {String, ()}]) -> () {\n+fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {String, ()}]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     let mut _2: ();                      // in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6\n     let _3: std::string::String;         // in scope 0 at $DIR/generator-drop-cleanup.rs:11:13: 11:15", "previous_filename": "src/test/mir-opt/generator_drop_cleanup.main-{{closure}}.generator_drop.0.mir"}, {"sha": "b76e41230e4c0aad1de7d12a5a6880bc11ac43d5", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `main::{{closure}}#0` before StateTransform\n+// MIR for `main::{closure#0}` before StateTransform\n \n-fn main::{{closure}}#0(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 28:6 {Foo, Bar, ()}], _2: ()) -> ()\n+fn main::{closure#0}(_1: [generator@$DIR/generator-storage-dead-unwind.rs:22:16: 28:6 {Foo, Bar, ()}], _2: ()) -> ()\n yields ()\n  {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-storage-dead-unwind.rs:22:19: 22:19", "previous_filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{{closure}}.StateTransform.before.mir"}, {"sha": "990aa1ec08775ec239c3defb5452a5095f58a72b", "filename": "src/test/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,4 +1,4 @@\n-// MIR for `main::{{closure}}#0` 0 generator_resume\n+// MIR for `main::{closure#0}` 0 generator_resume\n /* generator_layout = GeneratorLayout {\n     field_tys: {},\n     variant_fields: {\n@@ -10,7 +10,7 @@\n     storage_conflicts: BitMatrix(0x0) {},\n } */\n \n-fn main::{{closure}}#0(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> GeneratorState<(), ()> {\n+fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n     let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     let _3: HasDrop;                     // in scope 0 at $DIR/generator-tiny.rs:20:13: 20:15", "previous_filename": "src/test/mir-opt/generator_tiny.main-{{closure}}.generator_resume.0.mir"}, {"sha": "c970b1bfac4900c9617a37992d10ad0109392e79", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,8 +4,8 @@ fn foo(_1: T, _2: i32) -> i32 {\n     debug _t => _1;                      // in scope 0 at $DIR/inline-closure.rs:10:17: 10:19\n     debug q => _2;                       // in scope 0 at $DIR/inline-closure.rs:10:24: 10:25\n     let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure.rs:10:35: 10:38\n-    let _3: [closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n-    let mut _4: &[closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure.rs:12:5: 12:6\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n+    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure.rs:12:5: 12:6\n     let mut _5: (i32, i32);              // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n     let mut _6: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:7: 12:8\n     let mut _7: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:10: 12:11"}, {"sha": "2f2db51ec86275cd40d2c4755918eb52c4966769", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,8 +4,8 @@ fn foo(_1: T, _2: &i32) -> i32 {\n     debug _t => _1;                      // in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:17: 11:19\n     debug q => _2;                       // in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:24: 11:25\n     let mut _0: i32;                     // return place in scope 0 at $DIR/inline-closure-borrows-arg.rs:11:36: 11:39\n-    let _3: [closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n-    let mut _4: &[closure@foo<T>::{{closure}}#0]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n+    let _3: [closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n+    let mut _4: &[closure@foo<T>::{closure#0}]; // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n     let mut _5: (&i32, &i32);            // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     let mut _6: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n     let mut _7: &i32;                    // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11"}, {"sha": "cb222a997b6d9c99c63f2d3dc7bfedfc595e8f58", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,10 +4,10 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n     debug t => _1;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:17: 10:18\n     debug q => _2;                       // in scope 0 at $DIR/inline-closure-captures.rs:10:23: 10:24\n     let mut _0: (i32, T);                // return place in scope 0 at $DIR/inline-closure-captures.rs:10:34: 10:42\n-    let _3: [closure@foo<T>::{{closure}}#0 q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n+    let _3: [closure@foo<T>::{closure#0} q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:11:9: 11:10\n     let mut _4: &i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n     let mut _5: &T;                      // in scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-    let mut _6: &[closure@foo<T>::{{closure}}#0 q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:6\n+    let mut _6: &[closure@foo<T>::{closure#0} q:&i32, t:&T]; // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:6\n     let mut _7: (i32,);                  // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n     let mut _8: i32;                     // in scope 0 at $DIR/inline-closure-captures.rs:12:7: 12:8\n     let mut _10: i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9"}, {"sha": "5258f67ebde6fc431d4dbb006076588ecc067891", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -35,10 +35,10 @@ fn bar() -> bool {\n         _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[1]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[1])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[1])) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -49,10 +49,10 @@ fn bar() -> bool {\n         _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar), const_param_did: None }, [], Some(promoted[0])) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "5c34d8e68d0c054710bd6b75320f00a428ec157d", "filename": "src/test/mir-opt/issue-41697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue-41697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41697.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -14,7 +14,7 @@ trait Foo {\n }\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n-// EMIT_MIR issue_41697.{{impl}}-{{constant}}.SimplifyCfg-promote-consts.after.mir\n+// EMIT_MIR issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.mir\n impl Foo for [u8; 1+1] {\n     fn get(&self) -> [u8; 2] {\n         *self"}, {"sha": "26d1f9402c6875211a85d770e28eb9336e3699c9", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.32bit.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.32bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0` after SimplifyCfg-promote-consts\n+// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}` after SimplifyCfg-promote-consts\n \n-<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0: usize = {\n+<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}: usize = {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n ", "previous_filename": "src/test/mir-opt/issue_41697.{{impl}}-{{constant}}.SimplifyCfg-promote-consts.after.64bit.mir"}, {"sha": "26d1f9402c6875211a85d770e28eb9336e3699c9", "filename": "src/test/mir-opt/issue_41697.{impl#0}-{constant#0}.SimplifyCfg-promote-consts.after.64bit.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_41697.%7Bimpl%230%7D-%7Bconstant%230%7D.SimplifyCfg-promote-consts.after.64bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0` after SimplifyCfg-promote-consts\n+// MIR for `<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}` after SimplifyCfg-promote-consts\n \n-<impl at $DIR/issue-41697.rs:18:1: 22:2>::{{constant}}#0: usize = {\n+<impl at $DIR/issue-41697.rs:18:1: 22:2>::{constant#0}: usize = {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n     let mut _1: (usize, bool);           // in scope 0 at $DIR/issue-41697.rs:18:19: 18:22\n ", "previous_filename": "src/test/mir-opt/issue_41697.{{impl}}-{{constant}}.SimplifyCfg-promote-consts.after.32bit.mir"}, {"sha": "f24bcfe5a1cb6ebcb335f70cf7a43fa17d8ef3ee", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -76,10 +76,10 @@\n           (_4.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n           StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _5 = (_4.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _6 = (_4.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -106,10 +106,10 @@\n           _25 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = _5;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "f24bcfe5a1cb6ebcb335f70cf7a43fa17d8ef3ee", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -76,10 +76,10 @@\n           (_4.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n           StorageLive(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _5 = (_4.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _6 = (_4.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -106,10 +106,10 @@\n           _25 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = _5;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "b68fc83320de63d489d864ca4d19530b21e8321c", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -129,10 +129,10 @@\n           _45 = const main::promoted[1];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n           _11 = _45;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -184,10 +184,10 @@\n           _44 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _25 = _44;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _24 = _25;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "b68fc83320de63d489d864ca4d19530b21e8321c", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -129,10 +129,10 @@\n           _45 = const main::promoted[1];   // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[1])) }\n           _11 = _45;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -184,10 +184,10 @@\n           _44 = const main::promoted[0];   // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n           _25 = _44;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _24 = _25;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "e09d32c729c78400bb0dc5a225d2bd1226fcada6", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -58,10 +58,10 @@ fn full_tested_match() -> () {\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: &std::option::Option<i32>\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match), const_param_did: None }, [], Some(promoted[0])) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "0b8c4d25d2d3c651383fd5f0631bc7b065f55b15", "filename": "src/test/mir-opt/retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main-%7Bclosure%230%7D.SimplifyCfg-elaborate-drops.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `main::{{closure}}#0` after SimplifyCfg-elaborate-drops\n+// MIR for `main::{closure#0}` after SimplifyCfg-elaborate-drops\n \n-fn main::{{closure}}#0(_1: &[closure@main::{{closure}}#0], _2: &i32) -> &i32 {\n+fn main::{closure#0}(_1: &[closure@main::{closure#0}], _2: &i32) -> &i32 {\n     debug x => _2;                       // in scope 0 at $DIR/retag.rs:40:32: 40:33\n     let mut _0: &i32;                    // return place in scope 0 at $DIR/retag.rs:40:44: 40:48\n     let _3: &i32;                        // in scope 0 at $DIR/retag.rs:41:13: 41:15", "previous_filename": "src/test/mir-opt/retag.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "52f422d8315e6c249cd36ca074449dd2a59fc9f5", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -10,7 +10,7 @@ fn main() -> () {\n     let mut _7: &mut i32;                // in scope 0 at $DIR/retag.rs:32:29: 32:35\n     let mut _9: &mut i32;                // in scope 0 at $DIR/retag.rs:33:19: 33:20\n     let mut _12: *mut i32;               // in scope 0 at $DIR/retag.rs:36:18: 36:29\n-    let mut _14: [closure@main::{{closure}}#0]; // in scope 0 at $DIR/retag.rs:40:31: 43:6\n+    let mut _14: [closure@main::{closure#0}]; // in scope 0 at $DIR/retag.rs:40:31: 43:6\n     let mut _16: for<'r> fn(&'r i32) -> &'r i32; // in scope 0 at $DIR/retag.rs:44:14: 44:15\n     let mut _17: &i32;                   // in scope 0 at $DIR/retag.rs:44:16: 44:18\n     let _18: &i32;                       // in scope 0 at $DIR/retag.rs:44:16: 44:18\n@@ -118,9 +118,9 @@ fn main() -> () {\n         StorageDead(_2);                 // scope 1 at $DIR/retag.rs:37:5: 37:6\n         StorageLive(_13);                // scope 1 at $DIR/retag.rs:40:9: 40:10\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:40:31: 43:6\n-        _14 = [closure@main::{{closure}}#0]; // scope 1 at $DIR/retag.rs:40:31: 43:6\n+        _14 = [closure@main::{closure#0}]; // scope 1 at $DIR/retag.rs:40:31: 43:6\n                                          // closure\n-                                         // + def_id: DefId(0:14 ~ retag[317d]::main[0]::{{closure}}[0])\n+                                         // + def_id: DefId(0:14 ~ retag[317d]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     for<'r> extern \"rust-call\" fn((&'r i32,)) -> &'r i32,\n@@ -157,10 +157,10 @@ fn main() -> () {\n         _27 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main), const_param_did: None }, [], Some(promoted[0])) }\n         Retag(_27);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_27);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "d0ea2cfb18ba204e2a451fc093999a7d81c3602c", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -6,8 +6,8 @@\n \n struct Test(i32);\n \n-// EMIT_MIR retag.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir\n-// EMIT_MIR retag.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir\n+// EMIT_MIR retag.{impl#0}-foo.SimplifyCfg-elaborate-drops.after.mir\n+// EMIT_MIR retag.{impl#0}-foo_shr.SimplifyCfg-elaborate-drops.after.mir\n impl Test {\n     // Make sure we run the pass on a method, not just on bare functions.\n     fn foo<'x>(&self, x: &'x mut i32) -> &'x mut i32 {\n@@ -25,7 +25,7 @@ impl Drop for Test {\n }\n \n // EMIT_MIR retag.main.SimplifyCfg-elaborate-drops.after.mir\n-// EMIT_MIR retag.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir\n+// EMIT_MIR retag.main-{closure#0}.SimplifyCfg-elaborate-drops.after.mir\n fn main() {\n     let mut x = 0;\n     {"}, {"sha": "f9ed3932d33356399aecaff84c1c2ee7a9d6f251", "filename": "src/test/mir-opt/retag.{impl#0}-foo.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo.SimplifyCfg-elaborate-drops.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "previous_filename": "src/test/mir-opt/retag.{{impl}}-foo.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "87a8603a931da0ea4892abe8e876aa3ff9ff620b", "filename": "src/test/mir-opt/retag.{impl#0}-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.%7Bimpl%230%7D-foo_shr.SimplifyCfg-elaborate-drops.after.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "previous_filename": "src/test/mir-opt/retag.{{impl}}-foo_shr.SimplifyCfg-elaborate-drops.after.mir"}, {"sha": "0c4d8c8f4d029539a2074f9942e3ca94f993b780", "filename": "src/test/mir-opt/simplify_try_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: -Zmir-opt-level=1\n-// EMIT_MIR simplify_try_if_let.{{impl}}-append.SimplifyArmIdentity.diff\n+// EMIT_MIR simplify_try_if_let.{impl#0}-append.SimplifyArmIdentity.diff\n \n use std::ptr::NonNull;\n "}, {"sha": "11f6b5337414a86cb7fe369198c7b78039090ede", "filename": "src/test/mir-opt/simplify_try_if_let.{impl#0}-append.SimplifyArmIdentity.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7Bimpl%230%7D-append.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7Bimpl%230%7D-append.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try_if_let.%7Bimpl%230%7D-append.SimplifyArmIdentity.diff?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "previous_filename": "src/test/mir-opt/simplify_try_if_let.{{impl}}-append.SimplifyArmIdentity.diff"}, {"sha": "c68ec21a039fdf16ae59fa1623cddf7a2f64e0cf", "filename": "src/test/mir-opt/unusual-item-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual-item-types.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -5,19 +5,19 @@\n \n struct A;\n \n-// EMIT_MIR unusual_item_types.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.mir\n impl A {\n     const ASSOCIATED_CONSTANT: i32 = 2;\n }\n \n // See #59021\n-// EMIT_MIR unusual_item_types.Test-X-{{constructor}}.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.Test-X-{constructor#0}.mir_map.0.mir\n enum Test {\n     X(usize),\n     Y { a: usize },\n }\n \n-// EMIT_MIR unusual_item_types.E-V-{{constant}}.mir_map.0.mir\n+// EMIT_MIR unusual_item_types.E-V-{constant#0}.mir_map.0.mir\n enum E {\n     V = 5,\n }"}, {"sha": "f11fce891f4c54d83044c9c7329321650453c041", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.32bit.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.32bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `E::V::{{constant}}#0` 0 mir_map\n+// MIR for `E::V::{constant#0}` 0 mir_map\n \n-E::V::{{constant}}#0: isize = {\n+E::V::{constant#0}: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n \n     bb0: {", "previous_filename": "src/test/mir-opt/unusual_item_types.E-V-{{constant}}.mir_map.0.32bit.mir"}, {"sha": "f11fce891f4c54d83044c9c7329321650453c041", "filename": "src/test/mir-opt/unusual_item_types.E-V-{constant#0}.mir_map.0.64bit.mir", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.E-V-%7Bconstant%230%7D.mir_map.0.64bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,6 +1,6 @@\n-// MIR for `E::V::{{constant}}#0` 0 mir_map\n+// MIR for `E::V::{constant#0}` 0 mir_map\n \n-E::V::{{constant}}#0: isize = {\n+E::V::{constant#0}: isize = {\n     let mut _0: isize;                   // return place in scope 0 at $DIR/unusual-item-types.rs:22:9: 22:10\n \n     bb0: {", "previous_filename": "src/test/mir-opt/unusual_item_types.E-V-{{constant}}.mir_map.0.64bit.mir"}, {"sha": "832f18e14c25d288b14c6690804824d44a97b84a", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.32bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.32bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "previous_filename": "src/test/mir-opt/unusual_item_types.Test-X-{{constructor}}.mir_map.0.32bit.mir"}, {"sha": "832f18e14c25d288b14c6690804824d44a97b84a", "filename": "src/test/mir-opt/unusual_item_types.Test-X-{constructor#0}.mir_map.0.64bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.Test-X-%7Bconstructor%230%7D.mir_map.0.64bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "previous_filename": "src/test/mir-opt/unusual_item_types.Test-X-{{constructor}}.mir_map.0.64bit.mir"}, {"sha": "fd3d707d539696d3b379f1ed67b7cf265343de9e", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "previous_filename": "src/test/mir-opt/unusual_item_types.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.32bit.mir"}, {"sha": "fd3d707d539696d3b379f1ed67b7cf265343de9e", "filename": "src/test/mir-opt/unusual_item_types.{impl#0}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funusual_item_types.%7Bimpl%230%7D-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "previous_filename": "src/test/mir-opt/unusual_item_types.{{impl}}-ASSOCIATED_CONSTANT.mir_map.0.64bit.mir"}, {"sha": "2319de556836616f2f6b0a9d89ad972bc64c55b8", "filename": "src/test/rustdoc-ui/infinite-recursive-type-impl-trait-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Finfinite-recursive-type-impl-trait-return.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -5,7 +5,7 @@\n pub async fn f() -> impl std::fmt::Debug {\n     #[derive(Debug)]\n     enum E {\n-    //~^ ERROR recursive type `f::{{closure}}#0::E` has infinite size\n+    //~^ ERROR recursive type `f::{closure#0}::E` has infinite size\n         This(E),\n         Unit,\n     }"}, {"sha": "af09f0a27bf21be32132718d3b0d528cf71b3ec1", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -14,8 +14,8 @@ LL | pub async fn run() {\n    |\n    = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n    = note: required because it appears within the type `for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}`\n-   = note: required because it appears within the type `[static generator@run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]`\n-   = note: required because it appears within the type `from_generator::GenFuture<[static generator@run::{{closure}}#0 for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]>`\n+   = note: required because it appears within the type `[static generator@run::{closure#0} for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]`\n+   = note: required because it appears within the type `from_generator::GenFuture<[static generator@run::{closure#0} for<'r, 's, 't0, 't1, 't2, 't3> {ResumeTy, Arc<Mutex<()>>, &'r Mutex<()>, std::result::Result<MutexGuard<'s, ()>, PoisonError<MutexGuard<'t0, ()>>>, &'t1 MutexGuard<'t2, ()>, MutexGuard<'t3, ()>, (), impl Future}]>`\n    = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future`\n "}, {"sha": "075bdceccfaeb196e2346f4ad3be5f982e95e0b7", "filename": "src/test/ui/const-generics/nested-type.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.full.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -8,7 +8,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/nested-type.rs:16:5\n    |\n LL |     Foo::<17>::value()\n-   |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{{constant}}#0::Foo::<17_usize>::value`\n+   |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{constant#0}::Foo::<17_usize>::value`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "733b02fa8571d687785ad0bb8f71b8e298a54b2f", "filename": "src/test/ui/const-generics/nested-type.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnested-type.min.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -24,7 +24,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/nested-type.rs:16:5\n    |\n LL |     Foo::<17>::value()\n-   |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{{constant}}#0::Foo::<17_usize>::value`\n+   |     ^^^^^^^^^^^^^^^^^^ calling non-const function `Foo::{constant#0}::Foo::<17_usize>::value`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "42e2749b20d283d8082fb4f72b3933fc79f5d438", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,15 +1,15 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `Foo::bytes::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::bytes::{constant#0}`\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `Foo::bytes::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Foo::bytes::{constant#0}`...\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{constant#0}`...\n   --> $DIR/const-size_of-cycle.rs:4:17\n    |\n LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n@@ -26,7 +26,7 @@ LL |     pub fn size_of<T>() -> usize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Foo`...\n    = note: ...which requires normalizing `[u8; _]`...\n-   = note: ...which again requires simplifying constant for the type system `Foo::bytes::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Foo::bytes::{constant#0}`, completing the cycle\n note: cycle used when checking that `Foo` is well-formed\n   --> $DIR/const-size_of-cycle.rs:3:1\n    |"}, {"sha": "8c839f94e3b4a6f3d7caf6eda27e96835a657800", "filename": "src/test/ui/consts/issue-68542-closure-in-array-len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-68542-closure-in-array-len.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -8,7 +8,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-68542-closure-in-array-len.rs:6:13\n    |\n LL |     a: [(); (|| { 0 })()]\n-   |             ^^^^^^^^^^^^ calling non-const function `Bug::a::{{constant}}#0::{{closure}}#0`\n+   |             ^^^^^^^^^^^^ calling non-const function `Bug::a::{constant#0}::{closure#0}`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5cef636e0a817d69834645e85b1ed8aa49a2a2ce", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:12:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A[0]))\n+   |                         ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:19:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A[0]))\n+   |                          ^ cannot access thread local static (DefId(0:4 ~ tls[317d]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "560e29688864a392ef3cac93a78e872f81922be5", "filename": "src/test/ui/deprecation/deprecation-lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.rs?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -314,7 +314,7 @@ mod this_crate {\n         let _ = || {\n             #[deprecated]\n             fn bar() { }\n-            bar(); //~ ERROR use of deprecated function `this_crate::test_fn_closure_body::{{closure}}#0::bar`\n+            bar(); //~ ERROR use of deprecated function `this_crate::test_fn_closure_body::{closure#0}::bar`\n         };\n     }\n "}, {"sha": "12c76f0f4a5d7243465a2bfba03f635ccff6b96b", "filename": "src/test/ui/deprecation/deprecation-lint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-lint.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -298,7 +298,7 @@ error: use of deprecated associated function `this_crate::Trait::trait_deprecate\n LL | ...   <Foo as Trait>::trait_deprecated_text(&foo);\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: use of deprecated function `this_crate::test_fn_closure_body::{{closure}}#0::bar`\n+error: use of deprecated function `this_crate::test_fn_closure_body::{closure#0}::bar`\n   --> $DIR/deprecation-lint.rs:317:13\n    |\n LL |             bar();"}, {"sha": "e578c4b4f819ee79581cbb3c1d2ec06c078b836e", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,4 +1,4 @@\n-error[E0391]: cycle detected when computing type of `cycle1::{{opaque}}#0`\n+error[E0391]: cycle detected when computing type of `cycle1::{opaque#0}`\n   --> $DIR/auto-trait-leak.rs:12:16\n    |\n LL | fn cycle1() -> impl Clone {\n@@ -35,7 +35,7 @@ note: ...which requires type-checking `cycle1`...\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-note: ...which requires computing type of `cycle2::{{opaque}}#0`...\n+note: ...which requires computing type of `cycle2::{opaque#0}`...\n   --> $DIR/auto-trait-leak.rs:20:16\n    |\n LL | fn cycle2() -> impl Clone {\n@@ -71,7 +71,7 @@ note: ...which requires type-checking `cycle2`...\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-   = note: ...which again requires computing type of `cycle1::{{opaque}}#0`, completing the cycle\n+   = note: ...which again requires computing type of `cycle1::{opaque#0}`, completing the cycle\n note: cycle used when checking item types in top-level module\n   --> $DIR/auto-trait-leak.rs:1:1\n    |"}, {"sha": "7ccc7cc987f4e5728a12a4b1903658cce164ac0f", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -10,7 +10,7 @@ note: ...which requires const-evaluating + checking `b`...\n LL | const fn b() -> usize {\n    | ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires const-evaluating + checking `a`, completing the cycle\n-note: cycle used when const-evaluating + checking `ARR::{{constant}}#0`\n+note: cycle used when const-evaluating + checking `ARR::{constant#0}`\n   --> $DIR/infinite-recursion-const-fn.rs:10:18\n    |\n LL | const ARR: [i32; a()] = [5; 6];"}, {"sha": "1148577016ab47952dca433672458f80437f0ee8", "filename": "src/test/ui/issues/issue-17252.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17252.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -16,7 +16,7 @@ note: ...which requires const-evaluating + checking `FOO`...\n LL | const FOO: usize = FOO;\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which again requires normalizing `FOO`, completing the cycle\n-note: cycle used when const-evaluating + checking `main::{{constant}}#0`\n+note: cycle used when const-evaluating + checking `main::{constant#0}`\n   --> $DIR/issue-17252.rs:4:18\n    |\n LL |     let _x: [u8; FOO]; // caused stack overflow prior to fix"}, {"sha": "d3a1993536a00aaa60f8fe1e8408f55536b0959d", "filename": "src/test/ui/issues/issue-23302-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-1.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,21 +1,21 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `X::A::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `X::A::{constant#0}`\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `X::A::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `X::A::{constant#0}`...\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `X::A::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `X::A::{constant#0}`...\n   --> $DIR/issue-23302-1.rs:4:9\n    |\n LL |     A = X::A as isize,\n    |         ^^^^^^^^^^^^^\n    = note: ...which requires normalizing `X::A as isize`...\n-   = note: ...which again requires simplifying constant for the type system `X::A::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `X::A::{constant#0}`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23302-1.rs:3:1\n    |"}, {"sha": "d3b78ea1af5f5c39e70914777182197dea0faeb8", "filename": "src/test/ui/issues/issue-23302-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23302-2.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,21 +1,21 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `Y::A::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Y::A::{constant#0}`\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `Y::A::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Y::A::{constant#0}`...\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n-note: ...which requires const-evaluating + checking `Y::A::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Y::A::{constant#0}`...\n   --> $DIR/issue-23302-2.rs:4:9\n    |\n LL |     A = Y::B as isize,\n    |         ^^^^^^^^^^^^^\n    = note: ...which requires normalizing `Y::B as isize`...\n-   = note: ...which again requires simplifying constant for the type system `Y::A::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Y::A::{constant#0}`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23302-2.rs:3:1\n    |"}, {"sha": "113f86cf0f99fa84c275401b2aea9b7b4ca03735", "filename": "src/test/ui/issues/issue-36163.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36163.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,15 +1,15 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `Foo::B::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Foo::B::{constant#0}`\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n    |\n-note: ...which requires simplifying constant for the type system `Foo::B::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Foo::B::{constant#0}`...\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n    |         ^\n-note: ...which requires const-evaluating + checking `Foo::B::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Foo::B::{constant#0}`...\n   --> $DIR/issue-36163.rs:4:9\n    |\n LL |     B = A,\n@@ -31,7 +31,7 @@ note: ...which requires const-evaluating + checking `A`...\n LL | const A: isize = Foo::B as isize;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires normalizing `A`...\n-   = note: ...which again requires simplifying constant for the type system `Foo::B::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Foo::B::{constant#0}`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-36163.rs:1:1\n    |"}, {"sha": "799ed89dcce3ccd74e25cf20909f9918240fa1be", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: no external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: test::{{closure}}#0 with closure substs [\n+   = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) i32)),\n                (),"}, {"sha": "a094fc45178f77b2a677c52f3a5fe41d938ed2dc", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: no external requirements\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                      ^^^^^^^^^^^^^\n    |\n-   = note: defining type: test::{{closure}}#0 with closure substs [\n+   = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)),\n                (),"}, {"sha": "1a8258376142a20e64aaad026a0253ba697f5e71", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |             let mut closure1 = || p = &y;\n    |                                ^^^^^^^^^\n    |\n-   = note: defining type: test::{{closure}}#0::{{closure}}#0 with closure substs [\n+   = note: defining type: test::{closure#0}::{closure#0} with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                (&'_#1r i32, &'_#2r mut &'_#3r i32),\n@@ -22,7 +22,7 @@ LL | |             closure1();\n LL | |         };\n    | |_________^\n    |\n-   = note: defining type: test::{{closure}}#0 with closure substs [\n+   = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                (&'_#1r i32, &'_#2r mut &'_#3r i32),"}, {"sha": "29fd796882b6a8811246d5c35d2c631c394bd111", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |         let mut closure = || p = &y;\n    |                           ^^^^^^^^^\n    |\n-   = note: defining type: test::{{closure}}#0 with closure substs [\n+   = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n                (&'_#1r i32, &'_#2r mut &'_#3r i32),"}, {"sha": "c4f4facae1fb521b17b3c62a1dfb7aa07ed8fa4a", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: supply::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n                (),"}, {"sha": "c1450564c45d32989f43d180775acddc423b844c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: supply::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n                (),"}, {"sha": "e7b8dff4e7ecb774c8be150292ef5509feb47b4b", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -8,7 +8,7 @@ LL | |\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: case1::{{closure}}#0 with closure substs [\n+   = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n                (),\n@@ -47,7 +47,7 @@ LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: case2::{{closure}}#0 with closure substs [\n+   = note: defining type: case2::{closure#0} with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n                (),"}, {"sha": "c7e68d02dcf1b0ebaf789fb46ce218f6531baf03", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: supply::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t2)) u32>)),\n                (),"}, {"sha": "abbc76eaf4ddf55d511ff792e25791cac2212862", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -10,7 +10,7 @@ LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: supply::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n                (),"}, {"sha": "c91b514a796ceaa59ec168e1911ce4fb0cc71ab3", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: test::{{closure}}#0 with closure substs [\n+   = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n                (),"}, {"sha": "4ddf6f8323f631eccf7093fdef0d978ade42dff8", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -8,7 +8,7 @@ LL | |             demand_y(x, y, p)\n LL | |         },\n    | |_________^\n    |\n-   = note: defining type: supply::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n                (),"}, {"sha": "6dc6f4568058b1e9c7f900a4f9e3b8c102b20a18", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: supply::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n                (),"}, {"sha": "6bcada5c26c83eeafab03c6179ec5357c07609c1", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -9,7 +9,7 @@ LL | |\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: supply::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n                (),"}, {"sha": "4b860a55057b641bba925136020285f983717b74", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -11,7 +11,7 @@ LL | |         require(value);\n LL | |     });\n    | |_____^\n    |\n-   = note: defining type: supply::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: supply::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((T,)),\n                (),"}, {"sha": "1da6c6d2c68577aa240daf7baff1d8b496cba6fe", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: no external requirements\n LL |     expect_sig(|a, b| b); // ought to return `a`\n    |                ^^^^^^^^\n    |\n-   = note: defining type: test::{{closure}}#0 with closure substs [\n+   = note: defining type: test::{closure#0} with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed('r)) i32,\n                (),"}, {"sha": "983d6a06afada75c7edffd8500d13cacbf15bc7b", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n                (),\n@@ -40,7 +40,7 @@ note: external requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: correct_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n                (),\n@@ -67,7 +67,7 @@ note: external requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n                (),\n@@ -103,7 +103,7 @@ note: external requirements\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n                (),"}, {"sha": "2513b0bfccbf188d3ffbb2a71b47e4f8a1cca0fb", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),\n@@ -55,7 +55,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -105,7 +105,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -133,7 +133,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),"}, {"sha": "4eebe682d4fbcbb191ed6b8799ec3d8b0b382183", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),\n@@ -46,7 +46,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -87,7 +87,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -115,7 +115,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -143,7 +143,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),"}, {"sha": "46a02598e19bce96c4c966c39f087d2a31e14103", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: no external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),\n@@ -30,7 +30,7 @@ note: no external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -56,7 +56,7 @@ note: no external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -82,7 +82,7 @@ note: no external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -108,7 +108,7 @@ note: no external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),"}, {"sha": "4e0155bdf2cd0388280d8d990de511180657d498", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -41,7 +41,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n                (),\n@@ -77,7 +77,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n                (),\n@@ -105,7 +105,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n                (),\n@@ -133,7 +133,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n                (),\n@@ -161,7 +161,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: two_regions::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: two_regions::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),\n@@ -203,7 +203,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),\n@@ -231,7 +231,7 @@ note: external requirements\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),"}, {"sha": "7c0d63c368be53dd602b5b1ed7962c9276a2a090", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: generic::<T>::{{closure}}#0 with closure substs [\n+   = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n                (),\n@@ -29,7 +29,7 @@ note: external requirements\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: defining type: generic_fail::<T>::{{closure}}#0 with closure substs [\n+   = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n                (),"}, {"sha": "88d73e7a729a92f5826d545af0bcf947c986f650", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -4,7 +4,7 @@ note: external requirements\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n    |\n-   = note: defining type: no_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n                (),"}, {"sha": "5b175aac1e1cb774de1787b5ca8cdac6abbb2fd8", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -11,7 +11,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: no_region::<T>::{{closure}}#0 with closure substs [\n+   = note: defining type: no_region::<T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n                (),\n@@ -62,7 +62,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: correct_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),\n@@ -95,7 +95,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: wrong_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: wrong_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n                (),\n@@ -141,7 +141,7 @@ LL | |         require(&x, &y)\n LL | |     })\n    | |_____^\n    |\n-   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n+   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n                (),"}, {"sha": "fee8b06e94c0bb5411eacb27b873ecd96c41c07b", "filename": "src/test/ui/specialization/min_specialization/repeated_projection_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specialize on `ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[317d]::Id[0]::This[0]) }, (I,))`\n+error: cannot specialize on `ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[317d]::Id::This) }, (I,))`\n   --> $DIR/repeated_projection_type.rs:19:1\n    |\n LL | / impl<I, V: Id<This = (I,)>> X for V {"}, {"sha": "277f4e8424030faed7f91b027c028605270973ea", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr?ref=c6622d1d05d1ea58cfd9b56cc3a91b2c17316c96", "patch": "@@ -1,21 +1,21 @@\n-error[E0391]: cycle detected when simplifying constant for the type system `Alpha::V3::{{constant}}#0`\n+error[E0391]: cycle detected when simplifying constant for the type system `Alpha::V3::{constant#0}`\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n    |\n-note: ...which requires simplifying constant for the type system `Alpha::V3::{{constant}}#0`...\n+note: ...which requires simplifying constant for the type system `Alpha::V3::{constant#0}`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n-note: ...which requires const-evaluating + checking `Alpha::V3::{{constant}}#0`...\n+note: ...which requires const-evaluating + checking `Alpha::V3::{constant#0}`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^\n    = note: ...which requires computing layout of `Alpha`...\n-   = note: ...which again requires simplifying constant for the type system `Alpha::V3::{{constant}}#0`, completing the cycle\n+   = note: ...which again requires simplifying constant for the type system `Alpha::V3::{constant#0}`, completing the cycle\n note: cycle used when collecting item types in top-level module\n   --> $DIR/self-in-enum-definition.rs:1:1\n    |"}]}