{"sha": "0fbf64bae8be57b02c058f8758d1b53159c42dd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYmY2NGJhZThiZTU3YjAyYzA1OGY4NzU4ZDFiNTMxNTljNDJkZDg=", "commit": {"author": {"name": "Ashley Mannix", "email": "kodraus@hey.com", "date": "2020-10-03T06:36:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-03T06:36:51Z"}, "message": "Add CI for wasm targets using wasm-bindgen (#20)", "tree": {"sha": "6b3b8c7ffe95a399c9298bfd52f69c07e3b0deb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b3b8c7ffe95a399c9298bfd52f69c07e3b0deb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbf64bae8be57b02c058f8758d1b53159c42dd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfeBwDCRBK7hj4Ov3rIwAAdHIIAFtUs4wVpgqdpv4kJmlWbYki\nNulgL52H+9syM7ghdrY+LclwdZ0fUxbQYcFzwESYIsQt6ANfjCgFrQhqvsLnuwHj\nTGA7k1iwsLnQY5/R6+sQ7F5W0Eo8qpRrRxkCytMlk7G2vQa2K1/CTJ5RDdbeNWCx\neHlGCkaNiAy22b77JwnLUNkPw6ovICspe0Zh4uPVRw6tEaY+8NOUkh8r1bItv1L0\nLC0Bw9UiwbSZTJHjltH17z3hG8PI+QWoVd54DUer2AfRZ/IaLbUda06lloSf8PXd\nD4xM+A5cUXiFwUZZV3leqgdHeRf/4j/bpJt8Y9jlJFWFJBqQq8lgspa0hZE5H9g=\n=9uSN\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b3b8c7ffe95a399c9298bfd52f69c07e3b0deb8\nparent 19c85295fed383a7cd584acc129c0cf2eee51c5c\nauthor Ashley Mannix <kodraus@hey.com> 1601707011 +1000\ncommitter GitHub <noreply@github.com> 1601707011 +1000\n\nAdd CI for wasm targets using wasm-bindgen (#20)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbf64bae8be57b02c058f8758d1b53159c42dd8", "html_url": "https://github.com/rust-lang/rust/commit/0fbf64bae8be57b02c058f8758d1b53159c42dd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbf64bae8be57b02c058f8758d1b53159c42dd8/comments", "author": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19c85295fed383a7cd584acc129c0cf2eee51c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19c85295fed383a7cd584acc129c0cf2eee51c5c", "html_url": "https://github.com/rust-lang/rust/commit/19c85295fed383a7cd584acc129c0cf2eee51c5c"}], "stats": {"total": 186, "additions": 186, "deletions": 0}, "files": [{"sha": "b9df36386504a6a1c0b2afcbe00df4345f8673c6", "filename": ".travis.yml", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf64bae8be57b02c058f8758d1b53159c42dd8/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf64bae8be57b02c058f8758d1b53159c42dd8/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=0fbf64bae8be57b02c058f8758d1b53159c42dd8", "patch": "@@ -230,6 +230,30 @@ matrix:\n       arch: amd64\n       env:\n         - TARGET=x86_64-apple-darwin\n+    \n+    # WebAssembly (wasm-bindgen)\n+\n+    - name: \"wasm32-unknown-unknown (node, firefox, chrome)\"\n+      os: linux\n+      arch: amd64\n+      addons:\n+        firefox: latest\n+        chrome : stable\n+      install:\n+        - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n+      script:\n+        - wasm-pack test --node --firefox --chrome --headless crates/core_simd\n+    \n+    - name: \"wasm32-unknown-unknown+simd128 (chrome)\"\n+      os: linux\n+      arch: amd64\n+      addons:\n+        chrome : stable\n+      install:\n+        - curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n+      script:\n+        - RUSTFLAGS=\"-C target-feature=+simd128\"\n+        - wasm-pack test --chrome --headless crates/core_simd\n \n script:\n   - rustup target add $TARGET"}, {"sha": "f9e8a62e48575ad648414996e0c32dbc0989fb4d", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=0fbf64bae8be57b02c058f8758d1b53159c42dd8", "patch": "@@ -8,3 +8,9 @@ repository = \"https://github.com/rust-lang/stdsimd\"\n keywords = [\"core\", \"simd\", \"intrinsics\"]\n categories = [\"hardware-support\", \"no-std\"]\n license = \"MIT OR Apache-2.0\"\n+\n+[target.'cfg(target_arch = \"wasm32\")'.dependencies.wasm-bindgen]\n+version = \"0.2\"\n+\n+[dev-dependencies.wasm-bindgen-test]\n+version = \"0.3\""}, {"sha": "9bcb894b2572af77418e09252b446fc81d60a97f", "filename": "crates/core_simd/tests/ops_impl/float_macros.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Ffloat_macros.rs?ref=0fbf64bae8be57b02c058f8758d1b53159c42dd8", "patch": "@@ -5,6 +5,12 @@ macro_rules! float_tests {\n             use super::*;\n             use helpers::lanewise::*;\n \n+            #[cfg(target_arch = \"wasm32\")]\n+            use wasm_bindgen_test::*;\n+\n+            #[cfg(target_arch = \"wasm32\")]\n+            wasm_bindgen_test_configure!(run_in_browser);\n+\n             // TODO impl this as an associated fn on vectors\n             fn from_slice(slice: &[$scalar]) -> core_simd::$vector {\n                 let mut value = core_simd::$vector::default();\n@@ -17,6 +23,7 @@ macro_rules! float_tests {\n             const B: [$scalar; 16] = [16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.];\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -25,6 +32,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -34,6 +42,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5.;\n@@ -42,6 +51,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_scalar_lhs() {\n                 let a = 5.;\n                 let b = from_slice(&B);\n@@ -50,6 +60,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5.;\n@@ -59,6 +70,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -67,6 +79,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -76,6 +89,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5.;\n@@ -84,6 +98,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_scalar_lhs() {\n                 let a = 5.;\n                 let b = from_slice(&B);\n@@ -92,6 +107,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5.;\n@@ -101,6 +117,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -109,6 +126,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -118,6 +136,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5.;\n@@ -126,6 +145,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_scalar_lhs() {\n                 let a = 5.;\n                 let b = from_slice(&B);\n@@ -134,6 +154,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5.;\n@@ -143,6 +164,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -151,6 +173,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -160,6 +183,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5.;\n@@ -168,6 +192,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_scalar_lhs() {\n                 let a = 5.;\n                 let b = from_slice(&B);\n@@ -176,6 +201,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5.;\n@@ -185,6 +211,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -193,6 +220,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -202,6 +230,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5.;\n@@ -210,6 +239,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_scalar_lhs() {\n                 let a = 5.;\n                 let b = from_slice(&B);\n@@ -218,6 +248,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5.;\n@@ -227,6 +258,7 @@ macro_rules! float_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn neg() {\n                 let v = from_slice(&A);\n                 let expected = apply_unary_lanewise(v, core::ops::Neg::neg);"}, {"sha": "af956aa3e52172b69e22996a41b8802dee65da80", "filename": "crates/core_simd/tests/ops_impl/int_macros.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fint_macros.rs?ref=0fbf64bae8be57b02c058f8758d1b53159c42dd8", "patch": "@@ -5,6 +5,12 @@ macro_rules! int_tests {\n             use super::*;\n             use helpers::lanewise::*;\n \n+            #[cfg(target_arch = \"wasm32\")]\n+            use wasm_bindgen_test::*;\n+\n+            #[cfg(target_arch = \"wasm32\")]\n+            wasm_bindgen_test_configure!(run_in_browser);\n+\n             // TODO impl this as an associated fn on vectors\n             fn from_slice(slice: &[$scalar]) -> core_simd::$vector {\n                 let mut value = core_simd::$vector::default();\n@@ -35,6 +41,7 @@ macro_rules! int_tests {\n             ];\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -43,6 +50,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -52,6 +60,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -60,6 +69,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -68,6 +78,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -77,6 +88,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -85,6 +97,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -94,6 +107,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -102,6 +116,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -110,6 +125,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -119,6 +135,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -127,6 +144,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -136,6 +154,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -144,6 +163,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -152,6 +172,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -161,6 +182,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -169,6 +191,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -178,6 +201,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -186,6 +210,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -194,6 +219,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -203,6 +229,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -211,6 +238,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -220,6 +248,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -228,6 +257,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -236,6 +266,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -245,6 +276,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -253,6 +285,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -262,6 +295,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -270,6 +304,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -278,6 +313,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -287,6 +323,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -295,6 +332,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -304,6 +342,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -312,6 +351,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -320,6 +360,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -329,6 +370,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -337,6 +379,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -346,6 +389,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -354,6 +398,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -362,6 +407,7 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -371,13 +417,15 @@ macro_rules! int_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn neg() {\n                 let v = from_slice(&A);\n                 let expected = apply_unary_lanewise(v, core::ops::Neg::neg);\n                 assert_biteq!(-v, expected);\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn not() {\n                 let v = from_slice(&A);\n                 let expected = apply_unary_lanewise(v, core::ops::Not::not);"}, {"sha": "e6aee4c1d302fdf0acc230bfd9511221b584c2cf", "filename": "crates/core_simd/tests/ops_impl/mask_macros.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fmask_macros.rs?ref=0fbf64bae8be57b02c058f8758d1b53159c42dd8", "patch": "@@ -5,6 +5,12 @@ macro_rules! mask_tests {\n             use super::*;\n             use helpers::lanewise::*;\n \n+            #[cfg(target_arch = \"wasm32\")]\n+            use wasm_bindgen_test::*;\n+\n+            #[cfg(target_arch = \"wasm32\")]\n+            wasm_bindgen_test_configure!(run_in_browser);\n+\n             fn from_slice(slice: &[bool]) -> core_simd::$vector {\n                 let mut value = core_simd::$vector::default();\n                 let value_slice: &mut [_] = value.as_mut();\n@@ -41,6 +47,7 @@ macro_rules! mask_tests {\n             const UNSET_VECTOR: core_simd::$vector = core_simd::$vector::splat(UNSET_SCALAR);\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -49,6 +56,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -58,6 +66,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let expected = a;\n@@ -66,6 +75,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_lhs() {\n                 let a = from_slice(&A);\n                 let expected = a;\n@@ -74,6 +84,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let expected = a;\n@@ -84,6 +95,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -92,6 +104,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -101,20 +114,23 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_rhs() {\n                 let a = from_slice(&A);\n                 assert_biteq!(a | UNSET_SCALAR, a);\n                 assert_biteq!(a | SET_SCALAR, SET_VECTOR);\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_lhs() {\n                 let a = from_slice(&A);\n                 assert_biteq!(UNSET_SCALAR | a, a);\n                 assert_biteq!(SET_SCALAR | a, SET_VECTOR);\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let expected = a;\n@@ -125,6 +141,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -133,6 +150,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -142,6 +160,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let expected = apply_binary_scalar_rhs_lanewise(a, SET_SCALAR, core::ops::BitXor::bitxor);\n@@ -150,6 +169,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_lhs() {\n                 let a = from_slice(&A);\n                 let expected = apply_binary_scalar_lhs_lanewise(SET_SCALAR, a, core::ops::BitXor::bitxor);\n@@ -158,6 +178,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let expected_unset = a;\n@@ -169,6 +190,7 @@ macro_rules! mask_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn not() {\n                 let v = from_slice(&A);\n                 let expected = apply_unary_lanewise(v, core::ops::Not::not);"}, {"sha": "bc8b3be74860ec350a62cd9d2392670586a76a13", "filename": "crates/core_simd/tests/ops_impl/uint_macros.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_impl%2Fuint_macros.rs?ref=0fbf64bae8be57b02c058f8758d1b53159c42dd8", "patch": "@@ -5,6 +5,12 @@ macro_rules! uint_tests {\n             use super::*;\n             use helpers::lanewise::*;\n \n+            #[cfg(target_arch = \"wasm32\")]\n+            use wasm_bindgen_test::*;\n+\n+            #[cfg(target_arch = \"wasm32\")]\n+            wasm_bindgen_test_configure!(run_in_browser);\n+\n             // TODO impl this as an associated fn on vectors\n             fn from_slice(slice: &[$scalar]) -> core_simd::$vector {\n                 let mut value = core_simd::$vector::default();\n@@ -35,6 +41,7 @@ macro_rules! uint_tests {\n             ];\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -43,6 +50,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -52,6 +60,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -60,6 +69,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -68,6 +78,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn add_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -77,6 +88,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -85,6 +97,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -94,6 +107,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 1;\n@@ -102,6 +116,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_scalar_lhs() {\n                 let a = 40;\n                 let b = from_slice(&B);\n@@ -110,6 +125,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn sub_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 1;\n@@ -119,6 +135,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -127,6 +144,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -136,6 +154,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -144,6 +163,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -152,6 +172,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn mul_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -161,6 +182,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -169,6 +191,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -178,6 +201,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -186,6 +210,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -194,6 +219,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn div_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -203,6 +229,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -211,6 +238,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -220,6 +248,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -228,6 +257,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -236,6 +266,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn rem_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -245,6 +276,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -253,6 +285,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -262,6 +295,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -270,6 +304,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -278,6 +313,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitand_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -287,6 +323,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -295,6 +332,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -304,6 +342,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -312,6 +351,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -320,6 +360,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -329,6 +370,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor() {\n                 let a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -337,6 +379,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_assign() {\n                 let mut a = from_slice(&A);\n                 let b = from_slice(&B);\n@@ -346,6 +389,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_rhs() {\n                 let a = from_slice(&A);\n                 let b = 5;\n@@ -354,6 +398,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_scalar_lhs() {\n                 let a = 5;\n                 let b = from_slice(&B);\n@@ -362,6 +407,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn bitxor_assign_scalar() {\n                 let mut a = from_slice(&A);\n                 let b = 5;\n@@ -371,6 +417,7 @@ macro_rules! uint_tests {\n             }\n \n             #[test]\n+            #[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n             fn not() {\n                 let v = from_slice(&A);\n                 let expected = apply_unary_lanewise(v, core::ops::Not::not);"}, {"sha": "f1d5734f1cebd23fcc61bca3a0a1b505865cc190", "filename": "crates/core_simd/webdriver.json", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Fwebdriver.json", "raw_url": "https://github.com/rust-lang/rust/raw/0fbf64bae8be57b02c058f8758d1b53159c42dd8/crates%2Fcore_simd%2Fwebdriver.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fwebdriver.json?ref=0fbf64bae8be57b02c058f8758d1b53159c42dd8", "patch": "@@ -0,0 +1,7 @@\n+{\n+    \"goog:chromeOptions\": {\n+        \"args\": [\n+            \"--enable-features=WebAssemblySimd\"\n+        ]\n+    }\n+}"}]}