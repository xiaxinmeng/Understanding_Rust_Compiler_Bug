{"sha": "9f6a2fde347430323898baa5d36ac9a028ed37a2", "node_id": "C_kwDOAAsO6NoAKDlmNmEyZmRlMzQ3NDMwMzIzODk4YmFhNWQzNmFjOWEwMjhlZDM3YTI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-19T06:08:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-19T06:08:53Z"}, "message": "Rollup merge of #99335 - Dav1dde:fromstr-docs, r=JohnTitor\n\nUse split_once in FromStr docs\n\nCurrent implementation:\n\n```rust\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\n        let coords: Vec<&str> = s.trim_matches(|p| p == '(' || p == ')' )\n                                 .split(',')\n                                 .collect();\n\n        let x_fromstr = coords[0].parse::<i32>()?;\n        let y_fromstr = coords[1].parse::<i32>()?;\n\n        Ok(Point { x: x_fromstr, y: y_fromstr })\n    }\n```\n\nCreating the vector is not necessary, `split_once` does the job better.\n\nAlternatively we could also remove `trim_matches` with `strip_prefix` and `strip_suffix`:\n\n```rust\n        let (x, y) = s\n            .strip_prefix('(')\n            .and_then(|s| s.strip_suffix(')'))\n            .and_then(|s| s.split_once(','))\n            .unwrap();\n```\n\nThe question is how much 'correctness' is too much and distracts from the example. In a real implementation you would also not unwrap (or originally access the vector without bounds checks), but implementing a custom Error and adding a `From<ParseIntError>` and implementing the `Error` trait adds a lot of code to the example which is not relevant to the `FromStr` trait.", "tree": {"sha": "25af3d1765a833105a8a6032ef8a976eb293f886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25af3d1765a833105a8a6032ef8a976eb293f886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6a2fde347430323898baa5d36ac9a028ed37a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi1kp1CRBK7hj4Ov3rIwAAJh0IAEthwklG9Yu11VRU0HkZuQE3\n+J3cazgQTogIMECvYHOGvdMGwYIXW3WSolywUtTjeGfvXXZHEZkXNcyqV9g2lpM7\nzWDpu/zmmtYAxDCaNDhbUxXG0mhXDdty86NCeMMWYc1QyTssg0R8orptQ9WFWtJP\nt6M8Rp7axc0UHpQ3etUyYO2Of78vNwSaZQbIps7aE2+evazLtTrD+ASWPmHElxTT\n5jwSV+zmxc82Aaw4qkr4koUiRBbT0sLFS8ZzQ/yy1iZl6UoEhOiLPzlv+4ZPsHEu\nIhmiRswpnOJ6as7MaIQGdiIfw29ZQMjFiIQR8m3+RR1p7k1qZBnyFCPOBpoip/c=\n=y6L/\n-----END PGP SIGNATURE-----\n", "payload": "tree 25af3d1765a833105a8a6032ef8a976eb293f886\nparent af13e55bc3d0133157331137e5c58febe67527ac\nparent c1c1abc08ab5ae90da2e51ad02246631207113e1\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1658210933 +0530\ncommitter GitHub <noreply@github.com> 1658210933 +0530\n\nRollup merge of #99335 - Dav1dde:fromstr-docs, r=JohnTitor\n\nUse split_once in FromStr docs\n\nCurrent implementation:\n\n```rust\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\n        let coords: Vec<&str> = s.trim_matches(|p| p == '(' || p == ')' )\n                                 .split(',')\n                                 .collect();\n\n        let x_fromstr = coords[0].parse::<i32>()?;\n        let y_fromstr = coords[1].parse::<i32>()?;\n\n        Ok(Point { x: x_fromstr, y: y_fromstr })\n    }\n```\n\nCreating the vector is not necessary, `split_once` does the job better.\n\nAlternatively we could also remove `trim_matches` with `strip_prefix` and `strip_suffix`:\n\n```rust\n        let (x, y) = s\n            .strip_prefix('(')\n            .and_then(|s| s.strip_suffix(')'))\n            .and_then(|s| s.split_once(','))\n            .unwrap();\n```\n\nThe question is how much 'correctness' is too much and distracts from the example. In a real implementation you would also not unwrap (or originally access the vector without bounds checks), but implementing a custom Error and adding a `From<ParseIntError>` and implementing the `Error` trait adds a lot of code to the example which is not relevant to the `FromStr` trait.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6a2fde347430323898baa5d36ac9a028ed37a2", "html_url": "https://github.com/rust-lang/rust/commit/9f6a2fde347430323898baa5d36ac9a028ed37a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6a2fde347430323898baa5d36ac9a028ed37a2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af13e55bc3d0133157331137e5c58febe67527ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/af13e55bc3d0133157331137e5c58febe67527ac", "html_url": "https://github.com/rust-lang/rust/commit/af13e55bc3d0133157331137e5c58febe67527ac"}, {"sha": "c1c1abc08ab5ae90da2e51ad02246631207113e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c1abc08ab5ae90da2e51ad02246631207113e1", "html_url": "https://github.com/rust-lang/rust/commit/c1c1abc08ab5ae90da2e51ad02246631207113e1"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "e9649fc91fa097b60f3b452f1755d34de5e82fdb", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f6a2fde347430323898baa5d36ac9a028ed37a2/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6a2fde347430323898baa5d36ac9a028ed37a2/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=9f6a2fde347430323898baa5d36ac9a028ed37a2", "patch": "@@ -519,12 +519,14 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n ///     type Err = ParseIntError;\n ///\n ///     fn from_str(s: &str) -> Result<Self, Self::Err> {\n-///         let coords: Vec<&str> = s.trim_matches(|p| p == '(' || p == ')' )\n-///                                  .split(',')\n-///                                  .collect();\n-///\n-///         let x_fromstr = coords[0].parse::<i32>()?;\n-///         let y_fromstr = coords[1].parse::<i32>()?;\n+///         let (x, y) = s\n+///             .strip_prefix('(')\n+///             .and_then(|s| s.strip_suffix(')'))\n+///             .and_then(|s| s.split_once(','))\n+///             .unwrap();\n+///\n+///         let x_fromstr = x.parse::<i32>()?;\n+///         let y_fromstr = y.parse::<i32>()?;\n ///\n ///         Ok(Point { x: x_fromstr, y: y_fromstr })\n ///     }"}]}