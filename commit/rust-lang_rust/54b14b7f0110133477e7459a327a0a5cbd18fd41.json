{"sha": "54b14b7f0110133477e7459a327a0a5cbd18fd41", "node_id": "C_kwDOAAsO6NoAKDU0YjE0YjdmMDExMDEzMzQ3N2U3NDU5YTMyN2EwYTVjYmQxOGZkNDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T00:25:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-06T00:25:19Z"}, "message": "Auto merge of #2001 - RalfJung:simd, r=RalfJung\n\nadd more simd_reduce intrinsics\n\nThis makes large parts of the portable-simd test suite work. :D\nCc https://github.com/rust-lang/portable-simd/pull/255", "tree": {"sha": "a4d8acb5134b221889bd1609f5a57060b084febe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4d8acb5134b221889bd1609f5a57060b084febe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b14b7f0110133477e7459a327a0a5cbd18fd41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b14b7f0110133477e7459a327a0a5cbd18fd41", "html_url": "https://github.com/rust-lang/rust/commit/54b14b7f0110133477e7459a327a0a5cbd18fd41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b14b7f0110133477e7459a327a0a5cbd18fd41/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3854a76aced92072455a9a189ab9d2a20ae00099", "url": "https://api.github.com/repos/rust-lang/rust/commits/3854a76aced92072455a9a189ab9d2a20ae00099", "html_url": "https://github.com/rust-lang/rust/commit/3854a76aced92072455a9a189ab9d2a20ae00099"}, {"sha": "b491b72673e0b6ae43ce7e14195082537749cc24", "url": "https://api.github.com/repos/rust-lang/rust/commits/b491b72673e0b6ae43ce7e14195082537749cc24", "html_url": "https://github.com/rust-lang/rust/commit/b491b72673e0b6ae43ce7e14195082537749cc24"}], "stats": {"total": 104, "additions": 84, "deletions": 20}, "files": [{"sha": "481808dc78197992c31db3a27cbe2fc8e922dd61", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54b14b7f0110133477e7459a327a0a5cbd18fd41/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b14b7f0110133477e7459a327a0a5cbd18fd41/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=54b14b7f0110133477e7459a327a0a5cbd18fd41", "patch": "@@ -267,6 +267,7 @@ pub struct PrimitiveLayouts<'tcx> {\n     pub u8: TyAndLayout<'tcx>,\n     pub u32: TyAndLayout<'tcx>,\n     pub usize: TyAndLayout<'tcx>,\n+    pub bool: TyAndLayout<'tcx>,\n }\n \n impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n@@ -279,6 +280,7 @@ impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n             u8: layout_cx.layout_of(layout_cx.tcx.types.u8)?,\n             u32: layout_cx.layout_of(layout_cx.tcx.types.u32)?,\n             usize: layout_cx.layout_of(layout_cx.tcx.types.usize)?,\n+            bool: layout_cx.layout_of(layout_cx.tcx.types.bool)?,\n         })\n     }\n }"}, {"sha": "670e3cb1b8acb7ab616801148570ca3009bd1f0b", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 71, "deletions": 20, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/54b14b7f0110133477e7459a327a0a5cbd18fd41/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b14b7f0110133477e7459a327a0a5cbd18fd41/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=54b14b7f0110133477e7459a327a0a5cbd18fd41", "patch": "@@ -324,12 +324,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 assert_eq!(dest_len, op_len);\n \n+                enum Op {\n+                    MirOp(mir::UnOp),\n+                    Abs,\n+                }\n+                let which = match intrinsic_name {\n+                    \"simd_neg\" => Op::MirOp(mir::UnOp::Neg),\n+                    \"simd_fabs\" => Op::Abs,\n+                    _ => unreachable!(),\n+                };\n+\n                 for i in 0..dest_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n-                    let val = match intrinsic_name {\n-                        \"simd_neg\" => this.unary_op(mir::UnOp::Neg, &op)?.to_scalar()?,\n-                        \"simd_fabs\" => {\n+                    let val = match which {\n+                        Op::MirOp(mir_op) => this.unary_op(mir_op, &op)?.to_scalar()?,\n+                        Op::Abs => {\n                             // Works for f32 and f64.\n                             let ty::Float(float_ty) = op.layout.ty.kind() else {\n                                 bug!(\"simd_fabs operand is not a float\")\n@@ -341,7 +351,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 FloatTy::F64 => Scalar::from_f64(op.to_f64()?.abs()),\n                             }\n                         }\n-                        _ => bug!(),\n                     };\n                     this.write_scalar(val, &dest.into())?;\n                 }\n@@ -373,7 +382,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 assert_eq!(dest_len, left_len);\n                 assert_eq!(dest_len, right_len);\n \n-                let op = match intrinsic_name {\n+                let mir_op = match intrinsic_name {\n                     \"simd_add\" => BinOp::Add,\n                     \"simd_sub\" => BinOp::Sub,\n                     \"simd_mul\" => BinOp::Mul,\n@@ -397,16 +406,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let left = this.read_immediate(&this.mplace_index(&left, i)?.into())?;\n                     let right = this.read_immediate(&this.mplace_index(&right, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n-                    let (val, overflowed, ty) = this.overflowing_binary_op(op, &left, &right)?;\n-                    if matches!(op, BinOp::Shl | BinOp::Shr) {\n+                    let (val, overflowed, ty) = this.overflowing_binary_op(mir_op, &left, &right)?;\n+                    if matches!(mir_op, BinOp::Shl | BinOp::Shr) {\n                         // Shifts have extra UB as SIMD operations that the MIR binop does not have.\n                         // See <https://github.com/rust-lang/rust/issues/91237>.\n                         if overflowed {\n                             let r_val = right.to_scalar()?.to_bits(right.layout.size)?;\n                             throw_ub_format!(\"overflowing shift by {} in `{}` in SIMD lane {}\", r_val, intrinsic_name, i);\n                         }\n                     }\n-                    if matches!(op, BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge) {\n+                    if matches!(mir_op, BinOp::Eq | BinOp::Ne | BinOp::Lt | BinOp::Le | BinOp::Gt | BinOp::Ge) {\n                         // Special handling for boolean-returning operations\n                         assert_eq!(ty, this.tcx.types.bool);\n                         let val = val.to_bool().unwrap();\n@@ -419,28 +428,70 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     }\n                 }\n             }\n-            \"simd_reduce_any\" | \"simd_reduce_all\" => {\n+            #[rustfmt::skip]\n+            | \"simd_reduce_and\"\n+            | \"simd_reduce_or\"\n+            | \"simd_reduce_xor\"\n+            | \"simd_reduce_any\"\n+            | \"simd_reduce_all\" => {\n+                use mir::BinOp;\n+\n                 let &[ref op] = check_arg_count(args)?;\n                 let (op, op_len) = this.operand_to_simd(op)?;\n \n-                // the neutral element\n-                let mut res = match intrinsic_name {\n-                    \"simd_reduce_any\" => false,\n-                    \"simd_reduce_all\" => true,\n-                    _ => bug!(),\n+                let imm_from_bool =\n+                    |b| ImmTy::from_scalar(Scalar::from_bool(b), this.machine.layouts.bool);\n+\n+                enum Op {\n+                    MirOp(BinOp),\n+                    MirOpBool(BinOp),\n+                }\n+                // The initial value is the neutral element.\n+                let (which, init) = match intrinsic_name {\n+                    \"simd_reduce_and\" => (Op::MirOp(BinOp::BitAnd), ImmTy::from_int(-1, dest.layout)),\n+                    \"simd_reduce_or\" => (Op::MirOp(BinOp::BitOr), ImmTy::from_int(0, dest.layout)),\n+                    \"simd_reduce_xor\" => (Op::MirOp(BinOp::BitXor), ImmTy::from_int(0, dest.layout)),\n+                    \"simd_reduce_any\" => (Op::MirOpBool(BinOp::BitOr), imm_from_bool(false)),\n+                    \"simd_reduce_all\" => (Op::MirOpBool(BinOp::BitAnd), imm_from_bool(true)),\n+                    _ => unreachable!(),\n                 };\n \n+                let mut res = init;\n                 for i in 0..op_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n-                    let val = simd_element_to_bool(op)?;\n-                    res = match intrinsic_name {\n-                        \"simd_reduce_any\" => res | val,\n-                        \"simd_reduce_all\" => res & val,\n-                        _ => bug!(),\n+                    res = match which {\n+                        Op::MirOp(mir_op) => {\n+                            this.binary_op(mir_op, &res, &op)?\n+                        }\n+                        Op::MirOpBool(mir_op) => {\n+                            let op = imm_from_bool(simd_element_to_bool(op)?);\n+                            this.binary_op(mir_op, &res, &op)?\n+                        }\n                     };\n                 }\n+                this.write_immediate(*res, dest)?;\n+            }\n+            #[rustfmt::skip]\n+            | \"simd_reduce_add_ordered\"\n+            | \"simd_reduce_mul_ordered\" => {\n+                use mir::BinOp;\n+\n+                let &[ref op, ref init] = check_arg_count(args)?;\n+                let (op, op_len) = this.operand_to_simd(op)?;\n+                let init = this.read_immediate(init)?;\n \n-                this.write_scalar(Scalar::from_bool(res), dest)?;\n+                let mir_op = match intrinsic_name {\n+                    \"simd_reduce_add_ordered\" => BinOp::Add,\n+                    \"simd_reduce_mul_ordered\" => BinOp::Mul,\n+                    _ => unreachable!(),\n+                };\n+\n+                let mut res = init;\n+                for i in 0..op_len {\n+                    let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n+                    res = this.binary_op(mir_op, &res, &op)?;\n+                }\n+                this.write_immediate(*res, dest)?;\n             }\n             \"simd_select\" => {\n                 let &[ref mask, ref yes, ref no] = check_arg_count(args)?;"}, {"sha": "9d1ca12a9f10e041abcd87b44f5dd4bf471cd032", "filename": "tests/run-pass/portable-simd.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/54b14b7f0110133477e7459a327a0a5cbd18fd41/tests%2Frun-pass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b14b7f0110133477e7459a327a0a5cbd18fd41/tests%2Frun-pass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fportable-simd.rs?ref=54b14b7f0110133477e7459a327a0a5cbd18fd41", "patch": "@@ -68,6 +68,17 @@ fn simd_ops_i32() {\n     assert_eq!(a.lanes_lt(i32x4::splat(5)*b), Mask::from_int(i32x4::from_array([0, 0, -1, 0])));\n     assert_eq!(a.lanes_ge(i32x4::splat(5)*b), Mask::from_int(i32x4::from_array([-1, -1, 0, -1])));\n     assert_eq!(a.lanes_gt(i32x4::splat(5)*b), Mask::from_int(i32x4::from_array([-1, 0, 0, -1])));\n+\n+    assert_eq!(a.horizontal_and(), 10);\n+    assert_eq!(b.horizontal_and(), 0);\n+    assert_eq!(a.horizontal_or(), 10);\n+    assert_eq!(b.horizontal_or(), -1);\n+    assert_eq!(a.horizontal_xor(), 0);\n+    assert_eq!(b.horizontal_xor(), -4);\n+    assert_eq!(a.horizontal_sum(), 40);\n+    assert_eq!(b.horizontal_sum(), 2);\n+    assert_eq!(a.horizontal_product(), 100*100);\n+    assert_eq!(b.horizontal_product(), 6*-4);\n }\n \n fn simd_intrinsics() {"}]}