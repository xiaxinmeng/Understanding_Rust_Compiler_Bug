{"sha": "fedd0245d105c3a5c483970316b555cbe5f7b34b", "node_id": "C_kwDOAAsO6NoAKGZlZGQwMjQ1ZDEwNWMzYTVjNDgzOTcwMzE2YjU1NWNiZTVmN2IzNGI", "commit": {"author": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-04-18T13:34:36Z"}, "committer": {"name": "XFFXFF", "email": "1247714429@qq.com", "date": "2022-04-18T13:34:36Z"}, "message": "derive completions take existing derives into count", "tree": {"sha": "4ca2554dc5ff32b5aa5e387719b103bbbe2f668f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca2554dc5ff32b5aa5e387719b103bbbe2f668f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedd0245d105c3a5c483970316b555cbe5f7b34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedd0245d105c3a5c483970316b555cbe5f7b34b", "html_url": "https://github.com/rust-lang/rust/commit/fedd0245d105c3a5c483970316b555cbe5f7b34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedd0245d105c3a5c483970316b555cbe5f7b34b/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001", "html_url": "https://github.com/rust-lang/rust/commit/d1f6b4e2a0ab1a1343ab4a381c89b186a76fd001"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "5f6b8f7db53407a5c1536404340d79f0b9caee07", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fedd0245d105c3a5c483970316b555cbe5f7b34b/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd0245d105c3a5c483970316b555cbe5f7b34b/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=fedd0245d105c3a5c483970316b555cbe5f7b34b", "patch": "@@ -523,7 +523,8 @@ impl<'a> CompletionContext<'a> {\n                     // successful expansions\n                     (Some(actual_expansion), Some((fake_expansion, fake_mapped_token))) => {\n                         let new_offset = fake_mapped_token.text_range().start();\n-                        derive_ctx = Some((actual_expansion, fake_expansion, new_offset));\n+                        derive_ctx =\n+                            Some((actual_expansion, fake_expansion, new_offset, orig_attr));\n                         break 'expansion;\n                     }\n                     // exactly one expansion failed, inconsistent state so stop expanding completely\n@@ -718,7 +719,7 @@ impl<'a> CompletionContext<'a> {\n         original_file: &SyntaxNode,\n         file_with_fake_ident: SyntaxNode,\n         offset: TextSize,\n-        derive_ctx: Option<(SyntaxNode, SyntaxNode, TextSize)>,\n+        derive_ctx: Option<(SyntaxNode, SyntaxNode, TextSize, ast::Attr)>,\n     ) {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token);\n@@ -742,16 +743,14 @@ impl<'a> CompletionContext<'a> {\n         (self.expected_type, self.expected_name) = self.expected_type_and_name();\n \n         // Overwrite the path kind for derives\n-        if let Some((original_file, file_with_fake_ident, offset)) = derive_ctx {\n-            let attr = self\n+        if let Some((original_file, file_with_fake_ident, offset, origin_attr)) = derive_ctx {\n+            self.existing_derives = self\n                 .sema\n-                .token_ancestors_with_macros(self.token.clone())\n-                .take_while(|it| it.kind() != SOURCE_FILE && it.kind() != MODULE)\n-                .find_map(ast::Attr::cast);\n-            if let Some(attr) = &attr {\n-                self.existing_derives =\n-                    self.sema.resolve_derive_macro(attr).into_iter().flatten().flatten().collect();\n-            }\n+                .resolve_derive_macro(&origin_attr)\n+                .into_iter()\n+                .flatten()\n+                .flatten()\n+                .collect();\n \n             if let Some(ast::NameLike::NameRef(name_ref)) =\n                 find_node_at_offset(&file_with_fake_ident, offset)"}, {"sha": "b851bf6a840ed4bb0e4ee4704261862a5c6339bb", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fedd0245d105c3a5c483970316b555cbe5f7b34b/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedd0245d105c3a5c483970316b555cbe5f7b34b/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=fedd0245d105c3a5c483970316b555cbe5f7b34b", "patch": "@@ -747,6 +747,27 @@ mod derive {\n         );\n     }\n \n+    #[test]\n+    fn derive_with_existing_derives() {\n+        check_derive(\n+            r#\"\n+//- minicore: derive, copy, clone, ord, eq, default, fmt\n+#[derive(PartialEq, Eq, Or$0)] struct Test;\n+\"#,\n+            expect![[r#\"\n+                md core\n+                de Default         macro Default\n+                de Clone, Copy\n+                de PartialOrd, Ord\n+                de Clone           macro Clone\n+                de PartialOrd\n+                kw self::\n+                kw super::\n+                kw crate::\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn derive_flyimport() {\n         check_derive("}]}