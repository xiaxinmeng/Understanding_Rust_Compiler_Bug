{"sha": "a9f1e29c4ef68d09f3a926462e4be946d0749042", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjFlMjljNGVmNjhkMDlmM2E5MjY0NjJlNGJlOTQ2ZDA3NDkwNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-13T10:08:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-13T10:08:51Z"}, "message": "Auto merge of #26253 - steveklabnik:remove_old_ignored_tests, r=brson\n\nTwo commits here: one which removes a bunch of tests, and re-enables a few that work.\r\n\r\nSecond updates the syntax of one of the failing tests. It still doesn't pass, but at least it compiles.", "tree": {"sha": "9a7c7a420f6ac96aee93a68c755d3c7ec6243b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7c7a420f6ac96aee93a68c755d3c7ec6243b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f1e29c4ef68d09f3a926462e4be946d0749042", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f1e29c4ef68d09f3a926462e4be946d0749042", "html_url": "https://github.com/rust-lang/rust/commit/a9f1e29c4ef68d09f3a926462e4be946d0749042", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f1e29c4ef68d09f3a926462e4be946d0749042/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d6f0869286ecadc7d851190b317ae502303c526", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d6f0869286ecadc7d851190b317ae502303c526", "html_url": "https://github.com/rust-lang/rust/commit/6d6f0869286ecadc7d851190b317ae502303c526"}, {"sha": "13b9a725ea7e7bc949d08591e5f991d91498b9ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b9a725ea7e7bc949d08591e5f991d91498b9ce", "html_url": "https://github.com/rust-lang/rust/commit/13b9a725ea7e7bc949d08591e5f991d91498b9ce"}], "stats": {"total": 11652, "additions": 1, "deletions": 11651}, "files": [{"sha": "d808d7972721f5786b8750d80bd2d4eea7b0c3d1", "filename": "src/test/compile-fail/dead-code-closure-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-closure-bang.rs?ref=a9f1e29c4ef68d09f3a926462e4be946d0749042", "patch": "@@ -15,5 +15,5 @@\n fn main() {\n     let x = || panic!();\n     x();\n-    std::io::println(\"Foo bar\"); //~ ERROR: unreachable statement\n+    println!(\"Foo bar\"); //~ ERROR: unreachable statement\n }"}, {"sha": "a1663772bad136178b64221f5f38392461eab60a", "filename": "src/test/compile-fail/issue-15167.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15167.rs?ref=a9f1e29c4ef68d09f3a926462e4be946d0749042", "patch": "@@ -9,11 +9,6 @@\n // except according to those terms.\n \n // macro f should not be able to inject a reference to 'n'.\n-//\n-// Ignored because `for` loops are not hygienic yet; they will require special\n-// handling since they introduce a new pattern binding position.\n-\n-// ignore-test\n \n macro_rules! f { () => (n) }\n "}, {"sha": "3aea9c32e3ad244aaf126aa887aa74e67ec296b8", "filename": "src/test/compile-fail/issue-2478.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2478.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-fn foo<'a>() -> &'a isize {  //~ ERROR unconstrained region\n-    return &x;\n-}\n-static x: isize = 5;\n-fn main() {}"}, {"sha": "e7cf7c97459075c6299713cc24be6b2777ae4d58", "filename": "src/test/compile-fail/redundant-link-args.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fredundant-link-args.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-// error-pattern:library 'm' already added: can't specify link_args.\n-\n-/* I think it should undefined to have multiple modules that link in the same\n-  library, but provide different link arguments. Unfortunately we don't track\n-  link_args by module -- they are just appended as discovered into the crate\n-  store -- but for now, it should be an error to provide link_args on a module\n-  that's already been included (with or without link_args). */\n-\n-#[link_name= \"m\"]\n-#[link_args=\"-foo\"]             // this could have been elided.\n-extern {\n-}\n-\n-#[link_name= \"m\"]\n-#[link_args=\"-bar\"]             // this is the actual error trigger.\n-extern {\n-}"}, {"sha": "685ce28d510a8d77e93c8d225465f5395242fbf6", "filename": "src/test/compile-fail/struct-field-assignability.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,21 +0,0 @@\n-// ignore-test\n-\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-struct Foo<'a> {\n-    x: &'a isize\n-}\n-\n-pub fn main() {\n-    let f = Foo { x: &*(box 3) }; //~ ERROR borrowed value does not live long enough\n-    assert_eq!(*f.x, 3);\n-}"}, {"sha": "fbf28259949c06bbb415ee2d8e85dbd5c3c57ef7", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "removed", "additions": 0, "deletions": 189, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,189 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test also broken on nightly linux distcheck. it's just broken!\n-// ignore-windows failing on win32 bot\n-// ignore-freebsd: output doesn't match\n-// ignore-tidy-linelength\n-// ignore-lldb\n-// ignore-android: FIXME(#10381)\n-// compile-flags:-g\n-\n-// This test uses some GDB Python API features (e.g. accessing anonymous fields)\n-// which are only available in newer GDB version. The following directive will\n-// case the test runner to ignore this test if an older GDB version is used:\n-// min-gdb-version 7.7\n-\n-// gdb-command: run\n-\n-// gdb-command: print regular_struct\n-// gdb-check:$1 = RegularStruct = {the_first_field = 101, the_second_field = 102.5, the_third_field = false, the_fourth_field = \"I'm so pretty, oh so pretty...\"}\n-\n-// gdb-command: print tuple\n-// gdb-check:$2 = {true, 103, \"blub\"}\n-\n-// gdb-command: print tuple_struct\n-// gdb-check:$3 = TupleStruct = {-104.5, 105}\n-\n-// gdb-command: print empty_struct\n-// gdb-check:$4 = EmptyStruct\n-\n-// gdb-command: print c_style_enum1\n-// gdb-check:$5 = CStyleEnumVar1\n-\n-// gdb-command: print c_style_enum2\n-// gdb-check:$6 = CStyleEnumVar2\n-\n-// gdb-command: print c_style_enum3\n-// gdb-check:$7 = CStyleEnumVar3\n-\n-// gdb-command: print mixed_enum_c_style_var\n-// gdb-check:$8 = MixedEnumCStyleVar\n-\n-// gdb-command: print mixed_enum_tuple_var\n-// gdb-check:$9 = MixedEnumTupleVar = {106, 107, false}\n-\n-// gdb-command: print mixed_enum_struct_var\n-// gdb-check:$10 = MixedEnumStructVar = {field1 = 108.5, field2 = 109}\n-\n-// gdb-command: print some\n-// gdb-check:$11 = Some = {110}\n-\n-// gdb-command: print none\n-// gdb-check:$12 = None\n-\n-// gdb-command: print some_fat\n-// gdb-check:$13 = Some = {\"abc\"}\n-\n-// gdb-command: print none_fat\n-// gdb-check:$14 = None\n-\n-// gdb-command: print nested_variant1\n-// gdb-check:$15 = NestedVariant1 = {NestedStruct = {regular_struct = RegularStruct = {the_first_field = 111, the_second_field = 112.5, the_third_field = true, the_fourth_field = \"NestedStructString1\"}, tuple_struct = TupleStruct = {113.5, 114}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar2, mixed_enum = MixedEnumTupleVar = {115, 116, false}}}\n-\n-// gdb-command: print nested_variant2\n-// gdb-check:$16 = NestedVariant2 = {abc = NestedStruct = {regular_struct = RegularStruct = {the_first_field = 117, the_second_field = 118.5, the_third_field = false, the_fourth_field = \"NestedStructString10\"}, tuple_struct = TupleStruct = {119.5, 120}, empty_struct = EmptyStruct, c_style_enum = CStyleEnumVar3, mixed_enum = MixedEnumStructVar = {field1 = 121.5, field2 = -122}}}\n-\n-// gdb-command: print none_check1\n-// gdb-check:$17 = None\n-\n-// gdb-command: print none_check2\n-// gdb-check:$18 = None\n-\n-#![allow(dead_code, unused_variables)]\n-\n-use self::CStyleEnum::{CStyleEnumVar1, CStyleEnumVar2, CStyleEnumVar3};\n-use self::MixedEnum::{MixedEnumCStyleVar, MixedEnumTupleVar, MixedEnumStructVar};\n-use self::NestedEnum::{NestedVariant1, NestedVariant2};\n-\n-struct RegularStruct {\n-    the_first_field: isize,\n-    the_second_field: f64,\n-    the_third_field: bool,\n-    the_fourth_field: &'static str,\n-}\n-\n-struct TupleStruct(f64, i16);\n-\n-struct EmptyStruct;\n-\n-enum CStyleEnum {\n-    CStyleEnumVar1,\n-    CStyleEnumVar2,\n-    CStyleEnumVar3,\n-}\n-\n-enum MixedEnum {\n-    MixedEnumCStyleVar,\n-    MixedEnumTupleVar(u32, u16, bool),\n-    MixedEnumStructVar { field1: f64, field2: i32 }\n-}\n-\n-struct NestedStruct {\n-    regular_struct: RegularStruct,\n-    tuple_struct: TupleStruct,\n-    empty_struct: EmptyStruct,\n-    c_style_enum: CStyleEnum,\n-    mixed_enum: MixedEnum,\n-}\n-\n-enum NestedEnum {\n-    NestedVariant1(NestedStruct),\n-    NestedVariant2 { abc: NestedStruct }\n-}\n-\n-fn main() {\n-\n-    let regular_struct = RegularStruct {\n-        the_first_field: 101,\n-        the_second_field: 102.5,\n-        the_third_field: false,\n-        the_fourth_field: \"I'm so pretty, oh so pretty...\"\n-    };\n-\n-    let tuple = ( true, 103u32, \"blub\" );\n-\n-    let tuple_struct = TupleStruct(-104.5, 105);\n-\n-    let empty_struct = EmptyStruct;\n-\n-    let c_style_enum1 = CStyleEnumVar1;\n-    let c_style_enum2 = CStyleEnumVar2;\n-    let c_style_enum3 = CStyleEnumVar3;\n-\n-    let mixed_enum_c_style_var = MixedEnumCStyleVar;\n-    let mixed_enum_tuple_var = MixedEnumTupleVar(106, 107, false);\n-    let mixed_enum_struct_var = MixedEnumStructVar { field1: 108.5, field2: 109 };\n-\n-    let some = Some(110_usize);\n-    let none: Option<isize> = None;\n-    let some_fat = Some(\"abc\");\n-    let none_fat: Option<&'static str> = None;\n-\n-    let nested_variant1 = NestedVariant1(\n-        NestedStruct {\n-            regular_struct: RegularStruct {\n-                the_first_field: 111,\n-                the_second_field: 112.5,\n-                the_third_field: true,\n-                the_fourth_field: \"NestedStructString1\",\n-            },\n-            tuple_struct: TupleStruct(113.5, 114),\n-            empty_struct: EmptyStruct,\n-            c_style_enum: CStyleEnumVar2,\n-            mixed_enum: MixedEnumTupleVar(115, 116, false)\n-        }\n-    );\n-\n-    let nested_variant2 = NestedVariant2 {\n-        abc: NestedStruct {\n-            regular_struct: RegularStruct {\n-                the_first_field: 117,\n-                the_second_field: 118.5,\n-                the_third_field: false,\n-                the_fourth_field: \"NestedStructString10\",\n-            },\n-            tuple_struct: TupleStruct(119.5, 120),\n-            empty_struct: EmptyStruct,\n-            c_style_enum: CStyleEnumVar3,\n-            mixed_enum: MixedEnumStructVar {\n-                field1: 121.5,\n-                field2: -122\n-            }\n-        }\n-    };\n-\n-    let none_check1: Option<(usize, Vec<usize>)> = None;\n-    let none_check2: Option<String> = None;\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() { () }"}, {"sha": "45da87a56740e32c71ebfddac157dd38b4eb1c50", "filename": "src/test/debuginfo/generic-trait-generic-static-default-method.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Fgeneric-trait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Fgeneric-trait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-trait-generic-static-default-method.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,52 +0,0 @@\n-// ignore-test\n-\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-g\n-// gdb-command:run\n-\n-// gdb-command:print arg1\n-// gdb-check:$1 = 1000\n-// gdb-command:print *arg2\n-// gdb-check:$2 = {1, 2.5}\n-// gdb-command:continue\n-\n-// gdb-command:print arg1\n-// gdb-check:$3 = 2000\n-// gdb-command:print *arg2\n-// gdb-check:$4 = {3.5, {4, 5, 6}}\n-// gdb-command:continue\n-\n-#![omit_gdb_pretty_printer_section]\n-\n-struct Struct {\n-    x: isize\n-}\n-\n-trait Trait<T1> {\n-    fn generic_static_default_method<T2>(arg1: isize, arg2: &(T1, T2)) -> isize {\n-        zzz(); // #break\n-        arg1\n-    }\n-}\n-\n-impl<T> Trait<T> for Struct {}\n-\n-fn main() {\n-\n-    // Is this really how to use these?\n-    Trait::generic_static_default_method::<isize, Struct, float>(1000, &(1, 2.5));\n-    Trait::generic_static_default_method::<float, Struct, (isize, isize, isize)>(2000,\n-            &(3.5, (4, 5, 6)));\n-\n-}\n-\n-fn zzz() {()}"}, {"sha": "dea2a0c5a23f8180c0779c39b6b43f610511b5c3", "filename": "src/test/debuginfo/issue11600.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Fissue11600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Fissue11600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue11600.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This test was actually never run before because commands were only parsed up to the first\n-// function definition but the test relied on the function being above the commands. Ignore for now.\n-// ignore-test\n-\n-fn main() {\n-    let args : Vec<String> = ::std::os::args();\n-    ::std::io::println(args[0]);\n-}\n-\n-// ignore-lldb\n-\n-// This test case checks whether compile unit names are set correctly, so that the correct default\n-// source file can be found.\n-\n-// compile-flags:-g\n-// gdb-command:list\n-// gdb-check:1[...]fn main() {\n-// gdb-check:2[...]let args : Vec<String> = ::std::os::args();\n-// gdb-check:3[...]::std::io::println(args[0]);\n-// gdb-check:4[...]}"}, {"sha": "d066af53e35348c9dcff0fa2749ae970d9129781", "filename": "src/test/debuginfo/trait-generic-static-default-method.rs", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftrait-generic-static-default-method.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,71 +0,0 @@\n-// ignore-test\n-\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:run\n-\n-// gdb-command:print arg1\n-// gdb-check:$1 = 1000\n-// gdb-command:print arg2\n-// gdb-check:$2 = 0.5\n-// gdb-command:continue\n-\n-// gdb-command:print arg1\n-// gdb-check:$3 = 2000\n-// gdb-command:print *arg2\n-// gdb-check:$4 = {1, 2, 3}\n-// gdb-command:continue\n-\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:print arg1\n-// lldb-check:[...]$0 = 1000\n-// lldb-command:print arg2\n-// lldb-check:[...]$1 = 0.5\n-// lldb-command:continue\n-\n-// lldb-command:print arg1\n-// lldb-check:[...]$2 = 2000\n-// lldb-command:print *arg2\n-// lldb-check:[...]$3 = (1, 2, 3)\n-// lldb-command:continue\n-\n-#![omit_gdb_pretty_printer_section]\n-\n-struct Struct {\n-    x: isize\n-}\n-\n-trait Trait {\n-    fn generic_static_default_method<T>(arg1: isize, arg2: T) -> isize {\n-        zzz(); // #break\n-        arg1\n-    }\n-}\n-\n-impl Trait for Struct {}\n-\n-fn main() {\n-\n-    // Is this really how to use these?\n-    Trait::generic_static_default_method::<Struct, float>(1000, 0.5);\n-    Trait::generic_static_default_method::<Struct, &(isize, isize, isize)>(2000, &(1, 2, 3));\n-\n-}\n-\n-fn zzz() {()}"}, {"sha": "176e17c7eb0ff11a8c1898f481716de70b5d396f", "filename": "src/test/parse-fail/issue-14182.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fissue-14182.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fissue-14182.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-14182.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-// ignore-test FIXME(japari) remove test\n-\n-struct Foo {\n-    f: for <'b> |&'b isize|:\n-      'b -> &'b isize //~ ERROR use of undeclared lifetime name `'b`\n-}\n-\n-fn main() {\n-    let mut x: Vec< for <'a> ||\n-       :'a //~ ERROR use of undeclared lifetime name `'a`\n-    > = Vec::new();\n-    x.push(|| {});\n-\n-    let foo = Foo {\n-        f: |x| x\n-    };\n-}"}, {"sha": "8762c1326ceaa84d521c92a36ab9b44742f2c54c", "filename": "src/test/parse-fail/regions-fn-bound.rs", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-fn-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-fn-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fregions-fn-bound.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,50 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-// ignore-test\n-// ignored because the first error does not show up.\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-fn of<T>() -> |T| { panic!(); }\n-fn subtype<T>(x: |T|) { panic!(); }\n-\n-fn test_fn<'x, 'y, 'z, T>(_x: &'x T, _y: &'y T, _z: &'z T) {\n-    // Here, x, y, and z are free.  Other letters\n-    // are bound.  Note that the arrangement\n-    // subtype::<T1>(of::<T2>()) will typecheck\n-    // iff T1 <: T2.\n-\n-    // should be the default:\n-    subtype::< ||:'static>(of::<||>());\n-    subtype::<||>(of::< ||:'static>());\n-\n-    //\n-    subtype::< <'x> ||>(of::<||>());    //~ ERROR mismatched types\n-    subtype::< <'x> ||>(of::< <'y> ||>());  //~ ERROR mismatched types\n-\n-    subtype::< <'x> ||>(of::< ||:'static>()); //~ ERROR mismatched types\n-    subtype::< ||:'static>(of::< <'x> ||>());\n-\n-}\n-\n-fn main() {}"}, {"sha": "b1aebf4a2d106b54224f25e4baada608b4d4bf10", "filename": "src/test/parse-fail/regions-infer-paramd-method.rs", "status": "removed", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-infer-paramd-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-infer-paramd-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fregions-infer-paramd-method.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,69 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// ignored due to problems with by value self.\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-// Here: foo is parameterized because it contains a method that\n-// refers to self.\n-\n-trait foo<'a> {\n-    fn self_int(self) -> &'a isize;\n-\n-    fn any_int(self) -> &isize;\n-}\n-\n-struct with_foo<'a> {\n-    f: @foo<'a>\n-}\n-\n-trait set_foo_foo {\n-    fn set_foo(&mut self, f: @foo);\n-}\n-\n-impl<'a> set_foo_foo for with_foo<'a> {\n-    fn set_foo(&mut self, f: @foo) {\n-        self.f = f; //~ ERROR mismatched types: expected `@foo/&self`, found `@foo/&`\n-    }\n-}\n-\n-// Bar is not region parameterized.\n-\n-trait bar {\n-    fn any_int(&self) -> &isize;\n-}\n-\n-struct with_bar {\n-    f: bar\n-}\n-\n-trait set_foo_bar {\n-    fn set_foo(&mut self, f: bar);\n-}\n-\n-impl set_foo_bar for with_bar {\n-    fn set_foo(&mut self, f: bar) {\n-        self.f = f;\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "e2e3fcde83cf1875ae6a967cbe1564a00a026e74", "filename": "src/test/parse-fail/regions-trait-2.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-trait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-trait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fregions-trait-2.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-// ignore-test #5723\n-\n-// Test that you cannot escape a reference\n-// into a trait.\n-\n-struct ctxt { v: usize }\n-\n-trait get_ctxt {\n-    fn get_ctxt(&self) -> &'a ctxt;\n-}\n-\n-struct has_ctxt<'a> { c: &'a ctxt }\n-\n-impl<'a> get_ctxt for has_ctxt<'a> {\n-    fn get_ctxt(&self) -> &'a ctxt { self.c }\n-}\n-\n-fn make_gc() -> @get_ctxt  {\n-    let ctxt = ctxt { v: 22 };\n-    let hc = has_ctxt { c: &ctxt };\n-    return @hc as @get_ctxt;\n-    //~^ ERROR source contains reference\n-}\n-\n-fn main() {\n-    make_gc().get_ctxt().v;\n-}"}, {"sha": "57b182f3c4194875f2e28dc5f8c1c1e1bdd6aff2", "filename": "src/test/parse-fail/regions-trait-3.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-trait-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fparse-fail%2Fregions-trait-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fregions-trait-3.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,47 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// ignore'd due to problems with by-value self.\n-\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// compile-flags: -Z parse-only\n-\n-trait get_ctxt<'a> {\n-    fn get_ctxt(self) -> &'a usize;\n-}\n-\n-fn make_gc1(gc: @get_ctxt<'a>) -> @get_ctxt<'b>  {\n-    return gc; //~ ERROR mismatched types: expected `@get_ctxt/&b`, found `@get_ctxt/&a`\n-}\n-\n-struct Foo {\n-    r: &'a usize\n-}\n-\n-impl get_ctxt for Foo<'a> {\n-    fn get_ctxt(&self) -> &'a usize { self.r }\n-}\n-\n-fn make_gc2<'a,'b>(foo: Foo<'a>) -> @get_ctxt<'b>  {\n-    return @foo as @get_ctxt; //~ ERROR cannot infer\n-}\n-\n-fn main() {\n-}"}, {"sha": "dd7fbf32dd31e583725d9c7c5da75ee04b02c71d", "filename": "src/test/pretty/record-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// pp-exact\n-struct Thing {\n-    x: isize,\n-    y: isize,\n-}\n-\n-fn main() {\n-    let sth = Thing{x: 0, y: 1,};\n-    let sth2 = Thing{y: 9 , ..sth};\n-    assert_eq!(sth.x + sth2.y, 9);\n-}"}, {"sha": "07fac8e39c4a12045da034efe9ad835525b0b099", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-2.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// error-pattern:index out of bounds\n-\n-use std::usize;\n-\n-fn main() {\n-    let x = vec!(1_usize,2_usize,3_usize);\n-\n-    // This should cause a bounds-check panic, but may not if we do our\n-    // bounds checking by comparing a scaled index value to the vector's\n-    // length (in bytes), because the scaling of the index will cause it to\n-    // wrap around to a small number.\n-\n-    let idx = usize::MAX & !(usize::MAX >> 1_usize);\n-    println!(\"ov2 idx = 0x%x\", idx);\n-\n-    // This should panic.\n-    println!(\"ov2 0x%x\",  x[idx]);\n-}"}, {"sha": "b7aff8d1be1e2373e69d8e0d782d02f22091dc3d", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-3.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,40 +0,0 @@\n-// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// error-pattern:index out of bounds\n-\n-use std::u64;\n-\n-#[cfg(target_arch=\"x86\")]\n-fn main() {\n-    let x = vec!(1_usize,2_usize,3_usize);\n-\n-    // This should cause a bounds-check panic, but may not if we do our\n-    // bounds checking by truncating the index value to the size of the\n-    // machine word, losing relevant bits of the index value.\n-\n-    // This test is only meaningful on 32-bit hosts.\n-\n-    let idx = u64::MAX & !(u64::MAX >> 1_usize);\n-    println!(\"ov3 idx = 0x%8.8x%8.8x\",\n-           (idx >> 32) as usize,\n-           idx as usize);\n-\n-    // This should panic.\n-    println!(\"ov3 0x%x\",  x[idx]);\n-}\n-\n-#[cfg(any(target_arch=\"x86_64\", target_arch = \"aarch64\"))]\n-fn main() {\n-    // This version just panics anyways, for symmetry on 64-bit hosts.\n-    let x = vec!(1_usize,2_usize,3_usize);\n-    error!(\"ov3 0x%x\",  x[200]);\n-}"}, {"sha": "6e5a9b2f2ac023973a2dfbe33d9d858e5635d43b", "filename": "src/test/run-fail/too-much-recursion-unwinding.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,45 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test leaks\n-// error-pattern:ran out of stack\n-\n-// Test that the thread panicks after hitting the recursion limit\n-// during unwinding\n-\n-fn recurse() {\n-    println!(\"don't optimize me out\");\n-    recurse();\n-}\n-\n-struct r {\n-    recursed: *mut bool,\n-}\n-\n-impl Drop for r {\n-    fn drop(&mut self) {\n-        unsafe {\n-            if !*(self.recursed) {\n-                *(self.recursed) = true;\n-                recurse();\n-            }\n-        }\n-    }\n-}\n-\n-fn r(recursed: *mut bool) -> r {\n-    r { recursed: recursed }\n-}\n-\n-fn main() {\n-    let mut recursed = false;\n-    let _r = r(&mut recursed);\n-    recurse();\n-}"}, {"sha": "2df0bb355979b1e92cd5a5f793512105cbcbd1c5", "filename": "src/test/run-pass/auto-encode.rs", "status": "removed", "additions": 0, "deletions": 171, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,171 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test FIXME(#5121)\n-\n-extern crate rbml;\n-extern crate serialize;\n-extern crate time;\n-\n-// These tests used to be separate files, but I wanted to refactor all\n-// the common code.\n-\n-use std::collections::{HashMap, HashSet};\n-\n-use rbml::reader as EBReader;\n-use rbml::writer as EBWriter;\n-use std::cmp::Eq;\n-use std::cmp;\n-use std::io;\n-use serialize::{Decodable, Encodable};\n-\n-fn test_rbml<'a, 'b, A:\n-    Eq +\n-    Encodable<EBWriter::Encoder<'a>> +\n-    Decodable<EBReader::Decoder<'b>>\n->(a1: &A) {\n-    let mut wr = Vec::new();\n-    let mut rbml_w = EBwriter::Encoder::new(&mut wr);\n-    a1.encode(&mut rbml_w);\n-\n-    let d: serialize::rbml::Doc<'a> = EBDoc::new(&wr);\n-    let mut decoder: EBReader::Decoder<'a> = EBreader::Decoder::new(d);\n-    let a2: A = Decodable::decode(&mut decoder);\n-    assert!(*a1 == a2);\n-}\n-\n-#[derive(Decodable, Encodable)]\n-enum Expr {\n-    Val(usize),\n-    Plus(@Expr, @Expr),\n-    Minus(@Expr, @Expr)\n-}\n-\n-impl cmp::Eq for Expr {\n-    fn eq(&self, other: &Expr) -> bool {\n-        match *self {\n-            Val(e0a) => {\n-                match *other {\n-                    Val(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            Plus(e0a, e1a) => {\n-                match *other {\n-                    Plus(e0b, e1b) => e0a == e0b && e1a == e1b,\n-                    _ => false\n-                }\n-            }\n-            Minus(e0a, e1a) => {\n-                match *other {\n-                    Minus(e0b, e1b) => e0a == e0b && e1a == e1b,\n-                    _ => false\n-                }\n-            }\n-        }\n-    }\n-    fn ne(&self, other: &Expr) -> bool { !(*self).eq(other) }\n-}\n-\n-impl cmp::Eq for Point {\n-    fn eq(&self, other: &Point) -> bool {\n-        self.x == other.x && self.y == other.y\n-    }\n-    fn ne(&self, other: &Point) -> bool { !(*self).eq(other) }\n-}\n-\n-impl<T:cmp::Eq> cmp::Eq for Quark<T> {\n-    fn eq(&self, other: &Quark<T>) -> bool {\n-        match *self {\n-            Top(ref q) => {\n-                match *other {\n-                    Top(ref r) => q == r,\n-                    Bottom(_) => false\n-                }\n-            },\n-            Bottom(ref q) => {\n-                match *other {\n-                    Top(_) => false,\n-                    Bottom(ref r) => q == r\n-                }\n-            },\n-        }\n-    }\n-    fn ne(&self, other: &Quark<T>) -> bool { !(*self).eq(other) }\n-}\n-\n-impl cmp::Eq for CLike {\n-    fn eq(&self, other: &CLike) -> bool {\n-        (*self) as isize == *other as isize\n-    }\n-    fn ne(&self, other: &CLike) -> bool { !self.eq(other) }\n-}\n-\n-#[derive(Decodable, Encodable, Eq)]\n-struct Spanned<T> {\n-    lo: usize,\n-    hi: usize,\n-    node: T,\n-}\n-\n-#[derive(Decodable, Encodable)]\n-struct SomeStruct { v: Vec<usize> }\n-\n-#[derive(Decodable, Encodable)]\n-struct Point {x: usize, y: usize}\n-\n-#[derive(Decodable, Encodable)]\n-enum Quark<T> {\n-    Top(T),\n-    Bottom(T)\n-}\n-\n-#[derive(Decodable, Encodable)]\n-enum CLike { A, B, C }\n-\n-pub fn main() {\n-    let a = &Plus(@Minus(@Val(3), @Val(10)), @Plus(@Val(22), @Val(5)));\n-    test_rbml(a);\n-\n-    let a = &Spanned {lo: 0, hi: 5, node: 22};\n-    test_rbml(a);\n-\n-    let a = &Point {x: 3, y: 5};\n-    test_rbml(a);\n-\n-    let a = &Top(22);\n-    test_rbml(a);\n-\n-    let a = &Bottom(222);\n-    test_rbml(a);\n-\n-    let a = &A;\n-    test_rbml(a);\n-\n-    let a = &B;\n-    test_rbml(a);\n-\n-    let a = &time::now();\n-    test_rbml(a);\n-\n-    test_rbml(&1.0f32);\n-    test_rbml(&1.0f64);\n-    test_rbml(&'a');\n-\n-    let mut a = HashMap::new();\n-    test_rbml(&a);\n-    a.insert(1, 2);\n-    test_rbml(&a);\n-\n-    let mut a = HashSet::new();\n-    test_rbml(&a);\n-    a.insert(1);\n-    test_rbml(&a);\n-}"}, {"sha": "fa50eaa6a88c1d914dadaf48466a72e744765ff3", "filename": "src/test/run-pass/borrowck-nested-calls.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fborrowck-nested-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fborrowck-nested-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-nested-calls.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test FIXME (#6268) nested method calls\n-\n-// Test that (safe) nested calls with `&mut` receivers are permitted.\n-\n-struct Foo {a: usize, b: usize}\n-\n-impl Foo {\n-    pub fn inc_a(&mut self, v: usize) { self.a += v; }\n-\n-    pub fn next_b(&mut self) -> usize {\n-        let b = self.b;\n-        self.b += 1;\n-        b\n-    }\n-}\n-\n-pub fn main() {\n-    let mut f = Foo {a: 22, b: 23};\n-    f.inc_a(f.next_b());\n-    assert_eq!(f.a, 22+23);\n-    assert_eq!(f.b, 24);\n-}"}, {"sha": "20785780d2c2f9efe47fde83b25c907f40339cf7", "filename": "src/test/run-pass/deep-vector.rs", "status": "removed", "additions": 0, "deletions": 2016, "changes": 2016, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fdeep-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fdeep-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep-vector.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526"}, {"sha": "27258ed578ab08c03dff1e4dfddce683d2f2387f", "filename": "src/test/run-pass/deep-vector2.rs", "status": "removed", "additions": 0, "deletions": 8016, "changes": 8016, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526"}, {"sha": "cc6b88c788a7856d4b7458c2da1510aebd6ce3e0", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,79 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This actually tests a lot more than just encodable/decodable, but it gets the\n-// job done at least\n-\n-// ignore-test FIXME(#5121)\n-\n-extern crate rand;\n-extern crate rbml;\n-extern crate serialize;\n-\n-use rand::{random, Rand};\n-use rbml;\n-use rbml::Doc;\n-use rbml::writer::Encoder;\n-use rbml::reader::Decoder;\n-use serialize::{Encodable, Decodable};\n-\n-#[derive(Encodable, Decodable, Eq, Rand)]\n-struct A;\n-#[derive(Encodable, Decodable, Eq, Rand)]\n-struct B(isize);\n-#[derive(Encodable, Decodable, Eq, Rand)]\n-struct C(isize, isize, usize);\n-\n-#[derive(Encodable, Decodable, Eq, Rand)]\n-struct D {\n-    a: isize,\n-    b: usize,\n-}\n-\n-#[derive(Encodable, Decodable, Eq, Rand)]\n-enum E {\n-    E1,\n-    E2(usize),\n-    E3(D),\n-    E4{ x: usize },\n-}\n-\n-#[derive(Encodable, Decodable, Eq, Rand)]\n-enum F { F1 }\n-\n-#[derive(Encodable, Decodable, Eq, Rand)]\n-struct G<T> {\n-    t: T\n-}\n-\n-fn roundtrip<'a, T: Rand + Eq + Encodable<Encoder<'a>> +\n-                    Decodable<Decoder<'a>>>() {\n-    let obj: T = random();\n-    let mut w = Vec::new();\n-    let mut e = Encoder::new(&mut w);\n-    obj.encode(&mut e);\n-    let doc = rbml::Doc::new(&w);\n-    let mut dec = Decoder::new(doc);\n-    let obj2 = Decodable::decode(&mut dec);\n-    assert!(obj == obj2);\n-}\n-\n-pub fn main() {\n-    roundtrip::<A>();\n-    roundtrip::<B>();\n-    roundtrip::<C>();\n-    roundtrip::<D>();\n-\n-    for _ in 0..20 {\n-        roundtrip::<E>();\n-        roundtrip::<F>();\n-        roundtrip::<G<isize>>();\n-    }\n-}"}, {"sha": "89771ed13bfcf2f50b8ef70f7a11cd2d6ebf8f70", "filename": "src/test/run-pass/deriving-self-lifetime.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test FIXME #11820: & is unreliable in deriving\n-\n-#[derive(Eq,Ord)]\n-struct A<'a> {\n-    x: &'a isize\n-}\n-\n-pub fn main() {\n-    let a = A { x: &1 };\n-    let b = A { x: &2 };\n-\n-    assert_eq!(a, a);\n-    assert_eq!(b, b);\n-\n-\n-    assert!(a < b);\n-    assert!(b > a);\n-\n-    assert!(a <= b);\n-    assert!(a <= a);\n-    assert!(b <= b);\n-\n-    assert!(b >= a);\n-    assert!(b >= b);\n-    assert!(a >= a);\n-}"}, {"sha": "b3771f38482ba3331742ac714ccb7265809fafd0", "filename": "src/test/run-pass/evec-internal.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,52 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-// Doesn't work; needs a design decision.\n-\n-pub fn main() {\n-    let x : [isize; 5] = [1,2,3,4,5];\n-    let _y : [isize; 5] = [1,2,3,4,5];\n-    let mut z = [1,2,3,4,5];\n-    z = x;\n-    assert_eq!(z[0], 1);\n-    assert_eq!(z[4], 5);\n-\n-    let a : [isize; 5] = [1,1,1,1,1];\n-    let b : [isize; 5] = [2,2,2,2,2];\n-    let c : [isize; 5] = [2,2,2,2,3];\n-\n-    log(debug, a);\n-\n-    assert!(a < b);\n-    assert!(a <= b);\n-    assert!(a != b);\n-    assert!(b >= a);\n-    assert!(b > a);\n-\n-    log(debug, b);\n-\n-    assert!(b < c);\n-    assert!(b <= c);\n-    assert!(b != c);\n-    assert!(c >= b);\n-    assert!(c > b);\n-\n-    assert!(a < c);\n-    assert!(a <= c);\n-    assert!(a != c);\n-    assert!(c >= a);\n-    assert!(c > a);\n-\n-    log(debug, c);\n-\n-\n-}"}, {"sha": "e8c5996f4fa098791f139e52b50183cea94386ef", "filename": "src/test/run-pass/infinite-loops.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Finfinite-loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfinite-loops.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*\n-  A simple way to make sure threading works. This should use all the\n-  CPU cycles an any machines that we're likely to see for a while.\n-*/\n-// ignore-test\n-\n-fn loopy(n: isize) {\n-    if n > 0 { spawn(move|| { loopy(n - 1) }); spawn(move|| { loopy(n - 1) }); }\n-    loop { }\n-}\n-\n-pub fn main() {\n-    // Commenting this out, as this will hang forever otherwise.\n-    // Even after seeing the comment above, I'm not sure what the\n-    // intention of this test is.\n-    // spawn(move|| { loopy(5) });\n-}"}, {"sha": "fb0d2f0ad85057a36583c443aa4a44f519a1e05d", "filename": "src/test/run-pass/issue-2185.rs", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,88 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-// notes on this test case:\n-// On Thu, Apr 18, 2013-2014 at 6:30 PM, John Clements <clements@brinckerhoff.org> wrote:\n-// the \"issue-2185.rs\" test was ignored with a ref to #2263. Issue #2263 is now fixed,\n-// so I tried it again, and after adding some &self parameters, I got this error:\n-//\n-// Running /usr/local/bin/rustc:\n-// issue-2185.rs:24:0: 26:1 error: conflicting implementations for a trait\n-// issue-2185.rs:24 impl iterable<usize> for 'static ||usize|| {\n-// issue-2185.rs:25     fn iter(&self, blk: |v: usize|) { self( |i| blk(i) ) }\n-// issue-2185.rs:26 }\n-// issue-2185.rs:20:0: 22:1 note: note conflicting implementation here\n-// issue-2185.rs:20 impl<A> iterable<A> for 'static ||A|| {\n-// issue-2185.rs:21     fn iter(&self, blk: |A|) { self(blk); }\n-// issue-2185.rs:22 }\n-//\n-// \u2026 so it looks like it's just not possible to implement both\n-// the generic iterable<usize> and iterable<A> for the type iterable<usize>.\n-// Is it okay if I just remove this test?\n-//\n-// but Niko responded:\n-// think it's fine to remove this test, just because it's old and cruft and not hard to reproduce.\n-// *However* it should eventually be possible to implement the same interface for the same type\n-// multiple times with different type parameters, it's just that our current trait implementation\n-// has accidental limitations.\n-\n-// so I'm leaving it in.\n-// actually, it looks like this is related to bug #3429. I'll rename this bug.\n-\n-// This test had to do with an outdated version of the iterable trait.\n-// However, the condition it was testing seemed complex enough to\n-// warrant still having a test, so I inlined the old definitions.\n-\n-trait iterable<A> {\n-    fn iter(&self, blk: |A|);\n-}\n-\n-impl<A> iterable<A> for 'static ||A|| {\n-    fn iter(&self, blk: |A|) { self(blk); }\n-}\n-\n-impl iterable<usize> for 'static ||usize|| {\n-    fn iter(&self, blk: |v: usize|) { self( |i| blk(i) ) }\n-}\n-\n-fn filter<A,IA:iterable<A>>(self: IA, prd: 'static |A| -> bool, blk: |A|) {\n-    self.iter(|a| {\n-        if prd(a) { blk(a) }\n-    });\n-}\n-\n-fn foldl<A,B,IA:iterable<A>>(self: IA, b0: B, blk: |B, A| -> B) -> B {\n-    let mut b = b0;\n-    self.iter(|a| {\n-        b = blk(b, a);\n-    });\n-    b\n-}\n-\n-fn range(lo: usize, hi: usize, it: |usize|) {\n-    let mut i = lo;\n-    while i < hi {\n-        it(i);\n-        i += 1;\n-    }\n-}\n-\n-pub fn main() {\n-    let range: 'static ||usize|| = |a| range(0, 1000, a);\n-    let filt: 'static ||v: usize|| = |a| filter(\n-        range,\n-        |&&n: usize| n % 3 != 0 && n % 5 != 0,\n-        a);\n-    let sum = foldl(filt, 0, |accum, &&n: usize| accum + n );\n-\n-    println!(\"{}\", sum);\n-}"}, {"sha": "39a97b00b32da855b42da654de601e6e447ec6aa", "filename": "src/test/run-pass/issue-2190-2.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,32 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test FIXME #2190\n-\n-mod a {\n-    fn foo(f: ||) { f() }\n-    fn bar() {}\n-    pub fn main() { foo(||bar()); }\n-}\n-\n-mod b {\n-    fn foo(f: Option<||>) { f.map(|x|x()); }\n-    fn bar() {}\n-    pub fn main() { foo(Some(bar)); }\n-}\n-\n-mod c {\n-    fn foo(f: Option<||>) { f.map(|x|x()); }\n-    fn bar() {}\n-    pub fn main() { foo(Some(||bar())); }\n-}\n-\n-pub fn main() {\n-}"}, {"sha": "ab75c2064a403667f5edd6168cfacdb25d409e2e", "filename": "src/test/run-pass/issue-4241.rs", "status": "removed", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,129 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test needs networking\n-\n-extern crate extra;\n-\n-use extra::net::tcp::TcpSocketBuf;\n-\n-use std::io;\n-use std::isize;\n-\n-use std::io::{ReaderUtil,WriterUtil};\n-\n-enum Result {\n-  Nil,\n-  Int(isize),\n-  Data(Vec<u8>),\n-  List(Vec<Result>),\n-  Error(String),\n-  Status(String)\n-}\n-\n-fn parse_data(len: usize, io: @io::Reader) -> Result {\n-  let res =\n-      if (len > 0) {\n-      let bytes = io.read_bytes(len as usize);\n-      assert_eq!(bytes.len(), len);\n-      Data(bytes)\n-  } else {\n-      Data(vec![])\n-  };\n-  assert_eq!(io.read_char(), '\\r');\n-  assert_eq!(io.read_char(), '\\n');\n-  return res;\n-}\n-\n-fn parse_list(len: usize, io: @io::Reader) -> Result {\n-    let mut list: Vec<Result> = vec![];\n-    for _ in 0..len {\n-        let v = match io.read_char() {\n-            '$' => parse_bulk(io),\n-            ':' => parse_int(io),\n-             _ => panic!()\n-        };\n-        list.push(v);\n-    }\n-    return List(list);\n-}\n-\n-fn chop(s: String) -> String {\n-  s.slice(0, s.len() - 1).to_string()\n-}\n-\n-fn parse_bulk(io: @io::Reader) -> Result {\n-    match from_str::<isize>(chop(io.read_line())) {\n-    None => panic!(),\n-    Some(-1) => Nil,\n-    Some(len) if len >= 0 => parse_data(len as usize, io),\n-    Some(_) => panic!()\n-    }\n-}\n-\n-fn parse_multi(io: @io::Reader) -> Result {\n-    match from_str::<isize>(chop(io.read_line())) {\n-    None => panic!(),\n-    Some(-1) => Nil,\n-    Some(0) => List(vec![]),\n-    Some(len) if len >= 0 => parse_list(len as usize, io),\n-    Some(_) => panic!()\n-    }\n-}\n-\n-fn parse_int(io: @io::Reader) -> Result {\n-    match from_str::<isize>(chop(io.read_line())) {\n-    None => panic!(),\n-    Some(i) => Int(i)\n-    }\n-}\n-\n-fn parse_response(io: @io::Reader) -> Result {\n-    match io.read_char() {\n-    '$' => parse_bulk(io),\n-    '*' => parse_multi(io),\n-    '+' => Status(chop(io.read_line())),\n-    '-' => Error(chop(io.read_line())),\n-    ':' => parse_int(io),\n-    _ => panic!()\n-    }\n-}\n-\n-fn cmd_to_string(cmd: Vec<String>) -> String {\n-  let mut res = \"*\".to_string();\n-  res.push_str(cmd.len().to_string());\n-  res.push_str(\"\\r\\n\");\n-    for s in &cmd {\n-    res.push_str([\"$\".to_string(), s.len().to_string(), \"\\r\\n\".to_string(),\n-                  (*s).clone(), \"\\r\\n\".to_string()].concat() );\n-    }\n-  res\n-}\n-\n-fn query(cmd: Vec<String>, sb: TcpSocketBuf) -> Result {\n-  let cmd = cmd_to_string(cmd);\n-  //println!(\"{}\", cmd);\n-  sb.write_str(cmd);\n-  let res = parse_response(@sb as @io::Reader);\n-  res\n-}\n-\n-fn query2(cmd: Vec<String>) -> Result {\n-  let _cmd = cmd_to_string(cmd);\n-    io::with_str_reader(\"$3\\r\\nXXX\\r\\n\".to_string())(|sb| {\n-    let res = parse_response(@sb as @io::Reader);\n-    println!(\"{}\", res);\n-    res\n-    });\n-}\n-\n-\n-pub fn main() {\n-}"}, {"sha": "5e1fd87b57a1317e8dc0cf348d630fe4a2fce360", "filename": "src/test/run-pass/issue-9737.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Frun-pass%2Fissue-9737.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Frun-pass%2Fissue-9737.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9737.rs?ref=a9f1e29c4ef68d09f3a926462e4be946d0749042", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test #9737\n-\n macro_rules! f {\n     (v: $x:expr) => ( println!(\"{}\", $x) )\n }"}, {"sha": "dfb23aabf191d4253a065a0f0e3848e46d8df84f", "filename": "src/test/run-pass/match-var-hygiene.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Frun-pass%2Fmatch-var-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f1e29c4ef68d09f3a926462e4be946d0749042/src%2Ftest%2Frun-pass%2Fmatch-var-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-var-hygiene.rs?ref=a9f1e29c4ef68d09f3a926462e4be946d0749042", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test #9384\n-\n // shouldn't affect evaluation of $ex.\n macro_rules! bad_macro { ($ex:expr) => (\n     {match 9 {_x => $ex}}"}, {"sha": "f149b8645d4cde5eef6b993c55374f1619074df1", "filename": "src/test/run-pass/no-std-xcrate.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fno-std-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fno-std-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-xcrate.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test #9839\n-// aux-build:no_std_crate.rs\n-\n-// This tests that crates which link to std can also be linked to crates with\n-// #[no_std] that have no lang items.\n-\n-extern crate no_std_crate;\n-\n-pub fn main() {\n-    no_std_crate::foo();\n-}"}, {"sha": "43f6b27d64fc41dfad448be4b268a98f73147d8d", "filename": "src/test/run-pass/no-std-xcrate2.rs", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fno-std-xcrate2.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,36 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test: this has weird linking problems on Linux, and it probably needs a\n-//             solution along the lines of disabling segmented stacks and/or the\n-//             stack checks.\n-// aux-build:no_std_crate.rs\n-\n-// This tests that libraries built with #[no_std] can be linked to crates with\n-// #[no_std] and actually run.\n-\n-#![feature(no_std)]\n-#![no_std]\n-\n-extern crate no_std_crate;\n-\n-// This is an unfortunate thing to have to do on Linux :(\n-#[cfg(target_os = \"linux\")]\n-#[doc(hidden)]\n-pub mod linkhack {\n-    #[link_args=\"-lrustrt -lrt\"]\n-    extern {}\n-}\n-\n-#[start]\n-pub fn main(_: isize, _: **u8, _: *u8) -> isize {\n-    no_std_crate::foo();\n-    0\n-}"}, {"sha": "7e5e41820e99947a1ed3ad3a99df9945c9d174ad", "filename": "src/test/run-pass/preempt.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-// This checks that preemption works.\n-\n-// note: halfway done porting to modern rust\n-use std::comm;\n-\n-fn starve_main(alive: Receiver<isize>) {\n-    println!(\"signalling main\");\n-    alive.recv();\n-    println!(\"starving main\");\n-    let mut i: isize = 0;\n-    loop { i += 1; }\n-}\n-\n-pub fn main() {\n-    let (port, chan) = stream();\n-\n-    println!(\"main started\");\n-    spawn(move|| {\n-        starve_main(port);\n-    });\n-    let mut i: isize = 0;\n-    println!(\"main waiting for alive signal\");\n-    chan.send(i);\n-    println!(\"main got alive signal\");\n-    while i < 50 { println!(\"main iterated\"); i += 1; }\n-    println!(\"main completed\");\n-}"}, {"sha": "4c078a66f0882279f3ccf6c269529da989611e89", "filename": "src/test/run-pass/process-detach.rs", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Fprocess-detach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprocess-detach.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,49 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-test\n-\n-// FIXME: this test is being ignored until signals are implemented\n-\n-// This test ensures that the 'detach' field on processes does the right thing.\n-// By detaching the child process, they should be put into a separate process\n-// group. We test this by spawning a detached process, then killing our own\n-// group with a signal.\n-//\n-// Note that the first thing we do is put ourselves in our own process group so\n-// we don't interfere with other running tests.\n-\n-extern crate libc;\n-\n-use std::io::process;\n-use std::io::process::Command;\n-use std::io::signal::{Listener, Interrupt};\n-\n-fn main() {\n-    unsafe { libc::setsid(); }\n-\n-    // we shouldn't die because of an interrupt\n-    let mut l = Listener::new();\n-    l.register(Interrupt).unwrap();\n-\n-    // spawn the child\n-    let mut p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"read a\").detached().spawn().unwrap();\n-\n-    // send an interrupt to everyone in our process group\n-    unsafe { libc::funcs::posix88::signal::kill(0, libc::SIGINT); }\n-\n-    // Wait for the child process to die (terminate it's stdin and the read\n-    // should fail).\n-    drop(p.stdin.take());\n-    match p.wait().unwrap() {\n-        process::ExitStatus(..) => {}\n-        process::ExitSignal(..) => panic!()\n-    }\n-}"}, {"sha": "17c68d64948ed2da3eb77f330fa6f8d67a226bcb", "filename": "src/test/run-pass/trait-contravariant-self.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d6f0869286ecadc7d851190b317ae502303c526/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-contravariant-self.rs?ref=6d6f0869286ecadc7d851190b317ae502303c526", "patch": "@@ -1,40 +0,0 @@\n-// ignore-test\n-\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// This is an interesting test case. We have a trait (Bar) that is\n-// implemented for a `Box<Foo>` object (note: no bounds). And then we\n-// have a `Box<Foo+Send>` object. The impl for `Box<Foo>` is applicable\n-// to `Box<Foo+Send>` because:\n-//\n-// 1. The trait Bar is contravariant w/r/t Self because `Self` appears\n-//    only in argument position.\n-// 2. The impl provides `Bar for Box<Foo>`\n-// 3. The fn `wants_bar()` requires `Bar for Box<Foo:Send>`.\n-// 4. `Bar for Box<Foo> <: Bar for Box<Foo:Send>` because\n-//    `Box<Foo:Send> <: Box<Foo>`.\n-\n-#![allow(unknown_features)]\n-#![feature(box_syntax)]\n-\n-trait Foo { }\n-struct SFoo;\n-impl Foo for SFoo { }\n-\n-trait Bar { fn dummy(&self); }\n-impl Bar for Box<Foo> { fn dummy(&self) { } }\n-\n-fn wants_bar<B:Bar>(b: &B) { }\n-\n-fn main() {\n-    let x: Box<Foo+Send> = (box SFoo);\n-    wants_bar(&x);\n-}"}]}