{"sha": "960ebaf899cfceddf7edaf936f460491dcbf4733", "node_id": "C_kwDOAAsO6NoAKDk2MGViYWY4OTljZmNlZGRmN2VkYWY5MzZmNDYwNDkxZGNiZjQ3MzM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-11-09T11:53:04Z"}, "committer": {"name": "b-naber", "email": "b_naber@gmx.de", "date": "2023-02-19T22:12:09Z"}, "message": "collect existentials and placeholders", "tree": {"sha": "cce6107b3640d8b9e7d6828ca3301373ccdea368", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cce6107b3640d8b9e7d6828ca3301373ccdea368"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/960ebaf899cfceddf7edaf936f460491dcbf4733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/960ebaf899cfceddf7edaf936f460491dcbf4733", "html_url": "https://github.com/rust-lang/rust/commit/960ebaf899cfceddf7edaf936f460491dcbf4733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/960ebaf899cfceddf7edaf936f460491dcbf4733/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f79f73821db1f1f169abe526fc89c8b376636ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f79f73821db1f1f169abe526fc89c8b376636ea", "html_url": "https://github.com/rust-lang/rust/commit/2f79f73821db1f1f169abe526fc89c8b376636ea"}], "stats": {"total": 96, "additions": 76, "deletions": 20}, "files": [{"sha": "eeba0e3c2bcf732b8c8870a7504bac7210b95925", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=960ebaf899cfceddf7edaf936f460491dcbf4733", "patch": "@@ -1,9 +1,6 @@\n-<<<<<<< HEAD\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n-=======\n use crate::BorrowckInferCtxt;\n->>>>>>> 2464f768a17 (collect region contexts during mir renumbering)\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::visit::{MutVisitor, TyContext};"}, {"sha": "1232c524fe490a508e92c9214f4c48958d881ebf", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=960ebaf899cfceddf7edaf936f460491dcbf4733", "patch": "@@ -64,7 +64,7 @@ use crate::{\n     region_infer::TypeTest,\n     type_check::free_region_relations::{CreateResult, UniversalRegionRelations},\n     universal_regions::{DefiningTy, UniversalRegions},\n-    Upvar,\n+    BorrowckInferCtxt, Upvar,\n };\n \n macro_rules! span_mirbug {\n@@ -123,7 +123,7 @@ mod relate_tys;\n /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n /// - `elements` -- MIR region map\n pub(crate) fn type_check<'mir, 'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n@@ -845,7 +845,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n /// way, it accrues region constraints -- these can later be used by\n /// NLL region checking.\n struct TypeChecker<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'tcx>,\n+    infcx: &'a BorrowckInferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     last_span: Span,\n     body: &'a Body<'tcx>,\n@@ -998,7 +998,7 @@ impl Locations {\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn new(\n-        infcx: &'a InferCtxt<'tcx>,\n+        infcx: &'a BorrowckInferCtxt<'a, 'tcx>,\n         body: &'a Body<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,"}, {"sha": "91b26fc4e5343889ebd22364b6773525892313fc", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=960ebaf899cfceddf7edaf936f460491dcbf4733", "patch": "@@ -4,11 +4,12 @@ use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use rustc_trait_selection::traits::query::Fallible;\n \n use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n+use crate::renumber::RegionCtxt;\n use crate::type_check::{InstantiateOpaqueType, Locations, TypeChecker};\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n@@ -100,23 +101,69 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         universe\n     }\n \n-    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n+    #[instrument(skip(self), level = \"debug\")]\n+    fn next_existential_region_var(\n+        &mut self,\n+        from_forall: bool,\n+        _name: Option<Symbol>,\n+    ) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n-        self.type_checker.infcx.next_nll_region_var(origin)\n+\n+        #[cfg(not(debug_assertions))]\n+        let reg_var = self.type_checker.infcx.next_nll_region_var(origin);\n+\n+        #[cfg(debug_assertions)]\n+        let reg_var =\n+            self.type_checker.infcx.next_nll_region_var(origin, RegionCtxt::Existential(_name));\n+\n+        reg_var\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        self.type_checker\n+        let reg = self\n+            .type_checker\n             .borrowck_context\n             .constraints\n-            .placeholder_region(self.type_checker.infcx, placeholder)\n+            .placeholder_region(self.type_checker.infcx, placeholder);\n+\n+        #[cfg(debug_assertions)]\n+        {\n+            let name = match placeholder.name {\n+                ty::BoundRegionKind::BrAnon(_) => Symbol::intern(\"anon\"),\n+                ty::BoundRegionKind::BrNamed(_, name) => name,\n+                ty::BoundRegionKind::BrEnv => Symbol::intern(\"env\"),\n+            };\n+\n+            let reg_var = reg\n+                .try_get_var()\n+                .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+            let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(reg_var, RegionCtxt::Placeholder(name));\n+            assert!(matches!(prev, None));\n+        }\n+\n+        reg\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n-        self.type_checker.infcx.next_nll_region_var_in_universe(\n+        let reg = self.type_checker.infcx.next_nll_region_var_in_universe(\n             NllRegionVariableOrigin::Existential { from_forall: false },\n             universe,\n-        )\n+        );\n+\n+        #[cfg(debug_assertions)]\n+        {\n+            let reg_var = reg\n+                .try_get_var()\n+                .unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+            let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n+            assert!(matches!(prev, None));\n+        }\n+\n+        reg\n     }\n \n     fn push_outlives("}, {"sha": "1ca9e87e05671c399464376c7a60ece81378a2fe", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=960ebaf899cfceddf7edaf936f460491dcbf4733", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, BoundVar, ToPredicate, Ty, TyCtxt};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n use std::iter;\n \n@@ -318,7 +318,11 @@ impl<'tcx> InferCtxt<'tcx> {\n \n                 // Screen out `'a: 'a` cases.\n                 let ty::OutlivesPredicate(k1, r2) = r_c.0;\n-                if k1 != r2.into() { Some(r_c) } else { None }\n+                if k1 != r2.into() {\n+                    Some(r_c)\n+                } else {\n+                    None\n+                }\n             }),\n         );\n \n@@ -683,7 +687,11 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         self.infcx.create_next_universe()\n     }\n \n-    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n+    fn next_existential_region_var(\n+        &mut self,\n+        from_forall: bool,\n+        _name: Option<Symbol>,\n+    ) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n         self.infcx.next_nll_region_var(origin)\n     }"}, {"sha": "954334e88b0cbf7d87dd2cb19c63d6c81750fa62", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/960ebaf899cfceddf7edaf936f460491dcbf4733/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=960ebaf899cfceddf7edaf936f460491dcbf4733", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n use std::ops::ControlFlow;\n \n@@ -100,7 +100,11 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// we will invoke this method to instantiate `'a` with an\n     /// inference variable (though `'b` would be instantiated first,\n     /// as a placeholder).\n-    fn next_existential_region_var(&mut self, was_placeholder: bool) -> ty::Region<'tcx>;\n+    fn next_existential_region_var(\n+        &mut self,\n+        was_placeholder: bool,\n+        name: Option<Symbol>,\n+    ) -> ty::Region<'tcx>;\n \n     /// Creates a new region variable representing a\n     /// higher-ranked region that is instantiated universally.\n@@ -188,7 +192,7 @@ where\n                     let placeholder = ty::PlaceholderRegion { universe, name: br.kind };\n                     delegate.next_placeholder_region(placeholder)\n                 } else {\n-                    delegate.next_existential_region_var(true)\n+                    delegate.next_existential_region_var(true, br.kind.get_name())\n                 }\n             }\n         };"}]}