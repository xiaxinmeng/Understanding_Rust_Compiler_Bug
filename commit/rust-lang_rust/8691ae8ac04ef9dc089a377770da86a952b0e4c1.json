{"sha": "8691ae8ac04ef9dc089a377770da86a952b0e4c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OTFhZThhYzA0ZWY5ZGMwODlhMzc3NzcwZGE4NmE5NTJiMGU0YzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:16:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:16:31Z"}, "message": "Removed FromSource", "tree": {"sha": "63b848a05345933fd672f6e761c21eaefa0c2c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63b848a05345933fd672f6e761c21eaefa0c2c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8691ae8ac04ef9dc089a377770da86a952b0e4c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8691ae8ac04ef9dc089a377770da86a952b0e4c1", "html_url": "https://github.com/rust-lang/rust/commit/8691ae8ac04ef9dc089a377770da86a952b0e4c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8691ae8ac04ef9dc089a377770da86a952b0e4c1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a45ca1b3606d2c328740aa7e2dc989b9e128a5", "html_url": "https://github.com/rust-lang/rust/commit/81a45ca1b3606d2c328740aa7e2dc989b9e128a5"}], "stats": {"total": 181, "additions": 16, "deletions": 165}, "files": [{"sha": "30e8188922a22926eab620a8d11e0e2eb678945b", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 16, "deletions": 165, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/8691ae8ac04ef9dc089a377770da86a952b0e4c1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8691ae8ac04ef9dc089a377770da86a952b0e4c1/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=8691ae8ac04ef9dc089a377770da86a952b0e4c1", "patch": "@@ -2,139 +2,32 @@\n //! file.\n \n use hir_def::{\n-    child_by_source::ChildBySource, dyn_map::DynMap, keys, keys::Key, nameres::ModuleSource,\n-    ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId, ImplId, ModuleId,\n-    StaticId, StructId, TraitId, TypeAliasId, UnionId, VariantId,\n+    child_by_source::ChildBySource, keys, nameres::ModuleSource, GenericDefId, ModuleId,\n };\n-use hir_expand::{name::AsName, AstId, MacroDefId, MacroDefKind};\n+use hir_expand::name::AsName;\n use ra_db::FileId;\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n-    match_ast, SyntaxNode,\n+    match_ast,\n };\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n-    Const, DefWithBody, Enum, EnumVariant, FieldSource, Function, ImplBlock, InFile, Local,\n-    MacroDef, Module, Static, Struct, StructField, Trait, TypeAlias, TypeParam, Union,\n+    Const, DefWithBody, Enum, Function, ImplBlock, InFile, Local, Module, SourceBinder, Static,\n+    Struct, Trait, TypeAlias, TypeParam,\n };\n \n-pub(crate) trait FromSource: Sized {\n-    type Ast;\n-    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self>;\n-}\n-\n-pub trait FromSourceByContainer: Sized {\n-    type Ast: AstNode + 'static;\n-    type Id: Copy + 'static;\n-    const KEY: Key<Self::Ast, Self::Id>;\n-}\n-\n-impl<T: FromSourceByContainer> FromSource for T\n-where\n-    T: From<<T as FromSourceByContainer>::Id>,\n-{\n-    type Ast = <T as FromSourceByContainer>::Ast;\n-    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n-        analyze_container(db, src.as_ref().map(|it| it.syntax()))[T::KEY]\n-            .get(&src)\n-            .copied()\n-            .map(Self::from)\n-    }\n-}\n-\n-macro_rules! from_source_by_container_impls {\n-    ($(($hir:ident, $id:ident, $ast:path, $key:path)),* ,) => {$(\n-        impl FromSourceByContainer for $hir {\n-            type Ast = $ast;\n-            type Id = $id;\n-            const KEY: Key<Self::Ast, Self::Id> = $key;\n-        }\n-    )*}\n-}\n-\n-from_source_by_container_impls![\n-    (Struct, StructId, ast::StructDef, keys::STRUCT),\n-    (Union, UnionId, ast::UnionDef, keys::UNION),\n-    (Enum, EnumId, ast::EnumDef, keys::ENUM),\n-    (Trait, TraitId, ast::TraitDef, keys::TRAIT),\n-    (Function, FunctionId, ast::FnDef, keys::FUNCTION),\n-    (Static, StaticId, ast::StaticDef, keys::STATIC),\n-    (Const, ConstId, ast::ConstDef, keys::CONST),\n-    (TypeAlias, TypeAliasId, ast::TypeAliasDef, keys::TYPE_ALIAS),\n-    (ImplBlock, ImplId, ast::ImplBlock, keys::IMPL),\n-];\n-\n-impl FromSource for MacroDef {\n-    type Ast = ast::MacroCall;\n-    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n-        let kind = MacroDefKind::Declarative;\n-\n-        let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-        let module = Module::from_definition(db, InFile::new(src.file_id, module_src))?;\n-        let krate = Some(module.krate().id);\n-\n-        let ast_id = Some(AstId::new(src.file_id, db.ast_id_map(src.file_id).ast_id(&src.value)));\n-\n-        let id: MacroDefId = MacroDefId { krate, ast_id, kind };\n-        Some(MacroDef { id })\n-    }\n-}\n-\n-impl FromSource for EnumVariant {\n-    type Ast = ast::EnumVariant;\n-    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n-        let parent_enum = src.value.parent_enum();\n-        let src_enum = InFile { file_id: src.file_id, value: parent_enum };\n-        let parent_enum = Enum::from_source(db, src_enum)?;\n-        parent_enum.id.child_by_source(db)[keys::ENUM_VARIANT]\n-            .get(&src)\n-            .copied()\n-            .map(EnumVariant::from)\n-    }\n-}\n-\n-impl FromSource for StructField {\n-    type Ast = FieldSource;\n-    fn from_source(db: &impl DefDatabase, src: InFile<Self::Ast>) -> Option<Self> {\n-        let src = src.as_ref();\n-\n-        // FIXME this is buggy\n-        let variant_id: VariantId = match src.value {\n-            FieldSource::Named(field) => {\n-                let value = field.syntax().ancestors().find_map(ast::StructDef::cast)?;\n-                let src = InFile { file_id: src.file_id, value };\n-                let def = Struct::from_source(db, src)?;\n-                def.id.into()\n-            }\n-            FieldSource::Pos(field) => {\n-                let value = field.syntax().ancestors().find_map(ast::EnumVariant::cast)?;\n-                let src = InFile { file_id: src.file_id, value };\n-                let def = EnumVariant::from_source(db, src)?;\n-                EnumVariantId::from(def).into()\n-            }\n-        };\n-\n-        let dyn_map = variant_id.child_by_source(db);\n-        match src.value {\n-            FieldSource::Pos(it) => dyn_map[keys::TUPLE_FIELD].get(&src.with_value(it.clone())),\n-            FieldSource::Named(it) => dyn_map[keys::RECORD_FIELD].get(&src.with_value(it.clone())),\n-        }\n-        .copied()\n-        .map(StructField::from)\n-    }\n-}\n-\n impl Local {\n     pub fn from_source(db: &impl HirDatabase, src: InFile<ast::BindPat>) -> Option<Self> {\n+        let mut sb = SourceBinder::new(db);\n         let file_id = src.file_id;\n         let parent: DefWithBody = src.value.syntax().ancestors().find_map(|it| {\n             let res = match_ast! {\n                 match it {\n-                    ast::ConstDef(value) => { Const::from_source(db, InFile { value, file_id})?.into() },\n-                    ast::StaticDef(value) => { Static::from_source(db, InFile { value, file_id})?.into() },\n-                    ast::FnDef(value) => { Function::from_source(db, InFile { value, file_id})?.into() },\n+                    ast::ConstDef(value) => { sb.to_def::<Const, _>(InFile { value, file_id})?.into() },\n+                    ast::StaticDef(value) => { sb.to_def::<Static, _>(InFile { value, file_id})?.into() },\n+                    ast::FnDef(value) => { sb.to_def::<Function, _>(InFile { value, file_id})?.into() },\n                     _ => return None,\n                 }\n             };\n@@ -149,16 +42,17 @@ impl Local {\n \n impl TypeParam {\n     pub fn from_source(db: &impl HirDatabase, src: InFile<ast::TypeParam>) -> Option<Self> {\n+        let mut sb = SourceBinder::new(db);\n         let file_id = src.file_id;\n         let parent: GenericDefId = src.value.syntax().ancestors().find_map(|it| {\n             let res = match_ast! {\n                 match it {\n-                    ast::FnDef(value) => { Function::from_source(db, InFile { value, file_id})?.id.into() },\n-                    ast::StructDef(value) => { Struct::from_source(db, InFile { value, file_id})?.id.into() },\n-                    ast::EnumDef(value) => { Enum::from_source(db, InFile { value, file_id})?.id.into() },\n-                    ast::TraitDef(value) => { Trait::from_source(db, InFile { value, file_id})?.id.into() },\n-                    ast::TypeAliasDef(value) => { TypeAlias::from_source(db, InFile { value, file_id})?.id.into() },\n-                    ast::ImplBlock(value) => { ImplBlock::from_source(db, InFile { value, file_id})?.id.into() },\n+                    ast::FnDef(value) => { sb.to_def::<Function, _>(InFile { value, file_id})?.id.into() },\n+                    ast::StructDef(value) => { sb.to_def::<Struct, _>(InFile { value, file_id})?.id.into() },\n+                    ast::EnumDef(value) => { sb.to_def::<Enum, _>(InFile { value, file_id})?.id.into() },\n+                    ast::TraitDef(value) => { sb.to_def::<Trait, _>(InFile { value, file_id})?.id.into() },\n+                    ast::TypeAliasDef(value) => { sb.to_def::<TypeAlias, _>(InFile { value, file_id})?.id.into() },\n+                    ast::ImplBlock(value) => { sb.to_def::<ImplBlock, _>(InFile { value, file_id})?.id.into() },\n                     _ => return None,\n                 }\n             };\n@@ -220,46 +114,3 @@ impl Module {\n         Some(Module { id: ModuleId { krate, local_id } })\n     }\n }\n-\n-fn analyze_container(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> DynMap {\n-    let _p = profile(\"analyze_container\");\n-    return child_by_source(db, src).unwrap_or_default();\n-\n-    fn child_by_source(db: &impl DefDatabase, src: InFile<&SyntaxNode>) -> Option<DynMap> {\n-        for container in src.value.ancestors().skip(1) {\n-            let res = match_ast! {\n-                match container {\n-                    ast::TraitDef(it) => {\n-                        let def = Trait::from_source(db, src.with_value(it))?;\n-                        def.id.child_by_source(db)\n-                    },\n-                    ast::ImplBlock(it) => {\n-                        let def = ImplBlock::from_source(db, src.with_value(it))?;\n-                        def.id.child_by_source(db)\n-                    },\n-                    ast::FnDef(it) => {\n-                        let def = Function::from_source(db, src.with_value(it))?;\n-                        DefWithBodyId::from(def.id)\n-                            .child_by_source(db)\n-                    },\n-                    ast::StaticDef(it) => {\n-                        let def = Static::from_source(db, src.with_value(it))?;\n-                        DefWithBodyId::from(def.id)\n-                            .child_by_source(db)\n-                    },\n-                    ast::ConstDef(it) => {\n-                        let def = Const::from_source(db, src.with_value(it))?;\n-                        DefWithBodyId::from(def.id)\n-                            .child_by_source(db)\n-                    },\n-                    _ => { continue },\n-                }\n-            };\n-            return Some(res);\n-        }\n-\n-        let module_source = ModuleSource::from_child_node(db, src);\n-        let c = Module::from_definition(db, src.with_value(module_source))?;\n-        Some(c.id.child_by_source(db))\n-    }\n-}"}]}