{"sha": "f82c96446f7577cc29c71ed793a531c9189e7039", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MmM5NjQ0NmY3NTc3Y2MyOWM3MWVkNzkzYTUzMWM5MTg5ZTcwMzk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-15T14:30:16Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-04-16T01:35:41Z"}, "message": "iterator: use an IteratorUtil trait", "tree": {"sha": "3c2003018d918004f4651a9336657e33c7e74474", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c2003018d918004f4651a9336657e33c7e74474"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82c96446f7577cc29c71ed793a531c9189e7039", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82c96446f7577cc29c71ed793a531c9189e7039", "html_url": "https://github.com/rust-lang/rust/commit/f82c96446f7577cc29c71ed793a531c9189e7039", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82c96446f7577cc29c71ed793a531c9189e7039/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a581926f57d8fe9afaa792f26240ad1ff1288377", "url": "https://api.github.com/repos/rust-lang/rust/commits/a581926f57d8fe9afaa792f26240ad1ff1288377", "html_url": "https://github.com/rust-lang/rust/commit/a581926f57d8fe9afaa792f26240ad1ff1288377"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "fcb5102d4c07c6dcc790ae3e965ca3c418b2ad5c", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/f82c96446f7577cc29c71ed793a531c9189e7039/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82c96446f7577cc29c71ed793a531c9189e7039/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=f82c96446f7577cc29c71ed793a531c9189e7039", "patch": "@@ -12,20 +12,46 @@\n \n use prelude::*;\n \n-pub trait Iterator<T> {\n+pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n-    fn next(&mut self) -> Option<T>;\n+    fn next(&mut self) -> Option<A>;\n }\n \n-/// A shim implementing the `for` loop iteration protocol for iterator objects\n-#[inline]\n-pub fn advance<T, U: Iterator<T>>(iter: &mut U, f: &fn(T) -> bool) {\n-    loop {\n-        match iter.next() {\n-            Some(x) => {\n-                if !f(x) { return }\n+pub trait IteratorUtil<A> {\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<Self, U>;\n+    // FIXME: #5898: should be called map\n+    fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, Self>;\n+    fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, Self>;\n+    fn advance(&mut self, f: &fn(A) -> bool);\n+}\n+\n+impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n+    #[inline(always)]\n+    fn zip<B, U: Iterator<B>>(self, other: U) -> ZipIterator<T, U> {\n+        ZipIterator{a: self, b: other}\n+    }\n+\n+    // FIXME: #5898: should be called map\n+    #[inline(always)]\n+    fn transform<'r, B>(self, f: &'r fn(A) -> B) -> MapIterator<'r, A, B, T> {\n+        MapIterator{iter: self, f: f}\n+    }\n+\n+    #[inline(always)]\n+    fn filter<'r>(self, predicate: &'r fn(&A) -> bool) -> FilterIterator<'r, A, T> {\n+        FilterIterator{iter: self, predicate: predicate}\n+    }\n+\n+    /// A shim implementing the `for` loop iteration protocol for iterator objects\n+    #[inline]\n+    fn advance(&mut self, f: &fn(A) -> bool) {\n+        loop {\n+            match self.next() {\n+                Some(x) => {\n+                    if !f(x) { return }\n+                }\n+                None => return\n             }\n-            None => return\n         }\n     }\n }\n@@ -35,13 +61,6 @@ pub struct ZipIterator<T, U> {\n     priv b: U\n }\n \n-pub impl<A, B, T: Iterator<A>, U: Iterator<B>> ZipIterator<T, U> {\n-    #[inline(always)]\n-    fn new(a: T, b: U) -> ZipIterator<T, U> {\n-        ZipIterator{a: a, b: b}\n-    }\n-}\n-\n impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for ZipIterator<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<(A, B)> {\n@@ -57,17 +76,10 @@ pub struct FilterIterator<'self, A, T> {\n     priv predicate: &'self fn(&A) -> bool\n }\n \n-pub impl<'self, A, T: Iterator<A>> FilterIterator<'self, A, T> {\n-    #[inline(always)]\n-    fn new(iter: T, predicate: &'self fn(&A) -> bool) -> FilterIterator<'self, A, T> {\n-        FilterIterator{iter: iter, predicate: predicate}\n-    }\n-}\n-\n impl<'self, A, T: Iterator<A>> Iterator<A> for FilterIterator<'self, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        for advance(self) |x| {\n+        for self.iter.advance |x| {\n             if (self.predicate)(&x) {\n                 return Some(x);\n             } else {\n@@ -83,13 +95,6 @@ pub struct MapIterator<'self, A, B, T> {\n     priv f: &'self fn(A) -> B\n }\n \n-pub impl<'self, A, B, T: Iterator<A>> MapIterator<'self, A, B, T> {\n-    #[inline(always)]\n-    fn new(iter: T, f: &'self fn(A) -> B) -> MapIterator<'self, A, B, T> {\n-        MapIterator{iter: iter, f: f}\n-    }\n-}\n-\n impl<'self, A, B, T: Iterator<A>> Iterator<B> for MapIterator<'self, A, B, T> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {"}, {"sha": "ac887c7fdc41df65663d45b6e8c92c88642a1478", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f82c96446f7577cc29c71ed793a531c9189e7039/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82c96446f7577cc29c71ed793a531c9189e7039/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=f82c96446f7577cc29c71ed793a531c9189e7039", "patch": "@@ -996,7 +996,7 @@ mod test_treemap {\n                         (&x5, &y5)];\n         let mut i = 0;\n \n-        for advance(&mut b) |x| {\n+        for b.advance |x| {\n             assert!(expected[i] == x);\n             i += 1;\n \n@@ -1005,7 +1005,7 @@ mod test_treemap {\n             }\n         }\n \n-        for advance(&mut b) |x| {\n+        for b.advance |x| {\n             assert!(expected[i] == x);\n             i += 1;\n         }\n@@ -1209,7 +1209,7 @@ mod test_set {\n \n         let x = x;\n         let y = y;\n-        let mut z = ZipIterator::new(x.iter(), y.iter());\n+        let mut z = x.iter().zip(y.iter());\n \n         // FIXME: #5801: this needs a type hint to compile...\n         let result: Option<(&uint, & &'static str)> = z.next();"}]}