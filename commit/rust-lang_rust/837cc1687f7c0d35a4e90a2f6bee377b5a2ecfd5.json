{"sha": "837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "node_id": "C_kwDOAAsO6NoAKDgzN2NjMTY4N2Y3YzBkMzVhNGU5MGEyZjZiZWUzNzdiNWEyZWNmZDU", "commit": {"author": {"name": "James McGregor", "email": "james.mcgregor2@arm.com", "date": "2021-07-13T11:14:26Z"}, "committer": {"name": "Jamie Cunliffe", "email": "Jamie.Cunliffe@arm.com", "date": "2021-12-01T12:24:30Z"}, "message": "Add codegen option for branch protection and pointer authentication on AArch64\n\nThe branch-protection codegen option enables the use of hint-space pointer\nauthentication code for AArch64 targets", "tree": {"sha": "8ce2820cee2ce31a9b54e93791dd8a7b48241039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce2820cee2ce31a9b54e93791dd8a7b48241039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "html_url": "https://github.com/rust-lang/rust/commit/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/comments", "author": {"login": "Jmc18134", "id": 47884670, "node_id": "MDQ6VXNlcjQ3ODg0Njcw", "avatar_url": "https://avatars.githubusercontent.com/u/47884670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jmc18134", "html_url": "https://github.com/Jmc18134", "followers_url": "https://api.github.com/users/Jmc18134/followers", "following_url": "https://api.github.com/users/Jmc18134/following{/other_user}", "gists_url": "https://api.github.com/users/Jmc18134/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jmc18134/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jmc18134/subscriptions", "organizations_url": "https://api.github.com/users/Jmc18134/orgs", "repos_url": "https://api.github.com/users/Jmc18134/repos", "events_url": "https://api.github.com/users/Jmc18134/events{/privacy}", "received_events_url": "https://api.github.com/users/Jmc18134/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JamieCunliffe", "id": 29557119, "node_id": "MDQ6VXNlcjI5NTU3MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/29557119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JamieCunliffe", "html_url": "https://github.com/JamieCunliffe", "followers_url": "https://api.github.com/users/JamieCunliffe/followers", "following_url": "https://api.github.com/users/JamieCunliffe/following{/other_user}", "gists_url": "https://api.github.com/users/JamieCunliffe/gists{/gist_id}", "starred_url": "https://api.github.com/users/JamieCunliffe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JamieCunliffe/subscriptions", "organizations_url": "https://api.github.com/users/JamieCunliffe/orgs", "repos_url": "https://api.github.com/users/JamieCunliffe/repos", "events_url": "https://api.github.com/users/JamieCunliffe/events{/privacy}", "received_events_url": "https://api.github.com/users/JamieCunliffe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2446a215954a99f9d33019fad7d415ef9c083502", "url": "https://api.github.com/repos/rust-lang/rust/commits/2446a215954a99f9d33019fad7d415ef9c083502", "html_url": "https://github.com/rust-lang/rust/commit/2446a215954a99f9d33019fad7d415ef9c083502"}], "stats": {"total": 273, "additions": 266, "deletions": 7}, "files": [{"sha": "768e03b5ef3586e5dea9f491f93e7c25bd9343b8", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_session::config::OptLevel;\n+use rustc_session::config::{BranchProtection, OptLevel, PAuthKey};\n use rustc_session::Session;\n use rustc_target::spec::abi::Abi;\n use rustc_target::spec::{FramePointer, SanitizerSet, StackProbeType, StackProtector};\n@@ -203,6 +203,58 @@ pub fn non_lazy_bind(sess: &Session, llfn: &'ll Value) {\n     }\n }\n \n+pub fn set_branch_protection(sess: &Session, llfn: &'ll Value) {\n+    // Setting PAC/BTI function attributes is only necessary for LLVM 11 and earlier.\n+    // For LLVM 12 and greater, module-level metadata attributes are set in\n+    // `compiler/rustc_codegen_llvm/src/context.rs`.\n+    if llvm_util::get_version() >= (12, 0, 0) {\n+        return;\n+    }\n+\n+    let BranchProtection { bti, pac_ret: pac } = sess.opts.cg.branch_protection;\n+\n+    if bti {\n+        llvm::AddFunctionAttrString(\n+            llfn,\n+            llvm::AttributePlace::Function,\n+            cstr!(\"branch-target-enforcement\"),\n+        );\n+    }\n+\n+    if let Some(pac_opts) = pac {\n+        if pac_opts.leaf {\n+            llvm::AddFunctionAttrStringValue(\n+                llfn,\n+                llvm::AttributePlace::Function,\n+                cstr!(\"sign-return-address\"),\n+                cstr!(\"non-leaf\"),\n+            );\n+        } else {\n+            llvm::AddFunctionAttrStringValue(\n+                llfn,\n+                llvm::AttributePlace::Function,\n+                cstr!(\"sign-return-address\"),\n+                cstr!(\"all\"),\n+            );\n+        }\n+\n+        match pac_opts.key {\n+            PAuthKey::A => llvm::AddFunctionAttrStringValue(\n+                llfn,\n+                llvm::AttributePlace::Function,\n+                cstr!(\"sign-return-address-key\"),\n+                cstr!(\"a_key\"),\n+            ),\n+            PAuthKey::B => llvm::AddFunctionAttrStringValue(\n+                llfn,\n+                llvm::AttributePlace::Function,\n+                cstr!(\"sign-return-address-key\"),\n+                cstr!(\"b_key\"),\n+            ),\n+        }\n+    }\n+}\n+\n pub(crate) fn default_optimisation_attrs(sess: &Session, llfn: &'ll Value) {\n     match sess.opts.optimize {\n         OptLevel::Size => {"}, {"sha": "da05b5c0cba7496a2afb00d109224d54dbd0d671", "filename": "compiler/rustc_codegen_llvm/src/context.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcontext.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::layout::{\n };\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n-use rustc_session::config::{CFGuard, CrateType, DebugInfo};\n+use rustc_session::config::{BranchProtection, CFGuard, CrateType, DebugInfo, PAuthKey};\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n@@ -242,6 +242,38 @@ pub unsafe fn create_module(\n         }\n     }\n \n+    if sess.target.arch == \"aarch64\" {\n+        let BranchProtection { bti, pac_ret: pac } = sess.opts.cg.branch_protection;\n+\n+        llvm::LLVMRustAddModuleFlag(\n+            llmod,\n+            \"branch-target-enforcement\\0\".as_ptr().cast(),\n+            bti.into(),\n+        );\n+\n+        if let Some(pac_opts) = pac {\n+            llvm::LLVMRustAddModuleFlag(llmod, \"sign-return-address\\0\".as_ptr().cast(), 1);\n+            llvm::LLVMRustAddModuleFlag(\n+                llmod,\n+                \"sign-return-address-all\\0\".as_ptr().cast(),\n+                pac_opts.leaf.into(),\n+            );\n+            llvm::LLVMRustAddModuleFlag(\n+                llmod,\n+                \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n+                if pac_opts.key == PAuthKey::A { 0 } else { 1 },\n+            );\n+        } else {\n+            llvm::LLVMRustAddModuleFlag(llmod, \"sign-return-address\\0\".as_ptr().cast(), 0);\n+            llvm::LLVMRustAddModuleFlag(llmod, \"sign-return-address-all\\0\".as_ptr().cast(), 0);\n+            llvm::LLVMRustAddModuleFlag(\n+                llmod,\n+                \"sign-return-address-with-bkey\\0\".as_ptr().cast(),\n+                0,\n+            );\n+        }\n+    }\n+\n     llmod\n }\n "}, {"sha": "f4e754b80c976a5b1f59afba6c95146c27630828", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -45,8 +45,13 @@ fn declare_raw_fn(\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n \n+    if cx.tcx.sess.target.arch == \"aarch64\" {\n+        attributes::set_branch_protection(cx.tcx.sess, llfn);\n+    }\n+\n     attributes::default_optimisation_attrs(cx.tcx.sess, llfn);\n     attributes::non_lazy_bind(cx.sess(), llfn);\n+\n     llfn\n }\n "}, {"sha": "1ceb11ede19e39a63168369504744a5d42dea0c4", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -8,10 +8,11 @@ use rustc_session::config::{build_configuration, build_session_options, to_crate\n use rustc_session::config::{\n     rustc_optgroups, ErrorOutputType, ExternLocation, LocationDetail, Options, Passes,\n };\n-use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{\n-    Externs, OutputType, OutputTypes, SymbolManglingVersion, WasiExecModel,\n+    BranchProtection, Externs, OutputType, OutputTypes, PAuthKey, PacRet, SymbolManglingVersion,\n+    WasiExecModel,\n };\n+use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n@@ -566,6 +567,10 @@ fn test_codegen_options_tracking_hash() {\n \n     // Make sure that changing a [TRACKED] option changes the hash.\n     // This list is in alphabetical order.\n+    tracked!(\n+        branch_protection,\n+        BranchProtection { bti: true, pac_ret: Some(PacRet { leaf: true, key: PAuthKey::B }) }\n+    );\n     tracked!(code_model, Some(CodeModel::Large));\n     tracked!(control_flow_guard, CFGuard::Checks);\n     tracked!(debug_assertions, Some(true));"}, {"sha": "d994e52e04963c18124e469db6713261fed89d9b", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -842,6 +842,30 @@ impl Passes {\n     }\n }\n \n+#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+pub enum PAuthKey {\n+    A,\n+    B,\n+}\n+\n+#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+pub struct PacRet {\n+    pub leaf: bool,\n+    pub key: PAuthKey,\n+}\n+\n+#[derive(Clone, Copy, Hash, Debug, PartialEq)]\n+pub struct BranchProtection {\n+    pub bti: bool,\n+    pub pac_ret: Option<PacRet>,\n+}\n+\n+impl Default for BranchProtection {\n+    fn default() -> Self {\n+        BranchProtection { bti: false, pac_ret: None }\n+    }\n+}\n+\n pub const fn default_lib_output() -> CrateType {\n     CrateType::Rlib\n }\n@@ -2487,9 +2511,9 @@ impl PpMode {\n crate mod dep_tracking {\n     use super::LdImpl;\n     use super::{\n-        CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage, LinkerPluginLto,\n-        LocationDetail, LtoCli, OptLevel, OutputType, OutputTypes, Passes, SourceFileHashAlgorithm,\n-        SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n+        BranchProtection, CFGuard, CrateType, DebugInfo, ErrorOutputType, InstrumentCoverage,\n+        LinkerPluginLto, LocationDetail, LtoCli, OptLevel, OutputType, OutputTypes, Passes,\n+        SourceFileHashAlgorithm, SwitchWithOptPath, SymbolManglingVersion, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2583,6 +2607,7 @@ crate mod dep_tracking {\n         OutputType,\n         RealFileName,\n         LocationDetail,\n+        BranchProtection,\n     );\n \n     impl<T1, T2> DepTrackingHash for (T1, T2)"}, {"sha": "03ce0cc42cd36c78fe51946de23dff009fce7c58", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -389,6 +389,8 @@ mod desc {\n     pub const parse_gcc_ld: &str = \"one of: no value, `lld`\";\n     pub const parse_stack_protector: &str =\n         \"one of (`none` (default), `basic`, `strong`, or `all`)\";\n+    pub const parse_branch_protection: &str =\n+        \"a `+` separated combination of `bti`, `b-key`, `pac-ret`, or `leaf`\";\n }\n \n mod parse {\n@@ -929,6 +931,33 @@ mod parse {\n         }\n         true\n     }\n+\n+    crate fn parse_branch_protection(slot: &mut BranchProtection, v: Option<&str>) -> bool {\n+        match v {\n+            Some(s) => {\n+                for opt in s.split('+') {\n+                    match opt {\n+                        \"bti\" => slot.bti = true,\n+                        \"pac-ret\" if slot.pac_ret.is_none() => {\n+                            slot.pac_ret = Some(PacRet { leaf: false, key: PAuthKey::A })\n+                        }\n+                        \"leaf\" => match slot.pac_ret.as_mut() {\n+                            Some(pac) => pac.leaf = true,\n+                            _ => return false,\n+                        },\n+                        \"b-key\" => match slot.pac_ret.as_mut() {\n+                            Some(pac) => pac.key = PAuthKey::B,\n+                            _ => return false,\n+                        },\n+                        _ => return false,\n+                    };\n+                }\n+            }\n+\n+            _ => return false,\n+        }\n+        true\n+    }\n }\n \n options! {\n@@ -942,6 +971,8 @@ options! {\n \n     ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n+    branch_protection: BranchProtection = (BranchProtection::default(), parse_branch_protection, [TRACKED],\n+        \"set options for branch target identification and pointer authentication on AArch64\"),\n     code_model: Option<CodeModel> = (None, parse_code_model, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n     codegen_units: Option<usize> = (None, parse_opt_number, [UNTRACKED],"}, {"sha": "484242d86fe10acba33e09bc554f3040e1ff7f14", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -7,6 +7,29 @@ a version of this list for your exact compiler by running `rustc -C help`.\n \n This option is deprecated and does nothing.\n \n+## branch-protection\n+\n+This option lets you enable branch authentication instructions on AArch64.\n+This option is ignored for non-AArch64 architectures.\n+It takes some combination of the following values, separated by a `+`.\n+\n+- `pac-ret` - Enable pointer authentication for non-leaf functions.\n+- `leaf` - Enable pointer authentication for all functions, including leaf functions.\n+- `b-key` - Sign return addresses with key B, instead of the default key A.\n+- `bti` - Enable branch target identification.\n+\n+`leaf` and `b-key` are only valid if `pac-ret` was previously specified.\n+For example, `-C branch-protection=bti+pac-ret+leaf` is valid, but\n+`-C branch-protection=bti+leaf+pac-ret` is not.\n+\n+Repeated values are ignored.\n+For example, `-C branch-protection=pac-ret+leaf+pac-ret` is equivalent to\n+`-C branch-protection=pac-ret+leaf`.\n+\n+Rust's standard library does not ship with BTI or pointer authentication enabled by default. \\\n+In Cargo projects the standard library can be recompiled with pointer authentication using the nightly\n+[build-std](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-std) feature.\n+\n ## code-model\n \n This option lets you choose which code model to use. \\"}, {"sha": "e778e67e1b384569def771e5b6b5c617c0b69acb", "filename": "src/test/assembly/aarch64-pointer-auth.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Faarch64-pointer-auth.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -0,0 +1,22 @@\n+// Test that PAC instructions are emitted when branch-protection is specified.\n+\n+// min-llvm-version: 10.0.1\n+// assembly-output: emit-asm\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+// compile-flags: -C branch-protection=pac-ret+leaf\n+// needs-llvm-components: aarch64\n+\n+#![feature(no_core, lang_items)]\n+#![no_std]\n+#![no_core]\n+#![crate_type = \"lib\"]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+// CHECK: hint #25\n+// CHECK: hint #29\n+#[no_mangle]\n+pub fn test() -> u8 {\n+    42\n+}"}, {"sha": "79706cdf070e501f97c9cd8f9af5e6ace28a6135", "filename": "src/test/codegen/branch-protection.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Fcodegen%2Fbranch-protection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbranch-protection.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -0,0 +1,41 @@\n+// Test that the correct module flags are emitted with different branch protection flags.\n+\n+// revisions: bti pac-ret leaf b-key\n+// min-llvm-version: 12.0.0\n+// needs-llvm-components: aarch64\n+// [bti] compile-flags: -C branch-protection=bti\n+// [pac-ret] compile-flags: -C branch-protection=pac-ret\n+// [leaf] compile-flags: -C branch-protection=pac-ret+leaf\n+// [b-key] compile-flags: -C branch-protection=pac-ret+b-key\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+\n+#![crate_type = \"lib\"]\n+#![feature(no_core, lang_items)]\n+#![no_core]\n+\n+#[lang=\"sized\"]\n+trait Sized { }\n+\n+// A basic test function.\n+pub fn test() {\n+}\n+\n+// bti: !\"branch-target-enforcement\", i32 1\n+// bti: !\"sign-return-address\", i32 0\n+// bti: !\"sign-return-address-all\", i32 0\n+// bti: !\"sign-return-address-with-bkey\", i32 0\n+\n+// pac-ret: !\"branch-target-enforcement\", i32 0\n+// pac-ret: !\"sign-return-address\", i32 1\n+// pac-ret: !\"sign-return-address-all\", i32 0\n+// pac-ret: !\"sign-return-address-with-bkey\", i32 0\n+\n+// leaf: !\"branch-target-enforcement\", i32 0\n+// leaf: !\"sign-return-address\", i32 1\n+// leaf: !\"sign-return-address-all\", i32 1\n+// leaf: !\"sign-return-address-with-bkey\", i32 0\n+\n+// b-key: !\"branch-target-enforcement\", i32 0\n+// b-key: !\"sign-return-address\", i32 1\n+// b-key: !\"sign-return-address-all\", i32 0\n+// b-key: !\"sign-return-address-with-bkey\", i32 1"}, {"sha": "36d0f0e5a19e027cc81606b14982dfdb8b5b5f90", "filename": "src/test/run-make-fulldeps/pointer-auth-link-with-c/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2FMakefile?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# only-aarch64\n+\n+all:\n+\t$(COMPILE_OBJ) $(TMPDIR)/test.o test.c\n+\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n+\t$(RUSTC) -C branch-protection=bti+pac-ret+leaf test.rs\n+\t$(call RUN,test)\n+\n+\t$(COMPILE_OBJ) $(TMPDIR)/test.o test.c -mbranch-protection=bti+pac-ret+leaf\n+\t$(AR) rcs $(TMPDIR)/libtest.a $(TMPDIR)/test.o\n+\t$(RUSTC) -C branch-protection=bti+pac-ret+leaf test.rs\n+\t$(call RUN,test)\n\\ No newline at end of file"}, {"sha": "9fe07f82f9ed1495b13e4e4dcd2e092115b01b25", "filename": "src/test/run-make-fulldeps/pointer-auth-link-with-c/test.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.c?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -0,0 +1 @@\n+int foo() { return 0; }"}, {"sha": "615ad0aeb3d0e52c2030dc082a074bc96180027a", "filename": "src/test/run-make-fulldeps/pointer-auth-link-with-c/test.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpointer-auth-link-with-c%2Ftest.rs?ref=837cc1687f7c0d35a4e90a2f6bee377b5a2ecfd5", "patch": "@@ -0,0 +1,8 @@\n+#[link(name = \"test\")]\n+extern \"C\" {\n+    fn foo() -> i32;\n+}\n+\n+fn main() {\n+    unsafe {foo();}\n+}"}]}