{"sha": "97d0d8964ecda2830d60f0c46c1ad8de24af539c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDBkODk2NGVjZGEyODMwZDYwZjBjNDZjMWFkOGRlMjRhZjUzOWM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-15T10:04:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-15T10:04:36Z"}, "message": "Rollup merge of #55778 - nnethercote:LrcPreds, r=eddyb\n\nWrap some query results in `Lrc`.\n\nSo that the frequent clones in `try_get` are cheaper.", "tree": {"sha": "7d2b9f2920d26bbe71902f3d52efed3ddf65dfda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d2b9f2920d26bbe71902f3d52efed3ddf65dfda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d0d8964ecda2830d60f0c46c1ad8de24af539c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb7US0CRBK7hj4Ov3rIwAAdHIIAJDXoPrTN8LmMRIHD5cghwr/\nEGmPGHwUxz/4G0UHN7s31CgFI67pCok14oqiesSG4KNxOLDMox1L3NAu5XUm9juW\ndh1000eGbFRRS0MK8jecDIJ3LLrrmhZVk345RLkPrNkWnstL+XK6kJZ2dGtRRSrS\nTJPi0HZrQfEIV3L9DZDhG1S9vrAclDzzkgBfspn6cqzXgczif4/Sncv+TLkQxAvR\nmCtexIDvl7Ar+LXYO0HRURRA1BuDU6C3SZ/UNb3y9XKCae6zO/IjaWQjM2W+DE52\neffbObEn4D50YsY1SC8Y307Wqqdp/C9aj50XzSqE0mXUiP3P4IYchmh9aknqf4E=\n=kL4+\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d2b9f2920d26bbe71902f3d52efed3ddf65dfda\nparent 1d5829d87f84138276a29058bf35291d5f64275a\nparent 98dab3335f8355f8a313d09e0dfe0b8ef9412b35\nauthor Pietro Albini <pietro@pietroalbini.org> 1542276276 +0100\ncommitter GitHub <noreply@github.com> 1542276276 +0100\n\nRollup merge of #55778 - nnethercote:LrcPreds, r=eddyb\n\nWrap some query results in `Lrc`.\n\nSo that the frequent clones in `try_get` are cheaper.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d0d8964ecda2830d60f0c46c1ad8de24af539c", "html_url": "https://github.com/rust-lang/rust/commit/97d0d8964ecda2830d60f0c46c1ad8de24af539c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d0d8964ecda2830d60f0c46c1ad8de24af539c/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d5829d87f84138276a29058bf35291d5f64275a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d5829d87f84138276a29058bf35291d5f64275a", "html_url": "https://github.com/rust-lang/rust/commit/1d5829d87f84138276a29058bf35291d5f64275a"}, {"sha": "98dab3335f8355f8a313d09e0dfe0b8ef9412b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/98dab3335f8355f8a313d09e0dfe0b8ef9412b35", "html_url": "https://github.com/rust-lang/rust/commit/98dab3335f8355f8a313d09e0dfe0b8ef9412b35"}], "stats": {"total": 142, "additions": 73, "deletions": 69}, "files": [{"sha": "5fee04341b676e97c4913aef1609a5b658dfcffc", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -299,8 +299,8 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         let assoc_item = tcx.associated_item(assoc_item_def_id);\n         let trait_def_id = assoc_item.container.assert_trait();\n         let trait_predicates = tcx.predicates_of(trait_def_id).predicates\n-            .into_iter()\n-            .map(|(p, _)| p)\n+            .iter()\n+            .map(|(p, _)| *p)\n             .collect();\n         let identity_substs = Substs::identity_for_item(tcx, assoc_item_def_id);\n         let identity_proj = tcx.mk_projection(assoc_item_def_id, identity_substs);"}, {"sha": "715ce0d7e805bf7f2623fddb64da2d9e7acdb245", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -182,7 +182,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         };\n         predicates\n             .predicates\n-            .into_iter()\n+            .iter()\n             .map(|(predicate, _)| predicate.subst_supertrait(self, &trait_ref))\n             .any(|predicate| {\n                 match predicate {\n@@ -302,9 +302,10 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             return Some(MethodViolationCode::Generic);\n         }\n \n-        if self.predicates_of(method.def_id).predicates.into_iter()\n+        if self.predicates_of(method.def_id).predicates.iter()\n                 // A trait object can't claim to live more than the concrete type,\n                 // so outlives predicates will always hold.\n+                .cloned()\n                 .filter(|(p, _)| p.to_opt_type_outlives().is_none())\n                 .collect::<Vec<_>>()\n                 // Do a shallow visit so that `contains_illegal_self_type_reference`"}, {"sha": "d3dc1655b0df2e592c9df568de11983c61b3f2eb", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -407,7 +407,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_, '_, '_>, impl_def_id: DefId) -> Option<\n \n     // The predicates will contain default bounds like `T: Sized`. We need to\n     // remove these bounds, and add `T: ?Sized` to any untouched type parameters.\n-    let predicates = tcx.predicates_of(impl_def_id).predicates;\n+    let predicates = &tcx.predicates_of(impl_def_id).predicates;\n     let mut pretty_predicates = Vec::with_capacity(\n         predicates.len() + types_without_default_bounds.len());\n "}, {"sha": "d3a8d3e5ba74ec819ec344652f157ee6eef8c175", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -2130,7 +2130,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     }\n \n     #[inline]\n-    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> GenericPredicates<'gcx> {\n+    pub fn predicates(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Lrc<GenericPredicates<'gcx>> {\n         tcx.predicates_of(self.did)\n     }\n \n@@ -2373,8 +2373,8 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     def_id: sized_trait,\n                     substs: tcx.mk_substs_trait(ty, &[])\n                 }).to_predicate();\n-                let predicates = tcx.predicates_of(self.did).predicates;\n-                if predicates.into_iter().any(|(p, _)| p == sized_predicate) {\n+                let predicates = &tcx.predicates_of(self.did).predicates;\n+                if predicates.iter().any(|(p, _)| *p == sized_predicate) {\n                     vec![]\n                 } else {\n                     vec![ty]"}, {"sha": "89e7f4db502bb73138e73cdc1a23e0733d298dfe", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -127,17 +127,18 @@ define_queries! { <'tcx>\n         /// predicate gets in the way of some checks, which are intended\n         /// to operate over only the actual where-clauses written by the\n         /// user.)\n-        [] fn predicates_of: PredicatesOfItem(DefId) -> ty::GenericPredicates<'tcx>,\n+        [] fn predicates_of: PredicatesOfItem(DefId) -> Lrc<ty::GenericPredicates<'tcx>>,\n \n         /// Maps from the def-id of an item (trait/struct/enum/fn) to the\n         /// predicates (where clauses) directly defined on it. This is\n         /// equal to the `explicit_predicates_of` predicates plus the\n         /// `inferred_outlives_of` predicates.\n-        [] fn predicates_defined_on: PredicatesDefinedOnItem(DefId) -> ty::GenericPredicates<'tcx>,\n+        [] fn predicates_defined_on: PredicatesDefinedOnItem(DefId)\n+            -> Lrc<ty::GenericPredicates<'tcx>>,\n \n         /// Returns the predicates written explicit by the user.\n         [] fn explicit_predicates_of: ExplicitPredicatesOfItem(DefId)\n-            -> ty::GenericPredicates<'tcx>,\n+            -> Lrc<ty::GenericPredicates<'tcx>>,\n \n         /// Returns the inferred outlives predicates (e.g., for `struct\n         /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n@@ -149,12 +150,12 @@ define_queries! { <'tcx>\n         /// evaluate them even during type conversion, often before the\n         /// full predicates are available (note that supertraits have\n         /// additional acyclicity requirements).\n-        [] fn super_predicates_of: SuperPredicatesOfItem(DefId) -> ty::GenericPredicates<'tcx>,\n+        [] fn super_predicates_of: SuperPredicatesOfItem(DefId) -> Lrc<ty::GenericPredicates<'tcx>>,\n \n         /// To avoid cycles within the predicates of a single item we compute\n         /// per-type-parameter predicates for resolving `T::AssocTy`.\n         [] fn type_param_predicates: type_param_predicates((DefId, DefId))\n-            -> ty::GenericPredicates<'tcx>,\n+            -> Lrc<ty::GenericPredicates<'tcx>>,\n \n         [] fn trait_def: TraitDefOfItem(DefId) -> &'tcx ty::TraitDef,\n         [] fn adt_def: AdtDefOfItem(DefId) -> &'tcx ty::AdtDef,"}, {"sha": "e1d9ca5339e6a4201114ff324a10e79346db6e04", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -103,9 +103,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generics_of => {\n         tcx.alloc_generics(cdata.get_generics(def_id.index, tcx.sess))\n     }\n-    predicates_of => { cdata.get_predicates(def_id.index, tcx) }\n-    predicates_defined_on => { cdata.get_predicates_defined_on(def_id.index, tcx) }\n-    super_predicates_of => { cdata.get_super_predicates(def_id.index, tcx) }\n+    predicates_of => { Lrc::new(cdata.get_predicates(def_id.index, tcx)) }\n+    predicates_defined_on => { Lrc::new(cdata.get_predicates_defined_on(def_id.index, tcx)) }\n+    super_predicates_of => { Lrc::new(cdata.get_super_predicates(def_id.index, tcx)) }\n     trait_def => {\n         tcx.alloc_trait_def(cdata.get_trait_def(def_id.index, tcx.sess))\n     }"}, {"sha": "cf1bc04dd4e01dd92b17dd25f2e7f918b7c40dda", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -217,8 +217,9 @@ fn program_clauses_for_trait<'a, 'tcx>(\n \n     let implemented_from_env = Clause::ForAll(ty::Binder::bind(implemented_from_env));\n \n-    let where_clauses = &tcx.predicates_defined_on(def_id).predicates\n-        .into_iter()\n+    let predicates = &tcx.predicates_defined_on(def_id).predicates;\n+    let where_clauses = &predicates\n+        .iter()\n         .map(|(wc, _)| wc.lower())\n         .map(|wc| wc.subst(tcx, bound_vars))\n         .collect::<Vec<_>>();\n@@ -314,8 +315,9 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     let trait_pred = ty::TraitPredicate { trait_ref }.lower();\n \n     // `WC`\n-    let where_clauses = tcx.predicates_of(def_id).predicates\n-        .into_iter()\n+    let predicates = &tcx.predicates_of(def_id).predicates;\n+    let where_clauses = predicates\n+        .iter()\n         .map(|(wc, _)| wc.lower())\n         .map(|wc| wc.subst(tcx, bound_vars));\n \n@@ -352,7 +354,7 @@ pub fn program_clauses_for_type_def<'a, 'tcx>(\n \n     // `WC`\n     let where_clauses = tcx.predicates_of(def_id).predicates\n-        .into_iter()\n+        .iter()\n         .map(|(wc, _)| wc.lower())\n         .map(|wc| wc.subst(tcx, bound_vars))\n         .collect::<Vec<_>>();"}, {"sha": "d388d75643888ea76908fa8bcdec68f1a672b68b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -24,6 +24,7 @@ use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n use rustc::ty::wf::object_region_bounds;\n+use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n use std::collections::BTreeSet;\n use std::slice;\n@@ -45,7 +46,7 @@ pub trait AstConv<'gcx, 'tcx> {\n     /// Returns the set of bounds in scope for the type parameter with\n     /// the given id.\n     fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n-                                 -> ty::GenericPredicates<'tcx>;\n+                                 -> Lrc<ty::GenericPredicates<'tcx>>;\n \n     /// What lifetime should we use when a lifetime is omitted (and not elided)?\n     fn re_infer(&self, span: Span, _def: Option<&ty::GenericParamDef>)\n@@ -1119,8 +1120,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n     {\n         let tcx = self.tcx();\n \n-        let bounds = self.get_type_parameter_bounds(span, ty_param_def_id)\n-            .predicates.into_iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref());\n+        let predicates = &self.get_type_parameter_bounds(span, ty_param_def_id).predicates;\n+        let bounds = predicates.iter().filter_map(|(p, _)| p.to_opt_poly_trait_ref());\n \n         // Check that there is exactly one way to find an associated type with the\n         // correct name."}, {"sha": "eed5d909063bd9dd7af8fc32594cf48b73dfc7e7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -1869,15 +1869,15 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.tcx }\n \n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId)\n-                                 -> ty::GenericPredicates<'tcx>\n+                                 -> Lrc<ty::GenericPredicates<'tcx>>\n     {\n         let tcx = self.tcx;\n         let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n         let item_id = tcx.hir.ty_param_owner(node_id);\n         let item_def_id = tcx.hir.local_def_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n         let index = generics.param_def_id_to_index[&def_id];\n-        ty::GenericPredicates {\n+        Lrc::new(ty::GenericPredicates {\n             parent: None,\n             predicates: self.param_env.caller_bounds.iter().filter_map(|&predicate| {\n                 match predicate {\n@@ -1890,7 +1890,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n                     _ => None\n                 }\n             }).collect()\n-        }\n+        })\n     }\n \n     fn re_infer(&self, span: Span, def: Option<&ty::GenericParamDef>)"}, {"sha": "b5addbd18d2a4e20f1e58b2e5c18420905dfdf7b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -910,8 +910,8 @@ fn check_false_global_bounds<'a, 'gcx, 'tcx>(\n \n     let def_id = fcx.tcx.hir.local_def_id(id);\n     let predicates = fcx.tcx.predicates_of(def_id).predicates\n-        .into_iter()\n-        .map(|(p, _)| p)\n+        .iter()\n+        .map(|(p, _)| *p)\n         .collect();\n     // Check elaborated bounds\n     let implied_obligations = traits::elaborate_predicates(fcx.tcx, predicates);"}, {"sha": "6ef09d96fd1537f161286bd734a498c67ae2db3e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 33, "deletions": 34, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -39,6 +39,7 @@ use rustc::ty::{self, AdtKind, ToPolyTraitRef, Ty, TyCtxt};\n use rustc::ty::{ReprOptions, ToPredicate};\n use rustc::util::captures::Captures;\n use rustc::util::nodemap::FxHashMap;\n+use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n \n use syntax::ast;\n@@ -178,7 +179,8 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n+    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n+                                 -> Lrc<ty::GenericPredicates<'tcx>> {\n         self.tcx\n             .at(span)\n             .type_param_predicates((self.item_def_id, def_id))\n@@ -243,7 +245,7 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n fn type_param_predicates<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     (item_def_id, def_id): (DefId, DefId),\n-) -> ty::GenericPredicates<'tcx> {\n+) -> Lrc<ty::GenericPredicates<'tcx>> {\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n@@ -264,11 +266,11 @@ fn type_param_predicates<'a, 'tcx>(\n         tcx.generics_of(item_def_id).parent\n     };\n \n-    let mut result = parent.map_or(\n-        ty::GenericPredicates {\n+    let mut result = parent.map_or_else(\n+        || Lrc::new(ty::GenericPredicates {\n             parent: None,\n             predicates: vec![],\n-        },\n+        }),\n         |parent| {\n             let icx = ItemCtxt::new(tcx, parent);\n             icx.get_type_parameter_bounds(DUMMY_SP, def_id)\n@@ -298,7 +300,7 @@ fn type_param_predicates<'a, 'tcx>(\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_node_id {\n                         let identity_trait_ref = ty::TraitRef::identity(tcx, item_def_id);\n-                        result\n+                        Lrc::make_mut(&mut result)\n                             .predicates\n                             .push((identity_trait_ref.to_predicate(), item.span));\n                     }\n@@ -317,7 +319,7 @@ fn type_param_predicates<'a, 'tcx>(\n     };\n \n     let icx = ItemCtxt::new(tcx, item_def_id);\n-    result\n+    Lrc::make_mut(&mut result)\n         .predicates\n         .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty,\n             OnlySelfBounds(true)));\n@@ -685,7 +687,7 @@ fn adt_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::Ad\n fn super_predicates_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     trait_def_id: DefId,\n-) -> ty::GenericPredicates<'tcx> {\n+) -> Lrc<ty::GenericPredicates<'tcx>> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_node_id = tcx.hir.as_local_node_id(trait_def_id).unwrap();\n \n@@ -729,10 +731,10 @@ fn super_predicates_of<'a, 'tcx>(\n         }\n     }\n \n-    ty::GenericPredicates {\n+    Lrc::new(ty::GenericPredicates {\n         parent: None,\n         predicates: superbounds,\n-    }\n+    })\n }\n \n fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n@@ -1605,27 +1607,23 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n fn predicates_defined_on<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> ty::GenericPredicates<'tcx> {\n-    let explicit = tcx.explicit_predicates_of(def_id);\n-    let span = tcx.def_span(def_id);\n-    let predicates = explicit.predicates.into_iter().chain(\n-        tcx.inferred_outlives_of(def_id).iter().map(|&p| (p, span))\n-    ).collect();\n-\n-    ty::GenericPredicates {\n-        parent: explicit.parent,\n-        predicates: predicates,\n+) -> Lrc<ty::GenericPredicates<'tcx>> {\n+    let mut result = tcx.explicit_predicates_of(def_id);\n+    let inferred_outlives = tcx.inferred_outlives_of(def_id);\n+    if !inferred_outlives.is_empty() {\n+        let span = tcx.def_span(def_id);\n+        Lrc::make_mut(&mut result)\n+            .predicates\n+            .extend(inferred_outlives.iter().map(|&p| (p, span)));\n     }\n+    result\n }\n \n fn predicates_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> ty::GenericPredicates<'tcx> {\n-    let ty::GenericPredicates {\n-        parent,\n-        mut predicates,\n-    } = tcx.predicates_defined_on(def_id);\n+) -> Lrc<ty::GenericPredicates<'tcx>> {\n+    let mut result = tcx.predicates_defined_on(def_id);\n \n     if tcx.is_trait(def_id) {\n         // For traits, add `Self: Trait` predicate. This is\n@@ -1641,16 +1639,17 @@ fn predicates_of<'a, 'tcx>(\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n         let span = tcx.def_span(def_id);\n-        predicates.push((ty::TraitRef::identity(tcx, def_id).to_predicate(), span));\n+        Lrc::make_mut(&mut result)\n+            .predicates\n+            .push((ty::TraitRef::identity(tcx, def_id).to_predicate(), span));\n     }\n-\n-    ty::GenericPredicates { parent, predicates }\n+    result\n }\n \n fn explicit_predicates_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> ty::GenericPredicates<'tcx> {\n+) -> Lrc<ty::GenericPredicates<'tcx>> {\n     use rustc::hir::*;\n     use rustc_data_structures::fx::FxHashSet;\n \n@@ -1761,10 +1760,10 @@ fn explicit_predicates_of<'a, 'tcx>(\n \n                     if impl_trait_fn.is_some() {\n                         // impl Trait\n-                        return ty::GenericPredicates {\n+                        return Lrc::new(ty::GenericPredicates {\n                             parent: None,\n                             predicates: bounds.predicates(tcx, opaque_ty),\n-                        };\n+                        });\n                     } else {\n                         // named existential types\n                         predicates.extend(bounds.predicates(tcx, opaque_ty));\n@@ -1794,7 +1793,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     // on a trait we need to add in the supertrait bounds and bounds found on\n     // associated types.\n     if let Some((_trait_ref, _)) = is_trait {\n-        predicates.extend(tcx.super_predicates_of(def_id).predicates);\n+        predicates.extend(tcx.super_predicates_of(def_id).predicates.iter().cloned());\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -1971,10 +1970,10 @@ fn explicit_predicates_of<'a, 'tcx>(\n         );\n     }\n \n-    ty::GenericPredicates {\n+    Lrc::new(ty::GenericPredicates {\n         parent: generics.parent,\n         predicates,\n-    }\n+    })\n }\n \n pub enum SizedByDefault {"}, {"sha": "9b374cf932fa9ad35352304aa1c5506315dd8b83", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -33,14 +33,14 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n     ) -> &RequiredPredicates<'tcx> {\n         self.map.entry(def_id).or_insert_with(|| {\n             let predicates = if def_id.is_local() {\n-                tcx.explicit_predicates_of(def_id).predicates\n+                tcx.explicit_predicates_of(def_id)\n             } else {\n-                tcx.predicates_of(def_id).predicates\n+                tcx.predicates_of(def_id)\n             };\n             let mut required_predicates = RequiredPredicates::default();\n \n             // process predicates and convert to `RequiredPredicates` entry, see below\n-            for (pred, _) in predicates.into_iter() {\n+            for (pred, _) in predicates.predicates.iter() {\n                 match pred {\n                     ty::Predicate::TypeOutlives(predicate) => {\n                         let OutlivesPredicate(ref ty, ref reg) = predicate.skip_binder();"}, {"sha": "0518d73e1e30f7e26f2c81634d221a9d2a7475d0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -1563,7 +1563,7 @@ impl Clean<Generics> for hir::Generics {\n }\n \n impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n-                                    &'a ty::GenericPredicates<'tcx>) {\n+                                    &'a Lrc<ty::GenericPredicates<'tcx>>) {\n     fn clean(&self, cx: &DocContext) -> Generics {\n         use self::WherePredicate as WP;\n "}, {"sha": "635608d140db48d86ecdb70f3be4753f810401ff", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d0d8964ecda2830d60f0c46c1ad8de24af539c/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=97d0d8964ecda2830d60f0c46c1ad8de24af539c", "patch": "@@ -156,8 +156,8 @@ fn trait_is_same_or_supertrait(cx: &DocContext, child: DefId,\n     if child == trait_ {\n         return true\n     }\n-    let predicates = cx.tcx.super_predicates_of(child).predicates;\n-    predicates.iter().filter_map(|(pred, _)| {\n+    let predicates = cx.tcx.super_predicates_of(child);\n+    predicates.predicates.iter().filter_map(|(pred, _)| {\n         if let ty::Predicate::Trait(ref pred) = *pred {\n             if pred.skip_binder().trait_ref.self_ty().is_self() {\n                 Some(pred.def_id())"}]}