{"sha": "88fade54e163f899befc7d5ec09ce5f17fe57555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZmFkZTU0ZTE2M2Y4OTliZWZjN2Q1ZWMwOWNlNWYxN2ZlNTc1NTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-28T06:00:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-10-28T06:00:19Z"}, "message": "Auto merge of #29398 - jonas-schievink:if-let-arms, r=arielb1\n\nCloses #29314\r\n\r\nThe code from #29314:\r\n```rust\r\nfn main() {\r\n    if let Some(b) = None {\r\n        ()\r\n    } else {\r\n        1\r\n    };\r\n}\r\n```\r\nnow prints this:\r\n```\r\ntest.rs:2:5: 6:6 error: `if let` arms have incompatible types: expected `()`, found `_` (expected (), found integral variable) [E0308]\r\ntest.rs:2     if let Some(b) = None {\r\ntest.rs:3         ()\r\ntest.rs:4     } else {\r\ntest.rs:5         1\r\ntest.rs:6     };\r\ntest.rs:2:5: 6:6 help: run `rustc --explain E0308` to see a detailed explanation\r\ntest.rs:4:12: 6:6 note: `if let` arm with an incompatible type\r\ntest.rs:4     } else {\r\ntest.rs:5         1\r\ntest.rs:6     };\r\nerror: aborting due to previous error\r\n```", "tree": {"sha": "baadcf9e6c04d2209f7cf1c36e97ea49e48286d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baadcf9e6c04d2209f7cf1c36e97ea49e48286d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88fade54e163f899befc7d5ec09ce5f17fe57555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88fade54e163f899befc7d5ec09ce5f17fe57555", "html_url": "https://github.com/rust-lang/rust/commit/88fade54e163f899befc7d5ec09ce5f17fe57555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88fade54e163f899befc7d5ec09ce5f17fe57555/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8974297b4a533cc6e04a1a6f0b32f2fe9e481d78", "url": "https://api.github.com/repos/rust-lang/rust/commits/8974297b4a533cc6e04a1a6f0b32f2fe9e481d78", "html_url": "https://github.com/rust-lang/rust/commit/8974297b4a533cc6e04a1a6f0b32f2fe9e481d78"}, {"sha": "2560646d9114c76b719fdf853864f5b8d9874f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2560646d9114c76b719fdf853864f5b8d9874f2b", "html_url": "https://github.com/rust-lang/rust/commit/2560646d9114c76b719fdf853864f5b8d9874f2b"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "38c7ddc4a3def55ee2fe0044e3f7d53539b68a8a", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=88fade54e163f899befc7d5ec09ce5f17fe57555", "patch": "@@ -491,8 +491,11 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n         self.check_and_note_conflicting_crates(terr, trace.origin.span());\n \n         match trace.origin {\n-            infer::MatchExpressionArm(_, arm_span) =>\n-                self.tcx.sess.span_note(arm_span, \"match arm with an incompatible type\"),\n+            infer::MatchExpressionArm(_, arm_span, source) => match source {\n+                hir::MatchSource::IfLetDesugar{..} =>\n+                    self.tcx.sess.span_note(arm_span, \"`if let` arm with an incompatible type\"),\n+                _ => self.tcx.sess.span_note(arm_span, \"match arm with an incompatible type\"),\n+            },\n             _ => ()\n         }\n     }\n@@ -1659,7 +1662,7 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                         \"trait type parameters matches those \\\n                                  specified on the impl\"\n                     }\n-                    infer::MatchExpressionArm(_, _) => {\n+                    infer::MatchExpressionArm(_, _, _) => {\n                         \"match arms have compatible types\"\n                     }\n                     infer::IfExpression(_) => {"}, {"sha": "f80c486f237b1dfcef88148afc32e1605620c48c", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=88fade54e163f899befc7d5ec09ce5f17fe57555", "patch": "@@ -135,7 +135,7 @@ pub enum TypeOrigin {\n     RelateOutputImplTypes(Span),\n \n     // Computing common supertype in the arms of a match expression\n-    MatchExpressionArm(Span, Span),\n+    MatchExpressionArm(Span, Span, hir::MatchSource),\n \n     // Computing common supertype in an if expression\n     IfExpression(Span),\n@@ -159,7 +159,10 @@ impl TypeOrigin {\n             &TypeOrigin::ExprAssignable(_) => \"mismatched types\",\n             &TypeOrigin::RelateTraitRefs(_) => \"mismatched traits\",\n             &TypeOrigin::MethodCompatCheck(_) => \"method not compatible with trait\",\n-            &TypeOrigin::MatchExpressionArm(_, _) => \"match arms have incompatible types\",\n+            &TypeOrigin::MatchExpressionArm(_, _, source) => match source {\n+                hir::MatchSource::IfLetDesugar{..} => \"`if let` arms have incompatible types\",\n+                _ => \"match arms have incompatible types\",\n+            },\n             &TypeOrigin::IfExpression(_) => \"if and else have incompatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n             &TypeOrigin::RangeExpression(_) => \"start and end of range have incompatible types\",\n@@ -1534,7 +1537,7 @@ impl TypeOrigin {\n             RelateTraitRefs(span) => span,\n             RelateSelfType(span) => span,\n             RelateOutputImplTypes(span) => span,\n-            MatchExpressionArm(match_span, _) => match_span,\n+            MatchExpressionArm(match_span, _, _) => match_span,\n             IfExpression(span) => span,\n             IfExpressionWithNoElse(span) => span,\n             RangeExpression(span) => span,"}, {"sha": "dc6a209d4fca67af3630ddc1c59b68bc09e91bf3", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=88fade54e163f899befc7d5ec09ce5f17fe57555", "patch": "@@ -499,7 +499,7 @@ pub fn check_match<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                     result_ty,\n                 ),\n                 _ => (\n-                    infer::MatchExpressionArm(expr.span, arm.body.span),\n+                    infer::MatchExpressionArm(expr.span, arm.body.span, match_src),\n                     result_ty,\n                     bty,\n                 ),"}, {"sha": "d179ec015d23122175cb1b3a065f1f3efcc18db8", "filename": "src/test/compile-fail/if-let-arm-types.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fade54e163f899befc7d5ec09ce5f17fe57555/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs?ref=88fade54e163f899befc7d5ec09ce5f17fe57555", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n+        ()\n+    } else {                //~ NOTE: `if let` arm with an incompatible type\n+        1\n+    };\n+}"}]}