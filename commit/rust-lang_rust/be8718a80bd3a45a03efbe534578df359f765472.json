{"sha": "be8718a80bd3a45a03efbe534578df359f765472", "node_id": "C_kwDOAAsO6NoAKGJlODcxOGE4MGJkM2E0NWEwM2VmYmU1MzQ1NzhkZjM1OWY3NjU0NzI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-15T08:58:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-15T08:58:40Z"}, "message": "Rollup merge of #111547 - tmiasko:immediate-dominator, r=cjgillot\n\nStart node has no immediate dominator\n\nChange the immediate_dominator return type to Option, and use None to\nindicate that node has no immediate dominator.\n\nAlso fix the issue where the start node would be returned as its own\nimmediate dominator.", "tree": {"sha": "dd1ea301b9cbf56699e095697957480ee437bcd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd1ea301b9cbf56699e095697957480ee437bcd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be8718a80bd3a45a03efbe534578df359f765472", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkYfRACRBK7hj4Ov3rIwAA1msIAE3WdK7TITA8U79AUrX4gYzQ\nsvZZMoMcLwWCAaIHX/LdyQqgSNg2YSgvpnpTc8AizIhrE7iC2Sb3TKT7a1k+0J/l\njML5Q5S1jw7Qeq0ek4Qrq35GE0KYnCKdImOWsMarVrYM3CeEV0qNJMY5esBBHMFH\nP31ZGZVdFl9lPKaxtLS0PajgYO3n96HocND93J7r/J2bbD6BSd4oMFCZnEnIJts0\nOoVwfQsQGNXEPp7mNF63Y2ysRpYsIFAlkP78G8MkZ0rXjgOw3wltS9FWhFiPPEKR\ngpN8Te8qucywdCAZMJ5CMeBRxlP6hMRpbcVNdxZ9UBue9PspyqG05UAWgTS80cc=\n=c7db\n-----END PGP SIGNATURE-----\n", "payload": "tree dd1ea301b9cbf56699e095697957480ee437bcd4\nparent 7a1f3e7a8839b9872a5c0e5cbd895269ef3e00de\nparent f16d2b1629d62db306bd9d03676524dc848c94b4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1684141120 +0200\ncommitter GitHub <noreply@github.com> 1684141120 +0200\n\nRollup merge of #111547 - tmiasko:immediate-dominator, r=cjgillot\n\nStart node has no immediate dominator\n\nChange the immediate_dominator return type to Option, and use None to\nindicate that node has no immediate dominator.\n\nAlso fix the issue where the start node would be returned as its own\nimmediate dominator.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be8718a80bd3a45a03efbe534578df359f765472", "html_url": "https://github.com/rust-lang/rust/commit/be8718a80bd3a45a03efbe534578df359f765472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be8718a80bd3a45a03efbe534578df359f765472/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a1f3e7a8839b9872a5c0e5cbd895269ef3e00de", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1f3e7a8839b9872a5c0e5cbd895269ef3e00de", "html_url": "https://github.com/rust-lang/rust/commit/7a1f3e7a8839b9872a5c0e5cbd895269ef3e00de"}, {"sha": "f16d2b1629d62db306bd9d03676524dc848c94b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16d2b1629d62db306bd9d03676524dc848c94b4", "html_url": "https://github.com/rust-lang/rust/commit/f16d2b1629d62db306bd9d03676524dc848c94b4"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "3c350e25ba6ec066ad1fad4938ce150e97894fda", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be8718a80bd3a45a03efbe534578df359f765472/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8718a80bd3a45a03efbe534578df359f765472/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=be8718a80bd3a45a03efbe534578df359f765472", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 if let Some(root) = post_contract_node.get(&bb) {\n                     break *root;\n                 }\n-                let parent = doms.immediate_dominator(bb);\n+                let parent = doms.immediate_dominator(bb).unwrap();\n                 dom_path.push(bb);\n                 if !self.body.basic_blocks[parent].is_cleanup {\n                     break bb;"}, {"sha": "a7de709ba72bf677d3feddfaf5fe9e650db129b2", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/be8718a80bd3a45a03efbe534578df359f765472/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8718a80bd3a45a03efbe534578df359f765472/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=be8718a80bd3a45a03efbe534578df359f765472", "patch": "@@ -242,7 +242,9 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n         immediate_dominators[*node] = Some(pre_order_to_real[idom[idx]]);\n     }\n \n-    Dominators { post_order_rank, immediate_dominators }\n+    let start_node = graph.start_node();\n+    immediate_dominators[start_node] = None;\n+    Dominators { start_node, post_order_rank, immediate_dominators }\n }\n \n /// Evaluate the link-eval virtual forest, providing the currently minimum semi\n@@ -308,6 +310,7 @@ fn compress(\n /// Tracks the list of dominators for each node.\n #[derive(Clone, Debug)]\n pub struct Dominators<N: Idx> {\n+    start_node: N,\n     post_order_rank: IndexVec<N, usize>,\n     // Even though we track only the immediate dominator of each node, it's\n     // possible to get its full list of dominators by looking up the dominator\n@@ -316,14 +319,14 @@ pub struct Dominators<N: Idx> {\n }\n \n impl<Node: Idx> Dominators<Node> {\n-    /// Whether the given Node has an immediate dominator.\n+    /// Returns true if node is reachable from the start node.\n     pub fn is_reachable(&self, node: Node) -> bool {\n-        self.immediate_dominators[node].is_some()\n+        node == self.start_node || self.immediate_dominators[node].is_some()\n     }\n \n-    pub fn immediate_dominator(&self, node: Node) -> Node {\n-        assert!(self.is_reachable(node), \"node {node:?} is not reachable\");\n-        self.immediate_dominators[node].unwrap()\n+    /// Returns the immediate dominator of node, if any.\n+    pub fn immediate_dominator(&self, node: Node) -> Option<Node> {\n+        self.immediate_dominators[node]\n     }\n \n     /// Provides an iterator over each dominator up the CFG, for the given Node.\n@@ -357,12 +360,7 @@ impl<'dom, Node: Idx> Iterator for Iter<'dom, Node> {\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if let Some(node) = self.node {\n-            let dom = self.dominators.immediate_dominator(node);\n-            if dom == node {\n-                self.node = None; // reached the root\n-            } else {\n-                self.node = Some(dom);\n-            }\n+            self.node = self.dominators.immediate_dominator(node);\n             Some(node)\n         } else {\n             None"}, {"sha": "8b124516623d60bbe44e253e5a205f965e5a2753", "filename": "compiler/rustc_data_structures/src/graph/dominators/tests.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be8718a80bd3a45a03efbe534578df359f765472/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be8718a80bd3a45a03efbe534578df359f765472/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Ftests.rs?ref=be8718a80bd3a45a03efbe534578df359f765472", "patch": "@@ -8,7 +8,7 @@ fn diamond() {\n \n     let dominators = dominators(&graph);\n     let immediate_dominators = &dominators.immediate_dominators;\n-    assert_eq!(immediate_dominators[0], Some(0));\n+    assert_eq!(immediate_dominators[0], None);\n     assert_eq!(immediate_dominators[1], Some(0));\n     assert_eq!(immediate_dominators[2], Some(0));\n     assert_eq!(immediate_dominators[3], Some(0));\n@@ -30,7 +30,7 @@ fn paper() {\n     assert_eq!(immediate_dominators[3], Some(6));\n     assert_eq!(immediate_dominators[4], Some(6));\n     assert_eq!(immediate_dominators[5], Some(6));\n-    assert_eq!(immediate_dominators[6], Some(6));\n+    assert_eq!(immediate_dominators[6], None);\n }\n \n #[test]\n@@ -43,3 +43,13 @@ fn paper_slt() {\n \n     dominators(&graph);\n }\n+\n+#[test]\n+fn immediate_dominator() {\n+    let graph = TestGraph::new(1, &[(1, 2), (2, 3)]);\n+    let dominators = dominators(&graph);\n+    assert_eq!(dominators.immediate_dominator(0), None);\n+    assert_eq!(dominators.immediate_dominator(1), None);\n+    assert_eq!(dominators.immediate_dominator(2), Some(1));\n+    assert_eq!(dominators.immediate_dominator(3), Some(2));\n+}"}]}