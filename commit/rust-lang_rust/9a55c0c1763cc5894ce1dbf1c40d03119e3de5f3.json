{"sha": "9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTVjMGMxNzYzY2M1ODk0Y2UxZGJmMWM0MGQwMzExOWUzZGU1ZjM=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-04-16T02:05:37Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-04-16T02:09:20Z"}, "message": "Fix `single_match`\nCheck for `PartialEq` in addition to `StructuralPartialEq` before suggesting `==`", "tree": {"sha": "4d8a6352b63fc85b92da4cd90914e69b3e30ad98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d8a6352b63fc85b92da4cd90914e69b3e30ad98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmB48eUACgkQ2lnoZDo37QYh8gD7BlwDQjJI+MACzc6jmAUP6qSk\nqh0QGBvcZb726DrqxeEA/Rcd0yduDiSnv3HCRjNywAWvS7BhCGDAu6KwrF5vJRcG\n=qWia\n-----END PGP SIGNATURE-----", "payload": "tree 4d8a6352b63fc85b92da4cd90914e69b3e30ad98\nparent 586a99348c6a6f5309e82b340193067b7d76e37c\nauthor Jason Newcomb <jsnewcomb@pm.me> 1618538737 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1618538960 -0400\n\nFix `single_match`\nCheck for `PartialEq` in addition to `StructuralPartialEq` before suggesting `==`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3", "html_url": "https://github.com/rust-lang/rust/commit/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "586a99348c6a6f5309e82b340193067b7d76e37c", "url": "https://api.github.com/repos/rust-lang/rust/commits/586a99348c6a6f5309e82b340193067b7d76e37c", "html_url": "https://github.com/rust-lang/rust/commit/586a99348c6a6f5309e82b340193067b7d76e37c"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "e4d1451b369182a976442445a42fbd26cdf1330d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3", "patch": "@@ -738,8 +738,11 @@ fn report_single_match_single_pattern(\n     let (msg, sugg) = if_chain! {\n         if let PatKind::Path(_) | PatKind::Lit(_) = pat.kind;\n         let (ty, ty_ref_count) = peel_mid_ty_refs(cx.typeck_results().expr_ty(ex));\n-        if let Some(trait_id) = cx.tcx.lang_items().structural_peq_trait();\n-        if ty.is_integral() || ty.is_char() || ty.is_str() || implements_trait(cx, ty, trait_id, &[]);\n+        if let Some(spe_trait_id) = cx.tcx.lang_items().structural_peq_trait();\n+        if let Some(pe_trait_id) = cx.tcx.lang_items().eq_trait();\n+        if ty.is_integral() || ty.is_char() || ty.is_str()\n+            || (implements_trait(cx, ty, spe_trait_id, &[])\n+                && implements_trait(cx, ty, pe_trait_id, &[ty.into()]));\n         then {\n             // scrutinee derives PartialEq and the pattern is a constant.\n             let pat_ref_count = match pat.kind {"}, {"sha": "b1819e08d53bf5dc9054e41cde25c580077082c5", "filename": "tests/ui/single_match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3", "patch": "@@ -135,6 +135,14 @@ fn if_suggestion() {\n         Bar::A => println!(),\n         _ => (),\n     }\n+\n+    // issue #7038\n+    struct X;\n+    let x = Some(X);\n+    match x {\n+        None => println!(),\n+        _ => (),\n+    };\n }\n \n macro_rules! single_match {"}, {"sha": "9ef2a8668a6faffdcb9e92757bc742b597e0db1a", "filename": "tests/ui/single_match.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3/tests%2Fui%2Fsingle_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3/tests%2Fui%2Fsingle_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.stderr?ref=9a55c0c1763cc5894ce1dbf1c40d03119e3de5f3", "patch": "@@ -119,5 +119,14 @@ LL | |         _ => (),\n LL | |     }\n    | |_____^ help: try this: `if let Bar::A = x { println!() }`\n \n-error: aborting due to 12 previous errors\n+error: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:142:5\n+   |\n+LL | /     match x {\n+LL | |         None => println!(),\n+LL | |         _ => (),\n+LL | |     };\n+   | |_____^ help: try this: `if let None = x { println!() }`\n+\n+error: aborting due to 13 previous errors\n "}]}