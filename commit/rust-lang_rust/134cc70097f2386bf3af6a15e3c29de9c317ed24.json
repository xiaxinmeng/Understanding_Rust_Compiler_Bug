{"sha": "134cc70097f2386bf3af6a15e3c29de9c317ed24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNGNjNzAwOTdmMjM4NmJmM2FmNmExNWUzYzI5ZGU5YzMxN2VkMjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-08T15:02:37Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-08T15:15:58Z"}, "message": "Docs cleanups", "tree": {"sha": "c012a1fb7f7e97a34ff65559c15413a179a59e60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c012a1fb7f7e97a34ff65559c15413a179a59e60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/134cc70097f2386bf3af6a15e3c29de9c317ed24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/134cc70097f2386bf3af6a15e3c29de9c317ed24", "html_url": "https://github.com/rust-lang/rust/commit/134cc70097f2386bf3af6a15e3c29de9c317ed24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/134cc70097f2386bf3af6a15e3c29de9c317ed24/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27ec6908793e3b1706d683dc2c2d367ac8fc061", "url": "https://api.github.com/repos/rust-lang/rust/commits/c27ec6908793e3b1706d683dc2c2d367ac8fc061", "html_url": "https://github.com/rust-lang/rust/commit/c27ec6908793e3b1706d683dc2c2d367ac8fc061"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "732e4bdd30d30f47fc3042a452280c82cced0bbd", "filename": "docs/dev/README.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/134cc70097f2386bf3af6a15e3c29de9c317ed24/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/134cc70097f2386bf3af6a15e3c29de9c317ed24/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=134cc70097f2386bf3af6a15e3c29de9c317ed24", "patch": "@@ -43,7 +43,7 @@ https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0\n \n We use GitHub Actions for CI. Most of the things, including formatting, are checked by\n `cargo test` so, if `cargo test` passes locally, that's a good sign that CI will\n-be green as well. The only exception is that long-running by default a skipped locally.\n+be green as well. The only exception is that some long-running tests are skipped locally by default.\n Use `env RUN_SLOW_TESTS=1 cargo test` to run the full suite.\n \n We use bors-ng to enforce the [not rocket science](https://graydon2.dreamwidth.org/1597.html) rule.\n@@ -54,9 +54,9 @@ You can run `cargo xtask install-pre-commit-hook` to install git-hook to run rus\n \n All Rust code lives in the `crates` top-level directory, and is organized as a\n single Cargo workspace. The `editors` top-level directory contains code for\n-integrating with editors. Currently, it contains plugins for VS Code (in\n-typescript) and Emacs (in elisp). The `docs` top-level directory contains both\n-developer and user documentation.\n+integrating with editors. Currently, it contains the plugin for VS Code (in\n+typescript). The `docs` top-level directory contains both developer and user\n+documentation.\n \n We have some automation infra in Rust in the `xtask` package. It contains\n stuff like formatting checking, code generation and powers `cargo xtask install`.\n@@ -107,8 +107,8 @@ If I need to fix something simultaneously in the server and in the client, I\n feel even more sad. I don't have a specific workflow for this case.\n \n Additionally, I use `cargo run --release -p ra_cli -- analysis-stats\n-path/to/some/rust/crate` to run a batch analysis. This is primaraly useful for\n-performance optimiations, or for bug minimization.\n+path/to/some/rust/crate` to run a batch analysis. This is primarily useful for\n+performance optimizations, or for bug minimization.\n \n # Logging\n "}, {"sha": "da99a063c689c2806af41951a1afcb3ef7505cca", "filename": "docs/user/README.md", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/134cc70097f2386bf3af6a15e3c29de9c317ed24/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/134cc70097f2386bf3af6a15e3c29de9c317ed24/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=134cc70097f2386bf3af6a15e3c29de9c317ed24", "patch": "@@ -5,8 +5,7 @@ install lsp server, clone the repository and then run `cargo xtask install\n ./crates/ra_lsp_server`). This will produce a binary named `ra_lsp_server` which\n you should be able to use it with any LSP-compatible editor. We use custom\n extensions to LSP, so special client-side support is required to take full\n-advantage of rust-analyzer. This repository contains support code for VS Code\n-and Emacs.\n+advantage of rust-analyzer. This repository contains support code for VS Code.\n \n ```\n $ git clone git@github.com:rust-analyzer/rust-analyzer && cd rust-analyzer\n@@ -130,17 +129,12 @@ host.\n \n ## Emacs\n \n-Prerequisites:\n-\n-`emacs-lsp`, `dash` and `ht` packages.\n-\n-Installation:\n+* install recent version of `emacs-lsp` package by following the instructions [here][emacs-lsp]\n+* set `lsp-rust-server` to `'rust-analyzer`\n+* run `lsp` in a Rust buffer\n+* (Optionally) bind commands like `lsp-rust-analyzer-join-lines`, `lsp-extend-selection` and `lsp-rust-analyzer-expand-macro` to keys\n \n-* add\n-[rust-analyzer.el](../../editors/emacs/rust-analyzer.el)\n-to load path and require it in `init.el`\n-* run `lsp` in a rust buffer\n-* (Optionally) bind commands like `rust-analyzer-join-lines`, `rust-analyzer-extend-selection` and `rust-analyzer-expand-macro` to keys, and enable `rust-analyzer-inlay-hints-mode` to get inline type hints\n+[emacs-lsp]: https://github.com/emacs-lsp/lsp-mode\n \n \n ## Vim and NeoVim (coc-rust-analyzer)"}]}