{"sha": "f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YmM2YWIxNjJjZjVkZmRhN2Y0MWZhMDljNDEzZTllMTkwOGNkMmI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-03T10:37:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-03T10:37:52Z"}, "message": "Reuse the `Backtrace` object instead of rolling our own", "tree": {"sha": "bf4d36e5f879b3c11049a220f85a115194f9e482", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf4d36e5f879b3c11049a220f85a115194f9e482"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b", "html_url": "https://github.com/rust-lang/rust/commit/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "163821b500ed953479d2b791f1f7f86bbe2f1183", "url": "https://api.github.com/repos/rust-lang/rust/commits/163821b500ed953479d2b791f1f7f86bbe2f1183", "html_url": "https://github.com/rust-lang/rust/commit/163821b500ed953479d2b791f1f7f86bbe2f1183"}], "stats": {"total": 69, "additions": 41, "deletions": 28}, "files": [{"sha": "3b297ed5bd01a950af7d0f891eada77f686b73cc", "filename": "src/librustc_mir/interpret/error.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b/src%2Flibrustc_mir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ferror.rs?ref=f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b", "patch": "@@ -1,6 +1,5 @@\n use std::error::Error;\n use std::fmt;\n-use std::path::{PathBuf, Path};\n \n use rustc::mir;\n use rustc::ty::{FnSig, Ty, layout};\n@@ -11,41 +10,23 @@ use super::{\n \n use rustc_const_math::ConstMathErr;\n use syntax::codemap::Span;\n+use backtrace::Backtrace;\n \n #[derive(Debug)]\n pub struct EvalError<'tcx> {\n     pub kind: EvalErrorKind<'tcx>,\n-    pub backtrace: Vec<Frame>,\n+    pub backtrace: Backtrace,\n }\n \n impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n     fn from(kind: EvalErrorKind<'tcx>) -> Self {\n-        let mut backtrace = Vec::new();\n-        use backtrace::{trace, resolve};\n-        trace(|frame| {\n-            resolve(frame.ip(), |symbol| {\n-                backtrace.push(Frame {\n-                    function: symbol.name().map(|s| s.to_string()).unwrap_or(String::new()),\n-                    file: symbol.filename().unwrap_or(Path::new(\"\")).to_owned(),\n-                    line: symbol.lineno().unwrap_or(0),\n-                });\n-            });\n-            true\n-        });\n         EvalError {\n             kind,\n-            backtrace,\n+            backtrace: Backtrace::new(),\n         }\n     }\n }\n \n-#[derive(Debug)]\n-pub struct Frame {\n-    pub function: String,\n-    pub file: PathBuf,\n-    pub line: u32,\n-}\n-\n #[derive(Debug)]\n pub enum EvalErrorKind<'tcx> {\n     /// This variant is used by machines to signal their own errors that do not"}, {"sha": "45d1a9905057dd86ce11aa2f401f46ea99e397fd", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=f7bc6ab162cf5dfda7f41fa09c413e9e1908cd2b", "patch": "@@ -1705,13 +1705,45 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n     pub fn report(&self, e: &EvalError) {\n         let mut trace_text = \"\\n################################\\nerror occurred in miri at\\n\".to_string();\n-        for frame in e.backtrace.iter().skip_while(|frame| frame.function.starts_with(\"backtrace::\")) {\n-            // don't report initialization gibberish\n-            if frame.function == \"miri::after_analysis\" {\n-                break;\n+        let mut skip_init = true;\n+        'frames: for (i, frame) in e.backtrace.frames().iter().enumerate() {\n+            for symbol in frame.symbols() {\n+                if let Some(name) = symbol.name() {\n+                    // unmangle the symbol via `to_string`\n+                    let name = name.to_string();\n+                    if name.starts_with(\"miri::after_analysis\") {\n+                        // don't report initialization gibberish\n+                        break 'frames;\n+                    } else if name.starts_with(\"backtrace::capture::Backtrace::new\")\n+                            // debug mode produces funky symbol names\n+                           || name.starts_with(\"backtrace::capture::{{impl}}::new\") {\n+                        // don't report backtrace internals\n+                        skip_init = false;\n+                        continue 'frames;\n+                    }\n+                }\n+            }\n+            if skip_init {\n+                continue;\n+            }\n+            write!(trace_text, \"{}\\n\", i).unwrap();\n+            for symbol in frame.symbols() {\n+                if let Some(name) = symbol.name() {\n+                    write!(trace_text, \"# {}\\n\", name).unwrap();\n+                } else {\n+                    write!(trace_text, \"# <unknown>\\n\").unwrap();\n+                }\n+                if let Some(file_path) = symbol.filename() {\n+                    write!(trace_text, \"{}\", file_path.display()).unwrap();\n+                } else {\n+                    write!(trace_text, \"<unknown_file>\").unwrap();\n+                }\n+                if let Some(line) = symbol.lineno() {\n+                    write!(trace_text, \":{}\\n\", line).unwrap();\n+                } else {\n+                    write!(trace_text, \"\\n\").unwrap();\n+                }\n             }\n-            write!(trace_text, \"# {}\\n\", frame.function).unwrap();\n-            write!(trace_text, \"{}:{}\\n\", frame.file.display(), frame.line).unwrap();\n         }\n         trace!(\"{}\", trace_text);\n         if let Some(frame) = self.stack().last() {"}]}