{"sha": "c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YzE5ZmU5NjAwM2JiNWJkYWE2Y2EzNTYwM2ViNDIyMGIxZDVjYTg=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-03T02:43:16Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-10-03T04:08:45Z"}, "message": "Correctly trans capture-by-ref unboxed closures\n\nStore references to the freevars instead of copies when constructing\nthe environment and insert an additional load when reading them from\nthe environment.", "tree": {"sha": "e96a196a98ac5c4abce1955e5495aa459b49614f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e96a196a98ac5c4abce1955e5495aa459b49614f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8", "html_url": "https://github.com/rust-lang/rust/commit/c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72dc0f5f82efcf891581fdc3ec15eb46f38cd718", "url": "https://api.github.com/repos/rust-lang/rust/commits/72dc0f5f82efcf891581fdc3ec15eb46f38cd718", "html_url": "https://github.com/rust-lang/rust/commit/72dc0f5f82efcf891581fdc3ec15eb46f38cd718"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "1e2e8c589c66345f0092303fc7824846e32c4f3b", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c4c19fe96003bb5bdaa6ca35603eb4220b1d5ca8", "patch": "@@ -301,6 +301,7 @@ fn load_environment<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n fn load_unboxed_closure_environment<'blk, 'tcx>(\n                                     bcx: Block<'blk, 'tcx>,\n                                     arg_scope_id: ScopeId,\n+                                    freevar_mode: ast::CaptureClause,\n                                     freevars: &Vec<ty::Freevar>,\n                                     closure_id: ast::DefId)\n                                     -> Block<'blk, 'tcx> {\n@@ -326,11 +327,14 @@ fn load_unboxed_closure_environment<'blk, 'tcx>(\n     };\n \n     for (i, freevar) in freevars.iter().enumerate() {\n-        let upvar_ptr = GEPi(bcx, llenv, [0, i]);\n+        let mut upvar_ptr = GEPi(bcx, llenv, [0, i]);\n+        if freevar_mode == ast::CaptureByRef {\n+            upvar_ptr = Load(bcx, upvar_ptr);\n+        }\n         let def_id = freevar.def.def_id();\n         bcx.fcx.llupvars.borrow_mut().insert(def_id.node, upvar_ptr);\n \n-        if kind == ty::FnOnceUnboxedClosureKind {\n+        if kind == ty::FnOnceUnboxedClosureKind && freevar_mode == ast::CaptureByValue {\n             bcx.fcx.schedule_drop_mem(arg_scope_id,\n                                       upvar_ptr,\n                                       node_id_type(bcx, def_id.node))\n@@ -477,6 +481,7 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n     let freevars: Vec<ty::Freevar> =\n         ty::with_freevars(bcx.tcx(), id, |fv| fv.iter().map(|&fv| fv).collect());\n     let freevars_ptr = &freevars;\n+    let freevar_mode = bcx.tcx().capture_mode(id);\n \n     trans_closure(bcx.ccx(),\n                   decl,\n@@ -493,6 +498,7 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n                   |bcx, arg_scope| {\n                       load_unboxed_closure_environment(bcx,\n                                                        arg_scope,\n+                                                       freevar_mode,\n                                                        freevars_ptr,\n                                                        closure_id)\n                   });\n@@ -518,7 +524,14 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n                                                    dest_addr,\n                                                    0,\n                                                    i);\n-        bcx = datum.store_to(bcx, upvar_slot_dest);\n+        match freevar_mode {\n+            ast::CaptureByValue => {\n+                bcx = datum.store_to(bcx, upvar_slot_dest);\n+            }\n+            ast::CaptureByRef => {\n+                Store(bcx, datum.to_llref(), upvar_slot_dest);\n+            }\n+        }\n     }\n     adt::trans_set_discr(bcx, &*repr, dest_addr, 0);\n "}]}