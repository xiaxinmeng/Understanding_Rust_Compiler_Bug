{"sha": "ae659125a509967f09665b96d06f6ce6bf1ddd1b", "node_id": "C_kwDOAAsO6NoAKGFlNjU5MTI1YTUwOTk2N2YwOTY2NWI5NmQwNmY2Y2U2YmYxZGRkMWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T13:02:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-09T13:02:09Z"}, "message": "Auto merge of #13763 - rami3l:fix/gen-partial-eq-generic, r=Veykril\n\nfix: add generic `TypeBoundList` in generated derivable impl\n\nPotentially fixes #13727.\n\nContinuing with the work in #13732, this fix tries to add correct type bounds in the generated `impl` block:\n\n```diff\n  enum Either<T, U> {\n      Left(T),\n      Right(U),\n  }\n\n- impl<T, U> PartialEq for Either<T, U> {\n+ impl<T: PartialEq, U: PartialEq> PartialEq for Either<T, U> {\n      fn eq(&self, other: &Self) -> bool {\n          match (self, other) {\n              (Self::Left(l0), Self::Left(r0)) => l0 == r0,\n              (Self::Right(l0), Self::Right(r0)) => l0 == r0,\n              _ => false,\n          }\n      }\n  }\n```", "tree": {"sha": "5f4a84703df302cdc8a4d0b6a5547f963d6d0c4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4a84703df302cdc8a4d0b6a5547f963d6d0c4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae659125a509967f09665b96d06f6ce6bf1ddd1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae659125a509967f09665b96d06f6ce6bf1ddd1b", "html_url": "https://github.com/rust-lang/rust/commit/ae659125a509967f09665b96d06f6ce6bf1ddd1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae659125a509967f09665b96d06f6ce6bf1ddd1b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe8ee9c43a52042e2150de8024524ee7a2296692", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe8ee9c43a52042e2150de8024524ee7a2296692", "html_url": "https://github.com/rust-lang/rust/commit/fe8ee9c43a52042e2150de8024524ee7a2296692"}, {"sha": "cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b", "html_url": "https://github.com/rust-lang/rust/commit/cfa914958c5eead0d8d84e0c7b8298ef7ac5530b"}], "stats": {"total": 153, "additions": 130, "deletions": 23}, "files": [{"sha": "742f1f78c2ec97f8e7aebba9c755b1ba78064fef", "filename": "crates/ide-assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=ae659125a509967f09665b96d06f6ce6bf1ddd1b", "patch": "@@ -1,7 +1,9 @@\n use ide_db::{famous_defs::FamousDefs, RootDatabase};\n use syntax::ast::{self, AstNode, HasName};\n \n-use crate::{utils::generate_trait_impl_text, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::generate_trait_impl_text_intransitive, AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_from_impl_for_enum\n //\n@@ -70,7 +72,7 @@ pub(crate) fn generate_from_impl_for_enum(\n     }}\"#\n                 )\n             };\n-            let from_impl = generate_trait_impl_text(&enum_, &from_trait, &impl_code);\n+            let from_impl = generate_trait_impl_text_intransitive(&enum_, &from_trait, &impl_code);\n             edit.insert(start_offset, from_impl);\n         },\n     )"}, {"sha": "9ad14a819d97bc1e5aa44c40d6ff78decfa14d5c", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=ae659125a509967f09665b96d06f6ce6bf1ddd1b", "patch": "@@ -1,7 +1,7 @@\n use syntax::ast::{self, AstNode, HasName};\n \n use crate::{\n-    utils::{generate_impl_text, generate_trait_impl_text},\n+    utils::{generate_impl_text, generate_trait_impl_text_intransitive},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -89,11 +89,11 @@ pub(crate) fn generate_trait_impl(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n             let start_offset = nominal.syntax().text_range().end();\n             match ctx.config.snippet_cap {\n                 Some(cap) => {\n-                    let snippet = generate_trait_impl_text(&nominal, \"$0\", \"\");\n+                    let snippet = generate_trait_impl_text_intransitive(&nominal, \"$0\", \"\");\n                     edit.insert_snippet(cap, start_offset, snippet);\n                 }\n                 None => {\n-                    let text = generate_trait_impl_text(&nominal, \"\", \"\");\n+                    let text = generate_trait_impl_text_intransitive(&nominal, \"\", \"\");\n                     edit.insert(start_offset, text);\n                 }\n             }"}, {"sha": "a6693d7d790ccb3e6f65168e1a863be29addd5d3", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=ae659125a509967f09665b96d06f6ce6bf1ddd1b", "patch": "@@ -994,6 +994,68 @@ impl PartialEq for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_enum_generic() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq, derive\n+#[derive(Partial$0Eq)]\n+enum Either<T, U> {\n+    Left(T),\n+    Right(U),\n+}\n+\"#,\n+            r#\"\n+enum Either<T, U> {\n+    Left(T),\n+    Right(U),\n+}\n+\n+impl<T: PartialEq, U: PartialEq> PartialEq for Either<T, U> {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::Left(l0), Self::Left(r0)) => l0 == r0,\n+            (Self::Right(l0), Self::Right(r0)) => l0 == r0,\n+            _ => false,\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn add_custom_impl_partial_eq_tuple_enum_generic_existing_bounds() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: eq, derive\n+#[derive(Partial$0Eq)]\n+enum Either<T: PartialEq + Error, U: Clone> {\n+    Left(T),\n+    Right(U),\n+}\n+\"#,\n+            r#\"\n+enum Either<T: PartialEq + Error, U: Clone> {\n+    Left(T),\n+    Right(U),\n+}\n+\n+impl<T: PartialEq + Error, U: Clone + PartialEq> PartialEq for Either<T, U> {\n+    $0fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Self::Left(l0), Self::Left(r0)) => l0 == r0,\n+            (Self::Right(l0), Self::Right(r0)) => l0 == r0,\n+            _ => false,\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_partial_eq_record_enum() {\n         check_assist(\n@@ -1170,7 +1232,7 @@ struct Foo<T, U> {\n     bar: U,\n }\n \n-impl<T, U> Default for Foo<T, U> {\n+impl<T: Default, U: Default> Default for Foo<T, U> {\n     $0fn default() -> Self {\n         Self { foo: Default::default(), bar: Default::default() }\n     }"}, {"sha": "7add660649211396818efdde916cced211d6de6a", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=ae659125a509967f09665b96d06f6ce6bf1ddd1b", "patch": "@@ -434,35 +434,67 @@ pub(crate) fn find_impl_block_end(impl_def: ast::Impl, buf: &mut String) -> Opti\n     Some(end)\n }\n \n-// Generates the surrounding `impl Type { <code> }` including type and lifetime\n-// parameters\n+/// Generates the surrounding `impl Type { <code> }` including type and lifetime\n+/// parameters.\n pub(crate) fn generate_impl_text(adt: &ast::Adt, code: &str) -> String {\n-    generate_impl_text_inner(adt, None, code)\n+    generate_impl_text_inner(adt, None, true, code)\n }\n \n-// Generates the surrounding `impl <trait> for Type { <code> }` including type\n-// and lifetime parameters\n+/// Generates the surrounding `impl <trait> for Type { <code> }` including type\n+/// and lifetime parameters, with `<trait>` appended to `impl`'s generic parameters' bounds.\n+///\n+/// This is useful for traits like `PartialEq`, since `impl<T> PartialEq for U<T>` often requires `T: PartialEq`.\n pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &str) -> String {\n-    generate_impl_text_inner(adt, Some(trait_text), code)\n+    generate_impl_text_inner(adt, Some(trait_text), true, code)\n+}\n+\n+/// Generates the surrounding `impl <trait> for Type { <code> }` including type\n+/// and lifetime parameters, with `impl`'s generic parameters' bounds kept as-is.\n+///\n+/// This is useful for traits like `From<T>`, since `impl<T> From<T> for U<T>` doesn't require `T: From<T>`.\n+pub(crate) fn generate_trait_impl_text_intransitive(\n+    adt: &ast::Adt,\n+    trait_text: &str,\n+    code: &str,\n+) -> String {\n+    generate_impl_text_inner(adt, Some(trait_text), false, code)\n }\n \n-fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n+fn generate_impl_text_inner(\n+    adt: &ast::Adt,\n+    trait_text: Option<&str>,\n+    trait_is_transitive: bool,\n+    code: &str,\n+) -> String {\n     // Ensure lifetime params are before type & const params\n     let generic_params = adt.generic_param_list().map(|generic_params| {\n         let lifetime_params =\n             generic_params.lifetime_params().map(ast::GenericParam::LifetimeParam);\n-        let ty_or_const_params = generic_params.type_or_const_params().filter_map(|param| {\n-            // remove defaults since they can't be specified in impls\n+        let ty_or_const_params = generic_params.type_or_const_params().map(|param| {\n             match param {\n                 ast::TypeOrConstParam::Type(param) => {\n                     let param = param.clone_for_update();\n+                    // remove defaults since they can't be specified in impls\n                     param.remove_default();\n-                    Some(ast::GenericParam::TypeParam(param))\n+                    let mut bounds =\n+                        param.type_bound_list().map_or_else(Vec::new, |it| it.bounds().collect());\n+                    if let Some(trait_) = trait_text {\n+                        // Add the current trait to `bounds` if the trait is transitive,\n+                        // meaning `impl<T> Trait for U<T>` requires `T: Trait`.\n+                        if trait_is_transitive {\n+                            bounds.push(make::type_bound(trait_));\n+                        }\n+                    };\n+                    // `{ty_param}: {bounds}`\n+                    let param =\n+                        make::type_param(param.name().unwrap(), make::type_bound_list(bounds));\n+                    ast::GenericParam::TypeParam(param)\n                 }\n                 ast::TypeOrConstParam::Const(param) => {\n                     let param = param.clone_for_update();\n+                    // remove defaults since they can't be specified in impls\n                     param.remove_default();\n-                    Some(ast::GenericParam::ConstParam(param))\n+                    ast::GenericParam::ConstParam(param)\n                 }\n             }\n         });"}, {"sha": "686bb40ecd391e89ac281a278b8c0aa63c247f12", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae659125a509967f09665b96d06f6ce6bf1ddd1b/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=ae659125a509967f09665b96d06f6ce6bf1ddd1b", "patch": "@@ -719,12 +719,23 @@ pub fn param_list(\n     ast_from_text(&list)\n }\n \n-pub fn type_param(name: ast::Name, ty: Option<ast::TypeBoundList>) -> ast::TypeParam {\n-    let bound = match ty {\n-        Some(it) => format!(\": {it}\"),\n-        None => String::new(),\n-    };\n-    ast_from_text(&format!(\"fn f<{name}{bound}>() {{ }}\"))\n+pub fn type_bound(bound: &str) -> ast::TypeBound {\n+    ast_from_text(&format!(\"fn f<T: {bound}>() {{ }}\"))\n+}\n+\n+pub fn type_bound_list(\n+    bounds: impl IntoIterator<Item = ast::TypeBound>,\n+) -> Option<ast::TypeBoundList> {\n+    let bounds = bounds.into_iter().map(|it| it.to_string()).unique().join(\" + \");\n+    if bounds.is_empty() {\n+        return None;\n+    }\n+    Some(ast_from_text(&format!(\"fn f<T: {bounds}>() {{ }}\")))\n+}\n+\n+pub fn type_param(name: ast::Name, bounds: Option<ast::TypeBoundList>) -> ast::TypeParam {\n+    let bounds = bounds.map_or_else(String::new, |it| format!(\": {it}\"));\n+    ast_from_text(&format!(\"fn f<{name}{bounds}>() {{ }}\"))\n }\n \n pub fn lifetime_param(lifetime: ast::Lifetime) -> ast::LifetimeParam {"}]}