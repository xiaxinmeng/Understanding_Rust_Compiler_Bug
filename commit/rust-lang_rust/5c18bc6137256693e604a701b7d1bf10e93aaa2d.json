{"sha": "5c18bc6137256693e604a701b7d1bf10e93aaa2d", "node_id": "C_kwDOAAsO6NoAKDVjMThiYzYxMzcyNTY2OTNlNjA0YTcwMWI3ZDFiZjEwZTkzYWFhMmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T09:41:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-04T09:41:43Z"}, "message": "Auto merge of #106442 - matthiaskrgr:rollup-wivf7gh, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106200 (Suggest `impl Fn*` and `impl Future` in `-> _` return suggestions)\n - #106274 (Add JSON output to -Zdump-mono-stats)\n - #106292 (Add codegen test for `Box::new(uninit)` of big arrays)\n - #106327 (Add tidy check for dbg)\n - #106361 (Note maximum integer literal for `IntLiteralTooLarge`)\n - #106396 (Allow passing a specific date to `bump-stage0`)\n - #106436 (Enable doctests for rustc_query_impl)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8d778b9253efbb7c9bc9fdf823a2097b781c55f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d778b9253efbb7c9bc9fdf823a2097b781c55f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c18bc6137256693e604a701b7d1bf10e93aaa2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c18bc6137256693e604a701b7d1bf10e93aaa2d", "html_url": "https://github.com/rust-lang/rust/commit/5c18bc6137256693e604a701b7d1bf10e93aaa2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c18bc6137256693e604a701b7d1bf10e93aaa2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddad1e1f15f77074738bb3d7fb7688a9177b6450", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddad1e1f15f77074738bb3d7fb7688a9177b6450", "html_url": "https://github.com/rust-lang/rust/commit/ddad1e1f15f77074738bb3d7fb7688a9177b6450"}, {"sha": "4e590b3ee9622c90814c656e784e2facd5bc21ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e590b3ee9622c90814c656e784e2facd5bc21ca", "html_url": "https://github.com/rust-lang/rust/commit/4e590b3ee9622c90814c656e784e2facd5bc21ca"}], "stats": {"total": 600, "additions": 473, "deletions": 127}, "files": [{"sha": "46b0a01a18ec513ab746b832684d1f91d0210217", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -4243,6 +4243,8 @@ dependencies = [\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"serde\",\n+ \"serde_json\",\n  \"smallvec\",\n  \"tracing\",\n ]"}, {"sha": "69a9a58304837d26d91f7eebaab3d9e6fe4882f9", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -34,7 +34,7 @@ pub enum LitError {\n     InvalidIntSuffix,\n     InvalidFloatSuffix,\n     NonDecimalFloat(u32),\n-    IntTooLarge,\n+    IntTooLarge(u32),\n }\n \n impl LitKind {\n@@ -333,6 +333,6 @@ fn integer_lit(symbol: Symbol, suffix: Option<Symbol>) -> Result<LitKind, LitErr\n         // but these kinds of errors are already reported by the lexer.\n         let from_lexer =\n             base < 10 && s.chars().any(|c| c.to_digit(10).map_or(false, |d| d >= base));\n-        if from_lexer { LitError::LexerError } else { LitError::IntTooLarge }\n+        if from_lexer { LitError::LexerError } else { LitError::IntTooLarge(base) }\n     })\n }"}, {"sha": "bc37d91a7c6afd5cdcec34daa242be14e090bcae", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -85,6 +85,7 @@ session_invalid_float_literal_suffix = invalid suffix `{$suffix}` for float lite\n     .help = valid suffixes are `f32` and `f64`\n \n session_int_literal_too_large = integer literal is too large\n+    .note = value exceeds limit of `{$limit}`\n \n session_invalid_int_literal_width = invalid width `{$width}` for integer literal\n     .help = valid widths are 8, 16, 32, 64 and 128"}, {"sha": "cf847047c906ffb962a2c6a0293f1ca05e1796d7", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 97, "deletions": 50, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -17,15 +17,16 @@\n use crate::astconv::AstConv;\n use crate::check::intrinsic::intrinsic_operation_unsafety;\n use crate::errors;\n+use hir::def::DefKind;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{GenericParamKind, Node};\n-use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::traits::ObligationCause;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n@@ -1195,12 +1196,11 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                 ty::ReErased => tcx.lifetimes.re_static,\n                 _ => r,\n             });\n-            let fn_sig = ty::Binder::dummy(fn_sig);\n \n             let mut visitor = HirPlaceholderCollector::default();\n             visitor.visit_ty(ty);\n             let mut diag = bad_placeholder(tcx, visitor.0, \"return type\");\n-            let ret_ty = fn_sig.skip_binder().output();\n+            let ret_ty = fn_sig.output();\n             if ret_ty.is_suggestable(tcx, false) {\n                 diag.span_suggestion(\n                     ty.span,\n@@ -1223,26 +1223,26 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n                         Applicability::MachineApplicable,\n                     );\n                 }\n+            } else if let Some(sugg) = suggest_impl_trait(tcx, ret_ty, ty.span, hir_id, def_id) {\n+                diag.span_suggestion(\n+                    ty.span,\n+                    \"replace with an appropriate return type\",\n+                    sugg,\n+                    Applicability::MachineApplicable,\n+                );\n             } else if ret_ty.is_closure() {\n-                // We're dealing with a closure, so we should suggest using `impl Fn` or trait bounds\n-                // to prevent the user from getting a papercut while trying to use the unique closure\n-                // syntax (e.g. `[closure@src/lib.rs:2:5: 2:9]`).\n                 diag.help(\"consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\");\n+            }\n+            // Also note how `Fn` traits work just in case!\n+            if ret_ty.is_closure() {\n                 diag.note(\n                     \"for more information on `Fn` traits and closure types, see \\\n                      https://doc.rust-lang.org/book/ch13-01-closures.html\",\n                 );\n-            } else if let Some(i_ty) = suggest_impl_iterator(tcx, ret_ty, ty.span, hir_id, def_id) {\n-                diag.span_suggestion(\n-                    ty.span,\n-                    \"replace with an appropriate return type\",\n-                    format!(\"impl Iterator<Item = {}>\", i_ty),\n-                    Applicability::MachineApplicable,\n-                );\n             }\n             diag.emit();\n \n-            fn_sig\n+            ty::Binder::dummy(fn_sig)\n         }\n         None => <dyn AstConv<'_>>::ty_of_fn(\n             icx,\n@@ -1256,47 +1256,94 @@ fn infer_return_ty_for_fn_sig<'tcx>(\n     }\n }\n \n-fn suggest_impl_iterator<'tcx>(\n+fn suggest_impl_trait<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ret_ty: Ty<'tcx>,\n     span: Span,\n     hir_id: hir::HirId,\n     def_id: LocalDefId,\n-) -> Option<Ty<'tcx>> {\n-    let Some(iter_trait) = tcx.get_diagnostic_item(sym::Iterator) else { return None; };\n-    let Some(iterator_item) = tcx.get_diagnostic_item(sym::IteratorItem) else { return None; };\n-    if !tcx\n-        .infer_ctxt()\n-        .build()\n-        .type_implements_trait(iter_trait, [ret_ty], tcx.param_env(def_id))\n-        .must_apply_modulo_regions()\n-    {\n-        return None;\n-    }\n-    let infcx = tcx.infer_ctxt().build();\n-    let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n-    // Find the type of `Iterator::Item`.\n-    let origin = TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span };\n-    let ty_var = infcx.next_ty_var(origin);\n-    let projection = ty::Binder::dummy(ty::PredicateKind::Clause(ty::Clause::Projection(\n-        ty::ProjectionPredicate {\n-            projection_ty: tcx.mk_alias_ty(iterator_item, tcx.mk_substs([ret_ty.into()].iter())),\n-            term: ty_var.into(),\n-        },\n-    )));\n-    // Add `<ret_ty as Iterator>::Item = _` obligation.\n-    ocx.register_obligation(crate::traits::Obligation::misc(\n-        tcx,\n-        span,\n-        hir_id,\n-        tcx.param_env(def_id),\n-        projection,\n-    ));\n-    if ocx.select_where_possible().is_empty()\n-        && let item_ty = infcx.resolve_vars_if_possible(ty_var)\n-        && item_ty.is_suggestable(tcx, false)\n-    {\n-        return Some(item_ty);\n+) -> Option<String> {\n+    let format_as_assoc: fn(_, _, _, _, _) -> _ =\n+        |tcx: TyCtxt<'tcx>,\n+         _: ty::SubstsRef<'tcx>,\n+         trait_def_id: DefId,\n+         assoc_item_def_id: DefId,\n+         item_ty: Ty<'tcx>| {\n+            let trait_name = tcx.item_name(trait_def_id);\n+            let assoc_name = tcx.item_name(assoc_item_def_id);\n+            Some(format!(\"impl {trait_name}<{assoc_name} = {item_ty}>\"))\n+        };\n+    let format_as_parenthesized: fn(_, _, _, _, _) -> _ =\n+        |tcx: TyCtxt<'tcx>,\n+         substs: ty::SubstsRef<'tcx>,\n+         trait_def_id: DefId,\n+         _: DefId,\n+         item_ty: Ty<'tcx>| {\n+            let trait_name = tcx.item_name(trait_def_id);\n+            let args_tuple = substs.type_at(1);\n+            let ty::Tuple(types) = *args_tuple.kind() else { return None; };\n+            if !types.is_suggestable(tcx, false) {\n+                return None;\n+            }\n+            let maybe_ret =\n+                if item_ty.is_unit() { String::new() } else { format!(\" -> {item_ty}\") };\n+            Some(format!(\n+                \"impl {trait_name}({}){maybe_ret}\",\n+                types.iter().map(|ty| ty.to_string()).collect::<Vec<_>>().join(\", \")\n+            ))\n+        };\n+\n+    for (trait_def_id, assoc_item_def_id, formatter) in [\n+        (\n+            tcx.get_diagnostic_item(sym::Iterator),\n+            tcx.get_diagnostic_item(sym::IteratorItem),\n+            format_as_assoc,\n+        ),\n+        (\n+            tcx.lang_items().future_trait(),\n+            tcx.get_diagnostic_item(sym::FutureOutput),\n+            format_as_assoc,\n+        ),\n+        (tcx.lang_items().fn_trait(), tcx.lang_items().fn_once_output(), format_as_parenthesized),\n+        (\n+            tcx.lang_items().fn_mut_trait(),\n+            tcx.lang_items().fn_once_output(),\n+            format_as_parenthesized,\n+        ),\n+        (\n+            tcx.lang_items().fn_once_trait(),\n+            tcx.lang_items().fn_once_output(),\n+            format_as_parenthesized,\n+        ),\n+    ] {\n+        let Some(trait_def_id) = trait_def_id else { continue; };\n+        let Some(assoc_item_def_id) = assoc_item_def_id else { continue; };\n+        if tcx.def_kind(assoc_item_def_id) != DefKind::AssocTy {\n+            continue;\n+        }\n+        let param_env = tcx.param_env(def_id);\n+        let infcx = tcx.infer_ctxt().build();\n+        let substs = ty::InternalSubsts::for_item(tcx, trait_def_id, |param, _| {\n+            if param.index == 0 { ret_ty.into() } else { infcx.var_for_def(span, param) }\n+        });\n+        if !infcx.type_implements_trait(trait_def_id, substs, param_env).must_apply_modulo_regions()\n+        {\n+            continue;\n+        }\n+        let ocx = ObligationCtxt::new_in_snapshot(&infcx);\n+        let item_ty = ocx.normalize(\n+            &ObligationCause::misc(span, hir_id),\n+            param_env,\n+            tcx.mk_projection(assoc_item_def_id, substs),\n+        );\n+        // FIXME(compiler-errors): We may benefit from resolving regions here.\n+        if ocx.select_where_possible().is_empty()\n+            && let item_ty = infcx.resolve_vars_if_possible(item_ty)\n+            && item_ty.is_suggestable(tcx, false)\n+            && let Some(sugg) = formatter(tcx, infcx.resolve_vars_if_possible(substs), trait_def_id, assoc_item_def_id, item_ty)\n+        {\n+            return Some(sugg);\n+        }\n     }\n     None\n }"}, {"sha": "9ec71c6b87edf6bb2f27c6b42a831ca5c0291cf1", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -3,17 +3,16 @@ use crate::interface::parse_cfgspecs;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n-use rustc_session::config::InstrumentCoverage;\n-use rustc_session::config::Strip;\n+use rustc_session::config::rustc_optgroups;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n-use rustc_session::config::{\n-    rustc_optgroups, ErrorOutputType, ExternLocation, LocationDetail, Options, Passes,\n-};\n use rustc_session::config::{\n     BranchProtection, Externs, OomStrategy, OutputType, OutputTypes, PAuthKey, PacRet,\n     ProcMacroExecutionStrategy, SymbolManglingVersion, WasiExecModel,\n };\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n+use rustc_session::config::{DumpMonoStatsFormat, MirSpanview};\n+use rustc_session::config::{ErrorOutputType, ExternLocation, LocationDetail, Options, Strip};\n+use rustc_session::config::{InstrumentCoverage, Passes};\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n@@ -647,6 +646,9 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(dump_mir_dir, String::from(\"abc\"));\n     untracked!(dump_mir_exclude_pass_number, true);\n     untracked!(dump_mir_graphviz, true);\n+    untracked!(dump_mir_spanview, Some(MirSpanview::Statement));\n+    untracked!(dump_mono_stats, SwitchWithOptPath::Enabled(Some(\"mono-items-dir/\".into())));\n+    untracked!(dump_mono_stats_format, DumpMonoStatsFormat::Json);\n     untracked!(dylib_lto, true);\n     untracked!(emit_stack_sizes, true);\n     untracked!(future_incompat_test, true);"}, {"sha": "c8af10576b42fcf4526aafc92e2985774d9d2680", "filename": "compiler/rustc_monomorphize/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_monomorphize%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_monomorphize%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2FCargo.toml?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -6,6 +6,8 @@ edition = \"2021\"\n [lib]\n \n [dependencies]\n+serde = \"1\"\n+serde_json = \"1\"\n smallvec = { version = \"1.8.1\", features = [ \"union\", \"may_dangle\" ] }\n tracing = \"0.1\"\n rustc_data_structures = { path = \"../rustc_data_structures\" }"}, {"sha": "97fbb458e792a1d5b315c2f4bdc0c43d829cb16b", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -102,14 +102,14 @@ use std::path::{Path, PathBuf};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync;\n-use rustc_hir::def_id::DefIdSet;\n+use rustc_hir::def_id::{DefIdSet, LOCAL_CRATE};\n use rustc_middle::mir;\n use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::mir::mono::{CodegenUnit, Linkage};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::SwitchWithOptPath;\n+use rustc_session::config::{DumpMonoStatsFormat, SwitchWithOptPath};\n use rustc_span::symbol::Symbol;\n \n use crate::collector::InliningMap;\n@@ -417,7 +417,7 @@ fn collect_and_partition_mono_items(tcx: TyCtxt<'_>, (): ()) -> (&DefIdSet, &[Co\n     // Output monomorphization stats per def_id\n     if let SwitchWithOptPath::Enabled(ref path) = tcx.sess.opts.unstable_opts.dump_mono_stats {\n         if let Err(err) =\n-            dump_mono_items_stats(tcx, &codegen_units, path, tcx.sess.opts.crate_name.as_deref())\n+            dump_mono_items_stats(tcx, &codegen_units, path, tcx.crate_name(LOCAL_CRATE))\n         {\n             tcx.sess.emit_fatal(CouldntDumpMonoStats { error: err.to_string() });\n         }\n@@ -483,7 +483,7 @@ fn dump_mono_items_stats<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     codegen_units: &[CodegenUnit<'tcx>],\n     output_directory: &Option<PathBuf>,\n-    crate_name: Option<&str>,\n+    crate_name: Symbol,\n ) -> Result<(), Box<dyn std::error::Error>> {\n     let output_directory = if let Some(ref directory) = output_directory {\n         fs::create_dir_all(directory)?;\n@@ -492,9 +492,11 @@ fn dump_mono_items_stats<'tcx>(\n         Path::new(\".\")\n     };\n \n-    let filename = format!(\"{}.mono_items.md\", crate_name.unwrap_or(\"unknown-crate\"));\n+    let format = tcx.sess.opts.unstable_opts.dump_mono_stats_format;\n+    let ext = format.extension();\n+    let filename = format!(\"{crate_name}.mono_items.{ext}\");\n     let output_path = output_directory.join(&filename);\n-    let file = File::create(output_path)?;\n+    let file = File::create(&output_path)?;\n     let mut file = BufWriter::new(file);\n \n     // Gather instantiated mono items grouped by def_id\n@@ -508,30 +510,44 @@ fn dump_mono_items_stats<'tcx>(\n         }\n     }\n \n+    #[derive(serde::Serialize)]\n+    struct MonoItem {\n+        name: String,\n+        instantiation_count: usize,\n+        size_estimate: usize,\n+        total_estimate: usize,\n+    }\n+\n     // Output stats sorted by total instantiated size, from heaviest to lightest\n     let mut stats: Vec<_> = items_per_def_id\n         .into_iter()\n         .map(|(def_id, items)| {\n+            let name = with_no_trimmed_paths!(tcx.def_path_str(def_id));\n             let instantiation_count = items.len();\n             let size_estimate = items[0].size_estimate(tcx);\n             let total_estimate = instantiation_count * size_estimate;\n-            (def_id, instantiation_count, size_estimate, total_estimate)\n+            MonoItem { name, instantiation_count, size_estimate, total_estimate }\n         })\n         .collect();\n-    stats.sort_unstable_by_key(|(_, _, _, total_estimate)| cmp::Reverse(*total_estimate));\n+    stats.sort_unstable_by_key(|item| cmp::Reverse(item.total_estimate));\n \n     if !stats.is_empty() {\n-        writeln!(\n-            file,\n-            \"| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\"\n-        )?;\n-        writeln!(file, \"| --- | ---: | ---: | ---: |\")?;\n-        for (def_id, instantiation_count, size_estimate, total_estimate) in stats {\n-            let item = with_no_trimmed_paths!(tcx.def_path_str(def_id));\n-            writeln!(\n-                file,\n-                \"| {item} | {instantiation_count} | {size_estimate} | {total_estimate} |\"\n-            )?;\n+        match format {\n+            DumpMonoStatsFormat::Json => serde_json::to_writer(file, &stats)?,\n+            DumpMonoStatsFormat::Markdown => {\n+                writeln!(\n+                    file,\n+                    \"| Item | Instantiation count | Estimated Cost Per Instantiation | Total Estimated Cost |\"\n+                )?;\n+                writeln!(file, \"| --- | ---: | ---: | ---: |\")?;\n+\n+                for MonoItem { name, instantiation_count, size_estimate, total_estimate } in stats {\n+                    writeln!(\n+                        file,\n+                        \"| `{name}` | {instantiation_count} | {size_estimate} | {total_estimate} |\"\n+                    )?;\n+                }\n+            }\n         }\n     }\n "}, {"sha": "46e77626479c83ed7a09df9867c8eac3285674a2", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -4,7 +4,7 @@ version = \"0.0.0\"\n edition = \"2021\"\n \n [lib]\n-doctest = false\n+\n \n [dependencies]\n measureme = \"10.0.0\""}, {"sha": "5f78f6d079d0131c8d3f80b44f1f4fa16ad2b121", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -2981,3 +2981,21 @@ pub enum ProcMacroExecutionStrategy {\n     /// Run the proc-macro code on a different thread.\n     CrossThread,\n }\n+\n+/// Which format to use for `-Z dump-mono-stats`\n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum DumpMonoStatsFormat {\n+    /// Pretty-print a markdown table\n+    Markdown,\n+    /// Emit structured JSON\n+    Json,\n+}\n+\n+impl DumpMonoStatsFormat {\n+    pub fn extension(self) -> &'static str {\n+        match self {\n+            Self::Markdown => \"md\",\n+            Self::Json => \"json\",\n+        }\n+    }\n+}"}, {"sha": "f5a72573d58cd00d8d1cc5c4fbafb5e6ed0e9333", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -260,9 +260,11 @@ pub(crate) struct InvalidFloatLiteralSuffix {\n \n #[derive(Diagnostic)]\n #[diag(session_int_literal_too_large)]\n+#[note]\n pub(crate) struct IntLiteralTooLarge {\n     #[primary_span]\n     pub span: Span,\n+    pub limit: String,\n }\n \n #[derive(Diagnostic)]\n@@ -361,8 +363,15 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n                 _ => unreachable!(),\n             };\n         }\n-        LitError::IntTooLarge => {\n-            sess.emit_err(IntLiteralTooLarge { span });\n+        LitError::IntTooLarge(base) => {\n+            let max = u128::MAX;\n+            let limit = match base {\n+                2 => format!(\"{max:#b}\"),\n+                8 => format!(\"{max:#o}\"),\n+                16 => format!(\"{max:#x}\"),\n+                _ => format!(\"{max}\"),\n+            };\n+            sess.emit_err(IntLiteralTooLarge { span, limit });\n         }\n     }\n }"}, {"sha": "b379aef80fb2e8c5e056aeb8c1334d5b123dd830", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -377,6 +377,7 @@ mod desc {\n     pub const parse_linker_flavor: &str = ::rustc_target::spec::LinkerFlavorCli::one_of();\n     pub const parse_optimization_fuel: &str = \"crate=integer\";\n     pub const parse_mir_spanview: &str = \"`statement` (default), `terminator`, or `block`\";\n+    pub const parse_dump_mono_stats: &str = \"`markdown` (default) or `json`\";\n     pub const parse_instrument_coverage: &str =\n         \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n     pub const parse_unpretty: &str = \"`string` or `string=string`\";\n@@ -820,6 +821,21 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_dump_mono_stats(slot: &mut DumpMonoStatsFormat, v: Option<&str>) -> bool {\n+        match v {\n+            None => true,\n+            Some(\"json\") => {\n+                *slot = DumpMonoStatsFormat::Json;\n+                true\n+            }\n+            Some(\"markdown\") => {\n+                *slot = DumpMonoStatsFormat::Markdown;\n+                true\n+            }\n+            Some(_) => false,\n+        }\n+    }\n+\n     pub(crate) fn parse_instrument_coverage(\n         slot: &mut Option<InstrumentCoverage>,\n         v: Option<&str>,\n@@ -1295,7 +1311,9 @@ options! {\n         an additional `.html` file showing the computed coverage spans.\"),\n     dump_mono_stats: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n         parse_switch_with_opt_path, [UNTRACKED],\n-        \"output statistics about monomorphization collection (format: markdown)\"),\n+        \"output statistics about monomorphization collection\"),\n+    dump_mono_stats_format: DumpMonoStatsFormat = (DumpMonoStatsFormat::Markdown, parse_dump_mono_stats, [UNTRACKED],\n+        \"the format to use for -Z dump-mono-stats (`markdown` (default) or `json`)\"),\n     dwarf_version: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"version of DWARF debug information to emit (default: 2 or 4, depending on platform)\"),\n     dylib_lto: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "5d5f8d6d65405c5fd00d57f741d95c39dd12b4a7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -193,6 +193,7 @@ symbols! {\n         FromIterator,\n         FromResidual,\n         Future,\n+        FutureOutput,\n         FxHashMap,\n         FxHashSet,\n         GlobalAlloc,"}, {"sha": "8c7111cb3ff0b875f22a2369480d03aed05d26ce", "filename": "library/core/src/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Ffuture.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -37,6 +37,7 @@ use crate::task::{Context, Poll};\n pub trait Future {\n     /// The type of value produced on completion.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[rustc_diagnostic_item = \"FutureOutput\"]\n     type Output;\n \n     /// Attempt to resolve the future to a final value, registering"}, {"sha": "fcc5cfafd808d0cc2066366fe12d0c9cb55dbb7c", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -3,6 +3,7 @@\n //! This module contains a set of macros which are exported from the standard\n //! library. Each macro is available for use when linking against the standard\n //! library.\n+// ignore-tidy-dbg\n \n #[doc = include_str!(\"../../core/src/macros/panic.md\")]\n #[macro_export]"}, {"sha": "e0280854541a0d95b6979a84b2157c8e1966e55f", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -105,6 +105,7 @@ impl Step for BumpStage0 {\n \n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n         let mut cmd = builder.tool_cmd(Tool::BumpStage0);\n+        cmd.args(builder.config.cmd.args());\n         builder.run(&mut cmd);\n     }\n }"}, {"sha": "a497a75261fede1f681c1c163b6453ae2289420a", "filename": "src/doc/unstable-book/src/compiler-flags/dump-mono-stats-format.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats-format.md?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1,6 @@\n+# `dump-mono-stats-format`\n+\n+--------------------\n+\n+The `-Z dump-mono-stats-format` compiler flag controls what file format to use for `-Z dump-mono-stats`.\n+The default is markdown; currently JSON is also supported. JSON can be useful for programatically manipulating the results (e.g. to find the item that took the longest to compile)."}, {"sha": "4c8bc8b457898e59c693170a1e75c7846393256c", "filename": "src/doc/unstable-book/src/compiler-flags/dump-mono-stats.md", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdump-mono-stats.md?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1,14 @@\n+# `dump-mono-stats`\n+\n+--------------------\n+\n+The `-Z dump-mono-stats` compiler flag generates a file with a list of the monomorphized items in the current crate.\n+It is useful for investigating compile times.\n+\n+It accepts an optional directory where the file will be located. If no directory is specified, the file will be placed in the current directory.\n+\n+See also `-Z dump-mono-stats-format` and `-Z print-mono-items`. Unlike `print-mono-items`,\n+`dump-mono-stats` aggregates monomorphized items by definition and includes a size estimate of how\n+large the item is when codegened.\n+\n+See <https://rustc-dev-guide.rust-lang.org/backend/monomorph.html> for an overview of monomorphized items."}, {"sha": "7b5ae894311eff15f8d2e9184a23fbe426a230ac", "filename": "src/test/codegen/box-maybe-uninit-llvm14.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit-llvm14.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -2,7 +2,7 @@\n \n // Once we're done with llvm 14 and earlier, this test can be deleted.\n \n-#![crate_type=\"lib\"]\n+#![crate_type = \"lib\"]\n \n use std::mem::MaybeUninit;\n \n@@ -17,8 +17,16 @@ pub fn box_uninitialized() -> Box<MaybeUninit<usize>> {\n     Box::new(MaybeUninit::uninit())\n }\n \n-// FIXME: add a test for a bigger box. Currently broken, see\n-// https://github.com/rust-lang/rust/issues/58201.\n+// https://github.com/rust-lang/rust/issues/58201\n+#[no_mangle]\n+pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n+    // CHECK-LABEL: @box_uninitialized2\n+    // CHECK-NOT: store\n+    // CHECK-NOT: alloca\n+    // CHECK-NOT: memcpy\n+    // CHECK-NOT: memset\n+    Box::new(MaybeUninit::uninit())\n+}\n \n // Hide the LLVM 15+ `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above. We don't check the attributes here because we can't rely"}, {"sha": "c82b56a71f5cfde9d3c9a90f2143841536110119", "filename": "src/test/codegen/box-maybe-uninit.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbox-maybe-uninit.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -O\n // min-llvm-version: 15.0\n-#![crate_type=\"lib\"]\n+#![crate_type = \"lib\"]\n \n use std::mem::MaybeUninit;\n \n@@ -15,8 +15,16 @@ pub fn box_uninitialized() -> Box<MaybeUninit<usize>> {\n     Box::new(MaybeUninit::uninit())\n }\n \n-// FIXME: add a test for a bigger box. Currently broken, see\n-// https://github.com/rust-lang/rust/issues/58201.\n+// https://github.com/rust-lang/rust/issues/58201\n+#[no_mangle]\n+pub fn box_uninitialized2() -> Box<MaybeUninit<[usize; 1024 * 1024]>> {\n+    // CHECK-LABEL: @box_uninitialized2\n+    // CHECK-NOT: store\n+    // CHECK-NOT: alloca\n+    // CHECK-NOT: memcpy\n+    // CHECK-NOT: memset\n+    Box::new(MaybeUninit::uninit())\n+}\n \n // Hide the `allocalign` attribute in the declaration of __rust_alloc\n // from the CHECK-NOT above, and also verify the attributes got set reasonably."}, {"sha": "fe1112fb0a4a8463827cb7cb2e3e9ebbf30cc80b", "filename": "src/test/run-make/dump-mono-stats/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Frun-make%2Fdump-mono-stats%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Frun-make%2Fdump-mono-stats%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdump-mono-stats%2FMakefile?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1,5 @@\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(RUSTC) --crate-type lib foo.rs -Z dump-mono-stats=$(TMPDIR) -Zdump-mono-stats-format=json\n+\tcat $(TMPDIR)/foo.mono_items.json | $(CGREP) '\"name\":\"bar\"'"}, {"sha": "c5c0bc606cd699cda9d339035a1ca95bff4a70f4", "filename": "src/test/run-make/dump-mono-stats/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Frun-make%2Fdump-mono-stats%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Frun-make%2Fdump-mono-stats%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdump-mono-stats%2Ffoo.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1 @@\n+pub fn bar() {}"}, {"sha": "9bd6c5fedf5427b897bd35129697795b0f236056", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -35,7 +35,8 @@\n     -Z            dump-mir-exclude-pass-number=val -- exclude the pass number when dumping MIR (used in tests) (default: no)\n     -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n     -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n-    -Z                         dump-mono-stats=val -- output statistics about monomorphization collection (format: markdown)\n+    -Z                         dump-mono-stats=val -- output statistics about monomorphization collection\n+    -Z                  dump-mono-stats-format=val -- the format to use for -Z dump-mono-stats (`markdown` (default) or `json`)\n     -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n     -Z                               dylib-lto=val -- enables LTO for dylib crate type\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)"}, {"sha": "35e39bebb29ab85d7d1424e4ea28c01aac7190a8", "filename": "src/test/ui/fn/issue-80179.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -18,9 +18,9 @@ fn returns_fn_ptr() -> _ {\n fn returns_closure() -> _ {\n //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n //~| NOTE not allowed in type signatures\n-//~| HELP consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n-//~| NOTE for more information on `Fn` traits and closure types, see\n-//        https://doc.rust-lang.org/book/ch13-01-closures.html\n+//~| HELP replace with an appropriate return type\n+//~| SUGGESTION impl Fn() -> i32\n+//~| NOTE for more information on `Fn` traits and closure types\n     || 0\n }\n "}, {"sha": "f5d6c44db75119be1fab07c1a1f006e8b90dfcb8", "filename": "src/test/ui/fn/issue-80179.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fissue-80179.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -11,9 +11,11 @@ error[E0121]: the placeholder `_` is not allowed within types on item signatures\n   --> $DIR/issue-80179.rs:18:25\n    |\n LL | fn returns_closure() -> _ {\n-   |                         ^ not allowed in type signatures\n+   |                         ^\n+   |                         |\n+   |                         not allowed in type signatures\n+   |                         help: replace with an appropriate return type: `impl Fn() -> i32`\n    |\n-   = help: consider using an `Fn`, `FnMut`, or `FnOnce` trait bound\n    = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n \n error: aborting due to 2 previous errors"}, {"sha": "33daa1ea0b400705afcf78ae9a5be365f6567ba1", "filename": "src/test/ui/fn/suggest-return-closure.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1,34 @@\n+fn fn_once() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl FnOnce()\n+    //~| NOTE for more information on `Fn` traits and closure types\n+    let x = String::new();\n+    || {\n+        drop(x);\n+    }\n+}\n+\n+fn fn_mut() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl FnMut(char)\n+    //~| NOTE for more information on `Fn` traits and closure types\n+    let x = String::new();\n+    |c| {\n+        x.push(c);\n+    }\n+}\n+\n+fn fun() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl Fn() -> i32\n+    //~| NOTE for more information on `Fn` traits and closure types\n+    || 1i32\n+}\n+\n+fn main() {}"}, {"sha": "341044469ea37d48299657723a8a6106be499099", "filename": "src/test/ui/fn/suggest-return-closure.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-closure.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1,36 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-closure.rs:1:17\n+   |\n+LL | fn fn_once() -> _ {\n+   |                 ^\n+   |                 |\n+   |                 not allowed in type signatures\n+   |                 help: replace with an appropriate return type: `impl FnOnce()`\n+   |\n+   = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-closure.rs:13:16\n+   |\n+LL | fn fn_mut() -> _ {\n+   |                ^\n+   |                |\n+   |                not allowed in type signatures\n+   |                help: replace with an appropriate return type: `impl FnMut(char)`\n+   |\n+   = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-closure.rs:25:13\n+   |\n+LL | fn fun() -> _ {\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace with an appropriate return type: `impl Fn() -> i32`\n+   |\n+   = note: for more information on `Fn` traits and closure types, see https://doc.rust-lang.org/book/ch13-01-closures.html\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "750740d9426106edfa5dda3798eda6eb7132af49", "filename": "src/test/ui/fn/suggest-return-future.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1,23 @@\n+// edition: 2021\n+\n+async fn a() -> i32 {\n+    0\n+}\n+\n+fn foo() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl Future<Output = i32>\n+    a()\n+}\n+\n+fn bar() -> _ {\n+    //~^ ERROR the placeholder `_` is not allowed within types on item signatures for return types [E0121]\n+    //~| NOTE not allowed in type signatures\n+    //~| HELP replace with an appropriate return type\n+    //~| SUGGESTION impl Future<Output = i32>\n+    async { a().await }\n+}\n+\n+fn main() {}"}, {"sha": "a4c8b5d8c4b5dd864f6ce0f596b36fdbc5920b7e", "filename": "src/test/ui/fn/suggest-return-future.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fsuggest-return-future.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -0,0 +1,21 @@\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-future.rs:7:13\n+   |\n+LL | fn foo() -> _ {\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace with an appropriate return type: `impl Future<Output = i32>`\n+\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for return types\n+  --> $DIR/suggest-return-future.rs:15:13\n+   |\n+LL | fn bar() -> _ {\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace with an appropriate return type: `impl Future<Output = i32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "ecbdb14dc868e502fde7ffd64cc40a36c2b95f96", "filename": "src/test/ui/lexer/error-stage.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Flexer%2Ferror-stage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Flexer%2Ferror-stage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Ferror-stage.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -49,6 +49,8 @@ error: integer literal is too large\n    |\n LL |     999340282366920938463463374607431768211455999;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `340282366920938463463374607431768211455`\n \n error: aborting due to 8 previous errors\n "}, {"sha": "56bdc50e40d689031f729d6ec7408e8bad88e3c8", "filename": "src/test/ui/lexer/lex-bad-numeric-literals.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Flexer%2Flex-bad-numeric-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Flexer%2Flex-bad-numeric-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-numeric-literals.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-linelength\n+\n fn main() {\n     0o1.0; //~ ERROR: octal float literal is not supported\n     0o2f32; //~ ERROR: octal float literal is not supported\n@@ -15,6 +17,12 @@ fn main() {\n     //~^ ERROR: integer literal is too large\n     9900000000000000000000000000999999999999999999999999999999;\n     //~^ ERROR: integer literal is too large\n+    0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110;\n+    //~^ ERROR: integer literal is too large\n+    0o37777777777777777777777777777777777777777770;\n+    //~^ ERROR: integer literal is too large\n+    0xffffffffffffffffffffffffffffffff0;\n+    //~^ ERROR: integer literal is too large\n     0x; //~ ERROR: no valid digits\n     0xu32; //~ ERROR: no valid digits\n     0ou32; //~ ERROR: no valid digits"}, {"sha": "1457541970af456b03d709f22c7baa2f893ce050", "filename": "src/test/ui/lexer/lex-bad-numeric-literals.stderr", "status": "modified", "additions": 52, "deletions": 24, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Flexer%2Flex-bad-numeric-literals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Flexer%2Flex-bad-numeric-literals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-bad-numeric-literals.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -1,141 +1,169 @@\n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:2:5\n+  --> $DIR/lex-bad-numeric-literals.rs:4:5\n    |\n LL |     0o1.0;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:4:5\n+  --> $DIR/lex-bad-numeric-literals.rs:6:5\n    |\n LL |     0o3.0f32;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:5:5\n+  --> $DIR/lex-bad-numeric-literals.rs:7:5\n    |\n LL |     0o4e4;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:6:5\n+  --> $DIR/lex-bad-numeric-literals.rs:8:5\n    |\n LL |     0o5.0e5;\n    |     ^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:7:5\n+  --> $DIR/lex-bad-numeric-literals.rs:9:5\n    |\n LL |     0o6e6f32;\n    |     ^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:8:5\n+  --> $DIR/lex-bad-numeric-literals.rs:10:5\n    |\n LL |     0o7.0e7f64;\n    |     ^^^^^^^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:9:5\n+  --> $DIR/lex-bad-numeric-literals.rs:11:5\n    |\n LL |     0x8.0e+9;\n    |     ^^^^^^^^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:10:5\n+  --> $DIR/lex-bad-numeric-literals.rs:12:5\n    |\n LL |     0x9.0e-9;\n    |     ^^^^^^^^\n \n error[E0768]: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:11:5\n+  --> $DIR/lex-bad-numeric-literals.rs:13:5\n    |\n LL |     0o;\n    |     ^^\n \n error: expected at least one digit in exponent\n-  --> $DIR/lex-bad-numeric-literals.rs:12:5\n+  --> $DIR/lex-bad-numeric-literals.rs:14:5\n    |\n LL |     1e+;\n    |     ^^^\n \n error: hexadecimal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:13:5\n+  --> $DIR/lex-bad-numeric-literals.rs:15:5\n    |\n LL |     0x539.0;\n    |     ^^^^^^^\n \n error[E0768]: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:18:5\n+  --> $DIR/lex-bad-numeric-literals.rs:26:5\n    |\n LL |     0x;\n    |     ^^\n \n error[E0768]: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:19:5\n+  --> $DIR/lex-bad-numeric-literals.rs:27:5\n    |\n LL |     0xu32;\n    |     ^^\n \n error[E0768]: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:20:5\n+  --> $DIR/lex-bad-numeric-literals.rs:28:5\n    |\n LL |     0ou32;\n    |     ^^\n \n error[E0768]: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:21:5\n+  --> $DIR/lex-bad-numeric-literals.rs:29:5\n    |\n LL |     0bu32;\n    |     ^^\n \n error[E0768]: no valid digits found for number\n-  --> $DIR/lex-bad-numeric-literals.rs:22:5\n+  --> $DIR/lex-bad-numeric-literals.rs:30:5\n    |\n LL |     0b;\n    |     ^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:24:5\n+  --> $DIR/lex-bad-numeric-literals.rs:32:5\n    |\n LL |     0o123.456;\n    |     ^^^^^^^^^\n \n error: binary float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:26:5\n+  --> $DIR/lex-bad-numeric-literals.rs:34:5\n    |\n LL |     0b111.101;\n    |     ^^^^^^^^^\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:3:5\n+  --> $DIR/lex-bad-numeric-literals.rs:5:5\n    |\n LL |     0o2f32;\n    |     ^^^^^^ not supported\n \n error: integer literal is too large\n-  --> $DIR/lex-bad-numeric-literals.rs:14:5\n+  --> $DIR/lex-bad-numeric-literals.rs:16:5\n    |\n LL |     9900000000000000000000000000999999999999999999999999999999;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `340282366920938463463374607431768211455`\n \n error: integer literal is too large\n-  --> $DIR/lex-bad-numeric-literals.rs:16:5\n+  --> $DIR/lex-bad-numeric-literals.rs:18:5\n    |\n LL |     9900000000000000000000000000999999999999999999999999999999;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `340282366920938463463374607431768211455`\n+\n+error: integer literal is too large\n+  --> $DIR/lex-bad-numeric-literals.rs:20:5\n+   |\n+LL |     0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111`\n+\n+error: integer literal is too large\n+  --> $DIR/lex-bad-numeric-literals.rs:22:5\n+   |\n+LL |     0o37777777777777777777777777777777777777777770;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `0o3777777777777777777777777777777777777777777`\n+\n+error: integer literal is too large\n+  --> $DIR/lex-bad-numeric-literals.rs:24:5\n+   |\n+LL |     0xffffffffffffffffffffffffffffffff0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `0xffffffffffffffffffffffffffffffff`\n \n error: octal float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:23:5\n+  --> $DIR/lex-bad-numeric-literals.rs:31:5\n    |\n LL |     0o123f64;\n    |     ^^^^^^^^ not supported\n \n error: binary float literal is not supported\n-  --> $DIR/lex-bad-numeric-literals.rs:25:5\n+  --> $DIR/lex-bad-numeric-literals.rs:33:5\n    |\n LL |     0b101f64;\n    |     ^^^^^^^^ not supported\n \n-error: aborting due to 23 previous errors\n+error: aborting due to 26 previous errors\n \n For more information about this error, try `rustc --explain E0768`."}, {"sha": "8807279c27f93577096448ff5711f26cd1c8241e", "filename": "src/test/ui/macros/issue-104769-concat_bytes-invalid-literal.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-104769-concat_bytes-invalid-literal.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -11,6 +11,8 @@ error: integer literal is too large\n    |\n LL |     concat_bytes!(888888888888888888888888888888888888888);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `340282366920938463463374607431768211455`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "49d6aa5eff8ceee845bf6295d5604255be866ce7", "filename": "src/test/ui/parser/int-literal-too-large-span.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fparser%2Fint-literal-too-large-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fparser%2Fint-literal-too-large-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fint-literal-too-large-span.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -3,6 +3,8 @@ error: integer literal is too large\n    |\n LL |     9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `340282366920938463463374607431768211455`\n \n error: aborting due to previous error\n "}, {"sha": "6e68c75850afe576d6b25e4bf5fe8213bf720c2f", "filename": "src/test/ui/parser/issues/issue-5544-a.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-5544-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-5544-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-5544-a.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -3,6 +3,8 @@ error: integer literal is too large\n    |\n LL |     let __isize = 340282366920938463463374607431768211456; // 2^128\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `340282366920938463463374607431768211455`\n \n error: aborting due to previous error\n "}, {"sha": "5d0e76d5d9445ce007477a430484ccb21068c348", "filename": "src/test/ui/parser/issues/issue-5544-b.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-5544-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-5544-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-5544-b.stderr?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -3,6 +3,8 @@ error: integer literal is too large\n    |\n LL |     let __isize = 0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff_ff;\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: value exceeds limit of `0xffffffffffffffffffffffffffffffff`\n \n error: aborting due to previous error\n "}, {"sha": "530a80b1ed374523894a2a23c5775f2cf8b9d78d", "filename": "src/tools/bump-stage0/src/main.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbump-stage0%2Fsrc%2Fmain.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -1,4 +1,4 @@\n-use anyhow::Error;\n+use anyhow::{Context, Error};\n use curl::easy::Easy;\n use indexmap::IndexMap;\n use std::collections::HashMap;\n@@ -13,12 +13,13 @@ struct Tool {\n     comments: Vec<String>,\n \n     channel: Channel,\n+    date: Option<String>,\n     version: [u16; 3],\n     checksums: IndexMap<String, String>,\n }\n \n impl Tool {\n-    fn new() -> Result<Self, Error> {\n+    fn new(date: Option<String>) -> Result<Self, Error> {\n         let channel = match std::fs::read_to_string(\"src/ci/channel\")?.trim() {\n             \"stable\" => Channel::Stable,\n             \"beta\" => Channel::Beta,\n@@ -40,6 +41,7 @@ impl Tool {\n         Ok(Self {\n             channel,\n             version,\n+            date,\n             config: existing.config,\n             comments: existing.comments,\n             checksums: IndexMap::new(),\n@@ -84,7 +86,7 @@ impl Tool {\n             Channel::Nightly => \"beta\".to_string(),\n         };\n \n-        let manifest = fetch_manifest(&self.config, &channel)?;\n+        let manifest = fetch_manifest(&self.config, &channel, self.date.as_deref())?;\n         self.collect_checksums(&manifest, COMPILER_COMPONENTS)?;\n         Ok(Stage0Toolchain {\n             date: manifest.date,\n@@ -110,7 +112,7 @@ impl Tool {\n             return Ok(None);\n         }\n \n-        let manifest = fetch_manifest(&self.config, \"nightly\")?;\n+        let manifest = fetch_manifest(&self.config, \"nightly\", self.date.as_deref())?;\n         self.collect_checksums(&manifest, RUSTFMT_COMPONENTS)?;\n         Ok(Some(Stage0Toolchain { date: manifest.date, version: \"nightly\".into() }))\n     }\n@@ -141,16 +143,19 @@ impl Tool {\n }\n \n fn main() -> Result<(), Error> {\n-    let tool = Tool::new()?;\n+    let tool = Tool::new(std::env::args().nth(1))?;\n     tool.update_json()?;\n     Ok(())\n }\n \n-fn fetch_manifest(config: &Config, channel: &str) -> Result<Manifest, Error> {\n-    Ok(toml::from_slice(&http_get(&format!(\n-        \"{}/dist/channel-rust-{}.toml\",\n-        config.dist_server, channel\n-    ))?)?)\n+fn fetch_manifest(config: &Config, channel: &str, date: Option<&str>) -> Result<Manifest, Error> {\n+    let url = if let Some(date) = date {\n+        format!(\"{}/dist/{}/channel-rust-{}.toml\", config.dist_server, date, channel)\n+    } else {\n+        format!(\"{}/dist/channel-rust-{}.toml\", config.dist_server, channel)\n+    };\n+\n+    Ok(toml::from_slice(&http_get(&url)?)?)\n }\n \n fn http_get(url: &str) -> Result<Vec<u8>, Error> {\n@@ -164,7 +169,7 @@ fn http_get(url: &str) -> Result<Vec<u8>, Error> {\n             data.extend_from_slice(new_data);\n             Ok(new_data.len())\n         })?;\n-        transfer.perform()?;\n+        transfer.perform().context(format!(\"failed to fetch {url}\"))?;\n     }\n     Ok(data)\n }"}, {"sha": "f409a86db26c0e1269bed716ff1ff03ac986f24c", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c18bc6137256693e604a701b7d1bf10e93aaa2d/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=5c18bc6137256693e604a701b7d1bf10e93aaa2d", "patch": "@@ -15,6 +15,7 @@\n //!\n //! A number of these checks can be opted-out of with various directives of the form:\n //! `// ignore-tidy-CHECK-NAME`.\n+// ignore-tidy-dbg\n \n use crate::walk::{filter_dirs, walk};\n use regex::{Regex, RegexSet};\n@@ -278,6 +279,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         let mut skip_leading_newlines =\n             contains_ignore_directive(can_contain, &contents, \"leading-newlines\");\n         let mut skip_copyright = contains_ignore_directive(can_contain, &contents, \"copyright\");\n+        let mut skip_dbg = contains_ignore_directive(can_contain, &contents, \"dbg\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n         let mut lines = 0;\n@@ -306,6 +308,21 @@ pub fn check(path: &Path, bad: &mut bool) {\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n+\n+            if trimmed.contains(\"dbg!\")\n+                && !trimmed.starts_with(\"//\")\n+                && !file\n+                    .ancestors()\n+                    .any(|a| a.ends_with(\"src/test\") || a.ends_with(\"library/alloc/tests\"))\n+                && filename != \"tests.rs\"\n+            {\n+                suppressible_tidy_err!(\n+                    err,\n+                    skip_dbg,\n+                    \"`dbg!` macro is intended as a debugging tool. It should not be in version control.\"\n+                )\n+            }\n+\n             if !under_rustfmt\n                 && line.chars().count() > max_columns\n                 && !long_line_is_ok(&extension, is_error_code, max_columns, line)"}]}