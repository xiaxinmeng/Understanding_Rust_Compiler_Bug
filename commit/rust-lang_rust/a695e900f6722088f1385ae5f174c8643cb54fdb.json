{"sha": "a695e900f6722088f1385ae5f174c8643cb54fdb", "node_id": "C_kwDOAAsO6NoAKGE2OTVlOTAwZjY3MjIwODhmMTM4NWFlNWYxNzRjODY0M2NiNTRmZGI", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2022-09-02T05:06:51Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2022-09-02T21:18:36Z"}, "message": "Create `trait Removable`, replace `ted` APIs with builder APIs", "tree": {"sha": "42fe79b5c3a5bc1cbb1f49e7a049919602f9c76b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42fe79b5c3a5bc1cbb1f49e7a049919602f9c76b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a695e900f6722088f1385ae5f174c8643cb54fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a695e900f6722088f1385ae5f174c8643cb54fdb", "html_url": "https://github.com/rust-lang/rust/commit/a695e900f6722088f1385ae5f174c8643cb54fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a695e900f6722088f1385ae5f174c8643cb54fdb/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37e20decadb4aecbae3b88502d4c130c9d9f31f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/37e20decadb4aecbae3b88502d4c130c9d9f31f4", "html_url": "https://github.com/rust-lang/rust/commit/37e20decadb4aecbae3b88502d4c130c9d9f31f4"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "1a7919a5a104d64ca22c3e6b09392ea5670587be", "filename": "crates/ide-assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -5,6 +5,7 @@ use hir::{Adt, Crate, HasAttrs, HasSource, ModuleDef, Semantics};\n use ide_db::RootDatabase;\n use ide_db::{famous_defs::FamousDefs, helpers::mod_path_to_ast};\n use itertools::Itertools;\n+use syntax::ast::edit_in_place::Removable;\n use syntax::ast::{self, make, AstNode, HasName, MatchArmList, MatchExpr, Pat};\n \n use crate::{"}, {"sha": "fc24659d1f1a0be62653ddbad131695166d4820b", "filename": "crates/ide-assists/src/handlers/inline_type_alias.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_type_alias.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -4,7 +4,8 @@\n \n use hir::{HasSource, PathResolution};\n use ide_db::{\n-    defs::Definition, imports::insert_use::remove_path_if_in_use_stmt, search::FileReference,\n+    defs::Definition, imports::insert_use::ast_to_remove_for_path_in_use_stmt,\n+    search::FileReference,\n };\n use itertools::Itertools;\n use std::collections::HashMap;\n@@ -72,7 +73,10 @@ pub(crate) fn inline_type_alias_uses(acc: &mut Assists, ctx: &AssistContext<'_>)\n                         path_type.syntax().ancestors().nth(3).and_then(ast::PathType::cast)\n                     });\n \n-                path_type_uses.iter().for_each(remove_path_if_in_use_stmt);\n+                path_type_uses\n+                    .iter()\n+                    .flat_map(ast_to_remove_for_path_in_use_stmt)\n+                    .for_each(|x| builder.delete(x.syntax().text_range()));\n                 for (target, replacement) in path_types.into_iter().filter_map(|path_type| {\n                     let replacement = inline(&ast_alias, &path_type)?.to_text(&concrete_type);\n                     let target = path_type.syntax().text_range();"}, {"sha": "20abf5636312f0e7fc81f717ec180e0099a17ab8", "filename": "crates/ide-assists/src/handlers/merge_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmerge_imports.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -1,6 +1,6 @@\n use either::Either;\n use ide_db::imports::merge_imports::{try_merge_imports, try_merge_trees, MergeBehavior};\n-use syntax::{algo::neighbor, ast, match_ast, ted, AstNode, SyntaxElement, SyntaxNode};\n+use syntax::{algo::neighbor, ast::{self, edit_in_place::Removable}, match_ast, ted, AstNode, SyntaxElement, SyntaxNode};\n \n use crate::{\n     assist_context::{AssistContext, Assists},\n@@ -76,7 +76,7 @@ pub(crate) fn merge_imports(acc: &mut Assists, ctx: &AssistContext<'_>) -> Optio\n                 .collect();\n             for edit in edits_mut {\n                 match edit {\n-                    Remove(it) => it.as_ref().either(ast::Use::remove, ast::UseTree::remove),\n+                    Remove(it) => it.as_ref().either(Removable::remove, Removable::remove),\n                     Replace(old, new) => ted::replace(old, new),\n                 }\n             }"}, {"sha": "788fc22c87167c995d7d16a4f8e1c8503fa4c263", "filename": "crates/ide-assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, edit_in_place::GenericParamsOwnerEdit, make, AstNode, HasName, HasTypeBounds},\n+    ast::{self, edit_in_place::{GenericParamsOwnerEdit, Removable}, make, AstNode, HasName, HasTypeBounds},\n     match_ast,\n };\n "}, {"sha": "266275972810eda7f2b94919fd3ea86bb800d78d", "filename": "crates/ide-assists/src/handlers/unmerge_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funmerge_use.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, make, HasVisibility},\n+    ast::{self, make, HasVisibility, edit_in_place::Removable},\n     ted::{self, Position},\n     AstNode, SyntaxKind,\n };"}, {"sha": "4ab6e2627fa75413837b55be578c1a237a4147c3", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -12,7 +12,7 @@ use syntax::{\n     ast::{\n         self,\n         edit::{self, AstNodeEdit},\n-        edit_in_place::AttrsOwnerEdit,\n+        edit_in_place::{AttrsOwnerEdit, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n     ted, AstNode, AstToken, Direction, SmolStr, SourceFile,"}, {"sha": "9be1d36634934a6405856ce820dc46989a85b13b", "filename": "crates/ide-db/src/imports/insert_use.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -7,7 +7,10 @@ use std::cmp::Ordering;\n use hir::Semantics;\n use syntax::{\n     algo,\n-    ast::{self, make, AstNode, HasAttrs, HasModuleItem, HasVisibility, PathSegmentKind},\n+    ast::{\n+        self, edit_in_place::Removable, make, AstNode, HasAttrs, HasModuleItem, HasVisibility,\n+        PathSegmentKind,\n+    },\n     ted, Direction, NodeOrToken, SyntaxKind, SyntaxNode,\n };\n \n@@ -192,20 +195,24 @@ pub fn insert_use(scope: &ImportScope, path: ast::Path, cfg: &InsertUseConfig) {\n     insert_use_(scope, &path, cfg.group, use_item);\n }\n \n-pub fn remove_path_if_in_use_stmt(path: &ast::Path) {\n+pub fn ast_to_remove_for_path_in_use_stmt(path: &ast::Path) -> Option<Box<dyn Removable>> {\n     // FIXME: improve this\n     if path.parent_path().is_some() {\n-        return;\n+        return None;\n     }\n-    if let Some(use_tree) = path.syntax().parent().and_then(ast::UseTree::cast) {\n-        if use_tree.use_tree_list().is_some() || use_tree.star_token().is_some() {\n-            return;\n-        }\n-        if let Some(use_) = use_tree.syntax().parent().and_then(ast::Use::cast) {\n-            use_.remove();\n-            return;\n-        }\n-        use_tree.remove();\n+    let use_tree = path.syntax().parent().and_then(ast::UseTree::cast)?;\n+    if use_tree.use_tree_list().is_some() || use_tree.star_token().is_some() {\n+        return None;\n+    }\n+    if let Some(use_) = use_tree.syntax().parent().and_then(ast::Use::cast) {\n+        return Some(Box::new(use_));\n+    }\n+    Some(Box::new(use_tree))\n+}\n+\n+pub fn remove_path_if_in_use_stmt(path: &ast::Path) {\n+    if let Some(node) = ast_to_remove_for_path_in_use_stmt(path) {\n+        node.remove();\n     }\n }\n "}, {"sha": "1e4bd2ef2574f0a3978de50cb255812ab4415ac3", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a695e900f6722088f1385ae5f174c8643cb54fdb/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=a695e900f6722088f1385ae5f174c8643cb54fdb", "patch": "@@ -248,8 +248,12 @@ impl ast::WhereClause {\n     }\n }\n \n-impl ast::TypeBoundList {\n-    pub fn remove(&self) {\n+pub trait Removable : AstNode {\n+    fn remove(&self);\n+}\n+\n+impl Removable for ast::TypeBoundList {\n+    fn remove(&self) {\n         match self.syntax().siblings_with_tokens(Direction::Prev).find(|it| it.kind() == T![:]) {\n             Some(colon) => ted::remove_all(colon..=self.syntax().clone().into()),\n             None => ted::remove(self.syntax()),\n@@ -267,8 +271,8 @@ impl ast::PathSegment {\n     }\n }\n \n-impl ast::UseTree {\n-    pub fn remove(&self) {\n+impl Removable for ast::UseTree {\n+    fn remove(&self) {\n         for dir in [Direction::Next, Direction::Prev] {\n             if let Some(next_use_tree) = neighbor(self, dir) {\n                 let separators = self\n@@ -282,7 +286,9 @@ impl ast::UseTree {\n         }\n         ted::remove(self.syntax());\n     }\n+}\n \n+impl ast::UseTree {\n     pub fn get_or_create_use_tree_list(&self) -> ast::UseTreeList {\n         match self.use_tree_list() {\n             Some(it) => it,\n@@ -373,8 +379,8 @@ impl ast::UseTreeList {\n     }\n }\n \n-impl ast::Use {\n-    pub fn remove(&self) {\n+impl Removable for ast::Use {\n+    fn remove(&self) {\n         let next_ws = self\n             .syntax()\n             .next_sibling_or_token()\n@@ -444,8 +450,8 @@ impl ast::Fn {\n     }\n }\n \n-impl ast::MatchArm {\n-    pub fn remove(&self) {\n+impl Removable for ast::MatchArm {\n+    fn remove(&self) {\n         if let Some(sibling) = self.syntax().prev_sibling_or_token() {\n             if sibling.kind() == SyntaxKind::WHITESPACE {\n                 ted::remove(sibling);"}]}