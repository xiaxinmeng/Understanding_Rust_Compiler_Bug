{"sha": "933d481bdd1ad64804173e09a257dc46535d333e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzM2Q0ODFiZGQxYWQ2NDgwNDE3M2UwOWEyNTdkYzQ2NTM1ZDMzM2U=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-08-27T04:01:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-27T04:01:15Z"}, "message": "Rollup merge of #36004 - petrochenkov:hashloan, r=arielb1\n\nrustc_borrowck: Don't hash types in loan paths\n\n1) Types for equal loan paths are not always equal, they can sometimes differ in lifetimes, making equal loan paths hash differently.\n\nExample:\nhttps://github.com/rust-lang/rust/blob/71bdeea561355ba5adbc9a1f44f4f866a75a15c4/src/libcollections/linked_list.rs#L835-L856\n\nOne of `self.list`s has type\n```\n&ReFree(CodeExtent(15013/CallSiteScope { fn_id: 18907, body_id: 18912 }), BrNamed(0:DefIndex(3066), 'a(397), WontChange)) mut linked_list::LinkedList<T>\n```\nand other has type\n```\n&ReScope(CodeExtent(15018/Remainder(BlockRemainder { block: 18912, first_statement_index: 0 }))) mut linked_list::LinkedList<T>\n```\n(... but I'm not sure it's not a bug actually.)\n\n2) Not hashing types is faster than hashing types.\n\nr? @arielb1", "tree": {"sha": "1195bba5734e4351a67099cceff75523eb28df35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1195bba5734e4351a67099cceff75523eb28df35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/933d481bdd1ad64804173e09a257dc46535d333e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/933d481bdd1ad64804173e09a257dc46535d333e", "html_url": "https://github.com/rust-lang/rust/commit/933d481bdd1ad64804173e09a257dc46535d333e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/933d481bdd1ad64804173e09a257dc46535d333e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2a381e0e8d127c44702d79dd697e15685454e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2a381e0e8d127c44702d79dd697e15685454e2", "html_url": "https://github.com/rust-lang/rust/commit/7a2a381e0e8d127c44702d79dd697e15685454e2"}, {"sha": "14b4d72e01708a82e3d070f72ac87988f08df7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/14b4d72e01708a82e3d070f72ac87988f08df7da", "html_url": "https://github.com/rust-lang/rust/commit/14b4d72e01708a82e3d070f72ac87988f08df7da"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "6137afbb59f4d40b2129a0d889b0e80e40a1c645", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/933d481bdd1ad64804173e09a257dc46535d333e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933d481bdd1ad64804173e09a257dc46535d333e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=933d481bdd1ad64804173e09a257dc46535d333e", "patch": "@@ -41,6 +41,7 @@ use rustc::ty::{self, TyCtxt};\n use std::fmt;\n use std::mem;\n use std::rc::Rc;\n+use std::hash::{Hash, Hasher};\n use syntax::ast;\n use syntax::attr::AttrMetaMethods;\n use syntax_pos::{MultiSpan, Span};\n@@ -345,18 +346,21 @@ impl<'tcx> Loan<'tcx> {\n     }\n }\n \n-#[derive(Eq, Hash)]\n+#[derive(Eq)]\n pub struct LoanPath<'tcx> {\n     kind: LoanPathKind<'tcx>,\n     ty: ty::Ty<'tcx>,\n }\n \n impl<'tcx> PartialEq for LoanPath<'tcx> {\n     fn eq(&self, that: &LoanPath<'tcx>) -> bool {\n-        let r = self.kind == that.kind;\n-        debug_assert!(self.ty == that.ty || !r,\n-                      \"Somehow loan paths are equal though their tys are not.\");\n-        r\n+        self.kind == that.kind\n+    }\n+}\n+\n+impl<'tcx> Hash for LoanPath<'tcx> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.kind.hash(state);\n     }\n }\n "}]}