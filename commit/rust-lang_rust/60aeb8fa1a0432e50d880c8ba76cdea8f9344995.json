{"sha": "60aeb8fa1a0432e50d880c8ba76cdea8f9344995", "node_id": "C_kwDOAAsO6NoAKDYwYWViOGZhMWEwNDMyZTUwZDg4MGM4YmE3NmNkZWE4ZjkzNDQ5OTU", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-17T16:08:43Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-17T16:08:43Z"}, "message": "Move fallback_bound_vars to the only place it's used now", "tree": {"sha": "0857e2fb325315bfb825056bf36fef98568184d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0857e2fb325315bfb825056bf36fef98568184d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60aeb8fa1a0432e50d880c8ba76cdea8f9344995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60aeb8fa1a0432e50d880c8ba76cdea8f9344995", "html_url": "https://github.com/rust-lang/rust/commit/60aeb8fa1a0432e50d880c8ba76cdea8f9344995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60aeb8fa1a0432e50d880c8ba76cdea8f9344995/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ea2e0bd5bdbc60de16e212434df06831551fa08", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea2e0bd5bdbc60de16e212434df06831551fa08", "html_url": "https://github.com/rust-lang/rust/commit/9ea2e0bd5bdbc60de16e212434df06831551fa08"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "41bb94c5d554121c0db4fbc8a912e5e2d3dd7dc9", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/60aeb8fa1a0432e50d880c8ba76cdea8f9344995/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aeb8fa1a0432e50d880c8ba76cdea8f9344995/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=60aeb8fa1a0432e50d880c8ba76cdea8f9344995", "patch": "@@ -9,6 +9,8 @@ use std::cell::{Cell, RefCell};\n use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n+use chalk_ir::fold::Fold;\n+use chalk_ir::interner::HasInterner;\n use chalk_ir::{cast::Cast, fold::Shift, Mutability, Safety};\n use hir_def::generics::TypeOrConstParamData;\n use hir_def::intern::Interned;\n@@ -36,7 +38,6 @@ use stdx::{impl_from, never};\n use syntax::{ast, SmolStr};\n \n use crate::consteval::{path_to_const, unknown_const_as_generic, unknown_const_usize, usize_const};\n-use crate::method_resolution::fallback_bound_vars;\n use crate::utils::Generics;\n use crate::{all_super_traits, make_binders, Const, GenericArgData, ParamKind};\n use crate::{\n@@ -1701,3 +1702,28 @@ pub(crate) fn const_or_path_to_chalk(\n         }\n     }\n }\n+\n+/// This replaces any 'free' Bound vars in `s` (i.e. those with indices past\n+/// num_vars_to_keep) by `TyKind::Unknown`.\n+fn fallback_bound_vars<T: Fold<Interner> + HasInterner<Interner = Interner>>(\n+    s: T,\n+    num_vars_to_keep: usize,\n+) -> T::Result {\n+    crate::fold_free_vars(\n+        s,\n+        |bound, binders| {\n+            if bound.index >= num_vars_to_keep && bound.debruijn == DebruijnIndex::INNERMOST {\n+                TyKind::Error.intern(Interner)\n+            } else {\n+                bound.shifted_in_from(binders).to_ty(Interner)\n+            }\n+        },\n+        |ty, bound, binders| {\n+            if bound.index >= num_vars_to_keep && bound.debruijn == DebruijnIndex::INNERMOST {\n+                consteval::unknown_const(ty.clone())\n+            } else {\n+                bound.shifted_in_from(binders).to_const(Interner, ty)\n+            }\n+        },\n+    )\n+}"}, {"sha": "1c939f3d8aac2ffaef6ce0b458ea56b4f00622a2", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/60aeb8fa1a0432e50d880c8ba76cdea8f9344995/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60aeb8fa1a0432e50d880c8ba76cdea8f9344995/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=60aeb8fa1a0432e50d880c8ba76cdea8f9344995", "patch": "@@ -6,7 +6,7 @@ use std::{iter, ops::ControlFlow, sync::Arc};\n \n use arrayvec::ArrayVec;\n use base_db::{CrateId, Edition};\n-use chalk_ir::{cast::Cast, fold::Fold, interner::HasInterner, Mutability, UniverseIndex};\n+use chalk_ir::{cast::Cast, Mutability, UniverseIndex};\n use hir_def::{\n     item_scope::ItemScope, lang_item::LangItemTarget, nameres::DefMap, AssocItemId, BlockId,\n     ConstId, FunctionId, GenericDefId, HasModule, ImplId, ItemContainerId, Lookup, ModuleDefId,\n@@ -18,7 +18,6 @@ use stdx::never;\n \n use crate::{\n     autoderef::{self, AutoderefKind},\n-    consteval,\n     db::HirDatabase,\n     from_foreign_def_id,\n     infer::{unify::InferenceTable, Adjust, Adjustment, AutoBorrow, OverloadedDeref, PointerCast},\n@@ -1061,31 +1060,6 @@ fn is_valid_candidate(\n     }\n }\n \n-/// This replaces any 'free' Bound vars in `s` (i.e. those with indices past\n-/// num_vars_to_keep) by `TyKind::Unknown`.\n-pub(crate) fn fallback_bound_vars<T: Fold<Interner> + HasInterner<Interner = Interner>>(\n-    s: T,\n-    num_vars_to_keep: usize,\n-) -> T::Result {\n-    crate::fold_free_vars(\n-        s,\n-        |bound, binders| {\n-            if bound.index >= num_vars_to_keep && bound.debruijn == DebruijnIndex::INNERMOST {\n-                TyKind::Error.intern(Interner)\n-            } else {\n-                bound.shifted_in_from(binders).to_ty(Interner)\n-            }\n-        },\n-        |ty, bound, binders| {\n-            if bound.index >= num_vars_to_keep && bound.debruijn == DebruijnIndex::INNERMOST {\n-                consteval::usize_const(None)\n-            } else {\n-                bound.shifted_in_from(binders).to_const(Interner, ty)\n-            }\n-        },\n-    )\n-}\n-\n pub fn implements_trait(\n     ty: &Canonical<Ty>,\n     db: &dyn HirDatabase,"}]}