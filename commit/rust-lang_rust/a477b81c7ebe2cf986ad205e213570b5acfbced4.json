{"sha": "a477b81c7ebe2cf986ad205e213570b5acfbced4", "node_id": "C_kwDOAAsO6NoAKGE0NzdiODFjN2ViZTJjZjk4NmFkMjA1ZTIxMzU3MGI1YWNmYmNlZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T11:19:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T11:19:01Z"}, "message": "Auto merge of #2880 - RalfJung:sync, r=RalfJung\n\nincrease timing slack for sync tests; port tests to 2021 edition", "tree": {"sha": "23e95b7a31468a269efcc29419ea84b4fdf40489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e95b7a31468a269efcc29419ea84b4fdf40489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a477b81c7ebe2cf986ad205e213570b5acfbced4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a477b81c7ebe2cf986ad205e213570b5acfbced4", "html_url": "https://github.com/rust-lang/rust/commit/a477b81c7ebe2cf986ad205e213570b5acfbced4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a477b81c7ebe2cf986ad205e213570b5acfbced4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5a5167101f0f828a2c7a084a3a7631ad1a44ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5a5167101f0f828a2c7a084a3a7631ad1a44ed", "html_url": "https://github.com/rust-lang/rust/commit/3d5a5167101f0f828a2c7a084a3a7631ad1a44ed"}, {"sha": "3309f120f21910fd0e55c98d96f83b92708060dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3309f120f21910fd0e55c98d96f83b92708060dc", "html_url": "https://github.com/rust-lang/rust/commit/3309f120f21910fd0e55c98d96f83b92708060dc"}], "stats": {"total": 150, "additions": 115, "deletions": 35}, "files": [{"sha": "c13659957376d84e6c2f4a54ab60b8b43e03a12a", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -52,7 +52,7 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         mode,\n         program: miri_path(),\n         quiet: false,\n-        edition: Some(\"2018\".into()),\n+        edition: Some(\"2021\".into()),\n         ..Config::default()\n     };\n "}, {"sha": "c2de4afd68fa68ab7c13a157928d787ded794a45", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_too_few_args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -7,8 +7,8 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: inside `thread_start` at RUSTLIB/core/src/panic.rs:LL:CC\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "85ae930d439bb2fb6522851401eb26e28c61f9b8", "filename": "src/tools/miri/tests/fail/concurrency/libc_pthread_create_too_many_args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -7,8 +7,8 @@ LL |     panic!()\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: BACKTRACE:\n-   = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: inside `thread_start` at RUSTLIB/core/src/panic.rs:LL:CC\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "42077dfae2d38dd0f57d7fcb9764de7df3106b5b", "filename": "src/tools/miri/tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -26,6 +26,7 @@ pub fn main() {\n     //  2. write\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -34,6 +35,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n \n             // Note: could also error due to reading uninitialized memory, but the data-race detector triggers first."}, {"sha": "53f4e637a197d4f3318929316aab49b2ca5ea670", "filename": "src/tools/miri/tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  2. write\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -34,6 +35,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Relaxed) = 2; //~ ERROR: Data race detected between (1) Allocate on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });"}, {"sha": "9606df1d6ff784df005e3e54512a17ce8dc77f39", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -16,10 +16,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *(c.0 as *mut usize) = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             (&*c.0).load(Ordering::SeqCst) //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Load on thread `<unnamed>`\n         });\n "}, {"sha": "0e29ab32eef9beebfcc42a6edd20b0bf9fa4a963", "filename": "src/tools/miri/tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -17,11 +17,13 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             atomic_ref.load(Ordering::SeqCst)\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between (1) Atomic Load on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });"}, {"sha": "6f1792bc8f4f741d11782bd3feaa13dbf17a0535", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -17,11 +17,13 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             atomic_ref.store(32, Ordering::SeqCst)\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             *atomic_ref.get_mut() //~ ERROR: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n         });"}, {"sha": "e84207e655d617bbeefb3eec2e4a5e67a5dfd4bb", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -16,10 +16,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let _val = *(c.0 as *mut usize);\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             (&*c.0).store(32, Ordering::SeqCst); //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>`\n         });\n "}, {"sha": "ca269b1bd2ac03677674e019702d58a049673e02", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -16,10 +16,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *(c.0 as *mut usize) = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             (&*c.0).store(64, Ordering::SeqCst); //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Atomic Store on thread `<unnamed>`\n         });\n "}, {"sha": "0d69a9a332dc4812d7b35a5e0fba0cafb74ccf1e", "filename": "src/tools/miri/tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -17,11 +17,13 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             atomic_ref.store(64, Ordering::SeqCst);\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let atomic_ref = &mut *c.0;\n             *atomic_ref.get_mut() = 32; //~ ERROR: Data race detected between (1) Atomic Store on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });"}, {"sha": "0679b81f0122c0deda6070bf01ad5983a275a14b", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -18,6 +18,7 @@ fn main() {\n \n     let join = unsafe {\n         spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             *c.0 = 32;\n         })\n     };\n@@ -34,6 +35,7 @@ fn main() {\n \n     let join2 = unsafe {\n         spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         })\n     };"}, {"sha": "3c5dd424eb110799e31008653c9ba43ae3966962", "filename": "src/tools/miri/tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -18,6 +18,7 @@ fn main() {\n \n     let join = unsafe {\n         spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         })\n     };"}, {"sha": "3c25cdc0d8d878b967a7d7b6444ee81715594a6e", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -20,10 +20,12 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let _val = *ptr.0;\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 //~^ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n                 ptr.0 as *mut _,"}, {"sha": "5d7a0cc1dc93e1f9a79a7df97054c834fa034c1a", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -20,6 +20,7 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n@@ -28,6 +29,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Also an error of the form: Data race detected between (1) Deallocate on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 //~ ERROR: dereferenced after this allocation got freed"}, {"sha": "87b5f204816cbdd696b8a1594758e7b1b66c70ae", "filename": "src/tools/miri/tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -26,6 +26,7 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -39,6 +40,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire)\n         });"}, {"sha": "b700f50ce1911e95f846532401b8e91beff1a131", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -19,10 +19,12 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             *ptr.0 = 2;\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 //~^ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Deallocate on thread `<unnamed>`\n                 ptr.0 as *mut _,"}, {"sha": "a7f43f03c0258e5156bc92e6d93e253900b20261", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -19,6 +19,7 @@ pub fn main() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             __rust_dealloc(\n                 ptr.0 as *mut _,\n                 std::mem::size_of::<usize>(),\n@@ -27,6 +28,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Also an error of the form: Data race detected between (1) Deallocate on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n             // but the invalid allocation is detected first.\n             *ptr.0 = 2; //~ ERROR: dereferenced after this allocation got freed"}, {"sha": "3d35187a018c03103df2a6266eabc876ef14a0ba", "filename": "src/tools/miri/tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -26,6 +26,7 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -39,6 +40,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire) = 3;\n         });"}, {"sha": "b44be4ac64e8889dfc47422d3410366d9a679ff5", "filename": "src/tools/miri/tests/fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -26,10 +26,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n "}, {"sha": "aed3ca767f627bfa7d95601223e6c31f8621ba26", "filename": "src/tools/miri/tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -15,10 +15,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             let _val = *c.0;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Read on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n "}, {"sha": "40224ced12d0882446bb4147f9f52481ab7b858d", "filename": "src/tools/miri/tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -31,6 +31,7 @@ pub fn main() {\n     //  5. read-value\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -46,6 +47,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire) = 3;\n         });"}, {"sha": "1b691b996f141c3801024e50ffc0457f873744fe", "filename": "src/tools/miri/tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  4. load acquire : 2\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n@@ -36,6 +37,7 @@ pub fn main() {\n         });\n \n         let j3 = spawn(move || {\n+            let c = c; // avoid field capturing\n             if SYNC.load(Ordering::Acquire) == 2 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {"}, {"sha": "80b30053fc7004dbd723abdf137259c103dcdcb7", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -27,6 +27,7 @@ pub fn main() {\n     //  4. load acquire : 3\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n             sleep(Duration::from_millis(200));\n@@ -39,6 +40,7 @@ pub fn main() {\n         });\n \n         let j3 = spawn(move || {\n+            let c = c; // avoid field capturing\n             sleep(Duration::from_millis(500));\n             if SYNC.load(Ordering::Acquire) == 3 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`"}, {"sha": "33de1f1755811cbc0c7cd06f4ea8bc786bbaee7b", "filename": "src/tools/miri/tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  3. load acquire : 2\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n \n@@ -36,6 +37,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             if SYNC.load(Ordering::Acquire) == 2 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {"}, {"sha": "4d0ce8f94339af52ac1ace36157b1b2a72cd4ce9", "filename": "src/tools/miri/tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -25,6 +25,7 @@ pub fn main() {\n     //  4. load acquire : 3\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n@@ -37,6 +38,7 @@ pub fn main() {\n         });\n \n         let j3 = spawn(move || {\n+            let c = c; // capture `c`, not just its field.\n             if SYNC.load(Ordering::Acquire) == 3 {\n                 *c.0 //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Read on thread `<unnamed>`\n             } else {"}, {"sha": "d3c2ab3e4a46460fc9ece9318bd4ab22b6943c02", "filename": "src/tools/miri/tests/fail/data_race/stack_pop_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -13,7 +13,7 @@ fn main() {\n fn race(local: i32) {\n     let ptr = MakeSend(&local as *const i32);\n     thread::spawn(move || {\n-        let ptr = ptr;\n+        let ptr = ptr; // avoid field capturing\n         let _val = unsafe { *ptr.0 };\n     });\n     // Make the other thread go first so that it does not UAF."}, {"sha": "30e3460f222e14a8dd381a0b6dbd5f455fbf6d6b", "filename": "src/tools/miri/tests/fail/data_race/write_write_race.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -15,10 +15,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; //~ ERROR: Data race detected between (1) Write on thread `<unnamed>` and (2) Write on thread `<unnamed>`\n         });\n "}, {"sha": "25be42bd4eb781a064ba8a5a2c63e4e429c0f67b", "filename": "src/tools/miri/tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -28,6 +28,7 @@ pub fn main() {\n     //  5. write-value\n     unsafe {\n         let j1 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             // Concurrent allocate the memory.\n             // Uses relaxed semantics to not generate\n             // a release sequence.\n@@ -46,6 +47,7 @@ pub fn main() {\n         });\n \n         let j2 = spawn(move || {\n+            let ptr = ptr; // avoid field capturing\n             let pointer = &*ptr.0;\n             *pointer.load(Ordering::Acquire) = 3;\n         });"}, {"sha": "209c4a932dc917d7cf7aee9f47c82f93af1f99e2", "filename": "src/tools/miri/tests/fail/erroneous_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ferroneous_const.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of `PrintName::<i32>::VOID` failed\n LL |     const VOID: ! = panic!();\n    |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/erroneous_const.rs:LL:CC\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: erroneous constant used\n   --> $DIR/erroneous_const.rs:LL:CC"}, {"sha": "77d5fc5d7ceb9ab18cfee5513b3968d120a40e0c", "filename": "src/tools/miri/tests/fail/panic/double_panic.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fdouble_panic.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -12,7 +12,8 @@ LL |     ABORT();\n    = note: inside `std::sys::PLATFORM::abort_internal` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n note: inside `<Foo as std::ops::Drop>::drop`\n   --> $DIR/double_panic.rs:LL:CC\n    |\n@@ -24,7 +25,7 @@ note: inside `main`\n    |\n LL | }\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "f8307c0c23bf8f5c35a58f313e0dd5a6891c5fa3", "filename": "src/tools/miri/tests/fail/panic/no_std.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fno_std.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -11,7 +11,7 @@ note: inside `start`\n    |\n LL |     panic!(\"blarg I am dead\")\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "d9303fd0d068417c14c80658df9c05a72a1ba89f", "filename": "src/tools/miri/tests/fail/panic/panic_abort1.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort1.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -11,13 +11,14 @@ LL |                 ABORT();\n    = note: inside `std::panicking::rust_panic` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::panicking::rust_panic_with_hook` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside closure at RUSTLIB/std/src/panicking.rs:LL:CC\n-   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::rt::begin_panic<&str>::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::sys_common::backtrace::__rust_end_short_backtrace::<[closure@std::panicking::begin_panic_handler::{closure#0}], !>` at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n+   = note: inside `std::panicking::begin_panic_handler` at RUSTLIB/std/src/panicking.rs:LL:CC\n note: inside `main`\n   --> $DIR/panic_abort1.rs:LL:CC\n    |\n LL |     std::panic!(\"panicking from libstd\");\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "54cbc9b5f6d967a6dc6bdd7d5dc4cbc74d27851a", "filename": "src/tools/miri/tests/fail/panic/panic_abort2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort2.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -18,7 +18,7 @@ note: inside `main`\n    |\n LL |     std::panic!(\"{}-panicking from libstd\", 42);\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "64eea47b14b4bb86592181cccf8a12108a3a2bc0", "filename": "src/tools/miri/tests/fail/panic/panic_abort3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort3.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -18,7 +18,7 @@ note: inside `main`\n    |\n LL |     core::panic!(\"panicking from libcore\");\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "21beb1006459b7eb8b93082c0d135d236803f00c", "filename": "src/tools/miri/tests/fail/panic/panic_abort4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fpanic%2Fpanic_abort4.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -18,7 +18,7 @@ note: inside `main`\n    |\n LL |     core::panic!(\"{}-panicking from libcore\", 42);\n    | ^\n-   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0f4535e6792e6524fd3264c7ada3beaf8461f05f", "filename": "src/tools/miri/tests/panic/panic1.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Fpanic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Fpanic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Fpanic1.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -1,9 +1,11 @@\n thread 'main' panicked at 'panicking from libstd', $DIR/panic1.rs:LL:CC\n stack backtrace:\n-   0: std::rt::begin_panic\n+   0: std::panicking::begin_panic_handler\n  at RUSTLIB/std/src/panicking.rs:LL:CC\n-   1: main\n+   1: std::rt::panic_fmt\n+ at RUSTLIB/core/src/panicking.rs:LL:CC\n+   2: main\n  at $DIR/panic1.rs:LL:CC\n-   2: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n+   3: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n  at RUSTLIB/core/src/ops/function.rs:LL:CC\n note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}, {"sha": "68504cb1c794fc8a1b0ec5e0c3b7cbe73f423aad", "filename": "src/tools/miri/tests/pass-dep/shims/libc-misc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass-dep%2Fshims%2Flibc-misc.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -101,7 +101,6 @@ fn test_posix_realpath_errors() {\n \n #[cfg(target_os = \"linux\")]\n fn test_posix_fadvise() {\n-    use std::convert::TryInto;\n     use std::io::Write;\n \n     let path = tmp().join(\"miri_test_libc_posix_fadvise.txt\");"}, {"sha": "abfe3b0adeb4d0014a85082c3bbc2c3f0d894093", "filename": "src/tools/miri/tests/pass/0weak_memory_consistency.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2F0weak_memory_consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2F0weak_memory_consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2F0weak_memory_consistency.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -116,11 +116,13 @@ fn test_message_passing() {\n \n     #[rustfmt::skip]\n     let j1 = spawn(move || {\n+        let x = x; // avoid field capturing\n         unsafe { *x.0 = 1 }; // -----------------------------------------+\n         y.store(1, Release); // ---------------------+                   |\n     }); //                                           |                   |\n     #[rustfmt::skip] //                              |synchronizes-with  | happens-before\n     let j2 = spawn(move || { //                      |                   |\n+        let x = x; // avoid field capturing          |                   |\n         acquires_value(&y, 1); // <------------------+                   |\n         unsafe { *x.0 } // <---------------------------------------------+\n     });"}, {"sha": "d31420380a565ae5fc90d6a6339e67fa826f03c3", "filename": "src/tools/miri/tests/pass/concurrency/data_race.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdata_race.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -17,12 +17,14 @@ fn test_fence_sync() {\n     let evil_ptr = EvilSend(ptr);\n \n     let j1 = spawn(move || {\n+        let evil_ptr = evil_ptr; // avoid field capturing\n         unsafe { *evil_ptr.0 = 1 };\n         fence(Ordering::Release);\n         SYNC.store(1, Ordering::Relaxed)\n     });\n \n     let j2 = spawn(move || {\n+        let evil_ptr = evil_ptr; // avoid field capturing\n         if SYNC.load(Ordering::Relaxed) == 1 {\n             fence(Ordering::Acquire);\n             unsafe { *evil_ptr.0 }\n@@ -40,10 +42,10 @@ fn test_multiple_reads() {\n     let ptr = &mut var as *mut u32;\n     let evil_ptr = EvilSend(ptr);\n \n-    let j1 = spawn(move || unsafe { *evil_ptr.0 });\n-    let j2 = spawn(move || unsafe { *evil_ptr.0 });\n-    let j3 = spawn(move || unsafe { *evil_ptr.0 });\n-    let j4 = spawn(move || unsafe { *evil_ptr.0 });\n+    let j1 = spawn(move || unsafe { *{ evil_ptr }.0 });\n+    let j2 = spawn(move || unsafe { *{ evil_ptr }.0 });\n+    let j3 = spawn(move || unsafe { *{ evil_ptr }.0 });\n+    let j4 = spawn(move || unsafe { *{ evil_ptr }.0 });\n \n     assert_eq!(j1.join().unwrap(), 42);\n     assert_eq!(j2.join().unwrap(), 42);\n@@ -63,6 +65,7 @@ pub fn test_rmw_no_block() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n@@ -73,7 +76,10 @@ pub fn test_rmw_no_block() {\n             }\n         });\n \n-        let j3 = spawn(move || if SYNC.load(Ordering::Acquire) == 2 { *c.0 } else { 0 });\n+        let j3 = spawn(move || {\n+            let c = c; // avoid field capturing\n+            if SYNC.load(Ordering::Acquire) == 2 { *c.0 } else { 0 }\n+        });\n \n         j1.join().unwrap();\n         j2.join().unwrap();\n@@ -91,11 +97,15 @@ pub fn test_simple_release() {\n \n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 1;\n             SYNC.store(1, Ordering::Release);\n         });\n \n-        let j2 = spawn(move || if SYNC.load(Ordering::Acquire) == 1 { *c.0 } else { 0 });\n+        let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n+            if SYNC.load(Ordering::Acquire) == 1 { *c.0 } else { 0 }\n+        });\n \n         j1.join().unwrap();\n         assert_eq!(j2.join().unwrap(), 1); // relies on thread 2 going last"}, {"sha": "049b5e7f4987182c33acff4733edd6694af2b6ec", "filename": "src/tools/miri/tests/pass/concurrency/disable_data_race_detector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -14,10 +14,12 @@ pub fn main() {\n     let c = EvilSend(b);\n     unsafe {\n         let j1 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 32;\n         });\n \n         let j2 = spawn(move || {\n+            let c = c; // avoid field capturing\n             *c.0 = 64; // Data race (but not detected as the detector is disabled)\n         });\n "}, {"sha": "dccc9d104dd0edf44a53c297f1a49b4385725a49", "filename": "src/tools/miri/tests/pass/concurrency/sync.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fsync.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -201,8 +201,10 @@ fn park_timeout() {\n     thread::park_timeout(Duration::from_millis(200));\n     // Normally, waiting in park/park_timeout may spuriously wake up early, but we\n     // know Miri's timed synchronization primitives do not do that.\n-\n-    assert!((200..1000).contains(&start.elapsed().as_millis()));\n+    // We allow much longer sleeps as well since the macOS GHA runners seem very oversubscribed\n+    // and sometimes just pause for 1 second or more.\n+    let elapsed = start.elapsed();\n+    assert!((200..2000).contains(&elapsed.as_millis()), \"bad sleep time: {elapsed:?}\");\n }\n \n fn park_unpark() {\n@@ -219,8 +221,10 @@ fn park_unpark() {\n     thread::park();\n     // Normally, waiting in park/park_timeout may spuriously wake up early, but we\n     // know Miri's timed synchronization primitives do not do that.\n-\n-    assert!((200..1000).contains(&start.elapsed().as_millis()));\n+    // We allow much longer sleeps as well since the macOS GHA runners seem very oversubscribed\n+    // and sometimes just pause for 1 second or more.\n+    let elapsed = start.elapsed();\n+    assert!((200..2000).contains(&elapsed.as_millis()), \"bad sleep time: {elapsed:?}\");\n \n     t2.join().unwrap();\n }"}, {"sha": "fc4c8a283ddb277e5f578107fe039b24945e94c7", "filename": "src/tools/miri/tests/pass/concurrency/thread_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fthread_locals.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -42,6 +42,7 @@ fn main() {\n     };\n \n     thread::spawn(move || unsafe {\n+        let ptr = ptr; // avoid field capturing\n         assert_eq!(*ptr.0, 5);\n         assert_eq!(A, 0);\n         assert_eq!(B, 0);"}, {"sha": "3b27af9094cc54260927913a0fea77a806d2186d", "filename": "src/tools/miri/tests/pass/concurrency/windows_condvar_shared.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_condvar_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_condvar_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_condvar_shared.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -44,6 +44,8 @@ fn all_shared() {\n     // waiters\n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let condvar_ptr = condvar_ptr; // avoid field capture\n+            let lock_ptr = lock_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }\n@@ -71,6 +73,7 @@ fn all_shared() {\n     // readers\n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }\n@@ -111,6 +114,8 @@ fn shared_sleep_and_exclusive_lock() {\n     let mut waiters = Vec::with_capacity(5);\n     for i in 0..5 {\n         waiters.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n+            let condvar_ptr = condvar_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }\n@@ -170,6 +175,8 @@ fn exclusive_sleep_and_shared_lock() {\n     let mut handles = Vec::with_capacity(10);\n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n+            let condvar_ptr = condvar_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockExclusive(lock_ptr.0);\n             }\n@@ -193,6 +200,7 @@ fn exclusive_sleep_and_shared_lock() {\n \n     for i in 0..5 {\n         handles.push(thread::spawn(move || {\n+            let lock_ptr = lock_ptr; // avoid field capture\n             unsafe {\n                 AcquireSRWLockShared(lock_ptr.0);\n             }"}, {"sha": "b2412f7dbb0e65f225fbf294c90d7955ae82417d", "filename": "src/tools/miri/tests/pass/concurrency/windows_init_once.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fconcurrency%2Fwindows_init_once.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -66,6 +66,7 @@ fn block_until_complete() {\n     let init_once_ptr = SendPtr(&mut init_once);\n \n     let waiter = move || unsafe {\n+        let init_once_ptr = init_once_ptr; // avoid field capture\n         let mut pending = 0;\n \n         assert_eq!(InitOnceBeginInitialize(init_once_ptr.0, 0, &mut pending, null_mut()), TRUE);\n@@ -102,6 +103,7 @@ fn retry_on_fail() {\n     let init_once_ptr = SendPtr(&mut init_once);\n \n     let waiter = move || unsafe {\n+        let init_once_ptr = init_once_ptr; // avoid field capture\n         let mut pending = 0;\n \n         assert_eq!(InitOnceBeginInitialize(init_once_ptr.0, 0, &mut pending, null_mut()), TRUE);\n@@ -146,6 +148,8 @@ fn no_data_race_after_complete() {\n     let place_ptr = SendPtr(&mut place);\n \n     let reader = thread::spawn(move || unsafe {\n+        let init_once_ptr = init_once_ptr; // avoid field capture\n+        let place_ptr = place_ptr; // avoid field capture\n         let mut pending = 0;\n \n         // this doesn't block because reader only executes after `InitOnceComplete` is called"}, {"sha": "1b00f7cea305fc19a921ebe45d7968b5d6eddba3", "filename": "src/tools/miri/tests/pass/panic/catch_panic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -49,13 +49,12 @@ fn main() {\n \n     // Std panics\n     test(None, |_old_val| std::panic!(\"Hello from panic: std\"));\n-    test(None, |old_val| std::panic!(format!(\"Hello from panic: {:?}\", old_val)));\n+    test(None, |old_val| std::panic::panic_any(format!(\"Hello from panic: {:?}\", old_val)));\n     test(None, |old_val| std::panic!(\"Hello from panic: {:?}\", old_val));\n-    test(None, |_old_val| std::panic!(1337));\n+    test(None, |_old_val| std::panic::panic_any(1337));\n \n     // Core panics\n     test(None, |_old_val| core::panic!(\"Hello from panic: core\"));\n-    test(None, |old_val| core::panic!(&format!(\"Hello from panic: {:?}\", old_val)));\n     test(None, |old_val| core::panic!(\"Hello from panic: {:?}\", old_val));\n \n     // Built-in panics; also make sure the message is right."}, {"sha": "f43434582a2991235a503c6ba55481f7fe56a024", "filename": "src/tools/miri/tests/pass/panic/catch_panic.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fcatch_panic.stderr?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -11,8 +11,6 @@ thread 'main' panicked at 'Hello from panic: core', $DIR/catch_panic.rs:LL:CC\n Caught panic message (&str): Hello from panic: core\n thread 'main' panicked at 'Hello from panic: 5', $DIR/catch_panic.rs:LL:CC\n Caught panic message (String): Hello from panic: 5\n-thread 'main' panicked at 'Hello from panic: 6', $DIR/catch_panic.rs:LL:CC\n-Caught panic message (String): Hello from panic: 6\n thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4', $DIR/catch_panic.rs:LL:CC\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:LL:CC"}, {"sha": "7cc1e2a973fd68a4072ee403ffc7fcf946ce034c", "filename": "src/tools/miri/tests/pass/panic/concurrent-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a477b81c7ebe2cf986ad205e213570b5acfbced4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fpanic%2Fconcurrent-panic.rs?ref=a477b81c7ebe2cf986ad205e213570b5acfbced4", "patch": "@@ -57,7 +57,7 @@ fn main() {\n         let t2_started_pair = t2_started_pair.clone();\n         let block_on_drop = BlockOnDrop::new(t1);\n         spawn(move || {\n-            let _ = block_on_drop;\n+            let _capture = block_on_drop;\n \n             let (mutex, condvar) = &*t2_started_pair;\n             *mutex.lock().unwrap() = true;"}]}