{"sha": "65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YWQ3ZDNiYjBiOTg5NWNkZDcwM2M0YjdkN2U0OWFkNGY3YWY2ZjU=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-25T09:51:14Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-25T09:51:14Z"}, "message": "Put braces on the next line if it exceeds max width", "tree": {"sha": "808d60b68ae778a0ae779bb39751519948792ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/808d60b68ae778a0ae779bb39751519948792ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5", "html_url": "https://github.com/rust-lang/rust/commit/65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb351440e9182cdfeee5a99e48284e4a693e9549", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb351440e9182cdfeee5a99e48284e4a693e9549", "html_url": "https://github.com/rust-lang/rust/commit/cb351440e9182cdfeee5a99e48284e4a693e9549"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "f5bf7cbb824209656336ca91a8ac510ec75ddcd8", "filename": "src/items.rs", "status": "modified", "additions": 43, "deletions": 31, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=65ad7d3bb0b9895cdd703c4b7d7e49ad4f7af6f5", "patch": "@@ -1095,12 +1095,14 @@ pub fn format_struct_struct(\n     };\n     // 1 = `}`\n     let overhead = if fields.is_empty() { 1 } else { 0 };\n-    let max_len = context.config.max_width() - offset.width();\n+    let max_len = context\n+        .config\n+        .max_width()\n+        .checked_sub(offset.width())\n+        .unwrap_or(0);\n     if !generics_str.contains('\\n') && result.len() + generics_str.len() + overhead > max_len {\n         result.push('\\n');\n-        result.push_str(&offset\n-            .block_indent(context.config)\n-            .to_string(context.config));\n+        result.push_str(&offset.to_string(context.config));\n         result.push_str(&generics_str.trim_left());\n     } else {\n         result.push_str(&generics_str);\n@@ -2730,13 +2732,14 @@ fn format_generics(\n     let shape = Shape::legacy(context.budget(used_width + offset.width()), offset);\n     let mut result = try_opt!(rewrite_generics(context, generics, shape, span));\n \n-    if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n-        let budget = try_opt!(\n-            context\n-                .config\n-                .max_width()\n-                .checked_sub(last_line_width(&result))\n-        );\n+    let same_line_brace = if !generics.where_clause.predicates.is_empty() ||\n+        result.contains('\\n')\n+    {\n+        let budget = context\n+            .config\n+            .max_width()\n+            .checked_sub(last_line_width(&result))\n+            .unwrap_or(0);\n         let where_clause_str = try_opt!(rewrite_where_clause(\n             context,\n             &generics.where_clause,\n@@ -2751,29 +2754,38 @@ fn format_generics(\n             generics.span.hi,\n         ));\n         result.push_str(&where_clause_str);\n-        let same_line_brace = force_same_line_brace ||\n-            (generics.where_clause.predicates.is_empty() && trimmed_last_line_width(&result) == 1);\n-        if !same_line_brace &&\n-            (brace_style == BraceStyle::SameLineWhere ||\n-                brace_style == BraceStyle::AlwaysNextLine)\n-        {\n-            result.push('\\n');\n-            result.push_str(&offset.block_only().to_string(context.config));\n-        } else {\n-            result.push(' ');\n-        }\n-        result.push_str(opener);\n+        force_same_line_brace || brace_style == BraceStyle::PreferSameLine ||\n+            (generics.where_clause.predicates.is_empty() && trimmed_last_line_width(&result) == 1)\n     } else {\n-        if force_same_line_brace || trimmed_last_line_width(&result) == 1 ||\n+        force_same_line_brace || trimmed_last_line_width(&result) == 1 ||\n             brace_style != BraceStyle::AlwaysNextLine\n-        {\n-            result.push(' ');\n-        } else {\n-            result.push('\\n');\n-            result.push_str(&offset.block_only().to_string(context.config));\n-        }\n-        result.push_str(opener);\n+    };\n+    let total_used_width = if result.contains('\\n') {\n+        last_line_width(&result)\n+    } else {\n+        used_width + result.len()\n+    };\n+    let remaining_budget = context\n+        .config\n+        .max_width()\n+        .checked_sub(total_used_width)\n+        .unwrap_or(0);\n+    // If the same line brace if forced, it indicates that we are rewriting an item with empty body,\n+    // and hence we take the closer into account as well for one line budget.\n+    // We assume that the closer has the same length as the opener.\n+    let overhead = if force_same_line_brace {\n+        1 + opener.len() + opener.len()\n+    } else {\n+        1 + opener.len()\n+    };\n+    let forbid_same_line_brace = overhead > remaining_budget;\n+    if !forbid_same_line_brace && same_line_brace {\n+        result.push(' ');\n+    } else {\n+        result.push('\\n');\n+        result.push_str(&offset.block_only().to_string(context.config));\n     }\n+    result.push_str(opener);\n \n     Some(result)\n }"}]}