{"sha": "1667ded0d2bc0044f84f2e56aa77f76986199058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NjdkZWQwZDJiYzAwNDRmODRmMmU1NmFhNzdmNzY5ODYxOTkwNTg=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T15:15:53Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-29T15:30:42Z"}, "message": "fix fn GetCurrentDirectoryW + clarify return types of Windows shims", "tree": {"sha": "5ca6692ec2c4aa7ac05af6319a7d322dc9890eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca6692ec2c4aa7ac05af6319a7d322dc9890eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1667ded0d2bc0044f84f2e56aa77f76986199058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1667ded0d2bc0044f84f2e56aa77f76986199058", "html_url": "https://github.com/rust-lang/rust/commit/1667ded0d2bc0044f84f2e56aa77f76986199058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1667ded0d2bc0044f84f2e56aa77f76986199058/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e0cc8307e80821cdc76c379805245b256071a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0cc8307e80821cdc76c379805245b256071a89", "html_url": "https://github.com/rust-lang/rust/commit/7e0cc8307e80821cdc76c379805245b256071a89"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "dfbeabf2a12bc0f9cb95e14811204f5446e20edc", "filename": "src/shims/env.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1667ded0d2bc0044f84f2e56aa77f76986199058/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1667ded0d2bc0044f84f2e56aa77f76986199058/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=1667ded0d2bc0044f84f2e56aa77f76986199058", "patch": "@@ -105,10 +105,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     #[allow(non_snake_case)]\n     fn GetEnvironmentVariableW(\n         &mut self,\n-        name_op: OpTy<'tcx, Tag>, // LPCWSTR\n-        buf_op: OpTy<'tcx, Tag>,  // LPWSTR\n-        size_op: OpTy<'tcx, Tag>, // DWORD\n-    ) -> InterpResult<'tcx, u32> {\n+        name_op: OpTy<'tcx, Tag>,  // LPCWSTR\n+        buf_op: OpTy<'tcx, Tag>,   // LPWSTR\n+        size_op: OpTy<'tcx, Tag>,  // DWORD\n+    ) -> InterpResult<'tcx, u32> { // Returns DWORD (u32 in Windows)\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetEnvironmentVariableW\");\n \n@@ -125,17 +125,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let buf_ptr = this.read_scalar(buf_op)?.not_undef()?;\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n-                let (success, len) = this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?;\n-\n-                if success {\n-                    // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n-                    // not including the terminating null character.\n-                    u32::try_from(len).unwrap()\n-                } else {\n-                    // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n-                    // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n-                    u32::try_from(len).unwrap().checked_add(1).unwrap()\n-                }\n+                HowWasBufferSize(this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?)\n             }\n             None => {\n                 let envvar_not_found = this.eval_windows(\"ERROR_ENVVAR_NOT_FOUND\")?;\n@@ -326,10 +316,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // If we cannot get the current directory, we return 0\n         match env::current_dir() {\n-            Ok(cwd) => {\n-                let len = this.write_path_to_wide_str(&cwd, buf, size)?.1;\n-                return Ok(u32::try_from(len).unwrap())\n-            }\n+            Ok(cwd) =>\n+                return Ok(HowWasBufferSize(this.write_path_to_wide_str(&cwd, buf, size)?)),\n             Err(e) => this.set_last_error_from_io_error(e)?,\n         }\n         Ok(0)\n@@ -411,3 +399,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n }\n+\n+// Local helper function to be used in Windows shims\n+#[allow(non_snake_case)]\n+fn HowWasBufferSize((success, len): (bool, u64)) -> u32 {\n+    if success {\n+        // If the function succeeds, the return value is the number of characters stored in the buffer pointed to by lpBuffer,\n+        // not including the terminating null character.\n+        u32::try_from(len).unwrap()\n+    } else {\n+        // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n+        // required to hold the string and its terminating null character and the contents of lpBuffer are undefined.\n+        u32::try_from(len.checked_add(1).unwrap()).unwrap()\n+    }\n+}"}]}