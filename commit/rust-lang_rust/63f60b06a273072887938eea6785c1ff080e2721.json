{"sha": "63f60b06a273072887938eea6785c1ff080e2721", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZjYwYjA2YTI3MzA3Mjg4NzkzOGVlYTY3ODVjMWZmMDgwZTI3MjE=", "commit": {"author": {"name": "Nagy Tibor", "email": "xnagytibor@gmail.com", "date": "2019-03-07T20:24:46Z"}, "committer": {"name": "Tibor Nagy", "email": "xnagytibor@gmail.com", "date": "2019-03-08T11:17:47Z"}, "message": "Fix documentation of from_ne_bytes and from_le_bytes", "tree": {"sha": "98c01d9899b307c523c2f26f4167342b846910c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98c01d9899b307c523c2f26f4167342b846910c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f60b06a273072887938eea6785c1ff080e2721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f60b06a273072887938eea6785c1ff080e2721", "html_url": "https://github.com/rust-lang/rust/commit/63f60b06a273072887938eea6785c1ff080e2721", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f60b06a273072887938eea6785c1ff080e2721/comments", "author": {"login": "xTibor", "id": 1627292, "node_id": "MDQ6VXNlcjE2MjcyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1627292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xTibor", "html_url": "https://github.com/xTibor", "followers_url": "https://api.github.com/users/xTibor/followers", "following_url": "https://api.github.com/users/xTibor/following{/other_user}", "gists_url": "https://api.github.com/users/xTibor/gists{/gist_id}", "starred_url": "https://api.github.com/users/xTibor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xTibor/subscriptions", "organizations_url": "https://api.github.com/users/xTibor/orgs", "repos_url": "https://api.github.com/users/xTibor/repos", "events_url": "https://api.github.com/users/xTibor/events{/privacy}", "received_events_url": "https://api.github.com/users/xTibor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xTibor", "id": 1627292, "node_id": "MDQ6VXNlcjE2MjcyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1627292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xTibor", "html_url": "https://github.com/xTibor", "followers_url": "https://api.github.com/users/xTibor/followers", "following_url": "https://api.github.com/users/xTibor/following{/other_user}", "gists_url": "https://api.github.com/users/xTibor/gists{/gist_id}", "starred_url": "https://api.github.com/users/xTibor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xTibor/subscriptions", "organizations_url": "https://api.github.com/users/xTibor/orgs", "repos_url": "https://api.github.com/users/xTibor/repos", "events_url": "https://api.github.com/users/xTibor/events{/privacy}", "received_events_url": "https://api.github.com/users/xTibor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88f755f8a84df1d9e6b17cf10c96ae8b93481b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e", "html_url": "https://github.com/rust-lang/rust/commit/88f755f8a84df1d9e6b17cf10c96ae8b93481b2e"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "a0cefe5bd5b987f7b170a423ba00c50bb72c1481", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/63f60b06a273072887938eea6785c1ff080e2721/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f60b06a273072887938eea6785c1ff080e2721/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=63f60b06a273072887938eea6785c1ff080e2721", "patch": "@@ -1979,10 +1979,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_le_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n@@ -2020,10 +2020,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_ne_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n@@ -3695,10 +3695,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_le_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n@@ -3736,10 +3736,10 @@ When starting from a slice rather than an array, fallible conversion APIs can be\n ```\n use std::convert::TryInto;\n \n-fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n+fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT), \" {\n     let (int_bytes, rest) = input.split_at(std::mem::size_of::<\", stringify!($SelfT), \">());\n     *input = rest;\n-    \", stringify!($SelfT), \"::from_be_bytes(int_bytes.try_into().unwrap())\n+    \", stringify!($SelfT), \"::from_ne_bytes(int_bytes.try_into().unwrap())\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]"}]}