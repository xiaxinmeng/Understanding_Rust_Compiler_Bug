{"sha": "c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "node_id": "C_kwDOAAsO6NoAKGM1Y2IxNTZjYWEyNzY1NWJjOGRjZjEzNWRlNGQwMjZhYzRiMjVhNGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T04:32:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T04:32:39Z"}, "message": "Auto merge of #106358 - TroyNeubauer:improve-foreign-orphan-error, r=estebank\n\nImplement fix for #67535\n\nImplements a fix for #67535\nr? `@estebank`", "tree": {"sha": "65c7910333ba35dbd1fa6261eaa0bd6ae0fc090c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65c7910333ba35dbd1fa6261eaa0bd6ae0fc090c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "html_url": "https://github.com/rust-lang/rust/commit/c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee11bfd8a189462713ea1ede36f4796575ddf894", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee11bfd8a189462713ea1ede36f4796575ddf894", "html_url": "https://github.com/rust-lang/rust/commit/ee11bfd8a189462713ea1ede36f4796575ddf894"}, {"sha": "4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd", "html_url": "https://github.com/rust-lang/rust/commit/4cb9030a66efd6c7c10cbc7b55264c805b6dfcfd"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "e8b3f139623ed56ce750a81dc1a6765f0fc2fd62", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "patch": "@@ -53,7 +53,7 @@ fn do_orphan_check_impl<'tcx>(\n             sp,\n             item.span,\n             tr.path.span,\n-            trait_ref.self_ty(),\n+            trait_ref,\n             impl_.self_ty.span,\n             &impl_.generics,\n             err,\n@@ -154,11 +154,12 @@ fn emit_orphan_check_error<'tcx>(\n     sp: Span,\n     full_impl_span: Span,\n     trait_span: Span,\n-    self_ty: Ty<'tcx>,\n+    trait_ref: ty::TraitRef<'tcx>,\n     self_ty_span: Span,\n     generics: &hir::Generics<'tcx>,\n     err: traits::OrphanCheckErr<'tcx>,\n ) -> Result<!, ErrorGuaranteed> {\n+    let self_ty = trait_ref.self_ty();\n     Err(match err {\n         traits::OrphanCheckErr::NonLocalInputType(tys) => {\n             let msg = match self_ty.kind() {\n@@ -187,7 +188,14 @@ fn emit_orphan_check_error<'tcx>(\n                 let msg = |ty: &str, postfix: &str| {\n                     format!(\"{ty} is not defined in the current crate{postfix}\")\n                 };\n-                let this = |name: &str| msg(\"this\", &format!(\" because {name} are always foreign\"));\n+\n+                let this = |name: &str| {\n+                    if !trait_ref.def_id.is_local() && !is_target_ty {\n+                        msg(\"this\", &format!(\" because this is a foreign trait\"))\n+                    } else {\n+                        msg(\"this\", &format!(\" because {name} are always foreign\"))\n+                    }\n+                };\n                 let msg = match &ty.kind() {\n                     ty::Slice(_) => this(\"slices\"),\n                     ty::Array(..) => this(\"arrays\"),"}, {"sha": "24f50621310f1b325b890d2be8e5286c1b862c4d", "filename": "src/test/ui/issues/issue-67535.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/src%2Ftest%2Fui%2Fissues%2Fissue-67535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/src%2Ftest%2Fui%2Fissues%2Fissue-67535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67535.rs?ref=c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "patch": "@@ -0,0 +1,22 @@\n+fn main() {}\n+\n+impl std::ops::AddAssign for () {\n+    //~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+    fn add_assign(&self, other: ()) -> () {\n+        ()\n+    }\n+}\n+\n+impl std::ops::AddAssign for [(); 1] {\n+    //~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+    fn add_assign(&self, other: [(); 1]) -> [(); 1] {\n+        [()]\n+    }\n+}\n+\n+impl std::ops::AddAssign for &[u8] {\n+    //~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n+    fn add_assign(&self, other: &[u8]) -> &[u8] {\n+        self\n+    }\n+}"}, {"sha": "4d7a02a50969f090132030fff05acadd940c64cb", "filename": "src/test/ui/issues/issue-67535.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/src%2Ftest%2Fui%2Fissues%2Fissue-67535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/src%2Ftest%2Fui%2Fissues%2Fissue-67535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67535.stderr?ref=c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "patch": "@@ -0,0 +1,39 @@\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-67535.rs:3:1\n+   |\n+LL | impl std::ops::AddAssign for () {\n+   | ^^^^^-------------------^^^^^--\n+   | |    |                       |\n+   | |    |                       this is not defined in the current crate because tuples are always foreign\n+   | |    this is not defined in the current crate because this is a foreign trait\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-67535.rs:10:1\n+   |\n+LL | impl std::ops::AddAssign for [(); 1] {\n+   | ^^^^^-------------------^^^^^-------\n+   | |    |                       |\n+   | |    |                       this is not defined in the current crate because arrays are always foreign\n+   | |    this is not defined in the current crate because this is a foreign trait\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/issue-67535.rs:17:1\n+   |\n+LL | impl std::ops::AddAssign for &[u8] {\n+   | ^^^^^-------------------^^^^^-----\n+   | |    |                       |\n+   | |    |                       this is not defined in the current crate because slices are always foreign\n+   | |    this is not defined in the current crate because this is a foreign trait\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "070e72437be80d037dac237e4420e509e4146150", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5cb156caa27655bc8dcf135de4d026ac4b25a4a/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=c5cb156caa27655bc8dcf135de4d026ac4b25a4a", "patch": "@@ -10,7 +10,7 @@ use std::path::Path;\n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 939;\n-const ISSUES_ENTRY_LIMIT: usize = 2020;\n+const ISSUES_ENTRY_LIMIT: usize = 2050;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     for dir in Walk::new(&path.join(\"test/ui\")) {"}]}