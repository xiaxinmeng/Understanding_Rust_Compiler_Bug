{"sha": "b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "node_id": "C_kwDOAAsO6NoAKGIxYTRiYTNlODRmMDIxZGQzZThlZWFhY2EwZWVjYWE3NThmOGQzMmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T14:24:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T14:24:57Z"}, "message": "Auto merge of #13223 - lowr:fix/hir-proj-normalization, r=flodiebold\n\nfix: handle lifetime variables in projection normalization\n\nFixes #12674\n\nThe problem is that we've been skipping the binders of normalized projections assuming they should be empty, but the assumption is unfortunately wrong. We may get back lifetime variables and should handle them before returning them as normalized projections. For those who are curious why we get those even though we treat all lifetimes as 'static, [this comment in chalk](https://github.com/rust-lang/chalk/blob/d875af0ff196dd6430b5f5fd87a640fa5ab59d1e/chalk-solve/src/infer/unify.rs#L888-L908) may be interesting.\n\nI thought using `InferenceTable` would be cleaner than the other ways as it already has the methods for canonicalization, normalizing projection, and resolving variables, so moved goal building and trait solving logic to a new `HirDatabase` query. I made it transparent query as the query itself doesn't do much work but the eventual call to `HirDatabase::trait_solve_query()` does.", "tree": {"sha": "bcfc0d481aaba023760fbfa61bd362c3b25765be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcfc0d481aaba023760fbfa61bd362c3b25765be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "html_url": "https://github.com/rust-lang/rust/commit/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b54d22d96a0ee459536702172f2b5557de7d74f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b54d22d96a0ee459536702172f2b5557de7d74f8", "html_url": "https://github.com/rust-lang/rust/commit/b54d22d96a0ee459536702172f2b5557de7d74f8"}, {"sha": "efb56160c91f0c1db511423fad8cc09fdd73d618", "url": "https://api.github.com/repos/rust-lang/rust/commits/efb56160c91f0c1db511423fad8cc09fdd73d618", "html_url": "https://github.com/rust-lang/rust/commit/efb56160c91f0c1db511423fad8cc09fdd73d618"}], "stats": {"total": 136, "additions": 94, "deletions": 42}, "files": [{"sha": "dd5639f00d21904bbdcae044eeeaeeb4801e00fe", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "patch": "@@ -150,6 +150,14 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         id: chalk_db::AssociatedTyValueId,\n     ) -> Arc<chalk_db::AssociatedTyValue>;\n \n+    #[salsa::invoke(crate::traits::normalize_projection_query)]\n+    #[salsa::transparent]\n+    fn normalize_projection(\n+        &self,\n+        projection: crate::ProjectionTy,\n+        env: Arc<crate::TraitEnvironment>,\n+    ) -> Option<crate::Ty>;\n+\n     #[salsa::invoke(trait_solve_wait)]\n     #[salsa::transparent]\n     fn trait_solve("}, {"sha": "de4a5446e57f00e948bee718ae6013dcddbb99b7", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "patch": "@@ -196,20 +196,6 @@ pub(crate) fn make_binders<T: HasInterner<Interner = Interner>>(\n     make_binders_with_count(db, usize::MAX, generics, value)\n }\n \n-// FIXME: get rid of this\n-pub fn make_canonical<T: HasInterner<Interner = Interner>>(\n-    value: T,\n-    kinds: impl IntoIterator<Item = TyVariableKind>,\n-) -> Canonical<T> {\n-    let kinds = kinds.into_iter().map(|tk| {\n-        chalk_ir::CanonicalVarKind::new(\n-            chalk_ir::VariableKind::Ty(tk),\n-            chalk_ir::UniverseIndex::ROOT,\n-        )\n-    });\n-    Canonical { value, binders: chalk_ir::CanonicalVarKinds::from_iter(Interner, kinds) }\n-}\n-\n // FIXME: get rid of this, just replace it by FnPointer\n /// A function signature as seen by type inference: Several parameter types and\n /// one return type."}, {"sha": "aaff894b34ffc4de8c61c5e2b7a17a39e818ba97", "filename": "crates/hir-ty/src/traits.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir-ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftraits.rs?ref=b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "patch": "@@ -1,6 +1,6 @@\n //! Trait solving using Chalk.\n \n-use std::env::var;\n+use std::{env::var, sync::Arc};\n \n use chalk_ir::GoalData;\n use chalk_recursive::Cache;\n@@ -12,8 +12,9 @@ use stdx::panic_context;\n use syntax::SmolStr;\n \n use crate::{\n-    db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Goal, Guidance, InEnvironment,\n-    Interner, Solution, TraitRefExt, Ty, TyKind, WhereClause,\n+    db::HirDatabase, infer::unify::InferenceTable, AliasEq, AliasTy, Canonical, DomainGoal, Goal,\n+    Guidance, InEnvironment, Interner, ProjectionTy, Solution, TraitRefExt, Ty, TyKind,\n+    WhereClause,\n };\n \n /// This controls how much 'time' we give the Chalk solver before giving up.\n@@ -64,6 +65,16 @@ impl TraitEnvironment {\n     }\n }\n \n+pub(crate) fn normalize_projection_query(\n+    db: &dyn HirDatabase,\n+    projection: ProjectionTy,\n+    env: Arc<TraitEnvironment>,\n+) -> Option<Ty> {\n+    let mut table = InferenceTable::new(db, env.clone());\n+    let ty = table.normalize_projection_ty(projection);\n+    Some(table.resolve_completely(ty))\n+}\n+\n /// Solve a trait goal using Chalk.\n pub(crate) fn trait_solve_query(\n     db: &dyn HirDatabase,"}, {"sha": "7dd891c86e8d681a3a67c24d1cd26efe6dd7ea7f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "patch": "@@ -63,10 +63,9 @@ use hir_ty::{\n     primitive::UintTy,\n     subst_prefix,\n     traits::FnTrait,\n-    AliasEq, AliasTy, BoundVar, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast,\n-    ClosureId, DebruijnIndex, GenericArgData, InEnvironment, Interner, ParamKind,\n-    QuantifiedWhereClause, Scalar, Solution, Substitution, TraitEnvironment, TraitRefExt, Ty,\n-    TyBuilder, TyDefId, TyExt, TyKind, TyVariableKind, WhereClause,\n+    AliasTy, CallableDefId, CallableSig, Canonical, CanonicalVarKinds, Cast, ClosureId,\n+    GenericArgData, Interner, ParamKind, QuantifiedWhereClause, Scalar, Substitution,\n+    TraitEnvironment, TraitRefExt, Ty, TyBuilder, TyDefId, TyExt, TyKind, WhereClause,\n };\n use itertools::Itertools;\n use nameres::diagnostics::DefDiagnosticKind;\n@@ -2892,28 +2891,8 @@ impl Type {\n                 }\n             })\n             .build();\n-        let goal = hir_ty::make_canonical(\n-            InEnvironment::new(\n-                &self.env.env,\n-                AliasEq {\n-                    alias: AliasTy::Projection(projection),\n-                    ty: TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0))\n-                        .intern(Interner),\n-                }\n-                .cast(Interner),\n-            ),\n-            [TyVariableKind::General].into_iter(),\n-        );\n \n-        match db.trait_solve(self.env.krate, goal)? {\n-            Solution::Unique(s) => s\n-                .value\n-                .subst\n-                .as_slice(Interner)\n-                .first()\n-                .map(|ty| self.derived(ty.assert_ty_ref(Interner).clone())),\n-            Solution::Ambig(_) => None,\n-        }\n+        db.normalize_projection(projection, self.env.clone()).map(|ty| self.derived(ty))\n     }\n \n     pub fn is_copy(&self, db: &dyn HirDatabase) -> bool {"}, {"sha": "93fcd7cad7a18e976a5a0ea98f389ac4aa02b8ba", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b1a4ba3e84f021dd3e8eeaaca0eecaa758f8d32c", "patch": "@@ -1687,6 +1687,74 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn iterator_hint_regression_issue_12674() {\n+        // Ensure we don't crash while solving the projection type of iterators.\n+        check_expect(\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: iterators\n+struct S<T>(T);\n+impl<T> S<T> {\n+    fn iter(&self) -> Iter<'_, T> { loop {} }\n+}\n+struct Iter<'a, T: 'a>(&'a T);\n+impl<'a, T> Iterator for Iter<'a, T> {\n+    type Item = &'a T;\n+    fn next(&mut self) -> Option<Self::Item> { loop {} }\n+}\n+struct Container<'a> {\n+    elements: S<&'a str>,\n+}\n+struct SliceIter<'a, T>(&'a T);\n+impl<'a, T> Iterator for SliceIter<'a, T> {\n+    type Item = &'a T;\n+    fn next(&mut self) -> Option<Self::Item> { loop {} }\n+}\n+\n+fn main(a: SliceIter<'_, Container>) {\n+    a\n+    .filter_map(|c| Some(c.elements.iter().filter_map(|v| Some(v))))\n+    .map(|e| e);\n+}\n+            \"#,\n+            expect![[r#\"\n+                [\n+                    InlayHint {\n+                        range: 484..554,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"impl Iterator<Item = impl Iterator<Item = &&str>>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                484..554,\n+                            ),\n+                        ),\n+                    },\n+                    InlayHint {\n+                        range: 484..485,\n+                        kind: ChainingHint,\n+                        label: [\n+                            \"SliceIter<Container>\",\n+                        ],\n+                        tooltip: Some(\n+                            HoverRanged(\n+                                FileId(\n+                                    0,\n+                                ),\n+                                484..485,\n+                            ),\n+                        ),\n+                    },\n+                ]\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn infer_call_method_return_associated_types_with_generic() {\n         check_types("}]}