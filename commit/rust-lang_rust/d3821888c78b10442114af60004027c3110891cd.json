{"sha": "d3821888c78b10442114af60004027c3110891cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzODIxODg4Yzc4YjEwNDQyMTE0YWY2MDAwNDAyN2MzMTEwODkxY2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-02T17:44:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-02T17:44:13Z"}, "message": "Merge branch 'master' into default-run", "tree": {"sha": "723fb97b7bcb305e1eecd4a98d5286395c2f9898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/723fb97b7bcb305e1eecd4a98d5286395c2f9898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3821888c78b10442114af60004027c3110891cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbY0LtCRBK7hj4Ov3rIwAAdHIIADy4koYVK4Fj333gsEGewgL1\nO4uzfteUV52zdOQVFlf7K5iNRzEdRy2huoJY4LTBdcFmy2a3n2uDT52fhMvBSz2+\nz/OUh/U+AcI21deybvYd+iBuw3u/BchWTN/xbglHn+xYo62voDH/uk9di5ukZe+0\nrNM4H/8q/4TOJDLpcNW9UGO7+rwfo20Kgnwreak3XiiNmEumcFSsjd5QqcMKgpFV\nalFE0yFC24cKCZpX/H2z266xIo1mTuo2L1MhMMPKtogYCj+y91wb9w3V1FzxAbgl\nprobJylzwI2vIIcgaEPRHkzJHj6glNC3eeTM/V5/Euv5ZHDhuf3E3WNqPmzsBjU=\n=fM1c\n-----END PGP SIGNATURE-----\n", "payload": "tree 723fb97b7bcb305e1eecd4a98d5286395c2f9898\nparent b45885d31fb32d0c9e05b054ef18698579c244ab\nparent 5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9\nauthor Ralf Jung <post@ralfj.de> 1533231853 +0200\ncommitter GitHub <noreply@github.com> 1533231853 +0200\n\nMerge branch 'master' into default-run"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3821888c78b10442114af60004027c3110891cd", "html_url": "https://github.com/rust-lang/rust/commit/d3821888c78b10442114af60004027c3110891cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3821888c78b10442114af60004027c3110891cd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b45885d31fb32d0c9e05b054ef18698579c244ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45885d31fb32d0c9e05b054ef18698579c244ab", "html_url": "https://github.com/rust-lang/rust/commit/b45885d31fb32d0c9e05b054ef18698579c244ab"}, {"sha": "5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9", "html_url": "https://github.com/rust-lang/rust/commit/5553c458d1a8fe7396abbdbcf1d6f60b9aea6ce9"}], "stats": {"total": 128, "additions": 93, "deletions": 35}, "files": [{"sha": "7773bd3812f1234b246093497de7941b50709a56", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3821888c78b10442114af60004027c3110891cd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d3821888c78b10442114af60004027c3110891cd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d3821888c78b10442114af60004027c3110891cd", "patch": "@@ -24,9 +24,7 @@ required-features = [\"cargo_miri\"]\n [dependencies]\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n cargo_metadata = { version = \"0.6\", optional = true }\n-regex = \"1.0\"\n-lazy_static = \"1.0\"\n-env_logger = \"0.5.0-rc.1\"\n+env_logger = \"0.5\"\n log = \"0.4\"\n \n [features]"}, {"sha": "4e1501dd57f27da2fd41c4e7819b2df1401352c2", "filename": "cargo-miri-test/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3821888c78b10442114af60004027c3110891cd/cargo-miri-test%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3821888c78b10442114af60004027c3110891cd/cargo-miri-test%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fsrc%2Fmain.rs?ref=d3821888c78b10442114af60004027c3110891cd", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let buf = &[1,2,3,4];\n     let n = <BigEndian as ByteOrder>::read_u32(buf);\n     assert_eq!(n, 0x01020304);\n-    //println!(\"{:#x}\", n); FIXME enable once memrchr works in miri\n+    println!(\"{:#010x}\", n);\n     eprintln!(\"standard error\");\n }"}, {"sha": "6710f307cb26daf260543237456b7d44fa2998ab", "filename": "cargo-miri-test/stdout.ref", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3821888c78b10442114af60004027c3110891cd/cargo-miri-test%2Fstdout.ref", "raw_url": "https://github.com/rust-lang/rust/raw/d3821888c78b10442114af60004027c3110891cd/cargo-miri-test%2Fstdout.ref", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Fstdout.ref?ref=d3821888c78b10442114af60004027c3110891cd", "patch": "@@ -0,0 +1 @@\n+0x01020304"}, {"sha": "f16471352c8fad7976e2dac305f0fb0c1b813f6a", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3821888c78b10442114af60004027c3110891cd/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3821888c78b10442114af60004027c3110891cd/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d3821888c78b10442114af60004027c3110891cd", "patch": "@@ -17,9 +17,6 @@ extern crate rustc_data_structures;\n extern crate rustc_mir;\n extern crate rustc_target;\n extern crate syntax;\n-extern crate regex;\n-#[macro_use]\n-extern crate lazy_static;\n \n use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::{TyLayout, LayoutOf, Size};"}, {"sha": "8d55f8ab0afe9c015f2dc9b4d51bd16f3724776a", "filename": "src/validation.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d3821888c78b10442114af60004027c3110891cd/src%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3821888c78b10442114af60004027c3110891cd/src%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalidation.rs?ref=d3821888c78b10442114af60004027c3110891cd", "patch": "@@ -159,34 +159,6 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n         }\n         debug_assert!(self.memory.cur_frame == self.cur_frame());\n \n-        // HACK: Determine if this method is whitelisted and hence we do not perform any validation.\n-        // We currently insta-UB on anything passing around uninitialized memory, so we have to whitelist\n-        // the places that are allowed to do that.\n-        // The second group is stuff libstd does that is forbidden even under relaxed validation.\n-        {\n-            // The regexp we use for filtering\n-            use regex::Regex;\n-            lazy_static! {\n-                static ref RE: Regex = Regex::new(\"^(\\\n-                    (std|alloc::heap::__core)::mem::(uninitialized|forget)::|\\\n-                    <(std|alloc)::heap::Heap as (std::heap|alloc::allocator)::Alloc>::|\\\n-                    <(std|alloc::heap::__core)::mem::ManuallyDrop<T>><.*>::new$|\\\n-                    <(std|alloc::heap::__core)::mem::ManuallyDrop<T> as std::ops::DerefMut><.*>::deref_mut$|\\\n-                    (std|alloc::heap::__core)::ptr::read::|\\\n-                    \\\n-                    <std::sync::Arc<T>><.*>::inner$|\\\n-                    <std::sync::Arc<T>><.*>::drop_slow$|\\\n-                    (std::heap|alloc::allocator)::Layout::for_value::|\\\n-                    (std|alloc::heap::__core)::mem::(size|align)_of_val::\\\n-                )\").unwrap();\n-            }\n-            // Now test\n-            let name = self.frame().instance.to_string();\n-            if RE.is_match(&name) {\n-                return Ok(());\n-            }\n-        }\n-\n         // We need to monomorphize ty *without* erasing lifetimes\n         trace!(\"validation_op1: {:?}\", operand.ty.sty);\n         let ty = operand.ty.subst(self.tcx.tcx, self.substs());"}, {"sha": "36eb85dcf7e8d68fe08f544390a6ac222add2c58", "filename": "tests/run-pass-fullmir/memchr.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d3821888c78b10442114af60004027c3110891cd/tests%2Frun-pass-fullmir%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3821888c78b10442114af60004027c3110891cd/tests%2Frun-pass-fullmir%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fmemchr.rs?ref=d3821888c78b10442114af60004027c3110891cd", "patch": "@@ -0,0 +1,90 @@\n+#![feature(slice_internals)]\n+\n+extern crate core;\n+use core::slice::memchr::{memchr, memrchr};\n+\n+// test fallback implementations on all platforms\n+fn matches_one() {\n+    assert_eq!(Some(0), memchr(b'a', b\"a\"));\n+}\n+\n+fn matches_begin() {\n+    assert_eq!(Some(0), memchr(b'a', b\"aaaa\"));\n+}\n+\n+fn matches_end() {\n+    assert_eq!(Some(4), memchr(b'z', b\"aaaaz\"));\n+}\n+\n+fn matches_nul() {\n+    assert_eq!(Some(4), memchr(b'\\x00', b\"aaaa\\x00\"));\n+}\n+\n+fn matches_past_nul() {\n+    assert_eq!(Some(5), memchr(b'z', b\"aaaa\\x00z\"));\n+}\n+\n+fn no_match_empty() {\n+    assert_eq!(None, memchr(b'a', b\"\"));\n+}\n+\n+fn no_match() {\n+    assert_eq!(None, memchr(b'a', b\"xyz\"));\n+}\n+\n+fn matches_one_reversed() {\n+    assert_eq!(Some(0), memrchr(b'a', b\"a\"));\n+}\n+\n+fn matches_begin_reversed() {\n+    assert_eq!(Some(3), memrchr(b'a', b\"aaaa\"));\n+}\n+\n+fn matches_end_reversed() {\n+    assert_eq!(Some(0), memrchr(b'z', b\"zaaaa\"));\n+}\n+\n+fn matches_nul_reversed() {\n+    assert_eq!(Some(4), memrchr(b'\\x00', b\"aaaa\\x00\"));\n+}\n+\n+fn matches_past_nul_reversed() {\n+    assert_eq!(Some(0), memrchr(b'z', b\"z\\x00aaaa\"));\n+}\n+\n+fn no_match_empty_reversed() {\n+    assert_eq!(None, memrchr(b'a', b\"\"));\n+}\n+\n+fn no_match_reversed() {\n+    assert_eq!(None, memrchr(b'a', b\"xyz\"));\n+}\n+\n+fn each_alignment_reversed() {\n+    let mut data = [1u8; 64];\n+    let needle = 2;\n+    let pos = 40;\n+    data[pos] = needle;\n+    for start in 0..16 {\n+        assert_eq!(Some(pos - start), memrchr(needle, &data[start..]));\n+    }\n+}\n+\n+fn main() {\n+    matches_one();\n+    matches_begin();\n+    matches_end();\n+    matches_nul();\n+    matches_past_nul();\n+    no_match_empty();\n+    no_match();\n+\n+    matches_one_reversed();\n+    matches_begin_reversed();\n+    matches_end_reversed();\n+    matches_nul_reversed();\n+    matches_past_nul_reversed();\n+    no_match_empty_reversed();\n+    no_match_reversed();\n+    each_alignment_reversed();\n+}"}]}