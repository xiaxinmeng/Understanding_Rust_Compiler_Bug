{"sha": "dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYmFhNTAyOTBlZDdjOTcxNTRiYmM0NGU3YmQ3MzkzN2E5ZGNiNWU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-27T00:08:21Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-27T00:08:33Z"}, "message": "Nomenclature fixes in the lint checker. Fewer double-negatives.\n\nNew style is allow(foo), warn(foo), deny(foo) and forbid(foo),\nmirrored by -A foo, -W foo, -D foo and -F foo on command line.\n\nThese replace -W no-foo, -W foo, -W err-foo, respectively.\n\nForbid is new, and means \"deny, and you can't override it\".", "tree": {"sha": "9df88e9fcc73846be943ad6e4cad0057ac41a05b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9df88e9fcc73846be943ad6e4cad0057ac41a05b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "html_url": "https://github.com/rust-lang/rust/commit/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c60a6b93fbb11751dfb411ee2909fa85644fe76f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c60a6b93fbb11751dfb411ee2909fa85644fe76f", "html_url": "https://github.com/rust-lang/rust/commit/c60a6b93fbb11751dfb411ee2909fa85644fe76f"}], "stats": {"total": 365, "additions": 225, "deletions": 140}, "files": [{"sha": "037fb1e4ccfc4de722218a354884c749388fcfbc", "filename": "src/cargo/cargo.rc", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Fcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Fcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -7,7 +7,6 @@\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:\n \n #[link(name = \"cargo\",\n@@ -19,7 +18,15 @@\n \n #[no_core];\n \n-#[warn(no_non_implicitly_copyable_typarams,no_vecs_not_implicitly_copyable)];\n+\n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n+#[warn(no_non_implicitly_copyable_typarams,\n+       no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable,\n+        non_implicitly_copyable_typarams)];\n \n use core(vers = \"0.3\");\n use std(vers = \"0.3\");"}, {"sha": "0b54db3b8a16bb96a67a012c2fe9fd4e1a9db6ff", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -2,7 +2,12 @@\n \n #[no_core];\n \n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable)];\n \n use core(vers = \"0.3\");\n use std(vers = \"0.3\");"}, {"sha": "e172abeb69b869932c5bc195ace8b9f2f5f8727b", "filename": "src/fuzzer/fuzzer.rc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ffuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ffuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -4,7 +4,12 @@\n \n #[no_core];\n \n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable)];\n \n use core(vers = \"0.3\");\n use std(vers = \"0.3\");\n@@ -17,5 +22,4 @@ import core::*;\n // indent-tabs-mode: nil\n // c-basic-offset: 4\n // buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n // End:"}, {"sha": "42df2e6a1d1bf928b356f4c222fb5e9c5403c237", "filename": "src/libcore/core.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -31,7 +31,12 @@\n // Don't link to core. We are core.\n #[no_core];\n \n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable)];\n \n export int, i8, i16, i32, i64;\n export uint, u8, u16, u32, u64;"}, {"sha": "d6f3bf272340d2ea0acd20e4fa6f8241cdff67f4", "filename": "src/libstd/std.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -10,7 +10,12 @@\n \n #[no_core];\n \n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable)];\n \n use core(vers = \"0.3\");\n import core::*;"}, {"sha": "218c32a19803d89c5ecb34584ec6631643510996", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -328,7 +328,9 @@ fn get_concurrency() -> uint {\n     else { threads * sched_overcommit }\n }\n \n+// NB: transitional duplication here.\n #[warn(no_non_implicitly_copyable_typarams)]\n+#[allow(non_implicitly_copyable_typarams)]\n fn filter_tests(opts: test_opts,\n                 tests: ~[test_desc]) -> ~[test_desc] {\n     let mut filtered = copy tests;"}, {"sha": "7b4bc7e11cae68b70badfc4151822ce4b3401fe6", "filename": "src/libsyntax/syntax.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibsyntax%2Fsyntax.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Flibsyntax%2Fsyntax.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -8,7 +8,12 @@\n \n #[no_core];\n \n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable)];\n \n use core(vers = \"0.3\");\n use std(vers = \"0.3\");"}, {"sha": "6c7d24973b985e95b508633dcaa101455d926811", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -158,7 +158,7 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n     crate = time(time_passes, ~\"core injection\", ||\n         front::core_inject::maybe_inject_libcore_ref(sess, crate));\n \n-    time(time_passes, ~\"building warning settings table\", ||\n+    time(time_passes, ~\"building lint settings table\", ||\n         lint::build_settings_crate(sess, crate));\n \n     let ast_map = time(time_passes, ~\"ast indexing\", ||\n@@ -418,17 +418,28 @@ fn build_session_options(match: getopts::match,\n     let parse_only = opt_present(match, ~\"parse-only\");\n     let no_trans = opt_present(match, ~\"no-trans\");\n \n-    let lint_flags = vec::append(getopts::opt_strs(match, ~\"W\"),\n-                                 getopts::opt_strs(match, ~\"warn\"));\n+    let lint_levels = [lint::allow, lint::warn,\n+                       lint::deny, lint::forbid];\n+    let mut lint_opts = ~[];\n     let lint_dict = lint::get_lint_dict();\n-    let lint_opts = do vec::map(lint_flags) |flag| {\n-        alt lint::lookup_lint(lint_dict, flag) {\n-          (flag, none) {\n-            early_error(demitter, #fmt(\"unknown warning: %s\", flag))\n-          }\n-          (_, some(x)) { x }\n+    for lint_levels.each |level| {\n+        let level_name = lint::level_to_str(level);\n+        let level_short = level_name.substr(0,1).to_upper();\n+        let flags = vec::append(getopts::opt_strs(match, level_short),\n+                                getopts::opt_strs(match, level_name));\n+        for flags.each |lint_name| {\n+            let lint_name = str::replace(lint_name, ~\"-\", ~\"_\");\n+            alt lint_dict.find(lint_name) {\n+              none {\n+                early_error(demitter, #fmt(\"unknown %s flag: %s\",\n+                                           level_name, lint_name));\n+              }\n+              some(lint) {\n+                vec::push(lint_opts, (lint.lint, level));\n+              }\n+            }\n         }\n-    };\n+    }\n \n     let mut debugging_opts = 0u;\n     let debug_flags = getopts::opt_strs(match, ~\"Z\");\n@@ -540,7 +551,7 @@ fn build_session_(sopts: @session::options,\n         sopts.maybe_sysroot,\n         sopts.target_triple,\n         sopts.addl_lib_search_paths);\n-    let warning_settings = lint::mk_warning_settings();\n+    let lint_settings = lint::mk_lint_settings();\n     session_(@{targ_cfg: target_cfg,\n                opts: sopts,\n                cstore: cstore,\n@@ -553,7 +564,7 @@ fn build_session_(sopts: @session::options,\n                filesearch: filesearch,\n                mut building_library: false,\n                working_dir: os::getcwd(),\n-               warning_settings: warning_settings})\n+               lint_settings: lint_settings})\n }\n \n fn parse_pretty(sess: session, &&name: ~str) -> pp_mode {\n@@ -582,6 +593,9 @@ fn opts() -> ~[getopts::opt] {\n           optopt(~\"sysroot\"), optopt(~\"target\"),\n \n           optmulti(~\"W\"), optmulti(~\"warn\"),\n+          optmulti(~\"A\"), optmulti(~\"allow\"),\n+          optmulti(~\"D\"), optmulti(~\"deny\"),\n+          optmulti(~\"F\"), optmulti(~\"forbid\"),\n \n           optmulti(~\"Z\"),\n "}, {"sha": "b5039b897316c8eb812d8ab75ede8e6e7f5b9c01", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -1,5 +1,10 @@\n #[no_core];\n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable)];\n \n use core(vers = \"0.3\");\n use std(vers = \"0.3\");\n@@ -66,10 +71,12 @@ Options:\n                        (see http://sources.redhat.com/autobook/autobook/\n                        autobook_17.html for detail)\n \n-    -W <foo>           enable warning <foo>\n-    -W no-<foo>        disable warning <foo>\n-    -W err-<foo>       enable warning <foo> as an error\n-    -W help            Print available warnings and default settings\n+    -(W|A|D|F) help    Print available 'lint' checks and default settings\n+\n+    -W <foo>           warn about <foo> by default\n+    -A <foo>           allow <foo> by default\n+    -D <foo>           deny <foo> by default\n+    -F <foo>           forbid <foo> (deny, and deny all overrides)\n \n     -Z help            list internal options for debugging rustc\n \n@@ -84,7 +91,7 @@ fn describe_warnings() {\n     fn padded(max: uint, s: ~str) -> ~str {\n         str::from_bytes(vec::from_elem(max - s.len(), ' ' as u8)) + s\n     }\n-    io::println(#fmt(\"\\nAvailable warnings:\\n\"));\n+    io::println(#fmt(\"\\nAvailable lint checks:\\n\"));\n     io::println(#fmt(\"    %s  %7.7s  %s\",\n                      padded(max_key, ~\"name\"), ~\"default\", ~\"meaning\"));\n     io::println(#fmt(\"    %s  %7.7s  %s\\n\",\n@@ -93,9 +100,12 @@ fn describe_warnings() {\n         let k = str::replace(k, ~\"_\", ~\"-\");\n         io::println(#fmt(\"    %s  %7.7s  %s\",\n                          padded(max_key, k),\n-                         alt v.default { lint::warn { ~\"warn\" }\n-                                        lint::error { ~\"error\" }\n-                                        lint::ignore { ~\"ignore\" } },\n+                         alt v.default {\n+                             lint::allow { ~\"allow\" }\n+                             lint::warn { ~\"warn\" }\n+                             lint::deny { ~\"deny\" }\n+                             lint::forbid { ~\"forbid\" }\n+                         },\n                          v.desc));\n     }\n     io::println(~\"\");"}, {"sha": "173c66fba1de9a017d7afbfd20f0d23035c66149", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -101,7 +101,7 @@ type session_ = {targ_cfg: @config,\n                  filesearch: filesearch::filesearch,\n                  mut building_library: bool,\n                  working_dir: ~str,\n-                 warning_settings: lint::warning_settings};\n+                 lint_settings: lint::lint_settings};\n \n enum session {\n     session_(@session_)\n@@ -153,16 +153,18 @@ impl session for session {\n     fn span_lint_level(level: lint::level,\n                        sp: span, msg: ~str) {\n         alt level {\n-          lint::ignore { }\n+          lint::allow { }\n           lint::warn { self.span_warn(sp, msg); }\n-          lint::error { self.span_err(sp, msg); }\n+          lint::deny | lint::forbid {\n+            self.span_err(sp, msg);\n+          }\n         }\n     }\n     fn span_lint(lint_mode: lint::lint,\n                  expr_id: ast::node_id, item_id: ast::node_id,\n                  span: span, msg: ~str) {\n-        let level = lint::get_warning_settings_level(\n-            self.warning_settings, lint_mode, expr_id, item_id);\n+        let level = lint::get_lint_settings_level(\n+            self.lint_settings, lint_mode, expr_id, item_id);\n         self.span_lint_level(level, span, msg);\n     }\n     fn next_node_id() -> ast::node_id {"}, {"sha": "e047a525eb51f73bdb1d75d369d868a6f17ec726", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 107, "deletions": 92, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -10,13 +10,13 @@ import io::writer_util;\n import util::ppaux::{ty_to_str};\n import syntax::print::pprust::{expr_to_str, mode_to_str};\n export lint, ctypes, unused_imports, while_true, path_statement, old_vecs;\n-export unrecognized_warning, non_implicitly_copyable_typarams;\n-export vecs_not_implicitly_copyable, implicit_copies;\n-export level, ignore, warn, error;\n-export lookup_lint, lint_dict, get_lint_dict;\n-export get_warning_level, get_warning_settings_level;\n-export check_crate, build_settings_crate, mk_warning_settings;\n-export warning_settings;\n+export unrecognized_lint, non_implicitly_copyable_typarams;\n+export vecs_implicitly_copyable, implicit_copies;\n+export level, allow, warn, deny, forbid;\n+export lint_dict, get_lint_dict, level_to_str;\n+export get_lint_level, get_lint_settings_level;\n+export check_crate, build_settings_crate, mk_lint_settings;\n+export lint_settings;\n \n /**\n  * A 'lint' check is a kind of miscellaneous constraint that a user _might_\n@@ -26,14 +26,14 @@ export warning_settings;\n  * to compile the program at all.\n  *\n  * We also build up a table containing information about lint settings, in\n- * order to allow other passes to take advantage of the warning attribute\n+ * order to allow other passes to take advantage of the lint attribute\n  * infrastructure. To save space, the table is keyed by the id of /items/, not\n  * of every expression. When an item has the default settings, the entry will\n- * be omitted. If we start allowing warn attributes on expressions, we will\n+ * be omitted. If we start allowing lint attributes on expressions, we will\n  * start having entries for expressions that do not share their enclosing\n  * items settings.\n  *\n- * This module then, exports two passes: one that populates the warning\n+ * This module then, exports two passes: one that populates the lint\n  * settings table in the session and is run early in the compile process, and\n  * one that does a variety of lint checks, and is run late in the compile\n  * process.\n@@ -45,9 +45,9 @@ enum lint {\n     while_true,\n     path_statement,\n     implicit_copies,\n-    unrecognized_warning,\n+    unrecognized_lint,\n     non_implicitly_copyable_typarams,\n-    vecs_not_implicitly_copyable,\n+    vecs_implicitly_copyable,\n     deprecated_mode,\n }\n \n@@ -60,15 +60,24 @@ fn int_to_lint(i: int) -> lint {\n       2 { while_true }\n       3 { path_statement }\n       4 { implicit_copies }\n-      5 { unrecognized_warning }\n+      5 { unrecognized_lint }\n       6 { non_implicitly_copyable_typarams }\n-      7 { vecs_not_implicitly_copyable }\n+      7 { vecs_implicitly_copyable }\n       8 { deprecated_mode }\n     }\n }\n \n+fn level_to_str(lv: level) -> ~str {\n+    alt lv {\n+      allow { ~\"allow\" }\n+      warn { ~\"warn\" }\n+      deny { ~\"deny\" }\n+      forbid { ~\"forbid\" }\n+    }\n+}\n+\n enum level {\n-    ignore, warn, error\n+    allow, warn, deny, forbid\n }\n \n type lint_spec = @{lint: lint,\n@@ -91,7 +100,7 @@ fn get_lint_dict() -> lint_dict {\n         (~\"unused_imports\",\n          @{lint: unused_imports,\n            desc: ~\"imports that are never used\",\n-           default: ignore}),\n+           default: allow}),\n \n         (~\"while_true\",\n          @{lint: while_true,\n@@ -103,20 +112,20 @@ fn get_lint_dict() -> lint_dict {\n            desc: ~\"path statements with no effect\",\n            default: warn}),\n \n-        (~\"unrecognized_warning\",\n-         @{lint: unrecognized_warning,\n-           desc: ~\"unrecognized warning attribute\",\n+        (~\"unrecognized_lint\",\n+         @{lint: unrecognized_lint,\n+           desc: ~\"unrecognized lint attribute\",\n            default: warn}),\n \n         (~\"non_implicitly_copyable_typarams\",\n          @{lint: non_implicitly_copyable_typarams,\n            desc: ~\"passing non implicitly copyable types as copy type params\",\n            default: warn}),\n \n-        (~\"vecs_not_implicitly_copyable\",\n-         @{lint: vecs_not_implicitly_copyable,\n-           desc: ~\"make vecs and strs not implicitly copyable\\\n-                  (`err` is ignored; only checked at top level\",\n+        (~\"vecs_implicitly_copyable\",\n+         @{lint: vecs_implicitly_copyable,\n+           desc: ~\"make vecs and strs not implicitly copyable \\\n+                  (only checked at top level)\",\n            default: warn}),\n \n         (~\"implicit_copies\",\n@@ -127,7 +136,7 @@ fn get_lint_dict() -> lint_dict {\n         (~\"deprecated_mode\",\n          @{lint: deprecated_mode,\n            desc: ~\"warn about deprecated uses of modes\",\n-           default: ignore})\n+           default: allow})\n     ];\n     hash_from_strs(v)\n }\n@@ -136,33 +145,33 @@ fn get_lint_dict() -> lint_dict {\n type lint_modes = smallintmap<level>;\n type lint_mode_map = hashmap<ast::node_id, lint_modes>;\n \n-// settings_map maps node ids of items with non-default warning settings\n+// settings_map maps node ids of items with non-default lint settings\n // to their settings; default_settings contains the settings for everything\n // not in the map.\n-type warning_settings = {\n+type lint_settings = {\n     default_settings: lint_modes,\n     settings_map: lint_mode_map\n };\n \n-fn mk_warning_settings() -> warning_settings {\n+fn mk_lint_settings() -> lint_settings {\n     {default_settings: std::smallintmap::mk(),\n      settings_map: int_hash()}\n }\n \n-fn get_warning_level(modes: lint_modes, lint: lint) -> level {\n+fn get_lint_level(modes: lint_modes, lint: lint) -> level {\n     alt modes.find(lint as uint) {\n       some(c) { c }\n-      none { ignore }\n+      none { allow }\n     }\n }\n \n-fn get_warning_settings_level(settings: warning_settings,\n+fn get_lint_settings_level(settings: lint_settings,\n                               lint_mode: lint,\n                               _expr_id: ast::node_id,\n                               item_id: ast::node_id) -> level {\n     alt settings.settings_map.find(item_id) {\n-      some(modes) { get_warning_level(modes, lint_mode) }\n-      none { get_warning_level(settings.default_settings, lint_mode) }\n+      some(modes) { get_lint_level(modes, lint_mode) }\n+      none { get_lint_level(settings.default_settings, lint_mode) }\n     }\n }\n \n@@ -183,11 +192,11 @@ enum ctxt {\n \n impl methods for ctxt {\n     fn get_level(lint: lint) -> level {\n-        get_warning_level(self.curr, lint)\n+        get_lint_level(self.curr, lint)\n     }\n \n     fn set_level(lint: lint, level: level) {\n-        if level == ignore {\n+        if level == allow {\n             self.curr.remove(lint as uint);\n         } else {\n             self.curr.insert(lint as uint, level);\n@@ -199,82 +208,88 @@ impl methods for ctxt {\n     }\n \n     /**\n-     * Merge the warnings specified by any `warn(...)` attributes into the\n+     * Merge the lints specified by any lint attributes into the\n      * current lint context, call the provided function, then reset the\n-     * warnings in effect to their previous state.\n+     * lints in effect to their previous state.\n      */\n-    fn with_warn_attrs(attrs: ~[ast::attribute], f: fn(ctxt)) {\n+    fn with_lint_attrs(attrs: ~[ast::attribute], f: fn(ctxt)) {\n \n         let mut new_ctxt = self;\n-\n-        let metas = attr::attr_metas(\n-            attr::find_attrs_by_name(attrs, ~\"warn\"));\n-        for metas.each |meta| {\n-            alt meta.node {\n-              ast::meta_list(_, metas) {\n-                for metas.each |meta| {\n-                    alt meta.node {\n-                      ast::meta_word(lintname) {\n-                        alt lookup_lint(self.dict, *lintname) {\n-                          (name, none) {\n-                            self.span_lint(\n-                                self.get_level(unrecognized_warning),\n-                                meta.span,\n-                                #fmt(\"unknown warning: `%s`\", name));\n+        let mut triples = ~[];\n+\n+        for [allow, warn, deny, forbid].each |level| {\n+            let level_name = level_to_str(level);\n+            let metas =\n+                attr::attr_metas(attr::find_attrs_by_name(attrs,\n+                                                          level_name));\n+            for metas.each |meta| {\n+                alt meta.node {\n+                  ast::meta_list(_, metas) {\n+                    for metas.each |meta| {\n+                        alt meta.node {\n+                          ast::meta_word(lintname) {\n+                            vec::push(triples, (meta, level, lintname));\n                           }\n-                          (_, some((lint, new_level))) {\n-                            // we do multiple unneeded copies of the map\n-                            // if many attributes are set, but this shouldn't\n-                            // actually be a problem...\n-                            new_ctxt =\n-                                ctxt_({is_default: false,\n-                                       curr: clone_lint_modes(new_ctxt.curr)\n-                                      with *new_ctxt});\n-                            new_ctxt.set_level(lint, new_level);\n+                          _ {\n+                            self.sess.span_err(\n+                                meta.span,\n+                                ~\"malformed lint attribute\");\n                           }\n                         }\n-                      }\n-                      _ {\n-                        self.sess.span_err(\n-                            meta.span,\n-                            ~\"malformed warning attribute\");\n-                      }\n                     }\n+                  }\n+                  _  {\n+                    self.sess.span_err(meta.span,\n+                                       ~\"malformed lint attribute\");\n+                  }\n                 }\n+            }\n+        }\n+\n+        for triples.each |pair| {\n+            let (meta, level, lintname) = pair;\n+            alt self.dict.find(*lintname) {\n+              none {\n+                self.span_lint(\n+                    new_ctxt.get_level(unrecognized_lint),\n+                    meta.span,\n+                    #fmt(\"unknown `%s` attribute: `%s`\",\n+                         level_to_str(level), *lintname));\n               }\n-              _ {\n-                self.sess.span_err(meta.span,\n-                                   ~\"malformed warning attribute\");\n+              some(lint) {\n+\n+                if new_ctxt.get_level(lint.lint) == forbid &&\n+                    level != forbid {\n+                    self.span_lint(\n+                        forbid,\n+                        meta.span,\n+                        #fmt(\"%s(%s) overruled by outer forbid(%s)\",\n+                             level_to_str(level),\n+                             *lintname, *lintname));\n+                }\n+\n+                // we do multiple unneeded copies of the\n+                // map if many attributes are set, but\n+                // this shouldn't actually be a problem...\n+\n+                let c = clone_lint_modes(new_ctxt.curr);\n+                new_ctxt =\n+                    ctxt_({is_default: false,\n+                           curr: c,\n+                           with *new_ctxt});\n+                new_ctxt.set_level(lint.lint, level);\n               }\n             }\n         }\n-\n         f(new_ctxt);\n     }\n }\n \n \n-fn lookup_lint(dict: lint_dict, s: ~str)\n-    -> (~str, option<(lint, level)>) {\n-    let s = str::replace(s, ~\"-\", ~\"_\");\n-    let (name, level) = if s.starts_with(~\"no_\") {\n-        (s.substr(3u, s.len() - 3u), ignore)\n-    } else if s.starts_with(~\"err_\") {\n-        (s.substr(4u, s.len() - 4u), error)\n-    } else {\n-        (s, warn)\n-    };\n-    (name,\n-     alt dict.find(name) {\n-         none { none }\n-         some(spec) { some((spec.lint, level)) }\n-     })\n-}\n-\n fn build_settings_item(i: @ast::item, &&cx: ctxt, v: visit::vt<ctxt>) {\n-    do cx.with_warn_attrs(i.attrs) |cx| {\n+    do cx.with_lint_attrs(i.attrs) |cx| {\n         if !cx.is_default {\n-            cx.sess.warning_settings.settings_map.insert(i.id, cx.curr);\n+            cx.sess.lint_settings.settings_map.insert(i.id, cx.curr);\n         }\n         visit::visit_item(i, cx, v);\n     }\n@@ -296,10 +311,10 @@ fn build_settings_crate(sess: session::session, crate: @ast::crate) {\n         cx.set_level(lint, level);\n     }\n \n-    do cx.with_warn_attrs(crate.node.attrs) |cx| {\n+    do cx.with_lint_attrs(crate.node.attrs) |cx| {\n         // Copy out the default settings\n         for cx.curr.each |k, v| {\n-            sess.warning_settings.default_settings.insert(k, v);\n+            sess.lint_settings.default_settings.insert(k, v);\n         }\n \n         let cx = ctxt_({is_default: true with *cx});"}, {"sha": "65ab9e889c069c1415fbb7b06100e68bb00de91f", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -3,7 +3,7 @@ import metadata::csearch::{each_path, get_impls_for_mod};\n import metadata::csearch::{get_method_names_if_trait, lookup_defs};\n import metadata::cstore::find_use_stmt_cnum;\n import metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n-import middle::lint::{error, ignore, level, unused_imports, warn};\n+import middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n import syntax::ast::{_mod, arm, blk, bound_const, bound_copy, bound_trait};\n import syntax::ast::{bound_owned};\n import syntax::ast::{bound_send, capture_clause, class_ctor, class_dtor};\n@@ -447,7 +447,7 @@ fn unused_import_lint_level(session: session) -> level {\n             ret lint_level;\n         }\n     }\n-    ret ignore;\n+    ret allow;\n }\n \n // Records the definitions (at most one for each namespace) that a name is\n@@ -4363,7 +4363,7 @@ class Resolver {\n     //\n \n     fn check_for_unused_imports_if_necessary() {\n-        if self.unused_import_lint_level == ignore {\n+        if self.unused_import_lint_level == allow {\n             ret;\n         }\n \n@@ -4418,14 +4418,14 @@ class Resolver {\n                         self.session.span_warn(import_resolution.span,\n                                                ~\"unused import\");\n                     }\n-                    error {\n-                        self.session.span_err(import_resolution.span,\n-                                              ~\"unused import\");\n+                    deny | forbid {\n+                      self.session.span_err(import_resolution.span,\n+                                            ~\"unused import\");\n                     }\n-                    ignore {\n-                        self.session.span_bug(import_resolution.span,\n-                                              ~\"shouldn't be here if lint \\\n-                                               pass is ignored\");\n+                    allow {\n+                      self.session.span_bug(import_resolution.span,\n+                                            ~\"shouldn't be here if lint \\\n+                                              is allowed\");\n                     }\n                 }\n             }"}, {"sha": "7b8c9958d0f6261a76a6a5425afca9bc6aa834ed", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -11,8 +11,8 @@ import syntax::codemap::span;\n import metadata::csearch;\n import util::ppaux::region_to_str;\n import util::ppaux::vstore_to_str;\n-import middle::lint::{get_warning_level, vecs_not_implicitly_copyable,\n-                      ignore};\n+import middle::lint;\n+import middle::lint::{get_lint_level, allow};\n import syntax::ast::*;\n import syntax::print::pprust::*;\n import util::ppaux::{ty_to_str, tys_to_str};\n@@ -560,8 +560,8 @@ fn mk_ctxt(s: session::session,\n             option::map_default(k.o_def_id, 0u, ast_util::hash_def)\n     }, |&&a, &&b| a == b);\n     let vecs_implicitly_copyable =\n-        get_warning_level(s.warning_settings.default_settings,\n-                          vecs_not_implicitly_copyable) == ignore;\n+        get_lint_level(s.lint_settings.default_settings,\n+                       lint::vecs_implicitly_copyable) == allow;\n     @{diag: s.diagnostic(),\n       interner: interner,\n       mut next_id: 0u,"}, {"sha": "074346cd691b3c45f5eb861c8f2b7867172437d6", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -11,7 +11,12 @@\n \n #[no_core];\n \n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable)];\n \n use core(vers = \"0.3\");\n use std(vers = \"0.3\");"}, {"sha": "9364d2b5236056b42ea9ee4e43a692dd799f1d3a", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -11,7 +11,13 @@\n \n #[no_core];\n \n+// NB: transitional for stage0:\n+#[allow(unrecognized_lint)];\n+#[warn(no_unrecognized_warning)];\n #[warn(no_vecs_not_implicitly_copyable)];\n+// The new version:\n+#[allow(vecs_implicitly_copyable,\n+        non_implicitly_copyable_typarams)];\n \n use core(vers = \"0.3\");\n use std(vers = \"0.3\");"}, {"sha": "c4c2c11a104dd6f74b5bd68467b150c51b6ac683", "filename": "src/test/compile-fail/issue-1962.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1962.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -W err-while-true\n+// compile-flags: -D while-true\n fn main() {\n   let mut i = 0;\n   while true  { //~ ERROR denote infinite loops with loop"}, {"sha": "de2849a78deabf9f050fed7a656586ac72a3283c", "filename": "src/test/compile-fail/warn-ctypes-err-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes-err-attr.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:found rust type\n-#[warn(err_ctypes)];\n+#[deny(ctypes)];\n \n #[nolink]\n extern mod libc {"}, {"sha": "1bf05b4c190f61ff85a4706a847ee9a002ad69b6", "filename": "src/test/compile-fail/warn-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-ctypes.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags:-W err-ctypes\n+// compile-flags:-D ctypes\n // error-pattern:found rust type\n #[nolink]\n extern mod libc {"}, {"sha": "1c928a91b2679aa37c438cc11d7e75aae01a9191", "filename": "src/test/compile-fail/warn-path-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -W err-path-statement\n+// compile-flags: -D path-statement\n fn main() {\n \n     let x = 10;"}, {"sha": "48cddf5661c690545ad7f44957966ce098590da7", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=dbbaa50290ed7c97154bbc44e7bd73937a9dcb5e", "patch": "@@ -1,6 +1,6 @@\n-// compile-flags:-W err-ctypes\n+// compile-flags:-D ctypes\n \n-#[warn(no_ctypes)];\n+#[allow(ctypes)];\n \n #[nolink]\n extern mod libc {"}]}