{"sha": "b548814a8b01ee155ceb2946fc92a47dcbe74197", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDg4MTRhOGIwMWVlMTU1Y2ViMjk0NmZjOTJhNDdkY2JlNzQxOTc=", "commit": {"author": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-09-23T22:37:18Z"}, "committer": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-09-23T22:37:18Z"}, "message": "remove rtp.rs, and move rtpSpawn and RTP_ID_ERROR to libc", "tree": {"sha": "8e93f0e1feb25cfe9c4d50578dfff856dbcfe0b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e93f0e1feb25cfe9c4d50578dfff856dbcfe0b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b548814a8b01ee155ceb2946fc92a47dcbe74197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b548814a8b01ee155ceb2946fc92a47dcbe74197", "html_url": "https://github.com/rust-lang/rust/commit/b548814a8b01ee155ceb2946fc92a47dcbe74197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b548814a8b01ee155ceb2946fc92a47dcbe74197/comments", "author": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27532330e909ac7af1507d292621751dbe61cd49", "url": "https://api.github.com/repos/rust-lang/rust/commits/27532330e909ac7af1507d292621751dbe61cd49", "html_url": "https://github.com/rust-lang/rust/commit/27532330e909ac7af1507d292621751dbe61cd49"}], "stats": {"total": 304, "additions": 2, "deletions": 302}, "files": [{"sha": "3ecbe4e3b28bade683b37fd9b6b07382ee895331", "filename": "src/libstd/sys/vxworks/process/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b548814a8b01ee155ceb2946fc92a47dcbe74197/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b548814a8b01ee155ceb2946fc92a47dcbe74197/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fmod.rs?ref=b548814a8b01ee155ceb2946fc92a47dcbe74197", "patch": "@@ -5,4 +5,3 @@ pub use crate::ffi::OsString as EnvKey;\n mod process_common;\n #[path = \"process_vxworks.rs\"]\n mod process_inner;\n-mod rtp;"}, {"sha": "beb20aa48169a7a25eac1f7bfed6a2471927a993", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b548814a8b01ee155ceb2946fc92a47dcbe74197/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b548814a8b01ee155ceb2946fc92a47dcbe74197/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=b548814a8b01ee155ceb2946fc92a47dcbe74197", "patch": "@@ -3,7 +3,6 @@ use libc::{self, c_int, c_char};\n use libc::{RTP_ID};\n use crate::sys;\n use crate::sys::cvt;\n-use crate::sys::process::rtp;\n use crate::sys::process::process_common::*;\n use crate::sys_common::thread;\n \n@@ -53,7 +52,7 @@ impl Command {\n                 t!(cvt(libc::chdir(cwd.as_ptr())));\n             }\n \n-            let ret = rtp::rtpSpawn(\n+            let ret = libc::rtpSpawn(\n                 self.get_argv()[0],                   // executing program\n                 self.get_argv().as_ptr() as *const _, // argv\n                 *sys::os::environ() as *const *const c_char,\n@@ -78,7 +77,7 @@ impl Command {\n                 libc::close(orig_stderr);\n             }\n \n-            if ret != rtp::RTP_ID_ERROR {\n+            if ret != libc::RTP_ID_ERROR {\n                 p.pid = ret;\n                 Ok((p, ours))\n             } else {"}, {"sha": "3e6e0017abcb582e31772cb2f3f0bf6b370b5c26", "filename": "src/libstd/sys/vxworks/process/rtp.rs", "status": "removed", "additions": 0, "deletions": 298, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/27532330e909ac7af1507d292621751dbe61cd49/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Frtp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27532330e909ac7af1507d292621751dbe61cd49/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Frtp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Frtp.rs?ref=27532330e909ac7af1507d292621751dbe61cd49", "patch": "@@ -1,298 +0,0 @@\n-#![allow(non_camel_case_types, unused)]\n-\n-use libc::{self, c_int, size_t, c_char, BOOL, RTP_DESC, RTP_ID, TASK_ID};\n-\n-\n-// Copied directly from rtpLibCommon.h, rtpLib.h, signal.h and taskLibCommon.h (for task options)\n-\n-// ****     definitions for rtpLibCommon.h    ****\n-\n-pub const RTP_GLOBAL_SYMBOLS     : c_int = 0x01; // register global symbols for RTP\n-pub const RTP_LOCAL_SYMBOLS      : c_int = 0x02; // idem for local symbols\n-pub const RTP_ALL_SYMBOLS        : c_int = (RTP_GLOBAL_SYMBOLS | RTP_LOCAL_SYMBOLS);\n-pub const RTP_DEBUG              : c_int = 0x10; // set RTP in debug mode when created\n-pub const RTP_BUFFER_VAL_OFF     : c_int = 0x20; // disable buffer validation for all\n-                                                 // system calls issued from the RTP\n-pub const RTP_LOADED_WAIT        : c_int = 0x40; // Wait until the RTP is loaded\n-pub const RTP_CPU_AFFINITY_NONE  : c_int = 0x80; // Remove any CPU affinity (SMP)\n-\n-// Error Status codes\n-\n-pub const M_rtpLib : c_int = 178 << 16;\n-\n-pub const S_rtpLib_INVALID_FILE                   : c_int = (M_rtpLib | 1);\n-pub const S_rtpLib_INVALID_OPTION                 : c_int = (M_rtpLib | 2);\n-pub const S_rtpLib_ACCESS_DENIED                  : c_int = (M_rtpLib | 3);\n-pub const S_rtpLib_INVALID_RTP_ID                 : c_int = (M_rtpLib | 4);\n-pub const S_rtpLib_NO_SYMBOL_TABLE                : c_int = (M_rtpLib | 5);\n-pub const S_rtpLib_INVALID_SEGMENT_START_ADDRESS  : c_int = (M_rtpLib | 6);\n-pub const S_rtpLib_INVALID_SYMBOL_REGISTR_POLICY  : c_int = (M_rtpLib | 7);\n-pub const S_rtpLib_INSTANTIATE_FAILED             : c_int = (M_rtpLib | 8);\n-pub const S_rtpLib_INVALID_TASK_OPTION            : c_int = (M_rtpLib | 9);\n-pub const S_rtpLib_RTP_NAME_LENGTH_EXCEEDED       : c_int = (M_rtpLib | 10);    // rtpInfoGet\n-\n-pub const VX_RTP_NAME_LENGTH                      : c_int  = 255;    // max name length for diplay\n-\n-\n-// The 'status' field (32 bit integer) of a RTP holds the RTP state and status.\n-//\n-// NOTE: RTP_STATE_GET()    : read the RTP state(s)\n-//       RTP_STATE_PUT()    : write the RTP state(s)\n-//       RTP_STATE_SET()    : set a RTP state\n-//       RTP_STATE_UNSET()  : unset a RTP state\n-//\n-//       RTP_STATUS_GET()   : read the RTP status\n-//       RTP_STATUS_PUT()   : write the RTP status\n-//       RTP_STATUS_SET()   : set a RTP status\n-//       RTP_STATUS_UNSET() : unset a RTP status\n-//\n-// The PUT/SET/UNSET macros are available only in the kernel headers.\n-\n-\n-// RTP states\n-\n-pub const RTP_STATE_CREATE           : c_int  = 0x0001; // RrtpStructTP is under construction\n-pub const RTP_STATE_NORMAL           : c_int  = 0x0002; // RrtpStructTP is ready\n-pub const RTP_STATE_DELETE           : c_int  = 0x0004; // RrtpStructTP is being deleted\n-\n-pub const RTP_STATUS_STOP            : c_int  = 0x0100; // RTP hrtpStructas recieved stopped signal\n-pub const RTP_STATUS_ELECTED_DELETER : c_int  = 0x0200; // RTP drtpStructelete has started\n-\n-pub const RTP_STATE_MASK             : c_int  = (RTP_STATE_CREATE | RTP_STATE_NORMAL |\n-                                                 RTP_STATE_DELETE);\n-pub const RTP_STATUS_MASK            : c_int  = (RTP_STATUS_STOP | RTP_STATUS_ELECTED_DELETER);\n-\n-pub fn RTP_STATE_GET  (value : c_int) -> c_int {\n-    value & RTP_STATE_MASK\n-}\n-pub fn RTP_STATUS_GET (value : c_int) -> c_int {\n-    value & RTP_STATUS_MASK\n-}\n-\n-// Indicates that the RTP_ID returned is not valid.\n-\n-// RTP_ID_ERROR is supposed to be set to -1, but you can't set\n-// an unsigned value to a negative without casting, and you\n-// can't cast unless the size of the integer types are the same,\n-// but the size of RTP_ID may differ between kernel and user space.\n-// Bitwise or-ing min and max should get the same result.\n-pub const RTP_ID_ERROR : RTP_ID = RTP_ID::min_value() | RTP_ID::max_value();\n-\n-// IS_RTP_ C macros\n-\n-pub fn IS_RTP_STATE_NORMAL           (value : c_int) -> bool {\n-    (RTP_STATE_GET(value)  & RTP_STATE_NORMAL) == RTP_STATE_NORMAL\n-}\n-pub fn IS_RTP_STATE_CREATE           (value : c_int) -> bool {\n-    (RTP_STATE_GET(value)  & RTP_STATE_CREATE) == RTP_STATE_CREATE\n-}\n-pub fn IS_RTP_STATE_DELETE           (value : c_int) -> bool {\n-    (RTP_STATE_GET(value)  & RTP_STATE_DELETE) == RTP_STATE_DELETE\n-}\n-pub fn IS_RTP_STATUS_STOP            (value : c_int) -> bool {\n-    (RTP_STATUS_GET(value) & RTP_STATUS_STOP ) == RTP_STATUS_STOP\n-}\n-pub fn IS_RTP_STATUS_ELECTED_DELETER (value : c_int) -> bool {\n-    (RTP_STATUS_GET(value) &  RTP_STATUS_ELECTED_DELETER) == RTP_STATUS_ELECTED_DELETER\n-}\n-\n-// **** end of definitions for rtpLibCommon.h ****\n-\n-\n-\n-\n-// ****    definitions for rtpLib.h     ****\n-\n-pub fn rtpExit(exitCode : c_int) -> ! {\n-    unsafe{ libc::exit (exitCode) }\n-}\n-\n-/* rtpLib.h in the kernel\n-pub const RTP_DEL_VIA_TASK_DELETE : c_int  = 0x1;          // rtpDelete() via taskDestroy()\n-pub const RTP_DEL_FORCE           : c_int  = 0x2;          // Forceful  rtpDelete()\n-pub const RTP_ID_ANY              : RTP_ID = 0;            // used for when a kernel task\n-                                                           // wants to wait for the next\n-                                                           // RTP to finish\n-\n-\n-// Function pointers\n-\n-pub type RTP_PRE_CREATE_HOOK    = size_t;\n-pub type RTP_POST_CREATE_HOOK   = size_t;\n-pub type RTP_INIT_COMPLETE_HOOK = size_t;\n-pub type RTP_DELETE_HOOK        = size_t;\n-*/\n-\n-// **** end of definitions for rtpLib.h ****\n-\n-\n-\n-\n-\n-// ****     definitions for signal.h    ****\n-pub fn rtpKill(rtpId : RTP_ID, signo : c_int) -> c_int {\n-    unsafe{ libc::kill(rtpId as c_int, signo) }\n-}\n-\n-pub fn rtpSigqueue(rtpId : RTP_ID, signo : c_int, value : size_t) -> c_int {\n-    unsafe{ libc::sigqueue(rtpId as c_int, signo, value) }\n-}\n-\n-pub fn _rtpSigqueue(rtpId : RTP_ID, signo : c_int, value : *mut size_t, code : c_int) -> c_int {\n-    unsafe{ libc::_sigqueue(rtpId, signo, value, code) }\n-}\n-\n-pub fn taskRaise(signo : c_int) -> c_int {\n-    unsafe{ libc::taskKill(libc::taskIdSelf(), signo) }\n-}\n-pub fn rtpRaise(signo : c_int) -> c_int {\n-    unsafe{ libc::raise(signo) }\n-}\n-\n-// **** end of definitions for signal.h ****\n-\n-\n-\n-// ****     definitions for taskLibCommon.h    ****\n-pub const VX_PRIVATE_ENV      : c_int = 0x0080;  // 1 = private environment variables\n-pub const VX_NO_STACK_FILL    : c_int = 0x0100;  // 1 = avoid stack fill of 0xee\n-pub const VX_PRIVATE_UMASK    : c_int = 0x0400;  // 1 = private file creation mode mask\n-pub const VX_TASK_NOACTIVATE  : c_int = 0x2000;  // taskOpen() does not taskActivate()\n-pub const VX_NO_STACK_PROTECT : c_int = 0x4000;  // no over/underflow stack protection,\n-                                                 // stack space remains executable\n-\n-// define for all valid user task options\n-\n-pub const VX_USR_TASK_OPTIONS_BASE: c_int = (VX_PRIVATE_ENV      |\n-                                             VX_NO_STACK_FILL    |\n-                                             VX_TASK_NOACTIVATE  |\n-                                             VX_NO_STACK_PROTECT |\n-                                             VX_PRIVATE_UMASK);\n-\n-// **** end of definitions for taskLibCommon.h ****\n-\n-\n-\n-extern \"C\" {\n-// functions in rtpLibCommon.h\n-\n-// forward declarations\n-    pub fn rtpSpawn (\n-        pubrtpFileName : *const c_char,\n-        argv           : *const *const c_char,\n-        envp           : *const *const c_char,\n-        priority       : c_int,\n-        uStackSize     : size_t,\n-        options        : c_int,\n-        taskOptions    : c_int,\n-    ) -> RTP_ID;\n-\n-    pub fn rtpInfoGet (\n-        rtpId     : RTP_ID,\n-        rtpStruct : *mut RTP_DESC,\n-    ) -> c_int;\n-\n-/* functions in rtpLib.h for kernel\n-\n-\n-    // function declarations\n-\n-    pub fn rtpDelete (\n-        id      : RTP_ID,\n-        options : c_int,\n-        status  : c_int,\n-    ) -> c_int;\n-\n-    pub fn rtpDeleteForce (\n-        rtpId : RTP_ID\n-    ) -> c_int;\n-\n-    pub fn rtpShow (\n-        rtpNameOrId : *mut c_char,\n-        level       : c_int,\n-    ) -> BOOL;\n-\n-    // RTP signals are always present when RTPs are included.  The public RTP\n-    // signal APIs are declared here.\n-\n-\n-    pub fn rtpKill (\n-        rtpId : RTP_ID,\n-        signo : c_int,\n-    ) -> c_int;\n-\n-    pub fn rtpSigqueue (\n-        rtpId : RTP_ID,\n-        signo : c_int,\n-        value : size_t, // Actual type is const union sigval value,\n-                        // which is a union of int and void *\n-    ) -> c_int;\n-\n-    pub fn rtpTaskKill (\n-        tid   : TASK_ID,\n-        signo : c_int,\n-    ) -> c_int;\n-\n-    pub fn rtpTaskSigqueue (\n-        tid   : TASK_ID,\n-        signo : c_int,\n-        value : const size_t, // Actual type is const union sigval,\n-                        // which is a union of int and void *\n-    ) -> c_int;\n-\n-    pub fn rtpWait (\n-        rtpWaitId : RTP_ID,\n-        timeout   : libc::alloc_jemalloc_Vx_ticks_t,\n-        pRtpId    : *mut RTP_ID,\n-        pStatus   : *mut c_int,\n-    ) -> c_int;\n-\n-                             // Other public functions\n-\n-\n-    pub fn rtpPreCreateHookAdd     (\n-        hook      : RTP_PRE_CREATE_HOOK,\n-        addToHead : BOOL,\n-    ) -> c_int;\n-\n-    pub fn rtpPreCreateHookDelete  (\n-        hook      : RTP_POST_CREATE_HOOK,\n-    ) -> c_int;\n-\n-    pub fn rtpPostCreateHookAdd    (\n-        hook      : RTP_POST_CREATE_HOOK,\n-        addToHead : BOOL,\n-    ) -> c_int;\n-\n-    pub fn rtpPostCreateHookDelete (\n-        hook      : RTP_POST_CREATE_HOOK,\n-    ) -> c_int;\n-\n-    pub fn rtpInitCompleteHookAdd  (\n-        hook      : RTP_INIT_COMPLETE_HOOK,\n-        addToHead : BOOL,\n-    ) -> c_int;\n-\n-    pub fn rtpInitCompleteHookDelete (\n-        hook      : RTP_INIT_COMPLETE_HOOK,\n-    ) -> c_int;\n-\n-    pub fn rtpDeleteHookAdd        (\n-        hook      : RTP_DELETE_HOOK,\n-        addToHead : BOOL,\n-    ) -> c_int;\n-\n-    pub fn rtpDeleteHookDelete     (\n-        hook      : RTP_DELETE_HOOK,\n-    ) -> c_int;\n-\n-    pub fn rtpMemShow              (\n-        rtpNameOrId : *mut c_char,\n-        level       : c_int,\n-    ) -> c_int;\n-\n-    pub fn rtpHookShow             (\n-\n-    );\n-*/\n-}"}]}