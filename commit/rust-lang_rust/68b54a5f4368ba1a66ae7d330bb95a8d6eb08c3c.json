{"sha": "68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YjU0YTVmNDM2OGJhMWE2NmFlN2QzMzBiYjk1YThkNmViMDhjM2M=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-04-01T16:50:21Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-04-01T16:50:21Z"}, "message": "add a dist-thumb builder to build rust-std for the THUMB targets\n\nthe rust-std component only contains the core and compiler-builtins (+c +mem) crates\n\ncc #49382", "tree": {"sha": "018653a4a0db10a07ec833a2b10d30447b66b43b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/018653a4a0db10a07ec833a2b10d30447b66b43b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "html_url": "https://github.com/rust-lang/rust/commit/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb1f89864e73692d4cad83270d6b5e31047f96cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1f89864e73692d4cad83270d6b5e31047f96cf", "html_url": "https://github.com/rust-lang/rust/commit/cb1f89864e73692d4cad83270d6b5e31047f96cf"}], "stats": {"total": 122, "additions": 87, "deletions": 35}, "files": [{"sha": "eaf4ab272c68ef7defc36028a0cfde6331d69756", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "patch": "@@ -140,48 +140,55 @@ pub fn std_cargo(build: &Builder,\n                  compiler: &Compiler,\n                  target: Interned<String>,\n                  cargo: &mut Command) {\n-    let mut features = build.std_features();\n-\n     if let Some(target) = env::var_os(\"MACOSX_STD_DEPLOYMENT_TARGET\") {\n         cargo.env(\"MACOSX_DEPLOYMENT_TARGET\", target);\n     }\n \n-    // When doing a local rebuild we tell cargo that we're stage1 rather than\n-    // stage0. This works fine if the local rust and being-built rust have the\n-    // same view of what the default allocator is, but fails otherwise. Since\n-    // we don't have a way to express an allocator preference yet, work\n-    // around the issue in the case of a local rebuild with jemalloc disabled.\n-    if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n-        features.push_str(\" force_alloc_system\");\n-    }\n+    if build.no_std(target) == Some(true) {\n+        // for no-std targets we only compile core and compiler-builtins\n+        cargo.arg(\"--features\").arg(\"c mem\")\n+            .arg(\"--manifest-path\")\n+            .arg(build.src.join(\"src/rustc/compiler_builtins_shim/Cargo.toml\"));\n+    } else {\n+        let mut features = build.std_features();\n+\n+        // When doing a local rebuild we tell cargo that we're stage1 rather than\n+        // stage0. This works fine if the local rust and being-built rust have the\n+        // same view of what the default allocator is, but fails otherwise. Since\n+        // we don't have a way to express an allocator preference yet, work\n+        // around the issue in the case of a local rebuild with jemalloc disabled.\n+        if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n+            features.push_str(\" force_alloc_system\");\n+        }\n \n-    if compiler.stage != 0 && build.config.sanitizers {\n-        // This variable is used by the sanitizer runtime crates, e.g.\n-        // rustc_lsan, to build the sanitizer runtime from C code\n-        // When this variable is missing, those crates won't compile the C code,\n-        // so we don't set this variable during stage0 where llvm-config is\n-        // missing\n-        // We also only build the runtimes when --enable-sanitizers (or its\n-        // config.toml equivalent) is used\n-        let llvm_config = build.ensure(native::Llvm {\n-            target: build.config.build,\n-            emscripten: false,\n-        });\n-        cargo.env(\"LLVM_CONFIG\", llvm_config);\n-    }\n+        if compiler.stage != 0 && build.config.sanitizers {\n+            // This variable is used by the sanitizer runtime crates, e.g.\n+            // rustc_lsan, to build the sanitizer runtime from C code\n+            // When this variable is missing, those crates won't compile the C code,\n+            // so we don't set this variable during stage0 where llvm-config is\n+            // missing\n+            // We also only build the runtimes when --enable-sanitizers (or its\n+            // config.toml equivalent) is used\n+            let llvm_config = build.ensure(native::Llvm {\n+                target: build.config.build,\n+                emscripten: false,\n+            });\n+            cargo.env(\"LLVM_CONFIG\", llvm_config);\n+        }\n \n-    cargo.arg(\"--features\").arg(features)\n-        .arg(\"--manifest-path\")\n-        .arg(build.src.join(\"src/libstd/Cargo.toml\"));\n+        cargo.arg(\"--features\").arg(features)\n+            .arg(\"--manifest-path\")\n+            .arg(build.src.join(\"src/libstd/Cargo.toml\"));\n \n-    if let Some(target) = build.config.target_config.get(&target) {\n-        if let Some(ref jemalloc) = target.jemalloc {\n-            cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n+        if let Some(target) = build.config.target_config.get(&target) {\n+            if let Some(ref jemalloc) = target.jemalloc {\n+                cargo.env(\"JEMALLOC_OVERRIDE\", jemalloc);\n+            }\n         }\n-    }\n-    if target.contains(\"musl\") {\n-        if let Some(p) = build.musl_root(target) {\n-            cargo.env(\"MUSL_ROOT\", p);\n+        if target.contains(\"musl\") {\n+            if let Some(p) = build.musl_root(target) {\n+                cargo.env(\"MUSL_ROOT\", p);\n+            }\n         }\n     }\n }"}, {"sha": "81b60364ebba1705a40755910b4ca7bddcaa09bd", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "patch": "@@ -159,6 +159,7 @@ pub struct Target {\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n     pub qemu_rootfs: Option<PathBuf>,\n+    pub no_std: bool,\n }\n \n /// Structure of the `config.toml` file that configuration is read from."}, {"sha": "32257fefbf97b8a0967b0e7569e93436d523ec3b", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "patch": "@@ -649,7 +649,12 @@ impl Step for Std {\n         if build.hosts.iter().any(|t| t == target) {\n             builder.ensure(compile::Rustc { compiler, target });\n         } else {\n-            builder.ensure(compile::Test { compiler, target });\n+            if build.no_std(target) == Some(true) {\n+                // the `test` doesn't compile for no-std targets\n+                builder.ensure(compile::Std { compiler, target });\n+            } else {\n+                builder.ensure(compile::Test { compiler, target });\n+            }\n         }\n \n         let image = tmpdir(build).join(format!(\"{}-{}-image\", name, target));"}, {"sha": "d1765b3def998facc2d7736afcddace95e5d8d5f", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "patch": "@@ -709,6 +709,12 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns true if this is a no-std `target`, if defined\n+    fn no_std(&self, target: Interned<String>) -> Option<bool> {\n+        self.config.target_config.get(&target)\n+            .map(|t| t.no_std)\n+    }\n+\n     /// Returns whether the target will be tested using the `remote-test-client`\n     /// and `remote-test-server` binaries.\n     fn remote_tested(&self, target: Interned<String>) -> bool {"}, {"sha": "cd67f1eb46414a6532e75b6ab691fe9dd67fd134", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "patch": "@@ -169,6 +169,19 @@ pub fn check(build: &mut Build) {\n             panic!(\"the iOS target is only supported on macOS\");\n         }\n \n+        if target.starts_with(\"thumbv\") {\n+            if build.no_std(*target).is_none() {\n+                let target = build.config.target_config.entry(target.clone())\n+                    .or_insert(Default::default());\n+\n+                target.no_std = true;\n+            }\n+\n+            if build.no_std(*target) == Some(false) {\n+                panic!(\"All the THUMB targets are no-std targets\")\n+            }\n+        }\n+\n         // Make sure musl-root is valid\n         if target.contains(\"musl\") {\n             // If this is a native target (host is also musl) and no musl-root is given,"}, {"sha": "06c80982f3cd2d7d6b3465367dbe1aa7a4c1e058", "filename": "src/ci/docker/dist-various-3/Dockerfile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fci%2Fdocker%2Fdist-various-3%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Fci%2Fdocker%2Fdist-various-3%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-3%2FDockerfile?ref=68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "patch": "@@ -0,0 +1,19 @@\n+FROM ubuntu:17.10\n+\n+COPY scripts/cross-apt-packages.sh /scripts/\n+RUN sh /scripts/cross-apt-packages.sh\n+\n+RUN apt-get build-dep -y clang llvm && apt-get install -y --no-install-recommends \\\n+  gcc-arm-none-eabi \\\n+  libnewlib-arm-none-eabi\n+\n+COPY scripts/sccache.sh /scripts/\n+RUN sh /scripts/sccache.sh\n+\n+ENV TARGETS=thumbv6m-none-eabi\n+ENV TARGETS=$TARGETS,thumbv7m-none-eabi\n+ENV TARGETS=$TARGETS,thumbv7em-none-eabi\n+ENV TARGETS=$TARGETS,thumbv7em-none-eabihf\n+\n+ENV RUST_CONFIGURE_ARGS --disable-docs\n+ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "7d8423ca84eb41622f382652c0adb2641ea0fcbd", "filename": "src/rustc/compiler_builtins_shim/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fcompiler_builtins_shim%2FCargo.toml?ref=68b54a5f4368ba1a66ae7d330bb95a8d6eb08c3c", "patch": "@@ -35,5 +35,6 @@ cc = \"1.0.1\"\n [features]\n c = []\n default = [\"c\", \"rustbuild\", \"compiler-builtins\"]\n+mem = []\n rustbuild = []\n compiler-builtins = []"}]}