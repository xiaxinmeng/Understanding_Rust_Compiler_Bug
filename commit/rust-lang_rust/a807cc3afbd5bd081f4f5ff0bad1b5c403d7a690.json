{"sha": "a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690", "node_id": "C_kwDOAAsO6NoAKGE4MDdjYzNhZmJkNWJkMDgxZjRmNWZmMGJhZDFiNWM0MDNkN2E2OTA", "commit": {"author": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-11T17:28:42Z"}, "committer": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-11T17:28:42Z"}, "message": "Rename `get_outer_macro` to `macro_call_for_string_token`", "tree": {"sha": "48e93c3ff088fdb4be59ce4e7fb82f7907525cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e93c3ff088fdb4be59ce4e7fb82f7907525cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE7WZLfNy5oeDQue2p1FagNJ1zoKMFAmNFp8oACgkQ1FagNJ1z\noKOS0g/+MezCuBZgMP30//l7F/2JL7hZDPYtdv5UEd7rcbPDyZJPml+PWXlQtT6q\nlC35nAM94yKazm9//hFKieFNXqhM1TmtdhzpZcPFuW8AWU5kEW0SwOqVT1C8vtn6\naC9y0ETWPk+tQujmK3/EjZy555nmN07j6yttMh5mNYjfKBuKdCXlrOUL7jwZAOm5\nYGewvwu7j0leEN4yxDXWshsghwCl3KNVrglAz526uuFp1tRjkT7IFiYHVO6noKh7\nzDFlI2aKDuTy91j3rIrLTW6ybAa+WHGURoSQJ3L8gC1PuPY2XP2cXpv6JdgNteu7\n6nwpHbIOCLsqUJ9T9/HK1y7OWXjoVxJXgQgNI1CC1IhpxZTOQlMT6DxMvqFJ4MPR\nIG19TWTsImxo0ye5zYIOSBG1NwWV+dzRrXMyqX9x0cQjyCj7GxIvZ7MakF64z+w2\n1kJFvfN6md+8GALIkAaJp/8irIvjNsGZh5VN86Btbx0zdMtYo8lCFgBs2JUvIRav\no+iOpSCNxjM6btZJM1uPgSFwq840UwqqV24pfcm93+9iA52VLLzH0Pk84Voc8HTc\nLV5Ij3ghYqBtxW+0T37O65HyI40QCFqK6ftG9DkNd4nCTmYx0Jqw/SU9tCbheqw8\n4Qur2mUF4vFAHfqQGPf7+hOXitMpfWsDkbs5uqX3wYUqkC4rI8Y=\n=AI0n\n-----END PGP SIGNATURE-----", "payload": "tree 48e93c3ff088fdb4be59ce4e7fb82f7907525cd8\nparent 3c39668ca464919ed4180049945b3e2b9bf6191a\nauthor btwotwo <10519967+btwotwo@users.noreply.github.com> 1665509322 +0200\ncommitter btwotwo <10519967+btwotwo@users.noreply.github.com> 1665509322 +0200\n\nRename `get_outer_macro` to `macro_call_for_string_token`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690", "html_url": "https://github.com/rust-lang/rust/commit/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690/comments", "author": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c39668ca464919ed4180049945b3e2b9bf6191a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c39668ca464919ed4180049945b3e2b9bf6191a", "html_url": "https://github.com/rust-lang/rust/commit/3c39668ca464919ed4180049945b3e2b9bf6191a"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "14dc17321f9ffa34f63e8f09a5394fed43a51733", "filename": "crates/ide-completion/src/completions/env_vars.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs?ref=a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690", "patch": "@@ -1,11 +1,10 @@\n //! Completes environment variables defined by Cargo (https://doc.rust-lang.org/cargo/reference/environment-variables.html)\n use hir::Semantics;\n-use ide_db::{syntax_helpers::node_ext::get_outer_macro, RootDatabase};\n+use ide_db::{syntax_helpers::node_ext::macro_call_for_string_token, RootDatabase};\n use syntax::ast::{self, IsString};\n \n-use crate::{context::CompletionContext, CompletionItem, CompletionItemKind};\n+use crate::{context::CompletionContext, CompletionItem, CompletionItemKind, completions::Completions};\n \n-use super::Completions;\n const CARGO_DEFINED_VARS: &[(&str, &str)] = &[\n (\"CARGO\",\"Path to the cargo binary performing the build\"),\n (\"CARGO_MANIFEST_DIR\",\"The directory containing the manifest of your package\"),\n@@ -50,7 +49,7 @@ fn guard_env_macro(\n     string: &ast::String,\n     semantics: &Semantics<'_, RootDatabase>,\n ) -> Option<()> {\n-    let call = get_outer_macro(string)?;\n+    let call = macro_call_for_string_token(string)?;\n     let name = call.path()?.segment()?.name_ref()?;\n     let makro = semantics.resolve_macro_call(&call)?;\n     let db = semantics.db;"}, {"sha": "caa579e322b3c19620274ee07956c0a0b70ae382", "filename": "crates/ide-db/src/syntax_helpers/format_string.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string.rs?ref=a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690", "patch": "@@ -3,8 +3,7 @@ use syntax::{\n     ast::{self, IsString},\n     TextRange, TextSize,\n };\n-\n-use super::node_ext::get_outer_macro;\n+use crate::syntax_helpers::node_ext::macro_call_for_string_token;\n \n pub fn is_format_string(string: &ast::String) -> bool {\n     // Check if `string` is a format string argument of a macro invocation.\n@@ -16,7 +15,7 @@ pub fn is_format_string(string: &ast::String) -> bool {\n     // This setup lets us correctly highlight the components of `concat!(\"{}\", \"bla\")` format\n     // strings. It still fails for `concat!(\"{\", \"}\")`, but that is rare.\n     (|| {\n-        let name = get_outer_macro(string)?.path()?.segment()?.name_ref()?;\n+        let name = macro_call_for_string_token(string)?.path()?.segment()?.name_ref()?;\n \n         if !matches!(\n             name.text().as_str(),"}, {"sha": "39710b8f13eb5f7024b8fe2a385ead1badda3a21", "filename": "crates/ide-db/src/syntax_helpers/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fnode_ext.rs?ref=a807cc3afbd5bd081f4f5ff0bad1b5c403d7a690", "patch": "@@ -458,7 +458,7 @@ pub fn parse_tt_as_comma_sep_paths(input: ast::TokenTree) -> Option<Vec<ast::Pat\n     Some(paths)\n }\n \n-pub fn get_outer_macro(string: &ast::String) -> Option<MacroCall> {\n+pub fn macro_call_for_string_token(string: &ast::String) -> Option<MacroCall> {\n     let macro_call = string.syntax().parent_ancestors().find_map(ast::MacroCall::cast)?;\n     Some(macro_call)\n }"}]}