{"sha": "d60747a24839c50165b0e2ea35592a7cb008f69b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDc0N2EyNDgzOWM1MDE2NWIwZTJlYTM1NTkyYTdjYjAwOGY2OWI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-03T16:06:31Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-06T03:37:04Z"}, "message": "core: convert vec::{init,initn} to return references", "tree": {"sha": "13fd07a9dc857a6e931156c1defaf5ad810bd302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13fd07a9dc857a6e931156c1defaf5ad810bd302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d60747a24839c50165b0e2ea35592a7cb008f69b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d60747a24839c50165b0e2ea35592a7cb008f69b", "html_url": "https://github.com/rust-lang/rust/commit/d60747a24839c50165b0e2ea35592a7cb008f69b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d60747a24839c50165b0e2ea35592a7cb008f69b/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae06ae9dea2f1dac157193b702f640e2216a5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae06ae9dea2f1dac157193b702f640e2216a5a9", "html_url": "https://github.com/rust-lang/rust/commit/5ae06ae9dea2f1dac157193b702f640e2216a5a9"}], "stats": {"total": 80, "additions": 54, "deletions": 26}, "files": [{"sha": "2884d448610720803650501ed128a2d1b81fc439", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/d60747a24839c50165b0e2ea35592a7cb008f69b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60747a24839c50165b0e2ea35592a7cb008f69b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=d60747a24839c50165b0e2ea35592a7cb008f69b", "patch": "@@ -229,9 +229,11 @@ pub pure fn tail<T>(v: &r/[T]) -> &r/[T] { slice(v, 1, v.len()) }\n pub pure fn tailn<T>(v: &r/[T], n: uint) -> &r/[T] { slice(v, n, v.len()) }\n \n /// Returns a vector containing all but the last element of a slice\n-pub pure fn init<T:Copy>(v: &[const T]) -> ~[T] {\n-    assert len(v) != 0u;\n-    slice(v, 0u, len(v) - 1u).to_vec()\n+pub pure fn init<T>(v: &r/[T]) -> &r/[T] { slice(v, 0, v.len() - 1) }\n+\n+/// Returns a vector containing all but the last `n' elements of a slice\n+pub pure fn initn<T>(v: &r/[T], n: uint) -> &r/[T] {\n+    slice(v, 0, v.len() - n)\n }\n \n /// Returns the last element of the slice `v`, failing if the slice is empty.\n@@ -1694,17 +1696,12 @@ impl<T> Container for &[const T] {\n }\n \n pub trait CopyableVector<T> {\n-    pure fn init(&self) -> ~[T];\n     pure fn last(&self) -> T;\n     pure fn slice(&self, start: uint, end: uint) -> ~[T];\n }\n \n /// Extension methods for vectors\n-impl<T:Copy> CopyableVector<T> for &[const T] {\n-    /// Returns all but the last elemnt of a vector\n-    #[inline]\n-    pure fn init(&self) -> ~[T] { init(*self) }\n-\n+impl<T: Copy> CopyableVector<T> for &[const T] {\n     /// Returns the last element of a `v`, failing if the vector is empty.\n     #[inline]\n     pure fn last(&self) -> T { last(*self) }\n@@ -1722,6 +1719,8 @@ pub trait ImmutableVector<T> {\n     pure fn head_opt(&self) -> Option<&self/T>;\n     pure fn tail(&self) -> &self/[T];\n     pure fn tailn(&self, n: uint) -> &self/[T];\n+    pure fn init(&self) -> &self/[T];\n+    pure fn initn(&self, n: uint) -> &self/[T];\n     pure fn foldr<U: Copy>(&self, z: U, p: fn(t: &T, u: U) -> U) -> U;\n     pure fn map<U>(&self, f: fn(t: &T) -> U) -> ~[U];\n     pure fn mapi<U>(&self, f: fn(uint, t: &T) -> U) -> ~[U];\n@@ -1755,6 +1754,14 @@ impl<T> ImmutableVector<T> for &[T] {\n     #[inline]\n     pure fn tailn(&self, n: uint) -> &self/[T] { tailn(*self, n) }\n \n+    /// Returns all but the last elemnt of a vector\n+    #[inline]\n+    pure fn init(&self) -> &self/[T] { init(*self) }\n+\n+    /// Returns all but the last `n' elemnts of a vector\n+    #[inline]\n+    pure fn initn(&self, n: uint) -> &self/[T] { initn(*self, n) }\n+\n     /// Reduce a vector from right to left\n     #[inline]\n     pure fn foldr<U:Copy>(&self, z: U, p: fn(t: &T, u: U) -> U) -> U {\n@@ -2638,6 +2645,38 @@ mod tests {\n         a.tailn(2);\n     }\n \n+    #[test]\n+    fn test_init() {\n+        let mut a = ~[11];\n+        assert a.init() == &[];\n+        a = ~[11, 12];\n+        assert a.init() == &[11];\n+    }\n+\n+    #[init]\n+    #[should_fail]\n+    #[ignore(cfg(windows))]\n+    fn test_init_empty() {\n+        let a: ~[int] = ~[];\n+        a.init();\n+    }\n+\n+    #[test]\n+    fn test_initn() {\n+        let mut a = ~[11, 12, 13];\n+        assert a.initn(0) == &[11, 12, 13];\n+        a = ~[11, 12, 13];\n+        assert a.initn(2) == &[11];\n+    }\n+\n+    #[init]\n+    #[should_fail]\n+    #[ignore(cfg(windows))]\n+    fn test_initn_empty() {\n+        let a: ~[int] = ~[];\n+        a.initn(2);\n+    }\n+\n     #[test]\n     fn test_last() {\n         let mut n = last_opt(~[]);\n@@ -3317,12 +3356,6 @@ mod tests {\n         assert (v2[1] == 10);\n     }\n \n-    #[test]\n-    fn test_init() {\n-        let v = init(~[1, 2, 3]);\n-        assert v == ~[1, 2];\n-    }\n-\n     #[test]\n     fn test_split() {\n         fn f(x: &int) -> bool { *x == 3 }\n@@ -3387,13 +3420,6 @@ mod tests {\n                (~[], ~[1, 2, 3]);\n     }\n \n-    #[test]\n-    #[should_fail]\n-    #[ignore(cfg(windows))]\n-    fn test_init_empty() {\n-        init::<int>(~[]);\n-    }\n-\n     #[test]\n     fn test_concat() {\n         assert concat(~[~[1], ~[2,3]]) == ~[1, 2, 3];"}, {"sha": "0bf1fc3870449e6e2190997643ef05193b788a47", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d60747a24839c50165b0e2ea35592a7cb008f69b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60747a24839c50165b0e2ea35592a7cb008f69b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d60747a24839c50165b0e2ea35592a7cb008f69b", "patch": "@@ -558,16 +558,18 @@ pub fn maybe_get_item_ast(intr: @ident_interner, cdata: cmd, tcx: ty::ctxt,\n                        -> csearch::found_ast {\n     debug!(\"Looking up item: %d\", id);\n     let item_doc = lookup_item(id, cdata.data);\n-    let path = vec::init(item_path(intr, item_doc));\n+    let path = {\n+        let item_path = item_path(intr, item_doc);\n+        vec::from_slice(item_path.init())\n+    };\n     match decode_inlined_item(cdata, tcx, path, item_doc) {\n       Some(ref ii) => csearch::found((/*bad*/copy *ii)),\n       None => {\n         match item_parent_item(item_doc) {\n           Some(did) => {\n             let did = translate_def_id(cdata, did);\n             let parent_item = lookup_item(did.node, cdata.data);\n-            match decode_inlined_item(cdata, tcx, path,\n-                                               parent_item) {\n+            match decode_inlined_item(cdata, tcx, path, parent_item) {\n               Some(ref ii) => csearch::found_parent(did, (/*bad*/copy *ii)),\n               None => csearch::not_found\n             }"}, {"sha": "12a2011ad2560c2d8b284552d7eba1401e4f97f3", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d60747a24839c50165b0e2ea35592a7cb008f69b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d60747a24839c50165b0e2ea35592a7cb008f69b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d60747a24839c50165b0e2ea35592a7cb008f69b", "patch": "@@ -3815,7 +3815,7 @@ pub fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n           }\n \n           ast_map::node_variant(ref variant, _, path) => {\n-            vec::append_one(vec::init(*path),\n+            vec::append_one(vec::from_slice(vec::init(*path)),\n                             ast_map::path_name((*variant).node.name))\n           }\n "}]}