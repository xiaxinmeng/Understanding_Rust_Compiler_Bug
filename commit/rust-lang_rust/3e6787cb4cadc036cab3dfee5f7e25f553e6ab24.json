{"sha": "3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNjc4N2NiNGNhZGMwMzZjYWIzZGZlZTVmN2UyNWY1NTNlNmFiMjQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-04T13:38:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-04T21:28:08Z"}, "message": "Early error for mixing order of const and type parameters", "tree": {"sha": "02b02d38c64d4ee6da9ddfd662035076c1faf46f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b02d38c64d4ee6da9ddfd662035076c1faf46f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "html_url": "https://github.com/rust-lang/rust/commit/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f373128a9727f299b3ae53cbf7d26da74abc75", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f373128a9727f299b3ae53cbf7d26da74abc75", "html_url": "https://github.com/rust-lang/rust/commit/47f373128a9727f299b3ae53cbf7d26da74abc75"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "6cb3161382af2102ccdeb604436d360e388988b0", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "patch": "@@ -21,7 +21,7 @@ use syntax::visit::{self, Visitor};\n use syntax::{span_err, struct_span_err, walk_list};\n use syntax_ext::proc_macro_decls::is_proc_macro_attr;\n use syntax_pos::{Span, MultiSpan};\n-use errors::Applicability;\n+use errors::{Applicability, FatalError};\n use log::debug;\n \n #[derive(Copy, Clone, Debug)]\n@@ -368,6 +368,8 @@ fn validate_generics_order<'a>(\n     let mut max_param: Option<ParamKindOrd> = None;\n     let mut out_of_order = FxHashMap::default();\n     let mut param_idents = vec![];\n+    let mut found_type = false;\n+    let mut found_const = false;\n \n     for (kind, bounds, span, ident) in generics {\n         if let Some(ident) = ident {\n@@ -381,6 +383,11 @@ fn validate_generics_order<'a>(\n             }\n             Some(_) | None => *max_param = Some(kind),\n         };\n+        match kind {\n+            ParamKindOrd::Type => found_type = true,\n+            ParamKindOrd::Const => found_const = true,\n+            _ => {}\n+        }\n     }\n \n     let mut ordered_params = \"<\".to_string();\n@@ -408,8 +415,8 @@ fn validate_generics_order<'a>(\n         GenericPosition::Arg => \"argument\",\n     };\n \n-    for (param_ord, (max_param, spans)) in out_of_order {\n-        let mut err = handler.struct_span_err(spans,\n+    for (param_ord, (max_param, spans)) in &out_of_order {\n+        let mut err = handler.struct_span_err(spans.clone(),\n             &format!(\n                 \"{} {pos}s must be declared prior to {} {pos}s\",\n                 param_ord,\n@@ -430,6 +437,13 @@ fn validate_generics_order<'a>(\n         }\n         err.emit();\n     }\n+\n+    // FIXME(const_generics): we shouldn't have to abort here at all, but we currently get ICEs\n+    // if we don't. Const parameters and type parameters can currently conflict if they\n+    // are out-of-order.\n+    if !out_of_order.is_empty() && found_type && found_const {\n+        FatalError.raise();\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {"}, {"sha": "2c81681b85e7ddfb6cc9e07e530e67e77dcf9b76", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "patch": "@@ -1,12 +1,12 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-fn foo<const X: (), T>(_: &T) {\n-    //~^ ERROR type parameters must be declared prior to const parameters\n-}\n-\n fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters\n }\n \n+fn foo<const X: (), T>(_: &T) {\n+    //~^ ERROR type parameters must be declared prior to const parameters\n+}\n+\n fn main() {}"}, {"sha": "33f981d1eba9b38c684b1dbd60095d35b90fa588", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6787cb4cadc036cab3dfee5f7e25f553e6ab24/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=3e6787cb4cadc036cab3dfee5f7e25f553e6ab24", "patch": "@@ -4,17 +4,17 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n \n-error: type parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:4:21\n    |\n-LL | fn foo<const X: (), T>(_: &T) {\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n-error: lifetime parameters must be declared prior to const parameters\n+error: type parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:8:21\n    |\n-LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+LL | fn foo<const X: (), T>(_: &T) {\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n \n error: aborting due to 2 previous errors\n "}]}