{"sha": "3e0a4079884eab5b54489c92f7428cda2797ea5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMGE0MDc5ODg0ZWFiNWI1NDQ4OWM5MmY3NDI4Y2RhMjc5N2VhNWM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-08T16:01:04Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-14T08:38:00Z"}, "message": "Updated new UI tests to pass with NLL compare-mode\n\nThese tests need a review to ensure that those marked as\nignore-compare-mode-nll should be ignored and that this isn't a bug in NLL.", "tree": {"sha": "cc5ab83179293cf3f241b0823cbf3b985c155568", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc5ab83179293cf3f241b0823cbf3b985c155568"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e0a4079884eab5b54489c92f7428cda2797ea5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltylOgACgkQAXYLT59T\n8VQekQ//QxDXvegWJEfEbhnbMmeZARdDy3UNWIzdUZq1j3jyntvk9rZzYUgNQwZA\nKZEiU5MQVZxf9va2ZpGrKJdSL7RYquo/N8kf0ecGFjl+NSee+vk04ADrvNf6XGd6\ntlG6dp6jep4Crq/BNiZ50l+NRiqF4dkkctAdlIi+s56PwKS3WofZc+HJFI7c0VEg\nKbRE8JfAb93VW/FrOtNniR6kLMEDIHTiV6oJYpH05rS7ELis+LDvNz9BsqzHF7Me\npN4k8/HHgxkvXygfBo6nmNEwDRV6OQVCOLDnGcKekb3LO6K6/qyZY9/XdNAtS1Q/\nQoSYXaRzHjivTganyjM9FciJt8vbaKKJ7j74/Ch5FpwOMkzDu7iStQ3qdSkld6Vj\n6+ixJ+02UCirh4pZsrKI//HkAyr0H2KyIfqs5ZoRz227UsgKV6qF7/divUdTTXIQ\npxBUHRnIT4Q8ckFBkyR+brpZuuBkAGg4f7s3e6sKYcP4p3ZVFxRCGSaYAJhKFBpA\ng+AdaGc9JNTw5ijNvxYm8yHGhmdc1RH6GDSixHsa0rn1XupYpi/VDOL9yevP75YB\nZ7p7quvVCS2raDxW/tgCKMjVgMYlb2BCWRFO5CTBAEC0ED+ZypjgOPymtxQxLXYU\nBRaNUqHRmiVn0ED9uIPs6eNSoqqeuJAoS5Xr07G8jEUTGus1UCs=\n=Jyx4\n-----END PGP SIGNATURE-----", "payload": "tree cc5ab83179293cf3f241b0823cbf3b985c155568\nparent b16a30677f4e641329e768272cf9d3ecc2fa31c4\nauthor David Wood <david@davidtw.co> 1533744064 +0200\ncommitter David Wood <david@davidtw.co> 1534235880 +0200\n\nUpdated new UI tests to pass with NLL compare-mode\n\nThese tests need a review to ensure that those marked as\nignore-compare-mode-nll should be ignored and that this isn't a bug in NLL.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0a4079884eab5b54489c92f7428cda2797ea5c", "html_url": "https://github.com/rust-lang/rust/commit/3e0a4079884eab5b54489c92f7428cda2797ea5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e0a4079884eab5b54489c92f7428cda2797ea5c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b16a30677f4e641329e768272cf9d3ecc2fa31c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b16a30677f4e641329e768272cf9d3ecc2fa31c4", "html_url": "https://github.com/rust-lang/rust/commit/b16a30677f4e641329e768272cf9d3ecc2fa31c4"}], "stats": {"total": 448, "additions": 273, "deletions": 175}, "files": [{"sha": "1c4b684265c797483580db15cc33f1db4c94acd2", "filename": "src/test/ui/compile-fail-migration/associated-types-subtyping-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fassociated-types-subtyping-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fassociated-types-subtyping-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fassociated-types-subtyping-1.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(unused_variables)]\n \n trait Trait<'a> {"}, {"sha": "58925a0e63f037c1fc6c7b5cbeba75635c673d33", "filename": "src/test/ui/compile-fail-migration/associated-types-subtyping-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fassociated-types-subtyping-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fassociated-types-subtyping-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fassociated-types-subtyping-1.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:34:37\n+  --> $DIR/associated-types-subtyping-1.rs:36:37\n    |\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...\n@@ -8,7 +8,7 @@ LL |     let _: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n    |                                     ^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/associated-types-subtyping-1.rs:43:37\n+  --> $DIR/associated-types-subtyping-1.rs:45:37\n    |\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes..."}, {"sha": "4337f569fa4c0084cb3031a999f9ba9745495fad", "filename": "src/test/ui/compile-fail-migration/borrow-tuple-fields.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrow-tuple-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrow-tuple-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrow-tuple-fields.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![feature(box_syntax)]\n \n struct Foo(Box<isize>, isize);"}, {"sha": "d010d1d989c9b92cefac8ae0640b2252fad79874", "filename": "src/test/ui/compile-fail-migration/borrow-tuple-fields.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrow-tuple-fields.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,13 +1,13 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrow-tuple-fields.rs:20:9\n+  --> $DIR/borrow-tuple-fields.rs:22:9\n    |\n LL |     let r = &x.0;\n    |              --- borrow of `x.0` occurs here\n LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:24:18\n+  --> $DIR/borrow-tuple-fields.rs:26:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n@@ -18,7 +18,7 @@ LL | }\n    | - immutable borrow ends here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:28:18\n+  --> $DIR/borrow-tuple-fields.rs:30:18\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here\n@@ -29,15 +29,15 @@ LL | }\n    | - first borrow ends here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrow-tuple-fields.rs:33:9\n+  --> $DIR/borrow-tuple-fields.rs:35:9\n    |\n LL |     let r = &x.0;\n    |              --- borrow of `x.0` occurs here\n LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrow-tuple-fields.rs:37:18\n+  --> $DIR/borrow-tuple-fields.rs:39:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n@@ -48,7 +48,7 @@ LL | }\n    | - immutable borrow ends here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n-  --> $DIR/borrow-tuple-fields.rs:41:18\n+  --> $DIR/borrow-tuple-fields.rs:43:18\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here"}, {"sha": "910851a1030c51ae945032ae80e04eacf81ae6bc", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-borrow-mut-object-twice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-borrow-mut-object-twice.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Check that `&mut` objects cannot be borrowed twice, just like\n // other `&mut` pointers.\n "}, {"sha": "e0ea39a2491764ee9cae22d259040bb69457a26c", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-borrow-mut-object-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `*x` as mutable more than once at a time\n-  --> $DIR/borrowck-borrow-mut-object-twice.rs:21:5\n+  --> $DIR/borrowck-borrow-mut-object-twice.rs:23:5\n    |\n LL |     let _y = x.f1();\n    |              - first mutable borrow occurs here"}, {"sha": "de8cac38dcf54a900e13a9a54e51ee6ef93b493f", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-closures-two-mut.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-two-mut.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -12,6 +12,8 @@\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n+// ignore-compare-mode-nll\n+\n #![feature(box_syntax)]\n \n fn to_fn_mut<F: FnMut()>(f: F) -> F { f }"}, {"sha": "f314bb95c3123b6516897430dfa992c98eda22d5", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:22:24\n+  --> $DIR/borrowck-closures-two-mut.rs:24:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n@@ -13,7 +13,7 @@ LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:32:24\n+  --> $DIR/borrowck-closures-two-mut.rs:34:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n@@ -27,7 +27,7 @@ LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:38:24\n+  --> $DIR/borrowck-closures-two-mut.rs:40:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n@@ -41,7 +41,7 @@ LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:44:24\n+  --> $DIR/borrowck-closures-two-mut.rs:46:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n@@ -56,7 +56,7 @@ LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:55:24\n+  --> $DIR/borrowck-closures-two-mut.rs:57:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - previous borrow occurs due to use of `x` in closure"}, {"sha": "9fefbe2bdc690dce47705c4ce3b84f7bcea5cafe", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-closures-unique-imm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique-imm.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n struct Foo {\n     x: isize,\n }"}, {"sha": "a166b6292e65489c5e2533c3b7adb3ec197e5fac", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-closures-unique-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique-imm.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-closures-unique-imm.rs:21:14\n+  --> $DIR/borrowck-closures-unique-imm.rs:23:14\n    |\n LL |         let p = &this.x;\n    |                  ------ immutable borrow occurs here"}, {"sha": "9a74f188a545f825f653bd03e3dc3afb4402a17c", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-closures-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Tests that a closure which requires mutable access to the referent\n // of an `&mut` requires a \"unique\" borrow -- that is, the variable to\n // be borrowed (here, `x`) will not be borrowed *mutably*, but"}, {"sha": "27163bde34f6ab0a375a87919256371e8f3f771a", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:32:14\n+  --> $DIR/borrowck-closures-unique.rs:34:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -13,7 +13,7 @@ LL | }\n    | - borrow ends here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n-  --> $DIR/borrowck-closures-unique.rs:37:14\n+  --> $DIR/borrowck-closures-unique.rs:39:14\n    |\n LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -27,7 +27,7 @@ LL | }\n    | - borrow ends here\n \n error[E0524]: two closures require unique access to `x` at the same time\n-  --> $DIR/borrowck-closures-unique.rs:42:14\n+  --> $DIR/borrowck-closures-unique.rs:44:14\n    |\n LL |     let c1 = || set(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n@@ -41,7 +41,7 @@ LL | }\n    | - borrow from first closure ends here\n \n error[E0595]: closure cannot assign to immutable argument `x`\n-  --> $DIR/borrowck-closures-unique.rs:46:14\n+  --> $DIR/borrowck-closures-unique.rs:48:14\n    |\n LL |     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n    |              ^^ cannot borrow mutably"}, {"sha": "500de9865dcce322bb3d13b94b3eb26685a10f72", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-issue-2657-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-issue-2657-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-issue-2657-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-issue-2657-1.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![feature(box_syntax)]\n \n fn main() {"}, {"sha": "532f0e6fb009208daa1a4227b876247885b3467b", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-issue-2657-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-issue-2657-1.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0505]: cannot move out of `x` because it is borrowed\n-  --> $DIR/borrowck-issue-2657-1.rs:17:13\n+  --> $DIR/borrowck-issue-2657-1.rs:19:13\n    |\n LL |       Some(ref _y) => {\n    |            ------ borrow of `x.0` occurs here"}, {"sha": "3df174b4fb83aeb42651f8df30e1296e15504271", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-lend-flow-if.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow-if.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Note: the borrowck analysis is currently flow-insensitive.\n // Therefore, some of these errors are marked as spurious and could be\n // corrected by a simple change to the analysis.  The others are"}, {"sha": "c53c4e46d4f252db3e6687c759857b465d6cb7de", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-lend-flow-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow-if.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow-if.rs:38:21\n+  --> $DIR/borrowck-lend-flow-if.rs:40:21\n    |\n LL |         _w = &v;\n    |               - immutable borrow occurs here"}, {"sha": "27a21f0e40a6625c428927fe0c4176752035c28d", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-lend-flow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Note: the borrowck analysis is currently flow-insensitive.\n // Therefore, some of these errors are marked as spurious and could be\n // corrected by a simple change to the analysis.  The others are"}, {"sha": "abb83c8dfc8836e2f9ceee61e832bac860d2fad3", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-lend-flow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-lend-flow.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immutable\n-  --> $DIR/borrowck-lend-flow.rs:34:21\n+  --> $DIR/borrowck-lend-flow.rs:36:21\n    |\n LL |     let _w = &v;\n    |               - immutable borrow occurs here"}, {"sha": "e57575d8f03d4ffe3af49931bfc9cd496a08cd82", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move-cc.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![feature(box_syntax)]\n \n use std::thread;"}, {"sha": "a1d633e54f02143090505590ebad67d1a92add9f", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-loan-blocks-move-cc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0504]: cannot move `v` into closure because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move-cc.rs:23:27\n+  --> $DIR/borrowck-loan-blocks-move-cc.rs:25:27\n    |\n LL |     let _w = &v;\n    |               - borrow of `v` occurs here\n@@ -8,7 +8,7 @@ LL |         println!(\"v={}\", *v);\n    |                           ^ move into closure occurs here\n \n error[E0504]: cannot move `v` into closure because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move-cc.rs:32:27\n+  --> $DIR/borrowck-loan-blocks-move-cc.rs:34:27\n    |\n LL |     let _w = &v;\n    |               - borrow of `v` occurs here"}, {"sha": "dc83dc731b35329390ec799d324d05245ae7bf17", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-loan-blocks-move.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![feature(box_syntax)]\n \n fn take(_v: Box<isize>) {"}, {"sha": "fb5657f6928a4d7564801ff1269ef139a0ec2ed8", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-loan-blocks-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-loan-blocks-move.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0505]: cannot move out of `v` because it is borrowed\n-  --> $DIR/borrowck-loan-blocks-move.rs:19:10\n+  --> $DIR/borrowck-loan-blocks-move.rs:21:10\n    |\n LL |     let _w = &v;\n    |               - borrow of `v` occurs here"}, {"sha": "8423b4cc9b0b25f3c2ecbd7fbb58e8e23ce82bf9", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-move-from-subpath-of-borrowed-path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // verify that an error is raised when trying to move out of a\n // borrowed path.\n "}, {"sha": "e5557eca6de03a8275ea5dc9e6a418850eb560be", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0505]: cannot move out of `*a` because it is borrowed\n-  --> $DIR/borrowck-move-from-subpath-of-borrowed-path.rs:20:9\n+  --> $DIR/borrowck-move-from-subpath-of-borrowed-path.rs:22:9\n    |\n LL |     let b = &a;\n    |              - borrow of `a` occurs here"}, {"sha": "d18f962397416a16a4d5695fdd1922ec4b3f0319", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-move-mut-base-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-mut-base-ptr.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that attempt to move `&mut` pointer while pointee is borrowed\n // yields an error.\n //"}, {"sha": "33ccd148f5b1d7db896564f6aec88d782e0a7c1b", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-move-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0505]: cannot move out of `t0` because it is borrowed\n-  --> $DIR/borrowck-move-mut-base-ptr.rs:18:9\n+  --> $DIR/borrowck-move-mut-base-ptr.rs:20:9\n    |\n LL |     let p: &isize = &*t0; // Freezes `*t0`\n    |                      --- borrow of `*t0` occurs here"}, {"sha": "5b73ca8e49a44644bf6b378d5300be637db86824", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-mut-borrow-of-mut-base-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that attempt to mutably borrow `&mut` pointer while pointee is\n // borrowed yields an error.\n //"}, {"sha": "e7d41dd46028de8ba2aef520dfd682d45875278d", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-mut-borrow-of-mut-base-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `t0` as mutable because `*t0` is also borrowed as immutable\n-  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:19:23\n+  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:21:23\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here\n@@ -10,7 +10,7 @@ LL | }\n    | - immutable borrow ends here\n \n error[E0499]: cannot borrow `t0` as mutable more than once at a time\n-  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:26:23\n+  --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:28:23\n    |\n LL |     let p: &mut isize = &mut *t0; // Claims `*t0`\n    |                              --- first mutable borrow occurs here"}, {"sha": "23148304d6c4e9547723460580822e0b8b380daa", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-object-lifetime.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-object-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-object-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-object-lifetime.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that borrows that occur due to calls to object methods\n // properly \"claim\" the object path.\n "}, {"sha": "5680007579548c0b6452928bca56b821652af903", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-object-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-object-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-object-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-object-lifetime.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-object-lifetime.rs:26:14\n+  --> $DIR/borrowck-object-lifetime.rs:28:14\n    |\n LL |     let _y = x.borrowed();\n    |              - immutable borrow occurs here\n@@ -9,7 +9,7 @@ LL | }\n    | - immutable borrow ends here\n \n error[E0502]: cannot borrow `x` as mutable because `*x` is also borrowed as immutable\n-  --> $DIR/borrowck-object-lifetime.rs:31:19\n+  --> $DIR/borrowck-object-lifetime.rs:33:19\n    |\n LL |     let _y = x.borrowed();\n    |              - immutable borrow occurs here"}, {"sha": "51d154c0f3abc5c61fba4ef37dfc495c28a8219d", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-overloaded-index-autoderef.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that we still see borrowck errors of various kinds when using\n // indexing and autoderef in combination.\n "}, {"sha": "d269ce5ec34c3a89e843df7697310ff0b7377a41", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-overloaded-index-autoderef.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*f` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:45:15\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:47:15\n    |\n LL |     let _p = &mut f[&s];\n    |                   - mutable borrow occurs here\n@@ -9,7 +9,7 @@ LL | }\n    | - mutable borrow ends here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:50:19\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:52:19\n    |\n LL |     let _p = &mut f[&s];\n    |                   - first mutable borrow occurs here\n@@ -19,7 +19,7 @@ LL | }\n    | - first borrow ends here\n \n error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:59:19\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:61:19\n    |\n LL |     let _p = &mut f.foo[&s];\n    |                   ----- first mutable borrow occurs here\n@@ -29,7 +29,7 @@ LL | }\n    | - first borrow ends here\n \n error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:69:19\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:71:19\n    |\n LL |     let _p = &f.foo[&s];\n    |               ----- immutable borrow occurs here\n@@ -39,31 +39,31 @@ LL | }\n    | - immutable borrow ends here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:74:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:76:5\n    |\n LL |     let _p = &f.foo[&s];\n    |               ----- borrow of `f.foo` occurs here\n LL |     f.foo = g; //~ ERROR cannot assign\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:79:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:81:5\n    |\n LL |     let _p = &f.foo[&s];\n    |               ----- borrow of `*f` occurs here\n LL |     *f = g; //~ ERROR cannot assign\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:84:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:86:5\n    |\n LL |     let _p = &mut f.foo[&s];\n    |                   ----- borrow of `f.foo` occurs here\n LL |     f.foo = g; //~ ERROR cannot assign\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n-  --> $DIR/borrowck-overloaded-index-autoderef.rs:89:5\n+  --> $DIR/borrowck-overloaded-index-autoderef.rs:91:5\n    |\n LL |     let _p = &mut f.foo[&s];\n    |                   ----- borrow of `*f` occurs here"}, {"sha": "cf9fab9f0a183ac1fb12c2a9135d105745ddfee0", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-swap-mut-base-ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-swap-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-swap-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-swap-mut-base-ptr.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that attempt to swap `&mut` pointer while pointee is borrowed\n // yields an error.\n //"}, {"sha": "f9e4a580ccc6c094f4f2794183fb99184e07129c", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-swap-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `t0` as mutable because `*t0` is also borrowed as immutable\n-  --> $DIR/borrowck-swap-mut-base-ptr.rs:21:15\n+  --> $DIR/borrowck-swap-mut-base-ptr.rs:23:15\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here"}, {"sha": "f1c4e4c1869c5089d965b2f7754c52b8e8fab179", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-union-borrow-nested.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-union-borrow-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-union-borrow-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-union-borrow-nested.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #[derive(Clone, Copy)]\n struct S {\n     a: u8,"}, {"sha": "4e7392a42281488949b9ea4a33a7d3b5abb7b0b9", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-union-borrow-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-union-borrow-nested.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `u.c` because it was mutably borrowed\n-  --> $DIR/borrowck-union-borrow-nested.rs:33:17\n+  --> $DIR/borrowck-union-borrow-nested.rs:35:17\n    |\n LL |             let ra = &mut u.s.a;\n    |                           ----- borrow of `u.s.a` occurs here"}, {"sha": "5a4e27768afc3bbf7a1a15df7b13bef4816815cb", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-uniq-via-lend.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![feature(box_syntax)]\n \n fn borrow(_v: &isize) {}"}, {"sha": "b731a6192d1322c8be2dcc1d6a186d6c10553e27", "filename": "src/test/ui/compile-fail-migration/borrowck/borrowck-uniq-via-lend.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fborrowck%2Fborrowck-uniq-via-lend.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n-  --> $DIR/borrowck-uniq-via-lend.rs:43:13\n+  --> $DIR/borrowck-uniq-via-lend.rs:45:13\n    |\n LL |     let _w = &mut v;\n    |                   - mutable borrow occurs here\n@@ -9,7 +9,7 @@ LL | }\n    | - mutable borrow ends here\n \n error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mutable\n-  --> $DIR/borrowck-uniq-via-lend.rs:58:13\n+  --> $DIR/borrowck-uniq-via-lend.rs:60:13\n    |\n LL |     _x = &mut v;\n    |               - mutable borrow occurs here"}, {"sha": "0f83bf80d2453f55cb248587d6f34ed89d4d090b", "filename": "src/test/ui/compile-fail-migration/cleanup-rvalue-scopes-cf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fcleanup-rvalue-scopes-cf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fcleanup-rvalue-scopes-cf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fcleanup-rvalue-scopes-cf.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that the borrow checker prevents pointers to temporaries\n // with statement lifetimes from escaping.\n "}, {"sha": "e1de4a2a8d49b19f805d478f17462c1b9205f3ea", "filename": "src/test/ui/compile-fail-migration/cleanup-rvalue-scopes-cf.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fcleanup-rvalue-scopes-cf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fcleanup-rvalue-scopes-cf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fcleanup-rvalue-scopes-cf.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/cleanup-rvalue-scopes-cf.rs:36:19\n+  --> $DIR/cleanup-rvalue-scopes-cf.rs:38:19\n    |\n LL |     let _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough\n    |                   ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n@@ -12,7 +12,7 @@ LL | }\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/cleanup-rvalue-scopes-cf.rs:37:14\n+  --> $DIR/cleanup-rvalue-scopes-cf.rs:39:14\n    |\n LL |     let _x = AddFlags(1).get(); //~ ERROR value does not live long enough\n    |              ^^^^^^^^^^^      - temporary value dropped here while still borrowed\n@@ -25,7 +25,7 @@ LL | }\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/cleanup-rvalue-scopes-cf.rs:38:21\n+  --> $DIR/cleanup-rvalue-scopes-cf.rs:40:21\n    |\n LL |     let _x = &*arg(&AddFlags(1)); //~ ERROR value does not live long enough\n    |                     ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n@@ -38,7 +38,7 @@ LL | }\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/cleanup-rvalue-scopes-cf.rs:39:24\n+  --> $DIR/cleanup-rvalue-scopes-cf.rs:41:24\n    |\n LL |     let ref _x = *arg(&AddFlags(1)); //~ ERROR value does not live long enough\n    |                        ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n@@ -51,7 +51,7 @@ LL | }\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/cleanup-rvalue-scopes-cf.rs:40:24\n+  --> $DIR/cleanup-rvalue-scopes-cf.rs:42:24\n    |\n LL |     let &ref _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough\n    |                        ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n@@ -64,7 +64,7 @@ LL | }\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/cleanup-rvalue-scopes-cf.rs:41:14\n+  --> $DIR/cleanup-rvalue-scopes-cf.rs:43:14\n    |\n LL |     let _x = AddFlags(1).get(); //~ ERROR value does not live long enough\n    |              ^^^^^^^^^^^      - temporary value dropped here while still borrowed\n@@ -77,7 +77,7 @@ LL | }\n    = note: consider using a `let` binding to increase its lifetime\n \n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/cleanup-rvalue-scopes-cf.rs:42:34\n+  --> $DIR/cleanup-rvalue-scopes-cf.rs:44:34\n    |\n LL |     let Box { f: _x } = Box { f: AddFlags(1).get() }; //~ ERROR value does not live long enough\n    |                                  ^^^^^^^^^^^        - temporary value dropped here while still borrowed"}, {"sha": "8826661f84a4b5784f9a8de1129d6390691c3f4a", "filename": "src/test/ui/compile-fail-migration/closure_promotion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fclosure_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fclosure_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fclosure_promotion.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(const_err)]\n \n // nll successfully compiles this. It is a bug."}, {"sha": "8f08796b5c60baeb0f49c6536873e6836c2e62ee", "filename": "src/test/ui/compile-fail-migration/closure_promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fclosure_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fclosure_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fclosure_promotion.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: borrowed value does not live long enough\n-  --> $DIR/closure_promotion.rs:16:26\n+  --> $DIR/closure_promotion.rs:18:26\n    |\n LL |     let x: &'static _ = &|| { let z = 3; z }; //~ ERROR does not live long enough\n    |                          ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough"}, {"sha": "9418c34cbfdaa2dc054683a1c4935930a8dbbda8", "filename": "src/test/ui/compile-fail-migration/hashmap-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fhashmap-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fhashmap-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fhashmap-lifetimes.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n fn main() {\n     let mut my_stuff = std::collections::HashMap::new();\n     my_stuff.insert(0, 42);"}, {"sha": "eb129848ed2d650abc8f423c2f58680333d84bca", "filename": "src/test/ui/compile-fail-migration/hashmap-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fhashmap-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fhashmap-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fhashmap-lifetimes.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n-  --> $DIR/hashmap-lifetimes.rs:16:5\n+  --> $DIR/hashmap-lifetimes.rs:18:5\n    |\n LL |     let mut it = my_stuff.iter();\n    |                  -------- immutable borrow occurs here"}, {"sha": "c13fd5fa71669e9444b8314246f0dded9f3eb19a", "filename": "src/test/ui/compile-fail-migration/issue-28848.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fissue-28848.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fissue-28848.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fissue-28848.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n struct Foo<'a, 'b: 'a>(&'a &'b ());\n \n impl<'a, 'b> Foo<'a, 'b> {"}, {"sha": "dadcff226f53bc7439d47b67534c83cc608bd82f", "filename": "src/test/ui/compile-fail-migration/issue-28848.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fissue-28848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fissue-28848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fissue-28848.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,16 +1,16 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-28848.rs:20:5\n+  --> $DIR/issue-28848.rs:22:5\n    |\n LL |     Foo::<'a, 'b>::xmute(u) //~ ERROR lifetime bound not satisfied\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-note: lifetime parameter instantiated with the lifetime 'b as defined on the function body at 19:16\n-  --> $DIR/issue-28848.rs:19:16\n+note: lifetime parameter instantiated with the lifetime 'b as defined on the function body at 21:16\n+  --> $DIR/issue-28848.rs:21:16\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |                ^^\n-note: but lifetime parameter must outlive the lifetime 'a as defined on the function body at 19:12\n-  --> $DIR/issue-28848.rs:19:12\n+note: but lifetime parameter must outlive the lifetime 'a as defined on the function body at 21:12\n+  --> $DIR/issue-28848.rs:21:12\n    |\n LL | pub fn foo<'a, 'b>(u: &'b ()) -> &'a () {\n    |            ^^"}, {"sha": "c3c39183c9a9aa8898cc53b767741d39be876f1d", "filename": "src/test/ui/compile-fail-migration/meta-expected-error-wrong-rev.a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmeta-expected-error-wrong-rev.a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmeta-expected-error-wrong-rev.a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmeta-expected-error-wrong-rev.a.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/meta-expected-error-wrong-rev.rs:21:18\n+  --> $DIR/meta-expected-error-wrong-rev.rs:23:18\n    |\n LL |     let x: u32 = 22_usize; //[b]~ ERROR mismatched types\n    |                  ^^^^^^^^ expected u32, found usize"}, {"sha": "8869e950b3a44f3706ae2d3d8fb5ced5fd6fb325", "filename": "src/test/ui/compile-fail-migration/meta-expected-error-wrong-rev.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmeta-expected-error-wrong-rev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmeta-expected-error-wrong-rev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmeta-expected-error-wrong-rev.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // revisions: a\n // should-fail\n "}, {"sha": "397c6eab536c55be7c882746e5aa8ddf0c2b0370", "filename": "src/test/ui/compile-fail-migration/method-self-arg-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmethod-self-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmethod-self-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmethod-self-arg-2.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test method calls with self as an argument cannot subvert borrow checking.\n \n struct Foo;"}, {"sha": "4fe2da4164fa7aa928438b672904b6250621a51a", "filename": "src/test/ui/compile-fail-migration/method-self-arg-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmethod-self-arg-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmethod-self-arg-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmethod-self-arg-2.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n-  --> $DIR/method-self-arg-2.rs:23:15\n+  --> $DIR/method-self-arg-2.rs:25:15\n    |\n LL |     let y = &mut x;\n    |                  - mutable borrow occurs here\n@@ -10,7 +10,7 @@ LL | }\n    | - mutable borrow ends here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/method-self-arg-2.rs:27:19\n+  --> $DIR/method-self-arg-2.rs:29:19\n    |\n LL |     let y = &mut x;\n    |                  - first mutable borrow occurs here"}, {"sha": "15e1be66e78f8cb146712a31bed4c6331ac81191", "filename": "src/test/ui/compile-fail-migration/mut-cant-alias.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmut-cant-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmut-cant-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmut-cant-alias.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n use std::cell::RefCell;\n \n fn main() {"}, {"sha": "b9497940301c6c7dc6e2c5b68bb05b262fccbc37", "filename": "src/test/ui/compile-fail-migration/mut-cant-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmut-cant-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmut-cant-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fmut-cant-alias.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0499]: cannot borrow `b` as mutable more than once at a time\n-  --> $DIR/mut-cant-alias.rs:17:20\n+  --> $DIR/mut-cant-alias.rs:19:20\n    |\n LL |     let b1 = &mut *b;\n    |                    - first mutable borrow occurs here"}, {"sha": "96eb65daaffefe407987d4839d56eeca1148cfed", "filename": "src/test/ui/compile-fail-migration/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears, even when the"}, {"sha": "7b7881d6ea7caf30253d36d20c188af547869893", "filename": "src/test/ui/compile-fail-migration/regions-assoc-type-in-supertrait-outlives-container.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-assoc-type-in-supertrait-outlives-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-assoc-type-in-supertrait-outlives-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-assoc-type-in-supertrait-outlives-container.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:50:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 44:15\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 46:15\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:46:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 44:18\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:44:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 46:18\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:46:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "8a15656f8a721391e1e16d9bc7e3de245e2ce090", "filename": "src/test/ui/compile-fail-migration/regions-bounded-by-trait-requiring-static.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-by-trait-requiring-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-by-trait-requiring-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-by-trait-requiring-static.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test which of the builtin types are considered sendable. The tests\n // in this file all test region bound and lifetime violations that are\n // detected during type check."}, {"sha": "2cd82707a2af451f06638de887f66577336b0606", "filename": "src/test/ui/compile-fail-migration/regions-bounded-by-trait-requiring-static.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-by-trait-requiring-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-by-trait-requiring-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-by-trait-requiring-static.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,45 +1,45 @@\n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:32:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:34:5\n    |\n LL |     assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `&'a str` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:36:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:38:5\n    |\n LL |     assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `&'a [isize]` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:40:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:42:5\n    |\n LL |     assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `std::boxed::Box<&'a isize>` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:54:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:56:5\n    |\n LL |     assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `*const &'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:65:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:67:5\n    |\n LL |     assert_send::<*const &'a isize>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: type must satisfy the static lifetime\n \n error[E0477]: the type `*mut &'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:69:5\n+  --> $DIR/regions-bounded-by-trait-requiring-static.rs:71:5\n    |\n LL |     assert_send::<*mut &'a isize>(); //~ ERROR does not fulfill the required lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b53c80c39630a7b139712f4789fb38cb1339293f", "filename": "src/test/ui/compile-fail-migration/regions-bounded-method-type-parameters.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-method-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-method-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-method-type-parameters.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Check that explicit region bounds are allowed on the various\n // nominal types (but not on other types) and that they are type\n // checked."}, {"sha": "b8953a1719c01a28888b88866c30a20d8e0db48a", "filename": "src/test/ui/compile-fail-migration/regions-bounded-method-type-parameters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-method-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-method-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-bounded-method-type-parameters.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0477]: the type `&'a isize` does not fulfill the required lifetime\n-  --> $DIR/regions-bounded-method-type-parameters.rs:22:9\n+  --> $DIR/regions-bounded-method-type-parameters.rs:24:9\n    |\n LL |     Foo.some_method::<&'a isize>();\n    |         ^^^^^^^^^^^"}, {"sha": "ee6cd6c4b1523a2210682fa74d9924b68220bab9", "filename": "src/test/ui/compile-fail-migration/regions-free-region-ordering-caller.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-free-region-ordering-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-free-region-ordering-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-free-region-ordering-caller.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test various ways to construct a pointer with a longer lifetime\n // than the thing it points at and ensure that they result in\n // errors. See also regions-free-region-ordering-callee.rs"}, {"sha": "96502b69c0819ce022c50d7a0f4904a985856f7d", "filename": "src/test/ui/compile-fail-migration/regions-free-region-ordering-caller.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-free-region-ordering-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-free-region-ordering-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-free-region-ordering-caller.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:18:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:20:12\n    |\n LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     ---------\n@@ -9,7 +9,7 @@ LL |     let z: Option<&'b &'a usize> = None;//~ ERROR E0623\n    |            ^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:23:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:25:12\n    |\n LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     ---------\n@@ -20,7 +20,7 @@ LL |     let z: Option<&'b Paramd<'a>> = None;//~ ERROR E0623\n    |            ^^^^^^^^^^^^^^^^^^^^^^ ...but data from `a` flows into `b` here\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n+  --> $DIR/regions-free-region-ordering-caller.rs:29:12\n    |\n LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n    |                     ---------     --------- these two types are declared with different lifetimes..."}, {"sha": "01de3ddcdf8d9727026c94ef76e17a671d9bbaaa", "filename": "src/test/ui/compile-fail-migration/regions-implied-bounds-projection-gap-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-implied-bounds-projection-gap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-implied-bounds-projection-gap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-implied-bounds-projection-gap-1.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Illustrates the \"projection gap\": in this test, even though we know\n // that `T::Foo: 'x`, that does not tell us that `T: 'x`, because\n // there might be other ways for the caller of `func` to show that"}, {"sha": "e6efb4d5c6b5d780fd206730fe65fc89d31f3a77", "filename": "src/test/ui/compile-fail-migration/regions-implied-bounds-projection-gap-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-implied-bounds-projection-gap-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-implied-bounds-projection-gap-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-implied-bounds-projection-gap-1.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:10\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:28:10\n    |\n LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n    |             -- help: consider adding an explicit lifetime bound `T: 'x`...\n@@ -8,7 +8,7 @@ LL |     wf::<&'x T>();\n    |          ^^^^^\n    |\n note: ...so that the reference type `&'x T` does not outlive the data it points at\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:10\n+  --> $DIR/regions-implied-bounds-projection-gap-1.rs:28:10\n    |\n LL |     wf::<&'x T>();\n    |          ^^^^^"}, {"sha": "a16001b5788b3ccbd4ce155890a2328a41592a73", "filename": "src/test/ui/compile-fail-migration/regions-infer-contravariance-due-to-decl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-contravariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-contravariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-contravariance-due-to-decl.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that a type which is contravariant with respect to its region\n // parameter yields an error when used in a covariant way.\n //"}, {"sha": "675cbc58583480e53d84ae6acba26cdd14b68b53", "filename": "src/test/ui/compile-fail-migration/regions-infer-contravariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-contravariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-contravariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-contravariance-due-to-decl.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:35\n+  --> $DIR/regions-infer-contravariance-due-to-decl.rs:37:35\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |                          --------------------- these two types are declared with different lifetimes..."}, {"sha": "f794063610ae061f52bf1f941d915f9c23a3c934", "filename": "src/test/ui/compile-fail-migration/regions-infer-covariance-due-to-decl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-covariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-covariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-covariance-due-to-decl.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "6b3673a8002849e538c509cd7dcec880ead0dda9", "filename": "src/test/ui/compile-fail-migration/regions-infer-covariance-due-to-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-covariance-due-to-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-covariance-due-to-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-infer-covariance-due-to-decl.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:32\n+  --> $DIR/regions-infer-covariance-due-to-decl.rs:34:32\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |                          ----------------"}, {"sha": "79300d5176eccb43fad99b86a974b7f3f4c0e76c", "filename": "src/test/ui/compile-fail-migration/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container-wc.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears, even when the"}, {"sha": "d0680ecbb99a20e00561ce6fa0e80f8248f3d3ee", "filename": "src/test/ui/compile-fail-migration/regions-outlives-projection-container-wc.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container-wc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container-wc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container-wc.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-wc.rs:44:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:46:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 38:15\n-  --> $DIR/regions-outlives-projection-container-wc.rs:38:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 40:15\n+  --> $DIR/regions-outlives-projection-container-wc.rs:40:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 38:18\n-  --> $DIR/regions-outlives-projection-container-wc.rs:38:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 40:18\n+  --> $DIR/regions-outlives-projection-container-wc.rs:40:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "e4b7a0f82db39e416b5508fad42853f5358e4805", "filename": "src/test/ui/compile-fail-migration/regions-outlives-projection-container.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that we are imposing the requirement that every associated\n // type of a bound that appears in the where clause on a struct must\n // outlive the location in which the type appears. Issue #22246."}, {"sha": "2a698f9bff5a4314ecfe28aab3dca246ea2dd509", "filename": "src/test/ui/compile-fail-migration/regions-outlives-projection-container.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-outlives-projection-container.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,67 +1,67 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:48:12\n+  --> $DIR/regions-outlives-projection-container.rs:50:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 42:15\n-  --> $DIR/regions-outlives-projection-container.rs:42:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 44:15\n+  --> $DIR/regions-outlives-projection-container.rs:44:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 42:18\n-  --> $DIR/regions-outlives-projection-container.rs:42:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 44:18\n+  --> $DIR/regions-outlives-projection-container.rs:44:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:65:12\n+  --> $DIR/regions-outlives-projection-container.rs:67:12\n    |\n LL |     let _: &'a WithoutAssoc<TheType<'b>> = loop { }; //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 61:18\n-  --> $DIR/regions-outlives-projection-container.rs:61:18\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 63:18\n+  --> $DIR/regions-outlives-projection-container.rs:63:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 61:21\n-  --> $DIR/regions-outlives-projection-container.rs:61:21\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 63:21\n+  --> $DIR/regions-outlives-projection-container.rs:63:21\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                     ^^\n \n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:73:12\n+  --> $DIR/regions-outlives-projection-container.rs:75:12\n    |\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 68:20\n-  --> $DIR/regions-outlives-projection-container.rs:68:20\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 70:20\n+  --> $DIR/regions-outlives-projection-container.rs:70:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 68:23\n-  --> $DIR/regions-outlives-projection-container.rs:68:23\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 70:23\n+  --> $DIR/regions-outlives-projection-container.rs:70:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                       ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:80:12\n+  --> $DIR/regions-outlives-projection-container.rs:82:12\n    |\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 77:23\n-  --> $DIR/regions-outlives-projection-container.rs:77:23\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 79:23\n+  --> $DIR/regions-outlives-projection-container.rs:79:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 77:26\n-  --> $DIR/regions-outlives-projection-container.rs:77:26\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 79:26\n+  --> $DIR/regions-outlives-projection-container.rs:79:26\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                          ^^"}, {"sha": "a028bae40013d800a056d8e9d8811da7235b44b9", "filename": "src/test/ui/compile-fail-migration/regions-variance-contravariant-use-covariant-in-second-position.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant-in-second-position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant-in-second-position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant-in-second-position.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "fd1d3ab99f38ae3e245ae523f63fbb77609e1a9a", "filename": "src/test/ui/compile-fail-migration/regions-variance-contravariant-use-covariant-in-second-position.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant-in-second-position.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:30\n+  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:37:30\n    |\n LL | fn use_<'short,'long>(c: S<'long, 'short>,\n    |                          ----------------"}, {"sha": "84c4e52a9c07faef333c206462661958db4ab855", "filename": "src/test/ui/compile-fail-migration/regions-variance-contravariant-use-covariant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "a1e4913aa3a306f0e10dd1da634155991a654287", "filename": "src/test/ui/compile-fail-migration/regions-variance-contravariant-use-covariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-contravariant-use-covariant.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:35\n+  --> $DIR/regions-variance-contravariant-use-covariant.rs:35:35\n    |\n LL | fn use_<'short,'long>(c: Contravariant<'short>,\n    |                          --------------------- these two types are declared with different lifetimes..."}, {"sha": "824a442c87d544a898ab580385e7de7ce5e973fd", "filename": "src/test/ui/compile-fail-migration/regions-variance-covariant-use-contravariant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-covariant-use-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-covariant-use-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-covariant-use-contravariant.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that a type which is covariant with respect to its region\n // parameter yields an error when used in a contravariant way.\n //"}, {"sha": "fc1c6c304f8ad16b3cea90a761dd0b9877d5270f", "filename": "src/test/ui/compile-fail-migration/regions-variance-covariant-use-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-covariant-use-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-covariant-use-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-covariant-use-contravariant.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:32\n+  --> $DIR/regions-variance-covariant-use-contravariant.rs:35:32\n    |\n LL | fn use_<'short,'long>(c: Covariant<'long>,\n    |                          ----------------"}, {"sha": "9c6db331c01737982b6c83a00eec8a0f3d1db284", "filename": "src/test/ui/compile-fail-migration/regions-variance-invariant-use-contravariant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-contravariant.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that an invariant region parameter used in a contravariant way\n // yields an error.\n //"}, {"sha": "6b67e6b192e9cbb8f19f15cd91ba1a2560b46243", "filename": "src/test/ui/compile-fail-migration/regions-variance-invariant-use-contravariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-contravariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-contravariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-contravariant.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:32\n+  --> $DIR/regions-variance-invariant-use-contravariant.rs:32:32\n    |\n LL | fn use_<'short,'long>(c: Invariant<'long>,\n    |                          ----------------"}, {"sha": "ed393de357a3f2e36d5b6cdc5116f6e77cfca887", "filename": "src/test/ui/compile-fail-migration/regions-variance-invariant-use-covariant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-covariant.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that a type which is invariant with respect to its region\n // parameter used in a covariant way yields an error.\n //"}, {"sha": "5b50f4bd51373e83c682f868547fc2904d931391", "filename": "src/test/ui/compile-fail-migration/regions-variance-invariant-use-covariant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-covariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-covariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fregions-variance-invariant-use-covariant.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:27:33\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:29:33\n    |\n LL |     let _: Invariant<'static> = c; //~ ERROR mismatched types\n    |                                 ^ lifetime mismatch\n    |\n    = note: expected type `Invariant<'static>`\n               found type `Invariant<'b>`\n-note: the lifetime 'b as defined on the function body at 21:9...\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:21:9\n+note: the lifetime 'b as defined on the function body at 23:9...\n+  --> $DIR/regions-variance-invariant-use-covariant.rs:23:9\n    |\n LL | fn use_<'b>(c: Invariant<'b>) {\n    |         ^^"}, {"sha": "cc635296210a03b013d32ee0dcba41ad19cf9a6d", "filename": "src/test/ui/compile-fail-migration/unboxed-closure-region.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closure-region.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that an unboxed closure that captures a free variable by\n // reference cannot escape the region of that variable.\n fn main() {"}, {"sha": "a838c3608b9a9dcacadbfd55ab5f980c2061970f", "filename": "src/test/ui/compile-fail-migration/unboxed-closure-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closure-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closure-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closure-region.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0597]: `x` does not live long enough\n-  --> $DIR/unboxed-closure-region.rs:16:12\n+  --> $DIR/unboxed-closure-region.rs:18:12\n    |\n LL |         || x //~ ERROR `x` does not live long enough\n    |         -- ^ borrowed value does not live long enough"}, {"sha": "734f89e5e0b8ba3fa5105532ca3750d735575afb", "filename": "src/test/ui/compile-fail-migration/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closures-borrow-conflict.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that an unboxed closure that mutates a free variable will\n // cause borrow conflicts.\n "}, {"sha": "9bdd1022fd179ba444f37eab6e8991a157730f3f", "filename": "src/test/ui/compile-fail-migration/unboxed-closures-borrow-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closures-borrow-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closures-borrow-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Funboxed-closures-borrow-conflict.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/unboxed-closures-borrow-conflict.rs:17:9\n+  --> $DIR/unboxed-closures-borrow-conflict.rs:19:9\n    |\n LL |     let f = || x += 1;\n    |             -- borrow of `x` occurs here"}, {"sha": "39d87a563e5169ad8ded213f71df9dad562f7caa", "filename": "src/test/ui/compile-fail-migration/variance-cell-is-invariant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-cell-is-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-cell-is-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-cell-is-invariant.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n // Test that Cell is considered invariant with respect to its\n // type.\n "}, {"sha": "8fb5d9bf38b3c487376e43db1ba0102b0ec2e126", "filename": "src/test/ui/compile-fail-migration/variance-cell-is-invariant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-cell-is-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-cell-is-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-cell-is-invariant.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/variance-cell-is-invariant.rs:24:25\n+  --> $DIR/variance-cell-is-invariant.rs:26:25\n    |\n LL | fn use_<'short,'long>(c: Foo<'short>,\n    |                          ----------- these two types are declared with different lifetimes..."}, {"sha": "96791304d93d3c3e6baca85d02af5217eeccc36b", "filename": "src/test/ui/compile-fail-migration/variance-contravariant-arg-trait-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-arg-trait-match.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n // Test that even when `T` is only used in contravariant position, it"}, {"sha": "282220d1037f59a4938834fde22a6f3b99a03585", "filename": "src/test/ui/compile-fail-migration/variance-contravariant-arg-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-arg-trait-match.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:23:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:25:5\n    |\n LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 20:21...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:20:21\n+note: the lifetime 'min as defined on the function body at 22:21...\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:20:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:22:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:31:5\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:33:5\n    |\n LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 26:21...\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:26:21\n+note: the lifetime 'min as defined on the function body at 28:21...\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:28:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 26:27\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:26:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 28:27\n+  --> $DIR/variance-contravariant-arg-trait-match.rs:28:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "c04ba8862c31786e99c9e5231b3a1cbcb6944610", "filename": "src/test/ui/compile-fail-migration/variance-contravariant-self-trait-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-self-trait-match.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n // Test that even when `Self` is only used in contravariant position, it"}, {"sha": "9e60a70bc16b2c97499b1edebdec8bc39d3d6c60", "filename": "src/test/ui/compile-fail-migration/variance-contravariant-self-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-contravariant-self-trait-match.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:23:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:25:5\n    |\n LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 20:21...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:20:21\n+note: the lifetime 'min as defined on the function body at 22:21...\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n-  --> $DIR/variance-contravariant-self-trait-match.rs:20:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:22:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-contravariant-self-trait-match.rs:32:5\n+  --> $DIR/variance-contravariant-self-trait-match.rs:34:5\n    |\n LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 26:21...\n-  --> $DIR/variance-contravariant-self-trait-match.rs:26:21\n+note: the lifetime 'min as defined on the function body at 28:21...\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 26:27\n-  --> $DIR/variance-contravariant-self-trait-match.rs:26:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 28:27\n+  --> $DIR/variance-contravariant-self-trait-match.rs:28:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "fbda62f34fa16a0625e1e647069735b8a81efe45", "filename": "src/test/ui/compile-fail-migration/variance-covariant-arg-trait-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-arg-trait-match.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n // Test that even when `T` is only used in covariant position, it"}, {"sha": "648acc2119f1bf17f5f5653768f630f8c1215275", "filename": "src/test/ui/compile-fail-migration/variance-covariant-arg-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-arg-trait-match.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:24:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:26:5\n    |\n LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 20:21...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:21\n+note: the lifetime 'min as defined on the function body at 22:21...\n+  --> $DIR/variance-covariant-arg-trait-match.rs:22:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n-  --> $DIR/variance-covariant-arg-trait-match.rs:20:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:22:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-arg-trait-match.rs:30:5\n+  --> $DIR/variance-covariant-arg-trait-match.rs:32:5\n    |\n LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 27:21...\n-  --> $DIR/variance-covariant-arg-trait-match.rs:27:21\n+note: the lifetime 'min as defined on the function body at 29:21...\n+  --> $DIR/variance-covariant-arg-trait-match.rs:29:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 27:27\n-  --> $DIR/variance-covariant-arg-trait-match.rs:27:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 29:27\n+  --> $DIR/variance-covariant-arg-trait-match.rs:29:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "3e0c1da3bca7c5b92b67ab6414560f7447792263", "filename": "src/test/ui/compile-fail-migration/variance-covariant-self-trait-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-self-trait-match.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n // Test that even when `Self` is only used in covariant position, it"}, {"sha": "cb8fe0b7890e4f42d9fe54079862ed8da09d279a", "filename": "src/test/ui/compile-fail-migration/variance-covariant-self-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-covariant-self-trait-match.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:24:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:26:5\n    |\n LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 20:21...\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:21\n+note: the lifetime 'min as defined on the function body at 22:21...\n+  --> $DIR/variance-covariant-self-trait-match.rs:22:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 20:27\n-  --> $DIR/variance-covariant-self-trait-match.rs:20:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 22:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:22:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-covariant-self-trait-match.rs:30:5\n+  --> $DIR/variance-covariant-self-trait-match.rs:32:5\n    |\n LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 27:21...\n-  --> $DIR/variance-covariant-self-trait-match.rs:27:21\n+note: the lifetime 'min as defined on the function body at 29:21...\n+  --> $DIR/variance-covariant-self-trait-match.rs:29:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 27:27\n-  --> $DIR/variance-covariant-self-trait-match.rs:27:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 29:27\n+  --> $DIR/variance-covariant-self-trait-match.rs:29:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "771fcdeb62f6d4e112337539d90080ae4eff6063", "filename": "src/test/ui/compile-fail-migration/variance-invariant-arg-trait-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-arg-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-arg-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-arg-trait-match.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n trait Get<T> {"}, {"sha": "3f63549506962686013686e6954c74f16dd66966", "filename": "src/test/ui/compile-fail-migration/variance-invariant-arg-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-arg-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-arg-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-arg-trait-match.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:20:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:22:5\n    |\n LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'min i32>`\n               found type `Get<&'max i32>`\n-note: the lifetime 'min as defined on the function body at 17:21...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:17:21\n+note: the lifetime 'min as defined on the function body at 19:21...\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 17:27\n-  --> $DIR/variance-invariant-arg-trait-match.rs:17:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 19:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:19:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-arg-trait-match.rs:26:5\n+  --> $DIR/variance-invariant-arg-trait-match.rs:28:5\n    |\n LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get<&'max i32>`\n               found type `Get<&'min i32>`\n-note: the lifetime 'min as defined on the function body at 23:21...\n-  --> $DIR/variance-invariant-arg-trait-match.rs:23:21\n+note: the lifetime 'min as defined on the function body at 25:21...\n+  --> $DIR/variance-invariant-arg-trait-match.rs:25:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 23:27\n-  --> $DIR/variance-invariant-arg-trait-match.rs:23:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 25:27\n+  --> $DIR/variance-invariant-arg-trait-match.rs:25:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}, {"sha": "57abf6f897931cfc82568633041ec840f37c5c87", "filename": "src/test/ui/compile-fail-migration/variance-invariant-self-trait-match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-self-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-self-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-self-trait-match.rs?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-compare-mode-nll\n+\n #![allow(dead_code)]\n \n trait Get {"}, {"sha": "1b864abc4f02fcc4a66f2e7adec223d230595e7e", "filename": "src/test/ui/compile-fail-migration/variance-invariant-self-trait-match.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-self-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e0a4079884eab5b54489c92f7428cda2797ea5c/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-self-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile-fail-migration%2Fvariance-invariant-self-trait-match.stderr?ref=3e0a4079884eab5b54489c92f7428cda2797ea5c", "patch": "@@ -1,37 +1,37 @@\n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:20:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:22:5\n    |\n LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 17:21...\n-  --> $DIR/variance-invariant-self-trait-match.rs:17:21\n+note: the lifetime 'min as defined on the function body at 19:21...\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:21\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 17:27\n-  --> $DIR/variance-invariant-self-trait-match.rs:17:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 19:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:19:27\n    |\n LL | fn get_min_from_max<'min, 'max, G>()\n    |                           ^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/variance-invariant-self-trait-match.rs:26:5\n+  --> $DIR/variance-invariant-self-trait-match.rs:28:5\n    |\n LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n    |     ^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n    = note: expected type `Get`\n               found type `Get`\n-note: the lifetime 'min as defined on the function body at 23:21...\n-  --> $DIR/variance-invariant-self-trait-match.rs:23:21\n+note: the lifetime 'min as defined on the function body at 25:21...\n+  --> $DIR/variance-invariant-self-trait-match.rs:25:21\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                     ^^^^\n-note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 23:27\n-  --> $DIR/variance-invariant-self-trait-match.rs:23:27\n+note: ...does not necessarily outlive the lifetime 'max as defined on the function body at 25:27\n+  --> $DIR/variance-invariant-self-trait-match.rs:25:27\n    |\n LL | fn get_max_from_min<'min, 'max, G>()\n    |                           ^^^^"}]}