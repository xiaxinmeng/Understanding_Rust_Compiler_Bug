{"sha": "67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3Y2EzN2FjNjEwZDc0YTA5YTA1YTRlZjVjOTMyNTZhM2FjZTBlYzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-18T20:49:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-18T21:32:37Z"}, "message": "workaround a horribly obscure resolve bug", "tree": {"sha": "a978f7c36c7cc3d6f64b22312adf9824374e675f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a978f7c36c7cc3d6f64b22312adf9824374e675f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "html_url": "https://github.com/rust-lang/rust/commit/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a55932969295adf790d19e932a0955f4496eb1f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a55932969295adf790d19e932a0955f4496eb1f7", "html_url": "https://github.com/rust-lang/rust/commit/a55932969295adf790d19e932a0955f4496eb1f7"}], "stats": {"total": 155, "additions": 79, "deletions": 76}, "files": [{"sha": "618c7cda97b232269132b6bcf6c1bf59f558082a", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "patch": "@@ -1683,7 +1683,7 @@ fn trans_assign_op(bcx: block, ex: @ast::expr, op: ast::binop,\n \n fn root_value(bcx: block, val: ValueRef, ty: ty::t,\n               scope_id: ast::node_id) {\n-    if !bcx.sess().opts.no_asm_comments {\n+    if !bcx.sess().no_asm_comments() {\n         add_comment(bcx, #fmt[\"preserving until end of scope %d\",\n                               scope_id]);\n     }"}, {"sha": "2810c6b8c8d85b59c6019c17a25315ecf205b926", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "patch": "@@ -45,6 +45,7 @@ an rptr (`&r.T`) use the region `r` that appears in the rptr.\n \"];\n \n import check::fn_ctxt;\n+import rscope::*;\n \n iface ast_conv {\n     fn tcx() -> ty::ctxt;\n@@ -55,74 +56,6 @@ iface ast_conv {\n     fn ty_infer(span: span) -> ty::t;\n }\n \n-iface region_scope {\n-    fn anon_region() -> result<ty::region, str>;\n-    fn named_region(id: str) -> result<ty::region, str>;\n-}\n-\n-enum empty_rscope { empty_rscope }\n-impl of region_scope for empty_rscope {\n-    fn anon_region() -> result<ty::region, str> {\n-        result::err(\"region types are not allowed here\")\n-    }\n-    fn named_region(id: str) -> result<ty::region, str> {\n-        if id == \"static\" { result::ok(ty::re_static) }\n-        else { result::err(\"only the static region is allowed here\") }\n-    }\n-}\n-\n-enum type_rscope = ast::region_param;\n-impl of region_scope for type_rscope {\n-    fn anon_region() -> result<ty::region, str> {\n-        alt *self {\n-          ast::rp_self { result::ok(ty::re_bound(ty::br_self)) }\n-          ast::rp_none {\n-            result::err(\"to use region types here, the containing type \\\n-                         must be declared with a region bound\")\n-          }\n-        }\n-    }\n-    fn named_region(id: str) -> result<ty::region, str> {\n-        empty_rscope.named_region(id).chain_err { |_e|\n-            if id == \"self\" { self.anon_region() }\n-            else {\n-                result::err(\"named regions other than `self` are not \\\n-                             allowed as part of a type declaration\")\n-            }\n-        }\n-    }\n-}\n-\n-enum anon_rscope = {anon: ty::region, base: region_scope};\n-fn in_anon_rscope<RS: region_scope copy>(self: RS, r: ty::region)\n-    -> @anon_rscope {\n-    @anon_rscope({anon: r, base: self as region_scope})\n-}\n-impl of region_scope for @anon_rscope {\n-    fn anon_region() -> result<ty::region, str> {\n-        result::ok(self.anon)\n-    }\n-    fn named_region(id: str) -> result<ty::region, str> {\n-        self.base.named_region(id)\n-    }\n-}\n-\n-enum binding_rscope = {base: region_scope};\n-fn in_binding_rscope<RS: region_scope copy>(self: RS) -> @binding_rscope {\n-    let base = self as region_scope;\n-    @binding_rscope({base: base})\n-}\n-impl of region_scope for @binding_rscope {\n-    fn anon_region() -> result<ty::region, str> {\n-        result::ok(ty::re_bound(ty::br_anon))\n-    }\n-    fn named_region(id: str) -> result<ty::region, str> {\n-        self.base.named_region(id).chain_err {|_e|\n-            result::ok(ty::re_bound(ty::br_named(id)))\n-        }\n-    }\n-}\n-\n fn get_region_reporting_err(tcx: ty::ctxt,\n                             span: span,\n                             res: result<ty::region, str>) -> ty::region {"}, {"sha": "80894b67b63fd33a4b415d51dfcb9108184e04bd", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "patch": "@@ -66,13 +66,13 @@ type parameter).\n \n */\n \n-import astconv::{ast_conv, region_scope, empty_rscope, ast_ty_to_ty,\n-                 in_anon_rscope};\n+import astconv::{ast_conv, ast_ty_to_ty};\n import collect::{methods}; // ccx.to_ty()\n import method::{methods};  // methods for method::lookup\n import regionmanip::{universally_quantify_regions_before_call,\n                      region_of, replace_bound_regions,\n                      collect_bound_regions_in_tys};\n+import rscope::*;\n \n type fn_ctxt =\n     // var_bindings, locals and next_var_id are shared\n@@ -335,7 +335,7 @@ fn class_types(ccx: @crate_ctxt, members: [@ast::class_member],\n                rp: ast::region_param) -> class_map {\n \n     let rslt = int_hash::<ty::t>();\n-    let rs = astconv::type_rscope(rp);\n+    let rs = rscope::type_rscope(rp);\n     for members.each { |m|\n       alt m.node {\n          ast::instance_var(_,t,_,id,_) {\n@@ -375,7 +375,7 @@ fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n         check_bare_fn(ccx, decl, body, dtor_id, none);\n       }\n       ast::item_impl(tps, rp, _, ty, ms) {\n-        let self_ty = ccx.to_ty(astconv::type_rscope(rp), ty);\n+        let self_ty = ccx.to_ty(rscope::type_rscope(rp), ty);\n         for ms.each {|m| check_method(ccx, m, self_ty);}\n       }\n       ast::item_class(tps, ifaces, members, ctor, m_dtor, rp) {\n@@ -652,7 +652,7 @@ fn impl_self_ty(fcx: @fn_ctxt, did: ast::def_id) -> ty_param_substs_and_ty {\n                                   _}, _)) {\n             {n_tps: ts.len(),\n              rp: rp,\n-             raw_ty: fcx.ccx.to_ty(astconv::type_rscope(rp), st)}\n+             raw_ty: fcx.ccx.to_ty(rscope::type_rscope(rp), st)}\n           }\n           some(ast_map::node_item(@{node: ast::item_class(ts,\n                                  _,_,_,_,rp), id: class_id, _},_)) {"}, {"sha": "69c2e778d3d368996315004905806ff22310d9b8", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "patch": "@@ -20,8 +20,8 @@ are represented as `ty_param()` instances.\n \n */\n \n-import astconv::{type_rscope, empty_rscope, in_binding_rscope, ast_conv,\n-                 ty_of_fn_decl, ty_of_arg, region_scope, ast_ty_to_ty};\n+import astconv::{ast_conv, ty_of_fn_decl, ty_of_arg, ast_ty_to_ty};\n+import rscope::*;\n \n fn collect_item_types(ccx: @crate_ctxt, crate: @ast::crate) {\n "}, {"sha": "cf5d78a0f2f53398eab855827fdfaab836db42bb", "filename": "src/rustc/middle/typeck/rscope.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "patch": "@@ -0,0 +1,69 @@\n+import result::result;\n+\n+iface region_scope {\n+    fn anon_region() -> result<ty::region, str>;\n+    fn named_region(id: str) -> result<ty::region, str>;\n+}\n+\n+enum empty_rscope { empty_rscope }\n+impl of region_scope for empty_rscope {\n+    fn anon_region() -> result<ty::region, str> {\n+        result::err(\"region types are not allowed here\")\n+    }\n+    fn named_region(id: str) -> result<ty::region, str> {\n+        if id == \"static\" { result::ok(ty::re_static) }\n+        else { result::err(\"only the static region is allowed here\") }\n+    }\n+}\n+\n+enum type_rscope = ast::region_param;\n+impl of region_scope for type_rscope {\n+    fn anon_region() -> result<ty::region, str> {\n+        alt *self {\n+          ast::rp_self { result::ok(ty::re_bound(ty::br_self)) }\n+          ast::rp_none {\n+            result::err(\"to use region types here, the containing type \\\n+                         must be declared with a region bound\")\n+          }\n+        }\n+    }\n+    fn named_region(id: str) -> result<ty::region, str> {\n+        empty_rscope.named_region(id).chain_err { |_e|\n+            if id == \"self\" { self.anon_region() }\n+            else {\n+                result::err(\"named regions other than `self` are not \\\n+                             allowed as part of a type declaration\")\n+            }\n+        }\n+    }\n+}\n+\n+enum anon_rscope = {anon: ty::region, base: region_scope};\n+fn in_anon_rscope<RS: region_scope copy>(self: RS, r: ty::region)\n+    -> @anon_rscope {\n+    @anon_rscope({anon: r, base: self as region_scope})\n+}\n+impl of region_scope for @anon_rscope {\n+    fn anon_region() -> result<ty::region, str> {\n+        result::ok(self.anon)\n+    }\n+    fn named_region(id: str) -> result<ty::region, str> {\n+        self.base.named_region(id)\n+    }\n+}\n+\n+enum binding_rscope = {base: region_scope};\n+fn in_binding_rscope<RS: region_scope copy>(self: RS) -> @binding_rscope {\n+    let base = self as region_scope;\n+    @binding_rscope({base: base})\n+}\n+impl of region_scope for @binding_rscope {\n+    fn anon_region() -> result<ty::region, str> {\n+        result::ok(ty::re_bound(ty::br_anon))\n+    }\n+    fn named_region(id: str) -> result<ty::region, str> {\n+        self.base.named_region(id).chain_err {|_e|\n+            result::ok(ty::re_bound(ty::br_named(id)))\n+        }\n+    }\n+}"}, {"sha": "fb4468754ca5d8e3dccc319614f838b88c8b8a59", "filename": "src/rustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/67ca37ac610d74a09a05a4ef5c93256a3ace0ec9/src%2Frustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Frustc.rc?ref=67ca37ac610d74a09a05a4ef5c93256a3ace0ec9", "patch": "@@ -61,6 +61,7 @@ mod middle {\n             mod demand;\n             mod method;\n         }\n+        mod rscope;\n         mod astconv;\n         mod infer;\n         mod collect;"}]}