{"sha": "27b92c9f98a0ea3070b988819bb3aa1111ed0382", "node_id": "C_kwDOAAsO6NoAKDI3YjkyYzlmOThhMGVhMzA3MGI5ODg4MTliYjNhYTExMTFlZDAzODI", "commit": {"author": {"name": "Xuanwo", "email": "github@xuanwo.io", "date": "2021-12-28T03:53:14Z"}, "committer": {"name": "Xuanwo", "email": "github@xuanwo.io", "date": "2021-12-28T03:53:14Z"}, "message": "Implement support in wtf8\n\nSigned-off-by: Xuanwo <github@xuanwo.io>", "tree": {"sha": "145d5739b2d4d102b48131947760f96e6fa537cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/145d5739b2d4d102b48131947760f96e6fa537cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27b92c9f98a0ea3070b988819bb3aa1111ed0382", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQQxsjGJMURYQAE8nJHEI7T6a0jpRQUCYcqKNgAKCRDEI7T6a0jp\nRe/1AP41sa+fODWER56o7zZSUa9eb9pRXjwkiu/LVcJc2ZfGQQD9ECTcO6YzKXWA\nh5BmYy/15pLAxXyBycnekL5qHadFzgI=\n=TNJm\n-----END PGP SIGNATURE-----", "payload": "tree 145d5739b2d4d102b48131947760f96e6fa537cf\nparent 013fbc61877c8b1ca964274f171bd79952247fc3\nauthor Xuanwo <github@xuanwo.io> 1640663594 +0800\ncommitter Xuanwo <github@xuanwo.io> 1640663594 +0800\n\nImplement support in wtf8\n\nSigned-off-by: Xuanwo <github@xuanwo.io>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27b92c9f98a0ea3070b988819bb3aa1111ed0382", "html_url": "https://github.com/rust-lang/rust/commit/27b92c9f98a0ea3070b988819bb3aa1111ed0382", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27b92c9f98a0ea3070b988819bb3aa1111ed0382/comments", "author": {"login": "Xuanwo", "id": 5351546, "node_id": "MDQ6VXNlcjUzNTE1NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5351546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xuanwo", "html_url": "https://github.com/Xuanwo", "followers_url": "https://api.github.com/users/Xuanwo/followers", "following_url": "https://api.github.com/users/Xuanwo/following{/other_user}", "gists_url": "https://api.github.com/users/Xuanwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xuanwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xuanwo/subscriptions", "organizations_url": "https://api.github.com/users/Xuanwo/orgs", "repos_url": "https://api.github.com/users/Xuanwo/repos", "events_url": "https://api.github.com/users/Xuanwo/events{/privacy}", "received_events_url": "https://api.github.com/users/Xuanwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xuanwo", "id": 5351546, "node_id": "MDQ6VXNlcjUzNTE1NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/5351546?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xuanwo", "html_url": "https://github.com/Xuanwo", "followers_url": "https://api.github.com/users/Xuanwo/followers", "following_url": "https://api.github.com/users/Xuanwo/following{/other_user}", "gists_url": "https://api.github.com/users/Xuanwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xuanwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xuanwo/subscriptions", "organizations_url": "https://api.github.com/users/Xuanwo/orgs", "repos_url": "https://api.github.com/users/Xuanwo/repos", "events_url": "https://api.github.com/users/Xuanwo/events{/privacy}", "received_events_url": "https://api.github.com/users/Xuanwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "013fbc61877c8b1ca964274f171bd79952247fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/013fbc61877c8b1ca964274f171bd79952247fc3", "html_url": "https://github.com/rust-lang/rust/commit/013fbc61877c8b1ca964274f171bd79952247fc3"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "3f3f4abd214c692c227952e08eb3a903d7fb51d3", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/27b92c9f98a0ea3070b988819bb3aa1111ed0382/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27b92c9f98a0ea3070b988819bb3aa1111ed0382/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=27b92c9f98a0ea3070b988819bb3aa1111ed0382", "patch": "@@ -22,6 +22,7 @@ use core::str::next_code_point;\n \n use crate::borrow::Cow;\n use crate::char;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::iter::FromIterator;\n@@ -231,11 +232,47 @@ impl Wtf8Buf {\n         self.bytes.reserve(additional)\n     }\n \n+    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n+    /// in the given `Wtf8Buf`. The collection may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.bytes.try_reserve(additional)\n+    }\n+\n     #[inline]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.bytes.reserve_exact(additional)\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// elements to be inserted in the given `Wtf8Buf`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the collection more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: Wtf8Buf::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.bytes.try_reserve_exact(additional)\n+    }\n+\n     #[inline]\n     pub fn shrink_to_fit(&mut self) {\n         self.bytes.shrink_to_fit()"}]}