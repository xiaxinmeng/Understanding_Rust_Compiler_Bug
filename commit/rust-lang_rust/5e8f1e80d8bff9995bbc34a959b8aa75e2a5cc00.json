{"sha": "5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "node_id": "C_kwDOAAsO6NoAKDVlOGYxZTgwZDhiZmY5OTk1YmJjMzRhOTU5YjhhYTc1ZTJhNWNjMDA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-09T07:11:03Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-26T07:46:30Z"}, "message": "Check that RPITs constrained by a recursive call in a closure are compatible", "tree": {"sha": "c8b5f393a428fd1309f3fab1e764547ee2d8001d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b5f393a428fd1309f3fab1e764547ee2d8001d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "html_url": "https://github.com/rust-lang/rust/commit/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90939e6bce14304c24da2f253c1b94e7feca01a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/90939e6bce14304c24da2f253c1b94e7feca01a9", "html_url": "https://github.com/rust-lang/rust/commit/90939e6bce14304c24da2f253c1b94e7feca01a9"}], "stats": {"total": 189, "additions": 139, "deletions": 50}, "files": [{"sha": "64ac655e0c393f43cd5282bcc4dc3fe7b1dab3ee", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 119, "deletions": 29, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "patch": "@@ -335,37 +335,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n-                    find_opaque_ty_constraints(tcx, def_id)\n+                    find_opaque_ty_constraints_for_tait(tcx, def_id)\n                 }\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn(owner) | hir::OpaqueTyOrigin::AsyncFn(owner), .. }) => {\n-                    let concrete_ty = tcx\n-                        .mir_borrowck(owner)\n-                        .concrete_opaque_types\n-                        .get(&def_id)\n-                        .copied()\n-                        .map(|concrete| concrete.ty)\n-                        .unwrap_or_else(|| {\n-                            let table = tcx.typeck(owner);\n-                            if let Some(_) = table.tainted_by_errors {\n-                                // Some error in the\n-                                // owner fn prevented us from populating\n-                                // the `concrete_opaque_types` table.\n-                                tcx.ty_error()\n-                            } else {\n-                                table.concrete_opaque_types.get(&def_id).copied().unwrap_or_else(|| {\n-                                    // We failed to resolve the opaque type or it\n-                                    // resolves to itself. We interpret this as the\n-                                    // no values of the hidden type ever being constructed,\n-                                    // so we can just make the hidden type be `!`.\n-                                    // For backwards compatibility reasons, we fall back to\n-                                    // `()` until we the diverging default is changed.\n-                                    Some(tcx.mk_diverging_default())\n-                                }).expect(\"RPIT always have a hidden type from typeck\")\n-                            }\n-                        });\n-                    debug!(\"concrete_ty = {:?}\", concrete_ty);\n-                    concrete_ty\n+                    find_opaque_ty_constraints_for_rpit(tcx, def_id, owner)\n                 }\n                 ItemKind::Trait(..)\n                 | ItemKind::TraitAlias(..)\n@@ -519,7 +493,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n /// fn b<T>() -> Foo<T, u32> { .. }\n /// ```\n ///\n-fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n+fn find_opaque_ty_constraints_for_tait(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n \n     struct ConstraintLocator<'tcx> {\n@@ -660,6 +634,122 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n     }\n }\n \n+fn find_opaque_ty_constraints_for_rpit(\n+    tcx: TyCtxt<'_>,\n+    def_id: LocalDefId,\n+    owner_def_id: LocalDefId,\n+) -> Ty<'_> {\n+    use rustc_hir::{Expr, ImplItem, Item, TraitItem};\n+\n+    struct ConstraintChecker<'tcx> {\n+        tcx: TyCtxt<'tcx>,\n+\n+        /// def_id of the opaque type whose defining uses are being checked\n+        def_id: LocalDefId,\n+\n+        found: ty::OpaqueHiddenType<'tcx>,\n+    }\n+\n+    impl ConstraintChecker<'_> {\n+        #[instrument(skip(self), level = \"debug\")]\n+        fn check(&self, def_id: LocalDefId) {\n+            // Use borrowck to get the type with unerased regions.\n+            let concrete_opaque_types = &self.tcx.mir_borrowck(def_id).concrete_opaque_types;\n+            debug!(?concrete_opaque_types);\n+            for &(def_id, concrete_type) in concrete_opaque_types {\n+                if def_id != self.def_id {\n+                    // Ignore constraints for other opaque types.\n+                    continue;\n+                }\n+\n+                debug!(?concrete_type, \"found constraint\");\n+\n+                if concrete_type.ty != self.found.ty\n+                    && !(concrete_type, self.found).references_error()\n+                {\n+                    self.found.report_mismatch(&concrete_type, self.tcx);\n+                }\n+            }\n+        }\n+    }\n+\n+    impl<'tcx> intravisit::Visitor<'tcx> for ConstraintChecker<'tcx> {\n+        type NestedFilter = nested_filter::OnlyBodies;\n+\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.tcx.hir()\n+        }\n+        fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+            if let hir::ExprKind::Closure { .. } = ex.kind {\n+                let def_id = self.tcx.hir().local_def_id(ex.hir_id);\n+                self.check(def_id);\n+            }\n+            intravisit::walk_expr(self, ex);\n+        }\n+        fn visit_item(&mut self, it: &'tcx Item<'tcx>) {\n+            trace!(?it.def_id);\n+            // The opaque type itself or its children are not within its reveal scope.\n+            if it.def_id != self.def_id {\n+                self.check(it.def_id);\n+                intravisit::walk_item(self, it);\n+            }\n+        }\n+        fn visit_impl_item(&mut self, it: &'tcx ImplItem<'tcx>) {\n+            trace!(?it.def_id);\n+            // The opaque type itself or its children are not within its reveal scope.\n+            if it.def_id != self.def_id {\n+                self.check(it.def_id);\n+                intravisit::walk_impl_item(self, it);\n+            }\n+        }\n+        fn visit_trait_item(&mut self, it: &'tcx TraitItem<'tcx>) {\n+            trace!(?it.def_id);\n+            self.check(it.def_id);\n+            intravisit::walk_trait_item(self, it);\n+        }\n+    }\n+\n+    let concrete = tcx.mir_borrowck(owner_def_id).concrete_opaque_types.get(&def_id).copied();\n+\n+    if let Some(concrete) = concrete {\n+        let scope = tcx.hir().local_def_id_to_hir_id(owner_def_id);\n+        debug!(?scope);\n+        let mut locator = ConstraintChecker { def_id: def_id, tcx, found: concrete };\n+\n+        match tcx.hir().get(scope) {\n+            Node::Item(it) => intravisit::walk_item(&mut locator, it),\n+            Node::ImplItem(it) => intravisit::walk_impl_item(&mut locator, it),\n+            Node::TraitItem(it) => intravisit::walk_trait_item(&mut locator, it),\n+            other => bug!(\"{:?} is not a valid scope for an opaque type item\", other),\n+        }\n+    }\n+\n+    concrete.map(|concrete| concrete.ty).unwrap_or_else(|| {\n+        let table = tcx.typeck(owner_def_id);\n+        if let Some(_) = table.tainted_by_errors {\n+            // Some error in the\n+            // owner fn prevented us from populating\n+            // the `concrete_opaque_types` table.\n+            tcx.ty_error()\n+        } else {\n+            table\n+                .concrete_opaque_types\n+                .get(&def_id)\n+                .copied()\n+                .unwrap_or_else(|| {\n+                    // We failed to resolve the opaque type or it\n+                    // resolves to itself. We interpret this as the\n+                    // no values of the hidden type ever being constructed,\n+                    // so we can just make the hidden type be `!`.\n+                    // For backwards compatibility reasons, we fall back to\n+                    // `()` until we the diverging default is changed.\n+                    Some(tcx.mk_diverging_default())\n+                })\n+                .expect(\"RPIT always have a hidden type from typeck\")\n+        }\n+    })\n+}\n+\n fn infer_placeholder_type<'a>(\n     tcx: TyCtxt<'a>,\n     def_id: LocalDefId,"}, {"sha": "14ac688806bda2a6da34b5bc1bbe90c182125ef2", "filename": "src/test/ui/impl-trait/issue-99073-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.rs?ref=5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "patch": "@@ -7,7 +7,7 @@ fn main() {\n fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n     let f = || {\n         let i: u32 = test::<i32>(-1, false);\n-        //~^ ERROR mismatched types\n+        //~^ ERROR concrete type differs from previous defining opaque type use\n         println!(\"{i}\");\n     };\n     if recurse {"}, {"sha": "913bc8f5674acf1915d349a13f9b4b1f9585be6a", "filename": "src/test/ui/impl-trait/issue-99073-2.stderr", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073-2.stderr?ref=5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "patch": "@@ -1,15 +1,14 @@\n-error[E0308]: mismatched types\n+error: concrete type differs from previous defining opaque type use\n   --> $DIR/issue-99073-2.rs:9:22\n    |\n-LL | fn test<T: Display>(t: T, recurse: bool) -> impl Display {\n-   |                                             ------------ the expected opaque type\n-LL |     let f = || {\n LL |         let i: u32 = test::<i32>(-1, false);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ expected `T`, got `u32`\n    |\n-   = note: expected opaque type `impl std::fmt::Display`\n-                     found type `u32`\n+note: previous use here\n+  --> $DIR/issue-99073-2.rs:16:5\n+   |\n+LL |     t\n+   |     ^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "7798e247df0a2c77ade50b3d0a054404ec2e2526", "filename": "src/test/ui/impl-trait/issue-99073.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.rs?ref=5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n-    let _ = fix(|_: &dyn Fn()| {});\n+  let _ = fix(|_: &dyn Fn()| {});\n }\n \n fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n-    move || f(fix(&f))\n-    //~^ ERROR mismatched types\n+  move || f(fix(&f))\n+  //~^ ERROR concrete type differs from previous defining opaque type use\n }"}, {"sha": "54636795349688544df9ab794e5f53db0f0d08f1", "filename": "src/test/ui/impl-trait/issue-99073.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-99073.stderr?ref=5e8f1e80d8bff9995bbc34a959b8aa75e2a5cc00", "patch": "@@ -1,14 +1,14 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-99073.rs:6:13\n+error: concrete type differs from previous defining opaque type use\n+  --> $DIR/issue-99073.rs:6:11\n    |\n-LL | fn fix<F: Fn(G), G: Fn()>(f: F) -> impl Fn() {\n-   |                                    --------- the expected opaque type\n-LL |     move || f(fix(&f))\n-   |             ^^^^^^^^^^ types differ\n+LL |   move || f(fix(&f))\n+   |           ^^^^^^^^^^ expected `[closure@$DIR/issue-99073.rs:6:3: 6:10]`, got `G`\n    |\n-   = note: expected opaque type `impl Fn()`\n-           found type parameter `G`\n+note: previous use here\n+  --> $DIR/issue-99073.rs:6:3\n+   |\n+LL |   move || f(fix(&f))\n+   |   ^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}]}