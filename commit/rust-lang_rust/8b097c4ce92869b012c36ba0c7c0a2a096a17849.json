{"sha": "8b097c4ce92869b012c36ba0c7c0a2a096a17849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDk3YzRjZTkyODY5YjAxMmMzNmJhMGM3YzBhMmEwOTZhMTc4NDk=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-04T14:23:22Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-04T15:07:06Z"}, "message": "Don't try to promote already promoted out temporaries", "tree": {"sha": "21d25715933391ee43bbc18649ba8625fd539320", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21d25715933391ee43bbc18649ba8625fd539320"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b097c4ce92869b012c36ba0c7c0a2a096a17849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b097c4ce92869b012c36ba0c7c0a2a096a17849", "html_url": "https://github.com/rust-lang/rust/commit/8b097c4ce92869b012c36ba0c7c0a2a096a17849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b097c4ce92869b012c36ba0c7c0a2a096a17849/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "088fc7384c1ac3f7670d66880c7dcc0ec9160c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/088fc7384c1ac3f7670d66880c7dcc0ec9160c79", "html_url": "https://github.com/rust-lang/rust/commit/088fc7384c1ac3f7670d66880c7dcc0ec9160c79"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "bba9260f2b829f2dc965bd30257ac317309d8b81", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b097c4ce92869b012c36ba0c7c0a2a096a17849/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b097c4ce92869b012c36ba0c7c0a2a096a17849/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=8b097c4ce92869b012c36ba0c7c0a2a096a17849", "patch": "@@ -332,6 +332,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             let operand = Operand::Copy(promoted_place(ty, span));\n                             mem::replace(&mut args[index], operand)\n                         }\n+                        // already promoted out\n+                        TerminatorKind::Goto { .. } => return,\n                         _ => bug!()\n                     }\n                 }"}, {"sha": "4808f02c1dff4c024ceb9c8b72a84130f60c7b12", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b097c4ce92869b012c36ba0c7c0a2a096a17849/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b097c4ce92869b012c36ba0c7c0a2a096a17849/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8b097c4ce92869b012c36ba0c7c0a2a096a17849", "patch": "@@ -812,7 +812,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n             let fn_ty = func.ty(self.mir, self.tcx);\n             let mut callee_def_id = None;\n-            let (mut is_shuffle, mut is_const_fn) = (false, false);\n+            let mut is_shuffle = false;\n+            let mut is_const_fn = false;\n+            let mut is_promotable_const_fn = false;\n             if let ty::FnDef(def_id, _) = fn_ty.sty {\n                 callee_def_id = Some(def_id);\n                 match self.tcx.fn_sig(def_id).abi() {\n@@ -873,6 +875,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                             // functions without #[rustc_promotable]\n                             if self.tcx.is_promotable_const_fn(def_id) {\n                                 is_const_fn = true;\n+                                is_promotable_const_fn = true;\n+                            } else if self.tcx.is_const_fn(def_id) {\n+                                is_const_fn = true;\n                             }\n                         } else {\n                             // stable const fn or unstable const fns with their feature gate\n@@ -974,7 +979,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     if !constant_arguments.contains(&i) {\n                         return\n                     }\n-                    if this.qualif.is_empty() {\n+                    // if the argument requires a constant, we care about constness, not\n+                    // promotability\n+                    if (this.qualif - Qualif::NOT_PROMOTABLE).is_empty() {\n                         this.promotion_candidates.push(candidate);\n                     } else {\n                         this.tcx.sess.span_err(this.span,\n@@ -985,7 +992,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             // non-const fn calls.\n-            if !is_const_fn {\n+            if is_const_fn {\n+                if !is_promotable_const_fn && self.mode == Mode::Fn {\n+                    self.qualif = Qualif::NOT_PROMOTABLE;\n+                }\n+            } else {\n                 self.qualif = Qualif::NOT_CONST;\n                 if self.mode != Mode::Fn {\n                     self.tcx.sess.delay_span_bug(\n@@ -1003,7 +1014,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     // Be conservative about the returned value of a const fn.\n                     let tcx = self.tcx;\n                     let ty = dest.ty(self.mir, tcx).to_ty(tcx);\n-                    self.qualif = Qualif::empty();\n                     self.add_type(ty);\n                 }\n                 self.assign(dest, location);"}, {"sha": "0e75ea8e66b3cd409024c154cae295f041a60bae", "filename": "src/test/ui/consts/const-eval/double_promotion.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8b097c4ce92869b012c36ba0c7c0a2a096a17849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b097c4ce92869b012c36ba0c7c0a2a096a17849/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs?ref=8b097c4ce92869b012c36ba0c7c0a2a096a17849", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+#![feature(const_fn, rustc_attrs)]\n+\n+#[rustc_args_required_const(0)]\n+pub const fn a(value: u8) -> u8 {\n+    value\n+}\n+\n+#[rustc_args_required_const(0)]\n+pub fn b(_: u8) {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let _ = b(a(0));\n+}"}]}