{"sha": "3cb31b6699558737b1a4650537f0facdc8cb7852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjMxYjY2OTk1NTg3MzdiMWE0NjUwNTM3ZjBmYWNkYzhjYjc4NTI=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-07-02T20:49:58Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-07-04T20:21:07Z"}, "message": "Fix #71977", "tree": {"sha": "42601659b87777e40b1fe0937f9423b8106a217e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42601659b87777e40b1fe0937f9423b8106a217e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb31b6699558737b1a4650537f0facdc8cb7852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb31b6699558737b1a4650537f0facdc8cb7852", "html_url": "https://github.com/rust-lang/rust/commit/3cb31b6699558737b1a4650537f0facdc8cb7852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb31b6699558737b1a4650537f0facdc8cb7852/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4030b7394845602eebb42f40c0e847be803af58f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4030b7394845602eebb42f40c0e847be803af58f", "html_url": "https://github.com/rust-lang/rust/commit/4030b7394845602eebb42f40c0e847be803af58f"}], "stats": {"total": 99, "additions": 82, "deletions": 17}, "files": [{"sha": "372cb783f503f7c7b16c5cd7cb2b61450da86f50", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=3cb31b6699558737b1a4650537f0facdc8cb7852", "patch": "@@ -276,6 +276,7 @@ use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n use rustc_data_structures::captures::Captures;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_index::vec::Idx;\n \n use super::{compare_const_vals, PatternFoldable, PatternFolder};\n@@ -1852,16 +1853,35 @@ crate fn is_useful<'p, 'tcx>(\n         // We need to push the already-seen patterns into the matrix in order to detect redundant\n         // branches like `Some(_) | Some(0)`. We also keep track of the unreachable subpatterns.\n         let mut matrix = matrix.clone();\n-        let mut unreachable_pats = Vec::new();\n+        // `Vec` of all the unreachable branches of the current or-pattern.\n+        let mut unreachable_branches = Vec::new();\n+        // Subpatterns that are unreachable from all branches. E.g. in the following case, the last\n+        // `true` is unreachable only from one branch, so it is overall reachable.\n+        // ```\n+        // match (true, true) {\n+        //     (true, true) => {}\n+        //     (false | true, false | true) => {}\n+        // }\n+        // ```\n+        let mut unreachable_subpats = FxHashSet::default();\n+        // Whether any branch at all is useful.\n         let mut any_is_useful = false;\n+\n         for v in vs {\n             let res = is_useful(cx, &matrix, &v, witness_preference, hir_id, is_under_guard, false);\n             match res {\n                 Useful(pats) => {\n-                    any_is_useful = true;\n-                    unreachable_pats.extend(pats);\n+                    if !any_is_useful {\n+                        any_is_useful = true;\n+                        // Initialize with the first set of unreachable subpatterns encountered.\n+                        unreachable_subpats = pats.into_iter().collect();\n+                    } else {\n+                        // Keep the patterns unreachable from both this and previous branches.\n+                        unreachable_subpats =\n+                            pats.into_iter().filter(|p| unreachable_subpats.contains(p)).collect();\n+                    }\n                 }\n-                NotUseful => unreachable_pats.push(v.head().span),\n+                NotUseful => unreachable_branches.push(v.head().span),\n                 UsefulWithWitness(_) => {\n                     bug!(\"Encountered or-pat in `v` during exhaustiveness checking\")\n                 }\n@@ -1871,7 +1891,13 @@ crate fn is_useful<'p, 'tcx>(\n                 matrix.push(v);\n             }\n         }\n-        return if any_is_useful { Useful(unreachable_pats) } else { NotUseful };\n+        if any_is_useful {\n+            // Collect all the unreachable patterns.\n+            unreachable_branches.extend(unreachable_subpats);\n+            return Useful(unreachable_branches);\n+        } else {\n+            return NotUseful;\n+        }\n     }\n \n     // FIXME(Nadrieril): Hack to work around type normalization issues (see #72476)."}, {"sha": "a1147cb5cfc9c4d567b85c419e351b0db7cdb3b9", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.rs?ref=3cb31b6699558737b1a4650537f0facdc8cb7852", "patch": "@@ -29,6 +29,9 @@ fn main() {\n         (1, 4 | 5) => {} //~ ERROR unreachable pattern\n         _ => {}\n     }\n+    match (true, true) {\n+        (false | true, false | true) => (),\n+    }\n     match (Some(0u8),) {\n         (None | Some(1 | 2),) => {}\n         (Some(1),) => {} //~ ERROR unreachable pattern\n@@ -67,4 +70,29 @@ fn main() {\n              | 1) => {}\n         _ => {}\n     }\n+\n+    // A subpattern that is only unreachable in one branch is overall reachable.\n+    match (true, true) {\n+        (true, true) => {}\n+        (false | true, false | true) => {}\n+    }\n+    match (true, true) {\n+        (true, false) => {}\n+        (false, true) => {}\n+        (false | true, false | true) => {}\n+    }\n+    // A subpattern that is unreachable in all branches is overall unreachable.\n+    match (true, true) {\n+        (false, true) => {}\n+        (true, true) => {}\n+        (false | true, false\n+            | true) => {} //~ ERROR unreachable\n+    }\n+    match (true, true) {\n+        (true, false) => {}\n+        (true, true) => {}\n+        (false\n+            | true, //~ ERROR unreachable\n+            false | true) => {}\n+    }\n }"}, {"sha": "d92b545a8694f8332488d1ab9c46822474f423aa", "filename": "src/test/ui/or-patterns/exhaustiveness-unreachable-pattern.stderr", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fexhaustiveness-unreachable-pattern.stderr?ref=3cb31b6699558737b1a4650537f0facdc8cb7852", "patch": "@@ -53,52 +53,64 @@ LL |         (1, 4 | 5) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:34:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:37:9\n    |\n LL |         (Some(1),) => {}\n    |         ^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:35:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:38:9\n    |\n LL |         (None,) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:40:9\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:43:9\n    |\n LL |         ((1..=4,),) => {}\n    |         ^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:45:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:48:14\n    |\n LL |         (1 | 1,) => {}\n    |              ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:52:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:53:15\n    |\n-LL |             | 0] => {}\n+LL |             | 0\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:50:15\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:55:15\n    |\n-LL |             | 0\n+LL |             | 0] => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:60:10\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:63:10\n    |\n LL |         [1\n    |          ^\n \n error: unreachable pattern\n-  --> $DIR/exhaustiveness-unreachable-pattern.rs:66:14\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:69:14\n    |\n LL |         Some(0\n    |              ^\n \n-error: aborting due to 16 previous errors\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:89:15\n+   |\n+LL |             | true) => {}\n+   |               ^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/exhaustiveness-unreachable-pattern.rs:95:15\n+   |\n+LL |             | true,\n+   |               ^^^^\n+\n+error: aborting due to 18 previous errors\n "}, {"sha": "067e617373a630c6a494418bdb185afdcd036bde", "filename": "src/test/ui/or-patterns/search-via-bindings.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb31b6699558737b1a4650537f0facdc8cb7852/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs?ref=3cb31b6699558737b1a4650537f0facdc8cb7852", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![feature(or_patterns)]\n-#![allow(unreachable_patterns)] // FIXME(or-patterns) this shouldn't trigger\n \n fn search(target: (bool, bool, bool)) -> u32 {\n     let x = ((false, true), (false, true), (false, true));"}]}