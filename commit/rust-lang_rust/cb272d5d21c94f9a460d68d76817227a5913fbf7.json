{"sha": "cb272d5d21c94f9a460d68d76817227a5913fbf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjcyZDVkMjFjOTRmOWE0NjBkNjhkNzY4MTcyMjdhNTkxM2ZiZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T07:20:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-26T07:20:52Z"}, "message": "Auto merge of #72093 - jonas-schievink:unmut, r=oli-obk\n\nAvoid `Operand::Copy` with `&mut T`\n\nThis is generally unsound to do, as the copied type is assumed to implement\n`Copy`.\n\nCloses https://github.com/rust-lang/rust/issues/46420", "tree": {"sha": "233384ff8665bf54134f9a6f43739cf0ebe2082e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/233384ff8665bf54134f9a6f43739cf0ebe2082e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb272d5d21c94f9a460d68d76817227a5913fbf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb272d5d21c94f9a460d68d76817227a5913fbf7", "html_url": "https://github.com/rust-lang/rust/commit/cb272d5d21c94f9a460d68d76817227a5913fbf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb272d5d21c94f9a460d68d76817227a5913fbf7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eedd138ee22147111a885d6948fb050d9849bf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eedd138ee22147111a885d6948fb050d9849bf4", "html_url": "https://github.com/rust-lang/rust/commit/9eedd138ee22147111a885d6948fb050d9849bf4"}, {"sha": "fe1753af840527bb2beba3ee603971312299b2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1753af840527bb2beba3ee603971312299b2e7", "html_url": "https://github.com/rust-lang/rust/commit/fe1753af840527bb2beba3ee603971312299b2e7"}], "stats": {"total": 127, "additions": 116, "deletions": 11}, "files": [{"sha": "d573e11fc4b249ad00eb771d00d963f109ecce7d", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -511,6 +511,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(ui_testing, true);\n     untracked!(unpretty, Some(\"expanded\".to_string()));\n     untracked!(unstable_options, true);\n+    untracked!(validate_mir, true);\n     untracked!(verbose, true);\n \n     macro_rules! tracked {"}, {"sha": "b439e919050c06852255c1077978772a3d8ee0f9", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -700,7 +700,7 @@ fn build_call_shim<'tcx>(\n \n     let rcvr = rcvr_adjustment.map(|rcvr_adjustment| match rcvr_adjustment {\n         Adjustment::Identity => Operand::Move(rcvr_place()),\n-        Adjustment::Deref => Operand::Copy(tcx.mk_place_deref(rcvr_place())),\n+        Adjustment::Deref => Operand::Move(tcx.mk_place_deref(rcvr_place())), // Can't copy `&mut`\n         Adjustment::DerefMove => Operand::Move(tcx.mk_place_deref(rcvr_place())),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;"}, {"sha": "a016892d982d1f07a6b45ddafb5728d415064d98", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -1,11 +1,11 @@\n //! Performs various peephole optimizations.\n \n use crate::transform::{MirPass, MirSource};\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::visit::{MutVisitor, Visitor};\n use rustc_middle::mir::{\n-    Body, Constant, Local, Location, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n+    Body, Constant, Local, Location, Mutability, Operand, Place, PlaceRef, ProjectionElem, Rvalue,\n };\n use rustc_middle::ty::{self, TyCtxt};\n use std::mem;\n@@ -39,7 +39,7 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n-        if self.optimizations.and_stars.remove(&location) {\n+        if let Some(mtbl) = self.optimizations.and_stars.remove(&location) {\n             debug!(\"replacing `&*`: {:?}\", rvalue);\n             let new_place = match rvalue {\n                 Rvalue::Ref(_, _, place) => {\n@@ -57,7 +57,10 @@ impl<'tcx> MutVisitor<'tcx> for InstCombineVisitor<'tcx> {\n                 }\n                 _ => bug!(\"Detected `&*` but didn't find `&*`!\"),\n             };\n-            *rvalue = Rvalue::Use(Operand::Copy(new_place))\n+            *rvalue = Rvalue::Use(match mtbl {\n+                Mutability::Mut => Operand::Move(new_place),\n+                Mutability::Not => Operand::Copy(new_place),\n+            });\n         }\n \n         if let Some(constant) = self.optimizations.arrays_lengths.remove(&location) {\n@@ -88,8 +91,10 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n             if let PlaceRef { local, projection: &[ref proj_base @ .., ProjectionElem::Deref] } =\n                 place.as_ref()\n             {\n-                if Place::ty_from(local, proj_base, self.body, self.tcx).ty.is_region_ptr() {\n-                    self.optimizations.and_stars.insert(location);\n+                // The dereferenced place must have type `&_`.\n+                let ty = Place::ty_from(local, proj_base, self.body, self.tcx).ty;\n+                if let ty::Ref(_, _, mtbl) = ty.kind {\n+                    self.optimizations.and_stars.insert(location, mtbl);\n                 }\n             }\n         }\n@@ -109,6 +114,6 @@ impl Visitor<'tcx> for OptimizationFinder<'b, 'tcx> {\n \n #[derive(Default)]\n struct OptimizationList<'tcx> {\n-    and_stars: FxHashSet<Location>,\n+    and_stars: FxHashMap<Location, Mutability>,\n     arrays_lengths: FxHashMap<Location, Constant<'tcx>>,\n }"}, {"sha": "af9436d4041805df89c204814c2877901facb809", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -39,6 +39,7 @@ pub mod simplify_branches;\n pub mod simplify_try;\n pub mod uninhabited_enum_branching;\n pub mod unreachable_prop;\n+pub mod validate;\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n     self::check_unsafety::provide(providers);\n@@ -147,12 +148,18 @@ pub fn run_passes(\n     passes: &[&[&dyn MirPass<'tcx>]],\n ) {\n     let phase_index = mir_phase.phase_index();\n+    let source = MirSource { instance, promoted };\n+    let validate = tcx.sess.opts.debugging_opts.validate_mir;\n \n     if body.phase >= mir_phase {\n         return;\n     }\n \n-    let source = MirSource { instance, promoted };\n+    if validate {\n+        validate::Validator { when: format!(\"input to phase {:?}\", mir_phase) }\n+            .run_pass(tcx, source, body);\n+    }\n+\n     let mut index = 0;\n     let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n         let run_hooks = |body: &_, index, is_after| {\n@@ -169,6 +176,11 @@ pub fn run_passes(\n         pass.run_pass(tcx, source, body);\n         run_hooks(body, index, true);\n \n+        if validate {\n+            validate::Validator { when: format!(\"after {} in phase {:?}\", pass.name(), mir_phase) }\n+                .run_pass(tcx, source, body);\n+        }\n+\n         index += 1;\n     };\n \n@@ -179,6 +191,11 @@ pub fn run_passes(\n     }\n \n     body.phase = mir_phase;\n+\n+    if mir_phase == MirPhase::Optimized {\n+        validate::Validator { when: format!(\"end of phase {:?}\", mir_phase) }\n+            .run_pass(tcx, source, body);\n+    }\n }\n \n fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {"}, {"sha": "a25edd131baa19e2b5d36b4584d653e53405ffaa", "filename": "src/librustc_mir/transform/validate.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -0,0 +1,80 @@\n+//! Validates the MIR to ensure that invariants are upheld.\n+\n+use super::{MirPass, MirSource};\n+use rustc_middle::mir::visit::Visitor;\n+use rustc_middle::{\n+    mir::{Body, Location, Operand, Rvalue, Statement, StatementKind},\n+    ty::{ParamEnv, TyCtxt},\n+};\n+use rustc_span::{def_id::DefId, Span, DUMMY_SP};\n+\n+pub struct Validator {\n+    /// Describes at which point in the pipeline this validation is happening.\n+    pub when: String,\n+}\n+\n+impl<'tcx> MirPass<'tcx> for Validator {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut Body<'tcx>) {\n+        let def_id = source.def_id();\n+        let param_env = tcx.param_env(def_id);\n+        TypeChecker { when: &self.when, def_id, body, tcx, param_env }.visit_body(body);\n+    }\n+}\n+\n+struct TypeChecker<'a, 'tcx> {\n+    when: &'a str,\n+    def_id: DefId,\n+    body: &'a Body<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    param_env: ParamEnv<'tcx>,\n+}\n+\n+impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n+    fn fail(&self, span: Span, msg: impl AsRef<str>) {\n+        // We use `delay_span_bug` as we might see broken MIR when other errors have already\n+        // occurred.\n+        self.tcx.sess.diagnostic().delay_span_bug(\n+            span,\n+            &format!(\"broken MIR in {:?} ({}): {}\", self.def_id, self.when, msg.as_ref()),\n+        );\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n+    fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n+        // `Operand::Copy` is only supposed to be used with `Copy` types.\n+        if let Operand::Copy(place) = operand {\n+            let ty = place.ty(&self.body.local_decls, self.tcx).ty;\n+\n+            if !ty.is_copy_modulo_regions(self.tcx, self.param_env, DUMMY_SP) {\n+                self.fail(\n+                    DUMMY_SP,\n+                    format!(\"`Operand::Copy` with non-`Copy` type {} at {:?}\", ty, location),\n+                );\n+            }\n+        }\n+\n+        self.super_operand(operand, location);\n+    }\n+\n+    fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+        // The sides of an assignment must not alias. Currently this just checks whether the places\n+        // are identical.\n+        if let StatementKind::Assign(box (dest, rvalue)) = &statement.kind {\n+            match rvalue {\n+                Rvalue::Use(Operand::Copy(src) | Operand::Move(src)) => {\n+                    if dest == src {\n+                        self.fail(\n+                            DUMMY_SP,\n+                            format!(\n+                                \"encountered `Assign` statement with overlapping memory at {:?}\",\n+                                location\n+                            ),\n+                        );\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "95f9ff00fb8d46547419f25a319f31159c28f6cd", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -1045,6 +1045,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"adds unstable command line options to rustc interface (default: no)\"),\n     use_ctors_section: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use legacy .ctors section for initializers rather than .init_array\"),\n+    validate_mir: bool = (false, parse_bool, [UNTRACKED],\n+        \"validate MIR after each transformation\"),\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n         \"in general, enable more debug printouts (default: no)\"),\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],"}, {"sha": "8751469d265a204cfed69df907b1f0fdc0ef755a", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.a.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.a.Inline.after.mir?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -15,7 +15,7 @@ fn a(_1: &mut [T]) -> &mut [T] {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-        _3 = _4;                         // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n+        _3 = move _4;                    // scope 1 at $SRC_DIR/libcore/convert/mod.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:14: 3:15\n         _0 = &mut (*_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15"}, {"sha": "743da27a049f933dc4ceb65db039acbb82b1ca67", "filename": "src/test/mir-opt/inline/issue-58867-inline-as-ref-as-mut/rustc.b.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cb272d5d21c94f9a460d68d76817227a5913fbf7/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue-58867-inline-as-ref-as-mut%2Frustc.b.Inline.after.mir?ref=cb272d5d21c94f9a460d68d76817227a5913fbf7", "patch": "@@ -18,7 +18,7 @@ fn b(_1: &mut std::boxed::Box<T>) -> &mut T {\n         _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n         StorageLive(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         _5 = &mut (*(*_4));              // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n-        _3 = _5;                         // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n+        _3 = move _5;                    // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         StorageDead(_5);                 // scope 1 at $SRC_DIR/liballoc/boxed.rs:LL:COL\n         _2 = &mut (*_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageDead(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:14: 8:15"}]}