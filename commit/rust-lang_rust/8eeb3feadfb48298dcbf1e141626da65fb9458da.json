{"sha": "8eeb3feadfb48298dcbf1e141626da65fb9458da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZWIzZmVhZGZiNDgyOThkY2JmMWUxNDE2MjZkYTY1ZmI5NDU4ZGE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-28T06:41:10Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-28T06:41:10Z"}, "message": "Merge branch 'master' into issue2894", "tree": {"sha": "863c6b8c7f58455223d7fa827991df3e53f55ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/863c6b8c7f58455223d7fa827991df3e53f55ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eeb3feadfb48298dcbf1e141626da65fb9458da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eeb3feadfb48298dcbf1e141626da65fb9458da", "html_url": "https://github.com/rust-lang/rust/commit/8eeb3feadfb48298dcbf1e141626da65fb9458da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eeb3feadfb48298dcbf1e141626da65fb9458da/comments", "author": null, "committer": null, "parents": [{"sha": "137f944315f44aace073549d8e61d800350bf16a", "url": "https://api.github.com/repos/rust-lang/rust/commits/137f944315f44aace073549d8e61d800350bf16a", "html_url": "https://github.com/rust-lang/rust/commit/137f944315f44aace073549d8e61d800350bf16a"}, {"sha": "b0dabce47803c18b935ec5390de69e04ad5304c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0dabce47803c18b935ec5390de69e04ad5304c2", "html_url": "https://github.com/rust-lang/rust/commit/b0dabce47803c18b935ec5390de69e04ad5304c2"}], "stats": {"total": 226, "additions": 117, "deletions": 109}, "files": [{"sha": "48585df06031c48d04487839b627d1a07c845f33", "filename": "CHANGELOG.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -507,7 +507,7 @@ All notable changes to this project will be documented in this file.\n ## 0.0.74 \u2014 2016-06-07\n * Fix bug with `cargo-clippy` JSON parsing\n * Add the `CLIPPY_DISABLE_DOCS_LINKS` environment variable to deactivate the\n-  \u201cfor further information visit *wiki-link*\u201d message.\n+  \u201cfor further information visit *lint-link*\u201d message.\n \n ## 0.0.73 \u2014 2016-06-05\n * Fix false positives in [`useless_let_if_seq`]\n@@ -612,7 +612,7 @@ All notable changes to this project will be documented in this file.\n [`AsRef`]: https://doc.rust-lang.org/std/convert/trait.AsRef.html\n [configuration file]: ./rust-clippy#configuration\n \n-<!-- begin autogenerated links to wiki -->\n+<!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n [`almost_swapped`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#almost_swapped\n [`approx_constant`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#approx_constant\n@@ -894,4 +894,4 @@ All notable changes to this project will be documented in this file.\n [`zero_prefixed_literal`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#zero_ptr\n [`zero_width_space`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#zero_width_space\n-<!-- end autogenerated links to wiki -->\n+<!-- end autogenerated links to lint list -->"}, {"sha": "0e9532276f3b6417b74779bd07a0aea05b677d4c", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -15,7 +15,11 @@ pub struct EtaPass;\n /// **Why is this bad?** Needlessly creating a closure adds code for no benefit\n /// and gives the optimizer more work.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** If creating the closure inside the closure has a side-\n+/// effect then moving the closure creation out will change when that side-\n+/// effect runs.\n+/// See https://github.com/rust-lang-nursery/rust-clippy/issues/1439 for more\n+/// details.\n ///\n /// **Example:**\n /// ```rust"}, {"sha": "2c673fdfe3f70b7a564bbbc1b07340b0999aed9e", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -65,7 +65,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n }\n \n impl ExcessivePrecision {\n-    // None if nothing to lint, Some(suggestion) if lint neccessary\n+    // None if nothing to lint, Some(suggestion) if lint necessary\n     fn check(&self, sym: Symbol, fty: FloatTy) -> Option<String> {\n         let max = max_digits(fty);\n         let sym_str = sym.as_str();"}, {"sha": "85a9c13ff35c2aaca1411ede160739ee280ce0ff", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -2217,7 +2217,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         match ex.node {\n             ExprKind::Path(_) => self.insert_def_id(ex),\n-            // If there is any fuction/method call\u2026 we just stop analysis\n+            // If there is any function/method call\u2026 we just stop analysis\n             ExprKind::Call(..) | ExprKind::MethodCall(..) => self.skip = true,\n \n             _ => walk_expr(self, ex),"}, {"sha": "6bdcd004134eb97a37c8458abeb73a2e0bf68d21", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -383,7 +383,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr, arms: &[Arm]) {\n                                            arm.pats[0].span,\n                                            \"Err(_) will match all errors, maybe not a good idea\",\n                                            arm.pats[0].span,\n-                                           \"to remove this warning, match each error seperately \\\n+                                           \"to remove this warning, match each error separately \\\n                                             or use unreachable macro\");\n                     }\n                 }"}, {"sha": "f53e2cb0cce803d9ad521de9d4ded66248301d59", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -6,21 +6,21 @@ use if_chain::if_chain;\n use crate::utils::{self, paths, span_lint};\n \n /// **What it does:**\n-/// Checks for the usage of negated comparision operators on types which only implement\n+/// Checks for the usage of negated comparison operators on types which only implement\n /// `PartialOrd` (e.g. `f64`).\n ///\n /// **Why is this bad?**\n /// These operators make it easy to forget that the underlying types actually allow not only three\n-/// potential Orderings (Less, Equal, Greater) but also a forth one (Uncomparable). Escpeccially if\n-/// the operator based comparision result is negated it is easy to miss that fact.\n+/// potential Orderings (Less, Equal, Greater) but also a fourth one (Uncomparable). This is\n+/// especially easy to miss if the operator based comparison result is negated.\n ///\n /// **Known problems:** None.\n ///\n /// **Example:**\n ///\n /// ```rust\n-/// use core::cmp::Ordering;\n-///\n+/// use std::cmp::Ordering;\n+/// \n /// // Bad\n /// let a = 1.0;\n /// let b = std::f64::NAN;\n@@ -39,7 +39,7 @@ use crate::utils::{self, paths, span_lint};\n declare_clippy_lint! {\n     pub NEG_CMP_OP_ON_PARTIAL_ORD,\n     complexity,\n-    \"The use of negated comparision operators on partially orded types may produce confusing code.\"\n+    \"The use of negated comparison operators on partially ordered types may produce confusing code.\"\n }\n \n pub struct NoNegCompOpForPartialOrd;\n@@ -85,10 +85,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NoNegCompOpForPartialOrd {\n                         cx,\n                         NEG_CMP_OP_ON_PARTIAL_ORD,\n                         expr.span,\n-                        \"The use of negated comparision operators on partially orded \\\n+                        \"The use of negated comparison operators on partially ordered \\\n                         types produces code that is hard to read and refactor. Please \\\n-                        consider to use the `partial_cmp` instead, to make it clear \\\n-                        that the two values could be incomparable.\"\n+                        consider using the `partial_cmp` method instead, to make it \\\n+                        clear that the two values could be incomparable.\"\n                     )\n                 }\n             }"}, {"sha": "7b3f6f20fc74919ec5024a9d32076c870e9d3251", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -700,7 +700,7 @@ declare_clippy_lint! {\n \n /// **What it does:** Checks for casts of a function pointer to a numeric type not enough to store address.\n ///\n-/// **Why is this bad?** Casting a function pointer to not eligable type could truncate the address value.\n+/// **Why is this bad?** Casting a function pointer to not eligible type could truncate the address value.\n ///\n /// **Known problems:** None.\n ///"}, {"sha": "11187559bf6ad58ca76d6fe00842bc0d232b3211", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -334,7 +334,7 @@ pub fn make_assoc(op: AssocOp, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static>\n     Sugg::BinOp(op, sugg.into())\n }\n \n-/// Convinience wrapper arround `make_assoc` and `AssocOp::from_ast_binop`.\n+/// Convenience wrapper around `make_assoc` and `AssocOp::from_ast_binop`.\n pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg<'_>, rhs: &Sugg<'_>) -> Sugg<'static> {\n     make_assoc(AssocOp::from_ast_binop(op), lhs, rhs)\n }"}, {"sha": "0b52981bfa584ab2a28d8233018154808062f36a", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -290,22 +290,24 @@ fn check_tts(cx: &EarlyContext<'a>, tts: &ThinTokenStream, is_write: bool) -> Op\n                 idx += 1;\n             },\n             ExprKind::Assign(lhs, rhs) => {\n-                if let ExprKind::Path(_, p) = &lhs.node {\n-                    let mut all_simple = true;\n-                    let mut seen = false;\n-                    for arg in &args {\n-                        match arg.position {\n-                            | ArgumentImplicitlyIs(_)\n-                            | ArgumentIs(_)\n-                            => {},\n-                            ArgumentNamed(name) => if *p == name {\n-                                seen = true;\n-                                all_simple &= arg.format == SIMPLE;\n-                            },\n+                if let ExprKind::Lit(_) = rhs.node {\n+                    if let ExprKind::Path(_, p) = &lhs.node {\n+                        let mut all_simple = true;\n+                        let mut seen = false;\n+                        for arg in &args {\n+                            match arg.position {\n+                                | ArgumentImplicitlyIs(_)\n+                                | ArgumentIs(_)\n+                                => {},\n+                                ArgumentNamed(name) => if *p == name {\n+                                    seen = true;\n+                                    all_simple &= arg.format == SIMPLE;\n+                                },\n+                            }\n+                        }\n+                        if all_simple && seen {\n+                            span_lint(cx, lint, rhs.span, \"literal with an empty format string\");\n                         }\n-                    }\n-                    if all_simple && seen {\n-                        span_lint(cx, lint, rhs.span, \"literal with an empty format string\");\n                     }\n                 }\n             },"}, {"sha": "fc16c12af28ac62beb0485b3e790df07559e4d43", "filename": "tests/ui/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -116,7 +116,7 @@ fn warn_for_built_in_methods_with_negation() {\n }\n \n #[allow(neg_cmp_op_on_partial_ord)]\n-fn dont_warn_for_negated_partial_ord_comparision() {\n+fn dont_warn_for_negated_partial_ord_comparison() {\n     let a: f64 = unimplemented!();\n     let b: f64 = unimplemented!();\n     let _ = !(a < b);"}, {"sha": "2b5118fa814e48aa162be706bb9bf2b4f25bbdb4", "filename": "tests/ui/checked_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fchecked_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fchecked_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -31,11 +31,11 @@ fn main() {\n     if x.is_ok() {\n         x = Err(());\n         x.unwrap(); // not unnecessary because of mutation of x\n-        // it will always panic but the lint is not smart enoguh to see this (it only checks if conditions).\n+        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n     } else {\n         x = Ok(());\n         x.unwrap_err(); // not unnecessary because of mutation of x\n-        // it will always panic but the lint is not smart enoguh to see this (it only checks if conditions).\n+        // it will always panic but the lint is not smart enough to see this (it only checks if conditions).\n     }\n }\n "}, {"sha": "bc0c3172bf0652e9d6177f7eb7061c5b38a82004", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -389,7 +389,7 @@ fn main() {\n     let m: Rc<HashMap<u64, u64>> = Rc::new(HashMap::new());\n     for (_, v) in &*m {\n         let _v = v;\n-        // Here the `*` is not actually necesarry, but the test tests that we don't\n+        // Here the `*` is not actually necessary, but the test tests that we don't\n         // suggest\n         // `in *m.values()` as we used to\n     }"}, {"sha": "9e801911602c79b50d924742646b651dd307ee28", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -9,7 +9,7 @@ fn foob() -> bool { unimplemented!() }\n \n #[allow(many_single_char_names)]\n fn immutable_condition() {\n-    // Should warn when all vars mentionned are immutable\n+    // Should warn when all vars mentioned are immutable\n     let y = 0;\n     while y < 10 {\n         println!(\"KO - y is immutable\");\n@@ -69,11 +69,11 @@ fn unused_var() {\n \n     while i < 3 {\n         j = 3;\n-        println!(\"KO - i not mentionned\");\n+        println!(\"KO - i not mentioned\");\n     }\n \n     while i < 3 && j > 0 {\n-        println!(\"KO - i and j not mentionned\");\n+        println!(\"KO - i and j not mentioned\");\n     }\n \n     while i < 3 {\n@@ -84,7 +84,7 @@ fn unused_var() {\n \n     while i < 3 && j > 0 {\n         i = 5;\n-        println!(\"OK - i in cond and mentionned\");\n+        println!(\"OK - i in cond and mentioned\");\n     }\n }\n "}, {"sha": "5bfc3271c4506c3f64106946de46402b55eeb8cd", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -164,7 +164,7 @@ error: Err(_) will match all errors, maybe not a good idea\n     |         ^^^^^^\n     |\n     = note: `-D match-wild-err-arm` implied by `-D warnings`\n-    = note: to remove this warning, match each error seperately or use unreachable macro\n+    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:131:18\n@@ -191,7 +191,7 @@ error: Err(_) will match all errors, maybe not a good idea\n 138 |         Err(_) => {panic!()}\n     |         ^^^^^^\n     |\n-    = note: to remove this warning, match each error seperately or use unreachable macro\n+    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:137:18\n@@ -217,7 +217,7 @@ error: Err(_) will match all errors, maybe not a good idea\n 144 |         Err(_) => {panic!();}\n     |         ^^^^^^\n     |\n-    = note: to remove this warning, match each error seperately or use unreachable macro\n+    = note: to remove this warning, match each error separately or use unreachable macro\n \n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:143:18"}, {"sha": "e739908bc282f2039fd962e9720dc65771e12d02", "filename": "tests/ui/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -59,9 +59,9 @@ fn main() {\n \n     // Issue 2856: False positive on assert!()\n     //\n-    // The macro always negates the result of the given comparision in its\n+    // The macro always negates the result of the given comparison in its\n     // internal check which automatically triggered the lint. As it's an\n-    // external macro there was no chance to do anything about it which lead\n+    // external macro there was no chance to do anything about it which led\n     // to a whitelisting of all external macros.\n     assert!(a_value < another_value);\n }"}, {"sha": "ccd3056110090db4dcaefd3919e97f86e74ef608", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -1,24 +1,24 @@\n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:17:21\n    |\n 17 |     let _not_less = !(a_value < another_value);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D neg-cmp-op-on-partial-ord` implied by `-D warnings`\n \n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:20:30\n    |\n 20 |     let _not_less_or_equal = !(a_value <= another_value);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:23:24\n    |\n 23 |     let _not_greater = !(a_value > another_value);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparision operators on partially orded types produces code that is hard to read and refactor. Please consider to use the `partial_cmp` instead, to make it clear that the two values could be incomparable.\n+error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:26:33\n    |\n 26 |     let _not_greater_or_equal = !(a_value >= another_value);"}, {"sha": "620349bab33591c023cf3d0d73f45683ba9c8733", "filename": "tests/ui/print_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fprint_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fprint_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -8,6 +8,7 @@ fn main() {\n     println!(\"Hello\");\n     let world = \"world\";\n     println!(\"Hello {}\", world);\n+    println!(\"Hello {world}\", world=world);\n     println!(\"3 in hex is {:X}\", 3);\n     println!(\"2 + 1 = {:.4}\", 3);\n     println!(\"2 + 1 = {:5.4}\", 3);"}, {"sha": "cada26c614231ff3963251475d80889d7496cd12", "filename": "tests/ui/print_literal.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_literal.stderr?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -1,87 +1,87 @@\n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:23:71\n+  --> $DIR/print_literal.rs:24:71\n    |\n-23 |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+24 |     println!(\"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n    |                                                                       ^\n    |\n    = note: `-D print-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:24:24\n+  --> $DIR/print_literal.rs:25:24\n    |\n-24 |     print!(\"Hello {}\", \"world\");\n+25 |     print!(\"Hello {}\", \"world\");\n    |                        ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:25:36\n+  --> $DIR/print_literal.rs:26:36\n    |\n-25 |     println!(\"Hello {} {}\", world, \"world\");\n+26 |     println!(\"Hello {} {}\", world, \"world\");\n    |                                    ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:26:26\n+  --> $DIR/print_literal.rs:27:26\n    |\n-26 |     println!(\"Hello {}\", \"world\");\n+27 |     println!(\"Hello {}\", \"world\");\n    |                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:27:30\n+  --> $DIR/print_literal.rs:28:30\n    |\n-27 |     println!(\"10 / 4 is {}\", 2.5);\n+28 |     println!(\"10 / 4 is {}\", 2.5);\n    |                              ^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:28:28\n+  --> $DIR/print_literal.rs:29:28\n    |\n-28 |     println!(\"2 + 1 = {}\", 3);\n+29 |     println!(\"2 + 1 = {}\", 3);\n    |                            ^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:25\n+  --> $DIR/print_literal.rs:34:25\n    |\n-33 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+34 |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:33:34\n+  --> $DIR/print_literal.rs:34:34\n    |\n-33 |     println!(\"{0} {1}\", \"hello\", \"world\");\n+34 |     println!(\"{0} {1}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:34:25\n+  --> $DIR/print_literal.rs:35:25\n    |\n-34 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+35 |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:34:34\n+  --> $DIR/print_literal.rs:35:34\n    |\n-34 |     println!(\"{1} {0}\", \"hello\", \"world\");\n+35 |     println!(\"{1} {0}\", \"hello\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:33\n+  --> $DIR/print_literal.rs:38:33\n    |\n-37 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+38 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:37:46\n+  --> $DIR/print_literal.rs:38:46\n    |\n-37 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+38 |     println!(\"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                              ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:38:33\n+  --> $DIR/print_literal.rs:39:33\n    |\n-38 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+39 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/print_literal.rs:38:46\n+  --> $DIR/print_literal.rs:39:46\n    |\n-38 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+39 |     println!(\"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                              ^^^^^^^\n \n error: aborting due to 14 previous errors"}, {"sha": "48dfcd0ea3e11d9d3fa7326a16971f0fb0edfcc2", "filename": "tests/ui/write_literal.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fwrite_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fwrite_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.rs?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -11,6 +11,7 @@ fn main() {\n     writeln!(&mut v, \"Hello\");\n     let world = \"world\";\n     writeln!(&mut v, \"Hello {}\", world);\n+    writeln!(&mut v, \"Hello {world}\", world=world);\n     writeln!(&mut v, \"3 in hex is {:X}\", 3);\n     writeln!(&mut v, \"2 + 1 = {:.4}\", 3);\n     writeln!(&mut v, \"2 + 1 = {:5.4}\", 3);"}, {"sha": "d2e8ca94ed807938580479d716700932a17c14c8", "filename": "tests/ui/write_literal.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/tests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal.stderr?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -1,87 +1,87 @@\n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:26:79\n+  --> $DIR/write_literal.rs:27:79\n    |\n-26 |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n+27 |     writeln!(&mut v, \"{} of {:b} people know binary, the other half doesn't\", 1, 2);\n    |                                                                               ^\n    |\n    = note: `-D write-literal` implied by `-D warnings`\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:27:32\n+  --> $DIR/write_literal.rs:28:32\n    |\n-27 |     write!(&mut v, \"Hello {}\", \"world\");\n+28 |     write!(&mut v, \"Hello {}\", \"world\");\n    |                                ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:28:44\n+  --> $DIR/write_literal.rs:29:44\n    |\n-28 |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n+29 |     writeln!(&mut v, \"Hello {} {}\", world, \"world\");\n    |                                            ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:29:34\n+  --> $DIR/write_literal.rs:30:34\n    |\n-29 |     writeln!(&mut v, \"Hello {}\", \"world\");\n+30 |     writeln!(&mut v, \"Hello {}\", \"world\");\n    |                                  ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:30:38\n+  --> $DIR/write_literal.rs:31:38\n    |\n-30 |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n+31 |     writeln!(&mut v, \"10 / 4 is {}\", 2.5);\n    |                                      ^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:31:36\n+  --> $DIR/write_literal.rs:32:36\n    |\n-31 |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n+32 |     writeln!(&mut v, \"2 + 1 = {}\", 3);\n    |                                    ^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:36:33\n+  --> $DIR/write_literal.rs:37:33\n    |\n-36 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n+37 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:36:42\n+  --> $DIR/write_literal.rs:37:42\n    |\n-36 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n+37 |     writeln!(&mut v, \"{0} {1}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:33\n+  --> $DIR/write_literal.rs:38:33\n    |\n-37 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n+38 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                 ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:37:42\n+  --> $DIR/write_literal.rs:38:42\n    |\n-37 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n+38 |     writeln!(&mut v, \"{1} {0}\", \"hello\", \"world\");\n    |                                          ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:40:41\n+  --> $DIR/write_literal.rs:41:41\n    |\n-40 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+41 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:40:54\n+  --> $DIR/write_literal.rs:41:54\n    |\n-40 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n+41 |     writeln!(&mut v, \"{foo} {bar}\", foo=\"hello\", bar=\"world\");\n    |                                                      ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:41\n+  --> $DIR/write_literal.rs:42:41\n    |\n-41 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+42 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                         ^^^^^^^\n \n error: literal with an empty format string\n-  --> $DIR/write_literal.rs:41:54\n+  --> $DIR/write_literal.rs:42:54\n    |\n-41 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n+42 |     writeln!(&mut v, \"{bar} {foo}\", foo=\"hello\", bar=\"world\");\n    |                                                      ^^^^^^^\n \n error: aborting due to 14 previous errors"}, {"sha": "5678ebec7220c916dd2551e779c52dd5483b15dc", "filename": "util/gh-pages/versions.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/util%2Fgh-pages%2Fversions.html", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/util%2Fgh-pages%2Fversions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fgh-pages%2Fversions.html?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -14,7 +14,7 @@\n <body>\n     <div class=\"container\" ng-app=\"clippy\" ng-controller=\"docVersions\">\n         <div class=\"page-header\">\n-            <h1>Clippy lints documention</h1>\n+            <h1>Clippy lints documentation</h1>\n         </div>\n \n         <div ng-cloak>"}, {"sha": "70d49f940eebc3516b592957258f4bfd850ec300", "filename": "util/update_lints.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eeb3feadfb48298dcbf1e141626da65fb9458da/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/8eeb3feadfb48298dcbf1e141626da65fb9458da/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=8eeb3feadfb48298dcbf1e141626da65fb9458da", "patch": "@@ -192,8 +192,8 @@ def main(print_only=False, check=False):\n     # update the links in the CHANGELOG\n     changed |= replace_region(\n         'CHANGELOG.md',\n-        \"<!-- begin autogenerated links to wiki -->\",\n-        \"<!-- end autogenerated links to wiki -->\",\n+        \"<!-- begin autogenerated links to lint list -->\",\n+        \"<!-- end autogenerated links to lint list -->\",\n         lambda: [\"[`{0}`]: {1}#{0}\\n\".format(l[1], docs_link) for l in\n                  sorted(all_lints + deprecated_lints,\n                         key=lambda l: l[1])],"}]}