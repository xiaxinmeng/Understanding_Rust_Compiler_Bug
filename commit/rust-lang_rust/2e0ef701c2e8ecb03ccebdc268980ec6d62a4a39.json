{"sha": "2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "node_id": "C_kwDOAAsO6NoAKDJlMGVmNzAxYzJlOGVjYjAzY2NlYmRjMjY4OTgwZWM2ZDYyYTRhMzk", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-05T16:42:47Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-07T13:01:48Z"}, "message": "Document and rename the new wrapper type", "tree": {"sha": "548cb7f1af301e818aceb243fa82933fe9786577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/548cb7f1af301e818aceb243fa82933fe9786577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "html_url": "https://github.com/rust-lang/rust/commit/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ffd654683900a81adda24b3a86e4c30fee31214", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ffd654683900a81adda24b3a86e4c30fee31214", "html_url": "https://github.com/rust-lang/rust/commit/6ffd654683900a81adda24b3a86e4c30fee31214"}], "stats": {"total": 87, "additions": 54, "deletions": 33}, "files": [{"sha": "009b5d5340afe3c724950d881014d6e716b75c62", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "patch": "@@ -115,34 +115,41 @@ pub trait InternedHashingContext {\n     fn with_def_path_and_no_spans(&mut self, f: impl FnOnce(&mut Self));\n }\n \n+/// A helper type that you can wrap round your own type in order to automatically\n+/// cache the stable hash on creation and not recompute it whenever the stable hash\n+/// of the type is computed.\n+/// This is only done in incremental mode. You can also opt out of caching by using\n+/// StableHash::ZERO for the hash, in which case the hash gets computed each time.\n+/// This is useful if you have values that you intern but never (can?) use for stable\n+/// hashing.\n #[derive(Copy, Clone)]\n-pub struct InTy<T> {\n+pub struct WithStableHash<T> {\n     pub internee: T,\n     pub stable_hash: Fingerprint,\n }\n \n-impl<T: PartialEq> PartialEq for InTy<T> {\n+impl<T: PartialEq> PartialEq for WithStableHash<T> {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n         self.internee.eq(&other.internee)\n     }\n }\n \n-impl<T: Eq> Eq for InTy<T> {}\n+impl<T: Eq> Eq for WithStableHash<T> {}\n \n-impl<T: Ord> PartialOrd for InTy<T> {\n-    fn partial_cmp(&self, other: &InTy<T>) -> Option<Ordering> {\n+impl<T: Ord> PartialOrd for WithStableHash<T> {\n+    fn partial_cmp(&self, other: &WithStableHash<T>) -> Option<Ordering> {\n         Some(self.internee.cmp(&other.internee))\n     }\n }\n \n-impl<T: Ord> Ord for InTy<T> {\n-    fn cmp(&self, other: &InTy<T>) -> Ordering {\n+impl<T: Ord> Ord for WithStableHash<T> {\n+    fn cmp(&self, other: &WithStableHash<T>) -> Ordering {\n         self.internee.cmp(&other.internee)\n     }\n }\n \n-impl<T> Deref for InTy<T> {\n+impl<T> Deref for WithStableHash<T> {\n     type Target = T;\n \n     #[inline]\n@@ -151,14 +158,14 @@ impl<T> Deref for InTy<T> {\n     }\n }\n \n-impl<T: Hash> Hash for InTy<T> {\n+impl<T: Hash> Hash for WithStableHash<T> {\n     #[inline]\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         self.internee.hash(s)\n     }\n }\n \n-impl<T: HashStable<CTX>, CTX: InternedHashingContext> HashStable<CTX> for InTy<T> {\n+impl<T: HashStable<CTX>, CTX: InternedHashingContext> HashStable<CTX> for WithStableHash<T> {\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n         if self.stable_hash == Fingerprint::ZERO || cfg!(debug_assertions) {\n             // No cached hash available. This can only mean that incremental is disabled."}, {"sha": "7c90cbb9092b8943ab976eb086ae64211c9ea304", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "patch": "@@ -87,7 +87,7 @@ macro_rules! arena_types {\n             [] hir_id_set: rustc_hir::HirIdSet,\n \n             // Interned types\n-            [] tys: rustc_data_structures::intern::InTy<rustc_middle::ty::TyS<'tcx>>,\n+            [] tys: rustc_data_structures::intern::WithStableHash<rustc_middle::ty::TyS<'tcx>>,\n             [] predicates: rustc_middle::ty::PredicateS<'tcx>,\n             [] consts: rustc_middle::ty::ConstS<'tcx>,\n "}, {"sha": "acca24a79f4d8dda28d09440ce18f0b6d143f78a", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "patch": "@@ -26,7 +26,7 @@ use crate::ty::{\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::intern::{InTy, Interned};\n+use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n@@ -105,7 +105,7 @@ pub struct CtxtInterners<'tcx> {\n \n     // Specifically use a speedy hash algorithm for these hash sets, since\n     // they're accessed quite often.\n-    type_: InternedSet<'tcx, InTy<TyS<'tcx>>>,\n+    type_: InternedSet<'tcx, WithStableHash<TyS<'tcx>>>,\n     substs: InternedSet<'tcx, InternalSubsts<'tcx>>,\n     canonical_var_infos: InternedSet<'tcx, List<CanonicalVarInfo<'tcx>>>,\n     region: InternedSet<'tcx, RegionKind>,\n@@ -180,7 +180,9 @@ impl<'tcx> CtxtInterners<'tcx> {\n                         outer_exclusive_binder: flags.outer_exclusive_binder,\n                     };\n \n-                    InternedInSet(self.arena.alloc(InTy { internee: ty_struct, stable_hash }))\n+                    InternedInSet(\n+                        self.arena.alloc(WithStableHash { internee: ty_struct, stable_hash }),\n+                    )\n                 })\n                 .0,\n         ))\n@@ -2047,23 +2049,23 @@ impl<'tcx, T: 'tcx + ?Sized> IntoPointer for InternedInSet<'tcx, T> {\n }\n \n #[allow(rustc::usage_of_ty_tykind)]\n-impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, InTy<TyS<'tcx>>> {\n+impl<'tcx> Borrow<TyKind<'tcx>> for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {\n     fn borrow<'a>(&'a self) -> &'a TyKind<'tcx> {\n         &self.0.kind\n     }\n }\n \n-impl<'tcx> PartialEq for InternedInSet<'tcx, InTy<TyS<'tcx>>> {\n-    fn eq(&self, other: &InternedInSet<'tcx, InTy<TyS<'tcx>>>) -> bool {\n+impl<'tcx> PartialEq for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {\n+    fn eq(&self, other: &InternedInSet<'tcx, WithStableHash<TyS<'tcx>>>) -> bool {\n         // The `Borrow` trait requires that `x.borrow() == y.borrow()` equals\n         // `x == y`.\n         self.0.kind == other.0.kind\n     }\n }\n \n-impl<'tcx> Eq for InternedInSet<'tcx, InTy<TyS<'tcx>>> {}\n+impl<'tcx> Eq for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {}\n \n-impl<'tcx> Hash for InternedInSet<'tcx, InTy<TyS<'tcx>>> {\n+impl<'tcx> Hash for InternedInSet<'tcx, WithStableHash<TyS<'tcx>>> {\n     fn hash<H: Hasher>(&self, s: &mut H) {\n         // The `Borrow` trait requires that `x.borrow().hash(s) == x.hash(s)`.\n         self.0.kind.hash(s)"}, {"sha": "a4a9fef4515c04a50516288910dd25e368aff064", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "patch": "@@ -31,7 +31,7 @@ use crate::ty::util::Discr;\n use rustc_ast as ast;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_data_structures::intern::{InTy, Interned};\n+use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::tagged_ptr::CopyTaggedPtr;\n use rustc_hir as hir;\n@@ -439,15 +439,22 @@ crate struct TyS<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(TyS<'_>, 40);\n \n+// We are actually storing a stable hash cache next to the type, so let's\n+// also check the full size\n+#[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n+static_assert_size!(WithStableHash<TyS<'_>>, 56);\n+\n /// Use this rather than `TyS`, whenever possible.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable)]\n #[rustc_diagnostic_item = \"Ty\"]\n #[rustc_pass_by_value]\n-pub struct Ty<'tcx>(Interned<'tcx, InTy<TyS<'tcx>>>);\n+pub struct Ty<'tcx>(Interned<'tcx, WithStableHash<TyS<'tcx>>>);\n \n // Statics only used for internal testing.\n-pub static BOOL_TY: Ty<'static> =\n-    Ty(Interned::new_unchecked(&InTy { internee: BOOL_TYS, stable_hash: Fingerprint::ZERO }));\n+pub static BOOL_TY: Ty<'static> = Ty(Interned::new_unchecked(&WithStableHash {\n+    internee: BOOL_TYS,\n+    stable_hash: Fingerprint::ZERO,\n+}));\n const BOOL_TYS: TyS<'static> = TyS {\n     kind: ty::Bool,\n     flags: TypeFlags::empty(),"}, {"sha": "1a843a4732309da489cdfee60f4590f83d838e0b", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "patch": "@@ -3,7 +3,7 @@ use crate::ty::subst::{GenericArg, GenericArgKind, Subst};\n use crate::ty::{self, ConstInt, DefIdTree, ParamConst, ScalarInt, Term, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::intern::{InTy, Interned};\n+use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n@@ -1266,13 +1266,13 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Ref(\n                 _,\n                 Ty(Interned(\n-                    InTy {\n+                    WithStableHash {\n                         internee:\n                             ty::TyS {\n                                 kind:\n                                     ty::Array(\n                                         Ty(Interned(\n-                                            InTy {\n+                                            WithStableHash {\n                                                 internee:\n                                                     ty::TyS { kind: ty::Uint(ty::UintTy::U8), .. },\n                                                 ..\n@@ -1452,7 +1452,10 @@ pub trait PrettyPrinter<'tcx>:\n                 ConstValue::Slice { data, start, end },\n                 ty::Ref(\n                     _,\n-                    Ty(Interned(InTy { internee: ty::TyS { kind: ty::Slice(t), .. }, .. }, _)),\n+                    Ty(Interned(\n+                        WithStableHash { internee: ty::TyS { kind: ty::Slice(t), .. }, .. },\n+                        _,\n+                    )),\n                     _,\n                 ),\n             ) if *t == u8_type => {\n@@ -1467,7 +1470,7 @@ pub trait PrettyPrinter<'tcx>:\n                 ConstValue::Slice { data, start, end },\n                 ty::Ref(\n                     _,\n-                    Ty(Interned(InTy { internee: ty::TyS { kind: ty::Str, .. }, .. }, _)),\n+                    Ty(Interned(WithStableHash { internee: ty::TyS { kind: ty::Str, .. }, .. }, _)),\n                     _,\n                 ),\n             ) => {"}, {"sha": "46b938ea93baa0ab7bfa5218eac13c1b7e92ef09", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "patch": "@@ -6,7 +6,7 @@ use crate::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeVisitor}\n use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n-use rustc_data_structures::intern::{InTy, Interned};\n+use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n@@ -85,7 +85,7 @@ impl<'tcx> GenericArgKind<'tcx> {\n             GenericArgKind::Type(ty) => {\n                 // Ensure we can use the tag bits.\n                 assert_eq!(mem::align_of_val(ty.0.0) & TAG_MASK, 0);\n-                (TYPE_TAG, ty.0.0 as *const InTy<ty::TyS<'tcx>> as usize)\n+                (TYPE_TAG, ty.0.0 as *const WithStableHash<ty::TyS<'tcx>> as usize)\n             }\n             GenericArgKind::Const(ct) => {\n                 // Ensure we can use the tag bits.\n@@ -154,7 +154,7 @@ impl<'tcx> GenericArg<'tcx> {\n                     &*((ptr & !TAG_MASK) as *const ty::RegionKind),\n                 ))),\n                 TYPE_TAG => GenericArgKind::Type(Ty(Interned::new_unchecked(\n-                    &*((ptr & !TAG_MASK) as *const InTy<ty::TyS<'tcx>>),\n+                    &*((ptr & !TAG_MASK) as *const WithStableHash<ty::TyS<'tcx>>),\n                 ))),\n                 CONST_TAG => GenericArgKind::Const(ty::Const(Interned::new_unchecked(\n                     &*((ptr & !TAG_MASK) as *const ty::ConstS<'tcx>),"}, {"sha": "29a388538792cfa6cb4dd0c1d4e8d94dff099cca", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=2e0ef701c2e8ecb03ccebdc268980ec6d62a4a39", "patch": "@@ -13,7 +13,7 @@ use rustc_apfloat::Float as _;\n use rustc_ast as ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::intern::{InTy, Interned};\n+use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n@@ -427,7 +427,9 @@ impl<'tcx> TyCtxt<'tcx> {\n                         !impl_generics.region_param(ebr, self).pure_wrt_drop\n                     }\n                     GenericArgKind::Type(Ty(Interned(\n-                        InTy { internee: ty::TyS { kind: ty::Param(ref pt), .. }, .. },\n+                        WithStableHash {\n+                            internee: ty::TyS { kind: ty::Param(ref pt), .. }, ..\n+                        },\n                         _,\n                     ))) => !impl_generics.type_param(pt, self).pure_wrt_drop,\n                     GenericArgKind::Const(Const(Interned("}]}