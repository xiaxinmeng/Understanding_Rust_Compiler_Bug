{"sha": "12b124283cd51389afe59904e29f8ad7325c1dc0", "node_id": "C_kwDOAAsO6NoAKDEyYjEyNDI4M2NkNTEzODlhZmU1OTkwNGUyOWY4YWQ3MzI1YzFkYzA", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-11T05:18:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-11T05:18:53Z"}, "message": "Rollup merge of #106521 - oskgo:remove-E0280, r=jackh726\n\nremove E0280\n\nAfter looking at #61137 I tried my hand at E0280. I'm unable to find a reasonable example that emits the error. There are a couple of old examples that compile with the current compiler ([#26217](https://github.com/rust-lang/rust/issues/26217), [#42114](https://github.com/rust-lang/rust/issues/42114), [#27113](https://github.com/rust-lang/rust/issues/27113)) and there is a [bug with chalk](https://github.com/rust-lang/rust/blob/b7cdb635c4b973572307ad288466fba64533369c/src/test/ui/chalkify/bugs/async.rs) that makes it emit the error, with a couple more chalk bugs on zulip.\n\nIt seems like the error is supposed to be emitted from unfulfilled where bounds, of which two are related to borrow checking (error in where T: 'a or where 'a: 'b) and thus tend to emit errors like \"lifetime may not live long enough\" from borrow checking instead. The final case is with type equality constraints (where <T as Iterator>::Item == u32), which is unimplemented ([#20041](https://github.com/rust-lang/rust/issues/20041)). That such different problems are supposed to have the same error code also seems strange to me.\n\nSince the error seems to only be emitted when using chalk I propose to remove it and replace it with an ICE instead. A crater run might be warranted.\n\nPinging `@jackh726` due to removal of chalk test that now ICEs.", "tree": {"sha": "0149a8cd3a365141796c6de6ece59304ac967cce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0149a8cd3a365141796c6de6ece59304ac967cce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b124283cd51389afe59904e29f8ad7325c1dc0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjvka9CRBK7hj4Ov3rIwAASjIIADRjhU9xRSmPxg63IiaaPgIz\nneq4yDjZvss89W1p1+1CIFjHCZ8z9iRyWY9CCF8T/6+RE0/2dmJSl+xGNYXZFkWm\nOHu1Kyv7Culh7sykqHGpACsEQaIPyHFSgMolu77cTw6weUUI0eM6an/GWpwfdq9O\n8efU96CtRohQcI9cEOcEckimXJ49UjDVvxKM9ciVEUzKcyQ3rEvvawb2ptGzM87w\n/tj5r3wZ6Kk8Sy6n4mqHXVipp7OoUA4aEnTizgRPG/A+Z39L0L8EAzptuf70kK/4\ngO8lfp2OzuEVIxjh0NSMBwd/HzBlxhbjr6sTeOO+SLZpzDtVt0b+aSZkrMK0kDA=\n=rrFB\n-----END PGP SIGNATURE-----\n", "payload": "tree 0149a8cd3a365141796c6de6ece59304ac967cce\nparent 8d7a06aece82336d3c23c6e925e11b96aa85f63f\nparent f75eb24f4f397594604da304b3a1f7f11e1bea49\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673414333 +0900\ncommitter GitHub <noreply@github.com> 1673414333 +0900\n\nRollup merge of #106521 - oskgo:remove-E0280, r=jackh726\n\nremove E0280\n\nAfter looking at #61137 I tried my hand at E0280. I'm unable to find a reasonable example that emits the error. There are a couple of old examples that compile with the current compiler ([#26217](https://github.com/rust-lang/rust/issues/26217), [#42114](https://github.com/rust-lang/rust/issues/42114), [#27113](https://github.com/rust-lang/rust/issues/27113)) and there is a [bug with chalk](https://github.com/rust-lang/rust/blob/b7cdb635c4b973572307ad288466fba64533369c/src/test/ui/chalkify/bugs/async.rs) that makes it emit the error, with a couple more chalk bugs on zulip.\n\nIt seems like the error is supposed to be emitted from unfulfilled where bounds, of which two are related to borrow checking (error in where T: 'a or where 'a: 'b) and thus tend to emit errors like \"lifetime may not live long enough\" from borrow checking instead. The final case is with type equality constraints (where <T as Iterator>::Item == u32), which is unimplemented ([#20041](https://github.com/rust-lang/rust/issues/20041)). That such different problems are supposed to have the same error code also seems strange to me.\n\nSince the error seems to only be emitted when using chalk I propose to remove it and replace it with an ICE instead. A crater run might be warranted.\n\nPinging `@jackh726` due to removal of chalk test that now ICEs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b124283cd51389afe59904e29f8ad7325c1dc0", "html_url": "https://github.com/rust-lang/rust/commit/12b124283cd51389afe59904e29f8ad7325c1dc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b124283cd51389afe59904e29f8ad7325c1dc0/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7a06aece82336d3c23c6e925e11b96aa85f63f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7a06aece82336d3c23c6e925e11b96aa85f63f", "html_url": "https://github.com/rust-lang/rust/commit/8d7a06aece82336d3c23c6e925e11b96aa85f63f"}, {"sha": "f75eb24f4f397594604da304b3a1f7f11e1bea49", "url": "https://api.github.com/repos/rust-lang/rust/commits/f75eb24f4f397594604da304b3a1f7f11e1bea49", "html_url": "https://github.com/rust-lang/rust/commit/f75eb24f4f397594604da304b3a1f7f11e1bea49"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "a132a8146e9bd9a13de3b9b26a2b97ffc16e0a29", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12b124283cd51389afe59904e29f8ad7325c1dc0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b124283cd51389afe59904e29f8ad7325c1dc0/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=12b124283cd51389afe59904e29f8ad7325c1dc0", "patch": "@@ -574,7 +574,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0274, // on_unimplemented #2\n //  E0278, // requirement is not satisfied\n //  E0279,\n-    E0280, // requirement is not satisfied\n+//  E0280, // changed to ICE\n //  E0285, // overflow evaluation builtin bounds\n //  E0296, // replaced with a generic attribute input check\n //  E0298, // cannot compare constants"}, {"sha": "5f06c4d82828ec8e392b23e177b11ec38fa7c88b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12b124283cd51389afe59904e29f8ad7325c1dc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b124283cd51389afe59904e29f8ad7325c1dc0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=12b124283cd51389afe59904e29f8ad7325c1dc0", "patch": "@@ -1102,15 +1102,19 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n \n                     ty::PredicateKind::Clause(ty::Clause::RegionOutlives(..))\n-                    | ty::PredicateKind::Clause(ty::Clause::Projection(..))\n                     | ty::PredicateKind::Clause(ty::Clause::TypeOutlives(..)) => {\n-                        let predicate = self.resolve_vars_if_possible(obligation.predicate);\n-                        struct_span_err!(\n-                            self.tcx.sess,\n+                        span_bug!(\n                             span,\n-                            E0280,\n-                            \"the requirement `{}` is not satisfied\",\n-                            predicate\n+                            \"outlives clauses should not error outside borrowck. obligation: `{:?}`\",\n+                            obligation\n+                        )\n+                    }\n+\n+                    ty::PredicateKind::Clause(ty::Clause::Projection(..)) => {\n+                        span_bug!(\n+                            span,\n+                            \"projection clauses should be implied from elsewhere. obligation: `{:?}`\",\n+                            obligation\n                         )\n                     }\n "}, {"sha": "86ce42631b4324110414f06909e70cf62145d9a8", "filename": "src/test/ui/chalkify/bugs/async.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/12b124283cd51389afe59904e29f8ad7325c1dc0/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b124283cd51389afe59904e29f8ad7325c1dc0/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.rs?ref=12b124283cd51389afe59904e29f8ad7325c1dc0", "patch": "@@ -1,6 +1,13 @@\n // check-fail\n-// known-bug: unknown\n-// compile-flags: -Z trait-solver=chalk --edition=2021\n+// known-bug\n+// unset-rustc-env:RUST_BACKTRACE\n+// compile-flags:-Z trait-solver=chalk --edition=2021\n+// error-pattern:stack backtrace:\n+// failure-status:101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \"  .*\\n\" -> \"\"\n+// normalize-stderr-test \"DefId([^)]*)\" -> \"...\"\n \n fn main() -> () {}\n "}, {"sha": "7e2466dece43899fefba5b1f7384bd09ffeb11bb", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 34, "deletions": 42, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/12b124283cd51389afe59904e29f8ad7325c1dc0/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12b124283cd51389afe59904e29f8ad7325c1dc0/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=12b124283cd51389afe59904e29f8ad7325c1dc0", "patch": "@@ -1,48 +1,40 @@\n-error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-  --> $DIR/async.rs:7:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________-\n-LL | |     x\n-LL | | }\n-   | | ^\n-   | | |\n-   | |_`[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-   |   required by a bound introduced by this call\n-   |\n-   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n-   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n-error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output` cannot be known at compilation time\n-  --> $DIR/async.rs:7:29\n-   |\n-LL |   async fn foo(x: u32) -> u32 {\n-   |  _____________________________^\n-LL | |     x\n-LL | | }\n-   | |_^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `Sized` is not implemented for `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output`\n-note: required by a bound in `identity_future`\n-  --> $SRC_DIR/core/src/future/mod.rs:LL:COL\n-\n-error[E0277]: `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-  --> $DIR/async.rs:7:25\n-   |\n+error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n+LL |LL | |LL | | }\n+\n+\n+error[E0277]: the size for values of type `<[async fn body@$DIR/async.rs:14:29: 16:2] as Future>::Output` cannot be known at compilation time\n+LL |LL | |LL | | }\n+\n+\n+error[E0277]: `[async fn body@$DIR/async.rs:14:29: 16:2]` is not a future\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^ `[async fn body@$DIR/async.rs:7:29: 9:2]` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `[async fn body@$DIR/async.rs:7:29: 9:2]`\n-   = note: [async fn body@$DIR/async.rs:7:29: 9:2] must be a future or must implement `IntoFuture` to be awaited\n-\n-error[E0280]: the requirement `<[async fn body@$DIR/async.rs:7:29: 9:2] as Future>::Output == u32` is not satisfied\n-  --> $DIR/async.rs:7:25\n-   |\n+\n+error: internal compiler error: compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs:1114:25: projection clauses should be implied from elsewhere. obligation: `Obligation(predicate=Binder(ProjectionPredicate(AliasTy { substs: [[async fn body@$DIR/async.rs:14:29: 16:2]], def_id: ...), _use_mk_alias_ty_instead: () }, Term::Ty(u32)), []), depth=0)`\n LL | async fn foo(x: u32) -> u32 {\n-   |                         ^^^\n \n+\n+stack backtrace:\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+query stack during panic:\n+#0 [typeck] type-checking `foo`\n+#1 [thir_body] building THIR for `foo`\n+#2 [mir_built] building MIR for `foo`\n+#3 [unsafety_check_result] unsafety-checking `foo`\n+#4 [mir_const] preparing `foo` for borrow checking\n+#5 [mir_promoted] processing MIR for `foo`\n+#6 [mir_borrowck] borrow-checking `foo`\n+#7 [type_of] computing type of `foo::{opaque#0}`\n+#8 [check_mod_item_types] checking item types in top-level module\n+#9 [analysis] running analysis passes on this crate\n+end of query stack\n error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}