{"sha": "8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMGM0NzU1NjIyOTlkM2ZjYzljNzdjZTFiOWU4YjE5ZjhlNmFkZDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-15T21:52:33Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-15T21:52:43Z"}, "message": "Add an --out-dir option to rustc.", "tree": {"sha": "09a0307ed48bd13166755fd87bb487589186c4cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09a0307ed48bd13166755fd87bb487589186c4cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7", "html_url": "https://github.com/rust-lang/rust/commit/8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce24ce1b5f890f0774baa2db800aafb500d518b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce24ce1b5f890f0774baa2db800aafb500d518b7", "html_url": "https://github.com/rust-lang/rust/commit/ce24ce1b5f890f0774baa2db800aafb500d518b7"}], "stats": {"total": 104, "additions": 70, "deletions": 34}, "files": [{"sha": "97a912c4d9cb480f6a14c0a215e911e89410d427", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 70, "deletions": 34, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=8f0c475562299d3fcc9c77ce1b9e8b19f8e6add7", "patch": "@@ -132,7 +132,7 @@ fn inject_libcore_reference(sess: session::session,\n \n \n fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n-                 output: option::t<str>) {\n+                 outdir: option::t<str>, output: option::t<str>) {\n \n     let time_passes = sess.get_opts().time_passes;\n     let crate =\n@@ -192,7 +192,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n          bind kind::check_crate(ty_cx, last_uses, crate));\n     if sess.get_opts().no_trans { ret; }\n \n-    let outputs = build_output_filenames(input, output, sess);\n+    let outputs = build_output_filenames(input, outdir, output, sess);\n \n     let (llmod, link_meta) =\n         time(time_passes, \"translation\",\n@@ -300,6 +300,7 @@ options:\n     -v --version       print version info and exit\n \n     -o <filename>      write output to <filename>\n+    --out-dir <dir>    write output to compiler-chosen filename in <dir>\n     --lib              compile a library crate\n     --bin              compile an executable crate (default)\n     --static           use or produce static libraries\n@@ -515,7 +516,8 @@ fn opts() -> [getopts::opt] {\n          optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n          optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"no-trans\"),\n          optflag(\"O\"), optopt(\"opt-level\"), optmulti(\"L\"), optflag(\"S\"),\n-         optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n+         optopt(\"o\"), optopt(\"out-dir\"),\n+         optflag(\"c\"), optflag(\"g\"), optflag(\"save-temps\"),\n          optopt(\"sysroot\"), optopt(\"target\"), optflag(\"stats\"),\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n          optflag(\"no-verify\"),\n@@ -527,56 +529,89 @@ fn opts() -> [getopts::opt] {\n          optflag(\"warn-unused-imports\")];\n }\n \n-fn build_output_filenames(ifile: str, ofile: option::t<str>,\n+fn build_output_filenames(ifile: str,\n+                          odir: option::t<str>,\n+                          ofile: option::t<str>,\n                           sess: session::session)\n         -> @{out_filename: str, obj_filename:str} {\n-    let obj_filename = \"\";\n-    let saved_out_filename: str = \"\";\n+    let obj_path = \"\";\n+    let out_path: str = \"\";\n     let sopts = sess.get_opts();\n     let stop_after_codegen =\n         sopts.output_type != link::output_type_exe ||\n             sopts.static && sess.building_library();\n+\n+\n+    let obj_suffix =\n+        alt sopts.output_type {\n+          link::output_type_none. { \"none\" }\n+          link::output_type_bitcode. { \"bc\" }\n+          link::output_type_assembly. { \"s\" }\n+          link::output_type_llvm_assembly. { \"ll\" }\n+          // Object and exe output both use the '.o' extension here\n+          link::output_type_object. | link::output_type_exe. {\n+            \"o\"\n+          }\n+        };\n+\n     alt ofile {\n       none. {\n         // \"-\" as input file will cause the parser to read from stdin so we\n         // have to make up a name\n         // We want to toss everything after the final '.'\n-        let parts =\n-            if !input_is_stdin(ifile) {\n-                str::split(ifile, '.' as u8)\n-            } else { [\"default\", \"rs\"] };\n-        vec::pop(parts);\n-        let base_filename = str::connect(parts, \".\");\n-        let suffix =\n-            alt sopts.output_type {\n-              link::output_type_none. { \"none\" }\n-              link::output_type_bitcode. { \"bc\" }\n-              link::output_type_assembly. { \"s\" }\n-              link::output_type_llvm_assembly. { \"ll\" }\n-              // Object and exe output both use the '.o' extension here\n-              link::output_type_object. | link::output_type_exe. {\n-                \"o\"\n-              }\n-            };\n-        obj_filename = base_filename + \".\" + suffix;\n+        let dirname = alt odir {\n+          some(d) { d }\n+          none. {\n+            if input_is_stdin(ifile) {\n+                std::os::getcwd()\n+            } else {\n+                fs::dirname(ifile)\n+            }\n+          }\n+        };\n+\n+        let (base_path, _) = if !input_is_stdin(ifile) {\n+            fs::splitext(ifile)\n+        } else {\n+            (fs::connect(dirname, \"rust_out\"), \"\")\n+        };\n+\n \n         if sess.building_library() {\n-            let dirname = fs::dirname(base_filename);\n-            let basename = fs::basename(base_filename);\n+            let basename = fs::basename(base_path);\n             let dylibname = std::os::dylib_filename(basename);\n-            saved_out_filename = fs::connect(dirname, dylibname);\n+            out_path = fs::connect(dirname, dylibname);\n+            obj_path = fs::connect(dirname, basename + \".\" + obj_path);\n         } else {\n-            saved_out_filename = base_filename;\n+            out_path = base_path;\n+            obj_path = base_path + \".\" + obj_suffix;\n         }\n       }\n+\n       some(out_file) {\n-        // FIXME: what about windows? This will create a foo.exe.o.\n-        saved_out_filename = out_file;\n-        obj_filename =\n-            if stop_after_codegen { out_file } else { out_file + \".o\" };\n+        out_path = out_file;\n+        obj_path = if stop_after_codegen {\n+            out_file\n+        } else {\n+            let (base, _) = fs::splitext(out_file);\n+            let modified = base + \".\" + obj_suffix;\n+            modified\n+        };\n+\n+        if sess.building_library() {\n+            // FIXME: We might want to warn here; we're actually not going to\n+            // respect the user's choice of library name when it comes time to\n+            // link, we'll be linking to lib<basename>-<hash>-<version>.so no\n+            // matter what.\n+        }\n+\n+        if odir != none {\n+            sess.warn(\"Ignoring --out-dir flag due to -o flag.\");\n+        }\n       }\n     }\n-    ret @{out_filename: saved_out_filename, obj_filename: obj_filename};\n+    ret @{out_filename: out_path,\n+          obj_filename: obj_path};\n }\n \n fn early_error(msg: str) -> ! {\n@@ -609,6 +644,7 @@ fn main(args: [str]) {\n \n     let sopts = build_session_options(match);\n     let sess = build_session(sopts);\n+    let odir = getopts::opt_maybe_str(match, \"out-dir\");\n     let ofile = getopts::opt_maybe_str(match, \"o\");\n     let cfg = build_configuration(sess, binary, ifile);\n     let pretty =\n@@ -626,7 +662,7 @@ fn main(args: [str]) {\n         ret;\n     }\n \n-    compile_input(sess, cfg, ifile, ofile);\n+    compile_input(sess, cfg, ifile, odir, ofile);\n }\n \n #[cfg(test)]"}]}