{"sha": "4c1f50bf2bef7b25613a4c42322de87ffcf8c922", "node_id": "C_kwDOAAsO6NoAKDRjMWY1MGJmMmJlZjdiMjU2MTNhNGM0MjMyMmRlODdmZmNmOGM5MjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-13T13:44:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-13T13:44:16Z"}, "message": "Auto merge of #2232 - rust-lang:gesundheit, r=oli-obk\n\nAlways show stderr on test failure.\n\nfixes #2224\n\nI overengineered the original thing to the point where it became fragile. Let's just always print stderr, unless it was already printed", "tree": {"sha": "0b04649933e130473dc5dd56ac330f4a060aac7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b04649933e130473dc5dd56ac330f4a060aac7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c1f50bf2bef7b25613a4c42322de87ffcf8c922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c1f50bf2bef7b25613a4c42322de87ffcf8c922", "html_url": "https://github.com/rust-lang/rust/commit/4c1f50bf2bef7b25613a4c42322de87ffcf8c922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c1f50bf2bef7b25613a4c42322de87ffcf8c922/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9642534a33c0827eefad0878f032855dd0f5abd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9642534a33c0827eefad0878f032855dd0f5abd9", "html_url": "https://github.com/rust-lang/rust/commit/9642534a33c0827eefad0878f032855dd0f5abd9"}, {"sha": "0689f36a5528875d3a0c467a327becbed961e6a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0689f36a5528875d3a0c467a327becbed961e6a6", "html_url": "https://github.com/rust-lang/rust/commit/0689f36a5528875d3a0c467a327becbed961e6a6"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "7f9eb48e05f9e271b4c49e47b48c4a1c24eddffb", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c1f50bf2bef7b25613a4c42322de87ffcf8c922/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c1f50bf2bef7b25613a4c42322de87ffcf8c922/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=4c1f50bf2bef7b25613a4c42322de87ffcf8c922", "patch": "@@ -147,10 +147,7 @@ pub fn run_tests(config: Config) {\n             eprintln!();\n             eprintln!(\"command: {:?}\", miri);\n             eprintln!();\n-            // `None` means never dump, as we already dumped it for an `OutputDiffers`\n-            // `Some(false)` means there's no reason to dump, as all errors are independent of the stderr\n-            // `Some(true)` means that there was a pattern in the .rs file that was not found in the output.\n-            let mut dump_stderr = Some(false);\n+            let mut dump_stderr = true;\n             for error in errors {\n                 match error {\n                     Error::ExitStatus(mode, exit_status) => eprintln!(\"{mode:?} got {exit_status}\"),\n@@ -160,7 +157,6 @@ pub fn run_tests(config: Config) {\n                             \"expected because of pattern here: {}:{definition_line}\",\n                             path.display().to_string().bold()\n                         );\n-                        dump_stderr = dump_stderr.map(|_| true);\n                     }\n                     Error::NoPatternsFound => {\n                         eprintln!(\"{}\", \"no error patterns found in failure test\".red());\n@@ -169,7 +165,7 @@ pub fn run_tests(config: Config) {\n                         eprintln!(\"{}\", \"error pattern found in success test\".red()),\n                     Error::OutputDiffers { path, actual, expected } => {\n                         if path.extension().unwrap() == \"stderr\" {\n-                            dump_stderr = None;\n+                            dump_stderr = false;\n                         }\n                         eprintln!(\"actual output differed from expected {}\", path.display());\n                         eprintln!(\"{}\", pretty_assertions::StrComparison::new(expected, actual));\n@@ -203,7 +199,8 @@ pub fn run_tests(config: Config) {\n                 }\n                 eprintln!();\n             }\n-            if let Some(true) = dump_stderr {\n+            // Unless we already dumped the stderr via an OutputDiffers diff, let's dump it here.\n+            if dump_stderr {\n                 eprintln!(\"actual stderr:\");\n                 eprintln!(\"{}\", stderr);\n                 eprintln!();"}]}