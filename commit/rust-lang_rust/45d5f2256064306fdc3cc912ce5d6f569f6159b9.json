{"sha": "45d5f2256064306fdc3cc912ce5d6f569f6159b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZDVmMjI1NjA2NDMwNmZkYzNjYzkxMmNlNWQ2ZjU2OWY2MTU5Yjk=", "commit": {"author": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-08-16T20:56:03Z"}, "committer": {"name": "Baoshan Pang", "email": "baoshan.pang@windriver.com", "date": "2019-08-21T04:36:55Z"}, "message": "run test for vxWorks in 'pure' static linking mode by default;\nif environment variables 'RUST_TEST_DYLINK' is set to 1, then run test in 'pure' dynamic linking mode", "tree": {"sha": "bdad16dacd74f88fa1c0837dff532332722c3eb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdad16dacd74f88fa1c0837dff532332722c3eb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45d5f2256064306fdc3cc912ce5d6f569f6159b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45d5f2256064306fdc3cc912ce5d6f569f6159b9", "html_url": "https://github.com/rust-lang/rust/commit/45d5f2256064306fdc3cc912ce5d6f569f6159b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45d5f2256064306fdc3cc912ce5d6f569f6159b9/comments", "author": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bpangWR", "id": 53950092, "node_id": "MDQ6VXNlcjUzOTUwMDky", "avatar_url": "https://avatars.githubusercontent.com/u/53950092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpangWR", "html_url": "https://github.com/bpangWR", "followers_url": "https://api.github.com/users/bpangWR/followers", "following_url": "https://api.github.com/users/bpangWR/following{/other_user}", "gists_url": "https://api.github.com/users/bpangWR/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpangWR/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpangWR/subscriptions", "organizations_url": "https://api.github.com/users/bpangWR/orgs", "repos_url": "https://api.github.com/users/bpangWR/repos", "events_url": "https://api.github.com/users/bpangWR/events{/privacy}", "received_events_url": "https://api.github.com/users/bpangWR/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403e672c913643515a8c467352075ca854d62a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/403e672c913643515a8c467352075ca854d62a2e", "html_url": "https://github.com/rust-lang/rust/commit/403e672c913643515a8c467352075ca854d62a2e"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "a712a27015d2546a2166ac28f6315803c98e6ddf", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/45d5f2256064306fdc3cc912ce5d6f569f6159b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45d5f2256064306fdc3cc912ce5d6f569f6159b9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=45d5f2256064306fdc3cc912ce5d6f569f6159b9", "patch": "@@ -1725,6 +1725,17 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn use_dynamic_linking(&self) -> bool {\n+        if self.config.target.contains(\"vxworks\") {\n+            match env::var(\"RUST_TEST_DYLINK\") {\n+                Ok(s) => s == \"1\",\n+                _ => false\n+            }\n+        } else {\n+            true\n+        }\n+    }\n+\n     fn compose_and_run_compiler(&self, mut rustc: Command, input: Option<String>) -> ProcRes {\n         let aux_dir = self.aux_output_dir_name();\n \n@@ -1768,6 +1779,7 @@ impl<'test> TestCx<'test> {\n                     && !self.config.host.contains(\"musl\"))\n                 || self.config.target.contains(\"wasm32\")\n                 || self.config.target.contains(\"nvptx\")\n+                || !self.use_dynamic_linking()\n             {\n                 // We primarily compile all auxiliary libraries as dynamic libraries\n                 // to avoid code size bloat and large binaries as much as possible\n@@ -1999,10 +2011,14 @@ impl<'test> TestCx<'test> {\n         }\n \n         if !is_rustdoc {\n-            if self.config.target == \"wasm32-unknown-unknown\" {\n+            if self.config.target == \"wasm32-unknown-unknown\"\n+            || !self.use_dynamic_linking() {\n                 // rustc.arg(\"-g\"); // get any backtrace at all on errors\n             } else if !self.props.no_prefer_dynamic {\n                 rustc.args(&[\"-C\", \"prefer-dynamic\"]);\n+                if self.config.target.contains(\"vxworks\") {\n+                    rustc.args(&[\"-C\", \"target-feature=-crt-static\"]);\n+                }\n             }\n         }\n "}]}