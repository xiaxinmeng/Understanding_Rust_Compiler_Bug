{"sha": "24a75eeccc7990e2c15e47c31283705f6091f752", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTc1ZWVjY2M3OTkwZTJjMTVlNDdjMzEyODM3MDVmNjA5MWY3NTI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-26T01:34:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-26T01:35:30Z"}, "message": "rustc: Parse definition IDs from crates; add a function to parse unsigned ints to the standard library", "tree": {"sha": "85ad91e31f3b2ccf1385a4992b05186ffe5e5d20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85ad91e31f3b2ccf1385a4992b05186ffe5e5d20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a75eeccc7990e2c15e47c31283705f6091f752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a75eeccc7990e2c15e47c31283705f6091f752", "html_url": "https://github.com/rust-lang/rust/commit/24a75eeccc7990e2c15e47c31283705f6091f752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a75eeccc7990e2c15e47c31283705f6091f752/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee686dacb8a2582309e6562d5c37b4cdc776482c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee686dacb8a2582309e6562d5c37b4cdc776482c", "html_url": "https://github.com/rust-lang/rust/commit/ee686dacb8a2582309e6562d5c37b4cdc776482c"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "01203226a70ef061be807d5091a0e021da1bdabd", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/24a75eeccc7990e2c15e47c31283705f6091f752/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a75eeccc7990e2c15e47c31283705f6091f752/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=24a75eeccc7990e2c15e47c31283705f6091f752", "patch": "@@ -16,6 +16,7 @@ import util.common;\n import util.common.span;\n \n import std._str;\n+import std._uint;\n import std._vec;\n import std.ebml;\n import std.fs;\n@@ -222,8 +223,22 @@ impure fn parse_ty_fn(@pstate st, str_def sd) -> tup(vec[ty.arg], @ty.t) {\n \n // Rust metadata parsing\n \n-fn parse_def_id(str s) -> ast.def_id {\n-    ret tup(1, 0);  // TODO\n+fn parse_def_id(vec[u8] buf) -> ast.def_id {\n+    auto colon_idx = 0u;\n+    auto len = _vec.len[u8](buf);\n+    while (colon_idx < len && buf.(colon_idx) != (':' as u8)) {\n+        colon_idx += 1u;\n+    }\n+    if (colon_idx == len) {\n+        log \"didn't find ':' when parsing def id\";\n+        fail;\n+    }\n+\n+    auto crate_part = _vec.slice[u8](buf, 0u, colon_idx);\n+    auto def_part = _vec.slice[u8](buf, colon_idx + 1u, len);\n+    auto crate_num = _uint.parse_buf(crate_part, 10u) as int;\n+    auto def_num = _uint.parse_buf(def_part, 10u) as int;\n+    ret tup(crate_num, def_num);\n }\n \n // Given a path and serialized crate metadata, returns the ID of the\n@@ -259,9 +274,7 @@ impure fn resolve_path(vec[ast.ident] path, vec[u8] data) -> resolve_result {\n                         ebml.move_to_first_child(ebml_r);\n                         auto did_data = ebml.read_data(ebml_r);\n                         ebml.move_to_parent(ebml_r);\n-                        auto did_str = _str.unsafe_from_bytes(did_data);\n-                        log \"did_str: \" + did_str;\n-                        did_opt = some[ast.def_id](parse_def_id(did_str));\n+                        did_opt = some[ast.def_id](parse_def_id(did_data));\n                     }\n                     ebml.move_to_next_sibling(ebml_r);\n                 }\n@@ -395,6 +408,9 @@ fn lookup_def(session.session sess, &span sp, int cnum, vec[ast.ident] path)\n         }\n     }\n \n+    log #fmt(\"resolved '%s' to %d:%d\", _str.connect(path, \".\"), did._0,\n+             did._1);\n+\n     // TODO: Look up item type, use that to determine the type of def.\n \n     fail;"}, {"sha": "f6686b5d9aaa5c70929ee930b49c5e679695ab2d", "filename": "src/lib/_uint.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24a75eeccc7990e2c15e47c31283705f6091f752/src%2Flib%2F_uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a75eeccc7990e2c15e47c31283705f6091f752/src%2Flib%2F_uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_uint.rs?ref=24a75eeccc7990e2c15e47c31283705f6091f752", "patch": "@@ -33,6 +33,18 @@ fn next_power_of_two(uint n) -> uint {\n     ret tmp + 1u;\n }\n \n+fn parse_buf(vec[u8] buf, uint radix) -> uint {\n+    auto i = _vec.len[u8](buf) - 1u;\n+    auto power = 1u;\n+    auto n = 0u;\n+    while (i >= 0u) {\n+        n += (((buf.(i)) - ('0' as u8)) as uint) * power;\n+        power *= radix;\n+        i -= 1u;\n+    }\n+    ret n;\n+}\n+\n fn to_str(uint num, uint radix) -> str\n {\n     auto n = num;"}]}