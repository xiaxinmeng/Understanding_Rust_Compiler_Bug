{"sha": "2753fab7ce3647033146b07c8b6c9f4856a910b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NTNmYWI3Y2UzNjQ3MDMzMTQ2YjA3YzhiNmM5ZjQ4NTZhOTEwYjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-05T18:01:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-05T18:01:47Z"}, "message": "Auto merge of #73879 - ecstatic-morse:discr-switch-uninit, r=oli-obk\n\nHandle inactive enum variants in `MaybeUninitializedPlaces`\n\nResolves the first part of #69715.\n\nThis is the equivalent of #68528 but for `MaybeUninitializedPlaces`. Because we now notify drop elaboration that inactive enum variants might be uninitialized, some drops get marked as [\"open\" that were previously \"static\"](https://github.com/rust-lang/rust/blob/e0e5d82e1677c82d209b214bbfc2cc5705c2336a/src/librustc_mir/transform/elaborate_drops.rs#L191). Unlike in #69715, this isn't strictly better: An \"open\" drop expands to more MIR than a simple call to the drop shim. However, because drop elaboration considers each field of an \"open\" drop separately, it can sometimes eliminate unnecessary drops of moved-from or unit-like enum variants. This is the case for `Option::unwrap`, which is reflected in the `mir-opt` test.\n\ncc @eddyb\nr? @oli-obk", "tree": {"sha": "02b966b6e169634600bd293df2c5cb5fe21fb44d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02b966b6e169634600bd293df2c5cb5fe21fb44d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2753fab7ce3647033146b07c8b6c9f4856a910b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2753fab7ce3647033146b07c8b6c9f4856a910b0", "html_url": "https://github.com/rust-lang/rust/commit/2753fab7ce3647033146b07c8b6c9f4856a910b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2753fab7ce3647033146b07c8b6c9f4856a910b0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}, {"sha": "eb4d28bce0a73ddbdbcd107dd7875ddd97a603d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb4d28bce0a73ddbdbcd107dd7875ddd97a603d8", "html_url": "https://github.com/rust-lang/rust/commit/eb4d28bce0a73ddbdbcd107dd7875ddd97a603d8"}], "stats": {"total": 172, "additions": 133, "deletions": 39}, "files": [{"sha": "707e136678e9ca2738074b3e0188411602d49c55", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=2753fab7ce3647033146b07c8b6c9f4856a910b0", "patch": "@@ -1,6 +1,7 @@\n use crate::util::elaborate_drops::DropFlagState;\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_target::abi::VariantIdx;\n \n use super::indexes::MovePathIndex;\n use super::move_paths::{InitKind, LookupResult, MoveData};\n@@ -228,3 +229,42 @@ pub(crate) fn for_location_inits<'tcx, F>(\n         }\n     }\n }\n+\n+/// Calls `handle_inactive_variant` for each descendant move path of `enum_place` that contains a\n+/// `Downcast` to a variant besides the `active_variant`.\n+///\n+/// NOTE: If there are no move paths corresponding to an inactive variant,\n+/// `handle_inactive_variant` will not be called for that variant.\n+pub(crate) fn on_all_inactive_variants<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mir::Body<'tcx>,\n+    move_data: &MoveData<'tcx>,\n+    enum_place: mir::Place<'tcx>,\n+    active_variant: VariantIdx,\n+    mut handle_inactive_variant: impl FnMut(MovePathIndex),\n+) {\n+    let enum_mpi = match move_data.rev_lookup.find(enum_place.as_ref()) {\n+        LookupResult::Exact(mpi) => mpi,\n+        LookupResult::Parent(_) => return,\n+    };\n+\n+    let enum_path = &move_data.move_paths[enum_mpi];\n+    for (variant_mpi, variant_path) in enum_path.children(&move_data.move_paths) {\n+        // Because of the way we build the `MoveData` tree, each child should have exactly one more\n+        // projection than `enum_place`. This additional projection must be a downcast since the\n+        // base is an enum.\n+        let (downcast, base_proj) = variant_path.place.projection.split_last().unwrap();\n+        assert_eq!(enum_place.projection.len(), base_proj.len());\n+\n+        let variant_idx = match *downcast {\n+            mir::ProjectionElem::Downcast(_, idx) => idx,\n+            _ => unreachable!(),\n+        };\n+\n+        if variant_idx != active_variant {\n+            on_all_children_bits(tcx, body, move_data, variant_mpi, |mpi| {\n+                handle_inactive_variant(mpi)\n+            });\n+        }\n+    }\n+}"}, {"sha": "8975faec487657dafa81c3ff2530e6cceff56766", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=2753fab7ce3647033146b07c8b6c9f4856a910b0", "patch": "@@ -12,7 +12,7 @@ use super::MoveDataParamEnv;\n \n use crate::util::elaborate_drops::DropFlagState;\n \n-use super::move_paths::{HasMoveData, InitIndex, InitKind, LookupResult, MoveData, MovePathIndex};\n+use super::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n use super::{AnalysisDomain, BottomValue, GenKill, GenKillAnalysis};\n \n use super::drop_flag_effects_for_function_entry;\n@@ -124,11 +124,23 @@ pub struct MaybeUninitializedPlaces<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     mdpe: &'a MoveDataParamEnv<'tcx>,\n+\n+    mark_inactive_variants_as_uninit: bool,\n }\n \n impl<'a, 'tcx> MaybeUninitializedPlaces<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, mdpe: &'a MoveDataParamEnv<'tcx>) -> Self {\n-        MaybeUninitializedPlaces { tcx, body, mdpe }\n+        MaybeUninitializedPlaces { tcx, body, mdpe, mark_inactive_variants_as_uninit: false }\n+    }\n+\n+    /// Causes inactive enum variants to be marked as \"maybe uninitialized\" after a switch on an\n+    /// enum discriminant.\n+    ///\n+    /// This is correct in a vacuum but is not the default because it causes problems in the borrow\n+    /// checker, where this information gets propagated along `FakeEdge`s.\n+    pub fn mark_inactive_variants_as_uninit(mut self) -> Self {\n+        self.mark_inactive_variants_as_uninit = true;\n+        self\n     }\n }\n \n@@ -350,27 +362,16 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeInitializedPlaces<'_, 'tcx> {\n         _adt: &ty::AdtDef,\n         variant: VariantIdx,\n     ) {\n-        let enum_mpi = match self.move_data().rev_lookup.find(enum_place.as_ref()) {\n-            LookupResult::Exact(mpi) => mpi,\n-            LookupResult::Parent(_) => return,\n-        };\n-\n-        // Kill all move paths that correspond to variants other than this one\n-        let move_paths = &self.move_data().move_paths;\n-        let enum_path = &move_paths[enum_mpi];\n-        for (mpi, variant_path) in enum_path.children(move_paths) {\n-            trans.kill(mpi);\n-            match variant_path.place.projection.last().unwrap() {\n-                mir::ProjectionElem::Downcast(_, idx) if *idx == variant => continue,\n-                _ => drop_flag_effects::on_all_children_bits(\n-                    self.tcx,\n-                    self.body,\n-                    self.move_data(),\n-                    mpi,\n-                    |mpi| trans.kill(mpi),\n-                ),\n-            }\n-        }\n+        // Kill all move paths that correspond to variants we know to be inactive along this\n+        // particular outgoing edge of a `SwitchInt`.\n+        drop_flag_effects::on_all_inactive_variants(\n+            self.tcx,\n+            self.body,\n+            self.move_data(),\n+            enum_place,\n+            variant,\n+            |mpi| trans.kill(mpi),\n+        );\n     }\n }\n \n@@ -443,6 +444,30 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeUninitializedPlaces<'_, 'tcx> {\n             },\n         );\n     }\n+\n+    fn discriminant_switch_effect(\n+        &self,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        _block: mir::BasicBlock,\n+        enum_place: mir::Place<'tcx>,\n+        _adt: &ty::AdtDef,\n+        variant: VariantIdx,\n+    ) {\n+        if !self.mark_inactive_variants_as_uninit {\n+            return;\n+        }\n+\n+        // Mark all move paths that correspond to variants other than this one as maybe\n+        // uninitialized (in reality, they are *definitely* uninitialized).\n+        drop_flag_effects::on_all_inactive_variants(\n+            self.tcx,\n+            self.body,\n+            self.move_data(),\n+            enum_place,\n+            variant,\n+            |mpi| trans.gen(mpi),\n+        );\n+    }\n }\n \n impl<'a, 'tcx> AnalysisDomain<'tcx> for DefinitelyInitializedPlaces<'a, 'tcx> {"}, {"sha": "d3bfd872d16c2c57c622f9871e6959b6b2a6fa1e", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=2753fab7ce3647033146b07c8b6c9f4856a910b0", "patch": "@@ -48,6 +48,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n                 .into_results_cursor(body);\n \n             let uninits = MaybeUninitializedPlaces::new(tcx, body, &env)\n+                .mark_inactive_variants_as_uninit()\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n                 .iterate_to_fixpoint()"}, {"sha": "2e8cfaea937d7c619e99848800f95456cb0a27e0", "filename": "src/test/mir-opt/no-drop-for-inactive-variant/rustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno-drop-for-inactive-variant%2Frustc.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=2753fab7ce3647033146b07c8b6c9f4856a910b0", "patch": "@@ -8,22 +8,19 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n     let mut _4: !;                       // in scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n     let mut _5: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n     let mut _6: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+    let mut _7: isize;                   // in scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n     }\n \n     bb0: {\n         _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n-        switchInt(move _2) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n     }\n \n-    bb1 (cleanup): {\n-        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n-    }\n-\n-    bb2: {\n+    bb1: {\n         StorageLive(_4);                 // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n-        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb5; // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n+        const std::rt::begin_panic::<&str>(const \"explicit panic\") -> bb4; // scope 0 at $SRC_DIR/libstd/macros.rs:LL:COL\n                                          // ty::Const\n                                          // + ty: fn(&str) -> ! {std::rt::begin_panic::<&str>}\n                                          // + val: Value(Scalar(<ZST>))\n@@ -38,20 +35,21 @@ fn unwrap(_1: std::option::Option<T>) -> T {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, size: Size { raw: 14 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n     }\n \n-    bb3: {\n+    bb2: {\n         unreachable;                     // scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:11: 8:14\n     }\n \n-    bb4: {\n+    bb3: {\n         StorageLive(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _3 = move ((_1 as Some).0: T);   // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:14: 9:15\n         _0 = move _3;                    // scope 1 at $DIR/no-drop-for-inactive-variant.rs:9:20: 9:21\n         StorageDead(_3);                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:21: 9:22\n-        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        _6 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n         return;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:2: 12:2\n     }\n \n-    bb5 (cleanup): {\n-        drop(_1) -> bb1;                 // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+    bb4 (cleanup): {\n+        _5 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:12:1: 12:2\n+        resume;                          // scope 0 at $DIR/no-drop-for-inactive-variant.rs:7:1: 12:2\n     }\n }"}, {"sha": "440c5f8772ed10104681acf5753fd82319feccd8", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/32bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F32bit%2Frustc.map.SimplifyLocals.diff?ref=2753fab7ce3647033146b07c8b6c9f4856a910b0", "patch": "@@ -7,13 +7,28 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n--     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n           debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x00))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x01))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n           switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n       }\n@@ -35,7 +50,7 @@\n       }\n   \n       bb3: {\n--         _5 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n       }\n   }"}, {"sha": "c12d1715b486db07aeef633f078f1b6e6f5de9d6", "filename": "src/test/mir-opt/simplify-locals-removes-unused-discriminant-reads/64bit/rustc.map.SimplifyLocals.diff", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2753fab7ce3647033146b07c8b6c9f4856a910b0/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify-locals-removes-unused-discriminant-reads%2F64bit%2Frustc.map.SimplifyLocals.diff?ref=2753fab7ce3647033146b07c8b6c9f4856a910b0", "patch": "@@ -7,13 +7,28 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n -     let _3: std::boxed::Box<()>;         // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n -     let mut _4: std::boxed::Box<()>;     // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:25: 4:26\n--     let mut _5: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _5: bool;                    // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n -     let mut _6: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-     let mut _7: isize;                   // in scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n       scope 1 {\n           debug x => ((_0 as Some).0: std::boxed::Box<()>); // in scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:14: 4:15\n       }\n   \n       bb0: {\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x00))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // ty::Const\n+-                                          // + ty: bool\n+-                                          // + val: Value(Scalar(0x01))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n+-                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n           _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n           switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:9: 3:13\n       }\n@@ -35,7 +50,7 @@\n       }\n   \n       bb3: {\n--         _5 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n+-         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:1: 6:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:2: 6:2\n       }\n   }"}]}