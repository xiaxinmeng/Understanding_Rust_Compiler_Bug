{"sha": "56c90774a94e521283030caa12c1bf8d9bc16be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YzkwNzc0YTk0ZTUyMTI4MzAzMGNhYTEyYzFiZjhkOWJjMTZiZTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-19T15:53:44Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-20T13:59:21Z"}, "message": "Make sure the compiler actually panics on `delay_span_bug`\n\nEven if that is just happening because of `abort_if_errors`", "tree": {"sha": "6529d607de141531beded66bce8eadc44c52a204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6529d607de141531beded66bce8eadc44c52a204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56c90774a94e521283030caa12c1bf8d9bc16be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56c90774a94e521283030caa12c1bf8d9bc16be4", "html_url": "https://github.com/rust-lang/rust/commit/56c90774a94e521283030caa12c1bf8d9bc16be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56c90774a94e521283030caa12c1bf8d9bc16be4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fc4501256b002aef627880a9f6d18065b0ca931", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc4501256b002aef627880a9f6d18065b0ca931", "html_url": "https://github.com/rust-lang/rust/commit/0fc4501256b002aef627880a9f6d18065b0ca931"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "293b5c63cf06aa69ec5a1aab4e5b8f1f4fe3cf6d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=56c90774a94e521283030caa12c1bf8d9bc16be4", "patch": "@@ -1193,6 +1193,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"run all passes except codegen; no output\"),\n     treat_err_as_bug: bool = (false, parse_bool, [TRACKED],\n           \"treat all errors that occur as bugs\"),\n+    report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n+          \"immediately print bugs registered with `delay_span_bug`\"),\n     external_macro_backtrace: bool = (false, parse_bool, [UNTRACKED],\n           \"show macro backtraces even for non-local macros\"),\n     teach: bool = (false, parse_bool, [TRACKED],\n@@ -3133,6 +3135,10 @@ mod tests {\n         opts.debugging_opts.treat_err_as_bug = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.debugging_opts.report_delayed_bugs = true;\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.debugging_opts.continue_parse_after_error = true;\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "77a1129f66d27726dc67aab94a3bec227a88a177", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=56c90774a94e521283030caa12c1bf8d9bc16be4", "patch": "@@ -1000,6 +1000,7 @@ pub fn build_session_with_codemap(\n     let can_emit_warnings = !(warnings_allow || cap_lints_allow);\n \n     let treat_err_as_bug = sopts.debugging_opts.treat_err_as_bug;\n+    let report_delayed_bugs = sopts.debugging_opts.report_delayed_bugs;\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n@@ -1045,6 +1046,7 @@ pub fn build_session_with_codemap(\n         errors::HandlerFlags {\n             can_emit_warnings,\n             treat_err_as_bug,\n+            report_delayed_bugs,\n             external_macro_backtrace,\n             ..Default::default()\n         },"}, {"sha": "24ece514a47b5c668f5982c8f21e0abc5d14cde9", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=56c90774a94e521283030caa12c1bf8d9bc16be4", "patch": "@@ -132,7 +132,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// locally in whichever way makes the most sense.\n     pub fn delay_as_bug(&mut self) {\n         self.level = Level::Bug;\n-        *self.handler.delayed_span_bug.borrow_mut() = Some(self.diagnostic.clone());\n+        self.handler.delay_as_bug(self.diagnostic.clone());\n         self.cancel();\n     }\n "}, {"sha": "06c49b3a103d74fa9977ee46ffb452708f9d6551", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=56c90774a94e521283030caa12c1bf8d9bc16be4", "patch": "@@ -274,7 +274,7 @@ pub struct Handler {\n     err_count: AtomicUsize,\n     emitter: Lock<Box<dyn Emitter + sync::Send>>,\n     continue_after_error: LockCell<bool>,\n-    delayed_span_bug: Lock<Option<Diagnostic>>,\n+    delayed_span_bug: Lock<Vec<Diagnostic>>,\n \n     // This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     // emitting the same diagnostic with extended help (`--teach`) twice, which\n@@ -299,9 +299,25 @@ thread_local!(pub static TRACK_DIAGNOSTICS: Cell<fn(&Diagnostic)> =\n pub struct HandlerFlags {\n     pub can_emit_warnings: bool,\n     pub treat_err_as_bug: bool,\n+    pub report_delayed_bugs: bool,\n     pub external_macro_backtrace: bool,\n }\n \n+impl Drop for Handler {\n+    fn drop(&mut self) {\n+        if self.err_count() == 0 {\n+            let mut bugs = self.delayed_span_bug.borrow_mut();\n+            let has_bugs = !bugs.is_empty();\n+            for bug in bugs.drain(..) {\n+                DiagnosticBuilder::new_diagnostic(self, bug).emit();\n+            }\n+            if has_bugs {\n+                panic!(\"no errors encountered even though `delay_span_bug` issued\");\n+            }\n+        }\n+    }\n+}\n+\n impl Handler {\n     pub fn with_tty_emitter(color_config: ColorConfig,\n                             can_emit_warnings: bool,\n@@ -346,7 +362,7 @@ impl Handler {\n             err_count: AtomicUsize::new(0),\n             emitter: Lock::new(e),\n             continue_after_error: LockCell::new(true),\n-            delayed_span_bug: Lock::new(None),\n+            delayed_span_bug: Lock::new(Vec::new()),\n             taught_diagnostics: Lock::new(FxHashSet()),\n             emitted_diagnostic_codes: Lock::new(FxHashSet()),\n             emitted_diagnostics: Lock::new(FxHashSet()),\n@@ -503,11 +519,18 @@ impl Handler {\n     }\n     pub fn delay_span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         if self.flags.treat_err_as_bug {\n+            // FIXME: don't abort here if report_delayed_bugs is off\n             self.span_bug(sp, msg);\n         }\n         let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n         diagnostic.set_span(sp.into());\n-        *self.delayed_span_bug.borrow_mut() = Some(diagnostic);\n+        self.delay_as_bug(diagnostic);\n+    }\n+    fn delay_as_bug(&self, diagnostic: Diagnostic) {\n+        if self.flags.report_delayed_bugs {\n+            DiagnosticBuilder::new_diagnostic(self, diagnostic.clone()).emit();\n+        }\n+        self.delayed_span_bug.borrow_mut().push(diagnostic);\n     }\n     pub fn span_bug_no_panic<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Bug);\n@@ -615,9 +638,6 @@ impl Handler {\n \n     pub fn abort_if_errors(&self) {\n         if self.err_count() == 0 {\n-            if let Some(bug) = self.delayed_span_bug.borrow_mut().take() {\n-                DiagnosticBuilder::new_diagnostic(self, bug).emit();\n-            }\n             return;\n         }\n         FatalError.raise();"}, {"sha": "a31357349a4b68e4a10e1f8b9b11113a75d941c8", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56c90774a94e521283030caa12c1bf8d9bc16be4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=56c90774a94e521283030caa12c1bf8d9bc16be4", "patch": "@@ -161,6 +161,7 @@ pub fn new_handler(error_format: ErrorOutputType, codemap: Option<Lrc<codemap::C\n         errors::HandlerFlags {\n             can_emit_warnings: true,\n             treat_err_as_bug: false,\n+            report_delayed_bugs: false,\n             external_macro_backtrace: false,\n             ..Default::default()\n         },"}]}