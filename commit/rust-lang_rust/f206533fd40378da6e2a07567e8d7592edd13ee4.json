{"sha": "f206533fd40378da6e2a07567e8d7592edd13ee4", "node_id": "C_kwDOAAsO6NoAKGYyMDY1MzNmZDQwMzc4ZGE2ZTJhMDc1NjdlOGQ3NTkyZWRkMTNlZTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-26T09:06:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-26T09:06:51Z"}, "message": "Auto merge of #105605 - inquisitivecrystal:attr-validation, r=cjgillot\n\nDon't perform invalid checks in `codegen_attrs`\n\nThe attributes `#[track_caller]` and `#[cmse_nonsecure_entry]` are only valid on functions. When validating one of these attributes, codegen_attrs previously called `fn_sig`, [which can only be used on functions](https://github.com/rust-lang/rust/pull/105201), on the item the attribute was attached to, assuming that the item was a function without checking. This led to [ICEs in situations where the attribute was incorrectly used on non-functions](https://github.com/rust-lang/rust/issues/105594).\n\nWith this change, we skip calling `fn_sig` if the item the attribute is attached to must be a function but isn't, because `check_attr` will reject such cases without codegen_attrs's intervention.\n\nAs a side note, some of the attributes in codegen_attrs are only valid on functions, but that property isn't actually checked. I'm planning to fix that in a follow up PR since it's a behavior change that will need to be validated rather than an obvious bugfix. Thankfully, all the attributes like that I've found so far are unstable.\n\nFixes #105594.\n\nr? `@cjgillot`", "tree": {"sha": "fef7f402534df2e2db69c49dadcae2c6e287c3a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef7f402534df2e2db69c49dadcae2c6e287c3a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f206533fd40378da6e2a07567e8d7592edd13ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f206533fd40378da6e2a07567e8d7592edd13ee4", "html_url": "https://github.com/rust-lang/rust/commit/f206533fd40378da6e2a07567e8d7592edd13ee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f206533fd40378da6e2a07567e8d7592edd13ee4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "url": "https://api.github.com/repos/rust-lang/rust/commits/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4", "html_url": "https://github.com/rust-lang/rust/commit/797b5f0f8e9ab6d02a6a1464b04dea75a7a4cde4"}, {"sha": "47b642677715caa8e5699ecb397e34125f3256e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b642677715caa8e5699ecb397e34125f3256e8", "html_url": "https://github.com/rust-lang/rust/commit/47b642677715caa8e5699ecb397e34125f3256e8"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "b0fa7745667360d642a4fbd8c89ea0a71c6ef8d5", "filename": "compiler/rustc_codegen_ssa/src/codegen_attrs.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f206533fd40378da6e2a07567e8d7592edd13ee4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f206533fd40378da6e2a07567e8d7592edd13ee4/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcodegen_attrs.rs?ref=f206533fd40378da6e2a07567e8d7592edd13ee4", "patch": "@@ -2,6 +2,7 @@ use rustc_ast::{ast, MetaItemKind, NestedMetaItem};\n use rustc_attr::{list_contains_name, InlineAttr, InstructionSetAttr, OptimizeAttr};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::{lang_items, weak_lang_items::WEAK_LANG_ITEMS, LangItem};\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -60,6 +61,21 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n \n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n+    // In some cases, attribute are only valid on functions, but it's the `check_attr`\n+    // pass that check that they aren't used anywhere else, rather this module.\n+    // In these cases, we bail from performing further checks that are only meaningful for\n+    // functions (such as calling `fn_sig`, which ICEs if given a non-function). We also\n+    // report a delayed bug, just in case `check_attr` isn't doing its job.\n+    let validate_fn_only_attr = |attr_sp| -> bool {\n+        let def_kind = tcx.def_kind(did);\n+        if let DefKind::Fn | DefKind::AssocFn | DefKind::Variant | DefKind::Ctor(..) = def_kind {\n+            true\n+        } else {\n+            tcx.sess.delay_span_bug(attr_sp, \"this attribute can only be applied to functions\");\n+            false\n+        }\n+    };\n+\n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n     let mut no_sanitize_span = None;\n@@ -197,7 +213,9 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                 }\n             }\n         } else if attr.has_name(sym::cmse_nonsecure_entry) {\n-            if !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. }) {\n+            if validate_fn_only_attr(attr.span)\n+                && !matches!(tcx.fn_sig(did).abi(), abi::Abi::C { .. })\n+            {\n                 struct_span_err!(\n                     tcx.sess,\n                     attr.span,\n@@ -214,7 +232,10 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         } else if attr.has_name(sym::thread_local) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n         } else if attr.has_name(sym::track_caller) {\n-            if !tcx.is_closure(did.to_def_id()) && tcx.fn_sig(did).abi() != abi::Abi::Rust {\n+            if !tcx.is_closure(did.to_def_id())\n+                && validate_fn_only_attr(attr.span)\n+                && tcx.fn_sig(did).abi() != abi::Abi::Rust\n+            {\n                 struct_span_err!(tcx.sess, attr.span, E0737, \"`#[track_caller]` requires Rust ABI\")\n                     .emit();\n             }"}, {"sha": "6c68e6b046f03f394a4ace39a4aefd876a7fece5", "filename": "src/test/ui/attributes/issue-105594-invalid-attr-validation.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f206533fd40378da6e2a07567e8d7592edd13ee4/src%2Ftest%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f206533fd40378da6e2a07567e8d7592edd13ee4/src%2Ftest%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.rs?ref=f206533fd40378da6e2a07567e8d7592edd13ee4", "patch": "@@ -0,0 +1,13 @@\n+// This checks that the attribute validation ICE in issue #105594 doesn't\n+// recur.\n+//\n+// ignore-thumbv8m.base\n+#![feature(cmse_nonsecure_entry)]\n+\n+fn main() {}\n+\n+#[track_caller] //~ ERROR attribute should be applied to a function\n+static _A: () = ();\n+\n+#[cmse_nonsecure_entry] //~ ERROR attribute should be applied to a function\n+static _B: () = (); //~| ERROR #[cmse_nonsecure_entry]` is only valid for targets"}, {"sha": "c6b2d6e78138e39899abd923fc37cbaeaf639ff4", "filename": "src/test/ui/attributes/issue-105594-invalid-attr-validation.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f206533fd40378da6e2a07567e8d7592edd13ee4/src%2Ftest%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f206533fd40378da6e2a07567e8d7592edd13ee4/src%2Ftest%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fissue-105594-invalid-attr-validation.stderr?ref=f206533fd40378da6e2a07567e8d7592edd13ee4", "patch": "@@ -0,0 +1,26 @@\n+error[E0739]: attribute should be applied to a function definition\n+  --> $DIR/issue-105594-invalid-attr-validation.rs:9:1\n+   |\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^\n+LL | static _A: () = ();\n+   | ------------------- not a function definition\n+\n+error: attribute should be applied to a function definition\n+  --> $DIR/issue-105594-invalid-attr-validation.rs:12:1\n+   |\n+LL | #[cmse_nonsecure_entry]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+LL | static _B: () = ();\n+   | ------------------- not a function definition\n+\n+error[E0775]: `#[cmse_nonsecure_entry]` is only valid for targets with the TrustZone-M extension\n+  --> $DIR/issue-105594-invalid-attr-validation.rs:12:1\n+   |\n+LL | #[cmse_nonsecure_entry]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0739, E0775.\n+For more information about an error, try `rustc --explain E0739`."}]}