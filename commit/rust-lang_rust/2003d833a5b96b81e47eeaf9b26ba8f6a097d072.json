{"sha": "2003d833a5b96b81e47eeaf9b26ba8f6a097d072", "node_id": "C_kwDOAAsO6NoAKDIwMDNkODMzYTViOTZiODFlNDdlZWFmOWIyNmJhOGY2YTA5N2QwNzI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-29T21:54:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-29T21:54:41Z"}, "message": "Rollup merge of #96559 - cjgillot:elided-path-fn, r=petrochenkov\n\nUse the correct lifetime binder for elided lifetimes in path.\n\nFixes https://github.com/rust-lang/rust/issues/96540", "tree": {"sha": "ca8d1bcdbc2cd4e833b476a79dbb1f1fb3297d26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca8d1bcdbc2cd4e833b476a79dbb1f1fb3297d26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2003d833a5b96b81e47eeaf9b26ba8f6a097d072", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJibF6hCRBK7hj4Ov3rIwAAEwMIAEUmly9OsBGtwrImbYS2cL+E\nW2YDYmlvr5rPalLsq/4QCXqMUAaNw0rAv9FWSSUVVStunsJRWSj/2gkYw9zk6iqM\nDK0iB348a3xYNVseMouOlvdvFnw5iRU3qx8DVGW77oI1XWKQ0Z+FdNYDXVch+dvf\nY7U+PWICpKAWDt+fb4QqNqzg1b0P42kSfvThXZpN00OlSHfuTyNVtbaIJ2qEh3RL\nD6NHSj85CFBlTkraiQWrlmUtBqZxHn7AjY5/obNZF4l1B1/WMeC/YJjlyMrIXWwR\nWOhBYDIY9qtNw2RDGw4j7Ha54ymXEHNzacZLQ29e373syuo1sCslB0wTnMrKQzc=\n=fTYY\n-----END PGP SIGNATURE-----\n", "payload": "tree ca8d1bcdbc2cd4e833b476a79dbb1f1fb3297d26\nparent 0b96be79de8cc02483d32d4f503d54a91fcc0a4a\nparent 6e349c7f075d6791eec4c90aa3f2865dfd594da7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651269281 +0200\ncommitter GitHub <noreply@github.com> 1651269281 +0200\n\nRollup merge of #96559 - cjgillot:elided-path-fn, r=petrochenkov\n\nUse the correct lifetime binder for elided lifetimes in path.\n\nFixes https://github.com/rust-lang/rust/issues/96540\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2003d833a5b96b81e47eeaf9b26ba8f6a097d072", "html_url": "https://github.com/rust-lang/rust/commit/2003d833a5b96b81e47eeaf9b26ba8f6a097d072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2003d833a5b96b81e47eeaf9b26ba8f6a097d072/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b96be79de8cc02483d32d4f503d54a91fcc0a4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b96be79de8cc02483d32d4f503d54a91fcc0a4a", "html_url": "https://github.com/rust-lang/rust/commit/0b96be79de8cc02483d32d4f503d54a91fcc0a4a"}, {"sha": "6e349c7f075d6791eec4c90aa3f2865dfd594da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e349c7f075d6791eec4c90aa3f2865dfd594da7", "html_url": "https://github.com/rust-lang/rust/commit/6e349c7f075d6791eec4c90aa3f2865dfd594da7"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "21b888c25c25fc3560d78dc91ffd726b82e3249a", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2003d833a5b96b81e47eeaf9b26ba8f6a097d072/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2003d833a5b96b81e47eeaf9b26ba8f6a097d072/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=2003d833a5b96b81e47eeaf9b26ba8f6a097d072", "patch": "@@ -1319,7 +1319,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | PathSource::Struct\n                 | PathSource::TupleStruct(..) => false,\n             };\n-            let mut error = false;\n+            let mut res = LifetimeRes::Error;\n             for rib in self.lifetime_ribs.iter().rev() {\n                 match rib.kind {\n                     // In create-parameter mode we error here because we don't want to support\n@@ -1329,7 +1329,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     //     impl Foo for std::cell::Ref<u32> // note lack of '_\n                     //     async fn foo(_: std::cell::Ref<u32>) { ... }\n                     LifetimeRibKind::AnonymousCreateParameter(_) => {\n-                        error = true;\n                         break;\n                     }\n                     // `PassThrough` is the normal case.\n@@ -1338,19 +1337,21 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     // `PathSegment`, for which there is no associated `'_` or `&T` with no explicit\n                     // lifetime. Instead, we simply create an implicit lifetime, which will be checked\n                     // later, at which point a suitable error will be emitted.\n-                    LifetimeRibKind::AnonymousPassThrough(..)\n-                    | LifetimeRibKind::AnonymousReportError\n-                    | LifetimeRibKind::Item => break,\n+                    LifetimeRibKind::AnonymousPassThrough(binder) => {\n+                        res = LifetimeRes::Anonymous { binder, elided: true };\n+                        break;\n+                    }\n+                    LifetimeRibKind::AnonymousReportError | LifetimeRibKind::Item => {\n+                        // FIXME(cjgillot) This resolution is wrong, but this does not matter\n+                        // since these cases are erroneous anyway.  Lifetime resolution should\n+                        // emit a \"missing lifetime specifier\" diagnostic.\n+                        res = LifetimeRes::Anonymous { binder: DUMMY_NODE_ID, elided: true };\n+                        break;\n+                    }\n                     _ => {}\n                 }\n             }\n \n-            let res = if error {\n-                LifetimeRes::Error\n-            } else {\n-                LifetimeRes::Anonymous { binder: segment_id, elided: true }\n-            };\n-\n             let node_ids = self.r.next_node_ids(expected_lifetimes);\n             self.record_lifetime_res(\n                 segment_id,\n@@ -1374,7 +1375,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // originating from macros, since the segment's span might be from a macro arg.\n                 segment.ident.span.find_ancestor_inside(path_span).unwrap_or(path_span)\n             };\n-            if error {\n+            if let LifetimeRes::Error = res {\n                 let sess = self.r.session;\n                 let mut err = rustc_errors::struct_span_err!(\n                     sess,"}, {"sha": "9c9965d8fb8b534eb97b70aa2405eba4bd710f5d", "filename": "src/test/ui/lifetimes/elided-lifetime-in-path-in-impl-Fn.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2003d833a5b96b81e47eeaf9b26ba8f6a097d072/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-impl-Fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2003d833a5b96b81e47eeaf9b26ba8f6a097d072/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-impl-Fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Felided-lifetime-in-path-in-impl-Fn.rs?ref=2003d833a5b96b81e47eeaf9b26ba8f6a097d072", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+struct Foo<'a>(&'a ());\n+\n+fn with_fn() -> fn(Foo) {\n+    |_| ()\n+}\n+\n+fn with_impl_fn() -> impl Fn(Foo) {\n+    |_| ()\n+}\n+\n+fn with_where_fn<T>()\n+where\n+    T: Fn(Foo),\n+{\n+}\n+\n+fn main() {}"}]}