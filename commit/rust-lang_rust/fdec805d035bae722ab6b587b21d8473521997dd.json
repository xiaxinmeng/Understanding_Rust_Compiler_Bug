{"sha": "fdec805d035bae722ab6b587b21d8473521997dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZWM4MDVkMDM1YmFlNzIyYWI2YjU4N2IyMWQ4NDczNTIxOTk3ZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T03:02:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T03:02:05Z"}, "message": "Auto merge of #45283 - alexcrichton:used-mut-nodes, r=arielb1\n\nrustc: Remove `used_mut_nodes` from `TyCtxt`\n\nThis updates the borrowck query to return a result, and this result is then used\nto incrementally check for unused mutable nodes given sets of all the used\nmutable nodes.\n\nCloses #42384", "tree": {"sha": "ce89520838973b35edd18444ffcf2010ac14e317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce89520838973b35edd18444ffcf2010ac14e317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdec805d035bae722ab6b587b21d8473521997dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdec805d035bae722ab6b587b21d8473521997dd", "html_url": "https://github.com/rust-lang/rust/commit/fdec805d035bae722ab6b587b21d8473521997dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdec805d035bae722ab6b587b21d8473521997dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9223c39dc53ad97ae95fd9cec86503a083b8e966", "url": "https://api.github.com/repos/rust-lang/rust/commits/9223c39dc53ad97ae95fd9cec86503a083b8e966", "html_url": "https://github.com/rust-lang/rust/commit/9223c39dc53ad97ae95fd9cec86503a083b8e966"}, {"sha": "4df1278c69f6f74f3a58e647ca3a9cd38395ebf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4df1278c69f6f74f3a58e647ca3a9cd38395ebf3", "html_url": "https://github.com/rust-lang/rust/commit/4df1278c69f6f74f3a58e647ca3a9cd38395ebf3"}], "stats": {"total": 344, "additions": 220, "deletions": 124}, "files": [{"sha": "328ce353e2a139351cf0c4ab75b55c0b9dc0eaa0", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -1504,6 +1504,7 @@ dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n+ \"rustc_back 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_mir 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -1611,7 +1612,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n  \"rustc_const_eval 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "ed440849b4826c7c2111b296ec84367f257aa74e", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -106,6 +106,7 @@ pub mod lint;\n \n pub mod middle {\n     pub mod allocator;\n+    pub mod borrowck;\n     pub mod expr_use_visitor;\n     pub mod const_val;\n     pub mod cstore;"}, {"sha": "d28963fc726abf5b6ffd9b89845d27dc12fdbeb3", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -222,6 +222,12 @@ declare_lint! {\n     \"unnecessary use of an `unsafe` block\"\n }\n \n+declare_lint! {\n+    pub UNUSED_MUT,\n+    Warn,\n+    \"detect mut variables which don't need to be mutable\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -263,7 +269,8 @@ impl LintPass for HardwiredLints {\n             PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n             LATE_BOUND_LIFETIME_ARGUMENTS,\n             DEPRECATED,\n-            UNUSED_UNSAFE\n+            UNUSED_UNSAFE,\n+            UNUSED_MUT\n         )\n     }\n }"}, {"sha": "c8690422b189302eea4ee2e4e4fed304cbe39eec", "filename": "src/librustc/middle/borrowck.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Fmiddle%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use ich::StableHashingContext;\n+use hir::HirId;\n+use util::nodemap::FxHashSet;\n+\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n+                                           StableHasherResult};\n+\n+pub struct BorrowCheckResult {\n+    pub used_mut_nodes: FxHashSet<HirId>,\n+}\n+\n+impl<'gcx> HashStable<StableHashingContext<'gcx>> for BorrowCheckResult {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'gcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let BorrowCheckResult {\n+            ref used_mut_nodes,\n+        } = *self;\n+        used_mut_nodes.hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "24ba38cf147796449be3a2883fba992892a54fff", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -898,11 +898,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub inhabitedness_cache: RefCell<FxHashMap<Ty<'tcx>, DefIdForest>>,\n \n-    /// Set of nodes which mark locals as mutable which end up getting used at\n-    /// some point. Local variable definitions not in this set can be warned\n-    /// about.\n-    pub used_mut_nodes: RefCell<NodeSet>,\n-\n     /// Caches the results of trait selection. This cache is used\n     /// for things that do not have to do with the parameters in scope.\n     pub selection_cache: traits::SelectionCache<'tcx>,\n@@ -1185,7 +1180,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             rcache: RefCell::new(FxHashMap()),\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),\n-            used_mut_nodes: RefCell::new(NodeSet()),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n             rvalue_promotable_to_static: RefCell::new(NodeMap()),"}, {"sha": "58405c261ad7239f73e4bef519aabbc78face5ba", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -15,6 +15,7 @@ use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, ItemLocalId};\n use hir::svh::Svh;\n use lint;\n+use middle::borrowck::BorrowCheckResult;\n use middle::const_val;\n use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary,\n                      ExternBodyNestedBodies};\n@@ -183,7 +184,7 @@ define_maps! { <'tcx>\n \n     [] fn coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n \n-    [] fn borrowck: BorrowCheck(DefId) -> (),\n+    [] fn borrowck: BorrowCheck(DefId) -> Rc<BorrowCheckResult>,\n     // FIXME: shouldn't this return a `Result<(), BorrowckErrors>` instead?\n     [] fn mir_borrowck: MirBorrowCheck(DefId) -> (),\n "}, {"sha": "4c09a9e003ddb8645645d717ce53a5e9cd53dd15", "filename": "src/librustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2FCargo.toml?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -15,5 +15,6 @@ syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n graphviz = { path = \"../libgraphviz\" }\n rustc = { path = \"../librustc\" }\n+rustc_back = { path = \"../librustc_back\" }\n rustc_mir = { path = \"../librustc_mir\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "6ce5afd4bf15f97c81d3a60b41c15e8ba47483ef", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -770,7 +770,8 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             let lp = opt_loan_path(&assignee_cmt).unwrap();\n             self.move_data.each_assignment_of(assignment_id, &lp, |assign| {\n                 if assignee_cmt.mutbl.is_mutable() {\n-                    self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n+                    let hir_id = self.bccx.tcx.hir.node_to_hir_id(local_id);\n+                    self.bccx.used_mut_nodes.borrow_mut().insert(hir_id);\n                 } else {\n                     self.bccx.report_reassigned_immutable_variable(\n                         assignment_span,"}, {"sha": "1827ddabe4e2a9d6c7f46e695a96f99166ddbafe", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -442,13 +442,13 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n             wrapped_path = match current_path.kind {\n                 LpVar(local_id) => {\n                     if !through_borrow {\n-                        self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n+                        let hir_id = self.bccx.tcx.hir.node_to_hir_id(local_id);\n+                        self.bccx.used_mut_nodes.borrow_mut().insert(hir_id);\n                     }\n                     None\n                 }\n                 LpUpvar(ty::UpvarId{ var_id, closure_expr_id: _ }) => {\n-                    let local_id = self.tcx().hir.hir_to_node_id(var_id);\n-                    self.tcx().used_mut_nodes.borrow_mut().insert(local_id);\n+                    self.bccx.used_mut_nodes.borrow_mut().insert(var_id);\n                     None\n                 }\n                 LpExtend(ref base, mc::McInherited, LpDeref(pointer_kind)) |"}, {"sha": "d29250ac57cfbeb10e9450046ab28aaf852912fd", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -20,13 +20,15 @@ pub use self::MovedValueUseKind::*;\n \n use self::InteriorKind::*;\n \n+use rustc::hir::HirId;\n use rustc::hir::map as hir_map;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n use rustc::middle::dataflow::DataFlowOperator;\n use rustc::middle::dataflow::KillFrom;\n+use rustc::middle::borrowck::BorrowCheckResult;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n@@ -37,7 +39,9 @@ use rustc::middle::free_region::RegionRelations;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc_mir::util::borrowck_errors::{BorrowckErrors, Origin};\n+use rustc::util::nodemap::FxHashSet;\n \n+use std::cell::RefCell;\n use std::fmt;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n@@ -54,6 +58,8 @@ pub mod gather_loans;\n \n pub mod move_data;\n \n+mod unused;\n+\n #[derive(Clone, Copy)]\n pub struct LoanDataFlowOperator;\n \n@@ -79,7 +85,9 @@ pub struct AnalysisData<'a, 'tcx: 'a> {\n     pub move_data: move_data::FlowedMoveData<'a, 'tcx>,\n }\n \n-fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n+fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n+    -> Rc<BorrowCheckResult>\n+{\n     debug!(\"borrowck(body_owner_def_id={:?})\", owner_def_id);\n \n     let owner_id = tcx.hir.as_local_node_id(owner_def_id).unwrap();\n@@ -91,7 +99,9 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n             // those things (notably the synthesized constructors from\n             // tuple structs/variants) do not have an associated body\n             // and do not need borrowchecking.\n-            return;\n+            return Rc::new(BorrowCheckResult {\n+                used_mut_nodes: FxHashSet(),\n+            })\n         }\n         _ => { }\n     }\n@@ -100,7 +110,14 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n     let tables = tcx.typeck_tables_of(owner_def_id);\n     let region_scope_tree = tcx.region_scope_tree(owner_def_id);\n     let body = tcx.hir.body(body_id);\n-    let bccx = &mut BorrowckCtxt { tcx, tables, region_scope_tree, owner_def_id, body };\n+    let mut bccx = BorrowckCtxt {\n+        tcx,\n+        tables,\n+        region_scope_tree,\n+        owner_def_id,\n+        body,\n+        used_mut_nodes: RefCell::new(FxHashSet()),\n+    };\n \n     // Eventually, borrowck will always read the MIR, but at the\n     // moment we do not. So, for now, we always force MIR to be\n@@ -118,14 +135,19 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId) {\n     if let Some(AnalysisData { all_loans,\n                                loans: loan_dfcx,\n                                move_data: flowed_moves }) =\n-        build_borrowck_dataflow_data(bccx, false, body_id,\n+        build_borrowck_dataflow_data(&mut bccx, false, body_id,\n                                      |bccx| {\n                                          cfg = Some(cfg::CFG::new(bccx.tcx, &body));\n                                          cfg.as_mut().unwrap()\n                                      })\n     {\n-        check_loans::check_loans(bccx, &loan_dfcx, &flowed_moves, &all_loans, body);\n+        check_loans::check_loans(&mut bccx, &loan_dfcx, &flowed_moves, &all_loans, body);\n     }\n+    unused::check(&mut bccx, body);\n+\n+    Rc::new(BorrowCheckResult {\n+        used_mut_nodes: bccx.used_mut_nodes.into_inner(),\n+    })\n }\n \n fn build_borrowck_dataflow_data<'a, 'c, 'tcx, F>(this: &mut BorrowckCtxt<'a, 'tcx>,\n@@ -198,7 +220,14 @@ pub fn build_borrowck_dataflow_data_for_fn<'a, 'tcx>(\n     let tables = tcx.typeck_tables_of(owner_def_id);\n     let region_scope_tree = tcx.region_scope_tree(owner_def_id);\n     let body = tcx.hir.body(body_id);\n-    let mut bccx = BorrowckCtxt { tcx, tables, region_scope_tree, owner_def_id, body };\n+    let mut bccx = BorrowckCtxt {\n+        tcx,\n+        tables,\n+        region_scope_tree,\n+        owner_def_id,\n+        body,\n+        used_mut_nodes: RefCell::new(FxHashSet()),\n+    };\n \n     let dataflow_data = build_borrowck_dataflow_data(&mut bccx, true, body_id, |_| cfg);\n     (bccx, dataflow_data.unwrap())\n@@ -219,6 +248,8 @@ pub struct BorrowckCtxt<'a, 'tcx: 'a> {\n     owner_def_id: DefId,\n \n     body: &'tcx hir::Body,\n+\n+    used_mut_nodes: RefCell<FxHashSet<HirId>>,\n }\n \n impl<'b, 'tcx: 'b> BorrowckErrors for BorrowckCtxt<'b, 'tcx> {"}, {"sha": "228824b663d66ed8114ffd37b048f9815836a117", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -0,0 +1,118 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n+use rustc::hir::{self, HirId};\n+use rustc::lint::builtin::UNUSED_MUT;\n+use rustc::ty;\n+use rustc::util::nodemap::{FxHashMap, FxHashSet};\n+use rustc_back::slice;\n+use syntax::ptr::P;\n+\n+use borrowck::BorrowckCtxt;\n+\n+pub fn check<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, body: &'tcx hir::Body) {\n+    let mut used_mut = bccx.used_mut_nodes.borrow().clone();\n+    UsedMutFinder {\n+        bccx,\n+        set: &mut used_mut,\n+    }.visit_expr(&body.value);\n+    let mut cx = UnusedMutCx { bccx, used_mut };\n+    for arg in body.arguments.iter() {\n+        cx.check_unused_mut_pat(slice::ref_slice(&arg.pat));\n+    }\n+    cx.visit_expr(&body.value);\n+}\n+\n+struct UsedMutFinder<'a, 'tcx: 'a> {\n+    bccx: &'a BorrowckCtxt<'a, 'tcx>,\n+    set: &'a mut FxHashSet<HirId>,\n+}\n+\n+struct UnusedMutCx<'a, 'tcx: 'a> {\n+    bccx: &'a BorrowckCtxt<'a, 'tcx>,\n+    used_mut: FxHashSet<HirId>,\n+}\n+\n+impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n+    fn check_unused_mut_pat(&self, pats: &[P<hir::Pat>]) {\n+        let tcx = self.bccx.tcx;\n+        let mut mutables = FxHashMap();\n+        for p in pats {\n+            p.each_binding(|_, id, span, path1| {\n+                let name = path1.node;\n+\n+                // Skip anything that looks like `_foo`\n+                if name.as_str().starts_with(\"_\") {\n+                    return\n+                }\n+\n+                // Skip anything that looks like `&foo` or `&mut foo`, only look\n+                // for by-value bindings\n+                let hir_id = tcx.hir.node_to_hir_id(id);\n+                let bm = match self.bccx.tables.pat_binding_modes().get(hir_id) {\n+                    Some(&bm) => bm,\n+                    None => span_bug!(span, \"missing binding mode\"),\n+                };\n+                match bm {\n+                    ty::BindByValue(hir::MutMutable) => {}\n+                    _ => return,\n+                }\n+\n+                mutables.entry(name).or_insert(Vec::new()).push((id, hir_id, span));\n+            });\n+        }\n+\n+        for (_name, ids) in mutables {\n+            // If any id for this name was used mutably then consider them all\n+            // ok, so move on to the next\n+            if ids.iter().any(|&(_, ref id, _)| self.used_mut.contains(id)) {\n+                continue\n+            }\n+\n+            let mut_span = tcx.sess.codemap().span_until_char(ids[0].2, ' ');\n+\n+            // Ok, every name wasn't used mutably, so issue a warning that this\n+            // didn't need to be mutable.\n+            tcx.struct_span_lint_node(UNUSED_MUT,\n+                                      ids[0].0,\n+                                      ids[0].2,\n+                                      \"variable does not need to be mutable\")\n+                .span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned())\n+                .emit();\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UnusedMutCx<'a, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.bccx.tcx.hir)\n+    }\n+\n+    fn visit_arm(&mut self, arm: &hir::Arm) {\n+        self.check_unused_mut_pat(&arm.pats)\n+    }\n+\n+    fn visit_local(&mut self, local: &hir::Local) {\n+        self.check_unused_mut_pat(slice::ref_slice(&local.pat));\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UsedMutFinder<'a, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::OnlyBodies(&self.bccx.tcx.hir)\n+    }\n+\n+    fn visit_nested_body(&mut self, id: hir::BodyId) {\n+        let def_id = self.bccx.tcx.hir.body_owner_def_id(id);\n+        self.set.extend(self.bccx.tcx.borrowck(def_id).used_mut_nodes.iter().cloned());\n+        self.visit_body(self.bccx.tcx.hir.body(id));\n+    }\n+}"}, {"sha": "78aacd49f807dafafc8ae37f7f29db8ed6e81e27", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -21,6 +21,7 @@\n extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_errors as errors;\n+extern crate rustc_back;\n \n // for \"clarity\", rename the graphviz crate to dot; graphviz within `borrowck`\n // refers to the borrowck-specific graphviz adapter traits."}, {"sha": "cebf52d5af7a9c2cf4f2686617bb3e60fdb5f1cd", "filename": "src/librustc_lint/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_lint%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_lint%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2FCargo.toml?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -12,7 +12,6 @@ test = false\n [dependencies]\n log = \"0.3\"\n rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "4ba7f7aa951f75c50de6c82a5c687a1dbe03f482", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -38,7 +38,6 @@ extern crate syntax;\n extern crate rustc;\n #[macro_use]\n extern crate log;\n-extern crate rustc_back;\n extern crate rustc_const_eval;\n extern crate syntax_pos;\n \n@@ -129,7 +128,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                  NonUpperCaseGlobals,\n                  NonShorthandFieldPatterns,\n                  UnsafeCode,\n-                 UnusedMut,\n                  UnusedAllocation,\n                  MissingCopyImplementations,\n                  UnstableFeatures,"}, {"sha": "a058f84e58806da255b7b2ade7159e7263301795", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 88, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -11,105 +11,18 @@\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc::ty::adjustment;\n-use util::nodemap::FxHashMap;\n use lint::{LateContext, EarlyContext, LintContext, LintArray};\n use lint::{LintPass, EarlyLintPass, LateLintPass};\n \n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n-\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate::{BUILTIN_ATTRIBUTES, AttributeType};\n-use syntax::symbol::keywords;\n-use syntax::ptr::P;\n use syntax::print::pprust;\n+use syntax::symbol::keywords;\n use syntax::util::parser;\n use syntax_pos::Span;\n \n-use rustc_back::slice;\n use rustc::hir;\n-use rustc::hir::intravisit::FnKind;\n-\n-declare_lint! {\n-    pub UNUSED_MUT,\n-    Warn,\n-    \"detect mut variables which don't need to be mutable\"\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct UnusedMut;\n-\n-impl UnusedMut {\n-    fn check_unused_mut_pat(&self, cx: &LateContext, pats: &[P<hir::Pat>]) {\n-        // collect all mutable pattern and group their NodeIDs by their Identifier to\n-        // avoid false warnings in match arms with multiple patterns\n-\n-        let mut mutables = FxHashMap();\n-        for p in pats {\n-            p.each_binding(|_, id, span, path1| {\n-                let hir_id = cx.tcx.hir.node_to_hir_id(id);\n-                let bm = match cx.tables.pat_binding_modes().get(hir_id) {\n-                    Some(&bm) => bm,\n-                    None => span_bug!(span, \"missing binding mode\"),\n-                };\n-                let name = path1.node;\n-                if let ty::BindByValue(hir::MutMutable) = bm {\n-                    if !name.as_str().starts_with(\"_\") {\n-                        match mutables.entry(name) {\n-                            Vacant(entry) => {\n-                                entry.insert(vec![id]);\n-                            }\n-                            Occupied(mut entry) => {\n-                                entry.get_mut().push(id);\n-                            }\n-                        }\n-                    }\n-                }\n-            });\n-        }\n-\n-        let used_mutables = cx.tcx.used_mut_nodes.borrow();\n-        for (_, v) in &mutables {\n-            if !v.iter().any(|e| used_mutables.contains(e)) {\n-                let binding_span = cx.tcx.hir.span(v[0]);\n-                let mut_span = cx.tcx.sess.codemap().span_until_char(binding_span, ' ');\n-                let mut err = cx.struct_span_lint(UNUSED_MUT,\n-                                                  binding_span,\n-                                                  \"variable does not need to be mutable\");\n-                err.span_suggestion_short(mut_span, \"remove this `mut`\", \"\".to_owned());\n-                err.emit();\n-            }\n-        }\n-    }\n-}\n-\n-impl LintPass for UnusedMut {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(UNUSED_MUT)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedMut {\n-    fn check_arm(&mut self, cx: &LateContext, a: &hir::Arm) {\n-        self.check_unused_mut_pat(cx, &a.pats)\n-    }\n-\n-    fn check_local(&mut self, cx: &LateContext, l: &hir::Local) {\n-        self.check_unused_mut_pat(cx, slice::ref_slice(&l.pat));\n-    }\n-\n-    fn check_fn(&mut self,\n-                cx: &LateContext,\n-                _: FnKind,\n-                _: &hir::FnDecl,\n-                body: &hir::Body,\n-                _: Span,\n-                _: ast::NodeId) {\n-        for a in &body.arguments {\n-            self.check_unused_mut_pat(cx, slice::ref_slice(&a.pat));\n-        }\n-    }\n-}\n \n declare_lint! {\n     pub UNUSED_MUST_USE,"}, {"sha": "9a69c52e6cfb45a78be7303a95cac92e33ef9dd2", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fdec805d035bae722ab6b587b21d8473521997dd/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fdec805d035bae722ab6b587b21d8473521997dd/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=fdec805d035bae722ab6b587b21d8473521997dd", "patch": "@@ -14,6 +14,20 @@ warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was\n    |\n    = note: #[warn(deprecated)] on by default\n \n+warning: variable does not need to be mutable\n+  --> $DIR/suggestions.rs:17:13\n+   |\n+17 |         let mut a = (1); // should suggest no `mut`, no parens\n+   |             ---^^\n+   |             |\n+   |             help: remove this `mut`\n+   |\n+note: lint level defined here\n+  --> $DIR/suggestions.rs:11:9\n+   |\n+11 | #![warn(unused_mut)] // UI tests pass `-A unused`\u2014see Issue #43896\n+   |         ^^^^^^^^^^\n+\n warning: denote infinite loops with `loop { ... }`\n   --> $DIR/suggestions.rs:16:5\n    |\n@@ -29,17 +43,3 @@ warning: denote infinite loops with `loop { ... }`\n    |\n    = note: #[warn(while_true)] on by default\n \n-warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:17:13\n-   |\n-17 |         let mut a = (1); // should suggest no `mut`, no parens\n-   |             ---^^\n-   |             |\n-   |             help: remove this `mut`\n-   |\n-note: lint level defined here\n-  --> $DIR/suggestions.rs:11:9\n-   |\n-11 | #![warn(unused_mut)] // UI tests pass `-A unused`\u2014see Issue #43896\n-   |         ^^^^^^^^^^\n-"}]}