{"sha": "f215ca9be63ad7d7b916115e729bacf927621cb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMTVjYTliZTYzYWQ3ZDdiOTE2MTE1ZTcyOWJhY2Y5Mjc2MjFjYjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T10:49:25Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "simplify negative bound diagnostic", "tree": {"sha": "c3b5bc38a51827557d9bad184e9dc43b5b6c21f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3b5bc38a51827557d9bad184e9dc43b5b6c21f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f215ca9be63ad7d7b916115e729bacf927621cb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f215ca9be63ad7d7b916115e729bacf927621cb8", "html_url": "https://github.com/rust-lang/rust/commit/f215ca9be63ad7d7b916115e729bacf927621cb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f215ca9be63ad7d7b916115e729bacf927621cb8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b073a1f4a61e69ed08ad116f5d545d4c553d235", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b073a1f4a61e69ed08ad116f5d545d4c553d235", "html_url": "https://github.com/rust-lang/rust/commit/4b073a1f4a61e69ed08ad116f5d545d4c553d235"}], "stats": {"total": 29, "additions": 8, "deletions": 21}, "files": [{"sha": "eadaf8ad716d39faaca610449d8985ce2f1c4fc5", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f215ca9be63ad7d7b916115e729bacf927621cb8/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f215ca9be63ad7d7b916115e729bacf927621cb8/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=f215ca9be63ad7d7b916115e729bacf927621cb8", "patch": "@@ -360,36 +360,24 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, GenericBounds> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n-        let mut last_plus_span = None;\n-        let mut was_negative = false;\n         while self.can_begin_bound() {\n-            match self.parse_generic_bound(colon_span, last_plus_span)? {\n+            match self.parse_generic_bound()? {\n                 Ok(bound) => bounds.push(bound),\n-                Err(neg_sp) => {\n-                    was_negative = true;\n-                    if let Some(neg_sp) = neg_sp {\n-                        negative_bounds.push(neg_sp);\n-                    }\n-                }\n+                Err(neg_sp) => negative_bounds.push(neg_sp),\n             }\n-\n             if !allow_plus || !self.eat_plus() {\n                 break\n-            } else {\n-                last_plus_span = Some(self.prev_span);\n             }\n         }\n \n-        if !negative_bounds.is_empty() || was_negative {\n+        if !negative_bounds.is_empty() {\n             let negative_bounds_len = negative_bounds.len();\n-            let last_span = negative_bounds.last().map(|sp| *sp);\n+            let last_span = *negative_bounds.last().unwrap();\n             let mut err = self.struct_span_err(\n                 negative_bounds,\n                 \"negative trait bounds are not supported\",\n             );\n-            if let Some(sp) = last_span {\n-                err.span_label(sp, \"negative trait bounds are not supported\");\n-            }\n+            err.span_label(last_span, \"negative trait bounds are not supported\");\n             if let Some(bound_list) = colon_span {\n                 let bound_list = bound_list.to(self.prev_span);\n                 let mut new_bound_list = String::new();\n@@ -432,9 +420,8 @@ impl<'a> Parser<'a> {\n     /// ```\n     fn parse_generic_bound(\n         &mut self,\n-        colon_span: Option<Span>,\n-        last_plus_span: Option<Span>,\n-    ) -> PResult<'a, Result<GenericBound, Option<Span>>> {\n+    ) -> PResult<'a, Result<GenericBound, Span>> {\n+        let anchor_lo = self.prev_span;\n         let lo = self.token.span;\n         let has_parens = self.eat(&token::OpenDelim(token::Paren));\n         let inner_lo = self.token.span;\n@@ -445,7 +432,7 @@ impl<'a> Parser<'a> {\n         } else {\n             let (poly_span, bound) = self.parse_generic_ty_bound(lo, has_parens, question)?;\n             if is_negative {\n-                Ok(Err(last_plus_span.or(colon_span).map(|sp| sp.to(poly_span))))\n+                Ok(Err(anchor_lo.to(poly_span)))\n             } else {\n                 Ok(Ok(bound))\n             }"}]}