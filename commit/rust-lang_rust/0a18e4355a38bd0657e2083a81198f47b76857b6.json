{"sha": "0a18e4355a38bd0657e2083a81198f47b76857b6", "node_id": "C_kwDOAAsO6NoAKDBhMThlNDM1NWEzOGJkMDY1N2UyMDgzYTgxMTk4ZjQ3Yjc2ODU3YjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-17T13:14:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-17T13:14:26Z"}, "message": "Merge #11740\n\n11740: Insert #[must_use] in generate_is_empty_from_len r=lnicola a=Walther\n\nInserts `#[must_use]` for the generated `is_empty` methods. I also added the `#[must_use]` for the `len()` methods in the documentation examples and tests for this generator while at it, to make sure they too encourage the use of the annotation.\r\n\r\nFrom discussion in https://github.com/rust-analyzer/rust-analyzer/issues/11736 and https://github.com/rust-analyzer/rust-analyzer/pull/11738\n\nCo-authored-by: Walther <veeti.haapsamo@gmail.com>", "tree": {"sha": "95fee89bc073a7651d99bf32540fa48fc2da948d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95fee89bc073a7651d99bf32540fa48fc2da948d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a18e4355a38bd0657e2083a81198f47b76857b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMzQyCRBK7hj4Ov3rIwAAXHwIALE1g6opPY+Y14hlS1A4zfHz\n12/vgaWJ931oQmM30lWrrohURRwCiT9T4xFELHWX+V6mUKzm27LIQ987E/TYUcdu\nGPk4bQbZMOZUzRBQBkL8I+XfSGt5q22/AH+Q1M2myTc2grIznKkVLmH/i9j/WpJs\n95In2RA0vni7xre877LIaofshtdanzDRVWP028Iaj81174UfiF7OTutM58LO8GnD\n9GRgA0eXaE0lA3kYnnfVMzo7daT0c6+j67ybHKHlJIM1DPBYvZcpAOLlm+0qtA9C\n6lV2YVTP7gV9p9NebHhcsm4HgKis7JnR63AtX2Yif0j+5jpYidjxpy6gw0OON9U=\n=Bzdp\n-----END PGP SIGNATURE-----\n", "payload": "tree 95fee89bc073a7651d99bf32540fa48fc2da948d\nparent 502e30e6767ef26cf56158a92b47b3b8e9b63235\nparent 217b30568ed8dc6e11df9978a31747cb1fc9a094\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647522866 +0000\ncommitter GitHub <noreply@github.com> 1647522866 +0000\n\nMerge #11740\n\n11740: Insert #[must_use] in generate_is_empty_from_len r=lnicola a=Walther\n\nInserts `#[must_use]` for the generated `is_empty` methods. I also added the `#[must_use]` for the `len()` methods in the documentation examples and tests for this generator while at it, to make sure they too encourage the use of the annotation.\r\n\r\nFrom discussion in https://github.com/rust-analyzer/rust-analyzer/issues/11736 and https://github.com/rust-analyzer/rust-analyzer/pull/11738\n\nCo-authored-by: Walther <veeti.haapsamo@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a18e4355a38bd0657e2083a81198f47b76857b6", "html_url": "https://github.com/rust-lang/rust/commit/0a18e4355a38bd0657e2083a81198f47b76857b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a18e4355a38bd0657e2083a81198f47b76857b6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "502e30e6767ef26cf56158a92b47b3b8e9b63235", "url": "https://api.github.com/repos/rust-lang/rust/commits/502e30e6767ef26cf56158a92b47b3b8e9b63235", "html_url": "https://github.com/rust-lang/rust/commit/502e30e6767ef26cf56158a92b47b3b8e9b63235"}, {"sha": "217b30568ed8dc6e11df9978a31747cb1fc9a094", "url": "https://api.github.com/repos/rust-lang/rust/commits/217b30568ed8dc6e11df9978a31747cb1fc9a094", "html_url": "https://github.com/rust-lang/rust/commit/217b30568ed8dc6e11df9978a31747cb1fc9a094"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "bd7c85c443026240b74051a3514b8e85dafcaf8f", "filename": "crates/ide_assists/src/handlers/generate_is_empty_from_len.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a18e4355a38bd0657e2083a81198f47b76857b6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a18e4355a38bd0657e2083a81198f47b76857b6/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_is_empty_from_len.rs?ref=0a18e4355a38bd0657e2083a81198f47b76857b6", "patch": "@@ -17,6 +17,7 @@ use crate::{\n // struct MyStruct { data: Vec<String> }\n //\n // impl MyStruct {\n+//     #[must_use]\n //     p$0ub fn len(&self) -> usize {\n //         self.data.len()\n //     }\n@@ -27,10 +28,12 @@ use crate::{\n // struct MyStruct { data: Vec<String> }\n //\n // impl MyStruct {\n+//     #[must_use]\n //     pub fn len(&self) -> usize {\n //         self.data.len()\n //     }\n //\n+//     #[must_use]\n //     pub fn is_empty(&self) -> bool {\n //         self.len() == 0\n //     }\n@@ -72,6 +75,7 @@ pub(crate) fn generate_is_empty_from_len(acc: &mut Assists, ctx: &AssistContext)\n         |builder| {\n             let code = r#\"\n \n+    #[must_use]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\"#\n@@ -129,6 +133,7 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     p$0ub fn len(&self, _i: bool) -> usize {\n         self.data.len()\n     }\n@@ -146,10 +151,12 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n     }\n \n+    #[must_use]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -167,6 +174,7 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     p$0ub fn len(&self) -> u32 {\n         self.data.len()\n     }\n@@ -183,6 +191,7 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n     }\n@@ -192,10 +201,12 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     pub fn len(&self) -> usize {\n         self.data.len()\n     }\n \n+    #[must_use]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -212,10 +223,12 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     pub fn new() -> Self {\n         Self { data: 0 }\n     }\n \n+    #[must_use]\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n     }\n@@ -229,14 +242,17 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     pub fn new() -> Self {\n         Self { data: 0 }\n     }\n \n+    #[must_use]\n     pub fn len(&self) -> usize {\n         self.data.len()\n     }\n \n+    #[must_use]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -257,12 +273,14 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n     }\n }\n \n impl MyStruct {\n+    #[must_use]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}, {"sha": "84c130ffa86f071c61faa1ea4e3c1faf273441a5", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a18e4355a38bd0657e2083a81198f47b76857b6/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a18e4355a38bd0657e2083a81198f47b76857b6/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=0a18e4355a38bd0657e2083a81198f47b76857b6", "patch": "@@ -1099,6 +1099,7 @@ fn doctest_generate_is_empty_from_len() {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     p$0ub fn len(&self) -> usize {\n         self.data.len()\n     }\n@@ -1108,10 +1109,12 @@ impl MyStruct {\n struct MyStruct { data: Vec<String> }\n \n impl MyStruct {\n+    #[must_use]\n     pub fn len(&self) -> usize {\n         self.data.len()\n     }\n \n+    #[must_use]\n     pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }"}]}