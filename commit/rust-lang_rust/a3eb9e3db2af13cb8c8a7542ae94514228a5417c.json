{"sha": "a3eb9e3db2af13cb8c8a7542ae94514228a5417c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZWI5ZTNkYjJhZjEzY2I4YzhhNzU0MmFlOTQ1MTQyMjhhNTQxN2M=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-06-08T20:52:57Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-06-24T08:30:48Z"}, "message": "Add `BuildHasher::hash_of` as unstable", "tree": {"sha": "fa50f8be32e1721570111ceabe8b544d21211365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa50f8be32e1721570111ceabe8b544d21211365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3eb9e3db2af13cb8c8a7542ae94514228a5417c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3eb9e3db2af13cb8c8a7542ae94514228a5417c", "html_url": "https://github.com/rust-lang/rust/commit/a3eb9e3db2af13cb8c8a7542ae94514228a5417c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3eb9e3db2af13cb8c8a7542ae94514228a5417c/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "964a81eb37db6ee33b8fc107582618bf2befe02d", "url": "https://api.github.com/repos/rust-lang/rust/commits/964a81eb37db6ee33b8fc107582618bf2befe02d", "html_url": "https://github.com/rust-lang/rust/commit/964a81eb37db6ee33b8fc107582618bf2befe02d"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "28f98d983c76840b46d84481fa044ef31ad83e33", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a3eb9e3db2af13cb8c8a7542ae94514228a5417c/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3eb9e3db2af13cb8c8a7542ae94514228a5417c/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=a3eb9e3db2af13cb8c8a7542ae94514228a5417c", "patch": "@@ -481,6 +481,50 @@ pub trait BuildHasher {\n     /// ```\n     #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n     fn build_hasher(&self) -> Self::Hasher;\n+\n+    /// Calculates the hash of a single value.\n+    ///\n+    /// This is intended as a convenience for code which *consumes* hashes, such\n+    /// as the implementation of a hash table or in unit tests that check\n+    /// whether a custom [`Hash`] implementation behaves as expected.\n+    ///\n+    /// This must not be used in any code which *creates* hashes, such as in an\n+    /// implementation of [`Hash`].  The way to create a combined hash of\n+    /// multiple values is to call [`Hash::hash`] multiple times using the same\n+    /// [`Hasher`], not to call this method repeatedly and combine the results.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(build_hasher_simple_hash_of)]\n+    ///\n+    /// use std::cmp::{max, min};\n+    /// use std::hash::{BuildHasher, Hash, Hasher};\n+    /// struct OrderAmbivalentPair<T: Ord>(T, T);\n+    /// impl<T: Ord + Hash> Hash for OrderAmbivalentPair<T> {\n+    ///     fn hash<H: Hasher>(&self, hasher: &mut H) {\n+    ///         min(&self.0, &self.1).hash(hasher);\n+    ///         max(&self.0, &self.1).hash(hasher);\n+    ///     }\n+    /// }\n+    ///\n+    /// // Then later, in a `#[test]` for the type...\n+    /// let bh = std::collections::hash_map::RandomState::new();\n+    /// assert_eq!(\n+    ///     bh.hash_of(OrderAmbivalentPair(1, 2)),\n+    ///     bh.hash_of(OrderAmbivalentPair(2, 1))\n+    /// );\n+    /// assert_eq!(\n+    ///     bh.hash_of(OrderAmbivalentPair(10, 2)),\n+    ///     bh.hash_of(&OrderAmbivalentPair(2, 10))\n+    /// );\n+    /// ```\n+    #[unstable(feature = \"build_hasher_simple_hash_of\", issue = \"88888888\")]\n+    fn hash_of<T: Hash>(&self, x: T) -> u64 {\n+        let mut hasher = self.build_hasher();\n+        x.hash(&mut hasher);\n+        hasher.finish()\n+    }\n }\n \n /// Used to create a default [`BuildHasher`] instance for types that implement"}]}