{"sha": "4ed7fd1ecc94eb82d99fe18192c156f367029731", "node_id": "C_kwDOAAsO6NoAKDRlZDdmZDFlY2M5NGViODJkOTlmZTE4MTkyYzE1NmYzNjcwMjk3MzE", "commit": {"author": {"name": "Icxolu", "email": "10486322+Icxolu@users.noreply.github.com", "date": "2023-05-03T18:07:02Z"}, "committer": {"name": "Icxolu", "email": "10486322+Icxolu@users.noreply.github.com", "date": "2023-05-03T18:55:14Z"}, "message": "fix failing tests", "tree": {"sha": "770f7055cafb4b9a1364483aa3232ddaf483ec79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/770f7055cafb4b9a1364483aa3232ddaf483ec79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed7fd1ecc94eb82d99fe18192c156f367029731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed7fd1ecc94eb82d99fe18192c156f367029731", "html_url": "https://github.com/rust-lang/rust/commit/4ed7fd1ecc94eb82d99fe18192c156f367029731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed7fd1ecc94eb82d99fe18192c156f367029731/comments", "author": {"login": "Icxolu", "id": 10486322, "node_id": "MDQ6VXNlcjEwNDg2MzIy", "avatar_url": "https://avatars.githubusercontent.com/u/10486322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Icxolu", "html_url": "https://github.com/Icxolu", "followers_url": "https://api.github.com/users/Icxolu/followers", "following_url": "https://api.github.com/users/Icxolu/following{/other_user}", "gists_url": "https://api.github.com/users/Icxolu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Icxolu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Icxolu/subscriptions", "organizations_url": "https://api.github.com/users/Icxolu/orgs", "repos_url": "https://api.github.com/users/Icxolu/repos", "events_url": "https://api.github.com/users/Icxolu/events{/privacy}", "received_events_url": "https://api.github.com/users/Icxolu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Icxolu", "id": 10486322, "node_id": "MDQ6VXNlcjEwNDg2MzIy", "avatar_url": "https://avatars.githubusercontent.com/u/10486322?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Icxolu", "html_url": "https://github.com/Icxolu", "followers_url": "https://api.github.com/users/Icxolu/followers", "following_url": "https://api.github.com/users/Icxolu/following{/other_user}", "gists_url": "https://api.github.com/users/Icxolu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Icxolu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Icxolu/subscriptions", "organizations_url": "https://api.github.com/users/Icxolu/orgs", "repos_url": "https://api.github.com/users/Icxolu/repos", "events_url": "https://api.github.com/users/Icxolu/events{/privacy}", "received_events_url": "https://api.github.com/users/Icxolu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8701009860273828cb6853e1dba79a82e1271619", "url": "https://api.github.com/repos/rust-lang/rust/commits/8701009860273828cb6853e1dba79a82e1271619", "html_url": "https://github.com/rust-lang/rust/commit/8701009860273828cb6853e1dba79a82e1271619"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "e6331290420b47bb5604792fc516a6e755c7112f", "filename": "tests/ui/box_default.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "34a05a29c5aa343ff21993aaf256833c2639ef4c", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::box_default)]\n+#![allow(clippy::default_constructed_unit_structs)]\n \n #[derive(Default)]\n struct ImplementsDefault;"}, {"sha": "c9834863601446b21d7325d316111a70ad10e79e", "filename": "tests/ui/box_default.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -1,97 +1,97 @@\n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:22:32\n+  --> $DIR/box_default.rs:23:32\n    |\n LL |     let _string: Box<String> = Box::new(Default::default());\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n    |\n    = note: `-D clippy::box-default` implied by `-D warnings`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:23:17\n+  --> $DIR/box_default.rs:24:17\n    |\n LL |     let _byte = Box::new(u8::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<u8>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:24:16\n+  --> $DIR/box_default.rs:25:16\n    |\n LL |     let _vec = Box::new(Vec::<u8>::new());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<u8>>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:25:17\n+  --> $DIR/box_default.rs:26:17\n    |\n LL |     let _impl = Box::new(ImplementsDefault::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:26:18\n+  --> $DIR/box_default.rs:27:18\n    |\n LL |     let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:27:42\n+  --> $DIR/box_default.rs:28:42\n    |\n LL |     let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:29:28\n+  --> $DIR/box_default.rs:30:28\n    |\n LL |     let _in_macro = outer!(Box::new(String::new()));\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:30:34\n+  --> $DIR/box_default.rs:31:34\n    |\n LL |     let _string_default = outer!(Box::new(String::from(\"\")));\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:31:46\n+  --> $DIR/box_default.rs:32:46\n    |\n LL |     let _vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);\n    |                                              ^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:32:33\n+  --> $DIR/box_default.rs:33:33\n    |\n LL |     let _vec3: Box<Vec<bool>> = Box::new(Vec::from([]));\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:33:25\n+  --> $DIR/box_default.rs:34:25\n    |\n LL |     let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<bool>>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:35:16\n+  --> $DIR/box_default.rs:36:16\n    |\n LL |     call_ty_fn(Box::new(u8::default()));\n    |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:40:5\n+  --> $DIR/box_default.rs:41:5\n    |\n LL |     Box::new(bool::default())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:57:28\n+  --> $DIR/box_default.rs:58:28\n    |\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:66:17\n+  --> $DIR/box_default.rs:67:17\n    |\n LL |         let _ = Box::new(WeirdPathed::default());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:78:18\n+  --> $DIR/box_default.rs:79:18\n    |\n LL |             Some(Box::new(Foo::default()))\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Foo>::default()`"}, {"sha": "d18f93875658c90105d6cc7572c7facfdf915a46", "filename": "tests/ui/from_over_into.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Ffrom_over_into.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Ffrom_over_into.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.fixed?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -32,7 +32,7 @@ struct SelfKeywords;\n \n impl From<X> for SelfKeywords {\n     fn from(val: X) -> Self {\n-        let _ = X::default();\n+        let _ = X;\n         let _ = X::FOO;\n         let _: X = val;\n "}, {"sha": "de8ff0b06bdca3a744dc467aeaeda58f969673ce", "filename": "tests/ui/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -32,7 +32,7 @@ struct SelfKeywords;\n \n impl Into<SelfKeywords> for X {\n     fn into(self) -> SelfKeywords {\n-        let _ = Self::default();\n+        let _ = Self;\n         let _ = Self::FOO;\n         let _: Self = self;\n "}, {"sha": "6039f86fe6703d05d7f58b3f1d44be113287efec", "filename": "tests/ui/from_over_into.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -35,7 +35,7 @@ help: replace the `Into` implementation with `From<X>`\n    |\n LL ~ impl From<X> for SelfKeywords {\n LL ~     fn from(val: X) -> Self {\n-LL ~         let _ = X::default();\n+LL ~         let _ = X;\n LL ~         let _ = X::FOO;\n LL ~         let _: X = val;\n    |"}, {"sha": "20138a29fd1f148072adf6b51445be76e35079b2", "filename": "tests/ui/use_self_trait.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fuse_self_trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fuse_self_trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.fixed?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -33,7 +33,7 @@ impl SelfTrait for Bad {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n \n@@ -70,7 +70,7 @@ impl SelfTrait for Good {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n "}, {"sha": "bf697b01a42f7b6731f68641c756179ed8f29462", "filename": "tests/ui/use_self_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fuse_self_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fuse_self_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.rs?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -33,7 +33,7 @@ impl SelfTrait for Bad {\n     fn nested(_p1: Box<Bad>, _p2: (&u8, &Bad)) {}\n \n     fn vals(_: Bad) -> Bad {\n-        Bad::default()\n+        Bad\n     }\n }\n \n@@ -70,7 +70,7 @@ impl SelfTrait for Good {\n     fn nested(_p1: Box<Self>, _p2: (&u8, &Self)) {}\n \n     fn vals(_: Self) -> Self {\n-        Self::default()\n+        Self\n     }\n }\n "}, {"sha": "6257f802dd80a0c4eefb06f3ae4f00bd643dfd2a", "filename": "tests/ui/use_self_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fuse_self_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ed7fd1ecc94eb82d99fe18192c156f367029731/tests%2Fui%2Fuse_self_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self_trait.stderr?ref=4ed7fd1ecc94eb82d99fe18192c156f367029731", "patch": "@@ -63,7 +63,7 @@ LL |     fn vals(_: Bad) -> Bad {\n error: unnecessary structure name repetition\n   --> $DIR/use_self_trait.rs:36:9\n    |\n-LL |         Bad::default()\n+LL |         Bad\n    |         ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition"}]}