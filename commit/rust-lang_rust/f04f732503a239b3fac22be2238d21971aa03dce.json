{"sha": "f04f732503a239b3fac22be2238d21971aa03dce", "node_id": "C_kwDOAAsO6NoAKGYwNGY3MzI1MDNhMjM5YjNmYWMyMmJlMjIzOGQyMTk3MWFhMDNkY2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-01-12T03:00:34Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-18T02:45:53Z"}, "message": "Add more information to `impl Trait` deny error", "tree": {"sha": "b848c0b433f28671140d28d48ac5b14b13458706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b848c0b433f28671140d28d48ac5b14b13458706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f04f732503a239b3fac22be2238d21971aa03dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f04f732503a239b3fac22be2238d21971aa03dce", "html_url": "https://github.com/rust-lang/rust/commit/f04f732503a239b3fac22be2238d21971aa03dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f04f732503a239b3fac22be2238d21971aa03dce/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73a7423e77b49a99e270531fbadda5b8899df3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/73a7423e77b49a99e270531fbadda5b8899df3f6", "html_url": "https://github.com/rust-lang/rust/commit/73a7423e77b49a99e270531fbadda5b8899df3f6"}], "stats": {"total": 697, "additions": 487, "deletions": 210}, "files": [{"sha": "3a7e0a70585f125e53d264d2e16e8e3e70043141", "filename": "compiler/rustc_ast_lowering/src/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fblock.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let ty = l\n             .ty\n             .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n         let init = l.kind.init().map(|init| self.lower_expr(init));\n         let hir_id = self.lower_node_id(l.id);\n         let pat = self.lower_pat(&l.pat);\n@@ -127,7 +127,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let ty = local\n             .ty\n             .as_ref()\n-            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Binding)));\n+            .map(|t| self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Variable)));\n         let span = self.lower_span(local.span);\n         let span = self.mark_span_with_reason(DesugaringKind::LetElse, span, None);\n         let init = self.lower_expr(init);"}, {"sha": "d48ff10b97d9181145efb0f6f32e8fddcd3cbf36", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,3 +1,5 @@\n+use crate::{FnDeclKind, ImplTraitPosition};\n+\n use super::{ImplTraitContext, LoweringContext, ParamMode, ParenthesizedGenericArgs};\n \n use rustc_ast::attr;\n@@ -53,7 +55,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ParamMode::Optional,\n                         0,\n                         ParenthesizedGenericArgs::Err,\n-                        ImplTraitContext::disallowed(),\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     ));\n                     let args = self.lower_exprs(args);\n                     hir::ExprKind::MethodCall(hir_seg, args, self.lower_span(span))\n@@ -74,12 +76,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }\n                 ExprKind::Cast(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                    let ty =\n+                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Cast(expr, ty)\n                 }\n                 ExprKind::Type(ref expr, ref ty) => {\n                     let expr = self.lower_expr(expr);\n-                    let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                    let ty =\n+                        self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ExprKind::Type(expr, ty)\n                 }\n                 ExprKind::AddrOf(k, m, ref ohs) => {\n@@ -203,7 +207,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::disallowed(),\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     hir::ExprKind::Path(qpath)\n                 }\n@@ -239,7 +243,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                             &se.qself,\n                             &se.path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         )),\n                         self.arena\n                             .alloc_from_iter(se.fields.iter().map(|x| self.lower_expr_field(x))),\n@@ -538,7 +542,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n     ) -> hir::ExprKind<'hir> {\n         let output = match ret_ty {\n-            Some(ty) => hir::FnRetTy::Return(self.lower_ty(&ty, ImplTraitContext::disallowed())),\n+            Some(ty) => hir::FnRetTy::Return(\n+                self.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::AsyncBlock)),\n+            ),\n             None => hir::FnRetTy::DefaultReturn(self.lower_span(span)),\n         };\n \n@@ -827,7 +833,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // Lower outside new scope to preserve `is_in_loop_condition`.\n-        let fn_decl = self.lower_fn_decl(decl, None, false, None);\n+        let fn_decl = self.lower_fn_decl(decl, None, FnDeclKind::Closure, None);\n \n         hir::ExprKind::Closure(\n             capture_clause,\n@@ -919,7 +925,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // We need to lower the declaration outside the new scope, because we\n         // have to conserve the state of being inside a loop condition for the\n         // closure argument types.\n-        let fn_decl = self.lower_fn_decl(&outer_decl, None, false, None);\n+        let fn_decl = self.lower_fn_decl(&outer_decl, None, FnDeclKind::Closure, None);\n \n         hir::ExprKind::Closure(\n             capture_clause,\n@@ -1064,7 +1070,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         qself,\n                         path,\n                         ParamMode::Optional,\n-                        ImplTraitContext::disallowed(),\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a tuple struct.\n                     let tuple_struct_pat =\n@@ -1089,7 +1095,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     &se.qself,\n                     &se.path,\n                     ParamMode::Optional,\n-                    ImplTraitContext::disallowed(),\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 );\n                 let fields_omitted = match &se.rest {\n                     StructRest::Base(e) => {"}, {"sha": "6489c729cfe50dcbb9e4c8e31f62d10c681cbc1b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 103, "deletions": 45, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,6 +1,6 @@\n use super::{AnonymousLifetimeMode, LoweringContext, ParamMode};\n use super::{ImplTraitContext, ImplTraitPosition};\n-use crate::Arena;\n+use crate::{Arena, FnDeclKind};\n \n use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, FnCtxt, FnKind, Visitor};\n@@ -246,7 +246,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         AnonymousLifetimeMode::PassThrough,\n                         |this, idty| {\n                             let ret_id = asyncness.opt_return_id();\n-                            this.lower_fn_decl(&decl, Some((fn_def_id, idty)), true, ret_id)\n+                            this.lower_fn_decl(\n+                                &decl,\n+                                Some((fn_def_id, idty)),\n+                                FnDeclKind::Fn,\n+                                ret_id,\n+                            )\n                         },\n                     );\n                     let sig = hir::FnSig {\n@@ -287,12 +292,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         capturable_lifetimes: &mut FxHashSet::default(),\n                     },\n                 );\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n             ItemKind::TyAlias(box TyAlias { ref generics, ty: None, .. }) => {\n                 let ty = self.arena.alloc(self.ty(span, hir::TyKind::Err));\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 hir::ItemKind::TyAlias(ty, generics)\n             }\n             ItemKind::Enum(ref enum_definition, ref generics) => hir::ItemKind::Enum(\n@@ -301,20 +312,29 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         enum_definition.variants.iter().map(|x| self.lower_variant(x)),\n                     ),\n                 },\n-                self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                ),\n             ),\n             ItemKind::Struct(ref struct_def, ref generics) => {\n                 let struct_def = self.lower_variant_data(hir_id, struct_def);\n                 hir::ItemKind::Struct(\n                     struct_def,\n-                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                    self.lower_generics(\n+                        generics,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n                 )\n             }\n             ItemKind::Union(ref vdata, ref generics) => {\n                 let vdata = self.lower_variant_data(hir_id, vdata);\n                 hir::ItemKind::Union(\n                     vdata,\n-                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                    self.lower_generics(\n+                        generics,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n                 )\n             }\n             ItemKind::Impl(box Impl {\n@@ -347,10 +367,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     AnonymousLifetimeMode::CreateParameter,\n                     |this, _| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n-                            this.lower_trait_ref(trait_ref, ImplTraitContext::disallowed())\n+                            this.lower_trait_ref(\n+                                trait_ref,\n+                                ImplTraitContext::Disallowed(ImplTraitPosition::Trait),\n+                            )\n                         });\n \n-                        let lowered_ty = this.lower_ty(ty, ImplTraitContext::disallowed());\n+                        let lowered_ty = this\n+                            .lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n \n                         (trait_ref, lowered_ty)\n                     },\n@@ -390,21 +414,33 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ref bounds,\n                 ref items,\n             }) => {\n-                let bounds = self.lower_param_bounds(bounds, ImplTraitContext::disallowed());\n+                let bounds = self.lower_param_bounds(\n+                    bounds,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                );\n                 let items = self\n                     .arena\n                     .alloc_from_iter(items.iter().map(|item| self.lower_trait_item_ref(item)));\n                 hir::ItemKind::Trait(\n                     is_auto,\n                     self.lower_unsafety(unsafety),\n-                    self.lower_generics(generics, ImplTraitContext::disallowed()),\n+                    self.lower_generics(\n+                        generics,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n                     bounds,\n                     items,\n                 )\n             }\n             ItemKind::TraitAlias(ref generics, ref bounds) => hir::ItemKind::TraitAlias(\n-                self.lower_generics(generics, ImplTraitContext::disallowed()),\n-                self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n+                self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                ),\n+                self.lower_param_bounds(\n+                    bounds,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                ),\n             ),\n             ItemKind::MacroDef(MacroDef { ref body, macro_rules }) => {\n                 let body = P(self.lower_mac_args(body));\n@@ -423,7 +459,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         span: Span,\n         body: Option<&Expr>,\n     ) -> (&'hir hir::Ty<'hir>, hir::BodyId) {\n-        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Binding));\n+        let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n         (ty, self.lower_const_body(span, body))\n     }\n \n@@ -667,7 +703,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         |this, _| {\n                             (\n                                 // Disallow `impl Trait` in foreign items.\n-                                this.lower_fn_decl(fdec, None, false, None),\n+                                this.lower_fn_decl(fdec, None, FnDeclKind::ExternFn, None),\n                                 this.lower_fn_params_to_names(fdec),\n                             )\n                         },\n@@ -676,7 +712,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     hir::ForeignItemKind::Fn(fn_dec, fn_args, generics)\n                 }\n                 ForeignItemKind::Static(ref t, m, _) => {\n-                    let ty = self.lower_ty(t, ImplTraitContext::disallowed());\n+                    let ty =\n+                        self.lower_ty(t, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                     hir::ForeignItemKind::Static(ty, m)\n                 }\n                 ForeignItemKind::TyAlias(..) => hir::ForeignItemKind::Type,\n@@ -744,11 +781,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 qself,\n                 path,\n                 ParamMode::ExplicitNamed, // no `'_` in declarations (Issue #61124)\n-                ImplTraitContext::disallowed(),\n+                ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n             );\n             self.arena.alloc(t)\n         } else {\n-            self.lower_ty(&f.ty, ImplTraitContext::disallowed())\n+            self.lower_ty(&f.ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n         };\n         let hir_id = self.lower_node_id(f.id);\n         self.lower_attrs(hir_id, &f.attrs);\n@@ -771,14 +808,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 let body = default.as_ref().map(|x| self.lower_const_body(i.span, Some(x)));\n                 (hir::Generics::empty(), hir::TraitItemKind::Const(ty, body))\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: None, .. }) => {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n-                let (generics, sig) =\n-                    self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n+                let (generics, sig) = self.lower_method_sig(\n+                    generics,\n+                    sig,\n+                    trait_item_def_id,\n+                    FnDeclKind::Trait,\n+                    None,\n+                );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Required(names)))\n             }\n             AssocItemKind::Fn(box Fn { ref sig, ref generics, body: Some(ref body), .. }) => {\n@@ -789,16 +831,24 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     generics,\n                     sig,\n                     trait_item_def_id,\n-                    false,\n+                    FnDeclKind::Trait,\n                     asyncness.opt_return_id(),\n                 );\n                 (generics, hir::TraitItemKind::Fn(sig, hir::TraitFn::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(box TyAlias { ref generics, ref bounds, ref ty, .. }) => {\n-                let ty = ty.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let ty = ty.as_ref().map(|x| {\n+                    self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n+                });\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 let kind = hir::TraitItemKind::Type(\n-                    self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n+                    self.lower_param_bounds(\n+                        bounds,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                    ),\n                     ty,\n                 );\n \n@@ -850,7 +900,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n-                let ty = self.lower_ty(ty, ImplTraitContext::disallowed());\n+                let ty = self.lower_ty(ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type));\n                 (\n                     hir::Generics::empty(),\n                     hir::ImplItemKind::Const(ty, self.lower_const_body(i.span, expr.as_deref())),\n@@ -861,19 +911,21 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n                     self.lower_maybe_async_body(i.span, &sig.decl, asyncness, body.as_deref());\n-                let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n                     generics,\n                     sig,\n                     impl_item_def_id,\n-                    impl_trait_return_allow,\n+                    if self.is_in_trait_impl { FnDeclKind::Impl } else { FnDeclKind::Inherent },\n                     asyncness.opt_return_id(),\n                 );\n \n                 (generics, hir::ImplItemKind::Fn(sig, body_id))\n             }\n             AssocItemKind::TyAlias(box TyAlias { generics, ty, .. }) => {\n-                let generics = self.lower_generics(generics, ImplTraitContext::disallowed());\n+                let generics = self.lower_generics(\n+                    generics,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                );\n                 let kind = match ty {\n                     None => {\n                         let ty = self.arena.alloc(self.ty(i.span, hir::TyKind::Err));\n@@ -1248,22 +1300,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         generics: &Generics,\n         sig: &FnSig,\n         fn_def_id: LocalDefId,\n-        impl_trait_return_allow: bool,\n+        kind: FnDeclKind,\n         is_async: Option<NodeId>,\n     ) -> (hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n         let (generics, decl) = self.add_in_band_defs(\n             generics,\n             fn_def_id,\n             AnonymousLifetimeMode::PassThrough,\n-            |this, idty| {\n-                this.lower_fn_decl(\n-                    &sig.decl,\n-                    Some((fn_def_id, idty)),\n-                    impl_trait_return_allow,\n-                    is_async,\n-                )\n-            },\n+            |this, idty| this.lower_fn_decl(&sig.decl, Some((fn_def_id, idty)), kind, is_async),\n         );\n         (generics, hir::FnSig { header, decl, span: self.lower_span(sig.span) })\n     }\n@@ -1409,11 +1454,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n             }) => self.with_in_scope_lifetime_defs(&bound_generic_params, |this| {\n                 hir::WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n-                    bound_generic_params: this\n-                        .lower_generic_params(bound_generic_params, ImplTraitContext::disallowed()),\n-                    bounded_ty: this.lower_ty(bounded_ty, ImplTraitContext::disallowed()),\n+                    bound_generic_params: this.lower_generic_params(\n+                        bound_generic_params,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n+                    ),\n+                    bounded_ty: this.lower_ty(\n+                        bounded_ty,\n+                        ImplTraitContext::Disallowed(ImplTraitPosition::Type),\n+                    ),\n                     bounds: this.arena.alloc_from_iter(bounds.iter().map(|bound| {\n-                        this.lower_param_bound(bound, ImplTraitContext::disallowed())\n+                        this.lower_param_bound(\n+                            bound,\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                        )\n                     })),\n                     span: this.lower_span(span),\n                 })\n@@ -1425,13 +1478,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             }) => hir::WherePredicate::RegionPredicate(hir::WhereRegionPredicate {\n                 span: self.lower_span(span),\n                 lifetime: self.lower_lifetime(lifetime),\n-                bounds: self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n+                bounds: self.lower_param_bounds(\n+                    bounds,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Bound),\n+                ),\n             }),\n             WherePredicate::EqPredicate(WhereEqPredicate { id, ref lhs_ty, ref rhs_ty, span }) => {\n                 hir::WherePredicate::EqPredicate(hir::WhereEqPredicate {\n                     hir_id: self.lower_node_id(id),\n-                    lhs_ty: self.lower_ty(lhs_ty, ImplTraitContext::disallowed()),\n-                    rhs_ty: self.lower_ty(rhs_ty, ImplTraitContext::disallowed()),\n+                    lhs_ty: self\n+                        .lower_ty(lhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n+                    rhs_ty: self\n+                        .lower_ty(rhs_ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type)),\n                     span: self.lower_span(span),\n                 })\n             }"}, {"sha": "803c93c259eebffaca97036540d90cc03d576448", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 104, "deletions": 25, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -256,19 +256,28 @@ enum ImplTraitContext<'b, 'a> {\n /// Position in which `impl Trait` is disallowed.\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum ImplTraitPosition {\n-    /// Disallowed in `let` / `const` / `static` bindings.\n-    Binding,\n-\n-    /// All other positions.\n-    Other,\n+    Path,\n+    Variable,\n+    Type,\n+    Trait,\n+    AsyncBlock,\n+    Bound,\n+    Generic,\n+    ExternFnParam,\n+    ClosureParam,\n+    PointerParam,\n+    FnTraitParam,\n+    TraitParam,\n+    ImplParam,\n+    ExternFnReturn,\n+    ClosureReturn,\n+    PointerReturn,\n+    FnTraitReturn,\n+    TraitReturn,\n+    ImplReturn,\n }\n \n impl<'a> ImplTraitContext<'_, 'a> {\n-    #[inline]\n-    fn disallowed() -> Self {\n-        ImplTraitContext::Disallowed(ImplTraitPosition::Other)\n-    }\n-\n     fn reborrow<'this>(&'this mut self) -> ImplTraitContext<'this, 'a> {\n         use self::ImplTraitContext::*;\n         match self {\n@@ -284,6 +293,54 @@ impl<'a> ImplTraitContext<'_, 'a> {\n     }\n }\n \n+impl std::fmt::Display for ImplTraitPosition {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        let name = match self {\n+            ImplTraitPosition::Path => \"path\",\n+            ImplTraitPosition::Variable => \"variable\",\n+            ImplTraitPosition::Type => \"type\",\n+            ImplTraitPosition::Trait => \"trait\",\n+            ImplTraitPosition::AsyncBlock => \"async block\",\n+            ImplTraitPosition::Bound => \"bound\",\n+            ImplTraitPosition::Generic => \"generic\",\n+            ImplTraitPosition::ExternFnParam => \"`extern fn` param\",\n+            ImplTraitPosition::ClosureParam => \"closure param\",\n+            ImplTraitPosition::PointerParam => \"`fn` pointer param\",\n+            ImplTraitPosition::FnTraitParam => \"`Fn` trait param\",\n+            ImplTraitPosition::TraitParam => \"trait method param\",\n+            ImplTraitPosition::ImplParam => \"`impl` method param\",\n+            ImplTraitPosition::ExternFnReturn => \"`extern fn` return\",\n+            ImplTraitPosition::ClosureReturn => \"closure return\",\n+            ImplTraitPosition::PointerReturn => \"`fn` pointer return\",\n+            ImplTraitPosition::FnTraitReturn => \"`Fn` trait return\",\n+            ImplTraitPosition::TraitReturn => \"trait method return\",\n+            ImplTraitPosition::ImplReturn => \"`impl` method return\",\n+        };\n+\n+        write!(f, \"{}\", name)\n+    }\n+}\n+\n+#[derive(Debug)]\n+enum FnDeclKind {\n+    Fn,\n+    Inherent,\n+    ExternFn,\n+    Closure,\n+    Pointer,\n+    Trait,\n+    Impl,\n+}\n+\n+impl FnDeclKind {\n+    fn impl_trait_return_allowed(&self) -> bool {\n+        match self {\n+            FnDeclKind::Fn | FnDeclKind::Inherent => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n pub fn lower_crate<'a, 'hir>(\n     sess: &'a Session,\n     krate: &'a Crate,\n@@ -1232,11 +1289,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     hir::TyKind::BareFn(this.arena.alloc(hir::BareFnTy {\n                         generic_params: this.lower_generic_params(\n                             &f.generic_params,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Generic),\n                         ),\n                         unsafety: this.lower_unsafety(f.unsafety),\n                         abi: this.lower_extern(f.ext),\n-                        decl: this.lower_fn_decl(&f.decl, None, false, None),\n+                        decl: this.lower_fn_decl(&f.decl, None, FnDeclKind::Pointer, None),\n                         param_names: this.lower_fn_params_to_names(&f.decl),\n                     }))\n                 })\n@@ -1357,14 +1414,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             }),\n                         ))\n                     }\n-                    ImplTraitContext::Disallowed(_) => {\n+                    ImplTraitContext::Disallowed(position) => {\n                         let mut err = struct_span_err!(\n                             self.sess,\n                             t.span,\n                             E0562,\n-                            \"`impl Trait` not allowed outside of {}\",\n-                            \"function and method return types\",\n+                            \"`impl Trait` not allowed outside of \\\n+                            function and inherent method return types\",\n                         );\n+                        err.note(&format!(\"found `impl Trait` in {}\", position));\n                         err.emit();\n                         hir::TyKind::Err\n                     }\n@@ -1528,16 +1586,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         decl: &FnDecl,\n         mut in_band_ty_params: Option<(LocalDefId, &mut Vec<hir::GenericParam<'hir>>)>,\n-        impl_trait_return_allow: bool,\n+        kind: FnDeclKind,\n         make_ret_async: Option<NodeId>,\n     ) -> &'hir hir::FnDecl<'hir> {\n         debug!(\n             \"lower_fn_decl(\\\n             fn_decl: {:?}, \\\n             in_band_ty_params: {:?}, \\\n-            impl_trait_return_allow: {}, \\\n+            kind: {:?}, \\\n             make_ret_async: {:?})\",\n-            decl, in_band_ty_params, impl_trait_return_allow, make_ret_async,\n+            decl, in_band_ty_params, kind, make_ret_async,\n         );\n         let lt_mode = if make_ret_async.is_some() {\n             // In `async fn`, argument-position elided lifetimes\n@@ -1567,7 +1625,19 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         ImplTraitContext::Universal(ibty, this.current_hir_id_owner),\n                     )\n                 } else {\n-                    this.lower_ty_direct(&param.ty, ImplTraitContext::disallowed())\n+                    this.lower_ty_direct(\n+                        &param.ty,\n+                        ImplTraitContext::Disallowed(match kind {\n+                            FnDeclKind::Fn | FnDeclKind::Inherent => {\n+                                unreachable!(\"fn should allow in-band lifetimes\")\n+                            }\n+                            FnDeclKind::ExternFn => ImplTraitPosition::ExternFnParam,\n+                            FnDeclKind::Closure => ImplTraitPosition::ClosureParam,\n+                            FnDeclKind::Pointer => ImplTraitPosition::PointerParam,\n+                            FnDeclKind::Trait => ImplTraitPosition::TraitParam,\n+                            FnDeclKind::Impl => ImplTraitPosition::ImplParam,\n+                        }),\n+                    )\n                 }\n             }))\n         });\n@@ -1582,13 +1652,22 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             match decl.output {\n                 FnRetTy::Ty(ref ty) => {\n                     let context = match in_band_ty_params {\n-                        Some((def_id, _)) if impl_trait_return_allow => {\n+                        Some((def_id, _)) if kind.impl_trait_return_allowed() => {\n                             ImplTraitContext::ReturnPositionOpaqueTy {\n                                 fn_def_id: def_id,\n                                 origin: hir::OpaqueTyOrigin::FnReturn(def_id),\n                             }\n                         }\n-                        _ => ImplTraitContext::disallowed(),\n+                        _ => ImplTraitContext::Disallowed(match kind {\n+                            FnDeclKind::Fn | FnDeclKind::Inherent => {\n+                                unreachable!(\"fn should allow in-band lifetimes\")\n+                            }\n+                            FnDeclKind::ExternFn => ImplTraitPosition::ExternFnReturn,\n+                            FnDeclKind::Closure => ImplTraitPosition::ClosureReturn,\n+                            FnDeclKind::Pointer => ImplTraitPosition::PointerReturn,\n+                            FnDeclKind::Trait => ImplTraitPosition::TraitReturn,\n+                            FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n+                        }),\n                     };\n                     hir::FnRetTy::Return(self.lower_ty(ty, context))\n                 }\n@@ -1915,17 +1994,17 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             GenericParamKind::Type { ref default, .. } => {\n                 let kind = hir::GenericParamKind::Type {\n                     default: default.as_ref().map(|x| {\n-                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Other))\n+                        self.lower_ty(x, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                     }),\n                     synthetic: false,\n                 };\n \n                 (hir::ParamName::Plain(self.lower_ident(param.ident)), kind)\n             }\n             GenericParamKind::Const { ref ty, kw_span: _, ref default } => {\n-                let ty = self\n-                    .with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n-                        this.lower_ty(&ty, ImplTraitContext::disallowed())\n+                let ty =\n+                    self.with_anonymous_lifetime_mode(AnonymousLifetimeMode::ReportError, |this| {\n+                        this.lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::Type))\n                     });\n                 let default = default.as_ref().map(|def| self.lower_anon_const(def));\n                 ("}, {"sha": "2c331767b8958541be83947dd6ef7ee9918bc6e5", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,3 +1,5 @@\n+use crate::ImplTraitPosition;\n+\n use super::{ImplTraitContext, LoweringContext, ParamMode};\n \n use rustc_ast::ptr::P;\n@@ -33,7 +35,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                         break hir::PatKind::TupleStruct(qpath, pats, ddpos);\n@@ -49,7 +51,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n                         break hir::PatKind::Path(qpath);\n                     }\n@@ -59,7 +61,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             qself,\n                             path,\n                             ParamMode::Optional,\n-                            ImplTraitContext::disallowed(),\n+                            ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                         );\n \n                         let fs = self.arena.alloc_from_iter(fields.iter().map(|f| hir::PatField {"}, {"sha": "b35e3a071619af307dfa7df01533a02d6c2487dd", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,3 +1,5 @@\n+use crate::ImplTraitPosition;\n+\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n@@ -184,7 +186,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     param_mode,\n                     0,\n                     ParenthesizedGenericArgs::Err,\n-                    ImplTraitContext::disallowed(),\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                 )\n             })),\n             span: self.lower_span(p.span),\n@@ -392,11 +394,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // we generally don't permit such things (see #51008).\n         self.with_anonymous_lifetime_mode(AnonymousLifetimeMode::PassThrough, |this| {\n             let ParenthesizedArgs { span, inputs, inputs_span, output } = data;\n-            let inputs = this.arena.alloc_from_iter(\n-                inputs.iter().map(|ty| this.lower_ty_direct(ty, ImplTraitContext::disallowed())),\n-            );\n+            let inputs = this.arena.alloc_from_iter(inputs.iter().map(|ty| {\n+                this.lower_ty_direct(\n+                    ty,\n+                    ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitParam),\n+                )\n+            }));\n             let output_ty = match output {\n-                FnRetTy::Ty(ty) => this.lower_ty(&ty, ImplTraitContext::disallowed()),\n+                FnRetTy::Ty(ty) => this\n+                    .lower_ty(&ty, ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn)),\n                 FnRetTy::Default(_) => this.arena.alloc(this.ty_tup(*span, &[])),\n             };\n             let args = smallvec![GenericArg::Type(this.ty_tup(*inputs_span, inputs))];"}, {"sha": "38be85ff8201ed77a5840269e0acacd6ef558284", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -57,20 +57,20 @@ fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n \n const _cdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // const _cdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n static _sdef: impl Tr1<As1: Copy> = S1;\n //~^ ERROR associated type bounds are unstable\n-//~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // static _sdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n fn main() {\n     let _: impl Tr1<As1: Copy> = S1;\n     //~^ ERROR associated type bounds are unstable\n-    //~| ERROR `impl Trait` not allowed outside of function and method return types [E0562]\n+    //~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;\n }"}, {"sha": "26f10622344da5aa95a81698727f7b333d18b3f6", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -115,23 +115,29 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n    = note: see issue #52662 <https://github.com/rust-lang/rust/issues/52662> for more information\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:58:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:64:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/feature-gate-associated_type_bounds.rs:71:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is not satisfied\n   --> $DIR/feature-gate-associated_type_bounds.rs:15:28"}, {"sha": "e0e8f274017383868c44554dff6b262f4da72221", "filename": "src/test/ui/impl-trait/issues/issue-54600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -2,6 +2,6 @@ use std::fmt::Debug;\n \n fn main() {\n     let x: Option<impl Debug> = Some(44_u32);\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n     println!(\"{:?}\", x);\n }"}, {"sha": "c9626175ff511c00348a7feeaf754a0248e80918", "filename": "src/test/ui/impl-trait/issues/issue-54600.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54600.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-54600.rs:4:19\n    |\n LL |     let x: Option<impl Debug> = Some(44_u32);\n    |                   ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "8756d1c7de394eb127abca5f41995e0b71d942ab", "filename": "src/test/ui/impl-trait/issues/issue-54840.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -3,5 +3,5 @@ use std::ops::Add;\n fn main() {\n     let i: i32 = 0;\n     let j: &impl Add = &i;\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n }"}, {"sha": "a947e0fc46d47605c0975b64d3e160dd89d06b79", "filename": "src/test/ui/impl-trait/issues/issue-54840.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-54840.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-54840.rs:5:13\n    |\n LL |     let j: &impl Add = &i;\n    |             ^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "ccbe187cef68533fd66eabf07f8a12cef7a4c787", "filename": "src/test/ui/impl-trait/issues/issue-58504.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -8,5 +8,5 @@ fn mk_gen() -> impl Generator<Return=!, Yield=()> {\n \n fn main() {\n     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n }"}, {"sha": "6c59bcfa11da206591209c94776163bccdb5df36", "filename": "src/test/ui/impl-trait/issues/issue-58504.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58504.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-58504.rs:10:16\n    |\n LL |     let gens: [impl Generator<Return=!, Yield=()>;2] = [ mk_gen(), mk_gen() ];\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "615dc5b2f29c47001af9fb2f19b51fd3228f5068", "filename": "src/test/ui/impl-trait/issues/issue-58956.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -5,9 +5,9 @@ impl Lam for B {}\n pub struct Wrap<T>(T);\n \n const _A: impl Lam = {\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n     let x: Wrap<impl Lam> = Wrap(B);\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n     x.0\n };\n "}, {"sha": "f9bcb94d49d2d4bbf47b6d1576e1c8b2641a6738", "filename": "src/test/ui/impl-trait/issues/issue-58956.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-58956.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,14 +1,18 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-58956.rs:7:11\n    |\n LL | const _A: impl Lam = {\n    |           ^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-58956.rs:9:17\n    |\n LL |     let x: Wrap<impl Lam> = Wrap(B);\n    |                 ^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4329cf626447692743bf1693fda983bb05f2856e", "filename": "src/test/ui/impl-trait/issues/issue-70971.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x : (impl Copy,) = (true,);\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n }"}, {"sha": "831c0980068c366c3a15ec6b828a0ef9df81cd0d", "filename": "src/test/ui/impl-trait/issues/issue-70971.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-70971.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-70971.rs:2:14\n    |\n LL |     let x : (impl Copy,) = (true,);\n    |              ^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "add2d72907cd4e1275f3a8e64ce51a4108fb3763", "filename": "src/test/ui/impl-trait/issues/issue-79099.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,7 +1,7 @@\n struct Bug {\n     V1: [(); {\n         let f: impl core::future::Future<Output = u8> = async { 1 };\n-        //~^ `impl Trait` not allowed outside of function and method return types\n+        //~^ `impl Trait` not allowed outside of function and inherent method return types\n         //~| expected identifier\n         1\n     }],"}, {"sha": "c70eb5a1e9d80dc7c553d4448cabf607020c28f7", "filename": "src/test/ui/impl-trait/issues/issue-79099.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-79099.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -9,11 +9,13 @@ LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    = help: set `edition = \"2021\"` in `Cargo.toml`\n    = note: for more on editions, read https://doc.rust-lang.org/edition-guide\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-79099.rs:3:16\n    |\n LL |         let f: impl core::future::Future<Output = u8> = async { 1 };\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d9d2e3929b10c2cd3778b12f1527a6dbe814e09e", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,8 @@\n struct Foo<T = impl Copy>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // should not cause ICE\n fn x() -> Foo {"}, {"sha": "1cac44e796b2c39f909c7c680a7ce3d8a5807181", "filename": "src/test/ui/impl-trait/issues/issue-83929-impl-trait-in-generic-default.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-83929-impl-trait-in-generic-default.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,14 +1,18 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:1:16\n    |\n LL | struct Foo<T = impl Copy>(T);\n    |                ^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-83929-impl-trait-in-generic-default.rs:4:20\n    |\n LL | type Result<T, E = impl std::error::Error> = std::result::Result<T, E>;\n    |                    ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6abe3cd7ea5c1ecc475e5bc036d49208cbd1da14", "filename": "src/test/ui/impl-trait/issues/issue-84919.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -3,7 +3,7 @@ impl Trait for () {}\n \n fn foo<'a: 'a>() {\n     let _x: impl Trait = ();\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n }\n \n fn main() {}"}, {"sha": "36fc750cf87b049d14224dca31893262585cbd76", "filename": "src/test/ui/impl-trait/issues/issue-84919.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-84919.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-84919.rs:5:13\n    |\n LL |     let _x: impl Trait = ();\n    |             ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "c7e4045f43205786cfcdb526c73d5a356955ac91", "filename": "src/test/ui/impl-trait/issues/issue-86642.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,5 +1,5 @@\n static x: impl Fn(&str) -> Result<&str, ()> = move |source| {\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n     let res = (move |source| Ok(source))(source);\n     let res = res.or((move |source| Ok(source))(source));\n     res"}, {"sha": "d12f0f3d2a9f3fb1f505cd75e55bd0afc8aa9e00", "filename": "src/test/ui/impl-trait/issues/issue-86642.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86642.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-86642.rs:1:11\n    |\n LL | static x: impl Fn(&str) -> Result<&str, ()> = move |source| {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n error: aborting due to previous error\n "}, {"sha": "da75e777398f58c837b3e5f37bfab2fdbedda66b", "filename": "src/test/ui/impl-trait/issues/issue-87295.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -14,5 +14,5 @@ impl<F> Struct<F> {\n \n fn main() {\n     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());\n-    //~^ `impl Trait` not allowed outside of function and method return types\n+    //~^ `impl Trait` not allowed outside of function and inherent method return types\n }"}, {"sha": "6bdc356b6a4067faedff25161cc6043afe0e4257", "filename": "src/test/ui/impl-trait/issues/issue-87295.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-87295.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-87295.rs:16:31\n    |\n LL |     let _do_not_waste: Struct<impl Trait<Output = i32>> = Struct::new(());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n error: aborting due to previous error\n "}, {"sha": "c6a56ea0e302fe2e9af0c06e866f8157f013f87d", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -34,17 +34,21 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  |         nested `impl Trait` here\n    |                                  outer `impl Trait`\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/nested_impl_trait.rs:8:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/nested_impl_trait.rs:25:42\n    |\n LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n    |                                          ^^^^^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait return\n \n error: aborting due to 6 previous errors\n "}, {"sha": "07d28dbd025ace1cecb5a593c39e89991cb83eff", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -13,61 +13,61 @@ fn in_adt_in_parameters(_: Vec<impl Debug>) { panic!() }\n \n // Disallowed\n fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~^^ ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~| ERROR nested `impl Trait` is not allowed\n \n // Disallowed\n fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n \n // Allowed\n@@ -80,22 +80,22 @@ fn in_impl_Trait_in_return() -> impl IntoIterator<Item = impl IntoIterator> {\n \n // Disallowed\n struct InBraceStructField { x: impl Debug }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n struct InAdtInBraceStructField { x: Vec<impl Debug> }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n struct InTupleStructField(impl Debug);\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n enum InEnum {\n     InBraceVariant { x: impl Debug },\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n     InTupleVariant(impl Debug),\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Allowed\n@@ -106,7 +106,7 @@ trait InTraitDefnParameters {\n // Disallowed\n trait InTraitDefnReturn {\n     fn in_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Allowed and disallowed in trait impls\n@@ -123,7 +123,7 @@ impl DummyTrait for () {\n     // Allowed\n \n     fn in_trait_impl_return() -> impl Debug { () }\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Allowed\n@@ -136,10 +136,10 @@ impl DummyType {\n // Disallowed\n extern \"C\" {\n     fn in_foreign_parameters(_: impl Debug);\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n     fn in_foreign_return() -> impl Debug;\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Allowed\n@@ -155,97 +155,97 @@ type InTypeAlias<R> = impl Debug;\n //~^ ERROR `impl Trait` in type aliases is unstable\n \n type InReturnInTypeAlias<R> = fn() -> impl Debug;\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~| ERROR `impl Trait` in type aliases is unstable\n \n // Disallowed in impl headers\n impl PartialEq<impl Debug> for () {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Disallowed in impl headers\n impl PartialEq<()> for impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Disallowed in inherent impls\n impl impl Debug {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Disallowed in inherent impls\n struct InInherentImplAdt<T> { t: T }\n impl InInherentImplAdt<impl Debug> {\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n \n // Disallowed in where clauses\n fn in_fn_where_clause()\n     where impl Debug: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n {\n }\n \n // Disallowed in where clauses\n fn in_adt_in_fn_where_clause()\n     where Vec<impl Debug>: Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_trait_parameter_in_fn_where_clause<T>()\n     where T: PartialEq<impl Debug>\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_Fn_parameter_in_fn_where_clause<T>()\n     where T: Fn(impl Debug)\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n {\n }\n \n // Disallowed\n fn in_Fn_return_in_fn_where_clause<T>()\n     where T: Fn() -> impl Debug\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n {\n }\n \n // Disallowed\n struct InStructGenericParamDefault<T = impl Debug>(T);\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n trait InTraitGenericParamDefault<T = impl Debug> {}\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n-//~^ ERROR `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n // Disallowed\n impl <T = impl Debug> T {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and method return types\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n //~| ERROR no nominal type found\n \n // Disallowed\n fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n //~^ ERROR defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n //~| WARNING this was previously accepted by the compiler but is being phased out\n-//~| ERROR `impl Trait` not allowed outside of function and method return types\n+//~| ERROR `impl Trait` not allowed outside of function and inherent method return types\n \n fn main() {\n     let _in_local_variable: impl Fn() = || {};\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n-    //~^ ERROR `impl Trait` not allowed outside of function and method return types\n+    //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }"}, {"sha": "579c7d2ff79ba1d10319f3c19ef9b9c8e59fd622", "filename": "src/test/ui/impl-trait/where-allowed.stderr", "status": "modified", "additions": 123, "deletions": 41, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -43,251 +43,333 @@ LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n    = help: add `#![feature(type_alias_impl_trait)]` to the crate attributes to enable\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:15:40\n    |\n LL | fn in_fn_parameter_in_parameters(_: fn(impl Debug)) { panic!() }\n    |                                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `fn` pointer param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:19:42\n    |\n LL | fn in_fn_return_in_parameters(_: fn() -> impl Debug) { panic!() }\n    |                                          ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:23:38\n    |\n LL | fn in_fn_parameter_in_return() -> fn(impl Debug) { panic!() }\n    |                                      ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `fn` pointer param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:27:40\n    |\n LL | fn in_fn_return_in_return() -> fn() -> impl Debug { panic!() }\n    |                                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:31:49\n    |\n LL | fn in_dyn_Fn_parameter_in_parameters(_: &dyn Fn(impl Debug)) { panic!() }\n    |                                                 ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:35:51\n    |\n LL | fn in_dyn_Fn_return_in_parameters(_: &dyn Fn() -> impl Debug) { panic!() }\n    |                                                   ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:39:55\n    |\n LL | fn in_dyn_Fn_parameter_in_return() -> &'static dyn Fn(impl Debug) { panic!() }\n    |                                                       ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:43:57\n    |\n LL | fn in_dyn_Fn_return_in_return() -> &'static dyn Fn() -> impl Debug { panic!() }\n    |                                                         ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:47:51\n    |\n LL | fn in_impl_Fn_parameter_in_parameters(_: &impl Fn(impl Debug)) { panic!() }\n    |                                                   ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:52:53\n    |\n LL | fn in_impl_Fn_return_in_parameters(_: &impl Fn() -> impl Debug) { panic!() }\n    |                                                     ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:56:57\n    |\n LL | fn in_impl_Fn_parameter_in_return() -> &'static impl Fn(impl Debug) { panic!() }\n    |                                                         ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:61:59\n    |\n LL | fn in_impl_Fn_return_in_return() -> &'static impl Fn() -> impl Debug { panic!() }\n    |                                                           ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:65:38\n    |\n LL | fn in_Fn_parameter_in_generics<F: Fn(impl Debug)> (_: F) { panic!() }\n    |                                      ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:69:40\n    |\n LL | fn in_Fn_return_in_generics<F: Fn() -> impl Debug> (_: F) { panic!() }\n    |                                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:82:32\n    |\n LL | struct InBraceStructField { x: impl Debug }\n    |                                ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:86:41\n    |\n LL | struct InAdtInBraceStructField { x: Vec<impl Debug> }\n    |                                         ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in path\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:90:27\n    |\n LL | struct InTupleStructField(impl Debug);\n    |                           ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:95:25\n    |\n LL |     InBraceVariant { x: impl Debug },\n    |                         ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:97:20\n    |\n LL |     InTupleVariant(impl Debug),\n    |                    ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:108:23\n    |\n LL |     fn in_return() -> impl Debug;\n    |                       ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in trait method return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:125:34\n    |\n LL |     fn in_trait_impl_return() -> impl Debug { () }\n    |                                  ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `impl` method return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:138:33\n    |\n LL |     fn in_foreign_parameters(_: impl Debug);\n    |                                 ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `extern fn` param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:141:31\n    |\n LL |     fn in_foreign_return() -> impl Debug;\n    |                               ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `extern fn` return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:157:39\n    |\n LL | type InReturnInTypeAlias<R> = fn() -> impl Debug;\n    |                                       ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `fn` pointer return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:162:16\n    |\n LL | impl PartialEq<impl Debug> for () {\n    |                ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in trait\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:167:24\n    |\n LL | impl PartialEq<()> for impl Debug {\n    |                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:172:6\n    |\n LL | impl impl Debug {\n    |      ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:178:24\n    |\n LL | impl InInherentImplAdt<impl Debug> {\n    |                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:184:11\n    |\n LL |     where impl Debug: Debug\n    |           ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:191:15\n    |\n LL |     where Vec<impl Debug>: Debug\n    |               ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:198:24\n    |\n LL |     where T: PartialEq<impl Debug>\n    |                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in bound\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:205:17\n    |\n LL |     where T: Fn(impl Debug)\n    |                 ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait param\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:212:22\n    |\n LL |     where T: Fn() -> impl Debug\n    |                      ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `Fn` trait return\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:218:40\n    |\n LL | struct InStructGenericParamDefault<T = impl Debug>(T);\n    |                                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:222:36\n    |\n LL | enum InEnumGenericParamDefault<T = impl Debug> { Variant(T) }\n    |                                    ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:226:38\n    |\n LL | trait InTraitGenericParamDefault<T = impl Debug> {}\n    |                                      ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:230:41\n    |\n LL | type InTypeAliasGenericParamDefault<T = impl Debug> = T;\n    |                                         ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:234:11\n    |\n LL | impl <T = impl Debug> T {}\n    |           ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:241:40\n    |\n LL | fn in_method_generic_param_default<T = impl Debug>(_: T) {}\n    |                                        ^^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in type\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:247:29\n    |\n LL |     let _in_local_variable: impl Fn() = || {};\n    |                             ^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in variable\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/where-allowed.rs:249:46\n    |\n LL |     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n    |                                              ^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in closure return\n \n error: defaults for type parameters are only allowed in `struct`, `enum`, `type`, or `trait` definitions\n   --> $DIR/where-allowed.rs:234:7"}, {"sha": "5cccc7f3432be5682228232ed431c0512887d79f", "filename": "src/test/ui/issues/issue-47715.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47715.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,26 +1,34 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-47715.rs:9:37\n    |\n LL | struct Container<T: Iterable<Item = impl Foo>> {\n    |                                     ^^^^^^^^\n+   |\n+   = note: found `impl Trait` in generic\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-47715.rs:14:30\n    |\n LL | enum Enum<T: Iterable<Item = impl Foo>> {\n    |                              ^^^^^^^^\n+   |\n+   = note: found `impl Trait` in generic\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-47715.rs:19:32\n    |\n LL | union Union<T: Iterable<Item = impl Foo> + Copy> {\n    |                                ^^^^^^^^\n+   |\n+   = note: found `impl Trait` in generic\n \n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/issue-47715.rs:24:30\n    |\n LL | type Type<T: Iterable<Item = impl Foo>> = T;\n    |                              ^^^^^^^^\n+   |\n+   = note: found `impl Trait` in generic\n \n error: aborting due to 4 previous errors\n "}, {"sha": "35b2e0fe7d9882813c06670d372b6a9e092c721d", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.rs?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -4,7 +4,7 @@\n // FIXME: this is ruled out for now but should work\n \n type Foo = fn() -> impl Send;\n-//~^ ERROR: `impl Trait` not allowed outside of function and method return types\n+//~^ ERROR: `impl Trait` not allowed outside of function and inherent method return types\n \n fn make_foo() -> Foo {\n     || 15"}, {"sha": "89235215643c3eb7124c41e826ba4a5268b6c9b1", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-fn-type.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f04f732503a239b3fac22be2238d21971aa03dce/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-fn-type.stderr?ref=f04f732503a239b3fac22be2238d21971aa03dce", "patch": "@@ -1,8 +1,10 @@\n-error[E0562]: `impl Trait` not allowed outside of function and method return types\n+error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n   --> $DIR/type-alias-impl-trait-fn-type.rs:6:20\n    |\n LL | type Foo = fn() -> impl Send;\n    |                    ^^^^^^^^^\n+   |\n+   = note: found `impl Trait` in `fn` pointer return\n \n error: aborting due to previous error\n "}]}