{"sha": "8e808664fa0148e983f7b1ed1d5696454a3c026d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODA4NjY0ZmEwMTQ4ZTk4M2Y3YjFlZDFkNTY5NjQ1NGEzYzAyNmQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-09-28T06:38:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-28T06:38:00Z"}, "message": "Merge pull request #3178 from ms2300/bad_unwrap\n\nFix for bad get unwrap suggestion", "tree": {"sha": "06ab3e0eea3d5ebee23335707c06bb93eef64117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06ab3e0eea3d5ebee23335707c06bb93eef64117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e808664fa0148e983f7b1ed1d5696454a3c026d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbrcxICRBK7hj4Ov3rIwAAdHIIAFGXRLjtd65yoEsGDRt9HzrH\ncIp+CovdV5vYG0FlEUz/n6y1oRcJKCw1hxeSu8fIqUlM6BZDsOIdR+M6Jm/tINtk\nuXwcldV/YezStJ+MaCDfcXsnRM9TBgInzrnuG4LavzENXKoDvloA+vXxvGhGhIAO\nz3ZJcMz5Q3rFBWXqYaXu4XffDfadcSH4954LHEOaReYo30uUDUnvMg+qW2L4tARh\n+q5nV62+/S74642iXoWe4LyJHi1AwYTLiXEYYkpniCg4hCiGylHdEVOuOOJHLesO\ni7ud9MOh1kCz6wL1ygXLc6sNUVr/pdXCnU6wUUqWnZV39+mCCgx/ZygFGISdNGc=\n=nBTv\n-----END PGP SIGNATURE-----\n", "payload": "tree 06ab3e0eea3d5ebee23335707c06bb93eef64117\nparent 6b17ce42676a4bc1ba67d1da775bbc91a75a08f9\nparent 523ba2a009c4257119870aea2204ce00c0b677ac\nauthor Philipp Hansch <dev@phansch.net> 1538116680 +0100\ncommitter GitHub <noreply@github.com> 1538116680 +0100\n\nMerge pull request #3178 from ms2300/bad_unwrap\n\nFix for bad get unwrap suggestion"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e808664fa0148e983f7b1ed1d5696454a3c026d", "html_url": "https://github.com/rust-lang/rust/commit/8e808664fa0148e983f7b1ed1d5696454a3c026d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e808664fa0148e983f7b1ed1d5696454a3c026d/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b17ce42676a4bc1ba67d1da775bbc91a75a08f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b17ce42676a4bc1ba67d1da775bbc91a75a08f9", "html_url": "https://github.com/rust-lang/rust/commit/6b17ce42676a4bc1ba67d1da775bbc91a75a08f9"}, {"sha": "523ba2a009c4257119870aea2204ce00c0b677ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/523ba2a009c4257119870aea2204ce00c0b677ac", "html_url": "https://github.com/rust-lang/rust/commit/523ba2a009c4257119870aea2204ce00c0b677ac"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "062772ed7bcb18c8f72fc94678d826870cdd23a1", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8e808664fa0148e983f7b1ed1d5696454a3c026d/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e808664fa0148e983f7b1ed1d5696454a3c026d/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=8e808664fa0148e983f7b1ed1d5696454a3c026d", "patch": "@@ -1426,22 +1426,33 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n     // Note: we don't want to lint `get_mut().unwrap` for HashMap or BTreeMap,\n     // because they do not implement `IndexMut`\n     let expr_ty = cx.tables.expr_ty(&get_args[0]);\n+    let get_args_str = if get_args.len() > 1 {\n+        snippet(cx, get_args[1].span, \"_\")\n+    } else {\n+        return; // not linting on a .get().unwrap() chain or variant\n+    };\n+    let needs_ref;\n     let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n+        needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"slice\"\n     } else if match_type(cx, expr_ty, &paths::VEC) {\n+        needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n     } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {\n+        needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"VecDeque\"\n     } else if !is_mut && match_type(cx, expr_ty, &paths::HASHMAP) {\n+        needs_ref = true;\n         \"HashMap\"\n     } else if !is_mut && match_type(cx, expr_ty, &paths::BTREEMAP) {\n+        needs_ref = true;\n         \"BTreeMap\"\n     } else {\n         return; // caller is not a type that we want to lint\n     };\n \n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n-    let borrow_str = if is_mut { \"&mut \" } else { \"&\" };\n+    let borrow_str = if !needs_ref { \"\" } else if is_mut { \"&mut \" } else { \"&\" };\n     span_lint_and_sugg(\n         cx,\n         GET_UNWRAP,\n@@ -1456,7 +1467,7 @@ fn lint_get_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr, get_args: &[hir::\n             \"{}{}[{}]\",\n             borrow_str,\n             snippet(cx, get_args[0].span, \"_\"),\n-            snippet(cx, get_args[1].span, \"_\")\n+            get_args_str\n         ),\n     );\n }"}, {"sha": "141233e0d8ad65d02c19a3653e28df0aa20619be", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e808664fa0148e983f7b1ed1d5696454a3c026d/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e808664fa0148e983f7b1ed1d5696454a3c026d/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=8e808664fa0148e983f7b1ed1d5696454a3c026d", "patch": "@@ -43,4 +43,9 @@ fn main() {\n         *some_btreemap.get_mut(&1).unwrap() = 'b';\n         *false_positive.get_mut(0).unwrap() = 1;\n     }\n+\n+    { // Test `get().unwrap().foo()` and `get_mut().unwrap().bar()`\n+        let _ = some_vec.get(0..1).unwrap().to_vec();\n+        let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+    }\n }"}, {"sha": "669903da190c965c04c638432073b38af09f094b", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8e808664fa0148e983f7b1ed1d5696454a3c026d/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e808664fa0148e983f7b1ed1d5696454a3c026d/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=8e808664fa0148e983f7b1ed1d5696454a3c026d", "patch": "@@ -60,5 +60,17 @@ error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and\n 40 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&mut some_vecdeque[0]`\n \n-error: aborting due to 10 previous errors\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:48:17\n+   |\n+48 |         let _ = some_vec.get(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/get_unwrap.rs:49:17\n+   |\n+49 |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n+\n+error: aborting due to 12 previous errors\n "}]}