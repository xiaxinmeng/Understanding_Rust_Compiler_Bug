{"sha": "4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "node_id": "C_kwDOAAsO6NoAKDQ2OTFhMDY0N2IyYzk2Y2M0NzVkOGJiZTdjMzFmZTE5NGQxNDQzZTc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-01T12:36:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-01T12:36:17Z"}, "message": "Merge #10899\n\n10899: ide: hack to make self not unresolved reference in async trait wrapped impl's r=Veykril a=jhgg\n\nfixes #10708 \r\n\r\nthis is a bit hacky, but it \"works\". \r\n\r\ni'm not sure how to even write a test for this though, but i've confirmed it works via manual testing...\n\nCo-authored-by: Jake Heinz <jh@discordapp.com>", "tree": {"sha": "a477bc9a3b065c1baeaade60596f86a2055e1872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a477bc9a3b065c1baeaade60596f86a2055e1872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhp2xBCRBK7hj4Ov3rIwAAKfQIAE4/NqgUto4txbcyEXNlRBos\nkcE73lXjfNF19YiLq5vqswEGLvdb/WrG5xLKu+KQYMdymzh2H4vO/NPUoMFIsQge\nythKXBFWKz9pJr+PhtlaQCXlwzq3vIkWYGl3cHCXDwjdrCkUJe8apITJ93UAxlO8\nJeyJltAvNBA+xsuVCJfHxchTQVKLjn0rzf4BQ5xVIEfjNemlfBKCRqi+47xP3FFK\nLXncz7PGoDwb/qQyVnc5PBxKlNBrRBE5b5ZuWdpINx0POlaa7Se9bLZxHqI5MAlv\nnfLTiBpDOha35wAJLSnBvsgvz3MH/8oCEHPTYSLhML9lxDDuTGoctmm0qr66i9c=\n=1BJg\n-----END PGP SIGNATURE-----\n", "payload": "tree a477bc9a3b065c1baeaade60596f86a2055e1872\nparent af27958fd45ab44818749616ede842976e27d89b\nparent 30b0464ed8366636a1db510bf0cf0b1ba0203b50\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638362177 +0000\ncommitter GitHub <noreply@github.com> 1638362177 +0000\n\nMerge #10899\n\n10899: ide: hack to make self not unresolved reference in async trait wrapped impl's r=Veykril a=jhgg\n\nfixes #10708 \r\n\r\nthis is a bit hacky, but it \"works\". \r\n\r\ni'm not sure how to even write a test for this though, but i've confirmed it works via manual testing...\n\nCo-authored-by: Jake Heinz <jh@discordapp.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "html_url": "https://github.com/rust-lang/rust/commit/4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4691a0647b2c96cc475d8bbe7c31fe194d1443e7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af27958fd45ab44818749616ede842976e27d89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/af27958fd45ab44818749616ede842976e27d89b", "html_url": "https://github.com/rust-lang/rust/commit/af27958fd45ab44818749616ede842976e27d89b"}, {"sha": "30b0464ed8366636a1db510bf0cf0b1ba0203b50", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b0464ed8366636a1db510bf0cf0b1ba0203b50", "html_url": "https://github.com/rust-lang/rust/commit/30b0464ed8366636a1db510bf0cf0b1ba0203b50"}], "stats": {"total": 22, "additions": 20, "deletions": 2}, "files": [{"sha": "b8177b4ab6c71eca3708f938244a61d144ec4d75", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4691a0647b2c96cc475d8bbe7c31fe194d1443e7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4691a0647b2c96cc475d8bbe7c31fe194d1443e7/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "patch": "@@ -281,8 +281,18 @@ fn highlight_name_ref(\n                 return if syntactic_name_ref_highlighting {\n                     highlight_name_ref_by_syntax(name_ref, sema, krate)\n                 } else {\n-                    HlTag::UnresolvedReference.into()\n-                }\n+                    // FIXME: Workaround for https://github.com/rust-analyzer/rust-analyzer/issues/10708\n+                    //\n+                    // Some popular proc macros (namely async_trait) will rewrite `self` in such a way that it no\n+                    // longer resolves via NameRefClass. If we can't be resolved, but we know we're a self token,\n+                    // within a function with a self param, pretend to still be `self`, rather than\n+                    // an unresolved reference.\n+                    if name_ref.self_token().is_some() && is_in_fn_with_self_param(&name_ref) {\n+                        SymbolKind::SelfParam.into()\n+                    } else {\n+                        HlTag::UnresolvedReference.into()\n+                    }\n+                };\n             }\n         };\n         let mut h = match name_class {\n@@ -751,3 +761,11 @@ fn is_child_of_impl(token: &SyntaxToken) -> bool {\n         _ => false,\n     }\n }\n+\n+fn is_in_fn_with_self_param<N: AstNode>(node: &N) -> bool {\n+    node.syntax()\n+        .ancestors()\n+        .find_map(ast::Fn::cast)\n+        .and_then(|s| s.param_list()?.self_param())\n+        .is_some()\n+}"}]}