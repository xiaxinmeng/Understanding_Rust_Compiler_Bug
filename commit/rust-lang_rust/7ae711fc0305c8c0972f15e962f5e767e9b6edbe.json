{"sha": "7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZTcxMWZjMDMwNWM4YzA5NzJmMTVlOTYyZjVlNzY3ZTliNmVkYmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T05:18:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:01Z"}, "message": "Begin splitting metadata::decoder into decoding and crate search modules", "tree": {"sha": "922636d2f76efb60aaf083564c312d277b1b595a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/922636d2f76efb60aaf083564c312d277b1b595a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "html_url": "https://github.com/rust-lang/rust/commit/7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc2924068f017af5232fbc215406707dc9b50035", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2924068f017af5232fbc215406707dc9b50035", "html_url": "https://github.com/rust-lang/rust/commit/cc2924068f017af5232fbc215406707dc9b50035"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "f4f1070069a017be5f1043b946aaf37763b742ab", "filename": "src/comp/metadata/csearch.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcsearch.rs?ref=7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "patch": "@@ -0,0 +1,43 @@\n+import driver::session;\n+import syntax::ast;\n+import middle::ty;\n+import std::io;\n+\n+fn get_symbol(session::session sess, ast::def_id def) -> str {\n+    decoder::get_symbol(sess, def)\n+}\n+\n+fn get_tag_variants(ty::ctxt ctx, ast::def_id def) -> ty::variant_info[] {\n+    decoder::get_tag_variants(ctx, def)\n+}\n+\n+fn get_type(ty::ctxt tcx, ast::def_id def) -> ty::ty_param_count_and_ty {\n+    decoder::get_type(tcx, def)\n+}\n+\n+fn get_type_param_count(ty::ctxt tcx, &ast::def_id def) -> uint {\n+    decoder::get_type_param_count(tcx, def)\n+}\n+\n+fn lookup_defs(session::session sess, ast::crate_num cnum,\n+               vec[ast::ident] path) -> vec[ast::def] {\n+    decoder::lookup_defs(sess, cnum, path)\n+}\n+\n+fn get_crate_attributes(&vec[u8] data) -> ast::attribute[] {\n+    decoder::get_crate_attributes(data)\n+}\n+\n+fn list_crate_metadata(vec[u8] data, io::writer out) {\n+    decoder::list_crate_metadata(data, out)\n+}\n+\n+\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// compile-command: \"make -k -C $RBUILD 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n+// End:"}, {"sha": "caed0e6bff954ee8890abed7f31a6a4c23146cc7", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "patch": "@@ -7,7 +7,7 @@ import ast::def_id;\n import ast::node_id;\n import ast::local_def;\n \n-import metadata::decoder;\n+import metadata::csearch;\n import metadata::cstore;\n import driver::session::session;\n import util::common::new_def_hash;\n@@ -1143,7 +1143,7 @@ fn ns_for_def(def d) -> namespace {\n \n fn lookup_external(&env e, int cnum, vec[ident] ids, namespace ns) ->\n    option::t[def] {\n-    for (def d in decoder::lookup_defs(e.sess, cnum, ids)) {\n+    for (def d in csearch::lookup_defs(e.sess, cnum, ids)) {\n         e.ext_map.insert(ast::def_id_of_def(d), ids);\n         if (ns == ns_for_def(d)) { ret some(d); }\n     }"}, {"sha": "985381ecea1f0d0eddf26e2883cc0a58b79f7288", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "patch": "@@ -65,7 +65,7 @@ import link::mangle_internal_name_by_path_and_seq;\n import link::mangle_exported_name;\n import metadata::tyencode;\n import metadata::creader;\n-import metadata::decoder;\n+import metadata::csearch;\n import metadata::cstore;\n import util::ppaux::ty_to_str;\n import util::ppaux::ty_to_short_str;\n@@ -2220,12 +2220,12 @@ fn trans_res_drop(@block_ctxt cx, ValueRef rs, &ast::def_id did,\n             case (_) { ccx.tcx.sess.bug(\"internal error in trans_res_drop\") }\n         }\n     } else {\n-        auto params = decoder::get_type_param_count(ccx.tcx, did);\n+        auto params = csearch::get_type_param_count(ccx.tcx, did);\n         auto f_t = type_of_fn(ccx, cx.sp, ast::proto_fn,\n                               ~[rec(mode=ty::mo_alias(false), ty=inner_t)],\n                               ty::mk_nil(ccx.tcx), params);\n         get_extern_const(ccx.externs, ccx.llmod,\n-                         decoder::get_symbol(ccx.sess, did),\n+                         csearch::get_symbol(ccx.sess, did),\n                          T_fn_pair(ccx.tn, f_t))\n     };\n     auto dtor_addr = cx.build.Load\n@@ -4942,7 +4942,7 @@ fn lval_val(&@block_ctxt cx, ValueRef val) -> lval_result {\n fn trans_external_path(&@block_ctxt cx, &ast::def_id did,\n                        &ty::ty_param_count_and_ty tpt) -> lval_result {\n     auto lcx = cx.fcx.lcx;\n-    auto name = decoder::get_symbol(lcx.ccx.sess, did);\n+    auto name = csearch::get_symbol(lcx.ccx.sess, did);\n     auto v =\n         get_extern_const(lcx.ccx.externs, lcx.ccx.llmod, name,\n                          type_of_ty_param_count_and_ty(lcx, cx.sp, tpt));\n@@ -4988,7 +4988,7 @@ fn lookup_discriminant(&@local_ctxt lcx, &ast::def_id tid, &ast::def_id vid)\n             // It's an external discriminant that we haven't seen yet.\n \n             assert (vid._0 != ast::local_crate);\n-            auto sym = decoder::get_symbol(lcx.ccx.sess, vid);\n+            auto sym = csearch::get_symbol(lcx.ccx.sess, vid);\n             auto gvar =\n                 llvm::LLVMAddGlobal(lcx.ccx.llmod, T_int(), str::buf(sym));\n             llvm::LLVMSetLinkage(gvar,"}, {"sha": "7d3ac38f1ab43c82b471a32a11cef883f40156c5", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "patch": "@@ -21,8 +21,7 @@ import ast::controlflow;\n import ast::path_to_str;\n import ast::spanned;\n import syntax::codemap::span;\n-import metadata::creader;\n-import metadata::decoder;\n+import metadata::csearch;\n import util::common::*;\n import syntax::util::interner;\n import util::ppaux::ty_to_str;\n@@ -2814,7 +2813,7 @@ fn def_has_ty_params(&ast::def def) -> bool {\n type variant_info = rec(ty::t[] args, ty::t ctor_ty, ast::def_id id);\n \n fn tag_variants(&ctxt cx, &ast::def_id id) -> variant_info[] {\n-    if (ast::local_crate != id._0) { ret decoder::get_tag_variants(cx, id); }\n+    if (ast::local_crate != id._0) { ret csearch::get_tag_variants(cx, id); }\n     auto item = alt (cx.items.find(id._1)) {\n         case (some(?i)) { i }\n         case (none) {\n@@ -2875,7 +2874,7 @@ fn lookup_item_type(ctxt cx, ast::def_id did) -> ty_param_count_and_ty {\n     alt (cx.tcache.find(did)) {\n         case (some(?tpt)) { ret tpt; }\n         case (none) {\n-            auto tyt = decoder::get_type(cx, did);\n+            auto tyt = csearch::get_type(cx, did);\n             cx.tcache.insert(did, tyt);\n             ret tyt;\n         }"}, {"sha": "3f4afe0f3858613ae19a487f5edd9cc76235f478", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "patch": "@@ -5,7 +5,7 @@ import ast::local_def;\n import ast::path_to_str;\n import ast::respan;\n import syntax::walk;\n-import metadata::decoder;\n+import metadata::csearch;\n import driver::session;\n import util::common;\n import syntax::codemap::span;\n@@ -522,7 +522,7 @@ mod collect {\n     fn getter(@ctxt cx, &ast::def_id id) -> ty::ty_param_count_and_ty {\n         if (id._0 != ast::local_crate) {\n             // This is a type we need to load in from the crate reader.\n-            ret decoder::get_type(cx.tcx, id);\n+            ret csearch::get_type(cx.tcx, id);\n         }\n         auto it = cx.tcx.items.find(id._1);\n         auto tpt;"}, {"sha": "174e9298c05b6954a5ee4c58a27385917f9fba3c", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7ae711fc0305c8c0972f15e962f5e767e9b6edbe/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=7ae711fc0305c8c0972f15e962f5e767e9b6edbe", "patch": "@@ -79,9 +79,9 @@ mod back {\n mod metadata {\n     export tyencode;\n     export encoder;\n-    export decoder;\n     export creader;\n     export cstore;\n+    export csearch;\n \n     mod common;\n     mod tyencode;\n@@ -90,6 +90,7 @@ mod metadata {\n     mod decoder;\n     mod creader;\n     mod cstore;\n+    mod csearch;\n }\n \n mod driver {"}]}