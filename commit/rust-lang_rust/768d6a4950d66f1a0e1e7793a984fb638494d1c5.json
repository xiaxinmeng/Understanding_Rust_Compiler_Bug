{"sha": "768d6a4950d66f1a0e1e7793a984fb638494d1c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGQ2YTQ5NTBkNjZmMWEwZTFlNzc5M2E5ODRmYjYzODQ5NGQxYzU=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-03T22:41:23Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-07-15T14:54:05Z"}, "message": "Don't ICE on errors in function returning impl trait\n\nInstead, report the error.\n\nThis emits the errors on-demand, without special-casing `impl Trait`, so\nit should catch all ICEs of this kind, including ones that haven't been\nfound yet.\n\nSince the error is emitted during type-checking there is less info about\nthe error; see comments in the code for details.\n\n- Add test case for -> impl Trait\n- Add test for impl trait with alias\n- Move EmitIgnoredResolutionErrors to rustdoc\n\nThis makes `fn typeck_item_bodies` public, which is not desired behavior.\nThat change should be removed once\nhttps://github.com/rust-lang/rust/pull/74070 is merged.\n\n- Don't visit nested closures twice", "tree": {"sha": "0fa6c6b3650ce0d7f7e3272400c16b339271ca84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fa6c6b3650ce0d7f7e3272400c16b339271ca84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768d6a4950d66f1a0e1e7793a984fb638494d1c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768d6a4950d66f1a0e1e7793a984fb638494d1c5", "html_url": "https://github.com/rust-lang/rust/commit/768d6a4950d66f1a0e1e7793a984fb638494d1c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768d6a4950d66f1a0e1e7793a984fb638494d1c5/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14a8707cde48c7914af307f4687056d829ad2de9", "url": "https://api.github.com/repos/rust-lang/rust/commits/14a8707cde48c7914af307f4687056d829ad2de9", "html_url": "https://github.com/rust-lang/rust/commit/14a8707cde48c7914af307f4687056d829ad2de9"}], "stats": {"total": 164, "additions": 162, "deletions": 2}, "files": [{"sha": "514600b4733d49e82e77e65e4875bdb7fa6374c5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -955,7 +955,7 @@ where\n     val.fold_with(&mut FixupFolder { tcx })\n }\n \n-fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckTables<'tcx> {\n+pub fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckTables<'tcx> {\n     let fallback = move || tcx.type_of(def_id.to_def_id());\n     typeck_tables_of_with_fallback(tcx, def_id, fallback)\n }"}, {"sha": "79e1585ce3cdb7366331921227f5c0d02b8f844a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -78,7 +78,7 @@ extern crate rustc_middle;\n pub mod expr_use_visitor;\n \n mod astconv;\n-mod check;\n+pub mod check;\n mod check_unused;\n mod coherence;\n mod collect;"}, {"sha": "3d0da0e9157f7fcc4edc312ad1de1f234bfe123a", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -375,6 +375,15 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         override_queries: Some(|_sess, local_providers, external_providers| {\n             local_providers.lint_mod = |_, _| {};\n             external_providers.lint_mod = |_, _| {};\n+            //let old_typeck = local_providers.typeck_tables_of;\n+            local_providers.typeck_tables_of = move |tcx, def_id| {\n+                let hir = tcx.hir();\n+                let body = hir.body(hir.body_owned_by(hir.as_local_hir_id(def_id)));\n+                debug!(\"visiting body for {:?}\", def_id);\n+                EmitIgnoredResolutionErrors::new(&tcx.sess).visit_body(body);\n+                rustc_typeck::check::typeck_tables_of(tcx, def_id)\n+                //DEFAULT_TYPECK.with(|typeck| typeck(tcx, def_id))\n+            };\n         }),\n         registry: rustc_driver::diagnostics_registry(),\n     };\n@@ -572,6 +581,75 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n     })\n }\n \n+use rustc_hir::def::Res;\n+use rustc_hir::{\n+    intravisit::{NestedVisitorMap, Visitor},\n+    Path,\n+};\n+use rustc_middle::hir::map::Map;\n+\n+/*\n+thread_local!(static DEFAULT_TYPECK: for<'tcx> fn(rustc_middle::ty::TyCtxt<'tcx>, rustc_span::def_id::LocalDefId) -> &'tcx rustc_middle::ty::TypeckTables<'tcx> = {\n+    let mut providers = rustc_middle::ty::query::Providers::default();\n+    rustc_typeck::provide(&mut providers);\n+    providers.typeck_tables_of\n+});\n+*/\n+\n+/// Due to https://github.com/rust-lang/rust/pull/73566,\n+/// the name resolution pass may find errors that are never emitted.\n+/// If typeck is called after this happens, then we'll get an ICE:\n+/// 'Res::Error found but not reported'. To avoid this, emit the errors now.\n+struct EmitIgnoredResolutionErrors<'a> {\n+    session: &'a Session,\n+}\n+\n+impl<'a> EmitIgnoredResolutionErrors<'a> {\n+    fn new(session: &'a Session) -> Self {\n+        Self { session }\n+    }\n+}\n+\n+impl<'a> Visitor<'a> for EmitIgnoredResolutionErrors<'_> {\n+    type Map = Map<'a>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        // If we visit nested bodies, then we will report errors twice for e.g. nested closures\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_path(&mut self, path: &'v Path<'v>, _id: HirId) {\n+        log::debug!(\"visiting path {:?}\", path);\n+        if path.res == Res::Err {\n+            // We have less context here than in rustc_resolve,\n+            // so we can only emit the name and span.\n+            // However we can give a hint that rustc_resolve will have more info.\n+            // NOTE: this is a very rare case (only 4 out of several hundred thousand crates in a crater run)\n+            // NOTE: so it's ok for it to be slow\n+            let label = format!(\n+                \"could not resolve path `{}`\",\n+                path.segments\n+                    .iter()\n+                    .map(|segment| segment.ident.as_str().to_string())\n+                    .collect::<Vec<_>>()\n+                    .join(\"::\")\n+            );\n+            let mut err = rustc_errors::struct_span_err!(\n+                self.session,\n+                path.span,\n+                E0433,\n+                \"failed to resolve: {}\",\n+                label\n+            );\n+            err.span_label(path.span, label);\n+            err.note(\"this error was originally ignored because you are running `rustdoc`\");\n+            err.note(\"try running again with `rustc` and you may get a more detailed error\");\n+            err.emit();\n+        }\n+        // NOTE: this does _not_ visit the path segments\n+    }\n+}\n+\n /// `DefId` or parameter index (`ty::ParamTy.index`) of a synthetic type parameter\n /// for `impl Trait` in argument position.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]"}, {"sha": "4bd6b1260ccef1b05ee26dd500a0f66e3977f050", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -94,6 +94,7 @@ pub fn main() {\n         32_000_000 // 32MB on other platforms\n     };\n     rustc_driver::set_sigpipe_handler();\n+    rustc_driver::install_ice_hook();\n     env_logger::init_from_env(\"RUSTDOC_LOG\");\n     let res = std::thread::Builder::new()\n         .stack_size(thread_stack_size)"}, {"sha": "fbe663a61890fc976b5f5acd8f77dba137c59606", "filename": "src/test/rustdoc-ui/error-in-impl-trait.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.rs?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+#![feature(type_alias_impl_trait)]\n+\n+pub trait ValidTrait {}\n+type ImplTrait = impl ValidTrait;\n+\n+/// This returns impl trait\n+pub fn g() -> impl ValidTrait {\n+    error::_in::impl_trait()\n+    //~^ ERROR failed to resolve\n+}\n+\n+/// This returns impl trait, but using a type alias\n+pub fn h() -> ImplTrait {\n+    error::_in::impl_trait::alias();\n+    //~^ ERROR failed to resolve\n+    (|| error::_in::impl_trait::alias::nested::closure())()\n+    //~^ ERROR failed to resolve\n+}\n+\n+/// This used to work with ResolveBodyWithLoop.\n+/// However now that we ignore type checking instead of modifying the function body,\n+/// the return type is seen as `impl Future<Output = u32>`, not a `u32`.\n+/// So it no longer allows errors in the function body.\n+pub async fn a() -> u32 {\n+    error::_in::async_fn()\n+    //~^ ERROR failed to resolve\n+}"}, {"sha": "4df40da9b7ceaa11c27441162ade1ab122bf9355", "filename": "src/test/rustdoc-ui/error-in-impl-trait.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ferror-in-impl-trait.stderr?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -0,0 +1,39 @@\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait`\n+  --> $DIR/error-in-impl-trait.rs:9:5\n+   |\n+LL |     error::_in::impl_trait()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias`\n+  --> $DIR/error-in-impl-trait.rs:15:5\n+   |\n+LL |     error::_in::impl_trait::alias();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error[E0433]: failed to resolve: could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+  --> $DIR/error-in-impl-trait.rs:17:9\n+   |\n+LL |     (|| error::_in::impl_trait::alias::nested::closure())()\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::impl_trait::alias::nested::closure`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error[E0433]: failed to resolve: could not resolve path `error::_in::async_fn`\n+  --> $DIR/error-in-impl-trait.rs:26:5\n+   |\n+LL |     error::_in::async_fn()\n+   |     ^^^^^^^^^^^^^^^^^^^^ could not resolve path `error::_in::async_fn`\n+   |\n+   = note: this error was originally ignored because you are running `rustdoc`\n+   = note: try running again with `rustc` and you may get a more detailed error\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "54c3f856ddb3c0ad8a2f901c2e8a3e3ae9a5d0c7", "filename": "src/test/rustdoc/impl-trait-alias.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/768d6a4950d66f1a0e1e7793a984fb638494d1c5/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-trait-alias.rs?ref=768d6a4950d66f1a0e1e7793a984fb638494d1c5", "patch": "@@ -0,0 +1,14 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait MyTrait {}\n+impl MyTrait for i32 {}\n+\n+// @has impl_trait_alias/type.Foo.html 'Foo'\n+/// debug type\n+pub type Foo = impl MyTrait;\n+\n+// @has impl_trait_alias/fn.foo.html 'foo'\n+/// debug function\n+pub fn foo() -> Foo {\n+    1\n+}"}]}