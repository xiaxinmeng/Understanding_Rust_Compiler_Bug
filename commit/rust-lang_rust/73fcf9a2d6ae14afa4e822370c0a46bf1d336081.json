{"sha": "73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZmNmOWEyZDZhZTE0YWZhNGU4MjIzNzBjMGE0NmJmMWQzMzYwODE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T20:44:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-03T20:44:23Z"}, "message": "Restore crate_def_map marks", "tree": {"sha": "9d2d21a17bdebea9301ac66897f839160c0142fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d2d21a17bdebea9301ac66897f839160c0142fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "html_url": "https://github.com/rust-lang/rust/commit/73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fba51c5fc05264abcbf971dcf28142746588d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fba51c5fc05264abcbf971dcf28142746588d74", "html_url": "https://github.com/rust-lang/rust/commit/6fba51c5fc05264abcbf971dcf28142746588d74"}], "stats": {"total": 67, "additions": 41, "deletions": 26}, "files": [{"sha": "63ed2a09833b77180a07e9fde83fa1abd9520c8e", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -17,6 +17,8 @@ pub mod diagnostics;\n \n #[cfg(test)]\n mod test_db;\n+#[cfg(test)]\n+mod marks;\n \n // FIXME: this should be private\n pub mod nameres;"}, {"sha": "0b99eac7174990588cf791479d372f68d477e431", "filename": "crates/ra_hir_def/src/marks.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fmarks.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -0,0 +1,14 @@\n+//! See test_utils/src/marks.rs\n+\n+test_utils::marks!(\n+    bogus_paths\n+    name_res_works_for_broken_modules\n+    can_import_enum_variant\n+    glob_enum\n+    glob_across_crates\n+    std_prelude\n+    macro_rules_from_other_crates_are_visible_with_macro_use\n+    prelude_is_macro_use\n+    macro_dollar_crate_self\n+    macro_dollar_crate_other\n+);"}, {"sha": "b5c682219349a6a16a7ccd3165f50adb6eb1460b", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -18,7 +18,7 @@ use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n use ra_syntax::ast;\n use rustc_hash::{FxHashMap, FxHashSet};\n-// use test_utils::tested_by;\n+use test_utils::tested_by;\n \n use crate::{\n     builtin_type::BuiltinType,\n@@ -263,12 +263,12 @@ impl CrateDefMap {\n         let mut curr_per_ns: PerNs = match path.kind {\n             PathKind::DollarCrate(krate) => {\n                 if krate == self.krate {\n-                    // tested_by!(macro_dollar_crate_self);\n+                    tested_by!(macro_dollar_crate_self);\n                     PerNs::types(ModuleId { krate: self.krate, module_id: self.root }.into())\n                 } else {\n                     let def_map = db.crate_def_map(krate);\n                     let module = ModuleId { krate, module_id: def_map.root };\n-                    // tested_by!(macro_dollar_crate_other);\n+                    tested_by!(macro_dollar_crate_other);\n                     PerNs::types(module.into())\n                 }\n             }\n@@ -369,7 +369,7 @@ impl CrateDefMap {\n                 }\n                 ModuleDefId::AdtId(AdtId::EnumId(e)) => {\n                     // enum variant\n-                    // tested_by!(can_import_enum_variant);\n+                    tested_by!(can_import_enum_variant);\n                     let enum_data = db.enum_data(e);\n                     match enum_data.variant(&segment.name) {\n                         Some(local_id) => {"}, {"sha": "3b61d9895bc3024817d9e1f87a1c964915ca570c", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -8,7 +8,7 @@ use ra_cfg::CfgOptions;\n use ra_db::{CrateId, FileId};\n use ra_syntax::{ast, SmolStr};\n use rustc_hash::FxHashMap;\n-// use test_utils::tested_by;\n+use test_utils::tested_by;\n \n use crate::{\n     attr::Attr,\n@@ -218,7 +218,7 @@ where\n         );\n \n         if let Some(ModuleDefId::ModuleId(m)) = res.take_types() {\n-            // tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+            tested_by!(macro_rules_from_other_crates_are_visible_with_macro_use);\n             self.import_all_macros_exported(current_module_id, m.krate);\n         }\n     }\n@@ -294,10 +294,10 @@ where\n             match def.take_types() {\n                 Some(ModuleDefId::ModuleId(m)) => {\n                     if import.is_prelude {\n-                        // tested_by!(std_prelude);\n+                        tested_by!(std_prelude);\n                         self.def_map.prelude = Some(m);\n                     } else if m.krate != self.def_map.krate {\n-                        // tested_by!(glob_across_crates);\n+                        tested_by!(glob_across_crates);\n                         // glob import from other crate => we can just import everything once\n                         let item_map = self.db.crate_def_map(m.krate);\n                         let scope = &item_map[m.module_id].scope;\n@@ -332,7 +332,7 @@ where\n                     }\n                 }\n                 Some(ModuleDefId::AdtId(AdtId::EnumId(e))) => {\n-                    // tested_by!(glob_enum);\n+                    tested_by!(glob_enum);\n                     // glob import from enum => just import all the variants\n                     let enum_data = self.db.enum_data(e);\n                     let resolutions = enum_data\n@@ -373,8 +373,7 @@ where\n                     let resolution = Resolution { def, import: Some(import_id) };\n                     self.update(module_id, Some(import_id), &[(name, resolution)]);\n                 }\n-                // tested_by!(bogus_paths),\n-                None => (),\n+                None => tested_by!(bogus_paths),\n             }\n         }\n     }\n@@ -534,7 +533,7 @@ where\n         // Prelude module is always considered to be `#[macro_use]`.\n         if let Some(prelude_module) = self.def_collector.def_map.prelude {\n             if prelude_module.krate != self.def_collector.def_map.krate {\n-                // tested_by!(prelude_is_macro_use);\n+                tested_by!(prelude_is_macro_use);\n                 self.def_collector.import_all_macros_exported(self.module_id, prelude_module.krate);\n             }\n         }"}, {"sha": "cb47fa317d2d07a01f8555143a16ce3cfa5df076", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -14,6 +14,7 @@ use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n     AstNode, AstPtr, SourceFile,\n };\n+use test_utils::tested_by;\n \n use crate::{attr::Attr, db::DefDatabase2, path::Path, FileAstId, HirFileId, ModuleSource, Source};\n \n@@ -297,8 +298,7 @@ impl RawItemsCollector {\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n-        // FIXME: restore this mark once we complete hir splitting\n-        // tested_by!(name_res_works_for_broken_modules);\n+        tested_by!(name_res_works_for_broken_modules);\n     }\n \n     fn add_use_item(&mut self, current_module: Option<Module>, use_item: ast::UseItem) {"}, {"sha": "52bd0aa91e8ce7ada8188c8e1a1ed545329b0301", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -8,7 +8,7 @@ use std::sync::Arc;\n \n use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, SourceDatabase};\n-// use test_utils::covers;\n+use test_utils::covers;\n \n use crate::{db::DefDatabase2, nameres::*, test_db::TestDB, CrateModuleId};\n \n@@ -104,7 +104,7 @@ fn crate_def_map_smoke_test() {\n \n #[test]\n fn bogus_paths() {\n-    // covers!(bogus_paths);\n+    covers!(bogus_paths);\n     let map = def_map(\n         \"\n         //- /lib.rs\n@@ -219,7 +219,7 @@ fn re_exports() {\n \n #[test]\n fn std_prelude() {\n-    // covers!(std_prelude);\n+    covers!(std_prelude);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:test_crate\n@@ -243,7 +243,7 @@ fn std_prelude() {\n \n #[test]\n fn can_import_enum_variant() {\n-    // covers!(can_import_enum_variant);\n+    covers!(can_import_enum_variant);\n     let map = def_map(\n         \"\n         //- /lib.rs"}, {"sha": "5b03fe36504a46cc2475be629188112c06e545b4", "filename": "crates/ra_hir_def/src/nameres/tests/globs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -75,7 +75,7 @@ fn glob_2() {\n \n #[test]\n fn glob_across_crates() {\n-    // covers!(glob_across_crates);\n+    covers!(glob_across_crates);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:test_crate\n@@ -94,7 +94,7 @@ fn glob_across_crates() {\n \n #[test]\n fn glob_enum() {\n-    // covers!(glob_enum);\n+    covers!(glob_enum);\n     let map = def_map(\n         \"\n         //- /lib.rs"}, {"sha": "704065633a5f329a0cb6a6b050e5b5918fc74a6b", "filename": "crates/ra_hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -175,7 +175,7 @@ fn unexpanded_macro_should_expand_by_fixedpoint_loop() {\n \n #[test]\n fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n-    // covers!(macro_rules_from_other_crates_are_visible_with_macro_use);\n+    covers!(macro_rules_from_other_crates_are_visible_with_macro_use);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:foo\n@@ -225,7 +225,7 @@ fn macro_rules_from_other_crates_are_visible_with_macro_use() {\n \n #[test]\n fn prelude_is_macro_use() {\n-    // covers!(prelude_is_macro_use);\n+    covers!(prelude_is_macro_use);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:foo\n@@ -507,8 +507,8 @@ fn path_qualified_macros() {\n \n #[test]\n fn macro_dollar_crate_is_correct_in_item() {\n-    // covers!(macro_dollar_crate_self);\n-    // covers!(macro_dollar_crate_other);\n+    covers!(macro_dollar_crate_self);\n+    covers!(macro_dollar_crate_other);\n     let map = def_map(\n         \"\n         //- /main.rs crate:main deps:foo\n@@ -566,7 +566,7 @@ fn macro_dollar_crate_is_correct_in_item() {\n \n #[test]\n fn macro_dollar_crate_is_correct_in_indirect_deps() {\n-    // covers!(macro_dollar_crate_other);\n+    covers!(macro_dollar_crate_other);\n     // From std\n     let map = def_map(\n         r#\""}, {"sha": "dee364a1422fb975ba5462d30385780e43944327", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73fcf9a2d6ae14afa4e822370c0a46bf1d336081/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=73fcf9a2d6ae14afa4e822370c0a46bf1d336081", "patch": "@@ -2,7 +2,7 @@ use super::*;\n \n #[test]\n fn name_res_works_for_broken_modules() {\n-    // covers!(name_res_works_for_broken_modules);\n+    covers!(name_res_works_for_broken_modules);\n     let map = def_map(\n         \"\n         //- /lib.rs"}]}