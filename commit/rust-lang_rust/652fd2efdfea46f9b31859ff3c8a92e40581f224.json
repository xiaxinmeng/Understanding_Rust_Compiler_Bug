{"sha": "652fd2efdfea46f9b31859ff3c8a92e40581f224", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MmZkMmVmZGZlYTQ2ZjliMzE4NTlmZjNjOGE5MmU0MDU4MWYyMjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-30T20:38:50Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:05Z"}, "message": "add tests exercising `exists<'a> { forall<'b> { .. } }` pattern\n\nAmazingly, this scenario was not tested for trait matching.", "tree": {"sha": "7be5fd18adde029ff6ed0847fdccb41ea96e05ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7be5fd18adde029ff6ed0847fdccb41ea96e05ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652fd2efdfea46f9b31859ff3c8a92e40581f224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652fd2efdfea46f9b31859ff3c8a92e40581f224", "html_url": "https://github.com/rust-lang/rust/commit/652fd2efdfea46f9b31859ff3c8a92e40581f224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652fd2efdfea46f9b31859ff3c8a92e40581f224/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b68fad670bb3612cac26e50751e4fd9150e59977", "url": "https://api.github.com/repos/rust-lang/rust/commits/b68fad670bb3612cac26e50751e4fd9150e59977", "html_url": "https://github.com/rust-lang/rust/commit/b68fad670bb3612cac26e50751e4fd9150e59977"}], "stats": {"total": 163, "additions": 163, "deletions": 0}, "files": [{"sha": "bba1f4dfb86c2784858561ce5cf4f3183c862e85", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.rs?ref=652fd2efdfea46f9b31859ff3c8a92e40581f224", "patch": "@@ -0,0 +1,23 @@\n+// Test a `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n+//\n+// In particular, we test this pattern in trait solving, where it is not connected\n+// to any part of the source code.\n+\n+trait Trait<T> {}\n+\n+fn foo<'a>() -> fn(&'a u32) {\n+    panic!()\n+}\n+\n+fn main() {\n+    // Here, proving that `(): Trait<for<'b> fn(&'b u32)>` uses the impl:\n+    //\n+    // - The impl provides the clause `forall<'a> { (): Trait<fn(&'a u32)> }`\n+    // - We instantiate `'a` existentially to get `(): Trait<fn(&?a u32)>`\n+    // - We unify `fn(&?a u32)` with `for<'b> fn(&'b u32)`\n+    //   - This requires (among other things) instantiating `'b` universally,\n+    //     yielding `fn(&!b u32)`, in a fresh universe U1\n+    //   - So we get `?a = !b` but the universe U0 assigned to `?a` cannot name `!b`.\n+\n+    let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n+}"}, {"sha": "75ba89f58da1b013f39e1b8ef95ec8172e8d8baa", "filename": "src/test/ui/hrtb/hrtb-exists-forall-fn.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-fn.stderr?ref=652fd2efdfea46f9b31859ff3c8a92e40581f224", "patch": "@@ -0,0 +1,24 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/hrtb-exists-forall-fn.rs:22:34\n+   |\n+LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n+   |                                  ^^^\n+   |\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U1, name: BrNamed(crate0:DefIndex(1:11), 'b) })...\n+   = note: ...so that the expression is assignable:\n+           expected for<'b> fn(&'b u32)\n+              found fn(&u32)\n+note: but, the lifetime must be valid for the call at 22:34...\n+  --> $DIR/hrtb-exists-forall-fn.rs:22:34\n+   |\n+LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n+   |                                  ^^^^^\n+note: ...so type `fn(&u32)` of expression is valid during the expression\n+  --> $DIR/hrtb-exists-forall-fn.rs:22:34\n+   |\n+LL |     let _: for<'b> fn(&'b u32) = foo(); //~ ERROR cannot infer\n+   |                                  ^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "8801760056ecb0b1054070d099bc5ca7fecc7a2e", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-contravariant.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-contravariant.rs?ref=652fd2efdfea46f9b31859ff3c8a92e40581f224", "patch": "@@ -0,0 +1,35 @@\n+// Test a `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n+//\n+// In particular, we test this pattern in trait solving, where it is not connected\n+// to any part of the source code.\n+//\n+// compile-pass\n+\n+trait Trait<T> {}\n+\n+fn foo<T>()\n+where\n+    T: Trait<for<'b> fn(&'b u32)>,\n+{\n+}\n+\n+impl<'a> Trait<fn(&'a u32)> for () {}\n+\n+fn main() {\n+    // Here, proving that `(): Trait<for<'b> fn(&'b u32)>` uses the impl:\n+    //\n+    // - The impl provides the clause `forall<'a> { (): Trait<fn(&'a u32)> }`\n+    // - We instantiate `'a` existentially to get `(): Trait<fn(&?a u32)>`\n+    // - We unify `fn(&?a u32)` with `for<'b> fn(&'b u32)` -- this does a\n+    //   \"bidirectional\" subtyping check, so we wind up with:\n+    //   - `fn(&?a u32) <: for<'b> fn(&'b u32)` :-\n+    //     - `&'!b u32 <: &?a u32`\n+    //     - `!'b: ?a` -- solveable if `?a` is inferred to `'empty`\n+    //   - `for<'b> fn(&'b u32) <: fn(&?a u32)` :-\n+    //     - `&?a u32 u32 <: &?b u32`\n+    //     - `?a: ?b` -- solveable if `?b` is also inferred to `'empty`\n+    // - So the subtyping check succeeds, somewhat surprisingly.\n+    //   This is because we can use `'empty`.\n+\n+    foo::<()>();\n+}"}, {"sha": "da1bb7cd5fd0bf79f9e56a7d1a9dee3492ff4a57", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-covariant.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-covariant.rs?ref=652fd2efdfea46f9b31859ff3c8a92e40581f224", "patch": "@@ -0,0 +1,37 @@\n+// Test a `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n+//\n+// In particular, we test this pattern in trait solving, where it is not connected\n+// to any part of the source code.\n+//\n+// compile-pass\n+\n+trait Trait<T> {}\n+\n+fn foo<T>()\n+where\n+    T: Trait<for<'b> fn(fn(&'b u32))>,\n+{\n+}\n+\n+impl<'a> Trait<fn(fn(&'a u32))> for () {}\n+\n+fn main() {\n+    // Here, proving that `(): Trait<for<'b> fn(&'b u32)>` uses the impl:\n+    //\n+    // - The impl provides the clause `forall<'a> { (): Trait<fn(fn(&'a u32))> }`\n+    // - We instantiate `'a` existentially to get `(): Trait<fn(fn(&?a u32))>`\n+    // - We unify `fn(fn(&?a u32))` with `for<'b> fn(fn(&'b u32))` -- this does a\n+    //   \"bidirectional\" subtyping check, so we wind up with:\n+    //   - `fn(fn(&?a u32)) <: for<'b> fn(fn(&'b u32))` :-\n+    //     - `fn(&!b u32) <: fn(&?a u32)`\n+    //       - `&?a u32 <: &!b u32`\n+    //         - `?a: !'b` -- solveable if `?a` is inferred to `'static`\n+    //   - `for<'b> fn(fn(&'b u32)) <: fn(fn(&?a u32))` :-\n+    //     - `fn(&?a u32) <: fn(&?b u32)`\n+    //       - `&?b u32 <: &?a u32`\n+    //         - `?b: ?a` -- solveable if `?b` is inferred to `'static`\n+    // - So the subtyping check succeeds, somewhat surprisingly.\n+    //   This is because we can use `'static`.\n+\n+    foo::<()>();\n+}"}, {"sha": "db589548d0e8e39dd54c99922d38edda7602dd42", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.rs?ref=652fd2efdfea46f9b31859ff3c8a92e40581f224", "patch": "@@ -0,0 +1,29 @@\n+// Test a `exists<'a> { forall<'b> { 'a = 'b } }` pattern -- which should not compile!\n+//\n+// In particular, we test this pattern in trait solving, where it is not connected\n+// to any part of the source code.\n+\n+use std::cell::Cell;\n+\n+trait Trait<T> {}\n+\n+fn foo<T>()\n+where\n+    T: Trait<for<'b> fn(Cell<&'b u32>)>,\n+{\n+}\n+\n+impl<'a> Trait<fn(Cell<&'a u32>)> for () {}\n+\n+fn main() {\n+    // Here, proving that `(): Trait<for<'b> fn(&'b u32)>` uses the impl:\n+    //\n+    // - The impl provides the clause `forall<'a> { (): Trait<fn(&'a u32)> }`\n+    // - We instantiate `'a` existentially to get `(): Trait<fn(&?a u32)>`\n+    // - We unify `fn(&?a u32)` with `for<'b> fn(&'b u32)`\n+    //   - This requires (among other things) instantiating `'b` universally,\n+    //     yielding `fn(&!b u32)`, in a fresh universe U1\n+    //   - So we get `?a = !b` but the universe U0 assigned to `?a` cannot name `!b`.\n+\n+    foo::<()>(); //~ ERROR cannot infer\n+}"}, {"sha": "7a0986ccdd939c743c8a28e9c79c0db1cd4df55f", "filename": "src/test/ui/hrtb/hrtb-exists-forall-trait-invariant.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/652fd2efdfea46f9b31859ff3c8a92e40581f224/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-exists-forall-trait-invariant.stderr?ref=652fd2efdfea46f9b31859ff3c8a92e40581f224", "patch": "@@ -0,0 +1,15 @@\n+error[E0495]: cannot infer an appropriate lifetime for lifetime parameter `'a` due to conflicting requirements\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+   |\n+LL |     foo::<()>(); //~ ERROR cannot infer\n+   |     ^^^^^^^^^\n+   |\n+   = note: first, the lifetime cannot outlive lifetime RePlaceholder(Placeholder { universe: U3, name: BrNamed(crate0:DefIndex(1:11), 'b) })...\n+   = note: ...but the lifetime must also be valid for lifetime RePlaceholder(Placeholder { universe: U3, name: BrNamed(crate0:DefIndex(1:11), 'b) })...\n+   = note: ...so that the types are compatible:\n+           expected Trait<for<'b> fn(std::cell::Cell<&'b u32>)>\n+              found Trait<fn(std::cell::Cell<&u32>)>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0495`."}]}