{"sha": "2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMDYwZWI4ODBjNTQ4MmM0ZmQ1YThkZmIzYWNlZTExMTdjNmQxMjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-23T01:26:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-23T01:26:25Z"}, "message": "core: Name is_failure to is_err, is_success to is_ok", "tree": {"sha": "60441d992b8e6cff772cca0be51741c77110dccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60441d992b8e6cff772cca0be51741c77110dccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "html_url": "https://github.com/rust-lang/rust/commit/2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58983b2d92f6e3152d77aded33b1a3d74f67ee25", "url": "https://api.github.com/repos/rust-lang/rust/commits/58983b2d92f6e3152d77aded33b1a3d74f67ee25", "html_url": "https://github.com/rust-lang/rust/commit/58983b2d92f6e3152d77aded33b1a3d74f67ee25"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "435c4149a04e3d1e45b0c8802091db6b614476cb", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "patch": "@@ -440,7 +440,7 @@ fn test_recv_chan_wrong_task() {\n     let po = port();\n     let ch = chan(po);\n     send(ch, \"flower\");\n-    assert result::is_failure(task::try {||\n+    assert result::is_err(task::try {||\n         recv_chan(ch)\n     })\n }"}, {"sha": "677773933e91394c2b641998587436f0e371844f", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "patch": "@@ -232,5 +232,5 @@ fn test_weaken_task_fail() unsafe {\n             fail;\n         }\n     };\n-    assert result::is_failure(res);\n+    assert result::is_err(res);\n }"}, {"sha": "7981f48c8daa1d1db0730c96bc3dce9762f7d3d4", "filename": "src/libcore/result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "patch": "@@ -43,16 +43,16 @@ pure fn get_err<T, U: copy>(res: result<T, U>) -> U {\n }\n \n #[doc = \"Returns true if the result is `ok`\"]\n-pure fn is_success<T, U>(res: result<T, U>) -> bool {\n+pure fn is_ok<T, U>(res: result<T, U>) -> bool {\n     alt res {\n       ok(_) { true }\n       err(_) { false }\n     }\n }\n \n-#[doc = \"Returns true if the result is `error`\"]\n-pure fn is_failure<T, U>(res: result<T, U>) -> bool {\n-    !is_success(res)\n+#[doc = \"Returns true if the result is `err`\"]\n+pure fn is_err<T, U>(res: result<T, U>) -> bool {\n+    !is_ok(res)\n }\n \n #[doc = \"\n@@ -181,9 +181,9 @@ fn map_err<T: copy, E, F: copy>(res: result<T, E>, op: fn(E) -> F)\n }\n \n impl extensions<T, E> for result<T, E> {\n-    fn is_success() -> bool { is_success(self) }\n+    fn is_ok() -> bool { is_ok(self) }\n \n-    fn is_failure() -> bool { is_failure(self) }\n+    fn is_err() -> bool { is_err(self) }\n \n     fn iter(f: fn(T)) {\n         alt self {"}, {"sha": "1cb1d81e0e407d163f67ec8b22607f26c9d22cce", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "patch": "@@ -813,7 +813,7 @@ fn read_common_impl(socket_data: *tcp_socket_data, timeout_msecs: uint)\n     log(debug, \"starting tcp::read\");\n     let iotask = (*socket_data).iotask;\n     let rs_result = read_start_common_impl(socket_data);\n-    if result::is_failure(rs_result) {\n+    if result::is_err(rs_result) {\n         let err_data = result::get_err(rs_result);\n         result::err(err_data)\n     }\n@@ -1424,7 +1424,7 @@ mod test {\n \n                         let accept_result = accept(new_conn);\n                         log(debug, \"SERVER: after accept()\");\n-                        if result::is_failure(accept_result) {\n+                        if result::is_err(accept_result) {\n                             log(debug, \"SERVER: error accept connection\");\n                             let err_data = result::get_err(accept_result);\n                             comm::send(kill_ch, some(err_data));\n@@ -1465,7 +1465,7 @@ mod test {\n                 log(debug, \"SERVER: recv'd on cont_ch..leaving listen cb\");\n             });\n             // err check on listen_result\n-            if result::is_failure(listen_result) {\n+            if result::is_err(listen_result) {\n                 let err_data = result::get_err(listen_result);\n                 log(debug, #fmt(\"SERVER: exited abnormally name %s msg %s\",\n                                 err_data.err_name, err_data.err_msg));\n@@ -1486,7 +1486,7 @@ mod test {\n             let server_ip_addr = ip::v4::parse_addr(server_ip);\n             let new_listener_result =\n                 new_listener(server_ip_addr, server_port, 128u, iotask);\n-            if result::is_failure(new_listener_result) {\n+            if result::is_err(new_listener_result) {\n                 let err_data = result::get_err(new_listener_result);\n                 log(debug, #fmt(\"SERVER: exited abnormally name %s msg %s\",\n                                 err_data.err_name, err_data.err_msg));\n@@ -1498,7 +1498,7 @@ mod test {\n             // in a loop {}, but we're just going to take a single\n             // client.. get their req, write a resp and then exit\n             let new_conn_result = server_port.recv();\n-            if result::is_failure(new_conn_result) {\n+            if result::is_err(new_conn_result) {\n                 let err_data = result::get_err(new_conn_result);\n                 log(debug, #fmt(\"SERVER: exited abnormally name %s msg %s\",\n                                 err_data.err_name, err_data.err_msg));\n@@ -1535,7 +1535,7 @@ mod test {\n \n         log(debug, \"CLIENT: starting..\");\n         let connect_result = connect(server_ip_addr, server_port, iotask);\n-        if result::is_failure(connect_result) {\n+        if result::is_err(connect_result) {\n             log(debug, \"CLIENT: failed to connect\");\n             let err_data = result::get_err(connect_result);\n             log(debug, #fmt(\"CLIENT: connect err name: %s msg: %s\",\n@@ -1547,7 +1547,7 @@ mod test {\n             let resp_bytes = str::bytes(resp);\n             tcp_write_single(sock, resp_bytes);\n             let read_result = sock.read(0u);\n-            if read_result.is_failure() {\n+            if read_result.is_err() {\n                 log(debug, \"CLIENT: failure to read\");\n                 \"\"\n             }\n@@ -1564,7 +1564,7 @@ mod test {\n     fn tcp_write_single(sock: tcp_socket, val: [u8]) {\n         let write_result_future = sock.write_future(val);\n         let write_result = write_result_future.get();\n-        if result::is_failure(write_result) {\n+        if result::is_err(write_result) {\n             log(debug, \"tcp_write_single: write failed!\");\n             let err_data = result::get_err(write_result);\n             log(debug, #fmt(\"tcp_write_single err name: %s msg: %s\","}, {"sha": "3f5e92cdb75a20691f02f68852f4f67744e1422f", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f060eb880c5482c4fd5a8dfb3acee1117c6d121/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=2f060eb880c5482c4fd5a8dfb3acee1117c6d121", "patch": "@@ -2,7 +2,7 @@\n fn adder(+x: @int, +y: @int) -> int { ret *x + *y; }\n fn failer() -> @int { fail; }\n fn main() {\n-    assert(result::is_failure(task::try {||\n+    assert(result::is_err(task::try {||\n         adder(@2, failer()); ()\n     }));\n }"}]}