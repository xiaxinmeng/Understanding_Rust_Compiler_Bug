{"sha": "3ba9bc493fad9270dac74250d0b557495fe7d109", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiYTliYzQ5M2ZhZDkyNzBkYWM3NDI1MGQwYjU1NzQ5NWZlN2QxMDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-19T12:09:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-19T12:09:33Z"}, "message": "Merge #1702\n\n1702: replace heck with just ascii transformation r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a9dc805a9a01de763703ae1d68b1fcd290555f28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9dc805a9a01de763703ae1d68b1fcd290555f28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ba9bc493fad9270dac74250d0b557495fe7d109", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdWpF9CRBK7hj4Ov3rIwAAdHIIAAfzzC+aXC7sw9d//9vRMrnY\nnP6KnMjdMo28HzE1Xl075PodGBLPwU/oIbikcxy/s2LpgLCAC34U/xUVOxf+BNJu\nYyydl9gdfKE2YzXZX9v29b+caPGHdKPDbrklRmX4u5m29SjSfZQEPLrMPDhqnmxE\noXOPnIGid2L+zvgg7wfK8C1WwU4EWEi4aW8oEhSZLA27MUAEoWAqPzAo3nnhwqTU\njxfV6MFB4dM8pyL2su4VvbsxnO9wJJFiFOI2mr73/+6RQgSgWdjcl4OSjxMc4rzR\n9HQcnki97kutSgQjQcs45cmRtCHGd/rNlXjEjmVFo9B4fdAZJOwJLKgKv2+jfss=\n=gz33\n-----END PGP SIGNATURE-----\n", "payload": "tree a9dc805a9a01de763703ae1d68b1fcd290555f28\nparent cef90ce45ee9954e864933450953f5eb83429f01\nparent 58e9d7ef6fae66d90db276c079c47fa74bc1ca7f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1566216573 +0000\ncommitter GitHub <noreply@github.com> 1566216573 +0000\n\nMerge #1702\n\n1702: replace heck with just ascii transformation r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ba9bc493fad9270dac74250d0b557495fe7d109", "html_url": "https://github.com/rust-lang/rust/commit/3ba9bc493fad9270dac74250d0b557495fe7d109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ba9bc493fad9270dac74250d0b557495fe7d109/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cef90ce45ee9954e864933450953f5eb83429f01", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef90ce45ee9954e864933450953f5eb83429f01", "html_url": "https://github.com/rust-lang/rust/commit/cef90ce45ee9954e864933450953f5eb83429f01"}, {"sha": "58e9d7ef6fae66d90db276c079c47fa74bc1ca7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/58e9d7ef6fae66d90db276c079c47fa74bc1ca7f", "html_url": "https://github.com/rust-lang/rust/commit/58e9d7ef6fae66d90db276c079c47fa74bc1ca7f"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "3a6f0cc82a1822204b7799c79755acf19cfadb95", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9bc493fad9270dac74250d0b557495fe7d109/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9bc493fad9270dac74250d0b557495fe7d109/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3ba9bc493fad9270dac74250d0b557495fe7d109", "patch": "@@ -1290,7 +1290,6 @@ name = \"ra_tools\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "1ab3573f9d69eed7ae8ba121c1176b41e70cb7f5", "filename": "crates/ra_tools/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9bc493fad9270dac74250d0b557495fe7d109/crates%2Fra_tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9bc493fad9270dac74250d0b557495fe7d109/crates%2Fra_tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2FCargo.toml?ref=3ba9bc493fad9270dac74250d0b557495fe7d109", "patch": "@@ -12,5 +12,4 @@ clap = \"2.32.0\"\n quote = \"1.0.2\"\n proc-macro2 = \"1.0.1\"\n ron = \"0.5.1\"\n-heck = \"0.3.0\"\n serde = { version = \"1.0.0\", features = [\"derive\"] }"}, {"sha": "578f13a3e05602bca401c7b029096f0ad07ac2ec", "filename": "crates/ra_tools/src/boilerplate_gen.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3ba9bc493fad9270dac74250d0b557495fe7d109/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ba9bc493fad9270dac74250d0b557495fe7d109/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fboilerplate_gen.rs?ref=3ba9bc493fad9270dac74250d0b557495fe7d109", "patch": "@@ -5,7 +5,6 @@ use std::{\n     process::{Command, Stdio},\n };\n \n-use heck::{ShoutySnakeCase, SnakeCase};\n use proc_macro2::{Punct, Spacing};\n use quote::{format_ident, quote};\n use ron;\n@@ -38,7 +37,7 @@ fn generate_ast(grammar: &Grammar) -> Result<String> {\n         let name = format_ident!(\"{}\", name);\n \n         let adt = if variants.is_empty() {\n-            let kind = format_ident!(\"{}\", name.to_string().to_shouty_snake_case());\n+            let kind = format_ident!(\"{}\", to_upper_snake_case(&name.to_string()));\n             quote! {\n                 #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n                 pub struct #name {\n@@ -61,7 +60,7 @@ fn generate_ast(grammar: &Grammar) -> Result<String> {\n         } else {\n             let kinds = variants\n                 .iter()\n-                .map(|name| format_ident!(\"{}\", name.to_string().to_shouty_snake_case()))\n+                .map(|name| format_ident!(\"{}\", to_upper_snake_case(&name.to_string())))\n                 .collect::<Vec<_>>();\n \n             quote! {\n@@ -122,7 +121,7 @@ fn generate_ast(grammar: &Grammar) -> Result<String> {\n \n         let options = ast_node.options.iter().map(|attr| {\n             let method_name = match attr {\n-                Attr::Type(t) => format_ident!(\"{}\", t.to_snake_case()),\n+                Attr::Type(t) => format_ident!(\"{}\", to_lower_snake_case(&t)),\n                 Attr::NameType(n, _) => format_ident!(\"{}\", n),\n             };\n             let ty = match attr {\n@@ -189,14 +188,14 @@ fn generate_syntax_kinds(grammar: &Grammar) -> Result<String> {\n \n     let full_keywords_values = &grammar.keywords;\n     let full_keywords =\n-        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", kw.to_shouty_snake_case()));\n+        full_keywords_values.iter().map(|kw| format_ident!(\"{}_KW\", to_upper_snake_case(&kw)));\n \n     let all_keywords_values =\n         grammar.keywords.iter().chain(grammar.contextual_keywords.iter()).collect::<Vec<_>>();\n     let all_keywords_idents = all_keywords_values.iter().map(|kw| format_ident!(\"{}\", kw));\n     let all_keywords = all_keywords_values\n         .iter()\n-        .map(|name| format_ident!(\"{}_KW\", name.to_shouty_snake_case()))\n+        .map(|name| format_ident!(\"{}_KW\", to_upper_snake_case(&name)))\n         .collect::<Vec<_>>();\n \n     let literals =\n@@ -325,3 +324,31 @@ enum Attr {\n     Type(String),\n     NameType(String, String),\n }\n+\n+fn to_upper_snake_case(s: &str) -> String {\n+    let mut buf = String::with_capacity(s.len());\n+    let mut prev_is_upper = None;\n+    for c in s.chars() {\n+        if c.is_ascii_uppercase() && prev_is_upper == Some(false) {\n+            buf.push('_')\n+        }\n+        prev_is_upper = Some(c.is_ascii_uppercase());\n+\n+        buf.push(c.to_ascii_uppercase());\n+    }\n+    buf\n+}\n+\n+fn to_lower_snake_case(s: &str) -> String {\n+    let mut buf = String::with_capacity(s.len());\n+    let mut prev_is_upper = None;\n+    for c in s.chars() {\n+        if c.is_ascii_uppercase() && prev_is_upper == Some(false) {\n+            buf.push('_')\n+        }\n+        prev_is_upper = Some(c.is_ascii_uppercase());\n+\n+        buf.push(c.to_ascii_lowercase());\n+    }\n+    buf\n+}"}]}