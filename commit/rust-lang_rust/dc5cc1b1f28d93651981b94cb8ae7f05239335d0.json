{"sha": "dc5cc1b1f28d93651981b94cb8ae7f05239335d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNWNjMWIxZjI4ZDkzNjUxOTgxYjk0Y2I4YWU3ZjA1MjM5MzM1ZDA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-01T10:25:19Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-01T11:12:38Z"}, "message": "Run decorators on expanded AST.", "tree": {"sha": "69e89215d60909e7836c9fdbb2d3d2dd9e48da8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e89215d60909e7836c9fdbb2d3d2dd9e48da8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc5cc1b1f28d93651981b94cb8ae7f05239335d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5cc1b1f28d93651981b94cb8ae7f05239335d0", "html_url": "https://github.com/rust-lang/rust/commit/dc5cc1b1f28d93651981b94cb8ae7f05239335d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc5cc1b1f28d93651981b94cb8ae7f05239335d0/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b522b25a41967f7aa6694767dc85745692844259", "url": "https://api.github.com/repos/rust-lang/rust/commits/b522b25a41967f7aa6694767dc85745692844259", "html_url": "https://github.com/rust-lang/rust/commit/b522b25a41967f7aa6694767dc85745692844259"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "13507cb6dfda4e9fcd1636d22c0aaaaced0cd53b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/dc5cc1b1f28d93651981b94cb8ae7f05239335d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc5cc1b1f28d93651981b94cb8ae7f05239335d0/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=dc5cc1b1f28d93651981b94cb8ae7f05239335d0", "patch": "@@ -724,11 +724,7 @@ fn expand_annotatable(a: Annotatable,\n                       -> SmallVector<Annotatable> {\n     let a = expand_item_multi_modifier(a, fld);\n \n-    let mut decorator_items = SmallVector::zero();\n-    let mut new_attrs = Vec::new();\n-    expand_decorators(a.clone(), fld, &mut decorator_items, &mut new_attrs);\n-\n-    let mut new_items: SmallVector<Annotatable> = match a {\n+    let new_items: SmallVector<Annotatable> = match a {\n         Annotatable::Item(it) => match it.node {\n             ast::ItemKind::Mac(..) => {\n                 let new_items: SmallVector<P<ast::Item>> = it.and_then(|it| match it.node {\n@@ -746,7 +742,7 @@ fn expand_annotatable(a: Annotatable,\n                 if valid_ident {\n                     fld.cx.mod_push(it.ident);\n                 }\n-                let macro_use = contains_macro_use(fld, &new_attrs[..]);\n+                let macro_use = contains_macro_use(fld, &it.attrs);\n                 let result = with_exts_frame!(fld.cx.syntax_env,\n                                               macro_use,\n                                               noop_fold_item(it, fld));\n@@ -755,13 +751,7 @@ fn expand_annotatable(a: Annotatable,\n                 }\n                 result.into_iter().map(|i| Annotatable::Item(i)).collect()\n             },\n-            _ => {\n-                let it = P(ast::Item {\n-                    attrs: new_attrs,\n-                    ..(*it).clone()\n-                });\n-                noop_fold_item(it, fld).into_iter().map(|i| Annotatable::Item(i)).collect()\n-            }\n+            _ => noop_fold_item(it, fld).into_iter().map(|i| Annotatable::Item(i)).collect(),\n         },\n \n         Annotatable::TraitItem(it) => match it.node {\n@@ -790,6 +780,17 @@ fn expand_annotatable(a: Annotatable,\n         }\n     };\n \n+    new_items.into_iter().flat_map(|a| decorate(a, fld)).collect()\n+}\n+\n+fn decorate(a: Annotatable, fld: &mut MacroExpander) -> SmallVector<Annotatable> {\n+    let mut decorator_items = SmallVector::zero();\n+    let mut new_attrs = Vec::new();\n+    expand_decorators(a.clone(), fld, &mut decorator_items, &mut new_attrs);\n+    let decorator_items =\n+        decorator_items.into_iter().flat_map(|a| expand_annotatable(a, fld)).collect();\n+\n+    let mut new_items = SmallVector::one(a.fold_attrs(new_attrs));\n     new_items.push_all(decorator_items);\n     new_items\n }"}]}