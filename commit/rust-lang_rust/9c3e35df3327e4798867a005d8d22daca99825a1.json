{"sha": "9c3e35df3327e4798867a005d8d22daca99825a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljM2UzNWRmMzMyN2U0Nzk4ODY3YTAwNWQ4ZDIyZGFjYTk5ODI1YTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-15T20:05:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T20:05:48Z"}, "message": "Merge #2265\n\n2265: Fix add-new assist r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "80fae230e59354d97cb6ee85d036df3895d70de9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80fae230e59354d97cb6ee85d036df3895d70de9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c3e35df3327e4798867a005d8d22daca99825a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzwUcCRBK7hj4Ov3rIwAAdHIIAJYfrL2Z8mXQY6mBaHzuRg4p\nnkEj8X7o4aY3A32Oxhc5PC2sYBIvOkjBaJYgi44AXfUO4lkcFnltG1cRHr9z1OM6\nCHwFIAjZJIgrBBUXD1oH7xN//bUOJaT8GA2QM1+7BApks7TKpPbwrXB3s1Pwff/K\nEKMVLComoEPfutkZIVOhn1UhsY5KQ8IEaGzYXeT6UA657h4nQKn7ZkSBFLyb+HSl\nPB0vYQ28IukxFPpjHSBFt7VLgXC2AroObL0Fr/7xT3r277PUdsAInuxdyufHrH9F\nm3BhXfoBO9XYzipeBvwYHRAri8+pI5Qk9mZg7g59/f9OZVs0cSmWuZ2ByhTzwmo=\n=doJ3\n-----END PGP SIGNATURE-----\n", "payload": "tree 80fae230e59354d97cb6ee85d036df3895d70de9\nparent 1889b3c7b52c1070734dc449d4119c5e5cf991a4\nparent 20186cdf89a0b5027228ea01e0322bc4dac0456d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573848348 +0000\ncommitter GitHub <noreply@github.com> 1573848348 +0000\n\nMerge #2265\n\n2265: Fix add-new assist r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c3e35df3327e4798867a005d8d22daca99825a1", "html_url": "https://github.com/rust-lang/rust/commit/9c3e35df3327e4798867a005d8d22daca99825a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c3e35df3327e4798867a005d8d22daca99825a1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1889b3c7b52c1070734dc449d4119c5e5cf991a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1889b3c7b52c1070734dc449d4119c5e5cf991a4", "html_url": "https://github.com/rust-lang/rust/commit/1889b3c7b52c1070734dc449d4119c5e5cf991a4"}, {"sha": "20186cdf89a0b5027228ea01e0322bc4dac0456d", "url": "https://api.github.com/repos/rust-lang/rust/commits/20186cdf89a0b5027228ea01e0322bc4dac0456d", "html_url": "https://github.com/rust-lang/rust/commit/20186cdf89a0b5027228ea01e0322bc4dac0456d"}], "stats": {"total": 69, "additions": 64, "deletions": 5}, "files": [{"sha": "2038afdc6f78beda9046858949ebd043871e4c0d", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9c3e35df3327e4798867a005d8d22daca99825a1/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c3e35df3327e4798867a005d8d22daca99825a1/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=9c3e35df3327e4798867a005d8d22daca99825a1", "patch": "@@ -158,9 +158,12 @@ fn find_struct_impl(\n         let same_ty = blk.target_ty(db) == struct_ty;\n         let not_trait_impl = blk.target_trait(db).is_none();\n \n-        found_new_fn = has_new_fn(impl_blk);\n+        if !(same_ty && not_trait_impl) {\n+            return false;\n+        }\n \n-        same_ty && not_trait_impl\n+        found_new_fn = has_new_fn(impl_blk);\n+        true\n     });\n \n     if found_new_fn {\n@@ -186,9 +189,10 @@ fn has_new_fn(imp: &ast::ImplBlock) -> bool {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_not_applicable, check_assist_target};\n \n+    use super::*;\n+\n     #[test]\n     #[rustfmt::skip]\n     fn test_add_new() {\n@@ -345,7 +349,7 @@ struct Foo {<|>}\n impl Foo {\n     fn new() -> Self {\n         Self\n-    }    \n+    }\n }\",\n         );\n \n@@ -357,7 +361,7 @@ struct Foo {<|>}\n impl Foo {\n     fn New() -> Self {\n         Self\n-    }    \n+    }\n }\",\n         );\n     }\n@@ -376,4 +380,59 @@ struct EvenMoreIrrelevant;\n struct Foo<'a, T: Foo<'a>> {}\",\n         );\n     }\n+\n+    #[test]\n+    fn test_unrelated_new() {\n+        check_assist(\n+            add_new,\n+            r##\"\n+pub struct AstId<N: AstNode> {\n+    file_id: HirFileId,\n+    file_ast_id: FileAstId<N>,\n+}\n+\n+impl<N: AstNode> AstId<N> {\n+    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n+        AstId { file_id, file_ast_id }\n+    }\n+}\n+\n+pub struct Source<T> {\n+    pub file_id: HirFileId,<|>\n+    pub ast: T,\n+}\n+\n+impl<T> Source<T> {\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n+        Source { file_id: self.file_id, ast: f(self.ast) }\n+    }\n+}\n+\"##,\n+            r##\"\n+pub struct AstId<N: AstNode> {\n+    file_id: HirFileId,\n+    file_ast_id: FileAstId<N>,\n+}\n+\n+impl<N: AstNode> AstId<N> {\n+    pub fn new(file_id: HirFileId, file_ast_id: FileAstId<N>) -> AstId<N> {\n+        AstId { file_id, file_ast_id }\n+    }\n+}\n+\n+pub struct Source<T> {\n+    pub file_id: HirFileId,\n+    pub ast: T,\n+}\n+\n+impl<T> Source<T> {\n+    pub fn new(file_id: HirFileId, ast: T) -> Self { Self { file_id, ast } }<|>\n+\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n+        Source { file_id: self.file_id, ast: f(self.ast) }\n+    }\n+}\n+\"##,\n+        );\n+    }\n }"}]}