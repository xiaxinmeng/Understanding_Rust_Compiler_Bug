{"sha": "3d789740b09002e3d2be3ab1cf53fdca3995034c", "node_id": "C_kwDOAAsO6NoAKDNkNzg5NzQwYjA5MDAyZTNkMmJlM2FiMWNmNTNmZGNhMzk5NTAzNGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-20T10:28:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-20T10:28:05Z"}, "message": "Auto merge of #91080 - matthiaskrgr:rollup-znh88cy, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #90575 (Improve suggestions for compatible variants on type mismatch.)\n - #90628 (Clarify error messages caused by re-exporting `pub(crate)` visibility to outside)\n - #90930 (Fix `non-constant value` ICE (#90878))\n - #90983 (Make scrollbar in the sidebar always visible for visual consistency)\n - #91021 (Elaborate `Future::Output` when printing opaque `impl Future` type)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "760446b1d10e5a8b280fa4e791609da5ac3739d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/760446b1d10e5a8b280fa4e791609da5ac3739d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d789740b09002e3d2be3ab1cf53fdca3995034c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d789740b09002e3d2be3ab1cf53fdca3995034c", "html_url": "https://github.com/rust-lang/rust/commit/3d789740b09002e3d2be3ab1cf53fdca3995034c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d789740b09002e3d2be3ab1cf53fdca3995034c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d48ee90f51dd5793b425c6593581fd108ead398", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d48ee90f51dd5793b425c6593581fd108ead398", "html_url": "https://github.com/rust-lang/rust/commit/6d48ee90f51dd5793b425c6593581fd108ead398"}, {"sha": "3379721a30d87c396df69efa15b1307389d408df", "url": "https://api.github.com/repos/rust-lang/rust/commits/3379721a30d87c396df69efa15b1307389d408df", "html_url": "https://github.com/rust-lang/rust/commit/3379721a30d87c396df69efa15b1307389d408df"}], "stats": {"total": 1063, "additions": 891, "deletions": 172}, "files": [{"sha": "c8e898c6849575d3b4e3e91b1d679fd6b146537b", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -649,30 +649,74 @@ pub trait PrettyPrinter<'tcx>:\n \n                     let mut first = true;\n                     let mut is_sized = false;\n+                    let mut is_future = false;\n+                    let mut future_output_ty = None;\n+\n                     p!(\"impl\");\n                     for (predicate, _) in bounds {\n                         let predicate = predicate.subst(self.tcx(), substs);\n                         let bound_predicate = predicate.kind();\n-                        if let ty::PredicateKind::Trait(pred) = bound_predicate.skip_binder() {\n-                            let trait_ref = bound_predicate.rebind(pred.trait_ref);\n-                            // Don't print +Sized, but rather +?Sized if absent.\n-                            if Some(trait_ref.def_id()) == self.tcx().lang_items().sized_trait() {\n-                                is_sized = true;\n-                                continue;\n+\n+                        match bound_predicate.skip_binder() {\n+                            ty::PredicateKind::Projection(projection_predicate) => {\n+                                let Some(future_trait) = self.tcx().lang_items().future_trait() else { continue };\n+                                let future_output_def_id =\n+                                    self.tcx().associated_item_def_ids(future_trait)[0];\n+\n+                                if projection_predicate.projection_ty.item_def_id\n+                                    == future_output_def_id\n+                                {\n+                                    // We don't account for multiple `Future::Output = Ty` contraints.\n+                                    is_future = true;\n+                                    future_output_ty = Some(projection_predicate.ty);\n+                                }\n                             }\n+                            ty::PredicateKind::Trait(pred) => {\n+                                let trait_ref = bound_predicate.rebind(pred.trait_ref);\n+                                // Don't print +Sized, but rather +?Sized if absent.\n+                                if Some(trait_ref.def_id()) == self.tcx().lang_items().sized_trait()\n+                                {\n+                                    is_sized = true;\n+                                    continue;\n+                                }\n \n-                            p!(\n-                                write(\"{}\", if first { \" \" } else { \"+\" }),\n-                                print(trait_ref.print_only_trait_path())\n-                            );\n-                            first = false;\n+                                if Some(trait_ref.def_id())\n+                                    == self.tcx().lang_items().future_trait()\n+                                {\n+                                    is_future = true;\n+                                    continue;\n+                                }\n+\n+                                p!(\n+                                    write(\"{}\", if first { \" \" } else { \"+\" }),\n+                                    print(trait_ref.print_only_trait_path())\n+                                );\n+\n+                                first = false;\n+                            }\n+                            _ => {}\n                         }\n                     }\n+\n+                    if is_future {\n+                        p!(write(\"{}Future\", if first { \" \" } else { \"+\" }));\n+                        first = false;\n+\n+                        if let Some(future_output_ty) = future_output_ty {\n+                            // Don't print projection types, which we (unfortunately) see often\n+                            // in the error outputs involving async blocks.\n+                            if !matches!(future_output_ty.kind(), ty::Projection(_)) {\n+                                p!(\"<Output = \", print(future_output_ty), \">\");\n+                            }\n+                        }\n+                    }\n+\n                     if !is_sized {\n                         p!(write(\"{}?Sized\", if first { \" \" } else { \"+\" }));\n                     } else if first {\n                         p!(\" Sized\");\n                     }\n+\n                     Ok(self)\n                 });\n             }"}, {"sha": "2e4cb4ff7270d75cd451d9b0f3e3ef301667ec56", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -450,12 +450,24 @@ impl<'a> Resolver<'a> {\n                 // let foo =...\n                 //     ^^^ given this Span\n                 // ------- get this Span to have an applicable suggestion\n+\n+                // edit:\n+                // only do this if the const and usage of the non-constant value are on the same line\n+                // the further the two are apart, the higher the chance of the suggestion being wrong\n+                // also make sure that the pos for the suggestion is not 0 (ICE #90878)\n+\n                 let sp =\n                     self.session.source_map().span_extend_to_prev_str(ident.span, current, true);\n-                if sp.lo().0 == 0 {\n+\n+                let pos_for_suggestion = sp.lo().0.saturating_sub(current.len() as u32);\n+\n+                if sp.lo().0 == 0\n+                    || pos_for_suggestion == 0\n+                    || self.session.source_map().is_multiline(sp)\n+                {\n                     err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n                 } else {\n-                    let sp = sp.with_lo(BytePos(sp.lo().0 - current.len() as u32));\n+                    let sp = sp.with_lo(BytePos(pos_for_suggestion));\n                     err.span_suggestion(\n                         sp,\n                         &format!(\"consider using `{}` instead of `{}`\", sugg, current),"}, {"sha": "bf4cece8bde8d7f563c247fd7927732cb2d752e8", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1180,11 +1180,17 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         let mut reexport_error = None;\n         let mut any_successful_reexport = false;\n+        let mut crate_private_reexport = false;\n         self.r.per_ns(|this, ns| {\n             if let Ok(binding) = source_bindings[ns].get() {\n                 let vis = import.vis.get();\n                 if !binding.vis.is_at_least(vis, &*this) {\n                     reexport_error = Some((ns, binding));\n+                    if let ty::Visibility::Restricted(binding_def_id) = binding.vis {\n+                        if binding_def_id.is_top_level_module() {\n+                            crate_private_reexport = true;\n+                        }\n+                    }\n                 } else {\n                     any_successful_reexport = true;\n                 }\n@@ -1207,24 +1213,34 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     import.span,\n                     &msg,\n                 );\n-            } else if ns == TypeNS {\n-                struct_span_err!(\n-                    self.r.session,\n-                    import.span,\n-                    E0365,\n-                    \"`{}` is private, and cannot be re-exported\",\n-                    ident\n-                )\n-                .span_label(import.span, format!(\"re-export of private `{}`\", ident))\n-                .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n-                .emit();\n             } else {\n-                let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n-                let note_msg =\n-                    format!(\"consider marking `{}` as `pub` in the imported module\", ident,);\n-                struct_span_err!(self.r.session, import.span, E0364, \"{}\", &msg)\n-                    .span_note(import.span, &note_msg)\n-                    .emit();\n+                let error_msg = if crate_private_reexport {\n+                    format!(\n+                        \"`{}` is only public within the crate, and cannot be re-exported outside\",\n+                        ident\n+                    )\n+                } else {\n+                    format!(\"`{}` is private, and cannot be re-exported\", ident)\n+                };\n+\n+                if ns == TypeNS {\n+                    let label_msg = if crate_private_reexport {\n+                        format!(\"re-export of crate public `{}`\", ident)\n+                    } else {\n+                        format!(\"re-export of private `{}`\", ident)\n+                    };\n+\n+                    struct_span_err!(self.r.session, import.span, E0365, \"{}\", error_msg)\n+                        .span_label(import.span, label_msg)\n+                        .note(&format!(\"consider declaring type or module `{}` with `pub`\", ident))\n+                        .emit();\n+                } else {\n+                    let note_msg =\n+                        format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n+                    struct_span_err!(self.r.session, import.span, E0364, \"{}\", error_msg)\n+                        .span_note(import.span, &note_msg)\n+                        .emit();\n+                }\n             }\n         }\n "}, {"sha": "1445c59710cc34bc3290470c92ed3fad1a462cb5", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1935,6 +1935,7 @@ pub struct Loc {\n #[derive(Debug)]\n pub struct SourceFileAndLine {\n     pub sf: Lrc<SourceFile>,\n+    /// Index of line, starting from 0.\n     pub line: usize,\n }\n #[derive(Debug)]"}, {"sha": "7414d201f511d099b79cba7748fdfc8abe47fe79", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -593,14 +593,19 @@ impl SourceMap {\n     }\n \n     pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n-        match self.span_to_prev_source(sp) {\n-            Err(_) => None,\n-            Ok(source) => {\n-                let last_line = source.rsplit_once('\\n').unwrap_or((\"\", &source)).1;\n+        Some(self.indentation_before(sp)?.len())\n+    }\n \n-                Some(last_line.len() - last_line.trim_start().len())\n-            }\n-        }\n+    pub fn indentation_before(&self, sp: Span) -> Option<String> {\n+        self.span_to_source(sp, |src, start_index, _| {\n+            let before = &src[..start_index];\n+            let last_line = before.rsplit_once('\\n').map_or(before, |(_, last)| last);\n+            Ok(last_line\n+                .split_once(|c: char| !c.is_whitespace())\n+                .map_or(last_line, |(indent, _)| indent)\n+                .to_string())\n+        })\n+        .ok()\n     }\n \n     /// Returns the source snippet as `String` before the given `Span`."}, {"sha": "ece2d7b4f3793f0aaa93b48e50a9fdcddae69491", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 70, "deletions": 13, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -199,7 +199,50 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let mut compatible_variants = expected_adt\n+            // If the expression is of type () and it's the return expression of a block,\n+            // we suggest adding a separate return expression instead.\n+            // (To avoid things like suggesting `Ok(while .. { .. })`.)\n+            if expr_ty.is_unit() {\n+                if let Some(hir::Node::Block(&hir::Block {\n+                    span: block_span, expr: Some(e), ..\n+                })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n+                {\n+                    if e.hir_id == expr.hir_id {\n+                        if let Some(span) = expr.span.find_ancestor_inside(block_span) {\n+                            let return_suggestions =\n+                                if self.tcx.is_diagnostic_item(sym::Result, expected_adt.did) {\n+                                    vec![\"Ok(())\".to_string()]\n+                                } else if self.tcx.is_diagnostic_item(sym::Option, expected_adt.did)\n+                                {\n+                                    vec![\"None\".to_string(), \"Some(())\".to_string()]\n+                                } else {\n+                                    return;\n+                                };\n+                            if let Some(indent) =\n+                                self.tcx.sess.source_map().indentation_before(span.shrink_to_lo())\n+                            {\n+                                // Add a semicolon, except after `}`.\n+                                let semicolon =\n+                                    match self.tcx.sess.source_map().span_to_snippet(span) {\n+                                        Ok(s) if s.ends_with('}') => \"\",\n+                                        _ => \";\",\n+                                    };\n+                                err.span_suggestions(\n+                                    span.shrink_to_hi(),\n+                                    \"try adding an expression at the end of the block\",\n+                                    return_suggestions\n+                                        .into_iter()\n+                                        .map(|r| format!(\"{}\\n{}{}\", semicolon, indent, r)),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n+\n+            let compatible_variants: Vec<String> = expected_adt\n                 .variants\n                 .iter()\n                 .filter(|variant| variant.fields.len() == 1)\n@@ -220,19 +263,33 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         None\n                     }\n                 })\n-                .peekable();\n+                .collect();\n \n-            if compatible_variants.peek().is_some() {\n-                if let Ok(expr_text) = self.tcx.sess.source_map().span_to_snippet(expr.span) {\n-                    let suggestions = compatible_variants.map(|v| format!(\"{}({})\", v, expr_text));\n-                    let msg = \"try using a variant of the expected enum\";\n-                    err.span_suggestions(\n-                        expr.span,\n-                        msg,\n-                        suggestions,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+            if let [variant] = &compatible_variants[..] {\n+                // Just a single matching variant.\n+                err.multipart_suggestion(\n+                    &format!(\"try wrapping the expression in `{}`\", variant),\n+                    vec![\n+                        (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                        (expr.span.shrink_to_hi(), \")\".to_string()),\n+                    ],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else if compatible_variants.len() > 1 {\n+                // More than one matching variant.\n+                err.multipart_suggestions(\n+                    &format!(\n+                        \"try wrapping the expression in a variant of `{}`\",\n+                        self.tcx.def_path_str(expected_adt.did)\n+                    ),\n+                    compatible_variants.into_iter().map(|variant| {\n+                        vec![\n+                            (expr.span.shrink_to_lo(), format!(\"{}(\", variant)),\n+                            (expr.span.shrink_to_hi(), \")\".to_string()),\n+                        ]\n+                    }),\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n         }\n     }"}, {"sha": "e3154ad84afc581ab9b11f9d03cc07dd62706d7e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -303,7 +303,7 @@ nav.sub {\n \tleft: 0;\n \ttop: 0;\n \tbottom: 0;\n-\toverflow: auto;\n+\toverflow-y: scroll;\n }\n \n /* Improve the scrollbar display on firefox */"}, {"sha": "91ede47c156b8b4535dad37a8a56ce3d6c4904a4", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -70,11 +70,11 @@ pre, .rustdoc.source .example-wrap {\n \n /* Improve the scrollbar display on firefox */\n * {\n-\tscrollbar-color: #5c6773 transparent;\n+\tscrollbar-color: #5c6773 #24292f;\n }\n \n .sidebar {\n-\tscrollbar-color: #5c6773 transparent;\n+\tscrollbar-color: #5c6773 #24292f;\n }\n \n /* Improve the scrollbar display on webkit-based browsers */"}, {"sha": "74a4fe45a3d1bca5542447ad5b6c6244e5598efc", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -44,7 +44,7 @@ pre, .rustdoc.source .example-wrap {\n \tscrollbar-color: rgb(64, 65, 67) #717171;\n }\n .sidebar {\n-\tscrollbar-color: rgba(32,34,37,.6) transparent;\n+\tscrollbar-color: rgba(32,34,37,.6) #5a5a5a;\n }\n \n /* Improve the scrollbar display on webkit-based browsers */"}, {"sha": "bf7ab148e23df0a8ad0a5727e410ab53b47d3d93", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(local_dropped_before_await());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:24:5\n    |\n@@ -27,7 +27,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(non_send_temporary_in_match());\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `Rc<()>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/async-fn-nonsend.rs:33:20\n    |"}, {"sha": "289a567209c4958ea5c50ca1b82c336d478eb423", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -10,7 +10,7 @@ note: while checking the return type of the `async fn`\n LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = u32>`\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)"}, {"sha": "79834ed7ec1a8fb08d64c5cbdbba08c9a13536ad", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -25,8 +25,8 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn two() {}\n    |                ^ checked the `Output` of this `async fn`, found opaque type\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:5:16>)\n-              found opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:6:16>)\n+   = note: expected opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:5:16>)\n+              found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s\n    = note: distinct uses of `impl Trait` result in different opaque types\n "}, {"sha": "a35baf1694cacbb8405c0935de2ade5521512cb8", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -40,8 +40,8 @@ async fn foo() -> Result<(), ()> {\n \n async fn bar() -> Result<(), ()> {\n     foo()?; //~ ERROR the `?` operator can only be applied to values that implement `Try`\n-    //~^ NOTE the `?` operator cannot be applied to type `impl Future`\n-    //~| HELP the trait `Try` is not implemented for `impl Future`\n+    //~^ NOTE the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n+    //~| HELP the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n     //~| NOTE required by `branch`\n     //~| HELP consider `await`ing on the `Future`\n     //~| NOTE in this expansion of desugaring of operator `?`\n@@ -84,7 +84,7 @@ async fn baz() -> Result<(), ()> {\n     //~| NOTE field not available in `impl Future`\n \n     struct_().method(); //~ ERROR no method named\n-    //~^ NOTE method not found in `impl Future`\n+    //~^ NOTE method not found in `impl Future<Output = Struct>`\n     //~| HELP consider `await`ing on the `Future`\n     Ok(())\n }\n@@ -93,7 +93,7 @@ async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n         Tuple(_) => {} //~ ERROR mismatched types\n         //~^ NOTE expected opaque type, found struct `Tuple`\n-        //~| NOTE expected opaque type `impl Future`\n+        //~| NOTE expected opaque type `impl Future<Output = Tuple>`\n     }\n }\n "}, {"sha": "9878ea2ae693b19af8ff68102d47b00bd3b58fec", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the `?` operator can only be applied to values that implement `Try\n   --> $DIR/issue-61076.rs:42:5\n    |\n LL |     foo()?;\n-   |     ^^^^^^ the `?` operator cannot be applied to type `impl Future`\n+   |     ^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n-   = help: the trait `Try` is not implemented for `impl Future`\n+   = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n note: required by `branch`\n   --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n    |\n@@ -32,7 +32,7 @@ help: consider `await`ing on the `Future`\n LL |     t.await?;\n    |      ++++++\n \n-error[E0609]: no field `0` on type `impl Future`\n+error[E0609]: no field `0` on type `impl Future<Output = Tuple>`\n   --> $DIR/issue-61076.rs:78:26\n    |\n LL |     let _: i32 = tuple().0;\n@@ -43,7 +43,7 @@ help: consider `await`ing on the `Future` and access the field of its `Output`\n LL |     let _: i32 = tuple().await.0;\n    |                         ++++++\n \n-error[E0609]: no field `a` on type `impl Future`\n+error[E0609]: no field `a` on type `impl Future<Output = Struct>`\n   --> $DIR/issue-61076.rs:82:28\n    |\n LL |     let _: i32 = struct_().a;\n@@ -54,11 +54,11 @@ help: consider `await`ing on the `Future` and access the field of its `Output`\n LL |     let _: i32 = struct_().await.a;\n    |                           ++++++\n \n-error[E0599]: no method named `method` found for opaque type `impl Future` in the current scope\n+error[E0599]: no method named `method` found for opaque type `impl Future<Output = Struct>` in the current scope\n   --> $DIR/issue-61076.rs:86:15\n    |\n LL |     struct_().method();\n-   |               ^^^^^^ method not found in `impl Future`\n+   |               ^^^^^^ method not found in `impl Future<Output = Struct>`\n    |\n help: consider `await`ing on the `Future` and calling the method on its `Output`\n    |\n@@ -76,7 +76,7 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn tuple() -> Tuple {\n    |                     ^^^^^ checked the `Output` of this `async fn`, expected opaque type\n-   = note: expected opaque type `impl Future`\n+   = note: expected opaque type `impl Future<Output = Tuple>`\n                    found struct `Tuple`\n help: consider `await`ing on the `Future`\n    |"}, {"sha": "010611fae438142f9173817ac4c8e3ae099d941e", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,7 +4,7 @@ error: future cannot be shared between threads safely\n LL |     is_sync(bar());\n    |             ^^^^^ future returned by `bar` is not `Sync`\n    |\n-   = help: within `impl Future`, the trait `Sync` is not implemented for `Foo`\n+   = help: within `impl Future<Output = ()>`, the trait `Sync` is not implemented for `Foo`\n note: future is not `Sync` as this value is used across an await\n   --> $DIR/issue-64130-1-sync.rs:15:5\n    |"}, {"sha": "bb598b53594e9991f72c34fdcd271ad3a66adb9c", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     is_send(bar());\n    |             ^^^^^ future returned by `bar` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `Foo`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Foo`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-2-send.rs:15:5\n    |"}, {"sha": "52801c35ba3d34794f968efc74119fa6f30aeba8", "filename": "src/test/ui/async-await/issue-64130-3-other.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -5,22 +5,22 @@\n // This tests the the unspecialized async-await-specific error when futures don't implement an\n // auto trait (which is not Send or Sync) due to some type that was captured.\n \n-auto trait Qux { }\n+auto trait Qux {}\n \n struct Foo;\n \n impl !Qux for Foo {}\n \n-fn is_qux<T: Qux>(t: T) { }\n+fn is_qux<T: Qux>(t: T) {}\n \n async fn bar() {\n     let x = Foo;\n     baz().await;\n }\n \n-async fn baz() { }\n+async fn baz() {}\n \n fn main() {\n     is_qux(bar());\n-    //~^ ERROR the trait bound `Foo: Qux` is not satisfied in `impl Future`\n+    //~^ ERROR the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n }"}, {"sha": "4de7929e1814969fcdc03127327e1899f53ec614", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future`\n+error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future<Output = ()>`\n   --> $DIR/issue-64130-3-other.rs:24:12\n    |\n LL | async fn bar() {\n-   |                - within this `impl Future`\n+   |                - within this `impl Future<Output = ()>`\n ...\n LL |     is_qux(bar());\n-   |            ^^^^^ within `impl Future`, the trait `Qux` is not implemented for `Foo`\n+   |            ^^^^^ within `impl Future<Output = ()>`, the trait `Qux` is not implemented for `Foo`\n    |\n note: future does not implement `Qux` as this value is used across an await\n   --> $DIR/issue-64130-3-other.rs:18:5\n@@ -19,7 +19,7 @@ LL | }\n note: required by a bound in `is_qux`\n   --> $DIR/issue-64130-3-other.rs:14:14\n    |\n-LL | fn is_qux<T: Qux>(t: T) { }\n+LL | fn is_qux<T: Qux>(t: T) {}\n    |              ^^^ required by this bound in `is_qux`\n \n error: aborting due to previous error"}, {"sha": "8eedb3597330e0ff8676586333b5bc05e72a7cba", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     is_send(foo());\n    |             ^^^^^ future returned by `foo` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, u32>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-64130-non-send-future-diags.rs:17:5\n    |"}, {"sha": "9682a7055e93c4fd16fdd7748c7e87d1853553ea", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -9,7 +9,7 @@ note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:31:17\n    |\n LL |         let _ = non_send_fut.await;\n-   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |\n@@ -27,7 +27,7 @@ note: future is not `Send` as it awaits another future which is not `Send`\n   --> $DIR/issue-68112.rs:40:17\n    |\n LL |         let _ = make_non_send_future1().await;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |\n@@ -45,9 +45,9 @@ LL |     require_send(send_fut);\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n    = note: required because it appears within the type `impl Future`\n-   = note: required because it appears within the type `impl Future`\n-   = note: required because it appears within the type `impl Future`\n-   = note: required because it appears within the type `{ResumeTy, impl Future, (), i32, Ready<i32>}`\n+   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+   = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n    = note: required because it appears within the type `impl Future`"}, {"sha": "dddea12162a0be604b3f88e744c00135e0408605", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |   fake_spawn(wrong_mutex());\n    |              ^^^^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, i32>`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-71137.rs:14:5\n    |"}, {"sha": "4427014ae3bf93c406d669f372f6bb7195a3c712", "filename": "src/test/ui/async-await/issue-74497-lifetime-in-opaque.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-74497-lifetime-in-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-74497-lifetime-in-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-74497-lifetime-in-opaque.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,7 +4,7 @@ error: lifetime may not live long enough\n LL |     let _ = foo(|x| bar(x));\n    |                  -- ^^^^^^ returning this value requires that `'1` must outlive `'2`\n    |                  ||\n-   |                  |return type of closure `impl Future` contains a lifetime `'2`\n+   |                  |return type of closure `impl Future<Output = ()>` contains a lifetime `'2`\n    |                  has type `&'1 u8`\n \n error: aborting due to previous error"}, {"sha": "7b6084c49a0f87bf0f932d28d064688c3c0b990a", "filename": "src/test/ui/async-await/issue-84841.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-84841.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the `?` operator can only be applied to values that implement `Try\n   --> $DIR/issue-84841.rs:9:5\n    |\n LL |     test()?;\n-   |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n+   |     ^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = ()>`\n    |\n-   = help: the trait `Try` is not implemented for `impl Future`\n+   = help: the trait `Try` is not implemented for `impl Future<Output = ()>`\n note: required by `branch`\n   --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n    |"}, {"sha": "0aa0d5d7ccdde9c30840aaf7f6239a26d456412b", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,7 +4,7 @@ error: generator cannot be sent between threads safely\n LL |     g(issue_67893::run())\n    |       ^^^^^^^^^^^^^^^^^^ generator is not `Send`\n    |\n-   = help: within `impl Future`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `MutexGuard<'_, ()>`\n note: required by a bound in `g`\n   --> $DIR/issue-67893.rs:6:14\n    |"}, {"sha": "d951c8ed094e703dd42041e9903a17a50fe2b580", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -10,7 +10,7 @@ note: while checking the return type of the `async fn`\n LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = u32>`\n help: consider `await`ing on the `Future`\n    |\n LL |         take_u32(x.await)"}, {"sha": "bea50b3bfc036e2f0ce74947b0b783cffa5a0002", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -10,7 +10,7 @@ note: while checking the return type of the `async fn`\n LL | async fn make_u32() -> u32 {\n    |                        ^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `u32`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = u32>`\n help: consider `await`ing on the `Future`\n    |\n LL |     take_u32(x.await)\n@@ -28,7 +28,7 @@ note: while checking the return type of the `async fn`\n LL | async fn dummy() {}\n    |                  ^ checked the `Output` of this `async fn`, found opaque type\n    = note: expected unit type `()`\n-            found opaque type `impl Future`\n+            found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |     dummy().await\n@@ -53,7 +53,7 @@ LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note:   expected type `impl Future`\n+   = note:   expected type `impl Future<Output = ()>`\n            found unit type `()`\n help: consider `await`ing on the `Future`\n    |\n@@ -66,9 +66,9 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _x = match 0usize {\n    |  ______________-\n LL | |         0 => dummy(),\n-   | |              ------- this is found to be of type `impl Future`\n+   | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         1 => dummy(),\n-   | |              ------- this is found to be of type `impl Future`\n+   | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         2 => dummy().await,\n    | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n LL | |\n@@ -80,7 +80,7 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn dummy() {}\n    |                  ^ checked the `Output` of this `async fn`, expected opaque type\n-   = note: expected opaque type `impl Future`\n+   = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n    |\n@@ -99,7 +99,7 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn dummy() {}\n    |                  ^ checked the `Output` of this `async fn`, expected opaque type\n-   = note: expected opaque type `impl Future`\n+   = note: expected opaque type `impl Future<Output = ()>`\n                 found unit type `()`\n help: consider `await`ing on the `Future`\n    |"}, {"sha": "7e3f18cc9d5931a20534204415421179323537e2", "filename": "src/test/ui/consts/issue-90878-2.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,12 @@\n+ #![l=|x|[b;x ]] //~ ERROR unexpected token: `|x| [b; x]`\n+//~^ ERROR cannot find attribute `l` in this scope\n+//~^^ ERROR attempt to use a non-constant value in a constant [E0435]\n+//~^^^ ERROR cannot find value `b` in this scope [E0425]\n+\n+// notice the space at the start,\n+// we can't attach any attributes to this file because it needs to be at the start\n+\n+// this example has been slightly modified (adding ]] at the end), so that it actually works here\n+// it still produces the same issue though\n+\n+fn main() {}"}, {"sha": "9e167424995a7dc5fde235d5be51bc277fc5369e", "filename": "src/test/ui/consts/issue-90878-2.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-2.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,30 @@\n+error: unexpected token: `|x| [b; x]`\n+  --> $DIR/issue-90878-2.rs:1:7\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |       ^^^^^^^^^\n+\n+error: cannot find attribute `l` in this scope\n+  --> $DIR/issue-90878-2.rs:1:5\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |     ^\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878-2.rs:1:13\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |        -    ^\n+   |        |\n+   |        this would need to be a `const`\n+\n+error[E0425]: cannot find value `b` in this scope\n+  --> $DIR/issue-90878-2.rs:1:11\n+   |\n+LL |  #![l=|x|[b;x ]]\n+   |           ^ help: a local variable with a similar name exists: `x`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0425, E0435.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "0e36646eb49f58eedff95a5fc96483dd99cb7b50", "filename": "src/test/ui/consts/issue-90878-3.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,6 @@\n+\n+fn main() {\n+    |x: usize| [0; x];  //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+    // (note the newline before \"fn\")\n+}\n+// ignore-tidy-leading-newlines"}, {"sha": "1bcc0eb37877b758e8e96e6385466e415072dae7", "filename": "src/test/ui/consts/issue-90878-3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878-3.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,11 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878-3.rs:3:20\n+   |\n+LL |     |x: usize| [0; x];\n+   |      -             ^\n+   |      |\n+   |      this would need to be a `const`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "43f6fe5f3800d8b0a1a5c347a749f0cb47be0441", "filename": "src/test/ui/consts/issue-90878.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,4 @@\n+ fn main() {\n+    |x: usize| [0; x];  //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+    // (note the space before \"fn\")\n+}"}, {"sha": "c038fc622d46865230e73f1a3d8001b72b1bdfa0", "filename": "src/test/ui/consts/issue-90878.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-90878.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,11 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/issue-90878.rs:2:20\n+   |\n+LL |     |x: usize| [0; x];\n+   |      -             ^\n+   |      |\n+   |      this would need to be a `const`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "1a20b1e09d7be67f80b56b9b3156bce3e197db74", "filename": "src/test/ui/consts/non-const-value-in-const.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x = 5;\n+    const Y: i32 = x; //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+\n+    let x = 5;\n+    let _ = [0; x]; //~ ERROR attempt to use a non-constant value in a constant [E0435]\n+}"}, {"sha": "0ce4b4b7053344e07ec8c923975a2e7fca67a1e4", "filename": "src/test/ui/consts/non-const-value-in-const.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fnon-const-value-in-const.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,20 @@\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/non-const-value-in-const.rs:3:20\n+   |\n+LL |     const Y: i32 = x;\n+   |     -------        ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let Y`\n+\n+error[E0435]: attempt to use a non-constant value in a constant\n+  --> $DIR/non-const-value-in-const.rs:6:17\n+   |\n+LL |     let x = 5;\n+   |     ----- help: consider using `const` instead of `let`: `const x`\n+...\n+LL |     let _ = [0; x];\n+   |                 ^ non-constant value\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0435`."}, {"sha": "fb6b6a5673d90ec59711df4b53a715fb5b5ee7d6", "filename": "src/test/ui/did_you_mean/compatible-variants.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,43 @@\n+enum Hey<A, B> {\n+    A(A),\n+    B(B),\n+}\n+\n+fn f() {}\n+\n+fn a() -> Option<()> {\n+    while false {\n+        //~^ ERROR mismatched types\n+        f();\n+    }\n+    //~^ HELP try adding an expression\n+}\n+\n+fn b() -> Result<(), ()> {\n+    f()\n+    //~^ ERROR mismatched types\n+    //~| HELP try adding an expression\n+}\n+\n+fn main() {\n+    let _: Option<()> = while false {};\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Option<()> = {\n+        while false {}\n+        //~^ ERROR mismatched types\n+        //~| HELP try adding an expression\n+    };\n+    let _: Result<i32, i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Option<i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Hey<i32, i32> = 1;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+    let _: Hey<i32, bool> = false;\n+    //~^ ERROR mismatched types\n+    //~| HELP try wrapping\n+}"}, {"sha": "e77949687fcb2035bed74253e028ea6a0ae479ac", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,137 @@\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:9:5\n+   |\n+LL |   fn a() -> Option<()> {\n+   |             ---------- expected `Option<()>` because of return type\n+LL | /     while false {\n+LL | |\n+LL | |         f();\n+LL | |     }\n+   | |_____^ expected enum `Option`, found `()`\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     }\n+LL +     None\n+   |\n+LL ~     }\n+LL +     Some(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:17:5\n+   |\n+LL | fn b() -> Result<(), ()> {\n+   |           -------------- expected `Result<(), ()>` because of return type\n+LL |     f()\n+   |     ^^^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), ()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~     f();\n+LL +     Ok(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:23:25\n+   |\n+LL |     let _: Option<()> = while false {};\n+   |            ----------   ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _: Option<()> = Some(while false {});\n+   |                         +++++              +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:27:9\n+   |\n+LL |         while false {}\n+   |         ^^^^^^^^^^^^^^ expected enum `Option`, found `()`\n+   |\n+   = note:   expected enum `Option<()>`\n+           found unit type `()`\n+help: try adding an expression at the end of the block\n+   |\n+LL ~         while false {}\n+LL +         None\n+   |\n+LL ~         while false {}\n+LL +         Some(())\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:31:31\n+   |\n+LL |     let _: Result<i32, i32> = 1;\n+   |            ----------------   ^ expected enum `Result`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Result<i32, i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in a variant of `Result`\n+   |\n+LL |     let _: Result<i32, i32> = Ok(1);\n+   |                               +++ +\n+LL |     let _: Result<i32, i32> = Err(1);\n+   |                               ++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:34:26\n+   |\n+LL |     let _: Option<i32> = 1;\n+   |            -----------   ^ expected enum `Option`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Option<i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let _: Option<i32> = Some(1);\n+   |                          +++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:37:28\n+   |\n+LL |     let _: Hey<i32, i32> = 1;\n+   |            -------------   ^ expected enum `Hey`, found integer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Hey<i32, i32>`\n+              found type `{integer}`\n+help: try wrapping the expression in a variant of `Hey`\n+   |\n+LL |     let _: Hey<i32, i32> = Hey::A(1);\n+   |                            +++++++ +\n+LL |     let _: Hey<i32, i32> = Hey::B(1);\n+   |                            +++++++ +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/compatible-variants.rs:40:29\n+   |\n+LL |     let _: Hey<i32, bool> = false;\n+   |            --------------   ^^^^^ expected enum `Hey`, found `bool`\n+   |            |\n+   |            expected due to this\n+   |\n+   = note: expected enum `Hey<i32, bool>`\n+              found type `bool`\n+help: try wrapping the expression in `Hey::B`\n+   |\n+LL |     let _: Hey<i32, bool> = Hey::B(false);\n+   |                             +++++++     +\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "6da640b2b7c765b26054fc0248512e8fb23be270", "filename": "src/test/ui/did_you_mean/issue-42764.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     let n: usize = 42;\n     this_function_expects_a_double_option(n);\n     //~^ ERROR mismatched types\n-    //~| HELP try using a variant of the expected enum\n+    //~| HELP try wrapping the expression in a variant of `DoubleOption`\n }\n \n "}, {"sha": "dbe46704b9320224edc810d5b2488f9a5ca0deef", "filename": "src/test/ui/did_you_mean/issue-42764.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-42764.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -6,12 +6,12 @@ LL |     this_function_expects_a_double_option(n);\n    |\n    = note: expected enum `DoubleOption<_>`\n               found type `usize`\n-help: try using a variant of the expected enum\n+help: try wrapping the expression in a variant of `DoubleOption`\n    |\n-LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n-   |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n LL |     this_function_expects_a_double_option(DoubleOption::FirstSome(n));\n-   |                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                           ++++++++++++++++++++++++ +\n+LL |     this_function_expects_a_double_option(DoubleOption::AlternativeSome(n));\n+   |                                           ++++++++++++++++++++++++++++++ +\n \n error[E0308]: mismatched types\n   --> $DIR/issue-42764.rs:27:33"}, {"sha": "464109247c9bab81b2d77a4e5b8940b5e162ddab", "filename": "src/test/ui/error-codes/E0365.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -3,6 +3,6 @@ mod foo {\n }\n \n pub use foo as foo2;\n-//~^ ERROR `foo` is private, and cannot be re-exported [E0365]\n+//~^ ERROR `foo` is only public within the crate, and cannot be re-exported outside [E0365]\n \n fn main() {}"}, {"sha": "5bfcf1394d9fe3a7006e7e765402f03a7826f08f", "filename": "src/test/ui/error-codes/E0365.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0365.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1,8 +1,8 @@\n-error[E0365]: `foo` is private, and cannot be re-exported\n+error[E0365]: `foo` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/E0365.rs:5:9\n    |\n LL | pub use foo as foo2;\n-   |         ^^^^^^^^^^^ re-export of private `foo`\n+   |         ^^^^^^^^^^^ re-export of crate public `foo`\n    |\n    = note: consider declaring type or module `foo` with `pub`\n "}, {"sha": "03fb299b39cd2e11721ef522431735637305485c", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -2,13 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/fully-qualified-type-name1.rs:5:9\n    |\n LL |     x = 5;\n-   |         ^\n-   |         |\n-   |         expected enum `Option`, found integer\n-   |         help: try using a variant of the expected enum: `Some(5)`\n+   |         ^ expected enum `Option`, found integer\n    |\n    = note: expected enum `Option<usize>`\n               found type `{integer}`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     x = Some(5);\n+   |         +++++ +\n \n error: aborting due to previous error\n "}, {"sha": "778b13f24cf5667b82e8e1d0bcbd0aa22c362002", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -4,13 +4,14 @@ error[E0308]: mismatched types\n LL | fn bar(x: usize) -> Option<usize> {\n    |                     ------------- expected `Option<usize>` because of return type\n LL |     return x;\n-   |            ^\n-   |            |\n-   |            expected enum `Option`, found `usize`\n-   |            help: try using a variant of the expected enum: `Some(x)`\n+   |            ^ expected enum `Option`, found `usize`\n    |\n    = note: expected enum `Option<usize>`\n               found type `usize`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     return Some(x);\n+   |            +++++ +\n \n error: aborting due to previous error\n "}, {"sha": "86bde9a0cddab967e843d72c87f133d05165caef", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -14,8 +14,8 @@ LL |         let f: F = async { 1 };\n LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n-   = note: expected opaque type `impl Future` (opaque type at <$DIR/issue-78722.rs:5:10>)\n-              found opaque type `impl Future` (opaque type at <$SRC_DIR/core/src/future/mod.rs:LL:COL>)\n+   = note: expected opaque type `impl Future<Output = u8>`\n+              found opaque type `impl Future`\n    = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to previous error"}, {"sha": "15d2ef3fce8da150c21091a7338ac19c841f1c13", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -12,10 +12,10 @@ help: try removing this `?`\n LL -     missing_discourses()?\n LL +     missing_discourses()\n    | \n-help: try using a variant of the expected enum\n+help: try wrapping the expression in `Ok`\n    |\n LL |     Ok(missing_discourses()?)\n-   |\n+   |     +++                     +\n \n error: aborting due to previous error\n "}, {"sha": "ff1a836c9aec034b7e2cbd5e929b5a190a05b89a", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -26,27 +26,29 @@ error[E0308]: mismatched types\n LL | fn b() -> Option<Foo> {\n    |           ----------- expected `Option<Foo>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^\n-   |     |\n-   |     expected enum `Option`, found struct `Foo`\n-   |     help: try using a variant of the expected enum: `Some(Foo { bar: 1 })`\n+   |     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `Foo`\n    |\n    = note: expected enum `Option<Foo>`\n             found struct `Foo`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     Some(Foo { bar: 1 })\n+   |     +++++              +\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:28:5\n    |\n LL | fn c() -> Result<Foo, Bar> {\n    |           ---------------- expected `Result<Foo, Bar>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^\n-   |     |\n-   |     expected enum `Result`, found struct `Foo`\n-   |     help: try using a variant of the expected enum: `Ok(Foo { bar: 1 })`\n+   |     ^^^^^^^^^^^^^^ expected enum `Result`, found struct `Foo`\n    |\n    = note: expected enum `Result<Foo, Bar>`\n             found struct `Foo`\n+help: try wrapping the expression in `Ok`\n+   |\n+LL |     Ok(Foo { bar: 1 })\n+   |     +++              +\n \n error[E0308]: mismatched types\n   --> $DIR/abridged.rs:39:5"}, {"sha": "0a20f5fe98562f6827ee378aa57d66c77a0991df", "filename": "src/test/ui/modules/issue-56411.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -5,7 +5,7 @@ macro_rules! import {\n             mod $name;\n             pub use self::$name;\n             //~^ ERROR the name `issue_56411_aux` is defined multiple times\n-            //~| ERROR `issue_56411_aux` is private, and cannot be re-exported\n+            //~| ERROR `issue_56411_aux` is only public within the crate, and cannot be re-exported outside\n \n         )*\n     }"}, {"sha": "6732a8a3d7324ea383bf5bb7181954bfba5a66d9", "filename": "src/test/ui/modules/issue-56411.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodules%2Fissue-56411.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -15,11 +15,11 @@ LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    = note: `issue_56411_aux` must be defined only once in the type namespace of this module\n    = note: this error originates in the macro `import` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0365]: `issue_56411_aux` is private, and cannot be re-exported\n+error[E0365]: `issue_56411_aux` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/issue-56411.rs:6:21\n    |\n LL |             pub use self::$name;\n-   |                     ^^^^^^^^^^^ re-export of private `issue_56411_aux`\n+   |                     ^^^^^^^^^^^ re-export of crate public `issue_56411_aux`\n ...\n LL | import!((\"issue-56411-aux.rs\", issue_56411_aux));\n    | ------------------------------------------------ in this macro invocation"}, {"sha": "75c60a0ea2a393e1ede0460d46c4c6a528c27048", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -194,7 +194,7 @@ LL |         async fn ft1() {}\n    |\n    = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future`\n+              found fn pointer `fn() -> impl Future<Output = ()>`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n   --> $DIR/fn-header-semantic-fail.rs:33:48\n@@ -210,7 +210,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |\n    = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n-              found fn pointer `unsafe extern \"C\" fn() -> impl Future`\n+              found fn pointer `unsafe extern \"C\" fn() -> impl Future<Output = ()>`\n \n error: aborting due to 20 previous errors\n "}, {"sha": "090bd67117eab8cdad015950777c29ad481944e0", "filename": "src/test/ui/pattern/pat-type-err-let-stmt.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-type-err-let-stmt.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:6:29\n    |\n LL |     let Ok(0): Option<u8> = 42u8;\n-   |                ----------   ^^^^\n-   |                |            |\n-   |                |            expected enum `Option`, found `u8`\n-   |                |            help: try using a variant of the expected enum: `Some(42u8)`\n+   |                ----------   ^^^^ expected enum `Option`, found `u8`\n+   |                |\n    |                expected due to this\n    |\n    = note: expected enum `Option<u8>`\n               found type `u8`\n+help: try wrapping the expression in `Some`\n+   |\n+LL |     let Ok(0): Option<u8> = Some(42u8);\n+   |                             +++++    +\n \n error[E0308]: mismatched types\n   --> $DIR/pat-type-err-let-stmt.rs:6:9"}, {"sha": "fa4f88666d8647e315de03edad9ab0c5bbc0f920", "filename": "src/test/ui/privacy/crate-private-reexport.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,66 @@\n+fn f1() {}\n+enum E1 { V }\n+struct S1 {\n+    #[rustfmt::skip]\n+    bar: i32,\n+}\n+mod m1 {\n+    pub use ::f1; //~ ERROR `f1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::S1; //~ ERROR `S1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E1; //~ ERROR `E1` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E1::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+}\n+\n+pub(crate) fn f2() {}\n+pub(crate) enum E2 {\n+    V\n+}\n+pub(crate) struct S2 {\n+    #[rustfmt::skip]\n+    bar: i32,\n+}\n+mod m2 {\n+    pub use ::f2; //~ ERROR `f2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::S2; //~ ERROR `S2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E2; //~ ERROR `E2` is only public within the crate, and cannot be re-exported outside\n+    pub use ::E2::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+}\n+\n+mod m3 {\n+    pub(crate) fn f3() {}\n+    pub(crate) enum E3 {\n+        V\n+    }\n+    pub(crate) struct S3 {\n+        #[rustfmt::skip]\n+        bar: i32,\n+    }\n+}\n+pub use m3::f3; //~ ERROR `f3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::S3; //~ ERROR `S3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::E3; //~ ERROR `E3` is only public within the crate, and cannot be re-exported outside\n+pub use m3::E3::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n+\n+pub(self) fn f4() {}\n+pub use ::f4 as f5; //~ ERROR `f4` is only public within the crate, and cannot be re-exported outside\n+\n+pub mod m10 {\n+    pub mod m {\n+        pub(super) fn f6() {}\n+        pub(crate) fn f7() {}\n+        pub(in crate::m10) fn f8() {}\n+    }\n+    pub use self::m::f6; //~ ERROR `f6` is private, and cannot be re-exported\n+    pub use self::m::f7; //~ ERROR `f7` is only public within the crate, and cannot be re-exported outside\n+    pub use self::m::f8; //~ ERROR `f8` is private, and cannot be re-exported\n+}\n+pub use m10::m::f6; //~ ERROR function `f6` is private\n+pub use m10::m::f7; //~ ERROR `f7` is only public within the crate, and cannot be re-exported outside\n+pub use m10::m::f8; //~ ERROR function `f8` is private\n+\n+pub mod m11 {\n+    pub(self) fn f9() {}\n+}\n+pub use m11::f9; //~ ERROR function `f9` is private\n+\n+fn main() {}"}, {"sha": "66e11e8210771b79a7b137c2c206007d57c77774", "filename": "src/test/ui/privacy/crate-private-reexport.stderr", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fcrate-private-reexport.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -0,0 +1,220 @@\n+error[E0364]: `f1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:8:13\n+   |\n+LL |     pub use ::f1;\n+   |             ^^^^\n+   |\n+note: consider marking `f1` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:8:13\n+   |\n+LL |     pub use ::f1;\n+   |             ^^^^\n+\n+error[E0365]: `S1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:9:13\n+   |\n+LL |     pub use ::S1;\n+   |             ^^^^ re-export of crate public `S1`\n+   |\n+   = note: consider declaring type or module `S1` with `pub`\n+\n+error[E0365]: `E1` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:10:13\n+   |\n+LL |     pub use ::E1;\n+   |             ^^^^ re-export of crate public `E1`\n+   |\n+   = note: consider declaring type or module `E1` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:11:13\n+   |\n+LL |     pub use ::E1::V;\n+   |             ^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:11:13\n+   |\n+LL |     pub use ::E1::V;\n+   |             ^^^^^^^\n+\n+error[E0364]: `f2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:23:13\n+   |\n+LL |     pub use ::f2;\n+   |             ^^^^\n+   |\n+note: consider marking `f2` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:23:13\n+   |\n+LL |     pub use ::f2;\n+   |             ^^^^\n+\n+error[E0365]: `S2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:24:13\n+   |\n+LL |     pub use ::S2;\n+   |             ^^^^ re-export of crate public `S2`\n+   |\n+   = note: consider declaring type or module `S2` with `pub`\n+\n+error[E0365]: `E2` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:25:13\n+   |\n+LL |     pub use ::E2;\n+   |             ^^^^ re-export of crate public `E2`\n+   |\n+   = note: consider declaring type or module `E2` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:26:13\n+   |\n+LL |     pub use ::E2::V;\n+   |             ^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:26:13\n+   |\n+LL |     pub use ::E2::V;\n+   |             ^^^^^^^\n+\n+error[E0364]: `f3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:39:9\n+   |\n+LL | pub use m3::f3;\n+   |         ^^^^^^\n+   |\n+note: consider marking `f3` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:39:9\n+   |\n+LL | pub use m3::f3;\n+   |         ^^^^^^\n+\n+error[E0365]: `S3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:40:9\n+   |\n+LL | pub use m3::S3;\n+   |         ^^^^^^ re-export of crate public `S3`\n+   |\n+   = note: consider declaring type or module `S3` with `pub`\n+\n+error[E0365]: `E3` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:41:9\n+   |\n+LL | pub use m3::E3;\n+   |         ^^^^^^ re-export of crate public `E3`\n+   |\n+   = note: consider declaring type or module `E3` with `pub`\n+\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:42:9\n+   |\n+LL | pub use m3::E3::V;\n+   |         ^^^^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:42:9\n+   |\n+LL | pub use m3::E3::V;\n+   |         ^^^^^^^^^\n+\n+error[E0364]: `f4` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:45:9\n+   |\n+LL | pub use ::f4 as f5;\n+   |         ^^^^^^^^^^\n+   |\n+note: consider marking `f4` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:45:9\n+   |\n+LL | pub use ::f4 as f5;\n+   |         ^^^^^^^^^^\n+\n+error[E0364]: `f6` is private, and cannot be re-exported\n+  --> $DIR/crate-private-reexport.rs:53:13\n+   |\n+LL |     pub use self::m::f6;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f6` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:53:13\n+   |\n+LL |     pub use self::m::f6;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f7` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:54:13\n+   |\n+LL |     pub use self::m::f7;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f7` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:54:13\n+   |\n+LL |     pub use self::m::f7;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f8` is private, and cannot be re-exported\n+  --> $DIR/crate-private-reexport.rs:55:13\n+   |\n+LL |     pub use self::m::f8;\n+   |             ^^^^^^^^^^^\n+   |\n+note: consider marking `f8` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:55:13\n+   |\n+LL |     pub use self::m::f8;\n+   |             ^^^^^^^^^^^\n+\n+error[E0364]: `f7` is only public within the crate, and cannot be re-exported outside\n+  --> $DIR/crate-private-reexport.rs:58:9\n+   |\n+LL | pub use m10::m::f7;\n+   |         ^^^^^^^^^^\n+   |\n+note: consider marking `f7` as `pub` in the imported module\n+  --> $DIR/crate-private-reexport.rs:58:9\n+   |\n+LL | pub use m10::m::f7;\n+   |         ^^^^^^^^^^\n+\n+error[E0603]: function `f6` is private\n+  --> $DIR/crate-private-reexport.rs:57:17\n+   |\n+LL | pub use m10::m::f6;\n+   |                 ^^ private function\n+   |\n+note: the function `f6` is defined here\n+  --> $DIR/crate-private-reexport.rs:49:9\n+   |\n+LL |         pub(super) fn f6() {}\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error[E0603]: function `f8` is private\n+  --> $DIR/crate-private-reexport.rs:59:17\n+   |\n+LL | pub use m10::m::f8;\n+   |                 ^^ private function\n+   |\n+note: the function `f8` is defined here\n+  --> $DIR/crate-private-reexport.rs:51:9\n+   |\n+LL |         pub(in crate::m10) fn f8() {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0603]: function `f9` is private\n+  --> $DIR/crate-private-reexport.rs:64:14\n+   |\n+LL | pub use m11::f9;\n+   |              ^^ private function\n+   |\n+note: the function `f9` is defined here\n+  --> $DIR/crate-private-reexport.rs:62:5\n+   |\n+LL |     pub(self) fn f9() {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 20 previous errors\n+\n+Some errors have detailed explanations: E0364, E0365, E0603.\n+For more information about an error, try `rustc --explain E0364`."}, {"sha": "6882844602286deef9c7eaa6f6f4bad96c60dc68", "filename": "src/test/ui/privacy/private-variant-reexport.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1,13 +1,13 @@\n mod m1 {\n-    pub use ::E::V; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::V; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::{V}; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR `V` is private, and cannot be re-exported\n+    pub use ::E::V::{self}; //~ ERROR `V` is only public within the crate, and cannot be re-exported outside\n }\n \n #[deny(unused_imports)]"}, {"sha": "78771ee30d314a29c00d7a91d2d90bcbbfb78a69", "filename": "src/test/ui/privacy/private-variant-reexport.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1,4 +1,4 @@\n-error[E0364]: `V` is private, and cannot be re-exported\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:2:13\n    |\n LL |     pub use ::E::V;\n@@ -10,7 +10,7 @@ note: consider marking `V` as `pub` in the imported module\n LL |     pub use ::E::V;\n    |             ^^^^^^\n \n-error[E0364]: `V` is private, and cannot be re-exported\n+error[E0364]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:6:19\n    |\n LL |     pub use ::E::{V};\n@@ -22,11 +22,11 @@ note: consider marking `V` as `pub` in the imported module\n LL |     pub use ::E::{V};\n    |                   ^\n \n-error[E0365]: `V` is private, and cannot be re-exported\n+error[E0365]: `V` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/private-variant-reexport.rs:10:22\n    |\n LL |     pub use ::E::V::{self};\n-   |                      ^^^^ re-export of private `V`\n+   |                      ^^^^ re-export of crate public `V`\n    |\n    = note: consider declaring type or module `V` with `pub`\n "}, {"sha": "50446bb659b0c5822c57891d822e64113d718446", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -58,7 +58,7 @@ LL |     async fn associated();\n    |\n    = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `fn()`\n-              found fn pointer `fn() -> impl Future`\n+              found fn pointer `fn() -> impl Future<Output = ()>`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2d9a6a9a924998fec8b3e91b0b8f659e9ca42105", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -8,7 +8,7 @@ mod m1 {\n \n     use legacy_macro as _; // OK\n     pub(crate) use legacy_macro as _; // OK\n-    pub use legacy_macro as _; //~ ERROR `legacy_macro` is private, and cannot be re-exported\n+    pub use legacy_macro as _; //~ ERROR `legacy_macro` is only public within the crate, and cannot be re-exported outside\n }\n \n mod m2 {"}, {"sha": "9e48e26b1dfd30451d279d5fd3421ff377aa4b1e", "filename": "src/test/ui/rust-2018/uniform-paths/macro-rules.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Funiform-paths%2Fmacro-rules.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1,4 +1,4 @@\n-error[E0364]: `legacy_macro` is private, and cannot be re-exported\n+error[E0364]: `legacy_macro` is only public within the crate, and cannot be re-exported outside\n   --> $DIR/macro-rules.rs:11:13\n    |\n LL |     pub use legacy_macro as _;"}, {"sha": "4759ebea0e9b700b388174f043deca50807296d3", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -1,15 +1,15 @@\n-error[E0277]: `fn() -> impl Future {foo}` is not a future\n+error[E0277]: `fn() -> impl Future<Output = ()> {foo}` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:10:9\n    |\n LL | async fn foo() {}\n    |          --- consider calling this function\n ...\n LL |     bar(foo);\n-   |     --- ^^^ `fn() -> impl Future {foo}` is not a future\n+   |     --- ^^^ `fn() -> impl Future<Output = ()> {foo}` is not a future\n    |     |\n    |     required by a bound introduced by this call\n    |\n-   = help: the trait `Future` is not implemented for `fn() -> impl Future {foo}`\n+   = help: the trait `Future` is not implemented for `fn() -> impl Future<Output = ()> {foo}`\n note: required by a bound in `bar`\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n    |"}, {"sha": "9b9e70a675fb1119725baa0152398e0587d6e005", "filename": "src/test/ui/suggestions/boxed-variant-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -9,7 +9,7 @@ fn foo(x: Ty) -> Ty {\n         Ty::List(elem) => foo(elem),\n         //~^ ERROR mismatched types\n         //~| HELP try dereferencing the `Box`\n-        //~| HELP try using a variant of the expected enum\n+        //~| HELP try wrapping\n     }\n }\n "}, {"sha": "e865b993a4c178bb128935eef88c7afaf6a286ae", "filename": "src/test/ui/suggestions/boxed-variant-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fboxed-variant-field.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -10,10 +10,10 @@ help: try dereferencing the `Box`\n    |\n LL |         Ty::List(elem) => foo(*elem),\n    |                               +\n-help: try using a variant of the expected enum\n+help: try wrapping the expression in `Ty::List`\n    |\n LL |         Ty::List(elem) => foo(Ty::List(elem)),\n-   |                               ~~~~~~~~~~~~~~\n+   |                               +++++++++    +\n \n error: aborting due to previous error\n "}, {"sha": "cb47d589bee5cde47d690600d94430fb3083d246", "filename": "src/test/ui/suggestions/issue-72766.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-72766.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -2,9 +2,9 @@ error[E0277]: the `?` operator can only be applied to values that implement `Try\n   --> $DIR/issue-72766.rs:14:5\n    |\n LL |     SadGirl {}.call()?;\n-   |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future`\n+   |     ^^^^^^^^^^^^^^^^^^ the `?` operator cannot be applied to type `impl Future<Output = Result<(), ()>>`\n    |\n-   = help: the trait `Try` is not implemented for `impl Future`\n+   = help: the trait `Try` is not implemented for `impl Future<Output = Result<(), ()>>`\n note: required by `branch`\n   --> $SRC_DIR/core/src/ops/try_trait.rs:LL:COL\n    |"}, {"sha": "0b1c41b837f6a9d334104ce46d87d1531c9bd48b", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -20,7 +20,7 @@ note: while checking the return type of the `async fn`\n LL |     pub async fn answer_str(&self, _s: &str) -> Test {\n    |                                                 ^^^^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = Test>`\n \n error: aborting due to previous error\n "}, {"sha": "6aa93a24d2f04badad96d70142113ee6b07a00f6", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -55,7 +55,7 @@ async fn async_different_futures() {\n         //~| HELP consider `await`ing on both `Future`s\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected opaque type, found a different opaque type\n-        //~| NOTE expected type `impl Future`\n+        //~| NOTE expected type `impl Future<Output = ()>`\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n     };\n }"}, {"sha": "b55c51b92809a35f5d9e020a6d0db9ee332d5afa", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -21,7 +21,7 @@ note: while checking the return type of the `async fn`\n LL | async fn async_dummy() {}\n    |                        ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy().await,\n@@ -55,7 +55,7 @@ note: while checking the return type of the `async fn`\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n    = note:     expected type `()`\n-           found opaque type `impl Future`\n+           found opaque type `impl Future<Output = ()>`\n help: consider `await`ing on the `Future`\n    |\n LL |         false => async_dummy2().await,\n@@ -74,7 +74,7 @@ error[E0308]: `match` arms have incompatible types\n LL |       let _ = match true {\n    |  _____________-\n LL | |         true => async_dummy(),\n-   | |                 ------------- this is found to be of type `impl Future`\n+   | |                 ------------- this is found to be of type `impl Future<Output = ()>`\n LL | |\n LL | |         false => async_dummy2(),\n    | |                  ^^^^^^^^^^^^^^ expected opaque type, found a different opaque type\n@@ -88,8 +88,8 @@ note: while checking the return type of the `async fn`\n    |\n LL | async fn async_dummy2() {}\n    |                         ^ checked the `Output` of this `async fn`, found opaque type\n-   = note:     expected type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n-           found opaque type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n+   = note:     expected type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n+           found opaque type `impl Future<Output = ()>` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:19:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "e065e0aaa8e0622480eef0c1d5d679d706a8ce28", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -13,8 +13,8 @@ LL | |         thing_two()\n LL | |     }.await\n    | |_____- `if` and `else` have incompatible types\n    |\n-   = note:     expected type `impl Future` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n-           found opaque type `impl Future` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n+   = note:     expected type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n+           found opaque type `impl Future<Output = Result<(), ()>>` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n help: consider `await`ing on both `Future`s\n    |"}, {"sha": "9b6dba7e9e75b9d7ac273c434f16af7a88da2c04", "filename": "src/test/ui/suggestions/suggest-full-enum-variant-for-local-module.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-full-enum-variant-for-local-module.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -2,14 +2,16 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-full-enum-variant-for-local-module.rs:9:28\n    |\n LL |     let _: option::O<()> = ();\n-   |            -------------   ^^\n-   |            |               |\n-   |            |               expected enum `O`, found `()`\n-   |            |               help: try using a variant of the expected enum: `option::O::Some(())`\n+   |            -------------   ^^ expected enum `O`, found `()`\n+   |            |\n    |            expected due to this\n    |\n    = note:   expected enum `O<()>`\n            found unit type `()`\n+help: try wrapping the expression in `option::O::Some`\n+   |\n+LL |     let _: option::O<()> = option::O::Some(());\n+   |                            ++++++++++++++++  +\n \n error: aborting due to previous error\n "}, {"sha": "39bff88e7f81a3624cbbf3ec0aa5bc3bc2e26122", "filename": "src/test/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -2,13 +2,14 @@ error[E0308]: mismatched types\n   --> $DIR/issue-46112.rs:9:21\n    |\n LL | fn main() { test(Ok(())); }\n-   |                     ^^\n-   |                     |\n-   |                     expected enum `Option`, found `()`\n-   |                     help: try using a variant of the expected enum: `Some(())`\n+   |                     ^^ expected enum `Option`, found `()`\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n+help: try wrapping the expression in `Some`\n+   |\n+LL | fn main() { test(Ok(Some(()))); }\n+   |                     +++++  +\n \n error: aborting due to previous error\n "}, {"sha": "6ece94771401d5ab2ae0b668704ab95934efe5f6", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d789740b09002e3d2be3ab1cf53fdca3995034c/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=3d789740b09002e3d2be3ab1cf53fdca3995034c", "patch": "@@ -266,6 +266,8 @@ pub fn check(path: &Path, bad: &mut bool) {\n             contains_ignore_directive(can_contain, &contents, \"end-whitespace\");\n         let mut skip_trailing_newlines =\n             contains_ignore_directive(can_contain, &contents, \"trailing-newlines\");\n+        let mut skip_leading_newlines =\n+            contains_ignore_directive(can_contain, &contents, \"leading-newlines\");\n         let mut skip_copyright = contains_ignore_directive(can_contain, &contents, \"copyright\");\n         let mut leading_new_lines = false;\n         let mut trailing_new_lines = 0;\n@@ -350,7 +352,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n             }\n         }\n         if leading_new_lines {\n-            tidy_error!(bad, \"{}: leading newline\", file.display());\n+            let mut err = |_| {\n+                tidy_error!(bad, \"{}: leading newline\", file.display());\n+            };\n+            suppressible_tidy_err!(err, skip_leading_newlines, \"mising leading newline\");\n         }\n         let mut err = |msg: &str| {\n             tidy_error!(bad, \"{}: {}\", file.display(), msg);\n@@ -395,6 +400,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n         if let Directive::Ignore(false) = skip_trailing_newlines {\n             tidy_error!(bad, \"{}: ignoring trailing newlines unnecessarily\", file.display());\n         }\n+        if let Directive::Ignore(false) = skip_leading_newlines {\n+            tidy_error!(bad, \"{}: ignoring leading newlines unnecessarily\", file.display());\n+        }\n         if let Directive::Ignore(false) = skip_copyright {\n             tidy_error!(bad, \"{}: ignoring copyright unnecessarily\", file.display());\n         }"}]}