{"sha": "e7c7aa7288559f8e5ea7ce3543ff946b09783628", "node_id": "C_kwDOAAsO6NoAKGU3YzdhYTcyODg1NTlmOGU1ZWE3Y2UzNTQzZmY5NDZiMDk3ODM2Mjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-07T09:47:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-07T09:47:23Z"}, "message": "Auto merge of #98332 - oli-obk:assume, r=wesleywiser\n\nLower the assume intrinsic to a MIR statement\n\nThis makes https://github.com/rust-lang/rust/pull/96862#issuecomment-1153739068 easier and will generally allow us to cheaply insert assume intrinsic calls in mir building.\n\nr? rust-lang/wg-mir-opt", "tree": {"sha": "b6b3ea66cbdcee10e6be4da6dbeed49fd89f0b22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6b3ea66cbdcee10e6be4da6dbeed49fd89f0b22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c7aa7288559f8e5ea7ce3543ff946b09783628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c7aa7288559f8e5ea7ce3543ff946b09783628", "html_url": "https://github.com/rust-lang/rust/commit/e7c7aa7288559f8e5ea7ce3543ff946b09783628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c7aa7288559f8e5ea7ce3543ff946b09783628/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0568b0a3de4eb37bf187eb61a9f017ae0018ad8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f", "html_url": "https://github.com/rust-lang/rust/commit/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f"}, {"sha": "a0130e62ecc6d0b450c34b25843f89e1e3ff63f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0130e62ecc6d0b450c34b25843f89e1e3ff63f0", "html_url": "https://github.com/rust-lang/rust/commit/a0130e62ecc6d0b450c34b25843f89e1e3ff63f0"}], "stats": {"total": 908, "additions": 338, "deletions": 570}, "files": [{"sha": "9f7a4d49989ab6b3aeddac712161c6168a120de3", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -391,7 +391,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n-            | mir::StatementKind::CopyNonOverlapping(..)\n+            | mir::StatementKind::Intrinsic(..)\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "3157f861d93bec9fc047fd81d750d218d2248f7b", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::{BasicBlock, Body, Location, Place, Rvalue};\n+use rustc_middle::mir::{self, BasicBlock, Body, Location, NonDivergingIntrinsic, Place, Rvalue};\n use rustc_middle::mir::{BorrowKind, Mutability, Operand};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::mir::{Statement, StatementKind};\n@@ -63,23 +63,24 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n             StatementKind::FakeRead(box (_, _)) => {\n                 // Only relevant for initialized/liveness/safety checks.\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(op)) => {\n+                self.consume_operand(location, op);\n+            }\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n                 ref src,\n                 ref dst,\n                 ref count,\n-            }) => {\n+            })) => {\n                 self.consume_operand(location, src);\n                 self.consume_operand(location, dst);\n                 self.consume_operand(location, count);\n             }\n-            StatementKind::Nop\n+            // Only relevant for mir typeck\n+            StatementKind::AscribeUserType(..)\n+            // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n-            | StatementKind::AscribeUserType(..)\n-            | StatementKind::Retag { .. }\n-            | StatementKind::StorageLive(..) => {\n-                // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant\n-                // to borrow check.\n-            }\n+            // Does not actually affect borrowck\n+            | StatementKind::StorageLive(..) => {}\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     location,\n@@ -88,7 +89,10 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n-            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+            StatementKind::Nop\n+            | StatementKind::Retag { .. }\n+            | StatementKind::Deinit(..)\n+            | StatementKind::SetDiscriminant { .. } => {\n                 bug!(\"Statement not allowed in this MIR phase\")\n             }\n         }"}, {"sha": "ec652f852179a43c6aff5401317ea097894dfe39", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -26,8 +26,8 @@ use rustc_index::bit_set::ChunkedBitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{DefiningAnchor, InferCtxt, TyCtxtInferExt};\n use rustc_middle::mir::{\n-    traversal, Body, ClearCrossCrate, Local, Location, Mutability, Operand, Place, PlaceElem,\n-    PlaceRef, VarDebugInfoContents,\n+    traversal, Body, ClearCrossCrate, Local, Location, Mutability, NonDivergingIntrinsic, Operand,\n+    Place, PlaceElem, PlaceRef, VarDebugInfoContents,\n };\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n@@ -591,22 +591,19 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-                ..\n-            }) => {\n-                span_bug!(\n+            StatementKind::Intrinsic(box ref kind) => match kind {\n+                NonDivergingIntrinsic::Assume(op) => self.consume_operand(location, (op, span), flow_state),\n+                NonDivergingIntrinsic::CopyNonOverlapping(..) => span_bug!(\n                     span,\n                     \"Unexpected CopyNonOverlapping, should only appear after lower_intrinsics\",\n                 )\n             }\n-            StatementKind::Nop\n+            // Only relevant for mir typeck\n+            StatementKind::AscribeUserType(..)\n+            // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n-            | StatementKind::AscribeUserType(..)\n-            | StatementKind::Retag { .. }\n-            | StatementKind::StorageLive(..) => {\n-                // `Nop`, `AscribeUserType`, `Retag`, and `StorageLive` are irrelevant\n-                // to borrow check.\n-            }\n+            // Does not actually affect borrowck\n+            | StatementKind::StorageLive(..) => {}\n             StatementKind::StorageDead(local) => {\n                 self.access_place(\n                     location,\n@@ -616,7 +613,10 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n                     flow_state,\n                 );\n             }\n-            StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n+            StatementKind::Nop\n+            | StatementKind::Retag { .. }\n+            | StatementKind::Deinit(..)\n+            | StatementKind::SetDiscriminant { .. } => {\n                 bug!(\"Statement not allowed in this MIR phase\")\n             }\n         }"}, {"sha": "fc0e95f30c98fa8202508b35bf53493a57e3624c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -1302,12 +1302,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-                ..\n-            }) => span_bug!(\n-                stmt.source_info.span,\n-                \"Unexpected StatementKind::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n-            ),\n+            StatementKind::Intrinsic(box ref kind) => match kind {\n+                NonDivergingIntrinsic::Assume(op) => self.check_operand(op, location),\n+                NonDivergingIntrinsic::CopyNonOverlapping(..) => span_bug!(\n+                    stmt.source_info.span,\n+                    \"Unexpected NonDivergingIntrinsic::CopyNonOverlapping, should only appear after lowering_intrinsics\",\n+                ),\n+            },\n             StatementKind::FakeRead(..)\n             | StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)"}, {"sha": "2aa11ac2eeaa653d1c0b2243afbf31e62effc467", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -794,20 +794,31 @@ fn codegen_stmt<'tcx>(\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n-        StatementKind::CopyNonOverlapping(inner) => {\n-            let dst = codegen_operand(fx, &inner.dst);\n-            let pointee = dst\n-                .layout()\n-                .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n-                .expect(\"Expected pointer\");\n-            let dst = dst.load_scalar(fx);\n-            let src = codegen_operand(fx, &inner.src).load_scalar(fx);\n-            let count = codegen_operand(fx, &inner.count).load_scalar(fx);\n-            let elem_size: u64 = pointee.size.bytes();\n-            let bytes =\n-                if elem_size != 1 { fx.bcx.ins().imul_imm(count, elem_size as i64) } else { count };\n-            fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n-        }\n+        StatementKind::Intrinsic(ref intrinsic) => match &**intrinsic {\n+            // We ignore `assume` intrinsics, they are only useful for optimizations\n+            NonDivergingIntrinsic::Assume(_) => {}\n+            NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n+                src,\n+                dst,\n+                count,\n+            }) => {\n+                let dst = codegen_operand(fx, dst);\n+                let pointee = dst\n+                    .layout()\n+                    .pointee_info_at(fx, rustc_target::abi::Size::ZERO)\n+                    .expect(\"Expected pointer\");\n+                let dst = dst.load_scalar(fx);\n+                let src = codegen_operand(fx, src).load_scalar(fx);\n+                let count = codegen_operand(fx, count).load_scalar(fx);\n+                let elem_size: u64 = pointee.size.bytes();\n+                let bytes = if elem_size != 1 {\n+                    fx.bcx.ins().imul_imm(count, elem_size as i64)\n+                } else {\n+                    count\n+                };\n+                fx.bcx.call_memcpy(fx.target_config, dst, src, bytes);\n+            }\n+        },\n     }\n }\n "}, {"sha": "0305341da784e28dba54a1bdbb2892c1a937a994", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -536,9 +536,11 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         {\n                             return None;\n                         }\n-                        StatementKind::CopyNonOverlapping(_) => {\n-                            return None;\n-                        } // conservative handling\n+                        StatementKind::Intrinsic(ref intrinsic) => match **intrinsic {\n+                            NonDivergingIntrinsic::CopyNonOverlapping(..) => return None,\n+                            NonDivergingIntrinsic::Assume(..) => {}\n+                        },\n+                        // conservative handling\n                         StatementKind::Assign(_)\n                         | StatementKind::FakeRead(_)\n                         | StatementKind::SetDiscriminant { .. }"}, {"sha": "0cd9332a58befab6a824ea3873f1f053300c20fa", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -357,9 +357,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n     let usize_layout = fx.layout_of(fx.tcx.types.usize);\n \n     match intrinsic {\n-        sym::assume => {\n-            intrinsic_args!(fx, args => (_a); intrinsic);\n-        }\n         sym::likely | sym::unlikely => {\n             intrinsic_args!(fx, args => (a); intrinsic);\n "}, {"sha": "6393dd9d634fc01f6acb4ea132e399d3b3df7f40", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -77,10 +77,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let result = PlaceRef::new_sized(llresult, fn_abi.ret.layout);\n \n         let llval = match name {\n-            sym::assume => {\n-                bx.assume(args[0].immediate());\n-                return;\n-            }\n             sym::abort => {\n                 bx.abort();\n                 return;"}, {"sha": "1db0fb3a6f1b0381da9eb2a1ca06eb6e3689af75", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -1,4 +1,5 @@\n use rustc_middle::mir;\n+use rustc_middle::mir::NonDivergingIntrinsic;\n \n use super::FunctionCx;\n use super::LocalRef;\n@@ -73,11 +74,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.codegen_coverage(&mut bx, coverage.clone(), statement.source_info.scope);\n                 bx\n             }\n-            mir::StatementKind::CopyNonOverlapping(box mir::CopyNonOverlapping {\n-                ref src,\n-                ref dst,\n-                ref count,\n-            }) => {\n+            mir::StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(ref op)) => {\n+                let op_val = self.codegen_operand(&mut bx, op);\n+                bx.assume(op_val.immediate());\n+                bx\n+            }\n+            mir::StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(\n+                mir::CopyNonOverlapping { ref count, ref src, ref dst },\n+            )) => {\n                 let dst_val = self.codegen_operand(&mut bx, dst);\n                 let src_val = self.codegen_operand(&mut bx, src);\n                 let count = self.codegen_operand(&mut bx, count).immediate();"}, {"sha": "2f415a8c9c7090152235f670fa7448f014b548ac", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     self,\n     interpret::{ConstValue, GlobalId, InterpResult, PointerArithmetic, Scalar},\n-    BinOp,\n+    BinOp, NonDivergingIntrinsic,\n };\n use rustc_middle::ty;\n use rustc_middle::ty::layout::LayoutOf as _;\n@@ -506,12 +506,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // These just return their argument\n                 self.copy_op(&args[0], dest, /*allow_transmute*/ false)?;\n             }\n-            sym::assume => {\n-                let cond = self.read_scalar(&args[0])?.to_bool()?;\n-                if !cond {\n-                    throw_ub_format!(\"`assume` intrinsic called with `false`\");\n-                }\n-            }\n             sym::raw_eq => {\n                 let result = self.raw_eq_intrinsic(&args[0], &args[1])?;\n                 self.write_scalar(result, dest)?;\n@@ -536,6 +530,32 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(true)\n     }\n \n+    pub(super) fn emulate_nondiverging_intrinsic(\n+        &mut self,\n+        intrinsic: &NonDivergingIntrinsic<'tcx>,\n+    ) -> InterpResult<'tcx> {\n+        match intrinsic {\n+            NonDivergingIntrinsic::Assume(op) => {\n+                let op = self.eval_operand(op, None)?;\n+                let cond = self.read_scalar(&op)?.to_bool()?;\n+                if !cond {\n+                    throw_ub_format!(\"`assume` called with `false`\");\n+                }\n+                Ok(())\n+            }\n+            NonDivergingIntrinsic::CopyNonOverlapping(mir::CopyNonOverlapping {\n+                count,\n+                src,\n+                dst,\n+            }) => {\n+                let src = self.eval_operand(src, None)?;\n+                let dst = self.eval_operand(dst, None)?;\n+                let count = self.eval_operand(count, None)?;\n+                self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)\n+            }\n+        }\n+    }\n+\n     pub fn exact_div(\n         &mut self,\n         a: &ImmTy<'tcx, M::Provenance>,"}, {"sha": "c6e04cbfb6bf344200dcc916378ad8df4adcd454", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -114,13 +114,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 M::retag(self, *kind, &dest)?;\n             }\n \n-            // Call CopyNonOverlapping\n-            CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { src, dst, count }) => {\n-                let src = self.eval_operand(src, None)?;\n-                let dst = self.eval_operand(dst, None)?;\n-                let count = self.eval_operand(count, None)?;\n-                self.copy_intrinsic(&src, &dst, &count, /* nonoverlapping */ true)?;\n-            }\n+            Intrinsic(box ref intrinsic) => self.emulate_nondiverging_intrinsic(intrinsic)?,\n \n             // Statements we do not track.\n             AscribeUserType(..) => {}"}, {"sha": "3fa40dc305952ae2694937246c13e8360ff69716", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -678,7 +678,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "783ab350faac3842d51627525c5f827d6945a00c", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -7,9 +7,10 @@ use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{\n-    traversal, AggregateKind, BasicBlock, BinOp, Body, BorrowKind, CastKind, Local, Location,\n-    MirPass, MirPhase, Operand, Place, PlaceElem, PlaceRef, ProjectionElem, RuntimePhase, Rvalue,\n-    SourceScope, Statement, StatementKind, Terminator, TerminatorKind, UnOp, START_BLOCK,\n+    traversal, AggregateKind, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping,\n+    Local, Location, MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef,\n+    ProjectionElem, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n+    TerminatorKind, UnOp, START_BLOCK,\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::subst::Subst;\n@@ -636,11 +637,18 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n             }\n-            StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n-                ref src,\n-                ref dst,\n-                ref count,\n-            }) => {\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(op)) => {\n+                let ty = op.ty(&self.body.local_decls, self.tcx);\n+                if !ty.is_bool() {\n+                    self.fail(\n+                        location,\n+                        format!(\"`assume` argument must be `bool`, but got: `{}`\", ty),\n+                    );\n+                }\n+            }\n+            StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(\n+                CopyNonOverlapping { src, dst, count },\n+            )) => {\n                 let src_ty = src.ty(&self.body.local_decls, self.tcx);\n                 let op_src_ty = if let Some(src_deref) = src_ty.builtin_deref(true) {\n                     src_deref.ty"}, {"sha": "80ef166d57f86a64cb8036ffdd8c79935f1d6822", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -1362,13 +1362,7 @@ impl Debug for Statement<'_> {\n                 write!(fmt, \"Coverage::{:?} for {:?}\", kind, rgn)\n             }\n             Coverage(box ref coverage) => write!(fmt, \"Coverage::{:?}\", coverage.kind),\n-            CopyNonOverlapping(box crate::mir::CopyNonOverlapping {\n-                ref src,\n-                ref dst,\n-                ref count,\n-            }) => {\n-                write!(fmt, \"copy_nonoverlapping(src={:?}, dst={:?}, count={:?})\", src, dst, count)\n-            }\n+            Intrinsic(box ref intrinsic) => write!(fmt, \"{intrinsic}\"),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }"}, {"sha": "4e06d91012c0dfc9c0f0eb50d1792357df25a2ef", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -249,7 +249,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         Retag(..) => \"Retag\",\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n-        CopyNonOverlapping(..) => \"CopyNonOverlapping\",\n+        Intrinsic(..) => \"Intrinsic\",\n         Nop => \"Nop\",\n     }\n }"}, {"sha": "bf63b8efaf7a2deb135060eb56f99e4d414e4b95", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -327,6 +327,34 @@ pub enum StatementKind<'tcx> {\n     /// executed.\n     Coverage(Box<Coverage>),\n \n+    /// Denotes a call to an intrinsic that does not require an unwind path and always returns.\n+    /// This avoids adding a new block and a terminator for simple intrinsics.\n+    Intrinsic(Box<NonDivergingIntrinsic<'tcx>>),\n+\n+    /// No-op. Useful for deleting instructions without affecting statement indices.\n+    Nop,\n+}\n+\n+#[derive(\n+    Clone,\n+    TyEncodable,\n+    TyDecodable,\n+    Debug,\n+    PartialEq,\n+    Hash,\n+    HashStable,\n+    TypeFoldable,\n+    TypeVisitable\n+)]\n+pub enum NonDivergingIntrinsic<'tcx> {\n+    /// Denotes a call to the intrinsic function `assume`.\n+    ///\n+    /// The operand must be a boolean. Optimizers may use the value of the boolean to backtrack its\n+    /// computation to infer information about other variables. So if the boolean came from a\n+    /// `x < y` operation, subsequent operations on `x` and `y` could elide various bound checks.\n+    /// If the argument is `false`, this operation is equivalent to `TerminatorKind::Unreachable`.\n+    Assume(Operand<'tcx>),\n+\n     /// Denotes a call to the intrinsic function `copy_nonoverlapping`.\n     ///\n     /// First, all three operands are evaluated. `src` and `dest` must each be a reference, pointer,\n@@ -340,10 +368,18 @@ pub enum StatementKind<'tcx> {\n     ///\n     /// **Needs clarification**: Is this typed or not, ie is there a typed load and store involved?\n     /// I vaguely remember Ralf saying somewhere that he thought it should not be.\n-    CopyNonOverlapping(Box<CopyNonOverlapping<'tcx>>),\n+    CopyNonOverlapping(CopyNonOverlapping<'tcx>),\n+}\n \n-    /// No-op. Useful for deleting instructions without affecting statement indices.\n-    Nop,\n+impl std::fmt::Display for NonDivergingIntrinsic<'_> {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            Self::Assume(op) => write!(f, \"assume({op:?})\"),\n+            Self::CopyNonOverlapping(CopyNonOverlapping { src, dst, count }) => {\n+                write!(f, \"copy_nonoverlapping(dst = {dst:?}, src = {src:?}, count = {count:?})\")\n+            }\n+        }\n+    }\n }\n \n /// Describes what kind of retag is to be performed."}, {"sha": "708ea4398c852102f8c7c1d3ce12cddf4364ccd3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -425,14 +425,15 @@ macro_rules! make_mir_visitor {\n                             location\n                         )\n                     }\n-                    StatementKind::CopyNonOverlapping(box crate::mir::CopyNonOverlapping{\n-                        src,\n-                        dst,\n-                        count,\n-                    }) => {\n-                      self.visit_operand(src, location);\n-                      self.visit_operand(dst, location);\n-                      self.visit_operand(count, location)\n+                    StatementKind::Intrinsic(box ref $($mutability)? intrinsic) => {\n+                        match intrinsic {\n+                            NonDivergingIntrinsic::Assume(op) => self.visit_operand(op, location),\n+                            NonDivergingIntrinsic::CopyNonOverlapping(CopyNonOverlapping { src, dst, count }) => {\n+                                self.visit_operand(src, location);\n+                                self.visit_operand(dst, location);\n+                                self.visit_operand(count, location);\n+                            }\n+                        }\n                     }\n                     StatementKind::Nop => {}\n                 }"}, {"sha": "3e08a8799ef9aadacd88614c862367ee9c3d34c8", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -270,7 +270,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => None,\n         };\n         if let Some(destination) = destination {"}, {"sha": "18760b6c6fa543328b69ec269cc9c3c4a265afd2", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -142,7 +142,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             | StatementKind::FakeRead(..)\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n-            | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::StorageLive(..) => {}\n         }\n     }"}, {"sha": "f46fd118bde5d165106bfcb047dd7d2d5f494232", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -330,7 +330,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "beff19a3ab2e1d908f8a09a4848c8ddeb5065c33", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -105,7 +105,8 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n                 // safe (at least as emitted during MIR construction)\n             }\n \n-            StatementKind::CopyNonOverlapping(..) => unreachable!(),\n+            // Move to above list once mir construction uses it.\n+            StatementKind::Intrinsic(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);\n     }"}, {"sha": "9f842c929dc2478034f6962b05a8c4b63ac05419", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -825,7 +825,7 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n \n         // Retain spans from all other statements\n         StatementKind::FakeRead(box (_, _)) // Not including `ForGuardBinding`\n-        | StatementKind::CopyNonOverlapping(..)\n+        | StatementKind::Intrinsic(..)\n         | StatementKind::Assign(_)\n         | StatementKind::SetDiscriminant { .. }\n         | StatementKind::Deinit(..)"}, {"sha": "3f3870cc7bad2f0d0a866518a7cab212bc195586", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -52,7 +52,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::StorageLive(_)\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::Coverage(_)\n-                | StatementKind::CopyNonOverlapping(_)\n+                | StatementKind::Intrinsic(_)\n                 | StatementKind::Nop => (),\n \n                 StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {"}, {"sha": "9bc47613e4c67885075bc43cf62725b3428644b7", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -537,7 +537,7 @@ impl<'a> Conflicts<'a> {\n             | StatementKind::FakeRead(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "705cf776fb29ef6be0c283d4beeaafe20042430d", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -1452,7 +1452,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::Retag(..)\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "9892580e63dcb4f1655ce08c463e1e47d32c79b3", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -46,12 +46,31 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         let mut args = args.drain(..);\n                         block.statements.push(Statement {\n                             source_info: terminator.source_info,\n-                            kind: StatementKind::CopyNonOverlapping(Box::new(\n-                                rustc_middle::mir::CopyNonOverlapping {\n-                                    src: args.next().unwrap(),\n-                                    dst: args.next().unwrap(),\n-                                    count: args.next().unwrap(),\n-                                },\n+                            kind: StatementKind::Intrinsic(Box::new(\n+                                NonDivergingIntrinsic::CopyNonOverlapping(\n+                                    rustc_middle::mir::CopyNonOverlapping {\n+                                        src: args.next().unwrap(),\n+                                        dst: args.next().unwrap(),\n+                                        count: args.next().unwrap(),\n+                                    },\n+                                ),\n+                            )),\n+                        });\n+                        assert_eq!(\n+                            args.next(),\n+                            None,\n+                            \"Extra argument for copy_non_overlapping intrinsic\"\n+                        );\n+                        drop(args);\n+                        terminator.kind = TerminatorKind::Goto { target };\n+                    }\n+                    sym::assume => {\n+                        let target = target.unwrap();\n+                        let mut args = args.drain(..);\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::Intrinsic(Box::new(\n+                                NonDivergingIntrinsic::Assume(args.next().unwrap()),\n                             )),\n                         });\n                         assert_eq!("}, {"sha": "f1bbf2ea7e8ea3aaf7b40307ba110dcd7346b4a3", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -51,7 +51,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n                 | StatementKind::Deinit(..)\n-                | StatementKind::CopyNonOverlapping(..)\n+                | StatementKind::Intrinsic(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "2f116aaa95849bd075b94179109e2bc1a210d1d9", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -249,7 +249,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             | StatementKind::AscribeUserType(_, _)\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageDead(_)\n-            | StatementKind::CopyNonOverlapping(_)\n+            | StatementKind::Intrinsic(_)\n             | StatementKind::Nop => {}\n         }\n     }\n@@ -317,7 +317,7 @@ fn find_determining_place<'tcx>(\n             | StatementKind::Retag(_, _)\n             | StatementKind::AscribeUserType(_, _)\n             | StatementKind::Coverage(_)\n-            | StatementKind::CopyNonOverlapping(_)\n+            | StatementKind::Intrinsic(_)\n             | StatementKind::Nop => {}\n \n             // If the discriminant is set, it is always set"}, {"sha": "57d372fda5697f508c9a799d06f8cac051f18af9", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -499,7 +499,7 @@ impl UsedLocals {\n impl<'tcx> Visitor<'tcx> for UsedLocals {\n     fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n         match statement.kind {\n-            StatementKind::CopyNonOverlapping(..)\n+            StatementKind::Intrinsic(..)\n             | StatementKind::Retag(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)"}, {"sha": "d9898d8e0f0152331e17d27f8255454d861b5cc6", "filename": "src/test/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -0,0 +1,26 @@\n+- // MIR for `assume` before LowerIntrinsics\n++ // MIR for `assume` after LowerIntrinsics\n+  \n+  fn assume() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:17: +0:17\n+      let _1: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+-         _1 = std::intrinsics::assume(const true) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:72:9: 72:32\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }\n++         assume(const true);              // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n++         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+      }\n+  \n+      bb1: {\n+          StorageDead(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:38: +2:39\n+          _0 = const ();                   // scope 1 at $DIR/lower_intrinsics.rs:+1:5: +3:6\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "4fb6752b6196522f6098b69533b9b1c7f02ddce2", "filename": "src/test/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `f_copy_nonoverlapping` before LowerIntrinsics\n++ // MIR for `f_copy_nonoverlapping` after LowerIntrinsics\n+  \n+  fn f_copy_nonoverlapping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:32: +0:32\n+      let _1: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:12\n+      let _3: ();                          // in scope 0 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+      let mut _4: *const i32;              // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+      let mut _5: *const ();               // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+      let mut _6: *const ();               // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+      let _7: &();                         // in scope 0 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+      let mut _8: *mut i32;                // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+      let mut _9: *mut ();                 // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+      let mut _10: *mut ();                // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+      let mut _11: &mut ();                // in scope 0 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+      scope 1 {\n+          debug src => _1;                 // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:12\n+          let mut _2: ();                  // in scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:16\n+          scope 2 {\n+              debug dst => _2;             // in scope 2 at $DIR/lower_intrinsics.rs:+2:9: +2:16\n+              scope 3 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:12\n+          Deinit(_1);                      // scope 0 at $DIR/lower_intrinsics.rs:+1:15: +1:17\n+          StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:16\n+          Deinit(_2);                      // scope 1 at $DIR/lower_intrinsics.rs:+2:19: +2:21\n+          StorageLive(_3);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+          StorageLive(_4);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+          StorageLive(_5);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+          StorageLive(_6);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+          StorageLive(_7);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+          _7 = &_1;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+          _6 = &raw const (*_7);           // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:33\n+          _5 = _6;                         // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:45\n+          _4 = move _5 as *const i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:29: +4:59\n+          StorageDead(_5);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:58: +4:59\n+          StorageLive(_8);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+          StorageLive(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+          StorageLive(_10);                // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+          StorageLive(_11);                // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+          _11 = &mut _2;                   // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+          _10 = &raw mut (*_11);           // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:69\n+          _9 = _10;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n+          _8 = move _9 as *mut i32 (Misc); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n+          StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n+-         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:65:9: 65:28\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }\n++         copy_nonoverlapping(dst = move _8, src = move _4, count = const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n++         goto -> bb1;                     // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+      }\n+  \n+      bb1: {\n+          StorageDead(_8);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:94: +4:95\n+          StorageDead(_4);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:94: +4:95\n+          StorageDead(_11);                // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_10);                // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_7);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_6);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          StorageDead(_3);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:95: +4:96\n+          _0 = const ();                   // scope 3 at $DIR/lower_intrinsics.rs:+3:5: +5:6\n+          StorageDead(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "66dae0e46b9d7a15912ad5d6c02394dd58f4fee9", "filename": "src/test/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -1,7 +1,7 @@\n // unit-test: LowerIntrinsics\n // ignore-wasm32 compiled with panic=abort by default\n \n-#![feature(core_intrinsics)]\n+#![feature(core_intrinsics, intrinsics)]\n #![crate_type = \"lib\"]\n \n // EMIT_MIR lower_intrinsics.wrapping.LowerIntrinsics.diff\n@@ -51,3 +51,24 @@ pub fn discriminant<T>(t: T) {\n     core::intrinsics::discriminant_value(&());\n     core::intrinsics::discriminant_value(&E::B);\n }\n+\n+extern \"rust-intrinsic\" {\n+    // Cannot use `std::intrinsics::copy_nonoverlapping` as that is a wrapper function\n+    fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n+}\n+\n+// EMIT_MIR lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff\n+pub fn f_copy_nonoverlapping() {\n+    let src = ();\n+    let mut dst = ();\n+    unsafe {\n+        copy_nonoverlapping(&src as *const _ as *const i32, &mut dst as *mut _ as *mut i32, 0);\n+    }\n+}\n+\n+// EMIT_MIR lower_intrinsics.assume.LowerIntrinsics.diff\n+pub fn assume() {\n+    unsafe {\n+        std::intrinsics::assume(true);\n+    }\n+}"}, {"sha": "28536dc28a722fde154d3cffb445a3e73d3fd62c", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "removed", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=0568b0a3de4eb37bf187eb61a9f017ae0018ad8f", "patch": "@@ -1,146 +0,0 @@\n-- // MIR for `identity` before ConstProp\n-+ // MIR for `identity` after ConstProp\n-  \n-  fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:13: +0:14\n-      let mut _0: std::result::Result<i32, i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:37: +0:53\n-      let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-      let mut _5: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let mut _7: !;                       // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let mut _8: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-      let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      scope 1 {\n-          debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          scope 2 {\n-              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                  debug residual => _8;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let _16: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _17: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                  scope 9 {\n-                      debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                      }\n-                  }\n-              }\n-          }\n-      }\n-      scope 3 {\n-          debug val => _9;                 // in scope 3 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          scope 4 {\n-          }\n-      }\n-      scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-          debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _10: isize;              // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _12: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let _13: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _14: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          let mut _15: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          scope 6 {\n-              debug v => _11;              // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-          scope 7 {\n-              debug e => _13;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          }\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-          _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-          _10 = discriminant(_4);          // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          switchInt(move _10) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-      }\n-  \n-      bb1: {\n-          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _9 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          _2 = _9;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      }\n-  \n-      bb3: {\n-          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          _6 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageLive(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          _8 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageLive(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _16 = move ((_8 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-      }\n-  \n-      bb4: {\n-          StorageLive(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _13 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _15 = move _13;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_14);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_14 as Err).0: i32) = move _15; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_14) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_15);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _14; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_14);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_13);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         _5 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(const 1_isize) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      }\n-  \n-      bb5: {\n-          unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-      }\n-  \n-      bb6: {\n-          StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _11 = move ((_4 as Ok).0: i32);  // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageLive(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          _12 = move _11;                  // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_3 as Continue).0: i32) = move _12; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_12);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         _5 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-+         switchInt(const 0_isize) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-      }\n-  }\n-  "}, {"sha": "df20f0ed36b6045d90742d06a0aac4db9bd1aba9", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=0568b0a3de4eb37bf187eb61a9f017ae0018ad8f", "patch": "@@ -1,124 +0,0 @@\n-// MIR for `identity` after PreCodegen\n-\n-fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:13: +0:14\n-    let mut _0: std::result::Result<i32, i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:37: +0:53\n-    let mut _2: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, i32>, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-    let mut _4: std::result::Result<i32, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-    let _5: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-    let mut _6: std::result::Result<std::convert::Infallible, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-    scope 1 {\n-        debug residual => _5;            // in scope 1 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        scope 2 {\n-            scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-                debug residual => _6;    // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let _14: i32;            // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _15: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                let mut _16: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-                scope 9 {\n-                    debug e => _14;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                    scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n-                        debug t => _16;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-                    }\n-                }\n-            }\n-        }\n-    }\n-    scope 3 {\n-        debug val => _7;                 // in scope 3 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        scope 4 {\n-        }\n-    }\n-    scope 5 (inlined <Result<i32, i32> as Try>::branch) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n-        debug self => _4;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _8: isize;               // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let _9: i32;                     // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _10: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let _11: i32;                    // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _12: std::result::Result<std::convert::Infallible, i32>; // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        let mut _13: i32;                // in scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        scope 6 {\n-            debug v => _9;               // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        }\n-        scope 7 {\n-            debug e => _11;              // in scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        }\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        StorageLive(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-        _4 = _1;                         // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:9\n-        _8 = discriminant(_4);           // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        switchInt(move _8) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-    }\n-\n-    bb1: {\n-        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _11 = move ((_4 as Err).0: i32); // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _13 = move _11;                  // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_12);                     // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_12 as Err).0: i32) = move _13; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_12) = 1;           // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_13);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_3);                      // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>) = move _12; // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_3) = 1;            // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_5);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        _5 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, i32>); // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_6);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        _6 = _5;                         // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _14 = move ((_6 as Err).0: i32); // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _16 = move _14;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _15 = move _16;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-        StorageDead(_16);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_0 as Err).0: i32) = move _15; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_15);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_14);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_6);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageDead(_5);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-        StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-    }\n-\n-    bb3: {\n-        StorageLive(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _9 = move ((_4 as Ok).0: i32);   // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageLive(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        _10 = move _9;                   // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        Deinit(_3);                      // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        ((_3 as Continue).0: i32) = move _10; // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        discriminant(_3) = 0;            // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_10);                // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_9);                 // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n-        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        _7 = ((_3 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        _2 = _7;                         // scope 4 at $DIR/separate_const_switch.rs:+1:8: +1:10\n-        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-        Deinit(_0);                      // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-        ((_0 as Ok).0: i32) = move _2;   // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-        discriminant(_0) = 0;            // scope 0 at $DIR/separate_const_switch.rs:+1:5: +1:11\n-        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-        StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-        return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-    }\n-}"}, {"sha": "28269165e1c27a672f7a863d855940195ee24102", "filename": "src/test/mir-opt/separate_const_switch.too_complex.ConstProp.diff", "status": "removed", "additions": 0, "deletions": 103, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff?ref=0568b0a3de4eb37bf187eb61a9f017ae0018ad8f", "patch": "@@ -1,103 +0,0 @@\n-- // MIR for `too_complex` before ConstProp\n-+ // MIR for `too_complex` after ConstProp\n-  \n-  fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n-      debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:16: +0:17\n-      let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:42: +0:53\n-      let mut _2: std::ops::ControlFlow<usize, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-      let mut _3: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+7:13: +7:18\n-      let _4: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-      let mut _5: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-      let _6: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-      let mut _7: usize;                   // in scope 0 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-      let mut _8: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+11:9: +11:33\n-      let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-      let mut _10: i32;                    // in scope 0 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-      let _11: usize;                      // in scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-      scope 1 {\n-          debug v => _4;                   // in scope 1 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-      }\n-      scope 2 {\n-          debug r => _6;                   // in scope 2 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-      }\n-      scope 3 {\n-          debug v => _9;                   // in scope 3 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-      }\n-      scope 4 {\n-          debug r => _11;                  // in scope 4 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-      }\n-  \n-      bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-          _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-          switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n-      }\n-  \n-      bb1: {\n-          StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-          _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-          StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:+8:42: +8:43\n-          Deinit(_2);                      // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:+8:23: +8:44\n-          StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:+8:43: +8:44\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n--         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         _8 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(const 1_isize) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-      }\n-  \n-      bb2: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-      }\n-  \n-      bb3: {\n-          StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-          _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-          StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-          Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-          StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n-          StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n--         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n--         switchInt(move _8) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-+         _8 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-+         switchInt(const 0_isize) -> [0_isize: bb6, 1_isize: bb4, otherwise: bb5]; // scope 0 at $DIR/separate_const_switch.rs:+5:5: +10:6\n-      }\n-  \n-      bb4: {\n-          StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-          _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-          Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-          discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-          StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-      }\n-  \n-      bb5: {\n-          unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-      }\n-  \n-      bb6: {\n-          StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-          _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-          StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-          Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-          StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-          goto -> bb7;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-      }\n-  \n-      bb7: {\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n-      }\n-  }\n-  "}, {"sha": "0ee070619e79d4315022f132eddb88af3894e8a1", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0568b0a3de4eb37bf187eb61a9f017ae0018ad8f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=0568b0a3de4eb37bf187eb61a9f017ae0018ad8f", "patch": "@@ -1,73 +0,0 @@\n-// MIR for `too_complex` after PreCodegen\n-\n-fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n-    debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:+0:16: +0:17\n-    let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:+0:42: +0:53\n-    let mut _2: std::ops::ControlFlow<usize, i32>; // in scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-    let mut _3: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:+7:13: +7:18\n-    let _4: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-    let mut _5: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-    let _6: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-    let _7: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-    let mut _8: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-    let _9: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-    scope 1 {\n-        debug v => _4;                   // in scope 1 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-    }\n-    scope 2 {\n-        debug r => _6;                   // in scope 2 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-    }\n-    scope 3 {\n-        debug v => _7;                   // in scope 3 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-    }\n-    scope 4 {\n-        debug r => _9;                   // in scope 4 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-    }\n-\n-    bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+5:11: +10:6\n-        _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-        switchInt(move _3) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+6:9: +6:16\n-    }\n-\n-    bb1: {\n-        StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:17: +8:18\n-        StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+8:43: +8:44\n-        StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+12:28: +12:29\n-        Deinit(_0);                      // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-        discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:+12:34: +12:38\n-        StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-        goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+12:37: +12:38\n-    }\n-\n-    bb2: {\n-        unreachable;                     // scope 0 at $DIR/separate_const_switch.rs:+6:15: +6:16\n-    }\n-\n-    bb3: {\n-        StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-        _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:+7:16: +7:17\n-        StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-        _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:+7:44: +7:45\n-        Deinit(_2);                      // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-        ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-        discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:+7:22: +7:46\n-        StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:+7:45: +7:46\n-        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:+7:45: +7:46\n-        StorageLive(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-        _7 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:+11:31: +11:32\n-        StorageLive(_8);                 // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-        _8 = _7;                         // scope 3 at $DIR/separate_const_switch.rs:+11:42: +11:43\n-        Deinit(_0);                      // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-        ((_0 as Some).0: i32) = move _8; // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-        discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:+11:37: +11:44\n-        StorageDead(_8);                 // scope 3 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-        StorageDead(_7);                 // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-        goto -> bb4;                     // scope 0 at $DIR/separate_const_switch.rs:+11:43: +11:44\n-    }\n-\n-    bb4: {\n-        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+14:1: +14:2\n-        return;                          // scope 0 at $DIR/separate_const_switch.rs:+14:2: +14:2\n-    }\n-}"}, {"sha": "b22a9c817460db7761586f8899b839affd5be31d", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c7aa7288559f8e5ea7ce3543ff946b09783628/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=e7c7aa7288559f8e5ea7ce3543ff946b09783628", "patch": "@@ -7,7 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::{\n     Body, CastKind, NullOp, Operand, Place, ProjectionElem, Rvalue, Statement, StatementKind, Terminator,\n-    TerminatorKind,\n+    TerminatorKind, NonDivergingIntrinsic\n };\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n@@ -212,11 +212,18 @@ fn check_statement<'tcx>(\n             check_place(tcx, **place, span, body)\n         },\n \n-        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n+        StatementKind::Intrinsic(box NonDivergingIntrinsic::Assume(op)) => {\n+            check_operand(tcx, op, span, body)\n+        },\n+\n+        StatementKind::Intrinsic(box NonDivergingIntrinsic::CopyNonOverlapping(\n+            rustc_middle::mir::CopyNonOverlapping { dst, src, count },\n+        )) => {\n             check_operand(tcx, dst, span, body)?;\n             check_operand(tcx, src, span, body)?;\n             check_operand(tcx, count, span, body)\n         },\n+\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}]}