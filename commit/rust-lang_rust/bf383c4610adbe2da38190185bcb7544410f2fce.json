{"sha": "bf383c4610adbe2da38190185bcb7544410f2fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMzgzYzQ2MTBhZGJlMmRhMzgxOTAxODViY2I3NTQ0NDEwZjJmY2U=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-04-05T15:11:11Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-04-05T15:11:11Z"}, "message": "keep missed comments appearing after the struct/enum ident", "tree": {"sha": "d6d81edee656cf6bc206d919df5d4dea1f655909", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6d81edee656cf6bc206d919df5d4dea1f655909"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf383c4610adbe2da38190185bcb7544410f2fce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlyncA8ACgkQbVYg2Qgh\nATOIQwf/X9HWn+yXWGwRD/WQ0p349IxZGGKxbmqcL4JX+oo5bQ9n7gq4FU8posar\nyUXpnmAH8GGwBfi4ixgBpICDSCflDfibh/dYxtG6Zko+jASaYFZWREuOQSNgL9k1\nfOqLQn23UIqfopIfrEDwLK9EKzTl62u/VeXkDuf4Pkq28a6vU9cjwri1Lh20r1pD\n5RbRuqWVu9BIvbZ+Ced/ygEszSymJ3659X8hQ1MCry9/oN82kluqkDynNV7r7OYU\nIpvG8llQ7NTPQe5eWU2dS14mIieZ12myj/CvIGhLT+TL+yyqQtLmXMqZGVZwjQMD\nwCOIBUexY4zILn08t0dKjTQNYjbmPg==\n=jX4k\n-----END PGP SIGNATURE-----", "payload": "tree d6d81edee656cf6bc206d919df5d4dea1f655909\nparent 8e068510a4a7e0bf7ae1c4e641f8a790842f6f17\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1554477071 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1554477071 +0200\n\nkeep missed comments appearing after the struct/enum ident\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf383c4610adbe2da38190185bcb7544410f2fce", "html_url": "https://github.com/rust-lang/rust/commit/bf383c4610adbe2da38190185bcb7544410f2fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf383c4610adbe2da38190185bcb7544410f2fce/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17", "html_url": "https://github.com/rust-lang/rust/commit/8e068510a4a7e0bf7ae1c4e641f8a790842f6f17"}], "stats": {"total": 149, "additions": 124, "deletions": 25}, "files": [{"sha": "a811d4a26ed7d6af697d87daccbb2f7bf7481f83", "filename": "src/comment.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf383c4610adbe2da38190185bcb7544410f2fce/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf383c4610adbe2da38190185bcb7544410f2fce/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=bf383c4610adbe2da38190185bcb7544410f2fce", "patch": "@@ -142,6 +142,11 @@ fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle<'_> {\n     }\n }\n \n+/// Returns true if the last line of the passed string finishes with a block-comment.\n+pub fn is_last_comment_block(s: &str) -> bool {\n+    s.trim_end().ends_with(\"*/\")\n+}\n+\n /// Combine `prev_str` and `next_str` into a single `String`. `span` may contain\n /// comments between two strings. If there are such comments, then that will be\n /// recovered. If `allow_extend` is true and there is no comment between the two"}, {"sha": "57bded726047e3273131f10a3af5ee232754445b", "filename": "src/items.rs", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bf383c4610adbe2da38190185bcb7544410f2fce/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf383c4610adbe2da38190185bcb7544410f2fce/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bf383c4610adbe2da38190185bcb7544410f2fce", "patch": "@@ -10,8 +10,9 @@ use syntax::visit;\n use syntax::{ast, ptr, symbol};\n \n use crate::comment::{\n-    combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n-    recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented,\n+    combine_strs_with_missing_comments, contains_comment, is_last_comment_block,\n+    recover_comment_removed, recover_missing_comment_in_span, rewrite_missing_comment,\n+    FindUncommented,\n };\n use crate::config::lists::*;\n use crate::config::{BraceStyle, Config, Density, IndentStyle, Version};\n@@ -1173,11 +1174,7 @@ fn format_unit_struct(\n ) -> Option<String> {\n     let header_str = format_header(context, p.prefix, p.ident, p.vis);\n     let generics_str = if let Some(generics) = p.generics {\n-        let hi = if generics.where_clause.predicates.is_empty() {\n-            generics.span.hi()\n-        } else {\n-            generics.where_clause.span.hi()\n-        };\n+        let hi = context.snippet_provider.span_before(p.span, \";\");\n         format_generics(\n             context,\n             generics,\n@@ -2711,19 +2708,19 @@ fn format_generics(\n     let shape = Shape::legacy(context.budget(used_width + offset.width()), offset);\n     let mut result = rewrite_generics(context, \"\", generics, shape)?;\n \n-    let same_line_brace = if !generics.where_clause.predicates.is_empty() || result.contains('\\n') {\n+    // If the generics are not parameterized then generics.span.hi() == 0,\n+    // so we use span.lo(), which is the position after `struct Foo`.\n+    let span_end_before_where = if !generics.params.is_empty() {\n+        generics.span.hi()\n+    } else {\n+        span.lo()\n+    };\n+    let (same_line_brace, missed_comments) = if !generics.where_clause.predicates.is_empty() {\n         let budget = context.budget(last_line_used_width(&result, offset.width()));\n         let mut option = WhereClauseOption::snuggled(&result);\n         if brace_pos == BracePos::None {\n             option.suppress_comma = true;\n         }\n-        // If the generics are not parameterized then generics.span.hi() == 0,\n-        // so we use span.lo(), which is the position after `struct Foo`.\n-        let span_end_before_where = if !generics.params.is_empty() {\n-            generics.span.hi()\n-        } else {\n-            span.lo()\n-        };\n         let where_clause_str = rewrite_where_clause(\n             context,\n             &generics.where_clause,\n@@ -2737,15 +2734,41 @@ fn format_generics(\n             false,\n         )?;\n         result.push_str(&where_clause_str);\n-        brace_pos == BracePos::ForceSameLine\n-            || brace_style == BraceStyle::PreferSameLine\n-            || (generics.where_clause.predicates.is_empty()\n-                && trimmed_last_line_width(&result) == 1)\n+        (\n+            brace_pos == BracePos::ForceSameLine || brace_style == BraceStyle::PreferSameLine,\n+            // missed comments are taken care of in #rewrite_where_clause\n+            None,\n+        )\n     } else {\n-        brace_pos == BracePos::ForceSameLine\n-            || trimmed_last_line_width(&result) == 1\n-            || brace_style != BraceStyle::AlwaysNextLine\n+        (\n+            brace_pos == BracePos::ForceSameLine\n+                || (result.contains('\\n') && brace_style == BraceStyle::PreferSameLine\n+                    || brace_style != BraceStyle::AlwaysNextLine)\n+                || trimmed_last_line_width(&result) == 1,\n+            rewrite_missing_comment(\n+                mk_sp(\n+                    span_end_before_where,\n+                    if brace_pos == BracePos::None {\n+                        span.hi()\n+                    } else {\n+                        context.snippet_provider.span_before(span, \"{\")\n+                    },\n+                ),\n+                shape,\n+                context,\n+            ),\n+        )\n     };\n+    // add missing comments\n+    let missed_line_comments = missed_comments\n+        .filter(|missed_comments| !missed_comments.is_empty())\n+        .map_or(false, |missed_comments| {\n+            let is_block = is_last_comment_block(&missed_comments);\n+            let sep = if is_block { \" \" } else { \"\\n\" };\n+            result.push_str(sep);\n+            result.push_str(&missed_comments);\n+            !is_block\n+        });\n     if brace_pos == BracePos::None {\n         return Some(result);\n     }\n@@ -2761,7 +2784,7 @@ fn format_generics(\n         // 2 = ` {`\n         2\n     };\n-    let forbid_same_line_brace = overhead > remaining_budget;\n+    let forbid_same_line_brace = missed_line_comments || overhead > remaining_budget;\n     if !forbid_same_line_brace && same_line_brace {\n         result.push(' ');\n     } else {"}, {"sha": "0f459571d422e3d4ebc6a0b30e9f4b45d54dda8e", "filename": "src/missed_spans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf383c4610adbe2da38190185bcb7544410f2fce/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf383c4610adbe2da38190185bcb7544410f2fce/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=bf383c4610adbe2da38190185bcb7544410f2fce", "patch": "@@ -2,7 +2,7 @@ use std::borrow::Cow;\n \n use syntax::source_map::{BytePos, Pos, Span};\n \n-use crate::comment::{rewrite_comment, CodeCharKind, CommentCodeSlices};\n+use crate::comment::{is_last_comment_block, rewrite_comment, CodeCharKind, CommentCodeSlices};\n use crate::config::file_lines::FileLines;\n use crate::config::{EmitMode, FileName};\n use crate::shape::{Indent, Shape};\n@@ -288,7 +288,7 @@ impl<'a> FmtVisitor<'a> {\n                 .next()\n             {\n                 Some('\\n') | Some('\\r') => {\n-                    if !subslice.trim_end().ends_with(\"*/\") {\n+                    if !is_last_comment_block(subslice) {\n                         self.push_str(\"\\n\");\n                     }\n                 }"}, {"sha": "de78e736483f5a4574f891b0498d28bce3711f14", "filename": "tests/target/issue-1096.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/bf383c4610adbe2da38190185bcb7544410f2fce/tests%2Ftarget%2Fissue-1096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf383c4610adbe2da38190185bcb7544410f2fce/tests%2Ftarget%2Fissue-1096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1096.rs?ref=bf383c4610adbe2da38190185bcb7544410f2fce", "patch": "@@ -0,0 +1,71 @@\n+struct StructA<T> /* comment 1 */ {\n+    t: T,\n+}\n+\n+struct StructB<T> /* comment 2 */;\n+\n+struct StructC /* comment 3 */;\n+\n+struct StructD /* comment 4 */ {\n+    t: usize,\n+}\n+\n+struct StructE<T>\n+/* comment 5 */\n+where\n+    T: Clone,\n+{\n+    t: usize,\n+}\n+\n+struct StructF\n+/* comment 6 */\n+where\n+    T: Clone,\n+{\n+    t: usize,\n+}\n+\n+struct StructG<T>\n+/* comment 7 */\n+// why a line comment??\n+{\n+    t: T,\n+}\n+\n+struct StructH<T>\n+/* comment 8 */\n+// why a line comment??\n+where\n+    T: Clone,\n+{\n+    t: T,\n+}\n+\n+enum EnumA<T> /* comment 8 */ {\n+    Field(T),\n+}\n+\n+enum EnumB /* comment 9 */ {\n+    Field,\n+}\n+\n+// Issue 2781\n+struct StructX1<T>\n+// where\n+//     T: Clone\n+{\n+    inner: String,\n+}\n+\n+struct StructX2<\n+    T,\n+    U: Iterator<Item = String>,\n+    V: Iterator<Item = String>,\n+    W: Iterator<Item = String>,\n+>\n+// where\n+//     T: Clone\n+{\n+    inner: String,\n+}"}]}