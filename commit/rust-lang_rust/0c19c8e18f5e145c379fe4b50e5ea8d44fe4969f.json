{"sha": "0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMTljOGUxOGY1ZTE0NWMzNzlmZTRiNTBlNWVhOGQ0NGZlNDk2OWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-04T02:03:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-04T02:04:18Z"}, "message": "Parse layer and effect annotations.", "tree": {"sha": "36406ee1b92328d4bba26c9b68d89af338deba73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36406ee1b92328d4bba26c9b68d89af338deba73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "html_url": "https://github.com/rust-lang/rust/commit/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd3af9bb58f19323c584417d359d83742ba889f", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd3af9bb58f19323c584417d359d83742ba889f", "html_url": "https://github.com/rust-lang/rust/commit/afd3af9bb58f19323c584417d359d83742ba889f"}], "stats": {"total": 92, "additions": 77, "deletions": 15}, "files": [{"sha": "f4bfc7a2f48d389d246cc7fee7f76b8eacf3f79a", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "patch": "@@ -55,6 +55,18 @@ tag mutability {\n     imm;\n }\n \n+tag layer {\n+    layer_value;\n+    layer_state;\n+    layer_gc;\n+}\n+\n+tag effect {\n+    eff_pure;\n+    eff_impure;\n+    eff_unsafe;\n+}\n+\n tag binop {\n     add;\n     sub;\n@@ -85,6 +97,11 @@ tag unop {\n     neg;\n }\n \n+tag mode {\n+    val;\n+    alias;\n+}\n+\n type stmt = spanned[stmt_];\n tag stmt_ {\n     stmt_decl(@decl);\n@@ -146,7 +163,9 @@ tag lit_ {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // type structure in middle/typeck.rs as well.\n+\n type ty_field = rec(ident ident, @ty ty);\n+type ty_arg = rec(mode mode, @ty ty);\n type ty = spanned[ty_];\n tag ty_ {\n     ty_nil;\n@@ -160,18 +179,14 @@ tag ty_ {\n     ty_vec(@ty);\n     ty_tup(vec[@ty]);\n     ty_rec(vec[ty_field]);\n-    ty_fn(vec[rec(mode mode, @ty ty)], @ty);        // TODO: effect\n+    ty_fn(vec[ty_arg], @ty);        // TODO: effect\n     ty_path(path, option.t[def]);\n     ty_mutable(@ty);\n }\n \n-tag mode {\n-    val;\n-    alias;\n-}\n-\n type arg = rec(mode mode, @ty ty, ident ident, def_id id);\n-type _fn = rec(vec[arg] inputs,\n+type _fn = rec(effect effect,\n+               vec[arg] inputs,\n                @ty output,\n                block body);\n "}, {"sha": "ba0631ed6173527252ba8837866d26babe4138b9", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "patch": "@@ -1161,7 +1161,7 @@ impure fn parse_ty_params(parser p) -> vec[ast.ty_param] {\n     ret ty_params;\n }\n \n-impure fn parse_item_fn(parser p) -> @ast.item {\n+impure fn parse_item_fn(parser p, ast.effect eff) -> @ast.item {\n     auto lo = p.get_span();\n     expect(p, token.FN);\n     auto id = parse_ident(p);\n@@ -1187,7 +1187,8 @@ impure fn parse_item_fn(parser p) -> @ast.item {\n \n     auto body = parse_block(p);\n \n-    let ast._fn f = rec(inputs = inputs.node,\n+    let ast._fn f = rec(effect = eff,\n+                        inputs = inputs.node,\n                         output = output,\n                         body = body);\n \n@@ -1305,18 +1306,61 @@ impure fn parse_item_tag(parser p) -> @ast.item {\n     ret @spanned(lo, hi, item);\n }\n \n+impure fn parse_layer(parser p) -> ast.layer {\n+    alt (p.peek()) {\n+        case (token.STATE) {\n+            p.bump();\n+            ret ast.layer_state;\n+        }\n+        case (token.GC) {\n+            p.bump();\n+            ret ast.layer_gc;\n+        }\n+        case (_) {\n+            ret ast.layer_value;\n+        }\n+    }\n+    fail;\n+}\n+\n+\n+impure fn parse_effect(parser p) -> ast.effect {\n+    alt (p.peek()) {\n+        case (token.IMPURE) {\n+            p.bump();\n+            ret ast.eff_impure;\n+        }\n+        case (token.UNSAFE) {\n+            p.bump();\n+            ret ast.eff_unsafe;\n+        }\n+        case (_) {\n+            ret ast.eff_pure;\n+        }\n+    }\n+    fail;\n+}\n+\n impure fn parse_item(parser p) -> @ast.item {\n+    let ast.effect eff = parse_effect(p);\n+    let ast.layer lyr = parse_layer(p);\n+\n     alt (p.peek()) {\n         case (token.FN) {\n-            ret parse_item_fn(p);\n+            check (lyr == ast.layer_value);\n+            ret parse_item_fn(p, eff);\n         }\n         case (token.MOD) {\n+            check (eff == ast.eff_pure);\n+            check (lyr == ast.layer_value);\n             ret parse_item_mod(p);\n         }\n         case (token.TYPE) {\n+            check (eff == ast.eff_pure);\n             ret parse_item_type(p);\n         }\n         case (token.TAG) {\n+            check (eff == ast.eff_pure);\n             ret parse_item_tag(p);\n         }\n         case (?t) {"}, {"sha": "60c5f44ba67f1f463cf450497fbb2aca90b462aa", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "patch": "@@ -185,7 +185,8 @@ type ast_fold[ENV] =\n      (fn(&ENV e, &span sp,\n          &ast.block_) -> block)                   fold_block,\n \n-     (fn(&ENV e, vec[arg] inputs,\n+     (fn(&ENV e, ast.effect effect,\n+         vec[arg] inputs,\n          @ty output, &block body) -> ast._fn)     fold_fn,\n \n      (fn(&ENV e, &ast._mod m) -> ast._mod)        fold_mod,\n@@ -570,7 +571,7 @@ fn fold_fn[ENV](&ENV env, ast_fold[ENV] fld, &ast._fn f) -> ast._fn {\n     auto output = fold_ty[ENV](env, fld, f.output);\n     auto body = fold_block[ENV](env, fld, f.body);\n \n-    ret fld.fold_fn(env, inputs, output, body);\n+    ret fld.fold_fn(env, f.effect, inputs, output, body);\n }\n \n fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n@@ -891,10 +892,11 @@ fn identity_fold_block[ENV](&ENV e, &span sp, &ast.block_ blk) -> block {\n }\n \n fn identity_fold_fn[ENV](&ENV e,\n+                         ast.effect effect,\n                          vec[arg] inputs,\n                          @ast.ty output,\n                          &block body) -> ast._fn {\n-    ret rec(inputs=inputs, output=output, body=body);\n+    ret rec(effect=effect, inputs=inputs, output=output, body=body);\n }\n \n fn identity_fold_mod[ENV](&ENV e, &ast._mod m) -> ast._mod {\n@@ -1007,7 +1009,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n-         fold_fn = bind identity_fold_fn[ENV](_,_,_,_),\n+         fold_fn = bind identity_fold_fn[ENV](_,_,_,_,_),\n          fold_mod = bind identity_fold_mod[ENV](_,_),\n          fold_crate = bind identity_fold_crate[ENV](_,_,_),\n "}, {"sha": "208c395a3d57e193e3780292bcd0eec949d1a691", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=0c19c8e18f5e145c379fe4b50e5ea8d44fe4969f", "patch": "@@ -1643,7 +1643,8 @@ fn check_fn(&@crate_ctxt ccx, &span sp, ast.ident ident, &ast._fn f,\n     auto block_t = check_block(fcx, f.body);\n     auto block_wb = writeback(fcx, block_t);\n \n-    auto fn_t = rec(inputs=f.inputs, output=f.output, body=block_wb);\n+    auto fn_t = rec(effect=f.effect, inputs=f.inputs, output=f.output,\n+                    body=block_wb);\n     auto item = ast.item_fn(ident, fn_t, ty_params, id, fn_ann);\n     ret @fold.respan[ast.item_](sp, item);\n }"}]}