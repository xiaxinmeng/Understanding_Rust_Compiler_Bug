{"sha": "c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NGY1Mzk5ZTRkZDJmOWQ1NWUxMDdkMzY1ZDZmZTk4ZjY0OTFkYzk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-09T18:52:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-06-17T16:06:59Z"}, "message": "alloc: Split apart the global `alloc` feature", "tree": {"sha": "fe557c5b621a33775c55189ea9fe9210c4d2b9a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe557c5b621a33775c55189ea9fe9210c4d2b9a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "html_url": "https://github.com/rust-lang/rust/commit/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c14d86fd3ff3ba2d01a6e859290b30e74081313b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c14d86fd3ff3ba2d01a6e859290b30e74081313b", "html_url": "https://github.com/rust-lang/rust/commit/c14d86fd3ff3ba2d01a6e859290b30e74081313b"}], "stats": {"total": 88, "additions": 53, "deletions": 35}, "files": [{"sha": "e0d459d877fd22ac2fc5f550c7094b2dd8bd3a6d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -134,7 +134,7 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n /// Weak pointers will not keep the data inside of the `Arc` alive, and can be\n /// used to break cycles between `Arc` pointers.\n #[unsafe_no_drop_flag]\n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"arc_weak\",\n            reason = \"Weak pointers may not belong in this module.\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange name to try to avoid interfering with\n@@ -198,7 +198,7 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n-    #[unstable(feature = \"alloc\",\n+    #[unstable(feature = \"arc_weak\",\n                reason = \"Weak pointers may not belong in this module.\")]\n     pub fn downgrade(&self) -> Weak<T> {\n         // See the clone() impl for why this is relaxed\n@@ -236,12 +236,12 @@ impl<T: ?Sized> Arc<T> {\n \n /// Get the number of weak references to this value.\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"arc_extras\")]\n pub fn weak_count<T: ?Sized>(this: &Arc<T>) -> usize { this.inner().weak.load(SeqCst) - 1 }\n \n /// Get the number of strong references to this value.\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"arc_extras\")]\n pub fn strong_count<T: ?Sized>(this: &Arc<T>) -> usize { this.inner().strong.load(SeqCst) }\n \n \n@@ -271,7 +271,7 @@ pub fn strong_count<T: ?Sized>(this: &Arc<T>) -> usize { this.inner().strong.loa\n /// # }\n /// ```\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"arc_extras\")]\n pub unsafe fn get_mut<T: ?Sized>(this: &mut Arc<T>) -> Option<&mut T> {\n     // FIXME(#24880) potential race with upgraded weak pointers here\n     if strong_count(this) == 1 && weak_count(this) == 0 {\n@@ -352,7 +352,7 @@ impl<T: Clone> Arc<T> {\n     /// # }\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"alloc\")]\n+    #[unstable(feature = \"arc_extras\")]\n     pub unsafe fn make_unique(&mut self) -> &mut T {\n         // FIXME(#24880) potential race with upgraded weak pointers here\n         //\n@@ -438,7 +438,7 @@ impl<T: ?Sized> Drop for Arc<T> {\n     }\n }\n \n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"arc_weak\",\n            reason = \"Weak pointers may not belong in this module.\")]\n impl<T: ?Sized> Weak<T> {\n     /// Upgrades a weak reference to a strong reference.\n@@ -479,7 +479,7 @@ impl<T: ?Sized> Weak<T> {\n     }\n }\n \n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"arc_weak\",\n            reason = \"Weak pointers may not belong in this module.\")]\n impl<T: ?Sized> Clone for Weak<T> {\n     /// Makes a clone of the `Weak<T>`."}, {"sha": "ffc4186dee8d9d673e59794188276377bcbf12ce", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -81,7 +81,7 @@ use core::raw::{TraitObject};\n /// }\n /// ```\n #[lang = \"exchange_heap\"]\n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"box_heap\",\n            reason = \"may be renamed; uncertain about custom allocator design\")]\n pub const HEAP: () = ();\n \n@@ -121,7 +121,7 @@ impl<T : ?Sized> Box<T> {\n     /// Function is unsafe, because improper use of this function may\n     /// lead to memory problems like double-free, for example if the\n     /// function is called twice on the same raw pointer.\n-    #[unstable(feature = \"alloc\",\n+    #[unstable(feature = \"box_raw\",\n                reason = \"may be renamed or moved out of Box scope\")]\n     #[inline]\n     pub unsafe fn from_raw(raw: *mut T) -> Self {\n@@ -146,7 +146,7 @@ impl<T : ?Sized> Box<T> {\n /// let raw = boxed::into_raw(seventeen);\n /// let boxed_again = unsafe { Box::from_raw(raw) };\n /// ```\n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"box_raw\",\n            reason = \"may be renamed\")]\n #[inline]\n pub fn into_raw<T : ?Sized>(b: Box<T>) -> *mut T {"}, {"sha": "14797d7f4b54d20cee3bd5a164162dae18806513", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -8,6 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![unstable(feature = \"heap_api\",\n+            reason = \"the precise API and guarantees it provides may be tweaked \\\n+                      slightly, especially to possibly take into account the \\\n+                      types being stored to make room for a future \\\n+                      tracing garbage collector\")]\n+\n use core::{isize, usize};\n \n #[inline(always)]\n@@ -94,7 +100,6 @@ pub fn usable_size(size: usize, align: usize) -> usize {\n ///\n /// These statistics may be inconsistent if other threads use the allocator\n /// during the call.\n-#[unstable(feature = \"alloc\")]\n pub fn stats_print() {\n     imp::stats_print();\n }"}, {"sha": "e297d4cbf7762ab8f62e04a31bdd91ac87bcd8ab", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -59,9 +59,11 @@\n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]\n #![crate_name = \"alloc\"]\n-#![unstable(feature = \"alloc\")]\n-#![staged_api]\n #![crate_type = \"rlib\"]\n+#![staged_api]\n+#![unstable(feature = \"alloc\",\n+            reason = \"this library is unlikely to be stabilized in its current \\\n+                      form or name\")]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n@@ -86,11 +88,11 @@\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(unsize)]\n+\n #![cfg_attr(test, feature(test, alloc, rustc_private))]\n #![cfg_attr(all(not(feature = \"external_funcs\"), not(feature = \"external_crate\")),\n             feature(libc))]\n \n-\n #[macro_use]\n extern crate core;\n \n@@ -124,6 +126,7 @@ pub mod rc;\n /// Common out-of-memory routine\n #[cold]\n #[inline(never)]\n+#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\")]\n pub fn oom() -> ! {\n     // FIXME(#14674): This really needs to do something other than just abort\n     //                here, but any printing done must be *guaranteed* to not\n@@ -144,4 +147,5 @@ pub fn oom() -> ! {\n //                to get linked in to libstd successfully (the linker won't\n //                optimize it out).\n #[doc(hidden)]\n+#[unstable(feature = \"issue_14344_fixme\")]\n pub fn fixme_14344_be_sure_to_link_to_collections() {}"}, {"sha": "04dde7a07f9200098e3ec5963ddf38d6bbef705c", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -236,7 +236,7 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// let weak_five = five.downgrade();\n     /// ```\n-    #[unstable(feature = \"alloc\",\n+    #[unstable(feature = \"rc_weak\",\n                reason = \"Weak pointers may not belong in this module\")]\n     pub fn downgrade(&self) -> Weak<T> {\n         self.inc_weak();\n@@ -246,12 +246,12 @@ impl<T: ?Sized> Rc<T> {\n \n /// Get the number of weak references to this value.\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"rc_extras\")]\n pub fn weak_count<T: ?Sized>(this: &Rc<T>) -> usize { this.weak() - 1 }\n \n /// Get the number of strong references to this value.\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"rc_extras\")]\n pub fn strong_count<T: ?Sized>(this: &Rc<T>) -> usize { this.strong() }\n \n /// Returns true if there are no other `Rc` or `Weak<T>` values that share the\n@@ -269,7 +269,7 @@ pub fn strong_count<T: ?Sized>(this: &Rc<T>) -> usize { this.strong() }\n /// rc::is_unique(&five);\n /// ```\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"rc_extras\")]\n pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n     weak_count(rc) == 0 && strong_count(rc) == 1\n }\n@@ -292,7 +292,7 @@ pub fn is_unique<T>(rc: &Rc<T>) -> bool {\n /// assert_eq!(rc::try_unwrap(x), Err(Rc::new(4)));\n /// ```\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"rc_extras\")]\n pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n     if is_unique(&rc) {\n         unsafe {\n@@ -327,7 +327,7 @@ pub fn try_unwrap<T>(rc: Rc<T>) -> Result<T, Rc<T>> {\n /// assert!(rc::get_mut(&mut x).is_none());\n /// ```\n #[inline]\n-#[unstable(feature = \"alloc\")]\n+#[unstable(feature = \"rc_extras\")]\n pub fn get_mut<T>(rc: &mut Rc<T>) -> Option<&mut T> {\n     if is_unique(rc) {\n         let inner = unsafe { &mut **rc._ptr };\n@@ -354,7 +354,7 @@ impl<T: Clone> Rc<T> {\n     /// let mut_five = five.make_unique();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"alloc\")]\n+    #[unstable(feature = \"rc_extras\")]\n     pub fn make_unique(&mut self) -> &mut T {\n         if !is_unique(self) {\n             *self = Rc::new((**self).clone())\n@@ -652,7 +652,7 @@ impl<T> fmt::Pointer for Rc<T> {\n ///\n /// See the [module level documentation](./index.html) for more.\n #[unsafe_no_drop_flag]\n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"rc_weak\",\n            reason = \"Weak pointers may not belong in this module.\")]\n pub struct Weak<T: ?Sized> {\n     // FIXME #12808: strange names to try to avoid interfering with\n@@ -663,7 +663,7 @@ pub struct Weak<T: ?Sized> {\n impl<T: ?Sized> !marker::Send for Weak<T> {}\n impl<T: ?Sized> !marker::Sync for Weak<T> {}\n \n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"rc_weak\",\n            reason = \"Weak pointers may not belong in this module.\")]\n impl<T: ?Sized> Weak<T> {\n \n@@ -741,7 +741,7 @@ impl<T: ?Sized> Drop for Weak<T> {\n     }\n }\n \n-#[unstable(feature = \"alloc\",\n+#[unstable(feature = \"rc_weak\",\n            reason = \"Weak pointers may not belong in this module.\")]\n impl<T: ?Sized> Clone for Weak<T> {\n "}, {"sha": "109ad8a942c8467a33fdc24694f2e1abec877eb6", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -33,10 +33,11 @@\n #![feature(alloc)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n+#![feature(heap_api)]\n+#![feature(oom)]\n #![feature(ptr_as_ref)]\n #![feature(raw)]\n #![feature(staged_api)]\n-#![feature(unboxed_closures)]\n #![cfg_attr(test, feature(test))]\n \n extern crate alloc;"}, {"sha": "ecf5bace3825aad5018fe7a2f28bdcf32c4f6545", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -29,20 +29,23 @@\n \n #![feature(alloc)]\n #![feature(box_patterns)]\n+#![feature(box_raw)]\n #![feature(box_syntax)]\n #![feature(copy_lifetime)]\n #![feature(core)]\n #![feature(core_intrinsics)]\n #![feature(core_prelude)]\n #![feature(core_slice_ext)]\n #![feature(core_str_ext)]\n+#![feature(heap_api)]\n #![feature(iter_cmp)]\n #![feature(iter_idx)]\n #![feature(iter_order)]\n #![feature(iter_product)]\n #![feature(iter_sum)]\n #![feature(lang_items)]\n #![feature(num_bits_bytes)]\n+#![feature(oom)]\n #![feature(pattern)]\n #![feature(ptr_as_ref)]\n #![feature(raw)]"}, {"sha": "0238bf1f4be18f40c0172bd5194047941b2d2824", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -169,10 +169,11 @@\n        html_playground_url = \"http://play.rust-lang.org/\")]\n #![deny(missing_docs)]\n \n-#![feature(alloc)]\n-#![feature(staged_api)]\n+#![feature(box_raw)]\n #![feature(box_syntax)]\n+#![feature(const_fn)]\n #![feature(iter_cmp)]\n+#![feature(staged_api)]\n #![feature(std_misc)]\n \n use std::boxed;"}, {"sha": "0c0fd3f93dcdde2ce27998aee6362127f597d0a0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -19,9 +19,9 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(alloc)]\n #![feature(associated_consts)]\n #![feature(collections)]\n+#![feature(rc_weak)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "d0fadd6565c3b67270736815e2c011b60fdd9302", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -25,7 +25,6 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![feature(alloc)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(collections)]\n@@ -40,6 +39,7 @@\n #![feature(path_relative_from)]\n #![feature(path_relative_from)]\n #![feature(quote)]\n+#![feature(rc_weak)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "75044881223969568fc443bcd3592779ba3920b2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -107,6 +107,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(associated_consts)]\n #![feature(borrow_state)]\n+#![feature(box_raw)]\n #![feature(box_syntax)]\n #![feature(char_internals)]\n #![feature(collections)]\n@@ -117,6 +118,7 @@\n #![feature(core_prelude)]\n #![feature(core_simd)]\n #![feature(fnbox)]\n+#![feature(heap_api)]\n #![feature(int_error_internals)]\n #![feature(into_cow)]\n #![feature(iter_order)]\n@@ -126,6 +128,7 @@\n #![feature(macro_reexport)]\n #![feature(no_std)]\n #![feature(num_bits_bytes)]\n+#![feature(oom)]\n #![feature(optin_builtin_traits)]\n #![feature(rand)]\n #![feature(raw)]"}, {"sha": "6ee6f8c2e24bd7daa39ce32ca90d47897c9b50c2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c44f5399e4dd2f9d55e107d365d6fe98f6491dc9/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c44f5399e4dd2f9d55e107d365d6fe98f6491dc9", "patch": "@@ -37,14 +37,15 @@\n #![feature(asm)]\n #![feature(box_syntax)]\n #![feature(collections)]\n-#![feature(core)]\n+#![feature(duration)]\n+#![feature(duration_span)]\n+#![feature(fnbox)]\n+#![feature(iter_cmp)]\n+#![feature(libc)]\n #![feature(rustc_private)]\n+#![feature(set_stdio)]\n #![feature(staged_api)]\n #![feature(std_misc)]\n-#![feature(libc)]\n-#![feature(set_stdio)]\n-#![feature(duration)]\n-#![feature(duration_span)]\n \n extern crate getopts;\n extern crate serialize;"}]}