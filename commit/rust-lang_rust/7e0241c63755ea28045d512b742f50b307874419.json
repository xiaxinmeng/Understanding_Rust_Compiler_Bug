{"sha": "7e0241c63755ea28045d512b742f50b307874419", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMDI0MWM2Mzc1NWVhMjgwNDVkNTEyYjc0MmY1MGIzMDc4NzQ0MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-13T13:47:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-13T13:47:02Z"}, "message": "Auto merge of #81666 - hyd-dev:miri-windows-test-fail, r=Mark-Simulacrum\n\nDon't release Miri if its tests only failed on Windows\n\nExtends #66053 to Windows, so the released Miri won't be broken if its tests only fail on Windows.\n\nRelevant Zulip thread: https://rust-lang.zulipchat.com/#narrow/stream/269128-miri/topic/Miri.20is.20still.20available.20in.20rustup.20today.3F", "tree": {"sha": "cf4fe6673c765ba8ebca80c0152d10494e3b50f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf4fe6673c765ba8ebca80c0152d10494e3b50f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0241c63755ea28045d512b742f50b307874419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0241c63755ea28045d512b742f50b307874419", "html_url": "https://github.com/rust-lang/rust/commit/7e0241c63755ea28045d512b742f50b307874419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0241c63755ea28045d512b742f50b307874419/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3158857297417566824631a85c4cb3c0615ec6c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3158857297417566824631a85c4cb3c0615ec6c2", "html_url": "https://github.com/rust-lang/rust/commit/3158857297417566824631a85c4cb3c0615ec6c2"}, {"sha": "f87afe54b87586a80b9a2b8e0193c933ef763e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f87afe54b87586a80b9a2b8e0193c933ef763e6d", "html_url": "https://github.com/rust-lang/rust/commit/f87afe54b87586a80b9a2b8e0193c933ef763e6d"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "13b312afa37e1c5c58dbbe24ae928d62e61253ba", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0241c63755ea28045d512b742f50b307874419/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7e0241c63755ea28045d512b742f50b307874419/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=7e0241c63755ea28045d512b742f50b307874419", "patch": "@@ -349,6 +349,7 @@ jobs:\n             env:\n               SCRIPT: src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows\n               RUST_CONFIGURE_ARGS: \"--build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json\"\n+              DEPLOY_TOOLSTATES_JSON: toolstates-windows.json\n             os: windows-latest-xl\n           - name: i686-mingw-1\n             env:"}, {"sha": "5b9b7795c1bdb08c66a472b543b776fcf1e637b0", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e0241c63755ea28045d512b742f50b307874419/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7e0241c63755ea28045d512b742f50b307874419/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=7e0241c63755ea28045d512b742f50b307874419", "patch": "@@ -531,6 +531,7 @@ jobs:\n             env:\n               SCRIPT: src/ci/docker/host-x86_64/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstate/toolstates.json windows\n               RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstate/toolstates.json\n+              DEPLOY_TOOLSTATES_JSON: toolstates-windows.json\n             <<: *job-windows-xl\n \n           # 32/64-bit MinGW builds."}, {"sha": "d7c2fb8c8b893b740c81fb3d066df59e443a0906", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e0241c63755ea28045d512b742f50b307874419/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0241c63755ea28045d512b742f50b307874419/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=7e0241c63755ea28045d512b742f50b307874419", "patch": "@@ -254,24 +254,26 @@ impl Builder {\n         t!(self.checksums.store_cache());\n     }\n \n-    /// If a tool does not pass its tests, don't ship it.\n+    /// If a tool does not pass its tests on *any* of Linux and Windows, don't ship\n+    /// it on *all* targets, because tools like Miri can \"cross-run\" programs for\n+    /// different targets, for example, run a program for `x86_64-pc-windows-msvc`\n+    /// on `x86_64-unknown-linux-gnu`.\n     /// Right now, we do this only for Miri.\n     fn check_toolstate(&mut self) {\n-        let toolstates: Option<HashMap<String, String>> =\n-            File::open(self.input.join(\"toolstates-linux.json\"))\n+        for file in &[\"toolstates-linux.json\", \"toolstates-windows.json\"] {\n+            let toolstates: Option<HashMap<String, String>> = File::open(self.input.join(file))\n                 .ok()\n                 .and_then(|f| serde_json::from_reader(&f).ok());\n-        let toolstates = toolstates.unwrap_or_else(|| {\n-            println!(\n-                \"WARNING: `toolstates-linux.json` missing/malformed; \\\n-                assuming all tools failed\"\n-            );\n-            HashMap::default() // Use empty map if anything went wrong.\n-        });\n-        // Mark some tools as missing based on toolstate.\n-        if toolstates.get(\"miri\").map(|s| &*s as &str) != Some(\"test-pass\") {\n-            println!(\"Miri tests are not passing, removing component\");\n-            self.versions.disable_version(&PkgType::Miri);\n+            let toolstates = toolstates.unwrap_or_else(|| {\n+                println!(\"WARNING: `{}` missing/malformed; assuming all tools failed\", file);\n+                HashMap::default() // Use empty map if anything went wrong.\n+            });\n+            // Mark some tools as missing based on toolstate.\n+            if toolstates.get(\"miri\").map(|s| &*s as &str) != Some(\"test-pass\") {\n+                println!(\"Miri tests are not passing, removing component\");\n+                self.versions.disable_version(&PkgType::Miri);\n+                break;\n+            }\n         }\n     }\n "}]}