{"sha": "1326d424c96479864e80b25e24994d7cd5085920", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjZkNDI0Yzk2NDc5ODY0ZTgwYjI1ZTI0OTk0ZDdjZDUwODU5MjA=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-02T23:32:34Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-04-03T00:35:51Z"}, "message": "Add more tests for alt expressions", "tree": {"sha": "376f880acd662ec52f8624cc65a02f3f8eb8e82a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/376f880acd662ec52f8624cc65a02f3f8eb8e82a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1326d424c96479864e80b25e24994d7cd5085920", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1326d424c96479864e80b25e24994d7cd5085920", "html_url": "https://github.com/rust-lang/rust/commit/1326d424c96479864e80b25e24994d7cd5085920", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1326d424c96479864e80b25e24994d7cd5085920/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99901bdbc435fdf6768b392c171204dd7281162b", "url": "https://api.github.com/repos/rust-lang/rust/commits/99901bdbc435fdf6768b392c171204dd7281162b", "html_url": "https://github.com/rust-lang/rust/commit/99901bdbc435fdf6768b392c171204dd7281162b"}], "stats": {"total": 113, "additions": 111, "deletions": 2}, "files": [{"sha": "2e7846f36c337ffa1bd2aa72a419d165a5135229", "filename": "src/test/run-pass/expr-alt-box.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1326d424c96479864e80b25e24994d7cd5085920/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1326d424c96479864e80b25e24994d7cd5085920/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs?ref=1326d424c96479864e80b25e24994d7cd5085920", "patch": "@@ -0,0 +1,27 @@\n+// xfail-boot\n+// -*- rust -*-\n+\n+// Tests for alt as expressions resulting in boxed types\n+\n+fn test_box() {\n+  auto res = alt (true) {\n+    case (true) {\n+      @100\n+    }\n+  };\n+  check (*res == 100);\n+}\n+\n+fn test_str() {\n+  auto res = alt (true) {\n+    case (true) {\n+      \"happy\"\n+    }\n+  };\n+  check (res == \"happy\");\n+}\n+\n+fn main() {\n+  test_box();\n+  test_str();\n+}\n\\ No newline at end of file"}, {"sha": "31406969d87c40fd5a92def4223b7ef525f8e3cf", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1326d424c96479864e80b25e24994d7cd5085920/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1326d424c96479864e80b25e24994d7cd5085920/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=1326d424c96479864e80b25e24994d7cd5085920", "patch": "@@ -0,0 +1,35 @@\n+// xfail-boot\n+// -*- rust -*-\n+\n+// Tests for alt as expressions resulting in structural types\n+\n+fn test_rec() {\n+  auto res = alt (true) {\n+    case (true) {\n+      rec(i = 100)\n+    }\n+  };\n+  check (res == rec(i = 100));\n+}\n+\n+fn test_tag() {\n+  tag mood {\n+    happy;\n+    sad;\n+  }\n+\n+  auto res = alt (true) {\n+    case (true) {\n+      happy\n+    }\n+    case (false) {\n+      sad\n+    }\n+  };\n+  check (res == happy);\n+}\n+\n+fn main() {\n+  test_rec();\n+  test_tag();\n+}\n\\ No newline at end of file"}, {"sha": "4c10a7d9e292697dc007ec40146180fe3c2f6479", "filename": "src/test/run-pass/expr-alt.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1326d424c96479864e80b25e24994d7cd5085920/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1326d424c96479864e80b25e24994d7cd5085920/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt.rs?ref=1326d424c96479864e80b25e24994d7cd5085920", "patch": "@@ -3,7 +3,7 @@\n \n // Tests for using alt as an expression\n \n-fn test() {\n+fn test_basic() {\n   let bool res = alt (true) {\n     case (true) {\n       true\n@@ -25,6 +25,53 @@ fn test() {\n   check (res);\n }\n \n+fn test_inferrence() {\n+  auto res = alt (true) {\n+    case (true) {\n+      true\n+    }\n+    case (false) {\n+      false\n+    }\n+  };\n+  check (res);\n+}\n+\n+fn test_alt_as_alt_head() {\n+  // Yeah, this is kind of confusing ...\n+  auto res = alt(alt (false) { case (true) { true } case (false) {false} }) {\n+    case (true) {\n+      false\n+    }\n+    case (false) {\n+      true\n+    }\n+  };\n+  check (res);\n+}\n+\n+fn test_alt_as_block_result() {\n+  auto res = alt (false) {\n+    case (true) {\n+      false\n+    }\n+    case (false) {\n+      alt (true) {\n+        case (true) {\n+          true\n+        }\n+        case (false) {\n+          false\n+        }\n+      }\n+    }\n+  };\n+  check (res);\n+}\n+\n fn main() {\n-  test();\n+  test_basic();\n+  test_inferrence();\n+  test_alt_as_alt_head();\n+  test_alt_as_block_result();\n }"}]}