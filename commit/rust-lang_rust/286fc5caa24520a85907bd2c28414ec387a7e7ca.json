{"sha": "286fc5caa24520a85907bd2c28414ec387a7e7ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NmZjNWNhYTI0NTIwYTg1OTA3YmQyYzI4NDE0ZWMzODdhN2U3Y2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-23T19:22:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-27T16:12:49Z"}, "message": "allow Machine to hook into foreign statics; remove unused HasMemory trait", "tree": {"sha": "e351a600b68604c7fed66331f49dace32431b863", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e351a600b68604c7fed66331f49dace32431b863"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/286fc5caa24520a85907bd2c28414ec387a7e7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/286fc5caa24520a85907bd2c28414ec387a7e7ca", "html_url": "https://github.com/rust-lang/rust/commit/286fc5caa24520a85907bd2c28414ec387a7e7ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/286fc5caa24520a85907bd2c28414ec387a7e7ca/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2592b20347ad49b99dd1eda58260e73ac553ed83", "url": "https://api.github.com/repos/rust-lang/rust/commits/2592b20347ad49b99dd1eda58260e73ac553ed83", "html_url": "https://github.com/rust-lang/rust/commit/2592b20347ad49b99dd1eda58260e73ac553ed83"}], "stats": {"total": 198, "additions": 72, "deletions": 126}, "files": [{"sha": "9840fb2cfd7dbc04358870bef91eddbd899d89aa", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 9, "deletions": 52, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=286fc5caa24520a85907bd2c28414ec387a7e7ca", "patch": "@@ -11,10 +11,10 @@\n use std::fmt;\n use std::error::Error;\n \n-use rustc::hir;\n+use rustc::hir::{self, def_id::DefId};\n use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n-use rustc::ty::{self, ParamEnv, TyCtxt, Instance, query::TyCtxtAt};\n+use rustc::ty::{self, TyCtxt, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -325,6 +325,13 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n         }\n     }\n \n+    fn find_foreign_static<'a>(\n+        _tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n+        _def_id: DefId,\n+    ) -> EvalResult<'tcx, &'tcx Allocation> {\n+        err!(ReadForeignStatic)\n+    }\n+\n     fn box_alloc<'a>(\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         _dest: PlaceTy<'tcx>,\n@@ -333,16 +340,6 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n             ConstEvalError::NeedsRfc(\"heap allocations via `box` keyword\".to_string()).into(),\n         )\n     }\n-\n-    fn global_item_with_linkage<'a>(\n-        _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        _instance: ty::Instance<'tcx>,\n-        _mutability: Mutability,\n-    ) -> EvalResult<'tcx> {\n-        Err(\n-            ConstEvalError::NotConst(\"statics with `linkage` attribute\".to_string()).into(),\n-        )\n-    }\n }\n \n /// Project to a field of a (variant of a) const\n@@ -481,43 +478,3 @@ pub fn const_eval_provider<'a, 'tcx>(\n         err.into()\n     })\n }\n-\n-\n-/// Helper function to obtain the global (tcx) allocation for a static\n-pub fn static_alloc<'a, 'tcx>(\n-    tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n-    id: AllocId,\n-) -> EvalResult<'tcx, &'tcx Allocation> {\n-    let alloc = tcx.alloc_map.lock().get(id);\n-    let def_id = match alloc {\n-        Some(AllocType::Memory(mem)) => {\n-            return Ok(mem)\n-        }\n-        Some(AllocType::Function(..)) => {\n-            return err!(DerefFunctionPointer)\n-        }\n-        Some(AllocType::Static(did)) => {\n-            did\n-        }\n-        None =>\n-            return err!(DanglingPointerDeref),\n-    };\n-    // We got a \"lazy\" static that has not been computed yet, do some work\n-    trace!(\"static_alloc: Need to compute {:?}\", def_id);\n-    if tcx.is_foreign_item(def_id) {\n-        return err!(ReadForeignStatic);\n-    }\n-    let instance = Instance::mono(tcx.tcx, def_id);\n-    let gid = GlobalId {\n-        instance,\n-        promoted: None,\n-    };\n-    tcx.const_eval(ParamEnv::reveal_all().and(gid)).map_err(|err| {\n-        // no need to report anything, the const_eval call takes care of that for statics\n-        assert!(tcx.is_static(def_id).is_some());\n-        EvalErrorKind::ReferencedConstant(err).into()\n-    }).map(|val| {\n-        // FIXME We got our static (will be a ByRef), now we make a *copy*?!?\n-        tcx.const_to_allocation(val)\n-    })\n-}"}, {"sha": "b3e7370b66b59bf3d786355fd0dab875725e3db1", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=286fc5caa24520a85907bd2c28414ec387a7e7ca", "patch": "@@ -14,12 +14,12 @@\n \n use std::hash::Hash;\n \n+use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{AllocId, Allocation, EvalResult, Scalar};\n-use super::{EvalContext, PlaceTy, OpTy, Memory};\n-\n use rustc::mir;\n-use rustc::ty::{self, layout::TyLayout};\n-use syntax::ast::Mutability;\n+use rustc::ty::{self, layout::TyLayout, query::TyCtxtAt};\n+\n+use super::{EvalContext, PlaceTy, OpTy, Memory};\n \n /// Used by the machine to tell if a certain allocation is for static memory\n pub trait IsStatic {\n@@ -62,6 +62,12 @@ pub trait Machine<'mir, 'tcx>: Clone + Eq + Hash {\n         dest: PlaceTy<'tcx>,\n     ) -> EvalResult<'tcx>;\n \n+    /// Called for read access to a foreign static item.\n+    fn find_foreign_static<'a>(\n+        tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n+        def_id: DefId,\n+    ) -> EvalResult<'tcx, &'tcx Allocation>;\n+\n     /// Called for all binary operations except on float types.\n     ///\n     /// Returns `None` if the operation should be handled by the integer\n@@ -91,13 +97,6 @@ pub trait Machine<'mir, 'tcx>: Clone + Eq + Hash {\n         dest: PlaceTy<'tcx>,\n     ) -> EvalResult<'tcx>;\n \n-    /// Called when trying to access a global declared with a `linkage` attribute\n-    fn global_item_with_linkage<'a>(\n-        ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n-        instance: ty::Instance<'tcx>,\n-        mutability: Mutability,\n-    ) -> EvalResult<'tcx>;\n-\n     /// Execute a validation operation\n     fn validation_op<'a>(\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,"}, {"sha": "e570468a467f818222d07787d6e607d3a2d03e40", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 52, "deletions": 61, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=286fc5caa24520a85907bd2c28414ec387a7e7ca", "patch": "@@ -20,21 +20,16 @@ use std::collections::VecDeque;\n use std::hash::{Hash, Hasher};\n use std::ptr;\n \n-use rustc::ty::Instance;\n-use rustc::ty::query::TyCtxtAt;\n-use rustc::ty::layout::{self, Align, TargetDataLayout, Size};\n-use rustc::mir::interpret::{Pointer, AllocId, Allocation, ScalarMaybeUndef,\n+use rustc::ty::{self, Instance, query::TyCtxtAt};\n+use rustc::ty::layout::{self, Align, TargetDataLayout, Size, HasDataLayout};\n+use rustc::mir::interpret::{Pointer, AllocId, Allocation, ScalarMaybeUndef, GlobalId,\n                             EvalResult, Scalar, EvalErrorKind, AllocType, truncate};\n pub use rustc::mir::interpret::{write_target_uint, read_target_uint};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap, FxHasher};\n \n use syntax::ast::Mutability;\n \n-use super::{EvalContext, Machine, IsStatic, static_alloc};\n-\n-////////////////////////////////////////////////////////////////////////////////\n-// Allocations and pointers\n-////////////////////////////////////////////////////////////////////////////////\n+use super::{Machine, IsStatic};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone, Hash)]\n pub enum MemoryKind<T> {\n@@ -53,10 +48,6 @@ impl<T: IsStatic> IsStatic for MemoryKind<T> {\n     }\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n-// Top-level interpreter memory\n-////////////////////////////////////////////////////////////////////////////////\n-\n #[derive(Clone)]\n pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// Additional data required by the Machine\n@@ -70,6 +61,13 @@ pub struct Memory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     pub tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n }\n \n+impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> HasDataLayout for &'a Memory<'a, 'mir, 'tcx, M> {\n+    #[inline]\n+    fn data_layout(&self) -> &TargetDataLayout {\n+        &self.tcx.data_layout\n+    }\n+}\n+\n impl<'a, 'mir, 'tcx, M> Eq for Memory<'a, 'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>,\n           'tcx: 'a + 'mir,\n@@ -122,6 +120,45 @@ impl<'a, 'mir, 'tcx, M> Hash for Memory<'a, 'mir, 'tcx, M>\n     }\n }\n \n+/// Helper function to obtain the global (tcx) allocation for a static\n+fn const_eval_static<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>>(\n+    tcx: TyCtxtAt<'a, 'tcx, 'tcx>,\n+    id: AllocId\n+) -> EvalResult<'tcx, &'tcx Allocation> {\n+    let alloc = tcx.alloc_map.lock().get(id);\n+    let def_id = match alloc {\n+        Some(AllocType::Memory(mem)) => {\n+            return Ok(mem)\n+        }\n+        Some(AllocType::Function(..)) => {\n+            return err!(DerefFunctionPointer)\n+        }\n+        Some(AllocType::Static(did)) => {\n+            did\n+        }\n+        None =>\n+            return err!(DanglingPointerDeref),\n+    };\n+    // We got a \"lazy\" static that has not been computed yet, do some work\n+    trace!(\"static_alloc: Need to compute {:?}\", def_id);\n+    if tcx.is_foreign_item(def_id) {\n+        return M::find_foreign_static(tcx, def_id);\n+    }\n+    let instance = Instance::mono(tcx.tcx, def_id);\n+    let gid = GlobalId {\n+        instance,\n+        promoted: None,\n+    };\n+    tcx.const_eval(ty::ParamEnv::reveal_all().and(gid)).map_err(|err| {\n+        // no need to report anything, the const_eval call takes care of that for statics\n+        assert!(tcx.is_static(def_id).is_some());\n+        EvalErrorKind::ReferencedConstant(err).into()\n+    }).map(|val| {\n+        // FIXME We got our static (will be a ByRef), now we make a *copy*?!?\n+        tcx.const_to_allocation(val)\n+    })\n+}\n+\n impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n     pub fn new(tcx: TyCtxtAt<'a, 'tcx, 'tcx>, data: M::MemoryData) -> Self {\n         Memory {\n@@ -322,7 +359,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Some(alloc) => Ok(&alloc.1),\n             // No need to make any copies, just provide read access to the global static\n             // memory in tcx.\n-            None => static_alloc(self.tcx, id),\n+            None => const_eval_static::<M>(self.tcx, id),\n         }\n     }\n \n@@ -588,7 +625,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         id: AllocId,\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> EvalResult<'tcx> {\n-        let alloc = static_alloc(self.tcx, id)?;\n+        let alloc = const_eval_static::<M>(self.tcx, id)?;\n         if alloc.mutability == Mutability::Immutable {\n             return err!(ModifiedConstantMemory);\n         }\n@@ -980,49 +1017,3 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         Ok(())\n     }\n }\n-\n-////////////////////////////////////////////////////////////////////////////////\n-// Unaligned accesses\n-////////////////////////////////////////////////////////////////////////////////\n-\n-pub trait HasMemory<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n-    fn memory_mut(&mut self) -> &mut Memory<'a, 'mir, 'tcx, M>;\n-    fn memory(&self) -> &Memory<'a, 'mir, 'tcx, M>;\n-}\n-\n-impl<'a, 'mir, 'tcx, M> HasMemory<'a, 'mir, 'tcx, M> for Memory<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>\n-{\n-    #[inline]\n-    fn memory_mut(&mut self) -> &mut Memory<'a, 'mir, 'tcx, M> {\n-        self\n-    }\n-\n-    #[inline]\n-    fn memory(&self) -> &Memory<'a, 'mir, 'tcx, M> {\n-        self\n-    }\n-}\n-\n-impl<'a, 'mir, 'tcx, M> HasMemory<'a, 'mir, 'tcx, M> for EvalContext<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>\n-{\n-    #[inline]\n-    fn memory_mut(&mut self) -> &mut Memory<'a, 'mir, 'tcx, M> {\n-        &mut self.memory\n-    }\n-\n-    #[inline]\n-    fn memory(&self) -> &Memory<'a, 'mir, 'tcx, M> {\n-        &self.memory\n-    }\n-}\n-\n-impl<'a, 'mir, 'tcx, M> layout::HasDataLayout for &'a Memory<'a, 'mir, 'tcx, M>\n-    where M: Machine<'mir, 'tcx>\n-{\n-    #[inline]\n-    fn data_layout(&self) -> &TargetDataLayout {\n-        &self.tcx.data_layout\n-    }\n-}"}, {"sha": "8559686fa415d259f5b45c14c1317729f5a9dfc4", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/286fc5caa24520a85907bd2c28414ec387a7e7ca/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=286fc5caa24520a85907bd2c28414ec387a7e7ca", "patch": "@@ -30,7 +30,7 @@ pub use self::eval_context::{\n \n pub use self::place::{Place, PlaceExtra, PlaceTy, MemPlace, MPlaceTy};\n \n-pub use self::memory::{Memory, MemoryKind, HasMemory};\n+pub use self::memory::{Memory, MemoryKind};\n \n pub use self::const_eval::{\n     eval_promoted,\n@@ -42,7 +42,6 @@ pub use self::const_eval::{\n     const_field,\n     const_variant_index,\n     op_to_const,\n-    static_alloc,\n };\n \n pub use self::machine::{Machine, IsStatic};"}]}