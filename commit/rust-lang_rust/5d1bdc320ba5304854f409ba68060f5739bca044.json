{"sha": "5d1bdc320ba5304854f409ba68060f5739bca044", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMWJkYzMyMGJhNTMwNDg1NGY0MDliYTY4MDYwZjU3MzliY2EwNDQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-07-05T06:04:07Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-07-11T15:01:01Z"}, "message": "Revise the `const_nonmatching` flag with more info about author's intent.\n\nIn particular, I want authors of deriving modes to understand what\nthey are opting into (namely quadratic code size or worse) when they\nselect NonMatchesExplode.", "tree": {"sha": "d78792d061994803dba9454a134a59829f8cf0fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d78792d061994803dba9454a134a59829f8cf0fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d1bdc320ba5304854f409ba68060f5739bca044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d1bdc320ba5304854f409ba68060f5739bca044", "html_url": "https://github.com/rust-lang/rust/commit/5d1bdc320ba5304854f409ba68060f5739bca044", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d1bdc320ba5304854f409ba68060f5739bca044/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9a77d03ddc0b949eabee4b1f25edcf3b9e1251c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a77d03ddc0b949eabee4b1f25edcf3b9e1251c", "html_url": "https://github.com/rust-lang/rust/commit/c9a77d03ddc0b949eabee4b1f25edcf3b9e1251c"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "1a296906cc2f90218b1c8987b817a459a08078d7", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -39,7 +39,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self,\n                 attributes: attrs,\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|c, s, sub| {\n                     cs_clone(\"Clone\", c, s, sub)\n                 }),"}, {"sha": "2eaeb0df7fbb702014652620d7ba0ec2090a882d", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -45,7 +45,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n                 attributes: attrs,\n-                const_nonmatching: true,\n+                on_nonmatching: NonMatchesCollapse,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     $f(a, b, c)\n                 })"}, {"sha": "c8edf5c4157afa15a88b2c4b67c45ce3398b5b41", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -35,7 +35,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n                 attributes: attrs,\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchesExplode,\n                 combine_substructure: combine_substructure(|cx, span, substr| {\n                     cs_op($op, $equal, cx, span, substr)\n                 })\n@@ -59,7 +59,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n         args: vec![borrowed_self()],\n         ret_ty: ret_ty,\n         attributes: attrs,\n-        const_nonmatching: false,\n+        on_nonmatching: NonMatchesExplode,\n         combine_substructure: combine_substructure(|cx, span, substr| {\n             cs_partial_cmp(cx, span, substr)\n         })"}, {"sha": "09aa24f9bfb5d608d0eb38800e3a0e4e9979f2ef", "filename": "src/libsyntax/ext/deriving/cmp/totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotaleq.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -57,7 +57,7 @@ pub fn expand_deriving_totaleq(cx: &mut ExtCtxt,\n                 args: vec!(),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                const_nonmatching: true,\n+                on_nonmatching: NonMatchesCollapse,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     cs_total_eq_assert(a, b, c)\n                 })"}, {"sha": "24785a026d18eafb9386b380e27044bdfa90ee9c", "filename": "src/libsyntax/ext/deriving/cmp/totalord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ftotalord.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -41,7 +41,7 @@ pub fn expand_deriving_totalord(cx: &mut ExtCtxt,\n                 args: vec!(borrowed_self()),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"cmp\", \"Ordering\"))),\n                 attributes: attrs,\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchesExplode,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     cs_cmp(a, b, c)\n                 }),"}, {"sha": "3422819c4fa95dc2bf4655dcf6d98c22a4b883aa", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -54,7 +54,7 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                           vec!(box Self,\n                                                box Literal(Path::new_local(\"__E\"))), true)),\n                 attributes: Vec::new(),\n-                const_nonmatching: true,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     decodable_substructure(a, b, c)\n                 }),"}, {"sha": "e6fffaa2a3f0b4d2f56a5a97f9d8bd026a0b73c1", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -39,7 +39,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self,\n                 attributes: attrs,\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     default_substructure(a, b, c)\n                 })"}, {"sha": "21a4c5fdaaf71590a588b58569e0c618fc7f0044", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -121,7 +121,7 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                                 box Literal(Path::new_local(\"__E\"))),\n                                            true)),\n                 attributes: Vec::new(),\n-                const_nonmatching: true,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     encodable_substructure(a, b, c)\n                 }),"}, {"sha": "eebf55033b374209ec46a871bf1384cbcb36c178", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -39,7 +39,7 @@\n //!   same variant of the enum (e.g. `Some(1)`, `Some(3)` and `Some(4)`)\n //! - `EnumNonMatching` when `Self` is an enum and the arguments are not\n //!   the same variant (e.g. `None`, `Some(1)` and `None`). If\n-//!   `const_nonmatching` is true, this will contain an empty list.\n+//!   `on_nonmatching == NonMatchesCollapse`, this will contain an empty list.\n //! - `StaticEnum` and `StaticStruct` for static methods, where the type\n //!   being derived upon is either an enum or struct respectively. (Any\n //!   argument with type Self is just grouped among the non-self\n@@ -135,7 +135,7 @@\n //!               }])\n //! ~~~\n //!\n-//! For `C1 {x}` and `C1 {x}`,\n+//! For `C1 {x}` and `C1 {x}` ,\n //!\n //! ~~~text\n //! EnumMatching(1, <ast::Variant for C1>,\n@@ -172,6 +172,7 @@\n //!                                   (<ident of C1>, <span of C1>,\n //!                                    Named(~[(<ident of x>, <span of x>)]))])\n //! ~~~\n+//!\n \n use std::cell::RefCell;\n use std::gc::{Gc, GC};\n@@ -212,6 +213,12 @@ pub struct TraitDef<'a> {\n     pub methods: Vec<MethodDef<'a>>,\n }\n \n+#[deriving(PartialEq, Eq)]\n+pub enum HandleNonMatchingEnums {\n+    NonMatchesCollapse, // handle all non-matches via one `_ => ..` clause\n+    NonMatchesExplode, // handle via n^k cases for n variants and k self-args\n+    NonMatchHandlingIrrelevant, // cannot encounter two enums of Self type\n+}\n \n pub struct MethodDef<'a> {\n     /// name of the method\n@@ -232,9 +239,17 @@ pub struct MethodDef<'a> {\n \n     pub attributes: Vec<ast::Attribute>,\n \n-    /// if the value of the nonmatching enums is independent of the\n-    /// actual enum variants, i.e. can use _ => .. match.\n-    pub const_nonmatching: bool,\n+    /// How to handle nonmatching enums; `NonMatchesCollapse`\n+    /// indicates value is independent of the actual enum variants,\n+    /// i.e. can use _ => .. match.\n+    ///\n+    /// Note that if this is `NonMatchesExplode`, then deriving will\n+    /// generate `Omega(n^k)` code, where `n` is the number of\n+    /// variants and `k` is the number of arguments of `Self` type for\n+    /// the method (including the `self` argument, if any).  Strive to\n+    /// avoid use of `NonMatchesExplode`, to avoid generating\n+    /// quadratic amounts of code (#15375) or worse.\n+    pub on_nonmatching: HandleNonMatchingEnums,\n \n     pub combine_substructure: RefCell<CombineSubstructureFunc<'a>>,\n }\n@@ -758,7 +773,7 @@ impl<'a> MethodDef<'a> {\n         A2(int)\n     }\n \n-    // is equivalent to (with const_nonmatching == false)\n+    // is equivalent to (with on_nonmatching == NonMatchesExplode)\n \n     impl PartialEq for A {\n         fn eq(&self, __arg_1: &A) {\n@@ -893,7 +908,9 @@ impl<'a> MethodDef<'a> {\n \n             // the code for nonmatching variants only matters when\n             // we've seen at least one other variant already\n-            if self.const_nonmatching && match_count > 0 {\n+            assert!(match_count == 0 ||\n+                    self.on_nonmatching != NonMatchHandlingIrrelevant);\n+            if self.on_nonmatching == NonMatchesCollapse && match_count > 0 {\n                 // make a matching-variant match, and a _ match.\n                 let index = match matching {\n                     Some(i) => i,"}, {"sha": "253f8de8cdf4de8f6987734444c3f92d42aca5b7", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -54,7 +54,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                 args: vec!(Ptr(box Literal(args), Borrowed(None, MutMutable))),\n                 ret_ty: nil_ty(),\n                 attributes: attrs,\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     hash_substructure(a, b, c)\n                 })"}, {"sha": "b1071e106d985eb421e7b038bdc52b3d68caf63f", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -45,7 +45,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs.clone(),\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|c, s, sub| {\n                     cs_from(\"i64\", c, s, sub)\n                 }),\n@@ -62,7 +62,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                            true)),\n                 // #[inline] liable to cause code-bloat\n                 attributes: attrs,\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|c, s, sub| {\n                     cs_from(\"u64\", c, s, sub)\n                 }),"}, {"sha": "f286ddc6f3093a5d650059c6ceee42c22a352806", "filename": "src/libsyntax/ext/deriving/rand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Frand.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -45,7 +45,7 @@ pub fn expand_deriving_rand(cx: &mut ExtCtxt,\n                 ),\n                 ret_ty: Self,\n                 attributes: Vec::new(),\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     rand_substructure(a, b, c)\n                 })"}, {"sha": "722541d7dae53761488e2eb211b65b487bb5e24f", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -45,7 +45,7 @@ pub fn expand_deriving_show(cx: &mut ExtCtxt,\n                 args: vec!(fmtr),\n                 ret_ty: Literal(Path::new(vec!(\"std\", \"fmt\", \"Result\"))),\n                 attributes: Vec::new(),\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     show_substructure(a, b, c)\n                 })"}, {"sha": "1d4f4c78fc044caf32764c35f33e952407141ab3", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d1bdc320ba5304854f409ba68060f5739bca044/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=5d1bdc320ba5304854f409ba68060f5739bca044", "patch": "@@ -39,7 +39,7 @@ pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Self,\n                 attributes: attrs.clone(),\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|a, b, c| {\n                     zero_substructure(a, b, c)\n                 })\n@@ -51,7 +51,7 @@ pub fn expand_deriving_zero(cx: &mut ExtCtxt,\n                 args: Vec::new(),\n                 ret_ty: Literal(Path::new(vec!(\"bool\"))),\n                 attributes: attrs,\n-                const_nonmatching: false,\n+                on_nonmatching: NonMatchHandlingIrrelevant,\n                 combine_substructure: combine_substructure(|cx, span, substr| {\n                     cs_and(|cx, span, _, _| cx.span_bug(span,\n                                                         \"Non-matching enum \\"}]}