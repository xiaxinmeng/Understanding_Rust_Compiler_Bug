{"sha": "29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YmY2YmVkOWI2NTY5MWE1NGE3MmY4M2M2Y2YzYmU0MGFlNTU4ZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-09T12:07:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-09T12:07:18Z"}, "message": "More consistent naming", "tree": {"sha": "fb1959f5babd4d553f70d3b9b5dfccf0b81c6a0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb1959f5babd4d553f70d3b9b5dfccf0b81c6a0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "html_url": "https://github.com/rust-lang/rust/commit/29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f247140817c9cbd9009085c9f9ccedb4f6a718f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f247140817c9cbd9009085c9f9ccedb4f6a718f", "html_url": "https://github.com/rust-lang/rust/commit/2f247140817c9cbd9009085c9f9ccedb4f6a718f"}], "stats": {"total": 157, "additions": 88, "deletions": 69}, "files": [{"sha": "82625516c211a2f05724867a7ab9dc67c98be44a", "filename": "crates/assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "renamed", "additions": 58, "deletions": 45, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "patch": "@@ -16,24 +16,31 @@ use crate::{\n     AssistId, AssistKind,\n };\n \n-// Assist: add_custom_impl\n+// Assist: replace_derive_with_manual_impl\n //\n-// Adds impl block for derived trait.\n+// Converts a `derive` impl into a manual one.\n //\n // ```\n+// # trait Debug { fn fmt(&self, f: &mut Formatter) -> Result<()>; }\n // #[derive(Deb<|>ug, Display)]\n // struct S;\n // ```\n // ->\n // ```\n+// # trait Debug { fn fmt(&self, f: &mut Formatter) -> Result<()>; }\n // #[derive(Display)]\n // struct S;\n //\n // impl Debug for S {\n-//     $0\n+//     fn fmt(&self, f: &mut Formatter) -> Result<()> {\n+//         ${0:todo!()}\n+//     }\n // }\n // ```\n-pub(crate) fn add_custom_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn replace_derive_with_manual_impl(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+) -> Option<()> {\n     let attr = ctx.find_node_at_offset::<ast::Attr>()?;\n \n     let attr_name = attr\n@@ -90,43 +97,49 @@ fn add_assist(\n ) -> Option<()> {\n     let target = attr.syntax().text_range();\n     let input = attr.token_tree()?;\n-    let label = format!(\"Add custom impl `{}` for `{}`\", trait_path, annotated_name);\n+    let label = format!(\"Convert to manual  `impl {} for {}`\", trait_path, annotated_name);\n     let trait_name = trait_path.segment().and_then(|seg| seg.name_ref())?;\n \n-    acc.add(AssistId(\"add_custom_impl\", AssistKind::Refactor), label, target, |builder| {\n-        let impl_def_with_items =\n-            impl_def_from_trait(&ctx.sema, annotated_name, trait_, trait_path);\n-        update_attribute(builder, &input, &trait_name, &attr);\n-        match (ctx.config.snippet_cap, impl_def_with_items) {\n-            (None, _) => builder.insert(\n-                insert_pos,\n-                format!(\"\\n\\nimpl {} for {} {{\\n\\n}}\", trait_path, annotated_name),\n-            ),\n-            (Some(cap), None) => builder.insert_snippet(\n-                cap,\n-                insert_pos,\n-                format!(\"\\n\\nimpl {} for {} {{\\n    $0\\n}}\", trait_path, annotated_name),\n-            ),\n-            (Some(cap), Some((impl_def, first_assoc_item))) => {\n-                let mut cursor = Cursor::Before(first_assoc_item.syntax());\n-                let placeholder;\n-                if let ast::AssocItem::Fn(ref func) = first_assoc_item {\n-                    if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast) {\n-                        if m.syntax().text() == \"todo!()\" {\n-                            placeholder = m;\n-                            cursor = Cursor::Replace(placeholder.syntax());\n+    acc.add(\n+        AssistId(\"replace_derive_with_manual_impl\", AssistKind::Refactor),\n+        label,\n+        target,\n+        |builder| {\n+            let impl_def_with_items =\n+                impl_def_from_trait(&ctx.sema, annotated_name, trait_, trait_path);\n+            update_attribute(builder, &input, &trait_name, &attr);\n+            match (ctx.config.snippet_cap, impl_def_with_items) {\n+                (None, _) => builder.insert(\n+                    insert_pos,\n+                    format!(\"\\n\\nimpl {} for {} {{\\n\\n}}\", trait_path, annotated_name),\n+                ),\n+                (Some(cap), None) => builder.insert_snippet(\n+                    cap,\n+                    insert_pos,\n+                    format!(\"\\n\\nimpl {} for {} {{\\n    $0\\n}}\", trait_path, annotated_name),\n+                ),\n+                (Some(cap), Some((impl_def, first_assoc_item))) => {\n+                    let mut cursor = Cursor::Before(first_assoc_item.syntax());\n+                    let placeholder;\n+                    if let ast::AssocItem::Fn(ref func) = first_assoc_item {\n+                        if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast)\n+                        {\n+                            if m.syntax().text() == \"todo!()\" {\n+                                placeholder = m;\n+                                cursor = Cursor::Replace(placeholder.syntax());\n+                            }\n                         }\n                     }\n-                }\n \n-                builder.insert_snippet(\n-                    cap,\n-                    insert_pos,\n-                    format!(\"\\n\\n{}\", render_snippet(cap, impl_def.syntax(), cursor)),\n-                )\n-            }\n-        };\n-    })\n+                    builder.insert_snippet(\n+                        cap,\n+                        insert_pos,\n+                        format!(\"\\n\\n{}\", render_snippet(cap, impl_def.syntax(), cursor)),\n+                    )\n+                }\n+            };\n+        },\n+    )\n }\n \n fn impl_def_from_trait(\n@@ -192,7 +205,7 @@ mod tests {\n     #[test]\n     fn add_custom_impl_debug() {\n         check_assist(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n mod fmt {\n     pub struct Error;\n@@ -233,7 +246,7 @@ impl fmt::Debug for Foo {\n     #[test]\n     fn add_custom_impl_all() {\n         check_assist(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n mod foo {\n     pub trait Bar {\n@@ -282,7 +295,7 @@ impl foo::Bar for Foo {\n     #[test]\n     fn add_custom_impl_for_unique_input() {\n         check_assist(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n #[derive(Debu<|>g)]\n struct Foo {\n@@ -304,7 +317,7 @@ impl Debug for Foo {\n     #[test]\n     fn add_custom_impl_for_with_visibility_modifier() {\n         check_assist(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n #[derive(Debug<|>)]\n pub struct Foo {\n@@ -326,7 +339,7 @@ impl Debug for Foo {\n     #[test]\n     fn add_custom_impl_when_multiple_inputs() {\n         check_assist(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n #[derive(Display, Debug<|>, Serialize)]\n struct Foo {}\n@@ -345,7 +358,7 @@ impl Debug for Foo {\n     #[test]\n     fn test_ignore_derive_macro_without_input() {\n         check_assist_not_applicable(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n #[derive(<|>)]\n struct Foo {}\n@@ -356,15 +369,15 @@ struct Foo {}\n     #[test]\n     fn test_ignore_if_cursor_on_param() {\n         check_assist_not_applicable(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n #[derive<|>(Debug)]\n struct Foo {}\n             \",\n         );\n \n         check_assist_not_applicable(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n #[derive(Debug)<|>]\n struct Foo {}\n@@ -375,7 +388,7 @@ struct Foo {}\n     #[test]\n     fn test_ignore_if_not_derive() {\n         check_assist_not_applicable(\n-            add_custom_impl,\n+            replace_derive_with_manual_impl,\n             \"\n #[allow(non_camel_<|>case_types)]\n struct Foo {}", "previous_filename": "crates/assists/src/handlers/add_custom_impl.rs"}, {"sha": "92f764145438f553bef4f598eaccd7766dea5461", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "patch": "@@ -120,7 +120,6 @@ mod handlers {\n \n     pub(crate) type Handler = fn(&mut Assists, &AssistContext) -> Option<()>;\n \n-    mod add_custom_impl;\n     mod add_explicit_type;\n     mod add_missing_impl_members;\n     mod add_turbo_fish;\n@@ -157,6 +156,7 @@ mod handlers {\n     mod remove_mut;\n     mod remove_unused_param;\n     mod reorder_fields;\n+    mod replace_derive_with_manual_impl;\n     mod replace_if_let_with_match;\n     mod replace_impl_trait_with_generic;\n     mod replace_let_with_if_let;\n@@ -169,7 +169,6 @@ mod handlers {\n     pub(crate) fn all() -> &'static [Handler] {\n         &[\n             // These are alphabetic for the foolish consistency\n-            add_custom_impl::add_custom_impl,\n             add_explicit_type::add_explicit_type,\n             add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n@@ -208,6 +207,7 @@ mod handlers {\n             remove_mut::remove_mut,\n             remove_unused_param::remove_unused_param,\n             reorder_fields::reorder_fields,\n+            replace_derive_with_manual_impl::replace_derive_with_manual_impl,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,"}, {"sha": "629788f0551600d85c3dd4cbd3a255c28318b658", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "patch": "@@ -2,25 +2,6 @@\n \n use super::check_doc_test;\n \n-#[test]\n-fn doctest_add_custom_impl() {\n-    check_doc_test(\n-        \"add_custom_impl\",\n-        r#####\"\n-#[derive(Deb<|>ug, Display)]\n-struct S;\n-\"#####,\n-        r#####\"\n-#[derive(Display)]\n-struct S;\n-\n-impl Debug for S {\n-    $0\n-}\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_add_explicit_type() {\n     check_doc_test(\n@@ -831,6 +812,29 @@ const test: Foo = Foo {foo: 1, bar: 0}\n     )\n }\n \n+#[test]\n+fn doctest_replace_derive_with_manual_impl() {\n+    check_doc_test(\n+        \"replace_derive_with_manual_impl\",\n+        r#####\"\n+trait Debug { fn fmt(&self, f: &mut Formatter) -> Result<()>; }\n+#[derive(Deb<|>ug, Display)]\n+struct S;\n+\"#####,\n+        r#####\"\n+trait Debug { fn fmt(&self, f: &mut Formatter) -> Result<()>; }\n+#[derive(Display)]\n+struct S;\n+\n+impl Debug for S {\n+    fn fmt(&self, f: &mut Formatter) -> Result<()> {\n+        ${0:todo!()}\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_replace_if_let_with_match() {\n     check_doc_test("}, {"sha": "99652e76b64658577d25a8677f3041a41ce19c05", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29bf6bed9b65691a54a72f83c6cf3be40ae558e8/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "patch": "@@ -214,9 +214,6 @@ fn check_todo(path: &Path, text: &str) {\n         // This file itself obviously needs to use todo (<- like this!).\n         \"tests/cli.rs\",\n         // Some of our assists generate `todo!()`.\n-        \"tests/generated.rs\",\n-        \"handlers/add_custom_impl.rs\",\n-        \"handlers/add_missing_impl_members.rs\",\n         \"handlers/add_turbo_fish.rs\",\n         \"handlers/generate_function.rs\",\n         // To support generating `todo!()` in assists, we have `expr_todo()` in\n@@ -229,6 +226,11 @@ fn check_todo(path: &Path, text: &str) {\n         return;\n     }\n     if text.contains(\"TODO\") || text.contains(\"TOOD\") || text.contains(\"todo!\") {\n+        // Generated by an assist\n+        if text.contains(\"${0:todo!()}\") {\n+            return;\n+        }\n+\n         panic!(\n             \"\\nTODO markers or todo! macros should not be committed to the master branch,\\n\\\n              use FIXME instead\\n\\"}]}