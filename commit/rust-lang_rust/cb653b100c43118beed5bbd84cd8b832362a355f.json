{"sha": "cb653b100c43118beed5bbd84cd8b832362a355f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjUzYjEwMGM0MzExOGJlZWQ1YmJkODRjZDhiODMyMzYyYTM1NWY=", "commit": {"author": {"name": "Teddy Katz", "email": "teddy.katz@gmail.com", "date": "2021-02-16T02:06:00Z"}, "committer": {"name": "Teddy Katz", "email": "teddy.katz@gmail.com", "date": "2021-02-16T05:55:46Z"}, "message": "Document that `assert!` format arguments are evaluated lazily\n\nIt can be useful to do some computation in `assert!` format arguments, in order to get better error messages. For example:\n\n```rust\nassert!(\n    some_condition,\n    \"The state is invalid. Details: {}\",\n    expensive_call_to_get_debugging_info(),\n);\n```\n\nIt seems like `assert!` only evaluates the format arguments if the assertion fails, which is useful but doesn't appear to be documented anywhere. This PR documents the behavior and adds some tests.", "tree": {"sha": "f757f0999c3f9622ef81bf8a07a228d48fc810f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f757f0999c3f9622ef81bf8a07a228d48fc810f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb653b100c43118beed5bbd84cd8b832362a355f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb653b100c43118beed5bbd84cd8b832362a355f", "html_url": "https://github.com/rust-lang/rust/commit/cb653b100c43118beed5bbd84cd8b832362a355f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb653b100c43118beed5bbd84cd8b832362a355f/comments", "author": {"login": "not-an-aardvark", "id": 11638619, "node_id": "MDQ6VXNlcjExNjM4NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/11638619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-an-aardvark", "html_url": "https://github.com/not-an-aardvark", "followers_url": "https://api.github.com/users/not-an-aardvark/followers", "following_url": "https://api.github.com/users/not-an-aardvark/following{/other_user}", "gists_url": "https://api.github.com/users/not-an-aardvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-an-aardvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-an-aardvark/subscriptions", "organizations_url": "https://api.github.com/users/not-an-aardvark/orgs", "repos_url": "https://api.github.com/users/not-an-aardvark/repos", "events_url": "https://api.github.com/users/not-an-aardvark/events{/privacy}", "received_events_url": "https://api.github.com/users/not-an-aardvark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "not-an-aardvark", "id": 11638619, "node_id": "MDQ6VXNlcjExNjM4NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/11638619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/not-an-aardvark", "html_url": "https://github.com/not-an-aardvark", "followers_url": "https://api.github.com/users/not-an-aardvark/followers", "following_url": "https://api.github.com/users/not-an-aardvark/following{/other_user}", "gists_url": "https://api.github.com/users/not-an-aardvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/not-an-aardvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/not-an-aardvark/subscriptions", "organizations_url": "https://api.github.com/users/not-an-aardvark/orgs", "repos_url": "https://api.github.com/users/not-an-aardvark/repos", "events_url": "https://api.github.com/users/not-an-aardvark/events{/privacy}", "received_events_url": "https://api.github.com/users/not-an-aardvark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1206f950ffb76c76e1b74a19ae33c2b7d949454", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1206f950ffb76c76e1b74a19ae33c2b7d949454", "html_url": "https://github.com/rust-lang/rust/commit/d1206f950ffb76c76e1b74a19ae33c2b7d949454"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "3b085b0459a4ff4d3290ed8b0c4031e612d1d110", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb653b100c43118beed5bbd84cd8b832362a355f/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb653b100c43118beed5bbd84cd8b832362a355f/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=cb653b100c43118beed5bbd84cd8b832362a355f", "patch": "@@ -1208,7 +1208,8 @@ pub(crate) mod builtin {\n     ///\n     /// This macro has a second form, where a custom panic message can\n     /// be provided with or without arguments for formatting. See [`std::fmt`]\n-    /// for syntax for this form.\n+    /// for syntax for this form. Expressions used as format arguments will only\n+    /// be evaluated if the assertion fails.\n     ///\n     /// [`std::fmt`]: ../std/fmt/index.html\n     ///"}, {"sha": "e0e2bd5a970e5cf11dd2415b6428d08788fe93f5", "filename": "src/test/ui/macros/assert-format-lazy.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb653b100c43118beed5bbd84cd8b832362a355f/src%2Ftest%2Fui%2Fmacros%2Fassert-format-lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb653b100c43118beed5bbd84cd8b832362a355f/src%2Ftest%2Fui%2Fmacros%2Fassert-format-lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-format-lazy.rs?ref=cb653b100c43118beed5bbd84cd8b832362a355f", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#[allow(unreachable_code)]\n+fn main() {\n+    assert!(true, \"Failed: {:?}\", panic!(\"assert! evaluated format expressions\"));\n+    debug_assert!(true, \"Failed: {:?}\", panic!(\"debug_assert! evaluated format expressions\"));\n+    assert_eq!(1, 1, \"Failed: {:?}\", panic!(\"assert_eq! evaluated format expressions\"));\n+    debug_assert_eq!(1, 1, \"Failed: {:?}\", panic!(\"debug_assert_eq! evaluated format expressions\"));\n+    assert_ne!(1, 2, \"Failed: {:?}\", panic!(\"assert_ne! evaluated format expressions\"));\n+    debug_assert_ne!(1, 2, \"Failed: {:?}\", panic!(\"debug_assert_ne! evaluated format expressions\"));\n+}"}]}