{"sha": "9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZjQ4ZDM3NTNlNDhlYzM3MTE2ZDAwY2QzZDRiZTEyYjVmNzFiNWE=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-15T15:45:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T09:52:28Z"}, "message": "Preparation for kind system overhaul\n\nThis goes before a snapshot, so that subsequenct patches can make the\ntransition without breaking the build. Disables kind checking pass, makes\nparser accept both new and old-style kind annotation.\n\nIssue #1177", "tree": {"sha": "28a5f1638ca628eb49355cf284e464b273144f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a5f1638ca628eb49355cf284e464b273144f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "html_url": "https://github.com/rust-lang/rust/commit/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eff7fae7b94b75ee075384b98955f45f56420a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eff7fae7b94b75ee075384b98955f45f56420a5f", "html_url": "https://github.com/rust-lang/rust/commit/eff7fae7b94b75ee075384b98955f45f56420a5f"}], "stats": {"total": 136, "additions": 78, "deletions": 58}, "files": [{"sha": "b5c32efe66f1ff41146772fce688ca2c838e1495", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -116,9 +116,9 @@ fn item_ty_param_kinds(item: ebml::doc) -> [ast::kind] {\n         while i < vi.val {\n             let k =\n                 alt dat[vi.next + i] as char {\n-                  'u' { ast::kind_unique }\n-                  's' { ast::kind_shared }\n-                  'p' { ast::kind_pinned }\n+                  's' { ast::kind_sendable }\n+                  'c' { ast::kind_copyable }\n+                  'a' { ast::kind_noncopyable }\n                 };\n             ks += [k];\n             i += 1u;"}, {"sha": "bee96f53f0d07a928c9d4541ffe5fbb320b1f2f0", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -170,9 +170,9 @@ fn encode_type_param_kinds(ebml_w: ebml::writer, tps: [ty_param]) {\n     ebml::write_vint(ebml_w.writer, vec::len::<ty_param>(tps));\n     for tp: ty_param in tps {\n         let c = alt ast_util::ty_param_kind(tp) {\n-          kind_unique. { 'u' }\n-          kind_shared. { 's' }\n-          kind_pinned. { 'p' }\n+          kind_sendable. { 's' }\n+          kind_copyable. { 'c' }\n+          kind_noncopyable. { 'a' }\n         };\n         ebml_w.writer.write([c as u8]);\n     }"}, {"sha": "5239e70a5a83929047e8786a4fbf7cebe863aa8e", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -204,9 +204,9 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n       'p' {\n         let k =\n             alt next(st) as char {\n-              'u' { kind_unique }\n-              's' { kind_shared }\n-              'p' { kind_pinned }\n+              's' { kind_sendable }\n+              'c' { kind_copyable }\n+              'a' { kind_noncopyable }\n               c {\n                 log_err \"unexpected char in encoded type param: \";\n                 log_err c;"}, {"sha": "89a1f3e05ffc82dcc92d2961fe3db527ef005d63", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -172,9 +172,9 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n       }\n       ty::ty_param(id, k) {\n         alt k {\n-          kind_unique. { w.write_str(\"pu\"); }\n-          kind_shared. { w.write_str(\"ps\"); }\n-          kind_pinned. { w.write_str(\"pp\"); }\n+          kind_sendable. { w.write_str(\"ps\"); }\n+          kind_copyable. { w.write_str(\"pc\"); }\n+          kind_noncopyable. { w.write_str(\"pa\"); }\n         }\n         w.write_str(uint::str(id));\n       }"}, {"sha": "c82792fddf0b1dfb1d185c03b45414f4bcddf4e5", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -84,15 +84,14 @@\n *\n */\n \n-import syntax::{ast, ast_util, visit, codemap};\n-import std::{vec, option};\n-import ast::{kind, kind_unique, kind_shared, kind_pinned};\n+import syntax::ast;\n+import ast::{kind, kind_sendable, kind_copyable, kind_noncopyable};\n \n fn kind_lteq(a: kind, b: kind) -> bool {\n     alt a {\n-      kind_pinned. { true }\n-      kind_shared. { b != kind_pinned }\n-      kind_unique. { b == kind_unique }\n+      kind_noncopyable. { true }\n+      kind_copyable. { b != kind_noncopyable }\n+      kind_sendable. { b == kind_sendable }\n     }\n }\n \n@@ -102,12 +101,12 @@ fn lower_kind(a: kind, b: kind) -> kind {\n \n fn kind_to_str(k: kind) -> str {\n     alt k {\n-      ast::kind_pinned. { \"pinned\" }\n-      ast::kind_unique. { \"unique\" }\n-      ast::kind_shared. { \"shared\" }\n+      ast::kind_sendable. { \"sendable\" }\n+      ast::kind_copyable. { \"copyable\" }\n+      ast::kind_noncopyable. { \"noncopyable\" }\n     }\n }\n-\n+/*\n fn type_and_kind(tcx: ty::ctxt, e: @ast::expr) ->\n    {ty: ty::t, kind: ast::kind} {\n     let t = ty::expr_ty(tcx, e);\n@@ -138,8 +137,8 @@ fn demand_kind(tcx: ty::ctxt, sp: codemap::span, t: ty::t,\n }\n \n fn need_shared_lhs_rhs(tcx: ty::ctxt, a: @ast::expr, b: @ast::expr, op: str) {\n-    need_expr_kind(tcx, a, ast::kind_shared, op + \" lhs\");\n-    need_expr_kind(tcx, b, ast::kind_shared, op + \" rhs\");\n+    need_expr_kind(tcx, a, ast::kind_copyable, op + \" lhs\");\n+    need_expr_kind(tcx, b, ast::kind_copyable, op + \" rhs\");\n }\n \n /*\n@@ -296,14 +295,15 @@ fn check_stmt(tcx: ty::ctxt, stmt: @ast::stmt) {\n       _ { /* fall through */ }\n     }\n }\n-\n-fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n-    let visit =\n+*/\n+fn check_crate(_tcx: ty::ctxt, _crate: @ast::crate) {\n+    // FIXME stubbed out\n+/*    let visit =\n         visit::mk_simple_visitor(@{visit_expr: bind check_expr(tcx, _),\n                                    visit_stmt: bind check_stmt(tcx, _)\n                                       with *visit::default_simple_visitor()});\n     visit::visit_crate(*crate, (), visit);\n-    tcx.sess.abort_if_errors();\n+    tcx.sess.abort_if_errors();*/\n }\n \n //"}, {"sha": "a039337f5cbe65a88ef6c1639d1812a45b530efc", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -993,7 +993,7 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       none. {/* fall through */ }\n     }\n \n-    let result = ast::kind_unique;\n+    let result = ast::kind_noncopyable;\n \n     // Insert a default in case we loop back on self recursively.\n     cx.kind_cache.insert(ty, result);\n@@ -1011,21 +1011,21 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       // FIXME: obj is broken for now, since we aren't asserting\n       // anything about its fields.\n       ty_obj(_) {\n-        result = kind_shared;\n+        result = kind_copyable;\n       }\n       // FIXME: the environment capture mode is not fully encoded\n       // here yet, leading to weirdness around closure.\n       ty_fn(proto, _, _, _, _) {\n         result = alt proto {\n-          ast::proto_block. { ast::kind_pinned }\n-          ast::proto_shared(_) { ast::kind_shared }\n-          ast::proto_bare. { ast::kind_unique }\n+          ast::proto_block. { ast::kind_noncopyable }\n+          ast::proto_shared(_) { ast::kind_copyable }\n+          ast::proto_bare. { ast::kind_sendable }\n         };\n       }\n       // Those with refcounts-to-inner raise pinned to shared,\n       // lower unique to shared. Therefore just set result to shared.\n       ty_box(mt) {\n-        result = ast::kind_shared;\n+        result = ast::kind_copyable;\n       }\n       // Pointers and unique containers raise pinned to shared.\n       ty_ptr(tm) | ty_vec(tm) | ty_uniq(tm) {\n@@ -1044,14 +1044,14 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       ty_rec(flds) {\n         for f: field in flds {\n             result = kind::lower_kind(result, type_kind(cx, f.mt.ty));\n-            if result == ast::kind_pinned { break; }\n+            if result == ast::kind_noncopyable { break; }\n         }\n       }\n       // Tuples lower to the lowest of their members.\n       ty_tup(tys) {\n         for ty: t in tys {\n             result = kind::lower_kind(result, type_kind(cx, ty));\n-            if result == ast::kind_pinned { break; }\n+            if result == ast::kind_noncopyable { break; }\n         }\n       }\n       // Tags lower to the lowest of their variants.\n@@ -1062,14 +1062,14 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n                 // Perform any type parameter substitutions.\n                 let arg_ty = substitute_type_params(cx, tps, aty);\n                 result = kind::lower_kind(result, type_kind(cx, arg_ty));\n-                if result == ast::kind_pinned { break; }\n+                if result == ast::kind_noncopyable { break; }\n             }\n-            if result == ast::kind_pinned { break; }\n+            if result == ast::kind_noncopyable { break; }\n         }\n       }\n       // Resources are always pinned.\n       ty_res(did, inner, tps) {\n-        result = ast::kind_pinned;\n+        result = ast::kind_noncopyable;\n       }\n       ty_var(_) {\n         fail;"}, {"sha": "b77c58709ae169d0f9cc4dfca89a2da7b629e071", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -23,6 +23,8 @@ type def_id = {crate: crate_num, node: node_id};\n \n const local_crate: crate_num = 0;\n \n+tag plicit<T> { explicit(T); implicit(T); }\n+\n type ty_param = {ident: ident, kind: plicit<kind>};\n \n tag def {\n@@ -99,8 +101,7 @@ tag pat_ {\n \n tag mutability { mut; imm; maybe_mut; }\n \n-tag plicit<T> { explicit(T); implicit(T); }\n-tag kind { kind_pinned; kind_shared; kind_unique; kind_auto; }\n+tag kind { kind_sendable; kind_copyable; kind_noncopyable; }\n \n tag _auth { auth_unsafe; }\n "}, {"sha": "6091b24ac1b4fbd3f3ed9de3d85a508ec7e55e0e", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -229,7 +229,7 @@ fn ret_by_ref(style: ret_style) -> bool {\n }\n \n fn ty_param_kind(tp: ty_param) -> kind {\n-    alt tp.kind { explicit(x) | implicit(x) { x } }\n+    alt tp.kind { ast::implicit(x) | ast::explicit(x) { x } }\n }\n \n // Local Variables:"}, {"sha": "3731a6af7d0c8ce74147ad73ef3d268d2291c276", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1738,21 +1738,24 @@ fn parse_block_tail(p: parser, lo: uint, s: ast::blk_check_mode) -> ast::blk {\n     ret spanned(lo, hi, bloc);\n }\n \n-fn parse_ty_param(default: ast::kind, p: parser) -> ast::ty_param {\n-    let k = if eat_word(p, \"pin\") { ast::explicit(ast::kind_pinned) }\n-            else if eat_word(p, \"uniq\") { ast::explicit(ast::kind_unique) }\n-            else if eat_word(p, \"shar\") { ast::explicit(ast::kind_shared) }\n-            // FIXME distinguish implied shared from explicit\n-            else { ast::implicit(default) };\n+fn parse_ty_param(p: parser, def: ast::kind) -> ast::ty_param {\n+    // Accept both old and new kind names for now. FIXME remove this\n+    let k = if eat_word(p, \"send\") | eat_word(p, \"uniq\")\n+                { ast::explicit(ast::kind_sendable) }\n+            else if eat_word(p, \"copy\") | eat_word(p, \"shar\")\n+                { ast::explicit(ast::kind_copyable) }\n+            else if eat_word(p, \"nocopy\") | eat_word(p, \"pin\")\n+                { ast::explicit(ast::kind_noncopyable) }\n+            else { ast::implicit(def) };\n     ret {ident: parse_ident(p), kind: k};\n }\n \n-fn parse_ty_params(p: parser, default: ast::kind) -> [ast::ty_param] {\n+fn parse_ty_params(p: parser, def: ast::kind) -> [ast::ty_param] {\n     let ty_params: [ast::ty_param] = [];\n     if p.peek() == token::LT {\n         p.bump();\n         ty_params = parse_seq_to_gt(some(token::COMMA),\n-                                    {|p| parse_ty_param(default, p)}, p);\n+                                    {|p| parse_ty_param(p, def)}, p);\n     }\n     ret ty_params;\n }\n@@ -1805,7 +1808,7 @@ fn parse_fn(p: parser, proto: ast::proto, purity: ast::purity,\n \n fn parse_fn_header(p: parser) -> {ident: ast::ident, tps: [ast::ty_param]} {\n     let id = parse_value_ident(p);\n-    let ty_params = parse_ty_params(p, ast::kind_shared);\n+    let ty_params = parse_ty_params(p, ast::kind_copyable);\n     ret {ident: id, tps: ty_params};\n }\n \n@@ -1858,7 +1861,7 @@ fn parse_method(p: parser) -> @ast::method {\n fn parse_item_obj(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let lo = p.get_last_lo_pos();\n     let ident = parse_value_ident(p);\n-    let ty_params = parse_ty_params(p, ast::kind_pinned);\n+    let ty_params = parse_ty_params(p, ast::kind_copyable);\n     let fields: ast::spanned<[ast::obj_field]> =\n         parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n                   parse_obj_field, p);\n@@ -1875,7 +1878,7 @@ fn parse_item_obj(p: parser, attrs: [ast::attribute]) -> @ast::item {\n fn parse_item_res(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let lo = p.get_last_lo_pos();\n     let ident = parse_value_ident(p);\n-    let ty_params = parse_ty_params(p, ast::kind_pinned);\n+    let ty_params = parse_ty_params(p, ast::kind_noncopyable);\n     expect(p, token::LPAREN);\n     let arg_ident = parse_value_ident(p);\n     expect(p, token::COLON);\n@@ -2039,7 +2042,7 @@ fn parse_type_decl(p: parser) -> {lo: uint, ident: ast::ident} {\n \n fn parse_item_type(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let t = parse_type_decl(p);\n-    let tps = parse_ty_params(p, ast::kind_pinned);\n+    let tps = parse_ty_params(p, ast::kind_noncopyable);\n     expect(p, token::EQ);\n     let ty = parse_ty(p, false);\n     let hi = p.get_hi_pos();\n@@ -2050,7 +2053,7 @@ fn parse_item_type(p: parser, attrs: [ast::attribute]) -> @ast::item {\n fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let lo = p.get_last_lo_pos();\n     let id = parse_ident(p);\n-    let ty_params = parse_ty_params(p, ast::kind_pinned);\n+    let ty_params = parse_ty_params(p, ast::kind_noncopyable);\n     let variants: [ast::variant] = [];\n     // Newtype syntax\n     if p.peek() == token::EQ {"}, {"sha": "b5c466bd308d72d9c3da768a3a8e12ce024563de", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1168,10 +1168,10 @@ fn print_arg_mode(s: ps, m: ast::mode) {\n \n fn print_kind(s: ps, kind: ast::plicit<ast::kind>) {\n     alt kind {\n+      ast::explicit(ast::kind_sendable.) { word_nbsp(s, \"send\"); }\n+      ast::explicit(ast::kind_copyable.) { word_nbsp(s, \"copy\"); }\n+      ast::explicit(ast::kind_noncopyable.) { word_nbsp(s, \"nocopy\"); }\n       ast::implicit(_) {}\n-      ast::explicit(ast::kind_unique.) { word_nbsp(s, \"uniq\"); }\n-      ast::explicit(ast::kind_pinned.) { word_nbsp(s, \"pin\"); }\n-      ast::explicit(ast::kind_shared.) { word_nbsp(s, \"shar\"); }\n     }\n }\n "}, {"sha": "12bc0a0b2b9d7fdd5818ce2c6789176558041fe7", "filename": "src/test/compile-fail/block-copy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: needed shared type, got pinned type block\n+// xfail-test\n \n fn lol(f: block()) -> block() { ret f; }\n fn main() { let i = 8; let f = lol(block () { log_err i; }); f(); }"}, {"sha": "f9e38941aa6138211eed65079f9afb2b683492ba", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:cannot copy pinned type foo\n+// xfail-test\n \n resource foo(i: int) { }\n "}, {"sha": "b4038b61d3e246f81963e894e60f6bce0c351112", "filename": "src/test/compile-fail/copy-res-into-box.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-box.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:mismatched kinds for '@' operand\n+// xfail-test\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }"}, {"sha": "0fec1ba8a0429bb7fc95883c682a68a3fa24a1db", "filename": "src/test/compile-fail/copy-res-into-rec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-rec.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:mismatched kinds for record field\n+// xfail-test\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }"}, {"sha": "e9318ae428049f5668be8603e509f0065ebf69b3", "filename": "src/test/compile-fail/copy-res-into-tup.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-tup.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:mismatched kinds for tuple parameter\n+// xfail-test\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }"}, {"sha": "6fa1e852b4a49ed10ad02d603e48947c468408df", "filename": "src/test/compile-fail/copy-res-into-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-res-into-unique.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:mismatched kinds for '~' operand\n+// xfail-test\n resource r(i: @mutable int) {\n     *i = *i + 1;\n }"}, {"sha": "9e8081ca6ce274a4c7b8326501dda1aacb3af856", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: cannot copy pinned type ~~~{y: r}\n+// xfail-test\n \n resource r(i: @mutable int) {\n     *i = *i + 1;"}, {"sha": "17855a30bd08d4aa5ddc7f02c5733c46b20b46cc", "filename": "src/test/compile-fail/resource-let2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fresource-let2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fresource-let2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresource-let2.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: mismatched kind\n+// xfail-test\n \n resource r(b: bool) {\n }"}, {"sha": "612dd0dda038e19008f45e1520d614bbf36b840e", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: mismatched kind\n+// xfail-test\n \n resource r(b: bool) {\n }"}, {"sha": "2a6530107017ec7c692934155ec5a0b0dcf8e02a", "filename": "src/test/compile-fail/unique-swap2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-swap2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-swap2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-swap2.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:needed shared type, got pinned type ~r\n+// xfail-test\n \n resource r(i: @mutable int) {\n     *i += 1;"}, {"sha": "b20c552a011f479b0f1191da3a1b8ceb095ed593", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: needed unique type\n+// xfail-test\n \n fn f<uniq T>(i: T) {\n }"}, {"sha": "434b18bbb06c9fae0123e953b861da18acd995cd", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: needed shared type, got pinned type ~r\n+// xfail-test\n \n resource r(i: @mutable int) {\n     *i = *i + 1;"}, {"sha": "168429b6c8fcc2c5766a354fd5593cb684dde3df", "filename": "src/test/compile-fail/vec-pinned-nocopy-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy-2.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: mismatched kind\n+// xfail-test\n \n resource r(b: bool) {\n }"}, {"sha": "54493ea453605ab303ece6e2312dabc4c816dfee", "filename": "src/test/compile-fail/vec-pinned-nocopy-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy-3.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: mismatched kind\n+// xfail-test\n \n resource r(b: bool) {\n }"}, {"sha": "91dfb4fd6f0634084b74165b733653ace5d70a2b", "filename": "src/test/compile-fail/vec-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-pinned-nocopy.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern: mismatched kind\n+// xfail-test\n \n resource r(b: bool) {\n }"}, {"sha": "3d240a76480175cb896829767fa8ecabb2cafb7a", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf48d3753e48ec37116d00cd3d4be12b5f71b5a/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=9cf48d3753e48ec37116d00cd3d4be12b5f71b5a", "patch": "@@ -1,4 +1,5 @@\n // error-pattern:mismatched kinds\n+// xfail-test\n \n resource r(i: int) {\n }"}]}