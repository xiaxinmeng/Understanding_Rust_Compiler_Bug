{"sha": "e38b399d03605f68ddbec50bf31e2f6fb12d278d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzOGIzOTlkMDM2MDVmNjhkZGJlYzUwYmYzMWUyZjZmYjEyZDI3OGQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-23T23:28:41Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T21:58:21Z"}, "message": "Make eval_place_to_op iterate instead of recurse", "tree": {"sha": "7a86b8e6e3324890b75bec9e764f831a53da72ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a86b8e6e3324890b75bec9e764f831a53da72ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e38b399d03605f68ddbec50bf31e2f6fb12d278d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e38b399d03605f68ddbec50bf31e2f6fb12d278d", "html_url": "https://github.com/rust-lang/rust/commit/e38b399d03605f68ddbec50bf31e2f6fb12d278d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e38b399d03605f68ddbec50bf31e2f6fb12d278d/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d7a36231a902a57bd627c1f1f6cd658ea9ab717", "html_url": "https://github.com/rust-lang/rust/commit/6d7a36231a902a57bd627c1f1f6cd658ea9ab717"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "a674389a93695394f4959a1fdfc7b213056cac39", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e38b399d03605f68ddbec50bf31e2f6fb12d278d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e38b399d03605f68ddbec50bf31e2f6fb12d278d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=e38b399d03605f68ddbec50bf31e2f6fb12d278d", "patch": "@@ -467,23 +467,34 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         mir_place: &mir::Place<'tcx>,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        use rustc::mir::Place::*;\n+        use rustc::mir::Place;\n         use rustc::mir::PlaceBase;\n-        let op = match mir_place {\n-            Base(PlaceBase::Local(mir::RETURN_PLACE)) => return err!(ReadFromReturnPointer),\n-            Base(PlaceBase::Local(local)) => self.access_local(self.frame(), *local, layout)?,\n-            Base(PlaceBase::Static(place_static)) => {\n-                self.eval_static_to_mplace(place_static)?.into()\n-            }\n \n-            Projection(proj) => {\n-                let op = self.eval_place_to_op(&proj.base, None)?;\n-                self.operand_projection(op, &proj.elem)?\n+        mir_place.iterate(|place_base, place_projection| {\n+            let mut op = match place_base {\n+                PlaceBase::Local(mir::RETURN_PLACE) => return err!(ReadFromReturnPointer),\n+                PlaceBase::Local(local) => {\n+                    // FIXME use place_projection.is_empty() when is available\n+                    let layout = if let Place::Base(_) = mir_place {\n+                        layout\n+                    } else {\n+                        None\n+                    };\n+\n+                    self.access_local(self.frame(), *local, layout)?\n+                }\n+                PlaceBase::Static(place_static) => {\n+                    self.eval_static_to_mplace(place_static)?.into()\n+                }\n+            };\n+\n+            for proj in place_projection {\n+                op = self.operand_projection(op, &proj.elem)?\n             }\n-        };\n \n-        trace!(\"eval_place_to_op: got {:?}\", *op);\n-        Ok(op)\n+            trace!(\"eval_place_to_op: got {:?}\", *op);\n+            Ok(op)\n+        })\n     }\n \n     /// Evaluate the operand, returning a place where you can then find the data."}]}