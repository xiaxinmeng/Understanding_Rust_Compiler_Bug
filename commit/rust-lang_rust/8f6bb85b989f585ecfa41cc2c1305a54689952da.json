{"sha": "8f6bb85b989f585ecfa41cc2c1305a54689952da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNmJiODViOTg5ZjU4NWVjZmE0MWNjMmMxMzA1YTU0Njg5OTUyZGE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-10-28T21:23:19Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "rustc_mir: fix compilation", "tree": {"sha": "89ad89fd99bb01c1168ecbffe773c1b5a81c74f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ad89fd99bb01c1168ecbffe773c1b5a81c74f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f6bb85b989f585ecfa41cc2c1305a54689952da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6bb85b989f585ecfa41cc2c1305a54689952da", "html_url": "https://github.com/rust-lang/rust/commit/8f6bb85b989f585ecfa41cc2c1305a54689952da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f6bb85b989f585ecfa41cc2c1305a54689952da/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e754736dc2638c5948ccc908b33cf7070c7f6d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e754736dc2638c5948ccc908b33cf7070c7f6d4", "html_url": "https://github.com/rust-lang/rust/commit/8e754736dc2638c5948ccc908b33cf7070c7f6d4"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "94bf8936fe61b893e1c98de0752f2c9321934c78", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f6bb85b989f585ecfa41cc2c1305a54689952da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6bb85b989f585ecfa41cc2c1305a54689952da/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=8f6bb85b989f585ecfa41cc2c1305a54689952da", "patch": "@@ -736,7 +736,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let body_id = match cx.tcx.map.find(closure_expr_id) {\n                 Some(map::NodeExpr(expr)) => {\n                     match expr.node {\n-                        hir::ExprClosure(.., ref body, _) => body.id,\n+                        hir::ExprClosure(.., body_id, _) => body_id.node_id(),\n                         _ => {\n                             span_bug!(expr.span, \"closure expr is not a closure expr\");\n                         }"}, {"sha": "1d362129b1bce7a93357eaeb931ddf847f07ae2c", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f6bb85b989f585ecfa41cc2c1305a54689952da/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f6bb85b989f585ecfa41cc2c1305a54689952da/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=8f6bb85b989f585ecfa41cc2c1305a54689952da", "patch": "@@ -30,7 +30,7 @@ use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n use rustc::hir;\n-use rustc::hir::intravisit::{self, FnKind, Visitor};\n+use rustc::hir::intravisit::{self, FnKind, Visitor, NestedVisitMode};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -144,6 +144,10 @@ impl<'a, 'gcx> BuildMir<'a, 'gcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::OnlyBodies))\n+    }\n+\n     // Const and static items.\n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n@@ -210,7 +214,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n     fn visit_fn(&mut self,\n                 fk: FnKind<'tcx>,\n                 decl: &'tcx hir::FnDecl,\n-                body: &'tcx hir::Expr,\n+                body_id: hir::ExprId,\n                 span: Span,\n                 id: ast::NodeId) {\n         // fetch the fully liberated fn signature (that is, all bound\n@@ -223,7 +227,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n         };\n \n         let (abi, implicit_argument) = if let FnKind::Closure(..) = fk {\n-            (Abi::Rust, Some((closure_self_ty(self.tcx, id, body.id), None)))\n+            (Abi::Rust, Some((closure_self_ty(self.tcx, id, body_id.node_id()), None)))\n         } else {\n             let def_id = self.tcx.map.local_def_id(id);\n             (self.tcx.item_type(def_id).fn_abi(), None)\n@@ -237,12 +241,14 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n                     (fn_sig.inputs[index], Some(&*arg.pat))\n                 });\n \n+        let body = self.tcx.map.expr(body_id);\n+\n         let arguments = implicit_argument.into_iter().chain(explicit_arguments);\n         self.cx(MirSource::Fn(id)).build(|cx| {\n             build::construct_fn(cx, id, arguments, abi, fn_sig.output, body)\n         });\n \n-        intravisit::walk_fn(self, fk, decl, body, span, id);\n+        intravisit::walk_fn(self, fk, decl, body_id, span, id);\n     }\n }\n "}]}