{"sha": "9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZjU2Y2EwZWVhMWE4ZjVhZjk0NWRmMjVjZTIzZTI3NmIxZDQ4YTc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-09T13:58:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-11T15:51:36Z"}, "message": "Provide a way of accessing the ThinLTO module import map in rustc.", "tree": {"sha": "ff166b9607c76ebb604500b5658bd3fe4c9bf1ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff166b9607c76ebb604500b5658bd3fe4c9bf1ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "html_url": "https://github.com/rust-lang/rust/commit/9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9df56ca0eea1a8f5af945df25ce23e276b1d48a7/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11432ba98043ee0ade961bdedb4b785bf06c086e", "url": "https://api.github.com/repos/rust-lang/rust/commits/11432ba98043ee0ade961bdedb4b785bf06c086e", "html_url": "https://github.com/rust-lang/rust/commit/11432ba98043ee0ade961bdedb4b785bf06c086e"}], "stats": {"total": 133, "additions": 132, "deletions": 1}, "files": [{"sha": "28b9d2e7afa25716d8f1c6af132756cc1de22f2f", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9df56ca0eea1a8f5af945df25ce23e276b1d48a7/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df56ca0eea1a8f5af945df25ce23e276b1d48a7/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "patch": "@@ -20,12 +20,13 @@ use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::session::config::{self, Lto};\n use rustc::util::common::time_ext;\n+use rustc_data_structures::fx::FxHashMap;\n use time_graph::Timeline;\n use {ModuleCodegen, ModuleLlvm, ModuleKind, ModuleSource};\n \n use libc;\n \n-use std::ffi::CString;\n+use std::ffi::{CString, CStr};\n use std::ptr;\n use std::slice;\n use std::sync::Arc;\n@@ -776,3 +777,69 @@ impl ThinModule {\n         Ok(module)\n     }\n }\n+\n+\n+#[derive(Debug)]\n+pub struct ThinLTOImports {\n+    // key = llvm name of importing module, value = list of modules it imports from\n+    imports: FxHashMap<String, Vec<String>>,\n+}\n+\n+impl ThinLTOImports {\n+\n+    /// Load the ThinLTO import map from ThinLTOData.\n+    unsafe fn from_thin_lto_data(data: *const llvm::ThinLTOData) -> ThinLTOImports {\n+        let raw_data: *const llvm::ThinLTOModuleImports =\n+            llvm::LLVMRustGetThinLTOModuleImports(data);\n+\n+        assert!(!raw_data.is_null());\n+\n+        let mut imports = FxHashMap();\n+        let mut module_ptr = raw_data;\n+        let mut module_index = 0;\n+\n+        loop {\n+            let mut entry_ptr: *const llvm::ThinLTOModuleName = *module_ptr;\n+\n+            if entry_ptr.is_null() {\n+                break;\n+            }\n+\n+            let importing_module_name = CStr::from_ptr(*entry_ptr)\n+                .to_str()\n+                .expect(\"Non-utf8 LLVM module name encountered\")\n+                .to_owned();\n+\n+            entry_ptr = entry_ptr.offset(1);\n+\n+            let mut imported_modules = vec![];\n+\n+            loop {\n+                let imported_module_name = *entry_ptr;\n+\n+                if imported_module_name.is_null() {\n+                    break\n+                }\n+\n+                let imported_module_name = CStr::from_ptr(imported_module_name)\n+                    .to_str()\n+                    .expect(\"Non-utf8 LLVM module name encountered\")\n+                    .to_owned();\n+\n+                imported_modules.push(imported_module_name);\n+                entry_ptr = entry_ptr.offset(1);\n+            }\n+\n+            imports.insert(importing_module_name, imported_modules);\n+\n+            module_ptr = module_ptr.offset(1);\n+            module_index += 1;\n+        }\n+\n+        assert_eq!(module_index, imports.len());\n+\n+        ThinLTOImports {\n+            imports\n+        }\n+    }\n+}"}, {"sha": "b3a3893bfc3e78b7848b68fcae4f5e9a77d4f24b", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9df56ca0eea1a8f5af945df25ce23e276b1d48a7/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9df56ca0eea1a8f5af945df25ce23e276b1d48a7/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "patch": "@@ -350,6 +350,11 @@ pub enum ThinLTOData {}\n /// LLVMRustThinLTOBuffer\n pub enum ThinLTOBuffer {}\n \n+/// LLVMRustThinLTOModuleName\n+pub type ThinLTOModuleName = *const c_char;\n+/// LLVMRustThinLTOModuleImports\n+pub type ThinLTOModuleImports = *const ThinLTOModuleName;\n+\n /// LLVMRustThinLTOModule\n #[repr(C)]\n pub struct ThinLTOModule {\n@@ -1778,6 +1783,9 @@ extern \"C\" {\n         Data: *const ThinLTOData,\n         Module: ModuleRef,\n     ) -> bool;\n+    pub fn LLVMRustGetThinLTOModuleImports(\n+        Data: *const ThinLTOData,\n+    ) -> *const ThinLTOModuleImports;\n     pub fn LLVMRustFreeThinLTOData(Data: *mut ThinLTOData);\n     pub fn LLVMRustParseBitcodeForThinLTO(\n         Context: ContextRef,"}, {"sha": "30f585efedc125ddbe1a8b2134d71f38736f6be3", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9df56ca0eea1a8f5af945df25ce23e276b1d48a7/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9df56ca0eea1a8f5af945df25ce23e276b1d48a7/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=9df56ca0eea1a8f5af945df25ce23e276b1d48a7", "patch": "@@ -798,6 +798,11 @@ LLVMRustPGOAvailable() {\n #endif\n }\n \n+// We encode the ThinLTO module import map as a nested null-terminated list to\n+// get it into Rust.\n+typedef const char* LLVMRustThinLTOModuleName;\n+typedef LLVMRustThinLTOModuleName* LLVMRustThinLTOModuleImports;\n+\n #if LLVM_VERSION_GE(4, 0)\n \n // Here you'll find an implementation of ThinLTO as used by the Rust compiler\n@@ -1099,6 +1104,52 @@ LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   return true;\n }\n \n+/// Converts the LLVMRustThinLTOData::ImportLists map into a nested list. The\n+/// first level is a null-terminated array with an entry for each module. Each\n+/// entry is a pointer that points to a null-termined array of module names. The\n+/// first entry is always the name of the *importing* module, the following\n+/// entries are  the names of the modules it imports from. Each module name is\n+/// a regular C string.\n+extern \"C\" LLVMRustThinLTOModuleImports*\n+LLVMRustGetThinLTOModuleImports(const LLVMRustThinLTOData *Data) {\n+  // Allocate number of module +1. This is a null-terminated array.\n+  LLVMRustThinLTOModuleImports* thinLTOModuleImports =\n+    new LLVMRustThinLTOModuleImports[Data->ImportLists.size() + 1];\n+  size_t module_index = 0;\n+\n+  for (const auto & module : Data->ImportLists) {\n+    StringRef module_id = module.getKey();\n+    const auto& imports = module.getValue();\n+\n+    // Allocate number of imported module + 2, one extra for the name of the\n+    // importing module and another one for null-termination.\n+    LLVMRustThinLTOModuleImports imports_array =\n+      new LLVMRustThinLTOModuleName[imports.size() + 2];\n+\n+    // The first value is always the name of the *importing* module.\n+    imports_array[0] = strndup(module_id.data(), module_id.size());\n+\n+    size_t imports_array_index = 1;\n+    for (const auto imported_module_id : imports.keys()) {\n+      // The following values are the names of the imported modules.\n+      imports_array[imports_array_index] = strndup(imported_module_id.data(),\n+                                                   imported_module_id.size());\n+      imports_array_index += 1;\n+    }\n+\n+    assert(imports_array_index == imports.size() + 1);\n+    imports_array[imports_array_index] = nullptr;\n+\n+    thinLTOModuleImports[module_index] = imports_array;\n+    module_index += 1;\n+  }\n+\n+  assert(module_index == Data->ImportLists.size());\n+  thinLTOModuleImports[module_index] = nullptr;\n+\n+  return thinLTOModuleImports;\n+}\n+\n // This struct and various functions are sort of a hack right now, but the\n // problem is that we've got in-memory LLVM modules after we generate and\n // optimize all codegen-units for one compilation in rustc. To be compatible\n@@ -1280,6 +1331,11 @@ LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   report_fatal_error(\"ThinLTO not available\");\n }\n \n+extern \"C\" LLVMRustThinLTOModuleImports\n+LLVMRustGetLLVMRustThinLTOModuleImports(const LLVMRustThinLTOData *Data) {\n+  report_fatal_error(\"ThinLTO not available\");\n+}\n+\n extern \"C\" void\n LLVMRustFreeThinLTOData(LLVMRustThinLTOData *Data) {\n   report_fatal_error(\"ThinLTO not available\");"}]}