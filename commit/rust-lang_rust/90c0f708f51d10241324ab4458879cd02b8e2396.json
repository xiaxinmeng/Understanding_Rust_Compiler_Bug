{"sha": "90c0f708f51d10241324ab4458879cd02b8e2396", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYzBmNzA4ZjUxZDEwMjQxMzI0YWI0NDU4ODc5Y2QwMmI4ZTIzOTY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-02T21:19:50Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-02T21:19:50Z"}, "message": "Merge pull request #971 from kamalmarhubi/update-syntex-syntax\n\ndeps: Update syntex_syntax to 0.31.0", "tree": {"sha": "0547e96eb9794d4fadfe3c838dffd9feed9d36bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0547e96eb9794d4fadfe3c838dffd9feed9d36bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90c0f708f51d10241324ab4458879cd02b8e2396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90c0f708f51d10241324ab4458879cd02b8e2396", "html_url": "https://github.com/rust-lang/rust/commit/90c0f708f51d10241324ab4458879cd02b8e2396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90c0f708f51d10241324ab4458879cd02b8e2396/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "url": "https://api.github.com/repos/rust-lang/rust/commits/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61", "html_url": "https://github.com/rust-lang/rust/commit/c696dcf8dae0c34161d467b7fbc32b0d7b01bb61"}, {"sha": "6285d538854239d62984ab6c72be4a85eb38f353", "url": "https://api.github.com/repos/rust-lang/rust/commits/6285d538854239d62984ab6c72be4a85eb38f353", "html_url": "https://github.com/rust-lang/rust/commit/6285d538854239d62984ab6c72be4a85eb38f353"}], "stats": {"total": 143, "additions": 74, "deletions": 69}, "files": [{"sha": "a31897dd45551c742e21ef2e428221881aad99a5", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90c0f708f51d10241324ab4458879cd02b8e2396/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/90c0f708f51d10241324ab4458879cd02b8e2396/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=90c0f708f51d10241324ab4458879cd02b8e2396", "patch": "@@ -9,7 +9,7 @@ dependencies = [\n  \"regex 0.1.63 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_syntax 0.30.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.31.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -111,7 +111,7 @@ dependencies = [\n \n [[package]]\n name = \"syntex_syntax\"\n-version = \"0.30.0\"\n+version = \"0.31.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "bf719ce90ef75023ce721bae7c0444f30f5a44d9", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90c0f708f51d10241324ab4458879cd02b8e2396/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/90c0f708f51d10241324ab4458879cd02b8e2396/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=90c0f708f51d10241324ab4458879cd02b8e2396", "patch": "@@ -21,7 +21,7 @@ regex = \"0.1\"\n term = \"0.4\"\n strings = \"0.0.1\"\n diff = \"0.1\"\n-syntex_syntax = \"0.30\"\n+syntex_syntax = \"0.31\"\n log = \"0.3\"\n env_logger = \"0.3\"\n getopts = \"0.2\""}, {"sha": "b1dffebbc13771c060bf287d7becc6433aa72d9f", "filename": "src/items.rs", "status": "modified", "additions": 43, "deletions": 46, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/90c0f708f51d10241324ab4458879cd02b8e2396/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c0f708f51d10241324ab4458879cd02b8e2396/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=90c0f708f51d10241324ab4458879cd02b8e2396", "patch": "@@ -126,7 +126,7 @@ impl<'a> FmtVisitor<'a> {\n                                               // These are not actually rust functions,\n                                               // but we format them as such.\n                                               abi::Abi::Rust,\n-                                              item.vis,\n+                                              &item.vis,\n                                               span,\n                                               false,\n                                               false);\n@@ -142,15 +142,16 @@ impl<'a> FmtVisitor<'a> {\n             ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n                 // function keywords here.\n+                let vis = match format_visibility(&item.vis) {\n+                    Some(s) => s,\n+                    None => return,\n+                };\n                 let mut_str = if is_mutable {\n                     \"mut \"\n                 } else {\n                     \"\"\n                 };\n-                let prefix = format!(\"{}static {}{}: \",\n-                                     format_visibility(item.vis),\n-                                     mut_str,\n-                                     item.ident);\n+                let prefix = format!(\"{}static {}{}: \", vis, mut_str, item.ident);\n                 let offset = self.block_indent + prefix.len();\n                 // 1 = ;\n                 let width = self.config.max_width - offset.width() - 1;\n@@ -179,7 +180,7 @@ impl<'a> FmtVisitor<'a> {\n                       unsafety: ast::Unsafety,\n                       constness: ast::Constness,\n                       abi: abi::Abi,\n-                      vis: ast::Visibility,\n+                      vis: &ast::Visibility,\n                       span: Span,\n                       block: &ast::Block)\n                       -> Option<String> {\n@@ -244,7 +245,7 @@ impl<'a> FmtVisitor<'a> {\n                                                        sig.unsafety,\n                                                        sig.constness,\n                                                        sig.abi,\n-                                                       ast::Visibility::Inherited,\n+                                                       &ast::Visibility::Inherited,\n                                                        span,\n                                                        false,\n                                                        false));\n@@ -303,11 +304,14 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn visit_enum(&mut self,\n                       ident: ast::Ident,\n-                      vis: ast::Visibility,\n+                      vis: &ast::Visibility,\n                       enum_def: &ast::EnumDef,\n                       generics: &ast::Generics,\n                       span: Span) {\n-        let header_str = format_header(\"enum \", ident, vis);\n+        let header_str = match format_header(\"enum \", ident, vis) {\n+            Some(s) => s,\n+            None => return,\n+        };\n         self.buffer.push_str(&header_str);\n \n         let enum_snippet = self.snippet(span);\n@@ -414,7 +418,7 @@ impl<'a> FmtVisitor<'a> {\n                 format_struct(&context,\n                               \"\",\n                               field.node.name,\n-                              ast::Visibility::Inherited,\n+                              &ast::Visibility::Inherited,\n                               &field.node.data,\n                               None,\n                               field.span,\n@@ -451,7 +455,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n                                ref self_ty,\n                                ref items) = item.node {\n         let mut result = String::new();\n-        result.push_str(format_visibility(item.vis));\n+        result.push_str(try_opt!(format_visibility(&item.vis)));\n         result.push_str(format_unsafety(unsafety));\n         result.push_str(\"impl\");\n \n@@ -583,7 +587,7 @@ fn is_impl_single_line(context: &RewriteContext,\n pub fn format_struct(context: &RewriteContext,\n                      item_name: &str,\n                      ident: ast::Ident,\n-                     vis: ast::Visibility,\n+                     vis: &ast::Visibility,\n                      struct_def: &ast::VariantData,\n                      generics: Option<&ast::Generics>,\n                      span: Span,\n@@ -619,7 +623,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n            item.node {\n         let mut result = String::new();\n         let header = format!(\"{}{}trait {}\",\n-                             format_visibility(item.vis),\n+                             try_opt!(format_visibility(&item.vis)),\n                              format_unsafety(unsafety),\n                              item.ident);\n \n@@ -741,10 +745,10 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n     }\n }\n \n-fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: ast::Visibility) -> Option<String> {\n+fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = try_opt!(format_header(item_name, ident, vis));\n     result.push_str(&header_str);\n     result.push(';');\n \n@@ -754,15 +758,15 @@ fn format_unit_struct(item_name: &str, ident: ast::Ident, vis: ast::Visibility)\n fn format_struct_struct(context: &RewriteContext,\n                         item_name: &str,\n                         ident: ast::Ident,\n-                        vis: ast::Visibility,\n+                        vis: &ast::Visibility,\n                         fields: &[ast::StructField],\n                         generics: Option<&ast::Generics>,\n                         span: Span,\n                         offset: Indent)\n                         -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = try_opt!(format_header(item_name, ident, vis));\n     result.push_str(&header_str);\n \n     let body_lo = context.codemap.span_after(span, \"{\");\n@@ -804,13 +808,13 @@ fn format_struct_struct(context: &RewriteContext,\n                              \"}\",\n                              |field| {\n         // Include attributes and doc comments, if present\n-        if !field.node.attrs.is_empty() {\n-            field.node.attrs[0].span.lo\n+        if !field.attrs.is_empty() {\n+            field.attrs[0].span.lo\n         } else {\n             field.span.lo\n         }\n     },\n-                             |field| field.node.ty.span.hi,\n+                             |field| field.ty.span.hi,\n                              |field| field.rewrite(context, item_budget, item_indent),\n                              context.codemap.span_after(span, \"{\"),\n                              span.hi);\n@@ -835,15 +839,15 @@ fn format_struct_struct(context: &RewriteContext,\n fn format_tuple_struct(context: &RewriteContext,\n                        item_name: &str,\n                        ident: ast::Ident,\n-                       vis: ast::Visibility,\n+                       vis: &ast::Visibility,\n                        fields: &[ast::StructField],\n                        generics: Option<&ast::Generics>,\n                        span: Span,\n                        offset: Indent)\n                        -> Option<String> {\n     let mut result = String::with_capacity(1024);\n \n-    let header_str = format_header(item_name, ident, vis);\n+    let header_str = try_opt!(format_header(item_name, ident, vis));\n     result.push_str(&header_str);\n \n     // FIXME(#919): don't lose comments on empty tuple structs.\n@@ -890,13 +894,13 @@ fn format_tuple_struct(context: &RewriteContext,\n                              \")\",\n                              |field| {\n         // Include attributes and doc comments, if present\n-        if !field.node.attrs.is_empty() {\n-            field.node.attrs[0].span.lo\n+        if !field.attrs.is_empty() {\n+            field.attrs[0].span.lo\n         } else {\n             field.span.lo\n         }\n     },\n-                             |field| field.node.ty.span.hi,\n+                             |field| field.ty.span.hi,\n                              |field| field.rewrite(context, item_budget, item_indent),\n                              context.codemap.span_after(span, \"(\"),\n                              span.hi);\n@@ -924,12 +928,12 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n                           ident: ast::Ident,\n                           ty: &ast::Ty,\n                           generics: &ast::Generics,\n-                          vis: ast::Visibility,\n+                          vis: &ast::Visibility,\n                           span: Span)\n                           -> Option<String> {\n     let mut result = String::new();\n \n-    result.push_str(&format_visibility(vis));\n+    result.push_str(&try_opt!(format_visibility(&vis)));\n     result.push_str(\"type \");\n     result.push_str(&ident.to_string());\n \n@@ -991,21 +995,14 @@ pub fn rewrite_type_alias(context: &RewriteContext,\n \n impl Rewrite for ast::StructField {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n-        if contains_skip(&self.node.attrs) {\n-            let span = context.snippet(mk_sp(self.node.attrs[0].span.lo, self.span.hi));\n+        if contains_skip(&self.attrs) {\n+            let span = context.snippet(mk_sp(self.attrs[0].span.lo, self.span.hi));\n             return wrap_str(span, context.config.max_width, width, offset);\n         }\n \n-        let name = match self.node.kind {\n-            ast::StructFieldKind::NamedField(ident, _) => Some(ident.to_string()),\n-            ast::StructFieldKind::UnnamedField(_) => None,\n-        };\n-        let vis = match self.node.kind {\n-            ast::StructFieldKind::NamedField(_, vis) |\n-            ast::StructFieldKind::UnnamedField(vis) => format_visibility(vis),\n-        };\n-        let mut attr_str = try_opt!(self.node\n-            .attrs\n+        let name = self.ident;\n+        let vis = try_opt!(format_visibility(&self.vis));\n+        let mut attr_str = try_opt!(self.attrs\n             .rewrite(context, context.config.max_width - offset.width(), offset));\n         if !attr_str.is_empty() {\n             attr_str.push('\\n');\n@@ -1019,21 +1016,21 @@ impl Rewrite for ast::StructField {\n \n         let last_line_width = last_line_width(&result);\n         let budget = try_opt!(width.checked_sub(last_line_width));\n-        let rewrite = try_opt!(self.node.ty.rewrite(context, budget, offset + last_line_width));\n+        let rewrite = try_opt!(self.ty.rewrite(context, budget, offset + last_line_width));\n         Some(result + &rewrite)\n     }\n }\n \n pub fn rewrite_static(prefix: &str,\n-                      vis: ast::Visibility,\n+                      vis: &ast::Visibility,\n                       ident: ast::Ident,\n                       ty: &ast::Ty,\n                       mutability: ast::Mutability,\n                       expr_opt: Option<&ptr::P<ast::Expr>>,\n                       context: &RewriteContext)\n                       -> Option<String> {\n     let prefix = format!(\"{}{} {}{}: \",\n-                         format_visibility(vis),\n+                         try_opt!(format_visibility(vis)),\n                          prefix,\n                          format_mutability(mutability),\n                          ident);\n@@ -1239,7 +1236,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n                    unsafety: ast::Unsafety,\n                    constness: ast::Constness,\n                    abi: abi::Abi,\n-                   vis: ast::Visibility,\n+                   vis: &ast::Visibility,\n                    span: Span,\n                    newline_brace: bool,\n                    has_body: bool)\n@@ -1252,7 +1249,7 @@ fn rewrite_fn_base(context: &RewriteContext,\n \n     let mut result = String::with_capacity(1024);\n     // Vis unsafety abi.\n-    result.push_str(format_visibility(vis));\n+    result.push_str(try_opt!(format_visibility(vis)));\n \n     if let ast::Constness::Const = constness {\n         result.push_str(\"const \");\n@@ -1808,8 +1805,8 @@ fn rewrite_where_clause(context: &RewriteContext,\n     }\n }\n \n-fn format_header(item_name: &str, ident: ast::Ident, vis: ast::Visibility) -> String {\n-    format!(\"{}{}{}\", format_visibility(vis), item_name, ident)\n+fn format_header(item_name: &str, ident: ast::Ident, vis: &ast::Visibility) -> Option<String> {\n+    Some(format!(\"{}{}{}\", try_opt!(format_visibility(vis)), item_name, ident))\n }\n \n fn format_generics(context: &RewriteContext,"}, {"sha": "b80a5783799a7ed870468fcfc96a017a000f4667", "filename": "src/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/90c0f708f51d10241324ab4458879cd02b8e2396/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c0f708f51d10241324ab4458879cd02b8e2396/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=90c0f708f51d10241324ab4458879cd02b8e2396", "patch": "@@ -67,10 +67,13 @@ pub fn extra_offset(text: &str, offset: Indent) -> usize {\n }\n \n #[inline]\n-pub fn format_visibility(vis: Visibility) -> &'static str {\n-    match vis {\n-        Visibility::Public => \"pub \",\n-        Visibility::Inherited => \"\",\n+pub fn format_visibility(vis: &Visibility) -> Option<&'static str> {\n+    match *vis {\n+        Visibility::Public => Some(\"pub \"),\n+        Visibility::Inherited => Some(\"\"),\n+        // FIXME(#970): Handle new visibility types.\n+        Visibility::Crate => None,\n+        Visibility::Restricted { .. } => None,\n     }\n }\n "}, {"sha": "d6be74010749a378dc3362392770a725722bd3aa", "filename": "src/visitor.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/90c0f708f51d10241324ab4458879cd02b8e2396/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90c0f708f51d10241324ab4458879cd02b8e2396/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=90c0f708f51d10241324ab4458879cd02b8e2396", "patch": "@@ -152,7 +152,7 @@ impl<'a> FmtVisitor<'a> {\n                                 sig.unsafety,\n                                 sig.constness,\n                                 sig.abi,\n-                                vis.unwrap_or(ast::Visibility::Inherited),\n+                                vis.unwrap_or(&ast::Visibility::Inherited),\n                                 codemap::mk_sp(s.lo, b.span.lo),\n                                 &b)\n             }\n@@ -203,7 +203,7 @@ impl<'a> FmtVisitor<'a> {\n \n         match item.node {\n             ast::ItemKind::Use(ref vp) => {\n-                self.format_import(item.vis, vp, item.span);\n+                self.format_import(&item.vis, vp, item.span);\n             }\n             ast::ItemKind::Impl(..) => {\n                 self.format_missing_with_indent(item.span.lo);\n@@ -234,7 +234,7 @@ impl<'a> FmtVisitor<'a> {\n                     ::items::format_struct(&context,\n                                            \"struct \",\n                                            item.ident,\n-                                           item.vis,\n+                                           &item.vis,\n                                            def,\n                                            Some(generics),\n                                            item.span,\n@@ -250,12 +250,12 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Enum(ref def, ref generics) => {\n                 self.format_missing_with_indent(item.span.lo);\n-                self.visit_enum(item.ident, item.vis, def, generics, item.span);\n+                self.visit_enum(item.ident, &item.vis, def, generics, item.span);\n                 self.last_pos = item.span.hi;\n             }\n             ast::ItemKind::Mod(ref module) => {\n                 self.format_missing_with_indent(item.span.lo);\n-                self.format_mod(module, item.vis, item.span, item.ident);\n+                self.format_mod(module, &item.vis, item.span, item.ident);\n             }\n             ast::ItemKind::Mac(ref mac) => {\n                 self.format_missing_with_indent(item.span.lo);\n@@ -267,7 +267,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Static(ref ty, mutability, ref expr) => {\n                 let rewrite = rewrite_static(\"static\",\n-                                             item.vis,\n+                                             &item.vis,\n                                              item.ident,\n                                              ty,\n                                              mutability,\n@@ -277,7 +277,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Const(ref ty, ref expr) => {\n                 let rewrite = rewrite_static(\"const\",\n-                                             item.vis,\n+                                             &item.vis,\n                                              item.ident,\n                                              ty,\n                                              ast::Mutability::Immutable,\n@@ -294,7 +294,7 @@ impl<'a> FmtVisitor<'a> {\n                                                     unsafety,\n                                                     constness,\n                                                     abi,\n-                                                    item.vis),\n+                                                    &item.vis),\n                               decl,\n                               body,\n                               item.span,\n@@ -306,7 +306,7 @@ impl<'a> FmtVisitor<'a> {\n                                                  item.ident,\n                                                  ty,\n                                                  generics,\n-                                                 item.vis,\n+                                                 &item.vis,\n                                                  item.span);\n                 self.push_rewrite(item.span, rewrite);\n             }\n@@ -321,7 +321,7 @@ impl<'a> FmtVisitor<'a> {\n         match ti.node {\n             ast::TraitItemKind::Const(ref ty, ref expr_opt) => {\n                 let rewrite = rewrite_static(\"const\",\n-                                             ast::Visibility::Inherited,\n+                                             &ast::Visibility::Inherited,\n                                              ti.ident,\n                                              ty,\n                                              ast::Mutability::Immutable,\n@@ -359,15 +359,15 @@ impl<'a> FmtVisitor<'a> {\n \n         match ii.node {\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n-                self.visit_fn(visit::FnKind::Method(ii.ident, sig, Some(ii.vis)),\n+                self.visit_fn(visit::FnKind::Method(ii.ident, sig, Some(&ii.vis)),\n                               &sig.decl,\n                               body,\n                               ii.span,\n                               ii.id);\n             }\n             ast::ImplItemKind::Const(ref ty, ref expr) => {\n                 let rewrite = rewrite_static(\"const\",\n-                                             ii.vis,\n+                                             &ii.vis,\n                                              ii.ident,\n                                              ty,\n                                              ast::Mutability::Immutable,\n@@ -467,12 +467,14 @@ impl<'a> FmtVisitor<'a> {\n         }\n     }\n \n-    fn format_mod(&mut self, m: &ast::Mod, vis: ast::Visibility, s: Span, ident: ast::Ident) {\n+    fn format_mod(&mut self, m: &ast::Mod, vis: &ast::Visibility, s: Span, ident: ast::Ident) {\n         // Decide whether this is an inline mod or an external mod.\n         let local_file_name = self.codemap.span_to_filename(s);\n         let is_internal = local_file_name == self.codemap.span_to_filename(m.inner);\n \n-        self.buffer.push_str(utils::format_visibility(vis));\n+        if let Some(vis) = utils::format_visibility(vis) {\n+            self.buffer.push_str(vis);\n+        }\n         self.buffer.push_str(\"mod \");\n         self.buffer.push_str(&ident.to_string());\n \n@@ -506,8 +508,11 @@ impl<'a> FmtVisitor<'a> {\n         self.format_missing(filemap.end_pos);\n     }\n \n-    fn format_import(&mut self, vis: ast::Visibility, vp: &ast::ViewPath, span: Span) {\n-        let vis = utils::format_visibility(vis);\n+    fn format_import(&mut self, vis: &ast::Visibility, vp: &ast::ViewPath, span: Span) {\n+        let vis = match utils::format_visibility(vis) {\n+            Some(s) => s,\n+            None => return,\n+        };\n         let mut offset = self.block_indent;\n         offset.alignment += vis.len() + \"use \".len();\n         // 1 = \";\""}]}