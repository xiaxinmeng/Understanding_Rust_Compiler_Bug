{"sha": "07064de9a788d02b28f8e3f32d81334cd8ef2dce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MDY0ZGU5YTc4OGQwMmIyOGY4ZTNmMzJkODEzMzRjZDhlZjJkY2U=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-29T11:47:39Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "No longer return value_constructors for all_constructors", "tree": {"sha": "67564d32751828495042f96181e51cc603564f51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67564d32751828495042f96181e51cc603564f51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07064de9a788d02b28f8e3f32d81334cd8ef2dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07064de9a788d02b28f8e3f32d81334cd8ef2dce", "html_url": "https://github.com/rust-lang/rust/commit/07064de9a788d02b28f8e3f32d81334cd8ef2dce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07064de9a788d02b28f8e3f32d81334cd8ef2dce/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d27c21c016ed8d9a4efaef0a0e86f771c82bf5d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d27c21c016ed8d9a4efaef0a0e86f771c82bf5d8", "html_url": "https://github.com/rust-lang/rust/commit/d27c21c016ed8d9a4efaef0a0e86f771c82bf5d8"}], "stats": {"total": 33, "additions": 15, "deletions": 18}, "files": [{"sha": "5d990dfa8dfe32d378776050c99d5366ee4a4159", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/07064de9a788d02b28f8e3f32d81334cd8ef2dce/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07064de9a788d02b28f8e3f32d81334cd8ef2dce/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=07064de9a788d02b28f8e3f32d81334cd8ef2dce", "patch": "@@ -426,11 +426,10 @@ impl<'tcx> Witness<'tcx> {\n /// Option<!> we do not include Some(_) in the returned list of constructors.\n fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                   pcx: PatternContext<'tcx>)\n-                                  -> (Vec<Constructor<'tcx>>, bool)\n+                                  -> Vec<Constructor<'tcx>>\n {\n     debug!(\"all_constructors({:?})\", pcx.ty);\n     let exhaustive_integer_patterns = cx.tcx.features().exhaustive_integer_patterns;\n-    let mut value_constructors = false;\n     let ctors = match pcx.ty.sty {\n         ty::TyBool => {\n             [true, false].iter().map(|&b| {\n@@ -461,7 +460,6 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 .collect()\n         }\n         ty::TyChar if exhaustive_integer_patterns => {\n-            value_constructors = true;\n             let endpoint = |c: char| {\n                 let ty = ty::ParamEnv::empty().and(cx.tcx.types.char);\n                 ty::Const::from_bits(cx.tcx, c as u128, ty)\n@@ -473,7 +471,6 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             ]\n         }\n         ty::TyInt(ity) if exhaustive_integer_patterns => {\n-            value_constructors = true;\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(cx.tcx, SignedInt(ity)).size().bits() as u128;\n             let min = 1u128 << (bits - 1);\n@@ -484,7 +481,6 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                                RangeEnd::Included)]\n         }\n         ty::TyUint(uty) if exhaustive_integer_patterns => {\n-            value_constructors = true;\n             // FIXME(49937): refactor these bit manipulations into interpret.\n             let bits = Integer::from_attr(cx.tcx, UnsignedInt(uty)).size().bits() as u128;\n             let max = !0u128 >> (128 - bits);\n@@ -501,7 +497,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             }\n         }\n     };\n-    (ctors, value_constructors)\n+    ctors\n }\n \n fn max_slice_length<'p, 'a: 'p, 'tcx: 'a, I>(\n@@ -810,22 +806,23 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         debug!(\"used_ctors = {:#?}\", used_ctors);\n         // `all_ctors` are all the constructors for the given type, which\n         // should all be represented (or caught with the wild pattern `_`).\n-        // `value_constructors` is true if we may exhaustively consider all\n-        // the possible values (e.g. integers) of a type as its constructors.\n-        let (all_ctors, value_constructors) = all_constructors(cx, pcx);\n+        let all_ctors = all_constructors(cx, pcx);\n         debug!(\"all_ctors = {:#?}\", all_ctors);\n \n+        // The only constructor patterns for which it is valid to\n+        // treat the values as constructors are ranges (see\n+        // `all_constructors` for details).\n+        let exhaustive_integer_patterns = cx.tcx.features().exhaustive_integer_patterns;\n+        let consider_value_constructors = exhaustive_integer_patterns\n+            && all_ctors.iter().all(|ctor| match ctor {\n+                ConstantRange(..) => true,\n+                _ => false,\n+            });\n+\n         // `missing_ctors` are those that should have appeared\n         // as patterns in the `match` expression, but did not.\n         let mut missing_ctors = vec![];\n         for req_ctor in &all_ctors {\n-            // The only constructor patterns for which it is valid to\n-            // treat the values as constructors are ranges (see\n-            // `all_constructors` for details).\n-            let consider_value_constructors = value_constructors && match req_ctor {\n-                ConstantRange(..) => true,\n-                _ => false,\n-            };\n             if consider_value_constructors {\n                 let mut refined_ctors = vec![req_ctor.clone()];\n                 for used_ctor in &used_ctors {\n@@ -886,7 +883,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         let is_non_exhaustive = is_privately_empty || is_declared_nonexhaustive;\n \n         if missing_ctors.is_empty() && !is_non_exhaustive {\n-            if value_constructors {\n+            if consider_value_constructors {\n                 // If we've successfully matched every value\n                 // of the type, then we're done.\n                 NotUseful\n@@ -962,7 +959,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                             witness\n                         }).collect()\n                     } else {\n-                        if value_constructors {\n+                        if consider_value_constructors {\n                             // If we've been trying to exhaustively match\n                             // over the domain of values for a type,\n                             // then we can provide better diagnostics"}]}