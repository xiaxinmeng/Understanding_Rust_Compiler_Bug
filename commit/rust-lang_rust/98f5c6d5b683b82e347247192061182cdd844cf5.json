{"sha": "98f5c6d5b683b82e347247192061182cdd844cf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZjVjNmQ1YjY4M2I4MmUzNDcyNDcxOTIwNjExODJjZGQ4NDRjZjU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-29T23:16:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-30T00:10:50Z"}, "message": "rustc: Only accept main functions at the crate level. #4433", "tree": {"sha": "ea34726d2ff6fd95f1c93c905e6433dc31abc0d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea34726d2ff6fd95f1c93c905e6433dc31abc0d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f5c6d5b683b82e347247192061182cdd844cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f5c6d5b683b82e347247192061182cdd844cf5", "html_url": "https://github.com/rust-lang/rust/commit/98f5c6d5b683b82e347247192061182cdd844cf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f5c6d5b683b82e347247192061182cdd844cf5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be8dc615c566104c528ca8389fa0807c8453c8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/be8dc615c566104c528ca8389fa0807c8453c8a8", "html_url": "https://github.com/rust-lang/rust/commit/be8dc615c566104c528ca8389fa0807c8453c8a8"}], "stats": {"total": 156, "additions": 93, "deletions": 63}, "files": [{"sha": "a9454b595a5026f9053c46f37454285490b65fb7", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -225,7 +225,8 @@ pub fn compile_rest(sess: Session,\n         time(time_passes, ~\"resolution\", ||\n              middle::resolve::resolve_crate(sess, lang_items, crate));\n \n-    time(time_passes, ~\"looking for entry point\", || middle::entry::find_entry_point(sess, crate));\n+    time(time_passes, ~\"looking for entry point\",\n+         || middle::entry::find_entry_point(sess, crate, ast_map));\n \n     let freevars = time(time_passes, ~\"freevar finding\", ||\n         freevars::annotate_freevars(def_map, crate));"}, {"sha": "47873b3fa1f6a86b223a6d90a6d886ede9ef65f3", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 77, "deletions": 52, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -15,73 +15,97 @@ use syntax::ast::{crate, node_id, item, item_fn};\n use syntax::codemap::span;\n use syntax::visit::{default_visitor, mk_vt, vt, Visitor, visit_crate, visit_item};\n use syntax::attr::{attrs_contains_name};\n+use syntax::ast_map;\n+use core::util;\n \n struct EntryContext {\n     session: Session,\n \n+    ast_map: ast_map::map,\n+\n+    // The top-level function called 'main'\n+    main_fn: Option<(node_id, span)>,\n+\n     // The function that has attribute named 'main'\n     attr_main_fn: Option<(node_id, span)>,\n \n-    // The functions that could be main functions\n-    main_fns: ~[Option<(node_id, span)>],\n-\n     // The function that has the attribute 'start' on it\n     start_fn: Option<(node_id, span)>,\n+\n+    // The functions that one might think are 'main' but aren't, e.g.\n+    // main functions not defined at the top level. For diagnostics.\n+    non_main_fns: ~[(node_id, span)],\n }\n \n type EntryVisitor = vt<@mut EntryContext>;\n \n-pub fn find_entry_point(session: Session, crate: @crate) {\n+pub fn find_entry_point(session: Session, crate: @crate, ast_map: ast_map::map) {\n+\n+    // FIXME #4404 android JNI hacks\n+    if *session.building_library ||\n+        session.targ_cfg.os == session::os_android {\n+        // No need to find a main function\n+        return;\n+    }\n \n     let ctxt = @mut EntryContext {\n         session: session,\n+        ast_map: ast_map,\n+        main_fn: None,\n         attr_main_fn: None,\n-        main_fns: ~[],\n         start_fn: None,\n+        non_main_fns: ~[],\n     };\n \n     visit_crate(crate, ctxt, mk_vt(@Visitor {\n         visit_item: |item, ctxt, visitor| find_item(item, ctxt, visitor),\n         .. *default_visitor()\n     }));\n \n-    check_duplicate_main(ctxt);\n+    configure_main(ctxt);\n }\n \n fn find_item(item: @item, ctxt: @mut EntryContext, visitor: EntryVisitor) {\n     match item.node {\n         item_fn(*) => {\n-            // If this is the main function, we must record it in the\n-            // session.\n-\n-            // FIXME #4404 android JNI hacks\n-            if !*ctxt.session.building_library ||\n-                ctxt.session.targ_cfg.os == session::os_android {\n-\n-                if ctxt.attr_main_fn.is_none() &&\n-                    item.ident == special_idents::main {\n-\n-                    ctxt.main_fns.push(Some((item.id, item.span)));\n+            if item.ident == special_idents::main {\n+                match ctxt.ast_map.find(&item.id) {\n+                    Some(&ast_map::node_item(_, path)) => {\n+                        if path.len() == 0 {\n+                            // This is a top-level function so can be 'main'\n+                            if ctxt.main_fn.is_none() {\n+                                ctxt.main_fn = Some((item.id, item.span));\n+                            } else {\n+                                ctxt.session.span_err(\n+                                    item.span,\n+                                    ~\"multiple 'main' functions\");\n+                            }\n+                        } else {\n+                            // This isn't main\n+                            ctxt.non_main_fns.push((item.id, item.span));\n+                        }\n+                    }\n+                    _ => util::unreachable()\n                 }\n+            }\n \n-                if attrs_contains_name(item.attrs, ~\"main\") {\n-                    if ctxt.attr_main_fn.is_none() {\n-                        ctxt.attr_main_fn = Some((item.id, item.span));\n-                    } else {\n-                        ctxt.session.span_err(\n-                            item.span,\n-                            ~\"multiple 'main' functions\");\n-                    }\n+            if attrs_contains_name(item.attrs, ~\"main\") {\n+                if ctxt.attr_main_fn.is_none() {\n+                    ctxt.attr_main_fn = Some((item.id, item.span));\n+                } else {\n+                    ctxt.session.span_err(\n+                        item.span,\n+                        ~\"multiple 'main' functions\");\n                 }\n+            }\n \n-                if attrs_contains_name(item.attrs, ~\"start\") {\n-                    if ctxt.start_fn.is_none() {\n-                        ctxt.start_fn = Some((item.id, item.span));\n-                    } else {\n-                        ctxt.session.span_err(\n-                            item.span,\n-                            ~\"multiple 'start' functions\");\n-                    }\n+            if attrs_contains_name(item.attrs, ~\"start\") {\n+                if ctxt.start_fn.is_none() {\n+                    ctxt.start_fn = Some((item.id, item.span));\n+                } else {\n+                    ctxt.session.span_err(\n+                        item.span,\n+                        ~\"multiple 'start' functions\");\n                 }\n             }\n         }\n@@ -91,29 +115,30 @@ fn find_item(item: @item, ctxt: @mut EntryContext, visitor: EntryVisitor) {\n     visit_item(item, ctxt, visitor);\n }\n \n-// main function checking\n-//\n-// be sure that there is only one main function\n-fn check_duplicate_main(ctxt: @mut EntryContext) {\n+fn configure_main(ctxt: @mut EntryContext) {\n     let this = &mut *ctxt;\n-    if this.attr_main_fn.is_none() && this.start_fn.is_none() {\n-        if this.main_fns.len() >= 1u {\n-            let mut i = 1u;\n-            while i < this.main_fns.len() {\n-                let (_, dup_main_span) = this.main_fns[i].unwrap();\n-                this.session.span_err(\n-                    dup_main_span,\n-                    ~\"multiple 'main' functions\");\n-                i += 1;\n-            }\n-            *this.session.entry_fn = this.main_fns[0];\n-            *this.session.entry_type = Some(session::EntryMain);\n-        }\n-    } else if !this.start_fn.is_none() {\n+    if this.start_fn.is_some() {\n         *this.session.entry_fn = this.start_fn;\n         *this.session.entry_type = Some(session::EntryStart);\n-    } else {\n+    } else if this.attr_main_fn.is_some() {\n         *this.session.entry_fn = this.attr_main_fn;\n         *this.session.entry_type = Some(session::EntryMain);\n+    } else if this.main_fn.is_some() {\n+        *this.session.entry_fn = this.main_fn;\n+        *this.session.entry_type = Some(session::EntryMain);\n+    } else {\n+        // No main function\n+        this.session.err(~\"main function not found\");\n+        if !this.non_main_fns.is_empty() {\n+            // There were some functions named 'main' though. Try to give the user a hint.\n+            this.session.note(~\"the main function must be defined at the crate level \\\n+                                 but you have one or more functions named 'main' that are not \\\n+                                 defined at the crate level. Either move the definition or attach \\\n+                                 the `#[main]` attribute to override this behavior.\");\n+            for this.non_main_fns.each |&(_, span)| {\n+                this.session.span_note(span, ~\"here is a function named 'main'\");\n+            }\n+        }\n+        this.session.abort_if_errors();\n     }\n }"}, {"sha": "3ea53aaa9765efe4d3818711b9f38c639646d81c", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -387,7 +387,7 @@ fn check_for_entry_fn(ccx: @mut CrateCtxt) {\n               Some(session::EntryStart) => check_start_fn_ty(ccx, id, sp),\n               None => tcx.sess.bug(~\"entry function without a type\")\n           },\n-          None => tcx.sess.err(~\"entry function not found\")\n+          None => tcx.sess.bug(~\"type checking without entry function\")\n         }\n     }\n }"}, {"sha": "b62214b12f9a03edc2af928eaca23d8942783c21", "filename": "src/test/compile-fail/elided-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Felided-test.rs?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: entry function not found\n+// error-pattern: main function not found\n \n // Since we're not compiling a test runner this function should be elided\n // and the build will fail because main doesn't exist"}, {"sha": "90ef7843d4bf921fad612d04673e4d7947e8e601", "filename": "src/test/compile-fail/main-wrong-location.rs", "status": "renamed", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-location.rs?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -8,10 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n-}\n-\n-mod foo {\n-    fn main() { //~ ERROR multiple 'main' functions\n-    }\n-}\n+mod m {\n+    // An inferred main entry point (that doesn't use #[main])\n+    // must appear at the top of the crate\n+    fn main() { } //~ NOTE here is a function named 'main'\n+}\n\\ No newline at end of file", "previous_filename": "src/test/compile-fail/multiple-main.rs"}, {"sha": "4bfdaf69480e6c1e8a9ed5e08a0b2bea30735cdb", "filename": "src/test/compile-fail/missing-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:entry function not found\n+// error-pattern:main function not found\n fn mian() { }"}, {"sha": "9bd63a8d646d36546153e532950d5e2b0c693b15", "filename": "src/test/run-pass/dupe-first-attr.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdupe-first-attr.rc?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -25,3 +25,5 @@ mod hello;\n \n #[cfg(target_os = \"android\")]\n mod hello;\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "cce3d8066ec1953c876d3217edc5ea678b7d562b", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f5c6d5b683b82e347247192061182cdd844cf5/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=98f5c6d5b683b82e347247192061182cdd844cf5", "patch": "@@ -22,6 +22,7 @@ mod rusti {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n mod m {\n+    #[main]\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n@@ -30,6 +31,7 @@ mod m {\n         }\n     }\n \n+    #[main]\n     #[cfg(target_arch = \"x86_64\")]\n     pub fn main() {\n         unsafe {\n@@ -41,6 +43,7 @@ mod m {\n \n #[cfg(target_os = \"win32\")]\n mod m {\n+    #[main]\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n@@ -52,6 +55,7 @@ mod m {\n \n #[cfg(target_os = \"android\")]\n mod m {\n+    #[main]\n     #[cfg(target_arch = \"arm\")]\n     pub fn main() {\n         unsafe {"}]}