{"sha": "7a6df8504f477faafe1c91e0c7fa83a63e31a825", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNmRmODUwNGY0NzdmYWFmZTFjOTFlMGM3ZmE4M2E2M2UzMWE4MjU=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-08T18:29:39Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-11T16:36:33Z"}, "message": "Get size of integers using libc", "tree": {"sha": "ab191e75923c87b910f0459670b18181a201eb01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab191e75923c87b910f0459670b18181a201eb01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6df8504f477faafe1c91e0c7fa83a63e31a825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6df8504f477faafe1c91e0c7fa83a63e31a825", "html_url": "https://github.com/rust-lang/rust/commit/7a6df8504f477faafe1c91e0c7fa83a63e31a825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6df8504f477faafe1c91e0c7fa83a63e31a825/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adfa2eb062bf825bb100dc2cfd7ab7df075f1824", "url": "https://api.github.com/repos/rust-lang/rust/commits/adfa2eb062bf825bb100dc2cfd7ab7df075f1824", "html_url": "https://github.com/rust-lang/rust/commit/adfa2eb062bf825bb100dc2cfd7ab7df075f1824"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "1e7c85c43521f5da942ce2b1c4d6fd926b108295", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7a6df8504f477faafe1c91e0c7fa83a63e31a825/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6df8504f477faafe1c91e0c7fa83a63e31a825/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=7a6df8504f477faafe1c91e0c7fa83a63e31a825", "patch": "@@ -522,6 +522,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     } else {\n                         let tp = this.force_ptr(this.read_scalar(args[1])?.not_undef()?)?;\n \n+                        let long = this.resolve_path(&[\"libc\", \"c_long\"])?.ty(*tcx);\n+                        let time_t = this.resolve_path(&[\"libc\", \"time_t\"])?.ty(*tcx);\n+\n+                        let tv_sec_size = this.layout_of(time_t)?.size;\n+                        let tv_nsec_size = this.layout_of(long)?.size;\n+\n                         let allocation = this.memory_mut().get_mut(tp.alloc_id)?;\n \n                         let mut sign = 1;\n@@ -533,13 +539,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                                 e.duration()\n                             });\n \n-                        let tv_sec_size = Size::from_bits(64);\n-                        let tv_nsec_size = Size::from_bits(64);\n-\n                         allocation.write_scalar(\n                             tcx,\n                             tp,\n-                            Scalar::from_int(sign * (duration.as_secs() as i64), tv_sec_size).into(),\n+                            Scalar::from_int(sign * (duration.as_secs() as i64), tv_sec_size)\n+                                .into(),\n                             tv_sec_size,\n                         )?;\n \n@@ -555,16 +559,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-                \"strlen\" => {\n-                    let ptr = this.read_scalar(args[0])?.not_undef()?;\n-                    let n = this.memory().read_c_str(ptr)?.len();\n-                    this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n-                }\n+            \"strlen\" => {\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let n = this.memory().read_c_str(ptr)?.len();\n+                this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n+            }\n \n-                // math functions\n-                \"cbrtf\" | \"coshf\" | \"sinhf\" | \"tanf\" => {\n-                    // FIXME: Using host floats.\n-                    let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n+            // math functions\n+            \"cbrtf\" | \"coshf\" | \"sinhf\" | \"tanf\" => {\n+                // FIXME: Using host floats.\n+                let f = f32::from_bits(this.read_scalar(args[0])?.to_u32()?);\n                 let f = match link_name {\n                     \"cbrtf\" => f.cbrt(),\n                     \"coshf\" => f.cosh(),"}]}