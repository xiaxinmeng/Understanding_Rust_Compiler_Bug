{"sha": "224aec213d62aa11758c864c871c341b7e7e7681", "node_id": "C_kwDOAAsO6NoAKDIyNGFlYzIxM2Q2MmFhMTE3NThjODY0Yzg3MWMzNDFiN2U3ZTc2ODE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-13T12:10:37Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-20T13:53:01Z"}, "message": "middle: add `implies_by` to `#[unstable]`\n\nIf part of a feature is stabilized and a new feature is added for the\nremaining parts, then the `implied_by` attribute can be used to indicate\nwhich now-stable feature previously contained a item. If the now-stable\nfeature is still active (if the user has only just updated rustc, for\nexample) then there will not be an stability error for uses of the item\nfrom the implied feature.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "cb5da753cb6ffaef584462a3a02273dc608ce321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb5da753cb6ffaef584462a3a02273dc608ce321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/224aec213d62aa11758c864c871c341b7e7e7681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/224aec213d62aa11758c864c871c341b7e7e7681", "html_url": "https://github.com/rust-lang/rust/commit/224aec213d62aa11758c864c871c341b7e7e7681", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/224aec213d62aa11758c864c871c341b7e7e7681/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1d5af24ece7d35d6f23a2782df5ffdaa132dd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d5af24ece7d35d6f23a2782df5ffdaa132dd82", "html_url": "https://github.com/rust-lang/rust/commit/a1d5af24ece7d35d6f23a2782df5ffdaa132dd82"}], "stats": {"total": 154, "additions": 150, "deletions": 4}, "files": [{"sha": "64a6f91f02206f6472f00a6ada3ef730d94c5045", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -142,6 +142,26 @@ pub enum StabilityLevel {\n         /// Relevant `rust-lang/rust` issue.\n         issue: Option<NonZeroU32>,\n         is_soft: bool,\n+        /// If part of a feature is stabilized and a new feature is added for the remaining parts,\n+        /// then the `implied_by` attribute is used to indicate which now-stable feature previously\n+        /// contained a item.\n+        ///\n+        /// ```pseudo-Rust\n+        /// #[unstable(feature = \"foo\", issue = \"...\")]\n+        /// fn foo() {}\n+        /// #[unstable(feature = \"foo\", issue = \"...\")]\n+        /// fn foobar() {}\n+        /// ```\n+        ///\n+        /// ...becomes...\n+        ///\n+        /// ```pseudo-Rust\n+        /// #[stable(feature = \"foo\", since = \"1.XX.X\")]\n+        /// fn foo() {}\n+        /// #[unstable(feature = \"foobar\", issue = \"...\", implied_by = \"foo\")]\n+        /// fn foobar() {}\n+        /// ```\n+        implied_by: Option<Symbol>,\n     },\n     /// `#[stable]`\n     Stable {\n@@ -256,6 +276,7 @@ where\n                     let mut issue = None;\n                     let mut issue_num = None;\n                     let mut is_soft = false;\n+                    let mut implied_by = None;\n                     for meta in metas {\n                         let Some(mi) = meta.meta_item() else {\n                             handle_errors(\n@@ -321,6 +342,11 @@ where\n                                 }\n                                 is_soft = true;\n                             }\n+                            sym::implied_by => {\n+                                if !get(mi, &mut implied_by) {\n+                                    continue 'outer;\n+                                }\n+                            }\n                             _ => {\n                                 handle_errors(\n                                     &sess.parse_sess,\n@@ -345,7 +371,7 @@ where\n                                 );\n                                 continue;\n                             }\n-                            let level = Unstable { reason, issue: issue_num, is_soft };\n+                            let level = Unstable { reason, issue: issue_num, is_soft, implied_by };\n                             if sym::unstable == meta_name {\n                                 stab = Some((Stability { level, feature }, attr.span));\n                             } else {"}, {"sha": "63f66be1507a2d6776e090b066445b25f790e877", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -423,7 +423,9 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         match stability {\n             Some(Stability {\n-                level: attr::Unstable { reason, issue, is_soft }, feature, ..\n+                level: attr::Unstable { reason, issue, is_soft, implied_by },\n+                feature,\n+                ..\n             }) => {\n                 if span.allows_unstable(feature) {\n                     debug!(\"stability: skipping span={:?} since it is internal\", span);\n@@ -433,6 +435,13 @@ impl<'tcx> TyCtxt<'tcx> {\n                     return EvalResult::Allow;\n                 }\n \n+                // If this item was previously part of a now-stabilized feature which is still\n+                // active (i.e. the user hasn't removed the attribute for the stabilized feature\n+                // yet) then allow use of this item.\n+                if let Some(implied_by) = implied_by && self.features().active(implied_by) {\n+                    return EvalResult::Allow;\n+                }\n+\n                 // When we're compiling the compiler itself we may pull in\n                 // crates from crates.io, but those crates may depend on other\n                 // crates also pulled in from crates.io. We want to ideally be"}, {"sha": "a15a42bd76f51a902feb870b17b5ab4f20f2f8cd", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -637,6 +637,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n                     reason: Some(Symbol::intern(reason)),\n                     issue: NonZeroU32::new(27812),\n                     is_soft: false,\n+                    implied_by: None,\n                 },\n                 feature: sym::rustc_private,\n             };"}, {"sha": "2b5eb12a8a890e39a26b902b8fa790856cdeaa45", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -796,9 +796,16 @@ impl<'a> Resolver<'a> {\n     ) {\n         let span = path.span;\n         if let Some(stability) = &ext.stability {\n-            if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {\n+            if let StabilityLevel::Unstable { reason, issue, is_soft, implied_by } = stability.level\n+            {\n                 let feature = stability.feature;\n-                if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n+\n+                let is_allowed = |feature| {\n+                    self.active_features.contains(&feature) || span.allows_unstable(feature)\n+                };\n+                let allowed_by_implication =\n+                    implied_by.map(|feature| is_allowed(feature)).unwrap_or(false);\n+                if !is_allowed(feature) && !allowed_by_implication {\n                     let lint_buffer = &mut self.lint_buffer;\n                     let soft_handler =\n                         |lint, span, msg: &_| lint_buffer.buffer_lint(lint, node_id, span, msg);"}, {"sha": "2ac1ecfe87eb5f11820b3456149ecd5fab79f9dc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -800,6 +800,7 @@ symbols! {\n         impl_lint_pass,\n         impl_macros,\n         impl_trait_in_bindings,\n+        implied_by,\n         import,\n         import_shadowing,\n         imported_main,"}, {"sha": "468be1bc144508b1e094ce66eb3d6872de7dba21", "filename": "src/test/ui/stability-attribute/auxiliary/stability-attribute-implies.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstability-attribute-implies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstability-attribute-implies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fauxiliary%2Fstability-attribute-implies.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -0,0 +1,8 @@\n+#![feature(staged_api)]\n+#![stable(feature = \"stability_attribute_implies\", since = \"1.0.0\")]\n+\n+#[stable(feature = \"foo\", since = \"1.62.0\")]\n+pub fn foo() {}\n+\n+#[unstable(feature = \"foobar\", issue = \"1\", implied_by = \"foo\")]\n+pub fn foobar() {}"}, {"sha": "947f9f73eff11a663ac21dd597d3a57c285169b3", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-no-feature.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -0,0 +1,13 @@\n+// aux-build:stability-attribute-implies.rs\n+\n+// Tests that despite the `foobar` feature being implied by now-stable feature `foo`, if `foobar`\n+// isn't allowed in this crate then an error will be emitted.\n+\n+extern crate stability_attribute_implies;\n+use stability_attribute_implies::{foo, foobar};\n+//~^ ERROR use of unstable library feature 'foobar'\n+\n+fn main() {\n+    foo(); // no error - stable\n+    foobar(); //~ ERROR use of unstable library feature 'foobar'\n+}"}, {"sha": "c2331f6766c4fc0d0ac5bccc2d17701b93b0fab4", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-no-feature.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-no-feature.stderr?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -0,0 +1,21 @@\n+error[E0658]: use of unstable library feature 'foobar'\n+  --> $DIR/stability-attribute-implies-no-feature.rs:7:40\n+   |\n+LL | use stability_attribute_implies::{foo, foobar};\n+   |                                        ^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(foobar)]` to the crate attributes to enable\n+\n+error[E0658]: use of unstable library feature 'foobar'\n+  --> $DIR/stability-attribute-implies-no-feature.rs:12:5\n+   |\n+LL |     foobar();\n+   |     ^^^^^^\n+   |\n+   = note: see issue #1 <https://github.com/rust-lang/rust/issues/1> for more information\n+   = help: add `#![feature(foobar)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "527639ec70b760bf0b2fca66857c486de4d00ca8", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-stable.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:stability-attribute-implies.rs\n+#![deny(stable_features)]\n+#![feature(foo)]\n+//~^ ERROR the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+\n+// Tests that the use of `implied_by` in the `#[unstable]` attribute results in a diagnostic\n+// mentioning partial stabilization, and that given the implied unstable feature is unused (there\n+// is no `foobar` call), that the compiler suggests removing the flag.\n+\n+extern crate stability_attribute_implies;\n+use stability_attribute_implies::foo;\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "c8767e85a684ab9b205260a6e872788088e89f3b", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-stable.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -0,0 +1,14 @@\n+error: the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+  --> $DIR/stability-attribute-implies-using-stable.rs:3:12\n+   |\n+LL | #![feature(foo)]\n+   |            ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/stability-attribute-implies-using-stable.rs:2:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d6ad4d3510e7e2492087db0aa1fa0271314577d1", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-unstable.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:stability-attribute-implies.rs\n+#![deny(stable_features)]\n+#![feature(foo)]\n+//~^ ERROR the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+\n+// Tests that the use of `implied_by` in the `#[unstable]` attribute results in a diagnostic\n+// mentioning partial stabilization and that given the implied unstable feature is used (there is a\n+// `foobar` call), that the compiler suggests changing to that feature and doesn't error about its\n+// use.\n+\n+extern crate stability_attribute_implies;\n+use stability_attribute_implies::{foo, foobar};\n+\n+fn main() {\n+    foo();\n+    foobar(); // no error!\n+}"}, {"sha": "35cbac6035cebb3d03c4a16575049d0742eb2e83", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/224aec213d62aa11758c864c871c341b7e7e7681/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr?ref=224aec213d62aa11758c864c871c341b7e7e7681", "patch": "@@ -0,0 +1,14 @@\n+error: the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+  --> $DIR/stability-attribute-implies-using-unstable.rs:3:12\n+   |\n+LL | #![feature(foo)]\n+   |            ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/stability-attribute-implies-using-unstable.rs:2:9\n+   |\n+LL | #![deny(stable_features)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}