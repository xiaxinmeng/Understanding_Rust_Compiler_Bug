{"sha": "ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "node_id": "C_kwDOAAsO6NoAKGVmMjU5NjE1NWQ4NjU5Yjk1NDZhZjlhZjYzNjBlMGZmZDZmZmE1YTI", "commit": {"author": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2023-01-31T22:23:37Z"}, "committer": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2023-01-31T22:31:12Z"}, "message": "update some dependencies", "tree": {"sha": "b42518b388a696b894ab931d930baa18cb56a04e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b42518b388a696b894ab931d930baa18cb56a04e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcFQWTVq3UZxSk8EiC1KuORxnTOUFAmPZlrIACgkQC1KuORxn\nTOUhCA//eWA11kOlg7CHQiHl7Y/2SHcp3BZhJKhsOrlrRRvfDYgIIcrFo3tZcUMs\nSSqteOjy4HnptIUruFF1Hy7f4VUn8eAlw5RJKYpYJDYd7MswEr9YjIOZcpkJuENN\n5Dva8pS8n+SaaxiX9oY1ODQlVn+gqy3weRnehIfk4naYbqkCrUIZgdc7N5e+VpGR\n/XS9FCEe+dOBIf4Jnnzg8qUBvNpoGHeVa7YLWNLMPssuE2UvIMEcc4D/e6RvorJJ\nMPE2odbJldR3tZwtbiHCzPjzgW7du9dKibHIRZdri6c3TOJMGDrGuPhkqToGh8Pf\nNbix8oYELfFdZ/38QAgW9JzM0u7rajWjAFPuM3FzYC0umbHn+rAUnJ51xd4YtOWB\n6L4J1SePt6Acru0KDfsF/yGXRBQbXIFEeqf4ZmYZtIHJyIuJYC57GpzNFzfJQiMI\nMhZridceAcujHe1RqsNXmvTlvazMAttQ0VzIxUKAiY01IVhSGwuGZBHh7lrjJWfz\nWfaRAdQyASqwaYyt+solFxM/jUFAefD9qGOtFbaUN3LoqKD61sYRX0Kz6Z+M8lms\nJn+tYKBLN8URYG3vloT+N28IW18nAF0tr5AnHEApkUrDzyQb2PKYjrg7wTBy+ZMi\nmB89FR2mPkBM4lBtEg8yksnEXfAeCZJZaSSRw5lGnjlJOf9fVLg=\n=3ocl\n-----END PGP SIGNATURE-----", "payload": "tree b42518b388a696b894ab931d930baa18cb56a04e\nparent 2880dccabb8244a59ae012e64dede719b173ce5a\nauthor KaDiWa <kalle.wachsmuth@gmail.com> 1675203817 +0100\ncommitter KaDiWa <kalle.wachsmuth@gmail.com> 1675204272 +0100\n\nupdate some dependencies\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "html_url": "https://github.com/rust-lang/rust/commit/ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/comments", "author": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2880dccabb8244a59ae012e64dede719b173ce5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2880dccabb8244a59ae012e64dede719b173ce5a", "html_url": "https://github.com/rust-lang/rust/commit/2880dccabb8244a59ae012e64dede719b173ce5a"}], "stats": {"total": 109, "additions": 60, "deletions": 49}, "files": [{"sha": "70d1268090f6e5dca8f3fc87333f7f95a7be3d00", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "patch": "@@ -42,7 +42,7 @@ filetime = \"0.2\"\n rustc-workspace-hack = \"1.0\"\n \n # UI test dependencies\n-clap = { version = \"3.1\", features = [\"derive\"] }\n+clap = { version = \"4.1.4\", features = [\"derive\"] }\n clippy_utils = { path = \"clippy_utils\" }\n derive-new = \"0.5\"\n if_chain = \"1.0\""}, {"sha": "c3f8a782d273a01556bca0e7a34f7ec2e7f2aec8", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "patch": "@@ -5,7 +5,7 @@ edition = \"2021\"\n \n [dependencies]\n aho-corasick = \"0.7\"\n-clap = \"3.2\"\n+clap = \"4.1.4\"\n indoc = \"1.0\"\n itertools = \"0.10.1\"\n opener = \"0.5\""}, {"sha": "b2d67a72fd2b8aa99425a7430af6eec1adf92593", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 55, "deletions": 44, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "patch": "@@ -2,7 +2,7 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use clap::{Arg, ArgAction, ArgMatches, Command, PossibleValue};\n+use clap::{Arg, ArgAction, ArgMatches, Command};\n use clippy_dev::{bless, dogfood, fmt, lint, new_lint, serve, setup, update_lints};\n use indoc::indoc;\n \n@@ -110,24 +110,37 @@ fn get_clap_config() -> ArgMatches {\n             Command::new(\"bless\").about(\"bless the test output changes\").arg(\n                 Arg::new(\"ignore-timestamp\")\n                     .long(\"ignore-timestamp\")\n+                    .action(ArgAction::SetTrue)\n                     .help(\"Include files updated before clippy was built\"),\n             ),\n             Command::new(\"dogfood\").about(\"Runs the dogfood test\").args([\n-                Arg::new(\"fix\").long(\"fix\").help(\"Apply the suggestions when possible\"),\n+                Arg::new(\"fix\")\n+                    .long(\"fix\")\n+                    .action(ArgAction::SetTrue)\n+                    .help(\"Apply the suggestions when possible\"),\n                 Arg::new(\"allow-dirty\")\n                     .long(\"allow-dirty\")\n+                    .action(ArgAction::SetTrue)\n                     .help(\"Fix code even if the working directory has changes\")\n                     .requires(\"fix\"),\n                 Arg::new(\"allow-staged\")\n                     .long(\"allow-staged\")\n+                    .action(ArgAction::SetTrue)\n                     .help(\"Fix code even if the working directory has staged changes\")\n                     .requires(\"fix\"),\n             ]),\n             Command::new(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n                 .args([\n-                    Arg::new(\"check\").long(\"check\").help(\"Use the rustfmt --check option\"),\n-                    Arg::new(\"verbose\").short('v').long(\"verbose\").help(\"Echo commands run\"),\n+                    Arg::new(\"check\")\n+                        .long(\"check\")\n+                        .action(ArgAction::SetTrue)\n+                        .help(\"Use the rustfmt --check option\"),\n+                    Arg::new(\"verbose\")\n+                        .short('v')\n+                        .long(\"verbose\")\n+                        .action(ArgAction::SetTrue)\n+                        .help(\"Echo commands run\"),\n                 ]),\n             Command::new(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n@@ -140,13 +153,17 @@ fn get_clap_config() -> ArgMatches {\n                     * all lints are registered in the lint store\",\n                 )\n                 .args([\n-                    Arg::new(\"print-only\").long(\"print-only\").help(\n-                        \"Print a table of lints to STDOUT. \\\n-                        This does not include deprecated and internal lints. \\\n-                        (Does not modify any files)\",\n-                    ),\n+                    Arg::new(\"print-only\")\n+                        .long(\"print-only\")\n+                        .action(ArgAction::SetTrue)\n+                        .help(\n+                            \"Print a table of lints to STDOUT. \\\n+                            This does not include deprecated and internal lints. \\\n+                            (Does not modify any files)\",\n+                        ),\n                     Arg::new(\"check\")\n                         .long(\"check\")\n+                        .action(ArgAction::SetTrue)\n                         .help(\"Checks that `cargo dev update_lints` has been run. Used on CI.\"),\n                 ]),\n             Command::new(\"new_lint\")\n@@ -156,41 +173,37 @@ fn get_clap_config() -> ArgMatches {\n                         .short('p')\n                         .long(\"pass\")\n                         .help(\"Specify whether the lint runs during the early or late pass\")\n-                        .takes_value(true)\n-                        .value_parser([PossibleValue::new(\"early\"), PossibleValue::new(\"late\")])\n+                        .value_parser([\"early\", \"late\"])\n                         .conflicts_with(\"type\")\n                         .required_unless_present(\"type\"),\n                     Arg::new(\"name\")\n                         .short('n')\n                         .long(\"name\")\n                         .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n-                        .takes_value(true)\n                         .required(true),\n                     Arg::new(\"category\")\n                         .short('c')\n                         .long(\"category\")\n                         .help(\"What category the lint belongs to\")\n                         .default_value(\"nursery\")\n                         .value_parser([\n-                            PossibleValue::new(\"style\"),\n-                            PossibleValue::new(\"correctness\"),\n-                            PossibleValue::new(\"suspicious\"),\n-                            PossibleValue::new(\"complexity\"),\n-                            PossibleValue::new(\"perf\"),\n-                            PossibleValue::new(\"pedantic\"),\n-                            PossibleValue::new(\"restriction\"),\n-                            PossibleValue::new(\"cargo\"),\n-                            PossibleValue::new(\"nursery\"),\n-                            PossibleValue::new(\"internal\"),\n-                            PossibleValue::new(\"internal_warn\"),\n-                        ])\n-                        .takes_value(true),\n-                    Arg::new(\"type\")\n-                        .long(\"type\")\n-                        .help(\"What directory the lint belongs in\")\n-                        .takes_value(true)\n-                        .required(false),\n-                    Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\"),\n+                            \"style\",\n+                            \"correctness\",\n+                            \"suspicious\",\n+                            \"complexity\",\n+                            \"perf\",\n+                            \"pedantic\",\n+                            \"restriction\",\n+                            \"cargo\",\n+                            \"nursery\",\n+                            \"internal\",\n+                            \"internal_warn\",\n+                        ]),\n+                    Arg::new(\"type\").long(\"type\").help(\"What directory the lint belongs in\"),\n+                    Arg::new(\"msrv\")\n+                        .long(\"msrv\")\n+                        .action(ArgAction::SetTrue)\n+                        .help(\"Add MSRV config code to the lint\"),\n                 ]),\n             Command::new(\"setup\")\n                 .about(\"Support for setting up your personal development environment\")\n@@ -201,13 +214,12 @@ fn get_clap_config() -> ArgMatches {\n                         .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n-                                .help(\"Remove the dependencies added with 'cargo dev setup intellij'\")\n-                                .required(false),\n+                                .action(ArgAction::SetTrue)\n+                                .help(\"Remove the dependencies added with 'cargo dev setup intellij'\"),\n                             Arg::new(\"rustc-repo-path\")\n                                 .long(\"repo-path\")\n                                 .short('r')\n                                 .help(\"The path to a rustc repo that will be used for setting the dependencies\")\n-                                .takes_value(true)\n                                 .value_name(\"path\")\n                                 .conflicts_with(\"remove\")\n                                 .required(true),\n@@ -217,26 +229,26 @@ fn get_clap_config() -> ArgMatches {\n                         .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n-                                .help(\"Remove the pre-commit hook added with 'cargo dev setup git-hook'\")\n-                                .required(false),\n+                                .action(ArgAction::SetTrue)\n+                                .help(\"Remove the pre-commit hook added with 'cargo dev setup git-hook'\"),\n                             Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n                                 .short('f')\n-                                .help(\"Forces the override of an existing git pre-commit hook\")\n-                                .required(false),\n+                                .action(ArgAction::SetTrue)\n+                                .help(\"Forces the override of an existing git pre-commit hook\"),\n                         ]),\n                     Command::new(\"vscode-tasks\")\n                         .about(\"Add several tasks to vscode for formatting, validation and testing\")\n                         .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n-                                .help(\"Remove the tasks added with 'cargo dev setup vscode-tasks'\")\n-                                .required(false),\n+                                .action(ArgAction::SetTrue)\n+                                .help(\"Remove the tasks added with 'cargo dev setup vscode-tasks'\"),\n                             Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n                                 .short('f')\n-                                .help(\"Forces the override of existing vscode tasks\")\n-                                .required(false),\n+                                .action(ArgAction::SetTrue)\n+                                .help(\"Forces the override of existing vscode tasks\"),\n                         ]),\n                 ]),\n             Command::new(\"remove\")\n@@ -295,6 +307,7 @@ fn get_clap_config() -> ArgMatches {\n                     .help(\"The new name of the lint\"),\n                 Arg::new(\"uplift\")\n                     .long(\"uplift\")\n+                    .action(ArgAction::SetTrue)\n                     .help(\"This lint will be uplifted into rustc\"),\n             ]),\n             Command::new(\"deprecate\").about(\"Deprecates the given lint\").args([\n@@ -305,8 +318,6 @@ fn get_clap_config() -> ArgMatches {\n                 Arg::new(\"reason\")\n                     .long(\"reason\")\n                     .short('r')\n-                    .required(false)\n-                    .takes_value(true)\n                     .help(\"The reason for deprecation\"),\n             ]),\n         ])"}, {"sha": "989e4d3fa56c545d67e4666f9a61685c7b08205f", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "patch": "@@ -9,7 +9,7 @@ keywords = [\"clippy\", \"lint\", \"plugin\"]\n edition = \"2021\"\n \n [dependencies]\n-cargo_metadata = \"0.14\"\n+cargo_metadata = \"0.15.3\"\n clippy_utils = { path = \"../clippy_utils\" }\n declare_clippy_lint = { path = \"../declare_clippy_lint\" }\n if_chain = \"1.0\""}, {"sha": "653121af54dc356ab1d07077ae09b561a3adda59", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef2596155d8659b9546af9af6360e0ffd6ffa5a2/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=ef2596155d8659b9546af9af6360e0ffd6ffa5a2", "patch": "@@ -10,8 +10,8 @@ edition = \"2021\"\n publish = false\n \n [dependencies]\n-cargo_metadata = \"0.14\"\n-clap = \"3.2\"\n+cargo_metadata = \"0.15.3\"\n+clap = \"4.1.4\"\n crossbeam-channel = \"0.5.6\"\n flate2 = \"1.0\"\n rayon = \"1.5.1\""}]}