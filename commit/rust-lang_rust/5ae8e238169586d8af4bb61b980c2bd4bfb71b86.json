{"sha": "5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "node_id": "C_kwDOAAsO6NoAKDVhZThlMjM4MTY5NTg2ZDhhZjRiYjYxYjk4MGMyYmQ0YmZiNzFiODY", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-06T20:15:10Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-30T21:51:33Z"}, "message": "Mention fn coercion rules (needs to be expanded)", "tree": {"sha": "c3bc37ddfc0213262251ed54860c21c2234567b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3bc37ddfc0213262251ed54860c21c2234567b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "html_url": "https://github.com/rust-lang/rust/commit/5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "153ed09fb3a0e7ed8d42749720e8a0b4fac50d74", "url": "https://api.github.com/repos/rust-lang/rust/commits/153ed09fb3a0e7ed8d42749720e8a0b4fac50d74", "html_url": "https://github.com/rust-lang/rust/commit/153ed09fb3a0e7ed8d42749720e8a0b4fac50d74"}], "stats": {"total": 74, "additions": 56, "deletions": 18}, "files": [{"sha": "554a70265d43ce04b4fd84d806b0583750cecb45", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -1865,6 +1865,18 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         self.check_and_note_conflicting_crates(diag, terr);\n \n         self.note_and_explain_type_err(diag, terr, cause, span, cause.body_id.to_def_id());\n+        if let Some(exp_found) = exp_found\n+            && let exp_found = TypeError::Sorts(exp_found)\n+            && exp_found != terr\n+        {\n+            self.note_and_explain_type_err(\n+                diag,\n+                exp_found,\n+                cause,\n+                span,\n+                cause.body_id.to_def_id(),\n+            );\n+        }\n \n         if let Some(ValuePairs::PolyTraitRefs(exp_found)) = values\n             && let ty::Closure(def_id, _) = exp_found.expected.skip_binder().self_ty().kind()"}, {"sha": "39b3c98f0a5ccadd22b3e0ad79ad8c6c0472eccb", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -218,6 +218,13 @@ impl<T> Trait<T> for X {\n                             );\n                         }\n                     }\n+                    (ty::FnPtr(_), ty::FnDef(def, _))\n+                    if let hir::def::DefKind::Fn = tcx.def_kind(def) => {\n+                        diag.note(\n+                            \"when the arguments and return types match, functions can be coerced \\\n+                             to function pointers\",\n+                        );\n+                    }\n                     _ => {}\n                 }\n                 debug!("}, {"sha": "d188199773a5dc201f73a8c24dbda23435c1702f", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -28,7 +28,7 @@ impl<T> ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift, PartialEq, Eq)]\n #[rustc_pass_by_value]\n pub enum TypeError<'tcx> {\n     Mismatch,"}, {"sha": "38cf23ddc3895914a3f2dc037b85d18babae02fe", "filename": "tests/ui/argument-suggestions/two-mismatch-notes.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Ftwo-mismatch-notes.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -11,6 +11,7 @@ LL |     foo(f, w);\n    |         ^\n    = note: expected fn pointer `fn(i32)`\n                  found fn item `fn(u32) {f}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: expected `Wrapper<i32>`, found `Wrapper<isize>`\n   --> $DIR/two-mismatch-notes.rs:10:12\n    |"}, {"sha": "99db0c1bf3bc94ae388f30b49d4026796a0fd153", "filename": "tests/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+error[E0271]: type mismatch resolving `<UintStruct as TheTrait<&isize>>::A == &isize`\n   --> $DIR/associated-types-eq-hr.rs:87:11\n    |\n LL |     foo::<UintStruct>();\n-   |           ^^^^^^^^^^ type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n+   |           ^^^^^^^^^^ type mismatch resolving `<UintStruct as TheTrait<&isize>>::A == &isize`\n    |\n note: expected this to be `&isize`\n   --> $DIR/associated-types-eq-hr.rs:26:14\n@@ -20,11 +20,11 @@ LL | where\n LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n-error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+error[E0271]: type mismatch resolving `<IntStruct as TheTrait<&isize>>::A == &usize`\n   --> $DIR/associated-types-eq-hr.rs:91:11\n    |\n LL |     bar::<IntStruct>();\n-   |           ^^^^^^^^^ type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n+   |           ^^^^^^^^^ type mismatch resolving `<IntStruct as TheTrait<&isize>>::A == &usize`\n    |\n note: expected this to be `&usize`\n   --> $DIR/associated-types-eq-hr.rs:14:14"}, {"sha": "384561f8ccd7e0496ef3c867ff4e015f8955a958", "filename": "tests/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -77,10 +77,10 @@ where\n \n fn main() {\n     accepts_trait(returns_opaque());\n-    //~^ ERROR type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived());\n-    //~^ ERROR type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n     //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n@@ -89,7 +89,7 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`"}, {"sha": "f5c6d82471a8bd0967576990b76fa335e7479927", "filename": "tests/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -132,7 +132,7 @@ note: required by a bound in `accepts_generic_trait`\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n-error[E0271]: type mismatch resolving `<impl Trait + 'static as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:19\n    |\n LL | fn returns_opaque() -> impl Trait + 'static {\n@@ -155,7 +155,7 @@ help: consider constraining the associated type `<impl Trait + 'static as Trait>\n LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n    |                                  +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl DerivedTrait + 'static as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:82:19\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n@@ -222,7 +222,7 @@ note: required by a bound in `accepts_trait`\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<()> + 'static as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:27\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {"}, {"sha": "c7899338197d8e56f8ff7c165bd5fbcbe33d1108", "filename": "tests/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -46,6 +46,7 @@ LL |         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n    |\n    = note: expected fn pointer `unsafe extern \"C\" fn(_, _)`\n                  found fn item `unsafe extern \"C\" fn(_, _, ...) {foo}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-1.rs:26:54\n@@ -57,6 +58,7 @@ LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n    |\n    = note: expected fn pointer `extern \"C\" fn(_, _, ...)`\n                  found fn item `extern \"C\" fn(_, _) {bar}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error[E0617]: can't pass `f32` to variadic function\n   --> $DIR/variadic-ffi-1.rs:28:19"}, {"sha": "bed59d4af6df1c2a06846b4c2d529789f5c1003b", "filename": "tests/ui/fn/fn-pointer-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Ffn-pointer-mismatch.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -78,6 +78,7 @@ LL |     let e: &fn(u32) -> u32 = &foo;\n    = note: expected reference `&fn(u32) -> u32`\n               found reference `&fn(u32) -> u32 {foo}`\n    = note: fn items are distinct from fn pointers\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to 6 previous errors\n "}, {"sha": "12ff113c913471fc6b7fd77fb34c2e8dd9295059", "filename": "tests/ui/fn/signature-error-reporting-under-verbose.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.rs?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -12,4 +12,5 @@ fn main() {\n     //~| NOTE expected fn pointer, found fn item\n     //~| NOTE expected fn pointer `fn(i32, u32)`\n     //~| NOTE arguments to this function are incorrect\n+    //~| NOTE when the arguments and return types match, functions can be coerced to function pointers\n }"}, {"sha": "f4498db7259e37f07c277f923e7cc56130fb4d57", "filename": "tests/ui/fn/signature-error-reporting-under-verbose.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn%2Fsignature-error-reporting-under-verbose.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -8,6 +8,7 @@ LL |     needs_ptr(foo);\n    |\n    = note: expected fn pointer `fn(i32, u32)`\n                  found fn item `fn(i32, i32) {foo}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/signature-error-reporting-under-verbose.rs:5:4\n    |"}, {"sha": "9aa0b239e4786f252dd0e4234422b76396ec73ff", "filename": "tests/ui/generic-associated-types/collections-project-default.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -9,6 +9,7 @@ LL |     res\n    |\n    = note: expected associated type `<C as Collection<i32>>::Sibling<f32>`\n               found associated type `<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>`\n+   = note: an associated type was expected, but a different one was found\n \n error: aborting due to previous error\n "}, {"sha": "04184fce921f2a66932abc312e7be4f57defa926", "filename": "tests/ui/generic-associated-types/issue-79422.extended.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-79422.extended.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -14,11 +14,11 @@ help: add missing lifetime argument\n LL |         as Box<dyn MapLike<u8, u8, VRefCont<'a> = dyn RefCont<'_, u8>>>;\n    |                                            ++++\n \n-error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n+error[E0271]: type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == dyn RefCont<'_, u8>`\n   --> $DIR/issue-79422.rs:44:13\n    |\n LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == (dyn RefCont<'_, u8> + 'static)`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<BTreeMap<u8, u8> as MapLike<u8, u8>>::VRefCont<'_> == dyn RefCont<'_, u8>`\n    |\n note: expected this to be `(dyn RefCont<'_, u8> + 'static)`\n   --> $DIR/issue-79422.rs:28:25"}, {"sha": "86198c3f7fd7945c374da3307fc622547c120a39", "filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+error[E0271]: type mismatch resolving `<L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&u8,)>>::O == <_ as Ty<'r>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:39:9\n    |\n LL |       let v = Unit2.m(\n@@ -10,7 +10,7 @@ LL | |             f: |x| {\n ...  |\n LL | |             },\n LL | |         },\n-   | |_________^ type mismatch resolving `for<'r> <L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+   | |_________^ type mismatch resolving `<L<[closure@issue-62203-hrtb-ice.rs:42:16]> as T0<'r, (&u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14"}, {"sha": "52f25d2458c9190bc469f5efb1f99136970c8ae1", "filename": "tests/ui/impl-trait/equality2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fimpl-trait%2Fequality2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fimpl-trait%2Fequality2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fequality2.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -54,6 +54,7 @@ LL |     x = (x.1,\n    |\n    = note: expected opaque type `impl Foo` (`u32`)\n               found opaque type `impl Foo` (`i32`)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n error[E0308]: mismatched types\n   --> $DIR/equality2.rs:41:10\n@@ -69,6 +70,7 @@ LL |          x.0);\n    |\n    = note: expected opaque type `impl Foo` (`i32`)\n               found opaque type `impl Foo` (`u32`)\n+   = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "fcb45affe2c18cc78ccfed3b3482ac18ced196af", "filename": "tests/ui/issues/issue-10764.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fissues%2Fissue-10764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fissues%2Fissue-10764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-10764.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -8,6 +8,7 @@ LL | fn main() { f(bar) }\n    |\n    = note: expected fn pointer `fn()`\n                  found fn item `extern \"C\" fn() {bar}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/issue-10764.rs:1:4\n    |"}, {"sha": "40d3ae30a87c680811cdaad65b9969e1f56090d4", "filename": "tests/ui/issues/issue-39970.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fissues%2Fissue-39970.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fissues%2Fissue-39970.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-39970.rs?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -17,5 +17,5 @@ impl Visit for () where\n \n fn main() {\n     <() as Visit>::visit();\n-    //~^ ERROR type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n+    //~^ ERROR type mismatch resolving `<() as Array<'a>>::Element == ()`\n }"}, {"sha": "8344b88c3beab7e8e6863166be7d99286c12ddf9", "filename": "tests/ui/issues/issue-39970.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fissues%2Fissue-39970.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fissues%2Fissue-39970.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-39970.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -1,8 +1,8 @@\n-error[E0271]: type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n+error[E0271]: type mismatch resolving `<() as Array<'a>>::Element == ()`\n   --> $DIR/issue-39970.rs:19:5\n    |\n LL |     <() as Visit>::visit();\n-   |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `for<'a> <() as Array<'a>>::Element == ()`\n+   |     ^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<() as Array<'a>>::Element == ()`\n    |\n note: expected this to be `()`\n   --> $DIR/issue-39970.rs:10:20"}, {"sha": "e3a0646550cb20c7f4e1a8006203fa56e0451cc6", "filename": "tests/ui/mismatched_types/normalize-fn-sig.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fnormalize-fn-sig.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -8,6 +8,7 @@ LL |     needs_i32_ref_fn(foo::<()>);\n    |\n    = note: expected fn pointer `fn(&'static i32, i32)`\n                  found fn item `fn(i32, &'static i32) {foo::<()>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/normalize-fn-sig.rs:11:4\n    |"}, {"sha": "bb5bc6f66a5f24db06667a1eabb8b863ae9cf911", "filename": "tests/ui/regions/region-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -6,6 +6,7 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |\n    = note: expected fn pointer `for<'a, 'b, 'c, 'd> fn(&'a mut &'b isize, &'c mut &'d isize)`\n                  found fn item `for<'a, 'b> fn(&'a mut &isize, &'b mut &isize) {a::<'_, '_>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "dbe9e9b1a2e56eb9de47d959f086d4a7a1645aba", "filename": "tests/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -6,6 +6,7 @@ LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a;\n    |\n    = note: expected fn pointer `for<'a, 'b, 'c, 'd, 'e, 'f> fn(&'a mut &'b isize, &'c mut &'d isize, &'e mut &'f isize)`\n                  found fn item `for<'a, 'b, 'c> fn(&'a mut &isize, &'b mut &isize, &'c mut &isize) {a::<'_, '_, '_>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "766a3d0337c06019f71da037a035b743a784f9bb", "filename": "tests/ui/regions/regions-fn-subtyping-return-static-fail.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-fn-subtyping-return-static-fail.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -8,6 +8,7 @@ LL |     want_G(baz);\n    |\n    = note: expected fn pointer `for<'cx> fn(&'cx S) -> &'static S`\n                  found fn item `for<'a> fn(&'a S) -> &'a S {baz}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n note: function defined here\n   --> $DIR/regions-fn-subtyping-return-static-fail.rs:20:4\n    |"}, {"sha": "df0fd069edcad5a8bf02ba74d13b4fe6f97ba889", "filename": "tests/ui/regions/regions-lifetime-bounds-on-fns.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -6,6 +6,7 @@ LL |     let _: fn(&mut &isize, &mut &isize) = a;\n    |\n    = note: expected fn pointer `for<'a, 'b, 'c, 'd> fn(&'a mut &'b isize, &'c mut &'d isize)`\n                  found fn item `for<'a, 'b> fn(&'a mut &isize, &'b mut &isize) {a::<'_, '_>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "9f9034a30c736378396c010ffd5a1afc80da6291", "filename": "tests/ui/reify-intrinsic.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freify-intrinsic.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -8,6 +8,7 @@ LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::tr\n    |\n    = note: expected fn pointer `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n                  found fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error[E0606]: casting `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}` as `unsafe extern \"rust-intrinsic\" fn(isize) -> usize` is invalid\n   --> $DIR/reify-intrinsic.rs:11:13"}, {"sha": "36561ab91ee89713a03a69d12dd797e47fca8762", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.mir.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.mir.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -15,6 +15,7 @@ LL |     let foo: fn() = foo;\n                  found fn item `fn() {foo}`\n    = note: fn items are distinct from fn pointers\n    = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "36561ab91ee89713a03a69d12dd797e47fca8762", "filename": "tests/ui/rfcs/rfc-2396-target_feature-11/fn-ptr.thir.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-ptr.thir.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -15,6 +15,7 @@ LL |     let foo: fn() = foo;\n                  found fn item `fn() {foo}`\n    = note: fn items are distinct from fn pointers\n    = note: functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}, {"sha": "a75c7438cb74ec1d29922d0ecb5d4453f7dd2f1a", "filename": "tests/ui/static/static-reference-to-fn-1.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae8e238169586d8af4bb61b980c2bd4bfb71b86/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstatic%2Fstatic-reference-to-fn-1.stderr?ref=5ae8e238169586d8af4bb61b980c2bd4bfb71b86", "patch": "@@ -10,6 +10,7 @@ LL |         func: &foo,\n    = note: expected reference `&fn() -> Option<isize>`\n               found reference `&fn() -> Option<isize> {foo}`\n    = note: fn items are distinct from fn pointers\n+   = note: when the arguments and return types match, functions can be coerced to function pointers\n \n error: aborting due to previous error\n "}]}