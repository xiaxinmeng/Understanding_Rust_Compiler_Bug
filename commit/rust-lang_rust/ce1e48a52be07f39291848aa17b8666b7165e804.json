{"sha": "ce1e48a52be07f39291848aa17b8666b7165e804", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMWU0OGE1MmJlMDdmMzkyOTE4NDhhYTE3Yjg2NjZiNzE2NWU4MDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-03-26T04:25:43Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-03-26T06:57:39Z"}, "message": "install: Support --libdir and --mandir correctly\n\nThis adds a hack to rustc to make it find the library directory\nregardless of whether it is named lib/lib64/lib32.", "tree": {"sha": "1d188912b525617783232a61ad21c907e49384b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d188912b525617783232a61ad21c907e49384b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1e48a52be07f39291848aa17b8666b7165e804", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1e48a52be07f39291848aa17b8666b7165e804", "html_url": "https://github.com/rust-lang/rust/commit/ce1e48a52be07f39291848aa17b8666b7165e804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1e48a52be07f39291848aa17b8666b7165e804/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "380fe976c83bd78ae1a797849ea1162a8c6d349b", "url": "https://api.github.com/repos/rust-lang/rust/commits/380fe976c83bd78ae1a797849ea1162a8c6d349b", "html_url": "https://github.com/rust-lang/rust/commit/380fe976c83bd78ae1a797849ea1162a8c6d349b"}], "stats": {"total": 136, "additions": 98, "deletions": 38}, "files": [{"sha": "10c1636a03a68dc7547718f86548a8311bfa41ee", "filename": "mk/dist.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce1e48a52be07f39291848aa17b8666b7165e804/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ce1e48a52be07f39291848aa17b8666b7165e804/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=ce1e48a52be07f39291848aa17b8666b7165e804", "patch": "@@ -200,7 +200,8 @@ dist-install-dir-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n dist-install-dir-$(1): PREPARE_CLEAN=true\n dist-install-dir-$(1): prepare-base-dir-$(1)\n \t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find -type f | sed 's/^\\.\\///') \\\n-      > $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/rustlib/manifest\n+      > tmp/manifest-$(1) # NB Use a tmp file so `find` doesn't *find the manifest*\n+\t$$(Q)cp tmp/manifest-$(1) $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/rustlib/manifest\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-MIT $$(PREPARE_DEST_DIR)"}, {"sha": "6545441a405b784432fa0439319150a26e1a6d90", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce1e48a52be07f39291848aa17b8666b7165e804/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ce1e48a52be07f39291848aa17b8666b7165e804/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=ce1e48a52be07f39291848aa17b8666b7165e804", "patch": "@@ -10,10 +10,10 @@\n \n \n install: dist-install-dir-$(CFG_BUILD)\n-\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(CFG_PREFIX)\"\n+\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(CFG_PREFIX)\" --libdir=\"$(CFG_LIBDIR)\" --mandir=\"$(CFG_MANDIR)\"\n \n uninstall: dist-install-dir-$(CFG_BUILD)\n-\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=\"$(CFG_PREFIX)\" --uninstall\n+\t$(Q)sh tmp/dist/$(PKG_NAME)-$(CFG_BUILD)/install.sh --uninstall --prefix=\"$(CFG_PREFIX)\" --libdir=\"$(CFG_LIBDIR)\" --mandir=\"$(CFG_MANDIR)\"\n \n \n ######################################################################"}, {"sha": "3ae028d971301535ff7c773f8379d7e45502643e", "filename": "src/etc/install.sh", "status": "modified", "additions": 54, "deletions": 18, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ce1e48a52be07f39291848aa17b8666b7165e804/src%2Fetc%2Finstall.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ce1e48a52be07f39291848aa17b8666b7165e804/src%2Fetc%2Finstall.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstall.sh?ref=ce1e48a52be07f39291848aa17b8666b7165e804", "patch": "@@ -213,6 +213,10 @@ VAL_OPTIONS=\"\"\n \n flag uninstall \"only uninstall from the installation prefix\"\n valopt prefix \"/usr/local\" \"set installation prefix\"\n+# NB This isn't quite the same definition as in `configure`.\n+# just using 'lib' instead of CFG_LIBDIR_RELATIVE\n+valopt libdir \"${CFG_PREFIX}/lib\" \"install libraries\"\n+valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n \n if [ $HELP -eq 1 ]\n then\n@@ -224,47 +228,48 @@ step_msg \"validating $CFG_SELF args\"\n validate_opt\n \n # Sanity check: can we can write to the destination?\n-umask 022 && mkdir -p \"${CFG_PREFIX}/lib\"\n+umask 022 && mkdir -p \"${CFG_LIBDIR}\"\n need_ok \"directory creation failed\"\n-touch \"${CFG_PREFIX}/lib/rust-install-probe\" 2> /dev/null\n+touch \"${CFG_LIBDIR}/rust-install-probe\" 2> /dev/null\n if [ $? -ne 0 ]\n then\n     err \"can't write to destination. try again with 'sudo'.\"\n fi\n-rm \"${CFG_PREFIX}/lib/rust-install-probe\"\n+rm \"${CFG_LIBDIR}/rust-install-probe\"\n need_ok \"failed to remove install probe\"\n \n+INSTALLED_MANIFEST=\"${CFG_LIBDIR}/rustlib/manifest\"\n \n # First, uninstall from the installation prefix.\n # Errors are warnings - try to rm everything in the manifest even if some fail.\n-if [ -f \"${CFG_PREFIX}/lib/rustlib/manifest\" ]\n+if [ -f \"${INSTALLED_MANIFEST}\" ]\n then\n     # Iterate through installed manifest and remove files\n     while read p; do\n-        msg \"removing ${CFG_PREFIX}/$p\"\n-        if [ -f \"${CFG_PREFIX}/$p\" ]\n+        # The installed manifest contains absolute paths\n+        msg \"removing $p\"\n+        if [ -f \"$p\" ]\n         then\n-            rm \"${CFG_PREFIX}/$p\"\n+            rm \"$p\"\n             if [ $? -ne 0 ]\n             then\n-                warn \"failed to remove ${CFG_PREFIX}/$p\"\n+                warn \"failed to remove $p\"\n             fi\n         else\n-            warn \"supposedly installed file ${CFG_PREFIX}/$p does not exist!\"\n+            warn \"supposedly installed file $p does not exist!\"\n         fi\n-    done < \"${CFG_PREFIX}/lib/rustlib/manifest\"\n+    done < \"${INSTALLED_MANIFEST}\"\n \n     # Remove 'rustlib' directory\n-    msg \"removing ${CFG_PREFIX}/lib/rustlib\"\n-    rm -r \"${CFG_PREFIX}/lib/rustlib\"\n+    rm -r \"${CFG_LIBDIR}/rustlib\"\n     if [ $? -ne 0 ]\n     then\n         warn \"failed to remove rustlib\"\n     fi\n else\n     if [ -n \"${CFG_UNINSTALL}\" ]\n     then\n-        err \"unable to find installation manifest at ${CFG_PREFIX}/lib/rustlib\"\n+        err \"unable to find installation manifest at ${CFG_LIBDIR}/rustlib\"\n     fi\n fi\n \n@@ -277,22 +282,53 @@ then\n     exit 0\n fi\n \n+# Create the installed manifest, which we will fill in with absolute file paths\n+mkdir -p \"${CFG_LIBDIR}/rustlib\"\n+touch \"${INSTALLED_MANIFEST}\"\n \n # Now install, iterate through the new manifest and copy files\n while read p; do\n \n-    umask 022 && mkdir -p \"${CFG_PREFIX}/$(dirname $p)\"\n+    # Decide the destination of the file\n+    FILE_INSTALL_PATH=\"${CFG_PREFIX}/$p\"\n+\n+    if echo \"$p\" | grep \"^lib/\" > /dev/null\n+    then\n+        pp=`echo $p | sed 's/^lib\\///'`\n+        FILE_INSTALL_PATH=\"${CFG_LIBDIR}/$pp\"\n+    fi\n+\n+    if echo \"$p\" | grep \"^share/man/\" > /dev/null\n+    then\n+        pp=`echo $p | sed 's/^share\\/man\\///'`\n+        FILE_INSTALL_PATH=\"${CFG_MANDIR}/$pp\"\n+    fi\n+\n+    # Make sure ther's a directory for it\n+    umask 022 && mkdir -p \"$(dirname ${FILE_INSTALL_PATH})\"\n     need_ok \"directory creation failed\"\n \n-    msg \"${CFG_PREFIX}/$p\"\n-    if echo \"$p\" | grep \"/bin/\" > /dev/null\n+    # Make the path absolute so we can uninstall it later without\n+    # starting from the installation cwd\n+    FILE_INSTALL_PATH_DIRNAME=\"$(dirname ${FILE_INSTALL_PATH})\"\n+    FILE_INSTALL_PATH_BASENAME=\"$(basename ${FILE_INSTALL_PATH})\"\n+    FILE_INSTALL_ABS_PATH=\"$(cd ${FILE_INSTALL_PATH_DIRNAME} && pwd)\"\n+    FILE_INSTALL_PATH=\"${FILE_INSTALL_ABS_PATH}/${FILE_INSTALL_PATH_BASENAME}\"\n+\n+    # Install the file\n+    msg \"${FILE_INSTALL_PATH}\"\n+    if echo \"$p\" | grep \"^bin/\" > /dev/null\n     then\n-        install -m755 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+        install -m755 \"${CFG_SRC_DIR}/$p\" \"${FILE_INSTALL_PATH}\"\n     else\n-        install -m644 \"${CFG_SRC_DIR}/$p\" \"${CFG_PREFIX}/$p\"\n+        install -m644 \"${CFG_SRC_DIR}/$p\" \"${FILE_INSTALL_PATH}\"\n     fi\n     need_ok \"file creation failed\"\n \n+    # Update the manifest\n+    echo \"${FILE_INSTALL_PATH}\" >> \"${INSTALLED_MANIFEST}\"\n+    need_ok \"failed to update manifest\"\n+\n # The manifest lists all files to install\n done < \"${CFG_SRC_DIR}/lib/rustlib/manifest\"\n "}, {"sha": "d548dc6dfb78f1951936ba6b5005ab25688be073", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ce1e48a52be07f39291848aa17b8666b7165e804/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1e48a52be07f39291848aa17b8666b7165e804/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=ce1e48a52be07f39291848aa17b8666b7165e804", "patch": "@@ -54,8 +54,9 @@ pub fn get_rpath_flags(sess: &Session, out_filename: &Path) -> Vec<~str> {\n }\n \n fn get_sysroot_absolute_rt_lib(sess: &Session) -> Path {\n-    let r = filesearch::relative_target_lib_path(sess.opts.target_triple);\n-    let mut p = sess.filesearch().sysroot.join(&r);\n+    let sysroot = sess.filesearch().sysroot;\n+    let r = filesearch::relative_target_lib_path(sysroot, sess.opts.target_triple);\n+    let mut p = sysroot.join(&r);\n     p.push(os::dll_filename(\"rustrt\"));\n     p\n }\n@@ -91,7 +92,7 @@ fn get_rpaths(os: abi::Os,\n     let abs_rpaths = get_absolute_rpaths(libs);\n \n     // And a final backup rpath to the global library location.\n-    let fallback_rpaths = vec!(get_install_prefix_rpath(target_triple));\n+    let fallback_rpaths = vec!(get_install_prefix_rpath(sysroot, target_triple));\n \n     fn log_rpaths(desc: &str, rpaths: &[~str]) {\n         debug!(\"{} rpaths:\", desc);\n@@ -156,10 +157,10 @@ pub fn get_absolute_rpath(lib: &Path) -> ~str {\n     p.as_str().expect(\"non-utf8 component in rpath\").to_owned()\n }\n \n-pub fn get_install_prefix_rpath(target_triple: &str) -> ~str {\n+pub fn get_install_prefix_rpath(sysroot: &Path, target_triple: &str) -> ~str {\n     let install_prefix = env!(\"CFG_PREFIX\");\n \n-    let tlib = filesearch::relative_target_lib_path(target_triple);\n+    let tlib = filesearch::relative_target_lib_path(sysroot, target_triple);\n     let mut path = Path::new(install_prefix);\n     path.push(&tlib);\n     let path = os::make_absolute(&path);\n@@ -195,7 +196,8 @@ mod test {\n \n     #[test]\n     fn test_prefix_rpath() {\n-        let res = get_install_prefix_rpath(\"triple\");\n+        let sysroot = filesearch::get_or_default_sysroot();\n+        let res = get_install_prefix_rpath(sysroot, \"triple\");\n         let mut d = Path::new(env!(\"CFG_PREFIX\"));\n         d.push(\"lib\");\n         d.push(filesearch::rustlibdir());\n@@ -208,7 +210,8 @@ mod test {\n \n     #[test]\n     fn test_prefix_rpath_abs() {\n-        let res = get_install_prefix_rpath(\"triple\");\n+        let sysroot = filesearch::get_or_default_sysroot();\n+        let res = get_install_prefix_rpath(sysroot, \"triple\");\n         assert!(Path::new(res).is_absolute());\n     }\n "}, {"sha": "5a92c48f400434dbae6d726ce5258ff2d33d80fa", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ce1e48a52be07f39291848aa17b8666b7165e804/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1e48a52be07f39291848aa17b8666b7165e804/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=ce1e48a52be07f39291848aa17b8666b7165e804", "patch": "@@ -60,7 +60,8 @@ impl<'a> FileSearch<'a> {\n         if !found {\n             let rustpath = rust_path();\n             for path in rustpath.iter() {\n-                let tlib_path = make_rustpkg_target_lib_path(path, self.target_triple);\n+                let tlib_path = make_rustpkg_target_lib_path(\n+                    self.sysroot, path, self.target_triple);\n                 debug!(\"is {} in visited_dirs? {:?}\", tlib_path.display(),\n                         visited_dirs.contains_equiv(&tlib_path.as_vec().to_owned()));\n \n@@ -136,8 +137,8 @@ impl<'a> FileSearch<'a> {\n     }\n }\n \n-pub fn relative_target_lib_path(target_triple: &str) -> Path {\n-    let mut p = Path::new(libdir());\n+pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> Path {\n+    let mut p = Path::new(find_libdir(sysroot));\n     assert!(p.is_relative());\n     p.push(rustlibdir());\n     p.push(target_triple);\n@@ -147,12 +148,13 @@ pub fn relative_target_lib_path(target_triple: &str) -> Path {\n \n fn make_target_lib_path(sysroot: &Path,\n                         target_triple: &str) -> Path {\n-    sysroot.join(&relative_target_lib_path(target_triple))\n+    sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n \n-fn make_rustpkg_target_lib_path(dir: &Path,\n-                        target_triple: &str) -> Path {\n-    let mut p = dir.join(libdir());\n+fn make_rustpkg_target_lib_path(sysroot: &Path,\n+                                dir: &Path,\n+                                target_triple: &str) -> Path {\n+    let mut p = dir.join(find_libdir(sysroot));\n     p.push(target_triple);\n     p\n }\n@@ -236,12 +238,30 @@ pub fn rust_path() -> Vec<Path> {\n // The name of the directory rustc expects libraries to be located.\n // On Unix should be \"lib\", on windows \"bin\"\n #[cfg(unix)]\n-pub fn libdir() -> ~str {\n-    ~\"lib\"\n+fn find_libdir(sysroot: &Path) -> ~str {\n+    // FIXME: This is a quick hack to make the rustc binary able to locate\n+    // Rust libraries in Linux environments where libraries might be installed\n+    // to lib64/lib32. This would be more foolproof by basing the sysroot off\n+    // of the directory where librustc is located, rather than where the rustc\n+    // binary is.\n+\n+    if sysroot.join(primary_libdir_name()).exists() {\n+        return primary_libdir_name();\n+    } else {\n+        return secondary_libdir_name();\n+    }\n+\n+    #[cfg(target_word_size = \"64\")]\n+    fn primary_libdir_name() -> ~str { ~\"lib64\" }\n+\n+    #[cfg(target_word_size = \"32\")]\n+    fn primary_libdir_name() -> ~str { ~\"lib32\" }\n+\n+    fn secondary_libdir_name() -> ~str { ~\"lib\" }\n }\n \n #[cfg(windows)]\n-pub fn libdir() -> ~str {\n+fn find_libdir(_sysroot: &Path) -> ~str {\n     ~\"bin\"\n }\n "}]}