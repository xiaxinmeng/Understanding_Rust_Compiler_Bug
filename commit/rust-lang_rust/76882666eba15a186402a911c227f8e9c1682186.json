{"sha": "76882666eba15a186402a911c227f8e9c1682186", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODgyNjY2ZWJhMTVhMTg2NDAyYTkxMWMyMjdmOGU5YzE2ODIxODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T12:22:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T12:22:00Z"}, "message": "Auto merge of #71014 - Centril:rollup-3lc8cnt, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #69573 (tests encoding current behavior for various cases of \"binding\" to _.)\n - #70881 (bootstrap: work around \"unused attribute\" errors in incremental stdlib rebuilds.)\n - #70957 (Normalize MIR locals' types for generator layout computation.)\n - #70962 (added machine hooks to track deallocations)\n - #70982 (Normalize function signature in function casting check procedure)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a76a63294291b6546ea8fe059775a9a4a6d31769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a76a63294291b6546ea8fe059775a9a4a6d31769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76882666eba15a186402a911c227f8e9c1682186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76882666eba15a186402a911c227f8e9c1682186", "html_url": "https://github.com/rust-lang/rust/commit/76882666eba15a186402a911c227f8e9c1682186", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76882666eba15a186402a911c227f8e9c1682186/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f3b65921effc08ea1171bdbbcad70765ecacb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f3b65921effc08ea1171bdbbcad70765ecacb22", "html_url": "https://github.com/rust-lang/rust/commit/1f3b65921effc08ea1171bdbbcad70765ecacb22"}, {"sha": "0a6d1778ffddc6767cc705385d5616fb1fffd961", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6d1778ffddc6767cc705385d5616fb1fffd961", "html_url": "https://github.com/rust-lang/rust/commit/0a6d1778ffddc6767cc705385d5616fb1fffd961"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "7fc089d18f113825de2d37ba0e5aca035f688fe5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76882666eba15a186402a911c227f8e9c1682186/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76882666eba15a186402a911c227f8e9c1682186/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=76882666eba15a186402a911c227f8e9c1682186", "patch": "@@ -1099,6 +1099,13 @@ impl<'a> Builder<'a> {\n \n             if self.config.deny_warnings {\n                 rustflags.arg(\"-Dwarnings\");\n+\n+                // FIXME(#58633) hide \"unused attribute\" errors in incremental\n+                // builds of the standard library, as the underlying checks are\n+                // not yet properly integrated with incremental recompilation.\n+                if mode == Mode::Std && compiler.stage == 0 && self.config.incremental {\n+                    rustflags.arg(\"-Aunused-attributes\");\n+                }\n             }\n         }\n "}, {"sha": "fd67b088c93cff162b2f5363e9aa4936e6924619", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=76882666eba15a186402a911c227f8e9c1682186", "patch": "@@ -254,6 +254,14 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         kind: Option<MemoryKind<Self::MemoryKind>>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag);\n \n+    /// Called to notify the machine before a deallocation occurs.\n+    fn before_deallocation(\n+        _memory_extra: &mut Self::MemoryExtra,\n+        _id: AllocId,\n+    ) -> InterpResult<'tcx> {\n+        Ok(())\n+    }\n+\n     /// Return the \"base\" tag for the given *global* allocation: the one that is used for direct\n     /// accesses to this static/const/fn allocation. If `id` is not a global allocation,\n     /// this will return an unusable tag (i.e., accesses will be UB)!"}, {"sha": "539537e9de80c414fe6b19d8622466fe5d3c510d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=76882666eba15a186402a911c227f8e9c1682186", "patch": "@@ -254,6 +254,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             );\n         }\n \n+        M::before_deallocation(&mut self.extra, ptr.alloc_id)?;\n+\n         let (alloc_kind, mut alloc) = match self.alloc_map.remove(&ptr.alloc_id) {\n             Some(alloc) => alloc,\n             None => {"}, {"sha": "033ba17f658552b0b06404702acea134a0a24b4d", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=76882666eba15a186402a911c227f8e9c1682186", "patch": "@@ -721,15 +721,18 @@ fn compute_layout<'tcx>(\n         _ => bug!(),\n     };\n \n+    let param_env = tcx.param_env(source.def_id());\n+\n     for (local, decl) in body.local_decls.iter_enumerated() {\n         // Ignore locals which are internal or not live\n         if !live_locals.contains(local) || decl.internal {\n             continue;\n         }\n+        let decl_ty = tcx.normalize_erasing_regions(param_env, decl.ty);\n \n         // Sanity check that typeck knows about the type of locals which are\n         // live across a suspension point\n-        if !allowed.contains(&decl.ty) && !allowed_upvars.contains(&decl.ty) {\n+        if !allowed.contains(&decl_ty) && !allowed_upvars.contains(&decl_ty) {\n             span_bug!(\n                 body.span,\n                 \"Broken MIR: generator contains type {} in MIR, \\"}, {"sha": "38d0c42e1588baaaccf48df7a14301f36e6b5324", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76882666eba15a186402a911c227f8e9c1682186/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=76882666eba15a186402a911c227f8e9c1682186", "patch": "@@ -536,7 +536,10 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 match self.expr_ty.kind {\n                     ty::FnDef(..) => {\n                         // Attempt a coercion to a fn pointer type.\n-                        let f = self.expr_ty.fn_sig(fcx.tcx);\n+                        let f = fcx.normalize_associated_types_in(\n+                            self.expr.span,\n+                            &self.expr_ty.fn_sig(fcx.tcx),\n+                        );\n                         let res = fcx.try_coerce(\n                             self.expr,\n                             self.expr_ty,"}, {"sha": "ec38dc40e610a8acb6d756763ac5563500437546", "filename": "src/test/ui/issues/issue-54094.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76882666eba15a186402a911c227f8e9c1682186/src%2Ftest%2Fui%2Fissues%2Fissue-54094.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76882666eba15a186402a911c227f8e9c1682186/src%2Ftest%2Fui%2Fissues%2Fissue-54094.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54094.rs?ref=76882666eba15a186402a911c227f8e9c1682186", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+trait Zoo {\n+    type X;\n+}\n+\n+impl Zoo for u16 {\n+    type X = usize;\n+}\n+\n+fn foo(abc: <u16 as Zoo>::X) {}\n+\n+fn main() {\n+    let x: *const u8 = foo as _;\n+}"}, {"sha": "ebabc3fbf10f9185a3ee9287afeaef3e7c145dbe", "filename": "src/test/ui/repeat_count_const_in_async_fn.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76882666eba15a186402a911c227f8e9c1682186/src%2Ftest%2Fui%2Frepeat_count_const_in_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76882666eba15a186402a911c227f8e9c1682186/src%2Ftest%2Fui%2Frepeat_count_const_in_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count_const_in_async_fn.rs?ref=76882666eba15a186402a911c227f8e9c1682186", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+// edition:2018\n+// compile-flags: --crate-type=lib\n+\n+pub async fn test() {\n+    const C: usize = 4;\n+    foo(&mut [0u8; C]).await;\n+}\n+\n+async fn foo(_: &mut [u8]) {}"}]}