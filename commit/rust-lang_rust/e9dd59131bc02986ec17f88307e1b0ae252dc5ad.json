{"sha": "e9dd59131bc02986ec17f88307e1b0ae252dc5ad", "node_id": "C_kwDOAAsO6NoAKGU5ZGQ1OTEzMWJjMDI5ODZlYzE3Zjg4MzA3ZTFiMGFlMjUyZGM1YWQ", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-12-07T01:53:50Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2022-12-07T01:53:50Z"}, "message": "Add help for `#![feature(impl_trait_in_fn_trait_return)]`\n\nThis adds a new variant `ImplTraitContext::FeatureGated`, so we can\ngeneralize the help for `return_position_impl_trait_in_trait` to also\nwork for `impl_trait_in_fn_trait_return`.", "tree": {"sha": "23a368e5a57eda529b5d797d0dcde61098be1c13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23a368e5a57eda529b5d797d0dcde61098be1c13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9dd59131bc02986ec17f88307e1b0ae252dc5ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9dd59131bc02986ec17f88307e1b0ae252dc5ad", "html_url": "https://github.com/rust-lang/rust/commit/e9dd59131bc02986ec17f88307e1b0ae252dc5ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9dd59131bc02986ec17f88307e1b0ae252dc5ad/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339", "url": "https://api.github.com/repos/rust-lang/rust/commits/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339", "html_url": "https://github.com/rust-lang/rust/commit/b28d30e1e3c2b90fd08b7dd79d8e63884d1e0339"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "f05a441ff81c3d759fb9da19b63581222ed4eb8d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd59131bc02986ec17f88307e1b0ae252dc5ad/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd59131bc02986ec17f88307e1b0ae252dc5ad/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=e9dd59131bc02986ec17f88307e1b0ae252dc5ad", "patch": "@@ -259,6 +259,8 @@ enum ImplTraitContext {\n     },\n     /// Impl trait in type aliases.\n     TypeAliasesOpaqueTy,\n+    /// `impl Trait` is unstably accepted in this position.\n+    FeatureGated(ImplTraitPosition, Symbol),\n     /// `impl Trait` is not accepted in this position.\n     Disallowed(ImplTraitPosition),\n }\n@@ -1372,25 +1374,23 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         path\n                     }\n-                    ImplTraitContext::Disallowed(\n-                        position @ (ImplTraitPosition::TraitReturn | ImplTraitPosition::ImplReturn),\n-                    ) => {\n+                    ImplTraitContext::FeatureGated(position, feature) => {\n                         self.tcx\n                             .sess\n                             .create_feature_err(\n                                 MisplacedImplTrait {\n                                     span: t.span,\n-                                    position: DiagnosticArgFromDisplay(&position),\n+                                    position: DiagnosticArgFromDisplay(position),\n                                 },\n-                                sym::return_position_impl_trait_in_trait,\n+                                *feature,\n                             )\n                             .emit();\n                         hir::TyKind::Err\n                     }\n                     ImplTraitContext::Disallowed(position) => {\n                         self.tcx.sess.emit_err(MisplacedImplTrait {\n                             span: t.span,\n-                            position: DiagnosticArgFromDisplay(&position),\n+                            position: DiagnosticArgFromDisplay(position),\n                         });\n                         hir::TyKind::Err\n                     }\n@@ -1739,14 +1739,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         } else {\n             match &decl.output {\n                 FnRetTy::Ty(ty) => {\n-                    let mut context = if kind.return_impl_trait_allowed(self.tcx) {\n+                    let context = if kind.return_impl_trait_allowed(self.tcx) {\n                         let fn_def_id = self.local_def_id(fn_node_id);\n                         ImplTraitContext::ReturnPositionOpaqueTy {\n                             origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),\n                             in_trait: matches!(kind, FnDeclKind::Trait),\n                         }\n                     } else {\n-                        ImplTraitContext::Disallowed(match kind {\n+                        let position = match kind {\n                             FnDeclKind::Fn | FnDeclKind::Inherent => {\n                                 unreachable!(\"fn should allow in-band lifetimes\")\n                             }\n@@ -1755,9 +1755,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             FnDeclKind::Pointer => ImplTraitPosition::PointerReturn,\n                             FnDeclKind::Trait => ImplTraitPosition::TraitReturn,\n                             FnDeclKind::Impl => ImplTraitPosition::ImplReturn,\n-                        })\n+                        };\n+                        match kind {\n+                            FnDeclKind::Trait | FnDeclKind::Impl => ImplTraitContext::FeatureGated(\n+                                position,\n+                                sym::return_position_impl_trait_in_trait,\n+                            ),\n+                            _ => ImplTraitContext::Disallowed(position),\n+                        }\n                     };\n-                    hir::FnRetTy::Return(self.lower_ty(ty, &mut context))\n+                    hir::FnRetTy::Return(self.lower_ty(ty, &context))\n                 }\n                 FnRetTy::Default(span) => hir::FnRetTy::DefaultReturn(self.lower_span(*span)),\n             }\n@@ -1938,7 +1945,10 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     output,\n                     span,\n                     if in_trait && !this.tcx.features().return_position_impl_trait_in_trait {\n-                        ImplTraitContext::Disallowed(ImplTraitPosition::TraitReturn)\n+                        ImplTraitContext::FeatureGated(\n+                            ImplTraitPosition::TraitReturn,\n+                            sym::return_position_impl_trait_in_trait,\n+                        )\n                     } else {\n                         ImplTraitContext::ReturnPositionOpaqueTy {\n                             origin: hir::OpaqueTyOrigin::FnReturn(fn_def_id),"}, {"sha": "592fc5aa6456f064e0d399f5a0c1487067f147ce", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd59131bc02986ec17f88307e1b0ae252dc5ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd59131bc02986ec17f88307e1b0ae252dc5ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=e9dd59131bc02986ec17f88307e1b0ae252dc5ad", "patch": "@@ -9,7 +9,7 @@ use rustc_ast::{self as ast, *};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::GenericArg;\n-use rustc_span::symbol::{kw, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::{smallvec, SmallVec};\n@@ -352,11 +352,18 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // fn f(_: impl Fn() -> impl Debug) -> impl Fn() -> impl Debug\n             // //      disallowed --^^^^^^^^^^        allowed --^^^^^^^^^^\n             // ```\n-            FnRetTy::Ty(ty)\n-                if matches!(itctx, ImplTraitContext::ReturnPositionOpaqueTy { .. })\n-                    && self.tcx.features().impl_trait_in_fn_trait_return =>\n-            {\n-                self.lower_ty(&ty, itctx)\n+            FnRetTy::Ty(ty) if matches!(itctx, ImplTraitContext::ReturnPositionOpaqueTy { .. }) => {\n+                if self.tcx.features().impl_trait_in_fn_trait_return {\n+                    self.lower_ty(&ty, itctx)\n+                } else {\n+                    self.lower_ty(\n+                        &ty,\n+                        &ImplTraitContext::FeatureGated(\n+                            ImplTraitPosition::FnTraitReturn,\n+                            sym::impl_trait_in_fn_trait_return,\n+                        ),\n+                    )\n+                }\n             }\n             FnRetTy::Ty(ty) => {\n                 self.lower_ty(&ty, &ImplTraitContext::Disallowed(ImplTraitPosition::FnTraitReturn))"}, {"sha": "760dcb615c87903d522d89eb322e47139b919b82", "filename": "src/test/ui/feature-gates/feature-gate-impl_trait_in_fn_trait_return.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9dd59131bc02986ec17f88307e1b0ae252dc5ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9dd59131bc02986ec17f88307e1b0ae252dc5ad/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-impl_trait_in_fn_trait_return.stderr?ref=e9dd59131bc02986ec17f88307e1b0ae252dc5ad", "patch": "@@ -3,12 +3,18 @@ error[E0562]: `impl Trait` only allowed in function and inherent method return t\n    |\n LL | fn f() -> impl Fn() -> impl Sized { || () }\n    |                        ^^^^^^^^^^\n+   |\n+   = note: see issue #99697 <https://github.com/rust-lang/rust/issues/99697> for more information\n+   = help: add `#![feature(impl_trait_in_fn_trait_return)]` to the crate attributes to enable\n \n error[E0562]: `impl Trait` only allowed in function and inherent method return types, not in `Fn` trait return\n   --> $DIR/feature-gate-impl_trait_in_fn_trait_return.rs:3:32\n    |\n LL | fn g() -> &'static dyn Fn() -> impl Sized { &|| () }\n    |                                ^^^^^^^^^^\n+   |\n+   = note: see issue #99697 <https://github.com/rust-lang/rust/issues/99697> for more information\n+   = help: add `#![feature(impl_trait_in_fn_trait_return)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n "}]}