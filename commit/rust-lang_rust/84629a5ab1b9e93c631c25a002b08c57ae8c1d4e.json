{"sha": "84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "node_id": "C_kwDOAAsO6NoAKDg0NjI5YTVhYjFiOWU5M2M2MzFjMjVhMDAyYjA4YzU3YWU4YzFkNGU", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-08-16T02:50:04Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-08-16T02:50:04Z"}, "message": "Extend invalid floating point literal suffix suggestion", "tree": {"sha": "7c9926444b03152b80dbbf11e34b34714373d37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c9926444b03152b80dbbf11e34b34714373d37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "html_url": "https://github.com/rust-lang/rust/commit/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1603a70f82240ba2d27f72f964e36614d7620ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1603a70f82240ba2d27f72f964e36614d7620ad3", "html_url": "https://github.com/rust-lang/rust/commit/1603a70f82240ba2d27f72f964e36614d7620ad3"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "92bf03ea665787b58cade716e517fe723bb0eecd", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "patch": "@@ -2159,7 +2159,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 E0610,\n                 \"`{expr_t}` is a primitive type and therefore doesn't have fields\",\n             );\n-            let is_valid_suffix = |field: String| {\n+            let is_valid_suffix = |field: &str| {\n                 if field == \"f32\" || field == \"f64\" {\n                     return true;\n                 }\n@@ -2184,20 +2184,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let suffix = chars.collect::<String>();\n                 suffix.is_empty() || suffix == \"f32\" || suffix == \"f64\"\n             };\n+            let is_likely_suffix = |fist_chars: &[char], field: &str| {\n+                field.len() >= 1\n+                    && field.to_lowercase().starts_with(fist_chars)\n+                    && field[1..].chars().all(|c| c.is_ascii_digit())\n+            };\n             if let ty::Infer(ty::IntVar(_)) = expr_t.kind()\n                 && let ExprKind::Lit(Spanned {\n                     node: ast::LitKind::Int(_, ast::LitIntType::Unsuffixed),\n                     ..\n                 }) = base.kind\n                 && !base.span.from_expansion()\n-                && is_valid_suffix(field_name)\n             {\n-                err.span_suggestion_verbose(\n-                    field.span.shrink_to_lo(),\n-                    \"If the number is meant to be a floating point number, consider adding a `0` after the period\",\n-                    '0',\n-                    Applicability::MaybeIncorrect,\n-                );\n+                let msg = \"If the number is meant to be a floating point number, consider adding a `0` after the period\";\n+                if is_valid_suffix(&field_name) {\n+                    err.span_suggestion_verbose(\n+                        field.span.shrink_to_lo(),\n+                        msg,\n+                        '0',\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else if is_likely_suffix(&['f', 'l'], &field_name) {\n+                    err.span_suggestion_verbose(\n+                        field.span,\n+                        format!(\"{}, valid float format are `f32` and `f64`\", msg),\n+                        \"0f32\",\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n             err.emit();\n         }"}, {"sha": "15deb9e2f609a9c60bde136fb3ce20c7d897b65d", "filename": "src/test/ui/attempted-access-non-fatal.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.rs?ref=84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "patch": "@@ -3,4 +3,8 @@ fn main() {\n     let x = 0;\n     let _ = x.foo; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n     let _ = x.bar; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 0.f; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 2.l; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 12.F; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+    let _ = 34.L; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n }"}, {"sha": "856dba2b2e4c776c5407759fc6ff19695031ea0b", "filename": "src/test/ui/attempted-access-non-fatal.stderr", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84629a5ab1b9e93c631c25a002b08c57ae8c1d4e/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr?ref=84629a5ab1b9e93c631c25a002b08c57ae8c1d4e", "patch": "@@ -10,6 +10,50 @@ error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n LL |     let _ = x.bar;\n    |               ^^^\n \n-error: aborting due to 2 previous errors\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:6:15\n+   |\n+LL |     let _ = 0.f;\n+   |               ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+   |\n+LL |     let _ = 0.0f32;\n+   |               ~~~~\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:7:15\n+   |\n+LL |     let _ = 2.l;\n+   |               ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+   |\n+LL |     let _ = 2.0f32;\n+   |               ~~~~\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:8:16\n+   |\n+LL |     let _ = 12.F;\n+   |                ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+   |\n+LL |     let _ = 12.0f32;\n+   |                ~~~~\n+\n+error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n+  --> $DIR/attempted-access-non-fatal.rs:9:16\n+   |\n+LL |     let _ = 34.L;\n+   |                ^\n+   |\n+help: If the number is meant to be a floating point number, consider adding a `0` after the period, valid float format are `f32` and `f64`\n+   |\n+LL |     let _ = 34.0f32;\n+   |                ~~~~\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0610`."}]}