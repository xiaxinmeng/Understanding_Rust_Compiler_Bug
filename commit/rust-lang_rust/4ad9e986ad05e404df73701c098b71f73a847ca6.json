{"sha": "4ad9e986ad05e404df73701c098b71f73a847ca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhZDllOTg2YWQwNWU0MDRkZjczNzAxYzA5OGI3MWY3M2E4NDdjYTY=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-04T17:26:44Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-07-04T21:43:00Z"}, "message": "Some clippy fixes for 1.36", "tree": {"sha": "2a2b2cc9dbee07d0aa92df883c807edbab264a85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a2b2cc9dbee07d0aa92df883c807edbab264a85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ad9e986ad05e404df73701c098b71f73a847ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ad9e986ad05e404df73701c098b71f73a847ca6", "html_url": "https://github.com/rust-lang/rust/commit/4ad9e986ad05e404df73701c098b71f73a847ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ad9e986ad05e404df73701c098b71f73a847ca6/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6a6e43372de9530ec7df0f38352466ed107e1a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a6e43372de9530ec7df0f38352466ed107e1a2", "html_url": "https://github.com/rust-lang/rust/commit/c6a6e43372de9530ec7df0f38352466ed107e1a2"}], "stats": {"total": 132, "additions": 62, "deletions": 70}, "files": [{"sha": "0984e3e25a3bf24b1e4bdfadd45fb9e29dcb4f73", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -130,7 +130,7 @@ fn initialize(\n         Ok(RawMessage::Notification(n)) => {\n             n.cast::<Initialized>().map_err(|_| \"expected initialized notification\")?;\n         }\n-        _ => Err(format!(\"expected initialized notification\"))?,\n+        _ => Err(\"expected initialized notification\".to_string())?,\n     }\n     Ok(params)\n }"}, {"sha": "f8f37e852315c5f37d7ef8a6e3068ce057d2a73e", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -39,13 +39,13 @@ fn collect_path_segments_raw<'a>(\n     // We need to reverse only the new added segments\n     let only_new_segments = segments.split_at_mut(oldlen).1;\n     only_new_segments.reverse();\n-    return Some(segments.len() - oldlen);\n+    Some(segments.len() - oldlen)\n }\n \n fn fmt_segments(segments: &[SmolStr]) -> String {\n     let mut buf = String::new();\n     fmt_segments_raw(segments, &mut buf);\n-    return buf;\n+    buf\n }\n \n fn fmt_segments_raw(segments: &[SmolStr], buf: &mut String) {\n@@ -61,7 +61,7 @@ fn fmt_segments_raw(segments: &[SmolStr], buf: &mut String) {\n \n // Returns the numeber of common segments.\n fn compare_path_segments(left: &[SmolStr], right: &[&ast::PathSegment]) -> usize {\n-    return left.iter().zip(right).filter(|(l, r)| compare_path_segment(l, r)).count();\n+    left.iter().zip(right).filter(|(l, r)| compare_path_segment(l, r)).count()\n }\n \n fn compare_path_segment(a: &SmolStr, b: &ast::PathSegment) -> bool {\n@@ -320,7 +320,7 @@ fn walk_use_tree_for_best_action<'a>(\n \n     // We remove the segments added\n     current_path_segments.truncate(prev_len);\n-    return action;\n+    action\n }\n \n fn best_action_for_target<'b, 'a: 'b>(\n@@ -339,7 +339,7 @@ fn best_action_for_target<'b, 'a: 'b>(\n         });\n \n     match best_action {\n-        Some(action) => return action,\n+        Some(action) => action,\n         None => {\n             // We have no action and no UseItem was found in container so we find\n             // another item and we use it as anchor.\n@@ -350,7 +350,7 @@ fn best_action_for_target<'b, 'a: 'b>(\n                 .find(|n| n.range().start() < anchor.range().start())\n                 .or_else(|| Some(anchor));\n \n-            return ImportAction::add_new_use(anchor, false);\n+            ImportAction::add_new_use(anchor, false)\n         }\n     }\n }"}, {"sha": "48bc64450b9eff0b9fb54c8e737192cab4579abf", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -112,6 +112,6 @@ fn read_stdin() -> Result<String> {\n }\n \n fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(\":\").ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n+    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n     Ok((&s[..idx], &s[idx + 1..]))\n }"}, {"sha": "2d563bd0107d0f74f05be46195cf09be2c3ed85b", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -139,7 +139,7 @@ impl CrateGraph {\n     }\n \n     pub fn iter<'a>(&'a self) -> impl Iterator<Item = CrateId> + 'a {\n-        self.arena.keys().map(|it| *it)\n+        self.arena.keys().copied()\n     }\n \n     pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n@@ -191,7 +191,7 @@ impl CrateGraph {\n                 return true;\n             }\n         }\n-        return false;\n+        false\n     }\n }\n "}, {"sha": "007ef315d0273b0963b62537e7b1ca0da7fbcd4e", "filename": "crates/ra_hir/src/code_model/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fdocs.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -74,7 +74,7 @@ pub(crate) fn documentation_query(\n         DocDef::Module(it) => docs_from_ast(&*it.declaration_source(db)?.ast),\n         DocDef::StructField(it) => match it.source(db).ast {\n             FieldSource::Named(named) => docs_from_ast(&*named),\n-            FieldSource::Pos(..) => return None,\n+            FieldSource::Pos(..) => None,\n         },\n         DocDef::Struct(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Enum(it) => docs_from_ast(&*it.source(db).ast),"}, {"sha": "3e763fef0afb8f0ef17952bc17b899366116b4bc", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -150,7 +150,7 @@ impl BodySourceMap {\n     }\n \n     pub(crate) fn field_syntax(&self, expr: ExprId, field: usize) -> AstPtr<ast::NamedField> {\n-        self.field_map[&(expr, field)].clone()\n+        self.field_map[&(expr, field)]\n     }\n }\n \n@@ -471,15 +471,15 @@ impl Pat {\n         match self {\n             Pat::Range { .. } | Pat::Lit(..) | Pat::Path(..) | Pat::Wild | Pat::Missing => {}\n             Pat::Bind { subpat, .. } => {\n-                subpat.iter().map(|pat| *pat).for_each(f);\n+                subpat.iter().copied().for_each(f);\n             }\n             Pat::Tuple(args) | Pat::TupleStruct { args, .. } => {\n-                args.iter().map(|pat| *pat).for_each(f);\n+                args.iter().copied().for_each(f);\n             }\n             Pat::Ref { pat, .. } => f(*pat),\n             Pat::Slice { prefix, rest, suffix } => {\n                 let total_iter = prefix.iter().chain(rest.iter()).chain(suffix.iter());\n-                total_iter.map(|pat| *pat).for_each(f);\n+                total_iter.copied().for_each(f);\n             }\n             Pat::Struct { args, .. } => {\n                 args.iter().map(|f| f.pat).for_each(f);"}, {"sha": "28fd526847ae722334e80f14f200362c9a0b164b", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -72,7 +72,7 @@ impl ExprScopes {\n     }\n \n     pub(crate) fn scope_for(&self, expr: ExprId) -> Option<ScopeId> {\n-        self.scope_by_expr.get(&expr).map(|&scope| scope)\n+        self.scope_by_expr.get(&expr).copied()\n     }\n \n     pub(crate) fn scope_by_expr(&self) -> &FxHashMap<ExprId, ScopeId> {"}, {"sha": "0443d4d9a22b3eafbc23906ad741ecd97186c055", "filename": "crates/ra_hir/src/lang_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flang_item.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -122,7 +122,7 @@ impl LangItems {\n         module: Module,\n     ) {\n         if let Some(module_lang_items) = db.module_lang_items(module) {\n-            self.items.extend(module_lang_items.items.iter().map(|(k, v)| (k.clone(), v.clone())))\n+            self.items.extend(module_lang_items.items.iter().map(|(k, v)| (k.clone(), *v)))\n         }\n \n         // Look for lang items in the children\n@@ -142,7 +142,7 @@ impl LangItems {\n     {\n         let node = item.source(db).ast;\n         if let Some(lang_item_name) = lang_item_name(&*node) {\n-            self.items.entry(lang_item_name).or_insert(constructor(item));\n+            self.items.entry(lang_item_name).or_insert_with(|| constructor(item));\n         }\n     }\n }"}, {"sha": "ba33273b86ecaa0f2d343562426acf96ebc64197", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -76,7 +76,7 @@ impl MockDatabase {\n \n     pub fn diagnostics(&self) -> String {\n         let mut buf = String::from(\"\\n\");\n-        let mut files: Vec<FileId> = self.files.values().map(|&it| it).collect();\n+        let mut files: Vec<FileId> = self.files.values().copied().collect();\n         files.sort();\n         for file in files {\n             let module = crate::source_binder::module_from_file_id(self, file).unwrap();"}, {"sha": "d66be34dbd1a5a2b6cdc2ff3a3a66207d9a6a626", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -227,10 +227,8 @@ where\n                             .items\n                             .iter()\n                             .map(|(name, res)| (name.clone(), Either::A(res.clone())));\n-                        let macros = scope\n-                            .macros\n-                            .iter()\n-                            .map(|(name, res)| (name.clone(), Either::B(res.clone())));\n+                        let macros =\n+                            scope.macros.iter().map(|(name, res)| (name.clone(), Either::B(*res)));\n \n                         let all = items.chain(macros).collect::<Vec<_>>();\n                         self.update(module_id, Some(import_id), &all);\n@@ -243,10 +241,8 @@ where\n                             .items\n                             .iter()\n                             .map(|(name, res)| (name.clone(), Either::A(res.clone())));\n-                        let macros = scope\n-                            .macros\n-                            .iter()\n-                            .map(|(name, res)| (name.clone(), Either::B(res.clone())));\n+                        let macros =\n+                            scope.macros.iter().map(|(name, res)| (name.clone(), Either::B(*res)));\n \n                         let all = items.chain(macros).collect::<Vec<_>>();\n \n@@ -651,7 +647,7 @@ fn resolve_submodule(\n         candidates.push(file_dir_mod.clone());\n     };\n     let sr = db.source_root(source_root_id);\n-    let mut points_to = candidates.into_iter().filter_map(|path| sr.files.get(&path)).map(|&it| it);\n+    let mut points_to = candidates.into_iter().filter_map(|path| sr.files.get(&path)).copied();\n     // FIXME: handle ambiguity\n     match points_to.next() {\n         Some(file_id) => Ok(file_id),"}, {"sha": "c8be27e541bd9de6e22ba59a22614c1df4d11559", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -272,7 +272,7 @@ impl Scope {\n             },\n             Scope::ImplBlockScope(i) => {\n                 if name.as_known_name() == Some(KnownName::SelfType) {\n-                    PerNs::types(Resolution::SelfType(i.clone()))\n+                    PerNs::types(Resolution::SelfType(*i))\n                 } else {\n                     PerNs::none()\n                 }\n@@ -317,7 +317,7 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(Name::self_type(), PerNs::types(Resolution::SelfType(i.clone())));\n+                f(Name::self_type(), PerNs::types(Resolution::SelfType(*i)));\n             }\n             Scope::ExprScope(e) => {\n                 e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {"}, {"sha": "9228dd314cc56753186613d2dd4986eec9415d77", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -116,16 +116,16 @@ pub struct InferenceResult {\n \n impl InferenceResult {\n     pub fn method_resolution(&self, expr: ExprId) -> Option<Function> {\n-        self.method_resolutions.get(&expr).map(|it| *it)\n+        self.method_resolutions.get(&expr).copied()\n     }\n     pub fn field_resolution(&self, expr: ExprId) -> Option<StructField> {\n-        self.field_resolutions.get(&expr).map(|it| *it)\n+        self.field_resolutions.get(&expr).copied()\n     }\n     pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<ImplItem> {\n-        self.assoc_resolutions.get(&id.into()).map(|it| *it)\n+        self.assoc_resolutions.get(&id.into()).copied()\n     }\n     pub fn assoc_resolutions_for_pat(&self, id: PatId) -> Option<ImplItem> {\n-        self.assoc_resolutions.get(&id.into()).map(|it| *it)\n+        self.assoc_resolutions.get(&id.into()).copied()\n     }\n     pub(crate) fn add_diagnostics(\n         &self,\n@@ -239,8 +239,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             &self.resolver,\n             type_ref,\n         );\n-        let ty = self.insert_type_vars(ty);\n-        ty\n+        self.insert_type_vars(ty)\n     }\n \n     fn unify_substs(&mut self, substs1: &Substs, substs2: &Substs, depth: usize) -> bool {\n@@ -973,8 +972,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 for (arg_pat, arg_type) in args.iter().zip(arg_types.iter()) {\n                     let expected = if let Some(type_ref) = arg_type {\n-                        let ty = self.make_ty(type_ref);\n-                        ty\n+                        self.make_ty(type_ref)\n                     } else {\n                         Ty::Unknown\n                     };"}, {"sha": "49bf5b946a5f51888d66917951c04c1dbe8a2ad7", "filename": "crates/ra_hir/src/ty/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Funify.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -102,7 +102,7 @@ impl<T> Canonicalized<T> {\n         ty.fold(&mut |ty| match ty {\n             Ty::Bound(idx) => {\n                 if (idx as usize) < self.free_vars.len() {\n-                    Ty::Infer(self.free_vars[idx as usize].clone())\n+                    Ty::Infer(self.free_vars[idx as usize])\n                 } else {\n                     Ty::Bound(idx)\n                 }\n@@ -120,7 +120,7 @@ impl<T> Canonicalized<T> {\n         let new_vars =\n             (0..solution.num_vars).map(|_| ctx.new_type_var()).collect::<Vec<_>>().into();\n         for (i, ty) in solution.value.into_iter().enumerate() {\n-            let var = self.free_vars[i].clone();\n+            let var = self.free_vars[i];\n             ctx.unify(&Ty::Infer(var), &ty.subst_bound_vars(&new_vars));\n         }\n     }"}, {"sha": "44216b045c0796bb8668d492ed518d2340c36b3a", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -72,8 +72,8 @@ impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n             runtime: self.runtime.snapshot(self),\n-            last_gc: self.last_gc.clone(),\n-            last_gc_check: self.last_gc_check.clone(),\n+            last_gc: self.last_gc,\n+            last_gc_check: self.last_gc_check,\n         })\n     }\n }"}, {"sha": "638484a9ba1c7ef0148373b41cfc7a7ab3e9853a", "filename": "crates/ra_ide_api/src/display/structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fstructure.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -25,7 +25,7 @@ pub fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n         match event {\n             WalkEvent::Enter(node) => {\n                 if let Some(mut symbol) = structure_node(node) {\n-                    symbol.parent = stack.last().map(|&n| n);\n+                    symbol.parent = stack.last().copied();\n                     stack.push(res.len());\n                     res.push(symbol);\n                 }"}, {"sha": "8f63db5f13cf1664be2231a81cc4a48acb12304a", "filename": "crates/ra_ide_api/src/line_index_utils.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fline_index_utils.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -137,7 +137,7 @@ impl<'a> Edits<'a> {\n             Step::Newline(n) => n,\n             Step::Utf16Char(r) => r.end(),\n         };\n-        let res = match &mut self.current {\n+        match &mut self.current {\n             Some(edit) => {\n                 if step_pos <= edit.delete.start() {\n                     NextSteps::Use\n@@ -155,8 +155,7 @@ impl<'a> Edits<'a> {\n                 }\n             }\n             None => NextSteps::Use,\n-        };\n-        res\n+        }\n     }\n \n     fn translate_range(&self, range: TextRange) -> TextRange {"}, {"sha": "f4a0c6ac7a4db08f29dbc5d2b82fa8c2faeda2e5", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -87,7 +87,7 @@ pub(crate) fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol>\n         let mut files = Vec::new();\n         for &root in db.local_roots().iter() {\n             let sr = db.source_root(root);\n-            files.extend(sr.files.values().map(|&it| it))\n+            files.extend(sr.files.values().copied())\n         }\n \n         let snap = Snap(db.snapshot());"}, {"sha": "32e67838e03435c87f0c9d381020caa8cda0c23c", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -171,7 +171,7 @@ impl Conv for ra_ide_api::Documentation {\n     fn conv(self) -> Documentation {\n         Documentation::MarkupContent(MarkupContent {\n             kind: MarkupKind::Markdown,\n-            value: crate::markdown::mark_fenced_blocks_as_rust(self.as_str()).into(),\n+            value: crate::markdown::mark_fenced_blocks_as_rust(self.as_str()),\n         })\n     }\n }"}, {"sha": "cd81e226aa9b143eed3ebf88962715eedd9c38d9", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -5,9 +5,7 @@ pub(crate) mod pending_requests;\n use std::{error::Error, fmt, path::PathBuf, sync::Arc, time::Instant};\n \n use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n-use gen_lsp_server::{\n-    handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n-};\n+use gen_lsp_server::{handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse};\n use lsp_types::NumberOrString;\n use ra_ide_api::{Canceled, FileId, LibraryData};\n use ra_prof::profile;\n@@ -398,7 +396,8 @@ fn on_notification(\n         Ok(mut params) => {\n             let uri = params.text_document.uri;\n             let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n-            let text = params.content_changes.pop().ok_or_else(|| format!(\"empty changes\"))?.text;\n+            let text =\n+                params.content_changes.pop().ok_or_else(|| \"empty changes\".to_string())?.text;\n             state.vfs.write().change_file_overlay(path.as_path(), text);\n             return Ok(());\n         }"}, {"sha": "c7c06c7fd64d73dedb5d15d8e402fe3461754c7b", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -498,7 +498,7 @@ fn expand_tt(\n                 tt::Leaf::from(tt::Ident { text: ident.text.clone(), id: TokenId::unspecified() })\n                     .into()\n             }\n-            crate::Leaf::Punct(punct) => tt::Leaf::from(punct.clone()).into(),\n+            crate::Leaf::Punct(punct) => tt::Leaf::from(*punct).into(),\n             crate::Leaf::Var(v) => {\n                 if v.text == \"crate\" {\n                     // FIXME: Properly handle $crate token"}, {"sha": "cddb4a7b4c9bddc1e90b32cdd08941d042e00869", "filename": "crates/ra_mbe/src/mbe_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_parser.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -56,7 +56,7 @@ fn parse_subtree(tt: &tt::Subtree, transcriber: bool) -> Result<crate::Subtree,\n                     }\n                 }\n                 tt::Leaf::Punct(punct) => crate::Leaf::from(*punct).into(),\n-                tt::Leaf::Ident(tt::Ident { text, id: _ }) => {\n+                tt::Leaf::Ident(tt::Ident { text, .. }) => {\n                     crate::Leaf::from(crate::Ident { text: text.clone() }).into()\n                 }\n                 tt::Leaf::Literal(tt::Literal { text }) => {"}, {"sha": "e1c6e7d919bf1cb0eb72af407dc4a9bb3d845250", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -78,7 +78,7 @@ impl<'a> SubtreeTokenSource<'a> {\n             }\n         }\n \n-        return cached[pos].clone();\n+        cached[pos].clone()\n     }\n }\n "}, {"sha": "7560d215a4a7326496fea441cefd3d1b3fd3495e", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -107,7 +107,7 @@ pub fn token_tree_to_ast_item_list(tt: &tt::Subtree) -> TreeArc<ast::SourceFile>\n impl TokenMap {\n     pub fn relative_range_of(&self, tt: tt::TokenId) -> Option<TextRange> {\n         let idx = tt.0 as usize;\n-        self.tokens.get(idx).map(|&it| it)\n+        self.tokens.get(idx).copied()\n     }\n \n     fn alloc(&mut self, relative_range: TextRange) -> tt::TokenId {"}, {"sha": "8e360ce0f7fccf63b9ee943ac61f4e8c2b988dd2", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -171,14 +171,14 @@ impl<'a> TtCursor<'a> {\n     }\n \n     fn eat_punct3(&mut self, p: &tt::Punct) -> Option<SmallVec<[tt::Punct; 3]>> {\n-        let sec = self.eat_punct()?.clone();\n-        let third = self.eat_punct()?.clone();\n-        Some(smallvec![p.clone(), sec, third])\n+        let sec = *self.eat_punct()?;\n+        let third = *self.eat_punct()?;\n+        Some(smallvec![*p, sec, third])\n     }\n \n     fn eat_punct2(&mut self, p: &tt::Punct) -> Option<SmallVec<[tt::Punct; 3]>> {\n-        let sec = self.eat_punct()?.clone();\n-        Some(smallvec![p.clone(), sec])\n+        let sec = *self.eat_punct()?;\n+        Some(smallvec![*p, sec])\n     }\n \n     fn eat_multi_char_punct<'b, I>(\n@@ -251,7 +251,7 @@ impl<'a> TtCursor<'a> {\n                 // So we by pass that check here.\n                 let mut peekable = TokenPeek::new(self.subtree.token_trees[self.pos..].iter());\n                 let puncts = self.eat_multi_char_punct(punct, &mut peekable);\n-                let puncts = puncts.unwrap_or_else(|| smallvec![punct.clone()]);\n+                let puncts = puncts.unwrap_or_else(|| smallvec![*punct]);\n \n                 Some(crate::Separator::Puncts(puncts))\n             }"}, {"sha": "08e5c1c325c9f527faf4571856b4ddf988f7b7d2", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -191,7 +191,7 @@ impl ProjectWorkspace {\n                     }\n                 }\n \n-                let libstd = sysroot.std().and_then(|it| sysroot_crates.get(&it).map(|&it| it));\n+                let libstd = sysroot.std().and_then(|it| sysroot_crates.get(&it).copied());\n \n                 let mut pkg_to_lib_crate = FxHashMap::default();\n                 let mut pkg_crates = FxHashMap::default();"}, {"sha": "4f6e880dd478bbae5c5b52fd4f2476459cadffb4", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -94,7 +94,7 @@ impl SysrootCrate {\n         self.root(sysroot).parent().unwrap()\n     }\n     pub fn deps<'a>(self, sysroot: &'a Sysroot) -> impl Iterator<Item = SysrootCrate> + 'a {\n-        sysroot.crates[self].deps.iter().map(|&it| it)\n+        sysroot.crates[self].deps.iter().copied()\n     }\n }\n "}, {"sha": "4355e35875cdfaa895ddc66b4a4a83b08a75cbb9", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -260,7 +260,7 @@ impl ast::Literal {\n                     .iter()\n                     .find(|&s| text.ends_with(s))\n                     .map(|&suf| SmolStr::new(suf));\n-                LiteralKind::FloatNumber { suffix: suffix }\n+                LiteralKind::FloatNumber { suffix }\n             }\n             STRING | RAW_STRING => LiteralKind::String,\n             T![true] | T![false] => LiteralKind::Bool,"}, {"sha": "00039f97049182e1c1c845da6f1295b614ce6980", "filename": "crates/ra_syntax/src/fuzz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ffuzz.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -21,8 +21,8 @@ pub struct CheckReparse {\n \n impl CheckReparse {\n     pub fn from_data(data: &[u8]) -> Option<Self> {\n-        const PREFIX: &'static str = \"fn main(){\\n\\t\";\n-        const SUFFIX: &'static str = \"\\n}\";\n+        const PREFIX: &str = \"fn main(){\\n\\t\";\n+        const SUFFIX: &str = \"\\n}\";\n \n         let data = str::from_utf8(data).ok()?;\n         let mut lines = data.lines();"}, {"sha": "64cb20ae8cea166dd8df1fd90654dbed28b0850d", "filename": "crates/ra_syntax/src/parsing/text_token_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -28,7 +28,7 @@ pub(crate) struct TextTokenSource<'t> {\n \n impl<'t> TokenSource for TextTokenSource<'t> {\n     fn current(&self) -> PToken {\n-        return self.curr.0;\n+        self.curr.0\n     }\n \n     fn lookahead_nth(&self, n: usize) -> PToken {"}, {"sha": "a1f9a59b606685fcd6228e1fea407cd56067dfe1", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -357,7 +357,7 @@ impl SyntaxNode {\n         // `range` private afterwards\n         let mut ptr = SyntaxNodePtr::new(self);\n         ptr.range = TextRange::offset_len(ptr.range().start(), len);\n-        return ptr.to_node(file.syntax()).to_owned();\n+        ptr.to_node(file.syntax()).to_owned()\n     }\n \n     fn position_of_child(&self, child: SyntaxElement) -> usize {"}, {"sha": "1cb2433f333f0b5ac39d8b9efb5dab1f8f872629", "filename": "crates/ra_syntax/src/validation/unescape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ad9e986ad05e404df73701c098b71f73a847ca6/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation%2Funescape.rs?ref=4ad9e986ad05e404df73701c098b71f73a847ca6", "patch": "@@ -173,7 +173,7 @@ fn scan_escape(first_char: char, chars: &mut Chars<'_>, mode: Mode) -> Result<ch\n                         }\n \n                         break std::char::from_u32(value).ok_or_else(|| {\n-                            if value > 0x10FFFF {\n+                            if value > 0x0010_FFFF {\n                                 EscapeError::OutOfRangeUnicodeEscape\n                             } else {\n                                 EscapeError::LoneSurrogateUnicodeEscape"}]}