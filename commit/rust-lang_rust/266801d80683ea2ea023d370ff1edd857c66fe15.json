{"sha": "266801d80683ea2ea023d370ff1edd857c66fe15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NjgwMWQ4MDY4M2VhMmVhMDIzZDM3MGZmMWVkZDg1N2M2NmZlMTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-21T12:06:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T12:06:40Z"}, "message": "Rollup merge of #70032 - lcnr:issue69970, r=varkor\n\nput type params in front of const params in generics_of\n\nfixes #69970\n\nr? @varkor", "tree": {"sha": "f94bc5cd8db06d92e75c81caf5528769ff1f002c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94bc5cd8db06d92e75c81caf5528769ff1f002c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/266801d80683ea2ea023d370ff1edd857c66fe15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedgNQCRBK7hj4Ov3rIwAAdHIIACBAzAm1/3pM+msGsmWpl+g3\niDNLVi3bk3ndlA0zV9Z2PncL+00ujO7law6u7CLFBzpHxpdWZJV3WtlUQn9aF++C\nMWe819YsUMCPDCM58wFxMO31FN0dAw7cnejqB9Z80mQKh+9W+shk0za7gnsQG86F\ns+NQBwgZhMq8wn2askzo1th7pi3ThworR5Zw5qREm2MjjzhQQBWJxOWb+52HPl2Y\n+ksdtcrzKxihWTxcTrNWDKMgA/S2Rj6w08OC945PG2Ypd+K6J2CvHwj0vA6M38t6\nBkI9p01ZSdsEUrhaP+zKY34GZ9mFnGRJmJDgngGDmBqbv/HiiAgke3S25KOyO0I=\n=NZwt\n-----END PGP SIGNATURE-----\n", "payload": "tree f94bc5cd8db06d92e75c81caf5528769ff1f002c\nparent 276b54e9c930c4ff015e1958ad1c640deffd29b2\nparent 17c94c6746e94a4349a05bbf6326bebe35893acc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1584792400 +0100\ncommitter GitHub <noreply@github.com> 1584792400 +0100\n\nRollup merge of #70032 - lcnr:issue69970, r=varkor\n\nput type params in front of const params in generics_of\n\nfixes #69970\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/266801d80683ea2ea023d370ff1edd857c66fe15", "html_url": "https://github.com/rust-lang/rust/commit/266801d80683ea2ea023d370ff1edd857c66fe15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/266801d80683ea2ea023d370ff1edd857c66fe15/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276b54e9c930c4ff015e1958ad1c640deffd29b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/276b54e9c930c4ff015e1958ad1c640deffd29b2", "html_url": "https://github.com/rust-lang/rust/commit/276b54e9c930c4ff015e1958ad1c640deffd29b2"}, {"sha": "17c94c6746e94a4349a05bbf6326bebe35893acc", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c94c6746e94a4349a05bbf6326bebe35893acc", "html_url": "https://github.com/rust-lang/rust/commit/17c94c6746e94a4349a05bbf6326bebe35893acc"}], "stats": {"total": 121, "additions": 84, "deletions": 37}, "files": [{"sha": "b4363778094b4ceedda02d39e2c7f1d77a444f97", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=266801d80683ea2ea023d370ff1edd857c66fe15", "patch": "@@ -645,6 +645,8 @@ impl<'a> AstValidator<'a> {\n     }\n }\n \n+/// Checks that generic parameters are in the correct order,\n+/// which is lifetimes, then types and then consts. (`<'a, T, const N: usize>`)\n fn validate_generic_param_order<'a>(\n     sess: &Session,\n     handler: &rustc_errors::Handler,"}, {"sha": "a79c065307796e9f719fd21a8129fa4917cded4b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 57, "deletions": 37, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=266801d80683ea2ea023d370ff1edd857c66fe15", "patch": "@@ -1306,47 +1306,67 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     // Now create the real type and const parameters.\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n-    params.extend(ast_generics.params.iter().filter_map(|param| {\n-        let kind = match param.kind {\n-            GenericParamKind::Type { ref default, synthetic, .. } => {\n-                if !allow_defaults && default.is_some() {\n-                    if !tcx.features().default_type_parameter_fallback {\n-                        tcx.struct_span_lint_hir(\n-                            lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n-                            param.hir_id,\n-                            param.span,\n-                            |lint| {\n-                                lint.build(\n-                                    \"defaults for type parameters are only allowed in \\\n-                                            `struct`, `enum`, `type`, or `trait` definitions.\",\n-                                )\n-                                .emit();\n-                            },\n-                        );\n-                    }\n-                }\n \n-                ty::GenericParamDefKind::Type {\n-                    has_default: default.is_some(),\n-                    object_lifetime_default: object_lifetime_defaults\n-                        .as_ref()\n-                        .map_or(rl::Set1::Empty, |o| o[i]),\n-                    synthetic,\n+    // FIXME(const_generics): a few places in the compiler expect generic params\n+    // to be in the order lifetimes, then type params, then const params.\n+    //\n+    // To prevent internal errors in case const parameters are supplied before\n+    // type parameters we first add all type params, then all const params.\n+    params.extend(ast_generics.params.iter().filter_map(|param| {\n+        if let GenericParamKind::Type { ref default, synthetic, .. } = param.kind {\n+            if !allow_defaults && default.is_some() {\n+                if !tcx.features().default_type_parameter_fallback {\n+                    tcx.struct_span_lint_hir(\n+                        lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n+                        param.hir_id,\n+                        param.span,\n+                        |lint| {\n+                            lint.build(\n+                                \"defaults for type parameters are only allowed in \\\n+                                        `struct`, `enum`, `type`, or `trait` definitions.\",\n+                            )\n+                            .emit();\n+                        },\n+                    );\n                 }\n             }\n-            GenericParamKind::Const { .. } => ty::GenericParamDefKind::Const,\n-            _ => return None,\n-        };\n \n-        let param_def = ty::GenericParamDef {\n-            index: type_start + i as u32,\n-            name: param.name.ident().name,\n-            def_id: tcx.hir().local_def_id(param.hir_id),\n-            pure_wrt_drop: param.pure_wrt_drop,\n-            kind,\n-        };\n-        i += 1;\n-        Some(param_def)\n+            let kind = ty::GenericParamDefKind::Type {\n+                has_default: default.is_some(),\n+                object_lifetime_default: object_lifetime_defaults\n+                    .as_ref()\n+                    .map_or(rl::Set1::Empty, |o| o[i]),\n+                synthetic,\n+            };\n+\n+            let param_def = ty::GenericParamDef {\n+                index: type_start + i as u32,\n+                name: param.name.ident().name,\n+                def_id: tcx.hir().local_def_id(param.hir_id),\n+                pure_wrt_drop: param.pure_wrt_drop,\n+                kind,\n+            };\n+            i += 1;\n+            Some(param_def)\n+        } else {\n+            None\n+        }\n+    }));\n+\n+    params.extend(ast_generics.params.iter().filter_map(|param| {\n+        if let GenericParamKind::Const { .. } = param.kind {\n+            let param_def = ty::GenericParamDef {\n+                index: type_start + i as u32,\n+                name: param.name.ident().name,\n+                def_id: tcx.hir().local_def_id(param.hir_id),\n+                pure_wrt_drop: param.pure_wrt_drop,\n+                kind: ty::GenericParamDefKind::Const,\n+            };\n+            i += 1;\n+            Some(param_def)\n+        } else {\n+            None\n+        }\n     }));\n \n     // provide junk type parameter defs - the only place that"}, {"sha": "3446600d0495f647179637564c9847e958a776a0", "filename": "src/test/ui/const-generics/argument_order.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.rs?ref=266801d80683ea2ea023d370ff1edd857c66fe15", "patch": "@@ -0,0 +1,9 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Bad<const N: usize, T> { //~ ERROR type parameters must be declared prior\n+    arr: [u8; { N }],\n+    another: T,\n+}\n+\n+fn main() { }"}, {"sha": "1e3b364eb6089e7420f9ce618d9208d1ac5bb967", "filename": "src/test/ui/const-generics/argument_order.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/266801d80683ea2ea023d370ff1edd857c66fe15/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fargument_order.stderr?ref=266801d80683ea2ea023d370ff1edd857c66fe15", "patch": "@@ -0,0 +1,16 @@\n+error: type parameters must be declared prior to const parameters\n+  --> $DIR/argument_order.rs:4:28\n+   |\n+LL | struct Bad<const N: usize, T> {\n+   |           -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n+\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/argument_order.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: aborting due to previous error\n+"}]}