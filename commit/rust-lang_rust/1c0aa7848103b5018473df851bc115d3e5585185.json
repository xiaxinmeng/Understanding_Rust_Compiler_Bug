{"sha": "1c0aa7848103b5018473df851bc115d3e5585185", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMGFhNzg0ODEwM2I1MDE4NDczZGY4NTFiYzExNWQzZTU1ODUxODU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-06-06T00:56:24Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-28T14:44:15Z"}, "message": "librustc: Change \"Owned\" to \"Send\" everywhere", "tree": {"sha": "008b749cd796b898a858a799aedce688dd85424d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/008b749cd796b898a858a799aedce688dd85424d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c0aa7848103b5018473df851bc115d3e5585185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0aa7848103b5018473df851bc115d3e5585185", "html_url": "https://github.com/rust-lang/rust/commit/1c0aa7848103b5018473df851bc115d3e5585185", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c0aa7848103b5018473df851bc115d3e5585185/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eec3bba13fef50324d1a7542713b3189a627547", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eec3bba13fef50324d1a7542713b3189a627547", "html_url": "https://github.com/rust-lang/rust/commit/1eec3bba13fef50324d1a7542713b3189a627547"}], "stats": {"total": 444, "additions": 222, "deletions": 222}, "files": [{"sha": "2fb03fecb5988e14da7a87aafa43c18fcde7c4e0", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -112,15 +112,15 @@ impl<'self> Condvar<'self> {\n pub struct ARC<T> { x: UnsafeAtomicRcBox<T> }\n \n /// Create an atomically reference counted wrapper.\n-pub fn ARC<T:Freeze + Owned>(data: T) -> ARC<T> {\n+pub fn ARC<T:Freeze + Send>(data: T) -> ARC<T> {\n     ARC { x: UnsafeAtomicRcBox::new(data) }\n }\n \n /**\n  * Access the underlying data in an atomically reference counted\n  * wrapper.\n  */\n-impl<T:Freeze+Owned> ARC<T> {\n+impl<T:Freeze+Send> ARC<T> {\n     pub fn get<'a>(&'a self) -> &'a T {\n         unsafe { &*self.x.get_immut() }\n     }\n@@ -133,7 +133,7 @@ impl<T:Freeze+Owned> ARC<T> {\n  * object. However, one of the `arc` objects can be sent to another task,\n  * allowing them to share the underlying data.\n  */\n-impl<T:Freeze + Owned> Clone for ARC<T> {\n+impl<T:Freeze + Send> Clone for ARC<T> {\n     fn clone(&self) -> ARC<T> {\n         ARC { x: self.x.clone() }\n     }\n@@ -149,22 +149,22 @@ struct MutexARCInner<T> { lock: Mutex, failed: bool, data: T }\n struct MutexARC<T> { x: UnsafeAtomicRcBox<MutexARCInner<T>> }\n \n /// Create a mutex-protected ARC with the supplied data.\n-pub fn MutexARC<T:Owned>(user_data: T) -> MutexARC<T> {\n+pub fn MutexARC<T:Send>(user_data: T) -> MutexARC<T> {\n     mutex_arc_with_condvars(user_data, 1)\n }\n /**\n  * Create a mutex-protected ARC with the supplied data and a specified number\n  * of condvars (as sync::mutex_with_condvars).\n  */\n-pub fn mutex_arc_with_condvars<T:Owned>(user_data: T,\n+pub fn mutex_arc_with_condvars<T:Send>(user_data: T,\n                                     num_condvars: uint) -> MutexARC<T> {\n     let data =\n         MutexARCInner { lock: mutex_with_condvars(num_condvars),\n                           failed: false, data: user_data };\n     MutexARC { x: UnsafeAtomicRcBox::new(data) }\n }\n \n-impl<T:Owned> Clone for MutexARC<T> {\n+impl<T:Send> Clone for MutexARC<T> {\n     /// Duplicate a mutex-protected ARC, as arc::clone.\n     fn clone(&self) -> MutexARC<T> {\n         // NB: Cloning the underlying mutex is not necessary. Its reference\n@@ -173,7 +173,7 @@ impl<T:Owned> Clone for MutexARC<T> {\n     }\n }\n \n-impl<T:Owned> MutexARC<T> {\n+impl<T:Send> MutexARC<T> {\n \n     /**\n      * Access the underlying mutable data with mutual exclusion from other\n@@ -282,14 +282,14 @@ struct RWARC<T> {\n }\n \n /// Create a reader/writer ARC with the supplied data.\n-pub fn RWARC<T:Freeze + Owned>(user_data: T) -> RWARC<T> {\n+pub fn RWARC<T:Freeze + Send>(user_data: T) -> RWARC<T> {\n     rw_arc_with_condvars(user_data, 1)\n }\n /**\n  * Create a reader/writer ARC with the supplied data and a specified number\n  * of condvars (as sync::rwlock_with_condvars).\n  */\n-pub fn rw_arc_with_condvars<T:Freeze + Owned>(\n+pub fn rw_arc_with_condvars<T:Freeze + Send>(\n     user_data: T,\n     num_condvars: uint) -> RWARC<T>\n {\n@@ -299,7 +299,7 @@ pub fn rw_arc_with_condvars<T:Freeze + Owned>(\n     RWARC { x: UnsafeAtomicRcBox::new(data), }\n }\n \n-impl<T:Freeze + Owned> RWARC<T> {\n+impl<T:Freeze + Send> RWARC<T> {\n     /// Duplicate a rwlock-protected ARC, as arc::clone.\n     pub fn clone(&self) -> RWARC<T> {\n         RWARC {\n@@ -309,7 +309,7 @@ impl<T:Freeze + Owned> RWARC<T> {\n \n }\n \n-impl<T:Freeze + Owned> RWARC<T> {\n+impl<T:Freeze + Send> RWARC<T> {\n     /**\n      * Access the underlying data mutably. Locks the rwlock in write mode;\n      * other readers and writers will block.\n@@ -435,7 +435,7 @@ impl<T:Freeze + Owned> RWARC<T> {\n // lock it. This wraps the unsafety, with the justification that the 'lock'\n // field is never overwritten; only 'failed' and 'data'.\n #[doc(hidden)]\n-fn borrow_rwlock<T:Freeze + Owned>(state: *const RWARCInner<T>) -> *RWlock {\n+fn borrow_rwlock<T:Freeze + Send>(state: *const RWARCInner<T>) -> *RWlock {\n     unsafe { cast::transmute(&const (*state).lock) }\n }\n \n@@ -452,7 +452,7 @@ pub struct RWReadMode<'self, T> {\n     token: sync::RWlockReadMode<'self>,\n }\n \n-impl<'self, T:Freeze + Owned> RWWriteMode<'self, T> {\n+impl<'self, T:Freeze + Send> RWWriteMode<'self, T> {\n     /// Access the pre-downgrade RWARC in write mode.\n     pub fn write<U>(&mut self, blk: &fn(x: &mut T) -> U) -> U {\n         match *self {\n@@ -493,7 +493,7 @@ impl<'self, T:Freeze + Owned> RWWriteMode<'self, T> {\n     }\n }\n \n-impl<'self, T:Freeze + Owned> RWReadMode<'self, T> {\n+impl<'self, T:Freeze + Send> RWReadMode<'self, T> {\n     /// Access the post-downgrade rwlock in read mode.\n     pub fn read<U>(&self, blk: &fn(x: &T) -> U) -> U {\n         match *self {"}, {"sha": "2cb2128db5f7363cd96dd6c1b15f398942c90ae5", "filename": "src/libextra/comm.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcomm.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -30,7 +30,7 @@ pub struct DuplexStream<T, U> {\n }\n \n // Allow these methods to be used without import:\n-impl<T:Owned,U:Owned> DuplexStream<T, U> {\n+impl<T:Send,U:Send> DuplexStream<T, U> {\n     pub fn send(&self, x: T) {\n         self.chan.send(x)\n     }\n@@ -48,19 +48,19 @@ impl<T:Owned,U:Owned> DuplexStream<T, U> {\n     }\n }\n \n-impl<T:Owned,U:Owned> GenericChan<T> for DuplexStream<T, U> {\n+impl<T:Send,U:Send> GenericChan<T> for DuplexStream<T, U> {\n     fn send(&self, x: T) {\n         self.chan.send(x)\n     }\n }\n \n-impl<T:Owned,U:Owned> GenericSmartChan<T> for DuplexStream<T, U> {\n+impl<T:Send,U:Send> GenericSmartChan<T> for DuplexStream<T, U> {\n     fn try_send(&self, x: T) -> bool {\n         self.chan.try_send(x)\n     }\n }\n \n-impl<T:Owned,U:Owned> GenericPort<U> for DuplexStream<T, U> {\n+impl<T:Send,U:Send> GenericPort<U> for DuplexStream<T, U> {\n     fn recv(&self) -> U {\n         self.port.recv()\n     }\n@@ -70,20 +70,20 @@ impl<T:Owned,U:Owned> GenericPort<U> for DuplexStream<T, U> {\n     }\n }\n \n-impl<T:Owned,U:Owned> Peekable<U> for DuplexStream<T, U> {\n+impl<T:Send,U:Send> Peekable<U> for DuplexStream<T, U> {\n     fn peek(&self) -> bool {\n         self.port.peek()\n     }\n }\n \n-impl<T:Owned,U:Owned> Selectable for DuplexStream<T, U> {\n+impl<T:Send,U:Send> Selectable for DuplexStream<T, U> {\n     fn header(&mut self) -> *mut pipes::PacketHeader {\n         self.port.header()\n     }\n }\n \n /// Creates a bidirectional stream.\n-pub fn DuplexStream<T:Owned,U:Owned>()\n+pub fn DuplexStream<T:Send,U:Send>()\n     -> (DuplexStream<T, U>, DuplexStream<U, T>)\n {\n     let (p1, c2) = comm::stream();"}, {"sha": "d5e43e85a140ee2910ee2c47d0eaf5e3756efbd2", "filename": "src/libextra/flatpipes.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflatpipes.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -166,8 +166,8 @@ Constructors for flat pipes that send POD types using memcpy.\n \n # Safety Note\n \n-This module is currently unsafe because it uses `Copy Owned` as a type\n-parameter bounds meaning POD (plain old data), but `Copy Owned` and\n+This module is currently unsafe because it uses `Copy Send` as a type\n+parameter bounds meaning POD (plain old data), but `Copy Send` and\n POD are not equivelant.\n \n */\n@@ -191,7 +191,7 @@ pub mod pod {\n     pub type PipeChan<T> = FlatChan<T, PodFlattener<T>, PipeByteChan>;\n \n     /// Create a `FlatPort` from a `Reader`\n-    pub fn reader_port<T:Copy + Owned,R:Reader>(\n+    pub fn reader_port<T:Copy + Send,R:Reader>(\n         reader: R\n     ) -> ReaderPort<T, R> {\n         let unflat: PodUnflattener<T> = PodUnflattener::new();\n@@ -200,7 +200,7 @@ pub mod pod {\n     }\n \n     /// Create a `FlatChan` from a `Writer`\n-    pub fn writer_chan<T:Copy + Owned,W:Writer>(\n+    pub fn writer_chan<T:Copy + Send,W:Writer>(\n         writer: W\n     ) -> WriterChan<T, W> {\n         let flat: PodFlattener<T> = PodFlattener::new();\n@@ -209,21 +209,21 @@ pub mod pod {\n     }\n \n     /// Create a `FlatPort` from a `Port<~[u8]>`\n-    pub fn pipe_port<T:Copy + Owned>(port: Port<~[u8]>) -> PipePort<T> {\n+    pub fn pipe_port<T:Copy + Send>(port: Port<~[u8]>) -> PipePort<T> {\n         let unflat: PodUnflattener<T> = PodUnflattener::new();\n         let byte_port = PipeBytePort::new(port);\n         FlatPort::new(unflat, byte_port)\n     }\n \n     /// Create a `FlatChan` from a `Chan<~[u8]>`\n-    pub fn pipe_chan<T:Copy + Owned>(chan: Chan<~[u8]>) -> PipeChan<T> {\n+    pub fn pipe_chan<T:Copy + Send>(chan: Chan<~[u8]>) -> PipeChan<T> {\n         let flat: PodFlattener<T> = PodFlattener::new();\n         let byte_chan = PipeByteChan::new(chan);\n         FlatChan::new(flat, byte_chan)\n     }\n \n     /// Create a pair of `FlatChan` and `FlatPort`, backed by pipes\n-    pub fn pipe_stream<T:Copy + Owned>() -> (PipePort<T>, PipeChan<T>) {\n+    pub fn pipe_stream<T:Copy + Send>() -> (PipePort<T>, PipeChan<T>) {\n         let (port, chan) = comm::stream();\n         return (pipe_port(port), pipe_chan(chan));\n     }\n@@ -352,7 +352,7 @@ pub mod flatteners {\n     use core::sys::size_of;\n     use core::vec;\n \n-    // FIXME #4074: Copy + Owned != POD\n+    // FIXME #4074: Copy + Send != POD\n     pub struct PodUnflattener<T> {\n         bogus: ()\n     }\n@@ -361,7 +361,7 @@ pub mod flatteners {\n         bogus: ()\n     }\n \n-    impl<T:Copy + Owned> Unflattener<T> for PodUnflattener<T> {\n+    impl<T:Copy + Send> Unflattener<T> for PodUnflattener<T> {\n         fn unflatten(&self, buf: ~[u8]) -> T {\n             assert!(size_of::<T>() != 0);\n             assert_eq!(size_of::<T>(), buf.len());\n@@ -371,7 +371,7 @@ pub mod flatteners {\n         }\n     }\n \n-    impl<T:Copy + Owned> Flattener<T> for PodFlattener<T> {\n+    impl<T:Copy + Send> Flattener<T> for PodFlattener<T> {\n         fn flatten(&self, val: T) -> ~[u8] {\n             assert!(size_of::<T>() != 0);\n             let val: *T = ptr::to_unsafe_ptr(&val);\n@@ -380,15 +380,15 @@ pub mod flatteners {\n         }\n     }\n \n-    impl<T:Copy + Owned> PodUnflattener<T> {\n+    impl<T:Copy + Send> PodUnflattener<T> {\n         pub fn new() -> PodUnflattener<T> {\n             PodUnflattener {\n                 bogus: ()\n             }\n         }\n     }\n \n-    impl<T:Copy + Owned> PodFlattener<T> {\n+    impl<T:Copy + Send> PodFlattener<T> {\n         pub fn new() -> PodFlattener<T> {\n             PodFlattener {\n                 bogus: ()"}, {"sha": "00f4cc3989be38a41ca729ef4c4e550488925e8e", "filename": "src/libextra/future.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -101,7 +101,7 @@ pub fn from_value<A>(val: A) -> Future<A> {\n     Future {state: Forced(val)}\n }\n \n-pub fn from_port<A:Owned>(port: PortOne<A>) -> Future<A> {\n+pub fn from_port<A:Send>(port: PortOne<A>) -> Future<A> {\n     /*!\n      * Create a future from a port\n      *\n@@ -127,7 +127,7 @@ pub fn from_fn<A>(f: ~fn() -> A) -> Future<A> {\n     Future {state: Pending(f)}\n }\n \n-pub fn spawn<A:Owned>(blk: ~fn() -> A) -> Future<A> {\n+pub fn spawn<A:Send>(blk: ~fn() -> A) -> Future<A> {\n     /*!\n      * Create a future from a unique closure.\n      *"}, {"sha": "a3014cf8894bf5abd5204371cb7248efddfbbf27", "filename": "src/libextra/par.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -33,7 +33,7 @@ static min_granularity : uint = 1024u;\n  * This is used to build most of the other parallel vector functions,\n  * like map or alli.\n  */\n-fn map_slices<A:Copy + Owned,B:Copy + Owned>(\n+fn map_slices<A:Copy + Send,B:Copy + Send>(\n     xs: &[A],\n     f: &fn() -> ~fn(uint, v: &[A]) -> B)\n     -> ~[B] {\n@@ -88,7 +88,7 @@ fn map_slices<A:Copy + Owned,B:Copy + Owned>(\n }\n \n /// A parallel version of map.\n-pub fn map<A:Copy + Owned,B:Copy + Owned>(\n+pub fn map<A:Copy + Send,B:Copy + Send>(\n     xs: &[A], fn_factory: &fn() -> ~fn(&A) -> B) -> ~[B] {\n     vec::concat(map_slices(xs, || {\n         let f = fn_factory();\n@@ -99,7 +99,7 @@ pub fn map<A:Copy + Owned,B:Copy + Owned>(\n }\n \n /// A parallel version of mapi.\n-pub fn mapi<A:Copy + Owned,B:Copy + Owned>(\n+pub fn mapi<A:Copy + Send,B:Copy + Send>(\n         xs: &[A],\n         fn_factory: &fn() -> ~fn(uint, &A) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {\n@@ -118,7 +118,7 @@ pub fn mapi<A:Copy + Owned,B:Copy + Owned>(\n }\n \n /// Returns true if the function holds for all elements in the vector.\n-pub fn alli<A:Copy + Owned>(\n+pub fn alli<A:Copy + Send>(\n     xs: &[A],\n     fn_factory: &fn() -> ~fn(uint, &A) -> bool) -> bool\n {\n@@ -133,7 +133,7 @@ pub fn alli<A:Copy + Owned>(\n }\n \n /// Returns true if the function holds for any elements in the vector.\n-pub fn any<A:Copy + Owned>(\n+pub fn any<A:Copy + Send>(\n     xs: &[A],\n     fn_factory: &fn() -> ~fn(&A) -> bool) -> bool {\n     let mapped = map_slices(xs, || {"}, {"sha": "009d68ac026016b593c9945aeaad44c42f3255ad", "filename": "src/libextra/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frc.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -13,10 +13,10 @@\n /** Task-local reference counted smart pointers\n \n Task-local reference counted smart pointers are an alternative to managed boxes with deterministic\n-destruction. They are restricted to containing types that are either `Owned` or `Freeze` (or both) to\n+destruction. They are restricted to containing types that are either `Send` or `Freeze` (or both) to\n prevent cycles.\n \n-Neither `Rc<T>` or `RcMut<T>` is ever `Owned` and `RcMut<T>` is never `Freeze`. If `T` is `Freeze`, a\n+Neither `Rc<T>` or `RcMut<T>` is ever `Send` and `RcMut<T>` is never `Freeze`. If `T` is `Freeze`, a\n cycle cannot be created with `Rc<T>` because there is no way to modify it after creation.\n \n */\n@@ -51,7 +51,7 @@ impl<T> Rc<T> {\n }\n \n // FIXME: #6516: should be a static method\n-pub fn rc_from_owned<T: Owned>(value: T) -> Rc<T> {\n+pub fn rc_from_owned<T: Send>(value: T) -> Rc<T> {\n     unsafe { Rc::new(value) }\n }\n \n@@ -185,7 +185,7 @@ impl<T> RcMut<T> {\n }\n \n // FIXME: #6516: should be a static method\n-pub fn rc_mut_from_owned<T: Owned>(value: T) -> RcMut<T> {\n+pub fn rc_mut_from_owned<T: Send>(value: T) -> RcMut<T> {\n     unsafe { RcMut::new(value) }\n }\n "}, {"sha": "61b6a233944c11ad8065043ecfe3118a542cf797", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -86,7 +86,7 @@ struct SemInner<Q> {\n struct Sem<Q>(Exclusive<SemInner<Q>>);\n \n #[doc(hidden)]\n-fn new_sem<Q:Owned>(count: int, q: Q) -> Sem<Q> {\n+fn new_sem<Q:Send>(count: int, q: Q) -> Sem<Q> {\n     Sem(exclusive(SemInner {\n         count: count, waiters: new_waitqueue(), blocked: q }))\n }\n@@ -101,7 +101,7 @@ fn new_sem_and_signal(count: int, num_condvars: uint)\n }\n \n #[doc(hidden)]\n-impl<Q:Owned> Sem<Q> {\n+impl<Q:Send> Sem<Q> {\n     pub fn acquire(&self) {\n         unsafe {\n             let mut waiter_nobe = None;\n@@ -175,7 +175,7 @@ struct SemReleaseGeneric<'self, Q> { sem: &'self Sem<Q> }\n \n #[doc(hidden)]\n #[unsafe_destructor]\n-impl<'self, Q:Owned> Drop for SemReleaseGeneric<'self, Q> {\n+impl<'self, Q:Send> Drop for SemReleaseGeneric<'self, Q> {\n     fn drop(&self) {\n         self.sem.release();\n     }"}, {"sha": "5a622ddfa0debbd9f9ad58994f4db9faec454aa9", "filename": "src/libextra/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftimer.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -39,7 +39,7 @@ use core::libc;\n  * * ch - a channel of type T to send a `val` on\n  * * val - a value of type T to send over the provided `ch`\n  */\n-pub fn delayed_send<T:Owned>(iotask: &IoTask,\n+pub fn delayed_send<T:Send>(iotask: &IoTask,\n                               msecs: uint,\n                               ch: &Chan<T>,\n                               val: T) {\n@@ -119,7 +119,7 @@ pub fn sleep(iotask: &IoTask, msecs: uint) {\n  * on the provided port in the allotted timeout period, then the result will\n  * be a `Some(T)`. If not, then `None` will be returned.\n  */\n-pub fn recv_timeout<T:Copy + Owned>(iotask: &IoTask,\n+pub fn recv_timeout<T:Copy + Send>(iotask: &IoTask,\n                                    msecs: uint,\n                                    wait_po: &Port<T>)\n                                    -> Option<T> {"}, {"sha": "567f9eda2fbae460159a8c2e6c81b35a9c876732", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -272,7 +272,7 @@ impl Context {\n         }\n     }\n \n-    pub fn prep<T:Owned +\n+    pub fn prep<T:Send +\n                   Encodable<json::Encoder> +\n                   Decodable<json::Decoder>>(@self, // FIXME(#5121)\n                                             fn_name:&str,\n@@ -292,7 +292,7 @@ trait TPrep {\n     fn declare_input(&mut self, kind:&str, name:&str, val:&str);\n     fn is_fresh(&self, cat:&str, kind:&str, name:&str, val:&str) -> bool;\n     fn all_fresh(&self, cat:&str, map:&WorkMap) -> bool;\n-    fn exec<T:Owned +\n+    fn exec<T:Send +\n               Encodable<json::Encoder> +\n               Decodable<json::Decoder>>( // FIXME(#5121)\n         &self, blk: ~fn(&Exec) -> T) -> Work<T>;\n@@ -328,7 +328,7 @@ impl TPrep for Prep {\n         return true;\n     }\n \n-    fn exec<T:Owned +\n+    fn exec<T:Send +\n               Encodable<json::Encoder> +\n               Decodable<json::Decoder>>( // FIXME(#5121)\n             &self, blk: ~fn(&Exec) -> T) -> Work<T> {\n@@ -365,7 +365,7 @@ impl TPrep for Prep {\n     }\n }\n \n-impl<T:Owned +\n+impl<T:Send +\n        Encodable<json::Encoder> +\n        Decodable<json::Decoder>> Work<T> { // FIXME(#5121)\n     pub fn new(p: @mut Prep, e: Either<T,PortOne<(Exec,T)>>) -> Work<T> {\n@@ -374,7 +374,7 @@ impl<T:Owned +\n }\n \n // FIXME (#3724): movable self. This should be in impl Work.\n-fn unwrap<T:Owned +\n+fn unwrap<T:Send +\n             Encodable<json::Encoder> +\n             Decodable<json::Decoder>>( // FIXME(#5121)\n         w: Work<T>) -> T {"}, {"sha": "8bb5c4620ef78e196467fa77d3561fcadc557e43", "filename": "src/librustc/middle/borrowck/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -359,7 +359,7 @@ of its owner:\n     LIFETIME(LV.f, LT, MQ)              // L-Field\n       LIFETIME(LV, LT, MQ)\n \n-    LIFETIME(*LV, LT, MQ)               // L-Deref-Owned\n+    LIFETIME(*LV, LT, MQ)               // L-Deref-Send\n       TYPE(LV) = ~Ty\n       LIFETIME(LV, LT, MQ)\n \n@@ -504,7 +504,7 @@ must prevent the owned pointer `LV` from being mutated, which means\n that we always add `MUTATE` and `CLAIM` to the restriction set imposed\n on `LV`:\n \n-    RESTRICTIONS(*LV, ACTIONS) = RS, (*LV, ACTIONS)    // R-Deref-Owned-Pointer\n+    RESTRICTIONS(*LV, ACTIONS) = RS, (*LV, ACTIONS)    // R-Deref-Send-Pointer\n       TYPE(LV) = ~Ty\n       RESTRICTIONS(LV, ACTIONS|MUTATE|CLAIM) = RS\n "}, {"sha": "131ee5aa067b4c77a6b32811b93d0aa20eeb4909", "filename": "src/librustc/middle/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -109,7 +109,7 @@ impl GuaranteeLifetimeContext {\n             }\n \n             mc::cat_downcast(base) |\n-            mc::cat_deref(base, _, mc::uniq_ptr(*)) |  // L-Deref-Owned\n+            mc::cat_deref(base, _, mc::uniq_ptr(*)) |  // L-Deref-Send\n             mc::cat_interior(base, _) => {             // L-Field\n                 self.check(base, discr_scope)\n             }"}, {"sha": "5f4251ad0a424a6448d3a1bae870088e223d08e8", "filename": "src/librustc/middle/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -103,7 +103,7 @@ impl RestrictionsContext {\n             }\n \n             mc::cat_deref(cmt_base, _, mc::uniq_ptr(*)) => {\n-                // R-Deref-Owned-Pointer\n+                // R-Deref-Send-Pointer\n                 //\n                 // When we borrow the interior of an owned pointer, we\n                 // cannot permit the base to be mutated, because that"}, {"sha": "58a527f35018dfe9b4542ff244376f93eb3da9bc", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -538,7 +538,7 @@ pub fn check_pat(pcx: &pat_ctxt, pat: @ast::pat, expected: ty::t) {\n           check_pointer_pat(pcx, Managed, inner, pat.id, pat.span, expected);\n       }\n       ast::pat_uniq(inner) => {\n-          check_pointer_pat(pcx, Owned, inner, pat.id, pat.span, expected);\n+          check_pointer_pat(pcx, Send, inner, pat.id, pat.span, expected);\n       }\n       ast::pat_region(inner) => {\n           check_pointer_pat(pcx, Borrowed, inner, pat.id, pat.span, expected);\n@@ -624,7 +624,7 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n         ty::ty_box(e_inner) if pointer_kind == Managed => {\n             check_inner(e_inner);\n         }\n-        ty::ty_uniq(e_inner) if pointer_kind == Owned => {\n+        ty::ty_uniq(e_inner) if pointer_kind == Send => {\n             check_inner(e_inner);\n         }\n         ty::ty_rptr(_, e_inner) if pointer_kind == Borrowed => {\n@@ -641,7 +641,7 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n                 Some(expected),\n                 fmt!(\"%s pattern\", match pointer_kind {\n                     Managed => \"an @-box\",\n-                    Owned => \"a ~-box\",\n+                    Send => \"a ~-box\",\n                     Borrowed => \"an &-pointer\"\n                 }),\n                 None);\n@@ -651,4 +651,4 @@ pub fn check_pointer_pat(pcx: &pat_ctxt,\n }\n \n #[deriving(Eq)]\n-enum PointerKind { Managed, Owned, Borrowed }\n+enum PointerKind { Managed, Send, Borrowed }"}, {"sha": "27ab3aca0209331d0e57d27938257d057c4f4895", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -99,7 +99,7 @@ fn act(po: &Port<Msg>, source: @str, parse: Parser) {\n     }\n }\n \n-pub fn exec<T:Owned>(\n+pub fn exec<T:Send>(\n     srv: Srv,\n     f: ~fn(ctxt: Ctxt) -> T\n ) -> T {"}, {"sha": "a2e50d37fb63e567d566b1cb5594b07b6f92e0fb", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -101,7 +101,7 @@ fn fold_item(\n     }\n }\n \n-fn parse_item_attrs<T:Owned>(\n+fn parse_item_attrs<T:Send>(\n     srv: astsrv::Srv,\n     id: doc::AstId,\n     parse_attrs: ~fn(a: ~[ast::attribute]) -> T) -> T {"}, {"sha": "947aa5708c2967f686e3d54e67603666673286a2", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -112,15 +112,15 @@ impl<T: DeepClone> DeepClone for ~T {\n     fn deep_clone(&self) -> ~T { ~(**self).deep_clone() }\n }\n \n-// FIXME: #6525: should also be implemented for `T: Owned + DeepClone`\n+// FIXME: #6525: should also be implemented for `T: Send + DeepClone`\n impl<T: Freeze + DeepClone> DeepClone for @T {\n     /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n     /// a deep clone of a potentially cyclical type.\n     #[inline]\n     fn deep_clone(&self) -> @T { @(**self).deep_clone() }\n }\n \n-// FIXME: #6525: should also be implemented for `T: Owned + DeepClone`\n+// FIXME: #6525: should also be implemented for `T: Send + DeepClone`\n impl<T: Freeze + DeepClone> DeepClone for @mut T {\n     /// Return a deep copy of the managed box. The `Freeze` trait is required to prevent performing\n     /// a deep clone of a potentially cyclical type."}, {"sha": "8316a33ecf1f8f65f9ef7322875fddbb29482744", "filename": "src/libstd/comm.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -17,7 +17,7 @@ Message passing\n use cast::{transmute, transmute_mut};\n use container::Container;\n use either::{Either, Left, Right};\n-use kinds::Owned;\n+use kinds::Send;\n use option::{Option, Some, None};\n use uint;\n use vec::OwnedVector;\n@@ -77,7 +77,7 @@ pub struct Port<T> {\n These allow sending or receiving an unlimited number of messages.\n \n */\n-pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n+pub fn stream<T:Send>() -> (Port<T>, Chan<T>) {\n     let (port, chan) = match rt::context() {\n         rt::OldTaskContext => match pipesy::stream() {\n             (p, c) => (Left(p), Left(c))\n@@ -91,7 +91,7 @@ pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n     return (port, chan);\n }\n \n-impl<T: Owned> GenericChan<T> for Chan<T> {\n+impl<T: Send> GenericChan<T> for Chan<T> {\n     fn send(&self, x: T) {\n         match self.inner {\n             Left(ref chan) => chan.send(x),\n@@ -100,7 +100,7 @@ impl<T: Owned> GenericChan<T> for Chan<T> {\n     }\n }\n \n-impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n+impl<T: Send> GenericSmartChan<T> for Chan<T> {\n     fn try_send(&self, x: T) -> bool {\n         match self.inner {\n             Left(ref chan) => chan.try_send(x),\n@@ -109,7 +109,7 @@ impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n     }\n }\n \n-impl<T: Owned> GenericPort<T> for Port<T> {\n+impl<T: Send> GenericPort<T> for Port<T> {\n     fn recv(&self) -> T {\n         match self.inner {\n             Left(ref port) => port.recv(),\n@@ -125,7 +125,7 @@ impl<T: Owned> GenericPort<T> for Port<T> {\n     }\n }\n \n-impl<T: Owned> Peekable<T> for Port<T> {\n+impl<T: Send> Peekable<T> for Port<T> {\n     fn peek(&self) -> bool {\n         match self.inner {\n             Left(ref port) => port.peek(),\n@@ -134,7 +134,7 @@ impl<T: Owned> Peekable<T> for Port<T> {\n     }\n }\n \n-impl<T: Owned> Selectable for Port<T> {\n+impl<T: Send> Selectable for Port<T> {\n     fn header(&mut self) -> *mut PacketHeader {\n         match self.inner {\n             Left(ref mut port) => port.header(),\n@@ -149,7 +149,7 @@ pub struct PortSet<T> {\n     ports: ~[pipesy::Port<T>],\n }\n \n-impl<T: Owned> PortSet<T> {\n+impl<T: Send> PortSet<T> {\n     pub fn new() -> PortSet<T> {\n         PortSet {\n             ports: ~[]\n@@ -175,7 +175,7 @@ impl<T: Owned> PortSet<T> {\n     }\n }\n \n-impl<T:Owned> GenericPort<T> for PortSet<T> {\n+impl<T:Send> GenericPort<T> for PortSet<T> {\n     fn try_recv(&self) -> Option<T> {\n         unsafe {\n             let self_ports = transmute_mut(&self.ports);\n@@ -204,7 +204,7 @@ impl<T:Owned> GenericPort<T> for PortSet<T> {\n     }\n }\n \n-impl<T: Owned> Peekable<T> for PortSet<T> {\n+impl<T: Send> Peekable<T> for PortSet<T> {\n     fn peek(&self) -> bool {\n         // It'd be nice to use self.port.each, but that version isn't\n         // pure.\n@@ -223,7 +223,7 @@ pub struct SharedChan<T> {\n     ch: Exclusive<pipesy::Chan<T>>\n }\n \n-impl<T: Owned> SharedChan<T> {\n+impl<T: Send> SharedChan<T> {\n     /// Converts a `chan` into a `shared_chan`.\n     pub fn new(c: Chan<T>) -> SharedChan<T> {\n         let Chan { inner } = c;\n@@ -235,7 +235,7 @@ impl<T: Owned> SharedChan<T> {\n     }\n }\n \n-impl<T: Owned> GenericChan<T> for SharedChan<T> {\n+impl<T: Send> GenericChan<T> for SharedChan<T> {\n     fn send(&self, x: T) {\n         unsafe {\n             let mut xx = Some(x);\n@@ -247,7 +247,7 @@ impl<T: Owned> GenericChan<T> for SharedChan<T> {\n     }\n }\n \n-impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n+impl<T: Send> GenericSmartChan<T> for SharedChan<T> {\n     fn try_send(&self, x: T) -> bool {\n         unsafe {\n             let mut xx = Some(x);\n@@ -259,7 +259,7 @@ impl<T: Owned> GenericSmartChan<T> for SharedChan<T> {\n     }\n }\n \n-impl<T: Owned> ::clone::Clone for SharedChan<T> {\n+impl<T: Send> ::clone::Clone for SharedChan<T> {\n     fn clone(&self) -> SharedChan<T> {\n         SharedChan { ch: self.ch.clone() }\n     }\n@@ -273,7 +273,7 @@ pub struct ChanOne<T> {\n     inner: Either<pipesy::ChanOne<T>, rtcomm::ChanOne<T>>\n }\n \n-pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n+pub fn oneshot<T: Send>() -> (PortOne<T>, ChanOne<T>) {\n     let (port, chan) = match rt::context() {\n         rt::OldTaskContext => match pipesy::oneshot() {\n             (p, c) => (Left(p), Left(c)),\n@@ -287,7 +287,7 @@ pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n     return (port, chan);\n }\n \n-impl<T: Owned> PortOne<T> {\n+impl<T: Send> PortOne<T> {\n     pub fn recv(self) -> T {\n         let PortOne { inner } = self;\n         match inner {\n@@ -305,7 +305,7 @@ impl<T: Owned> PortOne<T> {\n     }\n }\n \n-impl<T: Owned> ChanOne<T> {\n+impl<T: Send> ChanOne<T> {\n     pub fn send(self, data: T) {\n         let ChanOne { inner } = self;\n         match inner {\n@@ -323,31 +323,31 @@ impl<T: Owned> ChanOne<T> {\n     }\n }\n \n-pub fn recv_one<T: Owned>(port: PortOne<T>) -> T {\n+pub fn recv_one<T: Send>(port: PortOne<T>) -> T {\n     let PortOne { inner } = port;\n     match inner {\n         Left(p) => pipesy::recv_one(p),\n         Right(p) => p.recv()\n     }\n }\n \n-pub fn try_recv_one<T: Owned>(port: PortOne<T>) -> Option<T> {\n+pub fn try_recv_one<T: Send>(port: PortOne<T>) -> Option<T> {\n     let PortOne { inner } = port;\n     match inner {\n         Left(p) => pipesy::try_recv_one(p),\n         Right(p) => p.try_recv()\n     }\n }\n \n-pub fn send_one<T: Owned>(chan: ChanOne<T>, data: T) {\n+pub fn send_one<T: Send>(chan: ChanOne<T>, data: T) {\n     let ChanOne { inner } = chan;\n     match inner {\n         Left(c) => pipesy::send_one(c, data),\n         Right(c) => c.send(data)\n     }\n }\n \n-pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T) -> bool {\n+pub fn try_send_one<T: Send>(chan: ChanOne<T>, data: T) -> bool {\n     let ChanOne { inner } = chan;\n     match inner {\n         Left(c) => pipesy::try_send_one(c, data),\n@@ -357,25 +357,25 @@ pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T) -> bool {\n \n mod pipesy {\n \n-    use kinds::Owned;\n+    use kinds::Send;\n     use option::{Option, Some, None};\n     use pipes::{recv, try_recv, peek, PacketHeader};\n     use super::{GenericChan, GenericSmartChan, GenericPort, Peekable, Selectable};\n     use cast::transmute_mut;\n     use util::replace;\n \n     /*proto! oneshot (\n-        Oneshot:send<T:Owned> {\n+        Oneshot:send<T:Send> {\n             send(T) -> !\n         }\n     )*/\n \n     #[allow(non_camel_case_types)]\n     pub mod oneshot {\n-        priv use core::kinds::Owned;\n+        priv use core::kinds::Send;\n         use ptr::to_mut_unsafe_ptr;\n \n-        pub fn init<T: Owned>() -> (server::Oneshot<T>, client::Oneshot<T>) {\n+        pub fn init<T: Send>() -> (server::Oneshot<T>, client::Oneshot<T>) {\n             pub use core::pipes::HasBuffer;\n \n             let buffer = ~::core::pipes::Buffer {\n@@ -399,10 +399,10 @@ mod pipesy {\n         #[allow(non_camel_case_types)]\n         pub mod client {\n \n-            priv use core::kinds::Owned;\n+            priv use core::kinds::Send;\n \n             #[allow(non_camel_case_types)]\n-            pub fn try_send<T: Owned>(pipe: Oneshot<T>, x_0: T) ->\n+            pub fn try_send<T: Send>(pipe: Oneshot<T>, x_0: T) ->\n                 ::core::option::Option<()> {\n                 {\n                     use super::send;\n@@ -414,7 +414,7 @@ mod pipesy {\n             }\n \n             #[allow(non_camel_case_types)]\n-            pub fn send<T: Owned>(pipe: Oneshot<T>, x_0: T) {\n+            pub fn send<T: Send>(pipe: Oneshot<T>, x_0: T) {\n                 {\n                     use super::send;\n                     let message = send(x_0);\n@@ -464,12 +464,12 @@ mod pipesy {\n     }\n \n     /// Initialiase a (send-endpoint, recv-endpoint) oneshot pipe pair.\n-    pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n+    pub fn oneshot<T: Send>() -> (PortOne<T>, ChanOne<T>) {\n         let (port, chan) = oneshot::init();\n         (PortOne::new(port), ChanOne::new(chan))\n     }\n \n-    impl<T: Owned> PortOne<T> {\n+    impl<T: Send> PortOne<T> {\n         pub fn recv(self) -> T { recv_one(self) }\n         pub fn try_recv(self) -> Option<T> { try_recv_one(self) }\n         pub fn unwrap(self) -> oneshot::server::Oneshot<T> {\n@@ -479,7 +479,7 @@ mod pipesy {\n         }\n     }\n \n-    impl<T: Owned> ChanOne<T> {\n+    impl<T: Send> ChanOne<T> {\n         pub fn send(self, data: T) { send_one(self, data) }\n         pub fn try_send(self, data: T) -> bool { try_send_one(self, data) }\n         pub fn unwrap(self) -> oneshot::client::Oneshot<T> {\n@@ -493,7 +493,7 @@ mod pipesy {\n     * Receive a message from a oneshot pipe, failing if the connection was\n     * closed.\n     */\n-    pub fn recv_one<T: Owned>(port: PortOne<T>) -> T {\n+    pub fn recv_one<T: Send>(port: PortOne<T>) -> T {\n         match port {\n             PortOne { contents: port } => {\n                 let oneshot::send(message) = recv(port);\n@@ -503,7 +503,7 @@ mod pipesy {\n     }\n \n     /// Receive a message from a oneshot pipe unless the connection was closed.\n-    pub fn try_recv_one<T: Owned> (port: PortOne<T>) -> Option<T> {\n+    pub fn try_recv_one<T: Send> (port: PortOne<T>) -> Option<T> {\n         match port {\n             PortOne { contents: port } => {\n                 let message = try_recv(port);\n@@ -519,7 +519,7 @@ mod pipesy {\n     }\n \n     /// Send a message on a oneshot pipe, failing if the connection was closed.\n-    pub fn send_one<T: Owned>(chan: ChanOne<T>, data: T) {\n+    pub fn send_one<T: Send>(chan: ChanOne<T>, data: T) {\n         match chan {\n             ChanOne { contents: chan } => oneshot::client::send(chan, data),\n         }\n@@ -529,7 +529,7 @@ mod pipesy {\n     * Send a message on a oneshot pipe, or return false if the connection was\n     * closed.\n     */\n-    pub fn try_send_one<T: Owned>(chan: ChanOne<T>, data: T) -> bool {\n+    pub fn try_send_one<T: Send>(chan: ChanOne<T>, data: T) -> bool {\n         match chan {\n             ChanOne { contents: chan } => {\n                 oneshot::client::try_send(chan, data).is_some()\n@@ -540,16 +540,16 @@ mod pipesy {\n     // Streams - Make pipes a little easier in general.\n \n     /*proto! streamp (\n-        Open:send<T: Owned> {\n+        Open:send<T: Send> {\n             data(T) -> Open<T>\n         }\n     )*/\n \n     #[allow(non_camel_case_types)]\n     pub mod streamp {\n-        priv use core::kinds::Owned;\n+        priv use core::kinds::Send;\n \n-        pub fn init<T: Owned>() -> (server::Open<T>, client::Open<T>) {\n+        pub fn init<T: Send>() -> (server::Open<T>, client::Open<T>) {\n             pub use core::pipes::HasBuffer;\n             ::core::pipes::entangle()\n         }\n@@ -559,10 +559,10 @@ mod pipesy {\n \n         #[allow(non_camel_case_types)]\n         pub mod client {\n-            priv use core::kinds::Owned;\n+            priv use core::kinds::Send;\n \n             #[allow(non_camel_case_types)]\n-            pub fn try_data<T: Owned>(pipe: Open<T>, x_0: T) ->\n+            pub fn try_data<T: Send>(pipe: Open<T>, x_0: T) ->\n                 ::core::option::Option<Open<T>> {\n                 {\n                     use super::data;\n@@ -575,7 +575,7 @@ mod pipesy {\n             }\n \n             #[allow(non_camel_case_types)]\n-            pub fn data<T: Owned>(pipe: Open<T>, x_0: T) -> Open<T> {\n+            pub fn data<T: Send>(pipe: Open<T>, x_0: T) -> Open<T> {\n                 {\n                     use super::data;\n                     let (s, c) = ::core::pipes::entangle();\n@@ -613,7 +613,7 @@ mod pipesy {\n     These allow sending or receiving an unlimited number of messages.\n \n     */\n-    pub fn stream<T:Owned>() -> (Port<T>, Chan<T>) {\n+    pub fn stream<T:Send>() -> (Port<T>, Chan<T>) {\n         let (s, c) = streamp::init();\n \n         (Port {\n@@ -623,7 +623,7 @@ mod pipesy {\n         })\n     }\n \n-    impl<T: Owned> GenericChan<T> for Chan<T> {\n+    impl<T: Send> GenericChan<T> for Chan<T> {\n         #[inline]\n         fn send(&self, x: T) {\n             unsafe {\n@@ -634,7 +634,7 @@ mod pipesy {\n         }\n     }\n \n-    impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n+    impl<T: Send> GenericSmartChan<T> for Chan<T> {\n         #[inline]\n         fn try_send(&self, x: T) -> bool {\n             unsafe {\n@@ -651,7 +651,7 @@ mod pipesy {\n         }\n     }\n \n-    impl<T: Owned> GenericPort<T> for Port<T> {\n+    impl<T: Send> GenericPort<T> for Port<T> {\n         #[inline]\n         fn recv(&self) -> T {\n             unsafe {\n@@ -679,7 +679,7 @@ mod pipesy {\n         }\n     }\n \n-    impl<T: Owned> Peekable<T> for Port<T> {\n+    impl<T: Send> Peekable<T> for Port<T> {\n         #[inline]\n         fn peek(&self) -> bool {\n             unsafe {\n@@ -695,7 +695,7 @@ mod pipesy {\n         }\n     }\n \n-    impl<T: Owned> Selectable for Port<T> {\n+    impl<T: Send> Selectable for Port<T> {\n         fn header(&mut self) -> *mut PacketHeader {\n             match self.endp {\n                 Some(ref mut endp) => endp.header(),\n@@ -723,15 +723,15 @@ pub fn select2i<A:Selectable, B:Selectable>(a: &mut A, b: &mut B)\n }\n \n /// Receive a message from one of two endpoints.\n-pub trait Select2<T: Owned, U: Owned> {\n+pub trait Select2<T: Send, U: Send> {\n     /// Receive a message or return `None` if a connection closes.\n     fn try_select(&mut self) -> Either<Option<T>, Option<U>>;\n     /// Receive a message or fail if a connection closes.\n     fn select(&mut self) -> Either<T, U>;\n }\n \n-impl<T:Owned,\n-     U:Owned,\n+impl<T:Send,\n+     U:Send,\n      Left:Selectable + GenericPort<T>,\n      Right:Selectable + GenericPort<U>>\n      Select2<T, U>"}, {"sha": "f350e1061680524e9ea7cbb0a24bbafef0b070d6", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -24,7 +24,7 @@ The 4 kinds are\n   scalar types and managed pointers, and exludes owned pointers. It\n   also excludes types that implement `Drop`.\n \n-* Owned - owned types and types containing owned types.  These types\n+* Send - owned types and types containing owned types.  These types\n   may be transferred across task boundaries.\n \n * Freeze - types that are deeply immutable.\n@@ -45,13 +45,13 @@ pub trait Copy {\n \n #[cfg(stage0)]\n #[lang=\"owned\"]\n-pub trait Owned {\n+pub trait Send {\n     // empty.\n }\n \n #[cfg(not(stage0))]\n #[lang=\"send\"]\n-pub trait Owned {\n+pub trait Send {\n     // empty.\n }\n "}, {"sha": "49713a3a23b9a338e4a42dc656a8700290b2f9d7", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -88,7 +88,7 @@ use container::Container;\n use cast::{forget, transmute, transmute_copy, transmute_mut};\n use either::{Either, Left, Right};\n use iterator::IteratorUtil;\n-use kinds::Owned;\n+use kinds::Send;\n use libc;\n use ops::Drop;\n use option::{None, Option, Some};\n@@ -177,7 +177,7 @@ impl PacketHeader {\n         transmute_copy(&self.buffer)\n     }\n \n-    pub fn set_buffer<T:Owned>(&mut self, b: ~Buffer<T>) {\n+    pub fn set_buffer<T:Send>(&mut self, b: ~Buffer<T>) {\n         unsafe {\n             self.buffer = transmute_copy(&b);\n         }\n@@ -193,13 +193,13 @@ pub trait HasBuffer {\n     fn set_buffer(&mut self, b: *libc::c_void);\n }\n \n-impl<T:Owned> HasBuffer for Packet<T> {\n+impl<T:Send> HasBuffer for Packet<T> {\n     fn set_buffer(&mut self, b: *libc::c_void) {\n         self.header.buffer = b;\n     }\n }\n \n-pub fn mk_packet<T:Owned>() -> Packet<T> {\n+pub fn mk_packet<T:Send>() -> Packet<T> {\n     Packet {\n         header: PacketHeader(),\n         payload: None,\n@@ -230,7 +230,7 @@ pub fn packet<T>() -> *mut Packet<T> {\n     p\n }\n \n-pub fn entangle_buffer<T:Owned,Tstart:Owned>(\n+pub fn entangle_buffer<T:Send,Tstart:Send>(\n     mut buffer: ~Buffer<T>,\n     init: &fn(*libc::c_void, x: &mut T) -> *mut Packet<Tstart>)\n     -> (RecvPacketBuffered<Tstart, T>, SendPacketBuffered<Tstart, T>) {\n@@ -396,7 +396,7 @@ pub fn send<T,Tbuffer>(mut p: SendPacketBuffered<T,Tbuffer>,\n Fails if the sender closes the connection.\n \n */\n-pub fn recv<T:Owned,Tbuffer:Owned>(\n+pub fn recv<T:Send,Tbuffer:Send>(\n     p: RecvPacketBuffered<T, Tbuffer>) -> T {\n     try_recv(p).expect(\"connection closed\")\n }\n@@ -407,7 +407,7 @@ Returns `None` if the sender has closed the connection without sending\n a message, or `Some(T)` if a message was received.\n \n */\n-pub fn try_recv<T:Owned,Tbuffer:Owned>(mut p: RecvPacketBuffered<T, Tbuffer>)\n+pub fn try_recv<T:Send,Tbuffer:Send>(mut p: RecvPacketBuffered<T, Tbuffer>)\n                                        -> Option<T> {\n     let p_ = p.unwrap();\n     let p = unsafe { &mut *p_ };\n@@ -427,7 +427,7 @@ pub fn try_recv<T:Owned,Tbuffer:Owned>(mut p: RecvPacketBuffered<T, Tbuffer>)\n     }\n }\n \n-fn try_recv_<T:Owned>(p: &mut Packet<T>) -> Option<T> {\n+fn try_recv_<T:Send>(p: &mut Packet<T>) -> Option<T> {\n     // optimistic path\n     match p.header.state {\n       Full => {\n@@ -511,7 +511,7 @@ fn try_recv_<T:Owned>(p: &mut Packet<T>) -> Option<T> {\n }\n \n /// Returns true if messages are available.\n-pub fn peek<T:Owned,Tb:Owned>(p: &mut RecvPacketBuffered<T, Tb>) -> bool {\n+pub fn peek<T:Send,Tb:Send>(p: &mut RecvPacketBuffered<T, Tb>) -> bool {\n     unsafe {\n         match (*p.header()).state {\n             Empty | Terminated => false,\n@@ -521,7 +521,7 @@ pub fn peek<T:Owned,Tb:Owned>(p: &mut RecvPacketBuffered<T, Tb>) -> bool {\n     }\n }\n \n-fn sender_terminate<T:Owned>(p: *mut Packet<T>) {\n+fn sender_terminate<T:Send>(p: *mut Packet<T>) {\n     let p = unsafe {\n         &mut *p\n     };\n@@ -553,7 +553,7 @@ fn sender_terminate<T:Owned>(p: *mut Packet<T>) {\n     }\n }\n \n-fn receiver_terminate<T:Owned>(p: *mut Packet<T>) {\n+fn receiver_terminate<T:Send>(p: *mut Packet<T>) {\n     let p = unsafe {\n         &mut *p\n     };\n@@ -671,7 +671,7 @@ pub struct SendPacketBuffered<T, Tbuffer> {\n }\n \n #[unsafe_destructor]\n-impl<T:Owned,Tbuffer:Owned> Drop for SendPacketBuffered<T,Tbuffer> {\n+impl<T:Send,Tbuffer:Send> Drop for SendPacketBuffered<T,Tbuffer> {\n     fn drop(&self) {\n         unsafe {\n             let this: &mut SendPacketBuffered<T,Tbuffer> = transmute(self);\n@@ -729,7 +729,7 @@ pub struct RecvPacketBuffered<T, Tbuffer> {\n }\n \n #[unsafe_destructor]\n-impl<T:Owned,Tbuffer:Owned> Drop for RecvPacketBuffered<T,Tbuffer> {\n+impl<T:Send,Tbuffer:Send> Drop for RecvPacketBuffered<T,Tbuffer> {\n     fn drop(&self) {\n         unsafe {\n             let this: &mut RecvPacketBuffered<T,Tbuffer> = transmute(self);\n@@ -741,7 +741,7 @@ impl<T:Owned,Tbuffer:Owned> Drop for RecvPacketBuffered<T,Tbuffer> {\n     }\n }\n \n-impl<T:Owned,Tbuffer:Owned> RecvPacketBuffered<T, Tbuffer> {\n+impl<T:Send,Tbuffer:Send> RecvPacketBuffered<T, Tbuffer> {\n     pub fn unwrap(&mut self) -> *mut Packet<T> {\n         replace(&mut self.p, None).unwrap()\n     }\n@@ -751,7 +751,7 @@ impl<T:Owned,Tbuffer:Owned> RecvPacketBuffered<T, Tbuffer> {\n     }\n }\n \n-impl<T:Owned,Tbuffer:Owned> Selectable for RecvPacketBuffered<T, Tbuffer> {\n+impl<T:Send,Tbuffer:Send> Selectable for RecvPacketBuffered<T, Tbuffer> {\n     fn header(&mut self) -> *mut PacketHeader {\n         match self.p {\n             Some(packet) => unsafe {\n@@ -807,7 +807,7 @@ Sometimes messages will be available on both endpoints at once. In\n this case, `select2` may return either `left` or `right`.\n \n */\n-pub fn select2<A:Owned,Ab:Owned,B:Owned,Bb:Owned>(\n+pub fn select2<A:Send,Ab:Send,B:Send,Bb:Send>(\n     mut a: RecvPacketBuffered<A, Ab>,\n     mut b: RecvPacketBuffered<B, Bb>)\n     -> Either<(Option<A>, RecvPacketBuffered<B, Bb>),\n@@ -847,7 +847,7 @@ pub fn select2i<A:Selectable,B:Selectable>(a: &mut A, b: &mut B)\n \n /// Waits on a set of endpoints. Returns a message, its index, and a\n /// list of the remaining endpoints.\n-pub fn select<T:Owned,Tb:Owned>(mut endpoints: ~[RecvPacketBuffered<T, Tb>])\n+pub fn select<T:Send,Tb:Send>(mut endpoints: ~[RecvPacketBuffered<T, Tb>])\n                                 -> (uint,\n                                     Option<T>,\n                                     ~[RecvPacketBuffered<T, Tb>]) {"}, {"sha": "13d19b276f59eed58528d4b8c0136ed97dbfab70", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -30,7 +30,7 @@ Rust's prelude has three main parts:\n // Reexported core operators\n pub use either::{Either, Left, Right};\n pub use kinds::{Copy, Sized};\n-pub use kinds::{Freeze, Owned};\n+pub use kinds::{Freeze, Send};\n pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n pub use ops::{BitAnd, BitOr, BitXor};\n pub use ops::{Drop};"}, {"sha": "72907f40a0744a4949f61684f7adda0de6314804", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -19,7 +19,7 @@ use option::*;\n use cast;\n use util;\n use ops::Drop;\n-use kinds::Owned;\n+use kinds::Send;\n use rt::sched::{Scheduler, Coroutine};\n use rt::local::Local;\n use unstable::intrinsics::{atomic_xchg, atomic_load};\n@@ -68,7 +68,7 @@ pub struct PortOneHack<T> {\n     suppress_finalize: bool\n }\n \n-pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n+pub fn oneshot<T: Send>() -> (PortOne<T>, ChanOne<T>) {\n     let packet: ~Packet<T> = ~Packet {\n         state: STATE_BOTH,\n         payload: None\n@@ -307,20 +307,20 @@ pub struct Port<T> {\n     next: Cell<PortOne<StreamPayload<T>>>\n }\n \n-pub fn stream<T: Owned>() -> (Port<T>, Chan<T>) {\n+pub fn stream<T: Send>() -> (Port<T>, Chan<T>) {\n     let (pone, cone) = oneshot();\n     let port = Port { next: Cell::new(pone) };\n     let chan = Chan { next: Cell::new(cone) };\n     return (port, chan);\n }\n \n-impl<T: Owned> GenericChan<T> for Chan<T> {\n+impl<T: Send> GenericChan<T> for Chan<T> {\n     fn send(&self, val: T) {\n         self.try_send(val);\n     }\n }\n \n-impl<T: Owned> GenericSmartChan<T> for Chan<T> {\n+impl<T: Send> GenericSmartChan<T> for Chan<T> {\n     fn try_send(&self, val: T) -> bool {\n         let (next_pone, next_cone) = oneshot();\n         let cone = self.next.take();"}, {"sha": "d561e81d032712efaa400e457f7c02914ea42ab0", "filename": "src/libstd/rt/message_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Frt%2Fmessage_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Frt%2Fmessage_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmessage_queue.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use container::Container;\n-use kinds::Owned;\n+use kinds::Send;\n use vec::OwnedVector;\n use cell::Cell;\n use option::*;\n@@ -21,7 +21,7 @@ pub struct MessageQueue<T> {\n     priv queue: ~Exclusive<~[T]>\n }\n \n-impl<T: Owned> MessageQueue<T> {\n+impl<T: Send> MessageQueue<T> {\n     pub fn new() -> MessageQueue<T> {\n         MessageQueue {\n             queue: ~exclusive(~[])"}, {"sha": "00d2774426884f12f05076bdfa2f875c9d4583ba", "filename": "src/libstd/rt/work_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Frt%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Frt%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fwork_queue.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -13,15 +13,15 @@ use option::*;\n use vec::OwnedVector;\n use unstable::sync::{Exclusive, exclusive};\n use cell::Cell;\n-use kinds::Owned;\n+use kinds::Send;\n use clone::Clone;\n \n pub struct WorkQueue<T> {\n     // XXX: Another mystery bug fixed by boxing this lock\n     priv queue: ~Exclusive<~[T]>\n }\n \n-impl<T: Owned> WorkQueue<T> {\n+impl<T: Send> WorkQueue<T> {\n     pub fn new() -> WorkQueue<T> {\n         WorkQueue {\n             queue: ~exclusive(~[])"}, {"sha": "a8e8cfd163ad7005d5733dca0709e1b5d073a482", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -353,7 +353,7 @@ impl TaskBuilder {\n     }\n \n     /// Runs a task, while transfering ownership of one argument to the child.\n-    pub fn spawn_with<A:Owned>(&mut self, arg: A, f: ~fn(v: A)) {\n+    pub fn spawn_with<A:Send>(&mut self, arg: A, f: ~fn(v: A)) {\n         let arg = Cell::new(arg);\n         do self.spawn {\n             f(arg.take());\n@@ -373,7 +373,7 @@ impl TaskBuilder {\n      * # Failure\n      * Fails if a future_result was already set for this task.\n      */\n-    pub fn try<T:Owned>(&mut self, f: ~fn() -> T) -> Result<T,()> {\n+    pub fn try<T:Send>(&mut self, f: ~fn() -> T) -> Result<T,()> {\n         let (po, ch) = stream::<T>();\n         let mut result = None;\n \n@@ -445,7 +445,7 @@ pub fn spawn_supervised(f: ~fn()) {\n     task.spawn(f)\n }\n \n-pub fn spawn_with<A:Owned>(arg: A, f: ~fn(v: A)) {\n+pub fn spawn_with<A:Send>(arg: A, f: ~fn(v: A)) {\n     /*!\n      * Runs a task, while transfering ownership of one argument to the\n      * child.\n@@ -478,7 +478,7 @@ pub fn spawn_sched(mode: SchedMode, f: ~fn()) {\n     task.spawn(f)\n }\n \n-pub fn try<T:Owned>(f: ~fn() -> T) -> Result<T,()> {\n+pub fn try<T:Send>(f: ~fn() -> T) -> Result<T,()> {\n     /*!\n      * Execute a function in another task and return either the return value\n      * of the function or result::err."}, {"sha": "285a8114cc24032e287e8264a753ee746f074ed1", "filename": "src/libstd/unstable/global.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fglobal.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -27,7 +27,7 @@ avoid hitting the mutex.\n \n use cast::{transmute};\n use clone::Clone;\n-use kinds::Owned;\n+use kinds::Send;\n use libc::{c_void};\n use option::{Option, Some, None};\n use ops::Drop;\n@@ -43,7 +43,7 @@ use sys::Closure;\n \n pub type GlobalDataKey<'self,T> = &'self fn(v: T);\n \n-pub unsafe fn global_data_clone_create<T:Owned + Clone>(\n+pub unsafe fn global_data_clone_create<T:Send + Clone>(\n     key: GlobalDataKey<T>, create: &fn() -> ~T) -> T {\n     /*!\n      * Clone a global value or, if it has not been created,\n@@ -59,7 +59,7 @@ pub unsafe fn global_data_clone_create<T:Owned + Clone>(\n     global_data_clone_create_(key_ptr(key), create)\n }\n \n-unsafe fn global_data_clone_create_<T:Owned + Clone>(\n+unsafe fn global_data_clone_create_<T:Send + Clone>(\n     key: uint, create: &fn() -> ~T) -> T {\n \n     let mut clone_value: Option<T> = None;\n@@ -79,13 +79,13 @@ unsafe fn global_data_clone_create_<T:Owned + Clone>(\n     return clone_value.unwrap();\n }\n \n-unsafe fn global_data_modify<T:Owned>(\n+unsafe fn global_data_modify<T:Send>(\n     key: GlobalDataKey<T>, op: &fn(Option<~T>) -> Option<~T>) {\n \n     global_data_modify_(key_ptr(key), op)\n }\n \n-unsafe fn global_data_modify_<T:Owned>(\n+unsafe fn global_data_modify_<T:Send>(\n     key: uint, op: &fn(Option<~T>) -> Option<~T>) {\n \n     let mut old_dtor = None;\n@@ -124,7 +124,7 @@ unsafe fn global_data_modify_<T:Owned>(\n     }\n }\n \n-pub unsafe fn global_data_clone<T:Owned + Clone>(\n+pub unsafe fn global_data_clone<T:Send + Clone>(\n     key: GlobalDataKey<T>) -> Option<T> {\n     let mut maybe_clone: Option<T> = None;\n     do global_data_modify(key) |current| {\n@@ -220,7 +220,7 @@ fn get_global_state() -> Exclusive<GlobalState> {\n     }\n }\n \n-fn key_ptr<T:Owned>(key: GlobalDataKey<T>) -> uint {\n+fn key_ptr<T:Send>(key: GlobalDataKey<T>) -> uint {\n     unsafe {\n         let closure: Closure = transmute(key);\n         return transmute(closure.code);"}, {"sha": "06c3ecb81475741077d542260c39c7d5e0739cde", "filename": "src/libstd/unstable/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Funstable%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibstd%2Funstable%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsync.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -17,7 +17,7 @@ use unstable::finally::Finally;\n use unstable::intrinsics;\n use ops::Drop;\n use clone::Clone;\n-use kinds::Owned;\n+use kinds::Send;\n \n /// An atomically reference counted pointer.\n ///\n@@ -31,7 +31,7 @@ struct AtomicRcBoxData<T> {\n     data: Option<T>,\n }\n \n-impl<T: Owned> UnsafeAtomicRcBox<T> {\n+impl<T: Send> UnsafeAtomicRcBox<T> {\n     pub fn new(data: T) -> UnsafeAtomicRcBox<T> {\n         unsafe {\n             let data = ~AtomicRcBoxData { count: 1, data: Some(data) };\n@@ -61,7 +61,7 @@ impl<T: Owned> UnsafeAtomicRcBox<T> {\n     }\n }\n \n-impl<T: Owned> Clone for UnsafeAtomicRcBox<T> {\n+impl<T: Send> Clone for UnsafeAtomicRcBox<T> {\n     fn clone(&self) -> UnsafeAtomicRcBox<T> {\n         unsafe {\n             let mut data: ~AtomicRcBoxData<T> = cast::transmute(self.data);\n@@ -144,7 +144,7 @@ pub struct Exclusive<T> {\n     x: UnsafeAtomicRcBox<ExData<T>>\n }\n \n-pub fn exclusive<T:Owned>(user_data: T) -> Exclusive<T> {\n+pub fn exclusive<T:Send>(user_data: T) -> Exclusive<T> {\n     let data = ExData {\n         lock: LittleLock(),\n         failed: false,\n@@ -155,14 +155,14 @@ pub fn exclusive<T:Owned>(user_data: T) -> Exclusive<T> {\n     }\n }\n \n-impl<T:Owned> Clone for Exclusive<T> {\n+impl<T:Send> Clone for Exclusive<T> {\n     // Duplicate an exclusive ARC, as std::arc::clone.\n     fn clone(&self) -> Exclusive<T> {\n         Exclusive { x: self.x.clone() }\n     }\n }\n \n-impl<T:Owned> Exclusive<T> {\n+impl<T:Send> Exclusive<T> {\n     // Exactly like std::arc::mutex_arc,access(), but with the little_lock\n     // instead of a proper mutex. Same reason for being unsafe.\n     //"}, {"sha": "265e9e444e94afd847c676b5727de4e4f3e58f82", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -147,7 +147,7 @@ pub static crate_node_id: node_id = 0;\n // The AST represents all type param bounds as types.\n // typeck::collect::compute_bounds matches these against\n // the \"special\" built-in traits (see middle::lang_items) and\n-// detects Copy, Send, Owned, and Freeze.\n+// detects Copy, Send, Send, and Freeze.\n pub enum TyParamBound {\n     TraitTyParamBound(@trait_ref),\n     RegionTyParamBound"}, {"sha": "c9d63d2c416795471e182fc238c2c1edfb5bb7e4", "filename": "src/libsyntax/ext/deriving/to_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fto_str.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -30,7 +30,7 @@ pub fn expand_deriving_to_str(cx: @ExtCtxt,\n                 generics: LifetimeBounds::empty(),\n                 explicit_self: borrowed_explicit_self(),\n                 args: ~[],\n-                ret_ty: Ptr(~Literal(Path::new_local(\"str\")), Owned),\n+                ret_ty: Ptr(~Literal(Path::new_local(\"str\")), Send),\n                 const_nonmatching: false,\n                 combine_substructure: to_str_substructure\n             }"}, {"sha": "a2f9aa58d99adcb4312dc3b1639f69df8a39f37f", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -22,7 +22,7 @@ use opt_vec;\n \n /// The types of pointers\n pub enum PtrTy<'self> {\n-    Owned, // ~\n+    Send, // ~\n     Managed(ast::mutability), // @[mut]\n     Borrowed(Option<&'self str>, ast::mutability), // &['lifetime] [mut]\n }\n@@ -128,7 +128,7 @@ impl<'self> Ty<'self> {\n             Ptr(ref ty, ref ptr) => {\n                 let raw_ty = ty.to_ty(cx, span, self_ty, self_generics);\n                 match *ptr {\n-                    Owned => {\n+                    Send => {\n                         cx.ty_uniq(span, raw_ty)\n                     }\n                     Managed(mutbl) => {\n@@ -248,7 +248,7 @@ pub fn get_explicit_self(cx: @ExtCtxt, span: span, self_ptr: &Option<PtrTy>)\n             let self_ty = respan(\n                 span,\n                 match *ptr {\n-                    Owned => ast::sty_uniq(ast::m_imm),\n+                    Send => ast::sty_uniq(ast::m_imm),\n                     Managed(mutbl) => ast::sty_box(mutbl),\n                     Borrowed(ref lt, mutbl) => {\n                         let lt = lt.map(|s| @cx.lifetime(span,"}, {"sha": "beca0adbe3c5b4902bfaea002d14739c047b2837", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -11,7 +11,7 @@\n use std::comm::*;\n use std::task;\n \n-pub fn foo<T:Owned + Copy>(x: T) -> Port<T> {\n+pub fn foo<T:Send + Copy>(x: T) -> Port<T> {\n     let (p, c) = stream();\n     do task::spawn() {\n         c.send(copy x);"}, {"sha": "1d32a78303a8f6ca831587f2f8dd65d20e75dd3f", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -82,7 +82,7 @@ endpoint. The send endpoint is returned to the caller and the receive\n endpoint is passed to the new task.\n \n */\n-pub fn spawn_service<T:Owned,Tb:Owned>(\n+pub fn spawn_service<T:Send,Tb:Send>(\n             init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n                                   SendPacketBuffered<T, Tb>),\n             service: ~fn(v: RecvPacketBuffered<T, Tb>))\n@@ -103,7 +103,7 @@ pub fn spawn_service<T:Owned,Tb:Owned>(\n receive state.\n \n */\n-pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n+pub fn spawn_service_recv<T:Send,Tb:Send>(\n         init: extern fn() -> (SendPacketBuffered<T, Tb>,\n                               RecvPacketBuffered<T, Tb>),\n         service: ~fn(v: SendPacketBuffered<T, Tb>))\n@@ -120,7 +120,7 @@ pub fn spawn_service_recv<T:Owned,Tb:Owned>(\n     client\n }\n \n-fn switch<T:Owned,Tb:Owned,U>(endp: std::pipes::RecvPacketBuffered<T, Tb>,\n+fn switch<T:Send,Tb:Send,U>(endp: std::pipes::RecvPacketBuffered<T, Tb>,\n                               f: &fn(v: Option<T>) -> U)\n                               -> U {\n     f(std::pipes::try_recv(endp))"}, {"sha": "6ffdd0f541e142a229399d7341d9d93789ec2d5c", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -5,7 +5,7 @@ fn take_any(_: &fn:()) {\n fn take_copyable(_: &fn:Copy()) {\n }\n \n-fn take_copyable_owned(_: &fn:Copy+Owned()) {\n+fn take_copyable_owned(_: &fn:Copy+Send()) {\n }\n \n fn take_const_owned(_: &fn:Const+Owned()) {\n@@ -14,22 +14,22 @@ fn take_const_owned(_: &fn:Const+Owned()) {\n fn give_any(f: &fn:()) {\n     take_any(f);\n     take_copyable(f); //~ ERROR expected bounds `Copy` but found no bounds\n-    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Owned` but found no bounds\n+    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Send` but found no bounds\n }\n \n fn give_copyable(f: &fn:Copy()) {\n     take_any(f);\n     take_copyable(f);\n-    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Owned` but found bounds `Copy`\n+    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Send` but found bounds `Copy`\n }\n \n-fn give_owned(f: &fn:Owned()) {\n+fn give_owned(f: &fn:Send()) {\n     take_any(f);\n-    take_copyable(f); //~ ERROR expected bounds `Copy` but found bounds `Owned`\n-    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Owned` but found bounds `Owned`\n+    take_copyable(f); //~ ERROR expected bounds `Copy` but found bounds `Send`\n+    take_copyable_owned(f); //~ ERROR expected bounds `Copy+Send` but found bounds `Send`\n }\n \n-fn give_copyable_owned(f: &fn:Copy+Owned()) {\n+fn give_copyable_owned(f: &fn:Copy+Send()) {\n     take_any(f);\n     take_copyable(f);\n     take_copyable_owned(f);"}, {"sha": "c5d13c81b7c5928c6aae80adc9967028f2907fa3", "filename": "src/test/compile-fail/issue-2766-a.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2766-a.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n pub mod stream {\n-    pub enum Stream<T:Owned> { send(T, ::stream::server::Stream<T>), }\n+    pub enum Stream<T:Send> { send(T, ::stream::server::Stream<T>), }\n     pub mod server {\n         use std::option;\n         use std::pipes;\n \n-        impl<T:Owned> Stream<T> {\n+        impl<T:Send> Stream<T> {\n             pub fn recv() -> extern fn(v: Stream<T>) -> ::stream::Stream<T> {\n               // resolve really should report just one error here.\n               // Change the test case when it changes.\n@@ -28,7 +28,7 @@ pub mod stream {\n             }\n         }\n \n-        pub type Stream<T:Owned> = pipes::RecvPacket<::stream::Stream<T>>;\n+        pub type Stream<T:Send> = pipes::RecvPacket<::stream::Stream<T>>;\n     }\n }\n "}, {"sha": "00d73b02dbc6efa818313c6d80084052d9ced00a", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -2,7 +2,7 @@ struct Foo {\n     f: @mut int,\n }\n \n-impl Drop for Foo { //~ ERROR cannot implement a destructor on a struct that is not Owned\n+impl Drop for Foo { //~ ERROR cannot implement a destructor on a struct that is not Send\n     fn drop(&self) {\n         *self.f = 10;\n     }"}, {"sha": "72555d7e85119ca71c146dcbcc1558cf9fd61966", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn send<T:Owned>(ch: _chan<T>, data: T) {\n+fn send<T:Send>(ch: _chan<T>, data: T) {\n     debug!(ch);\n     debug!(data);\n     fail!();"}, {"sha": "6068b7f17303067e554cd9601569128d3b2f546c", "filename": "src/test/compile-fail/non_owned-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -11,9 +11,9 @@\n #[non_owned]\n enum Foo { A }\n \n-fn bar<T: Owned>(_: T) {}\n+fn bar<T: Send>(_: T) {}\n \n fn main() {\n     let x = A;\n-    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Owned`\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Send`\n }"}, {"sha": "b6f29df05752d27cf1ff4e1e0df79296f761af9c", "filename": "src/test/compile-fail/non_owned-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -11,9 +11,9 @@\n #[non_owned]\n struct Foo { a: int }\n \n-fn bar<T: Owned>(_: T) {}\n+fn bar<T: Send>(_: T) {}\n \n fn main() {\n     let x = Foo { a: 5 };\n-    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Owned`\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Send`\n }"}, {"sha": "d51df4979e35246d536b18e06c85f47d9e36bc23", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<T:Owned>(_i: T) {\n+fn f<T:Send>(_i: T) {\n }\n \n fn main() {\n     let i = ~@100;\n-    f(i); //~ ERROR does not fulfill `Owned`\n+    f(i); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "de089dcf914b9676a1f22cf4f3918776f9998511", "filename": "src/test/compile-fail/unsendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsendable-class.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -27,6 +27,6 @@ fn foo(i:int, j: @~str) -> foo {\n \n fn main() {\n   let cat = ~\"kitty\";\n-    let (_, ch) = comm::stream(); //~ ERROR does not fulfill `Owned`\n-  ch.send(foo(42, @(cat))); //~ ERROR does not fulfill `Owned`\n+    let (_, ch) = comm::stream(); //~ ERROR does not fulfill `Send`\n+  ch.send(foo(42, @(cat))); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "992747187f6353e476451517af9b6b9301847fe7", "filename": "src/test/run-fail/bug-811.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-fail%2Fbug-811.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-fail%2Fbug-811.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-811.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -19,6 +19,6 @@ struct chan_t<T> {\n     port: port_id,\n }\n \n-fn send<T:Owned>(ch: chan_t<T>, data: T) { fail!(); }\n+fn send<T:Send>(ch: chan_t<T>, data: T) { fail!(); }\n \n fn main() { fail!(\"quux\"); }"}, {"sha": "24709fb297400a0d4e148cfdcbd653bddc14cb46", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -23,7 +23,7 @@ fn make_cycle<A:Copy>(a: A) {\n     g.rec = Some(g);\n }\n \n-fn f<A:Owned + Copy,B:Owned + Copy>(a: A, b: B) -> @fn() -> (A, B) {\n+fn f<A:Send + Copy,B:Send + Copy>(a: A, b: B) -> @fn() -> (A, B) {\n     let result: @fn() -> (A, B) = || (copy a, copy b);\n     result\n }"}, {"sha": "c7b64fde3fd5af2f4154eb31e719dce8e12ffc99", "filename": "src/test/run-pass/fixed-point-bind-unique.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed-point-bind-unique.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -10,11 +10,11 @@\n \n // xfail-fast\n \n-fn fix_help<A:'static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n+fn fix_help<A:'static,B:Send>(f: extern fn(@fn(A) -> B, A) -> B, x: A) -> B {\n     return f(|a| fix_help(f, a), x);\n }\n \n-fn fix<A:'static,B:Owned>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n+fn fix<A:'static,B:Send>(f: extern fn(@fn(A) -> B, A) -> B) -> @fn(A) -> B {\n     return |a| fix_help(f, a);\n }\n "}, {"sha": "e9954be93575ca21eb346a5688fcfd94b77ebf03", "filename": "src/test/run-pass/fn-bare-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-spawn.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -10,7 +10,7 @@\n \n // This is what the signature to spawn should look like with bare functions\n \n-fn spawn<T:Owned>(val: T, f: extern fn(T)) {\n+fn spawn<T:Send>(val: T, f: extern fn(T)) {\n     f(val);\n }\n "}, {"sha": "815cc1bc79bcd53abbbc7936be834a9681ceaacb", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn id<T:Copy + Owned>(t: T) -> T { return t; }\n+fn id<T:Copy + Send>(t: T) -> T { return t; }\n \n pub fn main() {\n     let expected = ~100;"}, {"sha": "14915555889d0da74d0d851f5f94da5c1ca782c1", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -39,7 +39,7 @@ pub mod pipes {\n         payload: Option<T>\n     }\n \n-    pub fn packet<T:Owned>() -> *packet<T> {\n+    pub fn packet<T:Send>() -> *packet<T> {\n         unsafe {\n             let p: *packet<T> = cast::transmute(~Stuff{\n                 state: empty,\n@@ -74,7 +74,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn send<T:Owned>(mut p: send_packet<T>, payload: T) {\n+    pub fn send<T:Send>(mut p: send_packet<T>, payload: T) {\n         let mut p = p.unwrap();\n         let mut p = unsafe { uniquify(p) };\n         assert!((*p).payload.is_none());\n@@ -100,7 +100,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn recv<T:Owned>(mut p: recv_packet<T>) -> Option<T> {\n+    pub fn recv<T:Send>(mut p: recv_packet<T>) -> Option<T> {\n         let mut p = p.unwrap();\n         let mut p = unsafe { uniquify(p) };\n         loop {\n@@ -120,7 +120,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn sender_terminate<T:Owned>(mut p: *packet<T>) {\n+    pub fn sender_terminate<T:Send>(mut p: *packet<T>) {\n         let mut p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty | blocked => {\n@@ -137,7 +137,7 @@ pub mod pipes {\n         }\n     }\n \n-    pub fn receiver_terminate<T:Owned>(mut p: *packet<T>) {\n+    pub fn receiver_terminate<T:Send>(mut p: *packet<T>) {\n         let mut p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty => {\n@@ -159,7 +159,7 @@ pub mod pipes {\n     }\n \n     #[unsafe_destructor]\n-    impl<T:Owned> Drop for send_packet<T> {\n+    impl<T:Send> Drop for send_packet<T> {\n         fn drop(&self) {\n             unsafe {\n                 if self.p != None {\n@@ -172,13 +172,13 @@ pub mod pipes {\n         }\n     }\n \n-    impl<T:Owned> send_packet<T> {\n+    impl<T:Send> send_packet<T> {\n         pub fn unwrap(&mut self) -> *packet<T> {\n             util::replace(&mut self.p, None).unwrap()\n         }\n     }\n \n-    pub fn send_packet<T:Owned>(p: *packet<T>) -> send_packet<T> {\n+    pub fn send_packet<T:Send>(p: *packet<T>) -> send_packet<T> {\n         send_packet {\n             p: Some(p)\n         }\n@@ -189,7 +189,7 @@ pub mod pipes {\n     }\n \n     #[unsafe_destructor]\n-    impl<T:Owned> Drop for recv_packet<T> {\n+    impl<T:Send> Drop for recv_packet<T> {\n         fn drop(&self) {\n             unsafe {\n                 if self.p != None {\n@@ -202,19 +202,19 @@ pub mod pipes {\n         }\n     }\n \n-    impl<T:Owned> recv_packet<T> {\n+    impl<T:Send> recv_packet<T> {\n         pub fn unwrap(&mut self) -> *packet<T> {\n             util::replace(&mut self.p, None).unwrap()\n         }\n     }\n \n-    pub fn recv_packet<T:Owned>(p: *packet<T>) -> recv_packet<T> {\n+    pub fn recv_packet<T:Send>(p: *packet<T>) -> recv_packet<T> {\n         recv_packet {\n             p: Some(p)\n         }\n     }\n \n-    pub fn entangle<T:Owned>() -> (send_packet<T>, recv_packet<T>) {\n+    pub fn entangle<T:Send>() -> (send_packet<T>, recv_packet<T>) {\n         let p = packet();\n         (send_packet(p), recv_packet(p))\n     }"}, {"sha": "b0ddccf28944b05425614f90ac9330c6c709edcd", "filename": "src/test/run-pass/issue-2834.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fissue-2834.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2834.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -12,7 +12,7 @@\n //\n \n proto! streamp (\n-    open:send<T:Owned> {\n+    open:send<T:Send> {\n         data(T) -> open<T>\n     }\n )"}, {"sha": "10a19d62bd97b97922fbcf7a78c57cc1bb519554", "filename": "src/test/run-pass/issue-2930.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fissue-2930.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2930.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n proto! stream (\n-    Stream:send<T:Owned> {\n+    Stream:send<T:Send> {\n         send(T) -> Stream<T>\n     }\n )"}, {"sha": "11c43b9390198a85f64a6fe2ab29ff7a947789f8", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -45,8 +45,8 @@ proto! bank (\n     }\n )\n \n-fn switch<T:Owned,U>(endp: pipes::RecvPacket<T>,\n-                     f: &fn(v: Option<T>) -> U) -> U {\n+fn switch<T:Send,U>(endp: pipes::RecvPacket<T>,\n+                    f: &fn(v: Option<T>) -> U) -> U {\n     f(pipes::try_recv(endp))\n }\n "}, {"sha": "36f144152f2a3357866966aecca5b4cf3a30d508", "filename": "src/test/run-pass/pipe-select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fpipe-select.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -29,12 +29,12 @@ proto! oneshot (\n )\n \n proto! stream (\n-    Stream:send<T:Owned> {\n+    Stream:send<T:Send> {\n         send(T) -> Stream<T>\n     }\n )\n \n-pub fn spawn_service<T:Owned,Tb:Owned>(\n+pub fn spawn_service<T:Send,Tb:Send>(\n             init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n                                   SendPacketBuffered<T, Tb>),\n             service: ~fn(v: RecvPacketBuffered<T, Tb>))"}, {"sha": "dbf860cd040750ec8fae9998cad13284f1f58e10", "filename": "src/test/run-pass/pipe-sleep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-sleep.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -33,7 +33,7 @@ endpoint. The send endpoint is returned to the caller and the receive\n endpoint is passed to the new task.\n \n */\n-pub fn spawn_service<T:Owned,Tb:Owned>(\n+pub fn spawn_service<T:Send,Tb:Send>(\n             init: extern fn() -> (RecvPacketBuffered<T, Tb>,\n                                   SendPacketBuffered<T, Tb>),\n             service: ~fn(v: RecvPacketBuffered<T, Tb>))"}, {"sha": "4fcbc789f57b25927fd959aaad183a28d80bc9ae", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -16,7 +16,7 @@ struct Command<K, V> {\n     val: V\n }\n \n-fn cache_server<K:Owned,V:Owned>(c: Chan<Chan<Command<K, V>>>) {\n+fn cache_server<K:Send,V:Send>(c: Chan<Chan<Command<K, V>>>) {\n     let (ctrl_port, ctrl_chan) = stream();\n     c.send(ctrl_chan);\n }"}, {"sha": "216a7a939fe0546a34f5c9aa378dcfd8c85d88d7", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -12,7 +12,7 @@\n \n fn p_foo<T>(pinned: T) { }\n fn s_foo<T:Copy>(shared: T) { }\n-fn u_foo<T:Owned>(unique: T) { }\n+fn u_foo<T:Send>(unique: T) { }\n \n struct r {\n   i: int,"}, {"sha": "2c3424d1f06fd3db8458105c6eeebb85ae564087", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -20,7 +20,7 @@ struct Pointy {\n     d : ~fn() -> uint,\n }\n \n-fn make_uniq_closure<A:Owned + Copy>(a: A) -> ~fn() -> uint {\n+fn make_uniq_closure<A:Send + Copy>(a: A) -> ~fn() -> uint {\n     let result: ~fn() -> uint = || ptr::to_unsafe_ptr(&a) as uint;\n     result\n }"}, {"sha": "391881deff66812e931d0449c74c928a9af13382", "filename": "src/test/run-pass/unique-kinds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0aa7848103b5018473df851bc115d3e5585185/src%2Ftest%2Frun-pass%2Funique-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-kinds.rs?ref=1c0aa7848103b5018473df851bc115d3e5585185", "patch": "@@ -12,11 +12,11 @@ use std::cmp::Eq;\n \n fn sendable() {\n \n-    fn f<T:Owned + Eq>(i: T, j: T) {\n+    fn f<T:Send + Eq>(i: T, j: T) {\n         assert_eq!(i, j);\n     }\n \n-    fn g<T:Owned + Eq>(i: T, j: T) {\n+    fn g<T:Send + Eq>(i: T, j: T) {\n         assert!(i != j);\n     }\n "}]}