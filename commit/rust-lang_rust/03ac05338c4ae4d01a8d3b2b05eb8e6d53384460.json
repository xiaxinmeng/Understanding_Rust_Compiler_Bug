{"sha": "03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYWMwNTMzOGM0YWU0ZDAxYThkM2IyYjA1ZWI4ZTZkNTMzODQ0NjA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-20T08:52:31Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-07T10:04:06Z"}, "message": "syntax: Remove `NodeId` from `SyntaxExtension`", "tree": {"sha": "0d9e6f1fa6248e11d5e1f0ef7680dea9fe6be953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9e6f1fa6248e11d5e1f0ef7680dea9fe6be953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "html_url": "https://github.com/rust-lang/rust/commit/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "927a3e873d92d6e85a18d6274becf2fb8d4f284c", "url": "https://api.github.com/repos/rust-lang/rust/commits/927a3e873d92d6e85a18d6274becf2fb8d4f284c", "html_url": "https://github.com/rust-lang/rust/commit/927a3e873d92d6e85a18d6274becf2fb8d4f284c"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "bb3c950edae3bb292de3869f599b9d7f4d39addc", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "patch": "@@ -84,10 +84,7 @@ impl<'a> Registry<'a> {\n     /// Register a syntax extension of any kind.\n     ///\n     /// This is the most general hook into `libsyntax`'s expansion behavior.\n-    pub fn register_syntax_extension(&mut self, name: ast::Name, mut extension: SyntaxExtension) {\n-        if extension.def_info.is_none() {\n-            extension.def_info = Some((ast::CRATE_NODE_ID, self.krate_span));\n-        }\n+    pub fn register_syntax_extension(&mut self, name: ast::Name, extension: SyntaxExtension) {\n         self.syntax_exts.push((name, extension));\n     }\n "}, {"sha": "d2a9627201bc87e57ad326c360c912b3c64b880c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "patch": "@@ -1666,10 +1666,7 @@ pub struct Resolver<'a> {\n     non_macro_attrs: [Lrc<SyntaxExtension>; 2],\n     macro_defs: FxHashMap<Mark, DefId>,\n     local_macro_def_scopes: FxHashMap<NodeId, Module<'a>>,\n-\n-    /// List of crate local macros that we need to warn about as being unused.\n-    /// Right now this only includes macro_rules! macros, and macros 2.0.\n-    unused_macros: FxHashSet<DefId>,\n+    unused_macros: NodeMap<Span>,\n \n     /// Maps the `Mark` of an expansion to its containing module or block.\n     invocations: FxHashMap<Mark, &'a InvocationData<'a>>,\n@@ -2009,7 +2006,7 @@ impl<'a> Resolver<'a> {\n             name_already_seen: FxHashMap::default(),\n             potentially_unused_imports: Vec::new(),\n             struct_constructors: Default::default(),\n-            unused_macros: FxHashSet::default(),\n+            unused_macros: Default::default(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n         }"}, {"sha": "e9c7a3add62a120d4e1a06a6665a63670427de84", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "patch": "@@ -9,8 +9,7 @@ use crate::resolve_imports::ImportResolver;\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use rustc::hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc::hir::map::{self, DefCollector};\n-use rustc::{ty, lint};\n-use rustc::{bug, span_bug};\n+use rustc::{ty, lint, span_bug};\n use syntax::ast::{self, Ident};\n use syntax::attr;\n use syntax::errors::DiagnosticBuilder;\n@@ -259,14 +258,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n     }\n \n     fn check_unused_macros(&self) {\n-        for did in self.unused_macros.iter() {\n-            if let Some((id, span)) = self.macro_map[did].def_info {\n-                let lint = lint::builtin::UNUSED_MACROS;\n-                let msg = \"unused macro definition\";\n-                self.session.buffer_lint(lint, id, span, msg);\n-            } else {\n-                bug!(\"attempted to create unused macro error, but span not available\");\n-            }\n+        for (&node_id, &span) in self.unused_macros.iter() {\n+            self.session.buffer_lint(\n+                lint::builtin::UNUSED_MACROS, node_id, span, \"unused macro definition\"\n+            );\n         }\n     }\n }\n@@ -323,7 +318,9 @@ impl<'a> Resolver<'a> {\n \n         match res {\n             Res::Def(DefKind::Macro(macro_kind), def_id) => {\n-                self.unused_macros.remove(&def_id);\n+                if let Some(node_id) = self.definitions.as_local_node_id(def_id) {\n+                    self.unused_macros.remove(&node_id);\n+                }\n                 if macro_kind == MacroKind::ProcMacroStub {\n                     let msg = \"can't use a procedural macro from the same crate that defines it\";\n                     self.session.span_err(path.span, msg);\n@@ -1157,13 +1154,13 @@ impl<'a> Resolver<'a> {\n                             (res, vis, item.span, expansion, IsMacroExport));\n             } else {\n                 self.check_reserved_macro_name(ident, res);\n-                self.unused_macros.insert(def_id);\n+                self.unused_macros.insert(item.id, item.span);\n             }\n         } else {\n             let module = self.current_module;\n             let vis = self.resolve_visibility(&item.vis);\n             if vis != ty::Visibility::Public {\n-                self.unused_macros.insert(def_id);\n+                self.unused_macros.insert(item.id, item.span);\n             }\n             self.define(module, ident, MacroNS, (res, vis, item.span, expansion));\n         }"}, {"sha": "57dabf98d2cc69901ccce04ad9238773e90d8cd4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "patch": "@@ -606,8 +606,8 @@ pub enum SyntaxExtensionKind {\n pub struct SyntaxExtension {\n     /// A syntax extension kind.\n     pub kind: SyntaxExtensionKind,\n-    /// Some info about the macro's definition point.\n-    pub def_info: Option<(ast::NodeId, Span)>,\n+    /// Span of the macro definition.\n+    pub span: Span,\n     /// Hygienic properties of spans produced by this macro by default.\n     pub default_transparency: Transparency,\n     /// Whitelist of unstable features that are treated as stable inside this macro.\n@@ -657,7 +657,7 @@ impl SyntaxExtension {\n     /// Constructs a syntax extension with default properties.\n     pub fn default(kind: SyntaxExtensionKind, edition: Edition) -> SyntaxExtension {\n         SyntaxExtension {\n-            def_info: None,\n+            span: DUMMY_SP,\n             default_transparency: kind.default_transparency(),\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n@@ -681,7 +681,7 @@ impl SyntaxExtension {\n         ExpnInfo {\n             call_site,\n             format: self.expn_format(Symbol::intern(format)),\n-            def_site: self.def_info.map(|(_, span)| span),\n+            def_site: Some(self.span),\n             default_transparency: self.default_transparency,\n             allow_internal_unstable: self.allow_internal_unstable.clone(),\n             allow_internal_unsafe: self.allow_internal_unsafe,"}, {"sha": "da965eda61e47c62c8dd9bc0c791bdb63d33f4c5", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "patch": "@@ -673,8 +673,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             if let Some((feature, issue)) = ext.unstable_feature {\n                 let crate_span = this.cx.current_expansion.crate_span.unwrap();\n                 // don't stability-check macros in the same crate\n-                // (the only time this is null is for syntax extensions registered as macros)\n-                if ext.def_info.map_or(false, |(_, def_span)| !crate_span.contains(def_span))\n+                if !crate_span.contains(ext.span)\n                     && !span.allows_unstable(feature)\n                     && this.cx.ecfg.features.map_or(true, |feats| {\n                     // macro features will count as lib features\n@@ -699,7 +698,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         self.cx,\n                         span,\n                         mac.node.stream(),\n-                        ext.def_info.map(|(_, s)| s),\n+                        Some(ext.span),\n                     ))\n                 }\n             }"}, {"sha": "341d68c9c3201bead10c7434d56c1f1e2bb5c1ff", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03ac05338c4ae4d01a8d3b2b05eb8e6d53384460/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=03ac05338c4ae4d01a8d3b2b05eb8e6d53384460", "patch": "@@ -442,7 +442,7 @@ pub fn compile(\n \n     SyntaxExtension {\n         kind: SyntaxExtensionKind::LegacyBang(expander),\n-        def_info: Some((def.id, def.span)),\n+        span: def.span,\n         default_transparency,\n         allow_internal_unstable,\n         allow_internal_unsafe,"}]}