{"sha": "4aae2e766e2e9ab55e7bbea31e85642572f75f9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYWUyZTc2NmUyZTlhYjU1ZTdiYmVhMzFlODU2NDI1NzJmNzVmOWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-14T16:05:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:30:12Z"}, "message": "handle type of function definitions (98)", "tree": {"sha": "d1608d38bd734244cb1cc7293f09a4f6ad9d8dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1608d38bd734244cb1cc7293f09a4f6ad9d8dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aae2e766e2e9ab55e7bbea31e85642572f75f9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll3AZQACgkQpp+NIls6\n19mwcRAArsw2B6LSkUQ1Q2r82uFtWqabCAszOtDhw+reF7RYX0hmXiqyXXYuBEUm\nImcxMqKFK+0cOcQLwR8AhEcp4/2ab33vZ9Qnt9rpPVgqV9HGepcghUpdByfkZdka\nGE1UvUSNjqBOmZvdzy/y0Ul/q8wk2LXHbrtmDJZpwCcDlJcNtwkiUkI045Yc1obL\nRRjR2pl1Uv2FvHsuTQPTMkGXm0V+UTkM4itthS4MpqgNlPi6zM060NHEv3H1pmQQ\nfCataeNi5cqFZC7DVfLHX7sP49zkfoG++gDRoFwVf7gRKWEVR296Pw/i9mOcJ1Bp\nHyHEuuOEmrlGzuwp1kJDdkkhXXTzMIUf7ULsU+dJ07OTy4CL8Ij/BlJGMp6f90Ac\nTBhcFYRfjoZdwJmyZpi814by88lpmShIymrE3XCttkSQOGyTq1r9XoNU4xli5Ow1\n0Hivbt4AnuIgHbGQUIM83UgCQzBqAKuDGtY5Qy6Juh51p0Da8NKS4rvbp3k/j1g9\nnKuwQubDjjCzLruudodQOJBeg5efxvQWmvvs0BCDnbPmGkVovfxHgni0WK0sqM4v\nKb2VHCs4MlsUHjjJ4LtqAeMETI7H67HRJLTT0Fc6tI+u0UPLhfcT+TsLQ7qMFRVR\nr9p81EGFFd8gtYXLkoZ4Y0bRJ8BnXUZdT4ujXHP0qARiR30eDqM=\n=mcui\n-----END PGP SIGNATURE-----", "payload": "tree d1608d38bd734244cb1cc7293f09a4f6ad9d8dc1\nparent 3f8a497bf09d393e9c544dd9aa8cfa642f776760\nauthor Ralf Jung <post@ralfj.de> 1500048310 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500971412 +0200\n\nhandle type of function definitions (98)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aae2e766e2e9ab55e7bbea31e85642572f75f9e", "html_url": "https://github.com/rust-lang/rust/commit/4aae2e766e2e9ab55e7bbea31e85642572f75f9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aae2e766e2e9ab55e7bbea31e85642572f75f9e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8a497bf09d393e9c544dd9aa8cfa642f776760", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8a497bf09d393e9c544dd9aa8cfa642f776760", "html_url": "https://github.com/rust-lang/rust/commit/3f8a497bf09d393e9c544dd9aa8cfa642f776760"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "54acf1ef0280d8209ff3dfcdb17e3e0ef6c43b81", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4aae2e766e2e9ab55e7bbea31e85642572f75f9e/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aae2e766e2e9ab55e7bbea31e85642572f75f9e/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=4aae2e766e2e9ab55e7bbea31e85642572f75f9e", "patch": "@@ -80,11 +80,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         let is_owning = match ty.sty {\n             TyInt(_) | TyUint(_) | TyRawPtr(_) |\n             TyBool | TyFloat(_) | TyChar | TyStr |\n-            TyRef(..) | TyFnPtr(..) | TyNever => true,\n+            TyRef(..) | TyFnPtr(..) | TyFnDef(..) | TyNever => true,\n             TyAdt(adt, _) if adt.is_box() => true,\n             TySlice(_) | TyAdt(_, _) | TyTuple(..) | TyClosure(..) | TyArray(..) | TyDynamic(..) => false,\n-            TyParam(_) | TyInfer(_) => bug!(\"I got an incomplete type for validation\"),\n-            _ => return Err(EvalError::Unimplemented(format!(\"Unimplemented type encountered when checking validity.\"))),\n+            TyParam(_) | TyInfer(_) | TyProjection(_) | TyAnon(..) | TyError => bug!(\"I got an incomplete/unnormalized type for validation\"),\n         };\n         if is_owning {\n             match lvalue {\n@@ -163,12 +162,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.validate_ptr(val, ty.boxed_ty(), vctx)\n             }\n             TyFnPtr(_sig) => {\n-                // TODO: The function names here could need some improvement.\n                 let ptr = self.read_lvalue(lvalue)?.into_ptr(&mut self.memory)?.to_ptr()?;\n                 self.memory.get_fn(ptr)?;\n                 // TODO: Check if the signature matches (should be the same check as what terminator/mod.rs already does on call?).\n                 Ok(())\n             }\n+            TyFnDef(..) => {\n+                // This is a zero-sized type with all relevant data sitting in the type.\n+                // There is nothing to validate.\n+                Ok(())\n+            }\n \n             // Compound types\n             TySlice(elem_ty) => {"}]}