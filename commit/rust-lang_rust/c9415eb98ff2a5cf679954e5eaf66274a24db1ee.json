{"sha": "c9415eb98ff2a5cf679954e5eaf66274a24db1ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NDE1ZWI5OGZmMmE1Y2Y2Nzk5NTRlNWVhZjY2Mjc0YTI0ZGIxZWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-08T22:56:00Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-03-28T17:38:55Z"}, "message": "Remains to fix tables", "tree": {"sha": "ab5a81429325f814e928775b88ea762cc1c25800", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab5a81429325f814e928775b88ea762cc1c25800"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9415eb98ff2a5cf679954e5eaf66274a24db1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9415eb98ff2a5cf679954e5eaf66274a24db1ee", "html_url": "https://github.com/rust-lang/rust/commit/c9415eb98ff2a5cf679954e5eaf66274a24db1ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9415eb98ff2a5cf679954e5eaf66274a24db1ee/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a80cbda6d505b845f4d857e8f5770df0ea162a", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a80cbda6d505b845f4d857e8f5770df0ea162a", "html_url": "https://github.com/rust-lang/rust/commit/08a80cbda6d505b845f4d857e8f5770df0ea162a"}], "stats": {"total": 94, "additions": 74, "deletions": 20}, "files": [{"sha": "a36e99e80dfe9593c17f31ebf22ca5ff29695675", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 74, "deletions": 20, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/c9415eb98ff2a5cf679954e5eaf66274a24db1ee/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9415eb98ff2a5cf679954e5eaf66274a24db1ee/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c9415eb98ff2a5cf679954e5eaf66274a24db1ee", "patch": "@@ -43,7 +43,7 @@ use html::highlight;\n use html::escape::Escape;\n use test;\n \n-use pulldown_cmark::{self, Parser};\n+use pulldown_cmark::{self, Event, Parser};\n \n /// A unit struct which has the `fmt::Display` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n@@ -467,7 +467,7 @@ pub fn render(w: &mut fmt::Formatter,\n         PLAYGROUND.with(|play| {\n             // insert newline to clearly separate it from the\n             // previous block so we can shorten the html output\n-            let mut s = String::from(\"\\n\");\n+            buffer.push('\\n');\n             let playground_button = play.borrow().as_ref().and_then(|&(ref krate, ref url)| {\n                 if url.is_empty() {\n                     return None;\n@@ -506,12 +506,11 @@ pub fn render(w: &mut fmt::Formatter,\n                     url, test_escaped, channel\n                 ))\n             });\n-            s.push_str(&highlight::render_with_highlighting(\n-                           &text,\n-                           Some(\"rust-example-rendered\"),\n-                           None,\n-                           playground_button.as_ref().map(String::as_str)));\n-            buffer.push_str(&s);\n+            buffer.push_str(&highlight::render_with_highlighting(\n+                            &text,\n+                            Some(\"rust-example-rendered\"),\n+                            None,\n+                            playground_button.as_ref().map(String::as_str)));\n         });\n     }\n \n@@ -587,29 +586,84 @@ pub fn render(w: &mut fmt::Formatter,\n         buffer.push_str(&format!(\"<code>{}</code>\", Escape(&collapse_whitespace(&content))));\n     }\n \n-    let mut toc_builder = if print_toc {\n-        Some(TocBuilder::new())\n-    } else {\n-        None\n-    };\n-    let mut buffer = String::new();\n-    let mut parser = Parser::new(s);\n-    loop {\n-        let next_event = parser.next();\n+    fn link(parser: &mut Parser, buffer: &mut String, url: &str, mut title: String) {\n+        loop {\n+            let event = parser.next();\n+            if let Some(event) = event {\n+                match event {\n+                    pulldown_cmark::Event::End(\n+                        pulldown_cmark::Tag::Link(_, _)) => break,\n+                    pulldown_cmark::Event::Text(ref s) => {\n+                        title.push_str(s);\n+                    }\n+                    _ => {}\n+                }\n+            } else {\n+                break\n+            }\n+        }\n+        buffer.push_str(&format!(\"<a href=\\\"{}\\\">{}</a>\", url, title));\n+    }\n+\n+    fn paragraph(parser: &mut Parser, buffer: &mut String, toc_builder: &mut Option<TocBuilder>) {\n+        let mut content = String::new();\n+        loop {\n+            let event = parser.next();\n+            if let Some(event) = event {\n+                match event {\n+                    pulldown_cmark::Event::End(\n+                        pulldown_cmark::Tag::Paragraph) => break,\n+                    pulldown_cmark::Event::Text(ref s) => {\n+                        content.push_str(s);\n+                    }\n+                    x => {\n+                        looper(parser, &mut content, Some(x), toc_builder);\n+                    }\n+                }\n+            } else {\n+                break\n+            }\n+        }\n+        buffer.push_str(&format!(\"<p>{}</p>\", content));\n+    }\n+\n+    fn looper<'a>(parser: &'a mut Parser, buffer: &mut String, next_event: Option<Event<'a>>,\n+                  toc_builder: &mut Option<TocBuilder>) -> bool {\n         if let Some(event) = next_event {\n             match event {\n                 pulldown_cmark::Event::Start(pulldown_cmark::Tag::CodeBlock(s)) => {\n-                    block(&mut parser, &*s, &mut buffer);\n+                    block(parser, &*s, buffer);\n                 }\n                 pulldown_cmark::Event::Start(pulldown_cmark::Tag::Header(level)) => {\n-                    header(&mut parser, level, &mut toc_builder, &mut buffer);\n+                    header(parser, level, toc_builder, buffer);\n                 }\n                 pulldown_cmark::Event::Start(pulldown_cmark::Tag::Code) => {\n-                    codespan(&mut parser, &mut buffer);\n+                    codespan(parser, buffer);\n+                }\n+                pulldown_cmark::Event::Start(pulldown_cmark::Tag::Paragraph) => {\n+                    paragraph(parser, buffer, toc_builder);\n+                }\n+                pulldown_cmark::Event::Start(pulldown_cmark::Tag::Link(ref url, ref t)) => {\n+                    link(parser, buffer, url, t.as_ref().to_owned());\n                 }\n                 _ => {}\n             }\n+            true\n         } else {\n+            false\n+        }\n+    }\n+\n+    let mut toc_builder = if print_toc {\n+        Some(TocBuilder::new())\n+    } else {\n+        None\n+    };\n+    let mut buffer = String::new();\n+    let mut parser = Parser::new(s);\n+    loop {\n+        let next_event = parser.next();\n+        if !looper(&mut parser, &mut buffer, next_event, &mut toc_builder) {\n             break\n         }\n     }"}]}