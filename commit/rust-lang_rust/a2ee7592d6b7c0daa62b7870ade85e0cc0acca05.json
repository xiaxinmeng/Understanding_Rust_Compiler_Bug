{"sha": "a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "node_id": "C_kwDOAAsO6NoAKGEyZWU3NTkyZDZiN2MwZGFhNjJiNzg3MGFkZTg1ZTBjYzBhY2NhMDU", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-31T07:32:44Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-04-03T00:35:37Z"}, "message": "Use `&IndexSlice` instead of `&IndexVec` where possible\n\nAll the same reasons as for `[T]`: more general, less pointer chasing, and `&mut IndexSlice` emphasizes that it doesn't change *length*.", "tree": {"sha": "4ab6bedbd53989ea3c1b556e4d61c33f469c536b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab6bedbd53989ea3c1b556e4d61c33f469c536b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "html_url": "https://github.com/rust-lang/rust/commit/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a93bcdc30771340dfff914a1cf48556886ad33a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a93bcdc30771340dfff914a1cf48556886ad33a6", "html_url": "https://github.com/rust-lang/rust/commit/a93bcdc30771340dfff914a1cf48556886ad33a6"}], "stats": {"total": 286, "additions": 168, "deletions": 118}, "files": [{"sha": "aea59ee6aea3e5a348f32fbee7d9ebef7ea70a3f", "filename": "compiler/rustc_abi/src/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_abi%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flayout.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -289,7 +289,7 @@ pub trait LayoutCalculator {\n     fn layout_of_struct_or_enum(\n         &self,\n         repr: &ReprOptions,\n-        variants: &IndexVec<VariantIdx, Vec<Layout<'_>>>,\n+        variants: &IndexSlice<VariantIdx, Vec<Layout<'_>>>,\n         is_enum: bool,\n         is_unsafe_cell: bool,\n         scalar_valid_range: (Bound<u128>, Bound<u128>),\n@@ -883,7 +883,7 @@ pub trait LayoutCalculator {\n     fn layout_of_union(\n         &self,\n         repr: &ReprOptions,\n-        variants: &IndexVec<VariantIdx, Vec<Layout<'_>>>,\n+        variants: &IndexSlice<VariantIdx, Vec<Layout<'_>>>,\n     ) -> Option<LayoutS> {\n         let dl = self.current_data_layout();\n         let dl = dl.borrow();"}, {"sha": "7b5732b488b41658debbecb38013368adda19dc4", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -11,7 +11,7 @@ use bitflags::bitflags;\n use rustc_data_structures::intern::Interned;\n #[cfg(feature = \"nightly\")]\n use rustc_data_structures::stable_hasher::StableOrd;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n #[cfg(feature = \"nightly\")]\n use rustc_macros::HashStable_Generic;\n #[cfg(feature = \"nightly\")]"}, {"sha": "2efffbb6dc5e37814a275b63b3270d1590b22f9a", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::PredicateOrigin;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n use rustc_middle::ty::{ResolverAstLowering, TyCtxt};\n use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::source_map::DesugaringKind;\n@@ -25,7 +25,7 @@ use thin_vec::ThinVec;\n pub(super) struct ItemLowerer<'a, 'hir> {\n     pub(super) tcx: TyCtxt<'hir>,\n     pub(super) resolver: &'a mut ResolverAstLowering,\n-    pub(super) ast_index: &'a IndexVec<LocalDefId, AstOwner<'a>>,\n+    pub(super) ast_index: &'a IndexSlice<LocalDefId, AstOwner<'a>>,\n     pub(super) owners: &'a mut IndexVec<LocalDefId, hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>>>,\n }\n "}, {"sha": "ca659db4dbea2cfb29083e031991c4efe8e6ab94", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -60,7 +60,7 @@ use rustc_hir::def::{DefKind, LifetimeRes, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::{ConstArg, GenericArg, ItemLocalId, ParamName, TraitCandidate};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n use rustc_macros::fluent_messages;\n use rustc_middle::{\n     span_bug,\n@@ -414,7 +414,7 @@ fn index_crate<'a>(\n /// This hash will then be part of the crate_hash which is stored in the metadata.\n fn compute_hir_hash(\n     tcx: TyCtxt<'_>,\n-    owners: &IndexVec<LocalDefId, hir::MaybeOwner<&hir::OwnerInfo<'_>>>,\n+    owners: &IndexSlice<LocalDefId, hir::MaybeOwner<&hir::OwnerInfo<'_>>>,\n ) -> Fingerprint {\n     let mut hir_body_nodes: Vec<_> = owners\n         .iter_enumerated()"}, {"sha": "d2d9779dbea47570e4bb9aaffd29269791f7c6bc", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -2,7 +2,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n use rustc_data_structures::graph::scc::Sccs;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{RegionVid, VarianceDiagInfo};\n use rustc_span::Span;\n@@ -60,7 +60,9 @@ impl<'tcx> OutlivesConstraintSet<'tcx> {\n         Sccs::new(region_graph)\n     }\n \n-    pub(crate) fn outlives(&self) -> &IndexVec<OutlivesConstraintIndex, OutlivesConstraint<'tcx>> {\n+    pub(crate) fn outlives(\n+        &self,\n+    ) -> &IndexSlice<OutlivesConstraintIndex, OutlivesConstraint<'tcx>> {\n         &self.outlives\n     }\n }"}, {"sha": "cb1a65222237096efe7c715c369d2aedd4cad3eb", "filename": "compiler/rustc_borrowck/src/consumers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconsumers.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -3,7 +3,7 @@\n //! This file provides API for compiler consumers.\n \n use rustc_hir::def_id::LocalDefId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_infer::infer::{DefiningAnchor, TyCtxtInferExt};\n use rustc_middle::mir::Body;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -35,6 +35,6 @@ pub fn get_body_with_borrowck_facts(\n     let (input_body, promoted) = tcx.mir_promoted(def);\n     let infcx = tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bind(def.did)).build();\n     let input_body: &Body<'_> = &input_body.borrow();\n-    let promoted: &IndexVec<_, _> = &promoted.borrow();\n+    let promoted: &IndexSlice<_, _> = &promoted.borrow();\n     *super::do_mir_borrowck(&infcx, input_body, promoted, true).1.unwrap()\n }"}, {"sha": "8860395e71c80cb7e3387346066160901abe84ba", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -3,7 +3,7 @@\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::{\n     Body, CastKind, ConstraintCategory, FakeReadCause, Local, LocalInfo, Location, Operand, Place,\n@@ -60,7 +60,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n-        local_names: &IndexVec<Local, Option<Symbol>>,\n+        local_names: &IndexSlice<Local, Option<Symbol>>,\n         err: &mut Diagnostic,\n         borrow_desc: &str,\n         borrow_span: Option<Span>,"}, {"sha": "80b2787ce0c42fde3119d497704f0377c8e9e036", "filename": "compiler/rustc_borrowck/src/diagnostics/var_name.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fvar_name.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -3,7 +3,7 @@\n \n use crate::Upvar;\n use crate::{nll::ToRegionVid, region_infer::RegionInferenceContext};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice};\n use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use rustc_span::source_map::Span;\n@@ -14,7 +14,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         body: &Body<'tcx>,\n-        local_names: &IndexVec<Local, Option<Symbol>>,\n+        local_names: &IndexSlice<Local, Option<Symbol>>,\n         upvars: &[Upvar<'tcx>],\n         fr: RegionVid,\n     ) -> Option<(Option<Symbol>, Span)> {\n@@ -113,7 +113,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     pub(crate) fn get_argument_name_and_span_for_region(\n         &self,\n         body: &Body<'tcx>,\n-        local_names: &IndexVec<Local, Option<Symbol>>,\n+        local_names: &IndexSlice<Local, Option<Symbol>>,\n         argument_index: usize,\n     ) -> (Option<Symbol>, Span) {\n         let implicit_inputs = self.universal_regions().defining_ty.implicit_inputs();"}, {"sha": "1d4d1406239d9ba20f44c00f1f3a383bc012e777", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -23,7 +23,7 @@ use rustc_errors::{Diagnostic, DiagnosticBuilder, DiagnosticMessage, Subdiagnost\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::ChunkedBitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_infer::infer::{\n     DefiningAnchor, InferCtxt, NllRegionVariableOrigin, RegionVariableOrigin, TyCtxtInferExt,\n };\n@@ -154,7 +154,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> &Bor\n     let infcx =\n         tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bind(hir_owner.def_id)).build();\n     let input_body: &Body<'_> = &input_body.borrow();\n-    let promoted: &IndexVec<_, _> = &promoted.borrow();\n+    let promoted: &IndexSlice<_, _> = &promoted.borrow();\n     let opt_closure_req = do_mir_borrowck(&infcx, input_body, promoted, false).0;\n     debug!(\"mir_borrowck done\");\n \n@@ -170,7 +170,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> &Bor\n fn do_mir_borrowck<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     input_body: &Body<'tcx>,\n-    input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n+    input_promoted: &IndexSlice<Promoted, Body<'tcx>>,\n     return_body_with_facts: bool,\n ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {\n     let def = input_body.source.with_opt_param().as_local().unwrap();\n@@ -223,7 +223,7 @@ fn do_mir_borrowck<'tcx>(\n     // be modified (in place) to contain non-lexical lifetimes. It\n     // will have a lifetime tied to the inference context.\n     let mut body_owned = input_body.clone();\n-    let mut promoted = input_promoted.clone();\n+    let mut promoted = input_promoted.to_owned();\n     let free_regions =\n         nll::replace_regions_in_mir(&infcx, param_env, &mut body_owned, &mut promoted);\n     let body = &body_owned; // no further changes"}, {"sha": "f637e6a95ac686cfb55b7def21c27b6081c83578", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -2,7 +2,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxIndexMap;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::infer::MemberConstraint;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n@@ -215,7 +215,7 @@ where\n /// target_list: A -> B -> C -> D -> E -> F -> (None)\n /// ```\n fn append_list(\n-    constraints: &mut IndexVec<NllMemberConstraintIndex, NllMemberConstraint<'_>>,\n+    constraints: &mut IndexSlice<NllMemberConstraintIndex, NllMemberConstraint<'_>>,\n     target_list: NllMemberConstraintIndex,\n     source_list: NllMemberConstraintIndex,\n ) {"}, {"sha": "06ecbdb1707c58e987c4e92d7c03bf3aba4edf43", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -4,7 +4,7 @@\n \n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::LocalDefId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n@@ -59,7 +59,7 @@ pub(crate) fn replace_regions_in_mir<'tcx>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n-    promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n+    promoted: &mut IndexSlice<Promoted, Body<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n     let def = body.source.with_opt_param().as_local().unwrap();\n \n@@ -158,7 +158,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n-    promoted: &IndexVec<Promoted, Body<'tcx>>,\n+    promoted: &IndexSlice<Promoted, Body<'tcx>>,\n     location_table: &LocationTable,\n     param_env: ty::ParamEnv<'tcx>,\n     flow_inits: &mut ResultsCursor<'cx, 'tcx, MaybeInitializedPlaces<'cx, 'tcx>>,"}, {"sha": "f67af4584a4a561abdaabaa84de0d7787cbda5b7", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::CRATE_DEF_ID;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_infer::infer::outlives::test_type_match;\n use rustc_infer::infer::region_constraints::{GenericKind, VarInfos, VerifyBound, VerifyIfEq};\n use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin, RegionVariableOrigin};\n@@ -399,7 +399,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// the minimum, or narrowest, universe.\n     fn compute_scc_universes(\n         constraint_sccs: &Sccs<RegionVid, ConstraintSccIndex>,\n-        definitions: &IndexVec<RegionVid, RegionDefinition<'tcx>>,\n+        definitions: &IndexSlice<RegionVid, RegionDefinition<'tcx>>,\n     ) -> IndexVec<ConstraintSccIndex, ty::UniverseIndex> {\n         let num_sccs = constraint_sccs.num_sccs();\n         let mut scc_universes = IndexVec::from_elem_n(ty::UniverseIndex::MAX, num_sccs);\n@@ -486,7 +486,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// more details.\n     fn compute_scc_representatives(\n         constraints_scc: &Sccs<RegionVid, ConstraintSccIndex>,\n-        definitions: &IndexVec<RegionVid, RegionDefinition<'tcx>>,\n+        definitions: &IndexSlice<RegionVid, RegionDefinition<'tcx>>,\n     ) -> IndexVec<ConstraintSccIndex, ty::RegionVid> {\n         let num_sccs = constraints_scc.num_sccs();\n         let next_region_vid = definitions.next_index();"}, {"sha": "0fbf01dbe4455c4e0164c30ed4431618eaed4152", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,7 +1,7 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n use crate::BorrowckInferCtxt;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n use rustc_middle::mir::Constant;\n@@ -16,7 +16,7 @@ use rustc_span::{Span, Symbol};\n pub fn renumber_mir<'tcx>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     body: &mut Body<'tcx>,\n-    promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n+    promoted: &mut IndexSlice<Promoted, Body<'tcx>>,\n ) {\n     debug!(?body.arg_count);\n "}, {"sha": "2fc4e32ecb24e311243cd0e12ee5c9473c55fa6f", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -125,7 +125,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n-    promoted: &IndexVec<Promoted, Body<'tcx>>,\n+    promoted: &IndexSlice<Promoted, Body<'tcx>>,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n     borrow_set: &BorrowSet<'tcx>,\n@@ -292,7 +292,7 @@ enum FieldAccessError {\n /// is a problem.\n struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n-    promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n+    promoted: &'b IndexSlice<Promoted, Body<'tcx>>,\n     last_span: Span,\n     errors_reported: bool,\n }\n@@ -493,7 +493,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n     fn new(\n         cx: &'a mut TypeChecker<'b, 'tcx>,\n-        promoted: &'b IndexVec<Promoted, Body<'tcx>>,\n+        promoted: &'b IndexSlice<Promoted, Body<'tcx>>,\n     ) -> Self {\n         TypeVerifier { promoted, last_span: cx.body.span, cx, errors_reported: false }\n     }"}, {"sha": "55a217f59f91e0267814797b4bea3479118cc0dd", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -3,7 +3,7 @@ use rustc_codegen_ssa::debuginfo::{\n     wants_c_like_enum_debuginfo,\n };\n use rustc_hir::def::CtorKind;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::{\n     bug,\n     mir::{GeneratorLayout, GeneratorSavedLocal},\n@@ -323,7 +323,7 @@ pub fn build_generator_variant_struct_type_di_node<'ll, 'tcx>(\n     generator_type_and_layout: TyAndLayout<'tcx>,\n     generator_type_di_node: &'ll DIType,\n     generator_layout: &GeneratorLayout<'tcx>,\n-    state_specific_upvar_names: &IndexVec<GeneratorSavedLocal, Option<Symbol>>,\n+    state_specific_upvar_names: &IndexSlice<GeneratorSavedLocal, Option<Symbol>>,\n     common_upvar_names: &[String],\n ) -> &'ll DIType {\n     let variant_name = GeneratorSubsts::variant_name(variant_index);"}, {"sha": "1ea13040072e7b4a3b62e586e1f0fb107b60e1ab", "filename": "compiler/rustc_codegen_ssa/src/coverageinfo/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fcoverageinfo%2Fmap.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,6 +1,6 @@\n pub use super::ffi::*;\n \n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::mir::coverage::{\n     CodeRegion, CounterValueReference, ExpressionOperandId, InjectedExpressionId,\n     InjectedExpressionIndex, MappedExpressionIndex, Op,\n@@ -205,7 +205,7 @@ impl<'tcx> FunctionCoverage<'tcx> {\n         // `expression_index`s lower than the referencing `Expression`. Therefore, it is\n         // reasonable to look up the new index of an expression operand while the `new_indexes`\n         // vector is only complete up to the current `ExpressionIndex`.\n-        let id_to_counter = |new_indexes: &IndexVec<\n+        let id_to_counter = |new_indexes: &IndexSlice<\n             InjectedExpressionIndex,\n             Option<MappedExpressionIndex>,\n         >,"}, {"sha": "dcf533dc39c3bce23c1749aaf836cb667ed60553", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -5,7 +5,7 @@ use super::FunctionCx;\n use crate::traits::*;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Location, TerminatorKind};\n@@ -277,7 +277,7 @@ impl CleanupKind {\n /// Recover that structure in an analyze pass.\n pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKind> {\n     fn discover_masters<'tcx>(\n-        result: &mut IndexVec<mir::BasicBlock, CleanupKind>,\n+        result: &mut IndexSlice<mir::BasicBlock, CleanupKind>,\n         mir: &mir::Body<'tcx>,\n     ) {\n         for (bb, data) in mir.basic_blocks.iter_enumerated() {\n@@ -308,7 +308,10 @@ pub fn cleanup_kinds(mir: &mir::Body<'_>) -> IndexVec<mir::BasicBlock, CleanupKi\n         }\n     }\n \n-    fn propagate<'tcx>(result: &mut IndexVec<mir::BasicBlock, CleanupKind>, mir: &mir::Body<'tcx>) {\n+    fn propagate<'tcx>(\n+        result: &mut IndexSlice<mir::BasicBlock, CleanupKind>,\n+        mir: &mir::Body<'tcx>,\n+    ) {\n         let mut funclet_succs = IndexVec::from_elem(None, &mir.basic_blocks);\n \n         let mut set_successor = |funclet: mir::BasicBlock, succ| match funclet_succs[funclet] {"}, {"sha": "6774e5a5837640b4c54bc303796b27ec6e7aab29", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, List, TyCtxt, TypeVisitableExt};\n use rustc_span::Span;\n \n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n \n use std::cell::Cell;\n use std::{cmp, iter, mem};\n@@ -184,7 +184,7 @@ pub fn collect_temps_and_candidates<'tcx>(\n /// This wraps an `Item`, and has access to all fields of that `Item` via `Deref` coercion.\n struct Validator<'a, 'tcx> {\n     ccx: &'a ConstCx<'a, 'tcx>,\n-    temps: &'a mut IndexVec<Local, TempState>,\n+    temps: &'a mut IndexSlice<Local, TempState>,\n }\n \n impl<'a, 'tcx> std::ops::Deref for Validator<'a, 'tcx> {\n@@ -669,7 +669,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n // FIXME(eddyb) remove the differences for promotability in `static`, `const`, `const fn`.\n pub fn validate_candidates(\n     ccx: &ConstCx<'_, '_>,\n-    temps: &mut IndexVec<Local, TempState>,\n+    temps: &mut IndexSlice<Local, TempState>,\n     candidates: &[Candidate],\n ) -> Vec<Candidate> {\n     let mut validator = Validator { ccx, temps };"}, {"sha": "0df9dc112ee6133a1cc91a74a460c03c61811160", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -10,7 +10,7 @@\n //! <https://www.cs.princeton.edu/courses/archive/spr03/cs423/download/dominators.pdf>\n \n use super::ControlFlowGraph;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n use std::cmp::Ordering;\n \n #[cfg(test)]\n@@ -256,10 +256,10 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n /// where `+>` is a proper ancestor and `*>` is just an ancestor.\n #[inline]\n fn eval(\n-    ancestor: &mut IndexVec<PreorderIndex, PreorderIndex>,\n+    ancestor: &mut IndexSlice<PreorderIndex, PreorderIndex>,\n     lastlinked: Option<PreorderIndex>,\n-    semi: &IndexVec<PreorderIndex, PreorderIndex>,\n-    label: &mut IndexVec<PreorderIndex, PreorderIndex>,\n+    semi: &IndexSlice<PreorderIndex, PreorderIndex>,\n+    label: &mut IndexSlice<PreorderIndex, PreorderIndex>,\n     node: PreorderIndex,\n ) -> PreorderIndex {\n     if is_processed(node, lastlinked) {\n@@ -277,10 +277,10 @@ fn is_processed(v: PreorderIndex, lastlinked: Option<PreorderIndex>) -> bool {\n \n #[inline]\n fn compress(\n-    ancestor: &mut IndexVec<PreorderIndex, PreorderIndex>,\n+    ancestor: &mut IndexSlice<PreorderIndex, PreorderIndex>,\n     lastlinked: Option<PreorderIndex>,\n-    semi: &IndexVec<PreorderIndex, PreorderIndex>,\n-    label: &mut IndexVec<PreorderIndex, PreorderIndex>,\n+    semi: &IndexSlice<PreorderIndex, PreorderIndex>,\n+    label: &mut IndexSlice<PreorderIndex, PreorderIndex>,\n     v: PreorderIndex,\n ) {\n     assert!(is_processed(v, lastlinked));"}, {"sha": "01a83b40a75a5c9b535b868abc6a58b906bfb692", "filename": "compiler/rustc_data_structures/src/graph/iterate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fiterate%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,6 +1,6 @@\n use super::{DirectedGraph, WithNumNodes, WithStartNode, WithSuccessors};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use std::ops::ControlFlow;\n \n #[cfg(test)]\n@@ -31,7 +31,7 @@ fn post_order_walk<G: DirectedGraph + WithSuccessors + WithNumNodes>(\n     graph: &G,\n     node: G::Node,\n     result: &mut Vec<G::Node>,\n-    visited: &mut IndexVec<G::Node, bool>,\n+    visited: &mut IndexSlice<G::Node, bool>,\n ) {\n     struct PostOrderFrame<Node, Iter> {\n         node: Node,"}, {"sha": "28c357e54dd61e595305a39be99d9a6a291eb295", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -8,7 +8,7 @@\n use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n use std::ops::Range;\n \n #[cfg(test)]\n@@ -43,7 +43,7 @@ impl<N: Idx, S: Idx + Ord> Sccs<N, S> {\n         SccsConstruction::construct(graph)\n     }\n \n-    pub fn scc_indices(&self) -> &IndexVec<N, S> {\n+    pub fn scc_indices(&self) -> &IndexSlice<N, S> {\n         &self.scc_indices\n     }\n \n@@ -123,7 +123,7 @@ impl<S: Idx> SccData<S> {\n         self.ranges.len()\n     }\n \n-    pub fn ranges(&self) -> &IndexVec<S, Range<usize>> {\n+    pub fn ranges(&self) -> &IndexSlice<S, Range<usize>> {\n         &self.ranges\n     }\n "}, {"sha": "5945de2302a564e49a06e5e6c609b975913cea4d", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,6 +1,7 @@\n #[cfg(feature = \"rustc_serialize\")]\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n \n+use std::borrow::{Borrow, BorrowMut};\n use std::fmt;\n use std::fmt::Debug;\n use std::hash::Hash;\n@@ -51,13 +52,26 @@ impl Idx for u32 {\n     }\n }\n \n+/// An owned contiguous collection of `T`s, indexed by `I` rather than by `usize`.\n+///\n+/// While it's possible to use `u32` or `usize` directly for `I`,\n+/// you almost certainly want to use a [`newtype_index!`]-generated type instead.\n+///\n+/// [`newtype_index!`]: ../macro.newtype_index.html\n #[derive(Clone, PartialEq, Eq, Hash)]\n #[repr(transparent)]\n pub struct IndexVec<I: Idx, T> {\n     pub raw: Vec<T>,\n     _marker: PhantomData<fn(&I)>,\n }\n \n+/// A view into contiguous `T`s, indexed by `I` rather than by `usize`.\n+///\n+/// One common pattern you'll see is code that uses [`IndexVec::from_elem`]\n+/// to create the storage needed for a particular \"universe\" (aka the set of all\n+/// the possible keys that need an associated value) then passes that working\n+/// area as `&mut IndexSlice<I, T>` to clarify that nothing will be added nor\n+/// removed during processing (and, as a bonus, to chase fewer pointers).\n #[derive(PartialEq, Eq, Hash)]\n #[repr(transparent)]\n pub struct IndexSlice<I: Idx, T> {\n@@ -116,7 +130,7 @@ impl<I: Idx, T> IndexVec<I, T> {\n     }\n \n     #[inline]\n-    pub fn from_elem<S>(elem: T, universe: &IndexVec<I, S>) -> Self\n+    pub fn from_elem<S>(elem: T, universe: &IndexSlice<I, S>) -> Self\n     where\n         T: Clone,\n     {\n@@ -244,6 +258,30 @@ impl<I: Idx, T> DerefMut for IndexVec<I, T> {\n     }\n }\n \n+impl<I: Idx, T> Borrow<IndexSlice<I, T>> for IndexVec<I, T> {\n+    fn borrow(&self) -> &IndexSlice<I, T> {\n+        self\n+    }\n+}\n+\n+impl<I: Idx, T> BorrowMut<IndexSlice<I, T>> for IndexVec<I, T> {\n+    fn borrow_mut(&mut self) -> &mut IndexSlice<I, T> {\n+        self\n+    }\n+}\n+\n+impl<I: Idx, T: Clone> ToOwned for IndexSlice<I, T> {\n+    type Owned = IndexVec<I, T>;\n+\n+    fn to_owned(&self) -> IndexVec<I, T> {\n+        IndexVec::from_raw(self.raw.to_owned())\n+    }\n+\n+    fn clone_into(&self, target: &mut IndexVec<I, T>) {\n+        self.raw.clone_into(&mut target.raw)\n+    }\n+}\n+\n impl<I: Idx, T> IndexSlice<I, T> {\n     #[inline]\n     pub fn from_raw(raw: &[T]) -> &Self {\n@@ -388,7 +426,7 @@ impl<I: Idx, T: Clone> IndexVec<I, T> {\n     }\n }\n \n-impl<I: Idx, T: Ord> IndexVec<I, T> {\n+impl<I: Idx, T: Ord> IndexSlice<I, T> {\n     #[inline]\n     pub fn binary_search(&self, value: &T) -> Result<I, I> {\n         match self.raw.binary_search(value) {"}, {"sha": "9e2bdb7f510b3a22ea6afdac10957b8146890740", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n use rustc_data_structures::intern::Interned;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::PlaceholderRegion;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -723,7 +723,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     fn collect_error_for_expanding_node(\n         &self,\n         graph: &RegionGraph<'tcx>,\n-        dup_vec: &mut IndexVec<RegionVid, Option<RegionVid>>,\n+        dup_vec: &mut IndexSlice<RegionVid, Option<RegionVid>>,\n         node_idx: RegionVid,\n         errors: &mut Vec<RegionResolutionError<'tcx>>,\n     ) {\n@@ -846,7 +846,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         graph: &RegionGraph<'tcx>,\n         orig_node_idx: RegionVid,\n         dir: Direction,\n-        mut dup_vec: Option<&mut IndexVec<RegionVid, Option<RegionVid>>>,\n+        mut dup_vec: Option<&mut IndexSlice<RegionVid, Option<RegionVid>>>,\n     ) -> (Vec<RegionAndOrigin<'tcx>>, FxHashSet<RegionVid>, bool) {\n         struct WalkState<'tcx> {\n             set: FxHashSet<RegionVid>,"}, {"sha": "3fb468379358aefe4b772dc87229489ae6d4d573", "filename": "compiler/rustc_middle/src/mir/basic_blocks.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fbasic_blocks.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::graph;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::OnceCell;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use smallvec::SmallVec;\n \n@@ -124,10 +124,10 @@ impl<'tcx> BasicBlocks<'tcx> {\n }\n \n impl<'tcx> std::ops::Deref for BasicBlocks<'tcx> {\n-    type Target = IndexVec<BasicBlock, BasicBlockData<'tcx>>;\n+    type Target = IndexSlice<BasicBlock, BasicBlockData<'tcx>>;\n \n     #[inline]\n-    fn deref(&self) -> &IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n+    fn deref(&self) -> &IndexSlice<BasicBlock, BasicBlockData<'tcx>> {\n         &self.basic_blocks\n     }\n }"}, {"sha": "44fd8478be9b5a0685c264262eeed67a950cb728", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -27,7 +27,7 @@ use polonius_engine::Atom;\n pub use rustc_ast::Mutability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n@@ -70,12 +70,19 @@ pub use self::pretty::{\n };\n \n /// Types for locals\n-pub type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n+pub type LocalDecls<'tcx> = IndexSlice<Local, LocalDecl<'tcx>>;\n \n pub trait HasLocalDecls<'tcx> {\n     fn local_decls(&self) -> &LocalDecls<'tcx>;\n }\n \n+impl<'tcx> HasLocalDecls<'tcx> for IndexVec<Local, LocalDecl<'tcx>> {\n+    #[inline]\n+    fn local_decls(&self) -> &LocalDecls<'tcx> {\n+        self\n+    }\n+}\n+\n impl<'tcx> HasLocalDecls<'tcx> for LocalDecls<'tcx> {\n     #[inline]\n     fn local_decls(&self) -> &LocalDecls<'tcx> {\n@@ -250,7 +257,7 @@ pub struct Body<'tcx> {\n     /// The first local is the return value pointer, followed by `arg_count`\n     /// locals for the function arguments, followed by any user-declared\n     /// variables and temporaries.\n-    pub local_decls: LocalDecls<'tcx>,\n+    pub local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n \n     /// User type annotations.\n     pub user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,\n@@ -311,7 +318,7 @@ impl<'tcx> Body<'tcx> {\n         source: MirSource<'tcx>,\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n         source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n-        local_decls: LocalDecls<'tcx>,\n+        local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n         user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,\n         arg_count: usize,\n         var_debug_info: Vec<VarDebugInfo<'tcx>>,\n@@ -1779,7 +1786,7 @@ impl SourceScope {\n     /// from the function that was inlined instead of the function call site.\n     pub fn lint_root(\n         self,\n-        source_scopes: &IndexVec<SourceScope, SourceScopeData<'_>>,\n+        source_scopes: &IndexSlice<SourceScope, SourceScopeData<'_>>,\n     ) -> Option<HirId> {\n         let mut data = &source_scopes[self];\n         // FIXME(oli-obk): we should be able to just walk the `inlined_parent_scope`, but it\n@@ -1799,7 +1806,7 @@ impl SourceScope {\n     #[inline]\n     pub fn inlined_instance<'tcx>(\n         self,\n-        source_scopes: &IndexVec<SourceScope, SourceScopeData<'tcx>>,\n+        source_scopes: &IndexSlice<SourceScope, SourceScopeData<'tcx>>,\n     ) -> Option<ty::Instance<'tcx>> {\n         let scope_data = &source_scopes[self];\n         if let Some((inlined_instance, _)) = scope_data.inlined {"}, {"sha": "0092401470f5680c896f864c6672ba6c7a3f9de2", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> PlaceTy<'tcx> {\n }\n \n impl<'tcx> Place<'tcx> {\n-    pub fn ty_from<D>(\n+    pub fn ty_from<D: ?Sized>(\n         local: Local,\n         projection: &[PlaceElem<'tcx>],\n         local_decls: &D,\n@@ -132,7 +132,7 @@ impl<'tcx> Place<'tcx> {\n             })\n     }\n \n-    pub fn ty<D>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> PlaceTy<'tcx>\n+    pub fn ty<D: ?Sized>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> PlaceTy<'tcx>\n     where\n         D: HasLocalDecls<'tcx>,\n     {\n@@ -141,7 +141,7 @@ impl<'tcx> Place<'tcx> {\n }\n \n impl<'tcx> PlaceRef<'tcx> {\n-    pub fn ty<D>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> PlaceTy<'tcx>\n+    pub fn ty<D: ?Sized>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> PlaceTy<'tcx>\n     where\n         D: HasLocalDecls<'tcx>,\n     {\n@@ -155,7 +155,7 @@ pub enum RvalueInitializationState {\n }\n \n impl<'tcx> Rvalue<'tcx> {\n-    pub fn ty<D>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> Ty<'tcx>\n+    pub fn ty<D: ?Sized>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> Ty<'tcx>\n     where\n         D: HasLocalDecls<'tcx>,\n     {\n@@ -217,7 +217,7 @@ impl<'tcx> Rvalue<'tcx> {\n }\n \n impl<'tcx> Operand<'tcx> {\n-    pub fn ty<D>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> Ty<'tcx>\n+    pub fn ty<D: ?Sized>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> Ty<'tcx>\n     where\n         D: HasLocalDecls<'tcx>,\n     {"}, {"sha": "62cdf794b1e91c1bcbc3142018442a73b24244cc", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -101,15 +101,15 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n ///\n /// A Postorder traversal of this graph is `D B C A` or `D C B A`\n pub struct Postorder<'a, 'tcx> {\n-    basic_blocks: &'a IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+    basic_blocks: &'a IndexSlice<BasicBlock, BasicBlockData<'tcx>>,\n     visited: BitSet<BasicBlock>,\n     visit_stack: Vec<(BasicBlock, Successors<'a>)>,\n     root_is_start_block: bool,\n }\n \n impl<'a, 'tcx> Postorder<'a, 'tcx> {\n     pub fn new(\n-        basic_blocks: &'a IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+        basic_blocks: &'a IndexSlice<BasicBlock, BasicBlockData<'tcx>>,\n         root: BasicBlock,\n     ) -> Postorder<'a, 'tcx> {\n         let mut po = Postorder {"}, {"sha": "3a03c0901d798b22801e0c09d89f1b9ed5b8e0d9", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::DataTypeKind;\n use rustc_span::symbol::sym;\n@@ -168,7 +168,7 @@ impl<'tcx> AdtDef<'tcx> {\n     }\n \n     #[inline]\n-    pub fn variants(self) -> &'tcx IndexVec<VariantIdx, VariantDef> {\n+    pub fn variants(self) -> &'tcx IndexSlice<VariantIdx, VariantDef> {\n         &self.0.0.variants\n     }\n "}, {"sha": "d385153ba94c52c9974d4f02706eaddc5205e96a", "filename": "compiler/rustc_mir_build/src/build/custom/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -21,7 +21,7 @@ use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_hir::HirId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::{\n     mir::*,\n     thir::*,\n@@ -37,7 +37,7 @@ pub(super) fn build_custom_mir<'tcx>(\n     hir_id: HirId,\n     thir: &Thir<'tcx>,\n     expr: ExprId,\n-    params: &IndexVec<ParamId, Param<'tcx>>,\n+    params: &IndexSlice<ParamId, Param<'tcx>>,\n     return_ty: Ty<'tcx>,\n     return_ty_span: Span,\n     span: Span,\n@@ -49,7 +49,7 @@ pub(super) fn build_custom_mir<'tcx>(\n         phase: MirPhase::Built,\n         source_scopes: IndexVec::new(),\n         generator: None,\n-        local_decls: LocalDecls::new(),\n+        local_decls: IndexVec::new(),\n         user_type_annotations: IndexVec::new(),\n         arg_count: params.len(),\n         spread_arg: None,"}, {"sha": "12b2f5d8077745540962c6002efbb25b545726c0", "filename": "compiler/rustc_mir_build/src/build/custom/parse.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,4 +1,4 @@\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::{mir::*, thir::*, ty::Ty};\n use rustc_span::Span;\n \n@@ -81,7 +81,7 @@ impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n         }\n     }\n \n-    pub fn parse_args(&mut self, params: &IndexVec<ParamId, Param<'tcx>>) -> PResult<()> {\n+    pub fn parse_args(&mut self, params: &IndexSlice<ParamId, Param<'tcx>>) -> PResult<()> {\n         for param in params.iter() {\n             let (var, span) = {\n                 let pat = param.pat.as_ref().unwrap();"}, {"sha": "ac645cce5c6aac36c7f96f21a52b8b22735928d8", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -11,7 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::{GeneratorKind, Node};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::middle::region;\n@@ -821,7 +821,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn args_and_body(\n         &mut self,\n         mut block: BasicBlock,\n-        arguments: &IndexVec<ParamId, Param<'tcx>>,\n+        arguments: &IndexSlice<ParamId, Param<'tcx>>,\n         argument_scope: region::Scope,\n         expr: &Expr<'tcx>,\n     ) -> BlockAnd<()> {"}, {"sha": "25af221bf369b9b7715305a08532eea79856d37d", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -86,7 +86,7 @@ use std::mem;\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::HirId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::thir::{Expr, LintLevel};\n@@ -360,7 +360,7 @@ impl DropTree {\n     fn link_blocks<'tcx>(\n         &self,\n         cfg: &mut CFG<'tcx>,\n-        blocks: &IndexVec<DropIdx, Option<BasicBlock>>,\n+        blocks: &IndexSlice<DropIdx, Option<BasicBlock>>,\n     ) {\n         for (drop_idx, drop_data) in self.drops.iter_enumerated().rev() {\n             let Some(block) = blocks[drop_idx] else { continue };"}, {"sha": "257a42cddc8d2081a472701abb6da222654cf5ef", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,6 +1,6 @@\n use crate::move_paths::builder::MoveDat;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -64,7 +64,7 @@ impl<'tcx> MovePath<'tcx> {\n     /// Returns an iterator over the parents of `self`.\n     pub fn parents<'a>(\n         &self,\n-        move_paths: &'a IndexVec<MovePathIndex, MovePath<'tcx>>,\n+        move_paths: &'a IndexSlice<MovePathIndex, MovePath<'tcx>>,\n     ) -> impl 'a + Iterator<Item = (MovePathIndex, &'a MovePath<'tcx>)> {\n         let first = self.parent.map(|mpi| (mpi, &move_paths[mpi]));\n         MovePathLinearIter {\n@@ -78,7 +78,7 @@ impl<'tcx> MovePath<'tcx> {\n     /// Returns an iterator over the immediate children of `self`.\n     pub fn children<'a>(\n         &self,\n-        move_paths: &'a IndexVec<MovePathIndex, MovePath<'tcx>>,\n+        move_paths: &'a IndexSlice<MovePathIndex, MovePath<'tcx>>,\n     ) -> impl 'a + Iterator<Item = (MovePathIndex, &'a MovePath<'tcx>)> {\n         let first = self.first_child.map(|mpi| (mpi, &move_paths[mpi]));\n         MovePathLinearIter {\n@@ -95,7 +95,7 @@ impl<'tcx> MovePath<'tcx> {\n     /// `f` will **not** be called on `self`.\n     pub fn find_descendant(\n         &self,\n-        move_paths: &IndexVec<MovePathIndex, MovePath<'_>>,\n+        move_paths: &IndexSlice<MovePathIndex, MovePath<'_>>,\n         f: impl Fn(MovePathIndex) -> bool,\n     ) -> Option<MovePathIndex> {\n         let mut todo = if let Some(child) = self.first_child {"}, {"sha": "33a15a8d224f8d0f3561471f13081604061f7521", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -36,7 +36,7 @@ use std::fmt::{Debug, Formatter};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n@@ -1028,8 +1028,8 @@ where\n fn debug_with_context_rec<V: Debug + Eq>(\n     place: PlaceIndex,\n     place_str: &str,\n-    new: &IndexVec<ValueIndex, V>,\n-    old: Option<&IndexVec<ValueIndex, V>>,\n+    new: &IndexSlice<ValueIndex, V>,\n+    old: Option<&IndexSlice<ValueIndex, V>>,\n     map: &Map,\n     f: &mut Formatter<'_>,\n ) -> std::fmt::Result {\n@@ -1069,8 +1069,8 @@ fn debug_with_context_rec<V: Debug + Eq>(\n }\n \n fn debug_with_context<V: Debug + Eq>(\n-    new: &IndexVec<ValueIndex, V>,\n-    old: Option<&IndexVec<ValueIndex, V>>,\n+    new: &IndexSlice<ValueIndex, V>,\n+    old: Option<&IndexSlice<ValueIndex, V>>,\n     map: &Map,\n     f: &mut Formatter<'_>,\n ) -> std::fmt::Result {"}, {"sha": "5815887e5bbb6bd40267d2c1056d45d2e593313e", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -128,7 +128,7 @@ fn split_block(\n \n fn insert_alignment_check<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    local_decls: &mut LocalDecls<'tcx>,\n+    local_decls: &mut IndexVec<Local, LocalDecl<'tcx>>,\n     block_data: &mut BasicBlockData<'tcx>,\n     pointer: Place<'tcx>,\n     pointee_ty: Ty<'tcx>,"}, {"sha": "ac55948e61b571e899209b8af8bd480330f8dd1a", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -7,7 +7,7 @@ use rustc_const_eval::const_eval::CheckAlignment;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::DefKind;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n@@ -127,7 +127,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n \n         let dummy_body = &Body::new(\n             body.source,\n-            (*body.basic_blocks).clone(),\n+            (*body.basic_blocks).to_owned(),\n             body.source_scopes.clone(),\n             body.local_decls.clone(),\n             Default::default(),\n@@ -319,7 +319,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n-    local_decls: &'mir IndexVec<Local, LocalDecl<'tcx>>,\n+    local_decls: &'mir IndexSlice<Local, LocalDecl<'tcx>>,\n }\n \n impl<'tcx> LayoutOfHelpers<'tcx> for ConstPropagator<'_, 'tcx> {"}, {"sha": "d7696a57000615db58e0721f1f0106435c89d6a1", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -9,7 +9,7 @@ use rustc_const_eval::interpret::{\n };\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n@@ -103,7 +103,7 @@ impl<'tcx> MirLint<'tcx> for ConstProp {\n \n         let dummy_body = &Body::new(\n             body.source,\n-            (*body.basic_blocks).clone(),\n+            (*body.basic_blocks).to_owned(),\n             body.source_scopes.clone(),\n             body.local_decls.clone(),\n             Default::default(),\n@@ -130,8 +130,8 @@ struct ConstPropagator<'mir, 'tcx> {\n     ecx: InterpCx<'mir, 'tcx, ConstPropMachine<'mir, 'tcx>>,\n     tcx: TyCtxt<'tcx>,\n     param_env: ParamEnv<'tcx>,\n-    source_scopes: &'mir IndexVec<SourceScope, SourceScopeData<'tcx>>,\n-    local_decls: &'mir IndexVec<Local, LocalDecl<'tcx>>,\n+    source_scopes: &'mir IndexSlice<SourceScope, SourceScopeData<'tcx>>,\n+    local_decls: &'mir IndexSlice<Local, LocalDecl<'tcx>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it.\n     source_info: Option<SourceInfo>,"}, {"sha": "c155048c98b46cc517cebf131f25b0390748757a", "filename": "compiler/rustc_mir_transform/src/copy_prop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcopy_prop.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,5 +1,5 @@\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n@@ -102,7 +102,7 @@ struct Replacer<'a, 'tcx> {\n     fully_moved: BitSet<Local>,\n     storage_to_remove: BitSet<Local>,\n     borrowed_locals: BitSet<Local>,\n-    copy_classes: &'a IndexVec<Local, Local>,\n+    copy_classes: &'a IndexSlice<Local, Local>,\n }\n \n impl<'tcx> MutVisitor<'tcx> for Replacer<'_, 'tcx> {"}, {"sha": "689d6c71361dd99da60b5f5acb6dd75cda50eb18", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::graph::dominators::{self, Dominators};\n use rustc_data_structures::graph::{self, GraphSuccessors, WithNumNodes, WithStartNode};\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::{self, BasicBlock, BasicBlockData, Terminator, TerminatorKind};\n \n@@ -176,10 +176,10 @@ impl CoverageGraph {\n \n     fn add_basic_coverage_block(\n         bcbs: &mut IndexVec<BasicCoverageBlock, BasicCoverageBlockData>,\n-        bb_to_bcb: &mut IndexVec<BasicBlock, Option<BasicCoverageBlock>>,\n+        bb_to_bcb: &mut IndexSlice<BasicBlock, Option<BasicCoverageBlock>>,\n         basic_blocks: Vec<BasicBlock>,\n     ) {\n-        let bcb = BasicCoverageBlock::from_usize(bcbs.len());\n+        let bcb = bcbs.next_index();\n         for &bb in basic_blocks.iter() {\n             bb_to_bcb[bb] = Some(bcb);\n         }"}, {"sha": "101fae2f08c5cae6c94798289028fb8907fb779c", "filename": "compiler/rustc_mir_transform/src/lower_slice_len.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_slice_len.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -3,7 +3,7 @@\n \n use crate::MirPass;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::IndexSlice;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -42,7 +42,7 @@ struct SliceLenPatchInformation<'tcx> {\n fn lower_slice_len_call<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     block: &mut BasicBlockData<'tcx>,\n-    local_decls: &IndexVec<Local, LocalDecl<'tcx>>,\n+    local_decls: &IndexSlice<Local, LocalDecl<'tcx>>,\n     slice_len_fn_item_def_id: DefId,\n ) {\n     let mut patch_found: Option<SliceLenPatchInformation<'_>> = None;"}, {"sha": "c79e1cf08050964983e4ab4ab86c31e1488b992b", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -29,7 +29,7 @@\n \n use crate::MirPass;\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_index::vec::{Idx, IndexVec};\n+use rustc_index::vec::{Idx, IndexSlice, IndexVec};\n use rustc_middle::mir::coverage::*;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n@@ -67,7 +67,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n }\n \n pub struct CfgSimplifier<'a, 'tcx> {\n-    basic_blocks: &'a mut IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n+    basic_blocks: &'a mut IndexSlice<BasicBlock, BasicBlockData<'tcx>>,\n     pred_count: IndexVec<BasicBlock, u32>,\n }\n \n@@ -369,8 +369,8 @@ pub fn remove_dead_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n /// instances in a single body, so the strategy described above is applied to\n /// coverage counters from each instance individually.\n fn save_unreachable_coverage(\n-    basic_blocks: &mut IndexVec<BasicBlock, BasicBlockData<'_>>,\n-    source_scopes: &IndexVec<SourceScope, SourceScopeData<'_>>,\n+    basic_blocks: &mut IndexSlice<BasicBlock, BasicBlockData<'_>>,\n+    source_scopes: &IndexSlice<SourceScope, SourceScopeData<'_>>,\n     first_dead_block: usize,\n ) {\n     // Identify instances that still have some live coverage counters left.\n@@ -489,7 +489,7 @@ fn make_local_map<V>(\n     local_decls: &mut IndexVec<Local, V>,\n     used_locals: &UsedLocals,\n ) -> IndexVec<Local, Option<Local>> {\n-    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, &*local_decls);\n+    let mut map: IndexVec<Local, Option<Local>> = IndexVec::from_elem(None, local_decls);\n     let mut used = Local::new(0);\n \n     for alive_index in local_decls.indices() {"}, {"sha": "be026402dd5787d48487a6835644e2b330fbafb2", "filename": "compiler/rustc_mir_transform/src/ssa.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2ee7592d6b7c0daa62b7870ade85e0cc0acca05/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fssa.rs?ref=a2ee7592d6b7c0daa62b7870ade85e0cc0acca05", "patch": "@@ -1,7 +1,7 @@\n use either::Either;\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::vec::{IndexSlice, IndexVec};\n use rustc_middle::middle::resolve_bound_vars::Set1;\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n@@ -135,7 +135,7 @@ impl SsaLocals {\n     ///   _d => _a // transitively through _c\n     ///\n     /// Exception: we do not see through the return place, as it cannot be substituted.\n-    pub fn copy_classes(&self) -> &IndexVec<Local, Local> {\n+    pub fn copy_classes(&self) -> &IndexSlice<Local, Local> {\n         &self.copy_classes\n     }\n "}]}