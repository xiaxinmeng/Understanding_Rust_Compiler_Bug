{"sha": "e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjEyM2NiYTI1MGIwMmUyY2Q4ZmFkMGMwYmQ2YmI1MTllMDUxZDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-07-17T16:24:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-28T14:58:19Z"}, "message": "Update the libc submodule\n\nBrings in a few fixes for wasm/asmjs", "tree": {"sha": "4b78884b6d17a0fa242a4432057708797193b22f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b78884b6d17a0fa242a4432057708797193b22f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "html_url": "https://github.com/rust-lang/rust/commit/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8f2586ebd842dec49d3d7f50e49a985ab31493", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8f2586ebd842dec49d3d7f50e49a985ab31493", "html_url": "https://github.com/rust-lang/rust/commit/eb8f2586ebd842dec49d3d7f50e49a985ab31493"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "d64716407e3ee430fce7a008cc7d19a3072dca6c", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "patch": "@@ -1 +1 @@\n-Subproject commit 2a5b50b7f7f539a0fd201331d6c1e0534aa332f5\n+Subproject commit d64716407e3ee430fce7a008cc7d19a3072dca6c"}, {"sha": "fe0427d4e5f9c0c86325450db4dc344e04e059c1", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "patch": "@@ -14,8 +14,7 @@\n \n use fmt;\n \n-#[cfg(any(target_os = \"emscripten\",\n-          all(target_os = \"linux\", any(target_arch = \"aarch64\",\n+#[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n                                        target_arch = \"powerpc\",\n                                        target_arch = \"powerpc64\",\n@@ -24,8 +23,7 @@ use fmt;\n                                          target_arch = \"arm\")),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n-#[cfg(not(any(target_os = \"emscripten\",\n-              all(target_os = \"linux\", any(target_arch = \"aarch64\",\n+#[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                            target_arch = \"arm\",\n                                            target_arch = \"powerpc\",\n                                            target_arch = \"powerpc64\","}, {"sha": "f50b093acc8482c068bdcd768463c1a61cfe83d2", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "patch": "@@ -71,13 +71,21 @@ impl FileDesc {\n         #[cfg(target_os = \"android\")]\n         use super::android::cvt_pread64;\n \n-        #[cfg(not(target_os = \"android\"))]\n+        #[cfg(target_os = \"emscripten\")]\n         unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n-            #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n             use libc::pread64;\n-            #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\")))]\n+            cvt(pread64(fd, buf, count, offset as i32))\n+        }\n+\n+        #[cfg(not(any(target_os = \"android\", target_os = \"emscripten\")))]\n+        unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)\n+            -> io::Result<isize>\n+        {\n+            #[cfg(target_os = \"linux\")]\n+            use libc::pread64;\n+            #[cfg(not(target_os = \"linux\"))]\n             use libc::pread as pread64;\n             cvt(pread64(fd, buf, count, offset))\n         }\n@@ -104,13 +112,21 @@ impl FileDesc {\n         #[cfg(target_os = \"android\")]\n         use super::android::cvt_pwrite64;\n \n-        #[cfg(not(target_os = \"android\"))]\n+        #[cfg(target_os = \"emscripten\")]\n+        unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)\n+            -> io::Result<isize>\n+        {\n+            use libc::pwrite64;\n+            cvt(pwrite64(fd, buf, count, offset as i32))\n+        }\n+\n+        #[cfg(not(any(target_os = \"android\", target_os = \"emscripten\")))]\n         unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n-            #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n+            #[cfg(target_os = \"linux\")]\n             use libc::pwrite64;\n-            #[cfg(not(any(target_os = \"linux\", target_os = \"emscripten\")))]\n+            #[cfg(not(target_os = \"linux\"))]\n             use libc::pwrite as pwrite64;\n             cvt(pwrite64(fd, buf, count, offset))\n         }"}, {"sha": "f94af4913324ff7e7b68c26230f712d640f799fa", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "patch": "@@ -514,6 +514,8 @@ impl File {\n             SeekFrom::End(off) => (libc::SEEK_END, off),\n             SeekFrom::Current(off) => (libc::SEEK_CUR, off),\n         };\n+        #[cfg(target_os = \"emscripten\")]\n+        let pos = pos as i32;\n         let n = cvt(unsafe { lseek64(self.0.raw(), pos, whence) })?;\n         Ok(n as u64)\n     }"}, {"sha": "ae24021fb6c3a55ffd164def3156b96bc9721bd0", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b123cba250b02e2cd8fad0c0bd6bb519e051d2/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=e5b123cba250b02e2cd8fad0c0bd6bb519e051d2", "patch": "@@ -10,7 +10,6 @@\n \n use io::{self, Error, ErrorKind};\n use libc::{self, c_int, gid_t, pid_t, uid_t};\n-use mem;\n use ptr;\n \n use sys::cvt;\n@@ -184,7 +183,9 @@ impl Command {\n         }\n \n         // NaCl has no signal support.\n-        if cfg!(not(any(target_os = \"nacl\", target_os = \"emscripten\"))) {\n+        #[cfg(not(any(target_os = \"nacl\", target_os = \"emscripten\")))]\n+        {\n+            use mem;\n             // Reset signal handling so the child process starts in a\n             // standardized state. libstd ignores SIGPIPE, and signal-handling\n             // libraries often set a mask. Child processes inherit ignored"}]}