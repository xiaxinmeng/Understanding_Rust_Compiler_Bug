{"sha": "7063c36c912990bd67327a41445706a451fe5b48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNjNjMzZjOTEyOTkwYmQ2NzMyN2E0MTQ0NTcwNmE0NTFmZTViNDg=", "commit": {"author": {"name": "Josias", "email": "me@josias.dev", "date": "2020-12-04T14:39:09Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-07T22:38:56Z"}, "message": "Add eprint! to print_with_newline lint", "tree": {"sha": "959746e0bf6a62f6b09ebcdddbf835ff39c11536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/959746e0bf6a62f6b09ebcdddbf835ff39c11536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7063c36c912990bd67327a41445706a451fe5b48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7063c36c912990bd67327a41445706a451fe5b48", "html_url": "https://github.com/rust-lang/rust/commit/7063c36c912990bd67327a41445706a451fe5b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7063c36c912990bd67327a41445706a451fe5b48/comments", "author": {"login": "justjosias", "id": 63474705, "node_id": "MDQ6VXNlcjYzNDc0NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/63474705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/justjosias", "html_url": "https://github.com/justjosias", "followers_url": "https://api.github.com/users/justjosias/followers", "following_url": "https://api.github.com/users/justjosias/following{/other_user}", "gists_url": "https://api.github.com/users/justjosias/gists{/gist_id}", "starred_url": "https://api.github.com/users/justjosias/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/justjosias/subscriptions", "organizations_url": "https://api.github.com/users/justjosias/orgs", "repos_url": "https://api.github.com/users/justjosias/repos", "events_url": "https://api.github.com/users/justjosias/events{/privacy}", "received_events_url": "https://api.github.com/users/justjosias/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b04bfbd09b63d978f1bb7f4c9222cb2d37607309", "url": "https://api.github.com/repos/rust-lang/rust/commits/b04bfbd09b63d978f1bb7f4c9222cb2d37607309", "html_url": "https://github.com/rust-lang/rust/commit/b04bfbd09b63d978f1bb7f4c9222cb2d37607309"}], "stats": {"total": 190, "additions": 190, "deletions": 0}, "files": [{"sha": "0fd56f78572492f4e5c9e93c3712f86d3ff82011", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7063c36c912990bd67327a41445706a451fe5b48/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7063c36c912990bd67327a41445706a451fe5b48/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=7063c36c912990bd67327a41445706a451fe5b48", "patch": "@@ -283,6 +283,26 @@ impl EarlyLintPass for Write {\n             span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprintln!`\");\n         } else if mac.path == sym!(eprint) {\n             span_lint(cx, PRINT_STDERR, mac.span(), \"use of `eprint!`\");\n+            if let (Some(fmt_str), _) = self.check_tts(cx, mac.args.inner_tokens(), false) {\n+                if check_newlines(&fmt_str) {\n+                    span_lint_and_then(\n+                        cx,\n+                        PRINT_WITH_NEWLINE,\n+                        mac.span(),\n+                        \"using `eprint!()` with a format string that ends in a single newline\",\n+                        |err| {\n+                            err.multipart_suggestion(\n+                                \"use `eprintln!` instead\",\n+                                vec![\n+                                    (mac.path.span, String::from(\"eprintln\")),\n+                                    (newline_span(&fmt_str), String::new()),\n+                                ],\n+                                Applicability::MachineApplicable,\n+                            );\n+                        },\n+                    );\n+                }\n+            }\n         } else if mac.path == sym!(print) {\n             if !is_build_script(cx) {\n                 span_lint(cx, PRINT_STDOUT, mac.span(), \"use of `print!`\");"}, {"sha": "8df32649ad948b3d85aa3fae9a2bc468def694eb", "filename": "tests/ui/eprint_with_newline.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7063c36c912990bd67327a41445706a451fe5b48/tests%2Fui%2Feprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7063c36c912990bd67327a41445706a451fe5b48/tests%2Fui%2Feprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feprint_with_newline.rs?ref=7063c36c912990bd67327a41445706a451fe5b48", "patch": "@@ -0,0 +1,49 @@\n+#![allow(clippy::print_literal)]\n+#![warn(clippy::print_with_newline)]\n+\n+fn main() {\n+    eprint!(\"Hello\\n\");\n+    eprint!(\"Hello {}\\n\", \"world\");\n+    eprint!(\"Hello {} {}\\n\", \"world\", \"#2\");\n+    eprint!(\"{}\\n\", 1265);\n+    eprint!(\"\\n\");\n+\n+    // these are all fine\n+    eprint!(\"\");\n+    eprint!(\"Hello\");\n+    eprintln!(\"Hello\");\n+    eprintln!(\"Hello\\n\");\n+    eprintln!(\"Hello {}\\n\", \"world\");\n+    eprint!(\"Issue\\n{}\", 1265);\n+    eprint!(\"{}\", 1265);\n+    eprint!(\"\\n{}\", 1275);\n+    eprint!(\"\\n\\n\");\n+    eprint!(\"like eof\\n\\n\");\n+    eprint!(\"Hello {} {}\\n\\n\", \"world\", \"#2\");\n+    eprintln!(\"\\ndon't\\nwarn\\nfor\\nmultiple\\nnewlines\\n\"); // #3126\n+    eprintln!(\"\\nbla\\n\\n\"); // #3126\n+\n+    // Escaping\n+    eprint!(\"\\\\n\"); // #3514\n+    eprint!(\"\\\\\\n\"); // should fail\n+    eprint!(\"\\\\\\\\n\");\n+\n+    // Raw strings\n+    eprint!(r\"\\n\"); // #3778\n+\n+    // Literal newlines should also fail\n+    eprint!(\n+        \"\n+\"\n+    );\n+    eprint!(\n+        r\"\n+\"\n+    );\n+\n+    // Don't warn on CRLF (#4208)\n+    eprint!(\"\\r\\n\");\n+    eprint!(\"foo\\r\\n\");\n+    eprint!(\"\\\\r\\n\"); //~ ERROR\n+    eprint!(\"foo\\rbar\\n\") // ~ ERROR\n+}"}, {"sha": "31811d1d92a04285321bf4d5c0c6e3dead552d0a", "filename": "tests/ui/eprint_with_newline.stderr", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/7063c36c912990bd67327a41445706a451fe5b48/tests%2Fui%2Feprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7063c36c912990bd67327a41445706a451fe5b48/tests%2Fui%2Feprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feprint_with_newline.stderr?ref=7063c36c912990bd67327a41445706a451fe5b48", "patch": "@@ -0,0 +1,121 @@\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:5:5\n+   |\n+LL |     eprint!(\"Hello/n\");\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::print-with-newline` implied by `-D warnings`\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"Hello\");\n+   |     ^^^^^^^^       --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:6:5\n+   |\n+LL |     eprint!(\"Hello {}/n\", \"world\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"Hello {}\", \"world\");\n+   |     ^^^^^^^^          --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:7:5\n+   |\n+LL |     eprint!(\"Hello {} {}/n\", \"world\", \"#2\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"Hello {} {}\", \"world\", \"#2\");\n+   |     ^^^^^^^^             --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:8:5\n+   |\n+LL |     eprint!(\"{}/n\", 1265);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"{}\", 1265);\n+   |     ^^^^^^^^    --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:9:5\n+   |\n+LL |     eprint!(\"/n\");\n+   |     ^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!();\n+   |     ^^^^^^^^ --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:28:5\n+   |\n+LL |     eprint!(\"//n\"); // should fail\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"/\"); // should fail\n+   |     ^^^^^^^^    --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:35:5\n+   |\n+LL | /     eprint!(\n+LL | |         \"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\n+LL |         \"\"\n+   |\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:39:5\n+   |\n+LL | /     eprint!(\n+LL | |         r\"\n+LL | | \"\n+LL | |     );\n+   | |_____^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\n+LL |         r\"\"\n+   |\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:47:5\n+   |\n+LL |     eprint!(\"/r/n\"); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"/r\"); //~ ERROR\n+   |     ^^^^^^^^     --\n+\n+error: using `eprint!()` with a format string that ends in a single newline\n+  --> $DIR/eprint_with_newline.rs:48:5\n+   |\n+LL |     eprint!(\"foo/rbar/n\") // ~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `eprintln!` instead\n+   |\n+LL |     eprintln!(\"foo/rbar\") // ~ ERROR\n+   |     ^^^^^^^^          --\n+\n+error: aborting due to 10 previous errors\n+"}]}