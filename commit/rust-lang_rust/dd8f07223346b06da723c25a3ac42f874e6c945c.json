{"sha": "dd8f07223346b06da723c25a3ac42f874e6c945c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOGYwNzIyMzM0NmIwNmRhNzIzYzI1YTNhYzQyZjg3NGU2Yzk0NWM=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-01-02T08:56:12Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-01-02T08:56:12Z"}, "message": "Use drop instead of the toilet closure `|_| ()`", "tree": {"sha": "677912d1758b3abbd9cfa00273be1251028cc61f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/677912d1758b3abbd9cfa00273be1251028cc61f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd8f07223346b06da723c25a3ac42f874e6c945c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8f07223346b06da723c25a3ac42f874e6c945c", "html_url": "https://github.com/rust-lang/rust/commit/dd8f07223346b06da723c25a3ac42f874e6c945c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd8f07223346b06da723c25a3ac42f874e6c945c/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "509510152865d5a9a47723ad56047904986c9dd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/509510152865d5a9a47723ad56047904986c9dd9", "html_url": "https://github.com/rust-lang/rust/commit/509510152865d5a9a47723ad56047904986c9dd9"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "34384cfcba96b81a95036700e080e81c5c1626cd", "filename": "src/liballoc/tests/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Fliballoc%2Ftests%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Fliballoc%2Ftests%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Farc.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -142,7 +142,7 @@ fn shared_from_iter_trustedlen_normal() {\n \n     // Try a ZST to make sure it is handled well.\n     {\n-        let iter = (0..SHARED_ITER_MAX).map(|_| ());\n+        let iter = (0..SHARED_ITER_MAX).map(drop);\n         let vec = iter.clone().collect::<Vec<_>>();\n         let rc = iter.collect::<Rc<[_]>>();\n         assert_eq!(&*vec, &*rc);"}, {"sha": "884856cd1b4d224aa2884e5ca8649a4feef0ae5c", "filename": "src/liballoc/tests/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Fliballoc%2Ftests%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Fliballoc%2Ftests%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Frc.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -138,7 +138,7 @@ fn shared_from_iter_trustedlen_normal() {\n \n     // Try a ZST to make sure it is handled well.\n     {\n-        let iter = (0..SHARED_ITER_MAX).map(|_| ());\n+        let iter = (0..SHARED_ITER_MAX).map(drop);\n         let vec = iter.clone().collect::<Vec<_>>();\n         let rc = iter.collect::<Rc<[_]>>();\n         assert_eq!(&*vec, &*rc);"}, {"sha": "fc8272a68daed93fd9ce4ce5cbf649d7e2d29025", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -866,7 +866,7 @@ impl<'a> Parser<'a> {\n         let appl = Applicability::MachineApplicable;\n         if self.token.span == DUMMY_SP || self.prev_span == DUMMY_SP {\n             // Likely inside a macro, can't provide meaninful suggestions.\n-            return self.expect(&token::Semi).map(|_| ());\n+            return self.expect(&token::Semi).map(drop);\n         } else if !sm.is_multiline(self.prev_span.until(self.token.span)) {\n             // The current token is in the same line as the prior token, not recoverable.\n         } else if self.look_ahead(1, |t| {\n@@ -905,7 +905,7 @@ impl<'a> Parser<'a> {\n                 .emit();\n             return Ok(());\n         }\n-        self.expect(&token::Semi).map(|_| ()) // Error unconditionally\n+        self.expect(&token::Semi).map(drop) // Error unconditionally\n     }\n \n     pub(super) fn parse_semi_or_incorrect_foreign_fn_body("}, {"sha": "9e6849ba5bc39d36035b9f67ff784cdad00c6442", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -232,7 +232,7 @@ impl<R: Seek> BufReader<R> {\n                 }\n             }\n         }\n-        self.seek(SeekFrom::Current(offset)).map(|_| ())\n+        self.seek(SeekFrom::Current(offset)).map(drop)\n     }\n }\n "}, {"sha": "8fc2599f0d7625fc7c6e13f561b02658381f57c1", "filename": "src/libstd/sys/unix/android.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fandroid.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -93,12 +93,12 @@ pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n \n     unsafe {\n         match ftruncate64.get() {\n-            Some(f) => cvt_r(|| f(fd, size as i64)).map(|_| ()),\n+            Some(f) => cvt_r(|| f(fd, size as i64)).map(drop),\n             None => {\n                 if size > i32::max_value() as u64 {\n                     Err(io::Error::new(io::ErrorKind::InvalidInput, \"cannot truncate >2GB\"))\n                 } else {\n-                    cvt_r(|| ftruncate(fd, size as i32)).map(|_| ())\n+                    cvt_r(|| ftruncate(fd, size as i32)).map(drop)\n                 }\n             }\n         }\n@@ -107,7 +107,7 @@ pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n \n #[cfg(target_pointer_width = \"64\")]\n pub fn ftruncate64(fd: c_int, size: u64) -> io::Result<()> {\n-    unsafe { cvt_r(|| ftruncate(fd, size as i64)).map(|_| ()) }\n+    unsafe { cvt_r(|| ftruncate(fd, size as i64)).map(drop) }\n }\n \n #[cfg(target_pointer_width = \"32\")]"}, {"sha": "2a0519487c7a7363c5870ab1836649a939e36c08", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -814,7 +814,7 @@ impl File {\n             use crate::convert::TryInto;\n             let size: off64_t =\n                 size.try_into().map_err(|e| io::Error::new(io::ErrorKind::InvalidInput, e))?;\n-            cvt_r(|| unsafe { ftruncate64(self.0.raw(), size) }).map(|_| ())\n+            cvt_r(|| unsafe { ftruncate64(self.0.raw(), size) }).map(drop)\n         }\n     }\n "}, {"sha": "79b0dc02978f37c5f521898ed0c7c9280ee921f3", "filename": "src/libstd/sys/unix/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fnet.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -324,7 +324,7 @@ impl Socket {\n \n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;\n-        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())\n+        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(drop)\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {"}, {"sha": "b277b3d5899b80663f6e023bab1b8927ef20abc0", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -529,7 +529,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n+        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n \n@@ -538,7 +538,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n+        cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }\n "}, {"sha": "2a861c878015e254098339a8802dad3e1dc73473", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -99,11 +99,11 @@ pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) ->\n \n         if fds[0].revents != 0 && read(&p1, v1)? {\n             p2.set_nonblocking(false)?;\n-            return p2.read_to_end(v2).map(|_| ());\n+            return p2.read_to_end(v2).map(drop);\n         }\n         if fds[1].revents != 0 && read(&p2, v2)? {\n             p1.set_nonblocking(false)?;\n-            return p1.read_to_end(v1).map(|_| ());\n+            return p1.read_to_end(v1).map(drop);\n         }\n     }\n "}, {"sha": "07d0fbf61fe2274e9e8b58d20450dcef17de05d1", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -425,7 +425,7 @@ impl Process {\n                 \"invalid argument: can't kill an exited process\",\n             ))\n         } else {\n-            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(|_| ())\n+            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(drop)\n         }\n     }\n "}, {"sha": "68f2c133170244431a6ed4368f425073d4ff98d7", "filename": "src/libstd/sys/vxworks/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffs.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -340,7 +340,7 @@ impl File {\n     }\n \n     pub fn truncate(&self, size: u64) -> io::Result<()> {\n-        return cvt_r(|| unsafe { ftruncate(self.0.raw(), size as off_t) }).map(|_| ());\n+        return cvt_r(|| unsafe { ftruncate(self.0.raw(), size as off_t) }).map(drop);\n     }\n \n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {"}, {"sha": "7d4e5624f7e395bc5a8e22d737c7d3b13510928b", "filename": "src/libstd/sys/vxworks/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fnet.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -261,7 +261,7 @@ impl Socket {\n \n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;\n-        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())\n+        cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(drop)\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {"}, {"sha": "d42191544994487e42ddbe5058d9ca2264ec7fe1", "filename": "src/libstd/sys/vxworks/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fos.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -279,7 +279,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n+        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n \n@@ -288,7 +288,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n+        cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }\n "}, {"sha": "0990cb8e83cf8c9798fe9dc2d035583b3670d377", "filename": "src/libstd/sys/vxworks/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fpipe.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -66,11 +66,11 @@ pub fn read2(p1: AnonPipe, v1: &mut Vec<u8>, p2: AnonPipe, v2: &mut Vec<u8>) ->\n \n         if fds[0].revents != 0 && read(&p1, v1)? {\n             p2.set_nonblocking_pipe(false)?;\n-            return p2.read_to_end(v2).map(|_| ());\n+            return p2.read_to_end(v2).map(drop);\n         }\n         if fds[1].revents != 0 && read(&p2, v2)? {\n             p1.set_nonblocking_pipe(false)?;\n-            return p1.read_to_end(v1).map(|_| ());\n+            return p1.read_to_end(v1).map(drop);\n         }\n     }\n "}, {"sha": "ced70dea27f9952921bd74d8911abb0f8f91c6fc", "filename": "src/libstd/sys/vxworks/process/process_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_vxworks.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -138,7 +138,7 @@ impl Process {\n                 \"invalid argument: can't kill an exited process\",\n             ))\n         } else {\n-            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(|_| ())\n+            cvt(unsafe { libc::kill(self.pid, libc::SIGKILL) }).map(drop)\n         }\n     }\n "}, {"sha": "3baec6bf09924c25967fbf87c2455169a382ce58", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -151,7 +151,7 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n+        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(drop)\n     }\n }\n \n@@ -160,7 +160,7 @@ pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n \n     unsafe {\n         let _guard = env_lock();\n-        cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n+        cvt(libc::unsetenv(nbuf.as_ptr())).map(drop)\n     }\n }\n "}, {"sha": "427f4b684e14ae9ca4630c50f2261ae694bfd98b", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -923,6 +923,6 @@ fn symlink_junction_inner(target: &Path, junction: &Path) -> io::Result<()> {\n             &mut ret,\n             ptr::null_mut(),\n         ))\n-        .map(|_| ())\n+        .map(drop)\n     }\n }"}, {"sha": "f2ad057b6b624e12af232e3181844902f3f3ea3a", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -156,7 +156,7 @@ impl RawHandle {\n     }\n \n     pub fn cancel_io(&self) -> io::Result<()> {\n-        unsafe { cvt(c::CancelIo(self.raw())).map(|_| ()) }\n+        unsafe { cvt(c::CancelIo(self.raw())).map(drop) }\n     }\n \n     pub fn write(&self, buf: &[u8]) -> io::Result<usize> {"}, {"sha": "d8d4fdfce2fe4c9a7a49367e8024d304ba2e41a8", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -355,7 +355,7 @@ impl Socket {\n     #[cfg(not(target_vendor = \"uwp\"))]\n     fn set_no_inherit(&self) -> io::Result<()> {\n         sys::cvt(unsafe { c::SetHandleInformation(self.0 as c::HANDLE, c::HANDLE_FLAG_INHERIT, 0) })\n-            .map(|_| ())\n+            .map(drop)\n     }\n \n     #[cfg(target_vendor = \"uwp\")]"}, {"sha": "c5354671c9843db6d418e8513d95642145269001", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -247,7 +247,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     let mut p = p.encode_wide().collect::<Vec<_>>();\n     p.push(0);\n \n-    cvt(unsafe { c::SetCurrentDirectoryW(p.as_ptr()) }).map(|_| ())\n+    cvt(unsafe { c::SetCurrentDirectoryW(p.as_ptr()) }).map(drop)\n }\n \n pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n@@ -272,12 +272,12 @@ pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n     let k = to_u16s(k)?;\n     let v = to_u16s(v)?;\n \n-    cvt(unsafe { c::SetEnvironmentVariableW(k.as_ptr(), v.as_ptr()) }).map(|_| ())\n+    cvt(unsafe { c::SetEnvironmentVariableW(k.as_ptr(), v.as_ptr()) }).map(drop)\n }\n \n pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n     let v = to_u16s(n)?;\n-    cvt(unsafe { c::SetEnvironmentVariableW(v.as_ptr(), ptr::null()) }).map(|_| ())\n+    cvt(unsafe { c::SetEnvironmentVariableW(v.as_ptr(), ptr::null()) }).map(drop)\n }\n \n pub fn temp_dir() -> PathBuf {"}, {"sha": "e03e0fc83454be6e39e2bf642a18f48c63c0e09c", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -36,7 +36,7 @@ macro_rules! rtunwrap {\n         match $e {\n             $ok(v) => v,\n             ref err => {\n-                let err = err.as_ref().map(|_| ()); // map Ok/Some which might not be Debug\n+                let err = err.as_ref().map(drop); // map Ok/Some which might not be Debug\n                 rtabort!(concat!(\"unwrap failed: \", stringify!($e), \" = {:?}\"), err)\n             }\n         }"}, {"sha": "c7d4828892c046066de3c27e09d7c76fad321dc3", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -659,7 +659,7 @@ impl UdpSocket {\n \n     pub fn connect(&self, addr: io::Result<&SocketAddr>) -> io::Result<()> {\n         let (addrp, len) = addr?.into_inner();\n-        cvt_r(|| unsafe { c::connect(*self.inner.as_inner(), addrp, len) }).map(|_| ())\n+        cvt_r(|| unsafe { c::connect(*self.inner.as_inner(), addrp, len) }).map(drop)\n     }\n }\n "}, {"sha": "d900f8ed9ba121dbb4e5347459a068bdd75fcf2c", "filename": "src/test/ui/async-await/issues/issue-64433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64433.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -23,7 +23,7 @@ impl B {\n async fn can_error(some_string: &str) -> Result<(), String> {\n     let a = A { inner: vec![some_string, \"foo\"] };\n     let mut b = B {};\n-    Ok(b.something_with_a(a).await.map(|_| ())?)\n+    Ok(b.something_with_a(a).await.map(drop)?)\n }\n \n fn main() {"}, {"sha": "dd0afbbdfc6fa6db5c0b2a18a95af750a0fc64bb", "filename": "src/test/ui/nll/issue-50343.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Ftest%2Fui%2Fnll%2Fissue-50343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Ftest%2Fui%2Fnll%2Fissue-50343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50343.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -3,6 +3,6 @@\n #![deny(unused_mut)]\n \n fn main() {\n-    vec![42].iter().map(|_| ()).count();\n+    vec![42].iter().map(drop).count();\n     vec![(42, 22)].iter().map(|(_x, _y)| ()).count();\n }"}, {"sha": "e9510b53feab8686322262366a7b67ed9721f8ef", "filename": "src/test/ui/paths-containing-nul.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Ftest%2Fui%2Fpaths-containing-nul.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f07223346b06da723c25a3ac42f874e6c945c/src%2Ftest%2Fui%2Fpaths-containing-nul.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpaths-containing-nul.rs?ref=dd8f07223346b06da723c25a3ac42f874e6c945c", "patch": "@@ -17,7 +17,7 @@ fn assert_invalid_input<T>(on: &str, result: io::Result<T>) {\n                               \"{} returned a strange {:?} on a path with NUL\", on, e.kind()),\n         }\n     }\n-    inner(on, result.map(|_| ()))\n+    inner(on, result.map(drop))\n }\n \n fn main() {"}]}