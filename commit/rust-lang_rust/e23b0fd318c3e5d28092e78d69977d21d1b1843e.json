{"sha": "e23b0fd318c3e5d28092e78d69977d21d1b1843e", "node_id": "C_kwDOAAsO6NoAKGUyM2IwZmQzMThjM2U1ZDI4MDkyZTc4ZDY5OTc3ZDIxZDFiMTg0M2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-12T06:25:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-12T06:25:46Z"}, "message": "Rollup merge of #103236 - tspiteri:redoc-int-adc-sbb, r=m-ou-se\n\ndoc: rewrite doc for signed int::{carrying_add,borrowing_sub}\n\nReword the documentation for bigint helper methods, signed `int::{carrying_add,borrowing_sub}` (#85532).\n\nThis change is a follow-up to #101889, which was for the unsigned methods.", "tree": {"sha": "dac76b424f7e45678e46fd584773dc819c40e670", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dac76b424f7e45678e46fd584773dc819c40e670"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e23b0fd318c3e5d28092e78d69977d21d1b1843e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjv6fqCRBK7hj4Ov3rIwAA9BUIAFudM+3NIXdwvc9H1/P2Xjni\nTATXoISABkJQ3BEVogOWPclr0BcPqKW16r0PlDBwrlSTWI/GXy8QTWx/O3WxvjDz\nWjVuYxxpp3VeRusM2vQWZDSW2+a4UKFlGUt1AgxBAw2bPqEgrghrYNr9zjbi653C\nci/FO6PpLEH1AwwKNuPfsc5ZYdJ1PCR5OkVG9aw2x5jWQju/DV92Wb533mn/+1Cs\ncbBtE1AdOGZQVhNUH/7hf0395Lg6v/Poj+2uMueVaG5hdqm/E0z3l0lZHGMCN1VY\nCFChGwWQ6egL7LTsd4H1PzBZLuGLIG+6t6pwusbxKvI5xbl1ZfZE89xwQjCcVfk=\n=Lgqb\n-----END PGP SIGNATURE-----\n", "payload": "tree dac76b424f7e45678e46fd584773dc819c40e670\nparent d4203eda5f0dd0b0192bfd22ea5989fbaf917818\nparent 4e38d067fe70d383c5ceef4e3631f6f83e6e3f0d\nauthor Michael Goulet <michael@errs.io> 1673504746 -0800\ncommitter GitHub <noreply@github.com> 1673504746 -0800\n\nRollup merge of #103236 - tspiteri:redoc-int-adc-sbb, r=m-ou-se\n\ndoc: rewrite doc for signed int::{carrying_add,borrowing_sub}\n\nReword the documentation for bigint helper methods, signed `int::{carrying_add,borrowing_sub}` (#85532).\n\nThis change is a follow-up to #101889, which was for the unsigned methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e23b0fd318c3e5d28092e78d69977d21d1b1843e", "html_url": "https://github.com/rust-lang/rust/commit/e23b0fd318c3e5d28092e78d69977d21d1b1843e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e23b0fd318c3e5d28092e78d69977d21d1b1843e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4203eda5f0dd0b0192bfd22ea5989fbaf917818", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4203eda5f0dd0b0192bfd22ea5989fbaf917818", "html_url": "https://github.com/rust-lang/rust/commit/d4203eda5f0dd0b0192bfd22ea5989fbaf917818"}, {"sha": "4e38d067fe70d383c5ceef4e3631f6f83e6e3f0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e38d067fe70d383c5ceef4e3631f6f83e6e3f0d", "html_url": "https://github.com/rust-lang/rust/commit/4e38d067fe70d383c5ceef4e3631f6f83e6e3f0d"}], "stats": {"total": 111, "additions": 75, "deletions": 36}, "files": [{"sha": "21518a3f551807356dbbf2dc484f4af1387490fc", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 75, "deletions": 36, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/e23b0fd318c3e5d28092e78d69977d21d1b1843e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e23b0fd318c3e5d28092e78d69977d21d1b1843e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=e23b0fd318c3e5d28092e78d69977d21d1b1843e", "patch": "@@ -1514,37 +1514,50 @@ macro_rules! int_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self + rhs + carry` without the ability to overflow.\n+        /// Calculates `self` + `rhs` + `carry` and checks for overflow.\n         ///\n-        /// Performs \"signed ternary addition\" which takes in an extra bit to add, and may return an\n-        /// additional bit of overflow. This signed function is used only on the highest-ordered data,\n-        /// for which the signed overflow result indicates whether the big integer overflowed or not.\n+        /// Performs \"ternary addition\" of two integer operands and a carry-in\n+        /// bit, and returns a tuple of the sum along with a boolean indicating\n+        /// whether an arithmetic overflow would occur. On overflow, the wrapped\n+        /// value is returned.\n         ///\n-        /// # Examples\n+        /// This allows chaining together multiple additions to create a wider\n+        /// addition, and can be useful for bignum addition. This method should\n+        /// only be used for the most significant word; for the less significant\n+        /// words the unsigned method\n+        #[doc = concat!(\"[`\", stringify!($UnsignedT), \"::carrying_add`]\")]\n+        /// should be used.\n         ///\n-        /// Basic usage:\n+        /// The output boolean returned by this method is *not* a carry flag,\n+        /// and should *not* be added to a more significant word.\n         ///\n-        /// ```\n-        /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, false), (7, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".carrying_add(2, true), (8, false));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), (\", stringify!($SelfT), \"::MIN, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(0, true), (\", stringify!($SelfT), \"::MIN, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, true), (\", stringify!($SelfT), \"::MIN + 1, true));\")]\n-        #[doc = concat!(\"assert_eq!(\",\n-            stringify!($SelfT), \"::MAX.carrying_add(\", stringify!($SelfT), \"::MAX, true), \",\n-            \"(-1, true));\"\n-        )]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.carrying_add(-1, true), (\", stringify!($SelfT), \"::MIN, false));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".carrying_add(\", stringify!($SelfT), \"::MAX, true), (\", stringify!($SelfT), \"::MIN, true));\")]\n-        /// ```\n+        /// If the input carry is false, this method is equivalent to\n+        /// [`overflowing_add`](Self::overflowing_add).\n         ///\n-        /// If `carry` is false, this method is equivalent to [`overflowing_add`](Self::overflowing_add):\n+        /// # Examples\n         ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5_\", stringify!($SelfT), \".carrying_add(2, false), 5_\", stringify!($SelfT), \".overflowing_add(2));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.carrying_add(1, false), \", stringify!($SelfT), \"::MAX.overflowing_add(1));\")]\n+        /// // Only the  most significant word is signed.\n+        /// //\n+        #[doc = concat!(\"//   10  MAX    (a = 10 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        #[doc = concat!(\"// + -5    9    (b = -5 \u00d7 2^\", stringify!($BITS), \" + 9)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//    6    8    (sum = 6 \u00d7 2^\", stringify!($BITS), \" + 8)\")]\n+        ///\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($UnsignedT), \") = (10, \", stringify!($UnsignedT), \"::MAX);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($UnsignedT), \") = (-5, 9);\")]\n+        /// let carry0 = false;\n+        ///\n+        #[doc = concat!(\"// \", stringify!($UnsignedT), \"::carrying_add for the less significant words\")]\n+        /// let (sum0, carry1) = a0.carrying_add(b0, carry0);\n+        /// assert_eq!(carry1, true);\n+        ///\n+        #[doc = concat!(\"// \", stringify!($SelfT), \"::carrying_add for the most significant word\")]\n+        /// let (sum1, overflow) = a1.carrying_add(b1, carry1);\n+        /// assert_eq!(overflow, false);\n+        ///\n+        /// assert_eq!((sum1, sum0), (6, 8));\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]\n@@ -1608,25 +1621,51 @@ macro_rules! int_impl {\n             (a as Self, b)\n         }\n \n-        /// Calculates `self - rhs - borrow` without the ability to overflow.\n+        /// Calculates `self` &minus; `rhs` &minus; `borrow` and checks for\n+        /// overflow.\n         ///\n-        /// Performs \"signed ternary subtraction\" which takes in an extra bit to subtract, and may return an\n-        /// additional bit of overflow. This signed function is used only on the highest-ordered data,\n-        /// for which the signed overflow result indicates whether the big integer overflowed or not.\n+        /// Performs \"ternary subtraction\" by subtracting both an integer\n+        /// operandand a borrow-in bit from `self`, and returns a tuple of the\n+        /// difference along with a boolean indicating whether an arithmetic\n+        /// overflow would occur. On overflow, the wrapped value is returned.\n         ///\n-        /// # Examples\n+        /// This allows chaining together multiple subtractions to create a\n+        /// wider subtraction, and can be useful for bignum subtraction. This\n+        /// method should only be used for the most significant word; for the\n+        /// less significant words the unsigned method\n+        #[doc = concat!(\"[`\", stringify!($UnsignedT), \"::borrowing_sub`]\")]\n+        /// should be used.\n         ///\n-        /// Basic usage:\n+        /// The output boolean returned by this method is *not* a borrow flag,\n+        /// and should *not* be subtracted from a more significant word.\n+        ///\n+        /// If the input borrow is false, this method is equivalent to\n+        /// [`overflowing_sub`](Self::overflowing_sub).\n+        ///\n+        /// # Examples\n         ///\n         /// ```\n         /// #![feature(bigint_helper_methods)]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, false), (3, false));\")]\n-        #[doc = concat!(\"assert_eq!(5\", stringify!($SelfT), \".borrowing_sub(2, true), (2, false));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, false), (-1, false));\")]\n-        #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".borrowing_sub(1, true), (-2, false));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.borrowing_sub(1, true), (\", stringify!($SelfT), \"::MAX - 1, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.borrowing_sub(-1, false), (\", stringify!($SelfT), \"::MIN, true));\")]\n-        #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.borrowing_sub(-1, true), (\", stringify!($SelfT), \"::MAX, false));\")]\n+        /// // Only the  most significant word is signed.\n+        /// //\n+        #[doc = concat!(\"//    6    8    (a = 6 \u00d7 2^\", stringify!($BITS), \" + 8)\")]\n+        #[doc = concat!(\"// - -5    9    (b = -5 \u00d7 2^\", stringify!($BITS), \" + 9)\")]\n+        /// // ---------\n+        #[doc = concat!(\"//   10  MAX    (diff = 10 \u00d7 2^\", stringify!($BITS), \" + 2^\", stringify!($BITS), \" - 1)\")]\n+        ///\n+        #[doc = concat!(\"let (a1, a0): (\", stringify!($SelfT), \", \", stringify!($UnsignedT), \") = (6, 8);\")]\n+        #[doc = concat!(\"let (b1, b0): (\", stringify!($SelfT), \", \", stringify!($UnsignedT), \") = (-5, 9);\")]\n+        /// let borrow0 = false;\n+        ///\n+        #[doc = concat!(\"// \", stringify!($UnsignedT), \"::borrowing_sub for the less significant words\")]\n+        /// let (diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n+        /// assert_eq!(borrow1, true);\n+        ///\n+        #[doc = concat!(\"// \", stringify!($SelfT), \"::borrowing_sub for the most significant word\")]\n+        /// let (diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n+        /// assert_eq!(overflow, false);\n+        ///\n+        #[doc = concat!(\"assert_eq!((diff1, diff0), (10, \", stringify!($UnsignedT), \"::MAX));\")]\n         /// ```\n         #[unstable(feature = \"bigint_helper_methods\", issue = \"85532\")]\n         #[rustc_const_unstable(feature = \"const_bigint_helper_methods\", issue = \"85532\")]"}]}