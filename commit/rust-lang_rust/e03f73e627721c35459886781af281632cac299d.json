{"sha": "e03f73e627721c35459886781af281632cac299d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwM2Y3M2U2Mjc3MjFjMzU0NTk4ODY3ODFhZjI4MTYzMmNhYzI5OWQ=", "commit": {"author": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-05T21:38:55Z"}, "committer": {"name": "Christoph Walcher", "email": "christoph-wa@gmx.de", "date": "2020-08-07T16:08:51Z"}, "message": "fix nits", "tree": {"sha": "aba9207eb5349b050bcd8ae8d905f655052a0c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aba9207eb5349b050bcd8ae8d905f655052a0c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03f73e627721c35459886781af281632cac299d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE2xeoiquC04hUiBqUoZMWSk0F7kQFAl8tfJMACgkQoZMWSk0F\n7kQNrQgAqM1Co2X+Cf+gEijrTZt247JualGuGZ4SauadQwZ+H9wXTw5MXZuV9k64\n5ettQK76HP3Nrb+N8Fg8iDhH6fl0KtarvngF95S8p0HWjl45f9lGXOuno+0Xv4Sy\nk5C2SHwNTx+HLRSioR/ZW2Fpi7M9/rTriY3BT/iZRNZMg3qmlnkdm8gVd7KTbcCq\n7GZ1wgmJ3l/k3WiYoTGrzRkR243h6kVeGa2BQAWqAUS4nQ+Y/EtygS+yyqtlB8Nt\ncckUIqavzeOtMM/quVsRz8Cl44v4ecYFGLz71MQmxv6VSCMSV4F/wIhjkIi/IC3t\nusFpcBCTD7R7xHR5REHPftiuHdh+jA==\n=X1gY\n-----END PGP SIGNATURE-----", "payload": "tree aba9207eb5349b050bcd8ae8d905f655052a0c1a\nparent c87d999fa2f8e88f986aa5f4d76b708824e1fd3a\nauthor Christoph Walcher <christoph-wa@gmx.de> 1596663535 +0200\ncommitter Christoph Walcher <christoph-wa@gmx.de> 1596816531 +0200\n\nfix nits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03f73e627721c35459886781af281632cac299d", "html_url": "https://github.com/rust-lang/rust/commit/e03f73e627721c35459886781af281632cac299d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03f73e627721c35459886781af281632cac299d/comments", "author": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wiomoc", "id": 10638299, "node_id": "MDQ6VXNlcjEwNjM4Mjk5", "avatar_url": "https://avatars.githubusercontent.com/u/10638299?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wiomoc", "html_url": "https://github.com/wiomoc", "followers_url": "https://api.github.com/users/wiomoc/followers", "following_url": "https://api.github.com/users/wiomoc/following{/other_user}", "gists_url": "https://api.github.com/users/wiomoc/gists{/gist_id}", "starred_url": "https://api.github.com/users/wiomoc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wiomoc/subscriptions", "organizations_url": "https://api.github.com/users/wiomoc/orgs", "repos_url": "https://api.github.com/users/wiomoc/repos", "events_url": "https://api.github.com/users/wiomoc/events{/privacy}", "received_events_url": "https://api.github.com/users/wiomoc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a", "html_url": "https://github.com/rust-lang/rust/commit/c87d999fa2f8e88f986aa5f4d76b708824e1fd3a"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "4590128bedc20ca635deb038c6d5231bb6874d6f", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e03f73e627721c35459886781af281632cac299d/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03f73e627721c35459886781af281632cac299d/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=e03f73e627721c35459886781af281632cac299d", "patch": "@@ -82,7 +82,7 @@ fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mod\n                 cx,\n                 NEEDLESS_ARBITRARY_SELF_TYPE,\n                 span,\n-                \"the type of the `self` parameter is arbitrary\",\n+                \"the type of the `self` parameter does not need to be arbitrary\",\n                 \"consider to change this parameter to\",\n                 self_param,\n                 Applicability::MachineApplicable,"}, {"sha": "bc770d8bf68940e69d2c6a250f0b234ef351e147", "filename": "tests/ui/needless_arbitrary_self_type.fixed", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e03f73e627721c35459886781af281632cac299d/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e03f73e627721c35459886781af281632cac299d/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.fixed?ref=e03f73e627721c35459886781af281632cac299d", "patch": "@@ -29,23 +29,31 @@ impl ValType {\n         unimplemented!();\n     }\n \n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n     pub fn ref_bad_with_lifetime<'a>(&'a self) {\n         unimplemented!();\n     }\n \n-    pub fn ref_good(&self) {\n+    pub fn ref_good_with_lifetime<'a>(&'a self) {\n         unimplemented!();\n     }\n \n     pub fn mut_ref_bad(&mut self) {\n         unimplemented!();\n     }\n \n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n     pub fn mut_ref_bad_with_lifetime<'a>(&'a mut self) {\n         unimplemented!();\n     }\n \n-    pub fn mut_ref_good(&mut self) {\n+    pub fn mut_ref_good_with_lifetime<'a>(&'a mut self) {\n         unimplemented!();\n     }\n "}, {"sha": "9074920b2046d3ae3c7c45bcbe74a63a9aca5765", "filename": "tests/ui/needless_arbitrary_self_type.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e03f73e627721c35459886781af281632cac299d/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03f73e627721c35459886781af281632cac299d/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.rs?ref=e03f73e627721c35459886781af281632cac299d", "patch": "@@ -29,23 +29,31 @@ impl ValType {\n         unimplemented!();\n     }\n \n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n     pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n         unimplemented!();\n     }\n \n-    pub fn ref_good(&self) {\n+    pub fn ref_good_with_lifetime<'a>(&'a self) {\n         unimplemented!();\n     }\n \n     pub fn mut_ref_bad(self: &mut Self) {\n         unimplemented!();\n     }\n \n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n     pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n         unimplemented!();\n     }\n \n-    pub fn mut_ref_good(&mut self) {\n+    pub fn mut_ref_good_with_lifetime<'a>(&'a mut self) {\n         unimplemented!();\n     }\n "}, {"sha": "227c6d73b62581890efc9cb3b9e1ee18db63524b", "filename": "tests/ui/needless_arbitrary_self_type.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e03f73e627721c35459886781af281632cac299d/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e03f73e627721c35459886781af281632cac299d/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.stderr?ref=e03f73e627721c35459886781af281632cac299d", "patch": "@@ -1,43 +1,43 @@\n-error: the type of the `self` parameter is arbitrary\n+error: the type of the `self` parameter does not need to be arbitrary\n   --> $DIR/needless_arbitrary_self_type.rs:12:16\n    |\n LL |     pub fn bad(self: Self) {\n    |                ^^^^^^^^^^ help: consider to change this parameter to: `self`\n    |\n    = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n \n-error: the type of the `self` parameter is arbitrary\n+error: the type of the `self` parameter does not need to be arbitrary\n   --> $DIR/needless_arbitrary_self_type.rs:20:20\n    |\n LL |     pub fn mut_bad(mut self: Self) {\n    |                    ^^^^^^^^^^^^^^ help: consider to change this parameter to: `mut self`\n \n-error: the type of the `self` parameter is arbitrary\n+error: the type of the `self` parameter does not need to be arbitrary\n   --> $DIR/needless_arbitrary_self_type.rs:28:20\n    |\n LL |     pub fn ref_bad(self: &Self) {\n    |                    ^^^^^^^^^^^ help: consider to change this parameter to: `&self`\n \n-error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:32:38\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:36:38\n    |\n LL |     pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n    |                                      ^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a self`\n \n-error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:40:24\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:44:24\n    |\n LL |     pub fn mut_ref_bad(self: &mut Self) {\n    |                        ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n \n-error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:44:42\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:52:42\n    |\n LL |     pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n    |                                          ^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a mut self`\n \n-error: the type of the `self` parameter is arbitrary\n-  --> $DIR/needless_arbitrary_self_type.rs:52:28\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:60:28\n    |\n LL |     pub fn mut_ref_mut_bad(mut self: &mut Self) {\n    |                            ^^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`"}]}