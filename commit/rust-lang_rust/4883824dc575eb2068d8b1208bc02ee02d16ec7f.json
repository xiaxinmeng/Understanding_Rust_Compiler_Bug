{"sha": "4883824dc575eb2068d8b1208bc02ee02d16ec7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ODM4MjRkYzU3NWViMjA2OGQ4YjEyMDhiYzAyZWUwMmQxNmVjN2Y=", "commit": {"author": {"name": "JP Sugarbroad", "email": "jpsugar@google.com", "date": "2016-04-06T00:06:10Z"}, "committer": {"name": "JP Sugarbroad", "email": "jpsugar@google.com", "date": "2016-04-06T00:08:23Z"}, "message": "Fix typos in atomic compare_exchange.", "tree": {"sha": "a3e5696192811e57b4f9efa565769a5f6c30d784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3e5696192811e57b4f9efa565769a5f6c30d784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4883824dc575eb2068d8b1208bc02ee02d16ec7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4883824dc575eb2068d8b1208bc02ee02d16ec7f", "html_url": "https://github.com/rust-lang/rust/commit/4883824dc575eb2068d8b1208bc02ee02d16ec7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4883824dc575eb2068d8b1208bc02ee02d16ec7f/comments", "author": {"login": "taralx", "id": 1036808, "node_id": "MDQ6VXNlcjEwMzY4MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1036808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taralx", "html_url": "https://github.com/taralx", "followers_url": "https://api.github.com/users/taralx/followers", "following_url": "https://api.github.com/users/taralx/following{/other_user}", "gists_url": "https://api.github.com/users/taralx/gists{/gist_id}", "starred_url": "https://api.github.com/users/taralx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taralx/subscriptions", "organizations_url": "https://api.github.com/users/taralx/orgs", "repos_url": "https://api.github.com/users/taralx/repos", "events_url": "https://api.github.com/users/taralx/events{/privacy}", "received_events_url": "https://api.github.com/users/taralx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taralx", "id": 1036808, "node_id": "MDQ6VXNlcjEwMzY4MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1036808?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taralx", "html_url": "https://github.com/taralx", "followers_url": "https://api.github.com/users/taralx/followers", "following_url": "https://api.github.com/users/taralx/following{/other_user}", "gists_url": "https://api.github.com/users/taralx/gists{/gist_id}", "starred_url": "https://api.github.com/users/taralx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taralx/subscriptions", "organizations_url": "https://api.github.com/users/taralx/orgs", "repos_url": "https://api.github.com/users/taralx/repos", "events_url": "https://api.github.com/users/taralx/events{/privacy}", "received_events_url": "https://api.github.com/users/taralx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "241a9d0ddf99fd40d273c615e9b1e8ce6052d94a", "url": "https://api.github.com/repos/rust-lang/rust/commits/241a9d0ddf99fd40d273c615e9b1e8ce6052d94a", "html_url": "https://github.com/rust-lang/rust/commit/241a9d0ddf99fd40d273c615e9b1e8ce6052d94a"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "483c3822df6ca345532f352ff99e358897dd8c6a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4883824dc575eb2068d8b1208bc02ee02d16ec7f/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4883824dc575eb2068d8b1208bc02ee02d16ec7f/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=4883824dc575eb2068d8b1208bc02ee02d16ec7f", "patch": "@@ -327,7 +327,7 @@ impl AtomicBool {\n     /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n     /// operation. The first describes the required ordering if the operation succeeds while the\n     /// second describes the required ordering when the operation fails. The failure ordering can't\n-    /// be `Acquire` or `AcqRel` and must be equivalent or weaker than the success ordering.\n+    /// be `Release` or `AcqRel` and must be equivalent or weaker than the success ordering.\n     ///\n     /// # Examples\n     ///\n@@ -376,7 +376,7 @@ impl AtomicBool {\n     /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n     /// ordering of this operation. The first describes the required ordering if the operation\n     /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be `Acquire` or `AcqRel` and must be equivalent or weaker than the\n+    /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker than the\n     /// success ordering.\n     ///\n     /// # Examples\n@@ -663,7 +663,7 @@ impl AtomicIsize {\n     /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n     /// operation. The first describes the required ordering if the operation succeeds while the\n     /// second describes the required ordering when the operation fails. The failure ordering can't\n-    /// be `Acquire` or `AcqRel` and must be equivalent or weaker than the success ordering.\n+    /// be `Release` or `AcqRel` and must be equivalent or weaker than the success ordering.\n     ///\n     /// # Examples\n     ///\n@@ -705,7 +705,7 @@ impl AtomicIsize {\n     /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n     /// ordering of this operation. The first describes the required ordering if the operation\n     /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be `Acquire` or `AcqRel` and must be equivalent or weaker than the\n+    /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker than the\n     /// success ordering.\n     ///\n     /// # Examples\n@@ -939,7 +939,7 @@ impl AtomicUsize {\n     /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n     /// operation. The first describes the required ordering if the operation succeeds while the\n     /// second describes the required ordering when the operation fails. The failure ordering can't\n-    /// be `Acquire` or `AcqRel` and must be equivalent or weaker than the success ordering.\n+    /// be `Release` or `AcqRel` and must be equivalent or weaker than the success ordering.\n     ///\n     /// # Examples\n     ///\n@@ -981,7 +981,7 @@ impl AtomicUsize {\n     /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n     /// ordering of this operation. The first describes the required ordering if the operation\n     /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be `Acquire` or `AcqRel` and must be equivalent or weaker than the\n+    /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker than the\n     /// success ordering.\n     ///\n     /// # Examples\n@@ -1223,7 +1223,7 @@ impl<T> AtomicPtr<T> {\n     /// `compare_exchange` takes two `Ordering` arguments to describe the memory ordering of this\n     /// operation. The first describes the required ordering if the operation succeeds while the\n     /// second describes the required ordering when the operation fails. The failure ordering can't\n-    /// be `Acquire` or `AcqRel` and must be equivalent or weaker than the success ordering.\n+    /// be `Release` or `AcqRel` and must be equivalent or weaker than the success ordering.\n     ///\n     /// # Examples\n     ///\n@@ -1270,7 +1270,7 @@ impl<T> AtomicPtr<T> {\n     /// `compare_exchange_weak` takes two `Ordering` arguments to describe the memory\n     /// ordering of this operation. The first describes the required ordering if the operation\n     /// succeeds while the second describes the required ordering when the operation fails. The\n-    /// failure ordering can't be `Acquire` or `AcqRel` and must be equivalent or weaker than the\n+    /// failure ordering can't be `Release` or `AcqRel` and must be equivalent or weaker than the\n     /// success ordering.\n     ///\n     /// # Examples\n@@ -1396,8 +1396,8 @@ unsafe fn atomic_compare_exchange<T>(dst: *mut T,\n         (AcqRel, Relaxed)  => intrinsics::atomic_cxchg_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed)  => intrinsics::atomic_cxchg_failrelaxed(dst, old, new),\n         (SeqCst, Acquire)  => intrinsics::atomic_cxchg_failacq(dst, old, new),\n-        (_, Release) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n-        (_, AcqRel) => panic!(\"there is no such thing as a release failure ordering\"),\n+        (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n+        (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n     };\n     if ok {\n@@ -1446,8 +1446,8 @@ unsafe fn atomic_compare_exchange_weak<T>(dst: *mut T,\n         (AcqRel, Relaxed)  => intrinsics::atomic_cxchgweak_acqrel_failrelaxed(dst, old, new),\n         (SeqCst, Relaxed)  => intrinsics::atomic_cxchgweak_failrelaxed(dst, old, new),\n         (SeqCst, Acquire)  => intrinsics::atomic_cxchgweak_failacq(dst, old, new),\n-        (_, Release) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n-        (_, AcqRel) => panic!(\"there is no such thing as a release failure ordering\"),\n+        (_, AcqRel) => panic!(\"there is no such thing as an acquire/release failure ordering\"),\n+        (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n         _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n     };\n     if ok {"}]}