{"sha": "bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMWNlMzBjY2JmYTQ0ZmE3OWE0MGM3MjE3YTYyMmE3MjNmMGE5ZTA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-08T19:07:25Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2015-12-10T21:42:32Z"}, "message": "Add visit_defid(), visit_span(), and visit_literal() to MIR visitor", "tree": {"sha": "5205308ee94c98b791f22e58260c4d37f3aa061a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5205308ee94c98b791f22e58260c4d37f3aa061a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0", "html_url": "https://github.com/rust-lang/rust/commit/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70398d5ad0d6e44805fccf2dbc2cd9960c717dea", "url": "https://api.github.com/repos/rust-lang/rust/commits/70398d5ad0d6e44805fccf2dbc2cd9960c717dea", "html_url": "https://github.com/rust-lang/rust/commit/70398d5ad0d6e44805fccf2dbc2cd9960c717dea"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "fcc871ebed430c731ca6110fca0fe4f57f898323", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=bd1ce30ccbfa44fa79a40c7217a622a723f0a9e0", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use middle::def_id::DefId;\n use middle::ty::Region;\n use mir::repr::*;\n use rustc_data_structures::tuple_slice::TupleSlice;\n+use syntax::codemap::Span;\n \n pub trait Visitor<'tcx> {\n     // Override these, and call `self.super_xxx` to revert back to the\n@@ -56,6 +58,18 @@ pub trait Visitor<'tcx> {\n         self.super_constant(constant);\n     }\n \n+    fn visit_literal(&mut self, literal: &Literal<'tcx>) {\n+        self.super_literal(literal);\n+    }\n+\n+    fn visit_def_id(&mut self, def_id: DefId) {\n+        self.super_def_id(def_id);\n+    }\n+\n+    fn visit_span(&mut self, span: Span) {\n+        self.super_span(span);\n+    }\n+\n     // The `super_xxx` methods comprise the default behavior and are\n     // not meant to be overidden.\n \n@@ -74,6 +88,8 @@ pub trait Visitor<'tcx> {\n     }\n \n     fn super_statement(&mut self, block: BasicBlock, statement: &Statement<'tcx>) {\n+        self.visit_span(statement.span);\n+\n         match statement.kind {\n             StatementKind::Assign(ref lvalue, ref rvalue) => {\n                 self.visit_assign(block, lvalue, rvalue);\n@@ -218,7 +234,26 @@ pub trait Visitor<'tcx> {\n     fn super_branch(&mut self, _source: BasicBlock, _target: BasicBlock) {\n     }\n \n-    fn super_constant(&mut self, _constant: &Constant<'tcx>) {\n+    fn super_constant(&mut self, constant: &Constant<'tcx>) {\n+        self.visit_span(constant.span);\n+        self.visit_literal(&constant.literal);\n+    }\n+\n+    fn super_literal(&mut self, literal: &Literal<'tcx>) {\n+        match *literal {\n+            Literal::Item { def_id, .. } => {\n+                self.visit_def_id(def_id);\n+            },\n+            Literal::Value { .. } => {\n+                // Nothing to do\n+            }\n+        }\n+    }\n+\n+    fn super_def_id(&mut self, _def_id: DefId) {\n+    }\n+\n+    fn super_span(&mut self, _span: Span) {\n     }\n }\n "}]}