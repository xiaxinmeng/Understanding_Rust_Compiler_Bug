{"sha": "3d9533023004bc05d6bf65e1339e29aceac76f62", "node_id": "C_kwDOAAsO6NoAKDNkOTUzMzAyMzAwNGJjMDVkNmJmNjVlMTMzOWUyOWFjZWFjNzZmNjI", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-19T19:35:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T19:35:11Z"}, "message": "Rollup merge of #87404 - rylev:artifact-size-profiling, r=wesleywiser\n\nAdd support for artifact size profiling\n\nThis adds support for profiling artifact file sizes (incremental compilation artifacts and query cache to begin with).\n\nEventually we want to track this in perf.rlo so we can ensure that file sizes do not change dramatically on each pull request.\n\nThis relies on support in measureme: https://github.com/rust-lang/measureme/pull/169. Once that lands we can update this PR to not point to a git dependency.\n\nThis was worked on together with `@michaelwoerister.`\n\nr? `@wesleywiser`", "tree": {"sha": "82b588ea328ad0f990dc4d1dbd7971975f1dc454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82b588ea328ad0f990dc4d1dbd7971975f1dc454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9533023004bc05d6bf65e1339e29aceac76f62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbx3vCRBK7hj4Ov3rIwAA2HcIAEK47pU/1Y4bny0OiNArBFtP\niPsOVpy56dzWGflnvH/XpVUkA7vN4i7xQ3zaJCZgI+HmMcQZ9Cv4ymCgAHjT0t9I\n222htT9sQx/eDcbyJu8CrINHv+tKUT5V4l3LyeXSh/QBNJN/ACyA9VQnhXV0xpm8\nZtWMTPDWe0YbLvsMuMe6YdCKkOZVF62CB7ewvjEc/ncN1ePsyzev6SFwG7/H5xWA\ng4HBkgM9G5Vd3062C3g9NXGkQ7ojUIfHmBQWM0ALtOfpEXdZWquBFP1A4sGu9WYf\nq50qX3qaoA9JS4ZB4Vtz+GsEC4RTDk9QHBv+EoX28RTBocV/OAqVlzcesMJX4FA=\n=Ivzk\n-----END PGP SIGNATURE-----\n", "payload": "tree 82b588ea328ad0f990dc4d1dbd7971975f1dc454\nparent ca6798ab073c4f2358f2577e7258108099f29144\nparent 757f76ef73245f69c9262760ee4ff3cababd41d1\nauthor Yuki Okushi <jtitor@2k36.org> 1634672111 +0900\ncommitter GitHub <noreply@github.com> 1634672111 +0900\n\nRollup merge of #87404 - rylev:artifact-size-profiling, r=wesleywiser\n\nAdd support for artifact size profiling\n\nThis adds support for profiling artifact file sizes (incremental compilation artifacts and query cache to begin with).\n\nEventually we want to track this in perf.rlo so we can ensure that file sizes do not change dramatically on each pull request.\n\nThis relies on support in measureme: https://github.com/rust-lang/measureme/pull/169. Once that lands we can update this PR to not point to a git dependency.\n\nThis was worked on together with `@michaelwoerister.`\n\nr? `@wesleywiser`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9533023004bc05d6bf65e1339e29aceac76f62", "html_url": "https://github.com/rust-lang/rust/commit/3d9533023004bc05d6bf65e1339e29aceac76f62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9533023004bc05d6bf65e1339e29aceac76f62/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca6798ab073c4f2358f2577e7258108099f29144", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca6798ab073c4f2358f2577e7258108099f29144", "html_url": "https://github.com/rust-lang/rust/commit/ca6798ab073c4f2358f2577e7258108099f29144"}, {"sha": "757f76ef73245f69c9262760ee4ff3cababd41d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/757f76ef73245f69c9262760ee4ff3cababd41d1", "html_url": "https://github.com/rust-lang/rust/commit/757f76ef73245f69c9262760ee4ff3cababd41d1"}], "stats": {"total": 91, "additions": 76, "deletions": 15}, "files": [{"sha": "aaa709e50f60dd088ad9f123f0989650da96b08c", "filename": "Cargo.lock", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -2143,6 +2143,20 @@ dependencies = [\n  \"smallvec\",\n ]\n \n+[[package]]\n+name = \"measureme\"\n+version = \"10.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bd460fad6e55ca82fa0cd9dab0d315294188fd9ec6efbf4105e5635d4872ef9c\"\n+dependencies = [\n+ \"log\",\n+ \"memmap2\",\n+ \"parking_lot\",\n+ \"perf-event-open-sys\",\n+ \"rustc-hash\",\n+ \"smallvec\",\n+]\n+\n [[package]]\n name = \"memchr\"\n version = \"2.4.1\"\n@@ -2247,7 +2261,7 @@ dependencies = [\n  \"hex 0.4.2\",\n  \"libc\",\n  \"log\",\n- \"measureme\",\n+ \"measureme 9.1.2\",\n  \"rand 0.8.4\",\n  \"rustc-workspace-hack\",\n  \"rustc_version 0.4.0\",\n@@ -3235,7 +3249,7 @@ dependencies = [\n  \"indexmap\",\n  \"jobserver\",\n  \"libc\",\n- \"measureme\",\n+ \"measureme 9.1.2\",\n  \"memmap2\",\n  \"parking_lot\",\n  \"rustc-ap-rustc_graphviz\",\n@@ -3674,7 +3688,7 @@ dependencies = [\n  \"bitflags\",\n  \"cstr\",\n  \"libc\",\n- \"measureme\",\n+ \"measureme 10.0.0\",\n  \"rustc-demangle\",\n  \"rustc_arena\",\n  \"rustc_ast\",\n@@ -3767,7 +3781,7 @@ dependencies = [\n  \"indexmap\",\n  \"jobserver\",\n  \"libc\",\n- \"measureme\",\n+ \"measureme 10.0.0\",\n  \"memmap2\",\n  \"parking_lot\",\n  \"rustc-hash\",\n@@ -4292,7 +4306,7 @@ dependencies = [\n name = \"rustc_query_impl\"\n version = \"0.0.0\"\n dependencies = [\n- \"measureme\",\n+ \"measureme 10.0.0\",\n  \"rustc-rayon-core\",\n  \"rustc_ast\",\n  \"rustc_data_structures\","}, {"sha": "5f3f533447532c5ffcac8a4b0964dd25356c3f6b", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -11,7 +11,7 @@ doctest = false\n bitflags = \"1.0\"\n cstr = \"0.2\"\n libc = \"0.2\"\n-measureme = \"9.1.0\"\n+measureme = \"10.0.0\"\n snap = \"1\"\n tracing = \"0.1\"\n rustc_middle = { path = \"../rustc_middle\" }"}, {"sha": "e3395df35908c847c1c83f6fa5501483a828ece0", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -23,7 +23,7 @@ rustc-hash = \"1.1.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_index = { path = \"../rustc_index\", package = \"rustc_index\" }\n bitflags = \"1.2.1\"\n-measureme = \"9.1.0\"\n+measureme = \"10.0.0\"\n libc = \"0.2\"\n stacker = \"0.1.14\"\n tempfile = \"3.2\""}, {"sha": "c21939209fc3bfecb7fcea268f8d0900273402ea", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -110,12 +110,14 @@ bitflags::bitflags! {\n         const FUNCTION_ARGS       = 1 << 6;\n         const LLVM                = 1 << 7;\n         const INCR_RESULT_HASHING = 1 << 8;\n+        const ARTIFACT_SIZES = 1 << 9;\n \n         const DEFAULT = Self::GENERIC_ACTIVITIES.bits |\n                         Self::QUERY_PROVIDERS.bits |\n                         Self::QUERY_BLOCKED.bits |\n                         Self::INCR_CACHE_LOADS.bits |\n-                        Self::INCR_RESULT_HASHING.bits;\n+                        Self::INCR_RESULT_HASHING.bits |\n+                        Self::ARTIFACT_SIZES.bits;\n \n         const ARGS = Self::QUERY_KEYS.bits | Self::FUNCTION_ARGS.bits;\n     }\n@@ -136,6 +138,7 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"args\", EventFilter::ARGS),\n     (\"llvm\", EventFilter::LLVM),\n     (\"incr-result-hashing\", EventFilter::INCR_RESULT_HASHING),\n+    (\"artifact-sizes\", EventFilter::ARTIFACT_SIZES),\n ];\n \n /// Something that uniquely identifies a query invocation.\n@@ -285,6 +288,33 @@ impl SelfProfilerRef {\n         })\n     }\n \n+    /// Record the size of an artifact that the compiler produces\n+    ///\n+    /// `artifact_kind` is the class of artifact (e.g., query_cache, object_file, etc.)\n+    /// `artifact_name` is an identifier to the specific artifact being stored (usually a filename)\n+    #[inline(always)]\n+    pub fn artifact_size<A>(&self, artifact_kind: &str, artifact_name: A, size: u64)\n+    where\n+        A: Borrow<str> + Into<String>,\n+    {\n+        drop(self.exec(EventFilter::ARTIFACT_SIZES, |profiler| {\n+            let builder = EventIdBuilder::new(&profiler.profiler);\n+            let event_label = profiler.get_or_alloc_cached_string(artifact_kind);\n+            let event_arg = profiler.get_or_alloc_cached_string(artifact_name);\n+            let event_id = builder.from_label_and_arg(event_label, event_arg);\n+            let thread_id = get_thread_id();\n+\n+            profiler.profiler.record_integer_event(\n+                profiler.artifact_size_event_kind,\n+                event_id,\n+                thread_id,\n+                size,\n+            );\n+\n+            TimingGuard::none()\n+        }))\n+    }\n+\n     #[inline(always)]\n     pub fn generic_activity_with_args(\n         &self,\n@@ -372,7 +402,7 @@ impl SelfProfilerRef {\n     ) {\n         drop(self.exec(event_filter, |profiler| {\n             let event_id = StringId::new_virtual(query_invocation_id.0);\n-            let thread_id = std::thread::current().id().as_u64().get() as u32;\n+            let thread_id = get_thread_id();\n \n             profiler.profiler.record_instant_event(\n                 event_kind(profiler),\n@@ -425,6 +455,7 @@ pub struct SelfProfiler {\n     incremental_result_hashing_event_kind: StringId,\n     query_blocked_event_kind: StringId,\n     query_cache_hit_event_kind: StringId,\n+    artifact_size_event_kind: StringId,\n }\n \n impl SelfProfiler {\n@@ -447,6 +478,7 @@ impl SelfProfiler {\n             profiler.alloc_string(\"IncrementalResultHashing\");\n         let query_blocked_event_kind = profiler.alloc_string(\"QueryBlocked\");\n         let query_cache_hit_event_kind = profiler.alloc_string(\"QueryCacheHit\");\n+        let artifact_size_event_kind = profiler.alloc_string(\"ArtifactSize\");\n \n         let mut event_filter_mask = EventFilter::empty();\n \n@@ -491,6 +523,7 @@ impl SelfProfiler {\n             incremental_result_hashing_event_kind,\n             query_blocked_event_kind,\n             query_cache_hit_event_kind,\n+            artifact_size_event_kind,\n         })\n     }\n \n@@ -561,7 +594,7 @@ impl<'a> TimingGuard<'a> {\n         event_kind: StringId,\n         event_id: EventId,\n     ) -> TimingGuard<'a> {\n-        let thread_id = std::thread::current().id().as_u64().get() as u32;\n+        let thread_id = get_thread_id();\n         let raw_profiler = &profiler.profiler;\n         let timing_guard =\n             raw_profiler.start_recording_interval_event(event_kind, event_id, thread_id);\n@@ -655,6 +688,10 @@ pub fn duration_to_secs_str(dur: std::time::Duration) -> String {\n     format!(\"{:.3}\", dur.as_secs_f64())\n }\n \n+fn get_thread_id() -> u32 {\n+    std::thread::current().id().as_u64().get() as u32\n+}\n+\n // Memory reporting\n cfg_if! {\n     if #[cfg(windows)] {"}, {"sha": "392c5bdc15ad204472ec07f3d6cced7028d3bf53", "filename": "compiler/rustc_incremental/src/persist/file_format.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -95,6 +95,12 @@ where\n         return;\n     }\n \n+    sess.prof.artifact_size(\n+        &name.replace(' ', \"_\"),\n+        path_buf.file_name().unwrap().to_string_lossy(),\n+        encoder.position() as u64,\n+    );\n+\n     debug!(\"save: data written to disk successfully\");\n }\n "}, {"sha": "814581563896e3663f6347f391457bcf057819fb", "filename": "compiler/rustc_query_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_query_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_query_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2FCargo.toml?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -7,7 +7,7 @@ edition = \"2021\"\n doctest = false\n \n [dependencies]\n-measureme = \"9.0.0\"\n+measureme = \"10.0.0\"\n rustc-rayon-core = \"0.3.1\"\n tracing = \"0.1\"\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "47197a1e492a3d5901105c3894beeddac96cf6d5", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -222,7 +222,7 @@ impl<K: DepKind> EncoderState<K> {\n         index\n     }\n \n-    fn finish(self) -> FileEncodeResult {\n+    fn finish(self, profiler: &SelfProfilerRef) -> FileEncodeResult {\n         let Self { mut encoder, total_node_count, total_edge_count, result, stats: _ } = self;\n         let () = result?;\n \n@@ -235,7 +235,11 @@ impl<K: DepKind> EncoderState<K> {\n         IntEncodedWithFixedSize(edge_count).encode(&mut encoder)?;\n         debug!(\"position: {:?}\", encoder.position());\n         // Drop the encoder so that nothing is written after the counts.\n-        encoder.flush()\n+        let result = encoder.flush();\n+        // FIXME(rylev): we hardcode the dep graph file name so we don't need a dependency on\n+        // rustc_incremental just for that.\n+        profiler.artifact_size(\"dep_graph\", \"dep-graph.bin\", encoder.position() as u64);\n+        result\n     }\n }\n \n@@ -332,6 +336,6 @@ impl<K: DepKind + Encodable<FileEncoder>> GraphEncoder<K> {\n \n     pub fn finish(self, profiler: &SelfProfilerRef) -> FileEncodeResult {\n         let _prof_timer = profiler.generic_activity(\"incr_comp_encode_dep_graph\");\n-        self.status.into_inner().finish()\n+        self.status.into_inner().finish(profiler)\n     }\n }"}, {"sha": "059b5dc51756ec4cefbf240d1169a8f2604f5e38", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9533023004bc05d6bf65e1339e29aceac76f62/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3d9533023004bc05d6bf65e1339e29aceac76f62", "patch": "@@ -1283,7 +1283,7 @@ options! {\n         \"specify the events recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n-                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm\"),\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],"}]}