{"sha": "5ce5ee86bc1264fe17f96606d648409b9508e4a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZTVlZTg2YmMxMjY0ZmUxN2Y5NjYwNmQ2NDg0MDliOTUwOGU0YTM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-08-26T16:58:45Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-27T21:10:54Z"}, "message": "rustc: fix the unused pattern vars warnings.", "tree": {"sha": "83c364c0afb3e08e19bdeed39b3672b8f72102b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c364c0afb3e08e19bdeed39b3672b8f72102b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ce5ee86bc1264fe17f96606d648409b9508e4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ce5ee86bc1264fe17f96606d648409b9508e4a3", "html_url": "https://github.com/rust-lang/rust/commit/5ce5ee86bc1264fe17f96606d648409b9508e4a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ce5ee86bc1264fe17f96606d648409b9508e4a3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dc92d44be45f125265f98914dc3b5ee9b7e77a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc92d44be45f125265f98914dc3b5ee9b7e77a2", "html_url": "https://github.com/rust-lang/rust/commit/1dc92d44be45f125265f98914dc3b5ee9b7e77a2"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "a0389893b72a09055a84f483a2a94568c8fce3fa", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -109,7 +109,7 @@ fn visit_view_item(e: env, i: @ast::view_item) {\n \n fn visit_item(e: env, i: @ast::item) {\n     match i.node {\n-      ast::item_foreign_mod(m) => {\n+      ast::item_foreign_mod(_) => {\n         match attr::foreign_abi(i.attrs) {\n           either::Right(abi) => {\n             if abi != ast::foreign_abi_cdecl &&"}, {"sha": "beaabbe8b9564dc4c7564a6d7369b61bcbd75d9a", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -519,7 +519,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n       }\n-      item_fn(decl, purity, tps, _) => {\n+      item_fn(_, purity, tps, _) => {\n         add_to_index();\n         ebml_w.start_tag(tag_items_data_item);\n         encode_def_id(ebml_w, local_def(item.id));\n@@ -630,7 +630,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         needs to know*/\n         for struct_def.fields.each |f| {\n             match f.node.kind {\n-                named_field(ident, mutability, vis) => {\n+                named_field(ident, _, vis) => {\n                    ebml_w.start_tag(tag_item_field);\n                    encode_visibility(ebml_w, vis);\n                    encode_name(ecx, ebml_w, ident);\n@@ -790,7 +790,7 @@ fn encode_info_for_foreign_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n \n     ebml_w.start_tag(tag_items_data_item);\n     match nitem.node {\n-      foreign_item_fn(fn_decl, purity, tps) => {\n+      foreign_item_fn(_, purity, tps) => {\n         encode_def_id(ebml_w, local_def(nitem.id));\n         encode_family(ebml_w, purity_fn_family(purity));\n         encode_type_param_bounds(ebml_w, ecx, tps);\n@@ -803,7 +803,7 @@ fn encode_info_for_foreign_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n         }\n         encode_path(ecx, ebml_w, path, ast_map::path_name(nitem.ident));\n       }\n-      foreign_item_const(t) => {\n+      foreign_item_const(*) => {\n         encode_def_id(ebml_w, local_def(nitem.id));\n         encode_family(ebml_w, 'c');\n         encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, nitem.id));"}, {"sha": "75324ebab4a30d58aa34de1a2b12518a5f9ca962", "filename": "src/rustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ffilesearch.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -44,11 +44,11 @@ fn mk_filesearch(maybe_sysroot: Option<Path>,\n                                            self.target_triple));\n             match get_cargo_lib_path_nearest() {\n               result::ok(p) => vec::push(paths, p),\n-              result::err(p) => ()\n+              result::err(_) => ()\n             }\n             match get_cargo_lib_path() {\n               result::ok(p) => vec::push(paths, p),\n-              result::err(p) => ()\n+              result::err(_) => ()\n             }\n             paths\n         }"}, {"sha": "72388a8964e5b55a4694bb8b3b96a851f2c6ad0c", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -39,15 +39,15 @@ fn collect_freevars(def_map: resolve3::DefMap, blk: ast::blk)\n \n     let walk_expr = fn@(expr: @ast::expr, &&depth: int, v: visit::vt<int>) {\n             match expr.node {\n-              ast::expr_fn(proto, decl, _, _) => {\n+              ast::expr_fn(proto, _, _, _) => {\n                 if proto != ast::proto_bare {\n                     visit::visit_expr(expr, depth + 1, v);\n                 }\n               }\n               ast::expr_fn_block(*) => {\n                 visit::visit_expr(expr, depth + 1, v);\n               }\n-              ast::expr_path(path) => {\n+              ast::expr_path(*) => {\n                   let mut i = 0;\n                   match def_map.find(expr.id) {\n                     None => fail ~\"path not found\","}, {"sha": "42887548c3b3a9fa70d5d4bf49cf6e9a7fe649ed", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -216,7 +216,7 @@ fn resolve_arm(arm: ast::arm, cx: ctxt, visitor: visit::vt<ctxt>) {\n \n fn resolve_pat(pat: @ast::pat, cx: ctxt, visitor: visit::vt<ctxt>) {\n     match pat.node {\n-      ast::pat_ident(_, path, _) => {\n+      ast::pat_ident(*) => {\n         let defn_opt = cx.def_map.find(pat.id);\n         match defn_opt {\n           Some(ast::def_variant(_,_)) => {\n@@ -239,8 +239,8 @@ fn resolve_stmt(stmt: @ast::stmt, cx: ctxt, visitor: visit::vt<ctxt>) {\n       ast::stmt_decl(*) => {\n         visit::visit_stmt(stmt, cx, visitor);\n       }\n-      ast::stmt_expr(expr, stmt_id) |\n-      ast::stmt_semi(expr, stmt_id) => {\n+      ast::stmt_expr(_, stmt_id) |\n+      ast::stmt_semi(_, stmt_id) => {\n         record_parent(cx, stmt_id);\n         let mut expr_cx = cx;\n         expr_cx.parent = Some(stmt_id);\n@@ -259,7 +259,7 @@ fn resolve_expr(expr: @ast::expr, cx: ctxt, visitor: visit::vt<ctxt>) {\n                                                            cx.sess.intr()));\n         new_cx.parent = Some(expr.id);\n       }\n-      ast::expr_match(subexpr, _) => {\n+      ast::expr_match(*) => {\n         debug!(\"node %d: %s\", expr.id, pprust::expr_to_str(expr,\n                                                            cx.sess.intr()));\n         new_cx.parent = Some(expr.id);"}, {"sha": "0ce0cfc8acce8e02063ed7de0a04587243f262c6", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -628,7 +628,7 @@ fn compile_submatch(bcx: block, m: match_, vals: ~[ValueRef],\n                 kind = switch;\n             }\n           }\n-          lit(l) => {\n+          lit(_) => {\n             test_val = Load(bcx, val);\n             let pty = node_id_type(bcx, pat_id);\n             kind = if ty::type_is_integral(pty) { switch }\n@@ -940,7 +940,7 @@ fn bind_irrefutable_pat(bcx: block, pat: @ast::pat, val: ValueRef,\n         // Grab the class data that we care about.\n         let class_fields, class_id;\n         match ty::get(node_id_type(bcx, pat.id)).struct {\n-            ty::ty_class(cid, substs) => {\n+            ty::ty_class(cid, _) => {\n                 class_id = cid;\n                 class_fields = ty::lookup_class_fields(ccx.tcx, class_id);\n             }"}, {"sha": "73a9a0cec9b3b664a9a8805be75f4f9ab6ee8211", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -2396,7 +2396,7 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n             trans_item(ccx, *item);\n             local_def(item.id)\n           }\n-          csearch::found(ast::ii_ctor(ctor, _, tps, _)) => {\n+          csearch::found(ast::ii_ctor(ctor, _, _, _)) => {\n             ccx.external.insert(fn_id, Some(ctor.node.id));\n             local_def(ctor.node.id)\n           }\n@@ -2440,7 +2440,7 @@ fn maybe_instantiate_inline(ccx: @crate_ctxt, fn_id: ast::def_id)\n             }\n             local_def(mth.id)\n           }\n-          csearch::found(ast::ii_dtor(dtor, _, tps, _)) => {\n+          csearch::found(ast::ii_dtor(dtor, _, _, _)) => {\n               ccx.external.insert(fn_id, Some(dtor.node.id));\n               local_def(dtor.node.id)\n           }\n@@ -5425,7 +5425,7 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n                 ccx.item_symbols.insert(i.id, s);\n                 g\n               }\n-              ast::item_fn(decl, purity, _, _) => {\n+              ast::item_fn(_, purity, _, _) => {\n                 let llfn = if purity != ast::extern_fn {\n                     register_fn(ccx, i.span, my_path, i.id)\n                 } else {\n@@ -5671,7 +5671,7 @@ fn push_rtcall(ccx: @crate_ctxt, name: ~str, did: ast::def_id) {\n fn gather_local_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n     visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n         visit_item: |item| match item.node {\n-          ast::item_fn(decl, _, _, _) => {\n+          ast::item_fn(*) => {\n             let attr_metas = attr::attr_metas(\n                 attr::find_attrs_by_name(item.attrs, ~\"rt\"));\n             do vec::iter(attr_metas) |attr_meta| {"}, {"sha": "953ad280e465063e5b570fc809383400fc58e1b7", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -100,12 +100,12 @@ enum environment_value {\n \n fn ev_to_str(ccx: @crate_ctxt, ev: environment_value) -> ~str {\n     match ev {\n-      env_copy(v, t, lk) => fmt!(\"copy(%s,%s)\", val_str(ccx.tn, v),\n+      env_copy(v, t, _) => fmt!(\"copy(%s,%s)\", val_str(ccx.tn, v),\n                                 ty_to_str(ccx.tcx, t)),\n-      env_move(v, t, lk) => fmt!(\"move(%s,%s)\", val_str(ccx.tn, v),\n+      env_move(v, t, _) => fmt!(\"move(%s,%s)\", val_str(ccx.tn, v),\n                                 ty_to_str(ccx.tcx, t)),\n-      env_ref(v, t, lk) => fmt!(\"ref(%s,%s)\", val_str(ccx.tn, v),\n-                                ty_to_str(ccx.tcx, t))\n+      env_ref(v, t, _) => fmt!(\"ref(%s,%s)\", val_str(ccx.tn, v),\n+                               ty_to_str(ccx.tcx, t))\n     }\n }\n \n@@ -224,13 +224,13 @@ fn store_environment(bcx: block,\n             let src = {bcx:bcx, val:val, kind:kind};\n             bcx = move_val(bcx, INIT, bound_data, src, ty);\n           }\n-          env_ref(val, ty, lv_owned) => {\n+          env_ref(val, _, lv_owned) => {\n             debug!(\"> storing %s into %s\",\n                    val_str(bcx.ccx().tn, val),\n                    val_str(bcx.ccx().tn, bound_data));\n             Store(bcx, val, bound_data);\n           }\n-          env_ref(val, ty, lv_owned_imm) => {\n+          env_ref(val, _, lv_owned_imm) => {\n             let addr = do_spill_noroot(bcx, val);\n             Store(bcx, addr, bound_data);\n           }"}, {"sha": "12284fe344152986288e0197f00ba35a7fa0bd32", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -755,7 +755,7 @@ fn trans_foreign_mod(ccx: @crate_ctxt,\n \n     for vec::each(foreign_mod.items) |foreign_item| {\n       match foreign_item.node {\n-        ast::foreign_item_fn(fn_decl, purity, typarams) => {\n+        ast::foreign_item_fn(_, _, typarams) => {\n           let id = foreign_item.id;\n           if abi != ast::foreign_abi_rust_intrinsic {\n               let llwrapfn = get_item_val(ccx, id);"}, {"sha": "9c13218ef852ee2391548fc8db4f5d696bb40af0", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -258,12 +258,12 @@ fn trans_monomorphized_callee(bcx: block, callee_id: ast::node_id,\n              ccx, node_id_type(bcx, callee_id))))\n          with lval}\n       }\n-      typeck::vtable_trait(trait_id, tps) => {\n+      typeck::vtable_trait(*) => {\n         let {bcx, val} = trans_temp_expr(bcx, base);\n         let fty = node_id_type(bcx, callee_id);\n         trans_trait_callee(bcx, val, fty, n_method)\n       }\n-      typeck::vtable_param(n_param, n_bound) => {\n+      typeck::vtable_param(*) => {\n         fail ~\"vtable_param left in monomorphized function's vtable substs\";\n       }\n     }"}, {"sha": "be430df5d83f32bb4761030c7a9a2a2b6f780843", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -267,7 +267,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n         add_substr(s, shape_of(ccx, mt.ty));\n         s\n       }\n-      ty::ty_evec(mt, ty::vstore_uniq) => {\n+      ty::ty_evec(_, ty::vstore_uniq) => {\n         shape_of(ccx, tvec::expand_boxed_vec_ty(ccx.tcx, t))\n       }\n \n@@ -290,7 +290,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n         s\n       }\n \n-      ty::ty_estr(ty::vstore_slice(r)) => {\n+      ty::ty_estr(ty::vstore_slice(_)) => {\n         let mut s = ~[shape_slice];\n         let u8_t = ty::mk_mach_uint(ccx.tcx, ast::ty_u8);\n         add_bool(s, true); // is_pod\n@@ -299,7 +299,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n         s\n       }\n \n-      ty::ty_evec(mt, ty::vstore_slice(r)) => {\n+      ty::ty_evec(mt, ty::vstore_slice(_)) => {\n         let mut s = ~[shape_slice];\n         add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n         add_bool(s, false); // is_str"}, {"sha": "dc3715b37b8c945c05bbedc66da466d6d9937b7e", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -268,10 +268,10 @@ fn trans_vstore(bcx: block, e: @ast::expr,\n       ast::expr_lit(@{node: ast::lit_str(s), span: _}) => {\n         return trans_estr(bcx, s, Some(v), dest);\n       }\n-      ast::expr_vec(es, mutbl) => {\n+      ast::expr_vec(es, _) => {\n         return trans_evec(bcx, individual_evec(es), v, e.id, dest);\n       }\n-      ast::expr_repeat(element, count_expr, mutbl) => {\n+      ast::expr_repeat(element, count_expr, _) => {\n         let count = ty::eval_repeat_count(bcx.tcx(), count_expr, e.span);\n         return trans_evec(bcx, repeating_evec(element, count), v, e.id, dest);\n       }"}, {"sha": "e180ed95c252cfee5be053a8e65284deaa2a7302", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ce5ee86bc1264fe17f96606d648409b9508e4a3/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=5ce5ee86bc1264fe17f96606d648409b9508e4a3", "patch": "@@ -1928,7 +1928,7 @@ fn is_instantiable(cx: ctxt, r_ty: t) -> bool {\n             return type_requires(cx, seen, r_ty, mt.ty);\n           }\n \n-          ty_ptr(mt) => {\n+          ty_ptr(*) => {\n             false           // unsafe ptrs can always be NULL\n           }\n \n@@ -2137,7 +2137,7 @@ fn type_is_enum(ty: t) -> bool {\n // constructors\n fn type_is_c_like_enum(cx: ctxt, ty: t) -> bool {\n     match get(ty).struct {\n-      ty_enum(did, ref substs) => {\n+      ty_enum(did, _) => {\n         let variants = enum_variants(cx, did);\n         let some_n_ary = vec::any(*variants, |v| vec::len(v.args) > 0u);\n         return !some_n_ary;"}]}