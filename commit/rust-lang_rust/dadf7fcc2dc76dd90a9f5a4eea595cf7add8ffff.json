{"sha": "dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZGY3ZmNjMmRjNzZkZDkwYTlmNWE0ZWVhNTk1Y2Y3YWRkOGZmZmY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-14T14:10:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-14T14:10:09Z"}, "message": "Rollup merge of #56699 - nnethercote:SymbolIndex, r=oli-obk\n\nUse a `newtype_index!` within `Symbol`.\n\nThis shrinks `Option<Symbol>` from 8 bytes to 4 bytes, which shrinks\n`Token` from 24 bytes to 16 bytes. This reduces instruction counts by up\nto 1% across a range of benchmarks.\n\nr? @oli-obk", "tree": {"sha": "a9ba7855dc14b44d546cc4b0d2f3509edd68e80e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9ba7855dc14b44d546cc4b0d2f3509edd68e80e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcE7nCCRBK7hj4Ov3rIwAAdHIIAIis2LDrCnN7iTV/f31xNpkj\nS4zRRKERsIWeFwW8FIj0E963VwSkgBulKUe1W8xQu3i4lRmrNvpAxwVqCeXziCWp\nWC93TvgN8J6u//vIXkTHR2Jo55bek6IOOx1PTkzW1BZeUsGE/eIBZbdh0fQNEDZD\ncByyA9qopsDerKTvmNYd7C+s/nF9c1kezKzQKHP+kD4LSVHmtJYV5YY6QBIXPbtT\nG4FouIArPc3/gl9uM9xtWMstonhJ3TKo0tEUzlql02Wlme+/yw7YMjB7PD+l+4fd\ny/uV+xxNJG+gq+WSZaZidslHb8VJDfsMaSbitasrQ5f3prJBIkUyVwvqSClpIOA=\n=E8iu\n-----END PGP SIGNATURE-----\n", "payload": "tree a9ba7855dc14b44d546cc4b0d2f3509edd68e80e\nparent 53a2de2d549f8f3af99de7c05fa8caa7aa2f2949\nparent 0f68749260d04b61dfe2b38dbc423aefe2914a58\nauthor kennytm <kennytm@gmail.com> 1544796609 +0800\ncommitter GitHub <noreply@github.com> 1544796609 +0800\n\nRollup merge of #56699 - nnethercote:SymbolIndex, r=oli-obk\n\nUse a `newtype_index!` within `Symbol`.\n\nThis shrinks `Option<Symbol>` from 8 bytes to 4 bytes, which shrinks\n`Token` from 24 bytes to 16 bytes. This reduces instruction counts by up\nto 1% across a range of benchmarks.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff", "html_url": "https://github.com/rust-lang/rust/commit/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "url": "https://api.github.com/repos/rust-lang/rust/commits/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949", "html_url": "https://github.com/rust-lang/rust/commit/53a2de2d549f8f3af99de7c05fa8caa7aa2f2949"}, {"sha": "0f68749260d04b61dfe2b38dbc423aefe2914a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f68749260d04b61dfe2b38dbc423aefe2914a58", "html_url": "https://github.com/rust-lang/rust/commit/0f68749260d04b61dfe2b38dbc423aefe2914a58"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "ed7466574596fc586159abdc3d37c78c3783842c", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff", "patch": "@@ -207,6 +207,10 @@ pub enum Token {\n     Eof,\n }\n \n+// `Token` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Token>() == 16);\n+\n impl Token {\n     pub fn interpolated(nt: Nonterminal) -> Token {\n         Token::Interpolated(Lrc::new((nt, LazyTokenStream::new())))"}, {"sha": "9aafb9fc549fc7c5c0ef7faa1049adcf380c0514", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff", "patch": "@@ -24,10 +24,13 @@\n #![feature(nll)]\n #![feature(non_exhaustive)]\n #![feature(optin_builtin_traits)]\n+#![feature(rustc_attrs)]\n #![feature(specialization)]\n+#![feature(step_trait)]\n #![cfg_attr(not(stage0), feature(stdsimd))]\n \n extern crate arena;\n+#[macro_use]\n extern crate rustc_data_structures;\n \n #[macro_use]"}, {"sha": "b720db899a120d44be2c4fafa2db0362712d6cf8", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 39, "deletions": 22, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=dadf7fcc2dc76dd90a9f5a4eea595cf7add8ffff", "patch": "@@ -14,6 +14,7 @@\n \n use arena::DroplessArena;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::indexed_vec::Idx;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n \n use std::fmt;\n@@ -143,9 +144,18 @@ impl Decodable for Ident {\n     }\n }\n \n-/// A symbol is an interned or gensymed string.\n+/// A symbol is an interned or gensymed string. The use of newtype_index! means\n+/// that Option<Symbol> only takes up 4 bytes, because newtype_index! reserves\n+/// the last 256 values for tagging purposes.\n+///\n+/// Note that Symbol cannot be a newtype_index! directly because it implements\n+/// fmt::Debug, Encodable, and Decodable in special ways.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct Symbol(u32);\n+pub struct Symbol(SymbolIndex);\n+\n+newtype_index! {\n+    pub struct SymbolIndex { .. }\n+}\n \n // The interner is pointed to by a thread local value which is only set on the main thread\n // with parallelization is disabled. So we don't allow `Symbol` to transfer between threads\n@@ -156,6 +166,10 @@ impl !Send for Symbol { }\n impl !Sync for Symbol { }\n \n impl Symbol {\n+    const fn new(n: u32) -> Self {\n+        Symbol(SymbolIndex::from_u32_const(n))\n+    }\n+\n     /// Maps a string to its interned representation.\n     pub fn intern(string: &str) -> Self {\n         with_interner(|interner| interner.intern(string))\n@@ -189,15 +203,15 @@ impl Symbol {\n     }\n \n     pub fn as_u32(self) -> u32 {\n-        self.0\n+        self.0.as_u32()\n     }\n }\n \n impl fmt::Debug for Symbol {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let is_gensymed = with_interner(|interner| interner.is_gensymed(*self));\n         if is_gensymed {\n-            write!(f, \"{}({})\", self, self.0)\n+            write!(f, \"{}({:?})\", self, self.0)\n         } else {\n             write!(f, \"{}\", self)\n         }\n@@ -229,6 +243,9 @@ impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n }\n \n // The `&'static str`s in this type actually point into the arena.\n+//\n+// Note that normal symbols are indexed upward from 0, and gensyms are indexed\n+// downward from SymbolIndex::MAX_AS_U32.\n #[derive(Default)]\n pub struct Interner {\n     arena: DroplessArena,\n@@ -243,7 +260,7 @@ impl Interner {\n         for &string in init {\n             if string == \"\" {\n                 // We can't allocate empty strings in the arena, so handle this here.\n-                let name = Symbol(this.strings.len() as u32);\n+                let name = Symbol::new(this.strings.len() as u32);\n                 this.names.insert(\"\", name);\n                 this.strings.push(\"\");\n             } else {\n@@ -258,7 +275,7 @@ impl Interner {\n             return name;\n         }\n \n-        let name = Symbol(self.strings.len() as u32);\n+        let name = Symbol::new(self.strings.len() as u32);\n \n         // `from_utf8_unchecked` is safe since we just allocated a `&str` which is known to be\n         // UTF-8.\n@@ -276,10 +293,10 @@ impl Interner {\n     }\n \n     pub fn interned(&self, symbol: Symbol) -> Symbol {\n-        if (symbol.0 as usize) < self.strings.len() {\n+        if (symbol.0.as_usize()) < self.strings.len() {\n             symbol\n         } else {\n-            self.interned(self.gensyms[(!0 - symbol.0) as usize])\n+            self.interned(self.gensyms[(SymbolIndex::MAX_AS_U32 - symbol.0.as_u32()) as usize])\n         }\n     }\n \n@@ -290,17 +307,17 @@ impl Interner {\n \n     fn gensymed(&mut self, symbol: Symbol) -> Symbol {\n         self.gensyms.push(symbol);\n-        Symbol(!0 - self.gensyms.len() as u32 + 1)\n+        Symbol::new(SymbolIndex::MAX_AS_U32 - self.gensyms.len() as u32 + 1)\n     }\n \n     fn is_gensymed(&mut self, symbol: Symbol) -> bool {\n-        symbol.0 as usize >= self.strings.len()\n+        symbol.0.as_usize() >= self.strings.len()\n     }\n \n     pub fn get(&self, symbol: Symbol) -> &str {\n-        match self.strings.get(symbol.0 as usize) {\n+        match self.strings.get(symbol.0.as_usize()) {\n             Some(string) => string,\n-            None => self.get(self.gensyms[(!0 - symbol.0) as usize]),\n+            None => self.get(self.gensyms[(SymbolIndex::MAX_AS_U32 - symbol.0.as_u32()) as usize]),\n         }\n     }\n }\n@@ -324,7 +341,7 @@ macro_rules! declare_keywords {(\n         $(\n             #[allow(non_upper_case_globals)]\n             pub const $konst: Keyword = Keyword {\n-                ident: Ident::with_empty_ctxt(super::Symbol($index))\n+                ident: Ident::with_empty_ctxt(super::Symbol::new($index))\n             };\n         )*\n \n@@ -709,19 +726,19 @@ mod tests {\n     fn interner_tests() {\n         let mut i: Interner = Interner::default();\n         // first one is zero:\n-        assert_eq!(i.intern(\"dog\"), Symbol(0));\n+        assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n         // re-use gets the same entry:\n-        assert_eq!(i.intern(\"dog\"), Symbol(0));\n+        assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n         // different string gets a different #:\n-        assert_eq!(i.intern(\"cat\"), Symbol(1));\n-        assert_eq!(i.intern(\"cat\"), Symbol(1));\n+        assert_eq!(i.intern(\"cat\"), Symbol::new(1));\n+        assert_eq!(i.intern(\"cat\"), Symbol::new(1));\n         // dog is still at zero\n-        assert_eq!(i.intern(\"dog\"), Symbol(0));\n-        assert_eq!(i.gensym(\"zebra\"), Symbol(4294967295));\n-        // gensym of same string gets new number :\n-        assert_eq!(i.gensym(\"zebra\"), Symbol(4294967294));\n+        assert_eq!(i.intern(\"dog\"), Symbol::new(0));\n+        assert_eq!(i.gensym(\"zebra\"), Symbol::new(SymbolIndex::MAX_AS_U32));\n+        // gensym of same string gets new number:\n+        assert_eq!(i.gensym(\"zebra\"), Symbol::new(SymbolIndex::MAX_AS_U32 - 1));\n         // gensym of *existing* string gets new number:\n-        assert_eq!(i.gensym(\"dog\"), Symbol(4294967293));\n+        assert_eq!(i.gensym(\"dog\"), Symbol::new(SymbolIndex::MAX_AS_U32 - 2));\n     }\n \n     #[test]"}]}