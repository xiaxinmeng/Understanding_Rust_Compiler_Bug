{"sha": "14c167a9f6da07024a5101ffa04bc2f79ce64353", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YzE2N2E5ZjZkYTA3MDI0YTUxMDFmZmEwNGJjMmY3OWNlNjQzNTM=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-12-07T22:54:18Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2019-12-19T10:27:33Z"}, "message": "Omit default parameter types", "tree": {"sha": "a5fc10aaa8ed0cad0c08a9ff478acb23795aa322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5fc10aaa8ed0cad0c08a9ff478acb23795aa322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14c167a9f6da07024a5101ffa04bc2f79ce64353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14c167a9f6da07024a5101ffa04bc2f79ce64353", "html_url": "https://github.com/rust-lang/rust/commit/14c167a9f6da07024a5101ffa04bc2f79ce64353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14c167a9f6da07024a5101ffa04bc2f79ce64353/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd0e0086fc07422c9b1044b1db021cff6563214", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd0e0086fc07422c9b1044b1db021cff6563214", "html_url": "https://github.com/rust-lang/rust/commit/8dd0e0086fc07422c9b1044b1db021cff6563214"}], "stats": {"total": 179, "additions": 150, "deletions": 29}, "files": [{"sha": "e9ca548ca40a40f0b56b4667d759460b7c15f227", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -60,4 +60,7 @@ pub use hir_def::{\n pub use hir_expand::{\n     name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile, Origin,\n };\n-pub use hir_ty::{display::HirDisplay, CallableDef};\n+pub use hir_ty::{\n+    display::{HirDisplay, TruncateOptions},\n+    CallableDef,\n+};"}, {"sha": "9176c0629a78f3f47ffc3f4a15d7d449bc12e401", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -9,7 +9,7 @@ pub struct HirFormatter<'a, 'b, DB> {\n     fmt: &'a mut fmt::Formatter<'b>,\n     buf: String,\n     curr_size: usize,\n-    max_size: Option<usize>,\n+    truncate_options: Option<&'a TruncateOptions>,\n }\n \n pub trait HirDisplay {\n@@ -25,12 +25,12 @@ pub trait HirDisplay {\n     fn display_truncated<'a, DB>(\n         &'a self,\n         db: &'a DB,\n-        max_size: Option<usize>,\n+        truncate_options: &'a TruncateOptions,\n     ) -> HirDisplayWrapper<'a, DB, Self>\n     where\n         Self: Sized,\n     {\n-        HirDisplayWrapper(db, self, max_size)\n+        HirDisplayWrapper(db, self, Some(truncate_options))\n     }\n }\n \n@@ -66,15 +66,24 @@ where\n     }\n \n     pub fn should_truncate(&self) -> bool {\n-        if let Some(max_size) = self.max_size {\n+        if let Some(max_size) = self.truncate_options.and_then(|options| options.max_length) {\n             self.curr_size >= max_size\n         } else {\n             false\n         }\n     }\n+\n+    pub fn should_display_default_types(&self) -> bool {\n+        self.truncate_options.map(|options| options.show_default_types).unwrap_or(true)\n+    }\n+}\n+\n+pub struct TruncateOptions {\n+    pub max_length: Option<usize>,\n+    pub show_default_types: bool,\n }\n \n-pub struct HirDisplayWrapper<'a, DB, T>(&'a DB, &'a T, Option<usize>);\n+pub struct HirDisplayWrapper<'a, DB, T>(&'a DB, &'a T, Option<&'a TruncateOptions>);\n \n impl<'a, DB, T> fmt::Display for HirDisplayWrapper<'a, DB, T>\n where\n@@ -87,7 +96,7 @@ where\n             fmt: f,\n             buf: String::with_capacity(20),\n             curr_size: 0,\n-            max_size: self.2,\n+            truncate_options: self.2,\n         })\n     }\n }"}, {"sha": "7ca9e6b8a77595726a4dc5823b86906cef93b057", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -906,7 +906,38 @@ impl HirDisplay for ApplicationTy {\n                 write!(f, \"{}\", name)?;\n                 if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;\n-                    f.write_joined(&*self.parameters.0, \", \")?;\n+\n+                    let mut non_default_parameters = Vec::with_capacity(self.parameters.len());\n+                    let parameters_to_write = if f.should_display_default_types() {\n+                        self.parameters.0.as_ref()\n+                    } else {\n+                        match self\n+                            .ctor\n+                            .as_generic_def()\n+                            .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n+                            .filter(|defaults| !defaults.is_empty())\n+                        {\n+                            Option::None => self.parameters.0.as_ref(),\n+                            Option::Some(default_parameters) => {\n+                                for (i, parameter) in self.parameters.into_iter().enumerate() {\n+                                    match (parameter, default_parameters.get(i)) {\n+                                        (&Ty::Unknown, _) | (_, None) => {\n+                                            non_default_parameters.push(parameter.clone())\n+                                        }\n+                                        (_, Some(default_parameter))\n+                                            if parameter != default_parameter =>\n+                                        {\n+                                            non_default_parameters.push(parameter.clone())\n+                                        }\n+                                        _ => (),\n+                                    }\n+                                }\n+                                &non_default_parameters\n+                            }\n+                        }\n+                    };\n+\n+                    f.write_joined(parameters_to_write, \", \")?;\n                     write!(f, \">\")?;\n                 }\n             }"}, {"sha": "8674912a6263a3299b4bee20227340a4208f4c07", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 71, "deletions": 19, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n use crate::{db::RootDatabase, FileId};\n-use hir::{HirDisplay, SourceAnalyzer};\n+use hir::{HirDisplay, SourceAnalyzer, TruncateOptions};\n use ra_syntax::{\n     ast::{self, AstNode, TypeAscriptionOwner},\n     match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n@@ -23,11 +23,11 @@ pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n     file: &SourceFile,\n-    max_inlay_hint_length: Option<usize>,\n+    truncate_options: &TruncateOptions,\n ) -> Vec<InlayHint> {\n     file.syntax()\n         .descendants()\n-        .map(|node| get_inlay_hints(db, file_id, &node, max_inlay_hint_length).unwrap_or_default())\n+        .map(|node| get_inlay_hints(db, file_id, &node, truncate_options).unwrap_or_default())\n         .flatten()\n         .collect()\n }\n@@ -36,7 +36,7 @@ fn get_inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n     node: &SyntaxNode,\n-    max_inlay_hint_length: Option<usize>,\n+    truncate_options: &TruncateOptions,\n ) -> Option<Vec<InlayHint>> {\n     let analyzer = SourceAnalyzer::new(db, hir::InFile::new(file_id.into(), node), None);\n     match_ast! {\n@@ -46,38 +46,38 @@ fn get_inlay_hints(\n                     return None;\n                 }\n                 let pat = it.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, false, max_inlay_hint_length))\n+                Some(get_pat_type_hints(db, &analyzer, pat, false, truncate_options))\n             },\n             ast::LambdaExpr(it) => {\n                 it.param_list().map(|param_list| {\n                     param_list\n                         .params()\n                         .filter(|closure_param| closure_param.ascribed_type().is_none())\n                         .filter_map(|closure_param| closure_param.pat())\n-                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false, max_inlay_hint_length))\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false, truncate_options))\n                         .flatten()\n                         .collect()\n                 })\n             },\n             ast::ForExpr(it) => {\n                 let pat = it.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, false, max_inlay_hint_length))\n+                Some(get_pat_type_hints(db, &analyzer, pat, false, truncate_options))\n             },\n             ast::IfExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, true, max_inlay_hint_length))\n+                Some(get_pat_type_hints(db, &analyzer, pat, true, truncate_options))\n             },\n             ast::WhileExpr(it) => {\n                 let pat = it.condition()?.pat()?;\n-                Some(get_pat_type_hints(db, &analyzer, pat, true, max_inlay_hint_length))\n+                Some(get_pat_type_hints(db, &analyzer, pat, true, truncate_options))\n             },\n             ast::MatchArmList(it) => {\n                 Some(\n                     it\n                         .arms()\n                         .map(|match_arm| match_arm.pats())\n                         .flatten()\n-                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true, max_inlay_hint_length))\n+                        .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true, truncate_options))\n                         .flatten()\n                         .collect(),\n                 )\n@@ -92,7 +92,7 @@ fn get_pat_type_hints(\n     analyzer: &SourceAnalyzer,\n     root_pat: ast::Pat,\n     skip_root_pat_hint: bool,\n-    max_inlay_hint_length: Option<usize>,\n+    truncate_options: &TruncateOptions,\n ) -> Vec<InlayHint> {\n     let original_pat = &root_pat.clone();\n \n@@ -109,7 +109,7 @@ fn get_pat_type_hints(\n         .map(|(range, pat_type)| InlayHint {\n             range,\n             kind: InlayKind::TypeHint,\n-            label: pat_type.display_truncated(db, max_inlay_hint_length).to_string().into(),\n+            label: pat_type.display_truncated(db, truncate_options).to_string().into(),\n         })\n         .collect()\n }\n@@ -159,6 +159,58 @@ mod tests {\n \n     use crate::mock_analysis::single_file;\n \n+    #[test]\n+    fn default_generic_types_disabled() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+struct Test<K, T = u8> {\n+k: K,\n+    t: T,\n+}\n+\n+fn main() {\n+    let zz = Test { t: 23, k: 33 };\n+}\"#,\n+        );\n+\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, false).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [65; 67),\n+                kind: TypeHint,\n+                label: \"Test<i32>\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n+    #[test]\n+    fn default_generic_types_enabled() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+struct Test<K, T = u8> {\n+    k: K,\n+    t: T,\n+}\n+\n+fn main() {\n+    let zz = Test { t: 23, k: 33 };\n+}\"#,\n+        );\n+\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, true).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [69; 71),\n+                kind: TypeHint,\n+                label: \"Test<i32, u8>\",\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn let_statement() {\n         let (analysis, file_id) = single_file(\n@@ -199,7 +251,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, true).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [193; 197),\n@@ -273,7 +325,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, true).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -302,7 +354,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, true).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -350,7 +402,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, true).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [166; 170),\n@@ -413,7 +465,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, true).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [166; 170),\n@@ -476,7 +528,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, None).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, None, true).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [311; 315),\n@@ -518,7 +570,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8)).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, Some(8), true).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [74; 75),"}, {"sha": "c3244a8dd58993b1196b25b433051c5c583ddc26", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -348,9 +348,14 @@ impl Analysis {\n         &self,\n         file_id: FileId,\n         max_inlay_hint_length: Option<usize>,\n+        show_default_types_in_inlay_hints: bool,\n     ) -> Cancelable<Vec<InlayHint>> {\n+        let truncate_options = hir::TruncateOptions {\n+            max_length: max_inlay_hint_length,\n+            show_default_types: show_default_types_in_inlay_hints,\n+        };\n         self.with_db(|db| {\n-            inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree(), max_inlay_hint_length)\n+            inlay_hints::inlay_hints(db, file_id, &db.parse(file_id).tree(), &truncate_options)\n         })\n     }\n "}, {"sha": "a916c5fd6082b1479aceecf7d6c9a725ab60d69e", "filename": "crates/ra_lsp_server/src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconfig.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -31,6 +31,7 @@ pub struct ServerConfig {\n     pub lru_capacity: Option<usize>,\n \n     pub max_inlay_hint_length: Option<usize>,\n+    pub show_default_types_in_inlay_hints: bool,\n \n     /// For internal usage to make integrated tests faster.\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n@@ -51,6 +52,7 @@ impl Default for ServerConfig {\n             use_client_watching: false,\n             lru_capacity: None,\n             max_inlay_hint_length: None,\n+            show_default_types_in_inlay_hints: false,\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),\n             cargo_features: Default::default(),"}, {"sha": "01fde3b2d08dd9d6b0d4cb7bb4344091aefd8959", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -125,6 +125,7 @@ pub fn main_loop(\n                     .and_then(|it| it.line_folding_only)\n                     .unwrap_or(false),\n                 max_inlay_hint_length: config.max_inlay_hint_length,\n+                show_default_types_in_inlay_hints: config.show_default_types_in_inlay_hints,\n             }\n         };\n "}, {"sha": "9069d1f1dcd2dba3700edc21c402a834c9f99191", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -895,7 +895,11 @@ pub fn handle_inlay_hints(\n     let analysis = world.analysis();\n     let line_index = analysis.file_line_index(file_id)?;\n     Ok(analysis\n-        .inlay_hints(file_id, world.options.max_inlay_hint_length)?\n+        .inlay_hints(\n+            file_id,\n+            world.options.max_inlay_hint_length,\n+            world.options.show_default_types_in_inlay_hints,\n+        )?\n         .into_iter()\n         .map(|api_type| InlayHint {\n             label: api_type.label.to_string(),"}, {"sha": "0b6eefcbc7028587c45a0e42a3a4e6327d9fd334", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -31,6 +31,7 @@ pub struct Options {\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n     pub max_inlay_hint_length: Option<usize>,\n+    pub show_default_types_in_inlay_hints: bool,\n }\n \n /// `WorldState` is the primary mutable state of the language server"}, {"sha": "bda0002b76136cd6568e4d334c4adbcc087119b8", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -285,6 +285,11 @@\n                     \"default\": 20,\n                     \"description\": \"Maximum length for inlay hints\"\n                 },\n+                \"rust-analyzer.showDefaultTypesInInlayHints\": {\n+                    \"type\": \"boolean\",\n+                    \"default\": false,\n+                    \"description\": \"Display default types in inlay hints\"\n+                },\n                 \"rust-analyzer.cargoFeatures.noDefaultFeatures\": {\n                     \"type\": \"boolean\",\n                     \"default\": false,"}, {"sha": "26bf30e7f591878ec5471619ea428397e0eda647", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -30,6 +30,7 @@ export class Config {\n     public lruCapacity: null | number = null;\n     public displayInlayHints = true;\n     public maxInlayHintLength: null | number = null;\n+    public showDefaultTypesInInlayHints = false;\n     public excludeGlobs = [];\n     public useClientWatching = true;\n     public featureFlags = {};\n@@ -153,6 +154,11 @@ export class Config {\n                 'maxInlayHintLength',\n             ) as number;\n         }\n+        if (config.has('showDefaultTypesInInlayHints')) {\n+            this.showDefaultTypesInInlayHints = config.get(\n+                'showDefaultTypesInInlayHints',\n+            ) as boolean;\n+        }\n         if (config.has('excludeGlobs')) {\n             this.excludeGlobs = config.get('excludeGlobs') || [];\n         }"}, {"sha": "e7d1df943f9fbf90707c11bf835fa66cecbd2f0e", "filename": "editors/code/src/server.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14c167a9f6da07024a5101ffa04bc2f79ce64353/editors%2Fcode%2Fsrc%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/14c167a9f6da07024a5101ffa04bc2f79ce64353/editors%2Fcode%2Fsrc%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fserver.ts?ref=14c167a9f6da07024a5101ffa04bc2f79ce64353", "patch": "@@ -55,6 +55,8 @@ export class Server {\n                 publishDecorations: true,\n                 lruCapacity: Server.config.lruCapacity,\n                 maxInlayHintLength: Server.config.maxInlayHintLength,\n+                showDefaultTypesInInlayHints:\n+                    Server.config.showDefaultTypesInInlayHints,\n                 excludeGlobs: Server.config.excludeGlobs,\n                 useClientWatching: Server.config.useClientWatching,\n                 featureFlags: Server.config.featureFlags,"}]}