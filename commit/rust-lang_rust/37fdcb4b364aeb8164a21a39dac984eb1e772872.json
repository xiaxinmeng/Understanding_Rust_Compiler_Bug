{"sha": "37fdcb4b364aeb8164a21a39dac984eb1e772872", "node_id": "C_kwDOAAsO6NoAKDM3ZmRjYjRiMzY0YWViODE2NGEyMWEzOWRhYzk4NGViMWU3NzI4NzI", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-14T18:11:42Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-27T18:29:19Z"}, "message": "Don't unnecessarily stringify paths in diagnostics", "tree": {"sha": "7ce85ec9dc7125bdb6705362b0941d86b7ace02c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce85ec9dc7125bdb6705362b0941d86b7ace02c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37fdcb4b364aeb8164a21a39dac984eb1e772872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37fdcb4b364aeb8164a21a39dac984eb1e772872", "html_url": "https://github.com/rust-lang/rust/commit/37fdcb4b364aeb8164a21a39dac984eb1e772872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37fdcb4b364aeb8164a21a39dac984eb1e772872/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caefac034e55b3cd0568a493c85308e1fc518cda", "url": "https://api.github.com/repos/rust-lang/rust/commits/caefac034e55b3cd0568a493c85308e1fc518cda", "html_url": "https://github.com/rust-lang/rust/commit/caefac034e55b3cd0568a493c85308e1fc518cda"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "dea85d8e7f489b48341c0b3f8bb4f26509dd1296", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37fdcb4b364aeb8164a21a39dac984eb1e772872/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/37fdcb4b364aeb8164a21a39dac984eb1e772872/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=37fdcb4b364aeb8164a21a39dac984eb1e772872", "patch": "@@ -165,13 +165,13 @@ parser_use_empty_block_not_semi = expected { \"`{}`\" }, found `;`\n     .suggestion = try using { \"`{}`\" } instead\n \n parser_comparison_interpreted_as_generic =\n-    `<` is interpreted as a start of generic arguments for `{$typename}`, not a comparison\n+    `<` is interpreted as a start of generic arguments for `{$type}`, not a comparison\n     .label_args = interpreted as generic arguments\n     .label_comparison = not interpreted as comparison\n     .suggestion = try comparing the cast value\n \n parser_shift_interpreted_as_generic =\n-    `<<` is interpreted as a start of generic arguments for `{$typename}`, not a shift\n+    `<<` is interpreted as a start of generic arguments for `{$type}`, not a shift\n     .label_args = interpreted as generic arguments\n     .label_comparison = not interpreted as shift\n     .suggestion = try shifting the cast value\n@@ -184,8 +184,8 @@ parser_leading_plus_not_supported = leading `+` is not supported\n     .suggestion_remove_plus = try removing the `+`\n \n parser_parentheses_with_struct_fields = invalid `struct` delimiters or `fn` call arguments\n-    .suggestion_braces_for_struct = if `{$name}` is a struct, use braces as delimiters\n-    .suggestion_no_fields_for_fn = if `{$name}` is a function, use the arguments directly\n+    .suggestion_braces_for_struct = if `{$type}` is a struct, use braces as delimiters\n+    .suggestion_no_fields_for_fn = if `{$type}` is a function, use the arguments directly\n \n parser_labeled_loop_in_break = parentheses are required around this expression to avoid confusion with a labeled break expression\n "}, {"sha": "3d364a956d3ec4667981a5e62c7c11deb21eff05", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37fdcb4b364aeb8164a21a39dac984eb1e772872/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fdcb4b364aeb8164a21a39dac984eb1e772872/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=37fdcb4b364aeb8164a21a39dac984eb1e772872", "patch": "@@ -1,3 +1,4 @@\n+use rustc_ast::Path;\n use rustc_errors::{fluent, AddToDiagnostic, Applicability, EmissionGuarantee, IntoDiagnostic};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n@@ -536,7 +537,7 @@ pub(crate) struct ComparisonInterpretedAsGeneric {\n     #[primary_span]\n     #[label(parser::label_comparison)]\n     pub comparison: Span,\n-    pub typename: String,\n+    pub r#type: Path,\n     #[label(parser::label_args)]\n     pub args: Span,\n     #[subdiagnostic]\n@@ -549,7 +550,7 @@ pub(crate) struct ShiftInterpretedAsGeneric {\n     #[primary_span]\n     #[label(parser::label_comparison)]\n     pub shift: Span,\n-    pub typename: String,\n+    pub r#type: Path,\n     #[label(parser::label_args)]\n     pub args: Span,\n     #[subdiagnostic]\n@@ -597,7 +598,7 @@ pub(crate) struct LeadingPlusNotSupported {\n pub(crate) struct ParenthesesWithStructFields {\n     #[primary_span]\n     pub span: Span,\n-    pub name: String,\n+    pub r#type: Path,\n     #[subdiagnostic]\n     pub braces_for_struct: BracesForStructLiteral,\n     #[subdiagnostic]"}, {"sha": "02cee75a0f58adc97db3e930a02a7fd85455826e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37fdcb4b364aeb8164a21a39dac984eb1e772872/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37fdcb4b364aeb8164a21a39dac984eb1e772872/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=37fdcb4b364aeb8164a21a39dac984eb1e772872", "patch": "@@ -756,11 +756,12 @@ impl<'a> Parser<'a> {\n \n                 match self.parse_path(PathStyle::Expr) {\n                     Ok(path) => {\n-                        let typename = pprust::path_to_string(&path);\n-\n                         let span_after_type = parser_snapshot_after_type.token.span;\n-                        let expr =\n-                            mk_expr(self, lhs, self.mk_ty(path.span, TyKind::Path(None, path)));\n+                        let expr = mk_expr(\n+                            self,\n+                            lhs,\n+                            self.mk_ty(path.span, TyKind::Path(None, path.clone())),\n+                        );\n \n                         let args_span = self.look_ahead(1, |t| t.span).to(span_after_type);\n                         let suggestion = ComparisonOrShiftInterpretedAsGenericSugg {\n@@ -771,14 +772,14 @@ impl<'a> Parser<'a> {\n                         match self.token.kind {\n                             token::Lt => self.sess.emit_err(ComparisonInterpretedAsGeneric {\n                                 comparison: self.token.span,\n-                                typename,\n+                                r#type: path,\n                                 args: args_span,\n                                 suggestion,\n                             }),\n                             token::BinOp(token::Shl) => {\n                                 self.sess.emit_err(ShiftInterpretedAsGeneric {\n                                     shift: self.token.span,\n-                                    typename,\n+                                    r#type: path,\n                                     args: args_span,\n                                     suggestion,\n                                 })\n@@ -1197,9 +1198,8 @@ impl<'a> Parser<'a> {\n     ) -> Option<P<Expr>> {\n         match (seq.as_mut(), snapshot) {\n             (Err(err), Some((mut snapshot, ExprKind::Path(None, path)))) => {\n-                let name = pprust::path_to_string(&path);\n                 snapshot.bump(); // `(`\n-                match snapshot.parse_struct_fields(path, false, Delimiter::Parenthesis) {\n+                match snapshot.parse_struct_fields(path.clone(), false, Delimiter::Parenthesis) {\n                     Ok((fields, ..))\n                         if snapshot.eat(&token::CloseDelim(Delimiter::Parenthesis)) =>\n                     {\n@@ -1211,7 +1211,7 @@ impl<'a> Parser<'a> {\n                         if !fields.is_empty() {\n                             let mut replacement_err = ParenthesesWithStructFields {\n                                 span,\n-                                name,\n+                                r#type: path,\n                                 braces_for_struct: BracesForStructLiteral {\n                                     first: open_paren,\n                                     second: close_paren,"}]}