{"sha": "5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhOWMzN2I3ZjUzY2Y2ZGZiMWY1NDBjODdlM2ExZDA0ZjVkNzA0YmE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T02:13:17Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:34Z"}, "message": "librustc: De-`@mut` the borrow check stat fields", "tree": {"sha": "760195592d225010419f1c3d15dfc05aede4286d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/760195592d225010419f1c3d15dfc05aede4286d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba", "html_url": "https://github.com/rust-lang/rust/commit/5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df0c13d2ea1bcbf999ea161e69707ccaad1c0771", "url": "https://api.github.com/repos/rust-lang/rust/commits/df0c13d2ea1bcbf999ea161e69707ccaad1c0771", "html_url": "https://github.com/rust-lang/rust/commit/df0c13d2ea1bcbf999ea161e69707ccaad1c0771"}], "stats": {"total": 32, "additions": 14, "deletions": 18}, "files": [{"sha": "ae867fe67279e3b35490ca87ecc851c3ffb25649", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=5a9c37b7f53cf6dfb1f540c87e3a1d04f5d704ba", "patch": "@@ -19,7 +19,7 @@ use middle::dataflow::DataFlowContext;\n use middle::dataflow::DataFlowOperator;\n use util::ppaux::{note_and_explain_region, Repr, UserString};\n \n-use std::cell::RefCell;\n+use std::cell::{Cell, RefCell};\n use std::hashmap::{HashSet, HashMap};\n use std::ops::{BitOr, BitAnd};\n use std::result::{Result};\n@@ -84,11 +84,10 @@ pub fn check_crate(\n         root_map: root_map(),\n         write_guard_map: @RefCell::new(HashSet::new()),\n         stats: @mut BorrowStats {\n-            loaned_paths_same: 0,\n-            loaned_paths_imm: 0,\n-            stable_paths: 0,\n-            req_pure_paths: 0,\n-            guaranteed_paths: 0,\n+            loaned_paths_same: Cell::new(0),\n+            loaned_paths_imm: Cell::new(0),\n+            stable_paths: Cell::new(0),\n+            guaranteed_paths: Cell::new(0),\n         }\n     };\n     let bccx = &mut bccx;\n@@ -98,22 +97,20 @@ pub fn check_crate(\n     if tcx.sess.borrowck_stats() {\n         println(\"--- borrowck stats ---\");\n         println!(\"paths requiring guarantees: {}\",\n-                 bccx.stats.guaranteed_paths);\n+                 bccx.stats.guaranteed_paths.get());\n         println!(\"paths requiring loans     : {}\",\n-                 make_stat(bccx, bccx.stats.loaned_paths_same));\n+                 make_stat(bccx, bccx.stats.loaned_paths_same.get()));\n         println!(\"paths requiring imm loans : {}\",\n-                 make_stat(bccx, bccx.stats.loaned_paths_imm));\n+                 make_stat(bccx, bccx.stats.loaned_paths_imm.get()));\n         println!(\"stable paths              : {}\",\n-                 make_stat(bccx, bccx.stats.stable_paths));\n-        println!(\"paths requiring purity    : {}\",\n-                 make_stat(bccx, bccx.stats.req_pure_paths));\n+                 make_stat(bccx, bccx.stats.stable_paths.get()));\n     }\n \n     return (bccx.root_map, bccx.write_guard_map);\n \n     fn make_stat(bccx: &mut BorrowckCtxt, stat: uint) -> ~str {\n         let stat_f = stat as f64;\n-        let total = bccx.stats.guaranteed_paths as f64;\n+        let total = bccx.stats.guaranteed_paths.get() as f64;\n         format!(\"{} ({:.0f}%)\", stat  , stat_f * 100.0 / total)\n     }\n }\n@@ -179,11 +176,10 @@ pub struct BorrowckCtxt {\n }\n \n pub struct BorrowStats {\n-    loaned_paths_same: uint,\n-    loaned_paths_imm: uint,\n-    stable_paths: uint,\n-    req_pure_paths: uint,\n-    guaranteed_paths: uint\n+    loaned_paths_same: Cell<uint>,\n+    loaned_paths_imm: Cell<uint>,\n+    stable_paths: Cell<uint>,\n+    guaranteed_paths: Cell<uint>,\n }\n \n // The keys to the root map combine the `id` of the deref expression"}]}