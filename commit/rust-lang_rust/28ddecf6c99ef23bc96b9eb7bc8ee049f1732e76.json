{"sha": "28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZGRlY2Y2Yzk5ZWYyM2JjOTZiOWViN2JjOGVlMDQ5ZjE3MzJlNzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-06T18:16:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-06T18:16:37Z"}, "message": "modernize even more", "tree": {"sha": "7912f80008f47e240be2ed8c88f923824409f396", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7912f80008f47e240be2ed8c88f923824409f396"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "html_url": "https://github.com/rust-lang/rust/commit/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e8b376d1d21b8b697de5ef1e35a341855202ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e8b376d1d21b8b697de5ef1e35a341855202ed", "html_url": "https://github.com/rust-lang/rust/commit/f6e8b376d1d21b8b697de5ef1e35a341855202ed"}], "stats": {"total": 99, "additions": 29, "deletions": 70}, "files": [{"sha": "08b357b1eb91cabfc5103571f32ec0d59c3908b1", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -1,4 +1,5 @@\n [package]\n+edition = \"2018\"\n name = \"gen_lsp_server\"\n version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]"}, {"sha": "8779fbf0fd71e3eaec3652ed42ef0d8e68f78fde", "filename": "crates/gen_lsp_server/src/lib.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Flib.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -59,16 +59,7 @@\n //! }\n //! ```\n \n-#[macro_use]\n-extern crate failure;\n-#[macro_use]\n-extern crate log;\n-extern crate serde;\n-extern crate serde_json;\n-#[macro_use]\n-extern crate serde_derive;\n-extern crate crossbeam_channel;\n-extern crate languageserver_types;\n+use failure::{bail, format_err};\n \n mod msg;\n mod stdio;\n@@ -81,7 +72,7 @@ use languageserver_types::{\n };\n \n pub type Result<T> = ::std::result::Result<T, failure::Error>;\n-pub use {\n+pub use crate::{\n     msg::{ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse, RawResponseError},\n     stdio::{stdio_transport, Threads},\n };\n@@ -98,18 +89,18 @@ pub fn run_server(\n     sender: Sender<RawMessage>,\n     server: impl FnOnce(InitializeParams, &Receiver<RawMessage>, &Sender<RawMessage>) -> Result<()>,\n ) -> Result<()> {\n-    info!(\"lsp server initializes\");\n+    log::info!(\"lsp server initializes\");\n     let params = initialize(&receiver, &sender, caps)?;\n-    info!(\"lsp server initialized, serving requests\");\n+    log::info!(\"lsp server initialized, serving requests\");\n     server(params, &receiver, &sender)?;\n-    info!(\"lsp server waiting for exit notification\");\n+    log::info!(\"lsp server waiting for exit notification\");\n     match receiver.recv() {\n         Some(RawMessage::Notification(n)) => n\n             .cast::<Exit>()\n             .map_err(|n| format_err!(\"unexpected notification during shutdown: {:?}\", n))?,\n         m => bail!(\"unexpected message during shutdown: {:?}\", m),\n     }\n-    info!(\"lsp server shutdown complete\");\n+    log::info!(\"lsp server shutdown complete\");\n     Ok(())\n }\n "}, {"sha": "1e5384380f318824399a9d57de8155daee646003", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -1,10 +1,11 @@\n use std::io::{BufRead, Write};\n \n use languageserver_types::{notification::Notification, request::Request};\n-use serde::{de::DeserializeOwned, Serialize};\n+use serde_derive::{Deserialize, Serialize};\n use serde_json::{from_str, from_value, to_string, to_value, Value};\n+use failure::{bail, format_err};\n \n-use Result;\n+use crate::Result;\n \n #[derive(Debug, Serialize, Deserialize, Clone)]\n #[serde(untagged)]\n@@ -91,7 +92,7 @@ impl RawRequest {\n     pub fn new<R>(id: u64, params: &R::Params) -> RawRequest\n     where\n         R: Request,\n-        R::Params: Serialize,\n+        R::Params: serde::Serialize,\n     {\n         RawRequest {\n             id,\n@@ -102,7 +103,7 @@ impl RawRequest {\n     pub fn cast<R>(self) -> ::std::result::Result<(u64, R::Params), RawRequest>\n     where\n         R: Request,\n-        R::Params: DeserializeOwned,\n+        R::Params: serde::de::DeserializeOwned,\n     {\n         if self.method != R::METHOD {\n             return Err(self);\n@@ -117,7 +118,7 @@ impl RawResponse {\n     pub fn ok<R>(id: u64, result: &R::Result) -> RawResponse\n     where\n         R: Request,\n-        R::Result: Serialize,\n+        R::Result: serde::Serialize,\n     {\n         RawResponse {\n             id,\n@@ -143,7 +144,7 @@ impl RawNotification {\n     pub fn new<N>(params: &N::Params) -> RawNotification\n     where\n         N: Notification,\n-        N::Params: Serialize,\n+        N::Params: serde::Serialize,\n     {\n         RawNotification {\n             method: N::METHOD.to_string(),\n@@ -153,7 +154,7 @@ impl RawNotification {\n     pub fn cast<N>(self) -> ::std::result::Result<N::Params, RawNotification>\n     where\n         N: Notification,\n-        N::Params: DeserializeOwned,\n+        N::Params: serde::de::DeserializeOwned,\n     {\n         if self.method != N::METHOD {\n             return Err(self);\n@@ -191,12 +192,12 @@ fn read_msg_text(inp: &mut impl BufRead) -> Result<Option<String>> {\n     buf.resize(size, 0);\n     inp.read_exact(&mut buf)?;\n     let buf = String::from_utf8(buf)?;\n-    debug!(\"< {}\", buf);\n+    log::debug!(\"< {}\", buf);\n     Ok(Some(buf))\n }\n \n fn write_msg_text(out: &mut impl Write, msg: &str) -> Result<()> {\n-    debug!(\"> {}\", msg);\n+    log::debug!(\"> {}\", msg);\n     write!(out, \"Content-Length: {}\\r\\n\\r\\n\", msg.len())?;\n     out.write_all(msg.as_bytes())?;\n     out.flush()?;"}, {"sha": "35d8e46d00d06d796bc1d16705f25dbac68c3db4", "filename": "crates/gen_lsp_server/src/stdio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fstdio.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -4,8 +4,9 @@ use std::{\n };\n \n use crossbeam_channel::{bounded, Receiver, Sender};\n+use failure::bail;\n \n-use {RawMessage, Result};\n+use crate::{RawMessage, Result};\n \n pub fn stdio_transport() -> (Receiver<RawMessage>, Sender<RawMessage>, Threads) {\n     let (writer_sender, mut writer_receiver) = bounded::<RawMessage>(16);"}, {"sha": "4b8b1081679c91bfb5f72d82a495420273efd475", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -1,14 +1,6 @@\n //! ra_analyzer crate is the brain of Rust analyzer. It relies on the `salsa`\n //! crate, which provides and incremental on-demand database of facts.\n \n-extern crate fst;\n-extern crate ra_editor;\n-extern crate ra_syntax;\n-extern crate rayon;\n-extern crate relative_path;\n-extern crate rustc_hash;\n-extern crate salsa;\n-\n macro_rules! ctry {\n     ($expr:expr) => {\n         match $expr {"}, {"sha": "4ce2c5c85d9949c91412ca4984aa3759788aa511", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -1,10 +1,3 @@\n-extern crate ra_analysis;\n-extern crate ra_editor;\n-extern crate ra_syntax;\n-extern crate relative_path;\n-extern crate rustc_hash;\n-extern crate test_utils;\n-\n use ra_syntax::TextRange;\n use test_utils::assert_eq_dbg;\n "}, {"sha": "939f7fe77d185379942ccbc82a7dde92dc0d817e", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -1,11 +1,3 @@\n-extern crate clap;\n-#[macro_use]\n-extern crate failure;\n-extern crate join_to_string;\n-extern crate ra_editor;\n-extern crate ra_syntax;\n-extern crate tools;\n-\n use std::{fs, io::Read, path::Path, time::Instant};\n \n use clap::{App, Arg, SubCommand};\n@@ -97,7 +89,7 @@ fn render_test(file: &Path, line: usize) -> Result<(String, String)> {\n         *start_line <= line && line <= *start_line + t.text.lines().count()\n     });\n     let test = match test {\n-        None => bail!(\"No test found at line {} at {}\", line, file.display()),\n+        None => failure::bail!(\"No test found at line {} at {}\", line, file.display()),\n         Some((_start_line, test)) => test,\n     };\n     let file = SourceFileNode::parse(&test.text);"}, {"sha": "ce080ee971940a9446aa4e8620d29457e4767828", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -1,12 +1,3 @@\n-extern crate itertools;\n-extern crate join_to_string;\n-extern crate ra_syntax;\n-extern crate rustc_hash;\n-extern crate superslice;\n-#[cfg(test)]\n-#[macro_use]\n-extern crate test_utils as _test_utils;\n-\n mod code_actions;\n mod edit;\n mod extend_selection;\n@@ -154,7 +145,7 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::test_utils::{add_cursor, assert_eq_dbg, extract_offset};\n+    use crate::test_utils::{add_cursor, assert_eq_dbg, extract_offset, assert_eq_text};\n \n     #[test]\n     fn test_highlighting() {"}, {"sha": "f0a4f250a799b32538600c4f34c896c558bbce7d", "filename": "crates/ra_editor/src/test_utils.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftest_utils.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -1,7 +1,8 @@\n-use crate::LocalEdit;\n-pub use crate::_test_utils::*;\n use ra_syntax::{SourceFileNode, TextRange, TextUnit};\n \n+use crate::LocalEdit;\n+pub use test_utils::*;\n+\n pub fn check_action<F: Fn(&SourceFileNode, TextUnit) -> Option<LocalEdit>>(\n     before: &str,\n     after: &str,"}, {"sha": "9703e0371209c461a735cdfe7ddb2ccc72bf17df", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -238,7 +238,7 @@ fn compute_ws(left: SyntaxNodeRef, right: SyntaxNodeRef) -> &'static str {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::test_utils::{add_cursor, check_action, extract_offset, extract_range};\n+    use crate::test_utils::{add_cursor, check_action, extract_offset, extract_range, assert_eq_text};\n \n     fn check_join_lines(before: &str, after: &str) {\n         check_action(before, after, |file, offset| {"}, {"sha": "0e5c9baadd586b8680f1bb4fd8045eb84d68c612", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -20,10 +20,6 @@\n #![allow(missing_docs)]\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n-#[cfg(test)]\n-#[macro_use]\n-extern crate test_utils;\n-\n pub mod algo;\n pub mod ast;\n mod lexer;"}, {"sha": "732fb0e4ae24373017665af7dd67cb1b62c16381", "filename": "crates/ra_syntax/src/reparsing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76/crates%2Fra_syntax%2Fsrc%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Freparsing.rs?ref=28ddecf6c99ef23bc96b9eb7bc8ee049f1732e76", "patch": "@@ -179,10 +179,10 @@ fn merge_errors(\n \n #[cfg(test)]\n mod tests {\n-    use super::{\n-        super::{test_utils::extract_range, text_utils::replace_range, utils::dump_tree, SourceFileNode},\n-        reparse_block, reparse_leaf, AtomEdit, GreenNode, SyntaxError, SyntaxNodeRef,\n-};\n+    use test_utils::{extract_range, assert_eq_text};\n+\n+    use crate::{SourceFileNode, text_utils::replace_range, utils::dump_tree };\n+    use super::*;\n \n     fn do_check<F>(before: &str, replace_with: &str, reparser: F)\n     where"}]}