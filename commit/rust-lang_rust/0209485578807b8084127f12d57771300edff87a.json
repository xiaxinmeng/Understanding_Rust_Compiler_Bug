{"sha": "0209485578807b8084127f12d57771300edff87a", "node_id": "C_kwDOAAsO6NoAKDAyMDk0ODU1Nzg4MDdiODA4NDEyN2YxMmQ1Nzc3MTMwMGVkZmY4N2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T00:02:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-03T00:02:41Z"}, "message": "Auto merge of #100966 - compiler-errors:revert-remove-deferred-sized-checks, r=pnkfelix\n\nRevert \"Remove deferred sized checks\"\n\ncc: https://github.com/rust-lang/rust/pull/100652#issuecomment-1225798572\n\nI'm okay with reverting this for now, and I will look into the diagnostic regressions.\n\nThis reverts commit 33212bf7f527798a8cfa2bbb38781742f4ca718a.\n\nr? `@pnkfelix`\n\n----\n\nEDIT: This _also_ fixes #101066, a regression in method selection logic/coercion(?) due to the early registering of a `Sized` bound.", "tree": {"sha": "d01e1f984a0d1e2cc1a19d72d5725d9a2516ab78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d01e1f984a0d1e2cc1a19d72d5725d9a2516ab78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0209485578807b8084127f12d57771300edff87a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0209485578807b8084127f12d57771300edff87a", "html_url": "https://github.com/rust-lang/rust/commit/0209485578807b8084127f12d57771300edff87a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0209485578807b8084127f12d57771300edff87a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c6ce6b91b172f77c795a74bfeaf74b865146b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6ce6b91b172f77c795a74bfeaf74b865146b3f", "html_url": "https://github.com/rust-lang/rust/commit/8c6ce6b91b172f77c795a74bfeaf74b865146b3f"}, {"sha": "eda91d9291a4c728c022a81c72ac24b28a4df830", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda91d9291a4c728c022a81c72ac24b28a4df830", "html_url": "https://github.com/rust-lang/rust/commit/eda91d9291a4c728c022a81c72ac24b28a4df830"}], "stats": {"total": 282, "additions": 247, "deletions": 35}, "files": [{"sha": "17ec8afc7379c1a505370ae64b33ba2ae03ea38c", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -560,17 +560,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // We just want to check sizedness, so instead of introducing\n                     // placeholder lifetimes with probing, we just replace higher lifetimes\n                     // with fresh vars.\n-                    let arg_span = args.get(i).map(|a| a.span);\n-                    let span = arg_span.unwrap_or(expr.span);\n+                    let span = args.get(i).map(|a| a.span).unwrap_or(expr.span);\n                     let input = self.replace_bound_vars_with_fresh_vars(\n                         span,\n                         infer::LateBoundRegionConversionTime::FnCall,\n                         fn_sig.input(i),\n                     );\n-                    self.require_type_is_sized(\n-                        self.normalize_associated_types_in(span, input),\n+                    self.require_type_is_sized_deferred(\n+                        input,\n                         span,\n-                        traits::SizedArgumentType(arg_span),\n+                        traits::SizedArgumentType(None),\n                     );\n                 }\n             }\n@@ -585,11 +584,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 infer::LateBoundRegionConversionTime::FnCall,\n                 fn_sig.output(),\n             );\n-            self.require_type_is_sized(\n-                self.normalize_associated_types_in(expr.span, output),\n-                expr.span,\n-                traits::SizedReturnType,\n-            );\n+            self.require_type_is_sized_deferred(output, expr.span, traits::SizedReturnType);\n         }\n \n         // We always require that the type provided as the value for"}, {"sha": "7e746b7387ad781664a1aeca8c4ae6bb67ce376a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -439,6 +439,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn require_type_is_sized_deferred(\n+        &self,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+        code: traits::ObligationCauseCode<'tcx>,\n+    ) {\n+        if !ty.references_error() {\n+            self.deferred_sized_obligations.borrow_mut().push((ty, span, code));\n+        }\n+    }\n+\n     pub fn register_bound(\n         &self,\n         ty: Ty<'tcx>,"}, {"sha": "37c830d4e3850f14c63e2ce1b918b8ae70ae0997", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -38,6 +38,12 @@ pub struct Inherited<'a, 'tcx> {\n \n     pub(super) fulfillment_cx: RefCell<Box<dyn TraitEngine<'tcx>>>,\n \n+    // Some additional `Sized` obligations badly affect type inference.\n+    // These obligations are added in a later stage of typeck.\n+    // Removing these may also cause additional complications, see #101066.\n+    pub(super) deferred_sized_obligations:\n+        RefCell<Vec<(Ty<'tcx>, Span, traits::ObligationCauseCode<'tcx>)>>,\n+\n     // When we process a call like `c()` where `c` is a closure type,\n     // we may not have decided yet whether `c` is a `Fn`, `FnMut`, or\n     // `FnOnce` closure. In that case, we defer full resolution of the\n@@ -137,6 +143,7 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             infcx,\n             fulfillment_cx: RefCell::new(<dyn TraitEngine<'_>>::new(tcx)),\n             locals: RefCell::new(Default::default()),\n+            deferred_sized_obligations: RefCell::new(Vec::new()),\n             deferred_call_resolutions: RefCell::new(Default::default()),\n             deferred_cast_checks: RefCell::new(Vec::new()),\n             deferred_transmute_checks: RefCell::new(Vec::new()),"}, {"sha": "69eb34b5f802d25b6f5073377be737bf91893b7f", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -464,6 +464,11 @@ fn typeck_with_fallback<'tcx>(\n         fcx.resolve_rvalue_scopes(def_id.to_def_id());\n         fcx.resolve_generator_interiors(def_id.to_def_id());\n \n+        for (ty, span, code) in fcx.deferred_sized_obligations.borrow_mut().drain(..) {\n+            let ty = fcx.normalize_ty(span, ty);\n+            fcx.require_type_is_sized(ty, span, code);\n+        }\n+\n         fcx.select_all_obligations_or_error();\n \n         if !fcx.infcx.is_tainted_by_errors() {"}, {"sha": "5ff7b19d8945e635434250ddce7012c63f42e947", "filename": "src/test/incremental/const-generics/hash-tyvid-regression-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fconst-generics%2Fhash-tyvid-regression-1.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -9,6 +9,7 @@ where\n     use std::convert::TryFrom;\n     <[T; N.get()]>::try_from(())\n     //~^ error: the trait bound\n+    //~| error: the trait bound\n     //~| error: mismatched types\n }\n "}, {"sha": "00066efccb8dd2229766a28170703ca18a8388ea", "filename": "src/test/ui/associated-types/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -29,12 +29,14 @@ pub fn f1_uint_uint() {\n     f1(2u32, 4u32);\n     //~^ ERROR `u32: Foo` is not satisfied\n     //~| ERROR `u32: Foo` is not satisfied\n+    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f1_uint_int() {\n     f1(2u32, 4i32);\n     //~^ ERROR `u32: Foo` is not satisfied\n     //~| ERROR `u32: Foo` is not satisfied\n+    //~| ERROR `u32: Foo` is not satisfied\n }\n \n pub fn f2_int() {"}, {"sha": "206f4902410269912d13d6986d1c12add2cb313e", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -31,6 +31,14 @@ note: required by a bound in `f1`\n LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:29:5\n+   |\n+LL |     f1(2u32, 4u32);\n+   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n+   |\n+   = help: the trait `Foo` is implemented for `i32`\n+\n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:14\n    |\n@@ -40,7 +48,7 @@ LL |     f1(2u32, 4u32);\n    = help: the trait `Foo` is implemented for `i32`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:8\n+  --> $DIR/associated-types-path-2.rs:36:8\n    |\n LL |     f1(2u32, 4i32);\n    |     -- ^^^^ the trait `Foo` is not implemented for `u32`\n@@ -55,15 +63,23 @@ LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n    |              ^^^ required by this bound in `f1`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n-  --> $DIR/associated-types-path-2.rs:35:14\n+  --> $DIR/associated-types-path-2.rs:36:5\n+   |\n+LL |     f1(2u32, 4i32);\n+   |     ^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `u32`\n+   |\n+   = help: the trait `Foo` is implemented for `i32`\n+\n+error[E0277]: the trait bound `u32: Foo` is not satisfied\n+  --> $DIR/associated-types-path-2.rs:36:14\n    |\n LL |     f1(2u32, 4i32);\n    |              ^^^^ the trait `Foo` is not implemented for `u32`\n    |\n    = help: the trait `Foo` is implemented for `i32`\n \n error[E0308]: mismatched types\n-  --> $DIR/associated-types-path-2.rs:41:18\n+  --> $DIR/associated-types-path-2.rs:43:18\n    |\n LL |     let _: i32 = f2(2i32);\n    |            ---   ^^^^^^^^ expected `i32`, found `u32`\n@@ -75,7 +91,7 @@ help: you can convert a `u32` to an `i32` and panic if the converted value doesn\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                          ++++++++++++++++++++\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "b658ed1e9ab79e6f0dd4ef4c8c17f99c637be726", "filename": "src/test/ui/coercion/issue-101066.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fcoercion%2Fissue-101066.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fcoercion%2Fissue-101066.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fissue-101066.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+use std::convert::TryFrom;\n+\n+pub trait FieldElement {\n+    type Integer: TryFrom<usize, Error = std::num::TryFromIntError>;\n+\n+    fn valid_integer_try_from<N>(i: N) -> Result<Self::Integer, ()>\n+    where\n+        Self::Integer: TryFrom<N>,\n+    {\n+        Self::Integer::try_from(i).map_err(|_| ())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0f7520ef7f8a95a80644466eedf36a0a5902a143", "filename": "src/test/ui/feature-gates/feature-gate-unsized_fn_params.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-unsized_fn_params.stderr?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -18,11 +18,8 @@ LL |     foo(*x);\n    |         ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n-help: function arguments must have a statically known size, borrowed types always have a known size\n-   |\n-LL |     foo(&*x);\n-   |         +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "80c77edae9eb1fb0c6f3dfa69ebca00780b27857", "filename": "src/test/ui/iterators/issue-28098.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -1,12 +1,15 @@\n fn main() {\n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n \n     for _ in false {}\n     //~^ ERROR `bool` is not an iterator\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n \n     other()\n }\n@@ -16,9 +19,12 @@ pub fn other() {\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n \n     let _ = Iterator::next(&mut ());\n     //~^ ERROR `()` is not an iterator\n+    //~| ERROR `()` is not an iterator\n \n     for _ in false {}\n     //~^ ERROR `bool` is not an iterator"}, {"sha": "3256e57d4361b2a2856486dd40ed29db8177ba01", "filename": "src/test/ui/iterators/issue-28098.stderr", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-28098.stderr?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -8,8 +8,16 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:2:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:5:14\n+  --> $DIR/issue-28098.rs:7:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n@@ -18,7 +26,7 @@ LL |     for _ in false {}\n    = note: required for `bool` to implement `IntoIterator`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:8:28\n+  --> $DIR/issue-28098.rs:10:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -28,7 +36,23 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:17:28\n+  --> $DIR/issue-28098.rs:10:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:2:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:20:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -38,7 +62,15 @@ LL |     let _ = Iterator::next(&mut ());\n    = help: the trait `Iterator` is not implemented for `()`\n \n error[E0277]: `()` is not an iterator\n-  --> $DIR/issue-28098.rs:20:28\n+  --> $DIR/issue-28098.rs:20:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:25:28\n    |\n LL |     let _ = Iterator::next(&mut ());\n    |             -------------- ^^^^^^^ `()` is not an iterator\n@@ -47,15 +79,31 @@ LL |     let _ = Iterator::next(&mut ());\n    |\n    = help: the trait `Iterator` is not implemented for `()`\n \n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:25:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n error[E0277]: `bool` is not an iterator\n-  --> $DIR/issue-28098.rs:23:14\n+  --> $DIR/issue-28098.rs:29:14\n    |\n LL |     for _ in false {}\n    |              ^^^^^ `bool` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `bool`\n    = note: required for `bool` to implement `IntoIterator`\n \n-error: aborting due to 6 previous errors\n+error[E0277]: `()` is not an iterator\n+  --> $DIR/issue-28098.rs:20:13\n+   |\n+LL |     let _ = Iterator::next(&mut ());\n+   |             ^^^^^^^^^^^^^^ `()` is not an iterator\n+   |\n+   = help: the trait `Iterator` is not implemented for `()`\n+\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a32fd4566231db60224c29803608766b650b5ac8", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -32,8 +32,14 @@ impl Index<Bar<usize>> for [i32] {\n fn main() {\n     Index::index(&[] as &[i32], 2u32);\n     //~^ ERROR E0277\n+    //~| ERROR E0277\n+    //~| ERROR E0277\n     Index::index(&[] as &[i32], Foo(2u32));\n     //~^ ERROR E0277\n+    //~| ERROR E0277\n+    //~| ERROR E0277\n     Index::index(&[] as &[i32], Bar(2u32));\n     //~^ ERROR E0277\n+    //~| ERROR E0277\n+    //~| ERROR E0277\n }"}, {"sha": "d628b159a66d2067c1808cd20a7f4cbddfed58f8", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -11,8 +11,19 @@ LL |     Index::index(&[] as &[i32], 2u32);\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:33:5\n+   |\n+LL |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:35:33\n+  --> $DIR/multiple-impls.rs:37:33\n    |\n LL |     Index::index(&[] as &[i32], Foo(2u32));\n    |     ------------                ^^^^^^^^^ on impl for Foo\n@@ -24,8 +35,19 @@ LL |     Index::index(&[] as &[i32], Foo(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:37:5\n+   |\n+LL |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n-  --> $DIR/multiple-impls.rs:37:33\n+  --> $DIR/multiple-impls.rs:41:33\n    |\n LL |     Index::index(&[] as &[i32], Bar(2u32));\n    |     ------------                ^^^^^^^^^ on impl for Bar\n@@ -37,6 +59,50 @@ LL |     Index::index(&[] as &[i32], Bar(2u32));\n              <[i32] as Index<Bar<usize>>>\n              <[i32] as Index<Foo<usize>>>\n \n-error: aborting due to 3 previous errors\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:41:5\n+   |\n+LL |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/multiple-impls.rs:33:5\n+   |\n+LL |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^ trait message\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n+error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:37:5\n+   |\n+LL |     Index::index(&[] as &[i32], Foo(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Foo\n+   |\n+   = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n+error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n+  --> $DIR/multiple-impls.rs:41:5\n+   |\n+LL |     Index::index(&[] as &[i32], Bar(2u32));\n+   |     ^^^^^^^^^^^^ on impl for Bar\n+   |\n+   = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n+   = help: the following other types implement trait `Index<Idx>`:\n+             <[i32] as Index<Bar<usize>>>\n+             <[i32] as Index<Foo<usize>>>\n+\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "d0537810ce11e4a099509e5f74fec4b999f7061f", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -21,4 +21,6 @@ impl Index<usize> for [i32] {\n fn main() {\n     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n     //~^ ERROR E0277\n+    //~| ERROR E0277\n+    //~| ERROR E0277\n }"}, {"sha": "2253c5992a64a346cf88b15d91cbb3954ae9c2aa", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -9,6 +9,24 @@ LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n    = help: the trait `Index<usize>` is implemented for `[i32]`\n \n-error: aborting due to previous error\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/on-impl.rs:22:5\n+   |\n+LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the trait `Index<usize>` is implemented for `[i32]`\n+\n+error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n+  --> $DIR/on-impl.rs:22:5\n+   |\n+LL |     Index::<u32>::index(&[1, 2, 3] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n+   |\n+   = help: the trait `Index<u32>` is not implemented for `[i32]`\n+   = help: the trait `Index<usize>` is implemented for `[i32]`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "ec86213f8629df02bc4efa51d6d4bbdb0469eacc", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.rs?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -3,6 +3,7 @@ use std::ops::Add;\n fn main() {\n     <i32 as Add<u32>>::add(1, 2);\n     //~^ ERROR cannot add `u32` to `i32`\n+    //~| ERROR cannot add `u32` to `i32`\n     <i32 as Add<i32>>::add(1u32, 2);\n     //~^ ERROR mismatched types\n     <i32 as Add<i32>>::add(1, 2u32);"}, {"sha": "eaab6ff3d9a0419227d6ad01307049dbebcc021a", "filename": "src/test/ui/ufcs/ufcs-qpath-self-mismatch.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-qpath-self-mismatch.stderr?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -19,7 +19,7 @@ LL |     <i32 as Add<u32>>::add(1, 2);\n            and 48 others\n \n error[E0308]: mismatched types\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:6:28\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:7:28\n    |\n LL |     <i32 as Add<i32>>::add(1u32, 2);\n    |     ---------------------- ^^^^ expected `i32`, found `u32`\n@@ -37,7 +37,7 @@ LL |     <i32 as Add<i32>>::add(1i32, 2);\n    |                             ~~~\n \n error[E0308]: mismatched types\n-  --> $DIR/ufcs-qpath-self-mismatch.rs:8:31\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:9:31\n    |\n LL |     <i32 as Add<i32>>::add(1, 2u32);\n    |     ----------------------    ^^^^ expected `i32`, found `u32`\n@@ -54,7 +54,25 @@ help: change the type of the numeric literal from `u32` to `i32`\n LL |     <i32 as Add<i32>>::add(1, 2i32);\n    |                                ~~~\n \n-error: aborting due to 3 previous errors\n+error[E0277]: cannot add `u32` to `i32`\n+  --> $DIR/ufcs-qpath-self-mismatch.rs:4:5\n+   |\n+LL |     <i32 as Add<u32>>::add(1, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u32`\n+   |\n+   = help: the trait `Add<u32>` is not implemented for `i32`\n+   = help: the following other types implement trait `Add<Rhs>`:\n+             <&'a f32 as Add<f32>>\n+             <&'a f64 as Add<f64>>\n+             <&'a i128 as Add<i128>>\n+             <&'a i16 as Add<i16>>\n+             <&'a i32 as Add<i32>>\n+             <&'a i64 as Add<i64>>\n+             <&'a i8 as Add<i8>>\n+             <&'a isize as Add<isize>>\n+           and 48 others\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0308.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "71bbdf5dec7696600f3a02ee2544624d0c097244", "filename": "src/test/ui/unsized/issue-30355.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0209485578807b8084127f12d57771300edff87a/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr?ref=0209485578807b8084127f12d57771300edff87a", "patch": "@@ -5,11 +5,8 @@ LL |     &X(*Y)\n    |        ^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n+   = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n-help: function arguments must have a statically known size, borrowed types always have a known size\n-   |\n-LL |     &X(&*Y)\n-   |        +\n \n error: aborting due to previous error\n "}]}