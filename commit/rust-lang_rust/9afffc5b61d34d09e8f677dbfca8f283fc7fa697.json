{"sha": "9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "node_id": "C_kwDOAAsO6NoAKDlhZmZmYzViNjFkMzRkMDllOGY2NzdkYmZjYThmMjgzZmM3ZmE2OTc", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-14T17:18:26Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-14T17:18:26Z"}, "message": "Remove box expressions from HIR", "tree": {"sha": "ee86d32f7dd6e6762d7aacb99babb3f8d5d115bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee86d32f7dd6e6762d7aacb99babb3f8d5d115bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "html_url": "https://github.com/rust-lang/rust/commit/9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "669e75163957f8f2408d515ce2da3516cb31f747", "url": "https://api.github.com/repos/rust-lang/rust/commits/669e75163957f8f2408d515ce2da3516cb31f747", "html_url": "https://github.com/rust-lang/rust/commit/669e75163957f8f2408d515ce2da3516cb31f747"}], "stats": {"total": 85, "additions": 12, "deletions": 73}, "files": [{"sha": "3893875e9a405a111650ac70ef4d3cead30c2458", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -259,7 +259,6 @@ pub enum ExprPrecedence {\n     Assign,\n     AssignOp,\n \n-    Box,\n     AddrOf,\n     Let,\n     Unary,\n@@ -319,8 +318,7 @@ impl ExprPrecedence {\n             ExprPrecedence::AssignOp => AssocOp::Assign.precedence() as i8,\n \n             // Unary, prefix\n-            ExprPrecedence::Box\n-            | ExprPrecedence::AddrOf\n+            ExprPrecedence::AddrOf\n             // Here `let pats = expr` has `let pats =` as a \"unary\" prefix of `expr`.\n             // However, this is not exactly right. When `let _ = a` is the LHS of a binop we\n             // need parens sometimes. E.g. we can print `(let _ = a) && b` as `let _ = a && b`"}, {"sha": "f4b46b9a131fb8cf9c4e811defde9a885f7c275c", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -1673,7 +1673,6 @@ pub struct Expr<'hir> {\n impl Expr<'_> {\n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.kind {\n-            ExprKind::Box(_) => ExprPrecedence::Box,\n             ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n@@ -1763,7 +1762,6 @@ impl Expr<'_> {\n             | ExprKind::Lit(_)\n             | ExprKind::ConstBlock(..)\n             | ExprKind::Unary(..)\n-            | ExprKind::Box(..)\n             | ExprKind::AddrOf(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n@@ -1851,7 +1849,6 @@ impl Expr<'_> {\n             | ExprKind::InlineAsm(..)\n             | ExprKind::AssignOp(..)\n             | ExprKind::ConstBlock(..)\n-            | ExprKind::Box(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Yield(..)\n             | ExprKind::DropTemps(..)\n@@ -1862,8 +1859,7 @@ impl Expr<'_> {\n     /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n         match &self.kind {\n-            ExprKind::Box(_)\n-            | ExprKind::Array(_)\n+            ExprKind::Array(_)\n             | ExprKind::Call(..)\n             | ExprKind::Tup(_)\n             | ExprKind::Lit(_)\n@@ -1910,8 +1906,6 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n \n #[derive(Debug, HashStable_Generic)]\n pub enum ExprKind<'hir> {\n-    /// A `box x` expression.\n-    Box(&'hir Expr<'hir>),\n     /// Allow anonymous constants from an inline `const` block\n     ConstBlock(AnonConst),\n     /// An array (e.g., `[a, b, c, d]`)."}, {"sha": "234256ab553c5c65e3eac750fb27314de0e1585f", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -682,7 +682,6 @@ pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonCo\n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {\n     visitor.visit_id(expression.hir_id);\n     match expression.kind {\n-        ExprKind::Box(ref subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }"}, {"sha": "63ea6c904775f48f576c0180a1376cb0452b93c8", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -1366,10 +1366,6 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.ann.pre(self, AnnNode::Expr(expr));\n         match expr.kind {\n-            hir::ExprKind::Box(expr) => {\n-                self.word_space(\"Box::new\");\n-                self.print_call_post(std::slice::from_ref(expr));\n-            }\n             hir::ExprKind::Array(exprs) => {\n                 self.print_expr_vec(exprs);\n             }"}, {"sha": "b3998446cd57236923a89fce37a15a814a7a922b", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -283,7 +283,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let tcx = self.tcx;\n         match expr.kind {\n-            ExprKind::Box(subexpr) => self.check_expr_box(subexpr, expected),\n             ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),\n             ExprKind::Binary(op, lhs, rhs) => self.check_binop(expr, op, lhs, rhs, expected),\n             ExprKind::Assign(lhs, rhs, span) => {\n@@ -358,16 +357,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_expr_box(&self, expr: &'tcx hir::Expr<'tcx>, expected: Expectation<'tcx>) -> Ty<'tcx> {\n-        let expected_inner = expected.to_option(self).map_or(NoExpectation, |ty| match ty.kind() {\n-            ty::Adt(def, _) if def.is_box() => Expectation::rvalue_hint(self, ty.boxed_ty()),\n-            _ => NoExpectation,\n-        });\n-        let referent_ty = self.check_expr_with_expectation(expr, expected_inner);\n-        self.require_type_is_sized(referent_ty, expr.span, traits::SizedBoxType);\n-        self.tcx.mk_box(referent_ty)\n-    }\n-\n     fn check_expr_unary(\n         &self,\n         unop: hir::UnOp,"}, {"sha": "9aa6c7f103f87116c692562e9baae3548ed95d85", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -356,10 +356,6 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.walk_captures(closure);\n             }\n \n-            hir::ExprKind::Box(ref base) => {\n-                self.consume_expr(base);\n-            }\n-\n             hir::ExprKind::Yield(value, _) => {\n                 self.consume_expr(value);\n             }"}, {"sha": "1eeb7d984ee04016dd0874c1b431ade81e9650ef", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -190,7 +190,6 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n             //\n             // Some of these may be interesting in the future\n             ExprKind::Path(..)\n-            | ExprKind::Box(..)\n             | ExprKind::ConstBlock(..)\n             | ExprKind::Array(..)\n             | ExprKind::Call(..)\n@@ -478,7 +477,6 @@ impl<'a, 'tcx> Visitor<'tcx> for DropRangeVisitor<'a, 'tcx> {\n             | ExprKind::AssignOp(..)\n             | ExprKind::Binary(..)\n             | ExprKind::Block(..)\n-            | ExprKind::Box(..)\n             | ExprKind::Cast(..)\n             | ExprKind::Closure { .. }\n             | ExprKind::ConstBlock(..)"}, {"sha": "9a8d7ca9e33826adf923f0b3564de3e2c0d6309b", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -382,7 +382,6 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Err(_) => Ok(self.cat_rvalue(expr.hir_id, expr.span, expr_ty)),\n         }\n     }"}, {"sha": "fb3e9cb1263178a260786aef60b85a889a39a243", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -305,8 +305,6 @@ pub enum ObligationCauseCode<'tcx> {\n     SizedReturnType,\n     /// Yield type must be `Sized`.\n     SizedYieldType,\n-    /// Box expression result type must be `Sized`.\n-    SizedBoxType,\n     /// Inline asm operand type must be `Sized`.\n     InlineAsmSized,\n     /// `[expr; N]` requires `type_of(expr): Copy`."}, {"sha": "cecb8a61aa2f48504542913f09e9a3fb3801e520", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -780,7 +780,6 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::DropTemps(ref source) => {\n                 ExprKind::Use { source: self.mirror_expr(source) }\n             }\n-            hir::ExprKind::Box(ref value) => ExprKind::Box { value: self.mirror_expr(value) },\n             hir::ExprKind::Array(ref fields) => {\n                 ExprKind::Array { fields: self.mirror_exprs(fields) }\n             }"}, {"sha": "47e032758f23da1b90be4453357f8af649fd1246", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -300,7 +300,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         record_variants!(\n             (self, e, e.kind, Id::Node(e.hir_id), hir, Expr, ExprKind),\n             [\n-                Box, ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n+                ConstBlock, Array, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type,\n                 DropTemps, Let, If, Loop, Match, Closure, Block, Assign, AssignOp, Field, Index,\n                 Path, AddrOf, Break, Continue, Ret, InlineAsm, Struct, Repeat, Yield, Err\n             ]"}, {"sha": "36324e6f8da4aaadd3573e611b18f3111688a652", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -473,7 +473,6 @@ impl<'tcx> Visitor<'tcx> for IrMaps<'tcx> {\n             | hir::ExprKind::Struct(..)\n             | hir::ExprKind::Repeat(..)\n             | hir::ExprKind::InlineAsm(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Type(..)\n             | hir::ExprKind::Err(_)\n             | hir::ExprKind::Path(hir::QPath::TypeRelative(..))\n@@ -1059,8 +1058,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&l, r_succ)\n             }\n \n-            hir::ExprKind::Box(ref e)\n-            | hir::ExprKind::AddrOf(_, _, ref e)\n+            hir::ExprKind::AddrOf(_, _, ref e)\n             | hir::ExprKind::Cast(ref e, _)\n             | hir::ExprKind::Type(ref e, _)\n             | hir::ExprKind::DropTemps(ref e)\n@@ -1425,7 +1423,6 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr<'tcx>) {\n         | hir::ExprKind::Closure { .. }\n         | hir::ExprKind::Path(_)\n         | hir::ExprKind::Yield(..)\n-        | hir::ExprKind::Box(..)\n         | hir::ExprKind::Type(..)\n         | hir::ExprKind::Err(_) => {}\n     }"}, {"sha": "f07a64c7c3ca2ad3beb5b84f08148de432859c5d", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -179,8 +179,7 @@ enum ItemKind {\n impl<'tcx> CheckInlineAssembly<'tcx> {\n     fn check_expr(&mut self, expr: &'tcx hir::Expr<'tcx>, span: Span) {\n         match expr.kind {\n-            ExprKind::Box(..)\n-            | ExprKind::ConstBlock(..)\n+            ExprKind::ConstBlock(..)\n             | ExprKind::Array(..)\n             | ExprKind::Call(..)\n             | ExprKind::MethodCall(..)"}, {"sha": "186bfc701bc4cd701cbfb1eeb24d9d6eb28c9734", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -2944,9 +2944,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             ObligationCauseCode::SizedYieldType => {\n                 err.note(\"the yield type of a generator must have a statically known size\");\n             }\n-            ObligationCauseCode::SizedBoxType => {\n-                err.note(\"the type of a box expression must have a statically known size\");\n-            }\n             ObligationCauseCode::AssignmentLhsSized => {\n                 err.note(\"the left-hand-side of an assignment must have a statically known size\");\n             }"}, {"sha": "fe28c526be3507692d42f978ef5f1e680c274abc", "filename": "src/tools/clippy/clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finfinite_iter.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -167,7 +167,7 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n             Finite\n         },\n         ExprKind::Block(block, _) => block.expr.as_ref().map_or(Finite, |e| is_infinite(cx, e)),\n-        ExprKind::Box(e) | ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n+        ExprKind::AddrOf(BorrowKind::Ref, _, e) => is_infinite(cx, e),\n         ExprKind::Call(path, _) => {\n             if let ExprKind::Path(ref qpath) = path.kind {\n                 cx.qpath_res(qpath, path.hir_id)"}, {"sha": "f0a1b1dfe56281e29339411eade823f6b21c8bb9", "filename": "src/tools/clippy/clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -124,8 +124,7 @@ fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<(&'tcx Expr<'tcx>, Option<&'t\n #[allow(clippy::too_many_lines)]\n fn never_loop_expr(expr: &Expr<'_>, ignore_ids: &mut Vec<HirId>, main_loop_id: HirId) -> NeverLoopResult {\n     match expr.kind {\n-        ExprKind::Box(e)\n-        | ExprKind::Unary(_, e)\n+        ExprKind::Unary(_, e)\n         | ExprKind::Cast(e, _)\n         | ExprKind::Type(e, _)\n         | ExprKind::Field(e, _)"}, {"sha": "04225beeb704b69a20df0f6bcddd73f389381ac8", "filename": "src/tools/clippy/clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -321,7 +321,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n                     self.has_significant_drop = true;\n                 }\n             }\n-            ExprKind::Box(..) |\n             ExprKind::Array(..) |\n             ExprKind::Call(..) |\n             ExprKind::Unary(..) |"}, {"sha": "67618f7038addb2dee7b697369f2c088f56e3282", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_sort_by.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_sort_by.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -33,10 +33,6 @@ struct SortByKeyDetection {\n /// contains a and the other replaces it with b)\n fn mirrored_exprs(a_expr: &Expr<'_>, a_ident: &Ident, b_expr: &Expr<'_>, b_ident: &Ident) -> bool {\n     match (&a_expr.kind, &b_expr.kind) {\n-        // Two boxes with mirrored contents\n-        (ExprKind::Box(left_expr), ExprKind::Box(right_expr)) => {\n-            mirrored_exprs(left_expr, a_ident, right_expr, b_ident)\n-        },\n         // Two arrays with mirrored contents\n         (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => {\n             iter::zip(*left_exprs, *right_exprs).all(|(left, right)| mirrored_exprs(left, a_ident, right, b_ident))"}, {"sha": "e3712190e67223db03554879d323b2115d0c0fb6", "filename": "src/tools/clippy/clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fno_effect.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -127,8 +127,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => has_no_effect(cx, inner),\n+        | ExprKind::AddrOf(_, _, inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, fields, ref base) => {\n             !has_drop(cx, cx.typeck_results().expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, field.expr))\n@@ -234,8 +233,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Vec\n         | ExprKind::Type(inner, _)\n         | ExprKind::Unary(_, inner)\n         | ExprKind::Field(inner, _)\n-        | ExprKind::AddrOf(_, _, inner)\n-        | ExprKind::Box(inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n+        | ExprKind::AddrOf(_, _, inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, fields, ref base) => {\n             if has_drop(cx, cx.typeck_results().expr_ty(expr)) {\n                 None"}, {"sha": "ae7d19624ba617a4c695cc2877bb650f8c547c70", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -213,8 +213,7 @@ fn is_self_shadow(cx: &LateContext<'_>, pat: &Pat<'_>, mut expr: &Expr<'_>, hir_\n     }\n     loop {\n         expr = match expr.kind {\n-            ExprKind::Box(e)\n-            | ExprKind::AddrOf(_, _, e)\n+            ExprKind::AddrOf(_, _, e)\n             | ExprKind::Block(\n                 &Block {\n                     stmts: [],"}, {"sha": "e12681c0a0ca659d80c22383c6c10c02ae3d6681", "filename": "src/tools/clippy/clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -380,7 +380,6 @@ impl<'cx, 'sdt, 'tcx> Visitor<'tcx> for SigDropFinder<'cx, 'sdt, 'tcx> {\n             | hir::ExprKind::Assign(..)\n             | hir::ExprKind::AssignOp(..)\n             | hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::Call(..)\n             | hir::ExprKind::Field(..)\n             | hir::ExprKind::If(..)"}, {"sha": "bc4adf1596d44d5fc890642306ae22621d086257", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -395,11 +395,6 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 }\n                 self.expr(field!(let_expr.init));\n             },\n-            ExprKind::Box(inner) => {\n-                bind!(self, inner);\n-                kind!(\"Box({inner})\");\n-                self.expr(inner);\n-            },\n             ExprKind::Array(elements) => {\n                 bind!(self, elements);\n                 kind!(\"Array({elements})\");"}, {"sha": "d3a6929f67e2ce5634c1f6769e192f840043eeda", "filename": "src/tools/clippy/clippy_utils/src/check_proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fcheck_proc_macro.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -112,7 +112,6 @@ fn qpath_search_pat(path: &QPath<'_>) -> (Pat, Pat) {\n /// Get the search patterns to use for the given expression\n fn expr_search_pat(tcx: TyCtxt<'_>, e: &Expr<'_>) -> (Pat, Pat) {\n     match e.kind {\n-        ExprKind::Box(e) => (Pat::Str(\"box\"), expr_search_pat(tcx, e).1),\n         ExprKind::ConstBlock(_) => (Pat::Str(\"const\"), Pat::Str(\"}\")),\n         ExprKind::Tup([]) => (Pat::Str(\")\"), Pat::Str(\"(\")),\n         ExprKind::Unary(UnOp::Deref, e) => (Pat::Str(\"*\"), expr_search_pat(tcx, e).1),"}, {"sha": "babbc7294a17348c2d4c0878bc39a9701072eebd", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -199,8 +199,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 },\n \n                 // Memory allocation, custom operator, loop, or call to an unknown function\n-                ExprKind::Box(_)\n-                | ExprKind::Unary(..)\n+                ExprKind::Unary(..)\n                 | ExprKind::Binary(..)\n                 | ExprKind::Loop(..)\n                 | ExprKind::Call(..) => self.eagerness = Lazy,"}, {"sha": "3a6d23ca5c10221b7a81c80f9f389f79e2b1e957", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -249,7 +249,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 both(&li.label, &ri.label, |l, r| l.ident.name == r.ident.name)\n                     && both(le, re, |l, r| self.eq_expr(l, r))\n             },\n-            (&ExprKind::Box(l), &ExprKind::Box(r)) => self.eq_expr(l, r),\n             (&ExprKind::Call(l_fun, l_args), &ExprKind::Call(r_fun, r_args)) => {\n                 self.inner.allow_side_effects && self.eq_expr(l_fun, r_fun) && self.eq_exprs(l_args, r_args)\n             },\n@@ -628,7 +627,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_expr(j);\n                 }\n             },\n-            ExprKind::Box(e) | ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n+            ExprKind::DropTemps(e) | ExprKind::Yield(e, _) => {\n                 self.hash_expr(e);\n             },\n             ExprKind::Call(fun, args) => {"}, {"sha": "44cb5d5756ada6abd2864a5e9088b5d641449d0d", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -133,7 +133,6 @@ impl<'a> Sugg<'a> {\n \n         match expr.kind {\n             hir::ExprKind::AddrOf(..)\n-            | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n             | hir::ExprKind::Closure { .. }"}, {"sha": "86a93f64fb71e78ac5ec52be54d362a8fec4fca0", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afffc5b61d34d09e8f677dbfca8f283fc7fa697/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=9afffc5b61d34d09e8f677dbfca8f283fc7fa697", "patch": "@@ -600,7 +600,6 @@ pub fn for_each_unconsumed_temporary<'tcx, B>(\n                 helper(typeck, false, e, f)?;\n             },\n             ExprKind::Block(&Block { expr: Some(e), .. }, _)\n-            | ExprKind::Box(e)\n             | ExprKind::Cast(e, _)\n             | ExprKind::Unary(_, e) => {\n                 helper(typeck, true, e, f)?;"}]}