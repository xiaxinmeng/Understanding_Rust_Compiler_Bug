{"sha": "8b1fc4b842929961f2f6a09d7c44ec010150ed77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMWZjNGI4NDI5Mjk5NjFmMmY2YTA5ZDdjNDRlYzAxMDE1MGVkNzc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-11-24T22:12:09Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-12-07T22:31:23Z"}, "message": "Generate difference warnings for markdown files as well", "tree": {"sha": "02078a0fe337fe1b184962338dff25633b2a9441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02078a0fe337fe1b184962338dff25633b2a9441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b1fc4b842929961f2f6a09d7c44ec010150ed77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b1fc4b842929961f2f6a09d7c44ec010150ed77", "html_url": "https://github.com/rust-lang/rust/commit/8b1fc4b842929961f2f6a09d7c44ec010150ed77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b1fc4b842929961f2f6a09d7c44ec010150ed77/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c49f401fecd8c5ef42a33a070a61daa2b911b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c49f401fecd8c5ef42a33a070a61daa2b911b47", "html_url": "https://github.com/rust-lang/rust/commit/9c49f401fecd8c5ef42a33a070a61daa2b911b47"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "fbff6e83fb911a5b59a735c0b71e62b4104e8a37", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b1fc4b842929961f2f6a09d7c44ec010150ed77/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1fc4b842929961f2f6a09d7c44ec010150ed77/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8b1fc4b842929961f2f6a09d7c44ec010150ed77", "patch": "@@ -2521,7 +2521,7 @@ pub struct Span {\n }\n \n impl Span {\n-    fn empty() -> Span {\n+    pub fn empty() -> Span {\n         Span {\n             filename: \"\".to_string(),\n             loline: 0, locol: 0,"}, {"sha": "8478fd6c5fdc7b64d50192d4b6b11b1783413c19", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b1fc4b842929961f2f6a09d7c44ec010150ed77/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1fc4b842929961f2f6a09d7c44ec010150ed77/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8b1fc4b842929961f2f6a09d7c44ec010150ed77", "patch": "@@ -421,7 +421,7 @@ impl ToJson for IndexItemFunctionType {\n thread_local!(static CACHE_KEY: RefCell<Arc<Cache>> = Default::default());\n thread_local!(pub static CURRENT_LOCATION_KEY: RefCell<Vec<String>> =\n                     RefCell::new(Vec::new()));\n-thread_local!(static USED_ID_MAP: RefCell<FxHashMap<String, usize>> =\n+thread_local!(pub static USED_ID_MAP: RefCell<FxHashMap<String, usize>> =\n                     RefCell::new(init_ids()));\n \n fn init_ids() -> FxHashMap<String, usize> {\n@@ -699,7 +699,10 @@ fn print_message(msg: &str, intro_msg: &mut bool, span: &Span, text: &str) {\n     println!(\"{}\", msg);\n }\n \n-fn render_difference(diff: &html_diff::Difference, intro_msg: &mut bool, span: &Span, text: &str) {\n+pub fn render_difference(diff: &html_diff::Difference,\n+                         intro_msg: &mut bool,\n+                         span: &Span,\n+                         text: &str) {\n     match *diff {\n         html_diff::Difference::NodeType { ref elem, ref opposite_elem } => {\n             print_message(&format!(\"    {} Types differ: expected: `{}`, found: `{}`\","}, {"sha": "1fdfa17a8dd3449b4342b0f3663591f02ea8f8a7", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8b1fc4b842929961f2f6a09d7c44ec010150ed77/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b1fc4b842929961f2f6a09d7c44ec010150ed77/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=8b1fc4b842929961f2f6a09d7c44ec010150ed77", "patch": "@@ -19,10 +19,15 @@ use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n use syntax::codemap::DUMMY_SP;\n \n+use clean::Span;\n+\n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n+use html_diff;\n+\n use html::render::reset_ids;\n use html::escape::Escape;\n+use html::render::{USED_ID_MAP, render_difference};\n use html::markdown;\n use html::markdown::{Markdown, MarkdownWithToc, find_testable_code, old_find_testable_code};\n use html::markdown::RenderType;\n@@ -52,6 +57,10 @@ fn extract_leading_metadata<'a>(s: &'a str) -> (Vec<&'a str>, &'a str) {\n pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n               external_html: &ExternalHtml, include_toc: bool,\n               render_type: RenderType) -> isize {\n+    // Span used for markdown hoedown/pulldown differences.\n+    let mut span = Span::empty();\n+    span.filename = input.to_owned();\n+\n     let input_p = Path::new(input);\n     output.push(input_p.file_stem().unwrap());\n     output.set_extension(\"html\");\n@@ -89,12 +98,44 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n     reset_ids(false);\n \n-    let rendered = if include_toc {\n-        format!(\"{}\", MarkdownWithToc(text, render_type))\n+    let (hoedown_output, pulldown_output) = if include_toc {\n+        // Save the state of USED_ID_MAP so it only gets updated once even\n+        // though we're rendering twice.\n+        let orig_used_id_map = USED_ID_MAP.with(|map| map.borrow().clone());\n+        let hoedown_output = format!(\"{}\", MarkdownWithToc(text, RenderType::Hoedown));\n+        USED_ID_MAP.with(|map| *map.borrow_mut() = orig_used_id_map);\n+        let pulldown_output = format!(\"{}\", MarkdownWithToc(text, RenderType::Pulldown));\n+        (hoedown_output, pulldown_output)\n     } else {\n-        format!(\"{}\", Markdown(text, render_type))\n+        // Save the state of USED_ID_MAP so it only gets updated once even\n+        // though we're rendering twice.\n+        let orig_used_id_map = USED_ID_MAP.with(|map| map.borrow().clone());\n+        let hoedown_output = format!(\"{}\", Markdown(text, RenderType::Hoedown));\n+        USED_ID_MAP.with(|map| *map.borrow_mut() = orig_used_id_map);\n+        let pulldown_output = format!(\"{}\", Markdown(text, RenderType::Pulldown));\n+        (hoedown_output, pulldown_output)\n     };\n \n+    let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n+    differences.retain(|s| {\n+        match *s {\n+            html_diff::Difference::NodeText { ref elem_text,\n+                                              ref opposite_elem_text,\n+                                              .. }\n+                if elem_text.split_whitespace().eq(opposite_elem_text.split_whitespace()) => {\n+                    false\n+            }\n+            _ => true,\n+        }\n+    });\n+\n+    if !differences.is_empty() {\n+        let mut intro_msg = false;\n+        for diff in differences {\n+            render_difference(&diff, &mut intro_msg, &span, text);\n+        }\n+    }\n+\n     let err = write!(\n         &mut out,\n         r#\"<!DOCTYPE html>\n@@ -126,16 +167,16 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n         css = css,\n         in_header = external_html.in_header,\n         before_content = external_html.before_content,\n-        text = rendered,\n+        text = if render_type == RenderType::Pulldown { pulldown_output } else { hoedown_output },\n         after_content = external_html.after_content,\n-        );\n+    );\n \n     match err {\n         Err(e) => {\n             eprintln!(\"rustdoc: cannot write to `{}`: {}\", output.display(), e);\n             6\n         }\n-        Ok(_) => 0\n+        Ok(_) => 0,\n     }\n }\n "}]}