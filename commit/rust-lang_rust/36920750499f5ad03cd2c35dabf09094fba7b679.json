{"sha": "36920750499f5ad03cd2c35dabf09094fba7b679", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OTIwNzUwNDk5ZjVhZDAzY2QyYzM1ZGFiZjA5MDk0ZmJhN2I2Nzk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-06T06:30:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-06T06:30:16Z"}, "message": "Rollup merge of #67800 - Aaron1011:fix/mir-generic-instance, r=oli-obk\n\nFix ICE involving calling `Instance.ty` during const evaluation\n\nFixes #67639\n\n`Instance.ty` assumes that we are in a fully monomorphic context (e.g.\ncodegen), and can therefore use an empty `ParamEnv` when performing\nnormalization. Howver, the MIR constant evaluator code ends up calling\n`Instance.ty` as a result of us attemptign to 'speculatively'\nconst-evaluate generic functions during const propagation.\n\nAs a result,\nwe may end up with projections involving type parameters\n(e.g. <T as MyTrait>::Bar>) in the type we are trying to normalize.\nNormalization expects us to have proper predicates in the `ParamEnv` for\nsuch projections, and will ICE if we don't.\n\nThis commit adds a new method `Instance.ty_env`, which takes a\n`ParamEnv` for use during normalization. The MIR const-evaluator code is\nchanged to use this method, passing in the proper `ParamEnv` for the\ncontext at hand.", "tree": {"sha": "b031b79a5a4da555152caeb52b07fa3694bb6f7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b031b79a5a4da555152caeb52b07fa3694bb6f7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36920750499f5ad03cd2c35dabf09094fba7b679", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeEtP4CRBK7hj4Ov3rIwAAdHIIAKBdo6deRRsPZ7zEYi9lyqKN\nBPjBqIzO3N8Ztp0oRqoDey9t8bwHoirjG6UE91pFJ188w382hRIx/XsXrMwalQhf\nCuDV61llIFM+D1hLiIAmNFDQApzfQ0SdKsXu5+nPJjp21rqA3+zDGnJZFQtwGSXd\nEhjDU9NWeQldcVL38xbDbENqPpyBcpnF4CYh4VQg9c6rvyVf8fTzMeTsKobfgsc1\nY6+rYDqx6uHss5jJ9EyySa54mIdfvw1R+Cbvf5Fb/mfBtfjz9rPSYxviFoxCWeXI\nO0LYnf4T+uhnB9AMFFt/FCj0vNwDWF4Hgn5A0pqfgQ/XlaVKKvAmUjjAqu3gAB8=\n=r7mr\n-----END PGP SIGNATURE-----\n", "payload": "tree b031b79a5a4da555152caeb52b07fa3694bb6f7e\nparent 33640f0e03af2fb31ce380d5389d5545f24ce29a\nparent 336b902f669167d09782702dffcc12513ebc8950\nauthor Dylan DPC <dylan.dpc@gmail.com> 1578292216 +0530\ncommitter GitHub <noreply@github.com> 1578292216 +0530\n\nRollup merge of #67800 - Aaron1011:fix/mir-generic-instance, r=oli-obk\n\nFix ICE involving calling `Instance.ty` during const evaluation\n\nFixes #67639\n\n`Instance.ty` assumes that we are in a fully monomorphic context (e.g.\ncodegen), and can therefore use an empty `ParamEnv` when performing\nnormalization. Howver, the MIR constant evaluator code ends up calling\n`Instance.ty` as a result of us attemptign to 'speculatively'\nconst-evaluate generic functions during const propagation.\n\nAs a result,\nwe may end up with projections involving type parameters\n(e.g. <T as MyTrait>::Bar>) in the type we are trying to normalize.\nNormalization expects us to have proper predicates in the `ParamEnv` for\nsuch projections, and will ICE if we don't.\n\nThis commit adds a new method `Instance.ty_env`, which takes a\n`ParamEnv` for use during normalization. The MIR const-evaluator code is\nchanged to use this method, passing in the proper `ParamEnv` for the\ncontext at hand.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36920750499f5ad03cd2c35dabf09094fba7b679", "html_url": "https://github.com/rust-lang/rust/commit/36920750499f5ad03cd2c35dabf09094fba7b679", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36920750499f5ad03cd2c35dabf09094fba7b679/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33640f0e03af2fb31ce380d5389d5545f24ce29a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33640f0e03af2fb31ce380d5389d5545f24ce29a", "html_url": "https://github.com/rust-lang/rust/commit/33640f0e03af2fb31ce380d5389d5545f24ce29a"}, {"sha": "336b902f669167d09782702dffcc12513ebc8950", "url": "https://api.github.com/repos/rust-lang/rust/commits/336b902f669167d09782702dffcc12513ebc8950", "html_url": "https://github.com/rust-lang/rust/commit/336b902f669167d09782702dffcc12513ebc8950"}], "stats": {"total": 86, "additions": 73, "deletions": 13}, "files": [{"sha": "e315de115688b3a6f6a1a406619560de31cc953c", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -62,10 +62,35 @@ pub enum InstanceDef<'tcx> {\n }\n \n impl<'tcx> Instance<'tcx> {\n-    pub fn ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    /// Returns the `Ty` corresponding to this `Instance`,\n+    /// with generic substitutions applied and lifetimes erased.\n+    ///\n+    /// This method can only be called when the 'substs' for this Instance\n+    /// are fully monomorphic (no `ty::Param`'s are present).\n+    /// This is usually the case (e.g. during codegen).\n+    /// However, during constant evaluation, we may want\n+    /// to try to resolve a `Instance` using generic parameters\n+    /// (e.g. when we are attempting to to do const-propagation).\n+    /// In this case, `Instance.ty_env` should be used to provide\n+    /// the `ParamEnv` for our generic context.\n+    pub fn monomorphic_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         let ty = tcx.type_of(self.def.def_id());\n+        // There shouldn't be any params - if there are, then\n+        // Instance.ty_env should have been used to provide the proper\n+        // ParamEnv\n+        if self.substs.has_param_types() {\n+            bug!(\"Instance.ty called for type {:?} with params in substs: {:?}\", ty, self.substs);\n+        }\n         tcx.subst_and_normalize_erasing_regions(self.substs, ty::ParamEnv::reveal_all(), &ty)\n     }\n+\n+    /// Like `Instance.ty`, but allows a `ParamEnv` to be specified for use during\n+    /// normalization. This method is only really useful during constant evaluation,\n+    /// where we are dealing with potentially generic types.\n+    pub fn ty_env(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n+        let ty = tcx.type_of(self.def.def_id());\n+        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, &ty)\n+    }\n }\n \n impl<'tcx> InstanceDef<'tcx> {"}, {"sha": "5f599034e7d4d25512c015672ce1835bbee8f77c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -2301,7 +2301,7 @@ impl<'tcx> ty::Instance<'tcx> {\n     // or should go through `FnAbi` instead, to avoid losing any\n     // adjustments `FnAbi::of_instance` might be performing.\n     fn fn_sig_for_fn_abi(&self, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.ty(tcx);\n+        let ty = self.monomorphic_ty(tcx);\n         match ty.kind {\n             ty::FnDef(..) |\n             // Shims currently have type FnPtr. Not sure this should remain."}, {"sha": "78dd6fc8ffe750d80f504b366a6a6b0922576606", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -36,7 +36,7 @@ pub fn get_fn(cx: &CodegenCx<'ll, 'tcx>, instance: Instance<'tcx>) -> &'ll Value\n     }\n \n     let sym = tcx.symbol_name(instance).name.as_str();\n-    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.ty(cx.tcx()), sym);\n+    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.monomorphic_ty(cx.tcx()), sym);\n \n     let fn_abi = FnAbi::of_instance(cx, instance, &[]);\n "}, {"sha": "bccf3f5735cc871cebf7bb105e7e7e67aa2abfce", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -204,7 +204,7 @@ impl CodegenCx<'ll, 'tcx> {\n             def_id\n         );\n \n-        let ty = instance.ty(self.tcx);\n+        let ty = instance.monomorphic_ty(self.tcx);\n         let sym = self.tcx.symbol_name(instance).name;\n \n         debug!(\"get_static: sym={} instance={:?}\", sym, instance);\n@@ -361,7 +361,7 @@ impl StaticMethods for CodegenCx<'ll, 'tcx> {\n             };\n \n             let instance = Instance::mono(self.tcx, def_id);\n-            let ty = instance.ty(self.tcx);\n+            let ty = instance.monomorphic_ty(self.tcx);\n             let llty = self.layout_of(ty).llvm_type(self);\n             let g = if val_llty == llty {\n                 g"}, {"sha": "a1e81c10b415ee90de4f813edee03b961bd1c9eb", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -2287,7 +2287,7 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n     };\n \n     let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n-    let variable_type = Instance::mono(cx.tcx, def_id).ty(cx.tcx);\n+    let variable_type = Instance::mono(cx.tcx, def_id).monomorphic_ty(cx.tcx);\n     let type_metadata = type_metadata(cx, variable_type, span);\n     let var_name = SmallCStr::new(&tcx.item_name(def_id).as_str());\n     let linkage_name = if no_mangle {"}, {"sha": "1c7146308389aa4acb4754391308b892c84ed1f6", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -89,7 +89,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         span: Span,\n     ) {\n         let tcx = self.tcx;\n-        let callee_ty = instance.ty(tcx);\n+        let callee_ty = instance.monomorphic_ty(tcx);\n \n         let (def_id, substs) = match callee_ty.kind {\n             ty::FnDef(def_id, substs) => (def_id, substs),"}, {"sha": "681bc1f2dcb77b30af5f6954593bfe62c54dfc45", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -22,7 +22,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         symbol_name: &str,\n     ) {\n         let instance = Instance::mono(self.tcx, def_id);\n-        let ty = instance.ty(self.tcx);\n+        let ty = instance.monomorphic_ty(self.tcx);\n         let llty = self.layout_of(ty).llvm_type(self);\n \n         let g = self.define_global(symbol_name, llty).unwrap_or_else(|| {"}, {"sha": "46e76512d35fc16d4a3cd8baca22276163da4cf6", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -221,7 +221,7 @@ pub fn const_eval_validated_provider<'tcx>(\n     // We call `const_eval` for zero arg intrinsics, too, in order to cache their value.\n     // Catch such calls and evaluate them instead of trying to load a constant's MIR.\n     if let ty::InstanceDef::Intrinsic(def_id) = key.value.instance.def {\n-        let ty = key.value.instance.ty(tcx);\n+        let ty = key.value.instance.ty_env(tcx, key.param_env);\n         let substs = match ty.kind {\n             ty::FnDef(_, substs) => substs,\n             _ => bug!(\"intrinsic with type {:?}\", ty),"}, {"sha": "a28bb539fd0703f6ef8ba947b1420029e3ac84e7", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -204,7 +204,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // ABI check\n         {\n             let callee_abi = {\n-                let instance_ty = instance.ty(*self.tcx);\n+                let instance_ty = instance.ty_env(*self.tcx, self.param_env);\n                 match instance_ty.kind {\n                     ty::FnDef(..) => instance_ty.fn_sig(*self.tcx).abi(),\n                     ty::Closure(..) => Abi::RustCall,"}, {"sha": "efbbca534856a694555a5fd68f5ad82fe90c0481", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -140,7 +140,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // to determine the type.\n         let drop_instance = self.memory.get_fn(drop_fn)?.as_instance()?;\n         trace!(\"Found drop fn: {:?}\", drop_instance);\n-        let fn_sig = drop_instance.ty(*self.tcx).fn_sig(*self.tcx);\n+        let fn_sig = drop_instance.ty_env(*self.tcx, self.param_env).fn_sig(*self.tcx);\n         let fn_sig = self.tcx.normalize_erasing_late_bound_regions(self.param_env, &fn_sig);\n         // The drop function takes `*mut T` where `T` is the type being dropped, so get that.\n         let args = fn_sig.inputs();"}, {"sha": "dca850462ce2ea6d2465662961f470fe67ac5364", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -358,7 +358,7 @@ fn collect_items_rec<'tcx>(\n             // Sanity check whether this ended up being collected accidentally\n             debug_assert!(should_monomorphize_locally(tcx, &instance));\n \n-            let ty = instance.ty(tcx);\n+            let ty = instance.monomorphic_ty(tcx);\n             visit_drop_use(tcx, ty, true, &mut neighbors);\n \n             recursion_depth_reset = None;\n@@ -1002,7 +1002,8 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n                             def_id_to_string(self.tcx, def_id)\n                         );\n \n-                        let ty = Instance::new(def_id, InternalSubsts::empty()).ty(self.tcx);\n+                        let ty =\n+                            Instance::new(def_id, InternalSubsts::empty()).monomorphic_ty(self.tcx);\n                         visit_drop_use(self.tcx, ty, true, self.output);\n                     }\n                 }"}, {"sha": "21851a725254f7943d395f2bfacfeddf875c1f9f", "filename": "src/test/ui/mir/issue-67639-normalization-ice.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Ftest%2Fui%2Fmir%2Fissue-67639-normalization-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36920750499f5ad03cd2c35dabf09094fba7b679/src%2Ftest%2Fui%2Fmir%2Fissue-67639-normalization-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-67639-normalization-ice.rs?ref=36920750499f5ad03cd2c35dabf09094fba7b679", "patch": "@@ -0,0 +1,34 @@\n+// compile-flags: -Z mir-opt-level=3\n+// build-pass\n+\n+// This used to ICE in const-prop due\n+// to an empty ParamEnv being used during normalization\n+// of a generic type\n+\n+\n+fn main() {\n+    join_all::<u32>();\n+}\n+\n+trait Foo {\n+    type Item;\n+}\n+\n+impl Foo for u32 {\n+    type Item = u8;\n+}\n+\n+trait Bar {\n+    type Item2;\n+}\n+\n+impl Bar for u8 {\n+    type Item2 = u64;\n+}\n+\n+fn join_all<I>()\n+where I: Foo,\n+    I::Item: Bar\n+{\n+    Vec::<<I::Item as Bar>::Item2>::new(); // ICE occurs processing this line\n+}"}]}