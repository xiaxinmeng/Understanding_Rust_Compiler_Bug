{"sha": "48acd7d455be43960d67632adc9eb176a10a8afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWNkN2Q0NTViZTQzOTYwZDY3NjMyYWRjOWViMTc2YTEwYThhZmU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-11-28T14:26:30Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Draft the new lsp handler", "tree": {"sha": "033d93cf7311e1aafdf461a36ec085a431020850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/033d93cf7311e1aafdf461a36ec085a431020850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48acd7d455be43960d67632adc9eb176a10a8afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48acd7d455be43960d67632adc9eb176a10a8afe", "html_url": "https://github.com/rust-lang/rust/commit/48acd7d455be43960d67632adc9eb176a10a8afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48acd7d455be43960d67632adc9eb176a10a8afe/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd0626dbfea6816d38e6f72ce84f567877603e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0626dbfea6816d38e6f72ce84f567877603e7", "html_url": "https://github.com/rust-lang/rust/commit/dfd0626dbfea6816d38e6f72ce84f567877603e7"}], "stats": {"total": 76, "additions": 52, "deletions": 24}, "files": [{"sha": "ce6a44e57dbffac4bdf0a8b3fc2914606136f21e", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=48acd7d455be43960d67632adc9eb176a10a8afe", "patch": "@@ -3,11 +3,8 @@\n use std::fmt;\n \n use hir::{Documentation, ModPath, Mutability};\n-use ide_db::helpers::{\n-    insert_use::{self, ImportScope, MergeBehaviour},\n-    mod_path_to_ast,\n-};\n-use syntax::{algo, TextRange};\n+use ide_db::helpers::insert_use::{ImportScope, MergeBehaviour};\n+use syntax::TextRange;\n use text_edit::TextEdit;\n \n use crate::config::SnippetCap;\n@@ -65,6 +62,10 @@ pub struct CompletionItem {\n     /// Indicates that a reference or mutable reference to this variable is a\n     /// possible match.\n     ref_match: Option<(Mutability, CompletionScore)>,\n+\n+    /// The data later to be used in the `completionItem/resolve` response\n+    /// to add the insert import edit.\n+    import_to_add: Option<ImportToAdd>,\n }\n \n // We use custom debug for CompletionItem to make snapshot tests more readable.\n@@ -294,11 +295,9 @@ impl Builder {\n         let mut label = self.label;\n         let mut lookup = self.lookup;\n         let mut insert_text = self.insert_text;\n-        let mut text_edits = TextEdit::builder();\n \n-        if let Some(import_data) = self.import_to_add {\n-            let import = mod_path_to_ast(&import_data.import_path);\n-            let mut import_path_without_last_segment = import_data.import_path;\n+        if let Some(import_to_add) = self.import_to_add.as_ref() {\n+            let mut import_path_without_last_segment = import_to_add.import_path.to_owned();\n             let _ = import_path_without_last_segment.segments.pop();\n \n             if !import_path_without_last_segment.segments.is_empty() {\n@@ -310,32 +309,20 @@ impl Builder {\n                 }\n                 label = format!(\"{}::{}\", import_path_without_last_segment, label);\n             }\n-\n-            let rewriter = insert_use::insert_use(\n-                &import_data.import_scope,\n-                import,\n-                import_data.merge_behaviour,\n-            );\n-            if let Some(old_ast) = rewriter.rewrite_root() {\n-                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n-            }\n         }\n \n-        let original_edit = match self.text_edit {\n+        let text_edit = match self.text_edit {\n             Some(it) => it,\n             None => {\n                 TextEdit::replace(self.source_range, insert_text.unwrap_or_else(|| label.clone()))\n             }\n         };\n \n-        let mut resulting_edit = text_edits.finish();\n-        resulting_edit.union(original_edit).expect(\"Failed to unite text edits\");\n-\n         CompletionItem {\n             source_range: self.source_range,\n             label,\n             insert_text_format: self.insert_text_format,\n-            text_edit: resulting_edit,\n+            text_edit,\n             detail: self.detail,\n             documentation: self.documentation,\n             lookup,\n@@ -345,6 +332,7 @@ impl Builder {\n             trigger_call_info: self.trigger_call_info.unwrap_or(false),\n             score: self.score,\n             ref_match: self.ref_match,\n+            import_to_add: self.import_to_add,\n         }\n     }\n     pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder {"}, {"sha": "c559e1a3d6f8aa80ff3d4ce16236ebc20a8e2d60", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=48acd7d455be43960d67632adc9eb176a10a8afe", "patch": "@@ -30,7 +30,7 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         })),\n         hover_provider: Some(HoverProviderCapability::Simple(true)),\n         completion_provider: Some(CompletionOptions {\n-            resolve_provider: None,\n+            resolve_provider: Some(true),\n             trigger_characters: Some(vec![\":\".to_string(), \".\".to_string()]),\n             work_done_progress_options: WorkDoneProgressOptions { work_done_progress: None },\n         }),"}, {"sha": "255a6e489c0461f9e39bc0216c82cbaea3c52124", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=48acd7d455be43960d67632adc9eb176a10a8afe", "patch": "@@ -577,6 +577,16 @@ pub(crate) fn handle_completion(\n     Ok(Some(completion_list.into()))\n }\n \n+pub(crate) fn handle_resolve_completion(\n+    snap: GlobalStateSnapshot,\n+    original_completion: CompletionItem,\n+) -> Result<CompletionItem> {\n+    let _p = profile::span(\"handle_resolve_completion\");\n+    // TODO kb use the field to detect it's for autocompletion and do the insert logic\n+    let _data = dbg!(original_completion).data;\n+    Ok(original_completion)\n+}\n+\n pub(crate) fn handle_folding_range(\n     snap: GlobalStateSnapshot,\n     params: FoldingRangeParams,"}, {"sha": "12b0946ac6d16ecdaf83e88ff9a6b9f23f7952ec", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=48acd7d455be43960d67632adc9eb176a10a8afe", "patch": "@@ -454,6 +454,7 @@ impl GlobalState {\n             .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)\n             .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)\n             .on::<lsp_types::request::Completion>(handlers::handle_completion)\n+            .on::<lsp_types::request::ResolveCompletionItem>(handlers::handle_resolve_completion)\n             .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)\n             .on::<lsp_types::request::CodeLensResolve>(handlers::handle_code_lens_resolve)\n             .on::<lsp_types::request::FoldingRangeRequest>(handlers::handle_folding_range)"}, {"sha": "db9ed08f6f2f88cab362271b1757a9d96b40fdc7", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48acd7d455be43960d67632adc9eb176a10a8afe/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=48acd7d455be43960d67632adc9eb176a10a8afe", "patch": "@@ -231,6 +231,35 @@ pub(crate) fn completion_item(\n         None => vec![res],\n     };\n \n+    // TODO kb need to get this logic away and store for the later resolve request\n+    /*\n+    let mut label = self.label;\n+    let mut lookup = self.lookup;\n+    let mut insert_text = self.insert_text;\n+    let mut text_edits = TextEdit::builder();\n+\n+    if let Some((import_path, import_scope, merge_behaviour)) = completion_item.import_data.as_ref() {\n+        let import = mod_path_to_ast(&import_path);\n+            let mut import_path_without_last_segment = import_path;\n+            let _ = import_path_without_last_segment.segments.pop();\n+\n+            if !import_path_without_last_segment.segments.is_empty() {\n+                if lookup.is_none() {\n+                    lookup = Some(label.clone());\n+                }\n+                if insert_text.is_none() {\n+                    insert_text = Some(label.clone());\n+                }\n+                label = format!(\"{}::{}\", import_path_without_last_segment, label);\n+            }\n+\n+            let rewriter = insert_use(&import_scope, import, merge_behaviour);\n+            if let Some(old_ast) = rewriter.rewrite_root() {\n+                algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut text_edits);\n+            }\n+    }\n+    */\n+\n     for mut r in all_results.iter_mut() {\n         r.insert_text_format = Some(insert_text_format(completion_item.insert_text_format()));\n     }"}]}