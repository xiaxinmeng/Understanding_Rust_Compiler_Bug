{"sha": "98cff6ecec1b0af2cb9cead544526a0dbf2760f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2ZmNmVjZWMxYjBhZjJjYjljZWFkNTQ0NTI2YTBkYmYyNzYwZjU=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-31T07:35:55Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-31T07:38:36Z"}, "message": "Change parsing bounds in path_types\n\nNow bounds inside a path are parsed as DYN_TRAIT_TYPE, previously they would be\nparsed as `PATH_TYPE` followed by `TYPE_BOUND_LIST`.\n\nBasically this means `Box<T + 'f>` is now parsed almost the same as\n`Box<dyn T + 'f>` with the exception of not having the `dyn` keyword.", "tree": {"sha": "511188639f3fca256f1b4a319973fd20108e1680", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511188639f3fca256f1b4a319973fd20108e1680"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cff6ecec1b0af2cb9cead544526a0dbf2760f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cff6ecec1b0af2cb9cead544526a0dbf2760f5", "html_url": "https://github.com/rust-lang/rust/commit/98cff6ecec1b0af2cb9cead544526a0dbf2760f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cff6ecec1b0af2cb9cead544526a0dbf2760f5/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f9d6555beec6fb4bebf6aef3e983149f7aee3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a", "html_url": "https://github.com/rust-lang/rust/commit/e3f9d6555beec6fb4bebf6aef3e983149f7aee3a"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "42763fc87c1693ba200e0b393c5730531b5e6cd4", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98cff6ecec1b0af2cb9cead544526a0dbf2760f5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cff6ecec1b0af2cb9cead544526a0dbf2760f5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=98cff6ecec1b0af2cb9cead544526a0dbf2760f5", "patch": "@@ -79,16 +79,19 @@ fn lifetime_bounds(p: &mut Parser) {\n     }\n }\n \n-pub(super) fn bounds_without_colon(p: &mut Parser) {\n-    let m = p.start();\n-\n+pub(super) fn bounds_without_colon_m(p: &mut Parser, marker: Marker) -> CompletedMarker {\n     while type_bound(p) {\n         if !p.eat(PLUS) {\n             break;\n         }\n     }\n \n-    m.complete(p, TYPE_BOUND_LIST);\n+    marker.complete(p, TYPE_BOUND_LIST)\n+}\n+\n+pub(super) fn bounds_without_colon(p: &mut Parser) {\n+    let m = p.start();\n+    bounds_without_colon_m(p, m);\n }\n \n fn type_bound(p: &mut Parser) -> bool {"}, {"sha": "a46da9b443e97f17c4cac3f242836871b8a57987", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/98cff6ecec1b0af2cb9cead544526a0dbf2760f5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cff6ecec1b0af2cb9cead544526a0dbf2760f5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=98cff6ecec1b0af2cb9cead544526a0dbf2760f5", "patch": "@@ -261,21 +261,47 @@ fn path_or_macro_type_(p: &mut Parser, allow_bounds: bool) {\n         PATH_TYPE\n     };\n \n-    if allow_bounds && p.eat(PLUS) {\n-        type_params::bounds_without_colon(p);\n-    }\n+    let path = m.complete(p, kind);\n \n-    m.complete(p, kind);\n+    if allow_bounds {\n+        opt_path_type_bounds_as_dyn_trait_type(p, path);\n+    }\n }\n \n pub(super) fn path_type_(p: &mut Parser, allow_bounds: bool) {\n     assert!(paths::is_path_start(p) || p.at(L_ANGLE));\n     let m = p.start();\n     paths::type_path(p);\n+\n     // test path_type_with_bounds\n     // fn foo() -> Box<T + 'f> {}\n-    if allow_bounds && p.eat(PLUS) {\n-        type_params::bounds_without_colon(p);\n+    // fn foo() -> Box<dyn T + 'f> {}\n+    let path = m.complete(p, PATH_TYPE);\n+    if allow_bounds {\n+        opt_path_type_bounds_as_dyn_trait_type(p, path);\n     }\n-    m.complete(p, PATH_TYPE);\n+}\n+\n+/// This turns a parsed PATH_TYPE optionally into a DYN_TRAIT_TYPE\n+/// with a TYPE_BOUND_LIST\n+fn opt_path_type_bounds_as_dyn_trait_type(p: &mut Parser, path_type_marker: CompletedMarker) {\n+    if !p.at(PLUS) {\n+        return;\n+    }\n+\n+    // First create a TYPE_BOUND from the completed PATH_TYPE\n+    let m = path_type_marker.precede(p).complete(p, TYPE_BOUND);\n+\n+    // Next setup a marker for the TYPE_BOUND_LIST\n+    let m = m.precede(p);\n+\n+    // This gets consumed here so it gets properly set\n+    // in the TYPE_BOUND_LIST\n+    p.eat(PLUS);\n+\n+    // Parse rest of the bounds into the TYPE_BOUND_LIST\n+    let m = type_params::bounds_without_colon_m(p, m);\n+\n+    // Finally precede everything with DYN_TRAIT_TYPE\n+    m.precede(p).complete(p, DYN_TRAIT_TYPE);\n }"}]}