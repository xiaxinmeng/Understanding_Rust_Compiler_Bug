{"sha": "a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MWI5NjM4YmJiYjQ4ZjljMmZkZTBjY2JiY2YwM2U2NDQ5NGVhMGY=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-25T21:10:24Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-25T21:10:24Z"}, "message": "review: fix nits and move panic safety tests to the correct place", "tree": {"sha": "48b9c693a6e0cc8a5b8847ab1ad83d7f7db1cea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b9c693a6e0cc8a5b8847ab1ad83d7f7db1cea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "html_url": "https://github.com/rust-lang/rust/commit/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5be843fc54f80817c88438efa097a4ba81d4aa9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be843fc54f80817c88438efa097a4ba81d4aa9e", "html_url": "https://github.com/rust-lang/rust/commit/5be843fc54f80817c88438efa097a4ba81d4aa9e"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "6a83f5da87cc8f413348861bbb80e547cc2c7457", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -1,3 +1,4 @@\n+use std::cell::Cell;\n use std::mem::MaybeUninit;\n use std::ptr::NonNull;\n \n@@ -52,8 +53,6 @@ fn box_clone_from_ptr_stability() {\n \n #[test]\n fn box_deref_lval() {\n-    use std::cell::Cell;\n-\n     let x = Box::new(Cell::new(5));\n     x.set(1000);\n     assert_eq!(x.get(), 1000);"}, {"sha": "757fddd241857a28d734b9db47652ad08988060d", "filename": "library/alloc/tests/fmt.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Falloc%2Ftests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Falloc%2Ftests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Ffmt.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -1,5 +1,4 @@\n #![deny(warnings)]\n-#![allow(unused_must_use)]\n \n use std::cell::RefCell;\n use std::fmt::{self, Write};\n@@ -241,15 +240,15 @@ fn test_format_macro_interface() {\n #[test]\n fn test_write() {\n     let mut buf = String::new();\n-    write!(&mut buf, \"{}\", 3);\n+    let _ = write!(&mut buf, \"{}\", 3);\n     {\n         let w = &mut buf;\n-        write!(w, \"{foo}\", foo = 4);\n-        write!(w, \"{}\", \"hello\");\n-        writeln!(w, \"{}\", \"line\");\n-        writeln!(w, \"{foo}\", foo = \"bar\");\n-        w.write_char('\u2603');\n-        w.write_str(\"str\");\n+        let _ = write!(w, \"{foo}\", foo = 4);\n+        let _ = write!(w, \"{}\", \"hello\");\n+        let _ = writeln!(w, \"{}\", \"line\");\n+        let _ = writeln!(w, \"{foo}\", foo = \"bar\");\n+        let _ = w.write_char('\u2603');\n+        let _ = w.write_str(\"str\");\n     }\n \n     t!(buf, \"34helloline\\nbar\\n\u2603str\");\n@@ -273,9 +272,9 @@ fn test_format_args() {\n     let mut buf = String::new();\n     {\n         let w = &mut buf;\n-        write!(w, \"{}\", format_args!(\"{}\", 1));\n-        write!(w, \"{}\", format_args!(\"test\"));\n-        write!(w, \"{}\", format_args!(\"{test}\", test = 3));\n+        let _ = write!(w, \"{}\", format_args!(\"{}\", 1));\n+        let _ = write!(w, \"{}\", format_args!(\"test\"));\n+        let _ = write!(w, \"{}\", format_args!(\"{test}\", test = 3));\n     }\n     let s = buf;\n     t!(s, \"1test3\");"}, {"sha": "c1038ce4260bc0e8959752e8ad96411624a8bfac", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -2238,5 +2238,6 @@ impl<T: ?Sized + Debug> Debug for UnsafeCell<T> {\n     }\n }\n \n-// If you expected tests to be here, look instead at the ui/ifmt.rs test,\n+// If you expected tests to be here, look instead at the core/tests/fmt.rs file,\n // it's a lot easier than creating all of the rt::Piece structures here.\n+// There are also tests in the alloc crate, for those that need allocations."}, {"sha": "4db391f3e567eb69c962c40b7c53264320c5057e", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -78,7 +78,6 @@ mod nonzero;\n mod num;\n mod ops;\n mod option;\n-mod panic_safe;\n mod pattern;\n mod ptr;\n mod result;"}, {"sha": "ae814efec2086ea5966864b90a6e53b3deedafa0", "filename": "library/core/tests/option.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Ftests%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Ftests%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Foption.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -1,3 +1,4 @@\n+use core::cell::Cell;\n use core::clone::Clone;\n use core::mem;\n use core::ops::DerefMut;\n@@ -375,8 +376,6 @@ fn option_const() {\n \n #[test]\n fn test_unwrap_drop() {\n-    use std::cell::Cell;\n-\n     struct Dtor<'a> {\n         x: &'a Cell<isize>,\n     }"}, {"sha": "5ef30b1a8898a563f5a8da9003dba2fee3bbe7be", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -1,3 +1,4 @@\n+use core::cell::Cell;\n use core::result::Result::{Err, Ok};\n \n #[test]\n@@ -1983,8 +1984,6 @@ fn test_is_sorted() {\n \n #[test]\n fn test_slice_run_destructors() {\n-    use core::cell::Cell;\n-\n     // Make sure that destructors get run on slice literals\n     struct Foo<'a> {\n         x: &'a Cell<isize>,"}, {"sha": "4281867314cca7b366db0f0682a1c9e96ccd41c4", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -411,3 +411,6 @@ pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n pub fn resume_unwind(payload: Box<dyn Any + Send>) -> ! {\n     panicking::rust_panic_without_hook(payload)\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "b37d74011cc671096e38eab8b66c1508516c0102", "filename": "library/std/src/panic/tests.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fstd%2Fsrc%2Fpanic%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f/library%2Fstd%2Fsrc%2Fpanic%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic%2Ftests.rs?ref=a61b9638bbbb48f9c2fde0ccbbcf03e64494ea0f", "patch": "@@ -1,9 +1,9 @@\n #![allow(dead_code)]\n \n-use std::cell::RefCell;\n-use std::panic::{AssertUnwindSafe, UnwindSafe};\n-use std::rc::Rc;\n-use std::sync::{Arc, Mutex, RwLock};\n+use crate::cell::RefCell;\n+use crate::panic::{AssertUnwindSafe, UnwindSafe};\n+use crate::rc::Rc;\n+use crate::sync::{Arc, Mutex, RwLock};\n \n struct Foo {\n     a: i32,\n@@ -12,7 +12,7 @@ struct Foo {\n fn assert<T: UnwindSafe + ?Sized>() {}\n \n #[test]\n-fn test_panic_safety_traits() {\n+fn panic_safety_traits() {\n     assert::<i32>();\n     assert::<&i32>();\n     assert::<*mut i32>();", "previous_filename": "library/core/tests/panic_safe.rs"}]}