{"sha": "24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTBkZTRlN2YyNmQ1YmJkMDcxZmJlYzViMzk1OGI2NTBjZDNmNTY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-09T05:16:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T03:07:08Z"}, "message": "librustc: Separate out trait storage from evec/estr storage", "tree": {"sha": "6d347d59bd5f744c0a2441f00881ae390690c83c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d347d59bd5f744c0a2441f00881ae390690c83c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "html_url": "https://github.com/rust-lang/rust/commit/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cee6763d1acc14b8e46117766730ca3a07dbf6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cee6763d1acc14b8e46117766730ca3a07dbf6b", "html_url": "https://github.com/rust-lang/rust/commit/3cee6763d1acc14b8e46117766730ca3a07dbf6b"}], "stats": {"total": 455, "additions": 293, "deletions": 162}, "files": [{"sha": "e9cbd2685dff7c5750a6338cdb766f497328692d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -157,6 +157,16 @@ fn parse_vstore(st: @mut PState) -> ty::vstore {\n     }\n }\n \n+fn parse_trait_store(st: @mut PState) -> ty::TraitStore {\n+    match next(st) {\n+        '~' => ty::UniqTraitStore,\n+        '@' => ty::BoxTraitStore,\n+        '&' => ty::RegionTraitStore(parse_region(st)),\n+        '.' => ty::BareTraitStore,\n+        c => st.tcx.sess.bug(fmt!(\"parse_trait_store(): bad input '%c'\", c))\n+    }\n+}\n+\n fn parse_substs(st: @mut PState, conv: conv_did) -> ty::substs {\n     let self_r = parse_opt(st, || parse_region(st) );\n \n@@ -269,9 +279,9 @@ fn parse_ty(st: @mut PState, conv: conv_did) -> ty::t {\n         fail_unless!(next(st) == '[');\n         let def = parse_def(st, NominalType, conv);\n         let substs = parse_substs(st, conv);\n-        let vstore = parse_vstore(st);\n+        let store = parse_trait_store(st);\n         fail_unless!(next(st) == ']');\n-        return ty::mk_trait(st.tcx, def, substs, vstore);\n+        return ty::mk_trait(st.tcx, def, substs, store);\n       }\n       'p' => {\n         let did = parse_def(st, TypeParameter, conv);"}, {"sha": "ff24a8891631f06e9da3bc2de2f4157ac7e4e2e8", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -214,6 +214,18 @@ pub fn enc_vstore(w: io::Writer, cx: @ctxt, v: ty::vstore) {\n     }\n }\n \n+pub fn enc_trait_store(w: io::Writer, cx: @ctxt, s: ty::TraitStore) {\n+    match s {\n+        ty::UniqTraitStore => w.write_char('~'),\n+        ty::BoxTraitStore => w.write_char('@'),\n+        ty::BareTraitStore => w.write_char('.'),\n+        ty::RegionTraitStore(re) => {\n+            w.write_char('&');\n+            enc_region(w, cx, re);\n+        }\n+    }\n+}\n+\n fn enc_sty(w: io::Writer, cx: @ctxt, +st: ty::sty) {\n     match st {\n       ty::ty_nil => w.write_char('n'),\n@@ -252,12 +264,12 @@ fn enc_sty(w: io::Writer, cx: @ctxt, +st: ty::sty) {\n         enc_substs(w, cx, (*substs));\n         w.write_char(']');\n       }\n-      ty::ty_trait(def, ref substs, vstore) => {\n+      ty::ty_trait(def, ref substs, store) => {\n         w.write_str(&\"x[\");\n         w.write_str((cx.ds)(def));\n         w.write_char('|');\n         enc_substs(w, cx, (*substs));\n-        enc_vstore(w, cx, vstore);\n+        enc_trait_store(w, cx, store);\n         w.write_char(']');\n       }\n       ty::ty_tup(ts) => {"}, {"sha": "99781a80c62c14803da026f919fa3e57e932cd7c", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -462,7 +462,7 @@ pub fn check_cast_for_escaping_regions(\n pub fn check_kind_bounds_of_cast(cx: Context, source: @expr, target: @expr) {\n     let target_ty = ty::expr_ty(cx.tcx, target);\n     match ty::get(target_ty).sty {\n-        ty::ty_trait(_, _, ty::vstore_uniq) => {\n+        ty::ty_trait(_, _, ty::UniqTraitStore) => {\n             let source_ty = ty::expr_ty(cx.tcx, source);\n             if !ty::type_is_owned(cx.tcx, source_ty) {\n                 cx.tcx.sess.span_err("}, {"sha": "a340e6472b8f785ae6eaee2917c2bf3996ebeb2d", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -802,13 +802,36 @@ pub fn trans_external_path(ccx: @CrateContext, did: ast::def_id, t: ty::t)\n pub fn invoke(bcx: block, llfn: ValueRef, +llargs: ~[ValueRef]) -> block {\n     let _icx = bcx.insn_ctxt(\"invoke_\");\n     if bcx.unreachable { return bcx; }\n+\n+    match bcx.node_info {\n+        None => error!(\"invoke at ???\"),\n+        Some(node_info) => {\n+            error!(\"invoke at %s\",\n+                   bcx.sess().codemap.span_to_str(node_info.span));\n+        }\n+    }\n+\n     if need_invoke(bcx) {\n-        debug!(\"invoking\");\n+        unsafe {\n+            debug!(\"invoking %x at %x\",\n+                   ::core::cast::transmute(llfn),\n+                   ::core::cast::transmute(bcx.llbb));\n+            for llargs.each |&llarg| {\n+                debug!(\"arg: %x\", ::core::cast::transmute(llarg));\n+            }\n+        }\n         let normal_bcx = sub_block(bcx, ~\"normal return\");\n         Invoke(bcx, llfn, llargs, normal_bcx.llbb, get_landing_pad(bcx));\n         return normal_bcx;\n     } else {\n-        debug!(\"calling\");\n+        unsafe {\n+            debug!(\"calling %x at %x\",\n+                   ::core::cast::transmute(llfn),\n+                   ::core::cast::transmute(bcx.llbb));\n+            for llargs.each |&llarg| {\n+                debug!(\"arg: %x\", ::core::cast::transmute(llarg));\n+            }\n+        }\n         Call(bcx, llfn, llargs);\n         return bcx;\n     }"}, {"sha": "70fc29fd25b47e3bb6e80925e326531dcb7d2270", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -1033,17 +1033,19 @@ pub fn T_captured_tydescs(cx: @CrateContext, n: uint) -> TypeRef {\n     return T_struct(vec::from_elem::<TypeRef>(n, T_ptr(cx.tydesc_type)));\n }\n \n-pub fn T_opaque_trait(cx: @CrateContext, vstore: ty::vstore) -> TypeRef {\n-    match vstore {\n-        ty::vstore_box => {\n+pub fn T_opaque_trait(cx: @CrateContext, store: ty::TraitStore) -> TypeRef {\n+    match store {\n+        ty::BoxTraitStore | ty::BareTraitStore => {\n             T_struct(~[T_ptr(cx.tydesc_type), T_opaque_box_ptr(cx)])\n         }\n-        ty::vstore_uniq => {\n+        ty::UniqTraitStore => {\n             T_struct(~[T_ptr(cx.tydesc_type),\n                        T_unique_ptr(T_unique(cx, T_i8())),\n                        T_ptr(cx.tydesc_type)])\n         }\n-        _ => T_struct(~[T_ptr(cx.tydesc_type), T_ptr(T_i8())])\n+        ty::RegionTraitStore(_) => {\n+            T_struct(~[T_ptr(cx.tydesc_type), T_ptr(T_i8())])\n+        }\n     }\n }\n "}, {"sha": "e986d0bdae31fa41288cb24691e503e677170b43", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -678,9 +678,9 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         }\n         ast::expr_cast(val, _) => {\n             match ty::get(node_id_type(bcx, expr.id)).sty {\n-                ty::ty_trait(_, _, vstore) => {\n+                ty::ty_trait(_, _, store) => {\n                     return meth::trans_trait_cast(bcx, val, expr.id, dest,\n-                                                  vstore);\n+                                                  store);\n                 }\n                 _ => {\n                     bcx.tcx().sess.span_bug(expr.span,"}, {"sha": "8302f46120e6605a0711bff0fbd0be817c3433dd", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -551,11 +551,12 @@ pub fn make_drop_glue(bcx: block, v0: ValueRef, t: ty::t) {\n       ty::ty_closure(_) => {\n         closure::make_closure_glue(bcx, v0, t, drop_ty)\n       }\n-      ty::ty_trait(_, _, ty::vstore_box) => {\n+      ty::ty_trait(_, _, ty::BoxTraitStore) |\n+      ty::ty_trait(_, _, ty::BareTraitStore) => {\n         let llbox = Load(bcx, GEPi(bcx, v0, [0u, 1u]));\n         decr_refcnt_maybe_free(bcx, llbox, ty::mk_opaque_box(ccx.tcx))\n       }\n-      ty::ty_trait(_, _, ty::vstore_uniq) => {\n+      ty::ty_trait(_, _, ty::UniqTraitStore) => {\n         let lluniquevalue = GEPi(bcx, v0, [0, 1]);\n         let lltydesc = Load(bcx, GEPi(bcx, v0, [0, 2]));\n         call_tydesc_glue_full(bcx, lluniquevalue, lltydesc,\n@@ -617,12 +618,13 @@ pub fn make_take_glue(bcx: block, v: ValueRef, t: ty::t) {\n       ty::ty_closure(_) => {\n         closure::make_closure_glue(bcx, v, t, take_ty)\n       }\n-      ty::ty_trait(_, _, ty::vstore_box) => {\n+      ty::ty_trait(_, _, ty::BoxTraitStore) |\n+      ty::ty_trait(_, _, ty::BareTraitStore) => {\n         let llbox = Load(bcx, GEPi(bcx, v, [0u, 1u]));\n         incr_refcnt_of_boxed(bcx, llbox);\n         bcx\n       }\n-      ty::ty_trait(_, _, ty::vstore_uniq) => {\n+      ty::ty_trait(_, _, ty::UniqTraitStore) => {\n         let llval = GEPi(bcx, v, [0, 1]);\n         let lltydesc = Load(bcx, GEPi(bcx, v, [0, 2]));\n         call_tydesc_glue_full(bcx, llval, lltydesc,"}, {"sha": "5a46c24b9394064adcbafe23c90ac7597a48fc20", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -249,12 +249,12 @@ pub fn trans_method_callee(bcx: block,\n                 None => fail!(~\"trans_method_callee: missing param_substs\")\n             }\n         }\n-        typeck::method_trait(_, off, vstore) => {\n+        typeck::method_trait(_, off, store) => {\n             trans_trait_callee(bcx,\n                                callee_id,\n                                off,\n                                self,\n-                               vstore,\n+                               store,\n                                mentry.explicit_self)\n         }\n         typeck::method_self(*) | typeck::method_super(*) => {\n@@ -570,7 +570,7 @@ pub fn trans_trait_callee(bcx: block,\n                           callee_id: ast::node_id,\n                           n_method: uint,\n                           self_expr: @ast::expr,\n-                          vstore: ty::vstore,\n+                          store: ty::TraitStore,\n                           explicit_self: ast::self_ty_)\n                        -> Callee {\n     //!\n@@ -599,15 +599,15 @@ pub fn trans_trait_callee(bcx: block,\n                                   callee_ty,\n                                   n_method,\n                                   llpair,\n-                                  vstore,\n+                                  store,\n                                   explicit_self)\n }\n \n pub fn trans_trait_callee_from_llval(bcx: block,\n                                      callee_ty: ty::t,\n                                      n_method: uint,\n                                      llpair: ValueRef,\n-                                     vstore: ty::vstore,\n+                                     store: ty::TraitStore,\n                                      explicit_self: ast::self_ty_)\n                                   -> Callee {\n     //!\n@@ -641,16 +641,15 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n         }\n         ast::sty_by_ref => {\n             // We need to pass a pointer to a pointer to the payload.\n-            match vstore {\n-                ty::vstore_box | ty::vstore_uniq => {\n+            match store {\n+                ty::BoxTraitStore |\n+                ty::BareTraitStore |\n+                ty::UniqTraitStore => {\n                     llself = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n                 }\n-                ty::vstore_slice(_) => {\n+                ty::RegionTraitStore(_) => {\n                     llself = llbox;\n                 }\n-                ty::vstore_fixed(*) => {\n-                    bcx.tcx().sess.bug(~\"vstore_fixed trait\");\n-                }\n             }\n \n             self_mode = ast::by_ref;\n@@ -662,16 +661,15 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n         ast::sty_region(_) => {\n             // As before, we need to pass a pointer to a pointer to the\n             // payload.\n-            match vstore {\n-                ty::vstore_box | ty::vstore_uniq => {\n+            match store {\n+                ty::BoxTraitStore |\n+                ty::BareTraitStore |\n+                ty::UniqTraitStore => {\n                     llself = GEPi(bcx, llbox, [0u, abi::box_field_body]);\n                 }\n-                ty::vstore_slice(_) => {\n+                ty::RegionTraitStore(_) => {\n                     llself = llbox;\n                 }\n-                ty::vstore_fixed(*) => {\n-                    bcx.tcx().sess.bug(~\"vstore_fixed trait\");\n-                }\n             }\n \n             let llscratch = alloca(bcx, val_ty(llself));\n@@ -687,8 +685,8 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n             bcx = glue::take_ty(bcx, llbox, callee_ty);\n \n             // Pass a pointer to the box.\n-            match vstore {\n-                ty::vstore_box => llself = llbox,\n+            match store {\n+                ty::BoxTraitStore | ty::BareTraitStore => llself = llbox,\n                 _ => bcx.tcx().sess.bug(~\"@self receiver with non-@Trait\")\n             }\n \n@@ -700,8 +698,8 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n         }\n         ast::sty_uniq(_) => {\n             // Pass the unique pointer.\n-            match vstore {\n-                ty::vstore_uniq => llself = llbox,\n+            match store {\n+                ty::UniqTraitStore => llself = llbox,\n                 _ => bcx.tcx().sess.bug(~\"~self receiver with non-~Trait\")\n             }\n \n@@ -796,7 +794,9 @@ pub fn make_impl_vtable(ccx: @CrateContext,\n     // XXX: This should support multiple traits.\n     let trt_id = driver::session::expect(\n         tcx.sess,\n-        ty::ty_to_def_id(ty::impl_traits(tcx, impl_id, ty::vstore_box)[0]),\n+        ty::ty_to_def_id(ty::impl_traits(tcx,\n+                                         impl_id,\n+                                         ty::BoxTraitStore)[0]),\n         || ~\"make_impl_vtable: non-trait-type implemented\");\n \n     let has_tps = (*ty::lookup_item_type(ccx.tcx, impl_id).bounds).len() > 0u;\n@@ -834,7 +834,7 @@ pub fn trans_trait_cast(bcx: block,\n                         val: @ast::expr,\n                         id: ast::node_id,\n                         dest: expr::Dest,\n-                        vstore: ty::vstore)\n+                        store: ty::TraitStore)\n                      -> block {\n     let mut bcx = bcx;\n     let _icx = bcx.insn_ctxt(\"impl::trans_cast\");\n@@ -849,16 +849,16 @@ pub fn trans_trait_cast(bcx: block,\n     let ccx = bcx.ccx();\n     let v_ty = expr_ty(bcx, val);\n \n-    match vstore {\n-        ty::vstore_slice(*) | ty::vstore_box => {\n+    match store {\n+        ty::RegionTraitStore(_) | ty::BoxTraitStore | ty::BareTraitStore => {\n             let mut llboxdest = GEPi(bcx, lldest, [0u, 1u]);\n             // Just store the pointer into the pair.\n             llboxdest = PointerCast(bcx,\n                                     llboxdest,\n                                     T_ptr(type_of(bcx.ccx(), v_ty)));\n             bcx = expr::trans_into(bcx, val, SaveIn(llboxdest));\n         }\n-        ty::vstore_uniq => {\n+        ty::UniqTraitStore => {\n             // Translate the uniquely-owned value into the second element of\n             // the triple. (The first element is the vtable.)\n             let mut llvaldest = GEPi(bcx, lldest, [0, 1]);\n@@ -874,10 +874,6 @@ pub fn trans_trait_cast(bcx: block,\n             let lltydescdest = GEPi(bcx, lldest, [0, 2]);\n             Store(bcx, tydesc.tydesc, lltydescdest);\n         }\n-        _ => {\n-            bcx.tcx().sess.span_bug(val.span, ~\"unexpected vstore in \\\n-                                                trans_trait_cast\");\n-        }\n     }\n \n     // Store the vtable into the pair or triple."}, {"sha": "320fc3ed77a92ace34d864ac7f196ce45c833204", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -286,14 +286,11 @@ pub fn normalize_for_monomorphization(tcx: ty::ctxt,\n         ty::ty_closure(ref fty) => {\n             Some(normalized_closure_ty(tcx, fty.sigil))\n         }\n-        ty::ty_trait(_, _, ref vstore) => {\n-            let sigil = match *vstore {\n-                ty::vstore_uniq => ast::OwnedSigil,\n-                ty::vstore_box => ast::ManagedSigil,\n-                ty::vstore_slice(_) => ast::BorrowedSigil,\n-                ty::vstore_fixed(*) => {\n-                    tcx.sess.bug(fmt!(\"ty_trait with vstore_fixed\"));\n-                }\n+        ty::ty_trait(_, _, ref store) => {\n+            let sigil = match *store {\n+                ty::UniqTraitStore => ast::OwnedSigil,\n+                ty::BoxTraitStore | ty::BareTraitStore => ast::ManagedSigil,\n+                ty::RegionTraitStore(_) => ast::BorrowedSigil,\n             };\n \n             // Traits have the same runtime representation as closures."}, {"sha": "a4a7d958e692b002e23b034951586430cb320a60", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -96,14 +96,14 @@ pub impl Reflector {\n         }\n         let bool_ty = ty::mk_bool(tcx);\n         let scratch = scratch_datum(bcx, bool_ty, false);\n-        // XXX: Should not be vstore_box!\n+        // XXX: Should not be BoxTraitStore!\n         let bcx = callee::trans_call_inner(\n             self.bcx, None, mth_ty, bool_ty,\n             |bcx| meth::trans_trait_callee_from_llval(bcx,\n                                                       mth_ty,\n                                                       mth_idx,\n                                                       v,\n-                                                      ty::vstore_box,\n+                                                      ty::BoxTraitStore,\n                                                       ast::sty_region(\n                                                         ast::m_imm)),\n             ArgVals(args), SaveIn(scratch.val), DontAutorefArg);"}, {"sha": "0c3e93885f96416c8a8b6c87098412018f7c67e5", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -130,7 +130,7 @@ pub fn sizing_type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n \n         ty::ty_bare_fn(*) => T_ptr(T_i8()),\n         ty::ty_closure(*) => T_struct(~[T_ptr(T_i8()), T_ptr(T_i8())]),\n-        ty::ty_trait(_, _, vstore) => T_opaque_trait(cx, vstore),\n+        ty::ty_trait(_, _, store) => T_opaque_trait(cx, store),\n \n         ty::ty_estr(ty::vstore_fixed(size)) => T_array(T_i8(), size),\n         ty::ty_evec(mt, ty::vstore_fixed(size)) => {\n@@ -234,7 +234,7 @@ pub fn type_of(cx: @CrateContext, t: ty::t) -> TypeRef {\n \n       ty::ty_bare_fn(_) => T_ptr(type_of_fn_from_ty(cx, t)),\n       ty::ty_closure(_) => T_fn_pair(cx, type_of_fn_from_ty(cx, t)),\n-      ty::ty_trait(_, _, vstore) => T_opaque_trait(cx, vstore),\n+      ty::ty_trait(_, _, store) => T_opaque_trait(cx, store),\n       ty::ty_type => T_ptr(cx.tydesc_type),\n       ty::ty_tup(*) => {\n           let repr = adt::represent_type(cx, t);"}, {"sha": "8d6c6291fdd901fa96041bb47802072436cc6ba0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 63, "deletions": 54, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -24,7 +24,7 @@ use middle::typeck;\n use middle;\n use util::ppaux::{note_and_explain_region, bound_region_to_str};\n use util::ppaux::{region_to_str, explain_region, vstore_to_str};\n-use util::ppaux::{ty_to_str, tys_to_str};\n+use util::ppaux::{trait_store_to_str, ty_to_str, tys_to_str};\n use util::common::{indenter};\n \n use core::cast;\n@@ -84,13 +84,24 @@ pub struct mt {\n \n #[auto_encode]\n #[auto_decode]\n+#[deriving_eq]\n pub enum vstore {\n     vstore_fixed(uint),\n     vstore_uniq,\n     vstore_box,\n     vstore_slice(Region)\n }\n \n+#[auto_encode]\n+#[auto_decode]\n+#[deriving_eq]\n+pub enum TraitStore {\n+    BareTraitStore,             // a plain trait without a sigil\n+    BoxTraitStore,              // @Trait\n+    UniqTraitStore,             // ~Trait\n+    RegionTraitStore(Region),   // &Trait\n+}\n+\n pub struct field_ty {\n   ident: ident,\n   id: def_id,\n@@ -506,7 +517,7 @@ pub enum sty {\n     ty_rptr(Region, mt),\n     ty_bare_fn(BareFnTy),\n     ty_closure(ClosureTy),\n-    ty_trait(def_id, substs, vstore),\n+    ty_trait(def_id, substs, TraitStore),\n     ty_struct(def_id, substs),\n     ty_tup(~[t]),\n \n@@ -565,6 +576,7 @@ pub enum type_err {\n     terr_regions_insufficiently_polymorphic(bound_region, Region),\n     terr_regions_overly_polymorphic(bound_region, Region),\n     terr_vstores_differ(terr_vstore_kind, expected_found<vstore>),\n+    terr_trait_stores_differ(terr_vstore_kind, expected_found<TraitStore>),\n     terr_in_field(@type_err, ast::ident),\n     terr_sorts(expected_found<t>),\n     terr_self_substs,\n@@ -1048,10 +1060,13 @@ pub fn mk_ctor_fn(cx: ctxt, input_tys: &[ty::t], output: ty::t) -> t {\n }\n \n \n-pub fn mk_trait(cx: ctxt, did: ast::def_id, +substs: substs, vstore: vstore)\n-         -> t {\n+pub fn mk_trait(cx: ctxt,\n+                did: ast::def_id,\n+                +substs: substs,\n+                store: TraitStore)\n+             -> t {\n     // take a copy of substs so that we own the vectors inside\n-    mk_t(cx, ty_trait(did, substs, vstore))\n+    mk_t(cx, ty_trait(did, substs, store))\n }\n \n pub fn mk_struct(cx: ctxt, struct_id: ast::def_id, +substs: substs) -> t {\n@@ -1213,8 +1228,8 @@ fn fold_sty(sty: &sty, fldop: &fn(t) -> t) -> sty {\n         ty_enum(tid, ref substs) => {\n             ty_enum(tid, fold_substs(substs, fldop))\n         }\n-        ty_trait(did, ref substs, vst) => {\n-            ty_trait(did, fold_substs(substs, fldop), vst)\n+        ty_trait(did, ref substs, st) => {\n+            ty_trait(did, fold_substs(substs, fldop), st)\n         }\n         ty_tup(ts) => {\n             let new_ts = vec::map(ts, |tt| fldop(*tt));\n@@ -1304,8 +1319,8 @@ pub fn fold_regions_and_ty(\n       ty_struct(def_id, ref substs) => {\n         ty::mk_struct(cx, def_id, fold_substs(substs, fldr, fldt))\n       }\n-      ty_trait(def_id, ref substs, vst) => {\n-        ty::mk_trait(cx, def_id, fold_substs(substs, fldr, fldt), vst)\n+      ty_trait(def_id, ref substs, st) => {\n+        ty::mk_trait(cx, def_id, fold_substs(substs, fldr, fldt), st)\n       }\n       ty_bare_fn(ref f) => {\n           ty::mk_bare_fn(cx, BareFnTy {sig: fold_sig(&f.sig, fldfnt),\n@@ -1893,15 +1908,16 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 TC_MANAGED + nonowned(tc_mt(cx, mt, cache))\n             }\n \n-            ty_trait(_, _, vstore_uniq) => {\n+            ty_trait(_, _, UniqTraitStore) => {\n                 TC_OWNED_CLOSURE\n             }\n \n-            ty_trait(_, _, vstore_box) => {\n+            ty_trait(_, _, BoxTraitStore) |\n+            ty_trait(_, _, BareTraitStore) => {\n                 TC_MANAGED\n             }\n \n-            ty_trait(_, _, vstore_slice(r)) => {\n+            ty_trait(_, _, RegionTraitStore(r)) => {\n                 borrowed_contents(r, m_imm)\n             }\n \n@@ -2013,7 +2029,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_type => TC_NONE,\n-            ty_trait(_, _, vstore_fixed(_)) => TC_NONE,\n \n             ty_err => {\n                 cx.sess.bug(~\"Asked to compute contents of fictitious type\");\n@@ -2557,6 +2572,17 @@ impl to_bytes::IterBytes for vstore {\n     }\n }\n \n+impl to_bytes::IterBytes for TraitStore {\n+    pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n+        match *self {\n+          BareTraitStore => 0u8.iter_bytes(lsb0, f),\n+          UniqTraitStore => 1u8.iter_bytes(lsb0, f),\n+          BoxTraitStore => 2u8.iter_bytes(lsb0, f),\n+          RegionTraitStore(ref r) => to_bytes::iter_bytes_2(&3u8, r, lsb0, f),\n+        }\n+    }\n+}\n+\n impl to_bytes::IterBytes for substs {\n     pure fn iter_bytes(&self, +lsb0: bool, f: to_bytes::Cb) {\n           to_bytes::iter_bytes_3(&self.self_r,\n@@ -3419,6 +3445,11 @@ pub fn type_err_to_str(cx: ctxt, err: &type_err) -> ~str {\n                  vstore_to_str(cx, (*values).expected),\n                  vstore_to_str(cx, (*values).found))\n         }\n+        terr_trait_stores_differ(_, ref values) => {\n+            fmt!(\"trait storage differs: expected %s but found %s\",\n+                 trait_store_to_str(cx, (*values).expected),\n+                 trait_store_to_str(cx, (*values).found))\n+        }\n         terr_in_field(err, fname) => {\n             fmt!(\"in field `%s`, %s\", *cx.sess.str_of(fname),\n                  type_err_to_str(cx, err))\n@@ -3565,12 +3596,19 @@ pub fn trait_methods(cx: ctxt, id: ast::def_id) -> @~[method] {\n /*\n   Could this return a list of (def_id, substs) pairs?\n  */\n-pub fn impl_traits(cx: ctxt, id: ast::def_id, vstore: vstore) -> ~[t] {\n-    fn vstoreify(cx: ctxt, ty: t, vstore: vstore) -> t {\n+pub fn impl_traits(cx: ctxt, id: ast::def_id, store: TraitStore) -> ~[t] {\n+    fn storeify(cx: ctxt, ty: t, store: TraitStore) -> t {\n         match ty::get(ty).sty {\n-            ty::ty_trait(_, _, trait_vstore) if vstore == trait_vstore => ty,\n-            ty::ty_trait(did, ref substs, _) => {\n-                mk_trait(cx, did, (/*bad*/copy *substs), vstore)\n+            ty::ty_trait(did, ref substs, trait_store) => {\n+                if store == trait_store ||\n+                        (store == BareTraitStore &&\n+                         trait_store == BoxTraitStore) ||\n+                        (store == BoxTraitStore &&\n+                         trait_store == BareTraitStore) {\n+                    ty\n+                } else {\n+                    mk_trait(cx, did, (/*bad*/copy *substs), store)\n+                }\n             }\n             _ => cx.sess.bug(~\"impl_traits: not a trait\")\n         }\n@@ -3585,16 +3623,16 @@ pub fn impl_traits(cx: ctxt, id: ast::def_id, vstore: vstore) -> ~[t] {\n                     _)) => {\n \n                do option::map_default(&opt_trait, ~[]) |trait_ref| {\n-                       ~[vstoreify(cx,\n-                                   node_id_to_type(cx, trait_ref.ref_id),\n-                                   vstore)]\n+                       ~[storeify(cx,\n+                                  node_id_to_type(cx, trait_ref.ref_id),\n+                                  store)]\n                    }\n            }\n            _ => ~[]\n         }\n     } else {\n         vec::map(csearch::get_impl_traits(cx, id),\n-                 |x| vstoreify(cx, *x, vstore))\n+                 |x| storeify(cx, *x, store))\n     }\n }\n \n@@ -4163,6 +4201,9 @@ pub fn normalize_ty(cx: ctxt, t: t) -> t {\n                 t\n             },\n \n+        ty_trait(did, ref substs, BareTraitStore) =>\n+            mk_trait(cx, did, copy *substs, BoxTraitStore),\n+\n         _ =>\n             t\n     };\n@@ -4318,38 +4359,6 @@ impl cmp::Eq for mt {\n     pure fn ne(&self, other: &mt) -> bool { !(*self).eq(other) }\n }\n \n-impl cmp::Eq for vstore {\n-    pure fn eq(&self, other: &vstore) -> bool {\n-        match (*self) {\n-            vstore_fixed(e0a) => {\n-                match (*other) {\n-                    vstore_fixed(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-            vstore_uniq => {\n-                match (*other) {\n-                    vstore_uniq => true,\n-                    _ => false\n-                }\n-            }\n-            vstore_box => {\n-                match (*other) {\n-                    vstore_box => true,\n-                    _ => false\n-                }\n-            }\n-            vstore_slice(e0a) => {\n-                match (*other) {\n-                    vstore_slice(e0b) => e0a == e0b,\n-                    _ => false\n-                }\n-            }\n-        }\n-    }\n-    pure fn ne(&self, other: &vstore) -> bool { !(*self).eq(other) }\n-}\n-\n impl cmp::Eq for Region {\n     pure fn eq(&self, other: &Region) -> bool {\n         match (*self) {"}, {"sha": "9dda55b3a38cfd556dc633ff5fb2491f85e233d9", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -249,20 +249,26 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:region_scope + Copy + Durable>(\n                             type_def_id, path);\n                         match ty::get(result.ty).sty {\n                             ty::ty_trait(trait_def_id, ref substs, _) => {\n-                                match vst {\n-                                    ty::vstore_box | ty::vstore_slice(*) |\n-                                    ty::vstore_uniq => {}\n-                                    _ => {\n+                                let trait_store = match vst {\n+                                    ty::vstore_box => ty::BoxTraitStore,\n+                                    ty::vstore_uniq => ty::UniqTraitStore,\n+                                    ty::vstore_slice(r) => {\n+                                        ty::RegionTraitStore(r)\n+                                    }\n+                                    ty::vstore_fixed(*) => {\n                                         tcx.sess.span_err(\n                                             path.span,\n                                             ~\"@trait, ~trait or &trait \\\n                                               are the only supported \\\n                                               forms of casting-to-\\\n                                               trait\");\n+                                        ty::BoxTraitStore\n                                     }\n-                                }\n-                                return ty::mk_trait(tcx, trait_def_id,\n-                                                    /*bad*/copy *substs, vst);\n+                                };\n+                                return ty::mk_trait(tcx,\n+                                                    trait_def_id,\n+                                                    /*bad*/copy *substs,\n+                                                    trait_store);\n \n                             }\n                             _ => {}"}, {"sha": "5d2469db285ebcf0304a79994cd1a1cb87fae055", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -288,9 +288,9 @@ pub impl LookupContext/&self {\n                 ty_param(p) => {\n                     self.push_inherent_candidates_from_param(self_ty, p);\n                 }\n-                ty_trait(did, ref substs, vstore) => {\n+                ty_trait(did, ref substs, store) => {\n                     self.push_inherent_candidates_from_trait(\n-                        self_ty, did, substs, vstore);\n+                        self_ty, did, substs, store);\n                     self.push_inherent_impl_candidates_for_type(did);\n                 }\n                 ty_self => {\n@@ -490,7 +490,7 @@ pub impl LookupContext/&self {\n                                            self_ty: ty::t,\n                                            did: def_id,\n                                            substs: &ty::substs,\n-                                           vstore: ty::vstore) {\n+                                           store: ty::TraitStore) {\n         debug!(\"push_inherent_candidates_from_trait(did=%s, substs=%s)\",\n                self.did_to_str(did),\n                substs_to_str(self.tcx(), substs));\n@@ -539,7 +539,7 @@ pub impl LookupContext/&self {\n             explicit_self: method.self_ty,\n             num_method_tps: method.tps.len(),\n             self_mode: get_mode_from_self_type(method.self_ty),\n-            origin: method_trait(did, index, vstore)\n+            origin: method_trait(did, index, store)\n         });\n     }\n "}, {"sha": "4ff8431d88a379f6a2e38becaaeaa0939866665e", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -263,7 +263,7 @@ pub fn visit_expr(expr: @ast::expr, &&rcx: @mut Rcx, v: rvt) {\n             // explaining how it goes about doing that.\n             let target_ty = rcx.resolve_node_type(expr.id);\n             match ty::get(target_ty).sty {\n-                ty::ty_trait(_, _, vstore_slice(trait_region)) => {\n+                ty::ty_trait(_, _, ty::RegionTraitStore(trait_region)) => {\n                     let source_ty = rcx.fcx.expr_ty(source);\n                     constrain_regions_in_type(rcx, trait_region,\n                                               expr.span, source_ty);"}, {"sha": "de301ead1f84191d4cbf060a3af3bb8578101269", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -140,7 +140,9 @@ pub fn fixup_substs(vcx: &VtableContext, location_info: &LocationInfo,\n                     is_early: bool) -> Option<ty::substs> {\n     let tcx = vcx.tcx();\n     // use a dummy type just to package up the substs that need fixing up\n-    let t = ty::mk_trait(tcx, id, substs, ty::vstore_slice(ty::re_static));\n+    let t = ty::mk_trait(tcx,\n+                         id, substs,\n+                         ty::RegionTraitStore(ty::re_static));\n     do fixup_ty(vcx, location_info, t, is_early).map |t_f| {\n         match ty::get(*t_f).sty {\n           ty::ty_trait(_, ref substs_f, _) => (/*bad*/copy *substs_f),\n@@ -167,9 +169,9 @@ pub fn lookup_vtable(vcx: &VtableContext,\n     let _i = indenter();\n \n     let tcx = vcx.tcx();\n-    let (trait_id, trait_substs, trait_vstore) = match ty::get(trait_ty).sty {\n-        ty::ty_trait(did, ref substs, vstore) =>\n-            (did, (/*bad*/copy *substs), vstore),\n+    let (trait_id, trait_substs, trait_store) = match ty::get(trait_ty).sty {\n+        ty::ty_trait(did, ref substs, store) =>\n+            (did, (/*bad*/copy *substs), store),\n         _ => tcx.sess.impossible_case(location_info.span,\n                                       \"lookup_vtable: \\\n                                        don't know how to handle a non-trait\")\n@@ -261,8 +263,9 @@ pub fn lookup_vtable(vcx: &VtableContext,\n                         // it's the same trait as trait_ty, we need to\n                         // unify it with trait_ty in order to get all\n                         // the ty vars sorted out.\n-                        for vec::each(ty::impl_traits(tcx, im.did,\n-                                                      trait_vstore)) |of_ty| {\n+                        for vec::each(ty::impl_traits(tcx,\n+                                                      im.did,\n+                                                      trait_store)) |of_ty| {\n                             match ty::get(*of_ty).sty {\n                                 ty::ty_trait(id, _, _) => {\n                                     // Not the trait we're looking for\n@@ -381,7 +384,7 @@ pub fn lookup_vtable(vcx: &VtableContext,\n                                               /*bad*/copy substs_f.tps,\n                                               trait_tps,\n                                               im.did,\n-                                              trait_vstore);\n+                                              trait_store);\n                             let subres = lookup_vtables(\n                                 vcx, location_info, im_bs, &substs_f,\n                                 is_early);\n@@ -455,11 +458,11 @@ pub fn connect_trait_tps(vcx: &VtableContext,\n                          impl_tys: ~[ty::t],\n                          trait_tys: ~[ty::t],\n                          impl_did: ast::def_id,\n-                         vstore: ty::vstore) {\n+                         store: ty::TraitStore) {\n     let tcx = vcx.tcx();\n \n     // XXX: This should work for multiple traits.\n-    let ity = ty::impl_traits(tcx, impl_did, vstore)[0];\n+    let ity = ty::impl_traits(tcx, impl_did, store)[0];\n     let trait_ty = ty::subst_tps(tcx, impl_tys, None, ity);\n     debug!(\"(connect trait tps) trait type is %?, impl did is %?\",\n            ty::get(trait_ty).sty, impl_did);\n@@ -557,17 +560,19 @@ pub fn early_resolve_expr(ex: @ast::expr,\n       ast::expr_cast(src, _) => {\n           let target_ty = fcx.expr_ty(ex);\n           match ty::get(target_ty).sty {\n-              ty::ty_trait(_, _, vstore) => {\n+              ty::ty_trait(_, _, store) => {\n                   // Look up vtables for the type we're casting to,\n                   // passing in the source and target type.  The source\n                   // must be a pointer type suitable to the object sigil,\n                   // e.g.: `@x as @Trait`, `&x as &Trait` or `~x as ~Trait`\n                   let ty = structurally_resolved_type(fcx, ex.span,\n                                                       fcx.expr_ty(src));\n-                  match (&ty::get(ty).sty, vstore) {\n-                      (&ty::ty_box(mt), ty::vstore_box) |\n-                      (&ty::ty_uniq(mt), ty::vstore_uniq) |\n-                      (&ty::ty_rptr(_, mt), ty::vstore_slice(*)) => {\n+                  match (&ty::get(ty).sty, store) {\n+                      (&ty::ty_box(mt), ty::BoxTraitStore) |\n+                      // XXX: Bare trait store is deprecated.\n+                      (&ty::ty_box(mt), ty::BareTraitStore) |\n+                      (&ty::ty_uniq(mt), ty::UniqTraitStore) |\n+                      (&ty::ty_rptr(_, mt), ty::RegionTraitStore(*)) => {\n                           let location_info =\n                               &location_info_for_expr(ex);\n                           let vcx = VtableContext {\n@@ -604,9 +609,9 @@ pub fn early_resolve_expr(ex: @ast::expr,\n \n                           // Now, if this is &trait, we need to link the\n                           // regions.\n-                          match (&ty::get(ty).sty, vstore) {\n+                          match (&ty::get(ty).sty, store) {\n                               (&ty::ty_rptr(ra, _),\n-                               ty::vstore_slice(rb)) => {\n+                               ty::RegionTraitStore(rb)) => {\n                                   infer::mk_subr(fcx.infcx(),\n                                                  false,\n                                                  ex.span,\n@@ -617,35 +622,30 @@ pub fn early_resolve_expr(ex: @ast::expr,\n                           }\n                       }\n \n-                      (_, ty::vstore_box(*)) => {\n+                      // XXX: Remove bare below.\n+                      (_, ty::BoxTraitStore) | (_, ty::BareTraitStore) => {\n                           fcx.ccx.tcx.sess.span_err(\n                               ex.span,\n                               fmt!(\"can only cast an @-pointer \\\n                                     to an @-object, not a %s\",\n                                    ty::ty_sort_str(fcx.tcx(), ty)));\n                       }\n \n-                      (_, ty::vstore_uniq(*)) => {\n+                      (_, ty::UniqTraitStore) => {\n                           fcx.ccx.tcx.sess.span_err(\n                               ex.span,\n                               fmt!(\"can only cast an ~-pointer \\\n                                     to a ~-object, not a %s\",\n                                    ty::ty_sort_str(fcx.tcx(), ty)));\n                       }\n \n-                      (_, ty::vstore_slice(*)) => {\n+                      (_, ty::RegionTraitStore(_)) => {\n                           fcx.ccx.tcx.sess.span_err(\n                               ex.span,\n                               fmt!(\"can only cast an &-pointer \\\n                                     to an &-object, not a %s\",\n                                    ty::ty_sort_str(fcx.tcx(), ty)));\n                       }\n-\n-                      (_, ty::vstore_fixed(*)) => {\n-                          fcx.tcx().sess.span_bug(\n-                              ex.span,\n-                              fmt!(\"trait with fixed vstore\"));\n-                      }\n                   }\n               }\n               _ => { /* not a cast to a trait; ignore */ }"}, {"sha": "29d1f81cdd60e57a919d98308c8c322d92580f89", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -81,8 +81,10 @@ pub fn collect_item_types(ccx: @mut CrateCtxt, crate: @ast::crate) {\n \n                     match intrinsic_item.node {\n                       ast::item_trait(*) => {\n-                        let ty = ty::mk_trait(ccx.tcx, def_id, substs,\n-                                              ty::vstore_box);\n+                        let ty = ty::mk_trait(ccx.tcx,\n+                                              def_id,\n+                                              substs,\n+                                              ty::BareTraitStore);\n                         ccx.tcx.intrinsic_defs.insert\n                             (intrinsic_item.ident, (def_id, ty));\n                       }\n@@ -893,7 +895,10 @@ pub fn ty_of_item(ccx: &CrateCtxt, it: @ast::item)\n       }\n       ast::item_trait(ref generics, _, _) => {\n         let (bounds, substs) = mk_substs(ccx, generics, rp);\n-        let t = ty::mk_trait(tcx, local_def(it.id), substs, ty::vstore_box);\n+        let t = ty::mk_trait(tcx,\n+                             local_def(it.id),\n+                             substs,\n+                             ty::BareTraitStore);\n         let tpt = ty_param_bounds_and_ty {\n             bounds: bounds,\n             region_param: rp,"}, {"sha": "cfe45aaf3a8155d61dc6770fe822acf308f4af28", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -102,10 +102,16 @@ pub trait Combine {\n     fn purities(&self, a: purity, b: purity) -> cres<purity>;\n     fn abis(&self, a: ast::Abi, b: ast::Abi) -> cres<ast::Abi>;\n     fn oncenesses(&self, a: Onceness, b: Onceness) -> cres<Onceness>;\n-    fn contraregions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region>;\n+    fn contraregions(&self, a: ty::Region, b: ty::Region)\n+                  -> cres<ty::Region>;\n     fn regions(&self, a: ty::Region, b: ty::Region) -> cres<ty::Region>;\n     fn vstores(&self, vk: ty::terr_vstore_kind,\n                a: ty::vstore, b: ty::vstore) -> cres<ty::vstore>;\n+    fn trait_stores(&self,\n+                    vk: ty::terr_vstore_kind,\n+                    a: ty::TraitStore,\n+                    b: ty::TraitStore)\n+                 -> cres<ty::TraitStore>;\n }\n \n pub struct CombineFields {\n@@ -349,6 +355,36 @@ pub fn super_vstores<C:Combine>(\n     }\n }\n \n+pub fn super_trait_stores<C:Combine>(self: &C,\n+                                     vk: ty::terr_vstore_kind,\n+                                     a: ty::TraitStore,\n+                                     b: ty::TraitStore)\n+                                  -> cres<ty::TraitStore> {\n+    debug!(\"%s.super_vstores(a=%?, b=%?)\", self.tag(), a, b);\n+\n+    match (a, b) {\n+      (ty::RegionTraitStore(a_r), ty::RegionTraitStore(b_r)) => {\n+        do self.contraregions(a_r, b_r).chain |r| {\n+            Ok(ty::RegionTraitStore(r))\n+        }\n+      }\n+\n+      // XXX: This should go away soon.\n+      (ty::BareTraitStore, ty::BoxTraitStore) |\n+      (ty::BoxTraitStore, ty::BareTraitStore) => {\n+        Ok(ty::BoxTraitStore)\n+      }\n+\n+      _ if a == b => {\n+        Ok(a)\n+      }\n+\n+      _ => {\n+        Err(ty::terr_trait_stores_differ(vk, expected_found(self, a, b)))\n+      }\n+    }\n+}\n+\n pub fn super_closure_tys<C:Combine>(\n     self: &C, a_f: &ty::ClosureTy, b_f: &ty::ClosureTy) -> cres<ty::ClosureTy>\n {\n@@ -491,12 +527,12 @@ pub fn super_tys<C:Combine>(\n         }\n       }\n \n-      (ty::ty_trait(a_id, ref a_substs, a_vstore),\n-       ty::ty_trait(b_id, ref b_substs, b_vstore))\n+      (ty::ty_trait(a_id, ref a_substs, a_store),\n+       ty::ty_trait(b_id, ref b_substs, b_store))\n       if a_id == b_id => {\n         do self.substs(a_id, a_substs, b_substs).chain |substs| {\n-            do self.vstores(ty::terr_trait, a_vstore, b_vstore).chain |vs| {\n-                Ok(ty::mk_trait(tcx, a_id, /*bad*/copy substs, vs))\n+            do self.trait_stores(ty::terr_trait, a_store, b_store).chain |s| {\n+                Ok(ty::mk_trait(tcx, a_id, /*bad*/copy substs, s))\n             }\n         }\n       }"}, {"sha": "ff13f7ee576ecaad4ffcb3a4fd6b67edbfc9c3de", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -145,6 +145,14 @@ impl Combine for Glb {\n         super_vstores(self, vk, a, b)\n     }\n \n+    fn trait_stores(&self,\n+                    vk: ty::terr_vstore_kind,\n+                    a: ty::TraitStore,\n+                    b: ty::TraitStore)\n+                 -> cres<ty::TraitStore> {\n+        super_trait_stores(self, vk, a, b)\n+    }\n+\n     fn modes(&self, a: ast::mode, b: ast::mode) -> cres<ast::mode> {\n         super_modes(self, a, b)\n     }"}, {"sha": "933ad44a79e62a9c241d909be57da7eeda039a75", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -227,6 +227,14 @@ impl Combine for Lub {\n         super_vstores(self, vk, a, b)\n     }\n \n+    fn trait_stores(&self,\n+                    vk: ty::terr_vstore_kind,\n+                    a: ty::TraitStore,\n+                    b: ty::TraitStore)\n+                 -> cres<ty::TraitStore> {\n+        super_trait_stores(self, vk, a, b)\n+    }\n+\n     fn modes(&self, a: ast::mode, b: ast::mode) -> cres<ast::mode> {\n         super_modes(self, a, b)\n     }"}, {"sha": "580aefe5b1ab1ea2a14367be1a81cfa7365e3bc5", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -239,6 +239,14 @@ impl Combine for Sub {\n         super_vstores(self, vk, a, b)\n     }\n \n+    fn trait_stores(&self,\n+                    vk: ty::terr_vstore_kind,\n+                    a: ty::TraitStore,\n+                    b: ty::TraitStore)\n+                 -> cres<ty::TraitStore> {\n+        super_trait_stores(self, vk, a, b)\n+    }\n+\n     fn modes(&self, a: ast::mode, b: ast::mode) -> cres<ast::mode> {\n         super_modes(self, a, b)\n     }"}, {"sha": "ed1a3d33f4cc1185b5acedd67972b5eac8bdcfa7", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -90,7 +90,7 @@ pub enum method_origin {\n     method_param(method_param),\n \n     // method invoked on a trait instance\n-    method_trait(ast::def_id, uint, ty::vstore),\n+    method_trait(ast::def_id, uint, ty::TraitStore),\n \n     // method invoked on \"self\" inside a default method\n     method_self(ast::def_id, uint)"}, {"sha": "05dc967e3797d3babef0ba6f9bfe131d5fa0415c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a0de4e7f26d5bbd071fbec5b3958b650cd3f56/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=24a0de4e7f26d5bbd071fbec5b3958b650cd3f56", "patch": "@@ -237,6 +237,15 @@ pub fn vstore_to_str(cx: ctxt, vs: ty::vstore) -> ~str {\n     }\n }\n \n+pub fn trait_store_to_str(cx: ctxt, s: ty::TraitStore) -> ~str {\n+    match s {\n+      ty::BareTraitStore => ~\"\",\n+      ty::UniqTraitStore => ~\"~\",\n+      ty::BoxTraitStore => ~\"@\",\n+      ty::RegionTraitStore(r) => region_to_str_adorned(cx, \"&\", r, \"\")\n+    }\n+}\n+\n pub fn vstore_ty_to_str(cx: ctxt, ty: ~str, vs: ty::vstore) -> ~str {\n     match vs {\n       ty::vstore_fixed(_) => {\n@@ -441,11 +450,11 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n         parameterized(cx, base, substs.self_r, substs.tps)\n       }\n-      ty_trait(did, ref substs, vs) => {\n+      ty_trait(did, ref substs, s) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n         let ty = parameterized(cx, base, substs.self_r, substs.tps);\n-        fmt!(\"%s%s\", vstore_to_str(cx, vs), ty)\n+        fmt!(\"%s%s\", trait_store_to_str(cx, s), ty)\n       }\n       ty_evec(mt, vs) => {\n         vstore_ty_to_str(cx, fmt!(\"%s\", mt_to_str(cx, mt)), vs)"}]}