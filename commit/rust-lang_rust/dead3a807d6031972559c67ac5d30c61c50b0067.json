{"sha": "dead3a807d6031972559c67ac5d30c61c50b0067", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYWQzYTgwN2Q2MDMxOTcyNTU5YzY3YWM1ZDMwYzYxYzUwYjAwNjc=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-06-12T02:11:18Z"}, "committer": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-06-12T02:11:18Z"}, "message": "fix: backport mod resolution error handling", "tree": {"sha": "f66aae59f96e3e1dce40915e3adb5636fbfeaaed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f66aae59f96e3e1dce40915e3adb5636fbfeaaed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dead3a807d6031972559c67ac5d30c61c50b0067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dead3a807d6031972559c67ac5d30c61c50b0067", "html_url": "https://github.com/rust-lang/rust/commit/dead3a807d6031972559c67ac5d30c61c50b0067", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dead3a807d6031972559c67ac5d30c61c50b0067/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc9a0b29743188899eef4dd7dfb5248d18e32e3b", "html_url": "https://github.com/rust-lang/rust/commit/bc9a0b29743188899eef4dd7dfb5248d18e32e3b"}], "stats": {"total": 121, "additions": 85, "deletions": 36}, "files": [{"sha": "9101c015fb92f93772947fc2a7e918870e4cc60e", "filename": "src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -72,7 +72,7 @@ pub enum OperationError {\n     #[error(\"The `--print-config=minimal` option doesn't work with standard input.\")]\n     MinimalPathWithStdin,\n     /// An io error during reading or writing.\n-    #[error(\"io error: {0}\")]\n+    #[error(\"{0}\")]\n     IoError(IoError),\n     /// Attempt to use --check with stdin, which isn't currently\n     /// supported."}, {"sha": "2fc6c4e895526cbc98f2d6c42dbad226b7ab51cc", "filename": "src/format_report_formatter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fformat_report_formatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fformat_report_formatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat_report_formatter.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -162,6 +162,7 @@ fn error_kind_to_snippet_annotation_type(error_kind: &ErrorKind) -> AnnotationTy\n         ErrorKind::LineOverflow(..)\n         | ErrorKind::TrailingWhitespace\n         | ErrorKind::IoError(_)\n+        | ErrorKind::ModuleResolutionError(_)\n         | ErrorKind::ParseError\n         | ErrorKind::LostComment\n         | ErrorKind::LicenseCheck"}, {"sha": "2ba476466ab866fd7d48d741c50eadfb5f0a2bbb", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -26,6 +26,7 @@ use crate::comment::LineClasses;\n use crate::emitter::Emitter;\n use crate::formatting::{FormatErrorMap, FormattingError, ReportedErrors, SourceFile};\n use crate::issues::Issue;\n+use crate::modules::ModuleResolutionError;\n use crate::shape::Indent;\n use crate::syntux::parser::DirectoryOwnership;\n use crate::utils::indent_next_line;\n@@ -110,6 +111,9 @@ pub enum ErrorKind {\n     /// An io error during reading or writing.\n     #[error(\"io error: {0}\")]\n     IoError(io::Error),\n+    /// Error during module resolution.\n+    #[error(\"{0}\")]\n+    ModuleResolutionError(#[from] ModuleResolutionError),\n     /// Parse error occurred when parsing the input.\n     #[error(\"parse error\")]\n     ParseError,"}, {"sha": "8ecb121f9e7e2bb459a1630741f3f651c8e6648c", "filename": "src/modules.rs", "status": "modified", "additions": 63, "deletions": 32, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -5,11 +5,14 @@ use std::path::{Path, PathBuf};\n use rustc_ast::ast;\n use rustc_ast::visit::Visitor;\n use rustc_span::symbol::{self, sym, Symbol};\n+use thiserror::Error;\n \n use crate::attr::MetaVisitor;\n use crate::config::FileName;\n use crate::items::is_mod_decl;\n-use crate::syntux::parser::{Directory, DirectoryOwnership, ModulePathSuccess, Parser};\n+use crate::syntux::parser::{\n+    Directory, DirectoryOwnership, ModulePathSuccess, Parser, ParserError,\n+};\n use crate::syntux::session::ParseSess;\n use crate::utils::contains_skip;\n \n@@ -29,6 +32,24 @@ pub(crate) struct ModResolver<'ast, 'sess> {\n     recursive: bool,\n }\n \n+/// Represents errors while trying to resolve modules.\n+#[error(\"failed to resolve mod `{module}`: {kind}\")]\n+#[derive(Debug, Error)]\n+pub struct ModuleResolutionError {\n+    module: String,\n+    kind: ModuleResolutionErrorKind,\n+}\n+\n+#[derive(Debug, Error)]\n+pub(crate) enum ModuleResolutionErrorKind {\n+    /// Find a file that cannot be parsed.\n+    #[error(\"cannot parse {file}\")]\n+    ParseError { file: PathBuf },\n+    /// File cannot be found.\n+    #[error(\"{file} does not exist\")]\n+    NotFound { file: PathBuf },\n+}\n+\n #[derive(Clone)]\n enum SubModKind<'a, 'ast> {\n     /// `mod foo;`\n@@ -63,7 +84,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     pub(crate) fn visit_crate(\n         mut self,\n         krate: &'ast ast::Crate,\n-    ) -> Result<FileModMap<'ast>, String> {\n+    ) -> Result<FileModMap<'ast>, ModuleResolutionError> {\n         let root_filename = self.parse_sess.span_to_filename(krate.span);\n         self.directory.path = match root_filename {\n             FileName::Real(ref p) => p.parent().unwrap_or(Path::new(\"\")).to_path_buf(),\n@@ -81,7 +102,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     }\n \n     /// Visit `cfg_if` macro and look for module declarations.\n-    fn visit_cfg_if(&mut self, item: Cow<'ast, ast::Item>) -> Result<(), String> {\n+    fn visit_cfg_if(&mut self, item: Cow<'ast, ast::Item>) -> Result<(), ModuleResolutionError> {\n         let mut visitor = visitor::CfgIfVisitor::new(self.parse_sess);\n         visitor.visit_item(&item);\n         for module_item in visitor.mods() {\n@@ -93,7 +114,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     }\n \n     /// Visit modules defined inside macro calls.\n-    fn visit_mod_outside_ast(&mut self, module: ast::Mod) -> Result<(), String> {\n+    fn visit_mod_outside_ast(&mut self, module: ast::Mod) -> Result<(), ModuleResolutionError> {\n         for item in module.items {\n             if is_cfg_if(&item) {\n                 self.visit_cfg_if(Cow::Owned(item.into_inner()))?;\n@@ -108,7 +129,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n     }\n \n     /// Visit modules from AST.\n-    fn visit_mod_from_ast(&mut self, module: &'ast ast::Mod) -> Result<(), String> {\n+    fn visit_mod_from_ast(&mut self, module: &'ast ast::Mod) -> Result<(), ModuleResolutionError> {\n         for item in &module.items {\n             if is_cfg_if(item) {\n                 self.visit_cfg_if(Cow::Borrowed(item))?;\n@@ -125,7 +146,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         item: &'c ast::Item,\n         sub_mod: Cow<'ast, ast::Mod>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         let old_directory = self.directory.clone();\n         let sub_mod_kind = self.peek_sub_mod(item, &sub_mod)?;\n         if let Some(sub_mod_kind) = sub_mod_kind {\n@@ -141,7 +162,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &self,\n         item: &'c ast::Item,\n         sub_mod: &Cow<'ast, ast::Mod>,\n-    ) -> Result<Option<SubModKind<'c, 'ast>>, String> {\n+    ) -> Result<Option<SubModKind<'c, 'ast>>, ModuleResolutionError> {\n         if contains_skip(&item.attrs) {\n             return Ok(None);\n         }\n@@ -165,7 +186,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         sub_mod_kind: SubModKind<'c, 'ast>,\n         _sub_mod: Cow<'ast, ast::Mod>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         match sub_mod_kind {\n             SubModKind::External(mod_path, _, sub_mod) => {\n                 self.file_map\n@@ -188,7 +209,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         sub_mod: Cow<'ast, ast::Mod>,\n         sub_mod_kind: SubModKind<'c, 'ast>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         match sub_mod_kind {\n             SubModKind::External(mod_path, directory_ownership, sub_mod) => {\n                 let directory = Directory {\n@@ -226,7 +247,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         &mut self,\n         sub_mod: Cow<'ast, ast::Mod>,\n         directory: Option<Directory>,\n-    ) -> Result<(), String> {\n+    ) -> Result<(), ModuleResolutionError> {\n         if let Some(directory) = directory {\n             self.directory = directory;\n         }\n@@ -242,7 +263,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n         mod_name: symbol::Ident,\n         attrs: &[ast::Attribute],\n         sub_mod: &Cow<'ast, ast::Mod>,\n-    ) -> Result<Option<SubModKind<'c, 'ast>>, String> {\n+    ) -> Result<Option<SubModKind<'c, 'ast>>, ModuleResolutionError> {\n         let relative = match self.directory.ownership {\n             DirectoryOwnership::Owned { relative } => relative,\n             DirectoryOwnership::UnownedViaBlock | DirectoryOwnership::UnownedViaMod => None,\n@@ -252,16 +273,20 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 return Ok(None);\n             }\n             return match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n-                Some((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n-                Some((m, _)) => Ok(Some(SubModKind::External(\n+                Ok((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n+                Ok((m, _)) => Ok(Some(SubModKind::External(\n                     path,\n                     DirectoryOwnership::Owned { relative: None },\n                     Cow::Owned(m),\n                 ))),\n-                None => Err(format!(\n-                    \"Failed to find module {} in {:?} {:?}\",\n-                    mod_name, self.directory.path, relative,\n-                )),\n+                Err(ParserError::ParseError) => Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::ParseError { file: path },\n+                }),\n+                Err(..) => Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::NotFound { file: path },\n+                }),\n             };\n         }\n \n@@ -291,22 +316,26 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                     }\n                 }\n                 match Parser::parse_file_as_module(self.parse_sess, &path, sub_mod.inner) {\n-                    Some((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n-                    Some((m, _)) if outside_mods_empty => {\n+                    Ok((_, ref attrs)) if contains_skip(attrs) => Ok(None),\n+                    Ok((m, _)) if outside_mods_empty => {\n                         Ok(Some(SubModKind::External(path, ownership, Cow::Owned(m))))\n                     }\n-                    Some((m, _)) => {\n+                    Ok((m, _)) => {\n                         mods_outside_ast.push((path.clone(), ownership, Cow::Owned(m)));\n                         if should_insert {\n                             mods_outside_ast.push((path, ownership, sub_mod.clone()));\n                         }\n                         Ok(Some(SubModKind::MultiExternal(mods_outside_ast)))\n                     }\n-                    None if outside_mods_empty => Err(format!(\n-                        \"Failed to find module {} in {:?} {:?}\",\n-                        mod_name, self.directory.path, relative,\n-                    )),\n-                    None => {\n+                    Err(ParserError::ParseError) => Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::ParseError { file: path },\n+                    }),\n+                    Err(..) if outside_mods_empty => Err(ModuleResolutionError {\n+                        module: mod_name.to_string(),\n+                        kind: ModuleResolutionErrorKind::NotFound { file: path },\n+                    }),\n+                    Err(..) => {\n                         if should_insert {\n                             mods_outside_ast.push((path, ownership, sub_mod.clone()));\n                         }\n@@ -320,10 +349,12 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             }\n             Err(mut e) => {\n                 e.cancel();\n-                Err(format!(\n-                    \"Failed to find module {} in {:?} {:?}\",\n-                    mod_name, self.directory.path, relative,\n-                ))\n+                Err(ModuleResolutionError {\n+                    module: mod_name.to_string(),\n+                    kind: ModuleResolutionErrorKind::NotFound {\n+                        file: self.directory.path.clone(),\n+                    },\n+                })\n             }\n         }\n     }\n@@ -379,9 +410,9 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             }\n             let m = match Parser::parse_file_as_module(self.parse_sess, &actual_path, sub_mod.inner)\n             {\n-                Some((_, ref attrs)) if contains_skip(attrs) => continue,\n-                Some((m, _)) => m,\n-                None => continue,\n+                Ok((_, ref attrs)) if contains_skip(attrs) => continue,\n+                Ok((m, _)) => m,\n+                Err(..) => continue,\n             };\n \n             result.push(("}, {"sha": "89db0f5553c1685d304b403ba7b16af853638c84", "filename": "src/syntux/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fsyntux%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Fsyntux%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntux%2Fparser.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -106,7 +106,7 @@ impl<'a> Parser<'a> {\n         sess: &'a ParseSess,\n         path: &Path,\n         span: Span,\n-    ) -> Option<(ast::Mod, Vec<ast::Attribute>)> {\n+    ) -> Result<(ast::Mod, Vec<ast::Attribute>), ParserError> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), &path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n@@ -119,8 +119,10 @@ impl<'a> Parser<'a> {\n             }\n         }));\n         match result {\n-            Ok(Some(m)) => Some(m),\n-            _ => None,\n+            Ok(Some(m)) => Ok(m),\n+            Ok(None) => Err(ParserError::ParseError),\n+            Err(..) if path.exists() => Err(ParserError::ParseError),\n+            Err(_) => Err(ParserError::ParsePanicError),\n         }\n     }\n "}, {"sha": "e6497f48e0f0604d89ec819e446b0cf5850dd717", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -40,6 +40,7 @@ const SKIP_FILE_WHITE_LIST: &[&str] = &[\n     \"cfg_mod/bar.rs\",\n     \"cfg_mod/foo.rs\",\n     \"cfg_mod/wasm32.rs\",\n+    \"skip/foo.rs\",\n ];\n \n fn init_log() {"}, {"sha": "776658f8fe5748ddc0e94a925f6d765524ea1cb4", "filename": "tests/target/skip/foo.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/tests%2Ftarget%2Fskip%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/tests%2Ftarget%2Fskip%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip%2Ffoo.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -0,0 +1,5 @@\n+#![rustfmt::skip]\n+\n+fn\n+foo()\n+{}"}, {"sha": "2d33bef92519ed54e9ebdb6425fac66de4570b19", "filename": "tests/target/skip/main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dead3a807d6031972559c67ac5d30c61c50b0067/tests%2Ftarget%2Fskip%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dead3a807d6031972559c67ac5d30c61c50b0067/tests%2Ftarget%2Fskip%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip%2Fmain.rs?ref=dead3a807d6031972559c67ac5d30c61c50b0067", "patch": "@@ -0,0 +1,5 @@\n+mod foo;\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}]}