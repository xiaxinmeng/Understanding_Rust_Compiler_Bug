{"sha": "d77dcbc5993a06d200fc1fa5554778bc8fb67d36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3N2RjYmM1OTkzYTA2ZDIwMGZjMWZhNTU1NDc3OGJjOGZiNjdkMzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-20T13:41:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-20T13:41:42Z"}, "message": "Auto merge of #87686 - matthiaskrgr:clippy_august_21_perf, r=jackh726\n\nclippy::perf fixes", "tree": {"sha": "24400f6c694b971ae24d262a12c3f66e042104ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24400f6c694b971ae24d262a12c3f66e042104ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d77dcbc5993a06d200fc1fa5554778bc8fb67d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d77dcbc5993a06d200fc1fa5554778bc8fb67d36", "html_url": "https://github.com/rust-lang/rust/commit/d77dcbc5993a06d200fc1fa5554778bc8fb67d36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d77dcbc5993a06d200fc1fa5554778bc8fb67d36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "521734787ecf80ff12df7ca5998f7ec0b3b7b2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/521734787ecf80ff12df7ca5998f7ec0b3b7b2c9", "html_url": "https://github.com/rust-lang/rust/commit/521734787ecf80ff12df7ca5998f7ec0b3b7b2c9"}, {"sha": "a953574ddb85dcf25317a78fca7adfbb1f2c3d6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a953574ddb85dcf25317a78fca7adfbb1f2c3d6c", "html_url": "https://github.com/rust-lang/rust/commit/a953574ddb85dcf25317a78fca7adfbb1f2c3d6c"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "464079656f9fb0d8357406aaed4551045066999e", "filename": "compiler/rustc_mir/src/transform/coverage/debug.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d77dcbc5993a06d200fc1fa5554778bc8fb67d36/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77dcbc5993a06d200fc1fa5554778bc8fb67d36/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fdebug.rs?ref=d77dcbc5993a06d200fc1fa5554778bc8fb67d36", "patch": "@@ -369,10 +369,10 @@ impl DebugCounters {\n                     }\n                     return format!(\"({})\", self.format_counter_kind(counter_kind));\n                 }\n-                return self.format_counter_kind(counter_kind).to_string();\n+                return self.format_counter_kind(counter_kind);\n             }\n         }\n-        format!(\"#{}\", operand.index().to_string())\n+        format!(\"#{}\", operand.index())\n     }\n }\n "}, {"sha": "b5bc9d3599acbf78435a0aac31394514e38acaa0", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d77dcbc5993a06d200fc1fa5554778bc8fb67d36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77dcbc5993a06d200fc1fa5554778bc8fb67d36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=d77dcbc5993a06d200fc1fa5554778bc8fb67d36", "patch": "@@ -265,7 +265,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Get the number of generics the self type has (if an Adt) unless we can determine that\n                 // the user has written the self type with generics already which we (naively) do by looking\n                 // for a \"<\" in `self_ty_name`.\n-                Adt(def, _) if !self_ty_name.contains(\"<\") => self.tcx.generics_of(def.did).count(),\n+                Adt(def, _) if !self_ty_name.contains('<') => self.tcx.generics_of(def.did).count(),\n                 _ => 0,\n             };\n             let self_ty_generics = if self_ty_generics_count > 0 {"}, {"sha": "1c36335be8167d9a003033d6eba4df2741991c12", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d77dcbc5993a06d200fc1fa5554778bc8fb67d36/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d77dcbc5993a06d200fc1fa5554778bc8fb67d36/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=d77dcbc5993a06d200fc1fa5554778bc8fb67d36", "patch": "@@ -222,8 +222,8 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n                                 let id_to_set = *ids.iter().min().unwrap();\n \n                                 // Sort the id list so that the algorithm is deterministic\n-                                let mut ids = ids.into_iter().collect::<SmallVec<[_; 8]>>();\n-                                ids.sort();\n+                                let mut ids = ids.into_iter().collect::<SmallVec<[usize; 8]>>();\n+                                ids.sort_unstable();\n \n                                 let mut region = connected_regions.remove(&id_to_set).unwrap();\n                                 region.idents.extend_from_slice(&idents_to_add);\n@@ -266,8 +266,8 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n                     // for each pair of impl blocks in the same connected region.\n                     for (_id, region) in connected_regions.into_iter() {\n                         let mut impl_blocks =\n-                            region.impl_blocks.into_iter().collect::<SmallVec<[_; 8]>>();\n-                        impl_blocks.sort();\n+                            region.impl_blocks.into_iter().collect::<SmallVec<[usize; 8]>>();\n+                        impl_blocks.sort_unstable();\n                         for (i, &impl1_items_idx) in impl_blocks.iter().enumerate() {\n                             let &(&impl1_def_id, impl_items1) = &impls_items[impl1_items_idx];\n                             for &impl2_items_idx in impl_blocks[(i + 1)..].iter() {"}]}