{"sha": "c74a442e86abf885b53dba8a1a33359c70f49e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NGE0NDJlODZhYmY4ODViNTNkYmE4YTFhMzMzNTljNzBmNDllMTU=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T01:06:54Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2012-08-23T18:14:14Z"}, "message": "Eliminate some extraneous curly brackets inside invocations of `macro_rules!`.", "tree": {"sha": "162ab5e15a79b149e015a80cc5dd4aaae3076280", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/162ab5e15a79b149e015a80cc5dd4aaae3076280"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c74a442e86abf885b53dba8a1a33359c70f49e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c74a442e86abf885b53dba8a1a33359c70f49e15", "html_url": "https://github.com/rust-lang/rust/commit/c74a442e86abf885b53dba8a1a33359c70f49e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c74a442e86abf885b53dba8a1a33359c70f49e15/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38891b91bfe5d3fd10e841dbc6f67965bed141ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/38891b91bfe5d3fd10e841dbc6f67965bed141ea", "html_url": "https://github.com/rust-lang/rust/commit/38891b91bfe5d3fd10e841dbc6f67965bed141ea"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "7bd73207ef5b1541e445ad9c1cd956c9d8bd10de", "filename": "src/libcore/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Flibcore%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Flibcore%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -65,7 +65,7 @@ fn from_value<A>(+val: A) -> Future<A> {\n }\n \n macro_rules! move_it (\n-    {$x:expr} => { unsafe { let y <- *ptr::addr_of($x); y } }\n+    ($x:expr) => { unsafe { let y <- *ptr::addr_of($x); y } }\n )\n \n fn from_port<A:send>(+port: future_pipe::client::waiting<A>) -> Future<A> {"}, {"sha": "16b4e6810518aeffe8a5681af23e0533ba0c883a", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -1033,7 +1033,7 @@ fn kill_taskgroup(state: TaskGroupInner, me: *rust_task, is_main: bool) {\n // a proper closure because the #[test]s won't understand. Have to fake it.\n macro_rules! taskgroup_key (\n     // Use a \"code pointer\" value that will never be a real code pointer.\n-    {} => (unsafe::transmute((-2 as uint, 0u)))\n+    () => (unsafe::transmute((-2 as uint, 0u)))\n )\n \n fn gen_child_taskgroup(linked: bool, supervised: bool)"}, {"sha": "5454d9ac0d963f135712f5a26cfdbcc50f00e444", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -127,7 +127,7 @@ enum view_item_parse_mode {\n The important thing is to make sure that lookahead doesn't balk\n at INTERPOLATED tokens */\n macro_rules! maybe_whole_expr (\n-    {$p:expr} => { match copy $p.token {\n+    ($p:expr) => { match copy $p.token {\n       INTERPOLATED(token::nt_expr(e)) => {\n         $p.bump();\n         return pexpr(e);\n@@ -142,26 +142,26 @@ macro_rules! maybe_whole_expr (\n )\n \n macro_rules! maybe_whole (\n-    {$p:expr, $constructor:ident} => { match copy $p.token {\n+    ($p:expr, $constructor:ident) => { match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return x; }\n       _ => ()\n     }} ;\n-    {deref $p:expr, $constructor:ident} => { match copy $p.token {\n+    (deref $p:expr, $constructor:ident) => { match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return *x; }\n       _ => ()\n     }} ;\n-    {some $p:expr, $constructor:ident} => { match copy $p.token {\n+    (some $p:expr, $constructor:ident) => { match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return some(x); }\n       _ => ()\n     }} ;\n-    {iovi $p:expr, $constructor:ident} => { match copy $p.token {\n+    (iovi $p:expr, $constructor:ident) => { match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => {\n         $p.bump();\n         return iovi_item(x);\n       }\n       _ => ()\n     }} ;\n-    {pair_empty $p:expr, $constructor:ident} => { match copy $p.token {\n+    (pair_empty $p:expr, $constructor:ident) => { match copy $p.token {\n       INTERPOLATED(token::$constructor(x)) => { $p.bump(); return (~[], x); }\n       _ => ()\n     }}"}, {"sha": "dc8abc532979c09d970edaa3fa39c7eeb21ecbd8", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -16,62 +16,62 @@ left.\n */\n \n macro_rules! html (\n-    { $($body:tt)* } => (\n+    ( $($body:tt)* ) => (\n         parse_node!( []; []; $($body)* )\n     )\n )\n \n macro_rules! parse_node (\n-    {\n+    (\n         [:$head:ident ($(:$head_nodes:expr),*)\n          $(:$tags:ident ($(:$tag_nodes:expr),*))*];\n         [$(:$nodes:expr),*];\n         </$tag:ident> $($rest:tt)*\n-    } => (\n+    ) => (\n         parse_node!(\n             [$(: $tags ($(:$tag_nodes),*))*];\n             [$(:$head_nodes,)* :tag(stringify!($head), ~[$($nodes),*])];\n             $($rest)*\n         )\n     );\n \n-    {\n+    (\n         [$(:$tags:ident ($(:$tag_nodes:expr),*) )*];\n         [$(:$nodes:expr),*];\n         <$tag:ident> $($rest:tt)*\n-    } => (\n+    ) => (\n         parse_node!(\n             [:$tag ($(:$nodes)*) $(: $tags ($(:$tag_nodes),*) )*];\n             [];\n             $($rest)*\n         )\n     );\n \n-    {\n+    (\n         [$(:$tags:ident ($(:$tag_nodes:expr),*) )*];\n         [$(:$nodes:expr),*];\n         . $($rest:tt)*\n-    } => (\n+    ) => (\n         parse_node!(\n             [$(: $tags ($(:$tag_nodes),*))*];\n             [$(:$nodes,)* :text(~\".\")];\n             $($rest)*\n         )\n     );\n \n-    {\n+    (\n         [$(:$tags:ident ($(:$tag_nodes:expr),*) )*];\n         [$(:$nodes:expr),*];\n         $word:ident $($rest:tt)*\n-    } => (\n+    ) => (\n         parse_node!(\n             [$(: $tags ($(:$tag_nodes),*))*];\n             [$(:$nodes,)* :text(stringify!($word))];\n             $($rest)*\n         )\n     );\n \n-    { []; [:$e:expr]; } => ( $e );\n+    ( []; [:$e:expr]; ) => ( $e );\n )\n \n fn main() {"}, {"sha": "31f6d60df23a5e45a71eb1a9bc2f4ef2c56b2853", "filename": "src/test/run-pass/macro-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-2.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -10,7 +10,7 @@ fn main() {\n     assert (mylambda!(y, y * 2)(8) == 16);\n \n     macro_rules! mylambda_tt(\n-        {$x:ident, $body:expr} => {\n+        ($x:ident, $body:expr) => {\n             fn f($x: int) -> int { return $body; };\n             f\n         }"}, {"sha": "6148ab9697906a717b5e6f5407ca8a61d9134ed9", "filename": "src/test/run-pass/macro-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-3.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     assert (trivial!() == 16);\n \n     macro_rules! trivial_tt(\n-        {} => {1*2*4*2*1}\n+        () => {1*2*4*2*1}\n     )\n     assert(trivial_tt!() == 16);\n }"}, {"sha": "1ea77b97b8e4bdb0e8366936a07e7340d6102996", "filename": "src/test/run-pass/macro-by-example-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-by-example-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-by-example-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-by-example-1.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     #macro[[#apply[f, [x, ...]], f(x, ...)]];\n \n     macro_rules! apply_tt(\n-        {$f:expr, ($($x:expr),*)} => {$f($($x),*)}\n+        ($f:expr, ($($x:expr),*)) => {$f($($x),*)}\n     )\n \n     fn add(a: int, b: int) -> int { return a + b; }"}, {"sha": "627500249d91718e111b0ce94e4629cba4884c4a", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -1,6 +1,6 @@\n \n macro_rules! overly_complicated (\n-    {$fnname:ident, $arg:ident, $ty:ty, $body:block, $val:expr, $pat:pat, $res:path} =>\n+    ($fnname:ident, $arg:ident, $ty:ty, $body:block, $val:expr, $pat:pat, $res:path) =>\n     {\n         fn $fnname($arg: $ty) -> option<$ty> $body\n         match $fnname($val) {"}, {"sha": "42bc26797d1c53af4033bb18743ffd315cacb004", "filename": "src/test/run-pass/macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c74a442e86abf885b53dba8a1a33359c70f49e15/src%2Ftest%2Frun-pass%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro.rs?ref=c74a442e86abf885b53dba8a1a33359c70f49e15", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     assert (m1!(2) == 8);\n \n     macro_rules! m1tt (\n-        {$a:expr} => {$a*4}\n+        ($a:expr) => {$a*4}\n     );\n     assert(m1tt!(2) == 8);\n }"}]}