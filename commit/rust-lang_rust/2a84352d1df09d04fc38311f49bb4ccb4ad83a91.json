{"sha": "2a84352d1df09d04fc38311f49bb4ccb4ad83a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODQzNTJkMWRmMDlkMDRmYzM4MzExZjQ5YmI0Y2NiNGFkODNhOTE=", "commit": {"author": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2017-10-19T22:32:27Z"}, "committer": {"name": "Chris Emerson", "email": "github@mail.nosreme.org", "date": "2017-10-19T22:32:27Z"}, "message": "Run rustfmt on the new changes.", "tree": {"sha": "3078882ef04e4804ddc5a09fa8d513c7b3164566", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3078882ef04e4804ddc5a09fa8d513c7b3164566"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a84352d1df09d04fc38311f49bb4ccb4ad83a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a84352d1df09d04fc38311f49bb4ccb4ad83a91", "html_url": "https://github.com/rust-lang/rust/commit/2a84352d1df09d04fc38311f49bb4ccb4ad83a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a84352d1df09d04fc38311f49bb4ccb4ad83a91/comments", "author": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jugglerchris", "id": 1644842, "node_id": "MDQ6VXNlcjE2NDQ4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1644842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jugglerchris", "html_url": "https://github.com/jugglerchris", "followers_url": "https://api.github.com/users/jugglerchris/followers", "following_url": "https://api.github.com/users/jugglerchris/following{/other_user}", "gists_url": "https://api.github.com/users/jugglerchris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jugglerchris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jugglerchris/subscriptions", "organizations_url": "https://api.github.com/users/jugglerchris/orgs", "repos_url": "https://api.github.com/users/jugglerchris/repos", "events_url": "https://api.github.com/users/jugglerchris/events{/privacy}", "received_events_url": "https://api.github.com/users/jugglerchris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9bcb58eb3f3b6508cd7a24e7728f21fcd8f63b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9bcb58eb3f3b6508cd7a24e7728f21fcd8f63b9", "html_url": "https://github.com/rust-lang/rust/commit/f9bcb58eb3f3b6508cd7a24e7728f21fcd8f63b9"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "c0aca68fe2ffebba94a00a4fafc5941385a79310", "filename": "src/rustfmt_diff.rs", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/2a84352d1df09d04fc38311f49bb4ccb4ad83a91/src%2Frustfmt_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a84352d1df09d04fc38311f49bb4ccb4ad83a91/src%2Frustfmt_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustfmt_diff.rs?ref=2a84352d1df09d04fc38311f49bb4ccb4ad83a91", "patch": "@@ -165,52 +165,72 @@ where\n \n #[cfg(test)]\n mod test {\n-    use super::{make_diff,Mismatch};\n+    use super::{make_diff, Mismatch};\n     use super::DiffLine::*;\n \n     #[test]\n     fn diff_simple() {\n         let src = \"one\\ntwo\\nthree\\nfour\\nfive\\n\";\n-        let dest= \"one\\ntwo\\ntrois\\nfour\\nfive\\n\";\n+        let dest = \"one\\ntwo\\ntrois\\nfour\\nfive\\n\";\n         let diff = make_diff(src, dest, 1);\n-        assert_eq!(diff, vec![Mismatch { line_number: 2,\n-                                         lines: vec![\n-                                             Context(\"two\".into()),\n-                                             Resulting(\"three\".into()),\n-                                             Expected(\"trois\".into()),\n-                                             Context(\"four\".into()),\n-                                         ] }]);\n+        assert_eq!(\n+            diff,\n+            vec![\n+                Mismatch {\n+                    line_number: 2,\n+                    lines: vec![\n+                        Context(\"two\".into()),\n+                        Resulting(\"three\".into()),\n+                        Expected(\"trois\".into()),\n+                        Context(\"four\".into()),\n+                    ],\n+                },\n+            ]\n+        );\n     }\n \n     #[test]\n     fn diff_simple2() {\n         let src = \"one\\ntwo\\nthree\\nfour\\nfive\\nsix\\nseven\\n\";\n-        let dest= \"one\\ntwo\\ntrois\\nfour\\ncinq\\nsix\\nseven\\n\";\n+        let dest = \"one\\ntwo\\ntrois\\nfour\\ncinq\\nsix\\nseven\\n\";\n         let diff = make_diff(src, dest, 1);\n-        assert_eq!(diff, vec![Mismatch { line_number: 2,\n-                                         lines: vec![\n-                                             Context(\"two\".into()),\n-                                             Resulting(\"three\".into()),\n-                                             Expected(\"trois\".into()),\n-                                             Context(\"four\".into()),\n-                                         ] },\n-                              Mismatch { line_number: 5,\n-                                         lines: vec![\n-                                             Resulting(\"five\".into()),\n-                                             Expected(\"cinq\".into()),\n-                                             Context(\"six\".into()),\n-                                         ] }]);\n+        assert_eq!(\n+            diff,\n+            vec![\n+                Mismatch {\n+                    line_number: 2,\n+                    lines: vec![\n+                        Context(\"two\".into()),\n+                        Resulting(\"three\".into()),\n+                        Expected(\"trois\".into()),\n+                        Context(\"four\".into()),\n+                    ],\n+                },\n+                Mismatch {\n+                    line_number: 5,\n+                    lines: vec![\n+                        Resulting(\"five\".into()),\n+                        Expected(\"cinq\".into()),\n+                        Context(\"six\".into()),\n+                    ],\n+                },\n+            ]\n+        );\n     }\n \n     #[test]\n     fn diff_zerocontext() {\n         let src = \"one\\ntwo\\nthree\\nfour\\nfive\\n\";\n-        let dest= \"one\\ntwo\\ntrois\\nfour\\nfive\\n\";\n+        let dest = \"one\\ntwo\\ntrois\\nfour\\nfive\\n\";\n         let diff = make_diff(src, dest, 0);\n-        assert_eq!(diff, vec![Mismatch { line_number: 3,\n-                                         lines: vec![\n-                                             Resulting(\"three\".into()),\n-                                             Expected(\"trois\".into()),\n-                                         ] }]);\n+        assert_eq!(\n+            diff,\n+            vec![\n+                Mismatch {\n+                    line_number: 3,\n+                    lines: vec![Resulting(\"three\".into()), Expected(\"trois\".into())],\n+                },\n+            ]\n+        );\n     }\n-}\n\\ No newline at end of file\n+}"}]}