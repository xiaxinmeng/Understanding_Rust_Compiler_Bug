{"sha": "018f8a027d47cce44aa90c97ae4baa069ebccc2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOGY4YTAyN2Q0N2NjZTQ0YWE5MGM5N2FlNGJhYTA2OWViY2NjMmM=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-12-14T18:24:19Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-12-14T20:43:52Z"}, "message": "Use checked_add for adding time in recv_timeout", "tree": {"sha": "7c2ea9458481fcfb87aa597ce1140193dfd73a84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c2ea9458481fcfb87aa597ce1140193dfd73a84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/018f8a027d47cce44aa90c97ae4baa069ebccc2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/018f8a027d47cce44aa90c97ae4baa069ebccc2c", "html_url": "https://github.com/rust-lang/rust/commit/018f8a027d47cce44aa90c97ae4baa069ebccc2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/018f8a027d47cce44aa90c97ae4baa069ebccc2c/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d03617bab24a689bc704e71e509b9c11c655f26", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d03617bab24a689bc704e71e509b9c11c655f26", "html_url": "https://github.com/rust-lang/rust/commit/7d03617bab24a689bc704e71e509b9c11c655f26"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "99424c8a92f7e5dea175418304a3f4844eebbdef", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/018f8a027d47cce44aa90c97ae4baa069ebccc2c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018f8a027d47cce44aa90c97ae4baa069ebccc2c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=018f8a027d47cce44aa90c97ae4baa069ebccc2c", "patch": "@@ -1321,12 +1321,13 @@ impl<T> Receiver<T> {\n         // Do an optimistic try_recv to avoid the performance impact of\n         // Instant::now() in the full-channel case.\n         match self.try_recv() {\n-            Ok(result)\n-                => Ok(result),\n-            Err(TryRecvError::Disconnected)\n-                => Err(RecvTimeoutError::Disconnected),\n-            Err(TryRecvError::Empty)\n-                => self.recv_deadline(Instant::now() + timeout)\n+            Ok(result) => Ok(result),\n+            Err(TryRecvError::Disconnected) => Err(RecvTimeoutError::Disconnected),\n+            Err(TryRecvError::Empty) => match Instant::now().checked_add(timeout) {\n+                Some(deadline) => self.recv_deadline(deadline),\n+                // So far in the future that it's practically the same as waiting indefinitely.\n+                None => self.recv().map_err(RecvTimeoutError::from),\n+            },\n         }\n     }\n \n@@ -2311,6 +2312,17 @@ mod tests {\n         assert_eq!(recv_count, stress);\n     }\n \n+    #[test]\n+    fn very_long_recv_timeout_wont_panic() {\n+        let (tx, rx) = channel::<()>();\n+        let join_handle = thread::spawn(move || {\n+            rx.recv_timeout(Duration::from_secs(u64::max_value()))\n+        });\n+        thread::sleep(Duration::from_secs(1));\n+        assert!(tx.send(()).is_ok());\n+        assert_eq!(join_handle.join().unwrap(), Ok(()));\n+    }\n+\n     #[test]\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context"}]}