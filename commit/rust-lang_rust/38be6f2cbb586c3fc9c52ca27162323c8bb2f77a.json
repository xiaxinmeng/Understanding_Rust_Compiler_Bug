{"sha": "38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "node_id": "C_kwDOAAsO6NoAKDM4YmU2ZjJjYmI1ODZjM2ZjOWM1MmNhMjcxNjIzMjNjOGJiMmY3N2E", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-18T18:53:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-03-18T18:53:07Z"}, "message": "Implement FixedSizeEncoding for UnusedGenericParams.", "tree": {"sha": "9f83bbae19164bfe2b6af6ecfb02632bfb1257af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f83bbae19164bfe2b6af6ecfb02632bfb1257af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "html_url": "https://github.com/rust-lang/rust/commit/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f177b7cb91acd9debd1ed974e6521edb2ab6b097", "url": "https://api.github.com/repos/rust-lang/rust/commits/f177b7cb91acd9debd1ed974e6521edb2ab6b097", "html_url": "https://github.com/rust-lang/rust/commit/f177b7cb91acd9debd1ed974e6521edb2ab6b097"}], "stats": {"total": 57, "additions": 43, "deletions": 14}, "files": [{"sha": "98eae70b4b708bbc35ab6c05dd4cd8ae0d4e699b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "patch": "@@ -226,15 +226,7 @@ provide! { tcx, def_id, other, cdata,\n     lookup_default_body_stability => { table }\n     lookup_deprecation_entry => { table }\n     params_in_repr => { table }\n-    // FIXME: Could be defaulted, but `LazyValue<UnusedGenericParams>` is not `FixedSizeEncoding`..\n-    unused_generic_params => {\n-        cdata\n-            .root\n-            .tables\n-            .unused_generic_params\n-            .get(cdata, def_id.index)\n-            .map_or_else(|| ty::UnusedGenericParams::new_all_used(), |lazy| lazy.decode((cdata, tcx)))\n-    }\n+    unused_generic_params => { cdata.root.tables.unused_generic_params.get(cdata, def_id.index) }\n     opt_def_kind => { table_direct }\n     impl_parent => { table }\n     impl_polarity => { table_direct }"}, {"sha": "19745988c5919982a884401812f7f593206e0b29", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "patch": "@@ -1440,9 +1440,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             let instance =\n                 ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id()));\n             let unused = tcx.unused_generic_params(instance);\n-            if !unused.all_used() {\n-                record!(self.tables.unused_generic_params[def_id.to_def_id()] <- unused);\n-            }\n+            self.tables.unused_generic_params.set(def_id.local_def_index, unused);\n         }\n \n         // Encode all the deduced parameter attributes for everything that has MIR, even for items"}, {"sha": "6f20ac9e5275f211f1be1f6ce847d0354f8141ab", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "patch": "@@ -356,6 +356,7 @@ define_tables! {\n     inherent_impls: Table<DefIndex, LazyArray<DefIndex>>,\n     associated_items_for_impl_trait_in_trait: Table<DefIndex, LazyArray<DefId>>,\n     opt_rpitit_info: Table<DefIndex, Option<LazyValue<ty::ImplTraitInTraitData>>>,\n+    unused_generic_params: Table<DefIndex, UnusedGenericParams>,\n \n - optional:\n     attributes: Table<DefIndex, LazyArray<ast::Attribute>>,\n@@ -398,7 +399,6 @@ define_tables! {\n     trait_def: Table<DefIndex, LazyValue<ty::TraitDef>>,\n     trait_item_def_id: Table<DefIndex, RawDefId>,\n     expn_that_defined: Table<DefIndex, LazyValue<ExpnId>>,\n-    unused_generic_params: Table<DefIndex, LazyValue<UnusedGenericParams>>,\n     params_in_repr: Table<DefIndex, LazyValue<BitSet<u32>>>,\n     repr_options: Table<DefIndex, LazyValue<ReprOptions>>,\n     // `def_keys` and `def_path_hashes` represent a lazy version of a"}, {"sha": "364fa74ab7b459bd31796bef39482ccc2f23c653", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "patch": "@@ -3,7 +3,7 @@ use crate::rmeta::*;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_hir::def::{CtorKind, CtorOf};\n use rustc_index::vec::Idx;\n-use rustc_middle::ty::ParameterizedOverTcx;\n+use rustc_middle::ty::{ParameterizedOverTcx, UnusedGenericParams};\n use rustc_serialize::opaque::FileEncoder;\n use rustc_serialize::Encoder as _;\n use rustc_span::hygiene::MacroKind;\n@@ -50,6 +50,16 @@ impl IsDefault for DefPathHash {\n     }\n }\n \n+impl IsDefault for UnusedGenericParams {\n+    fn is_default(&self) -> bool {\n+        // UnusedGenericParams encodes the *un*usedness as a bitset.\n+        // This means that 0 corresponds to all bits used, which is indeed the default.\n+        let is_default = self.bits() == 0;\n+        debug_assert_eq!(is_default, self.all_used());\n+        is_default\n+    }\n+}\n+\n /// Helper trait, for encoding to, and decoding from, a fixed number of bytes.\n /// Used mainly for Lazy positions and lengths.\n /// Unchecked invariant: `Self::default()` should encode as `[0; BYTE_LEN]`,\n@@ -271,6 +281,21 @@ impl FixedSizeEncoding for bool {\n     }\n }\n \n+impl FixedSizeEncoding for UnusedGenericParams {\n+    type ByteArray = [u8; 4];\n+\n+    #[inline]\n+    fn from_bytes(b: &[u8; 4]) -> Self {\n+        let x: u32 = u32::from_bytes(b);\n+        UnusedGenericParams::from_bits(x)\n+    }\n+\n+    #[inline]\n+    fn write_to_bytes(self, b: &mut [u8; 4]) {\n+        self.bits().write_to_bytes(b);\n+    }\n+}\n+\n // NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n // generic `LazyValue<T>` impl, but in the general case we might not need / want\n // to fit every `usize` in `u32`."}, {"sha": "5fc98f01a5470ee213ba3eec3a2463bad7e67c95", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38be6f2cbb586c3fc9c52ca27162323c8bb2f77a/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=38be6f2cbb586c3fc9c52ca27162323c8bb2f77a", "patch": "@@ -781,6 +781,12 @@ fn needs_fn_once_adapter_shim(\n #[derive(Debug, Copy, Clone, Eq, PartialEq, Decodable, Encodable, HashStable)]\n pub struct UnusedGenericParams(FiniteBitSet<u32>);\n \n+impl Default for UnusedGenericParams {\n+    fn default() -> Self {\n+        UnusedGenericParams::new_all_used()\n+    }\n+}\n+\n impl UnusedGenericParams {\n     pub fn new_all_unused(amount: u32) -> Self {\n         let mut bitset = FiniteBitSet::new_empty();\n@@ -807,4 +813,12 @@ impl UnusedGenericParams {\n     pub fn all_used(&self) -> bool {\n         self.0.is_empty()\n     }\n+\n+    pub fn bits(&self) -> u32 {\n+        self.0.0\n+    }\n+\n+    pub fn from_bits(bits: u32) -> UnusedGenericParams {\n+        UnusedGenericParams(FiniteBitSet(bits))\n+    }\n }"}]}