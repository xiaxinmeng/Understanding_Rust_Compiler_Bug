{"sha": "a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3ZDRlYzkyY2I0Y2I3N2U2MDJlZjc4YTdlMmNlMzQ2MTkyMmE3ZjE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-05-22T07:41:57Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2019-05-22T07:41:57Z"}, "message": "Implement Serialize on IgnoreList (#3565)\n\n* Implement Serialize on IgnoreList\r\n\r\n* Add a test for #3536", "tree": {"sha": "36aa88fc342a11c9c7320f13d4fcdfabc0567d6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36aa88fc342a11c9c7320f13d4fcdfabc0567d6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1", "html_url": "https://github.com/rust-lang/rust/commit/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8", "html_url": "https://github.com/rust-lang/rust/commit/b5449ba7850406821d1b05ca4f55c5eb3b7e8ae8"}], "stats": {"total": 93, "additions": 89, "deletions": 4}, "files": [{"sha": "eaa6d012d5b0bdb0632f7a57550c68eaf02577f9", "filename": "src/config/mod.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1", "patch": "@@ -462,6 +462,79 @@ mod test {\n         assert_eq!(s.contains(\"(unstable)\"), true);\n     }\n \n+    #[test]\n+    fn test_dump_default_config() {\n+        const DEFAULT_CONFIG: &str = r#\"max_width = 100\n+hard_tabs = false\n+tab_spaces = 4\n+newline_style = \"Auto\"\n+use_small_heuristics = \"Default\"\n+indent_style = \"Block\"\n+wrap_comments = false\n+format_code_in_doc_comments = false\n+comment_width = 80\n+normalize_comments = false\n+normalize_doc_attributes = false\n+license_template_path = \"\"\n+format_strings = false\n+format_macro_matchers = false\n+format_macro_bodies = true\n+empty_item_single_line = true\n+struct_lit_single_line = true\n+fn_single_line = false\n+where_single_line = false\n+imports_indent = \"Block\"\n+imports_layout = \"Mixed\"\n+merge_imports = false\n+reorder_imports = true\n+reorder_modules = true\n+reorder_impl_items = false\n+type_punctuation_density = \"Wide\"\n+space_before_colon = false\n+space_after_colon = true\n+spaces_around_ranges = false\n+binop_separator = \"Front\"\n+remove_nested_parens = true\n+combine_control_expr = true\n+overflow_delimited_expr = false\n+struct_field_align_threshold = 0\n+enum_discrim_align_threshold = 0\n+match_arm_blocks = true\n+force_multiline_blocks = false\n+fn_args_density = \"Tall\"\n+brace_style = \"SameLineWhere\"\n+control_brace_style = \"AlwaysSameLine\"\n+trailing_semicolon = true\n+trailing_comma = \"Vertical\"\n+match_block_trailing_comma = false\n+blank_lines_upper_bound = 1\n+blank_lines_lower_bound = 0\n+edition = \"2015\"\n+version = \"One\"\n+inline_attribute_width = 0\n+merge_derives = true\n+use_try_shorthand = false\n+use_field_init_shorthand = false\n+force_explicit_abi = true\n+condense_wildcard_suffixes = false\n+color = \"Auto\"\n+required_version = \"1.2.2\"\n+unstable_features = false\n+disable_all_formatting = false\n+skip_children = false\n+hide_parse_errors = false\n+error_on_line_overflow = false\n+error_on_unformatted = false\n+report_todo = \"Never\"\n+report_fixme = \"Never\"\n+ignore = []\n+emit_mode = \"Files\"\n+make_backup = false\n+\"#;\n+        let toml = Config::default().all_options().to_toml().unwrap();\n+        assert_eq!(&toml, DEFAULT_CONFIG);\n+    }\n+\n     // FIXME(#2183): these tests cannot be run in parallel because they use env vars.\n     // #[test]\n     // fn test_as_not_nightly_channel() {"}, {"sha": "72acaacd34829383c2be2e8352a9f633ec57466f", "filename": "src/config/options.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=a7d4ec92cb4cb77e602ef78a7e2ce3461922a7f1", "patch": "@@ -5,7 +5,8 @@ use std::path::{Path, PathBuf};\n use atty;\n use config_proc_macro::config_type;\n use serde::de::{SeqAccess, Visitor};\n-use serde::{Deserialize, Deserializer, Serialize};\n+use serde::ser::SerializeSeq;\n+use serde::{Deserialize, Deserializer, Serialize, Serializer};\n \n use crate::config::lists::*;\n use crate::config::Config;\n@@ -254,16 +255,27 @@ impl Default for EmitMode {\n }\n \n /// A set of directories, files and modules that rustfmt should ignore.\n-#[derive(Default, Serialize, Clone, Debug, PartialEq)]\n+#[derive(Default, Clone, Debug, PartialEq)]\n pub struct IgnoreList {\n     /// A set of path specified in rustfmt.toml.\n-    #[serde(flatten)]\n     path_set: HashSet<PathBuf>,\n     /// A path to rustfmt.toml.\n-    #[serde(skip_serializing)]\n     rustfmt_toml_path: PathBuf,\n }\n \n+impl Serialize for IgnoreList {\n+    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+    where\n+        S: Serializer,\n+    {\n+        let mut seq = serializer.serialize_seq(Some(self.path_set.len()))?;\n+        for e in &self.path_set {\n+            seq.serialize_element(e)?;\n+        }\n+        seq.end()\n+    }\n+}\n+\n impl<'de> Deserialize<'de> for IgnoreList {\n     fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n     where"}]}