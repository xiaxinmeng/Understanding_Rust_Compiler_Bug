{"sha": "10305fcfdcf01cebaafa57b599506e36cc09055f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMzA1ZmNmZGNmMDFjZWJhYWZhNTdiNTk5NTA2ZTM2Y2MwOTA1NWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T00:21:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-12T00:21:25Z"}, "message": "Merge pull request #20898 from sebras/trpl\n\nCosmetic updates to TRPL text\n\nReviewed-by: steveklabnik", "tree": {"sha": "ae0bffa78665bd8b782ea0b7aef4c323f4c04e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae0bffa78665bd8b782ea0b7aef4c323f4c04e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10305fcfdcf01cebaafa57b599506e36cc09055f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10305fcfdcf01cebaafa57b599506e36cc09055f", "html_url": "https://github.com/rust-lang/rust/commit/10305fcfdcf01cebaafa57b599506e36cc09055f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10305fcfdcf01cebaafa57b599506e36cc09055f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50b0f5c550c3df3ac841f93bc4d5e7ea8720505f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50b0f5c550c3df3ac841f93bc4d5e7ea8720505f", "html_url": "https://github.com/rust-lang/rust/commit/50b0f5c550c3df3ac841f93bc4d5e7ea8720505f"}, {"sha": "64b1a0da985aba36dc9d5726a93c66d8aa633fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/64b1a0da985aba36dc9d5726a93c66d8aa633fcb", "html_url": "https://github.com/rust-lang/rust/commit/64b1a0da985aba36dc9d5726a93c66d8aa633fcb"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "7f8bdfe6972c0ba2ea6a32753dcde76af3ee3827", "filename": "src/doc/trpl/arrays-vectors-and-slices.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md", "raw_url": "https://github.com/rust-lang/rust/raw/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Farrays-vectors-and-slices.md?ref=10305fcfdcf01cebaafa57b599506e36cc09055f", "patch": "@@ -94,6 +94,6 @@ backed by arrays. Slices have type `&[T]`, which we'll talk about when we cover\n generics.\n \n We have now learned all of the most basic Rust concepts. We're ready to start\n-building our guessing game, we just need to know one last thing: how to get\n-input from the keyboard. You can't have a guessing game without the ability to\n-guess!\n+building ourselves a guessing game, we just need to know one last thing: how to\n+get input from the keyboard. You can't have a guessing game without the ability\n+to guess!"}, {"sha": "3c211b007cf9057b0a9f688794eba3f1fc17e795", "filename": "src/doc/trpl/comments.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fcomments.md", "raw_url": "https://github.com/rust-lang/rust/raw/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fcomments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcomments.md?ref=10305fcfdcf01cebaafa57b599506e36cc09055f", "patch": "@@ -40,7 +40,8 @@ fn hello(name: &str) {\n ```\n \n When writing doc comments, adding sections for any arguments, return values,\n-and providing some examples of usage is very, very helpful.\n+and providing some examples of usage is very, very helpful. Don't worry about\n+the `&str`, we'll get to it soon.\n \n You can use the [`rustdoc`](../rustdoc.html) tool to generate HTML documentation\n from these doc comments."}, {"sha": "afa890b84b401576108aacddebb64a65652fc83e", "filename": "src/doc/trpl/compound-data-types.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fcompound-data-types.md?ref=10305fcfdcf01cebaafa57b599506e36cc09055f", "patch": "@@ -23,10 +23,10 @@ let x: (i32, &str) = (1, \"hello\");\n As you can see, the type of a tuple looks just like the tuple, but with each\n position having a type name rather than the value. Careful readers will also\n note that tuples are heterogeneous: we have an `i32` and a `&str` in this tuple.\n-You haven't seen `&str` as a type before, and we'll discuss the details of\n-strings later. In systems programming languages, strings are a bit more complex\n-than in other languages. For now, just read `&str` as a *string slice*, and\n-we'll learn more soon.\n+You have briefly seen `&str` used as a type before, and we'll discuss the\n+details of strings later. In systems programming languages, strings are a bit\n+more complex than in other languages. For now, just read `&str` as a *string\n+slice*, and we'll learn more soon.\n \n You can access the fields in a tuple through a *destructuring let*. Here's\n an example:"}, {"sha": "6980663651a4a27a30a4032b27e0747b46b14de0", "filename": "src/doc/trpl/functions.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Ffunctions.md", "raw_url": "https://github.com/rust-lang/rust/raw/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Ffunctions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ffunctions.md?ref=10305fcfdcf01cebaafa57b599506e36cc09055f", "patch": "@@ -59,15 +59,15 @@ Unlike `let`, you _must_ declare the types of function arguments. This does\n not work:\n \n ```{ignore}\n-fn print_number(x, y) {\n+fn print_sum(x, y) {\n     println!(\"x is: {}\", x + y);\n }\n ```\n \n You get this error:\n \n ```text\n-hello.rs:5:18: 5:19 error: expected `:` but found `,`\n+hello.rs:5:18: 5:19 expected one of `!`, `:`, or `@`, found `)`\n hello.rs:5 fn print_number(x, y) {\n ```\n "}, {"sha": "ea1da167458ab4e17b61e286fddbb5accdebfb0a", "filename": "src/doc/trpl/if.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fif.md", "raw_url": "https://github.com/rust-lang/rust/raw/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fif.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fif.md?ref=10305fcfdcf01cebaafa57b599506e36cc09055f", "patch": "@@ -126,7 +126,7 @@ let y: i32 = if x == 5 { 10; } else { 15; };\n Note the semicolons after the 10 and 15. Rust will give us the following error:\n \n ```text\n-error: mismatched types: expected `i32` but found `()` (expected i32 but found ())\n+error: mismatched types: expected `i32`, found `()` (expected i32, found ())\n ```\n \n We expected an integer, but we got `()`. `()` is pronounced *unit*, and is a"}, {"sha": "59085c5cf5df3d8ae885f6511a434fc625966702", "filename": "src/doc/trpl/variable-bindings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/10305fcfdcf01cebaafa57b599506e36cc09055f/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fvariable-bindings.md?ref=10305fcfdcf01cebaafa57b599506e36cc09055f", "patch": "@@ -98,7 +98,7 @@ let x;\n ...we'll get an error:\n \n ```text\n-src/main.rs:2:9: 2:10 error: cannot determine a type for this local variable: unconstrained type\n+src/main.rs:2:9: 2:10 error: unable to infer enough type information about `_`; type annotations required\n src/main.rs:2     let x;\n                       ^\n ```"}]}