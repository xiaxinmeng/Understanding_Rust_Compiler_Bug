{"sha": "6681694cb5914073cb2502ee442e7f48f743664f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ODE2OTRjYjU5MTQwNzNjYjI1MDJlZTQ0MmU3ZjQ4Zjc0MzY2NGY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-07T12:28:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-08-10T11:19:22Z"}, "message": "Avoid converting filenames into strings where possible", "tree": {"sha": "0d34ede36ffa242ea12641582e729729c01fbafc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d34ede36ffa242ea12641582e729729c01fbafc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6681694cb5914073cb2502ee442e7f48f743664f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6681694cb5914073cb2502ee442e7f48f743664f", "html_url": "https://github.com/rust-lang/rust/commit/6681694cb5914073cb2502ee442e7f48f743664f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6681694cb5914073cb2502ee442e7f48f743664f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1da50543dd6d1778856e24433d186fd39327def1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1da50543dd6d1778856e24433d186fd39327def1", "html_url": "https://github.com/rust-lang/rust/commit/1da50543dd6d1778856e24433d186fd39327def1"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "47895f50780dcd34de2de398124cd9c367f5fa08", "filename": "src/archive.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6681694cb5914073cb2502ee442e7f48f743664f/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6681694cb5914073cb2502ee442e7f48f743664f/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=6681694cb5914073cb2502ee442e7f48f743664f", "patch": "@@ -29,7 +29,7 @@ pub(crate) struct ArArchiveBuilder<'a> {\n     src_archives: Vec<File>,\n     // Don't use `HashMap` here, as the order is important. `rust.metadata.bin` must always be at\n     // the end of an archive for linkers to not get confused.\n-    entries: Vec<(String, ArchiveEntry)>,\n+    entries: Vec<(Vec<u8>, ArchiveEntry)>,\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n@@ -44,7 +44,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             for entry in archive.members() {\n                 let entry = entry.unwrap();\n                 entries.push((\n-                    String::from_utf8(entry.name().to_vec()).unwrap(),\n+                    entry.name().to_vec(),\n                     ArchiveEntry::FromArchive { archive_index: 0, file_range: entry.file_range() },\n                 ));\n             }\n@@ -68,21 +68,21 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n     }\n \n     fn src_files(&mut self) -> Vec<String> {\n-        self.entries.iter().map(|(name, _)| name.clone()).collect()\n+        self.entries.iter().map(|(name, _)| String::from_utf8(name.clone()).unwrap()).collect()\n     }\n \n     fn remove_file(&mut self, name: &str) {\n         let index = self\n             .entries\n             .iter()\n-            .position(|(entry_name, _)| entry_name == name)\n+            .position(|(entry_name, _)| entry_name == name.as_bytes())\n             .expect(\"Tried to remove file not existing in src archive\");\n         self.entries.remove(index);\n     }\n \n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n-            file.file_name().unwrap().to_str().unwrap().to_string(),\n+            file.file_name().unwrap().to_str().unwrap().to_string().into_bytes(),\n             ArchiveEntry::File(file.to_owned()),\n         ));\n     }\n@@ -165,7 +165,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                 match object::File::parse(&*data) {\n                     Ok(object) => {\n                         symbol_table.insert(\n-                            entry_name.as_bytes().to_vec(),\n+                            entry_name.to_vec(),\n                             object\n                                 .symbols()\n                                 .filter_map(|symbol| {\n@@ -190,7 +190,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                         } else {\n                             sess.fatal(&format!(\n                                 \"error parsing `{}` during archive creation: {}\",\n-                                entry_name, err\n+                                String::from_utf8_lossy(&entry_name),\n+                                err\n                             ));\n                         }\n                     }\n@@ -209,7 +210,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n                             err\n                         ));\n                     }),\n-                    entries.iter().map(|(name, _)| name.as_bytes().to_vec()).collect(),\n+                    entries.iter().map(|(name, _)| name.clone()).collect(),\n                     ar::GnuSymbolTableFormat::Size32,\n                     symbol_table,\n                 )\n@@ -232,7 +233,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n \n         // Add all files\n         for (entry_name, data) in entries.into_iter() {\n-            let header = ar::Header::new(entry_name.into_bytes(), data.len() as u64);\n+            let header = ar::Header::new(entry_name, data.len() as u64);\n             match builder {\n                 BuilderKind::Bsd(ref mut builder) => builder.append(&header, &mut &*data).unwrap(),\n                 BuilderKind::Gnu(ref mut builder) => builder.append(&header, &mut &*data).unwrap(),\n@@ -282,7 +283,7 @@ impl<'a> ArArchiveBuilder<'a> {\n                 .map_err(|err| io::Error::new(io::ErrorKind::InvalidData, err))?;\n             if !skip(&file_name) {\n                 self.entries.push((\n-                    file_name,\n+                    file_name.into_bytes(),\n                     ArchiveEntry::FromArchive { archive_index, file_range: entry.file_range() },\n                 ));\n             }"}]}