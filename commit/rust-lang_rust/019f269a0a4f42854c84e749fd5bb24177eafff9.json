{"sha": "019f269a0a4f42854c84e749fd5bb24177eafff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOWYyNjlhMGE0ZjQyODU0Yzg0ZTc0OWZkNWJiMjQxNzdlYWZmZjk=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-19T21:56:32Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-30T10:39:14Z"}, "message": "Process configuration response draft", "tree": {"sha": "543848de3ca2e02cfa244ca177ebe453b34209f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/543848de3ca2e02cfa244ca177ebe453b34209f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/019f269a0a4f42854c84e749fd5bb24177eafff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/019f269a0a4f42854c84e749fd5bb24177eafff9", "html_url": "https://github.com/rust-lang/rust/commit/019f269a0a4f42854c84e749fd5bb24177eafff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/019f269a0a4f42854c84e749fd5bb24177eafff9/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c4aab0c803e3962ffc2c42538df1d29dd3a8ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4aab0c803e3962ffc2c42538df1d29dd3a8ef0", "html_url": "https://github.com/rust-lang/rust/commit/8c4aab0c803e3962ffc2c42538df1d29dd3a8ef0"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "c990a395195ed28892acfe5f2e7547bc91e14bb7", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/019f269a0a4f42854c84e749fd5bb24177eafff9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/019f269a0a4f42854c84e749fd5bb24177eafff9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=019f269a0a4f42854c84e749fd5bb24177eafff9", "patch": "@@ -40,6 +40,7 @@ use crate::{\n     world::{Options, WorldSnapshot, WorldState},\n     Result, ServerConfig,\n };\n+use req::ConfigurationParams;\n \n #[derive(Debug)]\n pub struct LspError {\n@@ -336,10 +337,10 @@ struct LoopState {\n     in_flight_libraries: usize,\n     pending_libraries: Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>,\n     workspace_loaded: bool,\n-\n     roots_progress_reported: Option<usize>,\n     roots_scanned: usize,\n     roots_total: usize,\n+    configuration_request_id: Option<RequestId>,\n }\n \n impl LoopState {\n@@ -397,15 +398,14 @@ fn loop_turn(\n                 req,\n             )?,\n             Message::Notification(not) => {\n-                on_notification(\n-                    &connection.sender,\n-                    world_state,\n-                    &mut loop_state.pending_requests,\n-                    &mut loop_state.subscriptions,\n-                    not,\n-                )?;\n+                on_notification(&connection.sender, world_state, loop_state, not)?;\n             }\n             Message::Response(resp) => {\n+                if Some(&resp.id) == loop_state.configuration_request_id.as_ref() {\n+                    loop_state.configuration_request_id.take();\n+                    eprintln!(\"!!!!!!!!!!!!!!1\");\n+                    dbg!(&resp);\n+                }\n                 let removed = loop_state.pending_responses.remove(&resp.id);\n                 if !removed {\n                     log::error!(\"unexpected response: {:?}\", resp)\n@@ -569,8 +569,7 @@ fn on_request(\n fn on_notification(\n     msg_sender: &Sender<Message>,\n     state: &mut WorldState,\n-    pending_requests: &mut PendingRequests,\n-    subs: &mut Subscriptions,\n+    loop_state: &mut LoopState,\n     not: Notification,\n ) -> Result<()> {\n     let not = match notification_cast::<req::Cancel>(not) {\n@@ -579,7 +578,7 @@ fn on_notification(\n                 NumberOrString::Number(id) => id.into(),\n                 NumberOrString::String(id) => id.into(),\n             };\n-            if pending_requests.cancel(&id) {\n+            if loop_state.pending_requests.cancel(&id) {\n                 let response = Response::new_err(\n                     id,\n                     ErrorCode::RequestCanceled as i32,\n@@ -598,7 +597,7 @@ fn on_notification(\n             if let Some(file_id) =\n                 state.vfs.write().add_file_overlay(&path, params.text_document.text)\n             {\n-                subs.add_sub(FileId(file_id.0));\n+                loop_state.subscriptions.add_sub(FileId(file_id.0));\n             }\n             return Ok(());\n         }\n@@ -629,7 +628,7 @@ fn on_notification(\n             let uri = params.text_document.uri;\n             let path = uri.to_file_path().map_err(|()| format!(\"invalid uri: {}\", uri))?;\n             if let Some(file_id) = state.vfs.write().remove_file_overlay(path.as_path()) {\n-                subs.remove_sub(FileId(file_id.0));\n+                loop_state.subscriptions.remove_sub(FileId(file_id.0));\n             }\n             let params =\n                 req::PublishDiagnosticsParams { uri, diagnostics: Vec::new(), version: None };\n@@ -641,15 +640,17 @@ fn on_notification(\n     };\n     let not = match notification_cast::<req::DidChangeConfiguration>(not) {\n         Ok(_params) => {\n-            dbg!(_params);\n-            // let request = request_new::<req::WorkspaceConfiguration>(\n-            //     loop_state.next_request_id(),\n-            //     ConfigurationParams::default(),\n-            // );\n-            // let zz = connection.sender.send(request.into()).unwrap();\n+            let request_id = loop_state.next_request_id();\n+            let request = request_new::<req::WorkspaceConfiguration>(\n+                request_id.clone(),\n+                ConfigurationParams::default(),\n+            );\n+            msg_sender.send(request.into()).unwrap();\n+            loop_state.configuration_request_id.replace(request_id);\n+\n             return Ok(());\n         }\n-        Err(not) => dbg!(not),\n+        Err(not) => not,\n     };\n     let not = match notification_cast::<req::DidChangeWatchedFiles>(not) {\n         Ok(params) => {"}, {"sha": "501997fef780688dc5c692398f26253ee43a344a", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/019f269a0a4f42854c84e749fd5bb24177eafff9/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/019f269a0a4f42854c84e749fd5bb24177eafff9/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=019f269a0a4f42854c84e749fd5bb24177eafff9", "patch": "@@ -12,9 +12,9 @@ export class Config {\n     private readonly requiresReloadOpts = [\n         \"serverPath\",\n         \"cargoFeatures\",\n-        \"cargo-watch\",\n-        \"highlighting.semanticTokens\",\n-        \"inlayHints\",\n+        \"excludeGlobs\",\n+        \"useClientWatching\",\n+        \"highlighting\",\n         \"updates.channel\",\n     ]\n         .map(opt => `${this.rootSection}.${opt}`);"}]}