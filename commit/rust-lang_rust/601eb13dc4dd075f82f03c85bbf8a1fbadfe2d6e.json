{"sha": "601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMWViMTNkYzRkZDA3NWY4MmYwM2M4NWJiZjhhMWZiYWRmZTJkNmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-31T23:12:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-31T23:12:16Z"}, "message": "Auto merge of #33857 - alexcrichton:new-stage0, r=nikomatsakis\n\nmk: Prepare for a new stage0 compiler\n\nThis commit prepares the source for a new stage0 compiler, the 1.10.0 beta\ncompiler. These artifacts are hot off the bots and should be ready to go.", "tree": {"sha": "3e08c66b9c125b072ea0611ca39f8e482d291178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e08c66b9c125b072ea0611ca39f8e482d291178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "html_url": "https://github.com/rust-lang/rust/commit/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298730e7032cd55809423773da397cd5c7d827d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/298730e7032cd55809423773da397cd5c7d827d4", "html_url": "https://github.com/rust-lang/rust/commit/298730e7032cd55809423773da397cd5c7d827d4"}, {"sha": "fa45670ce4c3813e9af0e50a6b61742310fdaa88", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa45670ce4c3813e9af0e50a6b61742310fdaa88", "html_url": "https://github.com/rust-lang/rust/commit/fa45670ce4c3813e9af0e50a6b61742310fdaa88"}], "stats": {"total": 112, "additions": 32, "deletions": 80}, "files": [{"sha": "22ec624e4f580a1400341c7dcd6d3caf288031a6", "filename": "src/etc/get-stage0.py", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Fetc%2Fget-stage0.py", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Fetc%2Fget-stage0.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-stage0.py?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -35,8 +35,9 @@ def main(argv):\n     filename = filename_base + '.tar.gz'\n     url = 'https://static.rust-lang.org/dist/' + date + '/' + filename\n     dst = dl_dir + '/' + filename\n-    if not os.path.exists(dst):\n-        bootstrap.get(url, dst)\n+    if os.path.exists(dst):\n+        os.unlink(dst)\n+    bootstrap.get(url, dst)\n \n     stage0_dst = triple + '/stage0'\n     if os.path.exists(stage0_dst):"}, {"sha": "f2a297b763028014409b3c75d0f60ecdf21ff831", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -43,7 +43,6 @@\n // Since libcore defines many fundamental lang items, all tests live in a\n // separate crate, libcoretest, to avoid bizarre issues.\n \n-#![cfg_attr(stage0, allow(unused_attributes))]\n #![crate_name = \"core\"]\n #![stable(feature = \"core\", since = \"1.6.0\")]\n #![crate_type = \"rlib\"]"}, {"sha": "bd6cfc427affd04a936a2a115440c5989eb7606f", "filename": "src/libcore/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint_macros.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -10,24 +10,6 @@\n \n #![doc(hidden)]\n \n-#[cfg(stage0)]\n-macro_rules! int_module { ($T:ty, $bits:expr) => (\n-\n-// FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n-// calling the `Bounded::min_value` function.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n-pub const MIN: $T = (-1 as $T) << ($bits - 1);\n-// FIXME(#9837): Compute MIN like this so the high bits that shouldn't exist are 0.\n-// FIXME(#11621): Should be deprecated once CTFE is implemented in favour of\n-// calling the `Bounded::max_value` function.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n-pub const MAX: $T = !MIN;\n-\n-) }\n-\n-#[cfg(not(stage0))]\n macro_rules! int_module { ($T:ident, $bits:expr) => (\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2ab2f9548ef1bfd5ec67ccfb79b1a43efa333329", "filename": "src/libcore/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint_macros.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -10,19 +10,6 @@\n \n #![doc(hidden)]\n \n-#[cfg(stage0)]\n-macro_rules! uint_module { ($T:ty, $bits:expr) => (\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n-pub const MIN: $T = 0 as $T;\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[allow(missing_docs)]\n-pub const MAX: $T = !0 as $T;\n-\n-) }\n-\n-#[cfg(not(stage0))]\n macro_rules! uint_module { ($T:ident, $bits:expr) => (\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "658b1312c496d8b580b6efef49800e49efe1185d", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -88,13 +88,13 @@ use default::Default;\n use fmt;\n \n /// A boolean type which can be safely shared between threads.\n-#[cfg(any(stage0, target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct AtomicBool {\n     v: UnsafeCell<u8>,\n }\n \n-#[cfg(any(stage0, target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Default for AtomicBool {\n     fn default() -> Self {\n@@ -103,29 +103,29 @@ impl Default for AtomicBool {\n }\n \n // Send is implicitly implemented for AtomicBool.\n-#[cfg(any(stage0, target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl Sync for AtomicBool {}\n \n /// A raw pointer type which can be safely shared between threads.\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct AtomicPtr<T> {\n     p: UnsafeCell<*mut T>,\n }\n \n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for AtomicPtr<T> {\n     fn default() -> AtomicPtr<T> {\n         AtomicPtr::new(::ptr::null_mut())\n     }\n }\n \n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Send for AtomicPtr<T> {}\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T> Sync for AtomicPtr<T> {}\n \n@@ -167,11 +167,11 @@ pub enum Ordering {\n }\n \n /// An `AtomicBool` initialized to `false`.\n-#[cfg(any(stage0, target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n \n-#[cfg(any(stage0, target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic = \"8\")]\n impl AtomicBool {\n     /// Creates a new `AtomicBool`.\n     ///\n@@ -508,7 +508,7 @@ impl AtomicBool {\n     }\n }\n \n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n impl<T> AtomicPtr<T> {\n     /// Creates a new `AtomicPtr`.\n     ///\n@@ -1106,14 +1106,14 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n     stable(feature = \"atomic_debug\", since = \"1.3.0\"),\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     stable(feature = \"extended_compare_and_swap\", since = \"1.10.0\"),\n@@ -1311,15 +1311,15 @@ pub fn fence(order: Ordering) {\n }\n \n \n-#[cfg(any(stage0, target_has_atomic = \"8\"))]\n+#[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl fmt::Debug for AtomicBool {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"AtomicBool\").field(&self.load(Ordering::SeqCst)).finish()\n     }\n }\n \n-#[cfg(any(stage0, target_has_atomic = \"ptr\"))]\n+#[cfg(target_has_atomic = \"ptr\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl<T> fmt::Debug for AtomicPtr<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "b87160dd75d046e6c8f5068d886e0e01a4f92be6", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -25,8 +25,8 @@\n \n #![feature(staged_api)]\n \n-#![cfg_attr(not(stage0), panic_runtime)]\n-#![cfg_attr(not(stage0), feature(panic_runtime))]\n+#![panic_runtime]\n+#![feature(panic_runtime)]\n #![cfg_attr(unix, feature(libc))]\n #![cfg_attr(windows, feature(core_intrinsics))]\n \n@@ -93,7 +93,6 @@ pub unsafe extern fn __rust_start_panic(_data: usize, _vtable: usize) -> u32 {\n // Essentially this symbol is just defined to get wired up to libcore/libstd\n // binaries, but it should never be called as we don't link in an unwinding\n // runtime at all.\n-#[cfg(not(stage0))]\n pub mod personalities {\n \n     #[no_mangle]"}, {"sha": "39a93c4ac29481f385e6e8cd16025e1c60c1f994", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -42,8 +42,8 @@\n #![feature(unwind_attributes)]\n #![cfg_attr(target_env = \"msvc\", feature(raw))]\n \n-#![cfg_attr(not(stage0), panic_runtime)]\n-#![cfg_attr(not(stage0), feature(panic_runtime))]\n+#![panic_runtime]\n+#![feature(panic_runtime)]\n \n extern crate alloc;\n extern crate libc;"}, {"sha": "2b2926426f778c0f6f78b2db6299dbb32d299472", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -233,8 +233,7 @@ extern {\n // an argument to the C++ personality function.\n //\n // Again, I'm not entirely sure what this is describing, it just seems to work.\n-#[cfg_attr(all(not(test), not(stage0)),\n-           lang = \"msvc_try_filter\")]\n+#[cfg_attr(not(test), lang = \"msvc_try_filter\")]\n static mut TYPE_DESCRIPTOR1: _TypeDescriptor = _TypeDescriptor {\n     pVFTable: &TYPE_INFO_VTABLE as *const _ as *const _,\n     spare: 0 as *mut _,\n@@ -308,13 +307,6 @@ pub unsafe fn cleanup(payload: [u64; 2]) -> Box<Any + Send> {\n     })\n }\n \n-#[lang = \"msvc_try_filter\"]\n-#[cfg(stage0)]\n-unsafe extern fn __rust_try_filter(_eh_ptrs: *mut u8,\n-                                   _payload: *mut u8) -> i32 {\n-    return 0\n-}\n-\n // This is required by the compiler to exist (e.g. it's a lang item), but\n // it's never actually called by the compiler because __C_specific_handler\n // or _except_handler3 is the personality function that is always used."}, {"sha": "7114d47e6e8904b7632b0620aad1e03fdd84634b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -210,6 +210,8 @@\n        test(no_crate_inject, attr(deny(warnings))),\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n+#![needs_panic_runtime]\n+\n #![feature(alloc)]\n #![feature(allow_internal_unstable)]\n #![feature(asm)]\n@@ -272,6 +274,7 @@\n #![feature(zero_one)]\n #![feature(question_mark)]\n #![feature(try_from)]\n+#![feature(needs_panic_runtime)]\n \n // Issue# 30592: Systematically use alloc_system during stage0 since jemalloc\n // might be unavailable or disabled\n@@ -284,13 +287,6 @@\n #![allow(unused_features)] // std may use features in a platform-specific way\n #![cfg_attr(not(stage0), deny(warnings))]\n \n-// FIXME(stage0): after a snapshot, move needs_panic_runtime up above and remove\n-//                this `extern crate` declaration and feature(panic_unwind)\n-#![cfg_attr(not(stage0), needs_panic_runtime)]\n-#![cfg_attr(not(stage0), feature(needs_panic_runtime))]\n-#[cfg(stage0)]\n-extern crate panic_unwind as __please_just_link_me_dont_reference_me;\n-\n #[cfg(test)] extern crate test;\n \n // We want to reexport a few macros from core but libcore has already been"}, {"sha": "7217eaa1325d63f140a14fed89293c152e93ae7c", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -27,9 +27,6 @@\n // Reexport some of our utilities which are expected by other crates.\n pub use panicking::{begin_panic, begin_panic_fmt};\n \n-#[cfg(stage0)]\n-pub use panicking::begin_panic as begin_unwind;\n-\n #[cfg(not(test))]\n #[lang = \"start\"]\n fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {"}, {"sha": "8e46bdfc5b6b81b8534e38d99ef101ca25dd1174", "filename": "src/stage0.txt", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -12,6 +12,6 @@\n # tarball for a stable release you'll likely see `1.x.0-$date` where `1.x.0` was\n # released on `$date`\n \n-rustc: beta-2016-04-13\n-rustc_key: c2743eb4\n-cargo: nightly-2016-04-10\n+rustc: beta-2016-05-24\n+rustc_key: a4922355\n+cargo: nightly-2016-05-22"}, {"sha": "48016721d52c10783095b721b182b72566dd70af", "filename": "src/tools/tidy/src/cargo.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fcargo.rs?ref=601eb13dc4dd075f82f03c85bbf8a1fbadfe2d6e", "patch": "@@ -81,11 +81,10 @@ fn verify(tomlfile: &Path, libfile: &Path, bad: &mut bool) {\n         }\n \n         // This is intentional, this dependency just makes the crate available\n-        // for others later on.\n-        if krate == \"alloc_jemalloc\" && toml.contains(\"name = \\\"std\\\"\") {\n-            continue\n-        }\n-        if krate == \"panic_abort\" && toml.contains(\"name = \\\"std\\\"\") {\n+        // for others later on. Cover cases\n+        let whitelisted = krate == \"alloc_jemalloc\";\n+        let whitelisted = whitelisted || krate.starts_with(\"panic\");\n+        if toml.contains(\"name = \\\"std\\\"\") && whitelisted {\n             continue\n         }\n "}]}