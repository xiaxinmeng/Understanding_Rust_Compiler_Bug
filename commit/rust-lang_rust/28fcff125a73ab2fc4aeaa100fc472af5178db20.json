{"sha": "28fcff125a73ab2fc4aeaa100fc472af5178db20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZmNmZjEyNWE3M2FiMmZjNGFlYWExMDBmYzQ3MmFmNTE3OGRiMjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-07T15:29:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-07T15:29:23Z"}, "message": "Nicer API", "tree": {"sha": "3021cbb36741e7efd6172561cab5e916a99cdc92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3021cbb36741e7efd6172561cab5e916a99cdc92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28fcff125a73ab2fc4aeaa100fc472af5178db20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28fcff125a73ab2fc4aeaa100fc472af5178db20", "html_url": "https://github.com/rust-lang/rust/commit/28fcff125a73ab2fc4aeaa100fc472af5178db20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28fcff125a73ab2fc4aeaa100fc472af5178db20/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6b81bc013b5278b917d109b723405e0df413323", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b81bc013b5278b917d109b723405e0df413323", "html_url": "https://github.com/rust-lang/rust/commit/c6b81bc013b5278b917d109b723405e0df413323"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "b6dc7cb1bfc10166be3900ddfbd4ac9757409d2f", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/28fcff125a73ab2fc4aeaa100fc472af5178db20/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fcff125a73ab2fc4aeaa100fc472af5178db20/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=28fcff125a73ab2fc4aeaa100fc472af5178db20", "patch": "@@ -29,6 +29,9 @@ pub(crate) use crate::assist_context::{AssistContext, Assists};\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub struct AssistId(pub &'static str);\n \n+#[derive(Clone, Debug)]\n+pub struct GroupLabel(pub String);\n+\n #[derive(Debug, Clone)]\n pub struct Assist {\n     pub id: AssistId,\n@@ -40,10 +43,41 @@ pub struct Assist {\n     pub target: TextRange,\n }\n \n-#[derive(Clone, Debug)]\n-pub struct GroupLabel(pub String);\n+#[derive(Debug, Clone)]\n+pub struct ResolvedAssist {\n+    pub assist: Assist,\n+    pub source_change: SourceChange,\n+}\n \n impl Assist {\n+    /// Return all the assists applicable at the given position.\n+    ///\n+    /// Assists are returned in the \"unresolved\" state, that is only labels are\n+    /// returned, without actual edits.\n+    pub fn unresolved(db: &RootDatabase, range: FileRange) -> Vec<Assist> {\n+        let sema = Semantics::new(db);\n+        let ctx = AssistContext::new(sema, range);\n+        let mut acc = Assists::new_unresolved(&ctx);\n+        handlers::all().iter().for_each(|handler| {\n+            handler(&mut acc, &ctx);\n+        });\n+        acc.finish_unresolved()\n+    }\n+\n+    /// Return all the assists applicable at the given position.\n+    ///\n+    /// Assists are returned in the \"resolved\" state, that is with edit fully\n+    /// computed.\n+    pub fn resolved(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n+        let sema = Semantics::new(db);\n+        let ctx = AssistContext::new(sema, range);\n+        let mut acc = Assists::new_resolved(&ctx);\n+        handlers::all().iter().for_each(|handler| {\n+            handler(&mut acc, &ctx);\n+        });\n+        acc.finish_resolved()\n+    }\n+\n     pub(crate) fn new(\n         id: AssistId,\n         label: String,\n@@ -56,40 +90,6 @@ impl Assist {\n     }\n }\n \n-#[derive(Debug, Clone)]\n-pub struct ResolvedAssist {\n-    pub assist: Assist,\n-    pub source_change: SourceChange,\n-}\n-\n-/// Return all the assists applicable at the given position.\n-///\n-/// Assists are returned in the \"unresolved\" state, that is only labels are\n-/// returned, without actual edits.\n-pub fn unresolved_assists(db: &RootDatabase, range: FileRange) -> Vec<Assist> {\n-    let sema = Semantics::new(db);\n-    let ctx = AssistContext::new(sema, range);\n-    let mut acc = Assists::new_unresolved(&ctx);\n-    handlers::all().iter().for_each(|handler| {\n-        handler(&mut acc, &ctx);\n-    });\n-    acc.finish_unresolved()\n-}\n-\n-/// Return all the assists applicable at the given position.\n-///\n-/// Assists are returned in the \"resolved\" state, that is with edit fully\n-/// computed.\n-pub fn resolved_assists(db: &RootDatabase, range: FileRange) -> Vec<ResolvedAssist> {\n-    let sema = Semantics::new(db);\n-    let ctx = AssistContext::new(sema, range);\n-    let mut acc = Assists::new_resolved(&ctx);\n-    handlers::all().iter().for_each(|handler| {\n-        handler(&mut acc, &ctx);\n-    });\n-    acc.finish_resolved()\n-}\n-\n mod handlers {\n     use crate::{AssistContext, Assists};\n "}, {"sha": "a3eacb8f11540897e8cda3208325b25710059408", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28fcff125a73ab2fc4aeaa100fc472af5178db20/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fcff125a73ab2fc4aeaa100fc472af5178db20/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=28fcff125a73ab2fc4aeaa100fc472af5178db20", "patch": "@@ -11,7 +11,7 @@ use test_utils::{\n     RangeOrOffset,\n };\n \n-use crate::{handlers::Handler, resolved_assists, AssistContext, Assists};\n+use crate::{handlers::Handler, Assist, AssistContext, Assists};\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     let (mut db, file_id) = RootDatabase::with_single_file(text);\n@@ -41,14 +41,14 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n     let (db, file_id) = crate::tests::with_single_file(&before);\n     let frange = FileRange { file_id, range: selection.into() };\n \n-    let mut assist = resolved_assists(&db, frange)\n+    let mut assist = Assist::resolved(&db, frange)\n         .into_iter()\n         .find(|assist| assist.assist.id.0 == assist_id)\n         .unwrap_or_else(|| {\n             panic!(\n                 \"\\n\\nAssist is not applicable: {}\\nAvailable assists: {}\",\n                 assist_id,\n-                resolved_assists(&db, frange)\n+                Assist::resolved(&db, frange)\n                     .into_iter()\n                     .map(|assist| assist.assist.id.0)\n                     .collect::<Vec<_>>()\n@@ -136,7 +136,7 @@ fn assist_order_field_struct() {\n     let (before_cursor_pos, before) = extract_offset(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range: TextRange::empty(before_cursor_pos) };\n-    let assists = resolved_assists(&db, frange);\n+    let assists = Assist::resolved(&db, frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(\n@@ -159,7 +159,7 @@ fn assist_order_if_expr() {\n     let (range, before) = extract_range(before);\n     let (db, file_id) = with_single_file(&before);\n     let frange = FileRange { file_id, range };\n-    let assists = resolved_assists(&db, frange);\n+    let assists = Assist::resolved(&db, frange);\n     let mut assists = assists.iter();\n \n     assert_eq!(assists.next().expect(\"expected assist\").assist.label, \"Extract into variable\");"}, {"sha": "915199bd878ac07e5565036657f9b3c1cfea8e07", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28fcff125a73ab2fc4aeaa100fc472af5178db20/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28fcff125a73ab2fc4aeaa100fc472af5178db20/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=28fcff125a73ab2fc4aeaa100fc472af5178db20", "patch": "@@ -472,7 +472,7 @@ impl Analysis {\n     /// position.\n     pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<Assist>> {\n         self.with_db(|db| {\n-            ra_assists::resolved_assists(db, frange)\n+            ra_assists::Assist::resolved(db, frange)\n                 .into_iter()\n                 .map(|assist| Assist {\n                     id: assist.assist.id,"}]}