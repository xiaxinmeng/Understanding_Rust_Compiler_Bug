{"sha": "d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OWQwYWExYzgwNjNhOTUyMWIwZTAxY2VhZjFhNjkyM2ViNDhkYjQ=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-05-29T22:15:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-29T22:41:55Z"}, "message": "std: some cleanup in net::tcp rename listen_to_conn->listen", "tree": {"sha": "02f6eb3338fa926cf76a360d8c2a7a29b9835da2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f6eb3338fa926cf76a360d8c2a7a29b9835da2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4", "html_url": "https://github.com/rust-lang/rust/commit/d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e129dc39b29a2a67dda9da2c123c111b271522", "url": "https://api.github.com/repos/rust-lang/rust/commits/68e129dc39b29a2a67dda9da2c123c111b271522", "html_url": "https://github.com/rust-lang/rust/commit/68e129dc39b29a2a67dda9da2c123c111b271522"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "6f1b1fd52584750276b48fbb8c524e8c41413287", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=d79d0aa1c8063a9521b0e01ceaf1a6923eb48db4", "patch": "@@ -19,7 +19,7 @@ export tcp_err_data, tcp_connect_err_data;\n // operations on a tcp_socket\n export write, write_future, read_start, read_stop;\n // tcp server stuff\n-export listen_for_conn, accept;\n+export listen, accept;\n // tcp client stuff\n export connect;\n // helper methods\n@@ -676,7 +676,7 @@ a `result` instance containing empty data of type `()` on a\n successful/normal shutdown, and a `tcp_err_data` record in the event\n of listen exiting because of an error\n \"]\n-fn listen_for_conn(host_ip: ip::ip_addr, port: uint, backlog: uint,\n+fn listen(host_ip: ip::ip_addr, port: uint, backlog: uint,\n           iotask: iotask,\n           on_establish_cb: fn~(comm::chan<option<tcp_err_data>>),\n           +new_connect_cb: fn~(tcp_new_connection,\n@@ -697,47 +697,48 @@ fn listen_for_conn(host_ip: ip::ip_addr, port: uint, backlog: uint,\n     };\n     let server_data_ptr = ptr::addr_of(server_data);\n \n-    let setup_po = comm::port::<option<tcp_err_data>>();\n-    let setup_ch = comm::chan(setup_po);\n-    iotask::interact(iotask) {|loop_ptr|\n-        let tcp_addr = ipv4_ip_addr_to_sockaddr_in(host_ip,\n-                                                   port);\n-        alt uv::ll::tcp_init(loop_ptr, server_stream_ptr) {\n-          0i32 {\n-            alt uv::ll::tcp_bind(server_stream_ptr,\n-                                 ptr::addr_of(tcp_addr)) {\n+    let setup_result = comm::listen {|setup_ch|\n+        iotask::interact(iotask) {|loop_ptr|\n+            let tcp_addr = ipv4_ip_addr_to_sockaddr_in(host_ip,\n+                                                       port);\n+            alt uv::ll::tcp_init(loop_ptr, server_stream_ptr) {\n               0i32 {\n-                alt uv::ll::listen(server_stream_ptr,\n-                                   backlog as libc::c_int,\n-                                   tcp_lfc_on_connection_cb) {\n+                alt uv::ll::tcp_bind(server_stream_ptr,\n+                                     ptr::addr_of(tcp_addr)) {\n                   0i32 {\n-                    uv::ll::set_data_for_uv_handle(\n-                        server_stream_ptr,\n-                        server_data_ptr);\n-                    comm::send(setup_ch, none);\n+                    alt uv::ll::listen(server_stream_ptr,\n+                                       backlog as libc::c_int,\n+                                       tcp_lfc_on_connection_cb) {\n+                      0i32 {\n+                        uv::ll::set_data_for_uv_handle(\n+                            server_stream_ptr,\n+                            server_data_ptr);\n+                        comm::send(setup_ch, none);\n+                      }\n+                      _ {\n+                        log(debug, \"failure to uv_listen()\");\n+                        let err_data = uv::ll::get_last_err_data(loop_ptr);\n+                        comm::send(setup_ch, some(err_data));\n+                      }\n+                    }\n                   }\n                   _ {\n-                    log(debug, \"failure to uv_listen()\");\n+                    log(debug, \"failure to uv_tcp_bind\");\n                     let err_data = uv::ll::get_last_err_data(loop_ptr);\n                     comm::send(setup_ch, some(err_data));\n                   }\n                 }\n               }\n               _ {\n-                log(debug, \"failure to uv_tcp_bind\");\n+                log(debug, \"failure to uv_tcp_init\");\n                 let err_data = uv::ll::get_last_err_data(loop_ptr);\n                 comm::send(setup_ch, some(err_data));\n               }\n             }\n-          }\n-          _ {\n-            log(debug, \"failure to uv_tcp_init\");\n-            let err_data = uv::ll::get_last_err_data(loop_ptr);\n-            comm::send(setup_ch, some(err_data));\n-          }\n-        }\n+        };\n+        setup_ch.recv()\n     };\n-    alt comm::recv(setup_po) {\n+    alt setup_result {\n       some(err_data) {\n         // we failed to bind/list w/ libuv\n         result::err(err_data.to_tcp_err())\n@@ -1338,7 +1339,7 @@ mod test {\n         task::spawn_sched(task::manual_threads(1u)) {||\n             let server_ip_addr = ip::v4::parse_addr(server_ip);\n             let listen_result =\n-                listen_for_conn(server_ip_addr, server_port, 128u,\n+                listen(server_ip_addr, server_port, 128u,\n                 iotask,\n                 // on_establish_cb -- called when listener is set up\n                 {|kill_ch|"}]}