{"sha": "c75d45d7e3bf3a6f45029baf97e0448bbcf07608", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NWQ0NWQ3ZTNiZjNhNmY0NTAyOWJhZjk3ZTA0NDhiYmNmMDc2MDg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-01-07T18:16:30Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-13T22:37:59Z"}, "message": "For `for` loop bodies, translate the type of the closure\nbased on the expr_loop_body expression and not the inner closure", "tree": {"sha": "89d1bc09842774ba6d40d9a2c2218ed7bd38e237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89d1bc09842774ba6d40d9a2c2218ed7bd38e237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c75d45d7e3bf3a6f45029baf97e0448bbcf07608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c75d45d7e3bf3a6f45029baf97e0448bbcf07608", "html_url": "https://github.com/rust-lang/rust/commit/c75d45d7e3bf3a6f45029baf97e0448bbcf07608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c75d45d7e3bf3a6f45029baf97e0448bbcf07608/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "745a020db5a1139270579ae102d444aaec51597d", "url": "https://api.github.com/repos/rust-lang/rust/commits/745a020db5a1139270579ae102d444aaec51597d", "html_url": "https://github.com/rust-lang/rust/commit/745a020db5a1139270579ae102d444aaec51597d"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "e154d62147cb946d78abfedf19d6f6c0011e08b6", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c75d45d7e3bf3a6f45029baf97e0448bbcf07608/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75d45d7e3bf3a6f45029baf97e0448bbcf07608/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=c75d45d7e3bf3a6f45029baf97e0448bbcf07608", "patch": "@@ -638,8 +638,8 @@ fn trans_arg_expr(bcx: block,\n                     let arg_ty = expr_ty(bcx, arg_expr);\n                     let proto = ty::ty_fn_proto(arg_ty);\n                     let bcx = closure::trans_expr_fn(\n-                        bcx, proto, decl, /*bad*/copy *body, blk.id, cap,\n-                        Some(ret_flag), expr::SaveIn(scratch));\n+                        bcx, proto, decl, /*bad*/copy *body, arg_expr.id,\n+                        blk.id, cap, Some(ret_flag), expr::SaveIn(scratch));\n                     DatumBlock {bcx: bcx,\n                                 datum: Datum {val: scratch,\n                                               ty: scratch_ty,"}, {"sha": "eae73729b5844a2d20f1e1d22e384562ac35bc16", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c75d45d7e3bf3a6f45029baf97e0448bbcf07608/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75d45d7e3bf3a6f45029baf97e0448bbcf07608/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=c75d45d7e3bf3a6f45029baf97e0448bbcf07608", "patch": "@@ -381,10 +381,30 @@ fn trans_expr_fn(bcx: block,\n                  proto: ast::Proto,\n                  +decl: ast::fn_decl,\n                  +body: ast::blk,\n-                 id: ast::node_id,\n+                 outer_id: ast::node_id,\n+                 user_id: ast::node_id,\n                  cap_clause: ast::capture_clause,\n                  is_loop_body: Option<Option<ValueRef>>,\n-                 dest: expr::Dest) -> block {\n+                 dest: expr::Dest) -> block\n+{\n+    /*!\n+     *\n+     * Translates the body of a closure expression.\n+     *\n+     * - `proto`\n+     * - `decl`\n+     * - `body`\n+     * - `outer_id`: The id of the closure expression with the correct type.\n+     *   This is usually the same as as `user_id`, but in the case of a `for` loop,\n+     *   the `outer_id` will have the return type of boolean, and the `user_id` will\n+     *   have the return type of `nil`.\n+     * - `user_id`: The id of the closure as the user expressed it.  Generally\n+         the same as `outer_id`\n+     * - `cap_clause`: information about captured variables, if any.\n+     * - `is_loop_body`: `Some()` if this is part of a `for` loop.\n+     * - `dest`: where to write the closure value, which must be a (fn ptr, env) pair\n+     */\n+\n     let _icx = bcx.insn_ctxt(\"closure::trans_expr_fn\");\n \n     let dest_addr = match dest {\n@@ -395,7 +415,7 @@ fn trans_expr_fn(bcx: block,\n     };\n \n     let ccx = bcx.ccx();\n-    let fty = node_id_type(bcx, id);\n+    let fty = node_id_type(bcx, outer_id);\n     let llfnty = type_of_fn_from_ty(ccx, fty);\n     let sub_path = vec::append_one(/*bad*/copy bcx.fcx.path,\n                                    path_name(special_idents::anon));\n@@ -407,14 +427,15 @@ fn trans_expr_fn(bcx: block,\n \n     // XXX: Bad copies.\n     let trans_closure_env = |proto, copy body, copy sub_path, copy decl| {\n-        let cap_vars = capture::compute_capture_vars(ccx.tcx, id, proto,\n+        let cap_vars = capture::compute_capture_vars(ccx.tcx, user_id, proto,\n                                                      cap_clause);\n         let ret_handle = match is_loop_body { Some(x) => x, None => None };\n         // XXX: Bad copy.\n         let {llbox, cdata_ty, bcx} = build_closure(bcx, copy cap_vars, proto,\n                                                    ret_handle);\n         trans_closure(ccx, /*bad*/copy sub_path, decl, body, llfn, no_self,\n-                      /*bad*/copy bcx.fcx.param_substs, id, None, |fcx| {\n+                      /*bad*/copy bcx.fcx.param_substs, user_id, None,\n+                      |fcx| {\n             load_environment(fcx, cdata_ty, copy cap_vars,\n                              ret_handle.is_some(), proto);\n                       }, |bcx| {\n@@ -431,7 +452,7 @@ fn trans_expr_fn(bcx: block,\n         }\n         ast::ProtoBare => {\n             trans_closure(ccx, sub_path, decl, body, llfn, no_self, None,\n-                          id, None, |_fcx| { }, |_bcx| { });\n+                          user_id, None, |_fcx| { }, |_bcx| { });\n             rslt(bcx, C_null(T_opaque_box_ptr(ccx)))\n         }\n     };"}, {"sha": "5cbd7fa47c53abd1b59b0cb0c72d49042b5096d7", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c75d45d7e3bf3a6f45029baf97e0448bbcf07608/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c75d45d7e3bf3a6f45029baf97e0448bbcf07608/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=c75d45d7e3bf3a6f45029baf97e0448bbcf07608", "patch": "@@ -564,8 +564,10 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n         ast::expr_fn(proto, copy decl, ref body, cap_clause) => {\n             // Don't use this function for anything real. Use the one in\n             // astconv instead.\n-            return closure::trans_expr_fn(bcx, proto, decl, /*bad*/copy *body,\n-                                          expr.id, cap_clause, None, dest);\n+            return closure::trans_expr_fn(bcx, proto, decl,\n+                                          /*bad*/copy *body,\n+                                          expr.id, expr.id,\n+                                          cap_clause, None, dest);\n         }\n         ast::expr_fn_block(ref decl, ref body, cap_clause) => {\n             let expr_ty = expr_ty(bcx, expr);\n@@ -576,7 +578,7 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                            ty_to_str(tcx, expr_ty));\n                     return closure::trans_expr_fn(\n                         bcx, fn_ty.meta.proto, /*bad*/copy *decl,\n-                        /*bad*/copy *body, expr.id,\n+                        /*bad*/copy *body, expr.id, expr.id,\n                         cap_clause, None, dest);\n                 }\n                 _ => {\n@@ -595,6 +597,7 @@ fn trans_rvalue_dps_unadjusted(bcx: block, expr: @ast::expr,\n                                 fn_ty.meta.proto,\n                                 decl,\n                                 /*bad*/copy *body,\n+                                expr.id,\n                                 blk.id,\n                                 cap,\n                                 Some(None),"}]}