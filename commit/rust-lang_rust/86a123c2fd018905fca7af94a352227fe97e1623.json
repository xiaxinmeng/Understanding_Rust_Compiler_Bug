{"sha": "86a123c2fd018905fca7af94a352227fe97e1623", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YTEyM2MyZmQwMTg5MDVmY2E3YWY5NGEzNTIyMjdmZTk3ZTE2MjM=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-10T03:35:15Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-16T03:11:09Z"}, "message": "Queryify check_item_well_formed\n\nFixes #46753", "tree": {"sha": "cfa8b13b3ad901447c513e7e96eceb245b58193f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa8b13b3ad901447c513e7e96eceb245b58193f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86a123c2fd018905fca7af94a352227fe97e1623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86a123c2fd018905fca7af94a352227fe97e1623", "html_url": "https://github.com/rust-lang/rust/commit/86a123c2fd018905fca7af94a352227fe97e1623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86a123c2fd018905fca7af94a352227fe97e1623/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "450d35f582a100e25a394a188c34c283c837087e", "url": "https://api.github.com/repos/rust-lang/rust/commits/450d35f582a100e25a394a188c34c283c837087e", "html_url": "https://github.com/rust-lang/rust/commit/450d35f582a100e25a394a188c34c283c837087e"}], "stats": {"total": 59, "additions": 45, "deletions": 14}, "files": [{"sha": "20c3fb501572c84d7c05908133254a3ec6af6b2f", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=86a123c2fd018905fca7af94a352227fe97e1623", "patch": "@@ -579,6 +579,7 @@ define_dep_nodes!( <'tcx>\n     [] GetPanicStrategy(CrateNum),\n     [] IsNoBuiltins(CrateNum),\n     [] ImplDefaultness(DefId),\n+    [] CheckItemWellFormed(DefId),\n     [] ReachableNonGenerics(CrateNum),\n     [] NativeLibraries(CrateNum),\n     [] PluginRegistrarFn(CrateNum),"}, {"sha": "8f4100ad5f703e327f171c70308f102c4bdb5654", "filename": "src/librustc/ty/maps/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fmod.rs?ref=86a123c2fd018905fca7af94a352227fe97e1623", "patch": "@@ -298,6 +298,8 @@ define_maps! { <'tcx>\n \n     [] fn impl_defaultness: ImplDefaultness(DefId) -> hir::Defaultness,\n \n+    [] fn check_item_well_formed: CheckItemWellFormed(DefId) -> (),\n+\n     // The DefIds of all non-generic functions and statics in the given crate\n     // that can be reached from outside the crate.\n     //"}, {"sha": "732c91ea98aa6e45b28234e61b141f9c0e3e3e62", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=86a123c2fd018905fca7af94a352227fe97e1623", "patch": "@@ -871,6 +871,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::GetPanicStrategy => { force!(panic_strategy, krate!()); }\n         DepKind::IsNoBuiltins => { force!(is_no_builtins, krate!()); }\n         DepKind::ImplDefaultness => { force!(impl_defaultness, def_id!()); }\n+        DepKind::CheckItemWellFormed => { force!(check_item_well_formed, def_id!()); }\n         DepKind::ReachableNonGenerics => { force!(reachable_non_generics, krate!()); }\n         DepKind::NativeLibraries => { force!(native_libraries, krate!()); }\n         DepKind::PluginRegistrarFn => { force!(plugin_registrar_fn, krate!()); }"}, {"sha": "a6b307b841490d2cece5ea9d7af509ee8f525c3f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=86a123c2fd018905fca7af94a352227fe97e1623", "patch": "@@ -718,13 +718,18 @@ fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum\n     })?)\n }\n \n+fn check_item_well_formed<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n+    wfcheck::CheckTypeWellFormed::new(tcx).check_item_well_formed(def_id);\n+}\n+\n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         typeck_item_bodies,\n         typeck_tables_of,\n         has_typeck_tables,\n         adt_destructor,\n         used_trait_imports,\n+        check_item_well_formed,\n         ..*providers\n     };\n }"}, {"sha": "d665e55898d4a6eda658851b15517a1cdf04506d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86a123c2fd018905fca7af94a352227fe97e1623/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=86a123c2fd018905fca7af94a352227fe97e1623", "patch": "@@ -26,7 +26,7 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir;\n \n-pub struct CheckTypeWellFormedVisitor<'a, 'tcx:'a> {\n+pub struct CheckTypeWellFormed<'a, 'tcx:'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n@@ -43,14 +43,14 @@ struct CheckWfFcxBuilder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n     fn with_fcx<F>(&'tcx mut self, f: F) where\n         F: for<'b> FnOnce(&FnCtxt<'b, 'gcx, 'tcx>,\n-                          &mut CheckTypeWellFormedVisitor<'b, 'gcx>) -> Vec<Ty<'tcx>>\n+                          &mut CheckTypeWellFormed<'b, 'gcx>) -> Vec<Ty<'tcx>>\n     {\n         let id = self.id;\n         let span = self.span;\n         let param_env = self.param_env;\n         self.inherited.enter(|inh| {\n             let fcx = FnCtxt::new(&inh, param_env, id);\n-            let wf_tys = f(&fcx, &mut CheckTypeWellFormedVisitor {\n+            let wf_tys = f(&fcx, &mut CheckTypeWellFormed {\n                 tcx: fcx.tcx.global_tcx(),\n             });\n             fcx.select_all_obligations_or_error();\n@@ -59,10 +59,10 @@ impl<'a, 'gcx, 'tcx> CheckWfFcxBuilder<'a, 'gcx, 'tcx> {\n     }\n }\n \n-impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n+impl<'a, 'gcx> CheckTypeWellFormed<'a, 'gcx> {\n     pub fn new(tcx: TyCtxt<'a, 'gcx, 'gcx>)\n-               -> CheckTypeWellFormedVisitor<'a, 'gcx> {\n-        CheckTypeWellFormedVisitor {\n+               -> CheckTypeWellFormed<'a, 'gcx> {\n+        CheckTypeWellFormed {\n             tcx,\n         }\n     }\n@@ -78,11 +78,14 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     /// We do this check as a pre-pass before checking fn bodies because if these constraints are\n     /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n     /// the types first.\n-    fn check_item_well_formed(&mut self, item: &hir::Item) {\n+    pub fn check_item_well_formed(&mut self, def_id: DefId) {\n         let tcx = self.tcx;\n+        let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n+        let item = tcx.hir.expect_item(node_id);\n+\n         debug!(\"check_item_well_formed(it.id={}, it.name={})\",\n                item.id,\n-               tcx.item_path_str(tcx.hir.local_def_id(item.id)));\n+               tcx.item_path_str(def_id));\n \n         match item.node {\n             // Right now we check that every default trait implementation\n@@ -259,7 +262,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n \n                 // All field types must be well-formed.\n                 for field in &variant.fields {\n-                    fcx.register_wf_obligation(field.ty, field.span, ObligationCauseCode::MiscObligation)\n+                    fcx.register_wf_obligation(field.ty, field.span,\n+                        ObligationCauseCode::MiscObligation)\n                 }\n             }\n \n@@ -333,7 +337,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 None => {\n                     let self_ty = fcx.tcx.type_of(item_def_id);\n                     let self_ty = fcx.normalize_associated_types_in(item.span, &self_ty);\n-                    fcx.register_wf_obligation(self_ty, ast_self_ty.span, ObligationCauseCode::MiscObligation);\n+                    fcx.register_wf_obligation(self_ty, ast_self_ty.span,\n+                        ObligationCauseCode::MiscObligation);\n                 }\n             }\n \n@@ -368,7 +373,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             // parameter includes another (e.g., <T, U = T>). In those cases, we can't\n             // be sure if it will error or not as user might always specify the other.\n             if !ty.needs_subst() {\n-                fcx.register_wf_obligation(ty, fcx.tcx.def_span(d), ObligationCauseCode::MiscObligation);\n+                fcx.register_wf_obligation(ty, fcx.tcx.def_span(d),\n+                    ObligationCauseCode::MiscObligation);\n             }\n         }\n \n@@ -642,14 +648,28 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, def_id: DefId) {\n     }\n }\n \n+pub struct CheckTypeWellFormedVisitor<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+}\n+\n+impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n+    pub fn new(tcx: TyCtxt<'a, 'gcx, 'gcx>)\n+               -> CheckTypeWellFormedVisitor<'a, 'gcx> {\n+        CheckTypeWellFormedVisitor {\n+            tcx,\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n         NestedVisitorMap::None\n     }\n \n     fn visit_item(&mut self, i: &hir::Item) {\n         debug!(\"visit_item: {:?}\", i);\n-        self.check_item_well_formed(i);\n+        let def_id = self.tcx.hir.local_def_id(i.id);\n+        ty::maps::queries::check_item_well_formed::ensure(self.tcx, def_id);\n         intravisit::walk_item(self, i);\n     }\n \n@@ -659,7 +679,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n             hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n             _ => None\n         };\n-        self.check_associated_item(trait_item.id, trait_item.span, method_sig);\n+        CheckTypeWellFormed::new(self.tcx)\n+            .check_associated_item(trait_item.id, trait_item.span, method_sig);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n@@ -669,7 +690,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckTypeWellFormedVisitor<'a, 'tcx> {\n             hir::ImplItemKind::Method(ref sig, _) => Some(sig),\n             _ => None\n         };\n-        self.check_associated_item(impl_item.id, impl_item.span, method_sig);\n+        CheckTypeWellFormed::new(self.tcx)\n+            .check_associated_item(impl_item.id, impl_item.span, method_sig);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n }"}]}