{"sha": "4496e2a06a91e5825f355ce730af802643e8018a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0OTZlMmEwNmE5MWU1ODI1ZjM1NWNlNzMwYWY4MDI2NDNlODAxOGE=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-01-10T17:40:45Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-01-11T22:33:04Z"}, "message": "Apply review suggestions", "tree": {"sha": "f0f41e2d9ff5045f34b38cd3d23bae11e5d56139", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0f41e2d9ff5045f34b38cd3d23bae11e5d56139"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4496e2a06a91e5825f355ce730af802643e8018a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4496e2a06a91e5825f355ce730af802643e8018a", "html_url": "https://github.com/rust-lang/rust/commit/4496e2a06a91e5825f355ce730af802643e8018a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4496e2a06a91e5825f355ce730af802643e8018a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15fc643e05bf8273e378243edbfb3be7aea7ce11", "url": "https://api.github.com/repos/rust-lang/rust/commits/15fc643e05bf8273e378243edbfb3be7aea7ce11", "html_url": "https://github.com/rust-lang/rust/commit/15fc643e05bf8273e378243edbfb3be7aea7ce11"}], "stats": {"total": 82, "additions": 35, "deletions": 47}, "files": [{"sha": "ace59f290666991dc9b4eee2e8136f6c46159a3c", "filename": "crates/ra_assists/src/ast_transform.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_assists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_transform.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -60,6 +60,8 @@ impl<'a, DB: HirDatabase> SubstituteTypeParams<'a, DB> {\n             previous: Box::new(NullTransformer),\n         };\n \n+        // FIXME: It would probably be nicer if we could get this via HIR (i.e. get the\n+        // trait ref, and then go from the types in the substs back to the syntax)\n         fn get_syntactic_substs(impl_block: ast::ImplBlock) -> Option<Vec<ast::TypeRef>> {\n             let target_trait = impl_block.target_trait()?;\n             let path_type = match target_trait {\n@@ -131,12 +133,12 @@ impl<'a, DB: HirDatabase> QualifyPaths<'a, DB> {\n         let resolution = analyzer.resolve_path(self.db, &p)?;\n         match resolution {\n             PathResolution::Def(def) => {\n-                let found_path = from.find_path(self.db, def)?;\n+                let found_path = from.find_use_path(self.db, def)?;\n                 let args = p\n                     .segment()\n                     .and_then(|s| s.type_arg_list())\n                     .map(|arg_list| apply(self, node.with_value(arg_list)));\n-                Some(make::path_with_type_arg_list(found_path.to_ast(), args).syntax().clone())\n+                Some(make::path_with_type_arg_list(path_to_ast(found_path), args).syntax().clone())\n             }\n             PathResolution::Local(_)\n             | PathResolution::TypeParam(_)\n@@ -171,8 +173,7 @@ impl<'a, DB: HirDatabase> AstTransform<'a> for QualifyPaths<'a, DB> {\n     }\n }\n \n-// FIXME: It would probably be nicer if we could get this via HIR (i.e. get the\n-// trait ref, and then go from the types in the substs back to the syntax)\n-// FIXME: This should be a general utility (not even just for assists)\n-\n-// FIXME: This should be a general utility (not even just for assists)\n+fn path_to_ast(path: hir::ModPath) -> ast::Path {\n+    let parse = ast::SourceFile::parse(&path.to_string());\n+    parse.tree().syntax().descendants().find_map(ast::Path::cast).unwrap()\n+}"}, {"sha": "df9c151e5aaec21d4bfcf48df58d1ec49d74831d", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -228,7 +228,9 @@ impl Module {\n         Module::new(self.krate(), module_id)\n     }\n \n-    pub fn find_path(\n+    /// Finds a path that can be used to refer to the given item from within\n+    /// this module, if possible.\n+    pub fn find_use_path(\n         self,\n         db: &impl DefDatabase,\n         item: ModuleDef,"}, {"sha": "a2a9d968cb4c79a9f7c412d957ed4e9c5fc3564e", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -206,7 +206,7 @@ impl SourceAnalyzer {\n     }\n \n     pub fn module(&self) -> Option<crate::code_model::Module> {\n-        Some(crate::code_model::Module { id: self.resolver.module_id()? })\n+        Some(crate::code_model::Module { id: self.resolver.module()? })\n     }\n \n     fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {"}, {"sha": "da273eb11559e4999a8075ee27efbf3d794bb216", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -107,13 +107,6 @@ pub trait DefDatabase: InternDatabase + AstDatabase {\n     // Remove this query completely, in favor of `Attrs::docs` method\n     #[salsa::invoke(Documentation::documentation_query)]\n     fn documentation(&self, def: AttrDefId) -> Option<Documentation>;\n-\n-    #[salsa::invoke(crate::find_path::importable_locations_in_crate_query)]\n-    fn importable_locations_in_crate(\n-        &self,\n-        item: crate::item_scope::ItemInNs,\n-        krate: CrateId,\n-    ) -> Arc<[(ModuleId, hir_expand::name::Name, crate::visibility::Visibility)]>;\n }\n \n fn crate_def_map(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {"}, {"sha": "f7dc8acb7f37b7c79bd3102c6d4f74a200b09e00", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -34,7 +34,7 @@ fn find_path_inner(\n     // - if the item is already in scope, return the name under which it is\n     let def_map = db.crate_def_map(from.krate);\n     let from_scope: &crate::item_scope::ItemScope = &def_map.modules[from.local_id].scope;\n-    if let Some((name, _)) = from_scope.reverse_get(item) {\n+    if let Some((name, _)) = from_scope.name_of(item) {\n         return Some(ModPath::from_simple_segments(PathKind::Plain, vec![name.clone()]));\n     }\n \n@@ -77,7 +77,7 @@ fn find_path_inner(\n         let prelude_def_map = db.crate_def_map(prelude_module.krate);\n         let prelude_scope: &crate::item_scope::ItemScope =\n             &prelude_def_map.modules[prelude_module.local_id].scope;\n-        if let Some((name, vis)) = prelude_scope.reverse_get(item) {\n+        if let Some((name, vis)) = prelude_scope.name_of(item) {\n             if vis.is_visible_from(db, from) {\n                 return Some(ModPath::from_simple_segments(PathKind::Plain, vec![name.clone()]));\n             }\n@@ -146,7 +146,7 @@ fn find_importable_locations(\n         .chain(crate_graph.dependencies(from.krate).map(|dep| dep.crate_id))\n     {\n         result.extend(\n-            db.importable_locations_in_crate(item, krate)\n+            importable_locations_in_crate(db, item, krate)\n                 .iter()\n                 .filter(|(_, _, vis)| vis.is_visible_from(db, from))\n                 .map(|(m, n, _)| (*m, n.clone())),\n@@ -160,17 +160,16 @@ fn find_importable_locations(\n /// non-private `use`s.\n ///\n /// Note that the crate doesn't need to be the one in which the item is defined;\n-/// it might be re-exported in other crates. We cache this as a query since we\n-/// need to walk the whole def map for it.\n-pub(crate) fn importable_locations_in_crate_query(\n+/// it might be re-exported in other crates.\n+fn importable_locations_in_crate(\n     db: &impl DefDatabase,\n     item: ItemInNs,\n     krate: CrateId,\n-) -> std::sync::Arc<[(ModuleId, Name, Visibility)]> {\n+) -> Vec<(ModuleId, Name, Visibility)> {\n     let def_map = db.crate_def_map(krate);\n     let mut result = Vec::new();\n     for (local_id, data) in def_map.modules.iter() {\n-        if let Some((name, vis)) = data.scope.reverse_get(item) {\n+        if let Some((name, vis)) = data.scope.name_of(item) {\n             let is_private = if let Visibility::Module(private_to) = vis {\n                 private_to.local_id == local_id\n             } else {\n@@ -192,7 +191,7 @@ pub(crate) fn importable_locations_in_crate_query(\n             result.push((ModuleId { krate, local_id }, name.clone(), vis));\n         }\n     }\n-    result.into()\n+    result\n }\n \n #[cfg(test)]"}, {"sha": "d74a1cef2157c74de6b3ba42f0071dda07e7e9e3", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -104,7 +104,7 @@ impl ItemScope {\n         }\n     }\n \n-    pub(crate) fn reverse_get(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n+    pub(crate) fn name_of(&self, item: ItemInNs) -> Option<(&Name, Visibility)> {\n         for (name, per_ns) in &self.visible {\n             if let Some(vis) = item.match_with(*per_ns) {\n                 return Some((name, vis));\n@@ -207,8 +207,7 @@ impl ItemInNs {\n \n     pub fn as_module_def_id(self) -> Option<ModuleDefId> {\n         match self {\n-            ItemInNs::Types(t) => Some(t),\n-            ItemInNs::Values(v) => Some(v),\n+            ItemInNs::Types(id) | ItemInNs::Values(id) => Some(id),\n             ItemInNs::Macros(_) => None,\n         }\n     }"}, {"sha": "9f93a54244ddad43ad99d58d58aea2ae84884ed7", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -1,7 +1,11 @@\n //! A desugared representation of paths like `crate::foo` or `<Type as Trait>::bar`.\n mod lower;\n \n-use std::{fmt::Display, iter, sync::Arc};\n+use std::{\n+    fmt::{self, Display},\n+    iter,\n+    sync::Arc,\n+};\n \n use hir_expand::{\n     hygiene::Hygiene,\n@@ -78,12 +82,6 @@ impl ModPath {\n         }\n         self.segments.first()\n     }\n-\n-    pub fn to_ast(&self) -> ast::Path {\n-        use ast::AstNode;\n-        let parse = ast::SourceFile::parse(&self.to_string());\n-        parse.tree().syntax().descendants().find_map(ast::Path::cast).unwrap()\n-    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -255,7 +253,7 @@ impl From<Name> for ModPath {\n }\n \n impl Display for ModPath {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let mut first_segment = true;\n         let mut add_segment = |s| {\n             if !first_segment {"}, {"sha": "f7bac580112b31be61c5c92c63e9945ee8cada16", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -128,7 +128,7 @@ impl Resolver {\n         path: &ModPath,\n         shadow: BuiltinShadowMode,\n     ) -> PerNs {\n-        let (item_map, module) = match self.module() {\n+        let (item_map, module) = match self.module_scope() {\n             Some(it) => it,\n             None => return PerNs::none(),\n         };\n@@ -239,7 +239,7 @@ impl Resolver {\n     ) -> Option<Visibility> {\n         match visibility {\n             RawVisibility::Module(_) => {\n-                let (item_map, module) = match self.module() {\n+                let (item_map, module) = match self.module_scope() {\n                     Some(it) => it,\n                     None => return None,\n                 };\n@@ -379,7 +379,7 @@ impl Resolver {\n         db: &impl DefDatabase,\n         path: &ModPath,\n     ) -> Option<MacroDefId> {\n-        let (item_map, module) = self.module()?;\n+        let (item_map, module) = self.module_scope()?;\n         item_map.resolve_path(db, module, &path, BuiltinShadowMode::Other).0.take_macros()\n     }\n \n@@ -403,21 +403,21 @@ impl Resolver {\n         traits\n     }\n \n-    fn module(&self) -> Option<(&CrateDefMap, LocalModuleId)> {\n+    fn module_scope(&self) -> Option<(&CrateDefMap, LocalModuleId)> {\n         self.scopes.iter().rev().find_map(|scope| match scope {\n             Scope::ModuleScope(m) => Some((&*m.crate_def_map, m.module_id)),\n \n             _ => None,\n         })\n     }\n \n-    pub fn module_id(&self) -> Option<ModuleId> {\n-        let (def_map, local_id) = self.module()?;\n+    pub fn module(&self) -> Option<ModuleId> {\n+        let (def_map, local_id) = self.module_scope()?;\n         Some(ModuleId { krate: def_map.krate, local_id })\n     }\n \n     pub fn krate(&self) -> Option<CrateId> {\n-        self.module().map(|t| t.0.krate)\n+        self.module_scope().map(|t| t.0.krate)\n     }\n \n     pub fn where_predicates_in_scope<'a>("}, {"sha": "b3fa1efbab510466ba43a43d2e8a3dbb43f931fb", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4496e2a06a91e5825f355ce730af802643e8018a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=4496e2a06a91e5825f355ce730af802643e8018a", "patch": "@@ -37,10 +37,6 @@ impl Name {\n         Name(Repr::TupleField(idx))\n     }\n \n-    pub fn for_crate_dependency(dep: &ra_db::Dependency) -> Name {\n-        Name::new_text(dep.name.clone())\n-    }\n-\n     /// Shortcut to create inline plain text name\n     const fn new_inline_ascii(text: &[u8]) -> Name {\n         Name::new_text(SmolStr::new_inline_from_ascii(text.len(), text))"}]}