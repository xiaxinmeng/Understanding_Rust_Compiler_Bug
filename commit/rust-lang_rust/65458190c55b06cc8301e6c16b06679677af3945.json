{"sha": "65458190c55b06cc8301e6c16b06679677af3945", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NDU4MTkwYzU1YjA2Y2M4MzAxZTZjMTZiMDY2Nzk2NzdhZjM5NDU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-10-10T08:53:08Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-10-14T09:06:20Z"}, "message": "Unification and cleanup of librustc_mir error codes", "tree": {"sha": "f330bc3c8a5bbffb0d0853fff4f5eaa61800d520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f330bc3c8a5bbffb0d0853fff4f5eaa61800d520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65458190c55b06cc8301e6c16b06679677af3945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65458190c55b06cc8301e6c16b06679677af3945", "html_url": "https://github.com/rust-lang/rust/commit/65458190c55b06cc8301e6c16b06679677af3945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65458190c55b06cc8301e6c16b06679677af3945/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6de3ebd69acc627d3a8560587e5475f2240ce8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6de3ebd69acc627d3a8560587e5475f2240ce8a", "html_url": "https://github.com/rust-lang/rust/commit/c6de3ebd69acc627d3a8560587e5475f2240ce8a"}], "stats": {"total": 142, "additions": 92, "deletions": 50}, "files": [{"sha": "419c905cb5127a070530064f1b056b4630f7cb21", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 92, "deletions": 50, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/65458190c55b06cc8301e6c16b06679677af3945/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65458190c55b06cc8301e6c16b06679677af3945/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=65458190c55b06cc8301e6c16b06679677af3945", "patch": "@@ -64,7 +64,9 @@ E0004: r##\"\n This error indicates that the compiler cannot guarantee a matching pattern for\n one or more possible inputs to a match expression. Guaranteed matches are\n required in order to assign values to match expressions, or alternatively,\n-determine the flow of execution. Erroneous code example:\n+determine the flow of execution.\n+\n+Erroneous code example:\n \n ```compile_fail,E0004\n enum Terminator {\n@@ -109,7 +111,9 @@ match x {\n \n E0005: r##\"\n Patterns used to bind names must be irrefutable, that is, they must guarantee\n-that a name will be extracted in all cases. Erroneous code example:\n+that a name will be extracted in all cases.\n+\n+Erroneous code example:\n \n ```compile_fail,E0005\n let x = Some(1);\n@@ -145,6 +149,8 @@ like the following is invalid as it requires the entire `Option<String>` to be\n moved into a variable called `op_string` while simultaneously requiring the\n inner `String` to be moved into a variable called `s`.\n \n+Erroneous code example:\n+\n ```compile_fail,E0007\n let x = Some(\"s\".to_string());\n \n@@ -211,8 +217,9 @@ match x {\n E0010: r##\"\n The value of statics and constants must be known at compile time, and they live\n for the entire lifetime of a program. Creating a boxed value allocates memory on\n-the heap at runtime, and therefore cannot be done at compile time. Erroneous\n-code example:\n+the heap at runtime, and therefore cannot be done at compile time.\n+\n+Erroneous code example:\n \n ```compile_fail,E0010\n #![feature(box_syntax)]\n@@ -223,15 +230,17 @@ const CON : Box<i32> = box 0;\n \n E0013: r##\"\n Static and const variables can refer to other const variables. But a const\n-variable cannot refer to a static variable. For example, `Y` cannot refer to\n-`X` here:\n+variable cannot refer to a static variable.\n+\n+Erroneous code example:\n \n ```compile_fail,E0013\n static X: i32 = 42;\n const Y: i32 = X;\n ```\n \n-To fix this, the value can be extracted as a const and then used:\n+In this example, `Y` cannot refer to `X` here. To fix this, the value can be\n+extracted as a const and then used:\n \n ```\n const A: i32 = 42;\n@@ -260,6 +269,7 @@ See [RFC 911] for more details on the design of `const fn`s.\n \n E0017: r##\"\n References in statics and constants may only refer to immutable values.\n+\n Erroneous code example:\n \n ```compile_fail,E0017\n@@ -282,24 +292,17 @@ If you really want global mutable state, try using `static mut` or a global\n \n E0019: r##\"\n A function call isn't allowed in the const's initialization expression\n-because the expression's value must be known at compile-time. Erroneous code\n-example:\n+because the expression's value must be known at compile-time.\n \n-```compile_fail\n-enum Test {\n-    V1\n-}\n+Erroneous code example:\n \n-impl Test {\n-    fn test(&self) -> i32 {\n-        12\n-    }\n-}\n+```compile_fail,E0019\n+#![feature(box_syntax)]\n \n fn main() {\n-    const FOO: Test = Test::V1;\n+    struct MyOwned;\n \n-    const A: i32 = FOO.test(); // You can't call Test::func() here!\n+    static STATIC11: Box<MyOwned> = box MyOwned; // error!\n }\n ```\n \n@@ -328,13 +331,13 @@ fn main() {\n \n E0030: r##\"\n When matching against a range, the compiler verifies that the range is\n-non-empty.  Range patterns include both end-points, so this is equivalent to\n+non-empty. Range patterns include both end-points, so this is equivalent to\n requiring the start of the range to be less than or equal to the end of the\n range.\n \n-For example:\n+Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0030\n match 5u32 {\n     // This range is ok, albeit pointless.\n     1 ..= 1 => {}\n@@ -379,6 +382,26 @@ See also https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html\n \"##,\n \n E0158: r##\"\n+An associated const has been referenced in a pattern.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0158\n+enum EFoo { A, B, C, D }\n+\n+trait Foo {\n+    const X: EFoo;\n+}\n+\n+fn test<A: Foo>(arg: EFoo) {\n+    match arg {\n+        A::X => { // error!\n+            println!(\"A::X\");\n+        }\n+    }\n+}\n+```\n+\n `const` and `static` mean different things. A `const` is a compile-time\n constant, an alias for a literal value. This property means you can match it\n directly within a pattern.\n@@ -405,7 +428,7 @@ values of a known size can be moved.\n \n Erroneous code example:\n \n-```compile_fail\n+```compile_fail,E0161\n #![feature(box_syntax)]\n \n fn main() {\n@@ -705,7 +728,9 @@ about safety.\n \"##,\n \n E0381: r##\"\n-It is not allowed to use or capture an uninitialized variable. For example:\n+It is not allowed to use or capture an uninitialized variable.\n+\n+Erroneous code example:\n \n ```compile_fail,E0381\n fn main() {\n@@ -727,7 +752,9 @@ fn main() {\n \n E0382: r##\"\n This error occurs when an attempt is made to use a variable after its contents\n-have been moved elsewhere. For example:\n+have been moved elsewhere.\n+\n+Erroneous code example:\n \n ```compile_fail,E0382\n struct MyStruct { s: u32 }\n@@ -934,7 +961,9 @@ E0387: r##\"\n #### Note: this error code is no longer emitted by the compiler.\n \n This error occurs when an attempt is made to mutate or mutably reference data\n-that a closure has captured immutably. Examples of this error are shown below:\n+that a closure has captured immutably.\n+\n+Erroneous code example:\n \n ```compile_fail\n // Accepts a function or a closure that captures its environment immutably.\n@@ -999,7 +1028,7 @@ An attempt was made to mutate data using a non-mutable reference. This\n commonly occurs when attempting to assign to a non-mutable reference of a\n mutable reference (`&(&mut T)`).\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail\n struct FancyNum {\n@@ -1059,8 +1088,9 @@ fn main() {\n \"##,\n \n E0492: r##\"\n-A borrow of a constant containing interior mutability was attempted. Erroneous\n-code example:\n+A borrow of a constant containing interior mutability was attempted.\n+\n+Erroneous code example:\n \n ```compile_fail,E0492\n use std::sync::atomic::AtomicUsize;\n@@ -1177,7 +1207,9 @@ static FOO: Foo = Foo { field1: DropType::A }; // We initialize all fields\n \"##,\n \n E0499: r##\"\n-A variable was borrowed as mutable more than once. Erroneous code example:\n+A variable was borrowed as mutable more than once.\n+\n+Erroneous code example:\n \n ```compile_fail,E0499\n let mut i = 0;\n@@ -1208,7 +1240,9 @@ a;\n \"##,\n \n E0500: r##\"\n-A borrowed variable was used by a closure. Example of erroneous code:\n+A borrowed variable was used by a closure.\n+\n+Erroneous code example:\n \n ```compile_fail,E0500\n fn you_know_nothing(jon_snow: &mut i32) {\n@@ -1259,7 +1293,7 @@ situation, the closure is borrowing the variable. Take a look at\n http://rustbyexample.com/fn/closures/capture.html for more information about\n capturing.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0501\n fn inside_closure(x: &mut i32) {\n@@ -1332,7 +1366,7 @@ E0502: r##\"\n This error indicates that you are trying to borrow a variable as mutable when it\n has already been borrowed as immutable.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0502\n fn bar(x: &mut i32) {}\n@@ -1363,7 +1397,7 @@ https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html.\n E0503: r##\"\n A value was used after it was mutably borrowed.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0503\n fn main() {\n@@ -1421,7 +1455,7 @@ E0504: r##\"\n This error occurs when an attempt is made to move a borrowed variable into a\n closure.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail\n struct FancyNum {\n@@ -1612,7 +1646,7 @@ http://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n E0506: r##\"\n This error occurs when an attempt is made to assign to a borrowed value.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0506\n struct FancyNum {\n@@ -1830,7 +1864,7 @@ http://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n E0508: r##\"\n A value was moved out of a non-copy fixed-size array.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0508\n struct NonCopy;\n@@ -1875,7 +1909,7 @@ E0509: r##\"\n This error occurs when an attempt is made to move out of a value whose type\n implements the `Drop` trait.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0509\n struct FancyNum {\n@@ -1991,6 +2025,8 @@ Cannot return value that references local variable\n Local variables, function parameters and temporaries are all dropped before the\n end of the function body. So a reference to them cannot be returned.\n \n+Erroneous code example:\n+\n ```compile_fail,E0515\n fn get_dangling_reference() -> &'static i32 {\n     let x = 0;\n@@ -2092,14 +2128,18 @@ is non-empty. Exclusive range patterns include the start point but not the end\n point, so this is equivalent to requiring the start of the range to be less\n than the end of the range.\n \n-For example:\n+Erroneous code example:\n \n-```compile_fail\n-match 5u32 {\n-    // This range is ok, albeit pointless.\n-    1 .. 2 => {}\n-    // This range is empty, and the compiler can tell.\n-    5 .. 5 => {}\n+```compile_fail,E0579\n+#![feature(exclusive_range_pattern)]\n+\n+fn main() {\n+    match 5u32 {\n+        // This range is ok, albeit pointless.\n+        1 .. 2 => {}\n+        // This range is empty, and the compiler can tell.\n+        5 .. 5 => {} // error!\n+    }\n }\n ```\n \"##,\n@@ -2127,7 +2167,7 @@ let mut c = || { x += 1 };\n E0596: r##\"\n This error occurs because you tried to mutably borrow a non-mutable variable.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0596\n let x = 1;\n@@ -2146,7 +2186,7 @@ let y = &mut x; // ok!\n E0597: r##\"\n This error occurs because a value was dropped while it was still borrowed\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0597\n struct Foo<'a> {\n@@ -2183,6 +2223,8 @@ E0626: r##\"\n This error occurs because a borrow in a generator persists across a\n yield point.\n \n+Erroneous code example:\n+\n ```compile_fail,E0626\n # #![feature(generators, generator_trait, pin)]\n # use std::ops::Generator;\n@@ -2274,7 +2316,7 @@ E0712: r##\"\n This error occurs because a borrow of a thread-local variable was made inside a\n function which outlived the lifetime of the function.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0712\n #![feature(thread_local)]\n@@ -2296,7 +2338,7 @@ E0713: r##\"\n This error occurs when an attempt is made to borrow state past the end of the\n lifetime of a type that implements the `Drop` trait.\n \n-Example of erroneous code:\n+Erroneous code example:\n \n ```compile_fail,E0713\n #![feature(nll)]"}]}