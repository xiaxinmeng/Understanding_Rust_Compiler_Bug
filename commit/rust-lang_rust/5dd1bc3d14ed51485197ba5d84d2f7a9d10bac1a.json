{"sha": "5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkZDFiYzNkMTRlZDUxNDg1MTk3YmE1ZDg0ZDJmN2E5ZDEwYmFjMWE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-20T21:59:00Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-30T02:51:56Z"}, "message": "Changes for Windows terminal", "tree": {"sha": "d45f5af0fa2a3caa83512e7c6fe22a88f563e736", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d45f5af0fa2a3caa83512e7c6fe22a88f563e736"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "html_url": "https://github.com/rust-lang/rust/commit/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4", "html_url": "https://github.com/rust-lang/rust/commit/dd2a1e34691d3ed6f8b1b05e3ef39c17510b46b4"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "2e93f6badf2c96ec9995e0db3bebe17e2dc3fd71", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "patch": "@@ -98,19 +98,16 @@ pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n /// Return a Terminal wrapping stdout, or None if a terminal couldn't be\n /// opened.\n pub fn stdout() -> Option<Box<Terminal<WriterWrapper> + Send>> {\n-    let ti: Option<TerminfoTerminal<WriterWrapper>>\n-        = Terminal::new(WriterWrapper {\n-            wrapped: box std::io::stdout() as Box<Writer + Send>,\n-        });\n+    let ti = TerminfoTerminal::new(WriterWrapper {\n+        wrapped: box std::io::stdout() as Box<Writer + Send>,\n+    });\n \n     match ti {\n-        Some(t) => Some(box t as Box<Terminal<WriterWrapper> + Send>),\n+        Some(t) => Some(t),\n         None => {\n-            let wc: Option<WinConsole<WriterWrapper>>\n-                = Terminal::new(WriterWrapper {\n-                    wrapped: box std::io::stdout() as Box<Writer + Send>,\n-                });\n-            wc.map(|w| box w as Box<Terminal<WriterWrapper> + Send>)\n+            WinConsole::new(WriterWrapper {\n+                wrapped: box std::io::stdout() as Box<Writer + Send>,\n+            })\n         }\n     }\n }\n@@ -128,19 +125,16 @@ pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send> + Send> {\n /// Return a Terminal wrapping stderr, or None if a terminal couldn't be\n /// opened.\n pub fn stderr() -> Option<Box<Terminal<WriterWrapper> + Send> + Send> {\n-    let ti: Option<TerminfoTerminal<WriterWrapper>>\n-        = Terminal::new(WriterWrapper {\n-            wrapped: box std::io::stderr() as Box<Writer + Send>,\n-        });\n+    let ti = TerminfoTerminal::new(WriterWrapper {\n+        wrapped: box std::io::stderr() as Box<Writer + Send>,\n+    });\n \n     match ti {\n-        Some(t) => Some(box t as Box<Terminal<WriterWrapper> + Send>),\n+        Some(t) => Some(t),\n         None => {\n-            let wc: Option<WinConsole<WriterWrapper>>\n-                = Terminal::new(WriterWrapper {\n-                    wrapped: box std::io::stderr() as Box<Writer + Send>,\n-                });\n-            wc.map(|w| box w as Box<Terminal<WriterWrapper> + Send>)\n+            WinConsole::new(WriterWrapper {\n+                wrapped: box std::io::stderr() as Box<Writer + Send>,\n+            })\n         }\n     }\n }"}, {"sha": "60b811db8fc5a9d58714b3975826f7238a9bc60f", "filename": "src/libterm/win.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=5dd1bc3d14ed51485197ba5d84d2f7a9d10bac1a", "patch": "@@ -18,7 +18,7 @@ use std::io::IoResult;\n \n use attr;\n use color;\n-use Terminal;\n+use {Terminal,UnwrappableTerminal};\n \n /// A Terminal implementation which uses the Win32 Console API.\n pub struct WinConsole<T> {\n@@ -125,24 +125,6 @@ impl<T: Writer> Writer for WinConsole<T> {\n }\n \n impl<T: Writer> Terminal<T> for WinConsole<T> {\n-    fn new(out: T) -> Option<WinConsole<T>> {\n-        let fg;\n-        let bg;\n-        unsafe {\n-            let mut buffer_info = ::std::mem::uninitialized();\n-            if GetConsoleScreenBufferInfo(GetStdHandle(-11), &mut buffer_info) != 0 {\n-                fg = bits_to_color(buffer_info.wAttributes);\n-                bg = bits_to_color(buffer_info.wAttributes >> 4);\n-            } else {\n-                fg = color::WHITE;\n-                bg = color::BLACK;\n-            }\n-        }\n-        Some(WinConsole { buf: out,\n-                          def_foreground: fg, def_background: bg,\n-                          foreground: fg, background: bg } )\n-    }\n-\n     fn fg(&mut self, color: color::Color) -> IoResult<bool> {\n         self.foreground = color;\n         self.apply();\n@@ -190,9 +172,31 @@ impl<T: Writer> Terminal<T> for WinConsole<T> {\n         Ok(())\n     }\n \n-    fn unwrap(self) -> T { self.buf }\n-\n     fn get_ref<'a>(&'a self) -> &'a T { &self.buf }\n \n     fn get_mut<'a>(&'a mut self) -> &'a mut T { &mut self.buf }\n }\n+\n+impl<T: Writer> WinConsole<T> {\n+     fn new(out: T) -> Option<Box<WinConsole<T>+Send+'static>> {\n+        let fg;\n+        let bg;\n+        unsafe {\n+            let mut buffer_info = ::std::mem::uninitialized();\n+            if GetConsoleScreenBufferInfo(GetStdHandle(-11), &mut buffer_info) != 0 {\n+                fg = bits_to_color(buffer_info.wAttributes);\n+                bg = bits_to_color(buffer_info.wAttributes >> 4);\n+            } else {\n+                fg = color::WHITE;\n+                bg = color::BLACK;\n+            }\n+        }\n+        Some(box WinConsole { buf: out,\n+                              def_foreground: fg, def_background: bg,\n+                              foreground: fg, background: bg } )\n+    }\n+}\n+\n+impl<T: Writer> UnwrappableTerminal<T> for WinConsole<T> {\n+    fn unwrap(self) -> T { self.buf }\n+}"}]}