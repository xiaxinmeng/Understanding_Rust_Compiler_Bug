{"sha": "6656c0f09f3500861d0422a7d3e9f595aa0b8fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTZjMGYwOWYzNTAwODYxZDA0MjJhN2QzZTlmNTk1YWEwYjhmZTc=", "commit": {"author": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-06-06T17:03:56Z"}, "committer": {"name": "scalexm", "email": "martin.alex32@hotmail.fr", "date": "2018-06-07T12:38:23Z"}, "message": "Add rules for type well-formedness", "tree": {"sha": "0558019c61989af9cbb386e026e230e7d6f63143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0558019c61989af9cbb386e026e230e7d6f63143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7", "html_url": "https://github.com/rust-lang/rust/commit/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0347b32a26ef0e02f1a1117581271431c6c94a63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0347b32a26ef0e02f1a1117581271431c6c94a63", "html_url": "https://github.com/rust-lang/rust/commit/0347b32a26ef0e02f1a1117581271431c6c94a63"}], "stats": {"total": 78, "additions": 74, "deletions": 4}, "files": [{"sha": "a1242621cb18c5882197fd25c265bad632b7bac6", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=6656c0f09f3500861d0422a7d3e9f595aa0b8fe7", "patch": "@@ -15,7 +15,7 @@ use rustc::infer::canonical::{\n };\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc::traits::{\n-    WellFormed, \n+    WellFormed,\n     FromEnv,\n     DomainGoal,\n     ExClauseFold,"}, {"sha": "0270e970976eaa59906bccbfda1f1783ee4e462c", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6656c0f09f3500861d0422a7d3e9f595aa0b8fe7/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=6656c0f09f3500861d0422a7d3e9f595aa0b8fe7", "patch": "@@ -134,6 +134,8 @@ crate fn program_clauses_for<'a, 'tcx>(\n         DefPathData::Trait(_) => program_clauses_for_trait(tcx, def_id),\n         DefPathData::Impl => program_clauses_for_impl(tcx, def_id),\n         DefPathData::AssocTypeInImpl(..) => program_clauses_for_associated_type_value(tcx, def_id),\n+        DefPathData::AssocTypeInTrait(..) => program_clauses_for_associated_type_def(tcx, def_id),\n+        DefPathData::TypeNs(..) => program_clauses_for_type_def(tcx, def_id),\n         _ => Slice::empty(),\n     }\n }\n@@ -224,10 +226,10 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     let impl_trait: DomainGoal = trait_pred.lower();\n \n      // `FromEnv(Self: Trait<P1..Pn>)`\n-    let from_env = impl_trait.into_from_env_goal().into_goal();\n+    let from_env_goal = impl_trait.into_from_env_goal().into_goal();\n+    let hypotheses = tcx.intern_goals(&[from_env_goal]);\n \n     // `Implemented(Self: Trait<P1..Pn>) :- FromEnv(Self: Trait<P1..Pn>)`\n-    let hypotheses = tcx.intern_goals(&[from_env]);\n     let implemented_from_env = ProgramClause {\n         goal: impl_trait,\n         hypotheses,\n@@ -298,6 +300,72 @@ fn program_clauses_for_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId\n     tcx.intern_clauses(&[Clause::ForAll(ty::Binder::dummy(clause))])\n }\n \n+pub fn program_clauses_for_type_def<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> Clauses<'tcx> {\n+\n+    // Rule WellFormed-Type\n+    //\n+    // `struct Ty<P1..Pn> where WC1, ..., WCm`\n+    //\n+    // ```\n+    // forall<P1..Pn> {\n+    //   WellFormed(Ty<...>) :- WC1, ..., WCm`\n+    // }\n+    // ```\n+\n+    // `Ty<...>`\n+    let ty = tcx.type_of(def_id);\n+\n+    // `WC`\n+    let where_clauses = tcx.predicates_of(def_id).predicates.lower();\n+\n+    // `WellFormed(Ty<...>) :- WC1, ..., WCm`\n+    let well_formed = ProgramClause {\n+        goal: DomainGoal::WellFormed(WellFormed::Ty(ty)),\n+        hypotheses: tcx.mk_goals(\n+            where_clauses.iter().cloned().map(|wc| Goal::from_poly_domain_goal(wc, tcx))\n+        ),\n+    };\n+\n+    let well_formed_clause = iter::once(Clause::ForAll(ty::Binder::dummy(well_formed)));\n+\n+    // Rule FromEnv-Type\n+    //\n+    // For each where clause `WC`:\n+    // ```\n+    // forall<P1..Pn> {\n+    //   FromEnv(WC) :- FromEnv(Ty<...>)\n+    // }\n+    // ```\n+\n+    // `FromEnv(Ty<...>)`\n+    let from_env_goal = DomainGoal::FromEnv(FromEnv::Ty(ty)).into_goal();\n+    let hypotheses = tcx.intern_goals(&[from_env_goal]);\n+\n+    // For each where clause `WC`:\n+    let from_env_clauses = where_clauses\n+        .into_iter()\n+\n+        // `FromEnv(WC) :- FromEnv(Ty<...>)`\n+        .map(|wc| wc.map_bound(|goal| ProgramClause {\n+            goal: goal.into_from_env_goal(),\n+            hypotheses,\n+        }))\n+\n+        .map(Clause::ForAll);\n+\n+    tcx.mk_clauses(well_formed_clause.chain(from_env_clauses))\n+}\n+\n+pub fn program_clauses_for_associated_type_def<'a, 'tcx>(\n+    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    _item_id: DefId,\n+) -> Clauses<'tcx> {\n+    unimplemented!()\n+}\n+\n pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     item_id: DefId,\n@@ -309,6 +377,8 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n     //     type AssocType<Pn+1..Pm> = T;\n     // }```\n     //\n+    // FIXME: For the moment, we don't account for where clauses written on the associated\n+    // ty definition (i.e. in the trait def, as in `type AssocType<T> where T: Sized`).\n     // ```\n     // forall<P0..Pm> {\n     //   forall<Pn+1..Pm> {\n@@ -324,7 +394,7 @@ pub fn program_clauses_for_associated_type_value<'a, 'tcx>(\n         ty::AssociatedItemContainer::ImplContainer(impl_id) => impl_id,\n         _ => bug!(\"not an impl container\"),\n     };\n-    \n+\n     // `A0 as Trait<A1..An>`\n     let trait_ref = tcx.impl_trait_ref(impl_id).unwrap();\n "}]}