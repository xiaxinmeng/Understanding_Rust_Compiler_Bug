{"sha": "b08d5eee6a1bb3aaf7385c84b255be964caff9d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOGQ1ZWVlNmExYmIzYWFmNzM4NWM4NGIyNTViZTk2NGNhZmY5ZDE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-16T22:49:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-18T12:24:57Z"}, "message": "ast: Document Pat and Block", "tree": {"sha": "97c9680c5d3bf7547e69a8ff7c7c7a977255ba9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c9680c5d3bf7547e69a8ff7c7c7a977255ba9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08d5eee6a1bb3aaf7385c84b255be964caff9d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08d5eee6a1bb3aaf7385c84b255be964caff9d1", "html_url": "https://github.com/rust-lang/rust/commit/b08d5eee6a1bb3aaf7385c84b255be964caff9d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08d5eee6a1bb3aaf7385c84b255be964caff9d1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1debe9d112010a23c76711f557ee6fdc4728f4ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/1debe9d112010a23c76711f557ee6fdc4728f4ec", "html_url": "https://github.com/rust-lang/rust/commit/1debe9d112010a23c76711f557ee6fdc4728f4ec"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "479ae40f0d6ae0bc7e8dea227adb6620eeee6614", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b08d5eee6a1bb3aaf7385c84b255be964caff9d1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08d5eee6a1bb3aaf7385c84b255be964caff9d1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b08d5eee6a1bb3aaf7385c84b255be964caff9d1", "patch": "@@ -535,9 +535,13 @@ impl PartialEq for MetaItem_ {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Block {\n+    /// Statements in a block\n     pub stmts: Vec<P<Stmt>>,\n+    /// An expression at the end of the block\n+    /// without a semicolon, if any\n     pub expr: Option<P<Expr>>,\n     pub id: NodeId,\n+    /// Unsafety of the block\n     pub rules: BlockCheckMode,\n     pub span: Span,\n }\n@@ -550,8 +554,14 @@ pub struct Pat {\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+/// A single field in a struct pattern\n+///\n+/// For patterns like `Foo {x, y, z}`, `pat` and `ident` point to the same identifier\n+/// and `is_shorthand` is true.\n pub struct FieldPat {\n+    /// The identifier for the field\n     pub ident: Ident,\n+    /// The pattern the field is destructured to\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n }\n@@ -588,15 +598,23 @@ pub enum Pat_ {\n     /// \"None\" means a * pattern where we don't bind the fields to names.\n     PatEnum(Path, Option<Vec<P<Pat>>>),\n \n+    /// Destructuring of a struct, e.g. `Foo {x, y, ..}`\n+    /// The `bool` is `true` in the presence of a `..`\n     PatStruct(Path, Vec<Spanned<FieldPat>>, bool),\n+    /// A tuple pattern (`a, b`)\n     PatTup(Vec<P<Pat>>),\n+    /// A `box` pattern\n     PatBox(P<Pat>),\n-    PatRegion(P<Pat>, Mutability), // reference pattern\n+    /// A reference pattern, e.g. `&mut (a, b)`\n+    PatRegion(P<Pat>, Mutability),\n+    /// A literal\n     PatLit(P<Expr>),\n+    /// A range pattern, e.g. `[1...2]`\n     PatRange(P<Expr>, P<Expr>),\n     /// [a, b, ..i, y, z] is represented as:\n     ///     PatVec(box [a, b], Some(i), box [y, z])\n     PatVec(Vec<P<Pat>>, Option<P<Pat>>, Vec<P<Pat>>),\n+    /// A macro pattern; pre-expansion\n     PatMac(Mac),\n }\n "}]}