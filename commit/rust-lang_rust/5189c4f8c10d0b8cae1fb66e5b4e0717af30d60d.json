{"sha": "5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxODljNGY4YzEwZDBiOGNhZTFmYjY2ZTViNGUwNzE3YWYzMGQ2MGQ=", "commit": {"author": {"name": "Jakob Demler", "email": "jdemler@curry-software.com", "date": "2017-02-15T11:59:01Z"}, "committer": {"name": "Jakob Demler", "email": "jdemler@curry-software.com", "date": "2017-02-15T11:59:01Z"}, "message": "custom attributes and error reporting docs for procedural macros", "tree": {"sha": "f4b2e5289fe8e8f220b18e2405897b1ec52b9d33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4b2e5289fe8e8f220b18e2405897b1ec52b9d33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d", "html_url": "https://github.com/rust-lang/rust/commit/5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d/comments", "author": {"login": "JDemler", "id": 12686782, "node_id": "MDQ6VXNlcjEyNjg2Nzgy", "avatar_url": "https://avatars.githubusercontent.com/u/12686782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JDemler", "html_url": "https://github.com/JDemler", "followers_url": "https://api.github.com/users/JDemler/followers", "following_url": "https://api.github.com/users/JDemler/following{/other_user}", "gists_url": "https://api.github.com/users/JDemler/gists{/gist_id}", "starred_url": "https://api.github.com/users/JDemler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JDemler/subscriptions", "organizations_url": "https://api.github.com/users/JDemler/orgs", "repos_url": "https://api.github.com/users/JDemler/repos", "events_url": "https://api.github.com/users/JDemler/events{/privacy}", "received_events_url": "https://api.github.com/users/JDemler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JDemler", "id": 12686782, "node_id": "MDQ6VXNlcjEyNjg2Nzgy", "avatar_url": "https://avatars.githubusercontent.com/u/12686782?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JDemler", "html_url": "https://github.com/JDemler", "followers_url": "https://api.github.com/users/JDemler/followers", "following_url": "https://api.github.com/users/JDemler/following{/other_user}", "gists_url": "https://api.github.com/users/JDemler/gists{/gist_id}", "starred_url": "https://api.github.com/users/JDemler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JDemler/subscriptions", "organizations_url": "https://api.github.com/users/JDemler/orgs", "repos_url": "https://api.github.com/users/JDemler/repos", "events_url": "https://api.github.com/users/JDemler/events{/privacy}", "received_events_url": "https://api.github.com/users/JDemler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea8c62919e5f0c7e511717f672406536ef94cab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8c62919e5f0c7e511717f672406536ef94cab1", "html_url": "https://github.com/rust-lang/rust/commit/ea8c62919e5f0c7e511717f672406536ef94cab1"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "ef8b638dc1c6051a0837b6e97d3d03bb530aa283", "filename": "src/doc/book/src/procedural-macros.md", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=5189c4f8c10d0b8cae1fb66e5b4e0717af30d60d", "patch": "@@ -209,5 +209,73 @@ Ok so now, let's compile `hello-world`. Executing `cargo run` now yields:\n Hello, World! My name is FrenchToast\n Hello, World! My name is Waffles\n ```\n+## Custom Attributes\n+In some cases it might make sense to allow users some kind of configuration.\n+For our example the user might want to overwrite the name that is printed in the `hello_world()` method.\n \n-We've done it!\n+This can be achieved with custom attributes:\n+```rust,ignore\n+#[derive(HelloWorld)]\n+#[HelloWorldName = \"the best Pancakes\"]\n+struct Pancakes;\n+\n+fn main() {\n+    Pancakes::hello_world();\n+}\n+```\n+\n+If we try to compile this though, the compiler will respond with an error:\n+\n+```\n+error: The attribute `HelloWorldName` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n+```\n+\n+The compiler needs to know that we handle this attribute and to not respond with an error.\n+This is done in the `hello-world-derive`-crate by adding `attributes` to the `proc_macro_derive` attribute:\n+\n+```rust,ignore\n+#[proc_macro_derive(HelloWorld, attributes(HelloWorldName))]\n+pub fn hello_world(input: TokenStream) -> TokenStream \n+```\n+\n+Multiple attributes can be specified that way.\n+\n+\n+## Raising Errors\n+Let's assume that we do not want to accept `Enums` as input to our custom derive method.\n+\n+This condition can be easily checked with the help of `syn`. \n+But how to we tell the user, that we do not accept `Enums`. \n+The idiomatic was to report errors in procedural macros is to panic:\n+\n+```rust,ignore\n+fn impl_hello_world(ast: &syn::MacroInput) -> quote::Tokens {\n+    let name = &ast.ident;\n+    // Check if derive(HelloWorld) was specified for a struct\n+    if let syn::Body::Struct(_) = ast.body {\n+        // Yes, this is a struct\n+        quote! {\n+            impl HelloWorld for #name {                       \n+                fn hello_world() {\n+                    println!(\"Hello, World! My name is {}\", stringify!(#name));\n+                }\n+            }\n+        }\n+    } else {\n+        //Nope. This is an Enum. We cannot handle these! \n+       panic!(\"#[derive(HelloWorld)] is only defined for structs, not for enums!\");\n+    }\n+}\n+```\n+\n+If a user now tries to derive `HelloWorld` from an enum they will be greeted with following, hopefully helpful, error:\n+\n+```\n+error: custom derive attribute panicked\n+  --> src/main.rs\n+   |\n+   | #[derive(HelloWorld)]\n+   |          ^^^^^^^^^^\n+   |\n+   = help: message: #[derive(HelloWorld)] is only defined for structs, not for enums!\n+```"}]}