{"sha": "fa298beb7941eaab01960630bfad13e40317ad00", "node_id": "C_kwDOAAsO6NoAKGZhMjk4YmViNzk0MWVhYWIwMTk2MDYzMGJmYWQxM2U0MDMxN2FkMDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-16T20:30:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-16T20:30:51Z"}, "message": "Rollup merge of #99259 - RalfJung:visit-a-place, r=oli-obk\n\ninterpret/visitor: support visiting with a PlaceTy\n\nFinally we can visit a `PlaceTy` in a way that will only do `force_allocation` when needed ti visit a field. :)\n\nr? `@oli-obk`", "tree": {"sha": "a8a0d545f1fe4d1c02aaea7d7e53e94d9d8077a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8a0d545f1fe4d1c02aaea7d7e53e94d9d8077a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa298beb7941eaab01960630bfad13e40317ad00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi0x/7CRBK7hj4Ov3rIwAAe68IAF139JiP0SnymmsGyWQRF92P\nrIFnxVhTUiWvVXzaFPJOQA39pglCOQYF3/Mh8Y1qHp/2IPq4zqsv5iYW3zHUPyr/\nprB6Po8RxF3UZ1NPmhntbqT7IzP+FrILju2B2h4Fw8o8IpE5SnTg/MFvHrLRIsgi\nBjA9koLkH8SEGhf1tI1bV5lQJw0Hg36FmpU9cX7jiIgIqkeLCWQS1xZ76h5MNtiy\nq3otqpx8k8F5cKCQ+D7g4a8FaXneerNjPEIDCfZZw/m39heJcQU1DWIJin4YbD7Y\nc2WL1P1LJqllUqHO7bFP1UWUc/UsWyXyPcRaqB9VVp36e4cWgmWz14NN38ouen4=\n=K2dQ\n-----END PGP SIGNATURE-----\n", "payload": "tree a8a0d545f1fe4d1c02aaea7d7e53e94d9d8077a2\nparent 984ef421fda3fb31fb72dd870d620921b3c174cc\nparent c4cb043f063fb75d2278ebedeb13feaa94dc8c95\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658003451 +0200\ncommitter GitHub <noreply@github.com> 1658003451 +0200\n\nRollup merge of #99259 - RalfJung:visit-a-place, r=oli-obk\n\ninterpret/visitor: support visiting with a PlaceTy\n\nFinally we can visit a `PlaceTy` in a way that will only do `force_allocation` when needed ti visit a field. :)\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa298beb7941eaab01960630bfad13e40317ad00", "html_url": "https://github.com/rust-lang/rust/commit/fa298beb7941eaab01960630bfad13e40317ad00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa298beb7941eaab01960630bfad13e40317ad00/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984ef421fda3fb31fb72dd870d620921b3c174cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/984ef421fda3fb31fb72dd870d620921b3c174cc", "html_url": "https://github.com/rust-lang/rust/commit/984ef421fda3fb31fb72dd870d620921b3c174cc"}, {"sha": "c4cb043f063fb75d2278ebedeb13feaa94dc8c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4cb043f063fb75d2278ebedeb13feaa94dc8c95", "html_url": "https://github.com/rust-lang/rust/commit/c4cb043f063fb75d2278ebedeb13feaa94dc8c95"}], "stats": {"total": 322, "additions": 272, "deletions": 50}, "files": [{"sha": "8fff4571d127c4ac263f7856e50b6a28051eb990", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=fa298beb7941eaab01960630bfad13e40317ad00", "patch": "@@ -436,7 +436,7 @@ fn valtree_into_mplace<'tcx>(\n \n                         let offset = place_adjusted.layout.fields.offset(i);\n                         place\n-                            .offset(\n+                            .offset_with_meta(\n                                 offset,\n                                 MemPlaceMeta::Meta(Scalar::from_machine_usize(\n                                     num_elems as u64,"}, {"sha": "22dc1e80f13a825e6a057d685614c5e635180419", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=fa298beb7941eaab01960630bfad13e40317ad00", "patch": "@@ -297,15 +297,15 @@ impl<'tcx, Tag: Provenance> OpTy<'tcx, Tag> {\n         }\n     }\n \n-    pub fn offset(\n+    pub fn offset_with_meta(\n         &self,\n         offset: Size,\n         meta: MemPlaceMeta<Tag>,\n         layout: TyAndLayout<'tcx>,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, Self> {\n         match self.try_as_mplace() {\n-            Ok(mplace) => Ok(mplace.offset(offset, meta, layout, cx)?.into()),\n+            Ok(mplace) => Ok(mplace.offset_with_meta(offset, meta, layout, cx)?.into()),\n             Err(imm) => {\n                 assert!(\n                     matches!(*imm, Immediate::Uninit),\n@@ -317,6 +317,16 @@ impl<'tcx, Tag: Provenance> OpTy<'tcx, Tag> {\n             }\n         }\n     }\n+\n+    pub fn offset(\n+        &self,\n+        offset: Size,\n+        layout: TyAndLayout<'tcx>,\n+        cx: &impl HasDataLayout,\n+    ) -> InterpResult<'tcx, Self> {\n+        assert!(!layout.is_unsized());\n+        self.offset_with_meta(offset, MemPlaceMeta::None, layout, cx)\n+    }\n }\n \n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {"}, {"sha": "a29a1492c8ef32c756ffeb8d04c2208fa07cf8e4", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=fa298beb7941eaab01960630bfad13e40317ad00", "patch": "@@ -163,7 +163,7 @@ impl<Tag: Provenance> MemPlace<Tag> {\n     }\n \n     #[inline]\n-    pub fn offset<'tcx>(\n+    pub fn offset_with_meta<'tcx>(\n         self,\n         offset: Size,\n         meta: MemPlaceMeta<Tag>,\n@@ -199,20 +199,30 @@ impl<'tcx, Tag: Provenance> MPlaceTy<'tcx, Tag> {\n     }\n \n     #[inline]\n-    pub fn offset(\n+    pub fn offset_with_meta(\n         &self,\n         offset: Size,\n         meta: MemPlaceMeta<Tag>,\n         layout: TyAndLayout<'tcx>,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, Self> {\n         Ok(MPlaceTy {\n-            mplace: self.mplace.offset(offset, meta, cx)?,\n+            mplace: self.mplace.offset_with_meta(offset, meta, cx)?,\n             align: self.align.restrict_for_offset(offset),\n             layout,\n         })\n     }\n \n+    pub fn offset(\n+        &self,\n+        offset: Size,\n+        layout: TyAndLayout<'tcx>,\n+        cx: &impl HasDataLayout,\n+    ) -> InterpResult<'tcx, Self> {\n+        assert!(!layout.is_unsized());\n+        self.offset_with_meta(offset, MemPlaceMeta::None, layout, cx)\n+    }\n+\n     #[inline]\n     pub fn from_aligned_ptr(ptr: Pointer<Option<Tag>>, layout: TyAndLayout<'tcx>) -> Self {\n         MPlaceTy { mplace: MemPlace::from_ptr(ptr), layout, align: layout.align.abi }"}, {"sha": "704dc6db060715d9b499e4c25a9d2a9b59783c49", "filename": "compiler/rustc_const_eval/src/interpret/projection.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fprojection.rs?ref=fa298beb7941eaab01960630bfad13e40317ad00", "patch": "@@ -63,7 +63,7 @@ where\n \n         // We do not look at `base.layout.align` nor `field_layout.align`, unlike\n         // codegen -- mostly to see if we can get away with that\n-        base.offset(offset, meta, field_layout, self)\n+        base.offset_with_meta(offset, meta, field_layout, self)\n     }\n \n     /// Gets the place of a field inside the place, and also the field's type.\n@@ -193,9 +193,7 @@ where\n                 let offset = stride * index; // `Size` multiplication\n                 // All fields have the same layout.\n                 let field_layout = base.layout.field(self, 0);\n-                assert!(!field_layout.is_unsized());\n-\n-                base.offset(offset, MemPlaceMeta::None, field_layout, self)\n+                base.offset(offset, field_layout, self)\n             }\n             _ => span_bug!(\n                 self.cur_span(),\n@@ -215,10 +213,10 @@ where\n         let abi::FieldsShape::Array { stride, .. } = base.layout.fields else {\n             span_bug!(self.cur_span(), \"operand_array_fields: expected an array layout\");\n         };\n-        let layout = base.layout.field(self, 0);\n+        let field_layout = base.layout.field(self, 0);\n         let dl = &self.tcx.data_layout;\n         // `Size` multiplication\n-        Ok((0..len).map(move |i| base.offset(stride * i, MemPlaceMeta::None, layout, dl)))\n+        Ok((0..len).map(move |i| base.offset(stride * i, field_layout, dl)))\n     }\n \n     /// Index into an array.\n@@ -326,7 +324,7 @@ where\n             }\n         };\n         let layout = self.layout_of(ty)?;\n-        base.offset(from_offset, meta, layout, self)\n+        base.offset_with_meta(from_offset, meta, layout, self)\n     }\n \n     pub fn place_subslice("}, {"sha": "2e5492ecf56019064edf48881e34bd3d6a97b9cc", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=fa298beb7941eaab01960630bfad13e40317ad00", "patch": "@@ -853,7 +853,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 self.visit_scalar(scalar, scalar_layout)?;\n             }\n             Abi::ScalarPair(a_layout, b_layout) => {\n-                // We would validate these things as we descend into the fields,\n+                // There is no `rustc_layout_scalar_valid_range_start` for pairs, so\n+                // we would validate these things as we descend into the fields,\n                 // but that can miss bugs in layout computation. Layout computation\n                 // is subtle due to enums having ScalarPair layout, where one field\n                 // is the discriminant.\n@@ -867,7 +868,8 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n             }\n             Abi::Vector { .. } => {\n                 // No checks here, we assume layout computation gets this right.\n-                // (This is harder to check since Miri does not represent these as `Immediate`.)\n+                // (This is harder to check since Miri does not represent these as `Immediate`. We\n+                // also cannot use field projections since this might be a newtype around a vector.)\n             }\n             Abi::Aggregate { .. } => {\n                 // Nothing to do."}, {"sha": "f6a0c19d2595332c2bff285802d5251374a5764b", "filename": "compiler/rustc_const_eval/src/interpret/visitor.rs", "status": "modified", "additions": 237, "deletions": 35, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa298beb7941eaab01960630bfad13e40317ad00/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs?ref=fa298beb7941eaab01960630bfad13e40317ad00", "patch": "@@ -8,23 +8,33 @@ use rustc_target::abi::{FieldsShape, VariantIdx, Variants};\n \n use std::num::NonZeroUsize;\n \n-use super::{InterpCx, MPlaceTy, Machine, OpTy};\n+use super::{InterpCx, MPlaceTy, Machine, OpTy, PlaceTy};\n \n-// A thing that we can project into, and that has a layout.\n-// This wouldn't have to depend on `Machine` but with the current type inference,\n-// that's just more convenient to work with (avoids repeating all the `Machine` bounds).\n+/// A thing that we can project into, and that has a layout.\n+/// This wouldn't have to depend on `Machine` but with the current type inference,\n+/// that's just more convenient to work with (avoids repeating all the `Machine` bounds).\n pub trait Value<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Copy {\n     /// Gets this value's layout.\n     fn layout(&self) -> TyAndLayout<'tcx>;\n \n-    /// Makes this into an `OpTy`.\n-    fn to_op(&self, ecx: &InterpCx<'mir, 'tcx, M>)\n-    -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n+    /// Makes this into an `OpTy`, in a cheap way that is good for reading.\n+    fn to_op_for_read(\n+        &self,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n+\n+    /// Makes this into an `OpTy`, in a potentially more expensive way that is good for projections.\n+    fn to_op_for_proj(\n+        &self,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        self.to_op_for_read(ecx)\n+    }\n \n     /// Creates this from an `OpTy`.\n     ///\n-    /// If `to_op` only ever produces `Indirect` operands, then this one is definitely `Indirect`.\n-    fn from_op(mplace: OpTy<'tcx, M::PointerTag>) -> Self;\n+    /// If `to_op_for_proj` only ever produces `Indirect` operands, then this one is definitely `Indirect`.\n+    fn from_op(op: &OpTy<'tcx, M::PointerTag>) -> Self;\n \n     /// Projects to the given enum variant.\n     fn project_downcast(\n@@ -41,25 +51,67 @@ pub trait Value<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Copy {\n     ) -> InterpResult<'tcx, Self>;\n }\n \n-// Operands and memory-places are both values.\n-// Places in general are not due to `place_field` having to do `force_allocation`.\n+/// A thing that we can project into given *mutable* access to `ecx`, and that has a layout.\n+/// This wouldn't have to depend on `Machine` but with the current type inference,\n+/// that's just more convenient to work with (avoids repeating all the `Machine` bounds).\n+pub trait ValueMut<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Copy {\n+    /// Gets this value's layout.\n+    fn layout(&self) -> TyAndLayout<'tcx>;\n+\n+    /// Makes this into an `OpTy`, in a cheap way that is good for reading.\n+    fn to_op_for_read(\n+        &self,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n+\n+    /// Makes this into an `OpTy`, in a potentially more expensive way that is good for projections.\n+    fn to_op_for_proj(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n+\n+    /// Creates this from an `OpTy`.\n+    ///\n+    /// If `to_op_for_proj` only ever produces `Indirect` operands, then this one is definitely `Indirect`.\n+    fn from_op(op: &OpTy<'tcx, M::PointerTag>) -> Self;\n+\n+    /// Projects to the given enum variant.\n+    fn project_downcast(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        variant: VariantIdx,\n+    ) -> InterpResult<'tcx, Self>;\n+\n+    /// Projects to the n-th field.\n+    fn project_field(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        field: usize,\n+    ) -> InterpResult<'tcx, Self>;\n+}\n+\n+// We cannot have a general impl which shows that Value implies ValueMut. (When we do, it says we\n+// cannot `impl ValueMut for PlaceTy` because some downstream crate could `impl Value for PlaceTy`.)\n+// So we have some copy-paste here. (We could have a macro but since we only have 2 types with this\n+// double-impl, that would barely make the code shorter, if at all.)\n+\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for OpTy<'tcx, M::PointerTag> {\n     #[inline(always)]\n     fn layout(&self) -> TyAndLayout<'tcx> {\n         self.layout\n     }\n \n     #[inline(always)]\n-    fn to_op(\n+    fn to_op_for_read(\n         &self,\n         _ecx: &InterpCx<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         Ok(*self)\n     }\n \n     #[inline(always)]\n-    fn from_op(op: OpTy<'tcx, M::PointerTag>) -> Self {\n-        op\n+    fn from_op(op: &OpTy<'tcx, M::PointerTag>) -> Self {\n+        *op\n     }\n \n     #[inline(always)]\n@@ -81,6 +133,54 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M> for OpTy<'tc\n     }\n }\n \n+impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueMut<'mir, 'tcx, M>\n+    for OpTy<'tcx, M::PointerTag>\n+{\n+    #[inline(always)]\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    #[inline(always)]\n+    fn to_op_for_read(\n+        &self,\n+        _ecx: &InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        Ok(*self)\n+    }\n+\n+    #[inline(always)]\n+    fn to_op_for_proj(\n+        &self,\n+        _ecx: &mut InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        Ok(*self)\n+    }\n+\n+    #[inline(always)]\n+    fn from_op(op: &OpTy<'tcx, M::PointerTag>) -> Self {\n+        *op\n+    }\n+\n+    #[inline(always)]\n+    fn project_downcast(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        variant: VariantIdx,\n+    ) -> InterpResult<'tcx, Self> {\n+        ecx.operand_downcast(self, variant)\n+    }\n+\n+    #[inline(always)]\n+    fn project_field(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        field: usize,\n+    ) -> InterpResult<'tcx, Self> {\n+        ecx.operand_field(self, field)\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>\n     for MPlaceTy<'tcx, M::PointerTag>\n {\n@@ -90,16 +190,16 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>\n     }\n \n     #[inline(always)]\n-    fn to_op(\n+    fn to_op_for_read(\n         &self,\n         _ecx: &InterpCx<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         Ok(self.into())\n     }\n \n     #[inline(always)]\n-    fn from_op(op: OpTy<'tcx, M::PointerTag>) -> Self {\n-        // assert is justified because our `to_op` only ever produces `Indirect` operands.\n+    fn from_op(op: &OpTy<'tcx, M::PointerTag>) -> Self {\n+        // assert is justified because our `to_op_for_read` only ever produces `Indirect` operands.\n         op.assert_mem_place()\n     }\n \n@@ -122,11 +222,111 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>\n     }\n }\n \n+impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueMut<'mir, 'tcx, M>\n+    for MPlaceTy<'tcx, M::PointerTag>\n+{\n+    #[inline(always)]\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    #[inline(always)]\n+    fn to_op_for_read(\n+        &self,\n+        _ecx: &InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        Ok(self.into())\n+    }\n+\n+    #[inline(always)]\n+    fn to_op_for_proj(\n+        &self,\n+        _ecx: &mut InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        Ok(self.into())\n+    }\n+\n+    #[inline(always)]\n+    fn from_op(op: &OpTy<'tcx, M::PointerTag>) -> Self {\n+        // assert is justified because our `to_op_for_proj` only ever produces `Indirect` operands.\n+        op.assert_mem_place()\n+    }\n+\n+    #[inline(always)]\n+    fn project_downcast(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        variant: VariantIdx,\n+    ) -> InterpResult<'tcx, Self> {\n+        ecx.mplace_downcast(self, variant)\n+    }\n+\n+    #[inline(always)]\n+    fn project_field(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        field: usize,\n+    ) -> InterpResult<'tcx, Self> {\n+        ecx.mplace_field(self, field)\n+    }\n+}\n+\n+impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueMut<'mir, 'tcx, M>\n+    for PlaceTy<'tcx, M::PointerTag>\n+{\n+    #[inline(always)]\n+    fn layout(&self) -> TyAndLayout<'tcx> {\n+        self.layout\n+    }\n+\n+    #[inline(always)]\n+    fn to_op_for_read(\n+        &self,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        // We `force_allocation` here so that `from_op` below can work.\n+        ecx.place_to_op(self)\n+    }\n+\n+    #[inline(always)]\n+    fn to_op_for_proj(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+    ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        // We `force_allocation` here so that `from_op` below can work.\n+        Ok(ecx.force_allocation(self)?.into())\n+    }\n+\n+    #[inline(always)]\n+    fn from_op(op: &OpTy<'tcx, M::PointerTag>) -> Self {\n+        // assert is justified because our `to_op` only ever produces `Indirect` operands.\n+        op.assert_mem_place().into()\n+    }\n+\n+    #[inline(always)]\n+    fn project_downcast(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        variant: VariantIdx,\n+    ) -> InterpResult<'tcx, Self> {\n+        ecx.place_downcast(self, variant)\n+    }\n+\n+    #[inline(always)]\n+    fn project_field(\n+        &self,\n+        ecx: &mut InterpCx<'mir, 'tcx, M>,\n+        field: usize,\n+    ) -> InterpResult<'tcx, Self> {\n+        ecx.place_field(self, field)\n+    }\n+}\n+\n macro_rules! make_value_visitor {\n-    ($visitor_trait_name:ident, $($mutability:ident)?) => {\n+    ($visitor_trait:ident, $value_trait:ident, $($mutability:ident)?) => {\n         // How to traverse a value and what to do when we are at the leaves.\n-        pub trait $visitor_trait_name<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>: Sized {\n-            type V: Value<'mir, 'tcx, M>;\n+        pub trait $visitor_trait<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>>: Sized {\n+            type V: $value_trait<'mir, 'tcx, M>;\n \n             /// The visitor must have an `InterpCx` in it.\n             fn ecx(&$($mutability)? self)\n@@ -215,19 +415,20 @@ macro_rules! make_value_visitor {\n             }\n             fn walk_value(&mut self, v: &Self::V) -> InterpResult<'tcx>\n             {\n-                trace!(\"walk_value: type: {}\", v.layout().ty);\n+                let ty = v.layout().ty;\n+                trace!(\"walk_value: type: {ty}\");\n \n                 // Special treatment for special types, where the (static) layout is not sufficient.\n-                match *v.layout().ty.kind() {\n+                match *ty.kind() {\n                     // If it is a trait object, switch to the real type that was used to create it.\n                     ty::Dynamic(..) => {\n                         // unsized values are never immediate, so we can assert_mem_place\n-                        let op = v.to_op(self.ecx())?;\n+                        let op = v.to_op_for_read(self.ecx())?;\n                         let dest = op.assert_mem_place();\n-                        let inner = self.ecx().unpack_dyn_trait(&dest)?.1;\n-                        trace!(\"walk_value: dyn object layout: {:#?}\", inner.layout);\n+                        let inner_mplace = self.ecx().unpack_dyn_trait(&dest)?.1;\n+                        trace!(\"walk_value: dyn object layout: {:#?}\", inner_mplace.layout);\n                         // recurse with the inner type\n-                        return self.visit_field(&v, 0, &Value::from_op(inner.into()));\n+                        return self.visit_field(&v, 0, &$value_trait::from_op(&inner_mplace.into()));\n                     },\n                     // Slices do not need special handling here: they have `Array` field\n                     // placement with length 0, so we enter the `Array` case below which\n@@ -278,10 +479,10 @@ macro_rules! make_value_visitor {\n \n                 // Visit the fields of this value.\n                 match v.layout().fields {\n-                    FieldsShape::Primitive => {},\n+                    FieldsShape::Primitive => {}\n                     FieldsShape::Union(fields) => {\n                         self.visit_union(v, fields)?;\n-                    },\n+                    }\n                     FieldsShape::Arbitrary { ref offsets, .. } => {\n                         // FIXME: We collect in a vec because otherwise there are lifetime\n                         // errors: Projecting to a field needs access to `ecx`.\n@@ -291,16 +492,17 @@ macro_rules! make_value_visitor {\n                             })\n                             .collect();\n                         self.visit_aggregate(v, fields.into_iter())?;\n-                    },\n+                    }\n                     FieldsShape::Array { .. } => {\n-                        // Let's get an mplace first.\n-                        let op = v.to_op(self.ecx())?;\n+                        // Let's get an mplace (or immediate) first.\n+                        // This might `force_allocate` if `v` is a `PlaceTy`, but `place_index` does that anyway.\n+                        let op = v.to_op_for_proj(self.ecx())?;\n                         // Now we can go over all the fields.\n                         // This uses the *run-time length*, i.e., if we are a slice,\n                         // the dynamic info from the metadata is used.\n                         let iter = self.ecx().operand_array_fields(&op)?\n                             .map(|f| f.and_then(|f| {\n-                                Ok(Value::from_op(f))\n+                                Ok($value_trait::from_op(&f))\n                             }));\n                         self.visit_aggregate(v, iter)?;\n                     }\n@@ -310,7 +512,7 @@ macro_rules! make_value_visitor {\n                     // If this is a multi-variant layout, find the right variant and proceed\n                     // with *its* fields.\n                     Variants::Multiple { .. } => {\n-                        let op = v.to_op(self.ecx())?;\n+                        let op = v.to_op_for_read(self.ecx())?;\n                         let idx = self.read_discriminant(&op)?;\n                         let inner = v.project_downcast(self.ecx(), idx)?;\n                         trace!(\"walk_value: variant layout: {:#?}\", inner.layout());\n@@ -325,5 +527,5 @@ macro_rules! make_value_visitor {\n     }\n }\n \n-make_value_visitor!(ValueVisitor,);\n-make_value_visitor!(MutValueVisitor, mut);\n+make_value_visitor!(ValueVisitor, Value,);\n+make_value_visitor!(MutValueVisitor, ValueMut, mut);"}]}