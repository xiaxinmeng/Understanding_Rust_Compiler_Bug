{"sha": "fcc79f2d60d55114ae890e1112393ef0e2e8d93f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzc5ZjJkNjBkNTUxMTRhZTg5MGUxMTEyMzkzZWYwZTJlOGQ5M2Y=", "commit": {"author": {"name": "Alexander Bulaev", "email": "aleks.bulaev@gmail.com", "date": "2015-11-04T12:03:33Z"}, "committer": {"name": "Alexander Bulaev", "email": "aleks.bulaev@gmail.com", "date": "2015-11-04T12:03:33Z"}, "message": "liballoc: implement From for Box, Rc, Arc\n\nSometimes when writing generic code you want to abstract over\nowning/pointer type so that calling code isn't restricted by one\nconcrete owning/pointer type. This commit makes possible such code:\n```\nfn i_will_work_with_arc<T: Into<Arc<MyTy>>>(t: T) {\n    let the_arc = t.into();\n    // Do something\n}\n\ni_will_work_with_arc(MyTy::new());\n\ni_will_work_with_arc(Box::new(MyTy::new()));\n\nlet arc_that_i_already_have = Arc::new(MyTy::new());\ni_will_work_with_arc(arc_that_i_already_have);\n```\n\nPlease note that this patch doesn't work with DSTs.", "tree": {"sha": "06adda2f3d316e558bcbf5418711977445a9ba98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06adda2f3d316e558bcbf5418711977445a9ba98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc79f2d60d55114ae890e1112393ef0e2e8d93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc79f2d60d55114ae890e1112393ef0e2e8d93f", "html_url": "https://github.com/rust-lang/rust/commit/fcc79f2d60d55114ae890e1112393ef0e2e8d93f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc79f2d60d55114ae890e1112393ef0e2e8d93f/comments", "author": {"login": "alexbool", "id": 1283792, "node_id": "MDQ6VXNlcjEyODM3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1283792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexbool", "html_url": "https://github.com/alexbool", "followers_url": "https://api.github.com/users/alexbool/followers", "following_url": "https://api.github.com/users/alexbool/following{/other_user}", "gists_url": "https://api.github.com/users/alexbool/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexbool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexbool/subscriptions", "organizations_url": "https://api.github.com/users/alexbool/orgs", "repos_url": "https://api.github.com/users/alexbool/repos", "events_url": "https://api.github.com/users/alexbool/events{/privacy}", "received_events_url": "https://api.github.com/users/alexbool/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexbool", "id": 1283792, "node_id": "MDQ6VXNlcjEyODM3OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1283792?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexbool", "html_url": "https://github.com/alexbool", "followers_url": "https://api.github.com/users/alexbool/followers", "following_url": "https://api.github.com/users/alexbool/following{/other_user}", "gists_url": "https://api.github.com/users/alexbool/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexbool/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexbool/subscriptions", "organizations_url": "https://api.github.com/users/alexbool/orgs", "repos_url": "https://api.github.com/users/alexbool/repos", "events_url": "https://api.github.com/users/alexbool/events{/privacy}", "received_events_url": "https://api.github.com/users/alexbool/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a216e847272ddbd3033037b606eaf2d801c250b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a216e847272ddbd3033037b606eaf2d801c250b9", "html_url": "https://github.com/rust-lang/rust/commit/a216e847272ddbd3033037b606eaf2d801c250b9"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "36f915d19e9caecad0c406437d6a4f9ef90b7083", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fcc79f2d60d55114ae890e1112393ef0e2e8d93f/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc79f2d60d55114ae890e1112393ef0e2e8d93f/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=fcc79f2d60d55114ae890e1112393ef0e2e8d93f", "patch": "@@ -84,6 +84,7 @@ use core::ptr::{self, Shared};\n use core::marker::Unsize;\n use core::hash::{Hash, Hasher};\n use core::{usize, isize};\n+use core::convert::From;\n use heap::deallocate;\n \n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n@@ -894,8 +895,23 @@ impl<T: ?Sized + Hash> Hash for Arc<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.6.0\")]\n+impl<T> From<T> for Arc<T> {\n+    fn from(t: T) -> Self {\n+        Arc::new(t)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.6.0\")]\n+impl<T> From<Box<T>> for Arc<T> {\n+    fn from(t: Box<T>) -> Self {\n+        Arc::new(*t)\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n+    use std::boxed::Box;\n     use std::clone::Clone;\n     use std::sync::mpsc::channel;\n     use std::mem::drop;\n@@ -908,6 +924,7 @@ mod tests {\n     use std::vec::Vec;\n     use super::{Arc, Weak};\n     use std::sync::Mutex;\n+    use std::convert::From;\n \n     struct Canary(*mut atomic::AtomicUsize);\n \n@@ -1137,6 +1154,20 @@ mod tests {\n         drop(x);\n         assert!(y.upgrade().is_none());\n     }\n+\n+    #[test]\n+    fn test_from_owned() {\n+        let foo = 123;\n+        let foo_arc = Arc::from(foo);\n+        assert!(123 == *foo_arc);\n+    }\n+\n+    #[test]\n+    fn test_from_box() {\n+        let foo_box = Box::new(123);\n+        let foo_arc = Arc::from(foo_box);\n+        assert!(123 == *foo_arc);\n+    }\n }\n \n impl<T: ?Sized> borrow::Borrow<T> for Arc<T> {"}, {"sha": "3899c9be46d61e5b6355967232968de045e1b5c2", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcc79f2d60d55114ae890e1112393ef0e2e8d93f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc79f2d60d55114ae890e1112393ef0e2e8d93f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=fcc79f2d60d55114ae890e1112393ef0e2e8d93f", "patch": "@@ -67,6 +67,7 @@ use core::ops::{CoerceUnsized, Deref, DerefMut};\n use core::ops::{Placer, Boxed, Place, InPlace, BoxPlace};\n use core::ptr::{self, Unique};\n use core::raw::TraitObject;\n+use core::convert::From;\n \n /// A value that represents the heap. This is the default place that the `box`\n /// keyword allocates into when no place is supplied.\n@@ -375,6 +376,13 @@ impl<T: ?Sized + Hash> Hash for Box<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.6.0\")]\n+impl<T> From<T> for Box<T> {\n+    fn from(t: T) -> Self {\n+        Box::new(t)\n+    }\n+}\n+\n impl Box<Any> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "e7deceb94c3706f93868b30210bde106064d2f18", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fcc79f2d60d55114ae890e1112393ef0e2e8d93f/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc79f2d60d55114ae890e1112393ef0e2e8d93f/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=fcc79f2d60d55114ae890e1112393ef0e2e8d93f", "patch": "@@ -165,6 +165,7 @@ use core::marker::{self, Unsize};\n use core::mem::{self, align_of_val, size_of_val, forget};\n use core::ops::{CoerceUnsized, Deref};\n use core::ptr::{self, Shared};\n+use core::convert::From;\n \n use heap::deallocate;\n \n@@ -698,6 +699,20 @@ impl<T> fmt::Pointer for Rc<T> {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.6.0\")]\n+impl<T> From<T> for Rc<T> {\n+    fn from(t: T) -> Self {\n+        Rc::new(t)\n+    }\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.6.0\")]\n+impl<T> From<Box<T>> for Rc<T> {\n+    fn from(t: Box<T>) -> Self {\n+        Rc::new(*t)\n+    }\n+}\n+\n /// A weak version of `Rc<T>`.\n ///\n /// Weak references do not count when determining if the inner value should be\n@@ -903,6 +918,7 @@ mod tests {\n     use std::result::Result::{Err, Ok};\n     use std::mem::drop;\n     use std::clone::Clone;\n+    use std::convert::From;\n \n     #[test]\n     fn test_clone() {\n@@ -1105,6 +1121,20 @@ mod tests {\n         let foo: Rc<[i32]> = Rc::new([1, 2, 3]);\n         assert_eq!(foo, foo.clone());\n     }\n+\n+    #[test]\n+    fn test_from_owned() {\n+        let foo = 123;\n+        let foo_rc = Rc::from(foo);\n+        assert!(123 == *foo_rc);\n+    }\n+\n+    #[test]\n+    fn test_from_box() {\n+        let foo_box = Box::new(123);\n+        let foo_rc = Rc::from(foo_box);\n+        assert!(123 == *foo_rc);\n+    }\n }\n \n impl<T: ?Sized> borrow::Borrow<T> for Rc<T> {"}]}