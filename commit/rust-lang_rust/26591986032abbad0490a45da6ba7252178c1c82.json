{"sha": "26591986032abbad0490a45da6ba7252178c1c82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NTkxOTg2MDMyYWJiYWQwNDkwYTQ1ZGE2YmE3MjUyMTc4YzFjODI=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-17T23:07:39Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-20T17:28:49Z"}, "message": "show how iterating over `RangeTo` and `RangeToInclusive` fails\n\nFeedback on PR #35701 seems to be positive, so this does the same thing for `RangeTo` and `RangeToInclusive`.", "tree": {"sha": "89920f89b8a765fd2206a48d21b610791ddc301a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89920f89b8a765fd2206a48d21b610791ddc301a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26591986032abbad0490a45da6ba7252178c1c82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26591986032abbad0490a45da6ba7252178c1c82", "html_url": "https://github.com/rust-lang/rust/commit/26591986032abbad0490a45da6ba7252178c1c82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26591986032abbad0490a45da6ba7252178c1c82/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe", "html_url": "https://github.com/rust-lang/rust/commit/7ac11cad3fe85163dd8b0ca1f63af492509f9bfe"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "92d41c03e9aeb7b53478c2542b19a287add8b12e", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/26591986032abbad0490a45da6ba7252178c1c82/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26591986032abbad0490a45da6ba7252178c1c82/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=26591986032abbad0490a45da6ba7252178c1c82", "patch": "@@ -1610,17 +1610,33 @@ impl<Idx: PartialOrd<Idx>> RangeFrom<Idx> {\n ///\n /// It cannot serve as an iterator because it doesn't have a starting point.\n ///\n+/// # Examples\n+///\n+/// The `..{integer}` syntax is a `RangeTo`:\n+///\n+/// ```\n+/// assert_eq!((..5), std::ops::RangeTo{ end: 5 });\n /// ```\n-/// fn main() {\n-///     assert_eq!((..5), std::ops::RangeTo{ end: 5 });\n ///\n-///     let arr = [0, 1, 2, 3];\n-///     assert_eq!(arr[ .. ], [0,1,2,3]);\n-///     assert_eq!(arr[ ..3], [0,1,2  ]);  // RangeTo\n-///     assert_eq!(arr[1.. ], [  1,2,3]);\n-///     assert_eq!(arr[1..3], [  1,2  ]);\n+/// It does not have an `IntoIterator` implementation, so you can't use it in a\n+/// `for` loop directly. This won't compile:\n+///\n+/// ```ignore\n+/// for i in ..5 {\n+///     // ...\n /// }\n /// ```\n+///\n+/// When used as a slicing index, `RangeTo` produces a slice of all array\n+/// elements before the index indicated by `end`.\n+///\n+/// ```\n+/// let arr = [0, 1, 2, 3];\n+/// assert_eq!(arr[ .. ], [0,1,2,3]);\n+/// assert_eq!(arr[ ..3], [0,1,2  ]);  // RangeTo\n+/// assert_eq!(arr[1.. ], [  1,2,3]);\n+/// assert_eq!(arr[1..3], [  1,2  ]);\n+/// ```\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RangeTo<Idx> {\n@@ -1748,16 +1764,31 @@ impl<Idx: PartialOrd<Idx>> RangeInclusive<Idx> {\n ///\n /// # Examples\n ///\n+/// The `...{integer}` syntax is a `RangeToInclusive`:\n+///\n /// ```\n /// #![feature(inclusive_range,inclusive_range_syntax)]\n-/// fn main() {\n-///     assert_eq!((...5), std::ops::RangeToInclusive{ end: 5 });\n+/// assert_eq!((...5), std::ops::RangeToInclusive{ end: 5 });\n+/// ```\n ///\n-///     let arr = [0, 1, 2, 3];\n-///     assert_eq!(arr[ ...2], [0,1,2  ]);  // RangeToInclusive\n-///     assert_eq!(arr[1...2], [  1,2  ]);\n+/// It does not have an `IntoIterator` implementation, so you can't use it in a\n+/// `for` loop directly. This won't compile:\n+///\n+/// ```ignore\n+/// for i in ...5 {\n+///     // ...\n /// }\n /// ```\n+///\n+/// When used as a slicing index, `RangeToInclusive` produces a slice of all\n+/// array elements up to and including the index indicated by `end`.\n+///\n+/// ```\n+/// #![feature(inclusive_range_syntax)]\n+/// let arr = [0, 1, 2, 3];\n+/// assert_eq!(arr[ ...2], [0,1,2  ]);  // RangeToInclusive\n+/// assert_eq!(arr[1...2], [  1,2  ]);\n+/// ```\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n #[unstable(feature = \"inclusive_range\", reason = \"recently added, follows RFC\", issue = \"28237\")]\n pub struct RangeToInclusive<Idx> {"}]}