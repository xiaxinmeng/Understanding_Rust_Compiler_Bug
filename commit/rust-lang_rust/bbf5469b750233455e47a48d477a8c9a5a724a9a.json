{"sha": "bbf5469b750233455e47a48d477a8c9a5a724a9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiZjU0NjliNzUwMjMzNDU1ZTQ3YTQ4ZDQ3N2E4YzlhNWE3MjRhOWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-20T18:26:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-20T18:26:29Z"}, "message": "Merge remote-tracking branch 'brson/io-wip' into io", "tree": {"sha": "3a3ceac1a87e2ad87aeb1dd7855f57cab15ddb90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a3ceac1a87e2ad87aeb1dd7855f57cab15ddb90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbf5469b750233455e47a48d477a8c9a5a724a9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf5469b750233455e47a48d477a8c9a5a724a9a", "html_url": "https://github.com/rust-lang/rust/commit/bbf5469b750233455e47a48d477a8c9a5a724a9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbf5469b750233455e47a48d477a8c9a5a724a9a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b548c781aa959085474d9e16f11a4dffb8420af5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b548c781aa959085474d9e16f11a4dffb8420af5", "html_url": "https://github.com/rust-lang/rust/commit/b548c781aa959085474d9e16f11a4dffb8420af5"}, {"sha": "391bb0b4e7131cd7d30e03deea3eb9756a7c8954", "url": "https://api.github.com/repos/rust-lang/rust/commits/391bb0b4e7131cd7d30e03deea3eb9756a7c8954", "html_url": "https://github.com/rust-lang/rust/commit/391bb0b4e7131cd7d30e03deea3eb9756a7c8954"}], "stats": {"total": 95, "additions": 72, "deletions": 23}, "files": [{"sha": "a80fb15bad798f6d96fc002f138f30c83bbeeea3", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 55, "deletions": 21, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=bbf5469b750233455e47a48d477a8c9a5a724a9a", "patch": "@@ -63,17 +63,19 @@ use cell::Cell;\n use clone::Clone;\n use container::Container;\n use from_str::FromStr;\n+use iter::Times;\n use iterator::IteratorUtil;\n use option::{Some, None};\n use os;\n use ptr::RawPtr;\n-use uint;\n use rt::sched::{Scheduler, Coroutine, Shutdown};\n use rt::sleeper_list::SleeperList;\n use rt::task::Task;\n use rt::thread::Thread;\n use rt::work_queue::WorkQueue;\n use rt::uv::uvio::UvEventLoop;\n+use unstable::atomics::{AtomicInt, SeqCst};\n+use unstable::sync::UnsafeAtomicRcBox;\n use vec::{OwnedVector, MutableVector};\n \n /// The global (exchange) heap.\n@@ -148,7 +150,7 @@ pub mod local_ptr;\n /// Bindings to pthread/windows thread-local storage.\n pub mod thread_local_storage;\n \n-/// A concurrent data structure with which parent tasks wait on child tasks.\n+/// For waiting on child tasks.\n pub mod join_latch;\n \n pub mod metrics;\n@@ -174,68 +176,95 @@ pub mod util;\n pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n     init(crate_map);\n-    run(main);\n+    let exit_code = run(main);\n     cleanup();\n \n-    return 0;\n+    return exit_code;\n }\n \n /// One-time runtime initialization. Currently all this does is set up logging\n /// based on the RUST_LOG environment variable.\n pub fn init(crate_map: *u8) {\n     logging::init(crate_map);\n+    unsafe { rust_update_gc_metadata(crate_map) }\n+\n+    extern {\n+        fn rust_update_gc_metadata(crate_map: *u8);\n+    }\n }\n \n+/// One-time runtime cleanup.\n pub fn cleanup() {\n     global_heap::cleanup();\n }\n \n-pub fn run(main: ~fn()) {\n+/// Execute the main function in a scheduler.\n+///\n+/// Configures the runtime according to the environment, by default\n+/// using a task scheduler with the same number of threads as cores.\n+/// Returns a process exit code.\n+pub fn run(main: ~fn()) -> int {\n+\n+    static DEFAULT_ERROR_CODE: int = 101;\n+\n     let nthreads = match os::getenv(\"RUST_THREADS\") {\n         Some(nstr) => FromStr::from_str(nstr).get(),\n-        None => unsafe {\n-            // Using more threads than cores in test code\n-            // to force the OS to preempt them frequently.\n-            // Assuming that this help stress test concurrent types.\n-            util::num_cpus() * 2\n-        }\n+        None => unsafe { util::num_cpus() }\n     };\n \n+    // The shared list of sleeping schedulers. Schedulers wake each other\n+    // occassionally to do new work.\n     let sleepers = SleeperList::new();\n+    // The shared work queue. Temporary until work stealing is implemented.\n     let work_queue = WorkQueue::new();\n \n-    let mut handles = ~[];\n+    // The schedulers.\n     let mut scheds = ~[];\n+    // Handles to the schedulers. When the main task ends these will be\n+    // sent the Shutdown message to terminate the schedulers.\n+    let mut handles = ~[];\n \n-    for uint::range(0, nthreads) |_| {\n+    for nthreads.times {\n+        // Every scheduler is driven by an I/O event loop.\n         let loop_ = ~UvEventLoop::new();\n         let mut sched = ~Scheduler::new(loop_, work_queue.clone(), sleepers.clone());\n         let handle = sched.make_handle();\n \n-        handles.push(handle);\n         scheds.push(sched);\n+        handles.push(handle);\n     }\n \n-    let main_cell = Cell::new(main);\n+    // Create a shared cell for transmitting the process exit\n+    // code from the main task to this function.\n+    let exit_code = UnsafeAtomicRcBox::new(AtomicInt::new(0));\n+    let exit_code_clone = exit_code.clone();\n+\n+    // When the main task exits, after all the tasks in the main\n+    // task tree, shut down the schedulers and set the exit code.\n     let handles = Cell::new(handles);\n-    let mut new_task = ~Task::new_root();\n-    let on_exit: ~fn(bool) = |exit_status| {\n+    let on_exit: ~fn(bool) = |exit_success| {\n \n         let mut handles = handles.take();\n-        // Tell schedulers to exit\n         for handles.mut_iter().advance |handle| {\n             handle.send(Shutdown);\n         }\n \n-        rtassert!(exit_status);\n+        unsafe {\n+            let exit_code = if exit_success { 0 } else { DEFAULT_ERROR_CODE };\n+            (*exit_code_clone.get()).store(exit_code, SeqCst);\n+        }\n     };\n+\n+    // Create and enqueue the main task.\n+    let main_cell = Cell::new(main);\n+    let mut new_task = ~Task::new_root();\n     new_task.on_exit = Some(on_exit);\n     let main_task = ~Coroutine::with_task(&mut scheds[0].stack_pool,\n                                           new_task, main_cell.take());\n     scheds[0].enqueue_task(main_task);\n \n+    // Run each scheduler in a thread.\n     let mut threads = ~[];\n-\n     while !scheds.is_empty() {\n         let sched = scheds.pop();\n         let sched_cell = Cell::new(sched);\n@@ -248,7 +277,12 @@ pub fn run(main: ~fn()) {\n     }\n \n     // Wait for schedulers\n-    let _threads = threads;\n+    { let _threads = threads; }\n+\n+    // Return the exit code\n+    unsafe {\n+        (*exit_code.get()).load(SeqCst)\n+    }\n }\n \n /// Possible contexts in which Rust code may be executing."}, {"sha": "f2591996e3a9eba291f6c76d76835fb76c6f95bb", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=bbf5469b750233455e47a48d477a8c9a5a724a9a", "patch": "@@ -180,10 +180,13 @@ impl FailWithCause for &'static str {\n \n // FIXME #4427: Temporary until rt::rt_fail_ goes away\n pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n+    use cell::Cell;\n     use option::Option;\n+    use either::Left;\n     use rt::{context, OldTaskContext, TaskContext};\n     use rt::task::{Task, Unwinder};\n     use rt::local::Local;\n+    use rt::logging::Logger;\n \n     let context = context();\n     match context {\n@@ -200,12 +203,18 @@ pub fn begin_unwind_(msg: *c_char, file: *c_char, line: size_t) -> ! {\n                 let msg = str::raw::from_c_str(msg);\n                 let file = str::raw::from_c_str(file);\n \n-                let outmsg = fmt!(\"%s at line %i of file %s\", msg, line as int, file);\n+                let outmsg = fmt!(\"task failed: '%s' at line %i of file %s\",\n+                                  msg, line as int, file);\n \n                 // XXX: Logging doesn't work correctly in non-task context because it\n                 // invokes the local heap\n                 if context == TaskContext {\n-                    error!(outmsg);\n+                    // XXX: Logging doesn't work here - the check to call the log\n+                    // function never passes - so calling the log function directly.\n+                    let outmsg = Cell::new(outmsg);\n+                    do Local::borrow::<Task, ()> |task| {\n+                        task.logger.log(Left(outmsg.take()));\n+                    }\n                 } else {\n                     rtdebug!(\"%s\", outmsg);\n                 }"}, {"sha": "e37856255a7d60a360873d326cb66360cecb20c8", "filename": "src/rt/rust_gc_metadata.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Frt%2Frust_gc_metadata.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Frt%2Frust_gc_metadata.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc_metadata.cpp?ref=bbf5469b750233455e47a48d477a8c9a5a724a9a", "patch": "@@ -79,6 +79,11 @@ rust_gc_metadata() {\n     return (void *)global_safe_points;\n }\n \n+extern \"C\" CDECL void\n+rust_update_gc_metadata(const void* map) {\n+    update_gc_metadata(map);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "c93d29f6148c6f1cebc5efc25429545ccb53b125", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/bbf5469b750233455e47a48d477a8c9a5a724a9a/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=bbf5469b750233455e47a48d477a8c9a5a724a9a", "patch": "@@ -178,6 +178,7 @@ rust_call_tydesc_glue\n tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n rust_gc_metadata\n+rust_update_gc_metadata\n rust_uv_ip4_port\n rust_uv_ip6_port\n rust_uv_tcp_getpeername"}]}