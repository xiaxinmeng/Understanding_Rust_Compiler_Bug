{"sha": "579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OWM2NWRhMWJhYmJjZmE1ZjNmZDFjYjVhMTA2MmFjYmU1YjYxZWI=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-11-16T01:57:54Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-11-16T02:15:27Z"}, "message": "Un-feature gate struct variants\n\nStruct variant field visibility is now inherited. Remove `pub` keywords\nfrom declarations.\n\nCloses #18641\n\n[breaking-change]", "tree": {"sha": "16a6ebca56dbed85cfe040b99642ae1b3a7a72d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16a6ebca56dbed85cfe040b99642ae1b3a7a72d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "html_url": "https://github.com/rust-lang/rust/commit/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e43f419cb98c9035d30e5cf0e0be7944dbc0371", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e43f419cb98c9035d30e5cf0e0be7944dbc0371", "html_url": "https://github.com/rust-lang/rust/commit/7e43f419cb98c9035d30e5cf0e0be7944dbc0371"}], "stats": {"total": 174, "additions": 60, "deletions": 114}, "files": [{"sha": "1e5d5ccf339c38f35408d8cc332e55db28457928", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -37,7 +37,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n {error_deriving}"}, {"sha": "9d975c7aebca3995db065a2cce5b41572ab0460a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -1399,6 +1399,9 @@ pub struct MissingDoc {\n     /// Stack of IDs of struct definitions.\n     struct_def_stack: Vec<ast::NodeId>,\n \n+    /// True if inside variant definition\n+    in_variant: bool,\n+\n     /// Stack of whether #[doc(hidden)] is set\n     /// at each level which has lint attributes.\n     doc_hidden_stack: Vec<bool>,\n@@ -1408,6 +1411,7 @@ impl MissingDoc {\n     pub fn new() -> MissingDoc {\n         MissingDoc {\n             struct_def_stack: vec!(),\n+            in_variant: false,\n             doc_hidden_stack: vec!(false),\n         }\n     }\n@@ -1522,7 +1526,7 @@ impl LintPass for MissingDoc {\n \n     fn check_struct_field(&mut self, cx: &Context, sf: &ast::StructField) {\n         match sf.node.kind {\n-            ast::NamedField(_, vis) if vis == ast::Public => {\n+            ast::NamedField(_, vis) if vis == ast::Public || self.in_variant => {\n                 let cur_struct_def = *self.struct_def_stack.last()\n                     .expect(\"empty struct_def_stack\");\n                 self.check_missing_docs_attrs(cx, Some(cur_struct_def),\n@@ -1536,6 +1540,13 @@ impl LintPass for MissingDoc {\n     fn check_variant(&mut self, cx: &Context, v: &ast::Variant, _: &ast::Generics) {\n         self.check_missing_docs_attrs(cx, Some(v.node.id), v.node.attrs.as_slice(),\n                                      v.span, \"a variant\");\n+        assert!(!self.in_variant);\n+        self.in_variant = true;\n+    }\n+\n+    fn check_variant_post(&mut self, _: &Context, _: &ast::Variant, _: &ast::Generics) {\n+        assert!(self.in_variant);\n+        self.in_variant = false;\n     }\n }\n "}, {"sha": "917f05365ec0e078a28d3f1103b6e3ac546cc923", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -665,6 +665,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n         self.with_lint_attrs(v.node.attrs.as_slice(), |cx| {\n             run_lints!(cx, check_variant, v, g);\n             visit::walk_variant(cx, v, g);\n+            run_lints!(cx, check_variant_post, v, g);\n         })\n     }\n "}, {"sha": "3ea4c9c720c8f110b6f165eac58327bc2b89ca69", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -149,6 +149,7 @@ pub trait LintPass {\n         _: &ast::StructDef, _: ast::Ident, _: &ast::Generics, _: ast::NodeId) { }\n     fn check_struct_field(&mut self, _: &Context, _: &ast::StructField) { }\n     fn check_variant(&mut self, _: &Context, _: &ast::Variant, _: &ast::Generics) { }\n+    fn check_variant_post(&mut self, _: &Context, _: &ast::Variant, _: &ast::Generics) { }\n     fn check_opt_lifetime_ref(&mut self, _: &Context, _: Span, _: &Option<ast::Lifetime>) { }\n     fn check_lifetime_ref(&mut self, _: &Context, _: &ast::Lifetime) { }\n     fn check_lifetime_decl(&mut self, _: &Context, _: &ast::LifetimeDef) { }"}, {"sha": "72f3e28999235726b58a75098aab123e059f6496", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -1239,6 +1239,7 @@ struct VisiblePrivateTypesVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n     exported_items: &'a ExportedItems,\n     public_items: &'a PublicItems,\n+    in_variant: bool,\n }\n \n struct CheckTypeForPrivatenessVisitor<'a, 'b: 'a, 'tcx: 'b> {\n@@ -1514,13 +1515,15 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics) {\n         if self.exported_items.contains(&v.node.id) {\n+            self.in_variant = true;\n             visit::walk_variant(self, v, g);\n+            self.in_variant = false;\n         }\n     }\n \n     fn visit_struct_field(&mut self, s: &ast::StructField) {\n         match s.node.kind {\n-            ast::NamedField(_, ast::Public)  => {\n+            ast::NamedField(_, vis) if vis == ast::Public || self.in_variant => {\n                 visit::walk_struct_field(self, s);\n             }\n             _ => {}\n@@ -1598,7 +1601,8 @@ pub fn check_crate(tcx: &ty::ctxt,\n         let mut visitor = VisiblePrivateTypesVisitor {\n             tcx: tcx,\n             exported_items: &exported_items,\n-            public_items: &public_items\n+            public_items: &public_items,\n+            in_variant: false,\n         };\n         visit::walk_crate(&mut visitor, krate);\n     }"}, {"sha": "d49c8e3a288acb2499be805b60990459708929ba", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -102,10 +102,10 @@ pub enum LastPrivate {\n     // and whether the import is in fact used for each.\n     // If the Option<PrivateDep> fields are None, it means there is no definition\n     // in that namespace.\n-    LastImport{pub value_priv: Option<PrivateDep>,\n-               pub value_used: ImportUse,\n-               pub type_priv: Option<PrivateDep>,\n-               pub type_used: ImportUse},\n+    LastImport{value_priv: Option<PrivateDep>,\n+               value_used: ImportUse,\n+               type_priv: Option<PrivateDep>,\n+               type_used: ImportUse},\n }\n \n #[deriving(Show)]"}, {"sha": "19209a3b8e64e91194a39e62ef0a9b382854725c", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -101,9 +101,9 @@ pub enum Repr {\n      * otherwise it indicates the other case.\n      */\n     RawNullablePointer {\n-        pub nndiscr: Disr,\n-        pub nnty: ty::t,\n-        pub nullfields: Vec<ty::t>\n+        nndiscr: Disr,\n+        nnty: ty::t,\n+        nullfields: Vec<ty::t>\n     },\n     /**\n      * Two cases distinguished by a nullable pointer: the case with discriminant\n@@ -117,10 +117,10 @@ pub enum Repr {\n      * identity function.\n      */\n     StructWrappedNullablePointer {\n-        pub nonnull: Struct,\n-        pub nndiscr: Disr,\n-        pub ptrfield: PointerField,\n-        pub nullfields: Vec<ty::t>,\n+        nonnull: Struct,\n+        nndiscr: Disr,\n+        ptrfield: PointerField,\n+        nullfields: Vec<ty::t>,\n     }\n }\n "}, {"sha": "9f17aafe22fd19133babb6eb34e802c5c5cbee76", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -1085,9 +1085,9 @@ impl Clean<Item> for ty::ImplOrTraitItem {\n pub enum Type {\n     /// structs/enums/traits (anything that'd be an ast::TyPath)\n     ResolvedPath {\n-        pub path: Path,\n-        pub typarams: Option<Vec<TyParamBound>>,\n-        pub did: ast::DefId,\n+        path: Path,\n+        typarams: Option<Vec<TyParamBound>>,\n+        did: ast::DefId,\n     },\n     // I have no idea how to usefully use this.\n     TyParamBinder(ast::NodeId),\n@@ -1110,9 +1110,9 @@ pub enum Type {\n     Unique(Box<Type>),\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n-        pub lifetime: Option<Lifetime>,\n-        pub mutability: Mutability,\n-        pub type_: Box<Type>,\n+        lifetime: Option<Lifetime>,\n+        mutability: Mutability,\n+        type_: Box<Type>,\n     },\n     // region, raw, other boxes, mutable\n }"}, {"sha": "cd19a09fd6be9f56ecf223fc2227c8709890bbe5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -1292,8 +1292,8 @@ pub type Variant = Spanned<Variant_>;\n \n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum PathListItem_ {\n-    PathListIdent { pub name: Ident, pub id: NodeId },\n-    PathListMod { pub id: NodeId }\n+    PathListIdent { name: Ident, id: NodeId },\n+    PathListMod { id: NodeId }\n }\n \n impl PathListItem_ {"}, {"sha": "019d2315c1a196b78f8dc1056d034cc75b8513df", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -37,7 +37,7 @@ use std::slice;\n static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"globs\", Active),\n     (\"macro_rules\", Active),\n-    (\"struct_variant\", Active),\n+    (\"struct_variant\", Accepted),\n     (\"asm\", Active),\n     (\"managed_boxes\", Removed),\n     (\"non_ascii_idents\", Active),\n@@ -184,19 +184,6 @@ impl<'a, 'v> Visitor<'v> for Context<'a> {\n             }\n         }\n         match i.node {\n-            ast::ItemEnum(ref def, _) => {\n-                for variant in def.variants.iter() {\n-                    match variant.node.kind {\n-                        ast::StructVariantKind(..) => {\n-                            self.gate_feature(\"struct_variant\", variant.span,\n-                                              \"enum struct variants are \\\n-                                               experimental and possibly buggy\");\n-                        }\n-                        _ => {}\n-                    }\n-                }\n-            }\n-\n             ast::ItemForeignMod(ref foreign_module) => {\n                 if attr::contains_name(i.attrs.as_slice(), \"link_args\") {\n                     self.gate_feature(\"link_args\", i.span,"}, {"sha": "b7a31bb350a84d690f20ec73e8360448434c7da9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -4648,7 +4648,7 @@ impl<'a> Parser<'a> {\n             is_tuple_like = false;\n             fields = Vec::new();\n             while self.token != token::CloseDelim(token::Brace) {\n-                fields.push(self.parse_struct_decl_field());\n+                fields.push(self.parse_struct_decl_field(true));\n             }\n             if fields.len() == 0 {\n                 self.fatal(format!(\"unit-like struct definition should be \\\n@@ -4725,12 +4725,16 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse an element of a struct definition\n-    fn parse_struct_decl_field(&mut self) -> StructField {\n+    fn parse_struct_decl_field(&mut self, allow_pub: bool) -> StructField {\n \n         let attrs = self.parse_outer_attributes();\n \n         if self.eat_keyword(keywords::Pub) {\n-           return self.parse_single_struct_field(Public, attrs);\n+            if !allow_pub {\n+                let span = self.last_span;\n+                self.span_err(span, \"`pub` is not allowed here\");\n+            }\n+            return self.parse_single_struct_field(Public, attrs);\n         }\n \n         return self.parse_single_struct_field(Inherited, attrs);\n@@ -5178,7 +5182,7 @@ impl<'a> Parser<'a> {\n     fn parse_struct_def(&mut self) -> P<StructDef> {\n         let mut fields: Vec<StructField> = Vec::new();\n         while self.token != token::CloseDelim(token::Brace) {\n-            fields.push(self.parse_struct_decl_field());\n+            fields.push(self.parse_struct_decl_field(false));\n         }\n         self.bump();\n "}, {"sha": "1af0193ca4789e43e640b737373372545995d924", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n use std::num::FromPrimitive;\n use std::int;\n "}, {"sha": "1abafb84dd2db298773e76e06d9f0df62e91d65a", "filename": "src/test/compile-fail/deriving-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "50badaeea00c6bd071390d4f50a31070acaef61f", "filename": "src/test/compile-fail/deriving-span-Clone-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "49530afec054391c353fab747179dd3adfbad1d3", "filename": "src/test/compile-fail/deriving-span-Clone-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "27e281bb220b619cfe6ea5a30ac491c406011f8b", "filename": "src/test/compile-fail/deriving-span-Clone-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "a75d909c06d2bbc9a27d93658d578b4e1cc96b97", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "8df6acd27044c7647ad8317f5dd89178080ce90d", "filename": "src/test/compile-fail/deriving-span-Default-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "fb94799caba6df0f4ea1b517895fa73a1fd2f7c6", "filename": "src/test/compile-fail/deriving-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "d4100badcdb856b3f0e033351e1c0bb349966baa", "filename": "src/test/compile-fail/deriving-span-Hash-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "8b0ec01283c864418bc7b8dce201e06ef86afa57", "filename": "src/test/compile-fail/deriving-span-Hash-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "8ed8350e557910278ebb2465ddbad5f5dcf8743b", "filename": "src/test/compile-fail/deriving-span-Hash-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "f9ce978a05762c66e5b1b7d138ef6bb306c9a6c0", "filename": "src/test/compile-fail/deriving-span-PartialEq-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "7756e9bfbb68ef9541c02e1a472fa36c35fb32ec", "filename": "src/test/compile-fail/deriving-span-PartialEq-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "43685a5b0ef52fd3231f153cf257ef725e56ef9a", "filename": "src/test/compile-fail/deriving-span-PartialEq-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "b84b8b4a658c3858903a1efd6f12bbfd275f7e9f", "filename": "src/test/compile-fail/deriving-span-PartialEq-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "810f0f350f3a37f548f16acdf5684ef22c8c8309", "filename": "src/test/compile-fail/deriving-span-PartialOrd-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "7ae2bbf8eb5c74331871b6a949085a007c629bb1", "filename": "src/test/compile-fail/deriving-span-PartialOrd-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "c5b008da884a802cf77ba5e987d6612f300309f6", "filename": "src/test/compile-fail/deriving-span-PartialOrd-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "f282943bba33730fe301b94c22755fdc44f851df", "filename": "src/test/compile-fail/deriving-span-PartialOrd-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "c44abc2313a081243c61e8b2de7f5a1b5f5bc503", "filename": "src/test/compile-fail/deriving-span-Rand-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "fc03b99983d99aa2197027308fec076280edb1ec", "filename": "src/test/compile-fail/deriving-span-Rand-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "36e1e52139397a58e141c93d2c0b0ffd0599d6ca", "filename": "src/test/compile-fail/deriving-span-Rand-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "ffa26061833fad86abddcc10f84b0ccfd7994d12", "filename": "src/test/compile-fail/deriving-span-Rand-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "fa1cfc3de5ba314784ef0f4dd06c51b0da860cf7", "filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "9b1dccf7df5a3f57cf2452205a0c956cb7a103d7", "filename": "src/test/compile-fail/deriving-span-Show-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "8acb6875d53a8e00034b052a22c984c18697d1dd", "filename": "src/test/compile-fail/deriving-span-Show-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "bcbced125ef14a7b442cfc5549d637d5f1ff10d2", "filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "25add55ae4bfc233d2caef78568b859fa333f27d", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "e58121f2cb0813af1cdf72dd132859f82a4f7d8d", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "0637c6e305cfe524add8c969b2c04af2700acc1a", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "3a2cbb11f53fba0e527cdcd197654e5235875107", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(PartialEq)]"}, {"sha": "3b4f4e1080d40446b6d42ec89c5d60091567b9ce", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq,PartialOrd,PartialEq)]"}, {"sha": "02a55fdfbb24c20f6fcc70e4cf820e4c276ca73e", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq,PartialOrd,PartialEq)]"}, {"sha": "7cf3ad57f470123f4cd543e90b6c7f30afdaeb7c", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq,PartialOrd,PartialEq)]"}, {"sha": "7b8d1d3ecd04a058ec13980aeb65fae1a49ac8a3", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq,PartialOrd,PartialEq)]"}, {"sha": "302fecd518b8692df600887fba519e532bbd7d38", "filename": "src/test/compile-fail/deriving-span-Zero-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "05b81ce325113ab4b74148e4be3c1735fd34fe88", "filename": "src/test/compile-fail/deriving-span-Zero-tuple-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // This file was auto-generated using 'src/etc/generate-deriving-span-tests.py'\n \n-#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "7ea114605ce78f13739156765cf47edc729d08cc", "filename": "src/test/compile-fail/dup-struct-enum-struct-variant.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum Foo { C { a: int, b: int } }\n struct C { a: int, b: int }         //~ ERROR error: duplicate definition of type or module `C`\n "}, {"sha": "4cbb61d9853b04bbdaf923ded2ce7a4bcea826d8", "filename": "src/test/compile-fail/gated-non-ascii-idents.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(struct_variant)]\n-\n extern crate b\u00e4z; //~ ERROR non-ascii idents\n \n use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents"}, {"sha": "5b9ff06e9c9a39229c41e369da9aa9e2d8653a01", "filename": "src/test/compile-fail/issue-13624.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n mod a {\n   pub enum Enum {\n     EnumStructVariant { x: u8, y: u8, z: u8 }"}, {"sha": "930e96f170e36176aba4257695f046e2e3212ebc", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum Foo {\n     Variant { x: uint }\n }"}, {"sha": "7c3242a6a25ccfd9b69098a3639fc277541a1f14", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n #![allow(unused_variables)]\n #![allow(non_camel_case_types)]\n #![deny(dead_code)]"}, {"sha": "1a3bd82a9810801f02922f8999034b7bbdebe18b", "filename": "src/test/compile-fail/lint-dead-code-5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-5.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n #![allow(unused_variables)]\n #![deny(dead_code)]\n "}, {"sha": "365081aee1ab548e17e48a326f907327325e153f", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -10,7 +10,6 @@\n \n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n-#![feature(struct_variant)]\n #![feature(globs)]\n #![deny(missing_docs)]\n #![allow(dead_code)]\n@@ -106,8 +105,7 @@ enum Baz {\n \n pub enum PubBaz { //~ ERROR: missing documentation\n     PubBazA { //~ ERROR: missing documentation\n-        pub a: int, //~ ERROR: missing documentation\n-        b: int\n+        a: int, //~ ERROR: missing documentation\n     },\n }\n \n@@ -116,15 +114,13 @@ pub enum PubBaz2 {\n     /// dox\n     PubBaz2A {\n         /// dox\n-        pub a: int,\n-        b: int\n+        a: int,\n     },\n }\n \n #[allow(missing_docs)]\n pub enum PubBaz3 {\n     PubBaz3A {\n-        pub a: int,\n         b: int\n     },\n }"}, {"sha": "72632b56706c41a27b02c1bb4877fd8850cce6ba", "filename": "src/test/compile-fail/lint-raw-ptr-deriving.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n #![allow(dead_code)]\n #![deny(raw_pointer_deriving)]\n "}, {"sha": "373bcb1f85913305e100adf6d2749b1e6adcb8c1", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n #![deny(visible_private_types)]\n #![allow(dead_code)]\n #![crate_type=\"lib\"]\n@@ -57,8 +56,7 @@ struct Bar {\n pub enum Baz {\n     Baz1(Private<int>), //~ ERROR private type in exported type signature\n     Baz2 {\n-        pub x: Private<int>, //~ ERROR private type in exported type signature\n-        y: Private<int>\n+        y: Private<int> //~ ERROR private type in exported type signature\n     },\n }\n "}, {"sha": "120f092d732f92199f1ee61320a077218d4db8ea", "filename": "src/test/compile-fail/namespaced-enum-glob-import-no-impls-xcrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:namespaced_enums.rs\n-#![feature(struct_variant, globs)]\n+#![feature(globs)]\n \n extern crate namespaced_enums;\n "}, {"sha": "a8f4e6ba0903b6ac9e599b4fd02f43eb0442d5cd", "filename": "src/test/compile-fail/namespaced-enum-glob-import-no-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(struct_variant, globs)]\n+#![feature(globs)]\n \n mod m2 {\n     pub enum Foo {"}, {"sha": "7f1204ceee897f3393b804a5d9c91e4308ba68dc", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(advanced_slice_patterns, struct_variant)]\n+#![feature(advanced_slice_patterns)]\n \n struct Foo {\n     first: bool,"}, {"sha": "91709e2ea7da086950134346f115b3f4d30a0f8e", "filename": "src/test/compile-fail/struct-like-enum-nonexhaustive.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-like-enum-nonexhaustive.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(struct_variant)]\n-\n enum A {\n     B { x: Option<int> },\n     C"}, {"sha": "15ed69083e0bf722ee6f4e00b479af6f90a00d54", "filename": "src/test/compile-fail/struct-variant-no-pub.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-variant-no-pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-variant-no-pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-no-pub.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum A { B { foo: int } }\n-//~^ ERROR: enum struct variants are experimental\n+enum Foo {\n+    Bar {\n+        pub a: int //~ ERROR: `pub` is not allowed here\n+    }\n+}\n \n fn main() {}\n-", "previous_filename": "src/test/compile-fail/gated-struct-enums.rs"}, {"sha": "c58273361ad0bebc691fd34903f9f9e9ad61f056", "filename": "src/test/compile-fail/struct-variant-privacy-xc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy-xc.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n // aux-build:struct_variant_privacy.rs\n-#![feature(struct_variant)]\n-\n extern crate struct_variant_privacy;\n \n fn f(b: struct_variant_privacy::Bar) { //~ ERROR enum `Bar` is private"}, {"sha": "bf404c276482b86704393007abfdde54d2afa5d5", "filename": "src/test/compile-fail/struct-variant-privacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-variant-privacy.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(struct_variant)]\n-\n mod foo {\n     enum Bar {\n         Baz { a: int }"}, {"sha": "2f1eb35a426235a64c8fe0991731ef8be248b4ee", "filename": "src/test/compile-fail/unsized5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb/src%2Ftest%2Fcompile-fail%2Funsized5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized5.rs?ref=579c65da1babbcfa5f3fd1cb5a1062acbe5b61eb", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(struct_variant)]\n \n // Test `Sized?` types not allowed in fields (except the last one).\n "}]}