{"sha": "74f3a965f44c69d2975f9d1206160d8001ac4e70", "node_id": "C_kwDOAAsO6NoAKDc0ZjNhOTY1ZjQ0YzY5ZDI5NzVmOWQxMjA2MTYwZDgwMDFhYzRlNzA", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-22T13:11:39Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-27T07:53:42Z"}, "message": "privacy: port \"in public interface\" diag\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "e2a5e647ef7ad33b64d866ac1f4b185d3afbeb06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2a5e647ef7ad33b64d866ac1f4b185d3afbeb06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74f3a965f44c69d2975f9d1206160d8001ac4e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74f3a965f44c69d2975f9d1206160d8001ac4e70", "html_url": "https://github.com/rust-lang/rust/commit/74f3a965f44c69d2975f9d1206160d8001ac4e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74f3a965f44c69d2975f9d1206160d8001ac4e70/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0557d02a9dcca2d0f2e3c6a5a0a69935da4cf1f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0557d02a9dcca2d0f2e3c6a5a0a69935da4cf1f5", "html_url": "https://github.com/rust-lang/rust/commit/0557d02a9dcca2d0f2e3c6a5a0a69935da4cf1f5"}], "stats": {"total": 72, "additions": 60, "deletions": 12}, "files": [{"sha": "2b0778f48caeeeae8843b697b25c856191feceb7", "filename": "compiler/rustc_error_messages/locales/en-US/privacy.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74f3a965f44c69d2975f9d1206160d8001ac4e70/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/74f3a965f44c69d2975f9d1206160d8001ac4e70/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fprivacy.ftl?ref=74f3a965f44c69d2975f9d1206160d8001ac4e70", "patch": "@@ -6,3 +6,7 @@ privacy-item-is-private = {$kind} `{$descr}` is private\n     .label = private {$kind}\n privacy-unnamed-item-is-private = {$kind} is private\n     .label = private {$kind}\n+\n+privacy-in-public-interface = {$vis_descr} {$kind} `{$descr}` in public interface\n+    .label = can't leak {$vis_descr} {$kind}\n+    .visibility-label = `{$descr}` declared as {$vis_descr}"}, {"sha": "482721d373ab7ee0857b72b97924de9d9ad426d9", "filename": "compiler/rustc_privacy/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/74f3a965f44c69d2975f9d1206160d8001ac4e70/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f3a965f44c69d2975f9d1206160d8001ac4e70/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Ferrors.rs?ref=74f3a965f44c69d2975f9d1206160d8001ac4e70", "patch": "@@ -45,3 +45,31 @@ pub struct UnnamedItemIsPrivate {\n     pub span: Span,\n     pub kind: &'static str,\n }\n+\n+// Duplicate of `InPublicInterface` but with a different error code, shares the same slug.\n+#[derive(SessionDiagnostic)]\n+#[error(privacy::in_public_interface, code = \"E0445\")]\n+pub struct InPublicInterfaceTraits<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub vis_descr: &'static str,\n+    pub kind: &'a str,\n+    pub descr: String,\n+    #[label(privacy::visibility_label)]\n+    pub vis_span: Span,\n+}\n+\n+// Duplicate of `InPublicInterfaceTraits` but with a different error code, shares the same slug.\n+#[derive(SessionDiagnostic)]\n+#[error(privacy::in_public_interface, code = \"E0446\")]\n+pub struct InPublicInterface<'a> {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+    pub vis_descr: &'static str,\n+    pub kind: &'a str,\n+    pub descr: String,\n+    #[label(privacy::visibility_label)]\n+    pub vis_span: Span,\n+}"}, {"sha": "c8170fa08e60cec95cf8b84ec298ece5a9977e94", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74f3a965f44c69d2975f9d1206160d8001ac4e70/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f3a965f44c69d2975f9d1206160d8001ac4e70/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=74f3a965f44c69d2975f9d1206160d8001ac4e70", "patch": "@@ -11,7 +11,6 @@ use rustc_ast::MacroDef;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n-use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LocalDefIdSet, CRATE_DEF_ID};\n@@ -36,7 +35,10 @@ use std::marker::PhantomData;\n use std::ops::ControlFlow;\n use std::{cmp, fmt, mem};\n \n-use errors::{FieldIsPrivate, FieldIsPrivateLabel, ItemIsPrivate, UnnamedItemIsPrivate};\n+use errors::{\n+    FieldIsPrivate, FieldIsPrivateLabel, InPublicInterface, InPublicInterfaceTraits, ItemIsPrivate,\n+    UnnamedItemIsPrivate,\n+};\n \n ////////////////////////////////////////////////////////////////////////////////\n /// Generic infrastructure used to implement specific visitors below.\n@@ -1748,30 +1750,44 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n                     }\n                 }\n             };\n-            let make_msg = || format!(\"{} {} `{}` in public interface\", vis_descr, kind, descr);\n             let span = self.tcx.def_span(self.item_def_id.to_def_id());\n             if self.has_old_errors\n                 || self.in_assoc_ty\n                 || self.tcx.resolutions(()).has_pub_restricted\n             {\n-                let mut err = if kind == \"trait\" {\n-                    struct_span_err!(self.tcx.sess, span, E0445, \"{}\", make_msg())\n-                } else {\n-                    struct_span_err!(self.tcx.sess, span, E0446, \"{}\", make_msg())\n-                };\n+                let descr = descr.to_string();\n                 let vis_span =\n                     self.tcx.sess.source_map().guess_head_span(self.tcx.def_span(def_id));\n-                err.span_label(span, format!(\"can't leak {} {}\", vis_descr, kind));\n-                err.span_label(vis_span, format!(\"`{}` declared as {}\", descr, vis_descr));\n-                err.emit();\n+                if kind == \"trait\" {\n+                    self.tcx.sess.emit_err(InPublicInterfaceTraits {\n+                        span,\n+                        vis_descr,\n+                        kind,\n+                        descr,\n+                        vis_span,\n+                    });\n+                } else {\n+                    self.tcx.sess.emit_err(InPublicInterface {\n+                        span,\n+                        vis_descr,\n+                        kind,\n+                        descr,\n+                        vis_span,\n+                    });\n+                }\n             } else {\n                 let err_code = if kind == \"trait\" { \"E0445\" } else { \"E0446\" };\n                 self.tcx.struct_span_lint_hir(\n                     lint::builtin::PRIVATE_IN_PUBLIC,\n                     hir_id,\n                     span,\n                     |lint| {\n-                        lint.build(&format!(\"{} (error {})\", make_msg(), err_code)).emit();\n+                        lint.build(&format!(\n+                            \"{} (error {})\",\n+                            format!(\"{} {} `{}` in public interface\", vis_descr, kind, descr),\n+                            err_code\n+                        ))\n+                        .emit();\n                     },\n                 );\n             }"}]}