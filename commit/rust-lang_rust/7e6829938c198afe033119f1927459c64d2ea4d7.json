{"sha": "7e6829938c198afe033119f1927459c64d2ea4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjgyOTkzOGMxOThhZmUwMzMxMTlmMTkyNzQ1OWM2NGQyZWE0ZDc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T23:52:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-24T23:52:16Z"}, "message": "Rollup merge of #48481 - Manishearth:dyn-paren, r=petrochenkov\n\nAllow parentheses in `dyn (Trait)`\n\nr? @eddyb @nikomatsakis", "tree": {"sha": "fefcaeee946e7ce0413d75d304a8db0da1e63aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fefcaeee946e7ce0413d75d304a8db0da1e63aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e6829938c198afe033119f1927459c64d2ea4d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJakfqwCRBK7hj4Ov3rIwAAdHIIABz9mkQByg5wb6lPkLUfBEAW\nzVpJsr2vj0/0VA8hHUyQeTTuSARmLWMEL9nLE/YCd/L5/8v3OXOpTL+qBCfHy09Y\nCUa3rhOp1tLmjTq/o8ftjul81ha51qN64GkMyAo3M8wQgDACY0N4LXRiP2ZDgmH3\nuzMQZm4+2D3Cjo/nA6Drf0LEoylleL8l7G+Bgv7e1Su+1zpPKaYd6IR372uGgUJz\nJFgJAONYvn3mwRUd2XI8oqYBODWLMp8K0AOyZBi1+cnhKjjBEy6totuxsoOUUV/p\neyz0LSpU6dofmFVlxu6l4JvvDE5nektyR89tW9yuh9wq/GUjf18S3wuH6kZ6TxM=\n=3csY\n-----END PGP SIGNATURE-----\n", "payload": "tree fefcaeee946e7ce0413d75d304a8db0da1e63aa8\nparent 2dba874d57257949ef203eec6ec7be34ff39955b\nparent 4c73f82614ad846d41be3c0dd1e7e179c493ff8a\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519516336 -0800\ncommitter GitHub <noreply@github.com> 1519516336 -0800\n\nRollup merge of #48481 - Manishearth:dyn-paren, r=petrochenkov\n\nAllow parentheses in `dyn (Trait)`\n\nr? @eddyb @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e6829938c198afe033119f1927459c64d2ea4d7", "html_url": "https://github.com/rust-lang/rust/commit/7e6829938c198afe033119f1927459c64d2ea4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e6829938c198afe033119f1927459c64d2ea4d7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dba874d57257949ef203eec6ec7be34ff39955b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dba874d57257949ef203eec6ec7be34ff39955b", "html_url": "https://github.com/rust-lang/rust/commit/2dba874d57257949ef203eec6ec7be34ff39955b"}, {"sha": "4c73f82614ad846d41be3c0dd1e7e179c493ff8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c73f82614ad846d41be3c0dd1e7e179c493ff8a", "html_url": "https://github.com/rust-lang/rust/commit/4c73f82614ad846d41be3c0dd1e7e179c493ff8a"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "62233f97e7512666e57476f49d5a491cbaa4b8c0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e6829938c198afe033119f1927459c64d2ea4d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6829938c198afe033119f1927459c64d2ea4d7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7e6829938c198afe033119f1927459c64d2ea4d7", "patch": "@@ -405,11 +405,14 @@ impl TokenType {\n     }\n }\n \n-// Returns true if `IDENT t` can start a type - `IDENT::a::b`, `IDENT<u8, u8>`,\n-// `IDENT<<u8 as Trait>::AssocTy>`, `IDENT(u8, u8) -> u8`.\n-fn can_continue_type_after_ident(t: &token::Token) -> bool {\n+/// Returns true if `IDENT t` can start a type - `IDENT::a::b`, `IDENT<u8, u8>`,\n+/// `IDENT<<u8 as Trait>::AssocTy>`.\n+///\n+/// Types can also be of the form `IDENT(u8, u8) -> u8`, however this assumes\n+/// that IDENT is not the ident of a fn trait\n+fn can_continue_type_after_non_fn_ident(t: &token::Token) -> bool {\n     t == &token::ModSep || t == &token::Lt ||\n-    t == &token::BinOp(token::Shl) || t == &token::OpenDelim(token::Paren)\n+    t == &token::BinOp(token::Shl)\n }\n \n /// Information about the path to a module.\n@@ -1619,7 +1622,8 @@ impl<'a> Parser<'a> {\n             impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n             TyKind::ImplTrait(bounds)\n         } else if self.check_keyword(keywords::Dyn) &&\n-                  self.look_ahead(1, |t| t.can_begin_bound() && !can_continue_type_after_ident(t)) {\n+                  self.look_ahead(1, |t| t.can_begin_bound() &&\n+                                         !can_continue_type_after_non_fn_ident(t)) {\n             self.bump(); // `dyn`\n             // Always parse bounds greedily for better error recovery.\n             let bounds = self.parse_ty_param_bounds()?;"}, {"sha": "454b6d2f566eb3cad53e027ba0c43359c5b52766", "filename": "src/test/compile-fail/dyn-trait-compatibility.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e6829938c198afe033119f1927459c64d2ea4d7/src%2Ftest%2Fcompile-fail%2Fdyn-trait-compatibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6829938c198afe033119f1927459c64d2ea4d7/src%2Ftest%2Fcompile-fail%2Fdyn-trait-compatibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdyn-trait-compatibility.rs?ref=7e6829938c198afe033119f1927459c64d2ea4d7", "patch": "@@ -20,10 +20,5 @@ type A3 = dyn<<dyn as dyn>::dyn>;\n //~^ ERROR cannot find type `dyn` in this scope\n //~| ERROR cannot find type `dyn` in this scope\n //~| ERROR Use of undeclared type or module `dyn`\n-type A4 = dyn(dyn, dyn) -> dyn;\n-//~^ ERROR cannot find type `dyn` in this scope\n-//~| ERROR cannot find type `dyn` in this scope\n-//~| ERROR cannot find type `dyn` in this scope\n-//~| ERROR cannot find type `dyn` in this scope\n \n fn main() {}"}, {"sha": "d6ddb9b6008d7bc618c6ffc0b0c7c13d2fa1687b", "filename": "src/test/run-pass/dyn-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e6829938c198afe033119f1927459c64d2ea4d7/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e6829938c198afe033119f1927459c64d2ea4d7/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdyn-trait.rs?ref=7e6829938c198afe033119f1927459c64d2ea4d7", "patch": "@@ -17,6 +17,8 @@ static BYTE: u8 = 33;\n fn main() {\n     let x: &(dyn 'static + Display) = &BYTE;\n     let y: Box<dyn Display + 'static> = Box::new(BYTE);\n+    let _: &dyn (Display) = &BYTE;\n+    let _: &dyn (::std::fmt::Display) = &BYTE;\n     let xstr = format!(\"{}\", x);\n     let ystr = format!(\"{}\", y);\n     assert_eq!(xstr, \"33\");"}]}