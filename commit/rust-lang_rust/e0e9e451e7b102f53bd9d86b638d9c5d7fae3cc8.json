{"sha": "e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZTllNDUxZTdiMTAyZjUzYmQ5ZDg2YjYzOGQ5YzVkN2ZhZTNjYzg=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-23T23:53:22Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-24T00:09:17Z"}, "message": "Convert os/priv/uv to new task_builder interface", "tree": {"sha": "549360b7f2f9e428c12c64e2cd7ee2bae967cb86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/549360b7f2f9e428c12c64e2cd7ee2bae967cb86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "html_url": "https://github.com/rust-lang/rust/commit/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7a6a66e4b8c26d25f3eb28010e71ba61aa086b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7a6a66e4b8c26d25f3eb28010e71ba61aa086b5", "html_url": "https://github.com/rust-lang/rust/commit/c7a6a66e4b8c26d25f3eb28010e71ba61aa086b5"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "bb22c2137dc763042965fad481d91e9712cde501", "filename": "src/libcore/os.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "patch": "@@ -24,6 +24,7 @@ import option::{some, none};\n \n import getcwd = rustrt::rust_getcwd;\n import consts::*;\n+import task::task_builder;\n \n export close, fclose, fsync_fd, waitpid;\n export env, getenv, setenv, fdopen, pipe;\n@@ -160,19 +161,14 @@ mod global_env {\n \n     fn get_global_env_chan() -> comm::chan<msg> {\n         let global_ptr = rustrt::rust_global_env_chan_ptr();\n-        let builder_fn = || {\n-            let builder = task::builder();\n-            task::unsupervise(builder);\n-\n+        let task_build_fn = || {\n             // FIXME (#2621): This would be a good place to use a very small\n             // foreign stack\n-            task::set_sched_mode(builder, task::single_threaded);\n-\n-            builder\n+            task::task().sched_mode(task::single_threaded).unlinked()\n         };\n         unsafe {\n             priv::chan_from_global_ptr(\n-                global_ptr, builder_fn, global_env_task)\n+                global_ptr, task_build_fn, global_env_task)\n         }\n     }\n "}, {"sha": "b126ac64bdd55a96f2cf945f7ca778b3c72b8392", "filename": "src/libcore/priv.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibcore%2Fpriv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibcore%2Fpriv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpriv.rs?ref=e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "patch": "@@ -3,6 +3,7 @@\n export chan_from_global_ptr, weaken_task;\n \n import compare_and_swap = rustrt::rust_compare_and_swap_ptr;\n+import task::task_builder;\n \n type rust_port_id = uint;\n \n@@ -23,7 +24,7 @@ type global_ptr = *libc::uintptr_t;\n  */\n unsafe fn chan_from_global_ptr<T: send>(\n     global: global_ptr,\n-    builder: fn() -> task::builder,\n+    task_fn: fn() -> task::task_builder,\n     +f: fn~(comm::port<T>)\n ) -> comm::chan<T> {\n \n@@ -41,7 +42,7 @@ unsafe fn chan_from_global_ptr<T: send>(\n \n         let setup_po = comm::port();\n         let setup_ch = comm::chan(setup_po);\n-        let setup_ch = do task::run_listener(builder()) |setup_po| {\n+        let setup_ch = do task_fn().spawn_listener |setup_po| {\n             let po = comm::port::<T>();\n             let ch = comm::chan(po);\n             comm::send(setup_ch, ch);\n@@ -92,7 +93,7 @@ fn test_from_global_chan1() {\n \n     // Create the global channel, attached to a new task\n     let ch = unsafe {\n-        do chan_from_global_ptr(globchanp, task::builder) |po| {\n+        do chan_from_global_ptr(globchanp, task::task) |po| {\n             let ch = comm::recv(po);\n             comm::send(ch, true);\n             let ch = comm::recv(po);\n@@ -106,7 +107,7 @@ fn test_from_global_chan1() {\n \n     // This one just reuses the previous channel\n     let ch = unsafe {\n-        do chan_from_global_ptr(globchanp, task::builder) |po| {\n+        do chan_from_global_ptr(globchanp, task::task) |po| {\n             let ch = comm::recv(po);\n             comm::send(ch, false);\n         }\n@@ -135,7 +136,7 @@ fn test_from_global_chan2() {\n             do task::spawn {\n                 let ch = unsafe {\n                     do chan_from_global_ptr(\n-                        globchanp, task::builder) |po| {\n+                        globchanp, task::task) |po| {\n \n                         for uint::range(0u, 10u) |_j| {\n                             let ch = comm::recv(po);"}, {"sha": "080961359529fa9855604cebbebab1c6b6e723aa", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "patch": "@@ -8,6 +8,7 @@ import get_gl = get;\n import iotask::{iotask, spawn_iotask};\n import priv::{chan_from_global_ptr, weaken_task};\n import comm::{port, chan, methods, select2, listen};\n+import task::task_builder;\n import either::{left, right};\n \n extern mod rustrt {\n@@ -39,10 +40,7 @@ fn get_monitor_task_gl() -> iotask unsafe {\n            monitor_loop_chan_ptr);\n \n     let builder_fn = || {\n-        let builder = task::builder();\n-        task::unsupervise(builder);\n-        task::set_sched_mode(builder, task::single_threaded);\n-        builder\n+        task::task().sched_mode(task::single_threaded).unlinked()\n     };\n \n     #debug(\"before priv::chan_from_global_ptr\");\n@@ -86,8 +84,7 @@ fn get_monitor_task_gl() -> iotask unsafe {\n }\n \n fn spawn_loop() -> iotask unsafe {\n-    let builder = task::builder();\n-    do task::add_wrapper(builder) |task_body| {\n+    let builder = do task::task().add_wrapper |task_body| {\n         fn~(move task_body) {\n             // The I/O loop task also needs to be weak so it doesn't keep\n             // the runtime alive\n@@ -102,7 +99,7 @@ fn spawn_loop() -> iotask unsafe {\n                 #debug(\"global libuv task is leaving weakened state\");\n             }\n         }\n-    }\n+    };\n     spawn_iotask(builder)\n }\n "}, {"sha": "5566c0c8f0f8d5cd711742457eba0b750993612b", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=e0e9e451e7b102f53bd9d86b638d9c5d7fae3cc8", "patch": "@@ -13,6 +13,7 @@ export exit;\n import libc::c_void;\n import ptr::addr_of;\n import comm::{port, chan, methods, listen};\n+import task::task_builder;\n import ll = uv_ll;\n \n /// Used to abstract-away direct interaction with a libuv loop.\n@@ -23,13 +24,11 @@ enum iotask {\n     })\n }\n \n-fn spawn_iotask(-builder: task::builder) -> iotask {\n-\n-    task::set_sched_mode(builder, task::single_threaded);\n+fn spawn_iotask(-task: task::task_builder) -> iotask {\n \n     do listen |iotask_ch| {\n \n-        do task::run(copy(builder)) {\n+        do task.sched_mode(task::single_threaded).spawn {\n             #debug(\"entering libuv task\");\n             run_loop(iotask_ch);\n             #debug(\"libuv task exiting\");"}]}