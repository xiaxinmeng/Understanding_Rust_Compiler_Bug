{"sha": "dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYmYzODVmZmM0YTQ3YWNmNGE2ZmU1NGVhMmUyNDAyNWJlYWFjOWU=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T14:31:28Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-08T14:31:28Z"}, "message": "use make::name_ref", "tree": {"sha": "f6256a38e280c704cc2ba8c84d67a759e18c518b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6256a38e280c704cc2ba8c84d67a759e18c518b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e", "html_url": "https://github.com/rust-lang/rust/commit/dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e26ba723332499a9b1fb074b6a8a93bb2f56dbd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e26ba723332499a9b1fb074b6a8a93bb2f56dbd7", "html_url": "https://github.com/rust-lang/rust/commit/e26ba723332499a9b1fb074b6a8a93bb2f56dbd7"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "c842d3aa11e063811ef3886cd663496e507882bf", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=dcbf385ffc4a47acf4a6fe54ea2e24025beaac9e", "patch": "@@ -218,37 +218,41 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn, annotated_name: &ast::Name) {\n             let expr = match strukt.field_list() {\n                 None => {\n                     // => f.debug_struct(\"Name\").finish()\n-                    make::expr_method_call(target, \"debug_struct\", args)\n+                    make::expr_method_call(target, make::name_ref(\"debug_struct\"), args)\n                 }\n                 Some(ast::FieldList::RecordFieldList(field_list)) => {\n                     // => f.debug_struct(\"Name\").field(\"foo\", &self.foo).finish()\n-                    let mut expr = make::expr_method_call(target, \"debug_struct\", args);\n+                    let method = make::name_ref(\"debug_struct\");\n+                    let mut expr = make::expr_method_call(target, method, args);\n                     for field in field_list.fields() {\n                         if let Some(name) = field.name() {\n                             let f_name = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n                             let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                             let f_path = make::expr_ref(f_path, false);\n                             let f_path = make::expr_field(f_path, &format!(\"{}\", name)).into();\n                             let args = make::arg_list(vec![f_name, f_path]);\n-                            expr = make::expr_method_call(expr, \"field\", args);\n+                            expr = make::expr_method_call(expr, make::name_ref(\"field\"), args);\n                         }\n                     }\n                     expr\n                 }\n                 Some(ast::FieldList::TupleFieldList(field_list)) => {\n                     // => f.debug_tuple(\"Name\").field(self.0).finish()\n-                    let mut expr = make::expr_method_call(target, \"debug_tuple\", args);\n+                    let method = make::name_ref(\"debug_tuple\");\n+                    let mut expr = make::expr_method_call(target, method, args);\n                     for (idx, _) in field_list.fields().enumerate() {\n                         let f_path = make::expr_path(make::ext::ident_path(\"self\"));\n                         let f_path = make::expr_ref(f_path, false);\n                         let f_path = make::expr_field(f_path, &format!(\"{}\", idx)).into();\n-                        expr = make::expr_method_call(expr, \"field\", make::arg_list(Some(f_path)));\n+                        let method = make::name_ref(\"field\");\n+                        expr = make::expr_method_call(expr, method, make::arg_list(Some(f_path)));\n                     }\n                     expr\n                 }\n             };\n \n-            let expr = make::expr_method_call(expr, \"finish\", make::arg_list(None));\n+            let method = make::name_ref(\"finish\");\n+            let expr = make::expr_method_call(expr, method, make::arg_list(None));\n             let body = make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1));\n             ted::replace(func.body().unwrap().syntax(), body.clone_for_update().syntax());\n         }"}]}