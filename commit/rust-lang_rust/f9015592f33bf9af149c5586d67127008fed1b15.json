{"sha": "f9015592f33bf9af149c5586d67127008fed1b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MDE1NTkyZjMzYmY5YWYxNDljNTU4NmQ2NzEyNzAwOGZlZDFiMTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T16:54:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-25T16:54:48Z"}, "message": "Auto merge of #5952 - 1c3t3a:1c3t3a-dev-5819, r=Manishearth\n\nAdded a lint which corrects expressions like (a - b) < f32::EPSILON, according to #5819\n\nFixes #5819\nchangelog: none", "tree": {"sha": "72a7dd3e7ec3459b2f4fc1e57186e5965488372e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72a7dd3e7ec3459b2f4fc1e57186e5965488372e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9015592f33bf9af149c5586d67127008fed1b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9015592f33bf9af149c5586d67127008fed1b15", "html_url": "https://github.com/rust-lang/rust/commit/f9015592f33bf9af149c5586d67127008fed1b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9015592f33bf9af149c5586d67127008fed1b15/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba43a4325c49f569a59e38e7ea9072d5c9897ee4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba43a4325c49f569a59e38e7ea9072d5c9897ee4", "html_url": "https://github.com/rust-lang/rust/commit/ba43a4325c49f569a59e38e7ea9072d5c9897ee4"}, {"sha": "179df0bd15f9f866b4b3e275ed97aa8168a5b702", "url": "https://api.github.com/repos/rust-lang/rust/commits/179df0bd15f9f866b4b3e275ed97aa8168a5b702", "html_url": "https://github.com/rust-lang/rust/commit/179df0bd15f9f866b4b3e275ed97aa8168a5b702"}], "stats": {"total": 228, "additions": 228, "deletions": 0}, "files": [{"sha": "a5da0f7b76752efe0b9f1982020e91a52a0bd1d5", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9015592f33bf9af149c5586d67127008fed1b15/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f9015592f33bf9af149c5586d67127008fed1b15/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f9015592f33bf9af149c5586d67127008fed1b15", "patch": "@@ -1498,6 +1498,7 @@ Released 2018-09-13\n [`float_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\n [`float_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\n [`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n+[`float_equality_without_abs`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_equality_without_abs\n [`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n [`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast"}, {"sha": "dc1c3bfc9ff3cb5e183108964af2de6fd2f4989b", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/f9015592f33bf9af149c5586d67127008fed1b15/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9015592f33bf9af149c5586d67127008fed1b15/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=f9015592f33bf9af149c5586d67127008fed1b15", "patch": "@@ -0,0 +1,112 @@\n+use crate::utils::{match_qpath, paths, snippet, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Spanned;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for statements of the form `(a - b) < f32::EPSILON` or\n+     /// `(a - b) < f64::EPSILON`. Notes the missing `.abs()`.\n+     ///\n+     /// **Why is this bad?** The code without `.abs()` is more likely to have a bug.\n+     ///\n+     /// **Known problems:** If the user can ensure that b is larger than a, the `.abs()` is\n+     /// technically unneccessary. However, it will make the code more robust and doesn't have any\n+     /// large performance implications. If the abs call was deliberately left out for performance\n+     /// reasons, it is probably better to state this explicitly in the code, which then can be done\n+     /// with an allow.\n+     ///\n+     /// **Example:**\n+     ///\n+     /// ```rust\n+     /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n+     ///     (a - b) < f32::EPSILON\n+     /// }\n+     /// ```\n+     /// Use instead:\n+     /// ```rust\n+     /// pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n+     ///     (a - b).abs() < f32::EPSILON\n+     /// }\n+     /// ```\n+    pub FLOAT_EQUALITY_WITHOUT_ABS,\n+    correctness,\n+    \"float equality check without `.abs()`\"\n+}\n+\n+declare_lint_pass!(FloatEqualityWithoutAbs => [FLOAT_EQUALITY_WITHOUT_ABS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for FloatEqualityWithoutAbs {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let lhs;\n+        let rhs;\n+\n+        // check if expr is a binary expression with a lt or gt operator\n+        if let ExprKind::Binary(op, ref left, ref right) = expr.kind {\n+            match op.node {\n+                BinOpKind::Lt => {\n+                    lhs = left;\n+                    rhs = right;\n+                },\n+                BinOpKind::Gt => {\n+                    lhs = right;\n+                    rhs = left;\n+                },\n+                _ => return,\n+            };\n+        } else {\n+            return;\n+        }\n+\n+        if_chain! {\n+\n+            // left hand side is a substraction\n+            if let ExprKind::Binary(\n+                Spanned {\n+                    node: BinOpKind::Sub,\n+                    ..\n+                },\n+                val_l,\n+                val_r,\n+            ) = lhs.kind;\n+\n+            // right hand side matches either f32::EPSILON or f64::EPSILON\n+            if let ExprKind::Path(ref epsilon_path) = rhs.kind;\n+            if match_qpath(epsilon_path, &paths::F32_EPSILON) || match_qpath(epsilon_path, &paths::F64_EPSILON);\n+\n+            // values of the substractions on the left hand side are of the type float\n+            let t_val_l = cx.typeck_results().expr_ty(val_l);\n+            let t_val_r = cx.typeck_results().expr_ty(val_r);\n+            if let ty::Float(_) = t_val_l.kind;\n+            if let ty::Float(_) = t_val_r.kind;\n+\n+            then {\n+                // get the snippet string\n+                let lhs_string = snippet(\n+                    cx,\n+                    lhs.span,\n+                    \"(...)\",\n+                );\n+                // format the suggestion\n+                let suggestion = if lhs_string.starts_with('(') {\n+                    format!(\"{}.abs()\", lhs_string)\n+                } else {\n+                    format!(\"({}).abs()\", lhs_string)\n+                };\n+                // spans the lint\n+                span_lint_and_sugg(\n+                    cx,\n+                    FLOAT_EQUALITY_WITHOUT_ABS,\n+                    expr.span,\n+                    \"float equality check without `.abs()`\",\n+                    \"add `.abs()`\",\n+                    suggestion,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "f78de7a175f6485d772f59478b028c5f9102f9bf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9015592f33bf9af149c5586d67127008fed1b15/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9015592f33bf9af149c5586d67127008fed1b15/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f9015592f33bf9af149c5586d67127008fed1b15", "patch": "@@ -193,6 +193,7 @@ mod excessive_bools;\n mod exit;\n mod explicit_write;\n mod fallible_impl_from;\n+mod float_equality_without_abs;\n mod float_literal;\n mod floating_point_arithmetic;\n mod format;\n@@ -549,6 +550,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n+        &float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS,\n         &float_literal::EXCESSIVE_PRECISION,\n         &float_literal::LOSSY_FLOAT_LITERAL,\n         &floating_point_arithmetic::IMPRECISE_FLOPS,\n@@ -1093,6 +1095,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box stable_sort_primitive::StableSortPrimitive);\n     store.register_late_pass(|| box repeat_once::RepeatOnce);\n     store.register_late_pass(|| box self_assignment::SelfAssignment);\n+    store.register_late_pass(|| box float_equality_without_abs::FloatEqualityWithoutAbs);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1268,6 +1271,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n         LintId::of(&eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n         LintId::of(&explicit_write::EXPLICIT_WRITE),\n+        LintId::of(&float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n         LintId::of(&float_literal::EXCESSIVE_PRECISION),\n         LintId::of(&format::USELESS_FORMAT),\n         LintId::of(&formatting::POSSIBLE_MISSING_COMMA),\n@@ -1686,6 +1690,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n         LintId::of(&eq_op::EQ_OP),\n         LintId::of(&erasing_op::ERASING_OP),\n+        LintId::of(&float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n         LintId::of(&formatting::POSSIBLE_MISSING_COMMA),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n         LintId::of(&if_let_mutex::IF_LET_MUTEX),"}, {"sha": "d44854aefe97acfd2c3943657ac107e428ecde8d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9015592f33bf9af149c5586d67127008fed1b15/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9015592f33bf9af149c5586d67127008fed1b15/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=f9015592f33bf9af149c5586d67127008fed1b15", "patch": "@@ -35,6 +35,8 @@ pub const DROP_TRAIT: [&str; 4] = [\"core\", \"ops\", \"drop\", \"Drop\"];\n pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const EARLY_CONTEXT: [&str; 4] = [\"rustc\", \"lint\", \"context\", \"EarlyContext\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n+pub const F32_EPSILON: [&str; 2] = [\"f32\", \"EPSILON\"];\n+pub const F64_EPSILON: [&str; 2] = [\"f64\", \"EPSILON\"];\n pub const FILE: [&str; 3] = [\"std\", \"fs\", \"File\"];\n pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];"}, {"sha": "eadd2621a401341c2431d919526dc107559d13af", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9015592f33bf9af149c5586d67127008fed1b15/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9015592f33bf9af149c5586d67127008fed1b15/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f9015592f33bf9af149c5586d67127008fed1b15", "patch": "@@ -661,6 +661,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"misc\",\n     },\n+    Lint {\n+        name: \"float_equality_without_abs\",\n+        group: \"correctness\",\n+        desc: \"float equality check without `.abs()`\",\n+        deprecation: None,\n+        module: \"float_equality_without_abs\",\n+    },\n     Lint {\n         name: \"fn_address_comparisons\",\n         group: \"correctness\","}, {"sha": "d40fa00c315518f891cd3165604c1ae8b8f62862", "filename": "tests/ui/float_equality_without_abs.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f9015592f33bf9af149c5586d67127008fed1b15/tests%2Fui%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9015592f33bf9af149c5586d67127008fed1b15/tests%2Fui%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_equality_without_abs.rs?ref=f9015592f33bf9af149c5586d67127008fed1b15", "patch": "@@ -0,0 +1,31 @@\n+#![warn(clippy::float_equality_without_abs)]\n+\n+pub fn is_roughly_equal(a: f32, b: f32) -> bool {\n+    (a - b) < f32::EPSILON\n+}\n+\n+pub fn main() {\n+    // all errors\n+    is_roughly_equal(1.0, 2.0);\n+    let a = 0.05;\n+    let b = 0.0500001;\n+\n+    let _ = (a - b) < f32::EPSILON;\n+    let _ = a - b < f32::EPSILON;\n+    let _ = a - b.abs() < f32::EPSILON;\n+    let _ = (a as f64 - b as f64) < f64::EPSILON;\n+    let _ = 1.0 - 2.0 < f32::EPSILON;\n+\n+    let _ = f32::EPSILON > (a - b);\n+    let _ = f32::EPSILON > a - b;\n+    let _ = f32::EPSILON > a - b.abs();\n+    let _ = f64::EPSILON > (a as f64 - b as f64);\n+    let _ = f32::EPSILON > 1.0 - 2.0;\n+\n+    // those are correct\n+    let _ = (a - b).abs() < f32::EPSILON;\n+    let _ = (a as f64 - b as f64).abs() < f64::EPSILON;\n+\n+    let _ = f32::EPSILON > (a - b).abs();\n+    let _ = f64::EPSILON > (a as f64 - b as f64).abs();\n+}"}, {"sha": "74b9078afe8b27f9f6f94d9960bfc867e49c78cc", "filename": "tests/ui/float_equality_without_abs.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f9015592f33bf9af149c5586d67127008fed1b15/tests%2Fui%2Ffloat_equality_without_abs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9015592f33bf9af149c5586d67127008fed1b15/tests%2Fui%2Ffloat_equality_without_abs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_equality_without_abs.stderr?ref=f9015592f33bf9af149c5586d67127008fed1b15", "patch": "@@ -0,0 +1,70 @@\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:4:5\n+   |\n+LL |     (a - b) < f32::EPSILON\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+   |\n+   = note: `-D clippy::float-equality-without-abs` implied by `-D warnings`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:13:13\n+   |\n+LL |     let _ = (a - b) < f32::EPSILON;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:14:13\n+   |\n+LL |     let _ = a - b < f32::EPSILON;\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:15:13\n+   |\n+LL |     let _ = a - b.abs() < f32::EPSILON;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b.abs()).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:16:13\n+   |\n+LL |     let _ = (a as f64 - b as f64) < f64::EPSILON;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a as f64 - b as f64).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:17:13\n+   |\n+LL |     let _ = 1.0 - 2.0 < f32::EPSILON;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(1.0 - 2.0).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:19:13\n+   |\n+LL |     let _ = f32::EPSILON > (a - b);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:20:13\n+   |\n+LL |     let _ = f32::EPSILON > a - b;\n+   |             ^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:21:13\n+   |\n+LL |     let _ = f32::EPSILON > a - b.abs();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a - b.abs()).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:22:13\n+   |\n+LL |     let _ = f64::EPSILON > (a as f64 - b as f64);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(a as f64 - b as f64).abs()`\n+\n+error: float equality check without `.abs()`\n+  --> $DIR/float_equality_without_abs.rs:23:13\n+   |\n+LL |     let _ = f32::EPSILON > 1.0 - 2.0;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: add `.abs()`: `(1.0 - 2.0).abs()`\n+\n+error: aborting due to 11 previous errors\n+"}]}