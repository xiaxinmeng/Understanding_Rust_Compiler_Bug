{"sha": "95d0763707956ec6518694ec0fb8b82a7b3a1261", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZDA3NjM3MDc5NTZlYzY1MTg2OTRlYzBmYjhiODJhN2IzYTEyNjE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-07T16:14:43Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libregex: use unboxed closures", "tree": {"sha": "885822a9dbff3f78d23516a4d09fdba6df4423fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/885822a9dbff3f78d23516a4d09fdba6df4423fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d0763707956ec6518694ec0fb8b82a7b3a1261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d0763707956ec6518694ec0fb8b82a7b3a1261", "html_url": "https://github.com/rust-lang/rust/commit/95d0763707956ec6518694ec0fb8b82a7b3a1261", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d0763707956ec6518694ec0fb8b82a7b3a1261/comments", "author": null, "committer": null, "parents": [{"sha": "1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb", "html_url": "https://github.com/rust-lang/rust/commit/1c5aac2b308445c7a03cdf9ff4b5457f7adbf1fb"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "ccbd53c4f2a889f56faa154a5462938b734ceb4c", "filename": "src/libregex/parse.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95d0763707956ec6518694ec0fb8b82a7b3a1261/src%2Flibregex%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d0763707956ec6518694ec0fb8b82a7b3a1261/src%2Flibregex%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Fparse.rs?ref=95d0763707956ec6518694ec0fb8b82a7b3a1261", "patch": "@@ -888,8 +888,9 @@ impl<'a> Parser<'a> {\n     // build_from combines all AST elements starting at 'from' in the\n     // parser's stack using 'mk' to combine them. If any such element is not an\n     // AST then it is popped off the stack and ignored.\n-    fn build_from(&mut self, from: uint, mk: |Ast, Ast| -> Ast)\n-                 -> Result<Ast, Error> {\n+    fn build_from<F>(&mut self, from: uint, mut mk: F) -> Result<Ast, Error> where\n+        F: FnMut(Ast, Ast) -> Ast,\n+    {\n         if from >= self.stack.len() {\n             return self.err(\"Empty group or alternate not allowed.\")\n         }"}]}