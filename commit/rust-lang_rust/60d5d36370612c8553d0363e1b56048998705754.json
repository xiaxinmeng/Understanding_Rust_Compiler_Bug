{"sha": "60d5d36370612c8553d0363e1b56048998705754", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZDVkMzYzNzA2MTJjODU1M2QwMzYzZTFiNTYwNDg5OTg3MDU3NTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-02T03:18:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-04T18:03:27Z"}, "message": "move {Par}DeepVisitor to  intravisit", "tree": {"sha": "6853364f2856bd4ba3f8c4dda66faa3ce67b3196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6853364f2856bd4ba3f8c4dda66faa3ce67b3196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60d5d36370612c8553d0363e1b56048998705754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60d5d36370612c8553d0363e1b56048998705754", "html_url": "https://github.com/rust-lang/rust/commit/60d5d36370612c8553d0363e1b56048998705754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60d5d36370612c8553d0363e1b56048998705754/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1087213efc4a7b2101f9fabb9ee907dd45cb0c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0", "html_url": "https://github.com/rust-lang/rust/commit/e1087213efc4a7b2101f9fabb9ee907dd45cb0c0"}], "stats": {"total": 115, "additions": 56, "deletions": 59}, "files": [{"sha": "780b0e36b5e4de5f2d212997b61f0dd45bde121f", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/60d5d36370612c8553d0363e1b56048998705754/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d5d36370612c8553d0363e1b56048998705754/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=60d5d36370612c8553d0363e1b56048998705754", "patch": "@@ -31,14 +31,67 @@\n //! This order consistency is required in a few places in rustc, for\n //! example generator inference, and possibly also HIR borrowck.\n \n-use super::itemlikevisit::DeepVisitor;\n-\n+use crate::hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use crate::hir::map::Map;\n use crate::hir::*;\n \n use rustc_span::Span;\n use syntax::ast::{Attribute, Ident, Label, Name};\n \n+pub struct DeepVisitor<'v, V> {\n+    visitor: &'v mut V,\n+}\n+\n+impl<'v, 'hir, V> DeepVisitor<'v, V>\n+where\n+    V: Visitor<'hir> + 'v,\n+{\n+    pub fn new(base: &'v mut V) -> Self {\n+        DeepVisitor { visitor: base }\n+    }\n+}\n+\n+impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n+where\n+    V: Visitor<'hir>,\n+{\n+    fn visit_item(&mut self, item: &'hir Item<'hir>) {\n+        self.visitor.visit_item(item);\n+    }\n+\n+    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>) {\n+        self.visitor.visit_trait_item(trait_item);\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {\n+        self.visitor.visit_impl_item(impl_item);\n+    }\n+}\n+\n+pub trait IntoVisitor<'hir> {\n+    type Visitor: Visitor<'hir>;\n+    fn into_visitor(&self) -> Self::Visitor;\n+}\n+\n+pub struct ParDeepVisitor<V>(pub V);\n+\n+impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n+where\n+    V: IntoVisitor<'hir>,\n+{\n+    fn visit_item(&self, item: &'hir Item<'hir>) {\n+        self.0.into_visitor().visit_item(item);\n+    }\n+\n+    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>) {\n+        self.0.into_visitor().visit_trait_item(trait_item);\n+    }\n+\n+    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>) {\n+        self.0.into_visitor().visit_impl_item(impl_item);\n+    }\n+}\n+\n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`"}, {"sha": "369cd49621b2dcb63687584d3f480c57b58d26a5", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/60d5d36370612c8553d0363e1b56048998705754/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d5d36370612c8553d0363e1b56048998705754/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=60d5d36370612c8553d0363e1b56048998705754", "patch": "@@ -1,4 +1,3 @@\n-use super::intravisit::Visitor;\n use super::{ImplItem, Item, TraitItem};\n \n /// The \"item-like visitor\" defines only the top-level methods\n@@ -50,63 +49,9 @@ pub trait ItemLikeVisitor<'hir> {\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>);\n }\n \n-pub struct DeepVisitor<'v, V> {\n-    visitor: &'v mut V,\n-}\n-\n-impl<'v, 'hir, V> DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir> + 'v,\n-{\n-    pub fn new(base: &'v mut V) -> Self {\n-        DeepVisitor { visitor: base }\n-    }\n-}\n-\n-impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n-where\n-    V: Visitor<'hir>,\n-{\n-    fn visit_item(&mut self, item: &'hir Item<'hir>) {\n-        self.visitor.visit_item(item);\n-    }\n-\n-    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>) {\n-        self.visitor.visit_trait_item(trait_item);\n-    }\n-\n-    fn visit_impl_item(&mut self, impl_item: &'hir ImplItem<'hir>) {\n-        self.visitor.visit_impl_item(impl_item);\n-    }\n-}\n-\n /// A parallel variant of `ItemLikeVisitor`.\n pub trait ParItemLikeVisitor<'hir> {\n     fn visit_item(&self, item: &'hir Item<'hir>);\n     fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>);\n     fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>);\n }\n-\n-pub trait IntoVisitor<'hir> {\n-    type Visitor: Visitor<'hir>;\n-    fn into_visitor(&self) -> Self::Visitor;\n-}\n-\n-pub struct ParDeepVisitor<V>(pub V);\n-\n-impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n-where\n-    V: IntoVisitor<'hir>,\n-{\n-    fn visit_item(&self, item: &'hir Item<'hir>) {\n-        self.0.into_visitor().visit_item(item);\n-    }\n-\n-    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>) {\n-        self.0.into_visitor().visit_trait_item(trait_item);\n-    }\n-\n-    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>) {\n-        self.0.into_visitor().visit_impl_item(impl_item);\n-    }\n-}"}, {"sha": "68e5e6d2543a62a33bab352f3b3c9fc7e623cd87", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60d5d36370612c8553d0363e1b56048998705754/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d5d36370612c8553d0363e1b56048998705754/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=60d5d36370612c8553d0363e1b56048998705754", "patch": "@@ -9,8 +9,7 @@ extern crate syntax;\n use rustc::bug;\n use rustc::hir::def::{DefKind, Res};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc::hir::itemlikevisit::DeepVisitor;\n+use rustc::hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc::hir::{self, AssocItemKind, HirIdSet, Node, PatKind};\n use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};"}]}