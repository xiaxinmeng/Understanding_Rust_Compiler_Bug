{"sha": "1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad", "node_id": "C_kwDOAAsO6NoAKDFlMzYwOWIxYmE2Y2M4M2E3YTc4OTcyMDJkZGZjYTQyZTVkYmYwYWQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-02-21T02:31:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-02-21T02:36:15Z"}, "message": "CTFE engine: Scalar: expose size-generic to_(u)int methods", "tree": {"sha": "27fce075d504ae090936f0a3e720a1453cc1157c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27fce075d504ae090936f0a3e720a1453cc1157c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad", "html_url": "https://github.com/rust-lang/rust/commit/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45e2c2881d11324d610815bfff097e25c412199e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e2c2881d11324d610815bfff097e25c412199e", "html_url": "https://github.com/rust-lang/rust/commit/45e2c2881d11324d610815bfff097e25c412199e"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "9bea6ccec708b475a6d066defb5f8707af1c66ce", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad", "patch": "@@ -370,78 +370,82 @@ impl<'tcx, Tag: Provenance> Scalar<Tag> {\n         }\n     }\n \n+    /// Converts the scalar to produce an unsigned integer of the given size.\n+    /// Fails if the scalar is a pointer.\n     #[inline]\n-    fn to_unsigned_with_bit_width(self, bits: u64) -> InterpResult<'static, u128> {\n-        let sz = Size::from_bits(bits);\n-        self.to_bits(sz)\n+    pub fn to_uint(self, size: Size) -> InterpResult<'static, u128> {\n+        self.to_bits(size)\n     }\n \n     /// Converts the scalar to produce a `u8`. Fails if the scalar is a pointer.\n     pub fn to_u8(self) -> InterpResult<'static, u8> {\n-        self.to_unsigned_with_bit_width(8).map(|v| u8::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(8)).map(|v| u8::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u16`. Fails if the scalar is a pointer.\n     pub fn to_u16(self) -> InterpResult<'static, u16> {\n-        self.to_unsigned_with_bit_width(16).map(|v| u16::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(16)).map(|v| u16::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u32`. Fails if the scalar is a pointer.\n     pub fn to_u32(self) -> InterpResult<'static, u32> {\n-        self.to_unsigned_with_bit_width(32).map(|v| u32::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(32)).map(|v| u32::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u64`. Fails if the scalar is a pointer.\n     pub fn to_u64(self) -> InterpResult<'static, u64> {\n-        self.to_unsigned_with_bit_width(64).map(|v| u64::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(64)).map(|v| u64::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u128`. Fails if the scalar is a pointer.\n     pub fn to_u128(self) -> InterpResult<'static, u128> {\n-        self.to_unsigned_with_bit_width(128)\n+        self.to_uint(Size::from_bits(128))\n     }\n \n+    /// Converts the scalar to produce a machine-pointer-sized unsigned integer.\n+    /// Fails if the scalar is a pointer.\n     pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n-        let b = self.to_bits(cx.data_layout().pointer_size)?;\n+        let b = self.to_uint(cx.data_layout().pointer_size)?;\n         Ok(u64::try_from(b).unwrap())\n     }\n \n+    /// Converts the scalar to produce a signed integer of the given size.\n+    /// Fails if the scalar is a pointer.\n     #[inline]\n-    fn to_signed_with_bit_width(self, bits: u64) -> InterpResult<'static, i128> {\n-        let sz = Size::from_bits(bits);\n-        let b = self.to_bits(sz)?;\n-        Ok(sz.sign_extend(b) as i128)\n+    pub fn to_int(self, size: Size) -> InterpResult<'static, i128> {\n+        let b = self.to_bits(size)?;\n+        Ok(size.sign_extend(b) as i128)\n     }\n \n     /// Converts the scalar to produce an `i8`. Fails if the scalar is a pointer.\n     pub fn to_i8(self) -> InterpResult<'static, i8> {\n-        self.to_signed_with_bit_width(8).map(|v| i8::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(8)).map(|v| i8::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i16`. Fails if the scalar is a pointer.\n     pub fn to_i16(self) -> InterpResult<'static, i16> {\n-        self.to_signed_with_bit_width(16).map(|v| i16::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(16)).map(|v| i16::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i32`. Fails if the scalar is a pointer.\n     pub fn to_i32(self) -> InterpResult<'static, i32> {\n-        self.to_signed_with_bit_width(32).map(|v| i32::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(32)).map(|v| i32::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i64`. Fails if the scalar is a pointer.\n     pub fn to_i64(self) -> InterpResult<'static, i64> {\n-        self.to_signed_with_bit_width(64).map(|v| i64::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(64)).map(|v| i64::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i128`. Fails if the scalar is a pointer.\n     pub fn to_i128(self) -> InterpResult<'static, i128> {\n-        self.to_signed_with_bit_width(128)\n+        self.to_int(Size::from_bits(128))\n     }\n \n+    /// Converts the scalar to produce a machine-pointer-sized signed integer.\n+    /// Fails if the scalar is a pointer.\n     pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n-        let sz = cx.data_layout().pointer_size;\n-        let b = self.to_bits(sz)?;\n-        let b = sz.sign_extend(b) as i128;\n+        let b = self.to_int(cx.data_layout().pointer_size)?;\n         Ok(i64::try_from(b).unwrap())\n     }\n "}]}