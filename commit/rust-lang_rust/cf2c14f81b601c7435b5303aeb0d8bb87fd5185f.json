{"sha": "cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMmMxNGY4MWI2MDFjNzQzNWI1MzAzYWViMGQ4YmI4N2ZkNTE4NWY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T01:45:03Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-24T06:38:35Z"}, "message": "Rollup merge of #22730 - ipetkov:lint-docs, r=alexcrichton\n\n This is a breaking change if missing docs are forbidden in any module or crate.\n\nI had to add documentation to undocumented associated types in libstd and libcore, please let me know if the documentation is inadequate anywhere!\n\nFixes #20648", "tree": {"sha": "7de684041447e9f7bd033458f06c41da35346803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de684041447e9f7bd033458f06c41da35346803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "html_url": "https://github.com/rust-lang/rust/commit/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e", "html_url": "https://github.com/rust-lang/rust/commit/9b7c749e7dbcbfcb3e6c3d6b611d6d5093703d8e"}, {"sha": "2e9521c126214255c8d7a78db4daf431bb5d6320", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9521c126214255c8d7a78db4daf431bb5d6320", "html_url": "https://github.com/rust-lang/rust/commit/2e9521c126214255c8d7a78db4daf431bb5d6320"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "09089f2d04c5f8f3ec3f8110a5b23eeeb7a707d3", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "patch": "@@ -86,6 +86,7 @@ use usize;\n #[rustc_on_unimplemented = \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar \\\n                             method\"]\n pub trait Iterator {\n+    /// The type of the elements being iterated\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n \n@@ -122,9 +123,11 @@ pub trait FromIterator<A> {\n /// Conversion into an `Iterator`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IntoIterator {\n+    /// The type of the elements being iterated\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Item;\n \n+    /// A container for iterating over elements of type Item\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type IntoIter: Iterator<Item=Self::Item>;\n "}, {"sha": "c382ac46d5db9895a99241e95d32291f3da1650e", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "patch": "@@ -184,6 +184,7 @@ macro_rules! forward_ref_binop {\n #[lang=\"add\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Add<RHS=Self> {\n+    /// The resulting type after applying the `+` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -237,6 +238,7 @@ add_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"sub\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Sub<RHS=Self> {\n+    /// The resulting type after applying the `-` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -290,6 +292,7 @@ sub_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"mul\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Mul<RHS=Self> {\n+    /// The resulting type after applying the `*` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -343,6 +346,7 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"div\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Div<RHS=Self> {\n+    /// The resulting type after applying the `/` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -396,6 +400,7 @@ div_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n #[lang=\"rem\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Rem<RHS=Self> {\n+    /// The resulting type after applying the `%` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output = Self;\n \n@@ -468,6 +473,7 @@ rem_float_impl! { f64, fmod }\n #[lang=\"neg\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Neg {\n+    /// The resulting type after applying the `-` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -544,6 +550,7 @@ neg_uint_impl! { u64, i64 }\n #[lang=\"not\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Not {\n+    /// The resulting type after applying the `!` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -597,6 +604,7 @@ not_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"bitand\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitAnd<RHS=Self> {\n+    /// The resulting type after applying the `&` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -650,6 +658,7 @@ bitand_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"bitor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitOr<RHS=Self> {\n+    /// The resulting type after applying the `|` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -703,6 +712,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"bitxor\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BitXor<RHS=Self> {\n+    /// The resulting type after applying the `^` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -756,6 +766,7 @@ bitxor_impl! { bool usize u8 u16 u32 u64 isize i8 i16 i32 i64 }\n #[lang=\"shl\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Shl<RHS> {\n+    /// The resulting type after applying the `<<` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -827,6 +838,7 @@ shl_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n #[lang=\"shr\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Shr<RHS> {\n+    /// The resulting type after applying the `>>` operator\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Output;\n \n@@ -900,6 +912,7 @@ shr_impl_all! { u8 u16 u32 u64 usize i8 i16 i32 i64 isize }\n #[rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Index<Idx: ?Sized> {\n+    /// The returned type after indexing\n     type Output: ?Sized;\n \n     /// The method for the indexing (`Foo[Bar]`) operation\n@@ -1047,6 +1060,7 @@ impl<Idx: fmt::Debug> fmt::Debug for RangeTo<Idx> {\n #[lang=\"deref\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Deref {\n+    /// The resulting type after dereferencing\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Target: ?Sized;\n \n@@ -1122,6 +1136,7 @@ impl<'a, T: ?Sized> DerefMut for &'a mut T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n pub trait Fn<Args> {\n+    /// The returned type after the call operator is used.\n     type Output;\n \n     /// This is called when the call operator is used.\n@@ -1133,6 +1148,7 @@ pub trait Fn<Args> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n pub trait FnMut<Args> {\n+    /// The returned type after the call operator is used.\n     type Output;\n \n     /// This is called when the call operator is used.\n@@ -1144,6 +1160,7 @@ pub trait FnMut<Args> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n pub trait FnOnce<Args> {\n+    /// The returned type after the call operator is used.\n     type Output;\n \n     /// This is called when the call operator is used."}, {"sha": "b44cc899787f54cc7c29001de7e8018e231daf08", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "patch": "@@ -249,6 +249,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n /// Methods on raw pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PtrExt: Sized {\n+    /// The type which is being pointed at\n     type Target;\n \n     /// Returns true if the pointer is null.\n@@ -284,6 +285,7 @@ pub trait PtrExt: Sized {\n /// Methods on mutable raw pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait MutPtrExt {\n+    /// The type which is being pointed at\n     type Target;\n \n     /// Returns `None` if the pointer is null, or else returns a mutable"}, {"sha": "66799adef2afda74434d2c509fb89c7d52f86e89", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "patch": "@@ -1577,6 +1577,14 @@ impl LintPass for MissingDoc {\n                                      tm.span, \"a type method\");\n     }\n \n+    fn check_trait_method(&mut self, cx: &Context, it: &ast::TraitItem) {\n+        if let ast::TraitItem::TypeTraitItem(ref ty) = *it {\n+            let assoc_ty = &ty.ty_param;\n+            self.check_missing_docs_attrs(cx, Some(assoc_ty.id), &ty.attrs,\n+                                          assoc_ty.span, \"an associated type\");\n+        }\n+    }\n+\n     fn check_struct_field(&mut self, cx: &Context, sf: &ast::StructField) {\n         if let ast::NamedField(_, vis) = sf.node.kind {\n             if vis == ast::Public || self.in_variant {"}, {"sha": "94457a5d71441b784dc52e9969f6d5e77703ea60", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "patch": "@@ -37,6 +37,7 @@ pub trait OwnedAsciiExt {\n /// Extension methods for ASCII-subset only operations on string slices\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsciiExt {\n+    /// Container type for copied ASCII characters.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     type Owned;\n "}, {"sha": "3a06d2d03bf3f7046ec7c74479f9936abb704be8", "filename": "src/libstd/collections/hash/state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fstate.rs?ref=cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "patch": "@@ -27,6 +27,7 @@ use marker;\n /// to `Default` when asked to create a hasher.\n #[unstable(feature = \"std_misc\", reason = \"hasher stuff is unclear\")]\n pub trait HashState {\n+    /// Type of the hasher that will be created.\n     type Hasher: hash::Hasher;\n \n     /// Creates a new hasher based on the given state of this object."}, {"sha": "cb2d4e10e6e7166237e4e459a2c35b08f4c7ec50", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2c14f81b601c7435b5303aeb0d8bb87fd5185f/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=cf2c14f81b601c7435b5303aeb0d8bb87fd5185f", "patch": "@@ -17,15 +17,15 @@\n #![doc=\"More garbage\"]\n \n type Typedef = String;\n-pub type PubTypedef = String; //~ ERROR: missing documentation\n+pub type PubTypedef = String; //~ ERROR: missing documentation for a type alias\n \n struct Foo {\n     a: isize,\n     b: isize,\n }\n \n-pub struct PubFoo { //~ ERROR: missing documentation\n-    pub a: isize,      //~ ERROR: missing documentation\n+pub struct PubFoo { //~ ERROR: missing documentation for a struct\n+    pub a: isize,      //~ ERROR: missing documentation for a struct field\n     b: isize,\n }\n \n@@ -36,11 +36,11 @@ pub struct PubFoo2 {\n }\n \n mod module_no_dox {}\n-pub mod pub_module_no_dox {} //~ ERROR: missing documentation\n+pub mod pub_module_no_dox {} //~ ERROR: missing documentation for a module\n \n /// dox\n pub fn foo() {}\n-pub fn foo2() {} //~ ERROR: missing documentation\n+pub fn foo2() {} //~ ERROR: missing documentation for a function\n fn foo3() {}\n #[allow(missing_docs)] pub fn foo4() {}\n \n@@ -58,23 +58,36 @@ trait B {\n     fn foo_with_impl(&self) {}\n }\n \n-pub trait C { //~ ERROR: missing documentation\n-    fn foo(&self); //~ ERROR: missing documentation\n-    fn foo_with_impl(&self) {} //~ ERROR: missing documentation\n+pub trait C { //~ ERROR: missing documentation for a trait\n+    fn foo(&self); //~ ERROR: missing documentation for a type method\n+    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a method\n }\n \n #[allow(missing_docs)]\n pub trait D {\n     fn dummy(&self) { }\n }\n \n+/// dox\n+pub trait E {\n+    type AssociatedType; //~ ERROR: missing documentation for an associated type\n+    type AssociatedTypeDef = Self; //~ ERROR: missing documentation for an associated type\n+\n+    /// dox\n+    type DocumentedType;\n+    /// dox\n+    type DocumentedTypeDef = Self;\n+    /// dox\n+    fn dummy(&self) {}\n+}\n+\n impl Foo {\n     pub fn foo() {}\n     fn bar() {}\n }\n \n impl PubFoo {\n-    pub fn foo() {} //~ ERROR: missing documentation\n+    pub fn foo() {} //~ ERROR: missing documentation for a method\n     /// dox\n     pub fn foo1() {}\n     fn foo2() {}\n@@ -111,9 +124,9 @@ enum Baz {\n     BarB\n }\n \n-pub enum PubBaz { //~ ERROR: missing documentation\n-    PubBazA { //~ ERROR: missing documentation\n-        a: isize, //~ ERROR: missing documentation\n+pub enum PubBaz { //~ ERROR: missing documentation for an enum\n+    PubBazA { //~ ERROR: missing documentation for a variant\n+        a: isize, //~ ERROR: missing documentation for a struct field\n     },\n }\n \n@@ -139,14 +152,14 @@ pub fn baz() {}\n mod internal_impl {\n     /// dox\n     pub fn documented() {}\n-    pub fn undocumented1() {} //~ ERROR: missing documentation\n-    pub fn undocumented2() {} //~ ERROR: missing documentation\n+    pub fn undocumented1() {} //~ ERROR: missing documentation for a function\n+    pub fn undocumented2() {} //~ ERROR: missing documentation for a function\n     fn undocumented3() {}\n     /// dox\n     pub mod globbed {\n         /// dox\n         pub fn also_documented() {}\n-        pub fn also_undocumented1() {} //~ ERROR: missing documentation\n+        pub fn also_undocumented1() {} //~ ERROR: missing documentation for a function\n         fn also_undocumented2() {}\n     }\n }"}]}