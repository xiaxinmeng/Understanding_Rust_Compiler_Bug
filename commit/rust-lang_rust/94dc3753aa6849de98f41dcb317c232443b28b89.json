{"sha": "94dc3753aa6849de98f41dcb317c232443b28b89", "node_id": "C_kwDOAAsO6NoAKDk0ZGMzNzUzYWE2ODQ5ZGU5OGY0MWRjYjMxN2MyMzI0NDNiMjhiODk", "commit": {"author": {"name": "William D. Jones", "email": "thor0505@comcast.net", "date": "2022-01-20T22:44:50Z"}, "committer": {"name": "William D. Jones", "email": "thor0505@comcast.net", "date": "2022-01-23T04:42:46Z"}, "message": "Add preliminary support for inline assembly for msp430.", "tree": {"sha": "5df1f75f19e481370a2d5bdec9a74c9891d07d90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5df1f75f19e481370a2d5bdec9a74c9891d07d90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94dc3753aa6849de98f41dcb317c232443b28b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94dc3753aa6849de98f41dcb317c232443b28b89", "html_url": "https://github.com/rust-lang/rust/commit/94dc3753aa6849de98f41dcb317c232443b28b89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94dc3753aa6849de98f41dcb317c232443b28b89/comments", "author": {"login": "cr1901", "id": 6418027, "node_id": "MDQ6VXNlcjY0MTgwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/6418027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cr1901", "html_url": "https://github.com/cr1901", "followers_url": "https://api.github.com/users/cr1901/followers", "following_url": "https://api.github.com/users/cr1901/following{/other_user}", "gists_url": "https://api.github.com/users/cr1901/gists{/gist_id}", "starred_url": "https://api.github.com/users/cr1901/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cr1901/subscriptions", "organizations_url": "https://api.github.com/users/cr1901/orgs", "repos_url": "https://api.github.com/users/cr1901/repos", "events_url": "https://api.github.com/users/cr1901/events{/privacy}", "received_events_url": "https://api.github.com/users/cr1901/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cr1901", "id": 6418027, "node_id": "MDQ6VXNlcjY0MTgwMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/6418027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cr1901", "html_url": "https://github.com/cr1901", "followers_url": "https://api.github.com/users/cr1901/followers", "following_url": "https://api.github.com/users/cr1901/following{/other_user}", "gists_url": "https://api.github.com/users/cr1901/gists{/gist_id}", "starred_url": "https://api.github.com/users/cr1901/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cr1901/subscriptions", "organizations_url": "https://api.github.com/users/cr1901/orgs", "repos_url": "https://api.github.com/users/cr1901/repos", "events_url": "https://api.github.com/users/cr1901/events{/privacy}", "received_events_url": "https://api.github.com/users/cr1901/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c311a7053069cf9640e2f88eced24b202bf218", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c311a7053069cf9640e2f88eced24b202bf218", "html_url": "https://github.com/rust-lang/rust/commit/47c311a7053069cf9640e2f88eced24b202bf218"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "8a74c4c07e0cf2ba331aec30a9839942b7ce0d99", "filename": "src/asm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94dc3753aa6849de98f41dcb317c232443b28b89/src%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94dc3753aa6849de98f41dcb317c232443b28b89/src%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fasm.rs?ref=94dc3753aa6849de98f41dcb317c232443b28b89", "patch": "@@ -560,6 +560,7 @@ fn reg_to_gcc(reg: InlineAsmRegOrRegClass) -> ConstraintOrRegister {\n             InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => unimplemented!(),\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => unimplemented!(),\n             InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => unimplemented!(),\n+            InlineAsmRegClass::Msp430(_) => unimplemented!(),\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => unimplemented!(),\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => unimplemented!(),\n             InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => unimplemented!(),\n@@ -622,6 +623,7 @@ fn dummy_output_type<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, reg: InlineAsmRegCl\n         InlineAsmRegClass::Hexagon(HexagonInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::reg) => cx.type_i32(),\n         InlineAsmRegClass::Mips(MipsInlineAsmRegClass::freg) => cx.type_f32(),\n+        InlineAsmRegClass::Msp430(_) => unimplemented!(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg16) => cx.type_i16(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg32) => cx.type_i32(),\n         InlineAsmRegClass::Nvptx(NvptxInlineAsmRegClass::reg64) => cx.type_i64(),\n@@ -729,6 +731,7 @@ fn modifier_to_gcc(arch: InlineAsmArch, reg: InlineAsmRegClass, modifier: Option\n         InlineAsmRegClass::Bpf(_) => unimplemented!(),\n         InlineAsmRegClass::Hexagon(_) => unimplemented!(),\n         InlineAsmRegClass::Mips(_) => unimplemented!(),\n+        InlineAsmRegClass::Msp430(_) => unimplemented!(),\n         InlineAsmRegClass::Nvptx(_) => unimplemented!(),\n         InlineAsmRegClass::PowerPC(_) => unimplemented!(),\n         InlineAsmRegClass::RiscV(RiscVInlineAsmRegClass::reg)"}]}