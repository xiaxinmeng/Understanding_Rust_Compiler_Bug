{"sha": "366a233dbda597192b5ad027fe79f58331bc1bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NmEyMzNkYmRhNTk3MTkyYjVhZDAyN2ZlNzlmNTgzMzFiYzFiZWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-20T19:15:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-08T17:53:44Z"}, "message": "syntax: Patch up code that was using irrefutable patterns incorrectly", "tree": {"sha": "4eee6d503c174d05616171ed22a96bb424c44aaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eee6d503c174d05616171ed22a96bb424c44aaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/366a233dbda597192b5ad027fe79f58331bc1bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/366a233dbda597192b5ad027fe79f58331bc1bed", "html_url": "https://github.com/rust-lang/rust/commit/366a233dbda597192b5ad027fe79f58331bc1bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/366a233dbda597192b5ad027fe79f58331bc1bed/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9999622e44558a6b138e7d5e3e98ba5db2eb1465", "url": "https://api.github.com/repos/rust-lang/rust/commits/9999622e44558a6b138e7d5e3e98ba5db2eb1465", "html_url": "https://github.com/rust-lang/rust/commit/9999622e44558a6b138e7d5e3e98ba5db2eb1465"}], "stats": {"total": 32, "additions": 20, "deletions": 12}, "files": [{"sha": "d3554d6b27cd4f2236595c5d1f07e3f72766d4cc", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/366a233dbda597192b5ad027fe79f58331bc1bed/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366a233dbda597192b5ad027fe79f58331bc1bed/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=366a233dbda597192b5ad027fe79f58331bc1bed", "patch": "@@ -589,7 +589,7 @@ impl<'self> MethodDef<'self> {\n \n         // transpose raw_fields\n         let fields = match raw_fields {\n-            [self_arg, .. rest] => {\n+            [ref self_arg, .. rest] => {\n                 do self_arg.iter().enumerate().transform |(i, &(opt_id, field))| {\n                     let other_fields = do rest.map |l| {\n                         match &l[i] {\n@@ -738,16 +738,20 @@ impl<'self> MethodDef<'self> {\n \n                     let mut enum_matching_fields = vec::from_elem(self_vec.len(), ~[]);\n \n-                    for matches_so_far.tail().iter().advance |&(_, _, other_fields)| {\n-                        for other_fields.iter().enumerate().advance |(i, &(_, other_field))| {\n-                            enum_matching_fields[i].push(other_field);\n+                    for matches_so_far.tail().iter().advance |triple| {\n+                        match triple {\n+                            &(_, _, ref other_fields) => {\n+                                for other_fields.iter().enumerate().advance |(i, pair)| {\n+                                    enum_matching_fields[i].push(pair.second());\n+                                }\n+                            }\n                         }\n                     }\n                     let field_tuples =\n                         do self_vec.iter()\n                            .zip(enum_matching_fields.iter())\n-                           .transform |(&(id, self_f), &other)| {\n-                        (id, self_f, other)\n+                           .transform |(&(id, self_f), other)| {\n+                        (id, self_f, copy *other)\n                     }.collect();\n                     substructure = EnumMatching(variant_index, variant, field_tuples);\n                 }\n@@ -1015,19 +1019,22 @@ left-to-right (`true`) or right-to-left (`false`).\n pub fn cs_fold(use_foldl: bool,\n                f: &fn(@ExtCtxt, span,\n                       old: @expr,\n-                      self_f: @expr, other_fs: &[@expr]) -> @expr,\n+                      self_f: @expr,\n+                      other_fs: &[@expr]) -> @expr,\n                base: @expr,\n                enum_nonmatch_f: EnumNonMatchFunc,\n                cx: @ExtCtxt, span: span,\n                substructure: &Substructure) -> @expr {\n     match *substructure.fields {\n         EnumMatching(_, _, ref all_fields) | Struct(ref all_fields) => {\n             if use_foldl {\n-                do all_fields.iter().fold(base) |old, &(_, self_f, other_fs)| {\n+                do all_fields.iter().fold(base) |old, triple| {\n+                    let (_, self_f, other_fs) = copy *triple;\n                     f(cx, span, old, self_f, other_fs)\n                 }\n             } else {\n-                do all_fields.rev_iter().fold(base) |old, &(_, self_f, other_fs)| {\n+                do all_fields.rev_iter().fold(base) |old, triple| {\n+                    let (_, self_f, other_fs) = copy *triple;\n                     f(cx, span, old, self_f, other_fs)\n                 }\n             }\n@@ -1059,7 +1066,8 @@ pub fn cs_same_method(f: &fn(@ExtCtxt, span, ~[@expr]) -> @expr,\n     match *substructure.fields {\n         EnumMatching(_, _, ref all_fields) | Struct(ref all_fields) => {\n             // call self_n.method(other_1_n, other_2_n, ...)\n-            let called = do all_fields.map |&(_, self_field, other_fields)| {\n+            let called = do all_fields.map |triple| {\n+                let (_, self_field, other_fields) = copy *triple;\n                 cx.expr_method_call(span,\n                                     self_field,\n                                     substructure.method_ident,"}, {"sha": "75424b60390d733ea33f64799733ed76eaae81db", "filename": "src/libsyntax/ext/pipes/proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/366a233dbda597192b5ad027fe79f58331bc1bed/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366a233dbda597192b5ad027fe79f58331bc1bed/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fproto.rs?ref=366a233dbda597192b5ad027fe79f58331bc1bed", "patch": "@@ -215,8 +215,8 @@ pub fn visit<Tproto, Tstate, Tmessage, V: visitor<Tproto, Tstate, Tmessage>>(\n \n     // the copy keywords prevent recursive use of dvec\n     let states: ~[Tstate] = do (copy proto.states).iter().transform |&s| {\n-        let messages: ~[Tmessage] = do (copy s.messages).iter().transform |&m| {\n-            let message(name, span, tys, this, next) = m;\n+        let messages: ~[Tmessage] = do (copy s.messages).iter().transform |m| {\n+            let message(name, span, tys, this, next) = copy *m;\n             visitor.visit_message(name, span, tys, this, next)\n         }.collect();\n         visitor.visit_state(s, messages)"}]}