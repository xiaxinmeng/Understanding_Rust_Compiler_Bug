{"sha": "76be14b5cadd56e18af721c830c5592621b19cb7", "node_id": "C_kwDOAAsO6NoAKDc2YmUxNGI1Y2FkZDU2ZTE4YWY3MjFjODMwYzU1OTI2MjFiMTljYjc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-07T13:21:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-10T16:34:54Z"}, "message": "Do not consider method call receiver as an argument in AST.", "tree": {"sha": "5f502b06b630890cb78d8e301f8acbd55aecda89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f502b06b630890cb78d8e301f8acbd55aecda89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76be14b5cadd56e18af721c830c5592621b19cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76be14b5cadd56e18af721c830c5592621b19cb7", "html_url": "https://github.com/rust-lang/rust/commit/76be14b5cadd56e18af721c830c5592621b19cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76be14b5cadd56e18af721c830c5592621b19cb7/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af72f7a17f01a2d61490556e32c91c2d98416c9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/af72f7a17f01a2d61490556e32c91c2d98416c9b", "html_url": "https://github.com/rust-lang/rust/commit/af72f7a17f01a2d61490556e32c91c2d98416c9b"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "fcc02eca42987c47c2d3f4393ce31253a81a3677", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76be14b5cadd56e18af721c830c5592621b19cb7/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76be14b5cadd56e18af721c830c5592621b19cb7/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=76be14b5cadd56e18af721c830c5592621b19cb7", "patch": "@@ -145,7 +145,7 @@ impl ChainItemKind {\n \n     fn from_ast(context: &RewriteContext<'_>, expr: &ast::Expr) -> (ChainItemKind, Span) {\n         let (kind, span) = match expr.kind {\n-            ast::ExprKind::MethodCall(ref segment, ref expressions, _) => {\n+            ast::ExprKind::MethodCall(ref segment, ref receiver, ref expressions, _) => {\n                 let types = if let Some(ref generic_args) = segment.args {\n                     if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n                         data.args\n@@ -163,7 +163,7 @@ impl ChainItemKind {\n                 } else {\n                     vec![]\n                 };\n-                let span = mk_sp(expressions[0].span.hi(), expr.span.hi());\n+                let span = mk_sp(receiver.span.hi(), expr.span.hi());\n                 let kind = ChainItemKind::MethodCall(segment.clone(), types, expressions.clone());\n                 (kind, span)\n             }\n@@ -253,7 +253,7 @@ impl ChainItem {\n             format!(\"::<{}>\", type_list.join(\", \"))\n         };\n         let callee_str = format!(\".{}{}\", rewrite_ident(context, method_name), type_str);\n-        rewrite_call(context, &callee_str, &args[1..], span, shape)\n+        rewrite_call(context, &callee_str, &args, span, shape)\n     }\n }\n \n@@ -400,8 +400,8 @@ impl Chain {\n     // is a try! macro, we'll convert it to shorthand when the option is set.\n     fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n         match expr.kind {\n-            ast::ExprKind::MethodCall(_, ref expressions, _) => {\n-                Some(Self::convert_try(&expressions[0], context))\n+            ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n+                Some(Self::convert_try(&receiver, context))\n             }\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)"}]}