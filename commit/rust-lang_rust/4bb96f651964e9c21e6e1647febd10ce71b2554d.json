{"sha": "4bb96f651964e9c21e6e1647febd10ce71b2554d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjk2ZjY1MTk2NGU5YzIxZTZlMTY0N2ZlYmQxMGNlNzFiMjU1NGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-08T12:23:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-08T12:23:34Z"}, "message": "Auto merge of #45575 - michaelwoerister:tweak-inline-trans-items, r=nikomatsakis\n\nOnly instantiate inline- and const-fns if they are referenced (again).\n\nIt seems that we have regressed on not translating `#[inline]` functions unless they are actually used. This should bring back this optimization. I also added a regression test this time so it doesn't happen again accidentally.\n\nFixes #40392.\n\nr? @alexcrichton\n\nUPDATE & PSA\n---------------------\nThis patch **makes translation very lazy** -- in general this is a good thing (we don't want the compiler to do unnecessary work) but it has two consequences:\n1. Some error messages are only generated when an item is actually translated. Consequently, this patch will lead to more cases where the compiler will only start emitting errors when the erroneous function is actually used. This has always been true to some extend (e.g. when passing generic values to an intrinsic) but since this is something user-facing it's worth mentioning.\n2. When writing tests, one has to make sure that the functions in question are actually generated. In other words, it must not be dead code. This can usually  be achieved by either\n    1. making sure the function is exported from the resulting binary or\n    2. by making sure the function is called from something that is exported (or `main()`).\n\nNote that it depends on the crate type what functions are exported:\n   1. For rlibs and dylibs everything that is reachable from the outside is exported.\n   2. For executables, cdylibs, and staticlibs, items are only exported if they are additionally `#[no_mangle]` or have an `#[export_name]`.\n\nThe commits in this PR contain many examples of how tests can be updated to comply to the new requirements.", "tree": {"sha": "571bc19e8fbab3722fc2330d6322ecf1643b406a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/571bc19e8fbab3722fc2330d6322ecf1643b406a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb96f651964e9c21e6e1647febd10ce71b2554d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb96f651964e9c21e6e1647febd10ce71b2554d", "html_url": "https://github.com/rust-lang/rust/commit/4bb96f651964e9c21e6e1647febd10ce71b2554d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb96f651964e9c21e6e1647febd10ce71b2554d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f733f484f80a6dc627cca62c74b750de74f49031", "url": "https://api.github.com/repos/rust-lang/rust/commits/f733f484f80a6dc627cca62c74b750de74f49031", "html_url": "https://github.com/rust-lang/rust/commit/f733f484f80a6dc627cca62c74b750de74f49031"}, {"sha": "081ef8ed750eed57e28dfadb9d0056f6b630f9a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/081ef8ed750eed57e28dfadb9d0056f6b630f9a3", "html_url": "https://github.com/rust-lang/rust/commit/081ef8ed750eed57e28dfadb9d0056f6b630f9a3"}], "stats": {"total": 927, "additions": 520, "deletions": 407}, "files": [{"sha": "c5d36a6bb6a80076dea9d1c492a23fb553f26a9c", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -328,7 +328,12 @@ impl DepGraph {\n     }\n \n     pub fn fingerprint_of(&self, dep_node: &DepNode) -> Fingerprint {\n-        self.fingerprints.borrow()[dep_node]\n+        match self.fingerprints.borrow().get(dep_node) {\n+            Some(&fingerprint) => fingerprint,\n+            None => {\n+                bug!(\"Could not find current fingerprint for {:?}\", dep_node)\n+            }\n+        }\n     }\n \n     pub fn prev_fingerprint_of(&self, dep_node: &DepNode) -> Option<Fingerprint> {"}, {"sha": "429471221c671041c012c72d648c0262a83120a2", "filename": "src/librustc_trans_utils/collector.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc_trans_utils%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc_trans_utils%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcollector.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -211,6 +211,8 @@ use trans_item::{TransItemExt, DefPathBasedNames, InstantiationMode};\n \n use rustc_data_structures::bitvec::BitVector;\n \n+use syntax::attr;\n+\n #[derive(PartialEq, Eq, Hash, Clone, Copy, Debug)]\n pub enum TransItemCollectionMode {\n     Eager,\n@@ -324,9 +326,14 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut roots = Vec::new();\n \n     {\n+        let entry_fn = tcx.sess.entry_fn.borrow().map(|(node_id, _)| {\n+            tcx.hir.local_def_id(node_id)\n+        });\n+\n         let mut visitor = RootCollector {\n             tcx,\n             mode,\n+            entry_fn,\n             output: &mut roots,\n         };\n \n@@ -875,6 +882,7 @@ struct RootCollector<'b, 'a: 'b, 'tcx: 'a + 'b> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mode: TransItemCollectionMode,\n     output: &'b mut Vec<TransItem<'tcx>>,\n+    entry_fn: Option<DefId>,\n }\n \n impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n@@ -932,10 +940,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let tcx = self.tcx;\n                 let def_id = tcx.hir.local_def_id(item.id);\n \n-                if (self.mode == TransItemCollectionMode::Eager ||\n-                    !tcx.is_const_fn(def_id) || tcx.is_exported_symbol(def_id)) &&\n-                   !item_has_type_parameters(tcx, def_id) {\n-\n+                if self.is_root(def_id) {\n                     debug!(\"RootCollector: ItemFn({})\",\n                            def_id_to_string(tcx, def_id));\n \n@@ -957,10 +962,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let tcx = self.tcx;\n                 let def_id = tcx.hir.local_def_id(ii.id);\n \n-                if (self.mode == TransItemCollectionMode::Eager ||\n-                    !tcx.is_const_fn(def_id) ||\n-                    tcx.is_exported_symbol(def_id)) &&\n-                   !item_has_type_parameters(tcx, def_id) {\n+                if self.is_root(def_id) {\n                     debug!(\"RootCollector: MethodImplItem({})\",\n                            def_id_to_string(tcx, def_id));\n \n@@ -973,6 +975,22 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n     }\n }\n \n+impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n+    fn is_root(&self, def_id: DefId) -> bool {\n+        !item_has_type_parameters(self.tcx, def_id) && match self.mode {\n+            TransItemCollectionMode::Eager => {\n+                true\n+            }\n+            TransItemCollectionMode::Lazy => {\n+                self.entry_fn == Some(def_id) ||\n+                self.tcx.is_exported_symbol(def_id) ||\n+                attr::contains_name(&self.tcx.get_attrs(def_id),\n+                                    \"rustc_std_internal_symbol\")\n+            }\n+        }\n+    }\n+}\n+\n fn item_has_type_parameters<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n     let generics = tcx.generics_of(def_id);\n     generics.parent_types as usize + generics.types.len() > 0"}, {"sha": "47968afd70d97112675ff0380155c434cef7e5e5", "filename": "src/librustc_trans_utils/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc_trans_utils%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc_trans_utils%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fcommon.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -51,7 +51,8 @@ pub fn requests_inline<'a, 'tcx>(\n         // available to normal end-users.\n         return true\n     }\n-    attr::requests_inline(&instance.def.attrs(tcx)[..])\n+    attr::requests_inline(&instance.def.attrs(tcx)[..]) ||\n+        tcx.is_const_fn(instance.def.def_id())\n }\n \n pub fn is_inline_instance<'a, 'tcx>("}, {"sha": "d6f8707b8747a834caf890745b038ae58f96dbba", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -40,14 +40,12 @@ extern crate rustc_data_structures;\n extern crate syntax;\n extern crate syntax_pos;\n \n-use rustc::ty::TyCtxt;\n+use rustc::ty::{TyCtxt, Instance};\n use rustc::hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::hir::map as hir_map;\n use rustc::util::nodemap::NodeSet;\n \n-use syntax::attr;\n-\n pub mod common;\n pub mod link;\n pub mod collector;\n@@ -77,7 +75,7 @@ pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n ///\n /// This list is later used by linkers to determine the set of symbols needed to\n /// be exposed from a dynamic library and it's also encoded into the metadata.\n-pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n+pub fn find_exported_symbols<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> NodeSet {\n     tcx.reachable_set(LOCAL_CRATE).0.iter().cloned().filter(|&id| {\n         // Next, we want to ignore some FFI functions that are not exposed from\n         // this crate. Reachable FFI functions can be lumped into two\n@@ -107,11 +105,10 @@ pub fn find_exported_symbols(tcx: TyCtxt) -> NodeSet {\n                 node: hir::ImplItemKind::Method(..), .. }) => {\n                 let def_id = tcx.hir.local_def_id(id);\n                 let generics = tcx.generics_of(def_id);\n-                let attributes = tcx.get_attrs(def_id);\n                 (generics.parent_types == 0 && generics.types.is_empty()) &&\n                 // Functions marked with #[inline] are only ever translated\n                 // with \"internal\" linkage and are never exported.\n-                !attr::requests_inline(&attributes)\n+                !common::requests_inline(tcx, &Instance::mono(tcx, def_id))\n             }\n \n             _ => false"}, {"sha": "59b25d8beca02ebbaff43d28ad246291ed8eb87a", "filename": "src/test/codegen-units/item-collection/unreferenced-const-fn.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-const-fn.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags:-Zprint-trans-items=lazy\n+\n+// NB: We do not expect *any* translation item to be generated here.\n+\n+#![feature(const_fn)]\n+#![deny(dead_code)]\n+#![crate_type = \"rlib\"]\n+\n+pub const fn foo(x: u32) -> u32 {\n+    x + 0xf00\n+}"}, {"sha": "75d41a38012cdedfde7256fa97aa62d8b7ec3faf", "filename": "src/test/codegen-units/item-collection/unreferenced-inline-function.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fitem-collection%2Funreferenced-inline-function.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// compile-flags:-Zprint-trans-items=lazy\n+\n+// NB: We do not expect *any* translation item to be generated here.\n+\n+#![deny(dead_code)]\n+#![crate_type = \"rlib\"]\n+\n+#[inline]\n+pub fn foo() -> bool {\n+    [1, 2] == [3, 4]\n+}\n+"}, {"sha": "da96c5e183d79361a9c85938391b87ba00be6de7", "filename": "src/test/codegen-units/partitioning/extern-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fextern-drop-glue.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -16,7 +16,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n-#![crate_type=\"lib\"]\n+#![crate_type=\"rlib\"]\n \n // aux-build:cgu_extern_drop_glue.rs\n extern crate cgu_extern_drop_glue;\n@@ -25,20 +25,20 @@ extern crate cgu_extern_drop_glue;\n \n struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n-//~ TRANS_ITEM fn extern_drop_glue::user[0] @@ extern_drop_glue[Internal]\n-fn user()\n+//~ TRANS_ITEM fn extern_drop_glue::user[0] @@ extern_drop_glue[External]\n+pub fn user()\n {\n     //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::LocalStruct[0]> @@ extern_drop_glue[Internal]\n     let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));\n }\n \n-mod mod1 {\n+pub mod mod1 {\n     use cgu_extern_drop_glue;\n \n     struct LocalStruct(cgu_extern_drop_glue::Struct);\n \n-    //~ TRANS_ITEM fn extern_drop_glue::mod1[0]::user[0] @@ extern_drop_glue-mod1[Internal]\n-    fn user()\n+    //~ TRANS_ITEM fn extern_drop_glue::mod1[0]::user[0] @@ extern_drop_glue-mod1[External]\n+    pub fn user()\n     {\n         //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<extern_drop_glue::mod1[0]::LocalStruct[0]> @@ extern_drop_glue-mod1[Internal]\n         let _ = LocalStruct(cgu_extern_drop_glue::Struct(0));"}, {"sha": "01600c03ba2cd1af648ba940c07fa043934720c2", "filename": "src/test/codegen-units/partitioning/inlining-from-extern-crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Finlining-from-extern-crate.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -35,10 +35,10 @@ pub fn user()\n     cgu_explicit_inlining::never_inlined();\n }\n \n-mod mod1 {\n+pub mod mod1 {\n     use cgu_explicit_inlining;\n \n-    //~ TRANS_ITEM fn inlining_from_extern_crate::mod1[0]::user[0] @@ inlining_from_extern_crate-mod1[Internal]\n+    //~ TRANS_ITEM fn inlining_from_extern_crate::mod1[0]::user[0] @@ inlining_from_extern_crate-mod1[External]\n     pub fn user()\n     {\n         cgu_explicit_inlining::inlined();\n@@ -48,10 +48,10 @@ mod mod1 {\n     }\n }\n \n-mod mod2 {\n+pub mod mod2 {\n     use cgu_explicit_inlining;\n \n-    //~ TRANS_ITEM fn inlining_from_extern_crate::mod2[0]::user[0] @@ inlining_from_extern_crate-mod2[Internal]\n+    //~ TRANS_ITEM fn inlining_from_extern_crate::mod2[0]::user[0] @@ inlining_from_extern_crate-mod2[External]\n     pub fn user()\n     {\n         cgu_explicit_inlining::always_inlined();"}, {"sha": "f7c05285ed63c7823e0c40ae2f965c2e5beb38db", "filename": "src/test/codegen-units/partitioning/local-drop-glue.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-drop-glue.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -15,7 +15,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n-#![crate_type=\"lib\"]\n+#![crate_type=\"rlib\"]\n \n //~ TRANS_ITEM fn core::ptr[0]::drop_in_place[0]<local_drop_glue::Struct[0]> @@ local_drop_glue[Internal] local_drop_glue-mod1[Internal]\n struct Struct {\n@@ -32,8 +32,8 @@ struct Outer {\n     _a: Struct\n }\n \n-//~ TRANS_ITEM fn local_drop_glue::user[0] @@ local_drop_glue[Internal]\n-fn user()\n+//~ TRANS_ITEM fn local_drop_glue::user[0] @@ local_drop_glue[External]\n+pub fn user()\n {\n     let _ = Outer {\n         _a: Struct {\n@@ -42,7 +42,7 @@ fn user()\n     };\n }\n \n-mod mod1\n+pub mod mod1\n {\n     use super::Struct;\n \n@@ -53,8 +53,8 @@ mod mod1\n         _b: (u32, Struct),\n     }\n \n-    //~ TRANS_ITEM fn local_drop_glue::mod1[0]::user[0] @@ local_drop_glue-mod1[Internal]\n-    fn user()\n+    //~ TRANS_ITEM fn local_drop_glue::mod1[0]::user[0] @@ local_drop_glue-mod1[External]\n+    pub fn user()\n     {\n         let _ = Struct2 {\n             _a: Struct { _a: 0 },"}, {"sha": "cf197301eec16e151d7bd36fe9e7e5d2217e71fe", "filename": "src/test/codegen-units/partitioning/local-inlining-but-not-all.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining-but-not-all.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -27,28 +27,28 @@ mod inline {\n     }\n }\n \n-mod user1 {\n+pub mod user1 {\n     use super::inline;\n \n-    //~ TRANS_ITEM fn local_inlining_but_not_all::user1[0]::foo[0] @@ local_inlining_but_not_all-user1[Internal]\n-    fn foo() {\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::user1[0]::foo[0] @@ local_inlining_but_not_all-user1[External]\n+    pub fn foo() {\n         inline::inlined_function();\n     }\n }\n \n-mod user2 {\n+pub mod user2 {\n     use super::inline;\n \n-    //~ TRANS_ITEM fn local_inlining_but_not_all::user2[0]::bar[0] @@ local_inlining_but_not_all-user2[Internal]\n-    fn bar() {\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::user2[0]::bar[0] @@ local_inlining_but_not_all-user2[External]\n+    pub fn bar() {\n         inline::inlined_function();\n     }\n }\n \n-mod non_user {\n+pub mod non_user {\n \n-    //~ TRANS_ITEM fn local_inlining_but_not_all::non_user[0]::baz[0] @@ local_inlining_but_not_all-non_user[Internal]\n-    fn baz() {\n+    //~ TRANS_ITEM fn local_inlining_but_not_all::non_user[0]::baz[0] @@ local_inlining_but_not_all-non_user[External]\n+    pub fn baz() {\n \n     }\n }"}, {"sha": "3502aa59fdccc48a20f59e062be8b246738e5af2", "filename": "src/test/codegen-units/partitioning/local-inlining.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-inlining.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -28,28 +28,28 @@ mod inline {\n     }\n }\n \n-mod user1 {\n+pub mod user1 {\n     use super::inline;\n \n-    //~ TRANS_ITEM fn local_inlining::user1[0]::foo[0] @@ local_inlining-user1[Internal]\n-    fn foo() {\n+    //~ TRANS_ITEM fn local_inlining::user1[0]::foo[0] @@ local_inlining-user1[External]\n+    pub fn foo() {\n         inline::inlined_function();\n     }\n }\n \n-mod user2 {\n+pub mod user2 {\n     use super::inline;\n \n-    //~ TRANS_ITEM fn local_inlining::user2[0]::bar[0] @@ local_inlining-user2[Internal]\n-    fn bar() {\n+    //~ TRANS_ITEM fn local_inlining::user2[0]::bar[0] @@ local_inlining-user2[External]\n+    pub fn bar() {\n         inline::inlined_function();\n     }\n }\n \n-mod non_user {\n+pub mod non_user {\n \n-    //~ TRANS_ITEM fn local_inlining::non_user[0]::baz[0] @@ local_inlining-non_user[Internal]\n-    fn baz() {\n+    //~ TRANS_ITEM fn local_inlining::non_user[0]::baz[0] @@ local_inlining-non_user[External]\n+    pub fn baz() {\n \n     }\n }"}, {"sha": "ed883954f3f40e35a5173ea6c0f14e11d52e6ac0", "filename": "src/test/codegen-units/partitioning/local-transitive-inlining.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Flocal-transitive-inlining.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -15,7 +15,7 @@\n // compile-flags:-Zinline-in-all-cgus\n \n #![allow(dead_code)]\n-#![crate_type=\"lib\"]\n+#![crate_type=\"rlib\"]\n \n mod inline {\n \n@@ -37,19 +37,19 @@ mod direct_user {\n     }\n }\n \n-mod indirect_user {\n+pub mod indirect_user {\n     use super::direct_user;\n \n-    //~ TRANS_ITEM fn local_transitive_inlining::indirect_user[0]::bar[0] @@ local_transitive_inlining-indirect_user[Internal]\n-    fn bar() {\n+    //~ TRANS_ITEM fn local_transitive_inlining::indirect_user[0]::bar[0] @@ local_transitive_inlining-indirect_user[External]\n+    pub fn bar() {\n         direct_user::foo();\n     }\n }\n \n-mod non_user {\n+pub mod non_user {\n \n-    //~ TRANS_ITEM fn local_transitive_inlining::non_user[0]::baz[0] @@ local_transitive_inlining-non_user[Internal]\n-    fn baz() {\n+    //~ TRANS_ITEM fn local_transitive_inlining::non_user[0]::baz[0] @@ local_transitive_inlining-non_user[External]\n+    pub fn baz() {\n \n     }\n }"}, {"sha": "12ef34441ff394c023837fb0c0a68c1ffa143d13", "filename": "src/test/codegen-units/partitioning/statics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen-units%2Fpartitioning%2Fstatics.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -13,32 +13,32 @@\n // incremental compilation\n // compile-flags:-Zprint-trans-items=lazy -Zincremental=tmp/partitioning-tests/statics\n \n-#![crate_type=\"lib\"]\n+#![crate_type=\"rlib\"]\n \n //~ TRANS_ITEM static statics::FOO[0] @@ statics[Internal]\n static FOO: u32 = 0;\n \n //~ TRANS_ITEM static statics::BAR[0] @@ statics[Internal]\n static BAR: u32 = 0;\n \n-//~ TRANS_ITEM fn statics::function[0] @@ statics[Internal]\n-fn function() {\n+//~ TRANS_ITEM fn statics::function[0] @@ statics[External]\n+pub fn function() {\n     //~ TRANS_ITEM static statics::function[0]::FOO[0] @@ statics[Internal]\n     static FOO: u32 = 0;\n \n     //~ TRANS_ITEM static statics::function[0]::BAR[0] @@ statics[Internal]\n     static BAR: u32 = 0;\n }\n \n-mod mod1 {\n+pub mod mod1 {\n     //~ TRANS_ITEM static statics::mod1[0]::FOO[0] @@ statics-mod1[Internal]\n     static FOO: u32 = 0;\n \n     //~ TRANS_ITEM static statics::mod1[0]::BAR[0] @@ statics-mod1[Internal]\n     static BAR: u32 = 0;\n \n-    //~ TRANS_ITEM fn statics::mod1[0]::function[0] @@ statics-mod1[Internal]\n-    fn function() {\n+    //~ TRANS_ITEM fn statics::mod1[0]::function[0] @@ statics-mod1[External]\n+    pub fn function() {\n         //~ TRANS_ITEM static statics::mod1[0]::function[0]::FOO[0] @@ statics-mod1[Internal]\n         static FOO: u32 = 0;\n "}, {"sha": "342a4f0d085c40c7bec87df2ce769ba709d050de", "filename": "src/test/codegen/adjustments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Fadjustments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Fadjustments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fadjustments.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -15,7 +15,7 @@\n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]] %arg0)\n #[no_mangle]\n-fn helper(_: usize) {\n+pub fn helper(_: usize) {\n }\n \n // CHECK-LABEL: @no_op_slice_adjustment"}, {"sha": "346c5da8d1b8dcc0ba55eca4ddd3ff4dc4ffe123", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -59,28 +59,28 @@\n \n #![crate_type = \"lib\"]\n \n-mod tests {\n+pub mod tests {\n     // CHECK: @f1(i32 inreg %arg0, i32 inreg %arg1, i32 %arg2)\n     #[no_mangle]\n-    extern \"fastcall\" fn f1(_: i32, _: i32, _: i32) {}\n+    pub extern \"fastcall\" fn f1(_: i32, _: i32, _: i32) {}\n \n     // CHECK: @f2(i32* inreg %arg0, i32* inreg %arg1, i32* %arg2)\n     #[no_mangle]\n-    extern \"fastcall\" fn f2(_: *const i32, _: *const i32, _: *const i32) {}\n+    pub extern \"fastcall\" fn f2(_: *const i32, _: *const i32, _: *const i32) {}\n \n     // CHECK: @f3(float %arg0, i32 inreg %arg1, i32 inreg %arg2, i32 %arg3)\n     #[no_mangle]\n-    extern \"fastcall\" fn f3(_: f32, _: i32, _: i32, _: i32) {}\n+    pub extern \"fastcall\" fn f3(_: f32, _: i32, _: i32, _: i32) {}\n \n     // CHECK: @f4(i32 inreg %arg0, float %arg1, i32 inreg %arg2, i32 %arg3)\n     #[no_mangle]\n-    extern \"fastcall\" fn f4(_: i32, _: f32, _: i32, _: i32) {}\n+    pub extern \"fastcall\" fn f4(_: i32, _: f32, _: i32, _: i32) {}\n \n     // CHECK: @f5(i64 %arg0, i32 %arg1)\n     #[no_mangle]\n-    extern \"fastcall\" fn f5(_: i64, _: i32) {}\n+    pub extern \"fastcall\" fn f5(_: i64, _: i32) {}\n \n     // CHECK: @f6(i1 inreg zeroext %arg0, i32 inreg %arg1, i32 %arg2)\n     #[no_mangle]\n-    extern \"fastcall\" fn f6(_: bool, _: i32, _: i32) {}\n+    pub extern \"fastcall\" fn f6(_: bool, _: i32, _: i32) {}\n }"}, {"sha": "29e2840c8817e9011f8ccad2e832f0ab6a9737c4", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -93,20 +93,20 @@ pub fn struct_return() -> S {\n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]] %arg0)\n #[no_mangle]\n-fn helper(_: usize) {\n+pub fn helper(_: usize) {\n }\n \n // CHECK: @slice(i8* noalias nonnull readonly %arg0.ptr, [[USIZE]] %arg0.meta)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n-fn slice(_: &[u8]) {\n+pub fn slice(_: &[u8]) {\n }\n \n // CHECK: @mutable_slice(i8* nonnull %arg0.ptr, [[USIZE]] %arg0.meta)\n // FIXME #25759 This should also have `nocapture`\n // ... there's this LLVM bug that forces us to not use noalias, see #29485\n #[no_mangle]\n-fn mutable_slice(_: &mut [u8]) {\n+pub fn mutable_slice(_: &mut [u8]) {\n }\n \n // CHECK: @unsafe_slice(%UnsafeInner* nonnull %arg0.ptr, [[USIZE]] %arg0.meta)\n@@ -118,23 +118,23 @@ pub fn unsafe_slice(_: &[UnsafeInner]) {\n // CHECK: @str(i8* noalias nonnull readonly %arg0.ptr, [[USIZE]] %arg0.meta)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n-fn str(_: &[u8]) {\n+pub fn str(_: &[u8]) {\n }\n \n // CHECK: @trait_borrow({}* nonnull, {}* noalias nonnull readonly)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n-fn trait_borrow(_: &Drop) {\n+pub fn trait_borrow(_: &Drop) {\n }\n \n // CHECK: @trait_box({}* noalias nonnull, {}* noalias nonnull readonly)\n #[no_mangle]\n-fn trait_box(_: Box<Drop>) {\n+pub fn trait_box(_: Box<Drop>) {\n }\n \n // CHECK: { i16*, [[USIZE]] } @return_slice(i16* noalias nonnull readonly %x.ptr, [[USIZE]] %x.meta)\n #[no_mangle]\n-fn return_slice(x: &[u16]) -> &[u16] {\n+pub fn return_slice(x: &[u16]) -> &[u16] {\n   x\n }\n "}, {"sha": "884cf59c1c192b02a1a5bce2efd6219daddc033c", "filename": "src/test/codegen/mir_zst_stores.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Fmir_zst_stores.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Fmir_zst_stores.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmir_zst_stores.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -19,7 +19,7 @@ struct Zst { phantom: PhantomData<Zst> }\n // CHECK-LABEL: @mir\n // CHECK-NOT: store{{.*}}undef\n #[no_mangle]\n-fn mir() {\n+pub fn mir() {\n     let x = Zst { phantom: PhantomData };\n     let y = (x, 0);\n     drop(y);"}, {"sha": "aab5f1bfb4f863825d67206ef1efd378688bbe0b", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -16,40 +16,40 @@\n #![feature(naked_functions)]\n \n // CHECK: Function Attrs: naked uwtable\n-// CHECK-NEXT: define internal void @naked_empty()\n+// CHECK-NEXT: define void @naked_empty()\n #[no_mangle]\n #[naked]\n-fn naked_empty() {\n+pub fn naked_empty() {\n     // CHECK-NEXT: {{.+}}:\n     // CHECK-NEXT: ret void\n }\n \n // CHECK: Function Attrs: naked uwtable\n #[no_mangle]\n #[naked]\n-// CHECK-NEXT: define internal void @naked_with_args(i{{[0-9]+}})\n-fn naked_with_args(a: isize) {\n+// CHECK-NEXT: define void @naked_with_args(i{{[0-9]+}})\n+pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n     // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret void\n }\n \n // CHECK: Function Attrs: naked uwtable\n-// CHECK-NEXT: define internal i{{[0-9]+}} @naked_with_return()\n+// CHECK-NEXT: define i{{[0-9]+}} @naked_with_return()\n #[no_mangle]\n #[naked]\n-fn naked_with_return() -> isize {\n+pub fn naked_with_return() -> isize {\n     // CHECK-NEXT: {{.+}}:\n     // CHECK-NEXT: ret i{{[0-9]+}} 0\n     0\n }\n \n // CHECK: Function Attrs: naked uwtable\n-// CHECK-NEXT: define internal i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}})\n+// CHECK-NEXT: define i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}})\n #[no_mangle]\n #[naked]\n-fn naked_with_args_and_return(a: isize) -> isize {\n+pub fn naked_with_args_and_return(a: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n     // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n@@ -58,10 +58,10 @@ fn naked_with_args_and_return(a: isize) -> isize {\n }\n \n // CHECK: Function Attrs: naked uwtable\n-// CHECK-NEXT: define internal void @naked_recursive()\n+// CHECK-NEXT: define void @naked_recursive()\n #[no_mangle]\n #[naked]\n-fn naked_recursive() {\n+pub fn naked_recursive() {\n     // CHECK-NEXT: {{.+}}:\n     // CHECK-NEXT: call void @naked_empty()\n "}, {"sha": "4b713e28b05253d2cc3527756ff3154761135c20", "filename": "src/test/codegen/refs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -15,7 +15,7 @@\n // Hack to get the correct size for the length part in slices\n // CHECK: @helper([[USIZE:i[0-9]+]] %arg0)\n #[no_mangle]\n-fn helper(_: usize) {\n+pub fn helper(_: usize) {\n }\n \n // CHECK-LABEL: @ref_dst"}, {"sha": "fc465b268691eff7b7b8ee3af06b00f068cee75c", "filename": "src/test/compile-fail/E0534.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2FE0534.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2FE0534.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0534.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -11,4 +11,6 @@\n #[inline()] //~ ERROR E0534\n pub fn something() {}\n \n-fn main() {}\n+fn main() {\n+    something();\n+}"}, {"sha": "2fe94d43acdd1867b9ef7ec40d64911261c0b134", "filename": "src/test/compile-fail/bad-intrinsic-monomorphization.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-intrinsic-monomorphization.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(repr_simd, platform_intrinsics, core_intrinsics)]\n #![allow(warnings)]\n+#![crate_type = \"rlib\"]\n \n // Bad monomorphizations could previously cause LLVM asserts even though the\n // error was caught in the compiler.\n@@ -21,21 +22,19 @@ extern \"platform-intrinsic\" {\n use std::intrinsics;\n \n #[derive(Copy, Clone)]\n-struct Foo(i64);\n+pub struct Foo(i64);\n \n-unsafe fn test_cttz(v: Foo) -> Foo {\n+pub unsafe fn test_cttz(v: Foo) -> Foo {\n     intrinsics::cttz(v)\n     //~^ ERROR `cttz` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_fadd_fast(a: Foo, b: Foo) -> Foo {\n+pub unsafe fn test_fadd_fast(a: Foo, b: Foo) -> Foo {\n     intrinsics::fadd_fast(a, b)\n     //~^ ERROR `fadd_fast` intrinsic: expected basic float type, found `Foo`\n }\n \n-unsafe fn test_simd_add(a: Foo, b: Foo) -> Foo {\n+pub unsafe fn test_simd_add(a: Foo, b: Foo) -> Foo {\n     simd_add(a, b)\n     //~^ ERROR `simd_add` intrinsic: expected SIMD input type, found non-SIMD `Foo`\n }\n-\n-fn main() {}"}, {"sha": "1f19bd2f249b3f803acc102724dd557340270c96", "filename": "src/test/compile-fail/dupe-symbols-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-2.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -11,13 +11,13 @@\n #![crate_type=\"rlib\"]\n #![allow(warnings)]\n \n-mod a {\n+pub mod a {\n     #[no_mangle]\n     pub extern fn fail() {\n     }\n }\n \n-mod b {\n+pub mod b {\n     #[no_mangle]\n     pub extern fn fail() {\n     //~^ symbol `fail` is already defined"}, {"sha": "93b985b4fb063d9d27d9a422c1fbf0370461476f", "filename": "src/test/compile-fail/invalid-inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-inline.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -21,4 +21,8 @@ fn b() {\n fn c() {\n }\n \n-fn main() {}\n+fn main() {\n+    a();\n+    b();\n+    c();\n+}"}, {"sha": "53b0d9f4e9f0ceda022d7453d727e7c2e1459e2a", "filename": "src/test/compile-fail/issue-22638.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-22638.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -12,6 +12,7 @@\n \n #![recursion_limit = \"20\"]\n #![type_length_limit = \"20000000\"]\n+#![crate_type = \"rlib\"]\n \n #[derive(Clone)]\n struct A (B);\n@@ -66,5 +67,3 @@ impl D {\n pub fn matches() {\n     A(B::Variant1).matches(&(|| ()))\n }\n-\n-fn main() {}"}, {"sha": "a51a9e518ce5fe7e0d7aac6fd9f6b9b7922ac72f", "filename": "src/test/compile-fail/non-interger-atomic.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -10,92 +10,91 @@\n \n #![feature(core_intrinsics)]\n #![allow(warnings)]\n+#![crate_type = \"rlib\"]\n \n use std::intrinsics;\n \n #[derive(Copy, Clone)]\n-struct Foo(i64);\n-type Bar = &'static Fn();\n-type Quux = [u8; 100];\n+pub struct Foo(i64);\n+pub type Bar = &'static Fn();\n+pub type Quux = [u8; 100];\n \n-unsafe fn test_bool_load(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_load(p: &mut bool, v: bool) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_bool_store(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_store(p: &mut bool, v: bool) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_bool_xchg(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_xchg(p: &mut bool, v: bool) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_bool_cxchg(p: &mut bool, v: bool) {\n+pub unsafe fn test_bool_cxchg(p: &mut bool, v: bool) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `bool`\n }\n \n-unsafe fn test_Foo_load(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_load(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Foo_store(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_store(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Foo_xchg(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_xchg(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n+pub unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `Foo`\n }\n \n-unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n+pub unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n }\n \n-unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_load(p);\n     //~^ ERROR `atomic_load` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-unsafe fn test_Quux_store(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_store(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_store(p, v);\n     //~^ ERROR `atomic_store` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-unsafe fn test_Quux_xchg(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_xchg(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_xchg(p, v);\n     //~^ ERROR `atomic_xchg` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n \n-unsafe fn test_Quux_cxchg(p: &mut Quux, v: Quux) {\n+pub unsafe fn test_Quux_cxchg(p: &mut Quux, v: Quux) {\n     intrinsics::atomic_cxchg(p, v, v);\n     //~^ ERROR `atomic_cxchg` intrinsic: expected basic integer type, found `[u8; 100]`\n }\n-\n-fn main() {}"}, {"sha": "067ce51d0f7854bb8be86324a59fe6038e74750d", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/struct_point.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -12,73 +12,72 @@\n // crate. This should not cause anything we use to be invalidated.\n // Regression test for #36168.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_free_fn\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_free_fn\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n \n extern crate point;\n \n /// A fn item that calls (public) methods on `Point` from the same impl\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_free_fn {\n+pub mod fn_calls_free_fn {\n     use point::{self, Point};\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         point::distance_squared(&x);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "b1c566e1739ef8a355aedf5865944f8607d6aa34", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "modified", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -13,32 +13,34 @@\n // Fns with that type used only in their body are also recompiled, but\n // their callers are not.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n // These are expected to require translation.\n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_sig\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-call_fn_with_type_in_sig\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_body\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-\n-#![rustc_partition_reused(module=\"struct_point-call_fn_with_type_in_body\", cfg=\"rpass2\")]\n-\n-mod point {\n-    #[cfg(rpass1)]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_sig\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-call_fn_with_type_in_sig\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_with_type_in_body\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+\n+#![rustc_partition_reused(module=\"struct_point-call_fn_with_type_in_body\", cfg=\"cfail2\")]\n+\n+pub mod point {\n+    #[cfg(cfail1)]\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n-    #[cfg(rpass2)]\n+    #[cfg(cfail2)]\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n@@ -47,18 +49,18 @@ mod point {\n \n     impl Point {\n         pub fn origin() -> Point {\n-            #[cfg(rpass1)]\n+            #[cfg(cfail1)]\n             return Point { x: 0.0, y: 0.0 };\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return Point { x: 0.0, y: 0.0, z: 0.0 };\n         }\n \n         pub fn total(&self) -> f32 {\n-            #[cfg(rpass1)]\n+            #[cfg(cfail1)]\n             return self.x + self.y;\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return self.x + self.y + self.z;\n         }\n \n@@ -75,10 +77,10 @@ mod point {\n /// sufficiently \"private\", we might not need to type-check again.\n /// Rebuilding is probably always necessary since the layout may be\n /// affected.\n-mod fn_with_type_in_sig {\n+pub mod fn_with_type_in_sig {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn boop(p: Option<&Point>) -> f32 {\n         p.map(|p| p.total()).unwrap_or(0.0)\n     }\n@@ -91,10 +93,10 @@ mod fn_with_type_in_sig {\n /// sufficiently \"private\", we might not need to type-check again.\n /// Rebuilding is probably always necessary since the layout may be\n /// affected.\n-mod call_fn_with_type_in_sig {\n+pub mod call_fn_with_type_in_sig {\n     use fn_with_type_in_sig;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_sig::boop(None)\n     }\n@@ -107,10 +109,10 @@ mod call_fn_with_type_in_sig {\n /// sufficiently \"private\", we might not need to type-check again.\n /// Rebuilding is probably always necessary since the layout may be\n /// affected.\n-mod fn_with_type_in_body {\n+pub mod fn_with_type_in_body {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn boop() -> f32 {\n         Point::origin().total()\n     }\n@@ -120,44 +122,41 @@ mod fn_with_type_in_body {\n /// body. In this case, the effects of the change should be contained\n /// to Y; X should not have to be rebuilt, nor should it need to be\n /// typechecked again.\n-mod call_fn_with_type_in_body {\n+pub mod call_fn_with_type_in_body {\n     use fn_with_type_in_body;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn bip() -> f32 {\n         fn_with_type_in_body::boop()\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin(p: Point) -> Point {\n         Point { ..p }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "d8251a4fbcf6c905031f058409a8403fd8147c92", "filename": "src/test/incremental/change_private_fn/struct_point.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -11,32 +11,34 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     fn distance_squared(this: &Point) -> f32 {\n-        #[cfg(rpass1)]\n+        #[cfg(cfail1)]\n         return this.x + this.y;\n \n-        #[cfg(rpass2)]\n+        #[cfg(cfail2)]\n         return this.x * this.x + this.y * this.y;\n     }\n \n@@ -56,56 +58,53 @@ mod point {\n }\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "af20336806fd432a3e652193256bd775237641ef", "filename": "src/test/incremental/change_private_fn_cc/auxiliary/point.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fauxiliary%2Fpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fauxiliary%2Fpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fauxiliary%2Fpoint.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -14,10 +14,10 @@ pub struct Point {\n }\n \n fn distance_squared(this: &Point) -> f32 {\n-    #[cfg(rpass1)]\n+    #[cfg(cfail1)]\n     return this.x + this.y;\n \n-    #[cfg(rpass2)]\n+    #[cfg(cfail2)]\n     return this.x * this.x + this.y * this.y;\n }\n "}, {"sha": "b3816b90194e45dd23f6b5248e4aaaefd0554237", "filename": "src/test/incremental/change_private_fn_cc/struct_point.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_fn_cc%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -11,73 +11,72 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n \n extern crate point;\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "c18f95a631205da605c9dd10821b52f982669672", "filename": "src/test/incremental/change_private_impl_method/struct_point.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -11,33 +11,35 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n+#![crate_type = \"rlib\"]\n \n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     impl Point {\n-        fn distance_squared(&self) -> f32 {\n-            #[cfg(rpass1)]\n+        pub fn distance_squared(&self) -> f32 {\n+            #[cfg(cfail1)]\n             return self.x + self.y;\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return self.x * self.x + self.y * self.y;\n         }\n \n@@ -56,56 +58,53 @@ mod point {\n }\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "f5e3a06051cc95b29b3952b7d748f75b89c5555a", "filename": "src/test/incremental/change_private_impl_method_cc/auxiliary/point.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fauxiliary%2Fpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fauxiliary%2Fpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fauxiliary%2Fpoint.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -15,10 +15,10 @@ pub struct Point {\n \n impl Point {\n     fn distance_squared(&self) -> f32 {\n-        #[cfg(rpass1)]\n+        #[cfg(cfail1)]\n         return self.x + self.y;\n \n-        #[cfg(rpass2)]\n+        #[cfg(cfail2)]\n         return self.x * self.x + self.y * self.y;\n     }\n "}, {"sha": "55e1dffe9da41e28ee421b4011cdf94dffc3a3ae", "filename": "src/test/incremental/change_private_impl_method_cc/struct_point.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_private_impl_method_cc%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -11,74 +11,73 @@\n // Test where we change the body of a private method in an impl.\n // We then test what sort of functions must be rebuilt as a result.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n // aux-build:point.rs\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_another_impl\", cfg=\"cfail2\")]\n \n extern crate point;\n \n /// A fn item that calls (public) methods on `Point` from the same impl which changed\n-mod fn_calls_methods_in_same_impl {\n+pub mod fn_calls_methods_in_same_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let x = Point { x: 2.0, y: 2.0 };\n         x.distance_from_origin();\n     }\n }\n \n /// A fn item that calls (public) methods on `Point` from another impl\n-mod fn_calls_methods_in_another_impl {\n+pub mod fn_calls_methods_in_another_impl {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn dirty() {\n         let mut x = Point { x: 2.0, y: 2.0 };\n         x.translate(3.0, 3.0);\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "2cb7ef13f8e526bf281300bc588f554f1756b489", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -10,33 +10,35 @@\n \n // Test where we change the body of a public, inherent method.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_changed_method\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     impl Point {\n         pub fn distance_from_origin(&self) -> f32 {\n-            #[cfg(rpass1)]\n+            #[cfg(cfail1)]\n             return self.x * self.x + self.y * self.y;\n \n-            #[cfg(rpass2)]\n+            #[cfg(cfail2)]\n             return (self.x * self.x + self.y * self.y).sqrt();\n         }\n \n@@ -47,56 +49,53 @@ mod point {\n }\n \n /// A fn item that calls the method on `Point` which changed\n-mod fn_calls_changed_method {\n+pub mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_origin();\n     }\n }\n \n /// A fn item that calls a method on `Point` which did not change\n-mod fn_calls_another_method {\n+pub mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "f2485a876cc60a4db3b017ab40b53a56241f3acc", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -10,38 +10,40 @@\n \n // Test where we change the *signature* of a public, inherent method.\n \n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n+#![crate_type = \"rlib\"]\n #![feature(rustc_attrs)]\n #![feature(stmt_expr_attributes)]\n #![allow(dead_code)]\n \n // These are expected to require translation.\n-#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"rpass2\")]\n-#![rustc_partition_translated(module=\"struct_point-fn_calls_changed_method\", cfg=\"rpass2\")]\n+#![rustc_partition_translated(module=\"struct_point-point\", cfg=\"cfail2\")]\n+#![rustc_partition_translated(module=\"struct_point-fn_calls_changed_method\", cfg=\"cfail2\")]\n \n-#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n-#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_another_method\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"cfail2\")]\n \n-mod point {\n+pub mod point {\n     pub struct Point {\n         pub x: f32,\n         pub y: f32,\n     }\n \n     impl Point {\n-        #[cfg(rpass1)]\n+        #[cfg(cfail1)]\n         pub fn distance_from_point(&self, p: Option<Point>) -> f32 {\n             let p = p.unwrap_or(Point { x: 0.0, y: 0.0 });\n             let x_diff = self.x - p.x;\n             let y_diff = self.y - p.y;\n             return x_diff * x_diff + y_diff * y_diff;\n         }\n \n-        #[cfg(rpass2)]\n+        #[cfg(cfail2)]\n         pub fn distance_from_point(&self, p: Option<&Point>) -> f32 {\n             const ORIGIN: &Point = &Point { x: 0.0, y: 0.0 };\n             let p = p.unwrap_or(ORIGIN);\n@@ -57,56 +59,53 @@ mod point {\n }\n \n /// A fn item that calls the method that was changed\n-mod fn_calls_changed_method {\n+pub mod fn_calls_changed_method {\n     use point::Point;\n \n-    #[rustc_dirty(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_dirty(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.distance_from_point(None);\n     }\n }\n \n /// A fn item that calls a method that was not changed\n-mod fn_calls_another_method {\n+pub mod fn_calls_another_method {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn check() {\n         let p = Point { x: 2.0, y: 2.0 };\n         p.x();\n     }\n }\n \n /// A fn item that makes an instance of `Point` but does not invoke methods\n-mod fn_make_struct {\n+pub mod fn_make_struct {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn make_origin() -> Point {\n         Point { x: 2.0, y: 2.0 }\n     }\n }\n \n /// A fn item that reads fields from `Point` but does not invoke methods\n-mod fn_read_field {\n+pub mod fn_read_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn get_x(p: Point) -> f32 {\n         p.x\n     }\n }\n \n /// A fn item that writes to a field of `Point` but does not invoke methods\n-mod fn_write_field {\n+pub mod fn_write_field {\n     use point::Point;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n     pub fn inc_x(p: &mut Point) {\n         p.x += 1.0;\n     }\n }\n-\n-fn main() {\n-}"}, {"sha": "b49609cbd17a2d3848bd676c49d8be2a30c75e6c", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -190,7 +190,7 @@ impl Struct2 {\n }\n \n // Change UFCS Callee Indirectly -----------------------------------------------\n-mod change_ufcs_callee_indirectly {\n+pub mod change_ufcs_callee_indirectly {\n     #[cfg(cfail1)]\n     use super::Struct as Struct;\n     #[cfg(not(cfail1))]"}, {"sha": "e38fd58d7d277e7bec3807f00710fcbb0ee171c7", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -25,7 +25,7 @@\n #![crate_type=\"rlib\"]\n \n \n-enum Enum {\n+pub enum Enum {\n     Struct {\n         x: i32,\n         y: i64,\n@@ -36,7 +36,7 @@ enum Enum {\n \n // Change field value (struct-like) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_struct_like() -> Enum {\n+pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n         x: 0,\n         y: 1,\n@@ -49,7 +49,7 @@ fn change_field_value_struct_like() -> Enum {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_struct_like() -> Enum {\n+pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n         x: 0,\n         y: 2,\n@@ -61,7 +61,7 @@ fn change_field_value_struct_like() -> Enum {\n \n // Change field order (struct-like) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_order_struct_like() -> Enum {\n+pub fn change_field_order_struct_like() -> Enum {\n     Enum::Struct {\n         x: 3,\n         y: 4,\n@@ -76,7 +76,7 @@ fn change_field_order_struct_like() -> Enum {\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n // FIXME(michaelwoerister):Interesting. I would have thought that that changes the MIR. And it\n // would if it were not all constants\n-fn change_field_order_struct_like() -> Enum {\n+pub fn change_field_order_struct_like() -> Enum {\n     Enum::Struct {\n         y: 4,\n         x: 3,\n@@ -85,7 +85,7 @@ fn change_field_order_struct_like() -> Enum {\n }\n \n \n-enum Enum2 {\n+pub enum Enum2 {\n     Struct {\n         x: i8,\n         y: i8,\n@@ -102,7 +102,7 @@ enum Enum2 {\n \n // Change constructor path (struct-like) ------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_struct_like() {\n+pub fn change_constructor_path_struct_like() {\n     let _ = Enum::Struct {\n         x: 0,\n         y: 1,\n@@ -115,7 +115,7 @@ fn change_constructor_path_struct_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_struct_like() {\n+pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n         x: 0,\n         y: 1,\n@@ -127,7 +127,7 @@ fn change_constructor_path_struct_like() {\n \n // Change variant (regular struct) ------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_variant_struct_like() {\n+pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct {\n         x: 0,\n         y: 1,\n@@ -140,7 +140,7 @@ fn change_constructor_variant_struct_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_variant_struct_like() {\n+pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n         x: 0,\n         y: 1,\n@@ -150,7 +150,7 @@ fn change_constructor_variant_struct_like() {\n \n \n // Change constructor path indirectly (struct-like) -------------------------\n-mod change_constructor_path_indirectly_struct_like {\n+pub mod change_constructor_path_indirectly_struct_like {\n     #[cfg(cfail1)]\n     use super::Enum as TheEnum;\n     #[cfg(not(cfail1))]\n@@ -164,7 +164,7 @@ mod change_constructor_path_indirectly_struct_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> TheEnum {\n+    pub fn function() -> TheEnum {\n         TheEnum::Struct {\n             x: 0,\n             y: 1,\n@@ -175,7 +175,7 @@ mod change_constructor_path_indirectly_struct_like {\n \n \n // Change constructor variant indirectly (struct-like) ---------------------------\n-mod change_constructor_variant_indirectly_struct_like {\n+pub mod change_constructor_variant_indirectly_struct_like {\n     use super::Enum2;\n     #[cfg(cfail1)]\n     use super::Enum2::Struct as Variant;\n@@ -186,7 +186,7 @@ mod change_constructor_variant_indirectly_struct_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Enum2 {\n+    pub fn function() -> Enum2 {\n         Variant {\n             x: 0,\n             y: 1,\n@@ -198,7 +198,7 @@ mod change_constructor_variant_indirectly_struct_like {\n \n // Change field value (tuple-like) -------------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_tuple_like() -> Enum {\n+pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 2)\n }\n \n@@ -207,15 +207,15 @@ fn change_field_value_tuple_like() -> Enum {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_tuple_like() -> Enum {\n+pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n }\n \n \n \n // Change constructor path (tuple-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_tuple_like() {\n+pub fn change_constructor_path_tuple_like() {\n     let _ = Enum::Tuple(0, 1, 2);\n }\n \n@@ -227,15 +227,15 @@ fn change_constructor_path_tuple_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_tuple_like() {\n+pub fn change_constructor_path_tuple_like() {\n     let _ = Enum2::Tuple(0, 1, 2);\n }\n \n \n \n // Change constructor variant (tuple-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_variant_tuple_like() {\n+pub fn change_constructor_variant_tuple_like() {\n     let _ = Enum2::Tuple(0, 1, 2);\n }\n \n@@ -247,13 +247,13 @@ fn change_constructor_variant_tuple_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_variant_tuple_like() {\n+pub fn change_constructor_variant_tuple_like() {\n     let _ = Enum2::Tuple2(0, 1, 2);\n }\n \n \n // Change constructor path indirectly (tuple-like) ---------------------------\n-mod change_constructor_path_indirectly_tuple_like {\n+pub mod change_constructor_path_indirectly_tuple_like {\n     #[cfg(cfail1)]\n     use super::Enum as TheEnum;\n     #[cfg(not(cfail1))]\n@@ -267,15 +267,15 @@ mod change_constructor_path_indirectly_tuple_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> TheEnum {\n+    pub fn function() -> TheEnum {\n         TheEnum::Tuple(0, 1, 2)\n     }\n }\n \n \n \n // Change constructor variant indirectly (tuple-like) ---------------------------\n-mod change_constructor_variant_indirectly_tuple_like {\n+pub mod change_constructor_variant_indirectly_tuple_like {\n     use super::Enum2;\n     #[cfg(cfail1)]\n     use super::Enum2::Tuple as Variant;\n@@ -286,43 +286,43 @@ mod change_constructor_variant_indirectly_tuple_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Enum2 {\n+    pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n     }\n }\n \n \n-enum Clike {\n+pub enum Clike {\n     A,\n     B,\n     C\n }\n \n-enum Clike2 {\n+pub enum Clike2 {\n     B,\n     C,\n     D\n }\n \n // Change constructor path (C-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_c_like() {\n+pub fn change_constructor_path_c_like() {\n     let _ = Clike::B;\n }\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_c_like() {\n+pub fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n }\n \n \n \n // Change constructor variant (C-like) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_variant_c_like() {\n+pub fn change_constructor_variant_c_like() {\n     let _ = Clike::A;\n }\n \n@@ -331,13 +331,13 @@ fn change_constructor_variant_c_like() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_variant_c_like() {\n+pub fn change_constructor_variant_c_like() {\n     let _ = Clike::C;\n }\n \n \n // Change constructor path indirectly (C-like) ---------------------------\n-mod change_constructor_path_indirectly_c_like {\n+pub mod change_constructor_path_indirectly_c_like {\n     #[cfg(cfail1)]\n     use super::Clike as TheEnum;\n     #[cfg(not(cfail1))]\n@@ -351,15 +351,15 @@ mod change_constructor_path_indirectly_c_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> TheEnum {\n+    pub fn function() -> TheEnum {\n         TheEnum::B\n     }\n }\n \n \n \n // Change constructor variant indirectly (C-like) ---------------------------\n-mod change_constructor_variant_indirectly_c_like {\n+pub mod change_constructor_variant_indirectly_c_like {\n     use super::Clike;\n     #[cfg(cfail1)]\n     use super::Clike::A as Variant;\n@@ -370,7 +370,7 @@ mod change_constructor_variant_indirectly_c_like {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Clike {\n+    pub fn function() -> Clike {\n         Variant\n     }\n }"}, {"sha": "f9e8fb026cabbfb9d14c244f272e9ca0f8833ffe", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -25,7 +25,7 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n-struct Foo;\n+pub struct Foo;\n \n // Change Method Name -----------------------------------------------------------\n #[cfg(cfail1)]\n@@ -578,3 +578,19 @@ impl<T: Clone> Bar<T> {\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_impl_parameter(&self) { }\n }\n+\n+\n+// Force instantiation of some fns so we can check their hash.\n+pub fn instantiation_root() {\n+    Foo::method_privacy();\n+\n+    #[cfg(cfail1)]\n+    {\n+        Bar(0u32).change_impl_self_type();\n+    }\n+\n+    #[cfg(not(cfail1))]\n+    {\n+        Bar(0u64).change_impl_self_type();\n+    }\n+}"}, {"sha": "67362e31b250233f8c377bfb3cec55ac61e83df1", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -25,15 +25,15 @@\n #![crate_type=\"rlib\"]\n \n \n-struct RegularStruct {\n+pub struct RegularStruct {\n     x: i32,\n     y: i64,\n     z: i16,\n }\n \n // Change field value (regular struct) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_regular_struct() -> RegularStruct {\n+pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 0,\n         y: 1,\n@@ -46,7 +46,7 @@ fn change_field_value_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_regular_struct() -> RegularStruct {\n+pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 0,\n         y: 2,\n@@ -58,7 +58,7 @@ fn change_field_value_regular_struct() -> RegularStruct {\n \n // Change field order (regular struct) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_order_regular_struct() -> RegularStruct {\n+pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n         x: 3,\n         y: 4,\n@@ -71,7 +71,7 @@ fn change_field_order_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_order_regular_struct() -> RegularStruct {\n+pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n         y: 4,\n         x: 3,\n@@ -83,7 +83,7 @@ fn change_field_order_regular_struct() -> RegularStruct {\n \n // Add field (regular struct) --------------------------------------------------\n #[cfg(cfail1)]\n-fn add_field_regular_struct() -> RegularStruct {\n+pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -101,7 +101,7 @@ fn add_field_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn add_field_regular_struct() -> RegularStruct {\n+pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -119,7 +119,7 @@ fn add_field_regular_struct() -> RegularStruct {\n \n // Change field label (regular struct) -----------------------------------------\n #[cfg(cfail1)]\n-fn change_field_label_regular_struct() -> RegularStruct {\n+pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -138,7 +138,7 @@ fn change_field_label_regular_struct() -> RegularStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_label_regular_struct() -> RegularStruct {\n+pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n         x: 3,\n         y: 4,\n@@ -154,15 +154,15 @@ fn change_field_label_regular_struct() -> RegularStruct {\n \n \n \n-struct RegularStruct2 {\n+pub struct RegularStruct2 {\n     x: i8,\n     y: i8,\n     z: i8,\n }\n \n // Change constructor path (regular struct) ------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_regular_struct() {\n+pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct {\n         x: 0,\n         y: 1,\n@@ -175,7 +175,7 @@ fn change_constructor_path_regular_struct() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_regular_struct() {\n+pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n         x: 0,\n         y: 1,\n@@ -186,7 +186,7 @@ fn change_constructor_path_regular_struct() {\n \n \n // Change constructor path indirectly (regular struct) -------------------------\n-mod change_constructor_path_indirectly_regular_struct {\n+pub mod change_constructor_path_indirectly_regular_struct {\n     #[cfg(cfail1)]\n     use super::RegularStruct as Struct;\n     #[cfg(not(cfail1))]\n@@ -199,7 +199,7 @@ mod change_constructor_path_indirectly_regular_struct {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Struct {\n+    pub fn function() -> Struct {\n         Struct {\n             x: 0,\n             y: 1,\n@@ -210,11 +210,11 @@ mod change_constructor_path_indirectly_regular_struct {\n \n \n \n-struct TupleStruct(i32, i64, i16);\n+pub struct TupleStruct(i32, i64, i16);\n \n // Change field value (tuple struct) -------------------------------------------\n #[cfg(cfail1)]\n-fn change_field_value_tuple_struct() -> TupleStruct {\n+pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 2)\n }\n \n@@ -223,17 +223,17 @@ fn change_field_value_tuple_struct() -> TupleStruct {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_field_value_tuple_struct() -> TupleStruct {\n+pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n }\n \n \n \n-struct TupleStruct2(u16, u16, u16);\n+pub struct TupleStruct2(u16, u16, u16);\n \n // Change constructor path (tuple struct) --------------------------------------\n #[cfg(cfail1)]\n-fn change_constructor_path_tuple_struct() {\n+pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct(0, 1, 2);\n }\n \n@@ -242,14 +242,14 @@ fn change_constructor_path_tuple_struct() {\n #[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n-fn change_constructor_path_tuple_struct() {\n+pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n }\n \n \n \n // Change constructor path indirectly (tuple struct) ---------------------------\n-mod change_constructor_path_indirectly_tuple_struct {\n+pub mod change_constructor_path_indirectly_tuple_struct {\n     #[cfg(cfail1)]\n     use super::TupleStruct as Struct;\n     #[cfg(not(cfail1))]\n@@ -262,7 +262,7 @@ mod change_constructor_path_indirectly_tuple_struct {\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n-    fn function() -> Struct {\n+    pub fn function() -> Struct {\n         Struct(0, 1, 2)\n     }\n }"}, {"sha": "7bb8af74eeb7e6c6e172130e2d33baa8ac295c7c", "filename": "src/test/incremental/issue-38222.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fissue-38222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fissue-38222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-38222.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -33,10 +33,9 @@ pub fn main() {\n \n mod mod1 {\n     pub fn some_fn() {\n-        let _ = 1;\n-    }\n+        #[cfg(rpass2)]\n+        {}\n \n-    #[cfg(rpass2)]\n-    fn _some_other_fn() {\n+        let _ = 1;\n     }\n }"}, {"sha": "bc3e3a78fd6b899ab81d7e89b52c20d4e8f68116", "filename": "src/test/incremental/krate-inherent.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inherent.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -8,27 +8,27 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// revisions: rpass1 rpass2\n+// revisions: cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![rustc_partition_reused(module=\"krate_inherent-x\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"krate_inherent-x\", cfg=\"cfail2\")]\n+#![crate_type = \"rlib\"]\n \n-fn main() { }\n-\n-mod x {\n-    struct Foo;\n+pub mod x {\n+    pub struct Foo;\n     impl Foo {\n-        fn foo(&self) { }\n+        pub fn foo(&self) { }\n     }\n \n-    fn method() {\n+    pub fn method() {\n         let x: Foo = Foo;\n         x.foo(); // inherent methods used to add an edge from Krate\n     }\n }\n \n-#[cfg(rpass1)]\n-fn bar() { } // remove this unrelated fn in rpass2, which should not affect `x::method`\n+#[cfg(cfail1)]\n+pub fn bar() { } // remove this unrelated fn in cfail2, which should not affect `x::method`\n "}, {"sha": "83b75116c608645e5e67a0404b4b4d478967379c", "filename": "src/test/incremental/krate-inlined.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inlined.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -20,12 +20,14 @@\n #![rustc_partition_reused(module=\"krate_inlined-x\", cfg=\"rpass2\")]\n \n fn main() {\n+    x::method();\n+\n     #[cfg(rpass2)]\n     ()\n }\n \n mod x {\n-    fn method() {\n+    pub fn method() {\n         // use some methods that require inlining HIR from another crate:\n         let mut v = vec![];\n         v.push(1);"}, {"sha": "3e75fa985acb42f8e561e852dfc2b2228787e469", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -8,47 +8,48 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// revisions: rpass1 rpass2\n+// revisions: cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n+// must-compile-successfully\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n+#![crate_type = \"rlib\"]\n \n // Here the only thing which changes is the string constant in `x`.\n // Therefore, the compiler deduces (correctly) that typeck is not\n // needed even for callers of `x`.\n \n-fn main() { }\n \n-mod x {\n-    #[cfg(rpass1)]\n+pub mod x {\n+    #[cfg(cfail1)]\n     pub fn x() {\n         println!(\"{}\", \"1\");\n     }\n \n-    #[cfg(rpass2)]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"rpass2\")]\n-    #[rustc_dirty(label=\"MirOptimized\", cfg=\"rpass2\")]\n+    #[cfg(cfail2)]\n+    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n+    #[rustc_dirty(label=\"MirOptimized\", cfg=\"cfail2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n }\n \n-mod y {\n+pub mod y {\n     use x;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"MirOptimized\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n     pub fn y() {\n         x::x();\n     }\n }\n \n-mod z {\n+pub mod z {\n     use y;\n \n-    #[rustc_clean(label=\"TypeckTables\", cfg=\"rpass2\")]\n-    #[rustc_clean(label=\"MirOptimized\", cfg=\"rpass2\")]\n+    #[rustc_clean(label=\"TypeckTables\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"MirOptimized\", cfg=\"cfail2\")]\n     pub fn z() {\n         y::y();\n     }"}, {"sha": "69486f4613722685d977991a80ebdd5122b3b5a9", "filename": "src/test/mir-opt/copy_propagation.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcopy_propagation.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -13,7 +13,10 @@ fn test(x: u32) -> u32 {\n     y\n }\n \n-fn main() { }\n+fn main() {\n+    // Make sure the function actually gets instantiated.\n+    test(0);\n+}\n \n // END RUST SOURCE\n // START rustc.node4.CopyPropagation.before.mir"}, {"sha": "f4db00dab59dc14f1da97497b7f5ff60540ed5eb", "filename": "src/test/mir-opt/deaggregator_test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -18,7 +18,10 @@ fn bar(a: usize) -> Baz {\n     Baz { x: a, y: 0.0, z: false }\n }\n \n-fn main() {}\n+fn main() {\n+    // Make sure the function actually gets instantiated.\n+    bar(0);\n+}\n \n // END RUST SOURCE\n // START rustc.node13.Deaggregator.before.mir"}, {"sha": "8e7207af0c6871321f8fe1b29dd2c81519acbd63", "filename": "src/test/mir-opt/deaggregator_test_enum_2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_enum_2.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -23,7 +23,10 @@ fn test1(x: bool, y: i32) -> Foo {\n     }\n }\n \n-fn main() {}\n+fn main() {\n+    // Make sure the function actually gets instantiated.\n+    test1(false, 0);\n+}\n \n // END RUST SOURCE\n // START rustc.node12.Deaggregator.before.mir"}, {"sha": "bc06ab67eaa27c4a774e805c8e6c984a40ecb05a", "filename": "src/test/mir-opt/deaggregator_test_multiple.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeaggregator_test_multiple.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -19,7 +19,10 @@ fn test(x: i32) -> [Foo; 2] {\n     [Foo::A(x), Foo::A(x)]\n }\n \n-fn main() { }\n+fn main() {\n+    // Make sure the function actually gets instantiated.\n+    test(0);\n+}\n \n // END RUST SOURCE\n // START rustc.node10.Deaggregator.before.mir"}, {"sha": "bfac6c739a3c226cbfddd96f647688a11700e540", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -14,6 +14,8 @@ fn main() {\n     let x = S.other(S.id());\n }\n \n+// no_mangle to make sure this gets instantiated even in an executable.\n+#[no_mangle]\n pub fn test() {\n     let u = S;\n     let mut v = S;"}, {"sha": "56c5dd3be472d4c6ab8e1f991b28d0b7362328cf", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -18,15 +18,19 @@ fn guard2(_:i32) -> bool {\n     true\n }\n \n-fn full_tested_match() {\n+// no_mangle to make sure this gets instantiated even in an executable.\n+#[no_mangle]\n+pub fn full_tested_match() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n         Some(y) => (2, y),\n         None => (3, 3),\n     };\n }\n \n-fn full_tested_match2() {\n+// no_mangle to make sure this gets instantiated even in an executable.\n+#[no_mangle]\n+pub fn full_tested_match2() {\n     let _ = match Some(42) {\n         Some(x) if guard() => (1, x),\n         None => (3, 3),"}, {"sha": "b75c82afb53d0c592f260a9ea5fca7894325e82b", "filename": "src/test/run-make/issue-7349/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-7349%2Ffoo.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -13,13 +13,15 @@ fn outer<T>() {\n     fn inner() -> u32 {\n         8675309\n     }\n+    inner();\n }\n \n extern \"C\" fn outer_foreign<T>() {\n     #[allow(dead_code)]\n     fn inner() -> u32 {\n         11235813\n     }\n+    inner();\n }\n \n fn main() {"}, {"sha": "64a76e9e0edabb532cc85578d2e3253a43457ee7", "filename": "src/test/run-make/sepcomp-separate/foo.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fsepcomp-separate%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fsepcomp-separate%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsepcomp-separate%2Ffoo.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+\n fn magic_fn() -> usize {\n     1234\n }\n@@ -24,4 +26,8 @@ mod b {\n     }\n }\n \n-fn main() { }\n+fn main() {\n+    magic_fn();\n+    a::magic_fn();\n+    b::magic_fn();\n+}"}, {"sha": "b9285b24cd63f2c612b1ab5390a46c52e06919d2", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -14,7 +14,8 @@ pub static Y: &'static [u8] = include_bytes!(\"lib.rs\");\n trait Foo { fn dummy(&self) { } }\n impl Foo for usize {}\n \n-pub fn dummy() {\n+#[no_mangle]\n+pub extern \"C\" fn dummy() {\n     // force the vtable to be created\n     let _x = &1usize as &Foo;\n }"}, {"sha": "d84f1617db53aedf6c514efb03c91ea12e726c93", "filename": "src/test/run-make/symbols-include-type-name/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fsymbols-include-type-name%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Frun-make%2Fsymbols-include-type-name%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-include-type-name%2Flib.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -17,3 +17,8 @@ impl Def {\n         Def { id: id }\n     }\n }\n+\n+#[no_mangle]\n+pub fn user() {\n+    let _ = Def::new(0);\n+}"}, {"sha": "f9219436c780a0df8400a4127d69ad4d919c0467", "filename": "src/test/ui/span/E0535.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fui%2Fspan%2FE0535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb96f651964e9c21e6e1647febd10ce71b2554d/src%2Ftest%2Fui%2Fspan%2FE0535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0535.rs?ref=4bb96f651964e9c21e6e1647febd10ce71b2554d", "patch": "@@ -11,4 +11,6 @@\n #[inline(unknown)] //~ ERROR E0535\n pub fn something() {}\n \n-fn main() {}\n+fn main() {\n+    something();\n+}"}]}