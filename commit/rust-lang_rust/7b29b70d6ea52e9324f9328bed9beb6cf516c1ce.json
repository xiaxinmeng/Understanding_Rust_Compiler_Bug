{"sha": "7b29b70d6ea52e9324f9328bed9beb6cf516c1ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMjliNzBkNmVhNTJlOTMyNGY5MzI4YmVkOWJlYjZjZjUxNmMxY2U=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-21T16:11:47Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-03-21T16:14:26Z"}, "message": "Add a right shift mapping\n\nThis saves less bytes - by far - and is likely not the best operator to choose.\nBut for now, it works -- a better choice may arise later.\n\nAlphabetic     : 2538 bytes   (- 84 bytes)\nCase_Ignorable : 1773 bytes   (- 30 bytes)\nCased          : 790 bytes    (- 18 bytes)\nCc             : 26 bytes     (-  6 bytes)\nGrapheme_Extend: 1490 bytes   (- 18 bytes)\nLowercase      : 865 bytes    (- 36 bytes)\nN              : 1040 bytes   (- 24 bytes)\nUppercase      : 778 bytes    (- 60 bytes)\nWhite_Space    : 85 bytes     (-  6 bytes)\nTotal table sizes: 9385 bytes (-282 bytes)", "tree": {"sha": "731c4a56b4a95e6506657cf38dfcccb49b6079ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731c4a56b4a95e6506657cf38dfcccb49b6079ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce", "html_url": "https://github.com/rust-lang/rust/commit/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e121d9d588b334eaa1b68a127f5ee0fcda4296", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e121d9d588b334eaa1b68a127f5ee0fcda4296", "html_url": "https://github.com/rust-lang/rust/commit/b0e121d9d588b334eaa1b68a127f5ee0fcda4296"}], "stats": {"total": 1647, "additions": 814, "deletions": 833}, "files": [{"sha": "39532166a0b661265e4281dbabf59dcb8c80ddb6", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=7b29b70d6ea52e9324f9328bed9beb6cf516c1ce", "patch": "@@ -66,12 +66,12 @@ fn range_search<\n     } else {\n         let (real_idx, mapping) = bitset_canonicalized[idx - CANONICAL];\n         let mut word = bitset_canonical[real_idx as usize];\n-        let should_invert = mapping & (1 << 7) != 0;\n+        let should_invert = mapping & (1 << 6) != 0;\n         if should_invert {\n             word = !word;\n         }\n         // Unset the inversion bit\n-        let rotate_by = mapping & !(1 << 7);\n+        let rotate_by = mapping & !(1 << 6);\n         word = word.rotate_left(rotate_by as u32);\n         word\n     };"}, {"sha": "bae6d8ea953659c516d6eb4027f48fa0315d868e", "filename": "src/libcore/unicode/unicode_data.rs", "status": "modified", "additions": 780, "deletions": 823, "changes": 1603, "blob_url": "https://github.com/rust-lang/rust/blob/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Flibcore%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Flibcore%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode_data.rs?ref=7b29b70d6ea52e9324f9328bed9beb6cf516c1ce"}, {"sha": "65ece05043a8aa18302095a88957ab9ee871a249", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=7b29b70d6ea52e9324f9328bed9beb6cf516c1ce", "patch": "@@ -286,13 +286,18 @@ fn range_search<\n     } else {\n         let (real_idx, mapping) = bitset_canonicalized[idx - CANONICAL];\n         let mut word = bitset_canonical[real_idx as usize];\n-        let should_invert = mapping & (1 << 7) != 0;\n+        let should_invert = mapping & (1 << 6) != 0;\n         if should_invert {\n             word = !word;\n         }\n-        // Unset the inversion bit\n-        let rotate_by = mapping & !(1 << 7);\n-        word = word.rotate_left(rotate_by as u32);\n+        // Lower 6 bits\n+        let quantity = mapping & ((1 << 6) - 1);\n+        if mapping & (1 << 7) != 0 {\n+            // shift\n+            word >>= quantity as u64;\n+        } else {\n+            word = word.rotate_left(quantity as u32);\n+        }\n         word\n     };\n     (word & (1 << (needle % 64) as u64)) != 0"}, {"sha": "a0814fd0d36633be1a72423815649906810260c9", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b29b70d6ea52e9324f9328bed9beb6cf516c1ce/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=7b29b70d6ea52e9324f9328bed9beb6cf516c1ce", "patch": "@@ -233,6 +233,7 @@ impl Canonicalized {\n             Rotate(u32),\n             Invert,\n             RotateAndInvert(u32),\n+            ShiftRight(u32),\n         }\n \n         // key is the word being mapped to\n@@ -270,6 +271,18 @@ impl Canonicalized {\n                         continue 'b;\n                     }\n                 }\n+\n+                // All possible shifts\n+                for shift_by in 1..64 {\n+                    if a == (b >> shift_by) {\n+                        mappings\n+                            .entry(b)\n+                            .or_default()\n+                            .push((a, Mapping::ShiftRight(shift_by as u32)));\n+                        // We're not interested in further mappings between a and b\n+                        continue 'b;\n+                    }\n+                }\n             }\n         }\n         // These are the bitset words which will be represented \"raw\" (as a u64)\n@@ -384,21 +397,27 @@ impl Canonicalized {\n             assert!(distinct_indices.insert(idx));\n         }\n \n+        const LOWER_6: u32 = (1 << 6) - 1;\n+\n         let canonicalized_words = canonicalized_words\n             .into_iter()\n             .map(|v| {\n                 (\n                     u8::try_from(v.0).unwrap(),\n                     match v.1 {\n                         Mapping::RotateAndInvert(amount) => {\n-                            assert!(amount < (1 << 7));\n-                            1 << 7 | (amount as u8)\n+                            assert_eq!(amount, amount & LOWER_6);\n+                            1 << 6 | (amount as u8)\n                         }\n                         Mapping::Rotate(amount) => {\n-                            assert!(amount < (1 << 7));\n+                            assert_eq!(amount, amount & LOWER_6);\n                             amount as u8\n                         }\n-                        Mapping::Invert => 1 << 7,\n+                        Mapping::Invert => 1 << 6,\n+                        Mapping::ShiftRight(shift_by) => {\n+                            assert_eq!(shift_by, shift_by & LOWER_6);\n+                            1 << 7 | (shift_by as u8)\n+                        }\n                     },\n                 )\n             })"}]}