{"sha": "89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZWJjNmNlNGY3YmNlYzhlMGNkZmZlOTViZjhhOTJiYmRmZTA0ZTU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-19T03:03:30Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-19T08:47:42Z"}, "message": "Rollup merge of #55071 - oli-obk:const_cast_\ud83c\udf68, r=RalfJung\n\nFix ICE and report a human readable error\n\nfixes #55063\n\nr? @RalfJung", "tree": {"sha": "801b6b3e00d6634fdd25ed26d56dc09c5c230699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/801b6b3e00d6634fdd25ed26d56dc09c5c230699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvJmi8ACgkQ/vbIBR0O\nATxm5A/8DeHxcPenX1gZR5Fz3UWwK+D4YnXJHKxB4V22nfIDgIv2ZV/7ioIKHZgP\n62idvtMwRPrW3wSuveFLp1ljr7EaL6Nls14ay6n3x/iewl17jFv7yMhx8082QL/r\nOzoietSHN5FZpsHvCb5aP7tHMfAs61+Kap0uo12JmnaY/ozGvOiMUXXZQM/g5ZO9\nVkfyZyOwxFkPNLYWKGyqBHWArXtAlBVAsay5wIEKXdOCld8rtDHwgKN+Qx9g43qr\nhet+V3hP0JV8glFVP3haRGhmUieOvuLpDvEZFvBRacQfJV7hCXEepDyNKyGa6DpY\ncaZ+lvL20l6Jn+QqKInbOXKI4sLMMs1AhZReniVOgfzd6l7sywYwPmJ78+2WJd9J\nJl/rcUwH2W5BwJ+gZv2kxSDYjuIDjSxPFQTM83vhzoejNAxEBvxg3AeWqPqMn6If\ny3WEVef29AQvjOA7NSNavLBuLZmz+KudWtVPEwy6r34cw5+AzmmmIMirX0ls1nJf\na/YCYpzdEk2GsrlK8D5nKXiA97RrNXwQogwYIpkAO/QokkFHRLS9SkgN4ryGAF2d\n6AKST8pGi3vF1Tu3DcFPNwZC1oxXhGAoClYCsifxi2LXTsNwmAQvvztTbVJL8ApN\nrFtsIEAdWFP6oI7yTG0kLGgblDhlCZEG5UBlDLo9XHRXy2PemTc=\n=VJCz\n-----END PGP SIGNATURE-----", "payload": "tree 801b6b3e00d6634fdd25ed26d56dc09c5c230699\nparent 1419a697e3849cf929b70c4d2b61643190030981\nparent 38f3ad41c0bbf6ed7c389a070afb60a465b3afe3\nauthor kennytm <kennytm@gmail.com> 1539918210 +0800\ncommitter kennytm <kennytm@gmail.com> 1539938862 +0800\n\nRollup merge of #55071 - oli-obk:const_cast_\ud83c\udf68, r=RalfJung\n\nFix ICE and report a human readable error\n\nfixes #55063\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "html_url": "https://github.com/rust-lang/rust/commit/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1419a697e3849cf929b70c4d2b61643190030981", "url": "https://api.github.com/repos/rust-lang/rust/commits/1419a697e3849cf929b70c4d2b61643190030981", "html_url": "https://github.com/rust-lang/rust/commit/1419a697e3849cf929b70c4d2b61643190030981"}, {"sha": "38f3ad41c0bbf6ed7c389a070afb60a465b3afe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/38f3ad41c0bbf6ed7c389a070afb60a465b3afe3", "html_url": "https://github.com/rust-lang/rust/commit/38f3ad41c0bbf6ed7c389a070afb60a465b3afe3"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "ab82f28c8bff4d1b1c0a7ceb29a5706993a29da9", "filename": "src/librustc/ty/cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Flibrustc%2Fty%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Flibrustc%2Fty%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcast.rs?ref=89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "patch": "@@ -58,6 +58,8 @@ pub enum CastKind {\n }\n \n impl<'tcx> CastTy<'tcx> {\n+    /// Returns `Some` for integral/pointer casts.\n+    /// casts like unsizing casts will return `None`\n     pub fn from_ty(t: Ty<'tcx>) -> Option<CastTy<'tcx>> {\n         match t.sty {\n             ty::Bool => Some(CastTy::Int(IntTy::Bool)),"}, {"sha": "52c557b83d5916979301d743b5f8aa2b4a6091bf", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "patch": "@@ -148,7 +148,7 @@ fn check_rvalue(\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) => {\n             check_place(tcx, mir, place, span, PlaceMode::Read)\n         }\n-        Rvalue::Cast(_, operand, cast_ty) => {\n+        Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n             use rustc::ty::cast::CastTy;\n             let cast_in = CastTy::from_ty(operand.ty(mir, tcx)).expect(\"bad input type for cast\");\n             let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n@@ -163,6 +163,16 @@ fn check_rvalue(\n                 _ => check_operand(tcx, mir, operand, span),\n             }\n         }\n+        Rvalue::Cast(CastKind::UnsafeFnPointer, _, _) |\n+        Rvalue::Cast(CastKind::ClosureFnPointer, _, _) |\n+        Rvalue::Cast(CastKind::ReifyFnPointer, _, _) => Err((\n+            span,\n+            \"function pointer casts are not allowed in const fn\".into(),\n+        )),\n+        Rvalue::Cast(CastKind::Unsize, _, _) => Err((\n+            span,\n+            \"unsizing casts are not allowed in const fn\".into(),\n+        )),\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, lhs, rhs) | Rvalue::CheckedBinaryOp(_, lhs, rhs) => {\n             check_operand(tcx, mir, lhs, span)?;\n@@ -177,8 +187,11 @@ fn check_rvalue(\n                 ))\n             }\n         }\n-        // checked by regular const fn checks\n-        Rvalue::NullaryOp(..) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::SizeOf, _) => Ok(()),\n+        Rvalue::NullaryOp(NullOp::Box, _) => Err((\n+            span,\n+            \"heap allocations are not allowed in const fn\".into(),\n+        )),\n         Rvalue::UnaryOp(_, operand) => {\n             let ty = operand.ty(mir, tcx);\n             if ty.is_integral() || ty.is_bool() {"}, {"sha": "3e42cb8c1b07480bb57ea6e5f5f854626b6c68b3", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.rs?ref=89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "patch": "@@ -0,0 +1,5 @@\n+const fn foo(a: i32) -> Vec<i32> {\n+    vec![1, 2, 3] //~ ERROR heap allocations are not allowed in const fn\n+}\n+\n+fn main() {}"}, {"sha": "f6b704370b6f239890fa5d0add31898aaff8e74d", "filename": "src/test/ui/consts/min_const_fn/bad_const_fn_body_ice.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fbad_const_fn_body_ice.stderr?ref=89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "patch": "@@ -0,0 +1,10 @@\n+error: heap allocations are not allowed in const fn\n+  --> $DIR/bad_const_fn_body_ice.rs:2:5\n+   |\n+LL |     vec![1, 2, 3] //~ ERROR heap allocations are not allowed in const fn\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "8648cd35387cedd58e0a47bc5363379e02a2450f", "filename": "src/test/ui/consts/min_const_fn/cast_errors.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.rs?ref=89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "patch": "@@ -0,0 +1,14 @@\n+fn main() {}\n+\n+const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n+//~^ ERROR unsizing casts are not allowed in const fn\n+const fn closure() -> fn() { || {} }\n+//~^ ERROR function pointers in const fn are unstable\n+const fn closure2() {\n+    (|| {}) as fn();\n+//~^ ERROR function pointers in const fn are unstable\n+}\n+const fn reify(f: fn()) -> unsafe fn() { f }\n+//~^ ERROR function pointers in const fn are unstable\n+const fn reify2() { main as unsafe fn(); }\n+//~^ ERROR function pointers in const fn are unstable"}, {"sha": "ba980b7aacb6c095689714be2b94a93622ee6468", "filename": "src/test/ui/consts/min_const_fn/cast_errors.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fcast_errors.stderr?ref=89ebc6ce4f7bcec8e0cdffe95bf8a92bbdfe04e5", "patch": "@@ -0,0 +1,32 @@\n+error: unsizing casts are not allowed in const fn\n+  --> $DIR/cast_errors.rs:3:41\n+   |\n+LL | const fn unsize(x: &[u8; 3]) -> &[u8] { x }\n+   |                                         ^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/cast_errors.rs:5:23\n+   |\n+LL | const fn closure() -> fn() { || {} }\n+   |                       ^^^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/cast_errors.rs:8:5\n+   |\n+LL |     (|| {}) as fn();\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/cast_errors.rs:11:28\n+   |\n+LL | const fn reify(f: fn()) -> unsafe fn() { f }\n+   |                            ^^^^^^^^^^^\n+\n+error: function pointers in const fn are unstable\n+  --> $DIR/cast_errors.rs:13:21\n+   |\n+LL | const fn reify2() { main as unsafe fn(); }\n+   |                     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}]}