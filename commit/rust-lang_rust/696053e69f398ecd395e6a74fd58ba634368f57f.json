{"sha": "696053e69f398ecd395e6a74fd58ba634368f57f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NjA1M2U2OWYzOThlY2QzOTVlNmE3NGZkNThiYTYzNDM2OGY1N2Y=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-20T15:16:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-20T15:16:28Z"}, "message": "Set memflags for vtable loads", "tree": {"sha": "7bf064f533d9fc0a1f6669833de3526f1dc4e753", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bf064f533d9fc0a1f6669833de3526f1dc4e753"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696053e69f398ecd395e6a74fd58ba634368f57f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696053e69f398ecd395e6a74fd58ba634368f57f", "html_url": "https://github.com/rust-lang/rust/commit/696053e69f398ecd395e6a74fd58ba634368f57f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696053e69f398ecd395e6a74fd58ba634368f57f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "967709f31a025e402a68a6ab2744d0d5a51432ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/967709f31a025e402a68a6ab2744d0d5a51432ad", "html_url": "https://github.com/rust-lang/rust/commit/967709f31a025e402a68a6ab2744d0d5a51432ad"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "c12dff3cdc6b3a6c01515ec02c2072a2a111517d", "filename": "src/vtable.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/696053e69f398ecd395e6a74fd58ba634368f57f/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696053e69f398ecd395e6a74fd58ba634368f57f/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=696053e69f398ecd395e6a74fd58ba634368f57f", "patch": "@@ -6,11 +6,17 @@ const DROP_FN_INDEX: usize = 0;\n const SIZE_INDEX: usize = 1;\n const ALIGN_INDEX: usize = 2;\n \n+fn vtable_memflags() -> MemFlags {\n+    let mut flags = MemFlags::trusted(); // A vtable access is always aligned and will never trap.\n+    flags.set_readonly(); // A vtable is always read-only.\n+    flags\n+}\n+\n pub fn drop_fn_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) -> Value {\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n-        MemFlags::new(),\n+        vtable_memflags(),\n         vtable,\n         (DROP_FN_INDEX * usize_size) as i32,\n     )\n@@ -20,7 +26,7 @@ pub fn size_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value) ->\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n-        MemFlags::new(),\n+        vtable_memflags(),\n         vtable,\n         (SIZE_INDEX * usize_size) as i32,\n     )\n@@ -30,7 +36,7 @@ pub fn min_align_of_obj(fx: &mut FunctionCx<'_, '_, impl Backend>, vtable: Value\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes() as usize;\n     fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n-        MemFlags::new(),\n+        vtable_memflags(),\n         vtable,\n         (ALIGN_INDEX * usize_size) as i32,\n     )\n@@ -45,7 +51,7 @@ pub fn get_ptr_and_method_ref<'tcx>(\n     let usize_size = fx.layout_of(fx.tcx.types.usize).size.bytes();\n     let func_ref = fx.bcx.ins().load(\n         pointer_ty(fx.tcx),\n-        MemFlags::new(),\n+        vtable_memflags(),\n         vtable,\n         ((idx + 3) * usize_size as usize) as i32,\n     );"}]}