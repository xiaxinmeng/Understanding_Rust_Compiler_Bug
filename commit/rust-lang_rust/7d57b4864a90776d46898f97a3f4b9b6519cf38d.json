{"sha": "7d57b4864a90776d46898f97a3f4b9b6519cf38d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNTdiNDg2NGE5MDc3NmQ0Njg5OGY5N2EzZjRiOWI2NTE5Y2YzOGQ=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-29T23:28:04Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-08-31T19:55:39Z"}, "message": "Remove deprecated modes from list.rs (and temporarily delete list::push)", "tree": {"sha": "d707e92cf4563ca8eb080dc14b3b05636c2d0603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d707e92cf4563ca8eb080dc14b3b05636c2d0603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d57b4864a90776d46898f97a3f4b9b6519cf38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d57b4864a90776d46898f97a3f4b9b6519cf38d", "html_url": "https://github.com/rust-lang/rust/commit/7d57b4864a90776d46898f97a3f4b9b6519cf38d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d57b4864a90776d46898f97a3f4b9b6519cf38d/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34bf84649e811e93cad521bba5116117b86bd57b", "url": "https://api.github.com/repos/rust-lang/rust/commits/34bf84649e811e93cad521bba5116117b86bd57b", "html_url": "https://github.com/rust-lang/rust/commit/34bf84649e811e93cad521bba5116117b86bd57b"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "e1ff5c8b352b61a9765b130a4c6c2a32eaa009ba", "filename": "src/libstd/list.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7d57b4864a90776d46898f97a3f4b9b6519cf38d/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d57b4864a90776d46898f97a3f4b9b6519cf38d/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=7d57b4864a90776d46898f97a3f4b9b6519cf38d", "patch": "@@ -1,4 +1,6 @@\n //! A standard linked list\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n \n import core::cmp::Eq;\n import core::option;\n@@ -28,9 +30,9 @@ fn from_vec<T: copy>(v: &[T]) -> @list<T> {\n  * * z - The initial value\n  * * f - The function to apply\n  */\n-fn foldl<T: copy, U>(z: T, ls: @list<U>, f: fn(T, U) -> T) -> T {\n+fn foldl<T: copy, U>(+z: T, ls: @list<U>, f: fn((&T), (&U)) -> T) -> T {\n     let mut accum: T = z;\n-    do iter(ls) |elt| { accum = f(accum, elt);}\n+    do iter(ls) |elt| { accum = f(&accum, &elt);}\n     accum\n }\n \n@@ -41,12 +43,12 @@ fn foldl<T: copy, U>(z: T, ls: @list<U>, f: fn(T, U) -> T) -> T {\n  * When function `f` returns true then an option containing the element\n  * is returned. If `f` matches no elements then none is returned.\n  */\n-fn find<T: copy>(ls: @list<T>, f: fn(T) -> bool) -> Option<T> {\n+fn find<T: copy>(ls: @list<T>, f: fn((&T)) -> bool) -> Option<T> {\n     let mut ls = ls;\n     loop {\n         ls = match *ls {\n           cons(hd, tl) => {\n-            if f(hd) { return Some(hd); }\n+            if f(&hd) { return Some(hd); }\n             tl\n           }\n           nil => return None\n@@ -55,7 +57,7 @@ fn find<T: copy>(ls: @list<T>, f: fn(T) -> bool) -> Option<T> {\n }\n \n /// Returns true if a list contains an element with the given value\n-fn has<T: copy Eq>(ls: @list<T>, elt: T) -> bool {\n+fn has<T: copy Eq>(ls: @list<T>, +elt: T) -> bool {\n     for each(ls) |e| {\n         if e == elt { return true; }\n     }\n@@ -110,10 +112,13 @@ pure fn append<T: copy>(l: @list<T>, m: @list<T>) -> @list<T> {\n     }\n }\n \n-/// Push an element to the front of a list\n-fn push<T: copy>(&l: list<T>, v: T) {\n-    l = cons(v, @l);\n+/*\n+/// Push one element into the front of a list, returning a new list\n+/// THIS VERSION DOESN'T ACTUALLY WORK\n+pure fn push<T: copy>(ll: &mut @list<T>, +vv: T) {\n+    ll = &mut @cons(vv, *ll)\n }\n+*/\n \n /// Iterate over a list\n fn iter<T>(l: @list<T>, f: fn(T)) {\n@@ -201,7 +206,7 @@ mod tests {\n \n     #[test]\n     fn test_foldl() {\n-        fn add(&&a: uint, &&b: int) -> uint { return a + (b as uint); }\n+        fn add(a: &uint, b: &int) -> uint { return *a + (*b as uint); }\n         let l = from_vec(~[0, 1, 2, 3, 4]);\n         let empty = @list::nil::<int>;\n         assert (list::foldl(0u, l, add) == 10u);\n@@ -210,23 +215,23 @@ mod tests {\n \n     #[test]\n     fn test_foldl2() {\n-        fn sub(&&a: int, &&b: int) -> int {\n-            a - b\n+        fn sub(a: &int, b: &int) -> int {\n+            *a - *b\n         }\n         let l = from_vec(~[1, 2, 3, 4]);\n         assert (list::foldl(0, l, sub) == -10);\n     }\n \n     #[test]\n     fn test_find_success() {\n-        fn match_(&&i: int) -> bool { return i == 2; }\n+        fn match_(i: &int) -> bool { return *i == 2; }\n         let l = from_vec(~[0, 1, 2]);\n         assert (list::find(l, match_) == option::Some(2));\n     }\n \n     #[test]\n     fn test_find_fail() {\n-        fn match_(&&_i: int) -> bool { return false; }\n+        fn match_(_i: &int) -> bool { return false; }\n         let l = from_vec(~[0, 1, 2]);\n         let empty = @list::nil::<int>;\n         assert (list::find(l, match_) == option::None::<int>);\n@@ -251,6 +256,11 @@ mod tests {\n         assert (list::len(empty) == 0u);\n     }\n \n+    #[test]\n+    fn test_append() {\n+        assert from_vec(~[1,2,3,4])\n+            == list::append(list::from_vec(~[1,2]), list::from_vec(~[3,4]));\n+    }\n }\n \n // Local Variables:"}, {"sha": "d9e64d7b1a0deb1901b1c769bf0fd148927061a1", "filename": "src/libstd/prettyprint.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d57b4864a90776d46898f97a3f4b9b6519cf38d/src%2Flibstd%2Fprettyprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d57b4864a90776d46898f97a3f4b9b6519cf38d/src%2Flibstd%2Fprettyprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprettyprint.rs?ref=7d57b4864a90776d46898f97a3f4b9b6519cf38d", "patch": "@@ -1,3 +1,6 @@\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n import io::Writer;\n import io::WriterUtil;\n import serialization::serializer;"}, {"sha": "53b150a8b6c83ad220eca37f96bfdbe3072cc4af", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d57b4864a90776d46898f97a3f4b9b6519cf38d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d57b4864a90776d46898f97a3f4b9b6519cf38d/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=7d57b4864a90776d46898f97a3f4b9b6519cf38d", "patch": "@@ -140,7 +140,7 @@ fn type_needs_inner(cx: ctx, use: uint, ty: ty::t,\n               ty::ty_fn(_) | ty::ty_ptr(_) | ty::ty_rptr(_, _)\n                | ty::ty_trait(_, _, _) => false,\n               ty::ty_enum(did, substs) => {\n-                if option::is_none(list::find(enums_seen, |id| id == did)) {\n+                if option::is_none(list::find(enums_seen, |id| *id == did)) {\n                     let seen = @cons(did, enums_seen);\n                     for vec::each(*ty::enum_variants(cx.ccx.tcx, did)) |v| {\n                         for vec::each(v.args) |aty| {"}]}