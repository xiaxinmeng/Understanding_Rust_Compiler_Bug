{"sha": "a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MTk5MDFlM2RhZmJmYjAxZTEwYzUzY2RiNWY5ZmVhNTJhMWVmNmQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-25T05:46:36Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-25T05:46:36Z"}, "message": "trans: save metadata even with -Z no-trans.", "tree": {"sha": "460f8a8e6c168803b4c8cad64b6517395a7f3159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/460f8a8e6c168803b4c8cad64b6517395a7f3159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "html_url": "https://github.com/rust-lang/rust/commit/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/04464db954e457f7f9d0bdc80ec365ddeb75c9cd", "html_url": "https://github.com/rust-lang/rust/commit/04464db954e457f7f9d0bdc80ec365ddeb75c9cd"}], "stats": {"total": 91, "additions": 58, "deletions": 33}, "files": [{"sha": "05ed02211097c309091e83d9bea9a8244acae7ef", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "patch": "@@ -1104,7 +1104,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let no_analysis = debugging_opts.no_analysis;\n \n     let mut output_types = HashMap::new();\n-    if !debugging_opts.parse_only && !no_trans {\n+    if !debugging_opts.parse_only {\n         for list in matches.opt_strs(\"emit\") {\n             for output_type in list.split(',') {\n                 let mut parts = output_type.splitn(2, '=');"}, {"sha": "bd6b0599e7832f4b2cec029eee0e90bde6afa85f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "patch": "@@ -511,10 +511,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n             control.after_write_deps.stop = Compilation::Stop;\n         }\n \n-        if sess.opts.no_trans {\n-            control.after_analysis.stop = Compilation::Stop;\n-        }\n-\n         if !sess.opts.output_types.keys().any(|&i| i == OutputType::Exe) {\n             control.after_llvm.stop = Compilation::Stop;\n         }"}, {"sha": "4640377cf86005bc1dee0c192d44a48ca05906a8", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "patch": "@@ -188,6 +188,11 @@ pub fn link_binary(sess: &Session,\n \n     let mut out_filenames = Vec::new();\n     for &crate_type in sess.crate_types.borrow().iter() {\n+        // Ignore executable crates if we have -Z no-trans, as they will error.\n+        if sess.opts.no_trans && crate_type == config::CrateTypeExecutable {\n+            continue;\n+        }\n+\n         if invalid_output_for_target(sess, crate_type) {\n            bug!(\"invalid output type `{:?}` for target os `{}`\",\n                 crate_type, sess.opts.target_triple);"}, {"sha": "03e12c1c8a7b04f312c8cb0f9123b80754ed02e6", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 41, "deletions": 28, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "patch": "@@ -2432,11 +2432,8 @@ fn contains_null(s: &str) -> bool {\n     s.bytes().any(|b| b == 0)\n }\n \n-pub fn write_metadata<'a, 'tcx>(cx: &SharedCrateContext<'a, 'tcx>,\n-                                krate: &hir::Crate,\n-                                reachable: &NodeSet,\n-                                mir_map: &MirMap<'tcx>)\n-                                -> Vec<u8> {\n+fn write_metadata(cx: &SharedCrateContext,\n+                  reachable_ids: &NodeSet) -> Vec<u8> {\n     use flate;\n \n     let any_library = cx.sess()\n@@ -2452,9 +2449,9 @@ pub fn write_metadata<'a, 'tcx>(cx: &SharedCrateContext<'a, 'tcx>,\n     let metadata = cstore.encode_metadata(cx.tcx(),\n                                           cx.export_map(),\n                                           cx.link_meta(),\n-                                          reachable,\n-                                          mir_map,\n-                                          krate);\n+                                          reachable_ids,\n+                                          cx.mir_map(),\n+                                          cx.tcx().map.krate());\n     let mut compressed = cstore.metadata_encoding_version().to_vec();\n     compressed.extend_from_slice(&flate::deflate_bytes(&metadata));\n \n@@ -2639,10 +2636,12 @@ pub fn filter_reachable_ids(scx: &SharedCrateContext) -> NodeSet {\n                 node: hir::ItemStatic(..), .. }) |\n             hir_map::NodeItem(&hir::Item {\n                 node: hir::ItemFn(..), .. }) |\n-            hir_map::NodeTraitItem(&hir::TraitItem {\n-                node: hir::MethodTraitItem(_, Some(_)), .. }) |\n             hir_map::NodeImplItem(&hir::ImplItem {\n-                node: hir::ImplItemKind::Method(..), .. }) => true,\n+                node: hir::ImplItemKind::Method(..), .. }) => {\n+                let def_id = scx.tcx().map.local_def_id(id);\n+                let scheme = scx.tcx().lookup_item_type(def_id);\n+                scheme.generics.types.is_empty()\n+            }\n \n             _ => false\n         }\n@@ -2686,13 +2685,44 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                              check_overflow,\n                                              check_dropflag);\n \n+    let reachable_symbol_ids = filter_reachable_ids(&shared_ccx);\n+\n+    // Translate the metadata.\n+    let metadata = time(tcx.sess.time_passes(), \"write metadata\", || {\n+        write_metadata(&shared_ccx, &reachable_symbol_ids)\n+    });\n+\n+    let metadata_module = ModuleTranslation {\n+        llcx: shared_ccx.metadata_llcx(),\n+        llmod: shared_ccx.metadata_llmod(),\n+    };\n+    let no_builtins = attr::contains_name(&krate.attrs, \"no_builtins\");\n+\n     let codegen_units = collect_and_partition_translation_items(&shared_ccx);\n     let codegen_unit_count = codegen_units.len();\n     assert!(tcx.sess.opts.cg.codegen_units == codegen_unit_count ||\n             tcx.sess.opts.debugging_opts.incremental.is_some());\n \n     let crate_context_list = CrateContextList::new(&shared_ccx, codegen_units);\n \n+    let modules = crate_context_list.iter()\n+        .map(|ccx| ModuleTranslation { llcx: ccx.llcx(), llmod: ccx.llmod() })\n+        .collect();\n+\n+    // Skip crate items and just output metadata in -Z no-trans mode.\n+    if tcx.sess.opts.no_trans {\n+        let linker_info = LinkerInfo::new(&shared_ccx, &[]);\n+        return CrateTranslation {\n+            modules: modules,\n+            metadata_module: metadata_module,\n+            link: link_meta,\n+            metadata: metadata,\n+            reachable: vec![],\n+            no_builtins: no_builtins,\n+            linker_info: linker_info\n+        };\n+    }\n+\n     {\n         let ccx = crate_context_list.get_ccx(0);\n \n@@ -2722,13 +2752,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let reachable_symbol_ids = filter_reachable_ids(&shared_ccx);\n-\n-    // Translate the metadata.\n-    let metadata = time(tcx.sess.time_passes(), \"write metadata\", || {\n-        write_metadata(&shared_ccx, krate, &reachable_symbol_ids, mir_map)\n-    });\n-\n     if shared_ccx.sess().trans_stats() {\n         let stats = shared_ccx.stats();\n         println!(\"--- trans stats ---\");\n@@ -2758,10 +2781,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n-    let modules = crate_context_list.iter()\n-        .map(|ccx| ModuleTranslation { llcx: ccx.llcx(), llmod: ccx.llmod() })\n-        .collect();\n-\n     let sess = shared_ccx.sess();\n     let mut reachable_symbols = reachable_symbol_ids.iter().map(|&id| {\n         let def_id = shared_ccx.tcx().map.local_def_id(id);\n@@ -2802,12 +2821,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         create_imps(&crate_context_list);\n     }\n \n-    let metadata_module = ModuleTranslation {\n-        llcx: shared_ccx.metadata_llcx(),\n-        llmod: shared_ccx.metadata_llmod(),\n-    };\n-    let no_builtins = attr::contains_name(&krate.attrs, \"no_builtins\");\n-\n     let linker_info = LinkerInfo::new(&shared_ccx, &reachable_symbols);\n     CrateTranslation {\n         modules: modules,"}, {"sha": "1ddcbc79aed5fe0ea04d06c35459ead0c9361ead", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "patch": "@@ -502,6 +502,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n         &self.symbol_hasher\n     }\n \n+    pub fn mir_map(&self) -> &MirMap<'tcx> {\n+        &self.mir_map\n+    }\n+\n     pub fn metadata_symbol_name(&self) -> String {\n         format!(\"rust_metadata_{}_{}\",\n                 self.link_meta().crate_name,"}, {"sha": "4040b55ff98cbf094cd273a686844ad2d2c14dea", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a619901e3dafbfb01e10c53cdb5f9fea52a1ef6d", "patch": "@@ -371,9 +371,16 @@ actual:\\n\\\n         } else {\n             &*self.config.target\n         };\n+\n+        let out_dir = self.output_base_name().with_extension(\"pretty-out\");\n+        let _ = fs::remove_dir_all(&out_dir);\n+        self.create_dir_racy(&out_dir);\n+\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         let mut args = vec!(\"-\".to_owned(),\n                             \"-Zno-trans\".to_owned(),\n+                            \"--out-dir\".to_owned(),\n+                            out_dir.to_str().unwrap().to_owned(),\n                             format!(\"--target={}\", target),\n                             \"-L\".to_owned(),\n                             self.config.build_base.to_str().unwrap().to_owned(),"}]}