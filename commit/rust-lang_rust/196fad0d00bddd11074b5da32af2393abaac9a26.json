{"sha": "196fad0d00bddd11074b5da32af2393abaac9a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NmZhZDBkMDBiZGRkMTEwNzRiNWRhMzJhZjIzOTNhYmFhYzlhMjY=", "commit": {"author": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2018-01-30T20:33:33Z"}, "committer": {"name": "Badel2", "email": "2badel2@gmail.com", "date": "2018-02-01T22:03:19Z"}, "message": "Turn `type_id` into a constant intrinsic\n\nAdd rustc_const_unstable attribute for `any::TypeId::of`\n\nAdd test for `const fn TypeId::of`", "tree": {"sha": "39a5a33c03509494bb8a14194e0923109dc26076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39a5a33c03509494bb8a14194e0923109dc26076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/196fad0d00bddd11074b5da32af2393abaac9a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/196fad0d00bddd11074b5da32af2393abaac9a26", "html_url": "https://github.com/rust-lang/rust/commit/196fad0d00bddd11074b5da32af2393abaac9a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/196fad0d00bddd11074b5da32af2393abaac9a26/comments", "author": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Badel2", "id": 15879619, "node_id": "MDQ6VXNlcjE1ODc5NjE5", "avatar_url": "https://avatars.githubusercontent.com/u/15879619?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Badel2", "html_url": "https://github.com/Badel2", "followers_url": "https://api.github.com/users/Badel2/followers", "following_url": "https://api.github.com/users/Badel2/following{/other_user}", "gists_url": "https://api.github.com/users/Badel2/gists{/gist_id}", "starred_url": "https://api.github.com/users/Badel2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Badel2/subscriptions", "organizations_url": "https://api.github.com/users/Badel2/orgs", "repos_url": "https://api.github.com/users/Badel2/repos", "events_url": "https://api.github.com/users/Badel2/events{/privacy}", "received_events_url": "https://api.github.com/users/Badel2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "def3269a71be2e737cad27418a3dad9f5bd6cd32", "url": "https://api.github.com/repos/rust-lang/rust/commits/def3269a71be2e737cad27418a3dad9f5bd6cd32", "html_url": "https://github.com/rust-lang/rust/commit/def3269a71be2e737cad27418a3dad9f5bd6cd32"}], "stats": {"total": 106, "additions": 105, "deletions": 1}, "files": [{"sha": "566bfe2a3fb5e8c85c37a3f3714d097cebeaa8c7", "filename": "src/libcore/any.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -367,9 +367,36 @@ impl TypeId {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(stage0)]\n     pub fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId {\n             t: unsafe { intrinsics::type_id::<T>() },\n         }\n     }\n+\n+    /// Returns the `TypeId` of the type this generic function has been\n+    /// instantiated with.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::any::{Any, TypeId};\n+    ///\n+    /// fn is_string<T: ?Sized + Any>(_s: &T) -> bool {\n+    ///     TypeId::of::<String>() == TypeId::of::<T>()\n+    /// }\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(is_string(&0), false);\n+    ///     assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n+    /// }\n+    /// ```\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature=\"const_type_id\")]\n+    #[cfg(not(stage0))]\n+    pub const fn of<T: ?Sized + 'static>() -> TypeId {\n+        TypeId {\n+            t: unsafe { intrinsics::type_id::<T>() },\n+        }\n+    }\n }"}, {"sha": "7f094e580ab5c16a4eddb0ae47f789e585f85e7c", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -91,6 +91,7 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(doc_spotlight)]\n+#![feature(rustc_const_unstable)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "17a9454e9d45662c3cfee4ea850321cd81021e53", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -328,6 +328,10 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n                     return Ok(mk_const(Integral(Usize(ConstUsize::new(align,\n                         tcx.sess.target.usize_ty).unwrap()))));\n                 }\n+                \"type_id\" => {\n+                    let type_id = tcx.type_id_hash(substs.type_at(0));\n+                    return Ok(mk_const(Integral(U64(type_id))));\n+                }\n                 _ => signal!(e, TypeckError)\n             }\n           }"}, {"sha": "d3b084fde6ab899c6ec55944dea4968c2e7fb260", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -243,6 +243,12 @@ impl<'tcx> super::Machine<'tcx> for CompileTimeEvaluator {\n                 ecx.write_primval(dest, PrimVal::from_u128(size), dest_layout.ty)?;\n             }\n \n+            \"type_id\" => {\n+                let ty = substs.type_at(0);\n+                let type_id = ecx.tcx.type_id_hash(ty) as u128;\n+                ecx.write_primval(dest, PrimVal::from_u128(type_id), dest_layout.ty)?;\n+            }\n+\n             name => return Err(ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", name)).into()),\n         }\n "}, {"sha": "da76adfd48f3ffd4306317d4579c7fc120c2c63f", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -737,7 +737,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n                         match &self.tcx.item_name(def_id)[..] {\n-                            \"size_of\" | \"min_align_of\" => is_const_fn = Some(def_id),\n+                            \"size_of\" | \"min_align_of\" | \"type_id\" => is_const_fn = Some(def_id),\n \n                             name if name.starts_with(\"simd_shuffle\") => {\n                                 is_shuffle = true;"}, {"sha": "cd1975488a24a3f201d9ece1574685592f2d3ce5", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -411,6 +411,11 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                                         self.cx.align_of(substs.type_at(0)).abi());\n                                     Ok(Const::new(llval, tcx.types.usize))\n                                 }\n+                                \"type_id\" => {\n+                                    let llval = C_u64(self.cx,\n+                                        self.cx.tcx.type_id_hash(substs.type_at(0)));\n+                                    Ok(Const::new(llval, tcx.types.u64))\n+                                }\n                                 _ => span_bug!(span, \"{:?} in constant\", terminator.kind)\n                             }\n                         } else if let Some((op, is_checked)) = self.is_binop_lang_item(def_id) {"}, {"sha": "401125cef09d8a89be92b24e2d6ecdf656bb2029", "filename": "src/test/compile-fail/const-typeid-of.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Ftest%2Fcompile-fail%2Fconst-typeid-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Ftest%2Fcompile-fail%2Fconst-typeid-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-typeid-of.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::any::TypeId;\n+\n+struct A;\n+\n+fn main() {\n+    const A_ID: TypeId = TypeId::of::<A>();\n+    //~^ ERROR `std::any::TypeId::of` is not yet stable as a const fn\n+}"}, {"sha": "ce29e55c6d7202ff705fc5ec0fe1bb924301aa7b", "filename": "src/test/run-pass/const-typeid-of.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Ftest%2Frun-pass%2Fconst-typeid-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196fad0d00bddd11074b5da32af2393abaac9a26/src%2Ftest%2Frun-pass%2Fconst-typeid-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-typeid-of.rs?ref=196fad0d00bddd11074b5da32af2393abaac9a26", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(core_intrinsics)]\n+#![feature(const_type_id)]\n+\n+use std::any::TypeId;\n+\n+struct A;\n+\n+static ID_ISIZE: TypeId = TypeId::of::<isize>();\n+\n+pub fn main() {\n+    assert_eq!(ID_ISIZE, TypeId::of::<isize>());\n+\n+    // sanity test of TypeId\n+    const T: (TypeId, TypeId, TypeId) = (TypeId::of::<usize>(),\n+                     TypeId::of::<&'static str>(),\n+                     TypeId::of::<A>());\n+    let (d, e, f) = (TypeId::of::<usize>(), TypeId::of::<&'static str>(),\n+                     TypeId::of::<A>());\n+\n+    assert!(T.0 != T.1);\n+    assert!(T.0 != T.2);\n+    assert!(T.1 != T.2);\n+\n+    assert_eq!(T.0, d);\n+    assert_eq!(T.1, e);\n+    assert_eq!(T.2, f);\n+\n+    // Check fn pointer against collisions\n+    const F: (TypeId, TypeId) = (TypeId::of::<fn(fn(A) -> A) -> A>(),\n+            TypeId::of::<fn(fn() -> A, A) -> A>());\n+\n+    assert!(F.0 != F.1);\n+}"}]}