{"sha": "1e6d8495ba63255407ebea058f2194b65ccc307d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNmQ4NDk1YmE2MzI1NTQwN2ViZWEwNThmMjE5NGI2NWNjYzMwN2Q=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-07T04:30:49Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-07T15:18:06Z"}, "message": "Avoid temporary allocations in `render_assoc_item`\n\n`render_assoc_item` came up as very hot in a profile of rustdoc on\n`bevy`.  This avoids some temporary allocations just to calculate the\nlength of the header.\n\nThis should be a strict improvement, since all string formatting was\ndone twice before.", "tree": {"sha": "9b3d0ede61c646a66783d8497fe51162b58287e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b3d0ede61c646a66783d8497fe51162b58287e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e6d8495ba63255407ebea058f2194b65ccc307d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e6d8495ba63255407ebea058f2194b65ccc307d", "html_url": "https://github.com/rust-lang/rust/commit/1e6d8495ba63255407ebea058f2194b65ccc307d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e6d8495ba63255407ebea058f2194b65ccc307d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edeee915b1c52f97411e57ef6b1a8bd46548a37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edeee915b1c52f97411e57ef6b1a8bd46548a37a", "html_url": "https://github.com/rust-lang/rust/commit/edeee915b1c52f97411e57ef6b1a8bd46548a37a"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "60106f3b7ae12f77cbd9f34d3b16a0d53d0b0fa0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e6d8495ba63255407ebea058f2194b65ccc307d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6d8495ba63255407ebea058f2194b65ccc307d/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1e6d8495ba63255407ebea058f2194b65ccc307d", "patch": "@@ -105,6 +105,10 @@ impl Buffer {\n     crate fn is_for_html(&self) -> bool {\n         self.for_html\n     }\n+\n+    crate fn reserve(&mut self, additional: usize) {\n+        self.buffer.reserve(additional)\n+    }\n }\n \n /// Wrapper struct for properly emitting a function or method declaration."}, {"sha": "375cf1d0c8f2e5b0490281749b1679b63232ba28", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1e6d8495ba63255407ebea058f2194b65ccc307d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e6d8495ba63255407ebea058f2194b65ccc307d/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=1e6d8495ba63255407ebea058f2194b65ccc307d", "patch": "@@ -2999,36 +2999,44 @@ fn render_assoc_item(\n                 href(did, cx.cache()).map(|p| format!(\"{}#{}.{}\", p.0, ty, name)).unwrap_or(anchor)\n             }\n         };\n-        let mut header_len = format!(\n-            \"{}{}{}{}{}{:#}fn {}{:#}\",\n-            meth.visibility.print_with_space(cx.tcx(), meth.def_id, cx.cache()),\n-            header.constness.print_with_space(),\n-            header.asyncness.print_with_space(),\n-            header.unsafety.print_with_space(),\n-            print_default_space(meth.is_default()),\n-            print_abi_with_space(header.abi),\n-            name,\n-            g.print(cx.cache())\n-        )\n-        .len();\n+        let tcx = cx.tcx();\n+        let vis = meth.visibility.print_with_space(tcx, meth.def_id, cx.cache()).to_string();\n+        let constness = header.constness.print_with_space();\n+        let asyncness = header.asyncness.print_with_space();\n+        let unsafety = header.unsafety.print_with_space();\n+        let defaultness = print_default_space(meth.is_default());\n+        let abi = print_abi_with_space(header.abi).to_string();\n+        // NOTE: `{:#}` does not print HTML formatting, `{}` does. So `g.print` can't be reused between the length calculation and `write!`.\n+        let generics_len = format!(\"{:#}\", g.print(cx.cache())).len();\n+        let mut header_len = \"fn \".len()\n+            + vis.len()\n+            + constness.len()\n+            + asyncness.len()\n+            + unsafety.len()\n+            + defaultness.len()\n+            + abi.len()\n+            + name.as_str().len()\n+            + generics_len;\n+\n         let (indent, end_newline) = if parent == ItemType::Trait {\n             header_len += 4;\n             (4, false)\n         } else {\n             (0, true)\n         };\n         render_attributes(w, meth, false);\n+        w.reserve(header_len + \"<a href=\\\"\\\" class=\\\"fnname\\\">{\".len() + \"</a>\".len());\n         write!(\n             w,\n             \"{}{}{}{}{}{}{}fn <a href=\\\"{href}\\\" class=\\\"fnname\\\">{name}</a>\\\n              {generics}{decl}{spotlight}{where_clause}\",\n             if parent == ItemType::Trait { \"    \" } else { \"\" },\n-            meth.visibility.print_with_space(cx.tcx(), meth.def_id, cx.cache()),\n-            header.constness.print_with_space(),\n-            header.asyncness.print_with_space(),\n-            header.unsafety.print_with_space(),\n-            print_default_space(meth.is_default()),\n-            print_abi_with_space(header.abi),\n+            vis,\n+            constness,\n+            asyncness,\n+            unsafety,\n+            defaultness,\n+            abi,\n             href = href,\n             name = name,\n             generics = g.print(cx.cache()),"}]}