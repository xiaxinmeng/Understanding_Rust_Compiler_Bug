{"sha": "c9a34d209283304732fe2eb2fe3dee3c1afd1488", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5YTM0ZDIwOTI4MzMwNDczMmZlMmViMmZlM2RlZTNjMWFmZDE0ODg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-29T20:13:53Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-29T20:13:53Z"}, "message": "Rollup merge of #27352 - nagisa:illegal-to-invalid-docs, r=steveklabnik\n\nr? @steveklabnik", "tree": {"sha": "da34528e6f9a725d0c3d147917e7d6436482c0a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da34528e6f9a725d0c3d147917e7d6436482c0a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9a34d209283304732fe2eb2fe3dee3c1afd1488", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a34d209283304732fe2eb2fe3dee3c1afd1488", "html_url": "https://github.com/rust-lang/rust/commit/c9a34d209283304732fe2eb2fe3dee3c1afd1488", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9a34d209283304732fe2eb2fe3dee3c1afd1488/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b564a663bbf753f895bf2d7d271f2adc1eb6b48", "html_url": "https://github.com/rust-lang/rust/commit/6b564a663bbf753f895bf2d7d271f2adc1eb6b48"}, {"sha": "91397a6aa33d16cb367f181a1174e80895e46780", "url": "https://api.github.com/repos/rust-lang/rust/commits/91397a6aa33d16cb367f181a1174e80895e46780", "html_url": "https://github.com/rust-lang/rust/commit/91397a6aa33d16cb367f181a1174e80895e46780"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "b6c4905e41cce75f5a4f3ca2f64951e55da25892", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=c9a34d209283304732fe2eb2fe3dee3c1afd1488", "patch": "@@ -85,9 +85,9 @@\n //! format!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"\n //! ```\n //!\n-//! It is illegal to put positional parameters (those without names) after\n-//! arguments which have names. Like with positional parameters, it is illegal\n-//! to provide named parameters that are unused by the format string.\n+//! It is not valid to put positional parameters (those without names) after\n+//! arguments which have names. Like with positional parameters, it is not\n+//! valid to provide named parameters that are unused by the format string.\n //!\n //! ## Argument types\n //!\n@@ -103,19 +103,21 @@\n //! hexadecimal as well as an\n //! octal.\n //!\n-//! There are various parameters which do require a particular type, however. Namely, the `{:.*}`\n-//! syntax, which sets the number of numbers after the decimal in floating-point types:\n+//! There are various parameters which do require a particular type, however.\n+//! Namely, the `{:.*}` syntax, which sets the number of numbers after the\n+//! decimal in floating-point types:\n //!\n //! ```\n //! let formatted_number = format!(\"{:.*}\", 2, 1.234567);\n //!\n //! assert_eq!(\"1.23\", formatted_number)\n //! ```\n //!\n-//! If this syntax is used, then the number of characters to print precedes the actual object being\n-//! formatted, and the number of characters must have the type `usize`. Although a `usize` can be\n-//! printed with `{}`, it is illegal to reference an argument as such. For example this is another\n-//! invalid format string:\n+//! If this syntax is used, then the number of characters to print precedes the\n+//! actual object being formatted, and the number of characters must have the\n+//! type `usize`. Although a `usize` can be printed with `{}`, it is invalid to\n+//! reference an argument as such. For example this is another invalid format\n+//! string:\n //!\n //! ```text\n //! {:.*} {0}"}, {"sha": "ebd6ba544e4604f028e0b8af3f676c380898c402", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c9a34d209283304732fe2eb2fe3dee3c1afd1488", "patch": "@@ -205,7 +205,7 @@ pub trait Copy : Clone {\n /// Any types with interior mutability must also use the `std::cell::UnsafeCell`\n /// wrapper around the value(s) which can be mutated when behind a `&`\n /// reference; not doing this is undefined behaviour (for example,\n-/// `transmute`-ing from `&T` to `&mut T` is illegal).\n+/// `transmute`-ing from `&T` to `&mut T` is invalid).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"sync\"]\n #[rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"]"}, {"sha": "ad891bf8fa6239e35b9359856e2e3cb42186abca", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c9a34d209283304732fe2eb2fe3dee3c1afd1488", "patch": "@@ -479,8 +479,8 @@ macro_rules! int_impl {\n         /// wrapping around at the boundary of the type.\n         ///\n         /// Such wrap-around never actually occurs mathematically;\n-        /// implementation artifacts make `x % y` illegal for `MIN /\n-        /// -1` on a signed type illegal (where `MIN` is the negative\n+        /// implementation artifacts make `x % y` invalid for `MIN /\n+        /// -1` on a signed type (where `MIN` is the negative\n         /// minimal value). In such a case, this function returns `0`.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]\n@@ -1051,8 +1051,8 @@ macro_rules! uint_impl {\n         /// wrapping around at the boundary of the type.\n         ///\n         /// Such wrap-around never actually occurs mathematically;\n-        /// implementation artifacts make `x % y` illegal for `MIN /\n-        /// -1` on a signed type illegal (where `MIN` is the negative\n+        /// implementation artifacts make `x % y` invalid for `MIN /\n+        /// -1` on a signed type (where `MIN` is the negative\n         /// minimal value). In such a case, this function returns `0`.\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n         #[inline(always)]"}, {"sha": "9c2cdba0ae47b214834b8ea8dbceb2417d42b4d4", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=c9a34d209283304732fe2eb2fe3dee3c1afd1488", "patch": "@@ -41,7 +41,7 @@ arms.\n \"##,\n \n E0002: r##\"\n-This error indicates that an empty match expression is illegal because the type\n+This error indicates that an empty match expression is invalid because the type\n it is matching on is non-empty (there exist values of this type). In safe code\n it is impossible to create an instance of an empty type, so empty match\n expressions are almost never desired.  This error is typically fixed by adding\n@@ -1055,7 +1055,7 @@ because the `'static` lifetime is a special built-in lifetime name denoting\n the lifetime of the entire program, this is an error:\n \n ```\n-// error, illegal lifetime parameter name `'static`\n+// error, invalid lifetime parameter name `'static`\n fn foo<'static>(x: &'static str) { }\n ```\n \"##,\n@@ -1805,7 +1805,7 @@ For more information about `const fn`'s, see [RFC 911].\n E0394: r##\"\n From [RFC 246]:\n \n- > It is illegal for a static to reference another static by value. It is\n+ > It is invalid for a static to reference another static by value. It is\n  > required that all references be borrowed.\n \n [RFC 246]: https://github.com/rust-lang/rfcs/pull/246"}, {"sha": "6db4e49e98fabcb4743b8f5a137f4dcb360e6568", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=c9a34d209283304732fe2eb2fe3dee3c1afd1488", "patch": "@@ -106,7 +106,7 @@ mod foo {\n use foo::MyTrait::do_something;\n ```\n \n-It's illegal to directly import methods belonging to a trait or concrete type.\n+It's invalid to directly import methods belonging to a trait or concrete type.\n \"##,\n \n E0255: r##\""}, {"sha": "d94870c68bd4d36b777d69c3dd2bc13895663ab6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9a34d209283304732fe2eb2fe3dee3c1afd1488/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=c9a34d209283304732fe2eb2fe3dee3c1afd1488", "patch": "@@ -584,7 +584,7 @@ extern \"C\" {\n ```\n \n Using this declaration, it must be called with at least one argument, so\n-simply calling `printf()` is illegal. But the following uses are allowed:\n+simply calling `printf()` is invalid. But the following uses are allowed:\n \n ```\n unsafe {"}]}