{"sha": "fd10d209cdceedcb95e51025e624be749e0cc5f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMTBkMjA5Y2RjZWVkY2I5NWU1MTAyNWU2MjRiZTc0OWUwY2M1Zjk=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-02T06:39:39Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-08-12T03:32:56Z"}, "message": "Implement Index for RingBuf\n\nThis also deprecates RingBuf::get. Use indexing instead.", "tree": {"sha": "d82240eca0f8941aa87e271dc6eba1a6075a293e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d82240eca0f8941aa87e271dc6eba1a6075a293e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd10d209cdceedcb95e51025e624be749e0cc5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd10d209cdceedcb95e51025e624be749e0cc5f9", "html_url": "https://github.com/rust-lang/rust/commit/fd10d209cdceedcb95e51025e624be749e0cc5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd10d209cdceedcb95e51025e624be749e0cc5f9/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06727d4720d6a2818ba6701ae7151c4c8d7ceb9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/06727d4720d6a2818ba6701ae7151c4c8d7ceb9f", "html_url": "https://github.com/rust-lang/rust/commit/06727d4720d6a2818ba6701ae7151c4c8d7ceb9f"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "8ab76e57b9358d5f08eb342eaafb7fea925215a2", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fd10d209cdceedcb95e51025e624be749e0cc5f9/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd10d209cdceedcb95e51025e624be749e0cc5f9/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=fd10d209cdceedcb95e51025e624be749e0cc5f9", "patch": "@@ -139,6 +139,8 @@ impl<T> RingBuf<T> {\n     /// # Example\n     ///\n     /// ```rust\n+    /// #![allow(deprecated)]\n+    ///\n     /// use std::collections::RingBuf;\n     ///\n     /// let mut buf = RingBuf::new();\n@@ -147,6 +149,7 @@ impl<T> RingBuf<T> {\n     /// buf.push(5);\n     /// assert_eq!(buf.get(1), &4);\n     /// ```\n+    #[deprecated = \"prefer using indexing, e.g., ringbuf[0]\"]\n     pub fn get<'a>(&'a self, i: uint) -> &'a T {\n         let idx = self.raw_index(i);\n         match *self.elts.get(idx) {\n@@ -169,7 +172,7 @@ impl<T> RingBuf<T> {\n     /// buf.push(4);\n     /// buf.push(5);\n     /// *buf.get_mut(1) = 7;\n-    /// assert_eq!(buf.get(1), &7);\n+    /// assert_eq!(buf[1], 7);\n     /// ```\n     pub fn get_mut<'a>(&'a mut self, i: uint) -> &'a mut T {\n         let idx = self.raw_index(i);\n@@ -195,8 +198,8 @@ impl<T> RingBuf<T> {\n     /// buf.push(4);\n     /// buf.push(5);\n     /// buf.swap(0, 2);\n-    /// assert_eq!(buf.get(0), &5);\n-    /// assert_eq!(buf.get(2), &3);\n+    /// assert_eq!(buf[0], 5);\n+    /// assert_eq!(buf[2], 3);\n     /// ```\n     pub fn swap(&mut self, i: uint, j: uint) {\n         assert!(i < self.len());\n@@ -467,6 +470,21 @@ impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n     }\n }\n \n+impl<A> Index<uint, A> for RingBuf<A> {\n+    #[inline]\n+    fn index<'a>(&'a self, i: &uint) -> &'a A {\n+        self.get(*i)\n+    }\n+}\n+\n+// FIXME(#12825) Indexing will always try IndexMut first and that causes issues.\n+/*impl<A> IndexMut<uint, A> for RingBuf<A> {\n+    #[inline]\n+    fn index_mut<'a>(&'a mut self, index: &uint) -> &'a mut A {\n+        self.get_mut(*index)\n+    }\n+}*/\n+\n impl<A> FromIterator<A> for RingBuf<A> {\n     fn from_iter<T: Iterator<A>>(iterator: T) -> RingBuf<A> {\n         let (lower, _) = iterator.size_hint();\n@@ -644,6 +662,25 @@ mod tests {\n         }\n     }\n \n+    #[test]\n+    fn test_index() {\n+        let mut deq = RingBuf::new();\n+        for i in range(1u, 4) {\n+            deq.push_front(i);\n+        }\n+        assert_eq!(deq[1], 2);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_index_out_of_bounds() {\n+        let mut deq = RingBuf::new();\n+        for i in range(1u, 4) {\n+            deq.push_front(i);\n+        }\n+        deq[3];\n+    }\n+\n     #[bench]\n     fn bench_new(b: &mut test::Bencher) {\n         b.iter(|| {"}]}