{"sha": "406f366ccc8b903f457cc694dc1214794c0cfc88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNmYzNjZjY2M4YjkwM2Y0NTdjYzY5NGRjMTIxNDc5NGMwY2ZjODg=", "commit": {"author": {"name": "Jeremy A. Kolb", "email": "jkolb@ara.com", "date": "2018-10-24T18:24:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T20:30:57Z"}, "message": "Add DeclarationDescriptor and ReferenceDescriptor\n\nFixes #142\nFixes #146", "tree": {"sha": "73fded51f2b3f41a0f08683291cda25b0cfef59a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73fded51f2b3f41a0f08683291cda25b0cfef59a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406f366ccc8b903f457cc694dc1214794c0cfc88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406f366ccc8b903f457cc694dc1214794c0cfc88", "html_url": "https://github.com/rust-lang/rust/commit/406f366ccc8b903f457cc694dc1214794c0cfc88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406f366ccc8b903f457cc694dc1214794c0cfc88/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ebe6380aef233fff86b7e6cead361787bf1f65", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ebe6380aef233fff86b7e6cead361787bf1f65", "html_url": "https://github.com/rust-lang/rust/commit/55ebe6380aef233fff86b7e6cead361787bf1f65"}], "stats": {"total": 81, "additions": 77, "deletions": 4}, "files": [{"sha": "e27f8314ad552aa3084bc12160e08d9e058f0cea", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/406f366ccc8b903f457cc694dc1214794c0cfc88/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406f366ccc8b903f457cc694dc1214794c0cfc88/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=406f366ccc8b903f457cc694dc1214794c0cfc88", "patch": "@@ -5,16 +5,17 @@ use std::sync::Arc;\n \n use ra_syntax::{\n     SmolStr,\n-    ast::{FnDefNode},\n+    ast::{self, AstNode, FnDefNode},\n+    TextRange\n };\n \n use crate::{\n     FileId, Cancelable,\n     db::SyntaxDatabase,\n     descriptors::module::{ModuleTree, ModuleId, ModuleScope},\n-    descriptors::function::{FnId, FnScopes},\n+    descriptors::function::{FnId, FnScopes, resolve_local_name},\n     input::SourceRootId,\n-    syntax_ptr::SyntaxPtrDatabase,\n+    syntax_ptr::{SyntaxPtrDatabase, LocalSyntaxPtr},\n };\n \n \n@@ -44,3 +45,53 @@ salsa::query_group! {\n         }\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct ReferenceDescriptor {\n+    pub range: TextRange,\n+    pub name: String\n+}\n+\n+#[derive(Debug)]\n+pub struct DeclarationDescriptor<'a> {\n+    pat: ast::BindPat<'a>,\n+    pub range: TextRange\n+}\n+\n+impl<'a> DeclarationDescriptor<'a> {\n+    pub fn new(pat: ast::BindPat) -> DeclarationDescriptor {\n+        let range = pat.syntax().range();\n+\n+        DeclarationDescriptor {\n+            pat,\n+            range\n+        }\n+    }\n+\n+    pub fn find_all_refs(&self) -> Vec<ReferenceDescriptor> {\n+        let name_ptr = LocalSyntaxPtr::new(self.pat.syntax());\n+\n+        let fn_def = match self.pat.syntax().ancestors().find_map(ast::FnDef::cast) {\n+            Some(def) => def,\n+            None => return Default::default()\n+        };\n+\n+        let fn_scopes = FnScopes::new(fn_def);\n+\n+        let refs : Vec<_> = fn_def.syntax().descendants()\n+            .filter_map(ast::NameRef::cast)\n+            .filter(|name_ref| {\n+                match resolve_local_name(*name_ref, &fn_scopes) {\n+                    None => false,\n+                    Some(entry) => entry.ptr() == name_ptr,\n+                }\n+            })\n+            .map(|name_ref| ReferenceDescriptor {\n+                name: name_ref.syntax().text().to_string(),\n+                range : name_ref.syntax().range(),\n+            })\n+            .collect();\n+\n+        refs\n+    }\n+}"}, {"sha": "f950a799571f3aedd84d1b21c75044004a5f9269", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/406f366ccc8b903f457cc694dc1214794c0cfc88/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406f366ccc8b903f457cc694dc1214794c0cfc88/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=406f366ccc8b903f457cc694dc1214794c0cfc88", "patch": "@@ -22,7 +22,7 @@ use crate::{\n     },\n     input::{SourceRootId, FilesDatabase, SourceRoot, WORKSPACE},\n     descriptors::{\n-        DescriptorDatabase,\n+        DescriptorDatabase, DeclarationDescriptor,\n         module::{ModuleTree, Problem},\n         function::{FnDescriptor, FnId},\n     },\n@@ -327,6 +327,17 @@ impl AnalysisImpl {\n \n         let mut ret = vec![];\n \n+        if let Some(binding) = find_node_at_offset::<ast::BindPat>(syntax, offset) {\n+            let decl = DeclarationDescriptor::new(binding);\n+\n+            ret.push((file_id, decl.range));\n+\n+            ret.extend(decl.find_all_refs().into_iter()\n+                .map(|ref_desc| (file_id, ref_desc.range )));\n+\n+            return ret;\n+        }\n+\n         // Find the symbol we are looking for\n         if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(syntax, offset) {\n "}, {"sha": "22d27cdbe83851dc0afd29f1377880a13e24d425", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/406f366ccc8b903f457cc694dc1214794c0cfc88/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406f366ccc8b903f457cc694dc1214794c0cfc88/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=406f366ccc8b903f457cc694dc1214794c0cfc88", "patch": "@@ -377,6 +377,17 @@ fn test_find_all_refs_for_param_inside() {\n     assert_eq!(refs.len(), 2);\n }\n \n+#[test]\n+fn test_find_all_refs_for_fn_param() {\n+    let code = r#\"\n+    fn foo(i<|> : u32) -> u32 {\n+        i\n+    }\"#;\n+\n+    let refs = get_all_refs(code);\n+    assert_eq!(refs.len(), 2);\n+}\n+\n #[test]\n fn test_complete_crate_path() {\n     let (analysis, position) = analysis_and_position(\""}]}