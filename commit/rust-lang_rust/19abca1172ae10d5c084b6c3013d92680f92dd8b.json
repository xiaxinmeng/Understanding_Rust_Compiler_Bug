{"sha": "19abca1172ae10d5c084b6c3013d92680f92dd8b", "node_id": "C_kwDOAAsO6NoAKDE5YWJjYTExNzJhZTEwZDVjMDg0YjZjMzAxM2Q5MjY4MGY5MmRkOGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-28T09:08:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-28T09:08:49Z"}, "message": "Auto merge of #97476 - Dylan-DPC:rollup-t53nxoe, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #94640 (Partially stabilize `(const_)slice_ptr_len` feature by stabilizing `NonNull::len`)\n - #97034 (Implement `Hash` for `core::alloc::Layout`)\n - #97327 (macros: introduce `fluent_messages` macro )\n - #97448 (docs: Don't imply that OsStr on Unix is always UTF-8)\n - #97466 ([bootstrap] Move `sanitize_sh` from `dist` to `install`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6c3c3f3cb702a8e217dce77865c487a2393b7e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c3c3f3cb702a8e217dce77865c487a2393b7e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19abca1172ae10d5c084b6c3013d92680f92dd8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19abca1172ae10d5c084b6c3013d92680f92dd8b", "html_url": "https://github.com/rust-lang/rust/commit/19abca1172ae10d5c084b6c3013d92680f92dd8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19abca1172ae10d5c084b6c3013d92680f92dd8b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b97bfc3b38ad46fef419950d434d9a8e8f5c2d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97bfc3b38ad46fef419950d434d9a8e8f5c2d80", "html_url": "https://github.com/rust-lang/rust/commit/b97bfc3b38ad46fef419950d434d9a8e8f5c2d80"}, {"sha": "5badc299d90b7bfb82f22a5a0071b20c4b836b16", "url": "https://api.github.com/repos/rust-lang/rust/commits/5badc299d90b7bfb82f22a5a0071b20c4b836b16", "html_url": "https://github.com/rust-lang/rust/commit/5badc299d90b7bfb82f22a5a0071b20c4b836b16"}], "stats": {"total": 543, "additions": 494, "deletions": 49}, "files": [{"sha": "42bf166a71cb2002da876f58427d844f84644fec", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -4010,10 +4010,14 @@ dependencies = [\n name = \"rustc_macros\"\n version = \"0.1.0\"\n dependencies = [\n+ \"annotate-snippets\",\n+ \"fluent-bundle\",\n+ \"fluent-syntax\",\n  \"proc-macro2\",\n  \"quote\",\n  \"syn\",\n  \"synstructure\",\n+ \"unic-langid\",\n ]\n \n [[package]]"}, {"sha": "7faf14a2472416701beec3b3782f4e916bc5d2c6", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -6,7 +6,7 @@\n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n use rustc_data_structures::sync::Lrc;\n-use rustc_macros::{Decodable, Encodable};\n+use rustc_macros::{fluent_messages, Decodable, Encodable};\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::error::Error;\n@@ -29,8 +29,13 @@ use intl_memoizer::IntlLangMemoizer;\n pub use fluent_bundle::{FluentArgs, FluentError, FluentValue};\n pub use unic_langid::{langid, LanguageIdentifier};\n \n-pub static DEFAULT_LOCALE_RESOURCES: &'static [&'static str] =\n-    &[include_str!(\"../locales/en-US/typeck.ftl\"), include_str!(\"../locales/en-US/parser.ftl\")];\n+// Generates `DEFAULT_LOCALE_RESOURCES` static and `fluent_generated` module.\n+fluent_messages! {\n+    parser => \"../locales/en-US/parser.ftl\",\n+    typeck => \"../locales/en-US/typeck.ftl\",\n+}\n+\n+pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};\n \n pub type FluentBundle = fluent_bundle::bundle::FluentBundle<FluentResource, IntlLangMemoizer>;\n "}, {"sha": "5b9b65da34364a3724977b6ee3370022da84e316", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -31,8 +31,8 @@ use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{self, Lock, Lrc};\n use rustc_data_structures::AtomicRef;\n pub use rustc_error_messages::{\n-    fallback_fluent_bundle, fluent_bundle, DiagnosticMessage, FluentBundle, LanguageIdentifier,\n-    LazyFallbackBundle, MultiSpan, SpanLabel, DEFAULT_LOCALE_RESOURCES,\n+    fallback_fluent_bundle, fluent, fluent_bundle, DiagnosticMessage, FluentBundle,\n+    LanguageIdentifier, LazyFallbackBundle, MultiSpan, SpanLabel, DEFAULT_LOCALE_RESOURCES,\n };\n pub use rustc_lint_defs::{pluralize, Applicability};\n use rustc_span::source_map::SourceMap;"}, {"sha": "25b3aadc1c527c6e241a4e3a91f6067f7fcfc247", "filename": "compiler/rustc_macros/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2FCargo.toml?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -7,7 +7,11 @@ edition = \"2021\"\n proc-macro = true\n \n [dependencies]\n+annotate-snippets = \"0.8.0\"\n+fluent-bundle = \"0.15.2\"\n+fluent-syntax = \"0.11\"\n synstructure = \"0.12.1\"\n syn = { version = \"1\", features = [\"full\"] }\n proc-macro2 = \"1\"\n quote = \"1\"\n+unic-langid = { version = \"0.9.0\", features = [\"macros\"] }"}, {"sha": "8523d7fa9f9882d2d9d3111aa0068cf91452da79", "filename": "compiler/rustc_macros/src/diagnostics/fluent.rs", "status": "added", "additions": 254, "deletions": 0, "changes": 254, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Ffluent.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -0,0 +1,254 @@\n+use annotate_snippets::{\n+    display_list::DisplayList,\n+    snippet::{Annotation, AnnotationType, Slice, Snippet, SourceAnnotation},\n+};\n+use fluent_bundle::{FluentBundle, FluentError, FluentResource};\n+use fluent_syntax::{\n+    ast::{Attribute, Entry, Identifier, Message},\n+    parser::ParserError,\n+};\n+use proc_macro::{Diagnostic, Level, Span};\n+use proc_macro2::TokenStream;\n+use quote::quote;\n+use std::{\n+    collections::HashMap,\n+    fs::File,\n+    io::Read,\n+    path::{Path, PathBuf},\n+};\n+use syn::{\n+    parse::{Parse, ParseStream},\n+    parse_macro_input,\n+    punctuated::Punctuated,\n+    token, Ident, LitStr, Result,\n+};\n+use unic_langid::langid;\n+\n+struct Resource {\n+    ident: Ident,\n+    #[allow(dead_code)]\n+    fat_arrow_token: token::FatArrow,\n+    resource: LitStr,\n+}\n+\n+impl Parse for Resource {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        Ok(Resource {\n+            ident: input.parse()?,\n+            fat_arrow_token: input.parse()?,\n+            resource: input.parse()?,\n+        })\n+    }\n+}\n+\n+struct Resources(Punctuated<Resource, token::Comma>);\n+\n+impl Parse for Resources {\n+    fn parse(input: ParseStream<'_>) -> Result<Self> {\n+        let mut resources = Punctuated::new();\n+        loop {\n+            if input.is_empty() || input.peek(token::Brace) {\n+                break;\n+            }\n+            let value = input.parse()?;\n+            resources.push_value(value);\n+            if !input.peek(token::Comma) {\n+                break;\n+            }\n+            let punct = input.parse()?;\n+            resources.push_punct(punct);\n+        }\n+        Ok(Resources(resources))\n+    }\n+}\n+\n+/// Helper function for returning an absolute path for macro-invocation relative file paths.\n+///\n+/// If the input is already absolute, then the input is returned. If the input is not absolute,\n+/// then it is appended to the directory containing the source file with this macro invocation.\n+fn invocation_relative_path_to_absolute(span: Span, path: &str) -> PathBuf {\n+    let path = Path::new(path);\n+    if path.is_absolute() {\n+        path.to_path_buf()\n+    } else {\n+        // `/a/b/c/foo/bar.rs` contains the current macro invocation\n+        let mut source_file_path = span.source_file().path();\n+        // `/a/b/c/foo/`\n+        source_file_path.pop();\n+        // `/a/b/c/foo/../locales/en-US/example.ftl`\n+        source_file_path.push(path);\n+        source_file_path\n+    }\n+}\n+\n+/// See [rustc_macros::fluent_messages].\n+pub(crate) fn fluent_messages(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\n+    let resources = parse_macro_input!(input as Resources);\n+\n+    // Cannot iterate over individual messages in a bundle, so do that using the\n+    // `FluentResource` instead. Construct a bundle anyway to find out if there are conflicting\n+    // messages in the resources.\n+    let mut bundle = FluentBundle::new(vec![langid!(\"en-US\")]);\n+\n+    // Map of Fluent identifiers to the `Span` of the resource that defined them, used for better\n+    // diagnostics.\n+    let mut previous_defns = HashMap::new();\n+\n+    let mut includes = TokenStream::new();\n+    let mut generated = TokenStream::new();\n+    for res in resources.0 {\n+        let ident_span = res.ident.span().unwrap();\n+        let path_span = res.resource.span().unwrap();\n+\n+        let relative_ftl_path = res.resource.value();\n+        let absolute_ftl_path =\n+            invocation_relative_path_to_absolute(ident_span, &relative_ftl_path);\n+        // As this macro also outputs an `include_str!` for this file, the macro will always be\n+        // re-executed when the file changes.\n+        let mut resource_file = match File::open(absolute_ftl_path) {\n+            Ok(resource_file) => resource_file,\n+            Err(e) => {\n+                Diagnostic::spanned(path_span, Level::Error, \"could not open Fluent resource\")\n+                    .note(e.to_string())\n+                    .emit();\n+                continue;\n+            }\n+        };\n+        let mut resource_contents = String::new();\n+        if let Err(e) = resource_file.read_to_string(&mut resource_contents) {\n+            Diagnostic::spanned(path_span, Level::Error, \"could not read Fluent resource\")\n+                .note(e.to_string())\n+                .emit();\n+            continue;\n+        }\n+        let resource = match FluentResource::try_new(resource_contents) {\n+            Ok(resource) => resource,\n+            Err((this, errs)) => {\n+                Diagnostic::spanned(path_span, Level::Error, \"could not parse Fluent resource\")\n+                    .help(\"see additional errors emitted\")\n+                    .emit();\n+                for ParserError { pos, slice: _, kind } in errs {\n+                    let mut err = kind.to_string();\n+                    // Entirely unnecessary string modification so that the error message starts\n+                    // with a lowercase as rustc errors do.\n+                    err.replace_range(\n+                        0..1,\n+                        &err.chars().next().unwrap().to_lowercase().to_string(),\n+                    );\n+\n+                    let line_starts: Vec<usize> = std::iter::once(0)\n+                        .chain(\n+                            this.source()\n+                                .char_indices()\n+                                .filter_map(|(i, c)| Some(i + 1).filter(|_| c == '\\n')),\n+                        )\n+                        .collect();\n+                    let line_start = line_starts\n+                        .iter()\n+                        .enumerate()\n+                        .map(|(line, idx)| (line + 1, idx))\n+                        .filter(|(_, idx)| **idx <= pos.start)\n+                        .last()\n+                        .unwrap()\n+                        .0;\n+\n+                    let snippet = Snippet {\n+                        title: Some(Annotation {\n+                            label: Some(&err),\n+                            id: None,\n+                            annotation_type: AnnotationType::Error,\n+                        }),\n+                        footer: vec![],\n+                        slices: vec![Slice {\n+                            source: this.source(),\n+                            line_start,\n+                            origin: Some(&relative_ftl_path),\n+                            fold: true,\n+                            annotations: vec![SourceAnnotation {\n+                                label: \"\",\n+                                annotation_type: AnnotationType::Error,\n+                                range: (pos.start, pos.end - 1),\n+                            }],\n+                        }],\n+                        opt: Default::default(),\n+                    };\n+                    let dl = DisplayList::from(snippet);\n+                    eprintln!(\"{}\\n\", dl);\n+                }\n+                continue;\n+            }\n+        };\n+\n+        let mut constants = TokenStream::new();\n+        for entry in resource.entries() {\n+            let span = res.ident.span();\n+            if let Entry::Message(Message { id: Identifier { name }, attributes, .. }) = entry {\n+                let _ = previous_defns.entry(name.to_string()).or_insert(ident_span);\n+\n+                // `typeck-foo-bar` => `foo_bar`\n+                let snake_name = Ident::new(\n+                    &name.replace(&format!(\"{}-\", res.ident), \"\").replace(\"-\", \"_\"),\n+                    span,\n+                );\n+                constants.extend(quote! {\n+                    pub const #snake_name: crate::DiagnosticMessage =\n+                        crate::DiagnosticMessage::FluentIdentifier(\n+                            std::borrow::Cow::Borrowed(#name),\n+                            None\n+                        );\n+                });\n+\n+                for Attribute { id: Identifier { name: attr_name }, .. } in attributes {\n+                    let attr_snake_name = attr_name.replace(\"-\", \"_\");\n+                    let snake_name = Ident::new(&format!(\"{snake_name}_{attr_snake_name}\"), span);\n+                    constants.extend(quote! {\n+                        pub const #snake_name: crate::DiagnosticMessage =\n+                            crate::DiagnosticMessage::FluentIdentifier(\n+                                std::borrow::Cow::Borrowed(#name),\n+                                Some(std::borrow::Cow::Borrowed(#attr_name))\n+                            );\n+                    });\n+                }\n+            }\n+        }\n+\n+        if let Err(errs) = bundle.add_resource(resource) {\n+            for e in errs {\n+                match e {\n+                    FluentError::Overriding { kind, id } => {\n+                        Diagnostic::spanned(\n+                            ident_span,\n+                            Level::Error,\n+                            format!(\"overrides existing {}: `{}`\", kind, id),\n+                        )\n+                        .span_help(previous_defns[&id], \"previously defined in this resource\")\n+                        .emit();\n+                    }\n+                    FluentError::ResolverError(_) | FluentError::ParserError(_) => unreachable!(),\n+                }\n+            }\n+        }\n+\n+        includes.extend(quote! { include_str!(#relative_ftl_path), });\n+\n+        let ident = res.ident;\n+        generated.extend(quote! {\n+            pub mod #ident {\n+                #constants\n+            }\n+        });\n+    }\n+\n+    quote! {\n+        #[allow(non_upper_case_globals)]\n+        #[doc(hidden)]\n+        pub mod fluent_generated {\n+            pub static DEFAULT_LOCALE_RESOURCES: &'static [&'static str] = &[\n+                #includes\n+            ];\n+\n+            #generated\n+        }\n+    }\n+    .into()\n+}"}, {"sha": "69573d904d4a9c3475eb844c3119602218bfacf9", "filename": "compiler/rustc_macros/src/diagnostics/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -1,9 +1,11 @@\n mod diagnostic;\n mod error;\n+mod fluent;\n mod subdiagnostic;\n mod utils;\n \n use diagnostic::SessionDiagnosticDerive;\n+pub(crate) use fluent::fluent_messages;\n use proc_macro2::TokenStream;\n use quote::format_ident;\n use subdiagnostic::SessionSubdiagnosticDerive;\n@@ -12,7 +14,7 @@ use synstructure::Structure;\n /// Implements `#[derive(SessionDiagnostic)]`, which allows for errors to be specified as a struct,\n /// independent from the actual diagnostics emitting code.\n ///\n-/// ```ignore (pseudo-rust)\n+/// ```ignore (rust)\n /// # extern crate rustc_errors;\n /// # use rustc_errors::Applicability;\n /// # extern crate rustc_span;\n@@ -43,7 +45,7 @@ use synstructure::Structure;\n ///\n /// Then, later, to emit the error:\n ///\n-/// ```ignore (pseudo-rust)\n+/// ```ignore (rust)\n /// sess.emit_err(MoveOutOfBorrowError {\n ///     expected,\n ///     actual,\n@@ -67,7 +69,7 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n /// suggestions to be specified as a structs or enums, independent from the actual diagnostics\n /// emitting code or diagnostic derives.\n ///\n-/// ```ignore (pseudo-rust)\n+/// ```ignore (rust)\n /// #[derive(SessionSubdiagnostic)]\n /// pub enum ExpectedIdentifierLabel<'tcx> {\n ///     #[label(slug = \"parser-expected-identifier\")]\n@@ -104,7 +106,7 @@ pub fn session_diagnostic_derive(s: Structure<'_>) -> TokenStream {\n ///\n /// Then, later, to add the subdiagnostic:\n ///\n-/// ```ignore (pseudo-rust)\n+/// ```ignore (rust)\n /// diag.subdiagnostic(ExpectedIdentifierLabel::WithoutFound { span });\n ///\n /// diag.subdiagnostic(RawIdentifierSuggestion { span, applicability, ident });"}, {"sha": "7c8e3c6d1402474882a6071c32caa496c7c69bf1", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -2,6 +2,7 @@\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(proc_macro_diagnostic)]\n+#![feature(proc_macro_span)]\n #![allow(rustc::default_hash_types)]\n #![recursion_limit = \"128\"]\n \n@@ -49,6 +50,64 @@ pub fn newtype_index(input: TokenStream) -> TokenStream {\n     newtype::newtype(input)\n }\n \n+/// Implements the `fluent_messages` macro, which performs compile-time validation of the\n+/// compiler's Fluent resources (i.e. that the resources parse and don't multiply define the same\n+/// messages) and generates constants that make using those messages in diagnostics more ergonomic.\n+///\n+/// For example, given the following invocation of the macro..\n+///\n+/// ```ignore (rust)\n+/// fluent_messages! {\n+///     typeck => \"./typeck.ftl\",\n+/// }\n+/// ```\n+/// ..where `typeck.ftl` has the following contents..\n+///\n+/// ```fluent\n+/// typeck-field-multiply-specified-in-initializer =\n+///     field `{$ident}` specified more than once\n+///     .label = used more than once\n+///     .label-previous-use = first use of `{$ident}`\n+/// ```\n+/// ...then the macro parse the Fluent resource, emitting a diagnostic if it fails to do so, and\n+/// will generate the following code:\n+///\n+/// ```ignore (rust)\n+/// pub static DEFAULT_LOCALE_RESOURCES: &'static [&'static str] = &[\n+///     include_str!(\"./typeck.ftl\"),\n+/// ];\n+///\n+/// mod fluent_generated {\n+///     mod typeck {\n+///         pub const field_multiply_specified_in_initializer: DiagnosticMessage =\n+///             DiagnosticMessage::fluent(\"typeck-field-multiply-specified-in-initializer\");\n+///         pub const field_multiply_specified_in_initializer_label_previous_use: DiagnosticMessage =\n+///             DiagnosticMessage::fluent_attr(\n+///                 \"typeck-field-multiply-specified-in-initializer\",\n+///                 \"previous-use-label\"\n+///             );\n+///     }\n+/// }\n+/// ```\n+/// When emitting a diagnostic, the generated constants can be used as follows:\n+///\n+/// ```ignore (rust)\n+/// let mut err = sess.struct_span_err(\n+///     span,\n+///     fluent::typeck::field_multiply_specified_in_initializer\n+/// );\n+/// err.span_default_label(span);\n+/// err.span_label(\n+///     previous_use_span,\n+///     fluent::typeck::field_multiply_specified_in_initializer_label_previous_use\n+/// );\n+/// err.emit();\n+/// ```\n+#[proc_macro]\n+pub fn fluent_messages(input: TokenStream) -> TokenStream {\n+    diagnostics::fluent_messages(input)\n+}\n+\n decl_derive!([HashStable, attributes(stable_hasher)] => hash_stable::hash_stable_derive);\n decl_derive!(\n     [HashStable_Generic, attributes(stable_hasher)] =>"}, {"sha": "d9c9f2920b07911719bd6813d8b1cdd4c51ef5d8", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -1,7 +1,5 @@\n //! Errors emitted by typeck.\n-use rustc_errors::{\n-    error_code, Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed,\n-};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_session::{parse::ParseSess, SessionDiagnostic};\n@@ -264,10 +262,9 @@ pub struct MissingTypeParams {\n // Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n     fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        static SLUG: &'static str = \"typeck-missing-type-params\";\n         let mut err = sess.span_diagnostic.struct_span_err_with_code(\n             self.span,\n-            DiagnosticMessage::fluent(SLUG),\n+            rustc_errors::fluent::typeck::missing_type_params,\n             error_code!(E0393),\n         );\n         err.set_arg(\"parameterCount\", self.missing_type_params.len());\n@@ -280,7 +277,7 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 .join(\", \"),\n         );\n \n-        err.span_label(self.def_span, DiagnosticMessage::fluent_attr(SLUG, \"label\"));\n+        err.span_label(self.def_span, rustc_errors::fluent::typeck::missing_type_params_label);\n \n         let mut suggested = false;\n         if let (Ok(snippet), true) = (\n@@ -298,18 +295,21 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 // least we can clue them to the correct syntax `Iterator<Type>`.\n                 err.span_suggestion(\n                     self.span,\n-                    DiagnosticMessage::fluent_attr(SLUG, \"suggestion\"),\n+                    rustc_errors::fluent::typeck::missing_type_params_suggestion,\n                     format!(\"{}<{}>\", snippet, self.missing_type_params.join(\", \")),\n                     Applicability::HasPlaceholders,\n                 );\n                 suggested = true;\n             }\n         }\n         if !suggested {\n-            err.span_label(self.span, DiagnosticMessage::fluent_attr(SLUG, \"no-suggestion-label\"));\n+            err.span_label(\n+                self.span,\n+                rustc_errors::fluent::typeck::missing_type_params_no_suggestion_label,\n+            );\n         }\n \n-        err.note(DiagnosticMessage::fluent_attr(SLUG, \"note\"));\n+        err.note(rustc_errors::fluent::typeck::missing_type_params_note);\n         err\n     }\n }"}, {"sha": "2f378836cbbb37619ac0a6f020c8ea356931e8e1", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -26,7 +26,7 @@ const fn size_align<T>() -> (usize, usize) {\n /// like this are met, use specific allocators with looser\n /// requirements, or use the more lenient `Allocator` interface.)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n #[lang = \"alloc_layout\"]\n pub struct Layout {\n     // size of the requested block of memory, measured in bytes."}, {"sha": "fcfa95120df21e94d9c6f8c0b3f4c76026a0aa5b", "filename": "library/core/src/mem/valid_align.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -1,6 +1,6 @@\n use crate::convert::TryFrom;\n use crate::num::NonZeroUsize;\n-use crate::{cmp, fmt, mem, num};\n+use crate::{cmp, fmt, hash, mem, num};\n \n /// A type storing a `usize` which is a power of two, and thus\n /// represents a possible alignment in the rust abstract machine.\n@@ -105,6 +105,13 @@ impl cmp::PartialOrd for ValidAlign {\n     }\n }\n \n+impl hash::Hash for ValidAlign {\n+    #[inline]\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        self.as_nonzero().hash(state)\n+    }\n+}\n+\n #[cfg(target_pointer_width = \"16\")]\n type ValidAlignEnum = ValidAlignEnum16;\n #[cfg(target_pointer_width = \"32\")]"}, {"sha": "f3ef094cbccc5ea191ef838d9d8e9987e980ebc3", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -499,14 +499,15 @@ impl<T> NonNull<[T]> {\n     /// # Examples\n     ///\n     /// ```rust\n-    /// #![feature(slice_ptr_len, nonnull_slice_from_raw_parts)]\n+    /// #![feature(nonnull_slice_from_raw_parts)]\n     /// use std::ptr::NonNull;\n     ///\n     /// let slice: NonNull<[i8]> = NonNull::slice_from_raw_parts(NonNull::dangling(), 3);\n     /// assert_eq!(slice.len(), 3);\n     /// ```\n-    #[unstable(feature = \"slice_ptr_len\", issue = \"71146\")]\n-    #[rustc_const_unstable(feature = \"const_slice_ptr_len\", issue = \"71146\")]\n+    #[stable(feature = \"slice_ptr_len_nonnull\", since = \"1.63.0\")]\n+    #[rustc_const_stable(feature = \"const_slice_ptr_len_nonnull\", since = \"1.63.0\")]\n+    #[rustc_allow_const_fn_unstable(const_slice_ptr_len)]\n     #[must_use]\n     #[inline]\n     pub const fn len(self) -> usize {"}, {"sha": "94ae97a2e402a40f65286d6a07362eede4120ae9", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -104,7 +104,7 @@\n //! On Unix, [`OsStr`] implements the\n //! <code>std::os::unix::ffi::[OsStrExt][unix.OsStrExt]</code> trait, which\n //! augments it with two methods, [`from_bytes`] and [`as_bytes`].\n-//! These do inexpensive conversions from and to UTF-8 byte slices.\n+//! These do inexpensive conversions from and to byte slices.\n //!\n //! Additionally, on Unix [`OsString`] implements the\n //! <code>std::os::unix::ffi::[OsStringExt][unix.OsStringExt]</code> trait,"}, {"sha": "b5901ce6f7400f6fdaad8a215f00de4a2448f002", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -897,29 +897,6 @@ impl Step for PlainSourceTarball {\n     }\n }\n \n-// We have to run a few shell scripts, which choke quite a bit on both `\\`\n-// characters and on `C:\\` paths, so normalize both of them away.\n-pub fn sanitize_sh(path: &Path) -> String {\n-    let path = path.to_str().unwrap().replace(\"\\\\\", \"/\");\n-    return change_drive(unc_to_lfs(&path)).unwrap_or(path);\n-\n-    fn unc_to_lfs(s: &str) -> &str {\n-        s.strip_prefix(\"//?/\").unwrap_or(s)\n-    }\n-\n-    fn change_drive(s: &str) -> Option<String> {\n-        let mut ch = s.chars();\n-        let drive = ch.next().unwrap_or('C');\n-        if ch.next() != Some(':') {\n-            return None;\n-        }\n-        if ch.next() != Some('/') {\n-            return None;\n-        }\n-        Some(format!(\"/{}/{}\", drive, &s[drive.len_utf8() + 2..]))\n-    }\n-}\n-\n #[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Cargo {\n     pub compiler: Compiler,"}, {"sha": "6e49f39ffb6aa5924aa1d6a00b86725c85951c9e", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -5,12 +5,12 @@\n \n use std::env;\n use std::fs;\n-use std::path::{Component, PathBuf};\n+use std::path::{Component, Path, PathBuf};\n use std::process::Command;\n \n use crate::util::t;\n \n-use crate::dist::{self, sanitize_sh};\n+use crate::dist;\n use crate::tarball::GeneratedTarball;\n use crate::Compiler;\n \n@@ -22,6 +22,29 @@ const SHELL: &str = \"bash\";\n #[cfg(not(target_os = \"illumos\"))]\n const SHELL: &str = \"sh\";\n \n+// We have to run a few shell scripts, which choke quite a bit on both `\\`\n+// characters and on `C:\\` paths, so normalize both of them away.\n+fn sanitize_sh(path: &Path) -> String {\n+    let path = path.to_str().unwrap().replace(\"\\\\\", \"/\");\n+    return change_drive(unc_to_lfs(&path)).unwrap_or(path);\n+\n+    fn unc_to_lfs(s: &str) -> &str {\n+        s.strip_prefix(\"//?/\").unwrap_or(s)\n+    }\n+\n+    fn change_drive(s: &str) -> Option<String> {\n+        let mut ch = s.chars();\n+        let drive = ch.next().unwrap_or('C');\n+        if ch.next() != Some(':') {\n+            return None;\n+        }\n+        if ch.next() != Some('/') {\n+            return None;\n+        }\n+        Some(format!(\"/{}/{}\", drive, &s[drive.len_utf8() + 2..]))\n+    }\n+}\n+\n fn install_sh(\n     builder: &Builder<'_>,\n     package: &str,"}, {"sha": "fd9976b5a414686fe8d1b317710292a151d4c827", "filename": "src/test/ui-fulldeps/fluent-messages/duplicate-a.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fduplicate-a.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fduplicate-a.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fduplicate-a.ftl?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -0,0 +1 @@\n+key = Value"}, {"sha": "fd9976b5a414686fe8d1b317710292a151d4c827", "filename": "src/test/ui-fulldeps/fluent-messages/duplicate-b.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fduplicate-b.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fduplicate-b.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fduplicate-b.ftl?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -0,0 +1 @@\n+key = Value"}, {"sha": "372b1a2e453d210edbc8608b7e3d4f23c3881017", "filename": "src/test/ui-fulldeps/fluent-messages/missing-message.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fmissing-message.ftl?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -0,0 +1 @@\n+missing-message = "}, {"sha": "b05d3d08ccb0915936ac8560eeb0e0d168c41ad9", "filename": "src/test/ui-fulldeps/fluent-messages/test.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.rs?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -0,0 +1,60 @@\n+// normalize-stderr-test \"note.*\" -> \"note: os-specific message\"\n+\n+#![feature(rustc_private)]\n+#![crate_type = \"lib\"]\n+\n+extern crate rustc_macros;\n+use rustc_macros::fluent_messages;\n+\n+/// Copy of the relevant `DiagnosticMessage` variant constructed by `fluent_messages` as it\n+/// expects `crate::DiagnosticMessage` to exist.\n+pub enum DiagnosticMessage {\n+    FluentIdentifier(std::borrow::Cow<'static, str>, Option<std::borrow::Cow<'static, str>>),\n+}\n+\n+mod missing_absolute {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        missing_absolute => \"/definitely_does_not_exist.ftl\",\n+//~^ ERROR could not open Fluent resource\n+    }\n+}\n+\n+mod missing_relative {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        missing_relative => \"../definitely_does_not_exist.ftl\",\n+//~^ ERROR could not open Fluent resource\n+    }\n+}\n+\n+mod missing_message {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        missing_message => \"./missing-message.ftl\",\n+//~^ ERROR could not parse Fluent resource\n+    }\n+}\n+\n+mod duplicate {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        a => \"./duplicate-a.ftl\",\n+        b => \"./duplicate-b.ftl\",\n+//~^ ERROR overrides existing message: `key`\n+    }\n+}\n+\n+mod valid {\n+    use super::fluent_messages;\n+\n+    fluent_messages! {\n+        valid => \"./valid.ftl\",\n+    }\n+\n+    use self::fluent_generated::{DEFAULT_LOCALE_RESOURCES, valid::valid};\n+}"}, {"sha": "f88d09bee6e88388b135f9ae79994f20ceb0bd65", "filename": "src/test/ui-fulldeps/fluent-messages/test.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Ftest.stderr?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -0,0 +1,45 @@\n+error: could not open Fluent resource\n+  --> $DIR/test.rs:19:29\n+   |\n+LL |         missing_absolute => \"/definitely_does_not_exist.ftl\",\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: os-specific message\n+\n+error: could not open Fluent resource\n+  --> $DIR/test.rs:28:29\n+   |\n+LL |         missing_relative => \"../definitely_does_not_exist.ftl\",\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: os-specific message\n+\n+error: could not parse Fluent resource\n+  --> $DIR/test.rs:37:28\n+   |\n+LL |         missing_message => \"./missing-message.ftl\",\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: see additional errors emitted\n+\n+error: expected a message field for \"missing-message\"\n+ --> ./missing-message.ftl:1:1\n+  |\n+1 | missing-message = \n+  | ^^^^^^^^^^^^^^^^^^\n+  |\n+\n+error: overrides existing message: `key`\n+  --> $DIR/test.rs:47:9\n+   |\n+LL |         b => \"./duplicate-b.ftl\",\n+   |         ^\n+   |\n+help: previously defined in this resource\n+  --> $DIR/test.rs:46:9\n+   |\n+LL |         a => \"./duplicate-a.ftl\",\n+   |         ^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "0eee4a02b96ae41fad9bd7518078866727b6bc9f", "filename": "src/test/ui-fulldeps/fluent-messages/valid.ftl", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fvalid.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/19abca1172ae10d5c084b6c3013d92680f92dd8b/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fvalid.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Ffluent-messages%2Fvalid.ftl?ref=19abca1172ae10d5c084b6c3013d92680f92dd8b", "patch": "@@ -0,0 +1 @@\n+valid = Valid!"}]}