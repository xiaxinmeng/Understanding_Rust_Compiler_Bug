{"sha": "0791f9f406053d84dc7136c2be015a469304d7f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3OTFmOWY0MDYwNTNkODRkYzcxMzZjMmJlMDE1YTQ2OTMwNGQ3ZjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-18T05:12:20Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-21T18:37:43Z"}, "message": "test: Fix fallout in tests", "tree": {"sha": "c9edd59b029ceb96f7654c04a6e0c80d8858a95c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9edd59b029ceb96f7654c04a6e0c80d8858a95c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0791f9f406053d84dc7136c2be015a469304d7f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0791f9f406053d84dc7136c2be015a469304d7f0", "html_url": "https://github.com/rust-lang/rust/commit/0791f9f406053d84dc7136c2be015a469304d7f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0791f9f406053d84dc7136c2be015a469304d7f0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeb94886adccb3f13003f92f117115d17846ce1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb94886adccb3f13003f92f117115d17846ce1f", "html_url": "https://github.com/rust-lang/rust/commit/eeb94886adccb3f13003f92f117115d17846ce1f"}], "stats": {"total": 671, "additions": 205, "deletions": 466}, "files": [{"sha": "6472c08c222965b6a6ba1a4e411747d3b26bc0ee", "filename": "src/test/auxiliary/issue_3907.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fissue_3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_3907.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,10 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n-\n-pub trait Foo : MarkerTrait {\n+pub trait Foo {\n     fn bar();\n }"}, {"sha": "37ee10c8d37333ec6e64793919ab8a1f504e14ca", "filename": "src/test/auxiliary/private_trait_xc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_trait_xc.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,6 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n-trait Foo : ::std::marker::MarkerTrait {}\n+trait Foo {}"}, {"sha": "c2ff7a0054f19712bf95d0c3c34c0c5f4cf5d8e8", "filename": "src/test/auxiliary/rustdoc-default-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Frustdoc-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Frustdoc-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-default-impl.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,7 +14,7 @@\n pub mod bar {\n     use std::marker;\n \n-    pub trait Bar: marker::MarkerTrait + 'static {}\n+    pub trait Bar: 'static {}\n \n     impl Bar for .. {}\n "}, {"sha": "31a97f695f06cdbfcf20cd27edf87cb961020bb0", "filename": "src/test/auxiliary/svh-a-base.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-base.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "5339fc8295c6f57f56cfd7820e41cdb3d88be0fc", "filename": "src/test/auxiliary/svh-a-change-lit.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-lit.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "2a5d9446f879ac65f8d8a4dff31c9616e89c7993", "filename": "src/test/auxiliary/svh-a-change-significant-cfg.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-significant-cfg.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "61f2f2803ab1891dc586ab781cea0158d513b8ed", "filename": "src/test/auxiliary/svh-a-change-trait-bound.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-trait-bound.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "270ce95be2bb62d70a0366920373362fb5a8e2ae", "filename": "src/test/auxiliary/svh-a-change-type-arg.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-arg.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "de4cc85a7dc4746bc238bbf344b797eb212de426", "filename": "src/test/auxiliary/svh-a-change-type-ret.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-ret.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "62f7986f1c3bd729b67c8f50677d01395f20914e", "filename": "src/test/auxiliary/svh-a-change-type-static.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-change-type-static.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -16,14 +16,12 @@\n #![crate_name = \"a\"]\n #![feature(core)]\n \n-use std::marker::MarkerTrait;\n-\n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "22e40822eecfc8b52055dbeece2d9b99e58e88e4", "filename": "src/test/auxiliary/svh-a-comment.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-comment.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "3d8a728967a4a64bcc274b11818dedc1690d5a2f", "filename": "src/test/auxiliary/svh-a-doc.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-doc.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "41d7eb7b18645f3ee181fee3406ec62aaea899fd", "filename": "src/test/auxiliary/svh-a-macro.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-macro.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "31a97f695f06cdbfcf20cd27edf87cb961020bb0", "filename": "src/test/auxiliary/svh-a-no-change.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-no-change.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "e405c337abe4aeb7ef7214625a275c5fc4931b75", "filename": "src/test/auxiliary/svh-a-redundant-cfg.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-redundant-cfg.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "9ef788c98427392bfa95bf1156149d7df9a99232", "filename": "src/test/auxiliary/svh-a-whitespace.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsvh-a-whitespace.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,16 +14,13 @@\n //! (#14132).\n \n #![crate_name = \"a\"]\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n \n macro_rules! three {\n     () => { 3 }\n }\n \n-pub trait U : MarkerTrait {}\n-pub trait V : MarkerTrait {}\n+pub trait U {}\n+pub trait V {}\n impl U for () {}\n impl V for () {}\n "}, {"sha": "c3ecbb014dc6b0aac1dfa9e077383a15e86b79cd", "filename": "src/test/auxiliary/trait_impl_conflict.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_impl_conflict.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n-pub trait Foo : ::std::marker::MarkerTrait {\n+pub trait Foo {\n }\n \n impl Foo for isize {"}, {"sha": "2e425ac96c55f9de510c0358e93105c48424d3ba", "filename": "src/test/auxiliary/typeck_default_trait_impl_cross_crate_coherence_lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Ftypeck_default_trait_impl_cross_crate_coherence_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fauxiliary%2Ftypeck_default_trait_impl_cross_crate_coherence_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeck_default_trait_impl_cross_crate_coherence_lib.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -11,9 +11,7 @@\n #![feature(optin_builtin_traits, core)]\n #![crate_type = \"rlib\"]\n \n-use std::marker::MarkerTrait;\n-\n-pub trait DefaultedTrait : MarkerTrait { }\n+pub trait DefaultedTrait { }\n impl DefaultedTrait for .. { }\n \n pub struct Something<T> { t: T }"}, {"sha": "1f9dfdb18470b3718b97289e62345b762f748e65", "filename": "src/test/compile-fail/associated-types-eq-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,7 +10,7 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-trait Foo : ::std::marker::MarkerTrait {\n+trait Foo {\n     type A;\n     fn bar() -> isize;\n }"}, {"sha": "82258f124d3233da297edae2e9447118e814e45a", "filename": "src/test/compile-fail/associated-types-issue-17359.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-17359.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -11,7 +11,7 @@\n // Test that we do not ICE when an impl is missing an associated type (and that we report\n // a useful error, of course).\n \n-trait Trait : ::std::marker::MarkerTrait {\n+trait Trait {\n     type Type;\n }\n "}, {"sha": "9436f825de89dd4b95a51cc7e6f7ce4ad320bcdd", "filename": "src/test/compile-fail/associated-types-multiple-types-one-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-multiple-types-one-trait.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo : ::std::marker::MarkerTrait {\n+trait Foo {\n     type X;\n     type Y;\n }"}, {"sha": "bda16c8a85de15d03c00c2470688bb3cb34b158a", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait-2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -19,7 +19,7 @@\n // which checks that the trait interface itself is not considered an\n // error as long as all impls satisfy the constraint.\n \n-trait Get : ::std::marker::MarkerTrait {\n+trait Get {\n     type Value;\n }\n "}, {"sha": "233532a6085803400c5ae04f9edbf1d70b4f94a9", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -19,7 +19,7 @@\n // which checks that the trait interface itself is not considered an\n // error as long as all impls satisfy the constraint.\n \n-trait Get : ::std::marker::MarkerTrait {\n+trait Get {\n     type Value;\n }\n "}, {"sha": "aecbf217a5b25e916155829b81188bf7401049ac", "filename": "src/test/compile-fail/associated-types-unconstrained.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,7 +10,7 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-trait Foo : ::std::marker::MarkerTrait {\n+trait Foo {\n     type A;\n     fn bar() -> isize;\n }"}, {"sha": "fca74e457c21e17be2a9889919730ee6926c32d4", "filename": "src/test/compile-fail/bad-sized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-sized.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,7 +10,7 @@\n \n use std::cell::RefCell;\n \n-trait Trait : ::std::marker::MarkerTrait {}\n+trait Trait {}\n \n pub fn main() {\n     let x: Vec<Trait + Sized> = Vec::new();"}, {"sha": "b771b959d3e507ef1cf5001777109b9f1cef7e94", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-implemented.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-implemented.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,7 +10,6 @@\n \n use std::fmt::Debug;\n use std::default::Default;\n-use std::marker::MarkerTrait;\n \n // Test that two blanket impls conflict (at least without negative\n // bounds).  After all, some other crate could implement Even or Odd\n@@ -20,9 +19,9 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-trait Even : MarkerTrait { }\n+trait Even { }\n \n-trait Odd : MarkerTrait { }\n+trait Odd { }\n \n impl Even for isize { }\n "}, {"sha": "d3b0e7f10b91bc815a32a1f21384bc2bfd9fd5e9", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-blanket-unimplemented.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-blanket-unimplemented.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -19,9 +19,9 @@ trait MyTrait {\n     fn get(&self) -> usize;\n }\n \n-trait Even : ::std::marker::MarkerTrait { }\n+trait Even {}\n \n-trait Odd : ::std::marker::MarkerTrait { }\n+trait Odd {}\n \n impl<T:Even> MyTrait for T { //~ ERROR E0119\n     fn get(&self) -> usize { 0 }"}, {"sha": "55c9ba2a0e89aeda6cfb43ea13f0bdd4e8ba049f", "filename": "src/test/compile-fail/coherence-conflicting-negative-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-conflicting-negative-trait-impl.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-trait MyTrait : ::std::marker::MarkerTrait {}\n+trait MyTrait {}\n \n struct TestType<T>(::std::marker::PhantomData<T>);\n "}, {"sha": "cccc8b05b3038b8ae719f192badcb5906edc43b5", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,21 +10,19 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n-trait MyTrait: MarkerTrait {}\n+trait MyTrait {}\n \n impl MyTrait for .. {}\n \n impl MyTrait for .. {}\n //~^ ERROR conflicting implementations for trait `MyTrait`\n \n-trait MySafeTrait: MarkerTrait {}\n+trait MySafeTrait {}\n \n unsafe impl MySafeTrait for .. {}\n //~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n \n-unsafe trait MyUnsafeTrait: MarkerTrait {}\n+unsafe trait MyUnsafeTrait {}\n \n impl MyUnsafeTrait for .. {}\n //~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration"}, {"sha": "a6b62d17bc4e6aa9ac34540d80911fa8b0865294", "filename": "src/test/compile-fail/coherence_copy_like_err_fundamental_struct_tuple.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_fundamental_struct_tuple.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -17,11 +17,9 @@\n \n extern crate coherence_copy_like_lib as lib;\n \n-use std::marker::MarkerTrait;\n-\n struct MyType { x: i32 }\n \n-trait MyTrait : MarkerTrait { }\n+trait MyTrait { }\n \n impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n "}, {"sha": "5a9f440f8bb6a98900bb406b1976d6a056232c1b", "filename": "src/test/compile-fail/coherence_copy_like_err_struct.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_struct.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -15,11 +15,9 @@\n \n extern crate coherence_copy_like_lib as lib;\n \n-use std::marker::MarkerTrait;\n-\n struct MyType { x: i32 }\n \n-trait MyTrait : MarkerTrait { }\n+trait MyTrait { }\n impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n \n // `MyStruct` is not declared fundamental, therefore this would"}, {"sha": "ee0d5550fd61f0ea8e514bec49a723935cf31ac6", "filename": "src/test/compile-fail/coherence_copy_like_err_tuple.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_copy_like_err_tuple.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -15,11 +15,9 @@\n \n extern crate coherence_copy_like_lib as lib;\n \n-use std::marker::MarkerTrait;\n-\n struct MyType { x: i32 }\n \n-trait MyTrait : MarkerTrait { }\n+trait MyTrait { }\n impl<T: lib::MyCopy> MyTrait for T { } //~ ERROR E0119\n \n // Tuples are not fundamental, therefore this would require that"}, {"sha": "160197368d6d983c673f924eb1508fbd62e1a3b1", "filename": "src/test/compile-fail/dst-bad-coerce2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -15,7 +15,7 @@ struct Fat<T: ?Sized> {\n }\n \n struct Foo;\n-trait Bar : ::std::marker::MarkerTrait {}\n+trait Bar {}\n impl Bar for Foo {}\n \n pub fn main() {"}, {"sha": "b30eada162b84707134573888de917956f8ca50c", "filename": "src/test/compile-fail/dst-bad-coercions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coercions.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,10 +10,8 @@\n \n // Test implicit coercions involving DSTs and raw pointers.\n \n-use std::marker::MarkerTrait;\n-\n struct S;\n-trait T : MarkerTrait {}\n+trait T {}\n impl T for S {}\n \n struct Foo<T: ?Sized> {"}, {"sha": "e116966670d2b7bda22c03def4a8c3f930e065f3", "filename": "src/test/compile-fail/implicit-method-bind.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimplicit-method-bind.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::num::SignedInt;\n-\n fn main() {\n-    let _f = 10.abs; //~ ERROR attempted to take value of method\n+    let _f = 10i32.abs; //~ ERROR attempted to take value of method\n }"}, {"sha": "251da2c6b3ee979c020bf7e21c55d490c5a4dadd", "filename": "src/test/compile-fail/issue-13853.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-trait Node : MarkerTrait {\n+trait Node {\n     fn zomg();\n }\n "}, {"sha": "51deb99a4f2cda7747feae6e2df16f83c0f80e9e", "filename": "src/test/compile-fail/issue-14853.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14853.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n use std::fmt::Debug;\n-use std::marker::MarkerTrait;\n \n-trait Str : MarkerTrait {}\n+trait Str {}\n \n trait Something {\n     fn yay<T: Debug>(_: Option<Self>, thing: &[T]);"}, {"sha": "a3529c9ea90b671d21d9274c51166f826da4aa34", "filename": "src/test/compile-fail/issue-16747.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16747.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-trait ListItem<'a> : MarkerTrait {\n+trait ListItem<'a> {\n     fn list_name() -> &'a str;\n }\n "}, {"sha": "6300a1dc15d6015cec6aea8b0c34743a529f13f4", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-pub trait AbstractRenderer : MarkerTrait {}\n+pub trait AbstractRenderer {}\n \n fn _create_render(_: &()) ->\n     AbstractRenderer"}, {"sha": "41be78dd7b96eede5f0c9aa46bf702cad8fe9ca1", "filename": "src/test/compile-fail/issue-18389.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,14 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::any::Any;\n use std::any::TypeId;\n-use std::marker::MarkerTrait;\n \n-pub trait Pt : MarkerTrait {}\n-pub trait Rt : MarkerTrait {}\n+pub trait Pt {}\n+pub trait Rt {}\n \n trait Private<P: Pt, R: Rt> {\n     fn call(&self, p: P, r: R);"}, {"sha": "a662e9ca98ee812086e338e874234fd0a00a1f91", "filename": "src/test/compile-fail/issue-18611.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n fn add_state(op: <isize as HasState>::State) {\n //~^ ERROR the trait `HasState` is not implemented for the type `isize`\n }\n \n-trait HasState : MarkerTrait {\n+trait HasState {\n     type State;\n }\n "}, {"sha": "d89b2c6ce8cb0221e9a64a922e4e8f683909da57", "filename": "src/test/compile-fail/issue-18819.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo : MarkerTrait {\n+trait Foo {\n     type Item;\n }\n "}, {"sha": "20bd8af7c3ef5ecf3e18cee657cfdc24276765e3", "filename": "src/test/compile-fail/issue-2063.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,11 +12,9 @@\n // cause compiler to loop.  Note that no instances\n // of such a type could ever be constructed.\n \n-use std::marker::MarkerTrait;\n-\n struct t(Box<t>); //~ ERROR this type cannot be instantiated\n \n-trait to_str_2 : MarkerTrait {\n+trait to_str_2 {\n     fn my_to_string() -> String;\n }\n "}, {"sha": "a38278eae2411f1c92871586e0d33d907f51faab", "filename": "src/test/compile-fail/issue-20831-debruijn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20831-debruijn.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,10 +14,9 @@\n // away.\n \n use std::cell::RefCell;\n-use std::marker::MarkerTrait;\n use std::ops::{Shl, Shr};\n \n-pub trait Subscriber : MarkerTrait {\n+pub trait Subscriber {\n     type Input;\n }\n "}, {"sha": "b77230a8b340d1dfb145b608b7c034409b9eeec3", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,9 +12,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n-unsafe trait Trait: MarkerTrait {\n+unsafe trait Trait {\n //~^ error: traits with default impls (`e.g. unsafe impl Trait for ..`) must have no methods or associated items\n     type Output;\n }"}, {"sha": "026ee89c0b2b5a4dd940e0ec690a6412891516aa", "filename": "src/test/compile-fail/issue-3702-2.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3702-2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,7 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::num::ToPrimitive;\n+pub trait ToPrimitive {\n+    fn to_int(&self) -> isize { 0 }\n+}\n+\n+impl ToPrimitive for i32 {}\n+impl ToPrimitive for isize {}\n \n trait Add {\n     fn to_int(&self) -> isize;"}, {"sha": "9e324cdd61eb0e82f40308131b51c72d1d1ce360", "filename": "src/test/compile-fail/issue-5035-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5035-2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-trait I : MarkerTrait {}\n+trait I {}\n type K = I+'static;\n \n fn foo(_x: K) {} //~ ERROR: the trait `core::marker::Sized` is not implemented"}, {"sha": "9ff957b6e6deac4904d0d5066390bd4dd53e2803", "filename": "src/test/compile-fail/issue-5883.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5883.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-trait A : MarkerTrait {}\n+trait A {}\n \n struct Struct {\n     r: A+'static\n@@ -22,6 +20,6 @@ fn new_struct(r: A+'static)\n     Struct { r: r }\n }\n \n-trait Curve : MarkerTrait {}\n+trait Curve {}\n enum E {X(Curve+'static)}\n fn main() {}"}, {"sha": "6b320f400a8091dcc9e8f5e31c1f7a26d009fe39", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,14 +10,12 @@\n \n // Test the mechanism for warning about possible missing `self` declarations.\n \n-use std::marker::MarkerTrait;\n-\n trait CtxtFn {\n     fn f8(self, usize) -> usize;\n     fn f9(usize) -> usize; //~ NOTE candidate\n }\n \n-trait OtherTrait : MarkerTrait {\n+trait OtherTrait {\n     fn f9(usize) -> usize; //~ NOTE candidate\n }\n \n@@ -26,7 +24,7 @@ trait OtherTrait : MarkerTrait {\n // declaration to match against, so we wind up prisizeing it as a\n // candidate. This seems not unreasonable -- perhaps the user meant to\n // implement it, after all.\n-trait UnusedTrait : MarkerTrait {\n+trait UnusedTrait {\n     fn f9(usize) -> usize; //~ NOTE candidate\n }\n \n@@ -54,7 +52,7 @@ impl Myisize {\n     }\n }\n \n-trait ManyImplTrait : MarkerTrait {\n+trait ManyImplTrait {\n     fn is_str() -> bool { //~ NOTE candidate\n         false\n     }"}, {"sha": "d43ddff6b9500af1b7a8d0abcd056e7f9c418945", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,12 +10,11 @@\n \n // Test which of the builtin types are considered POD.\n \n-use std::marker::MarkerTrait;\n use std::rc::Rc;\n \n fn assert_copy<T:Copy>() { }\n \n-trait Dummy : MarkerTrait { }\n+trait Dummy { }\n \n #[derive(Copy, Clone)]\n struct MyStruct {"}, {"sha": "66297d70ef505cccb7e3f7f9f7c0a1dfa22bad8a", "filename": "src/test/compile-fail/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params-2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(box_syntax)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo : MarkerTrait {\n+trait Foo {\n }\n \n impl<T:Copy> Foo for T {"}, {"sha": "570f7ad7fe3bf214adae00a7ac6644053305dd6c", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,10 +12,8 @@\n // in this file all test the \"kind\" violates detected during kindck.\n // See all `regions-bounded-by-send.rs`\n \n-use std::marker::MarkerTrait;\n-\n fn assert_send<T:Send>() { }\n-trait Dummy : MarkerTrait { }\n+trait Dummy { }\n trait Message : Send { }\n \n // careful with object types, who knows what they close over..."}, {"sha": "48d5215b7085be78f389d72df0139f2efa25130e", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,10 +12,8 @@\n // is broken into two parts because some errors occur in distinct\n // phases in the compiler. See kindck-send-object2.rs as well!\n \n-use std::marker::MarkerTrait;\n-\n fn assert_send<T:Send+'static>() { }\n-trait Dummy : MarkerTrait { }\n+trait Dummy { }\n \n // careful with object types, who knows what they close over...\n fn test51<'a>() {"}, {"sha": "d3d166e2a6916181d24c32984ed212bca92a07e6", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,10 +10,8 @@\n \n // Continue kindck-send-object1.rs.\n \n-use std::marker::MarkerTrait;\n-\n fn assert_send<T:Send>() { }\n-trait Dummy : MarkerTrait { }\n+trait Dummy { }\n \n fn test50() {\n     assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Sync` is not implemented"}, {"sha": "c6dc3b70bef37d881f3e12196ecb84b493cc0045", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -105,7 +105,7 @@ impl PrivTrait for (Private<isize>,) {\n     fn bar(&self) -> Private<isize> { panic!() }\n }\n \n-pub trait ParamTrait<T> : marker::MarkerTrait {\n+pub trait ParamTrait<T> {\n     fn foo() -> T;\n }\n "}, {"sha": "efbf3782f9796a4b34ed979e293f60837032e67e", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -11,9 +11,7 @@\n // Test that an object type `Box<Foo>` is not considered to implement the\n // trait `Foo`. Issue #5087.\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo : MarkerTrait {}\n+trait Foo {}\n fn take_foo<F:Foo>(f: F) {}\n fn take_object(f: Box<Foo>) { take_foo(f); }\n //~^ ERROR the trait `Foo` is not implemented"}, {"sha": "6a010d49692d26450a4d95225eb3695c4509b0cd", "filename": "src/test/compile-fail/object-safety-no-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-no-static.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -11,7 +11,7 @@\n // Check that we correctly prevent users from making trait objects\n // from traits with static methods.\n \n-trait Foo : ::std::marker::MarkerTrait {\n+trait Foo {\n     fn foo();\n }\n "}, {"sha": "071b4db40f86f5c7a60a4869093715f993a6d90f", "filename": "src/test/compile-fail/phantom-oibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphantom-oibit.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,9 +14,9 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::{MarkerTrait, PhantomData};\n+use std::marker::{PhantomData};\n \n-unsafe trait Zen: MarkerTrait {}\n+unsafe trait Zen {}\n \n unsafe impl Zen for .. {}\n "}, {"sha": "7fe0574ab7d9a663902dd9433fcc6a01145f3b4c", "filename": "src/test/compile-fail/privacy-ns2.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -17,9 +17,7 @@\n \n // public type, private value\n pub mod foo1 {\n-    use std::marker::MarkerTrait;\n-\n-    pub trait Bar : MarkerTrait {\n+    pub trait Bar {\n     }\n     pub struct Baz;\n \n@@ -41,7 +39,7 @@ fn test_list1() {\n \n // private type, public value\n pub mod foo2 {\n-    trait Bar : ::std::marker::MarkerTrait {\n+    trait Bar {\n     }\n     pub struct Baz;\n \n@@ -62,7 +60,7 @@ fn test_list2() {\n \n // neither public\n pub mod foo3 {\n-    trait Bar : ::std::marker::MarkerTrait {\n+    trait Bar {\n     }\n     pub struct Baz;\n "}, {"sha": "f95ee405895a9c78cd286b54e98e09ea255d2fc5", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -11,7 +11,7 @@\n // Test that attempts to implicitly coerce a value into an\n // object respect the lifetime bound on the object type.\n \n-trait Foo : ::std::marker::MarkerTrait {}\n+trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n \n // FIXME (#22405): Replace `Box::new` with `box` here when/if possible."}, {"sha": "fdc97ecaf21e271949bed51a125266d3cefb9781", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,9 +12,7 @@\n \n // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n \n-use std::marker::MarkerTrait;\n-\n-trait X : MarkerTrait {}\n+trait X {}\n \n trait Iter {\n     type Item: X;"}, {"sha": "25b8137d29cade512868ecfdaa54e2a228611ea8", "filename": "src/test/compile-fail/regions-close-over-borrowed-ref-in-obj.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-over-borrowed-ref-in-obj.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(box_syntax)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo : MarkerTrait { }\n+trait Foo { }\n \n impl<'a> Foo for &'a isize { }\n "}, {"sha": "b864e6ca9578b7878d0b62a1bb6d7279a3173ad3", "filename": "src/test/compile-fail/trait-as-struct-constructor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-as-struct-constructor.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait TraitNotAStruct : ::std::marker::MarkerTrait { }\n+trait TraitNotAStruct {}\n \n fn main() {\n     TraitNotAStruct{ value: 0 };"}, {"sha": "c18c5b386e8b21816be1abd6ff4e38818ea86978", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::marker::MarkerTrait;\n-\n-trait Trait : MarkerTrait {}\n+trait Trait {}\n \n struct Foo<T:Trait> {\n     x: T,"}, {"sha": "0a36fcbed690513e6137d88b715b87db25dd8de6", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n // Tests for \"default\" bounds inferred for traits with no bounds list.\n \n-use std::marker::MarkerTrait;\n-\n-trait Foo : MarkerTrait {}\n+trait Foo {}\n \n fn a(_x: Box<Foo+Send>) {\n }"}, {"sha": "dadcbd5bce710291c706ad4a4209374352549d1b", "filename": "src/test/compile-fail/trait-impl-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-impl-1.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,9 +12,7 @@\n // trait impl is only applied to a trait object, not concrete types which implement\n // the trait.\n \n-use std::marker::MarkerTrait;\n-\n-trait T : MarkerTrait {}\n+trait T {}\n \n impl<'a> T+'a {\n     fn foo(&self) {}"}, {"sha": "155b835bbc6e0704d4e24657cb40398c6d7f7615", "filename": "src/test/compile-fail/type-params-in-different-spaces-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::num::Int;\n+use std::ops::Add;\n \n-trait BrokenAdd: Int {\n+trait BrokenAdd: Copy + Add<Output=Self> {\n     fn broken_add<T>(&self, rhs: T) -> Self {\n         *self + rhs //~  ERROR mismatched types\n                     //~| expected `Self`\n@@ -20,7 +20,7 @@ trait BrokenAdd: Int {\n     }\n }\n \n-impl<T: Int> BrokenAdd for T {}\n+impl<T: Copy + Add<Output=T>> BrokenAdd for T {}\n \n pub fn main() {\n     let foo: u8 = 0;"}, {"sha": "a27f7f7ebbe0f4b405d5d701bbb8309bd9de464f", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types-2.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types-2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n-trait MyTrait: MarkerTrait {}\n+trait MyTrait {}\n \n impl MyTrait for .. {}\n "}, {"sha": "24819bb4f08d63a51f7db7752df8bfbdf14766f3", "filename": "src/test/compile-fail/typeck-default-trait-impl-constituent-types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-constituent-types.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n-trait MyTrait: MarkerTrait {}\n+trait MyTrait {}\n \n impl MyTrait for .. {}\n impl<T> !MyTrait for *mut T {}"}, {"sha": "4b91d0b7a736c6f1c1f5d4b692c23fa854333894", "filename": "src/test/compile-fail/typeck-default-trait-impl-negation.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-negation.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,13 +10,11 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n-trait MyTrait: MarkerTrait {}\n+trait MyTrait {}\n \n impl MyTrait for .. {}\n \n-unsafe trait MyUnsafeTrait: MarkerTrait {}\n+unsafe trait MyUnsafeTrait {}\n \n unsafe impl MyUnsafeTrait for .. {}\n "}, {"sha": "c67fc92313c3a58d29e714db80e0b8003cb55419", "filename": "src/test/compile-fail/typeck-default-trait-impl-precedence.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-precedence.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -15,15 +15,13 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n-trait Defaulted : MarkerTrait { }\n+trait Defaulted { }\n impl Defaulted for .. { }\n impl<'a,T:Signed> Defaulted for &'a T { }\n impl<'a,T:Signed> Defaulted for &'a mut T { }\n fn is_defaulted<T:Defaulted>() { }\n \n-trait Signed : MarkerTrait { }\n+trait Signed { }\n impl Signed for i32 { }\n \n fn main() {"}, {"sha": "aa918119fbceef87840dcd9cb859562c23a51442", "filename": "src/test/compile-fail/typeck-default-trait-impl-superregion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-superregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-superregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-superregion.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,8 +13,6 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n trait MyTrait : 'static {}\n \n impl MyTrait for .. {}"}, {"sha": "c9bfdff6c0e495cd78a089e0d4b2d96fcc2fe421", "filename": "src/test/compile-fail/typeck-default-trait-impl-supertrait.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-supertrait.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,9 +13,7 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n-\n-trait NotImplemented: MarkerTrait { }\n+trait NotImplemented { }\n \n trait MyTrait : NotImplemented {}\n "}, {"sha": "4f572e87639f051208ba7efa78d14a961e8e35ab", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -15,11 +15,9 @@\n \n #![feature(optin_builtin_traits)]\n \n-use std::marker::MarkerTrait;\n+trait NotImplemented { }\n \n-trait NotImplemented: MarkerTrait { }\n-\n-trait MyTrait: MarkerTrait\n+trait MyTrait\n     where Option<Self> : NotImplemented\n {}\n "}, {"sha": "3f18f359d306e711ee4be2c654e0382d38a8d8c7", "filename": "src/test/compile-fail/unsized6.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Funsized6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized6.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n // Test `?Sized` local variables.\n \n-use std::marker;\n-\n-trait T : marker::MarkerTrait { }\n+trait T {}\n \n fn f1<X: ?Sized>(x: &X) {\n     let _: X; // <-- this is OK, no bindings created, no initializer."}, {"sha": "0245a1b5cf2c8628e39abbf80b87c47d5c868b88", "filename": "src/test/compile-fail/unsized7.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Fcompile-fail%2Funsized7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized7.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n // Test sized-ness checking in substitution in impls.\n \n-use std::marker::MarkerTrait;\n-\n-trait T : MarkerTrait {}\n+trait T {}\n \n // I would like these to fail eventually.\n // impl - bounded"}, {"sha": "4d75e58aad938a05cb65590936ea8f9636c78e7c", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -25,8 +25,6 @@ use sub::sub2 as msalias;\n use sub::sub2;\n use sub::sub2::nested_struct as sub_struct;\n use std::num::One;\n-use std::num::cast;\n-use std::num::{from_int,from_i8,from_i32};\n \n use std::mem::size_of;\n \n@@ -42,7 +40,6 @@ fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n \n     // import tests\n     fn foo(x: &One) {}\n-    let _: Option<u8> = from_i32(45);\n \n     let x = 42;\n "}, {"sha": "2617a05fe24141e42a33e7aa438fff4e5a7807b1", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,12 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n-\n-trait Foo : MarkerTrait {\n+trait Foo {\n     type T;\n }\n "}, {"sha": "c93a0b76a95600c31ec10a6a7be9089f6f5de019", "filename": "src/test/run-pass/associated-types-issue-20371.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,10 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n-\n impl X for f64 { type Y = isize; }\n-trait X : MarkerTrait { type Y; }\n+trait X { type Y; }\n fn main() {}"}, {"sha": "83f0d360e6122cd7b6f5572ecb8af8c1267efa01", "filename": "src/test/run-pass/associated-types-nested-projections.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-nested-projections.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -14,10 +14,9 @@\n \n #![feature(core)]\n \n-use std::marker::MarkerTrait;\n use std::slice;\n \n-trait Bound : MarkerTrait {}\n+trait Bound {}\n \n impl<'a> Bound for &'a i32 {}\n "}, {"sha": "7e2d1aa23149dea229d017bbac6c56951b5bc58a", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-binding.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-binding.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,12 +13,9 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n #![allow(dead_code)]\n \n-use std::marker::MarkerTrait;\n-\n-pub trait Integral : MarkerTrait {\n+pub trait Integral {\n     type Opposite;\n }\n "}, {"sha": "1830b41d0b50681ee7a986b259ae0ca1d7e4655a", "filename": "src/test/run-pass/associated-types-project-from-type-param-via-bound-in-where-clause.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-project-from-type-param-via-bound-in-where-clause.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,17 +12,14 @@\n // `Item` originates in a where-clause, not the declaration of\n // `T`. Issue #20300.\n \n-\n-#![feature(core)]\n-\n-use std::marker::{MarkerTrait, PhantomData};\n+use std::marker::{PhantomData};\n use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT};\n use std::sync::atomic::Ordering::SeqCst;\n \n static COUNTER: AtomicUsize = ATOMIC_USIZE_INIT;\n \n // Preamble.\n-trait Trait : MarkerTrait { type Item; }\n+trait Trait { type Item; }\n struct Struct;\n impl Trait for Struct {\n     type Item = u32;"}, {"sha": "a29953bea887bbb0869515b499ac1347c673639c", "filename": "src/test/run-pass/const-binops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fconst-binops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-binops.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -11,7 +11,6 @@\n \n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({\n-        use std::num::Float;\n         let (a, b) = (&$a, &$b);\n         assert!((*a - *b).abs() < 1.0e-6,\n                 \"{} is not approximately equal to {}\", *a, *b);"}, {"sha": "0234d7b0b6376e06fa6d4982a597ee0ee8d5fb5a", "filename": "src/test/run-pass/derive-no-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fderive-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderive-no-std.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -31,7 +31,6 @@ enum Bar {\n     Quux(u32),\n }\n \n-#[derive(FromPrimitive)]\n enum Baz { A=0, B=5, }\n \n fn main() {"}, {"sha": "4399d741cad1e104096c0b32851df7cde3005ca9", "filename": "src/test/run-pass/deriving-primitive.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/eeb94886adccb3f13003f92f117115d17846ce1f/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb94886adccb3f13003f92f117115d17846ce1f/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs?ref=eeb94886adccb3f13003f92f117115d17846ce1f", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(core)]\n-\n-use std::num::FromPrimitive;\n-use std::isize;\n-\n-#[derive(PartialEq, FromPrimitive, Debug)]\n-enum A {\n-    Foo = isize::MAX,\n-    Bar = 1,\n-    Baz = 3,\n-    Qux,\n-}\n-\n-pub fn main() {\n-    let x: Option<A> = FromPrimitive::from_int(isize::MAX);\n-    assert_eq!(x, Some(A::Foo));\n-\n-    let x: Option<A> = FromPrimitive::from_int(1);\n-    assert_eq!(x, Some(A::Bar));\n-\n-    let x: Option<A> = FromPrimitive::from_int(3);\n-    assert_eq!(x, Some(A::Baz));\n-\n-    let x: Option<A> = FromPrimitive::from_int(4);\n-    assert_eq!(x, Some(A::Qux));\n-\n-    let x: Option<A> = FromPrimitive::from_int(5);\n-    assert_eq!(x, None);\n-}"}, {"sha": "0a490466ef73b3f109b38b62e50ed2e7c9402fdc", "filename": "src/test/run-pass/early-ret-binop-add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,8 +10,8 @@\n \n // pretty-expanded FIXME #23616\n \n-use std::num::Int;\n+use std::ops::Add;\n \n-fn wsucc<T:Int>(n: T) -> T { n + { return n } }\n+fn wsucc<T:Add<Output=T> + Copy>(n: T) -> T { n + { return n } }\n \n pub fn main() { }"}, {"sha": "4d54bb4ef7250170aa5027128919eecbcfd84a21", "filename": "src/test/run-pass/exponential-notation.rs", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/eeb94886adccb3f13003f92f117115d17846ce1f/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb94886adccb3f13003f92f117115d17846ce1f/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexponential-notation.rs?ref=eeb94886adccb3f13003f92f117115d17846ce1f", "patch": "@@ -1,39 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#![feature(std_misc)]\n-\n-use std::num::strconv::ExponentFormat::{ExpBin, ExpDec};\n-use std::num::strconv::SignificantDigits::DigMax;\n-use std::num::strconv::SignFormat::{SignAll, SignNeg};\n-use std::num::strconv::float_to_str_common as to_string;\n-\n-macro_rules! t {\n-    ($a:expr, $b:expr) => { { let (r, _) = $a; assert_eq!(r, $b.to_string()); } }\n-}\n-\n-pub fn main() {\n-    // Basic usage\n-    t!(to_string(1.2345678e-5f64, 10, true, SignNeg, DigMax(6), ExpDec, false),\n-             \"1.234568e-5\");\n-\n-    // Hexadecimal output\n-    t!(to_string(7.281738281250e+01f64, 16, true, SignAll, DigMax(6), ExpBin, false),\n-              \"+1.2345p+6\");\n-    t!(to_string(-1.777768135071e-02f64, 16, true, SignAll, DigMax(6), ExpBin, false),\n-             \"-1.2345p-6\");\n-\n-    // Some denormals\n-    t!(to_string(4.9406564584124654e-324f64, 10, true, SignNeg, DigMax(6), ExpBin, false),\n-             \"1p-1074\");\n-    t!(to_string(2.2250738585072009e-308f64, 10, true, SignNeg, DigMax(6), ExpBin, false),\n-             \"1p-1022\");\n-}"}, {"sha": "421b19f2864fe6050edbf81576e87640adba5567", "filename": "src/test/run-pass/extern-methods.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fextern-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-methods.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,12 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n-\n-trait A : MarkerTrait {\n+trait A {\n     extern \"fastcall\" fn test1(i: i32);\n     extern fn test2(i: i32);\n }"}, {"sha": "856599431fd18149dfec2e84e1072f0c9076b45c", "filename": "src/test/run-pass/float-nan.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-nan.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(std_misc)]\n-\n-use std::num::Float;\n+use std::f64;\n \n pub fn main() {\n-  let nan: f64 = Float::nan();\n+  let nan: f64 = f64::NAN;\n   assert!((nan).is_nan());\n \n-  let inf: f64 = Float::infinity();\n-  let neg_inf: f64 = Float::neg_infinity();\n+  let inf: f64 = f64::INFINITY;\n+  let neg_inf: f64 = -f64::INFINITY;\n   assert_eq!(-inf, neg_inf);\n \n   assert!( nan !=  nan);"}, {"sha": "37ceaae373b9468a0c6392493be126d533b372af", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,7 +13,6 @@\n \n macro_rules! assert_approx_eq {\n     ($a:expr, $b:expr) => ({\n-        use std::num::Float;\n         let (a, b) = (&$a, &$b);\n         assert!((*a - *b).abs() < 1.0e-6,\n                 \"{} is not approximately equal to {}\", *a, *b);"}, {"sha": "b4621a2d053b1de4dae9e8d12d889575b2b75115", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,10 +12,7 @@\n \n #![feature(collections)]\n \n-extern crate collections;\n-\n use std::collections::BitVec;\n-use std::num::Float;\n \n fn main() {\n     // Generate sieve of Eratosthenes for n up to 1e6"}, {"sha": "ca68272d2d0f295f605d6df8b89f22a0f664ec49", "filename": "src/test/run-pass/issue-13105.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fissue-13105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13105.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,11 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n-\n-trait Foo : MarkerTrait {\n+trait Foo {\n     fn quux(u8) {}\n }\n "}, {"sha": "4ebc43163ede894d451b8a85d612a218ff334271", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 22, "deletions": 27, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,35 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(zero_one)]\n \n-#![feature(core)]\n-\n-use std::num::Int;\n+use std::num::Zero;\n use std::thread;\n \n-// Avoid using constants, which would trigger compile-time errors.\n-fn min_val<T: Int>() -> T { Int::min_value() }\n-fn zero<T: Int>() -> T { Int::zero() }\n-\n fn main() {\n-    assert!(thread::spawn(move|| { min_val::<isize>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i8>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i16>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i32>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i64>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1isize / zero::<isize>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i8 / zero::<i8>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i16 / zero::<i16>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i32 / zero::<i32>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i64 / zero::<i64>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<isize>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i8>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i16>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i32>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { min_val::<i64>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1isize % zero::<isize>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i8 % zero::<i8>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i16 % zero::<i16>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i32 % zero::<i32>(); }).join().is_err());\n-    assert!(thread::spawn(move|| { 1i64 % zero::<i64>(); }).join().is_err());\n+    assert!(thread::spawn(move|| { isize::min_value() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i8::min_value() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i16::min_value() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i32::min_value() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i64::min_value() / -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize / isize::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 / i8::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 / i16::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 / i32::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 / i64::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { isize::min_value() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i8::min_value() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i16::min_value() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i32::min_value() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { i64::min_value() % -1; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize % isize::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i8 % i8::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i16 % i16::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i32 % i32::zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1i64 % i64::zero(); }).join().is_err());\n }"}, {"sha": "b7de1b5f4cbb536efd0a3276093f0bae9f24b05b", "filename": "src/test/run-pass/monomorphized-callees-with-ty-params-3314.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphized-callees-with-ty-params-3314.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,11 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::marker::MarkerTrait;\n-\n-trait Serializer : MarkerTrait {\n+trait Serializer {\n }\n \n trait Serializable {"}, {"sha": "b1d71abc78599c0bb908e08513fa12cedb0d6df9", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -15,11 +15,7 @@\n // necessary. Testing the methods of the impls is done within the source\n // file for each numeric type.\n \n-\n-#![feature(core)]\n-\n use std::ops::Add;\n-use std::num::ToPrimitive;\n \n pub fn main() {\n // ints\n@@ -37,9 +33,4 @@ pub fn main() {\n     assert_eq!(15_u16.add(6u16), 21_u16);\n     assert_eq!(15_u32.add(6u32), 21_u32);\n     assert_eq!(15_u64.add(6u64), 21_u64);\n-\n-// floats\n-    // num\n-    assert_eq!(10_f32.to_i32().unwrap(), 10);\n-    assert_eq!(10_f64.to_i32().unwrap(), 10);\n }"}, {"sha": "5e924d015b619ca712aa6101f2c89794d21199a5", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,7 +13,6 @@\n \n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::num::ToPrimitive;\n \n #[derive(PartialEq, Debug)]\n struct Point {\n@@ -23,9 +22,6 @@ struct Point {\n \n pub fn main() {\n     let box_5: Box<_> = box 5_usize;\n-    assert_eq!(Rc::new(5_usize).to_uint(), Some(5));\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-    assert_eq!((Box::new(&Box::new(&Rc::new(Box::new(Box::new(&box_5)))))).to_uint(), Some(5));\n     let point = Rc::new(Point {x: 2, y: 4});\n     assert_eq!(point.x, 2);\n     assert_eq!(point.y, 4);"}, {"sha": "f69b857981d788f735983ad3ebf87e70d129c181", "filename": "src/test/run-pass/syntax-trait-polarity.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-trait-polarity.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,15 +10,13 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(optin_builtin_traits, core)]\n-\n-use std::marker::{MarkerTrait, Send};\n+#![feature(optin_builtin_traits)]\n \n struct TestType;\n \n impl TestType {}\n \n-trait TestTrait : MarkerTrait {}\n+trait TestTrait {}\n \n impl !Send for TestType {}\n "}, {"sha": "558e69664ecf9c840f74cd2f09f483ef929b9e0e", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-trait Foo : ::std::marker::MarkerTrait {\n+trait Foo {\n }\n \n fn b(_x: Box<Foo+Send>) {"}, {"sha": "bb8ae8247fa99abe9d4b36e1d0cbabde496af10a", "filename": "src/test/run-pass/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-on-structs-and-enums.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -12,10 +12,10 @@\n \n #![feature(core)]\n \n-trait U : ::std::marker::MarkerTrait {}\n+trait U {}\n trait T<X: U> { fn get(self) -> X; }\n \n-trait S2<Y: U> : ::std::marker::MarkerTrait {\n+trait S2<Y: U> {\n     fn m(x: Box<T<Y>+'static>) {}\n }\n "}, {"sha": "d984e9cdc990fb3cda395eb31f0d98b39af857a1", "filename": "src/test/run-pass/trait-bounds-recursion.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-recursion.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,21 +10,19 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n trait I { fn i(&self) -> Self; }\n \n-trait A<T:I> : ::std::marker::MarkerTrait {\n+trait A<T:I> {\n     fn id(x:T) -> T { x.i() }\n }\n \n trait J<T> { fn j(&self) -> T; }\n \n-trait B<T:J<T>> : ::std::marker::MarkerTrait {\n+trait B<T:J<T>> {\n     fn id(x:T) -> T { x.j() }\n }\n \n-trait C : ::std::marker::MarkerTrait {\n+trait C {\n     fn id<T:J<T>>(x:T) -> T { x.j() }\n }\n "}, {"sha": "e5390ac8a6256c96d5c238f7a6299be828696823", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,16 +10,11 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::cmp::{PartialEq, PartialOrd};\n-use std::num::NumCast;\n-\n-pub trait NumExt: NumCast + PartialEq + PartialOrd {}\n+pub trait NumExt: PartialEq + PartialOrd {}\n \n pub trait FloatExt: NumExt {}\n \n-fn greater_than_one<T: NumExt>(n: &T) -> bool { *n > NumCast::from(1).unwrap() }\n-fn greater_than_one_float<T: FloatExt>(n: &T) -> bool { *n > NumCast::from(1).unwrap() }\n+fn greater_than_one<T: NumExt>(n: &T) -> bool { loop {} }\n+fn greater_than_one_float<T: FloatExt>(n: &T) -> bool { loop {} }\n \n pub fn main() {}"}, {"sha": "83c2a9ad33926281c369c1729ded5099dc684254", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -15,7 +15,10 @@\n #![feature(core)]\n \n use std::cmp::PartialOrd;\n-use std::num::NumCast;\n+\n+pub trait NumCast {\n+    fn from(i: i32) -> Option<Self>;\n+}\n \n pub trait Num {\n     fn from_int(i: isize) -> Self;"}, {"sha": "14a6a9a0c664ce1fd1c5f61526db25c0ced5e6b3", "filename": "src/test/run-pass/trait-inheritance-num1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num1.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,10 +10,9 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::cmp::PartialOrd;\n-use std::num::NumCast;\n+pub trait NumCast {\n+    fn from(i: i32) -> Option<Self>;\n+}\n \n pub trait NumExt: NumCast + PartialOrd { }\n "}, {"sha": "5f8541a6da1e88c2a360eff74c0254a6389ee8d9", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,12 +10,7 @@\n \n // A more complex example of numeric extensions\n \n-#![feature(core)]\n-\n-use std::cmp::{PartialEq, PartialOrd};\n-use std::num::NumCast;\n-\n-pub trait TypeExt : ::std::marker::MarkerTrait { }\n+pub trait TypeExt {}\n \n impl TypeExt for u8 {}\n impl TypeExt for u16 {}\n@@ -33,7 +28,7 @@ impl TypeExt for f32 {}\n impl TypeExt for f64 {}\n \n \n-pub trait NumExt: TypeExt + PartialEq + PartialOrd + NumCast {}\n+pub trait NumExt: TypeExt + PartialEq + PartialOrd {}\n \n impl NumExt for u8 {}\n impl NumExt for u16 {}"}, {"sha": "abf8d2baf8732154115bbe5e674c73c4e22bf512", "filename": "src/test/run-pass/trait-inheritance-num3.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num3.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(core)]\n-\n-use std::cmp::{PartialEq, PartialOrd};\n-use std::num::NumCast;\n+pub trait NumCast {\n+    fn from(i: i32) -> Option<Self>;\n+}\n \n pub trait NumExt: PartialEq + PartialOrd + NumCast {}\n \n impl NumExt for f32 {}\n+impl NumCast for f32 {\n+    fn from(i: i32) -> Option<f32> { Some(i as f32) }\n+}\n \n fn num_eq_one<T: NumExt>(n: T) {\n     println!(\"{}\", n == NumCast::from(1).unwrap())"}, {"sha": "c6f8a5d4f1d99f98bda8a384088d0f6123528326", "filename": "src/test/run-pass/trait-inheritance-num5.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num5.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,16 +10,22 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(core)]\n-\n-use std::cmp::PartialEq;\n-use std::num::NumCast;\n+pub trait NumCast {\n+    fn from(i: i32) -> Option<Self>;\n+}\n \n pub trait NumExt: PartialEq + NumCast {}\n \n impl NumExt for f32 {}\n impl NumExt for isize {}\n \n+impl NumCast for f32 {\n+    fn from(i: i32) -> Option<f32> { Some(i as f32) }\n+}\n+impl NumCast for isize {\n+    fn from(i: i32) -> Option<isize> { Some(i as isize) }\n+}\n+\n fn num_eq_one<T:NumExt>() -> T {\n     NumCast::from(1).unwrap()\n }"}, {"sha": "c7e206cb474b86d81d0dbf3f66484972faf09b26", "filename": "src/test/run-pass/trait-inheritance-self-in-supertype.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-self-in-supertype.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -10,9 +10,6 @@\n \n // Test for issue #4183: use of Self in supertraits.\n \n-\n-use std::num::Float as StdFloat;\n-\n pub static FUZZY_EPSILON: f64 = 0.1;\n \n pub trait FuzzyEq<Eps> {"}, {"sha": "67bea3864a7720ffac467765398ee852071c3665", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+pub trait MyEq {}\n \n-#![feature(core)]\n-\n-pub trait MyEq : ::std::marker::MarkerTrait { }\n-\n-pub trait MyNum : ::std::marker::MarkerTrait {\n+pub trait MyNum {\n     fn from_int(isize) -> Self;\n }\n "}, {"sha": "c4944548e17f02c1eedf7113eaa4a107f4f24580", "filename": "src/test/run-pass/unboxed-closures-infer-argument-types-from-expected-bound.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-bound.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,14 +13,18 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, core)]\n+pub trait ToPrimitive {\n+    fn to_int(&self) {}\n+}\n \n-use std::num::ToPrimitive;\n+impl ToPrimitive for isize {}\n+impl ToPrimitive for i32 {}\n+impl ToPrimitive for usize {}\n \n fn doit<T,F>(val: T, f: &F)\n     where F : Fn(T)\n {\n-    f.call((val,))\n+    f(val)\n }\n \n pub fn main() {"}, {"sha": "9cad7d61e32c5e6d1977ee66be876b86190166bd", "filename": "src/test/run-pass/unboxed-closures-infer-argument-types-from-expected-object-type.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-object-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-object-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-from-expected-object-type.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,11 +13,15 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, core)]\n+pub trait ToPrimitive {\n+    fn to_int(&self) {}\n+}\n \n-use std::num::ToPrimitive;\n+impl ToPrimitive for isize {}\n+impl ToPrimitive for i32 {}\n+impl ToPrimitive for usize {}\n \n-fn doit<T>(val: T, f: &Fn(T)) { f.call((val,)) }\n+fn doit<T>(val: T, f: &Fn(T)) { f(val) }\n \n pub fn main() {\n     doit(0, &|x /*: isize*/ | { x.to_int(); });"}, {"sha": "bdd1932182bdcbc19507fef7bbb25abacbe81854", "filename": "src/test/run-pass/unboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-argument-types-with-bound-regions-from-expected-bound.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -13,14 +13,18 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures, core)]\n+pub trait ToPrimitive {\n+    fn to_int(&self) {}\n+}\n \n-use std::num::ToPrimitive;\n+impl ToPrimitive for isize {}\n+impl ToPrimitive for i32 {}\n+impl ToPrimitive for usize {}\n \n fn doit<T,F>(val: T, f: &F)\n     where F : Fn(&T)\n {\n-    f.call((&val,))\n+    f(&val)\n }\n \n pub fn main() {"}, {"sha": "579070a295adf90a0f4c40b668701eef3ff6147d", "filename": "src/test/run-pass/utf8_idents.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0791f9f406053d84dc7136c2be015a469304d7f0/src%2Ftest%2Frun-pass%2Futf8_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_idents.rs?ref=0791f9f406053d84dc7136c2be015a469304d7f0", "patch": "@@ -11,8 +11,6 @@\n \n #![feature(non_ascii_idents)]\n \n-use std::num::Float;\n-\n pub fn main() {\n     let \u03b5 = 0.00001f64;\n     let \u03a0 = 3.14f64;"}]}