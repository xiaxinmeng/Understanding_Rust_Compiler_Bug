{"sha": "3b804942fdcc8858644218a570e034062021c7a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiODA0OTQyZmRjYzg4NTg2NDQyMThhNTcwZTAzNDA2MjAyMWM3YTQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-10T10:34:15Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-10T10:34:15Z"}, "message": "simplify the stepper interface", "tree": {"sha": "307f8400afc53cb853c3eeb790e094e510db3036", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/307f8400afc53cb853c3eeb790e094e510db3036"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b804942fdcc8858644218a570e034062021c7a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXWpenAAoJEFbW7qD8Z6xGrhcQAIrY+ehccYqzQXZHK/hi0lwN\nDnHFLMArYSdlEwiExNI0J5KAFK4Y2L0ZOqqxH22OeuxslhXnCHH9g0YLxhTquLFa\nvtRneu1X7x+k1cpocyqflqlz4vTxyQrrqMV8Pu8SeWUJnYl1QoIwvgIpsI9m+EmS\nQt3nnGE5ZwJnPDvJp0fGvsC5tM1AuXf+XnJRhITdku8ok5M/FGSjP4sjTTK1Gwfs\nIdHINFs0q4PRyPzt2HdkE+uTf8+IIqKoh3Dv1wO6MnFAWRCyKzyxXNh+75t7cZQQ\nRvNHwavoQKP6dkihcYEXAibYIDU86N6j9WPRYAHXERagcx8i88iQbXofvvdy7Wmo\ncGsIDCIhp2j/Kn/wh4SwPnqvyXsC1hzF+NzSRu+sPIoVwRXgM3dkdBlrkaj4TGTu\nbC2ePCK7KKIBKSGIAl50yDVxkEpmnms+PPtbWBFvM77fAL/b8sNDb0vBFkc9B5hA\ndZ0wmjWoP9jUVMyEGox1P4X+y5KdnWZhClgDynRMw0CsI+AujQRSi8nf/bVER9yp\nn3UoIw24ceEbjnaETSolvGaZgQnB5opgcPuTAAtQxk540ibri1W/rB3HQw8FnKu3\nBu68AHTjdc6ODkh5XYjxYOKZF4q49upyViWlcXYLAOOnMD89+QSw4r0/UfFsjZTY\nVOd2fzpjo1FkwCVd1rgi\n=DlgQ\n-----END PGP SIGNATURE-----", "payload": "tree 307f8400afc53cb853c3eeb790e094e510db3036\nparent 8c3a066d8d6fec4720c171130816c97ed209ce95\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465554855 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465554855 +0200\n\nsimplify the stepper interface"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b804942fdcc8858644218a570e034062021c7a4", "html_url": "https://github.com/rust-lang/rust/commit/3b804942fdcc8858644218a570e034062021c7a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b804942fdcc8858644218a570e034062021c7a4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c3a066d8d6fec4720c171130816c97ed209ce95", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c3a066d8d6fec4720c171130816c97ed209ce95", "html_url": "https://github.com/rust-lang/rust/commit/8c3a066d8d6fec4720c171130816c97ed209ce95"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "2673f5609032649d60df00ed49f4ca2e087d8e1c", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3b804942fdcc8858644218a570e034062021c7a4/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b804942fdcc8858644218a570e034062021c7a4/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=3b804942fdcc8858644218a570e034062021c7a4", "patch": "@@ -24,7 +24,7 @@ use std::collections::HashMap;\n \n mod stepper;\n \n-struct GlobalEvalContext<'a, 'tcx: 'a> {\n+pub struct GlobalEvalContext<'a, 'tcx: 'a> {\n     /// The results of the type checker, from rustc.\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n@@ -335,12 +335,6 @@ impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n         err.emit();\n     }\n \n-    fn run(&mut self) -> EvalResult<()> {\n-        let mut stepper = stepper::Stepper::new(self);\n-        while stepper.step()? {}\n-        Ok(())\n-    }\n-\n     fn push_stack_frame(&mut self, def_id: DefId, span: codemap::Span, mir: CachedMir<'a, 'tcx>, substs: &'tcx Substs<'tcx>,\n         return_ptr: Option<Pointer>)\n     {\n@@ -1414,14 +1408,22 @@ pub fn interpret_start_points<'a, 'tcx>(\n \n                 gecx.push_stack_frame(tcx.map.local_def_id(id), mir.span, CachedMir::Ref(mir), substs, return_ptr);\n \n-                match (gecx.run(), return_ptr) {\n-                    (Ok(()), Some(ptr)) => if log_enabled!(::log::LogLevel::Debug) {\n+                loop { match (stepper::step(&mut gecx), return_ptr) {\n+                    (Ok(true), _) => {},\n+                    (Ok(false), Some(ptr)) => if log_enabled!(::log::LogLevel::Debug) {\n                         gecx.memory.dump(ptr.alloc_id);\n+                        break;\n+                    },\n+                    (Ok(false), None) => {\n+                        warn!(\"diverging function returned\");\n+                        break;\n                     },\n-                    (Ok(()), None) => warn!(\"diverging function returned\"),\n                     // FIXME: diverging functions can end up here in some future miri\n-                    (Err(e), _) => gecx.report(e),\n-                }\n+                    (Err(e), _) => {\n+                        gecx.report(e);\n+                        break;\n+                    },\n+                } }\n             }\n         }\n     }"}, {"sha": "10145bdce2718d571bd7ba4bf22e3b36ae0544e8", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3b804942fdcc8858644218a570e034062021c7a4/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b804942fdcc8858644218a570e034062021c7a4/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=3b804942fdcc8858644218a570e034062021c7a4", "patch": "@@ -12,12 +12,16 @@ use rustc::mir::visit::{Visitor, LvalueContext};\n use syntax::codemap::Span;\n use std::rc::Rc;\n \n-pub struct Stepper<'fncx, 'a: 'fncx, 'tcx: 'a>{\n+struct Stepper<'fncx, 'a: 'fncx, 'tcx: 'a>{\n     gecx: &'fncx mut GlobalEvalContext<'a, 'tcx>,\n }\n \n+pub fn step<'fncx, 'a: 'fncx, 'tcx: 'a>(gecx: &'fncx mut GlobalEvalContext<'a, 'tcx>) -> EvalResult<bool> {\n+    Stepper::new(gecx).step()\n+}\n+\n impl<'fncx, 'a, 'tcx> Stepper<'fncx, 'a, 'tcx> {\n-    pub(super) fn new(gecx: &'fncx mut GlobalEvalContext<'a, 'tcx>) -> Self {\n+    fn new(gecx: &'fncx mut GlobalEvalContext<'a, 'tcx>) -> Self {\n         Stepper {\n             gecx: gecx,\n         }\n@@ -43,7 +47,7 @@ impl<'fncx, 'a, 'tcx> Stepper<'fncx, 'a, 'tcx> {\n     }\n \n     // returns true as long as there are more things to do\n-    pub fn step(&mut self) -> EvalResult<bool> {\n+    fn step(&mut self) -> EvalResult<bool> {\n         if self.gecx.stack.is_empty() {\n             return Ok(false);\n         }"}]}