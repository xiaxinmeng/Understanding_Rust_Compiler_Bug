{"sha": "b258de7bda2963a0e1940fc419011560937b2b08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNThkZTdiZGEyOTYzYTBlMTk0MGZjNDE5MDExNTYwOTM3YjJiMDg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-20T23:17:37Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T23:52:50Z"}, "message": "libcore: add `Rhs` input parameter to comparison traits", "tree": {"sha": "a41f8dbd40260c63bdfb0206312b3bf6ba81a941", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a41f8dbd40260c63bdfb0206312b3bf6ba81a941"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b258de7bda2963a0e1940fc419011560937b2b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b258de7bda2963a0e1940fc419011560937b2b08", "html_url": "https://github.com/rust-lang/rust/commit/b258de7bda2963a0e1940fc419011560937b2b08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b258de7bda2963a0e1940fc419011560937b2b08/comments", "author": null, "committer": null, "parents": [{"sha": "3a325c666d2cb7e297bf3057ff2442f96a79428b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a325c666d2cb7e297bf3057ff2442f96a79428b", "html_url": "https://github.com/rust-lang/rust/commit/3a325c666d2cb7e297bf3057ff2442f96a79428b"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "11878dc76d9893bec3a0a8935b803b9ad575dc7f", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b258de7bda2963a0e1940fc419011560937b2b08/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b258de7bda2963a0e1940fc419011560937b2b08/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=b258de7bda2963a0e1940fc419011560937b2b08", "patch": "@@ -61,13 +61,13 @@ use option::{Option, Some, None};\n /// `Eq`.\n #[lang=\"eq\"]\n #[unstable = \"Definition may change slightly after trait reform\"]\n-pub trait PartialEq for Sized? {\n+pub trait PartialEq<Sized? Rhs = Self> for Sized? {\n     /// This method tests for `self` and `other` values to be equal, and is used by `==`.\n-    fn eq(&self, other: &Self) -> bool;\n+    fn eq(&self, other: &Rhs) -> bool;\n \n     /// This method tests for `!=`.\n     #[inline]\n-    fn ne(&self, other: &Self) -> bool { !self.eq(other) }\n+    fn ne(&self, other: &Rhs) -> bool { !self.eq(other) }\n }\n \n /// Trait for equality comparisons which are [equivalence relations](\n@@ -80,7 +80,7 @@ pub trait PartialEq for Sized? {\n /// - symmetric: `a == b` implies `b == a`; and\n /// - transitive: `a == b` and `b == c` implies `a == c`.\n #[unstable = \"Definition may change slightly after trait reform\"]\n-pub trait Eq for Sized?: PartialEq {\n+pub trait Eq<Sized? Rhs = Self> for Sized?: PartialEq<Rhs> {\n     // FIXME #13101: this method is used solely by #[deriving] to\n     // assert that every component of a type implements #[deriving]\n     // itself, the current deriving infrastructure means doing this\n@@ -150,7 +150,7 @@ impl Ordering {\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for\n ///   both `==` and `>`.\n #[unstable = \"Definition may change slightly after trait reform\"]\n-pub trait Ord for Sized?: Eq + PartialOrd {\n+pub trait Ord<Sized? Rhs = Self> for Sized?: Eq<Rhs> + PartialOrd<Rhs> {\n     /// This method returns an ordering between `self` and `other` values.\n     ///\n     /// By convention, `self.cmp(&other)` returns the ordering matching\n@@ -161,7 +161,7 @@ pub trait Ord for Sized?: Eq + PartialOrd {\n     /// assert_eq!(10u.cmp(&5),  Greater);  // because 10 > 5\n     /// assert_eq!( 5u.cmp(&5),  Equal);    // because 5 == 5\n     /// ```\n-    fn cmp(&self, other: &Self) -> Ordering;\n+    fn cmp(&self, other: &Rhs) -> Ordering;\n }\n \n #[unstable = \"Trait is unstable.\"]\n@@ -194,14 +194,14 @@ impl PartialOrd for Ordering {\n /// 5.11).\n #[lang=\"ord\"]\n #[unstable = \"Definition may change slightly after trait reform\"]\n-pub trait PartialOrd for Sized?: PartialEq {\n+pub trait PartialOrd<Sized? Rhs = Self> for Sized?: PartialEq<Rhs> {\n     /// This method returns an ordering between `self` and `other` values\n     /// if one exists.\n-    fn partial_cmp(&self, other: &Self) -> Option<Ordering>;\n+    fn partial_cmp(&self, other: &Rhs) -> Option<Ordering>;\n \n     /// This method tests less than (for `self` and `other`) and is used by the `<` operator.\n     #[inline]\n-    fn lt(&self, other: &Self) -> bool {\n+    fn lt(&self, other: &Rhs) -> bool {\n         match self.partial_cmp(other) {\n             Some(Less) => true,\n             _ => false,\n@@ -210,7 +210,7 @@ pub trait PartialOrd for Sized?: PartialEq {\n \n     /// This method tests less than or equal to (`<=`).\n     #[inline]\n-    fn le(&self, other: &Self) -> bool {\n+    fn le(&self, other: &Rhs) -> bool {\n         match self.partial_cmp(other) {\n             Some(Less) | Some(Equal) => true,\n             _ => false,\n@@ -219,7 +219,7 @@ pub trait PartialOrd for Sized?: PartialEq {\n \n     /// This method tests greater than (`>`).\n     #[inline]\n-    fn gt(&self, other: &Self) -> bool {\n+    fn gt(&self, other: &Rhs) -> bool {\n         match self.partial_cmp(other) {\n             Some(Greater) => true,\n             _ => false,\n@@ -228,7 +228,7 @@ pub trait PartialOrd for Sized?: PartialEq {\n \n     /// This method tests greater than or equal to (`>=`).\n     #[inline]\n-    fn ge(&self, other: &Self) -> bool {\n+    fn ge(&self, other: &Rhs) -> bool {\n         match self.partial_cmp(other) {\n             Some(Greater) | Some(Equal) => true,\n             _ => false,"}, {"sha": "5ad9462daf274cfe525ed29cd9c1912ea59db663", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b258de7bda2963a0e1940fc419011560937b2b08/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b258de7bda2963a0e1940fc419011560937b2b08/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=b258de7bda2963a0e1940fc419011560937b2b08", "patch": "@@ -59,6 +59,7 @@\n #![allow(unknown_features)]\n #![feature(globs, intrinsics, lang_items, macro_rules, phase)]\n #![feature(simd, unsafe_destructor, slicing_syntax)]\n+#![feature(default_type_params)]\n #![deny(missing_docs)]\n \n mod macros;"}]}