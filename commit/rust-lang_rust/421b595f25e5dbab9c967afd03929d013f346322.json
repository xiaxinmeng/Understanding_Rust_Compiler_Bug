{"sha": "421b595f25e5dbab9c967afd03929d013f346322", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWI1OTVmMjVlNWRiYWI5Yzk2N2FmZDAzOTI5ZDAxM2YzNDYzMjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-28T17:20:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-28T17:20:55Z"}, "message": "Auto merge of #37450 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #36206, #37343, #37430, #37436, #37441\n- Failed merges:", "tree": {"sha": "0b59aec9588a4d629bf8ad15509f35d6ae33d9a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b59aec9588a4d629bf8ad15509f35d6ae33d9a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421b595f25e5dbab9c967afd03929d013f346322", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421b595f25e5dbab9c967afd03929d013f346322", "html_url": "https://github.com/rust-lang/rust/commit/421b595f25e5dbab9c967afd03929d013f346322", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421b595f25e5dbab9c967afd03929d013f346322/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d746718086dfcc12f73562b1996daf2f8ba643", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d746718086dfcc12f73562b1996daf2f8ba643", "html_url": "https://github.com/rust-lang/rust/commit/36d746718086dfcc12f73562b1996daf2f8ba643"}, {"sha": "61e765ad982c7b01753ebe9971b4ce407bbdb0d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/61e765ad982c7b01753ebe9971b4ce407bbdb0d9", "html_url": "https://github.com/rust-lang/rust/commit/61e765ad982c7b01753ebe9971b4ce407bbdb0d9"}], "stats": {"total": 63, "additions": 58, "deletions": 5}, "files": [{"sha": "80b60fbf0e35cd248fd5691045f31cbb54c80e49", "filename": "src/doc/reference.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -4078,6 +4078,12 @@ be ignored in favor of only building the artifacts specified by command line.\n   Rust code into an existing non-Rust application because it will not have\n   dynamic dependencies on other Rust code.\n \n+* `--crate-type=cdylib`, `#[crate_type = \"cdylib\"]` - A dynamic system\n+  library will be produced.  This is used when compiling Rust code as\n+  a dynamic library to be loaded from another language.  This output type will\n+  create `*.so` files on Linux, `*.dylib` files on OSX, and `*.dll` files on\n+  Windows.\n+\n * `--crate-type=rlib`, `#[crate_type = \"rlib\"]` - A \"Rust library\" file will be\n   produced. This is used as an intermediate artifact and can be thought of as a\n   \"static Rust library\". These `rlib` files, unlike `staticlib` files, are"}, {"sha": "0b382fcbfdd514a8d801f8f6939a7e1f90a0b9da", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -1401,7 +1401,7 @@ impl<'a> Resolver<'a> {\n \n                                 format!(\"Did you mean `{}{}`?\", prefix, path_str)\n                             }\n-                            None => format!(\"Maybe a missing `extern crate {}`?\", segment_name),\n+                            None => format!(\"Maybe a missing `extern crate {};`?\", segment_name),\n                         }\n                     } else {\n                         format!(\"Could not find `{}` in `{}`\", segment_name, module_name)"}, {"sha": "73d0e5e50c6c7b0d1665cd2923411d6a11070d2b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -166,6 +166,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                        loc.file.name,\n                        loc.line);\n             }\n+            error!(\"    master span: {:?}: `{}`\", path.span, self.span.snippet(path.span));\n             return vec!();\n         }\n "}, {"sha": "6b26c016638a7e2c9df7fecca7daec162e93041c", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -147,6 +147,10 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n // =============================================================================\n // In-memory buffer implementations\n \n+/// Read is implemented for `&[u8]` by copying from the slice.\n+///\n+/// Note that reading updates the slice to point to the yet unread part.\n+/// The slice will be empty when EOF is reached.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Read for &'a [u8] {\n     #[inline]\n@@ -180,6 +184,11 @@ impl<'a> BufRead for &'a [u8] {\n     fn consume(&mut self, amt: usize) { *self = &self[amt..]; }\n }\n \n+/// Write is implemented for `&mut [u8]` by copying into the slice, overwriting\n+/// its data.\n+///\n+/// Note that writing updates the slice to point to the yet unwritten part.\n+/// The slice will be empty when it has been completely overwritten.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Write for &'a mut [u8] {\n     #[inline]\n@@ -204,6 +213,8 @@ impl<'a> Write for &'a mut [u8] {\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n \n+/// Write is implemented for `Vec<u8>` by appending to the vector.\n+/// The vector will grow as needed.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Vec<u8> {\n     #[inline]"}, {"sha": "da5d754b5990415f126d0a0abc38a66a8432f700", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -1757,6 +1757,17 @@ impl<'a> Parser<'a> {\n             // First, parse an identifier.\n             let identifier = self.parse_path_segment_ident()?;\n \n+            if self.check(&token::ModSep) && self.look_ahead(1, |t| *t == token::Lt) {\n+                self.bump();\n+                let prev_span = self.prev_span;\n+\n+                let mut err = self.diagnostic().struct_span_err(prev_span,\n+                    \"unexpected token: `::`\");\n+                err.help(\n+                    \"use `<...>` instead of `::<...>` if you meant to specify type arguments\");\n+                err.emit();\n+            }\n+\n             // Parse types, optionally.\n             let parameters = if self.eat_lt() {\n                 let (lifetimes, types, bindings) = self.parse_generic_values_after_lt()?;"}, {"sha": "687f8c902f2597fd9858d22aaba1139a94c41b6e", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -1460,8 +1460,9 @@ impl<'a> MethodDef<'a> {\n             .iter()\n             .map(|v| {\n                 let ident = v.node.name;\n+                let sp = Span { expn_id: trait_.span.expn_id, ..v.span };\n                 let summary = trait_.summarise_struct(cx, &v.node.data);\n-                (ident, v.span, summary)\n+                (ident, sp, summary)\n             })\n             .collect();\n         self.call_substructure_method(cx,"}, {"sha": "c6f76ca78874bdc74e290e685ec285a503207e67", "filename": "src/test/compile-fail/issue-12612.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12612.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -16,7 +16,7 @@ use foo::bar;\n \n mod test {\n     use bar::foo; //~ ERROR unresolved import `bar::foo` [E0432]\n-                  //~^ Maybe a missing `extern crate bar`?\n+                  //~^ Maybe a missing `extern crate bar;`?\n }\n \n fn main() {}"}, {"sha": "1375200271c552c791d51b15410b84bd488b5efc", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -11,6 +11,6 @@\n // Testing that we don't fail abnormally after hitting the errors\n \n use unresolved::*; //~ ERROR unresolved import `unresolved::*` [E0432]\n-                   //~^ Maybe a missing `extern crate unresolved`?\n+                   //~^ Maybe a missing `extern crate unresolved;`?\n \n fn main() {}"}, {"sha": "9abf2b5ec3ad3d988e2531849a22837d8fdb4a1f", "filename": "src/test/compile-fail/issue-36116.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36116.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<T> {\n+    _a: T,\n+}\n+\n+fn main() {\n+    let f = Some(Foo { _a: 42 }).map(|a| a as Foo::<i32>);\n+    //~^ ERROR unexpected token: `::`\n+    //~| HELP use `<...>` instead of `::<...>` if you meant to specify type arguments\n+\n+    let g: Foo::<i32> = Foo { _a: 42 };\n+    //~^ ERROR unexpected token: `::`\n+    //~| HELP use `<...>` instead of `::<...>` if you meant to specify type arguments\n+}"}, {"sha": "47490af0ff35edbd8ea28d12f411d6e0b4f73e44", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421b595f25e5dbab9c967afd03929d013f346322/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=421b595f25e5dbab9c967afd03929d013f346322", "patch": "@@ -11,7 +11,7 @@\n // ignore-tidy-linelength\n \n use foo::bar; //~ ERROR unresolved import `foo::bar` [E0432]\n-              //~^ Maybe a missing `extern crate foo`?\n+              //~^ Maybe a missing `extern crate foo;`?\n \n use bar::Baz as x; //~ ERROR unresolved import `bar::Baz` [E0432]\n                    //~^ no `Baz` in `bar`. Did you mean to use `Bar`?"}]}