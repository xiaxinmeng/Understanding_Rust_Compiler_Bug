{"sha": "cc57656969554bd0dcbf95641bebadc076fac61f", "node_id": "C_kwDOAAsO6NoAKGNjNTc2NTY5Njk1NTRiZDBkY2JmOTU2NDFiZWJhZGMwNzZmYWM2MWY", "commit": {"author": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-09T17:38:06Z"}, "committer": {"name": "ouz-a", "email": "oguz.agcayazi@gmail.com", "date": "2022-04-09T17:38:06Z"}, "message": "support multiple derefs", "tree": {"sha": "8b7b4aa7993475d3208f5801863c754e5ca27071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b7b4aa7993475d3208f5801863c754e5ca27071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc57656969554bd0dcbf95641bebadc076fac61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc57656969554bd0dcbf95641bebadc076fac61f", "html_url": "https://github.com/rust-lang/rust/commit/cc57656969554bd0dcbf95641bebadc076fac61f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc57656969554bd0dcbf95641bebadc076fac61f/comments", "author": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ouz-a", "id": 90461915, "node_id": "MDQ6VXNlcjkwNDYxOTE1", "avatar_url": "https://avatars.githubusercontent.com/u/90461915?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ouz-a", "html_url": "https://github.com/ouz-a", "followers_url": "https://api.github.com/users/ouz-a/followers", "following_url": "https://api.github.com/users/ouz-a/following{/other_user}", "gists_url": "https://api.github.com/users/ouz-a/gists{/gist_id}", "starred_url": "https://api.github.com/users/ouz-a/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ouz-a/subscriptions", "organizations_url": "https://api.github.com/users/ouz-a/orgs", "repos_url": "https://api.github.com/users/ouz-a/repos", "events_url": "https://api.github.com/users/ouz-a/events{/privacy}", "received_events_url": "https://api.github.com/users/ouz-a/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf6d6940c6e1368c76d2565ce13aeaa7e70a4b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf6d6940c6e1368c76d2565ce13aeaa7e70a4b7", "html_url": "https://github.com/rust-lang/rust/commit/1cf6d6940c6e1368c76d2565ce13aeaa7e70a4b7"}], "stats": {"total": 148, "additions": 135, "deletions": 13}, "files": [{"sha": "d8660d4f2fd869dfae1789b25ffd37461ad7bd72", "filename": "compiler/rustc_mir_transform/src/deref_separator.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cc57656969554bd0dcbf95641bebadc076fac61f/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc57656969554bd0dcbf95641bebadc076fac61f/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fderef_separator.rs?ref=cc57656969554bd0dcbf95641bebadc076fac61f", "patch": "@@ -11,6 +11,8 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         for (i, stmt) in data.statements.iter_mut().enumerate() {\n             match stmt.kind {\n                 StatementKind::Assign(box (og_place, Rvalue::Ref(region, borrow_knd, place))) => {\n+                    let mut place_local = place.local;\n+                    let mut last_len = 0;\n                     for (idx, (p_ref, p_elem)) in place.iter_projections().enumerate() {\n                         if p_elem == ProjectionElem::Deref && !p_ref.projection.is_empty() {\n                             // The type that we are derefing.\n@@ -23,14 +25,30 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n                             patch.add_statement(loc, StatementKind::StorageLive(temp));\n \n                             // We are adding current p_ref's projections to our\n-                            // temp value.\n-                            let deref_place =\n-                                Place::from(p_ref.local).project_deeper(p_ref.projection, tcx);\n-                            patch.add_assign(\n-                                loc,\n-                                Place::from(temp),\n-                                Rvalue::Use(Operand::Move(deref_place)),\n-                            );\n+                            // temp value, excluding projections we already covered.\n+                            if idx == 1 {\n+                                let deref_place = Place::from(place_local)\n+                                    .project_deeper(&p_ref.projection[last_len..], tcx);\n+                                patch.add_assign(\n+                                    loc,\n+                                    Place::from(temp),\n+                                    Rvalue::Use(Operand::Move(deref_place)),\n+                                );\n+\n+                                place_local = temp;\n+                                last_len = p_ref.projection.len();\n+                            } else {\n+                                let deref_place = Place::from(place_local)\n+                                    .project_deeper(&p_ref.projection[last_len..], tcx);\n+                                patch.add_assign(\n+                                    loc,\n+                                    Place::from(temp),\n+                                    Rvalue::Use(Operand::Move(deref_place)),\n+                                );\n+\n+                                place_local = temp;\n+                                last_len = p_ref.projection.len();\n+                            }\n \n                             // We are creating a place by using our temp value's location\n                             // and copying derefed values which we need to create new statement.\n@@ -50,11 +68,6 @@ pub fn deref_finder<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n                             // Since our job with the temp is done it should be gone\n                             let loc = Location { block: block, statement_index: i + 1 };\n                             patch.add_statement(loc, StatementKind::StorageDead(temp));\n-\n-                            // As all projections are off the base projection, if there are\n-                            // multiple derefs in the middle of projection, it might cause\n-                            // unsoundness, to not let that happen we break the loop.\n-                            break;\n                         }\n                     }\n                 }"}, {"sha": "d465724326e463078560663f9e49530212a61d70", "filename": "src/test/mir-opt/derefer_test_multiple.main.Derefer.diff", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/cc57656969554bd0dcbf95641bebadc076fac61f/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cc57656969554bd0dcbf95641bebadc076fac61f/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.main.Derefer.diff?ref=cc57656969554bd0dcbf95641bebadc076fac61f", "patch": "@@ -0,0 +1,100 @@\n+- // MIR for `main` before Derefer\n++ // MIR for `main` after Derefer\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/derefer_test_multiple.rs:2:12: 2:12\n+      let mut _1: (i32, i32);              // in scope 0 at $DIR/derefer_test_multiple.rs:3:9: 3:14\n+      let mut _3: &mut (i32, i32);         // in scope 0 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n+      let mut _5: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n+      let mut _7: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n++     let mut _10: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++     let mut _11: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++     let mut _12: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++     let mut _13: &mut (i32, &mut (i32, &mut (i32, i32))); // in scope 0 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++     let mut _14: &mut (i32, &mut (i32, i32)); // in scope 0 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++     let mut _15: &mut (i32, i32);        // in scope 0 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/derefer_test_multiple.rs:3:9: 3:14\n+          let mut _2: (i32, &mut (i32, i32)); // in scope 1 at $DIR/derefer_test_multiple.rs:4:9: 4:14\n+          scope 2 {\n+              debug b => _2;               // in scope 2 at $DIR/derefer_test_multiple.rs:4:9: 4:14\n+              let mut _4: (i32, &mut (i32, &mut (i32, i32))); // in scope 2 at $DIR/derefer_test_multiple.rs:5:9: 5:14\n+              scope 3 {\n+                  debug c => _4;           // in scope 3 at $DIR/derefer_test_multiple.rs:5:9: 5:14\n+                  let mut _6: (i32, &mut (i32, &mut (i32, &mut (i32, i32)))); // in scope 3 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n+                  scope 4 {\n+                      debug d => _6;       // in scope 4 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n+                      let _8: &mut i32;    // in scope 4 at $DIR/derefer_test_multiple.rs:7:9: 7:10\n+                      scope 5 {\n+                          debug x => _8;   // in scope 5 at $DIR/derefer_test_multiple.rs:7:9: 7:10\n+                          let _9: &mut i32; // in scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n+                          scope 6 {\n+                              debug y => _9; // in scope 6 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:3:9: 3:14\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/derefer_test_multiple.rs:3:17: 3:25\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/derefer_test_multiple.rs:3:17: 3:25\n+          StorageLive(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:9: 4:14\n+          StorageLive(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n+          _3 = &mut _1;                    // scope 1 at $DIR/derefer_test_multiple.rs:4:22: 4:28\n+          (_2.0: i32) = const 99_i32;      // scope 1 at $DIR/derefer_test_multiple.rs:4:17: 4:29\n+          (_2.1: &mut (i32, i32)) = move _3; // scope 1 at $DIR/derefer_test_multiple.rs:4:17: 4:29\n+          StorageDead(_3);                 // scope 1 at $DIR/derefer_test_multiple.rs:4:28: 4:29\n+          StorageLive(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:9: 5:14\n+          StorageLive(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n+          _5 = &mut _2;                    // scope 2 at $DIR/derefer_test_multiple.rs:5:22: 5:28\n+          (_4.0: i32) = const 11_i32;      // scope 2 at $DIR/derefer_test_multiple.rs:5:17: 5:29\n+          (_4.1: &mut (i32, &mut (i32, i32))) = move _5; // scope 2 at $DIR/derefer_test_multiple.rs:5:17: 5:29\n+          StorageDead(_5);                 // scope 2 at $DIR/derefer_test_multiple.rs:5:28: 5:29\n+          StorageLive(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:9: 6:14\n+          StorageLive(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n+          _7 = &mut _4;                    // scope 3 at $DIR/derefer_test_multiple.rs:6:22: 6:28\n+          (_6.0: i32) = const 13_i32;      // scope 3 at $DIR/derefer_test_multiple.rs:6:17: 6:29\n+          (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))) = move _7; // scope 3 at $DIR/derefer_test_multiple.rs:6:17: 6:29\n+          StorageDead(_7);                 // scope 3 at $DIR/derefer_test_multiple.rs:6:28: 6:29\n+          StorageLive(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:7:9: 7:10\n+-         _8 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         StorageLive(_10);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         _10 = move (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         StorageLive(_11);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         _11 = move ((*_10).1: &mut (i32, &mut (i32, i32))); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         StorageLive(_12);                // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         _12 = move ((*_11).1: &mut (i32, i32)); // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         _8 = &mut ((*_12).1: i32);       // scope 4 at $DIR/derefer_test_multiple.rs:7:13: 7:30\n++         StorageDead(_10);                // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n++         StorageDead(_11);                // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n++         StorageDead(_12);                // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n+          StorageLive(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:8:9: 8:10\n+-         _9 = &mut ((*((*((*(_6.1: &mut (i32, &mut (i32, &mut (i32, i32))))).1: &mut (i32, &mut (i32, i32)))).1: &mut (i32, i32))).1: i32); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         StorageLive(_13);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         _13 = move (_6.1: &mut (i32, &mut (i32, &mut (i32, i32)))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         StorageLive(_14);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         _14 = move ((*_13).1: &mut (i32, &mut (i32, i32))); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         StorageLive(_15);                // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         _15 = move ((*_14).1: &mut (i32, i32)); // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         _9 = &mut ((*_15).1: i32);       // scope 5 at $DIR/derefer_test_multiple.rs:8:13: 8:30\n++         StorageDead(_13);                // scope 0 at $DIR/derefer_test_multiple.rs:2:12: 9:2\n++         StorageDead(_14);                // scope 0 at $DIR/derefer_test_multiple.rs:2:12: 9:2\n++         StorageDead(_15);                // scope 0 at $DIR/derefer_test_multiple.rs:2:12: 9:2\n+          _0 = const ();                   // scope 0 at $DIR/derefer_test_multiple.rs:2:12: 9:2\n+          StorageDead(_9);                 // scope 5 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n+          StorageDead(_8);                 // scope 4 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n+          StorageDead(_6);                 // scope 3 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n+          StorageDead(_4);                 // scope 2 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n+          StorageDead(_2);                 // scope 1 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/derefer_test_multiple.rs:9:1: 9:2\n+          return;                          // scope 0 at $DIR/derefer_test_multiple.rs:9:2: 9:2\n++     }\n++ \n++     bb1 (cleanup): {\n++         resume;                          // scope 0 at $DIR/derefer_test_multiple.rs:2:1: 9:2\n+      }\n+  }\n+  "}, {"sha": "a27363447fee590ebb8c287ec50cd6ce27d5aa3f", "filename": "src/test/mir-opt/derefer_test_multiple.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc57656969554bd0dcbf95641bebadc076fac61f/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc57656969554bd0dcbf95641bebadc076fac61f/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fderefer_test_multiple.rs?ref=cc57656969554bd0dcbf95641bebadc076fac61f", "patch": "@@ -0,0 +1,9 @@\n+// EMIT_MIR derefer_test_multiple.main.Derefer.diff\n+fn main () {\n+    let mut a = (42, 43);\n+    let mut b = (99, &mut a);\n+    let mut c = (11, &mut b);\n+    let mut d = (13, &mut c);\n+    let x = &mut (*d.1).1.1.1;\n+    let y = &mut (*d.1).1.1.1;\n+}"}]}