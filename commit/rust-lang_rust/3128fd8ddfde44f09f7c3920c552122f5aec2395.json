{"sha": "3128fd8ddfde44f09f7c3920c552122f5aec2395", "node_id": "C_kwDOAAsO6NoAKDMxMjhmZDhkZGZkZTQ0ZjA5ZjdjMzkyMGM1NTIxMjJmNWFlYzIzOTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T05:35:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-22T05:35:08Z"}, "message": "Auto merge of #110666 - JohnTitor:rollup-3pwilte, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #109949 (rustdoc: migrate `document_type_layout` to askama)\n - #110622 (Stable hash tag (discriminant) of `GenericArg`)\n - #110635 (More `IS_ZST` in `library`)\n - #110640 (compiler/rustc_target: Raise m68k-linux-gnu baseline to 68020)\n - #110657 (nit: consistent naming for SimplifyConstCondition)\n - #110659 (rustdoc: clean up JS)\n - #110660 (Print ty placeholders pretty)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e0b7eac39d678df1cae95e1dc873525165a96430", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0b7eac39d678df1cae95e1dc873525165a96430"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3128fd8ddfde44f09f7c3920c552122f5aec2395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3128fd8ddfde44f09f7c3920c552122f5aec2395", "html_url": "https://github.com/rust-lang/rust/commit/3128fd8ddfde44f09f7c3920c552122f5aec2395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3128fd8ddfde44f09f7c3920c552122f5aec2395/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b22cf2d5d787106077d4f9ef3092ca80e92a1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b22cf2d5d787106077d4f9ef3092ca80e92a1b", "html_url": "https://github.com/rust-lang/rust/commit/37b22cf2d5d787106077d4f9ef3092ca80e92a1b"}, {"sha": "16e2096f0f15167e8190054c073bce3095453870", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e2096f0f15167e8190054c073bce3095453870", "html_url": "https://github.com/rust-lang/rust/commit/16e2096f0f15167e8190054c073bce3095453870"}], "stats": {"total": 380, "additions": 200, "deletions": 180}, "files": [{"sha": "02baa395c3c2f5cbe5b305333f6baceacad58730", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -73,34 +73,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArg<'t\n     }\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArgKind<'tcx> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        match self {\n-            // WARNING: We dedup cache the `HashStable` results for `List`\n-            // while ignoring types and freely transmute\n-            // between `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n-            // See `fn mk_type_list` for more details.\n-            //\n-            // We therefore hash types without adding a hash for their discriminant.\n-            //\n-            // In order to make it very unlikely for the sequence of bytes being hashed for\n-            // a `GenericArgKind::Type` to be the same as the sequence of bytes being\n-            // hashed for one of the other variants, we hash some very high number instead\n-            // of their actual discriminant since `TyKind` should never start with anything\n-            // that high.\n-            ty::subst::GenericArgKind::Type(ty) => ty.hash_stable(hcx, hasher),\n-            ty::subst::GenericArgKind::Const(ct) => {\n-                0xF3u8.hash_stable(hcx, hasher);\n-                ct.hash_stable(hcx, hasher);\n-            }\n-            ty::subst::GenericArgKind::Lifetime(lt) => {\n-                0xF5u8.hash_stable(hcx, hasher);\n-                lt.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n // AllocIds get resolved to whatever they point to (to be stable)\n impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "888b3a50b77e9f811bdb48bb25a1bc149ba8f3b2", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -738,7 +738,9 @@ pub trait PrettyPrinter<'tcx>:\n                 }\n             }\n             ty::Placeholder(placeholder) => match placeholder.bound.kind {\n-                ty::BoundTyKind::Anon => p!(write(\"Placeholder({:?})\", placeholder)),\n+                ty::BoundTyKind::Anon => {\n+                    self.pretty_print_placeholder_var(placeholder.universe, placeholder.bound.var)?\n+                }\n                 ty::BoundTyKind::Param(_, name) => p!(write(\"{}\", name)),\n             },\n             ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n@@ -1172,6 +1174,18 @@ pub trait PrettyPrinter<'tcx>:\n         }\n     }\n \n+    fn pretty_print_placeholder_var(\n+        &mut self,\n+        ui: ty::UniverseIndex,\n+        var: ty::BoundVar,\n+    ) -> Result<(), Self::Error> {\n+        if ui == ty::UniverseIndex::ROOT {\n+            write!(self, \"!{}\", var.index())\n+        } else {\n+            write!(self, \"!{}_{}\", ui.index(), var.index())\n+        }\n+    }\n+\n     fn ty_infer_name(&self, _: ty::TyVid) -> Option<Symbol> {\n         None\n     }"}, {"sha": "a439211ca336a1a87ee487825833ee7deb3834f4", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -47,7 +47,7 @@ const TYPE_TAG: usize = 0b00;\n const REGION_TAG: usize = 0b01;\n const CONST_TAG: usize = 0b10;\n \n-#[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]\n pub enum GenericArgKind<'tcx> {\n     Lifetime(ty::Region<'tcx>),\n     Type(Ty<'tcx>),"}, {"sha": "7d04aead8bc5936e77e916ff0bed7066a597df7a", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -507,12 +507,12 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             //\n             // Const-prop runs unconditionally, but doesn't mutate the MIR at mir-opt-level=0.\n             &const_debuginfo::ConstDebugInfo,\n-            &o1(simplify_branches::SimplifyConstConditionPassName::AfterConstProp),\n+            &o1(simplify_branches::SimplifyConstCondition::AfterConstProp),\n             &early_otherwise_branch::EarlyOtherwiseBranch,\n             &simplify_comparison_integral::SimplifyComparisonIntegral,\n             &dead_store_elimination::DeadStoreElimination,\n             &dest_prop::DestinationPropagation,\n-            &o1(simplify_branches::SimplifyConstConditionPassName::Final),\n+            &o1(simplify_branches::SimplifyConstCondition::Final),\n             &o1(remove_noop_landing_pads::RemoveNoopLandingPads),\n             &o1(simplify::SimplifyCfg::Final),\n             &nrvo::RenameReturnPlace,"}, {"sha": "c65a7ec6783fa59892273ba9fc1a61e123ffa654", "filename": "compiler/rustc_mir_transform/src/simplify_branches.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_branches.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -2,18 +2,16 @@ use crate::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n-pub enum SimplifyConstConditionPassName {\n+pub enum SimplifyConstCondition {\n     AfterConstProp,\n     Final,\n }\n /// A pass that replaces a branch with a goto when its condition is known.\n-impl<'tcx> MirPass<'tcx> for SimplifyConstConditionPassName {\n+impl<'tcx> MirPass<'tcx> for SimplifyConstCondition {\n     fn name(&self) -> &'static str {\n         match self {\n-            SimplifyConstConditionPassName::AfterConstProp => {\n-                \"SimplifyConstCondition-after-const-prop\"\n-            }\n-            SimplifyConstConditionPassName::Final => \"SimplifyConstCondition-final\",\n+            SimplifyConstCondition::AfterConstProp => \"SimplifyConstCondition-after-const-prop\",\n+            SimplifyConstCondition::Final => \"SimplifyConstCondition-final\",\n         }\n     }\n "}, {"sha": "9bcd56bed0025d18da546409451f82b8ce811184", "filename": "compiler/rustc_target/src/spec/m68k_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fm68k_unknown_linux_gnu.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -3,6 +3,7 @@ use crate::spec::{Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n+    base.cpu = \"M68020\".into();\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "4c1f2dd0e5334b547c821b302f9a739073a8528f", "filename": "compiler/rustc_type_ir/src/sty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fsty.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -203,6 +203,10 @@ pub enum TyKind<I: Interner> {\n     /// `for<'a, T> &'a (): Trait<T>` and then convert the introduced bound variables\n     /// back to inference variables in a new inference context when inside of the query.\n     ///\n+    /// It is conventional to render anonymous bound types like `^N` or `^D_N`,\n+    /// where `N` is the bound variable's anonymous index into the binder, and\n+    /// `D` is the debruijn index, or totally omitted if the debruijn index is zero.\n+    ///\n     /// See the `rustc-dev-guide` for more details about\n     /// [higher-ranked trait bounds][1] and [canonical queries][2].\n     ///\n@@ -212,6 +216,12 @@ pub enum TyKind<I: Interner> {\n \n     /// A placeholder type, used during higher ranked subtyping to instantiate\n     /// bound variables.\n+    ///\n+    /// It is conventional to render anonymous placeholer types like `!N` or `!U_N`,\n+    /// where `N` is the placeholder variable's anonymous index (which corresponds\n+    /// to the bound variable's index from the binder from which it was instantiated),\n+    /// and `U` is the universe index in which it is instantiated, or totally omitted\n+    /// if the universe index is zero.\n     Placeholder(I::PlaceholderType),\n \n     /// A type variable used during type checking."}, {"sha": "f83c8f83cc9895a389728184e7a9262650595e61", "filename": "library/alloc/src/boxed/thin.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed%2Fthin.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -7,7 +7,7 @@ use core::fmt::{self, Debug, Display, Formatter};\n use core::marker::PhantomData;\n #[cfg(not(no_global_oom_handling))]\n use core::marker::Unsize;\n-use core::mem;\n+use core::mem::{self, SizedTypeProperties};\n use core::ops::{Deref, DerefMut};\n use core::ptr::Pointee;\n use core::ptr::{self, NonNull};\n@@ -202,9 +202,7 @@ impl<H> WithHeader<H> {\n             let ptr = if layout.size() == 0 {\n                 // Some paranoia checking, mostly so that the ThinBox tests are\n                 // more able to catch issues.\n-                debug_assert!(\n-                    value_offset == 0 && mem::size_of::<T>() == 0 && mem::size_of::<H>() == 0\n-                );\n+                debug_assert!(value_offset == 0 && T::IS_ZST && H::IS_ZST);\n                 layout.dangling()\n             } else {\n                 let ptr = alloc::alloc(layout);\n@@ -249,9 +247,7 @@ impl<H> WithHeader<H> {\n                         alloc::dealloc(self.ptr.as_ptr().sub(value_offset), layout);\n                     } else {\n                         debug_assert!(\n-                            value_offset == 0\n-                                && mem::size_of::<H>() == 0\n-                                && self.value_layout.size() == 0\n+                            value_offset == 0 && H::IS_ZST && self.value_layout.size() == 0\n                         );\n                     }\n                 }"}, {"sha": "3091efabd684dc838553268ded47c24a5820d34d", "filename": "library/alloc/src/vec/drain.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -112,9 +112,7 @@ impl<'a, T, A: Allocator> Drain<'a, T, A> {\n             let unyielded_ptr = this.iter.as_slice().as_ptr();\n \n             // ZSTs have no identity, so we don't need to move them around.\n-            let needs_move = mem::size_of::<T>() != 0;\n-\n-            if needs_move {\n+            if !T::IS_ZST {\n                 let start_ptr = source_vec.as_mut_ptr().add(start);\n \n                 // memmove back unyielded elements"}, {"sha": "650f921389028916b23a082d8af584a2a6e7378c", "filename": "library/alloc/src/vec/drain_filter.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fdrain_filter.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -1,5 +1,5 @@\n use crate::alloc::{Allocator, Global};\n-use core::mem::{self, ManuallyDrop};\n+use core::mem::{ManuallyDrop, SizedTypeProperties};\n use core::ptr;\n use core::slice;\n \n@@ -96,9 +96,7 @@ where\n \n         unsafe {\n             // ZSTs have no identity, so we don't need to move them around.\n-            let needs_move = mem::size_of::<T>() != 0;\n-\n-            if needs_move && this.idx < this.old_len && this.del > 0 {\n+            if !T::IS_ZST && this.idx < this.old_len && this.del > 0 {\n                 let ptr = this.vec.as_mut_ptr();\n                 let src = ptr.add(this.idx);\n                 let dst = src.sub(this.del);"}, {"sha": "b1ca872b84549719937c71eabd0cbc0a4888e264", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -73,7 +73,7 @@ macro_rules! iterator {\n             // Unsafe because the offset must not exceed `self.len()`.\n             #[inline(always)]\n             unsafe fn post_inc_start(&mut self, offset: usize) -> * $raw_mut T {\n-                if mem::size_of::<T>() == 0 {\n+                if T::IS_ZST {\n                     zst_shrink!(self, offset);\n                     self.ptr.as_ptr()\n                 } else {"}, {"sha": "a5f08fdac11c9ac9256b569761021f5c3174aea4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -32,6 +32,7 @@ mod context;\n mod print_item;\n mod sidebar;\n mod span_map;\n+mod type_layout;\n mod write_shared;\n \n pub(crate) use self::context::*;"}, {"sha": "3e71d41ec96f1f3606d5f91ce2347fd954f547cf", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 2, "deletions": 116, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -6,16 +6,14 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::stability;\n-use rustc_middle::span_bug;\n-use rustc_middle::ty::layout::LayoutError;\n-use rustc_middle::ty::{self, Adt, TyCtxt};\n+use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n-use rustc_target::abi::{LayoutS, Primitive, TagEncoding, Variants};\n use std::cmp::Ordering;\n use std::fmt;\n use std::rc::Rc;\n \n+use super::type_layout::document_type_layout;\n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, get_filtered_impls_for_reference,\n     item_ty_to_section, notable_traits_button, notable_traits_json, render_all_impls,\n@@ -1933,118 +1931,6 @@ fn document_non_exhaustive<'a>(item: &'a clean::Item) -> impl fmt::Display + 'a\n     })\n }\n \n-fn document_type_layout<'a, 'cx: 'a>(\n-    cx: &'a Context<'cx>,\n-    ty_def_id: DefId,\n-) -> impl fmt::Display + 'a + Captures<'cx> {\n-    fn write_size_of_layout(mut w: impl fmt::Write, layout: &LayoutS, tag_size: u64) {\n-        if layout.abi.is_unsized() {\n-            write!(w, \"(unsized)\").unwrap();\n-        } else {\n-            let size = layout.size.bytes() - tag_size;\n-            write!(w, \"{size} byte{pl}\", pl = if size == 1 { \"\" } else { \"s\" }).unwrap();\n-            if layout.abi.is_uninhabited() {\n-                write!(\n-                    w,\n-                    \" (<a href=\\\"https://doc.rust-lang.org/stable/reference/glossary.html#uninhabited\\\">uninhabited</a>)\"\n-                ).unwrap();\n-            }\n-        }\n-    }\n-\n-    display_fn(move |mut f| {\n-        if !cx.shared.show_type_layout {\n-            return Ok(());\n-        }\n-\n-        writeln!(\n-            f,\n-            \"<h2 id=\\\"layout\\\" class=\\\"small-section-header\\\"> \\\n-            Layout<a href=\\\"#layout\\\" class=\\\"anchor\\\">\u00a7</a></h2>\"\n-        )?;\n-        writeln!(f, \"<div class=\\\"docblock\\\">\")?;\n-\n-        let tcx = cx.tcx();\n-        let param_env = tcx.param_env(ty_def_id);\n-        let ty = tcx.type_of(ty_def_id).subst_identity();\n-        match tcx.layout_of(param_env.and(ty)) {\n-            Ok(ty_layout) => {\n-                writeln!(\n-                    f,\n-                    \"<div class=\\\"warning\\\"><p><strong>Note:</strong> Most layout information is \\\n-                    <strong>completely unstable</strong> and may even differ between compilations. \\\n-                    The only exception is types with certain <code>repr(...)</code> attributes. \\\n-                    Please see the Rust Reference\u2019s \\\n-                    <a href=\\\"https://doc.rust-lang.org/reference/type-layout.html\\\">\u201cType Layout\u201d</a> \\\n-                    chapter for details on type layout guarantees.</p></div>\"\n-                )?;\n-                f.write_str(\"<p><strong>Size:</strong> \")?;\n-                write_size_of_layout(&mut f, &ty_layout.layout.0, 0);\n-                writeln!(f, \"</p>\")?;\n-                if let Variants::Multiple { variants, tag, tag_encoding, .. } =\n-                    &ty_layout.layout.variants()\n-                {\n-                    if !variants.is_empty() {\n-                        f.write_str(\n-                            \"<p><strong>Size for each variant:</strong></p>\\\n-                                <ul>\",\n-                        )?;\n-\n-                        let Adt(adt, _) = ty_layout.ty.kind() else {\n-                            span_bug!(tcx.def_span(ty_def_id), \"not an adt\")\n-                        };\n-\n-                        let tag_size = if let TagEncoding::Niche { .. } = tag_encoding {\n-                            0\n-                        } else if let Primitive::Int(i, _) = tag.primitive() {\n-                            i.size().bytes()\n-                        } else {\n-                            span_bug!(tcx.def_span(ty_def_id), \"tag is neither niche nor int\")\n-                        };\n-\n-                        for (index, layout) in variants.iter_enumerated() {\n-                            let name = adt.variant(index).name;\n-                            write!(&mut f, \"<li><code>{name}</code>: \")?;\n-                            write_size_of_layout(&mut f, layout, tag_size);\n-                            writeln!(&mut f, \"</li>\")?;\n-                        }\n-                        f.write_str(\"</ul>\")?;\n-                    }\n-                }\n-            }\n-            // This kind of layout error can occur with valid code, e.g. if you try to\n-            // get the layout of a generic type such as `Vec<T>`.\n-            Err(LayoutError::Unknown(_)) => {\n-                writeln!(\n-                    f,\n-                    \"<p><strong>Note:</strong> Unable to compute type layout, \\\n-                    possibly due to this type having generic parameters. \\\n-                    Layout can only be computed for concrete, fully-instantiated types.</p>\"\n-                )?;\n-            }\n-            // This kind of error probably can't happen with valid code, but we don't\n-            // want to panic and prevent the docs from building, so we just let the\n-            // user know that we couldn't compute the layout.\n-            Err(LayoutError::SizeOverflow(_)) => {\n-                writeln!(\n-                    f,\n-                    \"<p><strong>Note:</strong> Encountered an error during type layout; \\\n-                    the type was too big.</p>\"\n-                )?;\n-            }\n-            Err(LayoutError::NormalizationFailure(_, _)) => {\n-                writeln!(\n-                    f,\n-                    \"<p><strong>Note:</strong> Encountered an error during type layout; \\\n-                    the type failed to be normalized.</p>\"\n-                )?;\n-            }\n-        }\n-\n-        writeln!(f, \"</div>\")\n-    })\n-}\n-\n fn pluralize(count: usize) -> &'static str {\n     if count > 1 { \"s\" } else { \"\" }\n }"}, {"sha": "22aec623335e80bcfa0111d0ff0bed881c7f7e05", "filename": "src/librustdoc/html/render/type_layout.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Frender%2Ftype_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Frender%2Ftype_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Ftype_layout.rs?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -0,0 +1,86 @@\n+use askama::Template;\n+\n+use rustc_data_structures::captures::Captures;\n+use rustc_hir::def_id::DefId;\n+use rustc_middle::span_bug;\n+use rustc_middle::ty::layout::LayoutError;\n+use rustc_middle::ty::Adt;\n+use rustc_span::symbol::Symbol;\n+use rustc_target::abi::{Primitive, TagEncoding, Variants};\n+\n+use std::fmt;\n+\n+use crate::html::format::display_fn;\n+use crate::html::render::Context;\n+\n+#[derive(Template)]\n+#[template(path = \"type_layout.html\")]\n+struct TypeLayout<'cx> {\n+    variants: Vec<(Symbol, TypeLayoutSize)>,\n+    type_layout_size: Result<TypeLayoutSize, LayoutError<'cx>>,\n+}\n+\n+#[derive(Template)]\n+#[template(path = \"type_layout_size.html\")]\n+struct TypeLayoutSize {\n+    is_unsized: bool,\n+    is_uninhabited: bool,\n+    size: u64,\n+}\n+\n+pub(crate) fn document_type_layout<'a, 'cx: 'a>(\n+    cx: &'a Context<'cx>,\n+    ty_def_id: DefId,\n+) -> impl fmt::Display + 'a + Captures<'cx> {\n+    display_fn(move |f| {\n+        if !cx.shared.show_type_layout {\n+            return Ok(());\n+        }\n+\n+        let tcx = cx.tcx();\n+        let param_env = tcx.param_env(ty_def_id);\n+        let ty = tcx.type_of(ty_def_id).subst_identity();\n+        let type_layout = tcx.layout_of(param_env.and(ty));\n+\n+        let variants =\n+            if let Ok(type_layout) = type_layout &&\n+                let Variants::Multiple { variants, tag, tag_encoding, .. } =\n+                    type_layout.layout.variants() &&\n+                !variants.is_empty()\n+            {\n+                let tag_size =\n+                    if let TagEncoding::Niche { .. } = tag_encoding {\n+                        0\n+                    } else if let Primitive::Int(i, _) = tag.primitive() {\n+                        i.size().bytes()\n+                    } else {\n+                        span_bug!(cx.tcx().def_span(ty_def_id), \"tag is neither niche nor int\")\n+                    };\n+                variants\n+                    .iter_enumerated()\n+                    .map(|(variant_idx, variant_layout)| {\n+                        let Adt(adt, _) = type_layout.ty.kind() else {\n+                            span_bug!(cx.tcx().def_span(ty_def_id), \"not an adt\")\n+                        };\n+                        let name = adt.variant(variant_idx).name;\n+                        let is_unsized = variant_layout.abi.is_unsized();\n+                        let is_uninhabited = variant_layout.abi.is_uninhabited();\n+                        let size = variant_layout.size.bytes() - tag_size;\n+                        let type_layout_size = TypeLayoutSize { is_unsized, is_uninhabited, size };\n+                        (name, type_layout_size)\n+                    })\n+                    .collect()\n+            } else {\n+                Vec::new()\n+            };\n+\n+        let type_layout_size = tcx.layout_of(param_env.and(ty)).map(|layout| {\n+            let is_unsized = layout.abi.is_unsized();\n+            let is_uninhabited = layout.abi.is_uninhabited();\n+            let size = layout.size.bytes();\n+            TypeLayoutSize { is_unsized, is_uninhabited, size }\n+        });\n+\n+        Ok(TypeLayout { variants, type_layout_size }.render_into(f).unwrap())\n+    })\n+}"}, {"sha": "bccf675c14b5ed9162d58845c52fc2eda9e87a1f", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -375,10 +375,7 @@ function preLoadCss(cssUrl) {\n \n     function handleEscape(ev) {\n         searchState.clearInputTimeout();\n-        switchDisplayedElement(null);\n-        if (browserSupportsHistoryApi()) {\n-            history.replaceState(null, \"\", getNakedUrl() + window.location.hash);\n-        }\n+        searchState.hideResults();\n         ev.preventDefault();\n         searchState.defocus();\n         window.hideAllModals(true); // true = reset focus for tooltips\n@@ -533,9 +530,11 @@ function preLoadCss(cssUrl) {\n         // ignored are included in the attribute `data-ignore-extern-crates`.\n         const script = document\n             .querySelector(\"script[data-ignore-extern-crates]\");\n-        const ignoreExternCrates = script ? script.getAttribute(\"data-ignore-extern-crates\") : \"\";\n+        const ignoreExternCrates = new Set(\n+            (script ? script.getAttribute(\"data-ignore-extern-crates\") : \"\").split(\",\")\n+        );\n         for (const lib of libs) {\n-            if (lib === window.currentCrate || ignoreExternCrates.indexOf(lib) !== -1) {\n+            if (lib === window.currentCrate || ignoreExternCrates.has(lib)) {\n                 continue;\n             }\n             const structs = imp[lib];"}, {"sha": "3dc4f2149b8b91e26b8aad247b8287e1c822b889", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -2412,10 +2412,6 @@ function initSearch(rawSearchIndex) {\n         const searchAfter500ms = () => {\n             searchState.clearInputTimeout();\n             if (searchState.input.value.length === 0) {\n-                if (browserSupportsHistoryApi()) {\n-                    history.replaceState(null, window.currentCrate + \" - Rust\",\n-                        getNakedUrl() + window.location.hash);\n-                }\n                 searchState.hideResults();\n             } else {\n                 searchState.timeout = setTimeout(search, 500);"}, {"sha": "d999f3b36fd8225ad6cc05b0a36996bdf7701fb7", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -52,12 +52,12 @@ function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n     const files = document.createElement(\"div\");\n     files.className = \"files\";\n     if (elem[FILES_OFFSET]) {\n+        const w = window.location.href.split(\"#\")[0];\n         for (const file_text of elem[FILES_OFFSET]) {\n             const file = document.createElement(\"a\");\n             file.innerText = file_text;\n             file.href = rootPath + \"src/\" + fullPath + file_text + \".html\";\n             file.addEventListener(\"click\", closeSidebarIfMobile);\n-            const w = window.location.href.split(\"#\")[0];\n             if (!hasFoundFile && w === file.href) {\n                 file.className = \"selected\";\n                 dirEntry.open = true;"}, {"sha": "58b220c7428f451241b493040a0991f37bc3ba60", "filename": "src/librustdoc/html/templates/type_layout.html", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout.html?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -0,0 +1,53 @@\n+<h2 id=\"layout\" class=\"small-section-header\">  {# #}\n+    Layout<a href=\"#layout\" class=\"anchor\">\u00a7</a> {# #}\n+</h2> {# #}\n+<div class=\"docblock\"> {# #}\n+    {% match type_layout_size %}\n+        {% when Ok(type_layout_size) %}\n+            <div class=\"warning\"> {# #}\n+                <p> {# #}\n+                    <strong>Note:</strong> Most layout information is <strong>completely {#+ #}\n+                    unstable</strong> and may even differ between compilations. {#+ #}\n+                    The only exception is types with certain <code>repr(...)</code> {#+ #}\n+                    attributes. Please see the Rust Reference\u2019s {#+ #}\n+                    <a href=\"https://doc.rust-lang.org/reference/type-layout.html\">\u201cType Layout\u201d</a> {#+ #}\n+                    chapter for details on type layout guarantees. {# #}\n+                </p> {# #}\n+            </div> {# #}\n+            <p><strong>Size:</strong> {{ type_layout_size|safe }}</p> {# #}\n+            {% if !variants.is_empty() %}\n+                <p> {# #}\n+                    <strong>Size for each variant:</strong> {# #}\n+                </p> {# #}\n+                <ul> {# #}\n+                    {% for (name, layout_size) in variants %}\n+                        <li> {# #}\n+                            <code>{{ name }}</code>: {#+ #}\n+                            {{ layout_size|safe }}\n+                        </li> {# #}\n+                    {% endfor %}\n+                </ul> {# #}\n+            {% endif %}\n+        {# This kind of layout error can occur with valid code, e.g. if you try to\n+           get the layout of a generic type such as `Vec<T>`. #}\n+        {% when Err(LayoutError::Unknown(_)) %}\n+            <p> {# #}\n+                <strong>Note:</strong> Unable to compute type layout, {#+ #}\n+                possibly due to this type having generic parameters. {#+ #}\n+                Layout can only be computed for concrete, fully-instantiated types. {# #}\n+            </p> {# #}\n+        {# This kind of error probably can't happen with valid code, but we don't\n+           want to panic and prevent the docs from building, so we just let the\n+           user know that we couldn't compute the layout. #}\n+        {% when Err(LayoutError::SizeOverflow(_)) %}\n+            <p> {# #}\n+                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+                the type was too big. {# #}\n+            </p> {# #}\n+        {% when Err(LayoutError::NormalizationFailure(_, _)) %}\n+            <p> {# #}\n+                <strong>Note:</strong> Encountered an error during type layout; {#+ #}\n+                the type failed to be normalized. {# #}\n+            </p> {# #}\n+    {% endmatch %}\n+</div> {# #}"}, {"sha": "9c2b39edc9f37fcc46ed6070c2403beff6880388", "filename": "src/librustdoc/html/templates/type_layout_size.html", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout_size.html", "raw_url": "https://github.com/rust-lang/rust/raw/3128fd8ddfde44f09f7c3920c552122f5aec2395/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout_size.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Ftype_layout_size.html?ref=3128fd8ddfde44f09f7c3920c552122f5aec2395", "patch": "@@ -0,0 +1,12 @@\n+{% if is_unsized %}\n+  (unsized)\n+{% else %}\n+  {% if size == 1 %}\n+    1 byte\n+  {% else %}\n+    {{ size +}} bytes\n+  {% endif %}\n+  {% if is_uninhabited %}\n+    {# +#} (<a href=\"https://doc.rust-lang.org/stable/reference/glossary.html#uninhabited\">uninhabited</a>)\n+  {% endif %}\n+{% endif %}"}]}