{"sha": "7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlODUyN2Y3NDgzMWIzN2M1NzU3ZWE2YjI1ZTQwYmNiYjYxYmI2ZDQ=", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-02-12T08:33:23Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2019-02-12T10:51:01Z"}, "message": "Implement completion for associated items", "tree": {"sha": "e7bddef556f430d31903a54fced0df760673a0e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7bddef556f430d31903a54fced0df760673a0e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "html_url": "https://github.com/rust-lang/rust/commit/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37148000dcd43e5ccba4737a3e379f1ae6861893", "url": "https://api.github.com/repos/rust-lang/rust/commits/37148000dcd43e5ccba4737a3e379f1ae6861893", "html_url": "https://github.com/rust-lang/rust/commit/37148000dcd43e5ccba4737a3e379f1ae6861893"}], "stats": {"total": 266, "additions": 265, "deletions": 1}, "files": [{"sha": "e81bd3e06c9ee5c22dd401feb35ac602ce95eb8a", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "patch": "@@ -174,4 +174,24 @@ impl Ty {\n         }\n         None\n     }\n+\n+    // This would be nicer if it just returned an iterator, but that runs into\n+    // lifetime problems, because we need to borrow temp `CrateImplBlocks`.\n+    pub fn iterate_impl_items<T>(\n+        self,\n+        db: &impl HirDatabase,\n+        mut callback: impl FnMut(ImplItem) -> Option<T>,\n+    ) -> Option<T> {\n+        let krate = def_crate(db, &self)?;\n+        let impls = db.impls_in_crate(krate);\n+\n+        for (_, impl_block) in impls.lookup_impl_blocks(db, &self) {\n+            for item in impl_block.items() {\n+                if let Some(result) = callback(*item) {\n+                    return Some(result);\n+                }\n+            }\n+        }\n+        None\n+    }\n }"}, {"sha": "83c243944c68e6baf762133f1af09beb1fbeffc8", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "patch": "@@ -80,3 +80,25 @@ pub fn function_label(node: &ast::FnDef) -> Option<String> {\n \n     Some(label.trim().to_owned())\n }\n+\n+pub fn const_label(node: &ast::ConstDef) -> String {\n+    let label: String = node\n+        .syntax()\n+        .children()\n+        .filter(|child| ast::Comment::cast(child).is_none())\n+        .map(|node| node.text().to_string())\n+        .collect();\n+\n+    label.trim().to_owned()\n+}\n+\n+pub fn type_label(node: &ast::TypeDef) -> String {\n+    let label: String = node\n+        .syntax()\n+        .children()\n+        .filter(|child| ast::Comment::cast(child).is_none())\n+        .map(|node| node.text().to_string())\n+        .collect();\n+\n+    label.trim().to_owned()\n+}"}, {"sha": "d337fe970df6a0d9117688c1a1f883d062b2471b", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "patch": "@@ -1,6 +1,6 @@\n use join_to_string::join;\n use hir::{Docs, Resolution};\n-use ra_syntax::AstNode;\n+use ra_syntax::{AstNode, ast::NameOwner};\n use test_utils::tested_by;\n \n use crate::completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext};\n@@ -58,6 +58,51 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 }\n             });\n         }\n+        hir::ModuleDef::Struct(s) => {\n+            let ty = s.ty(ctx.db);\n+            ty.iterate_impl_items(ctx.db, |item| match item {\n+                hir::ImplItem::Method(func) => {\n+                    let sig = func.signature(ctx.db);\n+                    if !sig.has_self_param() {\n+                        CompletionItem::new(\n+                            CompletionKind::Reference,\n+                            ctx.source_range(),\n+                            sig.name().to_string(),\n+                        )\n+                        .from_function(ctx, func)\n+                        .kind(CompletionItemKind::Method)\n+                        .add_to(acc);\n+                    }\n+                    None::<()>\n+                }\n+                hir::ImplItem::Const(ct) => {\n+                    let source = ct.source(ctx.db);\n+                    if let Some(name) = source.1.name() {\n+                        CompletionItem::new(\n+                            CompletionKind::Reference,\n+                            ctx.source_range(),\n+                            name.text().to_string(),\n+                        )\n+                        .from_const(ctx, ct)\n+                        .add_to(acc);\n+                    }\n+                    None::<()>\n+                }\n+                hir::ImplItem::Type(ty) => {\n+                    let source = ty.source(ctx.db);\n+                    if let Some(name) = source.1.name() {\n+                        CompletionItem::new(\n+                            CompletionKind::Reference,\n+                            ctx.source_range(),\n+                            name.text().to_string(),\n+                        )\n+                        .from_type(ctx, ty)\n+                        .add_to(acc);\n+                    }\n+                    None::<()>\n+                }\n+            });\n+        }\n         _ => return,\n     };\n }\n@@ -197,6 +242,63 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_struct_associated_method() {\n+        check_reference_completion(\n+            \"struct_associated_method\",\n+            \"\n+            //- /lib.rs\n+            /// A Struct\n+            struct S;\n+\n+            impl S {\n+                /// An associated method\n+                fn m() { }\n+            }\n+\n+            fn foo() { let _ = S::<|> }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_struct_associated_const() {\n+        check_reference_completion(\n+            \"struct_associated_const\",\n+            \"\n+            //- /lib.rs\n+            /// A Struct\n+            struct S;\n+\n+            impl S {\n+                /// An associated const\n+                const C: i32 = 42;\n+            }\n+\n+            fn foo() { let _ = S::<|> }\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn completes_struct_associated_type() {\n+        check_reference_completion(\n+            \"struct_associated_type\",\n+            \"\n+            //- /lib.rs\n+            /// A Struct\n+            struct S;\n+\n+            impl S {\n+                /// An associated type\n+                type T = i32;\n+            }\n+\n+            fn foo() { let _ = S::<|> }\n+            \",\n+        );\n+    }\n+\n     #[test]\n     fn completes_use_paths_across_crates() {\n         check_reference_completion("}, {"sha": "6003e1d8925a8866bf227eff9aedc69246bc1ee1", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "patch": "@@ -8,6 +8,8 @@ use test_utils::tested_by;\n use crate::completion::{\n     completion_context::CompletionContext,\n     function_label,\n+    const_label,\n+    type_label\n };\n \n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n@@ -267,6 +269,28 @@ impl Builder {\n         self.kind = Some(CompletionItemKind::Function);\n         self\n     }\n+\n+    pub(super) fn from_const(mut self, ctx: &CompletionContext, ct: hir::Const) -> Builder {\n+        if let Some(docs) = ct.docs(ctx.db) {\n+            self.documentation = Some(docs);\n+        }\n+\n+        self.detail = Some(const_item_label(ctx, ct));\n+        self.kind = Some(CompletionItemKind::Const);\n+\n+        self\n+    }\n+\n+    pub(super) fn from_type(mut self, ctx: &CompletionContext, ty: hir::Type) -> Builder {\n+        if let Some(docs) = ty.docs(ctx.db) {\n+            self.documentation = Some(docs);\n+        }\n+\n+        self.detail = Some(type_item_label(ctx, ty));\n+        self.kind = Some(CompletionItemKind::TypeAlias);\n+\n+        self\n+    }\n }\n \n impl<'a> Into<CompletionItem> for Builder {\n@@ -305,6 +329,16 @@ fn function_item_label(ctx: &CompletionContext, function: hir::Function) -> Opti\n     function_label(&node)\n }\n \n+fn const_item_label(ctx: &CompletionContext, ct: hir::Const) -> String {\n+    let node = ct.source(ctx.db).1;\n+    const_label(&node)\n+}\n+\n+fn type_item_label(ctx: &CompletionContext, ty: hir::Type) -> String {\n+    let node = ty.source(ctx.db).1;\n+    type_label(&node)\n+}\n+\n #[cfg(test)]\n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n     use crate::mock_analysis::{single_file_with_position, analysis_and_position};"}, {"sha": "ff1eef5f5eb7426bfa4c932bc5ee87754436088d", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__struct_associated_const.snap", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_const.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_const.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_const.snap?ref=7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "patch": "@@ -0,0 +1,28 @@\n+---\n+created: \"2019-02-12T09:57:51.107816726Z\"\n+creator: insta@0.6.2\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+expression: kind_completions\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"C\",\n+        kind: Some(\n+            Const\n+        ),\n+        detail: Some(\n+            \"const C: i32 = 42;\"\n+        ),\n+        documentation: Some(\n+            Documentation(\n+                \"An associated const\"\n+            )\n+        ),\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [107; 107),\n+        text_edit: None\n+    }\n+]"}, {"sha": "c53c61d0e263a7361fae181b7a9f4179d7a02df8", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__struct_associated_method.snap", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_method.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_method.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_method.snap?ref=7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "patch": "@@ -0,0 +1,30 @@\n+---\n+created: \"2019-02-12T09:57:51.106389138Z\"\n+creator: insta@0.6.2\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+expression: kind_completions\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"m\",\n+        kind: Some(\n+            Method\n+        ),\n+        detail: Some(\n+            \"fn m()\"\n+        ),\n+        documentation: Some(\n+            Documentation(\n+                \"An associated method\"\n+            )\n+        ),\n+        lookup: None,\n+        insert_text: Some(\n+            \"m()$0\"\n+        ),\n+        insert_text_format: Snippet,\n+        source_range: [100; 100),\n+        text_edit: None\n+    }\n+]"}, {"sha": "e993fb1b0519c7720e9a769935855f30632a0cd2", "filename": "crates/ra_ide_api/src/completion/snapshots/completion_item__struct_associated_type.snap", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_type.snap", "raw_url": "https://github.com/rust-lang/rust/raw/7e8527f74831b37c5757ea6b25e40bcbb61bb6d4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_type.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fsnapshots%2Fcompletion_item__struct_associated_type.snap?ref=7e8527f74831b37c5757ea6b25e40bcbb61bb6d4", "patch": "@@ -0,0 +1,28 @@\n+---\n+created: \"2019-02-12T09:33:54.719956203Z\"\n+creator: insta@0.6.2\n+source: crates/ra_ide_api/src/completion/completion_item.rs\n+expression: kind_completions\n+---\n+[\n+    CompletionItem {\n+        completion_kind: Reference,\n+        label: \"T\",\n+        kind: Some(\n+            TypeAlias\n+        ),\n+        detail: Some(\n+            \"type T = i32;\"\n+        ),\n+        documentation: Some(\n+            Documentation(\n+                \"An associated type\"\n+            )\n+        ),\n+        lookup: None,\n+        insert_text: None,\n+        insert_text_format: PlainText,\n+        source_range: [101; 101),\n+        text_edit: None\n+    }\n+]"}]}