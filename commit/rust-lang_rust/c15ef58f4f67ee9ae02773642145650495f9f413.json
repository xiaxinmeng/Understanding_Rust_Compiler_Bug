{"sha": "c15ef58f4f67ee9ae02773642145650495f9f413", "node_id": "C_kwDOAAsO6NoAKGMxNWVmNThmNGY2N2VlOWFlMDI3NzM2NDIxNDU2NTA0OTVmOWY0MTM", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-11-29T00:50:12Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2022-01-31T18:04:22Z"}, "message": "Fix suggestion to slice if scrutinee is a `Result` or `Option`", "tree": {"sha": "12f4daa8fb02803530f46df0bda7eda9308a7f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12f4daa8fb02803530f46df0bda7eda9308a7f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15ef58f4f67ee9ae02773642145650495f9f413", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15ef58f4f67ee9ae02773642145650495f9f413", "html_url": "https://github.com/rust-lang/rust/commit/c15ef58f4f67ee9ae02773642145650495f9f413", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15ef58f4f67ee9ae02773642145650495f9f413/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24b8bb13bff98bb747cd403b86596af43aceee78", "url": "https://api.github.com/repos/rust-lang/rust/commits/24b8bb13bff98bb747cd403b86596af43aceee78", "html_url": "https://github.com/rust-lang/rust/commit/24b8bb13bff98bb747cd403b86596af43aceee78"}], "stats": {"total": 113, "additions": 106, "deletions": 7}, "files": [{"sha": "9c2182a87ff1cba3595a209e93c7e64b208afedd", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c15ef58f4f67ee9ae02773642145650495f9f413/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15ef58f4f67ee9ae02773642145650495f9f413/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=c15ef58f4f67ee9ae02773642145650495f9f413", "patch": "@@ -15,7 +15,7 @@ use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::{BytePos, MultiSpan, DUMMY_SP};\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n@@ -2033,12 +2033,36 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         {\n             if let (Some(span), true) = (ti.span, ti.origin_expr) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    err.span_suggestion(\n-                        span,\n-                        \"consider slicing here\",\n-                        format!(\"{}[..]\", snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    let applicability = match self.resolve_vars_if_possible(ti.expected).kind() {\n+                        ty::Adt(adt_def, _)\n+                            if self.tcx.is_diagnostic_item(sym::Option, adt_def.did)\n+                                || self.tcx.is_diagnostic_item(sym::Result, adt_def.did) =>\n+                        {\n+                            // Slicing won't work here, but `.as_deref()` might (issue #91328).\n+                            err.span_suggestion(\n+                                span,\n+                                \"consider using `as_deref` here\",\n+                                format!(\"{}.as_deref()\", snippet),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                            None\n+                        }\n+                        ty::Adt(adt_def, _)\n+                            if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did) =>\n+                        {\n+                            Some(Applicability::MachineApplicable)\n+                        }\n+                        _ => Some(Applicability::MaybeIncorrect),\n+                    };\n+\n+                    if let Some(applicability) = applicability {\n+                        err.span_suggestion(\n+                            span,\n+                            \"consider slicing here\",\n+                            format!(\"{}[..]\", snippet),\n+                            applicability,\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "48dc26718da317f512f221134785f1838b4b468c", "filename": "src/test/ui/typeck/issue-91328.fixed", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c15ef58f4f67ee9ae02773642145650495f9f413/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c15ef58f4f67ee9ae02773642145650495f9f413/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed?ref=c15ef58f4f67ee9ae02773642145650495f9f413", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for issue #91328.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn foo(r: Result<Vec<i32>, i32>) -> i32 {\n+    match r.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Ok([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn bar(o: Option<Vec<i32>>) -> i32 {\n+    match o.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "de5deb9534902e23b6a66bfbe0964496f9c023eb", "filename": "src/test/ui/typeck/issue-91328.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c15ef58f4f67ee9ae02773642145650495f9f413/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15ef58f4f67ee9ae02773642145650495f9f413/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs?ref=c15ef58f4f67ee9ae02773642145650495f9f413", "patch": "@@ -0,0 +1,27 @@\n+// Regression test for issue #91328.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+fn foo(r: Result<Vec<i32>, i32>) -> i32 {\n+    match r {\n+    //~^ HELP: consider using `as_deref` here\n+        Ok([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn bar(o: Option<Vec<i32>>) -> i32 {\n+    match o {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4a9ddb2b9271709d2d0f4468d1162360960f3ff0", "filename": "src/test/ui/typeck/issue-91328.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c15ef58f4f67ee9ae02773642145650495f9f413/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c15ef58f4f67ee9ae02773642145650495f9f413/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr?ref=c15ef58f4f67ee9ae02773642145650495f9f413", "patch": "@@ -0,0 +1,21 @@\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:10:12\n+   |\n+LL |     match r {\n+   |           - help: consider using `as_deref` here: `r.as_deref()`\n+LL |\n+LL |         Ok([a, b]) => a + b,\n+   |            ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error[E0529]: expected an array or slice, found `Vec<i32>`\n+  --> $DIR/issue-91328.rs:20:14\n+   |\n+LL |     match o {\n+   |           - help: consider using `as_deref` here: `o.as_deref()`\n+LL |\n+LL |         Some([a, b]) => a + b,\n+   |              ^^^^^^ pattern cannot match with input type `Vec<i32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0529`."}]}