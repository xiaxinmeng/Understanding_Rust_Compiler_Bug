{"sha": "b35ebac96102cd12406d9d87827b0838d129c278", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNWViYWM5NjEwMmNkMTI0MDZkOWQ4NzgyN2IwODM4ZDEyOWMyNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T20:16:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-14T20:16:54Z"}, "message": "Auto merge of #64466 - Centril:rollup-s3nlb9e, r=Centril\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #61797 (Stabilise weak_ptr_eq)\n - #64290 (Provide a span if main function is not present in crate)\n - #64406 (Ban non-extern rust intrinsics)\n - #64462 (feature_gate: Remove dead code from attribute checking)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "25bd19d9b15231761c8a84a2b61713d3d182a808", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25bd19d9b15231761c8a84a2b61713d3d182a808"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b35ebac96102cd12406d9d87827b0838d129c278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b35ebac96102cd12406d9d87827b0838d129c278", "html_url": "https://github.com/rust-lang/rust/commit/b35ebac96102cd12406d9d87827b0838d129c278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b35ebac96102cd12406d9d87827b0838d129c278/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca3766e2e58f462a20922e42c821a37eaf0e13db", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3766e2e58f462a20922e42c821a37eaf0e13db", "html_url": "https://github.com/rust-lang/rust/commit/ca3766e2e58f462a20922e42c821a37eaf0e13db"}, {"sha": "45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74", "html_url": "https://github.com/rust-lang/rust/commit/45e50e2fd28f1e2f93661e0dcefe5203ebb51c74"}], "stats": {"total": 828, "additions": 433, "deletions": 395}, "files": [{"sha": "f234ac5ebe51bcd2628df98ccbe5d86199eb5c9d", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1832,8 +1832,9 @@ impl<T: ?Sized> Weak<T> {\n         }\n     }\n \n-    /// Returns `true` if the two `Weak`s point to the same value (not just values\n-    /// that compare as equal).\n+    /// Returns `true` if the two `Weak`s point to the same value (not just\n+    /// values that compare as equal), or if both don't point to any value\n+    /// (because they were created with `Weak::new()`).\n     ///\n     /// # Notes\n     ///\n@@ -1843,7 +1844,6 @@ impl<T: ?Sized> Weak<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_ptr_eq)]\n     /// use std::rc::Rc;\n     ///\n     /// let first_rc = Rc::new(5);\n@@ -1861,7 +1861,6 @@ impl<T: ?Sized> Weak<T> {\n     /// Comparing `Weak::new`.\n     ///\n     /// ```\n-    /// #![feature(weak_ptr_eq)]\n     /// use std::rc::{Rc, Weak};\n     ///\n     /// let first = Weak::new();\n@@ -1873,7 +1872,7 @@ impl<T: ?Sized> Weak<T> {\n     /// assert!(!first.ptr_eq(&third));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n+    #[stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")]\n     pub fn ptr_eq(&self, other: &Self) -> bool {\n         self.ptr.as_ptr() == other.ptr.as_ptr()\n     }"}, {"sha": "45f98162e4cd57fa3e8798f31b2ee6f76025a68c", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1550,19 +1550,18 @@ impl<T: ?Sized> Weak<T> {\n         }\n     }\n \n-    /// Returns `true` if the two `Weak`s point to the same value (not just values\n-    /// that compare as equal).\n+    /// Returns `true` if the two `Weak`s point to the same value (not just\n+    /// values that compare as equal), or if both don't point to any value\n+    /// (because they were created with `Weak::new()`).\n     ///\n     /// # Notes\n     ///\n     /// Since this compares pointers it means that `Weak::new()` will equal each\n     /// other, even though they don't point to any value.\n     ///\n-    ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(weak_ptr_eq)]\n     /// use std::sync::Arc;\n     ///\n     /// let first_rc = Arc::new(5);\n@@ -1580,7 +1579,6 @@ impl<T: ?Sized> Weak<T> {\n     /// Comparing `Weak::new`.\n     ///\n     /// ```\n-    /// #![feature(weak_ptr_eq)]\n     /// use std::sync::{Arc, Weak};\n     ///\n     /// let first = Weak::new();\n@@ -1592,7 +1590,7 @@ impl<T: ?Sized> Weak<T> {\n     /// assert!(!first.ptr_eq(&third));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"weak_ptr_eq\", issue = \"55981\")]\n+    #[stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")]\n     pub fn ptr_eq(&self, other: &Self) -> bool {\n         self.ptr.as_ptr() == other.ptr.as_ptr()\n     }"}, {"sha": "ba27d332e43f784d08084de10aa3843858fce99e", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -16,16 +16,16 @@ struct EntryContext<'a, 'tcx> {\n \n     map: &'a hir_map::Map<'tcx>,\n \n-    /// The top-level function called 'main'.\n+    /// The top-level function called `main`.\n     main_fn: Option<(HirId, Span)>,\n \n-    /// The function that has attribute named 'main'.\n+    /// The function that has attribute named `main`.\n     attr_main_fn: Option<(HirId, Span)>,\n \n     /// The function that has the attribute 'start' on it.\n     start_fn: Option<(HirId, Span)>,\n \n-    /// The functions that one might think are 'main' but aren't, e.g.\n+    /// The functions that one might think are `main` but aren't, e.g.\n     /// main functions not defined at the top level. For diagnostics.\n     non_main_fns: Vec<(HirId, Span)> ,\n }\n@@ -88,7 +88,7 @@ fn entry_point_type(item: &Item, at_root: bool) -> EntryPointType {\n                 EntryPointType::MainAttr\n             } else if item.ident.name == sym::main {\n                 if at_root {\n-                    // This is a top-level function so can be 'main'.\n+                    // This is a top-level function so can be `main`.\n                     EntryPointType::MainNamed\n                 } else {\n                     EntryPointType::OtherMain\n@@ -109,7 +109,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n                 ctxt.main_fn = Some((item.hir_id, item.span));\n             } else {\n                 span_err!(ctxt.session, item.span, E0136,\n-                          \"multiple 'main' functions\");\n+                          \"multiple `main` functions\");\n             }\n         },\n         EntryPointType::OtherMain => {\n@@ -130,7 +130,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n             if ctxt.start_fn.is_none() {\n                 ctxt.start_fn = Some((item.hir_id, item.span));\n             } else {\n-                struct_span_err!(ctxt.session, item.span, E0138, \"multiple 'start' functions\")\n+                struct_span_err!(ctxt.session, item.span, E0138, \"multiple `start` functions\")\n                     .span_label(ctxt.start_fn.unwrap().1, \"previous `start` function here\")\n                     .span_label(item.span, \"multiple `start` functions\")\n                     .emit();\n@@ -148,34 +148,48 @@ fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(De\n     } else if let Some((hir_id, _)) = visitor.main_fn {\n         Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n     } else {\n-        // There is no main function.\n-        let mut err = struct_err!(tcx.sess, E0601,\n-            \"`main` function not found in crate `{}`\", tcx.crate_name(LOCAL_CRATE));\n-        if !visitor.non_main_fns.is_empty() {\n-            // There were some functions named 'main' though. Try to give the user a hint.\n-            err.note(\"the main function must be defined at the crate level \\\n-                      but you have one or more functions named 'main' that are not \\\n-                      defined at the crate level. Either move the definition or \\\n-                      attach the `#[main]` attribute to override this behavior.\");\n-            for &(_, span) in &visitor.non_main_fns {\n-                err.span_note(span, \"here is a function named 'main'\");\n-            }\n-            err.emit();\n-        } else {\n-            if let Some(ref filename) = tcx.sess.local_crate_source_file {\n-                err.note(&format!(\"consider adding a `main` function to `{}`\", filename.display()));\n-            }\n-            if tcx.sess.teach(&err.get_code().unwrap()) {\n-                err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n-                          to get started: https://doc.rust-lang.org/book/\");\n-            }\n-            err.emit();\n-        }\n-\n+        no_main_err(tcx, visitor);\n         None\n     }\n }\n \n+fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n+    // There is no main function.\n+    let mut err = struct_err!(tcx.sess, E0601,\n+        \"`main` function not found in crate `{}`\", tcx.crate_name(LOCAL_CRATE));\n+    let filename = &tcx.sess.local_crate_source_file;\n+    let note = if !visitor.non_main_fns.is_empty() {\n+        for &(_, span) in &visitor.non_main_fns {\n+            err.span_note(span, \"here is a function named `main`\");\n+        }\n+        err.note(\"you have one or more functions named `main` not defined at the crate level\");\n+        err.help(\"either move the `main` function definitions or attach the `#[main]` attribute \\\n+                  to one of them\");\n+        // There were some functions named `main` though. Try to give the user a hint.\n+        format!(\"the main function must be defined at the crate level{}\",\n+                 filename.as_ref().map(|f| format!(\" (in `{}`)\", f.display())).unwrap_or_default())\n+    } else if let Some(filename) = filename {\n+        format!(\"consider adding a `main` function to `{}`\", filename.display())\n+    } else {\n+        String::from(\"consider adding a `main` function at the crate level\")\n+    };\n+    let sp = tcx.hir().krate().span;\n+    // The file may be empty, which leads to the diagnostic machinery not emitting this\n+    // note. This is a relatively simple way to detect that case and emit a span-less\n+    // note instead.\n+    if let Ok(_) = tcx.sess.source_map().lookup_line(sp.lo()) {\n+        err.set_span(sp);\n+        err.span_label(sp, &note);\n+    } else {\n+        err.note(&note);\n+    }\n+    if tcx.sess.teach(&err.get_code().unwrap()) {\n+        err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n+                  to get started: https://doc.rust-lang.org/book/\");\n+    }\n+    err.emit();\n+}\n+\n pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(DefId, EntryFnType)> {\n     tcx.entry_fn(LOCAL_CRATE)\n }"}, {"sha": "e8e8da67334712948bda3faf34b092e95e151bf9", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -41,7 +41,6 @@ use syntax::mut_visit::MutVisitor;\n use syntax::parse::{self, PResult};\n use syntax::util::node_count::NodeCounter;\n use syntax::symbol::Symbol;\n-use syntax::feature_gate::AttributeType;\n use syntax_pos::FileName;\n use syntax_ext;\n \n@@ -219,7 +218,6 @@ impl BoxedResolver {\n \n pub struct PluginInfo {\n     syntax_exts: Vec<NamedSyntaxExtension>,\n-    attributes: Vec<(Symbol, AttributeType)>,\n }\n \n pub fn register_plugins<'a>(\n@@ -312,12 +310,9 @@ pub fn register_plugins<'a>(\n     }\n \n     *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n-    *sess.plugin_attributes.borrow_mut() = attributes.clone();\n+    *sess.plugin_attributes.borrow_mut() = attributes;\n \n-    Ok((krate, PluginInfo {\n-        syntax_exts,\n-        attributes,\n-    }))\n+    Ok((krate, PluginInfo { syntax_exts }))\n }\n \n fn configure_and_expand_inner<'a>(\n@@ -329,7 +324,6 @@ fn configure_and_expand_inner<'a>(\n     crate_loader: &'a mut CrateLoader<'a>,\n     plugin_info: PluginInfo,\n ) -> Result<(ast::Crate, Resolver<'a>)> {\n-    let attributes = plugin_info.attributes;\n     time(sess, \"pre ast expansion lint checks\", || {\n         lint::check_ast_crate(\n             sess,\n@@ -522,7 +516,6 @@ fn configure_and_expand_inner<'a>(\n             &krate,\n             &sess.parse_sess,\n             &sess.features_untracked(),\n-            &attributes,\n             sess.opts.unstable_features,\n         );\n     });"}, {"sha": "ae7ab0a771754aaec2e8805116a24f9a06417796", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1088,6 +1088,8 @@ fn check_fn<'a, 'tcx>(\n \n     let span = body.value.span;\n \n+    fn_maybe_err(fcx.tcx, span, fn_sig.abi);\n+\n     if body.generator_kind.is_some() && can_be_generator.is_some() {\n         let yield_ty = fcx.next_ty_var(TypeVariableOrigin {\n             kind: TypeVariableOriginKind::TypeInference,\n@@ -1439,6 +1441,14 @@ fn check_opaque_for_cycles<'tcx>(\n     }\n }\n \n+// Forbid defining intrinsics in Rust code,\n+// as they must always be defined by the compiler.\n+fn fn_maybe_err(tcx: TyCtxt<'_>, sp: Span, abi: Abi) {\n+    if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+        tcx.sess.span_err(sp, \"intrinsic must be in `extern \\\"rust-intrinsic\\\" { ... }` block\");\n+    }\n+}\n+\n pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n     debug!(\n         \"check_item_type(it.hir_id={}, it.name={})\",\n@@ -1475,9 +1485,17 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item) {\n                 check_on_unimplemented(tcx, trait_def_id, it);\n             }\n         }\n-        hir::ItemKind::Trait(..) => {\n+        hir::ItemKind::Trait(_, _, _, _, ref items) => {\n             let def_id = tcx.hir().local_def_id(it.hir_id);\n             check_on_unimplemented(tcx, def_id, it);\n+\n+            for item in items.iter() {\n+                let item = tcx.hir().trait_item(item.id);\n+                if let hir::TraitItemKind::Method(sig, _) = &item.node {\n+                    let abi = sig.header.abi;\n+                    fn_maybe_err(tcx, item.ident.span, abi);\n+                }\n+            }\n         }\n         hir::ItemKind::Struct(..) => {\n             check_struct(tcx, it.hir_id, it.span);"}, {"sha": "b80c530731dfc68734d44cdb36fb6b53a207871d", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -26,7 +26,7 @@ use syntax_pos::{Span, DUMMY_SP, FileName};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use std::io::ErrorKind;\n-use std::{iter, mem};\n+use std::{iter, mem, slice};\n use std::ops::DerefMut;\n use std::rc::Rc;\n use std::path::PathBuf;\n@@ -1019,7 +1019,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n     fn check_attributes(&mut self, attrs: &[ast::Attribute]) {\n         let features = self.cx.ecfg.features.unwrap();\n         for attr in attrs.iter() {\n-            self.check_attribute_inner(attr, features);\n+            feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded\n             if attr.path == sym::derive {\n@@ -1029,15 +1029,6 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n             }\n         }\n     }\n-\n-    fn check_attribute(&mut self, at: &ast::Attribute) {\n-        let features = self.cx.ecfg.features.unwrap();\n-        self.check_attribute_inner(at, features);\n-    }\n-\n-    fn check_attribute_inner(&mut self, at: &ast::Attribute, features: &Features) {\n-        feature_gate::check_attribute(at, self.cx.parse_sess, features);\n-    }\n }\n \n impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n@@ -1445,7 +1436,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n \n                 if let Some(file) = it.value_str() {\n                     let err_count = self.cx.parse_sess.span_diagnostic.err_count();\n-                    self.check_attribute(&at);\n+                    self.check_attributes(slice::from_ref(at));\n                     if self.cx.parse_sess.span_diagnostic.err_count() > err_count {\n                         // avoid loading the file if they haven't enabled the feature\n                         return noop_visit_attribute(at, self);"}, {"sha": "b6e13200f32af19d391311b12885ff3a1ced24d1", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -79,6 +79,7 @@ pub enum AttributeType {\n     CrateLevel,\n }\n \n+#[derive(Clone, Copy)]\n pub enum AttributeGate {\n     /// Is gated by a given feature gate, reason\n     /// and function to check if enabled"}, {"sha": "b4491a87f0600c93b5d42f3f51377f54a547fcde", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 47, "deletions": 131, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,7 +1,7 @@\n use super::{active::{ACTIVE_FEATURES, Features}, Feature, State as FeatureState};\n use super::accepted::ACCEPTED_FEATURES;\n use super::removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};\n-use super::builtin_attrs::{AttributeGate, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n+use super::builtin_attrs::{AttributeGate, BUILTIN_ATTRIBUTE_MAP};\n \n use crate::ast::{\n     self, AssocTyConstraint, AssocTyConstraintKind, NodeId, GenericParam, GenericParamKind,\n@@ -32,16 +32,10 @@ pub enum Stability {\n     Deprecated(&'static str, Option<&'static str>),\n }\n \n-struct Context<'a> {\n-    features: &'a Features,\n-    parse_sess: &'a ParseSess,\n-    plugin_attributes: &'a [(Symbol, AttributeType)],\n-}\n-\n macro_rules! gate_feature_fn {\n     ($cx: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $level: expr) => {{\n         let (cx, has_feature, span,\n-             name, explain, level) = ($cx, $has_feature, $span, $name, $explain, $level);\n+             name, explain, level) = (&*$cx, $has_feature, $span, $name, $explain, $level);\n         let has_feature: bool = has_feature(&$cx.features);\n         debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\", name, span, has_feature);\n         if !has_feature && !span.allows_unstable($name) {\n@@ -62,68 +56,8 @@ macro_rules! gate_feature {\n     };\n }\n \n-impl<'a> Context<'a> {\n-    fn check_attribute(\n-        &self,\n-        attr: &ast::Attribute,\n-        attr_info: Option<&BuiltinAttribute>,\n-        is_macro: bool\n-    ) {\n-        debug!(\"check_attribute(attr = {:?})\", attr);\n-        if let Some(&(name, ty, _template, ref gateage)) = attr_info {\n-            if let AttributeGate::Gated(_, name, desc, ref has_feature) = *gateage {\n-                if !attr.span.allows_unstable(name) {\n-                    gate_feature_fn!(\n-                        self, has_feature, attr.span, name, desc, GateStrength::Hard\n-                    );\n-                }\n-            } else if name == sym::doc {\n-                if let Some(content) = attr.meta_item_list() {\n-                    if content.iter().any(|c| c.check_name(sym::include)) {\n-                        gate_feature!(self, external_doc, attr.span,\n-                            \"`#[doc(include = \\\"...\\\")]` is experimental\"\n-                        );\n-                    }\n-                }\n-            }\n-            debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", attr.path, ty, gateage);\n-            return;\n-        } else {\n-            for segment in &attr.path.segments {\n-                if segment.ident.as_str().starts_with(\"rustc\") {\n-                    let msg = \"attributes starting with `rustc` are \\\n-                               reserved for use by the `rustc` compiler\";\n-                    gate_feature!(self, rustc_attrs, segment.ident.span, msg);\n-                }\n-            }\n-        }\n-        for &(n, ty) in self.plugin_attributes {\n-            if attr.path == n {\n-                // Plugins can't gate attributes, so we don't check for it\n-                // unlike the code above; we only use this loop to\n-                // short-circuit to avoid the checks below.\n-                debug!(\"check_attribute: {:?} is registered by a plugin, {:?}\", attr.path, ty);\n-                return;\n-            }\n-        }\n-        if !is_macro && !attr::is_known(attr) {\n-            // Only run the custom attribute lint during regular feature gate\n-            // checking. Macro gating runs before the plugin attributes are\n-            // registered, so we skip this in that case.\n-            let msg = format!(\"the attribute `{}` is currently unknown to the compiler and \\\n-                               may have meaning added to it in the future\", attr.path);\n-            gate_feature!(self, custom_attribute, attr.span, &msg);\n-        }\n-    }\n-}\n-\n-pub fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n-    let cx = Context { features, parse_sess, plugin_attributes: &[] };\n-    cx.check_attribute(\n-        attr,\n-        attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name).map(|a| *a)),\n-        true\n-    );\n+crate fn check_attribute(attr: &ast::Attribute, parse_sess: &ParseSess, features: &Features) {\n+    PostExpansionVisitor { parse_sess, features }.visit_attribute(attr)\n }\n \n fn find_lang_feature_issue(feature: Symbol) -> Option<u32> {\n@@ -238,21 +172,21 @@ pub const EXPLAIN_UNSIZED_TUPLE_COERCION: &str =\n     \"unsized tuple coercion is not stable enough for use and is subject to change\";\n \n struct PostExpansionVisitor<'a> {\n-    context: &'a Context<'a>,\n-    builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,\n+    parse_sess: &'a ParseSess,\n+    features: &'a Features,\n }\n \n macro_rules! gate_feature_post {\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr) => {{\n         let (cx, span) = ($cx, $span);\n         if !span.allows_unstable(sym::$feature) {\n-            gate_feature!(cx.context, $feature, span, $explain)\n+            gate_feature!(cx, $feature, span, $explain)\n         }\n     }};\n     ($cx: expr, $feature: ident, $span: expr, $explain: expr, $level: expr) => {{\n         let (cx, span) = ($cx, $span);\n         if !span.allows_unstable(sym::$feature) {\n-            gate_feature!(cx.context, $feature, span, $explain, $level)\n+            gate_feature!(cx, $feature, span, $explain, $level)\n         }\n     }}\n }\n@@ -316,58 +250,52 @@ impl<'a> PostExpansionVisitor<'a> {\n \n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n-        let attr_info = attr.ident().and_then(|ident| {\n-            self.builtin_attributes.get(&ident.name).map(|a| *a)\n-        });\n-\n-        // Check for gated attributes.\n-        self.context.check_attribute(attr, attr_info, false);\n-\n-        if attr.check_name(sym::doc) {\n-            if let Some(content) = attr.meta_item_list() {\n-                if content.len() == 1 && content[0].check_name(sym::cfg) {\n-                    gate_feature_post!(&self, doc_cfg, attr.span,\n-                        \"`#[doc(cfg(...))]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::masked)) {\n-                    gate_feature_post!(&self, doc_masked, attr.span,\n-                        \"`#[doc(masked)]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::spotlight)) {\n-                    gate_feature_post!(&self, doc_spotlight, attr.span,\n-                        \"`#[doc(spotlight)]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::alias)) {\n-                    gate_feature_post!(&self, doc_alias, attr.span,\n-                        \"`#[doc(alias = \\\"...\\\")]` is experimental\"\n-                    );\n-                } else if content.iter().any(|c| c.check_name(sym::keyword)) {\n-                    gate_feature_post!(&self, doc_keyword, attr.span,\n-                        \"`#[doc(keyword = \\\"...\\\")]` is experimental\"\n-                    );\n-                }\n-            }\n+        let attr_info =\n+            attr.ident().and_then(|ident| BUILTIN_ATTRIBUTE_MAP.get(&ident.name)).map(|a| **a);\n+        // Check feature gates for built-in attributes.\n+        if let Some((.., AttributeGate::Gated(_, name, descr, has_feature))) = attr_info {\n+            gate_feature_fn!(self, has_feature, attr.span, name, descr, GateStrength::Hard);\n         }\n-\n+        // Check input tokens for built-in and key-value attributes.\n         match attr_info {\n             // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n-            Some(&(name, _, template, _)) if name != sym::rustc_dummy =>\n-                check_builtin_attribute(self.context.parse_sess, attr, name, template),\n+            Some((name, _, template, _)) if name != sym::rustc_dummy =>\n+                check_builtin_attribute(self.parse_sess, attr, name, template),\n             _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n                 if token == token::Eq {\n                     // All key-value attributes are restricted to meta-item syntax.\n-                    attr.parse_meta(self.context.parse_sess).map_err(|mut err| err.emit()).ok();\n+                    attr.parse_meta(self.parse_sess).map_err(|mut err| err.emit()).ok();\n                 }\n             }\n         }\n+        // Check unstable flavors of the `#[doc]` attribute.\n+        if attr.check_name(sym::doc) {\n+            for nested_meta in attr.meta_item_list().unwrap_or_default() {\n+                macro_rules! gate_doc { ($($name:ident => $feature:ident)*) => {\n+                    $(if nested_meta.check_name(sym::$name) {\n+                        let msg = concat!(\"`#[doc(\", stringify!($name), \")]` is experimental\");\n+                        gate_feature!(self, $feature, attr.span, msg);\n+                    })*\n+                }}\n+\n+                gate_doc!(\n+                    include => external_doc\n+                    cfg => doc_cfg\n+                    masked => doc_masked\n+                    spotlight => doc_spotlight\n+                    alias => doc_alias\n+                    keyword => doc_keyword\n+                );\n+            }\n+        }\n     }\n \n     fn visit_name(&mut self, sp: Span, name: ast::Name) {\n         if !name.as_str().is_ascii() {\n             gate_feature_post!(\n                 &self,\n                 non_ascii_idents,\n-                self.context.parse_sess.source_map().def_span(sp),\n+                self.parse_sess.source_map().def_span(sp),\n                 \"non-ascii idents are not fully supported\"\n             );\n         }\n@@ -423,12 +351,9 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     }\n                 }\n \n-                let has_feature = self.context.features.arbitrary_enum_discriminant;\n+                let has_feature = self.features.arbitrary_enum_discriminant;\n                 if !has_feature && !i.span.allows_unstable(sym::arbitrary_enum_discriminant) {\n-                    Parser::maybe_report_invalid_custom_discriminants(\n-                        self.context.parse_sess,\n-                        &variants,\n-                    );\n+                    Parser::maybe_report_invalid_custom_discriminants(self.parse_sess, &variants);\n                 }\n             }\n \n@@ -538,7 +463,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::Type(..) => {\n                 // To avoid noise about type ascription in common syntax errors, only emit if it\n                 // is the *only* error.\n-                if self.context.parse_sess.span_diagnostic.err_count() == 0 {\n+                if self.parse_sess.span_diagnostic.err_count() == 0 {\n                     gate_feature_post!(&self, type_ascription, e.span,\n                                        \"type ascription is experimental\");\n                 }\n@@ -872,22 +797,17 @@ fn active_features_up_to(edition: Edition) -> impl Iterator<Item=&'static Featur\n }\n \n pub fn check_crate(krate: &ast::Crate,\n-                   sess: &ParseSess,\n+                   parse_sess: &ParseSess,\n                    features: &Features,\n-                   plugin_attributes: &[(Symbol, AttributeType)],\n                    unstable: UnstableFeatures) {\n-    maybe_stage_features(&sess.span_diagnostic, krate, unstable);\n-    let ctx = Context {\n-        features,\n-        parse_sess: sess,\n-        plugin_attributes,\n-    };\n+    maybe_stage_features(&parse_sess.span_diagnostic, krate, unstable);\n+    let mut visitor = PostExpansionVisitor { parse_sess, features };\n \n     macro_rules! gate_all {\n         ($gate:ident, $msg:literal) => { gate_all!($gate, $gate, $msg); };\n         ($spans:ident, $gate:ident, $msg:literal) => {\n-            for span in &*sess.gated_spans.$spans.borrow() {\n-                gate_feature!(&ctx, $gate, *span, $msg);\n+            for span in &*parse_sess.gated_spans.$spans.borrow() {\n+                gate_feature!(&visitor, $gate, *span, $msg);\n             }\n         }\n     }\n@@ -898,11 +818,7 @@ pub fn check_crate(krate: &ast::Crate,\n     gate_all!(yields, generators, \"yield syntax is experimental\");\n     gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n \n-    let visitor = &mut PostExpansionVisitor {\n-        context: &ctx,\n-        builtin_attributes: &*BUILTIN_ATTRIBUTE_MAP,\n-    };\n-    visit::walk_crate(visitor, krate);\n+    visit::walk_crate(&mut visitor, krate);\n }\n \n #[derive(Clone, Copy, Hash)]"}, {"sha": "ca13ab3620508b833cf0724c2d3ecad2d1d0be86", "filename": "src/libsyntax/feature_gate/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fmod.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -58,7 +58,8 @@ pub use builtin_attrs::{\n     deprecated_attributes, is_builtin_attr,  is_builtin_attr_name,\n };\n pub use check::{\n-    check_attribute, check_crate, get_features, feature_err, emit_feature_err,\n+    check_crate, get_features, feature_err, emit_feature_err,\n     Stability, GateIssue, UnstableFeatures,\n     EXPLAIN_STMT_ATTR_SYNTAX, EXPLAIN_UNSIZED_TUPLE_COERCION,\n };\n+crate use check::check_attribute;"}, {"sha": "9cc2d3bcf604575ab5b41f6b1656825a28cc20f4", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -11,7 +11,6 @@\n \n \n #![allow(warnings)]\n-#![feature(intrinsics)]\n #![feature(linkage)]\n #![feature(rustc_attrs)]\n #![crate_type = \"rlib\"]\n@@ -99,17 +98,6 @@ pub fn make_extern() {}\n pub extern \"C\" fn make_extern() {}\n \n \n-// Extern C Extern Rust-Intrinsic ----------------------------------------------\n-\n-#[cfg(cfail1)]\n-pub extern \"C\" fn make_intrinsic() {}\n-\n-#[cfg(not(cfail1))]\n-#[rustc_clean(cfg = \"cfail2\", except = \"Hir, HirBody, typeck_tables_of, fn_sig\")]\n-#[rustc_clean(cfg = \"cfail3\")]\n-pub extern \"rust-intrinsic\" fn make_intrinsic() {}\n-\n-\n // Type Parameter --------------------------------------------------------------\n \n #[cfg(cfail1)]"}, {"sha": "3006cdccfbb55c9df3e5e411a92d3386a03ae8c2", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -18,7 +18,6 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n #![feature(associated_type_defaults)]\n-#![feature(intrinsics)]\n \n \n // Change trait visibility\n@@ -318,7 +317,7 @@ trait TraitAddExternModifier {\n \n \n \n-// Change extern \"C\" to extern \"rust-intrinsic\"\n+// Change extern \"C\" to extern \"stdcall\"\n #[cfg(cfail1)]\n trait TraitChangeExternCToRustIntrinsic {\n     extern \"C\" fn method();\n@@ -330,7 +329,7 @@ trait TraitChangeExternCToRustIntrinsic {\n trait TraitChangeExternCToRustIntrinsic {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    extern \"rust-intrinsic\" fn method();\n+    extern \"stdcall\" fn method();\n }\n \n "}, {"sha": "d79ef62c312079881886b218413359d75856f6e5", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -13,3 +13,5 @@ use rustc_macros::HashStable;\n #[derive(HashStable)]\n //~^ use of unstable library feature 'rustc_private'\n struct Test;\n+\n+fn main() {}"}, {"sha": "e2dc0c3be725fa13f867a7f5343bc4e2aea34e79", "filename": "src/test/ui-fulldeps/hash-stable-is-unstable.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fhash-stable-is-unstable.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `hash_stable_is_unstable`\n-   |\n-   = note: consider adding a `main` function to `$DIR/hash-stable-is-unstable.rs`\n-\n error[E0658]: use of unstable library feature 'rustc_private': this crate is being loaded from the sysroot, an unstable location; did you mean to load this crate from crates.io via `Cargo.toml` instead?\n   --> $DIR/hash-stable-is-unstable.rs:3:1\n    |\n@@ -47,7 +43,6 @@ LL | #[derive(HashStable)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/27812\n    = help: add `#![feature(rustc_private)]` to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0601, E0658.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "59ce9496d28f0bd340141ebb819ca478b5e42adf", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -31,3 +31,5 @@ union U2 { f: Box<dyn Iterator<Item: Copy>> }\n union U3 { f: dyn Iterator<Item: 'static> }\n //~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n //~| ERROR could not find defining uses\n+\n+fn main() {}"}, {"sha": "9c4d03e900940f0af1cd4b65b0db483a98f4b139", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -52,10 +52,6 @@ error: associated type bounds are not allowed within structs, enums, or unions\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `inside_adt`\n-   |\n-   = note: consider adding a `main` function to `$DIR/inside-adt.rs`\n-\n error: could not find defining uses\n   --> $DIR/inside-adt.rs:5:29\n    |\n@@ -110,6 +106,5 @@ error: could not find defining uses\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 18 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "e9df780def5dfa0e9dc018e98f0713f3d0a5bd0d", "filename": "src/test/ui/conditional-compilation/cfg-attr-cfg-2.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-cfg-2.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,6 +1,9 @@\n error[E0601]: `main` function not found in crate `cfg_attr_cfg_2`\n+  --> $DIR/cfg-attr-cfg-2.rs:8:1\n    |\n-   = note: consider adding a `main` function to `$DIR/cfg-attr-cfg-2.rs`\n+LL | / #[cfg_attr(foo, cfg(bar))]\n+LL | | fn main() { }\n+   | |_____________^ consider adding a `main` function to `$DIR/cfg-attr-cfg-2.rs`\n \n error: aborting due to previous error\n "}, {"sha": "0b5c3e0335586d65a94a5199b9596b76830eb919", "filename": "src/test/ui/conditional-compilation/cfg-in-crate-1.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-in-crate-1.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,6 +1,8 @@\n error[E0601]: `main` function not found in crate `cfg_in_crate_1`\n+  --> $DIR/cfg-in-crate-1.rs:3:1\n    |\n-   = note: consider adding a `main` function to `$DIR/cfg-in-crate-1.rs`\n+LL | #![cfg(bar)]\n+   | ^^^^^^^^^^^^ consider adding a `main` function to `$DIR/cfg-in-crate-1.rs`\n \n error: aborting due to previous error\n "}, {"sha": "b94c365f2539a904269473532e6928c6800c9823", "filename": "src/test/ui/continue-after-missing-main.nll.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.nll.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,6 +1,14 @@\n error[E0601]: `main` function not found in crate `continue_after_missing_main`\n+  --> $DIR/continue-after-missing-main.rs:1:1\n    |\n-   = note: consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n+LL | / #![allow(dead_code)]\n+LL | |\n+LL | | // error-pattern:`main` function not found in crate\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n \n error: aborting due to previous error\n "}, {"sha": "d764e7d860af678b4432349223b0ac3f802804d2", "filename": "src/test/ui/continue-after-missing-main.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcontinue-after-missing-main.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,6 +1,14 @@\n error[E0601]: `main` function not found in crate `continue_after_missing_main`\n+  --> $DIR/continue-after-missing-main.rs:1:1\n    |\n-   = note: consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n+LL | / #![allow(dead_code)]\n+LL | |\n+LL | | // error-pattern:`main` function not found in crate\n+LL | |\n+...  |\n+LL | |\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/continue-after-missing-main.rs`\n \n error[E0623]: lifetime mismatch\n   --> $DIR/continue-after-missing-main.rs:30:56"}, {"sha": "175bd033067bc61ea606e29b814dcc5699f1b3b3", "filename": "src/test/ui/elided-test.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Felided-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Felided-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Felided-test.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,6 +1,10 @@\n error[E0601]: `main` function not found in crate `elided_test`\n+  --> $DIR/elided-test.rs:5:1\n    |\n-   = note: consider adding a `main` function to `$DIR/elided-test.rs`\n+LL | / #[test]\n+LL | | fn main() {\n+LL | | }\n+   | |_^ consider adding a `main` function to `$DIR/elided-test.rs`\n \n error: aborting due to previous error\n "}, {"sha": "445053a4a89e3f9adaad7e234e497ef007a29354", "filename": "src/test/ui/error-codes/E0138.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0138.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,4 @@\n-error[E0138]: multiple 'start' functions\n+error[E0138]: multiple `start` functions\n   --> $DIR/E0138.rs:7:1\n    |\n LL | fn foo(argc: isize, argv: *const *const u8) -> isize { 0 }"}, {"sha": "4380ddeac0aacce1e0bb4d24a77225b074b553da", "filename": "src/test/ui/error-codes/E0601.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1 +1 @@\n-// Test for main function not found.\n+//~ ERROR `main` function not found"}, {"sha": "a687f575615d76c933b128c8651d4f4c7189bb02", "filename": "src/test/ui/error-codes/E0601.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,6 +1,8 @@\n error[E0601]: `main` function not found in crate `E0601`\n+  --> $DIR/E0601.rs:1:37\n    |\n-   = note: consider adding a `main` function to `$DIR/E0601.rs`\n+LL |\n+   |                                     ^ consider adding a `main` function to `$DIR/E0601.rs`\n \n error: aborting due to previous error\n "}, {"sha": "61da38eea74b3b41ed4673dec20b5770f0cd2d2c", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -10,7 +10,9 @@\n \n // Functions\n extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n+//~^ ERROR intrinsic must be in\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n+//~^ ERROR intrinsic must be in\n extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -22,7 +24,9 @@ extern \"amdgpu-kernel\" fn f9() {} //~ ERROR amdgpu-kernel ABI is experimental an\n // Methods in trait definition\n trait Tr {\n     extern \"rust-intrinsic\" fn m1(); //~ ERROR intrinsics are subject to change\n+    //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n+    //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n@@ -31,8 +35,6 @@ trait Tr {\n     extern \"thiscall\" fn m8(); //~ ERROR thiscall is experimental and subject to change\n     extern \"amdgpu-kernel\" fn m9(); //~ ERROR amdgpu-kernel ABI is experimental and subject to change\n \n-    extern \"rust-intrinsic\" fn dm1() {} //~ ERROR intrinsics are subject to change\n-    extern \"platform-intrinsic\" fn dm2() {} //~ ERROR platform intrinsics are experimental\n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -47,7 +49,9 @@ struct S;\n // Methods in trait impl\n impl Tr for S {\n     extern \"rust-intrinsic\" fn m1() {} //~ ERROR intrinsics are subject to change\n+    //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n+    //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n@@ -60,7 +64,9 @@ impl Tr for S {\n // Methods in inherent impl\n impl S {\n     extern \"rust-intrinsic\" fn im1() {} //~ ERROR intrinsics are subject to change\n+    //~^ ERROR intrinsic must be in\n     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n+    //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n     extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental"}, {"sha": "afda76dc2b0aa1c5fc6d5f1f798d592edd9dc011", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 109, "deletions": 78, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -7,7 +7,7 @@ LL | extern \"rust-intrinsic\" fn f1() {}\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:13:1\n+  --> $DIR/feature-gate-abi.rs:14:1\n    |\n LL | extern \"platform-intrinsic\" fn f2() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,15 +16,15 @@ LL | extern \"platform-intrinsic\" fn f2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:14:1\n+  --> $DIR/feature-gate-abi.rs:16:1\n    |\n LL | extern \"vectorcall\" fn f3() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:15:1\n+  --> $DIR/feature-gate-abi.rs:17:1\n    |\n LL | extern \"rust-call\" fn f4() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ LL | extern \"rust-call\" fn f4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:16:1\n+  --> $DIR/feature-gate-abi.rs:18:1\n    |\n LL | extern \"msp430-interrupt\" fn f5() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL | extern \"msp430-interrupt\" fn f5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:17:1\n+  --> $DIR/feature-gate-abi.rs:19:1\n    |\n LL | extern \"ptx-kernel\" fn f6() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL | extern \"ptx-kernel\" fn f6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:18:1\n+  --> $DIR/feature-gate-abi.rs:20:1\n    |\n LL | extern \"x86-interrupt\" fn f7() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,15 +60,15 @@ LL | extern \"x86-interrupt\" fn f7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:19:1\n+  --> $DIR/feature-gate-abi.rs:21:1\n    |\n LL | extern \"thiscall\" fn f8() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:20:1\n+  --> $DIR/feature-gate-abi.rs:22:1\n    |\n LL | extern \"amdgpu-kernel\" fn f9() {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -77,15 +77,15 @@ LL | extern \"amdgpu-kernel\" fn f9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:24:5\n+  --> $DIR/feature-gate-abi.rs:26:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:25:5\n+  --> $DIR/feature-gate-abi.rs:28:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -94,15 +94,15 @@ LL |     extern \"platform-intrinsic\" fn m2();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:26:5\n+  --> $DIR/feature-gate-abi.rs:30:5\n    |\n LL |     extern \"vectorcall\" fn m3();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:27:5\n+  --> $DIR/feature-gate-abi.rs:31:5\n    |\n LL |     extern \"rust-call\" fn m4();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,7 +111,7 @@ LL |     extern \"rust-call\" fn m4();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:28:5\n+  --> $DIR/feature-gate-abi.rs:32:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL |     extern \"msp430-interrupt\" fn m5();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:29:5\n+  --> $DIR/feature-gate-abi.rs:33:5\n    |\n LL |     extern \"ptx-kernel\" fn m6();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -129,7 +129,7 @@ LL |     extern \"ptx-kernel\" fn m6();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:30:5\n+  --> $DIR/feature-gate-abi.rs:34:5\n    |\n LL |     extern \"x86-interrupt\" fn m7();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,49 +138,32 @@ LL |     extern \"x86-interrupt\" fn m7();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:31:5\n+  --> $DIR/feature-gate-abi.rs:35:5\n    |\n LL |     extern \"thiscall\" fn m8();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:32:5\n+  --> $DIR/feature-gate-abi.rs:36:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n-error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:34:5\n-   |\n-LL |     extern \"rust-intrinsic\" fn dm1() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n-\n-error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:35:5\n-   |\n-LL |     extern \"platform-intrinsic\" fn dm2() {}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/27731\n-   = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n-\n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:36:5\n+  --> $DIR/feature-gate-abi.rs:38:5\n    |\n LL |     extern \"vectorcall\" fn dm3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:37:5\n+  --> $DIR/feature-gate-abi.rs:39:5\n    |\n LL |     extern \"rust-call\" fn dm4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -189,7 +172,7 @@ LL |     extern \"rust-call\" fn dm4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:38:5\n+  --> $DIR/feature-gate-abi.rs:40:5\n    |\n LL |     extern \"msp430-interrupt\" fn dm5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -198,7 +181,7 @@ LL |     extern \"msp430-interrupt\" fn dm5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:39:5\n+  --> $DIR/feature-gate-abi.rs:41:5\n    |\n LL |     extern \"ptx-kernel\" fn dm6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -207,7 +190,7 @@ LL |     extern \"ptx-kernel\" fn dm6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:40:5\n+  --> $DIR/feature-gate-abi.rs:42:5\n    |\n LL |     extern \"x86-interrupt\" fn dm7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -216,15 +199,15 @@ LL |     extern \"x86-interrupt\" fn dm7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:41:5\n+  --> $DIR/feature-gate-abi.rs:43:5\n    |\n LL |     extern \"thiscall\" fn dm8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:42:5\n+  --> $DIR/feature-gate-abi.rs:44:5\n    |\n LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -233,15 +216,15 @@ LL |     extern \"amdgpu-kernel\" fn dm9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:49:5\n+  --> $DIR/feature-gate-abi.rs:51:5\n    |\n LL |     extern \"rust-intrinsic\" fn m1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:50:5\n+  --> $DIR/feature-gate-abi.rs:53:5\n    |\n LL |     extern \"platform-intrinsic\" fn m2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,15 +233,15 @@ LL |     extern \"platform-intrinsic\" fn m2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:51:5\n+  --> $DIR/feature-gate-abi.rs:55:5\n    |\n LL |     extern \"vectorcall\" fn m3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:52:5\n+  --> $DIR/feature-gate-abi.rs:56:5\n    |\n LL |     extern \"rust-call\" fn m4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -267,7 +250,7 @@ LL |     extern \"rust-call\" fn m4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:53:5\n+  --> $DIR/feature-gate-abi.rs:57:5\n    |\n LL |     extern \"msp430-interrupt\" fn m5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -276,7 +259,7 @@ LL |     extern \"msp430-interrupt\" fn m5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:54:5\n+  --> $DIR/feature-gate-abi.rs:58:5\n    |\n LL |     extern \"ptx-kernel\" fn m6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -285,7 +268,7 @@ LL |     extern \"ptx-kernel\" fn m6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:55:5\n+  --> $DIR/feature-gate-abi.rs:59:5\n    |\n LL |     extern \"x86-interrupt\" fn m7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -294,15 +277,15 @@ LL |     extern \"x86-interrupt\" fn m7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:56:5\n+  --> $DIR/feature-gate-abi.rs:60:5\n    |\n LL |     extern \"thiscall\" fn m8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:57:5\n+  --> $DIR/feature-gate-abi.rs:61:5\n    |\n LL |     extern \"amdgpu-kernel\" fn m9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -311,15 +294,15 @@ LL |     extern \"amdgpu-kernel\" fn m9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:62:5\n+  --> $DIR/feature-gate-abi.rs:66:5\n    |\n LL |     extern \"rust-intrinsic\" fn im1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:63:5\n+  --> $DIR/feature-gate-abi.rs:68:5\n    |\n LL |     extern \"platform-intrinsic\" fn im2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -328,15 +311,15 @@ LL |     extern \"platform-intrinsic\" fn im2() {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:64:5\n+  --> $DIR/feature-gate-abi.rs:70:5\n    |\n LL |     extern \"vectorcall\" fn im3() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:65:5\n+  --> $DIR/feature-gate-abi.rs:71:5\n    |\n LL |     extern \"rust-call\" fn im4() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -345,7 +328,7 @@ LL |     extern \"rust-call\" fn im4() {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:66:5\n+  --> $DIR/feature-gate-abi.rs:72:5\n    |\n LL |     extern \"msp430-interrupt\" fn im5() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -354,7 +337,7 @@ LL |     extern \"msp430-interrupt\" fn im5() {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:67:5\n+  --> $DIR/feature-gate-abi.rs:73:5\n    |\n LL |     extern \"ptx-kernel\" fn im6() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -363,7 +346,7 @@ LL |     extern \"ptx-kernel\" fn im6() {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:68:5\n+  --> $DIR/feature-gate-abi.rs:74:5\n    |\n LL |     extern \"x86-interrupt\" fn im7() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -372,15 +355,15 @@ LL |     extern \"x86-interrupt\" fn im7() {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:69:5\n+  --> $DIR/feature-gate-abi.rs:75:5\n    |\n LL |     extern \"thiscall\" fn im8() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:70:5\n+  --> $DIR/feature-gate-abi.rs:76:5\n    |\n LL |     extern \"amdgpu-kernel\" fn im9() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -389,15 +372,15 @@ LL |     extern \"amdgpu-kernel\" fn im9() {}\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:74:11\n+  --> $DIR/feature-gate-abi.rs:80:11\n    |\n LL | type A1 = extern \"rust-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:75:11\n+  --> $DIR/feature-gate-abi.rs:81:11\n    |\n LL | type A2 = extern \"platform-intrinsic\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -406,15 +389,15 @@ LL | type A2 = extern \"platform-intrinsic\" fn();\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:76:11\n+  --> $DIR/feature-gate-abi.rs:82:11\n    |\n LL | type A3 = extern \"vectorcall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:77:11\n+  --> $DIR/feature-gate-abi.rs:83:11\n    |\n LL | type A4 = extern \"rust-call\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -423,7 +406,7 @@ LL | type A4 = extern \"rust-call\" fn();\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:78:11\n+  --> $DIR/feature-gate-abi.rs:84:11\n    |\n LL | type A5 = extern \"msp430-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -432,7 +415,7 @@ LL | type A5 = extern \"msp430-interrupt\" fn();\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:79:11\n+  --> $DIR/feature-gate-abi.rs:85:11\n    |\n LL | type A6 = extern \"ptx-kernel\" fn ();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -441,7 +424,7 @@ LL | type A6 = extern \"ptx-kernel\" fn ();\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:80:11\n+  --> $DIR/feature-gate-abi.rs:86:11\n    |\n LL | type A7 = extern \"x86-interrupt\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -450,15 +433,15 @@ LL | type A7 = extern \"x86-interrupt\" fn();\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:81:11\n+  --> $DIR/feature-gate-abi.rs:87:11\n    |\n LL | type A8 = extern \"thiscall\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:82:11\n+  --> $DIR/feature-gate-abi.rs:88:11\n    |\n LL | type A9 = extern \"amdgpu-kernel\" fn();\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -467,15 +450,15 @@ LL | type A9 = extern \"amdgpu-kernel\" fn();\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n error[E0658]: intrinsics are subject to change\n-  --> $DIR/feature-gate-abi.rs:85:1\n+  --> $DIR/feature-gate-abi.rs:91:1\n    |\n LL | extern \"rust-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(intrinsics)]` to the crate attributes to enable\n \n error[E0658]: platform intrinsics are experimental and possibly buggy\n-  --> $DIR/feature-gate-abi.rs:86:1\n+  --> $DIR/feature-gate-abi.rs:92:1\n    |\n LL | extern \"platform-intrinsic\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -484,15 +467,15 @@ LL | extern \"platform-intrinsic\" {}\n    = help: add `#![feature(platform_intrinsics)]` to the crate attributes to enable\n \n error[E0658]: vectorcall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:87:1\n+  --> $DIR/feature-gate-abi.rs:93:1\n    |\n LL | extern \"vectorcall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_vectorcall)]` to the crate attributes to enable\n \n error[E0658]: rust-call ABI is subject to change\n-  --> $DIR/feature-gate-abi.rs:88:1\n+  --> $DIR/feature-gate-abi.rs:94:1\n    |\n LL | extern \"rust-call\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n@@ -501,7 +484,7 @@ LL | extern \"rust-call\" {}\n    = help: add `#![feature(unboxed_closures)]` to the crate attributes to enable\n \n error[E0658]: msp430-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:89:1\n+  --> $DIR/feature-gate-abi.rs:95:1\n    |\n LL | extern \"msp430-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -510,7 +493,7 @@ LL | extern \"msp430-interrupt\" {}\n    = help: add `#![feature(abi_msp430_interrupt)]` to the crate attributes to enable\n \n error[E0658]: PTX ABIs are experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:90:1\n+  --> $DIR/feature-gate-abi.rs:96:1\n    |\n LL | extern \"ptx-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n@@ -519,7 +502,7 @@ LL | extern \"ptx-kernel\" {}\n    = help: add `#![feature(abi_ptx)]` to the crate attributes to enable\n \n error[E0658]: x86-interrupt ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:91:1\n+  --> $DIR/feature-gate-abi.rs:97:1\n    |\n LL | extern \"x86-interrupt\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -528,22 +511,70 @@ LL | extern \"x86-interrupt\" {}\n    = help: add `#![feature(abi_x86_interrupt)]` to the crate attributes to enable\n \n error[E0658]: thiscall is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:92:1\n+  --> $DIR/feature-gate-abi.rs:98:1\n    |\n LL | extern \"thiscall\" {}\n    | ^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(abi_thiscall)]` to the crate attributes to enable\n \n error[E0658]: amdgpu-kernel ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi.rs:93:1\n+  --> $DIR/feature-gate-abi.rs:99:1\n    |\n LL | extern \"amdgpu-kernel\" {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/51575\n    = help: add `#![feature(abi_amdgpu_kernel)]` to the crate attributes to enable\n \n-error: aborting due to 63 previous errors\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:26:32\n+   |\n+LL |     extern \"rust-intrinsic\" fn m1();\n+   |                                ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:28:36\n+   |\n+LL |     extern \"platform-intrinsic\" fn m2();\n+   |                                    ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:12:33\n+   |\n+LL | extern \"rust-intrinsic\" fn f1() {}\n+   |                                 ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:14:37\n+   |\n+LL | extern \"platform-intrinsic\" fn f2() {}\n+   |                                     ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:51:37\n+   |\n+LL |     extern \"rust-intrinsic\" fn m1() {}\n+   |                                     ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:53:41\n+   |\n+LL |     extern \"platform-intrinsic\" fn m2() {}\n+   |                                         ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:66:38\n+   |\n+LL |     extern \"rust-intrinsic\" fn im1() {}\n+   |                                      ^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-abi.rs:68:42\n+   |\n+LL |     extern \"platform-intrinsic\" fn im2() {}\n+   |                                          ^^\n+\n+error: aborting due to 69 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "c95722102d9b61078b16ec752589f99ed3513522", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,4 @@\n-#[doc(alias = \"foo\")] //~ ERROR: `#[doc(alias = \"...\")]` is experimental\n+#[doc(alias = \"foo\")] //~ ERROR: `#[doc(alias)]` is experimental\n pub struct Foo;\n \n fn main() {}"}, {"sha": "540b1f5ccbe43f8e1f5eabc0b13fd021bdea89b8", "filename": "src/test/ui/feature-gates/feature-gate-doc_alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_alias.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(alias = \"...\")]` is experimental\n+error[E0658]: `#[doc(alias)]` is experimental\n   --> $DIR/feature-gate-doc_alias.rs:1:1\n    |\n LL | #[doc(alias = \"foo\")]"}, {"sha": "b12b8a105718290abbf99fe73c670e8364211d7a", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,2 +1,2 @@\n-#[doc(cfg(unix))] //~ ERROR: `#[doc(cfg(...))]` is experimental\n+#[doc(cfg(unix))] //~ ERROR: `#[doc(cfg)]` is experimental\n fn main() {}"}, {"sha": "eaa908d0037aeb5272305a18cb5506dcaee8d5c2", "filename": "src/test/ui/feature-gates/feature-gate-doc_cfg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_cfg.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(cfg(...))]` is experimental\n+error[E0658]: `#[doc(cfg)]` is experimental\n   --> $DIR/feature-gate-doc_cfg.rs:1:1\n    |\n LL | #[doc(cfg(unix))]"}, {"sha": "4bb9a40deb0dd844c71635354d13e4606abb3c46", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,4 @@\n-#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword = \"...\")]` is experimental\n+#[doc(keyword = \"match\")] //~ ERROR: `#[doc(keyword)]` is experimental\n /// wonderful\n mod foo{}\n "}, {"sha": "15a41d9ffa4eaf6f2f8ec552db76d29a9ae3eac5", "filename": "src/test/ui/feature-gates/feature-gate-doc_keyword.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-doc_keyword.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(keyword = \"...\")]` is experimental\n+error[E0658]: `#[doc(keyword)]` is experimental\n   --> $DIR/feature-gate-doc_keyword.rs:1:1\n    |\n LL | #[doc(keyword = \"match\")]"}, {"sha": "9d68d3ec4f52a426976b60ea5ffd4f5e66d960b5", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,2 +1,2 @@\n-#[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include = \"...\")]` is experimental\n+#[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include)]` is experimental\n fn main() {}"}, {"sha": "683c0ad217426b08e31eb5e3ce8cd9c243918d97", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `#[doc(include = \"...\")]` is experimental\n+error[E0658]: `#[doc(include)]` is experimental\n   --> $DIR/feature-gate-external_doc.rs:1:1\n    |\n LL | #[doc(include=\"asdf.md\")]"}, {"sha": "e0dc3cc579d79d4d18a63bd7cd88cdbfe28080dd", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -3,5 +3,6 @@ extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n }\n \n extern \"rust-intrinsic\" fn baz() {} //~ ERROR intrinsics are subject to change\n+//~^ ERROR intrinsic must be in\n \n fn main() {}"}, {"sha": "101a10e8df71f80f5292ffc584d275685ec19e76", "filename": "src/test/ui/feature-gates/feature-gate-intrinsics.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-intrinsics.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -22,7 +22,13 @@ error[E0093]: unrecognized intrinsic function: `bar`\n LL |     fn bar();\n    |     ^^^^^^^^^ unrecognized intrinsic\n \n-error: aborting due to 3 previous errors\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/feature-gate-intrinsics.rs:5:34\n+   |\n+LL | extern \"rust-intrinsic\" fn baz() {}\n+   |                                  ^^\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0093, E0658.\n For more information about an error, try `rustc --explain E0093`."}, {"sha": "22951147d7d870fe79246c7c1cf4b84ce8d34560", "filename": "src/test/ui/intrinsics-always-extern.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fintrinsics-always-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fintrinsics-always-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics-always-extern.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -0,0 +1,16 @@\n+#![feature(intrinsics)]\n+\n+trait Foo {\n+    extern \"rust-intrinsic\" fn foo(&self); //~ ERROR intrinsic must\n+}\n+\n+impl Foo for () {\n+    extern \"rust-intrinsic\" fn foo(&self) { //~ ERROR intrinsic must\n+    }\n+}\n+\n+extern \"rust-intrinsic\" fn hello() {//~ ERROR intrinsic must\n+}\n+\n+fn main() {\n+}"}, {"sha": "24b6da16096e61019788a23fd3c675bc3763108b", "filename": "src/test/ui/intrinsics-always-extern.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fintrinsics-always-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fintrinsics-always-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics-always-extern.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -0,0 +1,24 @@\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/intrinsics-always-extern.rs:4:32\n+   |\n+LL |     extern \"rust-intrinsic\" fn foo(&self);\n+   |                                ^^^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/intrinsics-always-extern.rs:8:43\n+   |\n+LL |       extern \"rust-intrinsic\" fn foo(&self) {\n+   |  ___________________________________________^\n+LL | |     }\n+   | |_____^\n+\n+error: intrinsic must be in `extern \"rust-intrinsic\" { ... }` block\n+  --> $DIR/intrinsics-always-extern.rs:12:36\n+   |\n+LL |   extern \"rust-intrinsic\" fn hello() {\n+   |  ____________________________________^\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "8b1343b1326b455d507daf43033cee04150b627c", "filename": "src/test/ui/issues/issue-46101.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -2,3 +2,5 @@\n trait Foo {}\n #[derive(Foo::Anything)] //~ ERROR failed to resolve: partially resolved path in a derive macro\n struct S;\n+\n+fn main() {}"}, {"sha": "9c88d3b87c907c64a7281f5df649b3362e652b77", "filename": "src/test/ui/issues/issue-46101.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46101.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -4,11 +4,6 @@ error[E0433]: failed to resolve: partially resolved path in a derive macro\n LL | #[derive(Foo::Anything)]\n    |          ^^^^^^^^^^^^^ partially resolved path in a derive macro\n \n-error[E0601]: `main` function not found in crate `issue_46101`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-46101.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0433, E0601.\n-For more information about an error, try `rustc --explain E0433`.\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "b7a541dd6642a763aa7411e086ac949de13696c5", "filename": "src/test/ui/issues/issue-49040.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,2 +1,3 @@\n #![allow(unused_variables)]; //~ ERROR expected item, found `;`\n+//~^ ERROR `main` function\n fn foo() {}"}, {"sha": "4134d6aa5446898b8a7c6d7776dadce199002886", "filename": "src/test/ui/issues/issue-49040.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -5,8 +5,12 @@ LL | #![allow(unused_variables)];\n    |                            ^ help: remove this semicolon\n \n error[E0601]: `main` function not found in crate `issue_49040`\n+  --> $DIR/issue-49040.rs:1:1\n    |\n-   = note: consider adding a `main` function to `$DIR/issue-49040.rs`\n+LL | / #![allow(unused_variables)];\n+LL | |\n+LL | | fn foo() {}\n+   | |__^ consider adding a `main` function to `$DIR/issue-49040.rs`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b52343adaee7108d37023ed50299abc5ab7a37ca", "filename": "src/test/ui/issues/issue-60057.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60057.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -15,3 +15,5 @@ impl A {\n         }\n     }\n }\n+\n+fn main() {}"}, {"sha": "4d915fcd9fe3d0c7f09f04866e6f5ab0c3b98fee", "filename": "src/test/ui/issues/issue-60057.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60057.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -10,11 +10,6 @@ error[E0425]: cannot find value `banana` in this scope\n LL |             banana: banana\n    |                     ^^^^^^ help: you might have meant to use the available field: `self.banana`\n \n-error[E0601]: `main` function not found in crate `issue_60057`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-60057.rs`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0425, E0601.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "86cb2f0a3a8136418e084d786d345fbf68cac9e1", "filename": "src/test/ui/json-short.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fjson-short.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fjson-short.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-short.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -11,7 +11,7 @@ fn main() {\n \n If you don't know the basics of Rust, you can go look to the Rust Book to get\n started: https://doc.rust-lang.org/book/\n-\"},\"level\":\"error\",\"spans\":[],\"children\":[{\"message\":\"consider adding a `main` function to `$DIR/json-short.rs`\",\"code\":null,\"level\":\"note\",\"spans\":[],\"children\":[],\"rendered\":null}],\"rendered\":\"error[E0601]: `main` function not found in crate `json_short`\n+\"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-short.rs\",\"byte_start\":76,\"byte_end\":76,\"line_start\":2,\"line_end\":2,\"column_start\":63,\"column_end\":63,\"is_primary\":true,\"text\":[{\"text\":\"// compile-flags: --json=diagnostic-short --error-format=json\",\"highlight_start\":63,\"highlight_end\":63}],\"label\":\"consider adding a `main` function to `$DIR/json-short.rs`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-short.rs:2:63: error[E0601]: `main` function not found in crate `json_short`\n \"}\n {\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error\n \"}"}, {"sha": "5a71d6efeda62bb81e836fd23e4b2ec61575a04f", "filename": "src/test/ui/lifetime-before-type-params.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Flifetime-before-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Flifetime-before-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -7,3 +7,5 @@ fn third<T, U, 'a>() {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n fn fourth<'a, T, 'b, U, 'c, V>() {}\n //~^ ERROR lifetime parameters must be declared prior to type parameters\n+\n+fn main() {}"}, {"sha": "76d7d0f024d65ce7d2f63b044ededc19d9fcf5c5", "filename": "src/test/ui/lifetime-before-type-params.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-before-type-params.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -22,10 +22,5 @@ error: lifetime parameters must be declared prior to type parameters\n LL | fn fourth<'a, T, 'b, U, 'c, V>() {}\n    |          --------^^-----^^---- help: reorder the parameters: lifetimes, then types: `<'a, 'b, 'c, T, U, V>`\n \n-error[E0601]: `main` function not found in crate `lifetime_before_type_params`\n-   |\n-   = note: consider adding a `main` function to `$DIR/lifetime-before-type-params.rs`\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "f75d08813cdcd99c08af1909ca05efe7f2d89f14", "filename": "src/test/ui/main-wrong-location.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fmain-wrong-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fmain-wrong-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,5 @@\n mod m {\n+//~^ ERROR `main` function not found\n     // An inferred main entry point (that doesn't use #[main])\n     // must appear at the top of the crate\n     fn main() { }"}, {"sha": "e301c2ff09ad75151a4b7024db910a4489ce5854", "filename": "src/test/ui/main-wrong-location.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,11 +1,21 @@\n error[E0601]: `main` function not found in crate `main_wrong_location`\n+  --> $DIR/main-wrong-location.rs:1:1\n    |\n-   = note: the main function must be defined at the crate level but you have one or more functions named 'main' that are not defined at the crate level. Either move the definition or attach the `#[main]` attribute to override this behavior.\n-note: here is a function named 'main'\n-  --> $DIR/main-wrong-location.rs:4:5\n+LL | / mod m {\n+LL | |\n+LL | |     // An inferred main entry point (that doesn't use #[main])\n+LL | |     // must appear at the top of the crate\n+LL | |     fn main() { }\n+LL | | }\n+   | |_^ the main function must be defined at the crate level (in `$DIR/main-wrong-location.rs`)\n+   |\n+note: here is a function named `main`\n+  --> $DIR/main-wrong-location.rs:5:5\n    |\n LL |     fn main() { }\n    |     ^^^^^^^^^^^^^\n+   = note: you have one or more functions named `main` not defined at the crate level\n+   = help: either move the `main` function definitions or attach the `#[main]` attribute to one of them\n \n error: aborting due to previous error\n "}, {"sha": "6a35f5117efd66cb34430617489f69a2ba29624f", "filename": "src/test/ui/missing/missing-main.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fmissing%2Fmissing-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fmissing%2Fmissing-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-main.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,6 +1,8 @@\n error[E0601]: `main` function not found in crate `missing_main`\n+  --> $DIR/missing-main.rs:2:1\n    |\n-   = note: consider adding a `main` function to `$DIR/missing-main.rs`\n+LL | fn mian() { }\n+   | ^^^^^^^^^^^^^ consider adding a `main` function to `$DIR/missing-main.rs`\n \n error: aborting due to previous error\n "}, {"sha": "8126525c34f959af0a7c681fd9a41af619805c47", "filename": "src/test/ui/parser-recovery-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser-recovery-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -3,6 +3,7 @@\n // Test that we can recover from missing braces in the parser.\n \n trait Foo {\n+//~^ ERROR `main` function not found\n     fn bar() {\n         let x = foo();\n         //~^ ERROR cannot find function `foo` in this scope"}, {"sha": "ffe2b3322fc81ebbd236eab4094f996598888b72", "filename": "src/test/ui/parser-recovery-1.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser-recovery-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser-recovery-1.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,8 +1,9 @@\n error: this file contains an un-closed delimiter\n-  --> $DIR/parser-recovery-1.rs:15:55\n+  --> $DIR/parser-recovery-1.rs:16:55\n    |\n LL | trait Foo {\n    |           - un-closed delimiter\n+LL |\n LL |     fn bar() {\n    |              - this delimiter might not be properly closed...\n ...\n@@ -13,26 +14,34 @@ LL | }\n    |                                                       ^\n \n error: unexpected token: `;`\n-  --> $DIR/parser-recovery-1.rs:12:15\n+  --> $DIR/parser-recovery-1.rs:13:15\n    |\n LL |     let x = y.;\n    |               ^\n \n error[E0425]: cannot find function `foo` in this scope\n-  --> $DIR/parser-recovery-1.rs:7:17\n+  --> $DIR/parser-recovery-1.rs:8:17\n    |\n LL |         let x = foo();\n    |                 ^^^ not found in this scope\n \n error[E0425]: cannot find value `y` in this scope\n-  --> $DIR/parser-recovery-1.rs:12:13\n+  --> $DIR/parser-recovery-1.rs:13:13\n    |\n LL |     let x = y.;\n    |             ^ not found in this scope\n \n error[E0601]: `main` function not found in crate `parser_recovery_1`\n+  --> $DIR/parser-recovery-1.rs:5:1\n    |\n-   = note: consider adding a `main` function to `$DIR/parser-recovery-1.rs`\n+LL | / trait Foo {\n+LL | |\n+LL | |     fn bar() {\n+LL | |         let x = foo();\n+...  |\n+LL | |\n+LL | | }\n+   | |______________________________________________________^ consider adding a `main` function to `$DIR/parser-recovery-1.rs`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "a14eb6e32fc91cf9db73893d784fafc43fe3fd23", "filename": "src/test/ui/parser/issue-2354.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-2354.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,4 +1,7 @@\n fn foo() { //~ NOTE un-closed delimiter\n+//~^ ERROR `main` function not found\n+//~^^ NOTE main function must be defined\n+//~^^^ NOTE you have one or more functions\n   match Some(10) {\n   //~^ NOTE this delimiter might not be properly closed...\n       Some(y) => { panic!(); }\n@@ -11,5 +14,5 @@ fn bar() {\n     while (i < 1000) {}\n }\n \n-fn main() {} //~ NOTE here is a function named 'main'\n+fn main() {} //~ NOTE here is a function named `main`\n              //~ ERROR this file contains an un-closed delimiter"}, {"sha": "038e3dcfa40a90c4f53e5b005450e85491cf2336", "filename": "src/test/ui/parser/issue-2354.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-2354.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,8 +1,9 @@\n error: this file contains an un-closed delimiter\n-  --> $DIR/issue-2354.rs:15:66\n+  --> $DIR/issue-2354.rs:18:66\n    |\n LL | fn foo() {\n    |          - un-closed delimiter\n+...\n LL |   match Some(10) {\n    |                  - this delimiter might not be properly closed...\n ...\n@@ -13,13 +14,24 @@ LL |\n    |                                                                  ^\n \n error[E0601]: `main` function not found in crate `issue_2354`\n+  --> $DIR/issue-2354.rs:1:1\n+   |\n+LL | / fn foo() {\n+LL | |\n+LL | |\n+LL | |\n+...  |\n+LL | | fn main() {}\n+LL | |\n+   | |_________________________________________________________________^ the main function must be defined at the crate level (in `$DIR/issue-2354.rs`)\n    |\n-   = note: the main function must be defined at the crate level but you have one or more functions named 'main' that are not defined at the crate level. Either move the definition or attach the `#[main]` attribute to override this behavior.\n-note: here is a function named 'main'\n-  --> $DIR/issue-2354.rs:14:1\n+note: here is a function named `main`\n+  --> $DIR/issue-2354.rs:17:1\n    |\n LL | fn main() {}\n    | ^^^^^^^^^^^^\n+   = note: you have one or more functions named `main` not defined at the crate level\n+   = help: either move the `main` function definitions or attach the `#[main]` attribute to one of them\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d35dafd9a3443b6786151fde77ba5ff4774fccce", "filename": "src/test/ui/parser/lex-bad-char-literals-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -2,3 +2,5 @@\n static c: char =\n     'nope' //~ ERROR: character literal may only contain one codepoint\n ;\n+\n+fn main() {}"}, {"sha": "5653d4ea672af668115e1b484cfa0b927f455683", "filename": "src/test/ui/parser/lex-bad-char-literals-2.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flex-bad-char-literals-2.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -8,10 +8,5 @@ help: if you meant to write a `str` literal, use double quotes\n LL |     \"nope\"\n    |     ^^^^^^\n \n-error[E0601]: `main` function not found in crate `lex_bad_char_literals_2`\n-   |\n-   = note: consider adding a `main` function to `$DIR/lex-bad-char-literals-2.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "818f61b4d2229e74c73749f5aa4048784dd78e3d", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,5 +1,5 @@\n error: incorrect close delimiter: `}`\n-  --> $DIR/unclosed_delim_mod.rs:5:1\n+  --> $DIR/unclosed_delim_mod.rs:7:1\n    |\n LL | pub fn new() -> Result<Value, ()> {\n    |                                   - close delimiter possibly meant for this"}, {"sha": "486e23312819d49cee3a7d2047170e2297fa0af3", "filename": "src/test/ui/parser/unclosed_delim_mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,3 +1,5 @@\n+fn main() {}\n+\n pub struct Value {}\n pub fn new() -> Result<Value, ()> {\n     Ok(Value {"}, {"sha": "fe2d968af0f326ade9450a9bdf21d6f5f69d2420", "filename": "src/test/ui/parser/unclosed_delim_mod.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,5 +1,5 @@\n error: incorrect close delimiter: `}`\n-  --> $DIR/unclosed_delim_mod.rs:5:1\n+  --> $DIR/unclosed_delim_mod.rs:7:1\n    |\n LL | pub fn new() -> Result<Value, ()> {\n    |                                   - close delimiter possibly meant for this\n@@ -9,10 +9,5 @@ LL |     }\n LL | }\n    | ^ incorrect close delimiter\n \n-error[E0601]: `main` function not found in crate `unclosed_delim_mod`\n-   |\n-   = note: consider adding a `main` function to `$DIR/unclosed_delim_mod.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "198ea752881f1779a8a81dd29bb10f1ebfcd7ee6", "filename": "src/test/ui/resolve/visibility-indeterminate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -3,3 +3,5 @@\n foo!(); //~ ERROR cannot find macro `foo!` in this scope\n \n pub(in ::bar) struct Baz {} //~ ERROR cannot determine resolution for the visibility\n+\n+fn main() {}"}, {"sha": "17927a5967dcb7af90afa551fbdddff4fbf52a95", "filename": "src/test/ui/resolve/visibility-indeterminate.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fvisibility-indeterminate.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -10,10 +10,5 @@ error: cannot find macro `foo!` in this scope\n LL | foo!();\n    | ^^^\n \n-error[E0601]: `main` function not found in crate `visibility_indeterminate`\n-   |\n-   = note: consider adding a `main` function to `$DIR/visibility-indeterminate.rs`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "26a52ce60cfd8b1c63d3f755bcf4ef929f102e66", "filename": "src/test/ui/tool-attributes/diagnostic_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,2 +1,3 @@\n #[rustc_diagnostic_item = \"foomp\"] //~ ERROR compiler internal support for linting\n struct Foomp;\n+fn main() {}"}, {"sha": "5432f8dea8606208dd8b623ecf354b6a311d9e2b", "filename": "src/test/ui/tool-attributes/diagnostic_item.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftool-attributes%2Fdiagnostic_item.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -7,11 +7,6 @@ LL | #[rustc_diagnostic_item = \"foomp\"]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n    = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n-error[E0601]: `main` function not found in crate `diagnostic_item`\n-   |\n-   = note: consider adding a `main` function to `$DIR/diagnostic_item.rs`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0601, E0658.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9e96b1cf7b05fccde5812b007d2bb5c96c2bf6a5", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -24,3 +24,5 @@ where\n             .map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n     }\n }\n+\n+fn main() {}"}, {"sha": "b838c06cadee34337f41096d7f76eb248fba24a1", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -1,7 +1,3 @@\n-error[E0601]: `main` function not found in crate `issue_60564`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-60564.rs`\n-\n error: type parameter `E` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-60564.rs:20:49\n    |\n@@ -20,6 +16,5 @@ error: could not find defining uses\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "c21d9f3d97cbb330eb9fbb17a4435be06f40c4e3", "filename": "src/test/ui/type/ascription/issue-34255-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.rs?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -13,3 +13,4 @@ impl Reactor {\n }\n \n // This case isn't currently being handled gracefully, including for completeness.\n+fn main() {}"}, {"sha": "195b393b2f609a7d5fe5ba26551ba53aebc67922", "filename": "src/test/ui/type/ascription/issue-34255-1.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b35ebac96102cd12406d9d87827b0838d129c278/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-34255-1.stderr?ref=b35ebac96102cd12406d9d87827b0838d129c278", "patch": "@@ -14,17 +14,13 @@ LL |         input_cells: Vec::new()\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #42238 <https://github.com/rust-lang/rust/issues/42238>\n \n-error[E0601]: `main` function not found in crate `issue_34255_1`\n-   |\n-   = note: consider adding a `main` function to `$DIR/issue-34255-1.rs`\n-\n error[E0107]: wrong number of type arguments: expected 1, found 0\n   --> $DIR/issue-34255-1.rs:7:22\n    |\n LL |         input_cells: Vec::new()\n    |                      ^^^^^^^^^^ expected 1 type argument\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0107, E0425, E0601.\n+Some errors have detailed explanations: E0107, E0425.\n For more information about an error, try `rustc --explain E0107`."}]}