{"sha": "715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxNWZmYWIxMTZiNGRkZGFkOThjMDg4ZWViMWI1YWQwZGM5YzBiMTY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-11T20:33:55Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-10-11T20:33:55Z"}, "message": "InterpCx: make memory field public", "tree": {"sha": "7b3a353d070f688535428514b050a0726b569721", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b3a353d070f688535428514b050a0726b569721"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "html_url": "https://github.com/rust-lang/rust/commit/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4f7f974b83ce6795f29de13063132b4e211583d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f7f974b83ce6795f29de13063132b4e211583d", "html_url": "https://github.com/rust-lang/rust/commit/d4f7f974b83ce6795f29de13063132b4e211583d"}], "stats": {"total": 23, "additions": 6, "deletions": 17}, "files": [{"sha": "06fdd407951c1f76c6bb3c27ee3426ad52445943", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "patch": "@@ -35,7 +35,7 @@ pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     pub(crate) param_env: ty::ParamEnv<'tcx>,\n \n     /// The virtual memory system.\n-    pub(crate) memory: Memory<'mir, 'tcx, M>,\n+    pub memory: Memory<'mir, 'tcx, M>,\n \n     /// The virtual call stack.\n     pub(crate) stack: Vec<Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>>,\n@@ -211,16 +211,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    #[inline(always)]\n-    pub fn memory(&self) -> &Memory<'mir, 'tcx, M> {\n-        &self.memory\n-    }\n-\n-    #[inline(always)]\n-    pub fn memory_mut(&mut self) -> &mut Memory<'mir, 'tcx, M> {\n-        &mut self.memory\n-    }\n-\n     #[inline(always)]\n     pub fn force_ptr(\n         &self,"}, {"sha": "646d1783c8ec96356a97120f3d379b424a0d6ea2", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "patch": "@@ -73,8 +73,7 @@ fn intern_shallow<'rt, 'mir, 'tcx>(\n     );\n     // remove allocation\n     let tcx = ecx.tcx;\n-    let memory = ecx.memory_mut();\n-    let (kind, mut alloc) = match memory.alloc_map.remove(&alloc_id) {\n+    let (kind, mut alloc) = match ecx.memory.alloc_map.remove(&alloc_id) {\n         Some(entry) => entry,\n         None => {\n             // Pointer not found in local memory map. It is either a pointer to the global\n@@ -332,7 +331,7 @@ pub fn intern_const_alloc_recursive(\n \n     let mut todo: Vec<_> = leftover_allocations.iter().cloned().collect();\n     while let Some(alloc_id) = todo.pop() {\n-        if let Some((_, mut alloc)) = ecx.memory_mut().alloc_map.remove(&alloc_id) {\n+        if let Some((_, mut alloc)) = ecx.memory.alloc_map.remove(&alloc_id) {\n             // We can't call the `intern_shallow` method here, as its logic is tailored to safe\n             // references and a `leftover_allocations` set (where we only have a todo-list here).\n             // So we hand-roll the interning logic here again.\n@@ -350,7 +349,7 @@ pub fn intern_const_alloc_recursive(\n                     todo.push(reloc);\n                 }\n             }\n-        } else if ecx.memory().dead_alloc_map.contains_key(&alloc_id) {\n+        } else if ecx.memory.dead_alloc_map.contains_key(&alloc_id) {\n             // dangling pointer\n             throw_unsup!(ValidationFailure(\"encountered dangling pointer in final constant\".into()))\n         }"}, {"sha": "31a6126b959488d646f8c862752737a98bcc9b0d", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/715ffab116b4dddad98c088eeb1b5ad0dc9c0b16/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=715ffab116b4dddad98c088eeb1b5ad0dc9c0b16", "patch": "@@ -140,12 +140,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                                 .read_immediate(self.eval_operand(len, None)?)\n                                 .expect(\"can't eval len\")\n                                 .to_scalar()?\n-                                .to_bits(self.memory().pointer_size())? as u64;\n+                                .to_bits(self.memory.pointer_size())? as u64;\n                             let index = self\n                                 .read_immediate(self.eval_operand(index, None)?)\n                                 .expect(\"can't eval index\")\n                                 .to_scalar()?\n-                                .to_bits(self.memory().pointer_size())? as u64;\n+                                .to_bits(self.memory.pointer_size())? as u64;\n                             err_panic!(BoundsCheck { len, index })\n                         }\n                         Overflow(op) => err_panic!(Overflow(*op)),"}]}