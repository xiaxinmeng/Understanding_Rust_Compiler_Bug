{"sha": "922dcfdc6950f4d68d3334199de5572eef52b75a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMmRjZmRjNjk1MGY0ZDY4ZDMzMzQxOTlkZTU1NzJlZWY1MmI3NWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-01T02:01:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-01T02:50:51Z"}, "message": "Switch some tuple structs to pub fields\n\nThis commit deals with the fallout of the previous change by making tuples\nstructs have public fields where necessary (now that the fields are private by\ndefault).", "tree": {"sha": "3d23129fa0af77f5c1c5a6e9b3856a3ddfbffcba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d23129fa0af77f5c1c5a6e9b3856a3ddfbffcba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/922dcfdc6950f4d68d3334199de5572eef52b75a", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/922dcfdc6950f4d68d3334199de5572eef52b75a", "html_url": "https://github.com/rust-lang/rust/commit/922dcfdc6950f4d68d3334199de5572eef52b75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/922dcfdc6950f4d68d3334199de5572eef52b75a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "683197975c119e4c03588fa729dee4f87902f534", "url": "https://api.github.com/repos/rust-lang/rust/commits/683197975c119e4c03588fa729dee4f87902f534", "html_url": "https://github.com/rust-lang/rust/commit/683197975c119e4c03588fa729dee4f87902f534"}], "stats": {"total": 104, "additions": 56, "deletions": 48}, "files": [{"sha": "8b609875dbd9e71795c90934a998e5a3d6e8d637", "filename": "src/librand/distributions/exponential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrand%2Fdistributions%2Fexponential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrand%2Fdistributions%2Fexponential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fexponential.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -28,7 +28,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-pub struct Exp1(f64);\n+pub struct Exp1(pub f64);\n \n // This could be done via `-rng.gen::<f64>().ln()` but that is slower.\n impl Rand for Exp1 {"}, {"sha": "85132de41c3cb2bae119363ed8c8be0ffb99d928", "filename": "src/librand/distributions/normal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrand%2Fdistributions%2Fnormal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrand%2Fdistributions%2Fnormal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fnormal.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -27,7 +27,7 @@ use distributions::{ziggurat, ziggurat_tables, Sample, IndependentSample};\n /// Generate Normal Random\n /// Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield\n /// College, Oxford\n-pub struct StandardNormal(f64);\n+pub struct StandardNormal(pub f64);\n \n impl Rand for StandardNormal {\n     fn rand<R:Rng>(rng: &mut R) -> StandardNormal {"}, {"sha": "e75ed1d67a6d03fee4f9a6e4e3453205bad0bb2f", "filename": "src/librand/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -658,7 +658,7 @@ pub fn random<T: Rand>() -> T {\n /// let Open01(val) = random::<Open01<f32>>();\n /// println!(\"f32 from (0,1): {}\", val);\n /// ```\n-pub struct Open01<F>(F);\n+pub struct Open01<F>(pub F);\n \n /// A wrapper for generating floating point numbers uniformly in the\n /// closed interval `[0,1]` (including both endpoints).\n@@ -674,7 +674,7 @@ pub struct Open01<F>(F);\n /// let Closed01(val) = random::<Closed01<f32>>();\n /// println!(\"f32 from [0,1]: {}\", val);\n /// ```\n-pub struct Closed01<F>(F);\n+pub struct Closed01<F>(pub F);\n \n #[cfg(test)]\n mod test {"}, {"sha": "88301967a8cca9e64d0c66965a501fa5c92c378e", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -54,11 +54,11 @@ pub struct Edge<E> {\n }\n \n #[deriving(Eq)]\n-pub struct NodeIndex(uint);\n+pub struct NodeIndex(pub uint);\n pub static InvalidNodeIndex: NodeIndex = NodeIndex(uint::MAX);\n \n #[deriving(Eq)]\n-pub struct EdgeIndex(uint);\n+pub struct EdgeIndex(pub uint);\n pub static InvalidEdgeIndex: EdgeIndex = EdgeIndex(uint::MAX);\n \n // Use a private field here to guarantee no more instances are created:"}, {"sha": "303ad5fbce2ce25283fc13cd4820f60e9121297f", "filename": "src/librustc/middle/trans/basic_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbasic_block.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -12,7 +12,7 @@ use lib::llvm::{llvm, BasicBlockRef};\n use middle::trans::value::{Users, Value};\n use std::iter::{Filter, Map};\n \n-pub struct BasicBlock(BasicBlockRef);\n+pub struct BasicBlock(pub BasicBlockRef);\n \n pub type Preds<'a> = Map<'a, Value, BasicBlock, Filter<'a, Value, Users>>;\n "}, {"sha": "1efb47ad42fb5bc0daa36bf80d640e90b1aca651", "filename": "src/librustc/middle/trans/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fvalue.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -13,7 +13,7 @@ use middle::trans::basic_block::BasicBlock;\n use middle::trans::common::Block;\n use std::libc::c_uint;\n \n-pub struct Value(ValueRef);\n+pub struct Value(pub ValueRef);\n \n macro_rules! opt_val ( ($e:expr) => (\n     unsafe {"}, {"sha": "9a3064268dcb293e999a9b2ca18de991daa2c718", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -869,13 +869,13 @@ impl CLike for BuiltinBound {\n }\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n-pub struct TyVid(uint);\n+pub struct TyVid(pub uint);\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n-pub struct IntVid(uint);\n+pub struct IntVid(pub uint);\n \n #[deriving(Clone, Eq, TotalEq, Hash)]\n-pub struct FloatVid(uint);\n+pub struct FloatVid(pub uint);\n \n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub struct RegionVid {"}, {"sha": "a9a0e4b7b3736e1f831a66680dd6754646c0cff5", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -83,7 +83,7 @@ use syntax::ast;\n // Note: Coerce is not actually a combiner, in that it does not\n // conform to the same interface, though it performs a similar\n // function.\n-pub struct Coerce<'f>(CombineFields<'f>);\n+pub struct Coerce<'f>(pub CombineFields<'f>);\n \n impl<'f> Coerce<'f> {\n     pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> {"}, {"sha": "83fc315bcebc82f1465638f86828c275505eb6d9", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -28,7 +28,7 @@ use collections::HashMap;\n use util::common::{indenter};\n use util::ppaux::mt_to_str;\n \n-pub struct Glb<'f>(CombineFields<'f>);  // \"greatest lower bound\" (common subtype)\n+pub struct Glb<'f>(pub CombineFields<'f>);  // \"greatest lower bound\" (common subtype)\n \n impl<'f> Glb<'f> {\n     pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> { let Glb(ref v) = *self; v }"}, {"sha": "7c302c72014057dcf33b688c00b25862e3c07480", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -27,7 +27,7 @@ use syntax::ast::{ExternFn, ImpureFn, UnsafeFn};\n use syntax::ast::{Onceness, Purity};\n use util::ppaux::mt_to_str;\n \n-pub struct Lub<'f>(CombineFields<'f>);  // least-upper-bound: common supertype\n+pub struct Lub<'f>(pub CombineFields<'f>);  // least-upper-bound: common supertype\n \n impl<'f> Lub<'f> {\n     pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> { let Lub(ref v) = *self; v }"}, {"sha": "b22e6f4677bd72d820234035fac339341ae4b43d", "filename": "src/librustc/middle/typeck/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fsub.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -27,7 +27,7 @@ use util::ppaux::bound_region_to_str;\n \n use syntax::ast::{Onceness, Purity};\n \n-pub struct Sub<'f>(CombineFields<'f>);  // \"subtype\", \"subregion\" etc\n+pub struct Sub<'f>(pub CombineFields<'f>);  // \"subtype\", \"subregion\" etc\n \n impl<'f> Sub<'f> {\n     pub fn get_ref<'a>(&'a self) -> &'a CombineFields<'f> { let Sub(ref v) = *self; v }"}, {"sha": "60fcbe33a1be956e8e6671530e7d1aea5517ec76", "filename": "src/librustdoc/html/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fescape.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -17,7 +17,7 @@ use std::fmt;\n \n /// Wrapper struct which will emit the HTML-escaped version of the contained\n /// string when passed to a format string.\n-pub struct Escape<'a>(&'a str);\n+pub struct Escape<'a>(pub &'a str);\n \n impl<'a> fmt::Show for Escape<'a> {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "10c155262c31e504c2fbddb35fb81c192a070f04", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -28,12 +28,12 @@ use html::render::{cache_key, current_location_key};\n \n /// Helper to render an optional visibility with a space after it (if the\n /// visibility is preset)\n-pub struct VisSpace(Option<ast::Visibility>);\n+pub struct VisSpace(pub Option<ast::Visibility>);\n /// Similarly to VisSpace, this structure is used to render a purity with a\n /// space after it.\n-pub struct PuritySpace(ast::Purity);\n+pub struct PuritySpace(pub ast::Purity);\n /// Wrapper struct for properly emitting a method declaration.\n-pub struct Method<'a>(&'a clean::SelfTy, &'a clean::FnDecl);\n+pub struct Method<'a>(pub &'a clean::SelfTy, pub &'a clean::FnDecl);\n \n impl VisSpace {\n     pub fn get(&self) -> Option<ast::Visibility> {"}, {"sha": "ff2462cfb22ba28f526dc2f3182fc398cebd350a", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -42,10 +42,10 @@ use html::highlight;\n /// A unit struct which has the `fmt::Show` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n-pub struct Markdown<'a>(&'a str);\n+pub struct Markdown<'a>(pub &'a str);\n /// A unit struct like `Markdown`, that renders the markdown with a\n /// table of contents.\n-pub struct MarkdownWithToc<'a>(&'a str);\n+pub struct MarkdownWithToc<'a>(pub &'a str);\n \n static OUTPUT_UNIT: libc::size_t = 64;\n static MKDEXT_NO_INTRA_EMPHASIS: libc::c_uint = 1 << 0;"}, {"sha": "d36452653e3965f6126127a08ae3b9746d25f791", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -58,7 +58,7 @@ pub struct Task {\n }\n \n pub struct GarbageCollector;\n-pub struct LocalStorage(Option<local_data::Map>);\n+pub struct LocalStorage(pub Option<local_data::Map>);\n \n /// A handle to a blocked task. Usually this means having the ~Task pointer by\n /// ownership, but if the task is killable, a killer can steal it at any time."}, {"sha": "a7a314d35e7368bdf62d270b66d38ac72055fcc4", "filename": "src/libstd/unstable/simd.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibstd%2Funstable%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibstd%2Funstable%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsimd.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -14,40 +14,48 @@\n \n #[experimental]\n #[simd]\n-pub struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8);\n+pub struct i8x16(pub i8, pub i8, pub i8, pub i8,\n+                 pub i8, pub i8, pub i8, pub i8,\n+                 pub i8, pub i8, pub i8, pub i8,\n+                 pub i8, pub i8, pub i8, pub i8);\n \n #[experimental]\n #[simd]\n-pub struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+pub struct i16x8(pub i16, pub i16, pub i16, pub i16,\n+                 pub i16, pub i16, pub i16, pub i16);\n \n #[experimental]\n #[simd]\n-pub struct i32x4(i32, i32, i32, i32);\n+pub struct i32x4(pub i32, pub i32, pub i32, pub i32);\n \n #[experimental]\n #[simd]\n-pub struct i64x2(i64, i64);\n+pub struct i64x2(pub i64, pub i64);\n \n #[experimental]\n #[simd]\n-pub struct u8x16(u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8, u8);\n+pub struct u8x16(pub u8, pub u8, pub u8, pub u8,\n+                 pub u8, pub u8, pub u8, pub u8,\n+                 pub u8, pub u8, pub u8, pub u8,\n+                 pub u8, pub u8, pub u8, pub u8);\n \n #[experimental]\n #[simd]\n-pub struct u16x8(u16, u16, u16, u16, u16, u16, u16, u16);\n+pub struct u16x8(pub u16, pub u16, pub u16, pub u16,\n+                 pub u16, pub u16, pub u16, pub u16);\n \n #[experimental]\n #[simd]\n-pub struct u32x4(u32, u32, u32, u32);\n+pub struct u32x4(pub u32, pub u32, pub u32, pub u32);\n \n #[experimental]\n #[simd]\n-pub struct u64x2(u64, u64);\n+pub struct u64x2(pub u64, pub u64);\n \n #[experimental]\n #[simd]\n-pub struct f32x4(f32, f32, f32, f32);\n+pub struct f32x4(pub f32, pub f32, pub f32, pub f32);\n \n #[experimental]\n #[simd]\n-pub struct f64x2(f64, f64);\n+pub struct f64x2(pub f64, pub f64);"}, {"sha": "d380c1aca100c6e1f997b23f3688c5adaa698657", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -66,7 +66,7 @@ impl<'a> Iterator<PathElem> for LinkedPath<'a> {\n \n // HACK(eddyb) move this into libstd (value wrapper for slice::Items).\n #[deriving(Clone)]\n-pub struct Values<'a, T>(slice::Items<'a, T>);\n+pub struct Values<'a, T>(pub slice::Items<'a, T>);\n \n impl<'a, T: Copy> Iterator<T> for Values<'a, T> {\n     fn next(&mut self) -> Option<T> {"}, {"sha": "7cadce547659446734e0078bba547f8a4e4ce135", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -33,13 +33,13 @@ pub trait Pos {\n /// A byte offset. Keep this small (currently 32-bits), as AST contains\n /// a lot of them.\n #[deriving(Clone, Eq, TotalEq, Hash, Ord, Show)]\n-pub struct BytePos(u32);\n+pub struct BytePos(pub u32);\n \n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n #[deriving(Eq, Hash, Ord, Show)]\n-pub struct CharPos(uint);\n+pub struct CharPos(pub uint);\n \n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful"}, {"sha": "c5dc3439f2f8d78ef407b820232c1637e64b9fc1", "filename": "src/test/auxiliary/issue-11508.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue-11508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue-11508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11508.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct Closed01<F>(F);\n+pub struct Closed01<F>(pub F);\n \n pub trait Bar { fn new() -> Self; }\n "}, {"sha": "a8a4c438e67343905d49322a963a57666cfdecf3", "filename": "src/test/auxiliary/issue-11529.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue-11529.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue-11529.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-11529.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct A<'a>(&'a int);\n+pub struct A<'a>(pub &'a int);"}, {"sha": "e197e84442b10d23b7585f61d06ebfe2594ce2de", "filename": "src/test/auxiliary/issue-7899.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue-7899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue-7899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-7899.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct V2<T>(T, T);\n+pub struct V2<T>(pub T, pub T);"}, {"sha": "f0f1af2e3a3da9478255989cfede9ecbc0fc9ba1", "filename": "src/test/auxiliary/issue_10031_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue_10031_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue_10031_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_10031_aux.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct Wrap<A>(A);\n+pub struct Wrap<A>(pub A);"}, {"sha": "5f55476427fe2fd7bdfeed380210e33a26353f03", "filename": "src/test/auxiliary/issue_2472_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2472_b.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-pub struct S(());\n+pub struct S(pub ());\n \n impl S {\n     pub fn foo(&self) { }"}, {"sha": "5afbf4492b30d778a172cc8e838ee892526ded77", "filename": "src/test/auxiliary/lint_stability.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flint_stability.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -161,15 +161,15 @@ pub enum Enum {\n }\n \n #[deprecated]\n-pub struct DeprecatedTupleStruct(int);\n+pub struct DeprecatedTupleStruct(pub int);\n #[experimental]\n-pub struct ExperimentalTupleStruct(int);\n+pub struct ExperimentalTupleStruct(pub int);\n #[unstable]\n-pub struct UnstableTupleStruct(int);\n-pub struct UnmarkedTupleStruct(int);\n+pub struct UnstableTupleStruct(pub int);\n+pub struct UnmarkedTupleStruct(pub int);\n #[stable]\n-pub struct StableTupleStruct(int);\n+pub struct StableTupleStruct(pub int);\n #[frozen]\n-pub struct FrozenTupleStruct(int);\n+pub struct FrozenTupleStruct(pub int);\n #[locked]\n-pub struct LockedTupleStruct(int);\n+pub struct LockedTupleStruct(pub int);"}, {"sha": "60c64842c71468d5af50412fdea491abdcd958b3", "filename": "src/test/auxiliary/newtype_struct_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922dcfdc6950f4d68d3334199de5572eef52b75a/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs?ref=922dcfdc6950f4d68d3334199de5572eef52b75a", "patch": "@@ -10,4 +10,4 @@\n \n #[crate_type=\"lib\"];\n \n-pub struct Au(int);\n+pub struct Au(pub int);"}]}