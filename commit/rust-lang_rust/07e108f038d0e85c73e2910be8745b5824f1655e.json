{"sha": "07e108f038d0e85c73e2910be8745b5824f1655e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZTEwOGYwMzhkMGU4NWM3M2UyOTEwYmU4NzQ1YjU4MjRmMTY1NWU=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-11-17T04:52:30Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2015-11-17T09:19:14Z"}, "message": "Remove 'raw_pointer_derive' lint (#14615)", "tree": {"sha": "a31fd3119eb80fa20f00f66d4cb4feda2be83d6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a31fd3119eb80fa20f00f66d4cb4feda2be83d6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07e108f038d0e85c73e2910be8745b5824f1655e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07e108f038d0e85c73e2910be8745b5824f1655e", "html_url": "https://github.com/rust-lang/rust/commit/07e108f038d0e85c73e2910be8745b5824f1655e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07e108f038d0e85c73e2910be8745b5824f1655e/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c124cd523a157d7fc3c85d84c08c203464a7b30c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c124cd523a157d7fc3c85d84c08c203464a7b30c", "html_url": "https://github.com/rust-lang/rust/commit/c124cd523a157d7fc3c85d84c08c203464a7b30c"}], "stats": {"total": 146, "additions": 0, "deletions": 146}, "files": [{"sha": "a4745ac636de2beb999fb44d488573d63ea3b0ce", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=07e108f038d0e85c73e2910be8745b5824f1655e", "patch": "@@ -63,7 +63,6 @@\n #![doc(test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n \n #![no_core]\n-#![allow(raw_pointer_derive)]\n #![deny(missing_docs)]\n \n #![feature(allow_internal_unstable)]"}, {"sha": "39837862c4e46dca685076544df74c0f9bd9f196", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 86, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=07e108f038d0e85c73e2910be8745b5824f1655e", "patch": "@@ -138,92 +138,6 @@ impl LateLintPass for BoxPointers {\n     }\n }\n \n-declare_lint! {\n-    RAW_POINTER_DERIVE,\n-    Warn,\n-    \"uses of #[derive] with raw pointers are rarely correct\"\n-}\n-\n-struct RawPtrDeriveVisitor<'a, 'tcx: 'a> {\n-    cx: &'a LateContext<'a, 'tcx>\n-}\n-\n-impl<'a, 'tcx, 'v> Visitor<'v> for RawPtrDeriveVisitor<'a, 'tcx> {\n-    fn visit_ty(&mut self, ty: &hir::Ty) {\n-        const MSG: &'static str = \"use of `#[derive]` with a raw pointer\";\n-        if let hir::TyPtr(..) = ty.node {\n-            self.cx.span_lint(RAW_POINTER_DERIVE, ty.span, MSG);\n-        }\n-        visit::walk_ty(self, ty);\n-    }\n-    // explicit override to a no-op to reduce code bloat\n-    fn visit_expr(&mut self, _: &hir::Expr) {}\n-    fn visit_block(&mut self, _: &hir::Block) {}\n-}\n-\n-pub struct RawPointerDerive {\n-    checked_raw_pointers: NodeSet,\n-}\n-\n-impl RawPointerDerive {\n-    pub fn new() -> RawPointerDerive {\n-        RawPointerDerive {\n-            checked_raw_pointers: NodeSet(),\n-        }\n-    }\n-}\n-\n-impl LintPass for RawPointerDerive {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(RAW_POINTER_DERIVE)\n-    }\n-}\n-\n-impl LateLintPass for RawPointerDerive {\n-    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n-        if !attr::contains_name(&item.attrs, \"automatically_derived\") {\n-            return;\n-        }\n-        let did = match item.node {\n-            hir::ItemImpl(_, _, _, ref t_ref_opt, _, _) => {\n-                // Deriving the Copy trait does not cause a warning\n-                if let &Some(ref trait_ref) = t_ref_opt {\n-                    let def_id = cx.tcx.trait_ref_to_def_id(trait_ref);\n-                    if Some(def_id) == cx.tcx.lang_items.copy_trait() {\n-                        return;\n-                    }\n-                }\n-\n-                match cx.tcx.node_id_to_type(item.id).sty {\n-                    ty::TyEnum(def, _) => def.did,\n-                    ty::TyStruct(def, _) => def.did,\n-                    _ => return,\n-                }\n-            }\n-            _ => return,\n-        };\n-        let node_id = if let Some(node_id) = cx.tcx.map.as_local_node_id(did) {\n-            node_id\n-        } else {\n-            return;\n-        };\n-        let item = match cx.tcx.map.find(node_id) {\n-            Some(hir_map::NodeItem(item)) => item,\n-            _ => return,\n-        };\n-        if !self.checked_raw_pointers.insert(item.id) {\n-            return;\n-        }\n-        match item.node {\n-            hir::ItemStruct(..) | hir::ItemEnum(..) => {\n-                let mut visitor = RawPtrDeriveVisitor { cx: cx };\n-                visit::walk_item(&mut visitor, &item);\n-            }\n-            _ => {}\n-        }\n-    }\n-}\n-\n declare_lint! {\n     NON_SHORTHAND_FIELD_PATTERNS,\n     Warn,"}, {"sha": "2613115d805cc4988af051b2dae8edd60aa92dfe", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=07e108f038d0e85c73e2910be8745b5824f1655e", "patch": "@@ -135,7 +135,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n     add_builtin_with_new!(sess,\n                           TypeLimits,\n-                          RawPointerDerive,\n                           MissingDoc,\n                           MissingDebugImplementations,\n                           );\n@@ -152,8 +151,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_late_pass(sess, false, box lint::GatherNodeLevels);\n \n     // Insert temporary renamings for a one-time deprecation\n-    store.register_renamed(\"raw_pointer_deriving\", \"raw_pointer_derive\");\n-\n     store.register_renamed(\"unknown_features\", \"unused_features\");\n \n     store.register_removed(\"unsigned_negation\", \"replaced by negate_unsigned feature gate\");"}, {"sha": "c09048d677e81e3be2b01208bb690dee4f306624", "filename": "src/librustc_llvm/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibrustc_llvm%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07e108f038d0e85c73e2910be8745b5824f1655e/src%2Flibrustc_llvm%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fdiagnostic.rs?ref=07e108f038d0e85c73e2910be8745b5824f1655e", "patch": "@@ -37,7 +37,6 @@ impl OptimizationDiagnosticKind {\n     }\n }\n \n-#[allow(raw_pointer_derive)]\n #[derive(Copy, Clone)]\n pub struct OptimizationDiagnostic {\n     pub kind: OptimizationDiagnosticKind,"}, {"sha": "4320b3e7441524479972fcc6c7bbeb819feb027c", "filename": "src/test/compile-fail/lint-raw-ptr-derive.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c124cd523a157d7fc3c85d84c08c203464a7b30c/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c124cd523a157d7fc3c85d84c08c203464a7b30c/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-derive.rs?ref=c124cd523a157d7fc3c85d84c08c203464a7b30c", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![allow(dead_code)]\n-#![deny(raw_pointer_derive)]\n-\n-#[derive(Clone)]\n-struct Foo {\n-    x: *const isize //~ ERROR use of `#[derive]` with a raw pointer\n-}\n-\n-#[derive(Clone)]\n-struct Bar(*mut isize); //~ ERROR use of `#[derive]` with a raw pointer\n-\n-#[derive(Clone)]\n-enum Baz {\n-    A(*const isize), //~ ERROR use of `#[derive]` with a raw pointer\n-    B { x: *mut isize } //~ ERROR use of `#[derive]` with a raw pointer\n-}\n-\n-#[derive(Clone)]\n-struct Buzz {\n-    x: (*const isize, //~ ERROR use of `#[derive]` with a raw pointer\n-        *const usize) //~ ERROR use of `#[derive]` with a raw pointer\n-}\n-\n-fn main() {}"}, {"sha": "5e2ac61caa216e239291bd01c63eafd014cefd35", "filename": "src/test/run-pass/issue-21296.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c124cd523a157d7fc3c85d84c08c203464a7b30c/src%2Ftest%2Frun-pass%2Fissue-21296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c124cd523a157d7fc3c85d84c08c203464a7b30c/src%2Ftest%2Frun-pass%2Fissue-21296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21296.rs?ref=c124cd523a157d7fc3c85d84c08c203464a7b30c", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// pretty-expanded FIXME #23616\n-\n-#[forbid(raw_pointer_derive)]\n-#[derive(Copy)]\n-struct Test(*const i32);\n-\n-impl Clone for Test {\n-    fn clone(&self) -> Test { *self }\n-}\n-\n-fn main() {}"}]}