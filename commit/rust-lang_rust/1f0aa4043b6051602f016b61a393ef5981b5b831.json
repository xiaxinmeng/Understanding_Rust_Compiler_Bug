{"sha": "1f0aa4043b6051602f016b61a393ef5981b5b831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMGFhNDA0M2I2MDUxNjAyZjAxNmI2MWEzOTNlZjU5ODFiNWI4MzE=", "commit": {"author": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2018-11-19T17:33:02Z"}, "committer": {"name": "Corentin Henry", "email": "corentinhenry@gmail.com", "date": "2019-04-20T09:19:10Z"}, "message": "std::net: add Ipv6Addr::is_unicast_link_local_strict()\n\nRFC 4291 is a little unclear about what is a unicast link local address.\nAccording to section 2.4, the entire fe80::/10 range is reserved for\nthese addresses, but section 2.5.3 defines a stricter format for such\naddresses.\n\nAfter a discussion[0] is has been decided to add a different method for\neach definition, so this commit:\n\n  - renames is_unicast_link_local() into is_unicast_link_local_strict()\n  - relaxed the check in is_unicast_link_local()\n\n[0]: https://github.com/rust-lang/rust/issues/27709#issuecomment-400370706", "tree": {"sha": "bab6ad14c648c432c09abd386fde1ecda6b4e8e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bab6ad14c648c432c09abd386fde1ecda6b4e8e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f0aa4043b6051602f016b61a393ef5981b5b831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0aa4043b6051602f016b61a393ef5981b5b831", "html_url": "https://github.com/rust-lang/rust/commit/1f0aa4043b6051602f016b61a393ef5981b5b831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f0aa4043b6051602f016b61a393ef5981b5b831/comments", "author": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "committer": {"login": "little-dude", "id": 6646324, "node_id": "MDQ6VXNlcjY2NDYzMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6646324?v=4", "gravatar_id": "", "url": "https://api.github.com/users/little-dude", "html_url": "https://github.com/little-dude", "followers_url": "https://api.github.com/users/little-dude/followers", "following_url": "https://api.github.com/users/little-dude/following{/other_user}", "gists_url": "https://api.github.com/users/little-dude/gists{/gist_id}", "starred_url": "https://api.github.com/users/little-dude/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/little-dude/subscriptions", "organizations_url": "https://api.github.com/users/little-dude/orgs", "repos_url": "https://api.github.com/users/little-dude/repos", "events_url": "https://api.github.com/users/little-dude/events{/privacy}", "received_events_url": "https://api.github.com/users/little-dude/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aea18411ed6baf471af0799f8926f105009dfcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aea18411ed6baf471af0799f8926f105009dfcc", "html_url": "https://github.com/rust-lang/rust/commit/5aea18411ed6baf471af0799f8926f105009dfcc"}], "stats": {"total": 102, "additions": 96, "deletions": 6}, "files": [{"sha": "4dd5e2cafbf24b98f0572f40956e0f7e5996ea8a", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 96, "deletions": 6, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/1f0aa4043b6051602f016b61a393ef5981b5b831/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0aa4043b6051602f016b61a393ef5981b5b831/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=1f0aa4043b6051602f016b61a393ef5981b5b831", "patch": "@@ -1027,12 +1027,81 @@ impl Ipv6Addr {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n-    /// Returns [`true`] if the address is unicast and link-local (fe80::/10).\n+    /// Returns [`true`] if the address is a unicast link-local address (`fe80::/64`).\n     ///\n-    /// This property is defined in [IETF RFC 4291].\n+    /// A common mis-conception is to think that \"unicast link-local addresses start with\n+    /// `fe80::`\", but the [IETF RFC 4291] actually defines a stricter format for these addresses:\n     ///\n-    /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n+    /// ```no_rust\n+    /// |   10     |\n+    /// |  bits    |         54 bits         |          64 bits           |\n+    /// +----------+-------------------------+----------------------------+\n+    /// |1111111010|           0             |       interface ID         |\n+    /// +----------+-------------------------+----------------------------+\n+    /// ```\n+    ///\n+    /// This method validates the format defined in the RFC and won't recognize the following\n+    /// addresses such as `fe80:0:0:1::` or `fe81::` as unicast link-local addresses for example.\n+    /// If you need a less strict validation use [`is_unicast_link_local()`] instead.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(ip)]\n+    ///\n+    /// use std::net::Ipv6Addr;\n+    ///\n+    /// fn main() {\n+    ///     let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0, 0, 0, 0);\n+    ///     assert!(ip.is_unicast_link_local_strict());\n+    ///\n+    ///     let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff);\n+    ///     assert!(ip.is_unicast_link_local_strict());\n+    ///\n+    ///     let ip = Ipv6Addr::new(0xfe80, 0, 0, 1, 0, 0, 0, 0);\n+    ///     assert!(!ip.is_unicast_link_local_strict());\n+    ///     assert!(ip.is_unicast_link_local());\n+    ///\n+    ///     let ip = Ipv6Addr::new(0xfe81, 0, 0, 0, 0, 0, 0, 0);\n+    ///     assert!(!ip.is_unicast_link_local_strict());\n+    ///     assert!(ip.is_unicast_link_local());\n+    /// }\n+    /// ```\n+    ///\n+    /// # See also\n+    ///\n+    /// - [IETF RFC 4291 section 2.5.6]\n+    /// - [RFC 4291 errata 4406]\n+    ///\n+    /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [`true`]: ../../std/primitive.bool.html\n+    /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n+    /// [`is_unicast_link_local()`](#method.is_unicast_link_local)\n+    ///\n+    pub fn is_unicast_link_local_strict(&self) -> bool {\n+        (self.segments()[0] & 0xffff) == 0xfe80\n+            && (self.segments()[1] & 0xffff) == 0\n+            && (self.segments()[2] & 0xffff) == 0\n+            && (self.segments()[3] & 0xffff) == 0\n+    }\n+\n+    /// Returns [`true`] if the address is a unicast link-local address (`fe80::/10`).\n+    ///\n+    /// This method returns [`true`] for addresses in the range reserved by [RFC 4291 section 2.4],\n+    /// i.e. addresses with the following format:\n+    ///\n+    /// ```no_rust\n+    /// |   10     |\n+    /// |  bits    |         54 bits         |          64 bits           |\n+    /// +----------+-------------------------+----------------------------+\n+    /// |1111111010|    arbitratry value     |       interface ID         |\n+    /// +----------+-------------------------+----------------------------+\n+    /// ```\n+    ///\n+    /// As a result, this method consider addresses such as `fe80:0:0:1::` or `fe81::` to be\n+    /// unicast link-local addresses, whereas [`is_unicast_link_local_strict()`] does not. If you\n+    /// need a strict validation fully compliant with the RFC, use\n+    /// [`is_unicast_link_local_strict()`].\n     ///\n     /// # Examples\n     ///\n@@ -1042,11 +1111,32 @@ impl Ipv6Addr {\n     /// use std::net::Ipv6Addr;\n     ///\n     /// fn main() {\n-    ///     assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_link_local(),\n-    ///                false);\n-    ///     assert_eq!(Ipv6Addr::new(0xfe8a, 0, 0, 0, 0, 0, 0, 0).is_unicast_link_local(), true);\n+    ///     let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0, 0, 0, 0);\n+    ///     assert!(ip.is_unicast_link_local());\n+    ///\n+    ///     let ip = Ipv6Addr::new(0xfe80, 0, 0, 0, 0xffff, 0xffff, 0xffff, 0xffff);\n+    ///     assert!(ip.is_unicast_link_local());\n+    ///\n+    ///     let ip = Ipv6Addr::new(0xfe80, 0, 0, 1, 0, 0, 0, 0);\n+    ///     assert!(ip.is_unicast_link_local());\n+    ///     assert!(!ip.is_unicast_link_local_strict());\n+    ///\n+    ///     let ip = Ipv6Addr::new(0xfe81, 0, 0, 0, 0, 0, 0, 0);\n+    ///     assert!(ip.is_unicast_link_local());\n+    ///     assert!(!ip.is_unicast_link_local_strict());\n     /// }\n     /// ```\n+    ///\n+    /// # See also\n+    ///\n+    /// - [IETF RFC 4291 section 2.4]\n+    /// - [RFC 4291 errata 4406]\n+    ///\n+    /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n+    /// [`true`]: ../../std/primitive.bool.html\n+    /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n+    /// [`is_unicast_link_local_strict()`](#method.is_unicast_link_local_strict)\n+    ///\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }"}]}