{"sha": "b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZWM0YzRkMTFlZGUwZmJhMzMzYTA0NzRlZDQ3M2RiZTgyYWFjZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-09T13:10:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-09T13:10:31Z"}, "message": "Auto merge of #62233 - matthewjasper:exit-arm-scopes, r=pnkfelix\n\nExit arm scopes\n\nDue to a bug in the HIR CFG construction, borrows for arm scopes were incorrectly leaking into other arms.\nThis PR also includes some drive-by improvements to `-Zunpretty=hir,identified` that would have been helpful while investigating this.\n\nCloses #62107", "tree": {"sha": "8d7016d5e1e8dd502d5901c4b1b0ea7b1d1206fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d7016d5e1e8dd502d5901c4b1b0ea7b1d1206fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "html_url": "https://github.com/rust-lang/rust/commit/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d8ffb5b8bdb3c7d1a59c3f8a7746735b73977be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8ffb5b8bdb3c7d1a59c3f8a7746735b73977be", "html_url": "https://github.com/rust-lang/rust/commit/5d8ffb5b8bdb3c7d1a59c3f8a7746735b73977be"}, {"sha": "de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd", "html_url": "https://github.com/rust-lang/rust/commit/de5c6ec1f4a6bbd8600fda0e7c1574d914ac35bd"}], "stats": {"total": 60, "additions": 43, "deletions": 17}, "files": [{"sha": "ca852fe7622cc1c78f70d12e82b6b7b661a5621a", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "patch": "@@ -371,7 +371,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n         let expr_exit = self.add_ast_node(id, &[]);\n \n         // Keep track of the previous guard expressions\n-        let mut prev_guards = Vec::new();\n+        let mut prev_guard = None;\n+        let match_scope = region::Scope { id, data: region::ScopeData::Node };\n \n         for arm in arms {\n             // Add an exit node for when we've visited all the\n@@ -389,23 +390,23 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                     let guard_start = self.add_dummy_node(&[pat_exit]);\n                     // Visit the guard expression\n                     let guard_exit = match guard {\n-                        hir::Guard::If(ref e) => self.expr(e, guard_start),\n+                        hir::Guard::If(ref e) => (&**e, self.expr(e, guard_start)),\n                     };\n                     // #47295: We used to have very special case code\n                     // here for when a pair of arms are both formed\n                     // solely from constants, and if so, not add these\n                     // edges.  But this was not actually sound without\n                     // other constraints that we stopped enforcing at\n                     // some point.\n-                    while let Some(prev) = prev_guards.pop() {\n-                        self.add_contained_edge(prev, guard_start);\n+                    if let Some((prev_guard, prev_index)) = prev_guard.take() {\n+                        self.add_exiting_edge(prev_guard, prev_index, match_scope, guard_start);\n                     }\n \n                     // Push the guard onto the list of previous guards\n-                    prev_guards.push(guard_exit);\n+                    prev_guard = Some(guard_exit);\n \n                     // Update the exit node for the pattern\n-                    pat_exit = guard_exit;\n+                    pat_exit = guard_exit.1;\n                 }\n \n                 // Add an edge from the exit of this pattern to the"}, {"sha": "6817107635a606cd33e0c8fc0d00a33f1a63c0ff", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "patch": "@@ -27,6 +27,7 @@ pub enum AnnNode<'a> {\n     SubItem(hir::HirId),\n     Expr(&'a hir::Expr),\n     Pat(&'a hir::Pat),\n+    Arm(&'a hir::Arm),\n }\n \n pub enum Nested {\n@@ -1821,6 +1822,7 @@ impl<'a> State<'a> {\n             self.s.space();\n         }\n         self.cbox(indent_unit);\n+        self.ann.pre(self, AnnNode::Arm(arm));\n         self.ibox(0);\n         self.print_outer_attributes(&arm.attrs);\n         let mut first = true;\n@@ -1865,6 +1867,7 @@ impl<'a> State<'a> {\n                 self.s.word(\",\");\n             }\n         }\n+        self.ann.post(self, AnnNode::Arm(arm));\n         self.end() // close enclosing cbox\n     }\n "}, {"sha": "f1f9f3f71e4a3b1ab8d658490a3f6877d9d2c1bc", "filename": "src/librustc_borrowck/dataflow.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc_borrowck%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc_borrowck%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdataflow.rs?ref=b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "patch": "@@ -109,7 +109,8 @@ impl<'tcx, O: DataFlowOperator> pprust::PpAnn for DataFlowContext<'tcx, O> {\n             pprust::AnnNode::Block(blk) => blk.hir_id.local_id,\n             pprust::AnnNode::Item(_) |\n             pprust::AnnNode::SubItem(_) => return,\n-            pprust::AnnNode::Pat(pat) => pat.hir_id.local_id\n+            pprust::AnnNode::Pat(pat) => pat.hir_id.local_id,\n+            pprust::AnnNode::Arm(arm) => arm.hir_id.local_id,\n         };\n \n         if !self.has_bitset_for_local_id(id) {"}, {"sha": "fc55d5ac3559ab30514bb8fd193cb9d3709b0847", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "patch": "@@ -387,28 +387,28 @@ impl<'hir> pprust_hir::PpAnn for IdentifiedAnnotation<'hir> {\n             pprust_hir::AnnNode::Name(_) => {},\n             pprust_hir::AnnNode::Item(item) => {\n                 s.s.space();\n-                s.synth_comment(format!(\"hir_id: {} hir local_id: {}\",\n-                                        item.hir_id, item.hir_id.local_id.as_u32()))\n+                s.synth_comment(format!(\"hir_id: {}\", item.hir_id));\n             }\n             pprust_hir::AnnNode::SubItem(id) => {\n                 s.s.space();\n-                s.synth_comment(id.to_string())\n+                s.synth_comment(id.to_string());\n             }\n             pprust_hir::AnnNode::Block(blk) => {\n                 s.s.space();\n-                s.synth_comment(format!(\"block hir_id: {} hir local_id: {}\",\n-                                        blk.hir_id, blk.hir_id.local_id.as_u32()))\n+                s.synth_comment(format!(\"block hir_id: {}\", blk.hir_id));\n             }\n             pprust_hir::AnnNode::Expr(expr) => {\n                 s.s.space();\n-                s.synth_comment(format!(\"expr hir_id: {} hir local_id: {}\",\n-                                        expr.hir_id, expr.hir_id.local_id.as_u32()));\n-                s.pclose()\n+                s.synth_comment(format!(\"expr hir_id: {}\", expr.hir_id));\n+                s.pclose();\n             }\n             pprust_hir::AnnNode::Pat(pat) => {\n                 s.s.space();\n-                s.synth_comment(format!(\"pat hir_id: {} hir local_id: {}\",\n-                                        pat.hir_id, pat.hir_id.local_id.as_u32()))\n+                s.synth_comment(format!(\"pat hir_id: {}\", pat.hir_id));\n+            }\n+            pprust_hir::AnnNode::Arm(arm) => {\n+                s.s.space();\n+                s.synth_comment(format!(\"arm hir_id: {}\", arm.hir_id));\n             }\n         }\n     }"}, {"sha": "220b2ecf04d389150c91d2594bbcb3eb06c86ed6", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.rs?ref=b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "patch": "@@ -0,0 +1,12 @@\n+fn main() {\n+    let e: i32;\n+    match e {\n+        //~^ ERROR use of possibly uninitialized variable\n+        ref u if true => {}\n+        ref v if true => {\n+            let tx = 0;\n+            &tx;\n+        }\n+        _ => (),\n+    }\n+}"}, {"sha": "9701343d2b1dd15c536b1383ecb681ccddb480b4", "filename": "src/test/ui/borrowck/issue-62107-match-arm-scopes.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8ec4c4d11ede0fba333a0474ed473dbe82aacf1/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-62107-match-arm-scopes.stderr?ref=b8ec4c4d11ede0fba333a0474ed473dbe82aacf1", "patch": "@@ -0,0 +1,9 @@\n+error[E0381]: use of possibly uninitialized variable: `e`\n+  --> $DIR/issue-62107-match-arm-scopes.rs:3:11\n+   |\n+LL |     match e {\n+   |           ^ use of possibly uninitialized `e`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0381`."}]}