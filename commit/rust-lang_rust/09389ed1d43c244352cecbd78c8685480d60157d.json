{"sha": "09389ed1d43c244352cecbd78c8685480d60157d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5Mzg5ZWQxZDQzYzI0NDM1MmNlY2JkNzhjODY4NTQ4MGQ2MDE1N2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T18:18:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T18:18:47Z"}, "message": "Merge #2391\n\n2391: Simplify r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "047d256c33567aa3dfb59e7986f7059bf99ffb6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/047d256c33567aa3dfb59e7986f7059bf99ffb6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09389ed1d43c244352cecbd78c8685480d60157d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2smHCRBK7hj4Ov3rIwAAdHIIAIPXaHfx87KsAB6Yv54xsHD9\nFEjNptkJdRb8yl4eBUqs7OylTO2ts3vX9QG2JyM5XFhuI/5TKxbWiN8DnnbzDPY4\nAGbKCqcWodIeUbSVnQnCt4mrjT7v24+LSBEmjwnNu1WTmhEwHC1CpAbZDBE7s3Wh\nLfBnsNCMZ4M8Cd4AidjhNfNO9qwXr0oq7lLMeQeMUSSYCYQvWDb8j4Zy6Fn1Ys9N\nooquLmewe+yaeb3AvJcCBkB1tUC1psCWH6l+zmI2NHG0whmLtlZt6KdO2jfiD+Ly\nMf/J/J2OF32cIT/wBhWC6wty3PzTMU4ZFTPpBtRdOJFfYGlLE4nPw4/sAPewWyc=\n=ySGy\n-----END PGP SIGNATURE-----\n", "payload": "tree 047d256c33567aa3dfb59e7986f7059bf99ffb6b\nparent 64fc9ac9650afb04a353ba8a18381f0db83cbc82\nparent 191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574619527 +0000\ncommitter GitHub <noreply@github.com> 1574619527 +0000\n\nMerge #2391\n\n2391: Simplify r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09389ed1d43c244352cecbd78c8685480d60157d", "html_url": "https://github.com/rust-lang/rust/commit/09389ed1d43c244352cecbd78c8685480d60157d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09389ed1d43c244352cecbd78c8685480d60157d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64fc9ac9650afb04a353ba8a18381f0db83cbc82", "url": "https://api.github.com/repos/rust-lang/rust/commits/64fc9ac9650afb04a353ba8a18381f0db83cbc82", "html_url": "https://github.com/rust-lang/rust/commit/64fc9ac9650afb04a353ba8a18381f0db83cbc82"}, {"sha": "191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a", "html_url": "https://github.com/rust-lang/rust/commit/191b1d238fd1594ab74b1ab6a17dbe0430fc6b1a"}], "stats": {"total": 112, "additions": 51, "deletions": 61}, "files": [{"sha": "96a5cc8573344203a6b361ba4b639cba9257b780", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=09389ed1d43c244352cecbd78c8685480d60157d", "patch": "@@ -973,6 +973,41 @@ pub struct ImplBlock {\n     pub(crate) id: ImplId,\n }\n \n+impl ImplBlock {\n+    pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n+        db.impl_data(self.id).target_trait.clone()\n+    }\n+\n+    pub fn target_type(&self, db: &impl DefDatabase) -> TypeRef {\n+        db.impl_data(self.id).target_type.clone()\n+    }\n+\n+    pub fn target_ty(&self, db: &impl HirDatabase) -> Ty {\n+        Ty::from_hir(db, &self.id.resolver(db), &self.target_type(db))\n+    }\n+\n+    pub fn target_trait_ref(&self, db: &impl HirDatabase) -> Option<TraitRef> {\n+        let target_ty = self.target_ty(db);\n+        TraitRef::from_hir(db, &self.id.resolver(db), &self.target_trait(db)?, Some(target_ty))\n+    }\n+\n+    pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {\n+        db.impl_data(self.id).items.iter().map(|it| (*it).into()).collect()\n+    }\n+\n+    pub fn is_negative(&self, db: &impl DefDatabase) -> bool {\n+        db.impl_data(self.id).is_negative\n+    }\n+\n+    pub fn module(&self, db: &impl DefDatabase) -> Module {\n+        self.id.module(db).into()\n+    }\n+\n+    pub fn krate(&self, db: &impl DefDatabase) -> Crate {\n+        Crate { crate_id: self.module(db).id.krate }\n+    }\n+}\n+\n /// For IDE only\n pub enum ScopeDef {\n     ModuleDef(ModuleDef),"}, {"sha": "a4e317c203c69cc3cfacbf85abb00be49ea97a8b", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=09389ed1d43c244352cecbd78c8685480d60157d", "patch": "@@ -5,8 +5,8 @@ use hir_expand::either::Either;\n use ra_syntax::ast;\n \n use crate::{\n-    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, Import, MacroDef, Module,\n-    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n+    db::DefDatabase, Const, Enum, EnumVariant, FieldSource, Function, ImplBlock, Import, MacroDef,\n+    Module, ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n pub use hir_expand::Source;\n@@ -108,6 +108,12 @@ impl HasSource for MacroDef {\n         Source { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n     }\n }\n+impl HasSource for ImplBlock {\n+    type Ast = ast::ImplBlock;\n+    fn source(self, db: &impl DefDatabase) -> Source<ast::ImplBlock> {\n+        self.id.source(db)\n+    }\n+}\n impl HasSource for Import {\n     type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n "}, {"sha": "334eeebacd9a9f2428bbb4e670e2d8ae1f3473de", "filename": "crates/ra_hir/src/impl_block.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/64fc9ac9650afb04a353ba8a18381f0db83cbc82/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64fc9ac9650afb04a353ba8a18381f0db83cbc82/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=64fc9ac9650afb04a353ba8a18381f0db83cbc82", "patch": "@@ -1,52 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use hir_def::{resolver::HasResolver, type_ref::TypeRef, AstItemDef};\n-use ra_syntax::ast;\n-\n-use crate::{\n-    db::{AstDatabase, DefDatabase, HirDatabase},\n-    ty::Ty,\n-    AssocItem, Crate, HasSource, ImplBlock, Module, Source, TraitRef,\n-};\n-\n-impl HasSource for ImplBlock {\n-    type Ast = ast::ImplBlock;\n-    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<ast::ImplBlock> {\n-        self.id.source(db)\n-    }\n-}\n-\n-impl ImplBlock {\n-    pub fn target_trait(&self, db: &impl DefDatabase) -> Option<TypeRef> {\n-        db.impl_data(self.id).target_trait.clone()\n-    }\n-\n-    pub fn target_type(&self, db: &impl DefDatabase) -> TypeRef {\n-        db.impl_data(self.id).target_type.clone()\n-    }\n-\n-    pub fn target_ty(&self, db: &impl HirDatabase) -> Ty {\n-        Ty::from_hir(db, &self.id.resolver(db), &self.target_type(db))\n-    }\n-\n-    pub fn target_trait_ref(&self, db: &impl HirDatabase) -> Option<TraitRef> {\n-        let target_ty = self.target_ty(db);\n-        TraitRef::from_hir(db, &self.id.resolver(db), &self.target_trait(db)?, Some(target_ty))\n-    }\n-\n-    pub fn items(&self, db: &impl DefDatabase) -> Vec<AssocItem> {\n-        db.impl_data(self.id).items.iter().map(|it| (*it).into()).collect()\n-    }\n-\n-    pub fn is_negative(&self, db: &impl DefDatabase) -> bool {\n-        db.impl_data(self.id).is_negative\n-    }\n-\n-    pub fn module(&self, db: &impl DefDatabase) -> Module {\n-        self.id.module(db).into()\n-    }\n-\n-    pub fn krate(&self, db: &impl DefDatabase) -> Crate {\n-        Crate { crate_id: self.module(db).id.krate }\n-    }\n-}"}, {"sha": "843ce6a88a20fd00d5d95e6b803ab28db41f982f", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=09389ed1d43c244352cecbd78c8685480d60157d", "patch": "@@ -32,7 +32,6 @@ pub mod db;\n pub mod source_binder;\n \n mod ty;\n-mod impl_block;\n mod expr;\n pub mod diagnostics;\n mod util;"}, {"sha": "625aa39dd04f30a97d0d3476583b8f79769cd496", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=09389ed1d43c244352cecbd78c8685480d60157d", "patch": "@@ -1,4 +1,4 @@\n-//! FIXME: write short doc here\n+//! Name resolution for expressions.\n use std::sync::Arc;\n \n use hir_expand::name::Name;"}, {"sha": "00e866bf9ff97afb5fed1f6eb8479f0f7412106e", "filename": "crates/ra_hir_def/src/per_ns.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fper_ns.rs?ref=09389ed1d43c244352cecbd78c8685480d60157d", "patch": "@@ -1,4 +1,7 @@\n-//! FIXME: write short doc here\n+//! In rust, it is possible to have a value, a type and a macro with the same\n+//! name without conflicts.\n+//!\n+//! `PerNs` (per namespace) captures this.\n \n use hir_expand::MacroDefId;\n "}, {"sha": "1f8887c6ba046d1eed15558fe9887f31f253b488", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09389ed1d43c244352cecbd78c8685480d60157d/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=09389ed1d43c244352cecbd78c8685480d60157d", "patch": "@@ -29,20 +29,20 @@ pub struct Resolver {\n \n // FIXME how to store these best\n #[derive(Debug, Clone)]\n-pub(crate) struct ModuleItemMap {\n+struct ModuleItemMap {\n     crate_def_map: Arc<CrateDefMap>,\n     module_id: LocalModuleId,\n }\n \n #[derive(Debug, Clone)]\n-pub(crate) struct ExprScope {\n+struct ExprScope {\n     owner: DefWithBodyId,\n     expr_scopes: Arc<ExprScopes>,\n     scope_id: ScopeId,\n }\n \n #[derive(Debug, Clone)]\n-pub(crate) enum Scope {\n+enum Scope {\n     /// All the items and imported names of a module\n     ModuleScope(ModuleItemMap),\n     /// Brings the generic parameters of an item into scope"}, {"sha": "fae871285ab6d6ec191d886e672f7955878b9f3e", "filename": "xtask/tests/tidy-tests/docs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09389ed1d43c244352cecbd78c8685480d60157d/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09389ed1d43c244352cecbd78c8685480d60157d/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy-tests%2Fdocs.rs?ref=09389ed1d43c244352cecbd78c8685480d60157d", "patch": "@@ -74,7 +74,6 @@ fn no_docs_comments() {\n         \"ra_db\",\n         \"ra_hir\",\n         \"ra_hir_expand\",\n-        \"ra_hir_def\",\n         \"ra_ide_api\",\n         \"ra_lsp_server\",\n         \"ra_mbe\","}]}