{"sha": "de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlODJhOWJlNjFjYzdmNDhmMWMxYThiNmMwZTk2NzE1ZDVlYzU1YjA=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-07-10T22:52:05Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-07-23T17:45:58Z"}, "message": "Move fail upcall into rust libcore.", "tree": {"sha": "b733766654fe54a9f378237afeeb9a9a85913f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b733766654fe54a9f378237afeeb9a9a85913f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "html_url": "https://github.com/rust-lang/rust/commit/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/comments", "author": null, "committer": null, "parents": [{"sha": "019a41bdb09c612e42717df2ae2148a29361842f", "url": "https://api.github.com/repos/rust-lang/rust/commits/019a41bdb09c612e42717df2ae2148a29361842f", "html_url": "https://github.com/rust-lang/rust/commit/019a41bdb09c612e42717df2ae2148a29361842f"}], "stats": {"total": 166, "additions": 147, "deletions": 19}, "files": [{"sha": "ef88258daec59a9ea30d0e098ff579d092801004", "filename": "src/libcore/core.rc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -41,6 +41,10 @@ export either, option, result, iter;\n export libc, os, io, run, rand, sys, unsafe, logging;\n export arc, comm, task, future, pipes;\n export extfmt;\n+// The test harness links against core, so don't include runtime in tests.\n+// FIXME (#2861): Uncomment this after snapshot gets updated.\n+//#[cfg(notest)]\n+export rt;\n export tuple;\n export to_str, to_bytes;\n export dvec, dvec_iter;\n@@ -206,6 +210,9 @@ mod unsafe;\n // Exported but not part of the public interface\n \n mod extfmt;\n+// The test harness links against core, so don't include runtime in tests.\n+#[cfg(notest)]\n+mod rt;\n \n \n // For internal use, not exported"}, {"sha": "a588aab9b68ecdd343aa1e3c1fa32d728762bbff", "filename": "src/libcore/rt.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Flibcore%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Flibcore%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt.rs?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -0,0 +1,27 @@\n+//! Runtime calls emitted by the compiler.\n+\n+import libc::c_char;\n+import libc::size_t;\n+\n+type rust_task = libc::c_void;\n+\n+extern mod rustrt {\n+    #[rust_stack]\n+    fn rust_upcall_fail(expr: *c_char, file: *c_char, line: size_t);\n+}\n+\n+// FIXME (#2861): This needs both the attribute, and the name prefixed with\n+// 'rt_', otherwise the compiler won't find it. To fix this, see\n+// gather_rust_rtcalls.\n+#[rt(fail)]\n+fn rt_fail(expr: *c_char, file: *c_char, line: size_t) {\n+    rustrt::rust_upcall_fail(expr, file, line);\n+}\n+\n+// Local Variables:\n+// mode: rust;\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:"}, {"sha": "736ee84196579289650ac8f5b6f8ff116703c9fd", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -98,6 +98,16 @@ upcall_fail(char const *expr,\n     UPCALL_SWITCH_STACK(task, &args, upcall_s_fail);\n }\n \n+// FIXME (#2861): Alias used by libcore/rt.rs to avoid naming conflicts with\n+// autogenerated wrappers for upcall_fail. Remove this when we fully move away\n+// away from the C upcall path.\n+extern \"C\" CDECL void\n+rust_upcall_fail(char const *expr,\n+                 char const *file,\n+                 size_t line) {\n+    upcall_fail(expr, file, line);\n+}\n+\n struct s_trace_args {\n     rust_task *task;\n     char const *msg;"}, {"sha": "52aa88e6cb639b41f8a579a91032d166d7f4643a", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -69,10 +69,11 @@ fn build_configuration(sess: session, argv0: ~str, input: input) ->\n     // If the user wants a test runner, then add the test cfg\n     let gen_cfg =\n         {\n-            if sess.opts.test && !attr::contains_name(user_cfg, ~\"test\")\n-               {\n+            if sess.opts.test && !attr::contains_name(user_cfg, ~\"test\") {\n                 ~[attr::mk_word_item(@~\"test\")]\n-            } else { ~[] }\n+            } else {\n+                ~[attr::mk_word_item(@~\"notest\")]\n+            }\n         };\n     ret vec::append(vec::append(user_cfg, gen_cfg), default_cfg);\n }"}, {"sha": "b4f6b57a86bfdbaf7b1b5836554575dc9e6f4d9e", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 92, "deletions": 2, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -37,7 +37,7 @@ import link::{mangle_internal_name_by_type_only,\n               mangle_internal_name_by_path,\n               mangle_internal_name_by_path_and_seq,\n               mangle_exported_name};\n-import metadata::{csearch, cstore, encoder};\n+import metadata::{csearch, cstore, decoder, encoder};\n import metadata::common::link_meta;\n import util::ppaux;\n import util::ppaux::{ty_to_str, ty_to_short_str};\n@@ -3942,11 +3942,25 @@ fn trans_fail_value(bcx: block, sp_opt: option<span>,\n     let V_str = PointerCast(bcx, V_fail_str, T_ptr(T_i8()));\n     let V_filename = PointerCast(bcx, V_filename, T_ptr(T_i8()));\n     let args = ~[V_str, V_filename, C_int(ccx, V_line)];\n-    let bcx = invoke(bcx, bcx.ccx().upcalls._fail, args);\n+    let bcx = trans_rtcall(bcx, ~\"fail\", args);\n     Unreachable(bcx);\n     ret bcx;\n }\n \n+fn trans_rtcall(bcx: block, name: ~str, args: ~[ValueRef]) -> block {\n+    let did = bcx.ccx().rtcalls[name];\n+    let fty = if did.crate == ast::local_crate {\n+        ty::node_id_to_type(bcx.ccx().tcx, did.node)\n+    } else {\n+        csearch::get_type(bcx.ccx().tcx, did).ty\n+    };\n+    let rty = ty::ty_fn_ret(fty);\n+    ret trans_call_inner(\n+        bcx, none, fty, rty,\n+        |bcx| lval_static_fn_inner(bcx, did, 0, ~[], none),\n+        arg_vals(args), ignore);\n+}\n+\n fn trans_break_cont(bcx: block, to_end: bool)\n     -> block {\n     let _icx = bcx.insn_ctxt(~\"trans_break_cont\");\n@@ -5314,6 +5328,79 @@ fn trap(bcx: block) {\n     }\n }\n \n+fn push_rtcall(ccx: @crate_ctxt, name: ~str, did: ast::def_id) {\n+    if ccx.rtcalls.contains_key(name) {\n+        fail #fmt(\"multiple definitions for runtime call %s\", name);\n+    }\n+    ccx.rtcalls.insert(name, did);\n+}\n+\n+fn gather_local_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n+    visit::visit_crate(*crate, (), visit::mk_simple_visitor(@{\n+        visit_item: |item| alt item.node {\n+          ast::item_fn(decl, _, _) {\n+            let attr_metas = attr::attr_metas(\n+                attr::find_attrs_by_name(item.attrs, ~\"rt\"));\n+            do vec::iter(attr_metas) |attr_meta| {\n+                alt attr::get_meta_item_list(attr_meta) {\n+                  some(list) {\n+                    let name = *attr::get_meta_item_name(vec::head(list));\n+                    push_rtcall(ccx, name, {crate: ast::local_crate,\n+                                            node: item.id});\n+                  }\n+                  none {}\n+                }\n+            }\n+          }\n+          _ {}\n+        }\n+        with *visit::default_simple_visitor()\n+    }));\n+}\n+\n+fn gather_external_rtcalls(ccx: @crate_ctxt) {\n+    do cstore::iter_crate_data(ccx.sess.cstore) |_cnum, cmeta| {\n+        do decoder::each_path(cmeta) |path| {\n+            let pathname = path.path_string;\n+            alt path.def_like {\n+              decoder::dl_def(d) {\n+                alt d {\n+                  ast::def_fn(did, _) {\n+                    // FIXME (#2861): This should really iterate attributes\n+                    // like gather_local_rtcalls, but we'll need to\n+                    // export attributes in metadata/encoder before we can do\n+                    // that.\n+                    let sentinel = \"rt::rt_\";\n+                    let slen = str::len(sentinel);\n+                    if str::starts_with(pathname, sentinel) {\n+                        let name = str::substr(pathname,\n+                                               slen, str::len(pathname)-slen);\n+                        push_rtcall(ccx, name, did);\n+                    }\n+                  }\n+                  _ {}\n+                }\n+              }\n+              _ {}\n+            }\n+            true\n+        }\n+    }\n+}\n+\n+fn gather_rtcalls(ccx: @crate_ctxt, crate: @ast::crate) {\n+    gather_local_rtcalls(ccx, crate);\n+    gather_external_rtcalls(ccx);\n+\n+    // FIXME (#2861): Check for other rtcalls too, once they are\n+    // supported. Also probably want to check type signature so we don't crash\n+    // in some obscure place in LLVM if the user provides the wrong signature\n+    // for an rtcall.\n+    if !ccx.rtcalls.contains_key(~\"fail\") {\n+        fail ~\"no definition for runtime call fail\";\n+    }\n+}\n+\n fn create_module_map(ccx: @crate_ctxt) -> ValueRef {\n     let elttype = T_struct(~[ccx.int_type, ccx.int_type]);\n     let maptype = T_array(elttype, ccx.module_data.size() + 1u);\n@@ -5544,6 +5631,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           upcalls:\n               upcall::declare_upcalls(targ_cfg, tn, tydesc_type,\n                                       llmod),\n+          rtcalls: str_hash::<ast::def_id>(),\n           tydesc_type: tydesc_type,\n           int_type: int_type,\n           float_type: float_type,\n@@ -5557,6 +5645,8 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           mut do_not_commit_warning_issued: false};\n \n \n+    gather_rtcalls(ccx, crate);\n+\n     {\n         let _icx = ccx.insn_ctxt(~\"data\");\n         trans_constants(ccx, crate);"}, {"sha": "c002c5a2a43c991e24993204dce2b273d7c9cd16", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -118,6 +118,7 @@ type crate_ctxt = {\n      maps: astencode::maps,\n      stats: stats,\n      upcalls: @upcall::upcalls,\n+     rtcalls: hashmap<~str, ast::def_id>,\n      tydesc_type: TypeRef,\n      int_type: TypeRef,\n      float_type: TypeRef,"}, {"sha": "3f93608e53addf9d8474f678c4baca955287bc80", "filename": "src/test/run-pass/module-polymorphism.rc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rc?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -1,8 +1,5 @@\n-#[no_core];\n-\n-\n #[path = \"module-polymorphism-files\"]\n-mod float {\n+mod my_float {\n \n     // The type of the float\n     import inst::T;\n@@ -18,7 +15,7 @@ mod float {\n }\n \n #[path = \"module-polymorphism-files\"]\n-mod f64 {\n+mod my_f64 {\n \n     import inst::T;\n \n@@ -33,7 +30,7 @@ mod f64 {\n }\n \n #[path = \"module-polymorphism-files\"]\n-mod f32 {\n+mod my_f32 {\n     import inst::T;\n \n     #[path = \"inst_f32.rs\"]"}, {"sha": "26c3582d6a635b55b7b05d5b5454e5d25dfbc416", "filename": "src/test/run-pass/module-polymorphism.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism.rs?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     // All of these functions are defined by a single module\n     // source file but instantiated for different types\n-    assert float::template::plus(1.0f, 2.0f) == 3.0f;\n-    assert f64::template::plus(1.0f64, 2.0f64) == 3.0f64;\n-    assert f32::template::plus(1.0f32, 2.0f32) == 3.0f32;\n+    assert my_float::template::plus(1.0f, 2.0f) == 3.0f;\n+    assert my_f64::template::plus(1.0f64, 2.0f64) == 3.0f64;\n+    assert my_f32::template::plus(1.0f32, 2.0f32) == 3.0f32;\n }\n\\ No newline at end of file"}, {"sha": "bc801bcb4a3f2ebdf4816af63524310dbcf11234", "filename": "src/test/run-pass/module-polymorphism2.rc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism2.rc?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -1,6 +1,3 @@\n-#[no_core];\n-\n-\n #[path = \"module-polymorphism2-files\"]\n mod mystd {\n "}, {"sha": "3ed7be15ff5fa0f7b88e2c2a03e6dc137a199d31", "filename": "src/test/run-pass/module-polymorphism3.rc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "raw_url": "https://github.com/rust-lang/rust/raw/de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmodule-polymorphism3.rc?ref=de82a9be61cc7f48f1c1a8b6c0e96715d5ec55b0", "patch": "@@ -1,5 +1,3 @@\n-#[no_core];\n-\n // Use one template module to specify in a single file the implementation\n // of functions for multiple types\n "}]}