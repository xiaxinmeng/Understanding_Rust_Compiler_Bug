{"sha": "407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwN2JmZmIzM2U1OWRiOWMyZWQwYzBjNWE2NTMzZjJhYjg4NzQzZTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-18T02:51:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-22T21:17:09Z"}, "message": "std: Remove at_exit API. Unused", "tree": {"sha": "6a15d38ef46e3ceb90ddcf4b81e0c42870913550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a15d38ef46e3ceb90ddcf4b81e0c42870913550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "html_url": "https://github.com/rust-lang/rust/commit/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "html_url": "https://github.com/rust-lang/rust/commit/23b7ee2bda12f6518d480c29e9673ed2c592c5f3"}], "stats": {"total": 172, "additions": 0, "deletions": 172}, "files": [{"sha": "20ddf941a7b95d67af79b17eb75777fb7c1e4bc9", "filename": "src/libstd/unstable/at_exit.rs", "status": "removed", "additions": 0, "deletions": 100, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Flibstd%2Funstable%2Fat_exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b7ee2bda12f6518d480c29e9673ed2c592c5f3/src%2Flibstd%2Funstable%2Fat_exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fat_exit.rs?ref=23b7ee2bda12f6518d480c29e9673ed2c592c5f3", "patch": "@@ -1,100 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use cast;\n-use libc::size_t;\n-use rand::RngUtil;\n-use rand;\n-use sys;\n-use task;\n-use vec;\n-\n-#[cfg(test)] use uint;\n-\n-/**\n-Register a function to be run during runtime shutdown.\n-\n-After all non-weak tasks have exited, registered exit functions will\n-execute, in random order, on the primary scheduler. Each function runs\n-in its own unsupervised task.\n-*/\n-pub fn at_exit(f: ~fn()) {\n-    unsafe {\n-        let runner: &fn(*ExitFunctions) = exit_runner;\n-        let runner_pair: sys::Closure = cast::transmute(runner);\n-        let runner_ptr = runner_pair.code;\n-        let runner_ptr = cast::transmute(runner_ptr);\n-        rustrt::rust_register_exit_function(runner_ptr, ~f);\n-    }\n-}\n-\n-// NB: The double pointer indirection here is because ~fn() is a fat\n-// pointer and due to FFI problems I am more comfortable making the\n-// interface use a normal pointer\n-mod rustrt {\n-    use libc::c_void;\n-\n-    extern {\n-        pub fn rust_register_exit_function(runner: *c_void, f: ~~fn());\n-    }\n-}\n-\n-struct ExitFunctions {\n-    // The number of exit functions\n-    count: size_t,\n-    // The buffer of exit functions\n-    start: *~~fn()\n-}\n-\n-fn exit_runner(exit_fns: *ExitFunctions) {\n-    let exit_fns = unsafe { &*exit_fns };\n-    let count = (*exit_fns).count;\n-    let start = (*exit_fns).start;\n-\n-    // NB: from_buf memcpys from the source, which will\n-    // give us ownership of the array of functions\n-    let mut exit_fns_vec = unsafe { vec::from_buf(start, count as uint) };\n-    // Let's not make any promises about execution order\n-    let mut rng = rand::rng();\n-    rng.shuffle_mut(exit_fns_vec);\n-\n-    debug!(\"running %u exit functions\", exit_fns_vec.len());\n-\n-    while !exit_fns_vec.is_empty() {\n-        match exit_fns_vec.pop() {\n-            ~f => {\n-                let mut task = task::task();\n-                task.supervised();\n-                task.spawn(f);\n-            }\n-        }\n-    }\n-}\n-\n-#[test]\n-fn test_at_exit() {\n-    let i = 10;\n-    do at_exit {\n-        debug!(\"at_exit1\");\n-        assert_eq!(i, 10);\n-    }\n-}\n-\n-#[test]\n-fn test_at_exit_many() {\n-    let i = 10;\n-    for uint::range(20, 100) |j| {\n-        do at_exit {\n-            debug!(\"at_exit2\");\n-            assert_eq!(i, 10);\n-            assert!(j > i);\n-        }\n-    }\n-}"}, {"sha": "d6fd2cbcd1e4d7ec175e086c59ee8bf0679bd0f6", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "patch": "@@ -16,8 +16,6 @@ use libc;\n use prelude::*;\n use task;\n \n-pub mod at_exit;\n-\n pub mod dynamic_lib;\n \n pub mod finally;"}, {"sha": "06b09bcedd2d06ff4ead09ef9a08b73c74f8db0a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "patch": "@@ -757,12 +757,6 @@ rust_raw_thread_join_delete(raw_thread *thread) {\n     delete thread;\n }\n \n-extern \"C\" void\n-rust_register_exit_function(spawn_fn runner, fn_env_pair *f) {\n-    rust_task *task = rust_get_current_task();\n-    task->kernel->register_exit_function(runner, f);\n-}\n-\n #ifndef _WIN32\n #include <sys/types.h>\n #include <dirent.h>"}, {"sha": "814cfbb310a79aa3d2c608411d436fab953d3814", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "patch": "@@ -31,8 +31,6 @@ rust_kernel::rust_kernel(rust_env *env) :\n     sched_reaper(this),\n     osmain_driver(NULL),\n     non_weak_tasks(0),\n-    at_exit_runner(NULL),\n-    at_exit_started(false),\n     env(env)\n {\n     // Create the single threaded scheduler that will run on the platform's\n@@ -310,54 +308,9 @@ rust_kernel::begin_shutdown() {\n         }\n     }\n \n-    run_exit_functions();\n     allow_scheduler_exit();\n }\n \n-void\n-rust_kernel::register_exit_function(spawn_fn runner, fn_env_pair *f) {\n-    scoped_lock with(at_exit_lock);\n-\n-    assert(!at_exit_started && \"registering at_exit function after exit\");\n-\n-    if (at_exit_runner) {\n-        // FIXME #2912 Would be very nice to assert this but we can't because\n-        // of the way coretest works (the test case ends up using its own\n-        // function)\n-        //assert(runner == at_exit_runner\n-        //       && \"there can be only one at_exit_runner\");\n-    }\n-\n-    at_exit_runner = runner;\n-    at_exit_fns.push_back(f);\n-}\n-\n-void\n-rust_kernel::run_exit_functions() {\n-    rust_task *task;\n-\n-    {\n-        scoped_lock with(at_exit_lock);\n-\n-        assert(!at_exit_started && \"running exit functions twice?\");\n-\n-        at_exit_started = true;\n-\n-        if (at_exit_runner == NULL) {\n-            return;\n-        }\n-\n-        rust_scheduler *sched = get_scheduler_by_id(main_sched_id());\n-        assert(sched);\n-        task = sched->create_task(NULL, \"at_exit\");\n-\n-        final_exit_fns.count = at_exit_fns.size();\n-        final_exit_fns.start = at_exit_fns.data();\n-    }\n-\n-    task->start(at_exit_runner, NULL, &final_exit_fns);\n-}\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "0fe3f7610403f776c7da2af200e8b5ffd82164c3", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "patch": "@@ -63,13 +63,6 @@ typedef intptr_t rust_task_id;\n \n typedef std::map<rust_sched_id, rust_scheduler*> sched_map;\n \n-// This is defined as a struct only because we need a single pointer to pass\n-// to the Rust function that runs the at_exit functions\n-struct exit_functions {\n-    size_t count;\n-    fn_env_pair **start;\n-};\n-\n class rust_kernel {\n     rust_exchange_alloc exchange_alloc;\n     rust_log _log;\n@@ -114,14 +107,6 @@ class rust_kernel {\n     void allow_scheduler_exit();\n     void begin_shutdown();\n \n-    lock_and_signal at_exit_lock;\n-    spawn_fn at_exit_runner;\n-    bool at_exit_started;\n-    std::vector<fn_env_pair*> at_exit_fns;\n-    exit_functions final_exit_fns;\n-\n-    void run_exit_functions();\n-\n public:\n     struct rust_env *env;\n \n@@ -156,7 +141,6 @@ class rust_kernel {\n     void inc_live_count();\n     void dec_live_count();\n \n-    void register_exit_function(spawn_fn runner, fn_env_pair *f);\n };\n \n template <typename T> struct kernel_owned {"}, {"sha": "db9fe2479526c88fe6181013b73e2fc70bb4ce08", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/407bffb33e59db9c2ed0c0c5a6533f2ab88743e0/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=407bffb33e59db9c2ed0c0c5a6533f2ab88743e0", "patch": "@@ -214,7 +214,6 @@ linenoiseHistorySave\n linenoiseHistoryLoad\n rust_raw_thread_start\n rust_raw_thread_join_delete\n-rust_register_exit_function\n rust_get_rt_tls_key\n swap_registers\n rust_readdir"}]}