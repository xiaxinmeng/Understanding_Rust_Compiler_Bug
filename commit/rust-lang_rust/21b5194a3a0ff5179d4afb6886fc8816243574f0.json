{"sha": "21b5194a3a0ff5179d4afb6886fc8816243574f0", "node_id": "C_kwDOAAsO6NoAKDIxYjUxOTRhM2EwZmY1MTc5ZDRhZmI2ODg2ZmM4ODE2MjQzNTc0ZjA", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-08-31T11:20:59Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-27T18:29:19Z"}, "message": "Rework \"inner attribute not permitted\" errors", "tree": {"sha": "6499d6fb1ff080f3c826fa392318453eebdfd2bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6499d6fb1ff080f3c826fa392318453eebdfd2bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b5194a3a0ff5179d4afb6886fc8816243574f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b5194a3a0ff5179d4afb6886fc8816243574f0", "html_url": "https://github.com/rust-lang/rust/commit/21b5194a3a0ff5179d4afb6886fc8816243574f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b5194a3a0ff5179d4afb6886fc8816243574f0/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d0519a4e75e16afe08ca6da36c65c9b7dfe5cee", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d0519a4e75e16afe08ca6da36c65c9b7dfe5cee", "html_url": "https://github.com/rust-lang/rust/commit/4d0519a4e75e16afe08ca6da36c65c9b7dfe5cee"}], "stats": {"total": 146, "additions": 87, "deletions": 59}, "files": [{"sha": "9773cbe5517eb0fb1609a7fbce1a4137dd9b8c82", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21b5194a3a0ff5179d4afb6886fc8816243574f0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/21b5194a3a0ff5179d4afb6886fc8816243574f0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=21b5194a3a0ff5179d4afb6886fc8816243574f0", "patch": "@@ -262,3 +262,31 @@ parser_suffixed_literal_in_attribute = suffixed literals are not allowed in attr\n     .help = instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n parser_invalid_meta_item = expected unsuffixed literal or identifier, found `{$token}`\n+\n+parser_label_inner_attr_does_not_annotate_this = the inner attribute doesn't annotate this {$item}\n+parser_sugg_change_inner_attr_to_outer = to annotate the {$item}, change the attribute from inner to outer style\n+\n+parser_inner_attr_not_permitted_after_outer_doc_comment = an inner attribute is not permitted following an outer doc comment\n+    .label_attr = not permitted following an outer doc comment\n+    .label_prev_doc_comment = previous doc comment\n+    .label_does_not_annotate_this = {parser_label_inner_attr_does_not_annotate_this}\n+    .sugg_change_inner_to_outer = {parser_sugg_change_inner_attr_to_outer}\n+\n+parser_inner_attr_not_permitted_after_outer_attr = an inner attribute is not permitted following an outer attribute\n+    .label_attr = not permitted following an outer attribute\n+    .label_prev_attr = previous outer attribute\n+    .label_does_not_annotate_this = {parser_label_inner_attr_does_not_annotate_this}\n+    .sugg_change_inner_to_outer = {parser_sugg_change_inner_attr_to_outer}\n+\n+parser_inner_attr_not_permitted = an inner attribute is not permitted in this context\n+    .label_does_not_annotate_this = {parser_label_inner_attr_does_not_annotate_this}\n+    .sugg_change_inner_to_outer = {parser_sugg_change_inner_attr_to_outer}\n+\n+parser_inner_attr_explanation = inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+parser_outer_attr_explanation = outer attributes, like `#[test]`, annotate the item following them\n+\n+parser_inner_doc_comment_not_permitted = expected outer doc comment\n+    .note = inner doc comments like this (starting with `//!` or `/*!`) can only appear before items\n+    .suggestion = you might have meant to write a regular comment\n+    .label_does_not_annotate_this = the inner doc comment doesn't annotate this {$item}\n+    .sugg_change_inner_to_outer = to annotate the {$item}, change the doc comment from inner to outer style"}, {"sha": "ee3f7dbbc398e7e2a1759e10de9ca4952f0c2901", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 51, "deletions": 56, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/21b5194a3a0ff5179d4afb6886fc8816243574f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5194a3a0ff5179d4afb6886fc8816243574f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=21b5194a3a0ff5179d4afb6886fc8816243574f0", "patch": "@@ -5,25 +5,23 @@ use rustc_ast as ast;\n use rustc_ast::attr;\n use rustc_ast::token::{self, Delimiter, Nonterminal};\n use rustc_ast_pretty::pprust;\n-use rustc_errors::{error_code, Diagnostic, IntoDiagnostic, PResult};\n+use rustc_errors::{error_code, fluent, Diagnostic, IntoDiagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n use std::convert::TryInto;\n \n // Public for rustfmt usage\n #[derive(Debug)]\n-pub enum InnerAttrPolicy<'a> {\n+pub enum InnerAttrPolicy {\n     Permitted,\n-    Forbidden { reason: &'a str, saw_doc_comment: bool, prev_outer_attr_sp: Option<Span> },\n+    Forbidden(Option<InnerAttrForbiddenReason>),\n }\n \n-const DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG: &str = \"an inner attribute is not \\\n-                                                     permitted in this context\";\n-\n-pub(super) const DEFAULT_INNER_ATTR_FORBIDDEN: InnerAttrPolicy<'_> = InnerAttrPolicy::Forbidden {\n-    reason: DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG,\n-    saw_doc_comment: false,\n-    prev_outer_attr_sp: None,\n-};\n+#[derive(Clone, Copy, Debug)]\n+pub enum InnerAttrForbiddenReason {\n+    InCodeBlock,\n+    AfterOuterDocComment { prev_doc_comment_span: Span },\n+    AfterOuterAttribute { prev_outer_attr_sp: Span },\n+}\n \n enum OuterAttributeType {\n     DocComment,\n@@ -42,25 +40,23 @@ impl<'a> Parser<'a> {\n                 let prev_outer_attr_sp = outer_attrs.last().map(|attr| attr.span);\n \n                 let inner_error_reason = if just_parsed_doc_comment {\n-                    \"an inner attribute is not permitted following an outer doc comment\"\n-                } else if prev_outer_attr_sp.is_some() {\n-                    \"an inner attribute is not permitted following an outer attribute\"\n+                    Some(InnerAttrForbiddenReason::AfterOuterDocComment {\n+                        prev_doc_comment_span: prev_outer_attr_sp.unwrap(),\n+                    })\n+                } else if let Some(prev_outer_attr_sp) = prev_outer_attr_sp {\n+                    Some(InnerAttrForbiddenReason::AfterOuterAttribute { prev_outer_attr_sp })\n                 } else {\n-                    DEFAULT_UNEXPECTED_INNER_ATTR_ERR_MSG\n-                };\n-                let inner_parse_policy = InnerAttrPolicy::Forbidden {\n-                    reason: inner_error_reason,\n-                    saw_doc_comment: just_parsed_doc_comment,\n-                    prev_outer_attr_sp,\n+                    None\n                 };\n+                let inner_parse_policy = InnerAttrPolicy::Forbidden(inner_error_reason);\n                 just_parsed_doc_comment = false;\n                 Some(self.parse_attribute(inner_parse_policy)?)\n             } else if let token::DocComment(comment_kind, attr_style, data) = self.token.kind {\n                 if attr_style != ast::AttrStyle::Outer {\n                     let span = self.token.span;\n                     let mut err = self.sess.span_diagnostic.struct_span_err_with_code(\n                         span,\n-                        \"expected outer doc comment\",\n+                        fluent::parser::inner_doc_comment_not_permitted,\n                         error_code!(E0753),\n                     );\n                     if let Some(replacement_span) = self.annotate_following_item_if_applicable(\n@@ -71,13 +67,10 @@ impl<'a> Parser<'a> {\n                             token::CommentKind::Block => OuterAttributeType::DocBlockComment,\n                         },\n                     ) {\n-                        err.note(\n-                            \"inner doc comments like this (starting with `//!` or `/*!`) can \\\n-                            only appear before items\",\n-                        );\n+                        err.note(fluent::parser::note);\n                         err.span_suggestion_verbose(\n                             replacement_span,\n-                            \"you might have meant to write a regular comment\",\n+                            fluent::parser::suggestion,\n                             \"\",\n                             rustc_errors::Applicability::MachineApplicable,\n                         );\n@@ -115,7 +108,7 @@ impl<'a> Parser<'a> {\n     // Public for rustfmt usage.\n     pub fn parse_attribute(\n         &mut self,\n-        inner_parse_policy: InnerAttrPolicy<'_>,\n+        inner_parse_policy: InnerAttrPolicy,\n     ) -> PResult<'a, ast::Attribute> {\n         debug!(\n             \"parse_attribute: inner_parse_policy={:?} self.token={:?}\",\n@@ -179,21 +172,12 @@ impl<'a> Parser<'a> {\n             ForceCollect::No,\n         ) {\n             Ok(Some(item)) => {\n-                let attr_name = match attr_type {\n-                    OuterAttributeType::Attribute => \"attribute\",\n-                    _ => \"doc comment\",\n-                };\n-                err.span_label(\n-                    item.span,\n-                    &format!(\"the inner {} doesn't annotate this {}\", attr_name, item.kind.descr()),\n-                );\n+                // FIXME(#100717)\n+                err.set_arg(\"item\", item.kind.descr());\n+                err.span_label(item.span, fluent::parser::label_does_not_annotate_this);\n                 err.span_suggestion_verbose(\n                     replacement_span,\n-                    &format!(\n-                        \"to annotate the {}, change the {} from inner to outer style\",\n-                        item.kind.descr(),\n-                        attr_name\n-                    ),\n+                    fluent::parser::sugg_change_inner_to_outer,\n                     match attr_type {\n                         OuterAttributeType::Attribute => \"\",\n                         OuterAttributeType::DocBlockComment => \"*\",\n@@ -211,22 +195,33 @@ impl<'a> Parser<'a> {\n         Some(replacement_span)\n     }\n \n-    pub(super) fn error_on_forbidden_inner_attr(&self, attr_sp: Span, policy: InnerAttrPolicy<'_>) {\n-        if let InnerAttrPolicy::Forbidden { reason, saw_doc_comment, prev_outer_attr_sp } = policy {\n-            let prev_outer_attr_note =\n-                if saw_doc_comment { \"previous doc comment\" } else { \"previous outer attribute\" };\n-\n-            let mut diag = self.struct_span_err(attr_sp, reason);\n-\n-            if let Some(prev_outer_attr_sp) = prev_outer_attr_sp {\n-                diag.span_label(attr_sp, \"not permitted following an outer attribute\")\n-                    .span_label(prev_outer_attr_sp, prev_outer_attr_note);\n-            }\n+    pub(super) fn error_on_forbidden_inner_attr(&self, attr_sp: Span, policy: InnerAttrPolicy) {\n+        if let InnerAttrPolicy::Forbidden(reason) = policy {\n+            let mut diag = match reason.as_ref().copied() {\n+                Some(InnerAttrForbiddenReason::AfterOuterDocComment { prev_doc_comment_span }) => {\n+                    let mut diag = self.struct_span_err(\n+                        attr_sp,\n+                        fluent::parser::inner_attr_not_permitted_after_outer_doc_comment,\n+                    );\n+                    diag.span_label(attr_sp, fluent::parser::label_attr)\n+                        .span_label(prev_doc_comment_span, fluent::parser::label_prev_doc_comment);\n+                    diag\n+                }\n+                Some(InnerAttrForbiddenReason::AfterOuterAttribute { prev_outer_attr_sp }) => {\n+                    let mut diag = self.struct_span_err(\n+                        attr_sp,\n+                        fluent::parser::inner_attr_not_permitted_after_outer_attr,\n+                    );\n+                    diag.span_label(attr_sp, fluent::parser::label_attr)\n+                        .span_label(prev_outer_attr_sp, fluent::parser::label_prev_attr);\n+                    diag\n+                }\n+                Some(InnerAttrForbiddenReason::InCodeBlock) | None => {\n+                    self.struct_span_err(attr_sp, fluent::parser::inner_attr_not_permitted)\n+                }\n+            };\n \n-            diag.note(\n-                \"inner attributes, like `#![no_std]`, annotate the item enclosing them, and \\\n-                are usually found at the beginning of source files\",\n-            );\n+            diag.note(fluent::parser::inner_attr_explanation);\n             if self\n                 .annotate_following_item_if_applicable(\n                     &mut diag,\n@@ -235,7 +230,7 @@ impl<'a> Parser<'a> {\n                 )\n                 .is_some()\n             {\n-                diag.note(\"outer attributes, like `#[test]`, annotate the item following them\");\n+                diag.note(fluent::parser::outer_attr_explanation);\n             };\n             diag.emit();\n         }"}, {"sha": "a61e77b7c3bfb599b7970b9d0ad210bc25e42c25", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21b5194a3a0ff5179d4afb6886fc8816243574f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b5194a3a0ff5179d4afb6886fc8816243574f0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=21b5194a3a0ff5179d4afb6886fc8816243574f0", "patch": "@@ -1,4 +1,4 @@\n-use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;\n+use super::attr::InnerAttrForbiddenReason;\n use super::diagnostics::AttemptLocalParseRecovery;\n use super::expr::LhsExpr;\n use super::pat::RecoverComma;\n@@ -399,7 +399,12 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_block(&mut self) -> PResult<'a, P<Block>> {\n         let (attrs, block) = self.parse_inner_attrs_and_block()?;\n         if let [.., last] = &*attrs {\n-            self.error_on_forbidden_inner_attr(last.span, DEFAULT_INNER_ATTR_FORBIDDEN);\n+            self.error_on_forbidden_inner_attr(\n+                last.span,\n+                super::attr::InnerAttrPolicy::Forbidden(Some(\n+                    InnerAttrForbiddenReason::InCodeBlock,\n+                )),\n+            );\n         }\n         Ok(block)\n     }"}, {"sha": "3ec3ad8e977a8514dcba72c9abc3288e6ed9f16f", "filename": "src/test/ui/parser/inner-attr-after-doc-comment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21b5194a3a0ff5179d4afb6886fc8816243574f0/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21b5194a3a0ff5179d4afb6886fc8816243574f0/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr?ref=21b5194a3a0ff5179d4afb6886fc8816243574f0", "patch": "@@ -7,7 +7,7 @@ LL | |  */\n    | |___- previous doc comment\n LL |\n LL |   #![recursion_limit=\"100\"]\n-   |   ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n+   |   ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer doc comment\n LL |\n LL |   fn main() {}\n    |   ------------ the inner attribute doesn't annotate this function"}]}