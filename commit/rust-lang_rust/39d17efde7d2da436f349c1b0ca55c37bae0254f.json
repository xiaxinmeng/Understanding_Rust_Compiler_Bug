{"sha": "39d17efde7d2da436f349c1b0ca55c37bae0254f", "node_id": "C_kwDOAAsO6NoAKDM5ZDE3ZWZkZTdkMmRhNDM2ZjM0OWMxYjBjYTU1YzM3YmFlMDI1NGY", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-13T18:29:41Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-08-16T20:37:24Z"}, "message": "feat: Generate static method using Self::assoc() syntax\n\nThis change improves the `generate_function` assist to support generating static methods/associated functions using the `Self::assoc()` syntax. Previously, one could generate a static method, but only when specifying the type name directly (like `Foo::assoc()`). After this change, `Self` is supported as well as the type name.\n\nFixes #13012", "tree": {"sha": "3fbe786bb6c5c34632eb2b10c79ca5f6406ea2ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fbe786bb6c5c34632eb2b10c79ca5f6406ea2ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d17efde7d2da436f349c1b0ca55c37bae0254f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d17efde7d2da436f349c1b0ca55c37bae0254f", "html_url": "https://github.com/rust-lang/rust/commit/39d17efde7d2da436f349c1b0ca55c37bae0254f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d17efde7d2da436f349c1b0ca55c37bae0254f/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa2cccb24023a246d4258b08ff4064c9169e67e", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa2cccb24023a246d4258b08ff4064c9169e67e", "html_url": "https://github.com/rust-lang/rust/commit/baa2cccb24023a246d4258b08ff4064c9169e67e"}], "stats": {"total": 64, "additions": 53, "deletions": 11}, "files": [{"sha": "49345cb983fd5637b499b645dfbad231fe154414", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/39d17efde7d2da436f349c1b0ca55c37bae0254f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d17efde7d2da436f349c1b0ca55c37bae0254f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=39d17efde7d2da436f349c1b0ca55c37bae0254f", "patch": "@@ -61,7 +61,7 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     }\n \n     let fn_name = &*name_ref.text();\n-    let target_module;\n+    let mut target_module = None;\n     let mut adt_name = None;\n \n     let (target, file, insert_offset) = match path.qualifier() {\n@@ -78,16 +78,11 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n                     }\n                 }\n \n-                let current_module = ctx.sema.scope(call.syntax())?.module();\n-                let module = adt.module(ctx.sema.db);\n-                target_module = if current_module == module { None } else { Some(module) };\n-                if current_module.krate() != module.krate() {\n-                    return None;\n-                }\n-                let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n-                let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n-                adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n-                (target, file, insert_offset)\n+                static_method_target(ctx, &call, adt, &mut target_module, fn_name, &mut adt_name)?\n+            }\n+            Some(hir::PathResolution::SelfType(impl_)) => {\n+                let adt = impl_.self_ty(ctx.db()).as_adt()?;\n+                static_method_target(ctx, &call, adt, &mut target_module, fn_name, &mut adt_name)?\n             }\n             _ => {\n                 return None;\n@@ -399,6 +394,26 @@ fn get_method_target(\n     Some((target.clone(), get_insert_offset(&target)))\n }\n \n+fn static_method_target(\n+    ctx: &AssistContext<'_>,\n+    call: &CallExpr,\n+    adt: hir::Adt,\n+    target_module: &mut Option<Module>,\n+    fn_name: &str,\n+    adt_name: &mut Option<hir::Name>,\n+) -> Option<(GeneratedFunctionTarget, FileId, TextSize)> {\n+    let current_module = ctx.sema.scope(call.syntax())?.module();\n+    let module = adt.module(ctx.sema.db);\n+    *target_module = if current_module == module { None } else { Some(module) };\n+    if current_module.krate() != module.krate() {\n+        return None;\n+    }\n+    let (impl_, file) = get_adt_source(ctx, &adt, fn_name)?;\n+    let (target, insert_offset) = get_method_target(ctx, &module, &impl_)?;\n+    *adt_name = if impl_.is_none() { Some(adt.name(ctx.sema.db)) } else { None };\n+    Some((target, file, insert_offset))\n+}\n+\n fn get_insert_offset(target: &GeneratedFunctionTarget) -> TextSize {\n     match &target {\n         GeneratedFunctionTarget::BehindItem(it) => it.text_range().end(),\n@@ -1633,6 +1648,33 @@ fn bar() ${0:-> _} {\n         )\n     }\n \n+    #[test]\n+    fn create_static_method_within_an_impl_with_self_syntax() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+struct S;\n+impl S {\n+    fn foo(&self) {\n+        Self::bar$0();\n+    }\n+}\n+\",\n+            r\"\n+struct S;\n+impl S {\n+    fn foo(&self) {\n+        Self::bar();\n+    }\n+\n+    fn bar() ${0:-> _} {\n+        todo!()\n+    }\n+}\n+\",\n+        )\n+    }\n+\n     #[test]\n     fn no_panic_on_invalid_global_path() {\n         check_assist("}]}