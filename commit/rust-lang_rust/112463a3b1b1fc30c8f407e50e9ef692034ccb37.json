{"sha": "112463a3b1b1fc30c8f407e50e9ef692034ccb37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMjQ2M2EzYjFiMWZjMzBjOGY0MDdlNTBlOWVmNjkyMDM0Y2NiMzc=", "commit": {"author": {"name": "Alan Somers", "email": "asomers@gmail.com", "date": "2016-04-05T03:25:32Z"}, "committer": {"name": "Alan Somers", "email": "asomers@gmail.com", "date": "2016-04-05T03:25:32Z"}, "message": "Reduce code duplication in thread.rs", "tree": {"sha": "675f22d1c5bee1abf76d47bc9235c07a582bf6fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/675f22d1c5bee1abf76d47bc9235c07a582bf6fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/112463a3b1b1fc30c8f407e50e9ef692034ccb37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/112463a3b1b1fc30c8f407e50e9ef692034ccb37", "html_url": "https://github.com/rust-lang/rust/commit/112463a3b1b1fc30c8f407e50e9ef692034ccb37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/112463a3b1b1fc30c8f407e50e9ef692034ccb37/comments", "author": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asomers", "id": 129721, "node_id": "MDQ6VXNlcjEyOTcyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/129721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asomers", "html_url": "https://github.com/asomers", "followers_url": "https://api.github.com/users/asomers/followers", "following_url": "https://api.github.com/users/asomers/following{/other_user}", "gists_url": "https://api.github.com/users/asomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/asomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asomers/subscriptions", "organizations_url": "https://api.github.com/users/asomers/orgs", "repos_url": "https://api.github.com/users/asomers/repos", "events_url": "https://api.github.com/users/asomers/events{/privacy}", "received_events_url": "https://api.github.com/users/asomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc3777c06abced90b415b920082a4814d9051d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc3777c06abced90b415b920082a4814d9051d7", "html_url": "https://github.com/rust-lang/rust/commit/abc3777c06abced90b415b920082a4814d9051d7"}], "stats": {"total": 60, "additions": 18, "deletions": 42}, "files": [{"sha": "4b0201cfd01f1b00fa8061961ab607dedd679205", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 18, "deletions": 42, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/112463a3b1b1fc30c8f407e50e9ef692034ccb37/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/112463a3b1b1fc30c8f407e50e9ef692034ccb37/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=112463a3b1b1fc30c8f407e50e9ef692034ccb37", "patch": "@@ -201,28 +201,17 @@ pub mod guard {\n         current().map(|s| s as *mut libc::c_void)\n     }\n \n-    #[cfg(target_os = \"freebsd\")]\n+    #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n+              target_os = \"linux\", target_os = \"netbsd\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         let mut ret = None;\n         let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n-        if libc::pthread_attr_get_np(libc::pthread_self(), &mut attr) == 0 {\n-            let mut stackaddr = ::ptr::null_mut();\n-            let mut stacksize = 0;\n-            assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n-                                                   &mut stacksize), 0);\n-            ret = Some(stackaddr);\n-        }\n-        assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n-        ret\n-    }\n-\n-    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n-    unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n-        let mut ret = None;\n-        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n-        assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n-        if libc::pthread_getattr_np(libc::pthread_self(), &mut attr) == 0 {\n+        #[cfg(target_os = \"freebsd\")]\n+            let e = libc::pthread_attr_get_np(libc::pthread_self(), &mut attr);\n+        #[cfg(not(target_os = \"freebsd\"))]\n+            let e = libc::pthread_getattr_np(libc::pthread_self(), &mut attr);\n+        if e == 0 {\n             let mut stackaddr = ::ptr::null_mut();\n             let mut stacksize = 0;\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n@@ -304,33 +293,18 @@ pub mod guard {\n         })\n     }\n \n-    #[cfg(target_os = \"freebsd\")]\n-    pub unsafe fn current() -> Option<usize> {\n-        let mut ret = None;\n-        let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n-        assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n-        if libc::pthread_attr_get_np(libc::pthread_self(), &mut attr) == 0 {\n-            let mut guardsize = 0;\n-            assert_eq!(libc::pthread_attr_getguardsize(&attr, &mut guardsize), 0);\n-            if guardsize == 0 {\n-                panic!(\"there is no guard page\");\n-            }\n-            let mut stackaddr = ::ptr::null_mut();\n-            let mut size = 0;\n-            assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n-                                                   &mut size), 0);\n-            ret = Some(stackaddr as usize - guardsize as usize);\n-        }\n-        assert_eq!(libc::pthread_attr_destroy(&mut attr), 0);\n-        ret\n-    }\n-\n-    #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"netbsd\"))]\n+    #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n+              target_os = \"linux\", target_os = \"netbsd\"))]\n     pub unsafe fn current() -> Option<usize> {\n         let mut ret = None;\n         let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n-        if libc::pthread_getattr_np(libc::pthread_self(), &mut attr) == 0 {\n+        #[cfg(target_os = \"freebsd\")]\n+            let e = libc::pthread_attr_get_np(libc::pthread_self(), &mut attr);\n+        #[cfg(not(target_os = \"freebsd\"))]\n+            let e = libc::pthread_getattr_np(libc::pthread_self(), &mut attr);\n+        if e == 0 {\n+        //if libc::pthread_getattr_np(libc::pthread_self(), &mut attr) == 0 {\n             let mut guardsize = 0;\n             assert_eq!(libc::pthread_attr_getguardsize(&attr, &mut guardsize), 0);\n             if guardsize == 0 {\n@@ -341,7 +315,9 @@ pub mod guard {\n             assert_eq!(libc::pthread_attr_getstack(&attr, &mut stackaddr,\n                                                    &mut size), 0);\n \n-            ret = if cfg!(target_os = \"netbsd\") {\n+            ret = if cfg!(target_os = \"freebsd\") {\n+                Some(stackaddr as usize - guardsize as usize)\n+            } else if cfg!(target_os = \"netbsd\") {\n                 Some(stackaddr as usize)\n             } else {\n                 Some(stackaddr as usize + guardsize as usize)"}]}