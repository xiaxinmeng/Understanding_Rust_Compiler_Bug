{"sha": "f632b5e481c060daa5ee37dd382e030bbd3c4dc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MzJiNWU0ODFjMDYwZGFhNWVlMzdkZDM4MmUwMzBiYmQzYzRkYzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T18:40:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-09-17T18:40:28Z"}, "message": "internal: parser cleanups", "tree": {"sha": "12412c43450cd8e75417beaf5554b74445fa2770", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12412c43450cd8e75417beaf5554b74445fa2770"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f632b5e481c060daa5ee37dd382e030bbd3c4dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f632b5e481c060daa5ee37dd382e030bbd3c4dc2", "html_url": "https://github.com/rust-lang/rust/commit/f632b5e481c060daa5ee37dd382e030bbd3c4dc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f632b5e481c060daa5ee37dd382e030bbd3c4dc2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00b19846c9a50a2bd151375eaf22881f665e560d", "url": "https://api.github.com/repos/rust-lang/rust/commits/00b19846c9a50a2bd151375eaf22881f665e560d", "html_url": "https://github.com/rust-lang/rust/commit/00b19846c9a50a2bd151375eaf22881f665e560d"}], "stats": {"total": 73, "additions": 36, "deletions": 37}, "files": [{"sha": "80d7b09b3e1069a99a0b770573d759eb1f7c3896", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f632b5e481c060daa5ee37dd382e030bbd3c4dc2/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f632b5e481c060daa5ee37dd382e030bbd3c4dc2/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=f632b5e481c060daa5ee37dd382e030bbd3c4dc2", "patch": "@@ -12,31 +12,13 @@ pub(super) fn outer_attrs(p: &mut Parser) {\n     }\n }\n \n-pub(super) fn meta(p: &mut Parser) {\n-    let meta = p.start();\n-    paths::use_path(p);\n-\n-    match p.current() {\n-        T![=] => {\n-            p.bump(T![=]);\n-            if expressions::expr(p).0.is_none() {\n-                p.error(\"expected expression\");\n-            }\n-        }\n-        T!['('] | T!['['] | T!['{'] => items::token_tree(p),\n-        _ => {}\n-    }\n-\n-    meta.complete(p, META);\n-}\n-\n fn attr(p: &mut Parser, inner: bool) {\n-    let attr = p.start();\n     assert!(p.at(T![#]));\n+\n+    let attr = p.start();\n     p.bump(T![#]);\n \n     if inner {\n-        assert!(p.at(T![!]));\n         p.bump(T![!]);\n     }\n \n@@ -51,3 +33,21 @@ fn attr(p: &mut Parser, inner: bool) {\n     }\n     attr.complete(p, ATTR);\n }\n+\n+pub(super) fn meta(p: &mut Parser) {\n+    let meta = p.start();\n+    paths::use_path(p);\n+\n+    match p.current() {\n+        T![=] => {\n+            p.bump(T![=]);\n+            if expressions::expr(p).0.is_none() {\n+                p.error(\"expected expression\");\n+            }\n+        }\n+        T!['('] | T!['['] | T!['{'] => items::token_tree(p),\n+        _ => {}\n+    }\n+\n+    meta.complete(p, META);\n+}"}, {"sha": "12e62cddbc0d14221c901c6b140c3531a39b1d33", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f632b5e481c060daa5ee37dd382e030bbd3c4dc2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f632b5e481c060daa5ee37dd382e030bbd3c4dc2/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=f632b5e481c060daa5ee37dd382e030bbd3c4dc2", "patch": "@@ -71,7 +71,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n \n     // test block_items\n     // fn a() { fn b() {} }\n-    let m = match items::maybe_item(p, m) {\n+    let m = match items::opt_item(p, m) {\n         Ok(()) => return,\n         Err(m) => m,\n     };"}, {"sha": "c3ccf6d126dbd129429224f4c9d0bf8fec9e17d6", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f632b5e481c060daa5ee37dd382e030bbd3c4dc2/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f632b5e481c060daa5ee37dd382e030bbd3c4dc2/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=f632b5e481c060daa5ee37dd382e030bbd3c4dc2", "patch": "@@ -44,7 +44,8 @@ pub(super) const ITEM_RECOVERY_SET: TokenSet = TokenSet::new(&[\n pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n     let m = p.start();\n     attributes::outer_attrs(p);\n-    let m = match maybe_item(p, m) {\n+\n+    let m = match opt_item(p, m) {\n         Ok(()) => {\n             if p.at(T![;]) {\n                 p.err_and_bump(\n@@ -56,6 +57,7 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n         }\n         Err(m) => m,\n     };\n+\n     if paths::is_use_path_start(p) {\n         match macro_call(p) {\n             BlockLike::Block => (),\n@@ -64,30 +66,30 @@ pub(super) fn item_or_macro(p: &mut Parser, stop_on_r_curly: bool) {\n             }\n         }\n         m.complete(p, MACRO_CALL);\n-    } else {\n-        m.abandon(p);\n-        if p.at(T!['{']) {\n-            error_block(p, \"expected an item\");\n-        } else if p.at(T!['}']) && !stop_on_r_curly {\n+        return;\n+    }\n+\n+    m.abandon(p);\n+    match p.current() {\n+        T!['{'] => error_block(p, \"expected an item\"),\n+        T!['}'] if !stop_on_r_curly => {\n             let e = p.start();\n             p.error(\"unmatched `}`\");\n             p.bump(T!['}']);\n             e.complete(p, ERROR);\n-        } else if !p.at(EOF) && !p.at(T!['}']) {\n-            p.err_and_bump(\"expected an item\");\n-        } else {\n-            p.error(\"expected an item\");\n         }\n+        EOF | T!['}'] => p.error(\"expected an item\"),\n+        _ => p.err_and_bump(\"expected an item\"),\n     }\n }\n \n /// Try to parse an item, completing `m` in case of success.\n-pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n+pub(super) fn opt_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     // test_err pub_expr\n     // fn foo() { pub 92; }\n     let has_visibility = opt_visibility(p);\n \n-    let m = match items_without_modifiers(p, m) {\n+    let m = match opt_item_without_modifiers(p, m) {\n         Ok(()) => return Ok(()),\n         Err(m) => m,\n     };\n@@ -235,7 +237,7 @@ pub(super) fn maybe_item(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     Ok(())\n }\n \n-fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n+fn opt_item_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n     let la = p.nth(1);\n     match p.current() {\n         // test extern_crate\n@@ -287,10 +289,7 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n }\n \n fn extern_crate(p: &mut Parser, m: Marker) {\n-    assert!(p.at(T![extern]));\n     p.bump(T![extern]);\n-\n-    assert!(p.at(T![crate]));\n     p.bump(T![crate]);\n \n     if p.at(T![self]) {"}]}