{"sha": "94f7511ac242dbdc171be2acefa089e5a9b32562", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Zjc1MTFhYzI0MmRiZGMxNzFiZTJhY2VmYTA4OWU1YTliMzI1NjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-05T00:00:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-05T00:00:21Z"}, "message": "test MIR validation statements in closures", "tree": {"sha": "38d34dae912e702adf176a9cd9910520362ea717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38d34dae912e702adf176a9cd9910520362ea717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94f7511ac242dbdc171be2acefa089e5a9b32562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94f7511ac242dbdc171be2acefa089e5a9b32562", "html_url": "https://github.com/rust-lang/rust/commit/94f7511ac242dbdc171be2acefa089e5a9b32562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94f7511ac242dbdc171be2acefa089e5a9b32562/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d692a91fa69a057d82cf6cb71aa3d50260f9de4a", "html_url": "https://github.com/rust-lang/rust/commit/d692a91fa69a057d82cf6cb71aa3d50260f9de4a"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "677c92ea71b7a78a64241da9c9fe7cd7afe13c39", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/94f7511ac242dbdc171be2acefa089e5a9b32562/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7511ac242dbdc171be2acefa089e5a9b32562/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=94f7511ac242dbdc171be2acefa089e5a9b32562", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=1\n+// compile-flags: -Z verbose -Z mir-emit-validate=1 -Z span_free_formats\n \n struct Test(i32);\n \n@@ -20,16 +20,13 @@ impl Test {\n \n fn main() {\n     let mut x = 0;\n-    Test(0).foo(&mut x);\n+    Test(0).foo(&mut x); // just making sure we do not panic when there is a tuple struct ctor\n \n     // Also test closures\n     let c = |x: &mut i32| { let y = &*x; *y };\n     c(&mut x);\n }\n \n-// FIXME: Also test code generated inside the closure, make sure it has validation.  Unfortunately,\n-// the interesting lines of code also contain name of the source file, so we cannot test for it.\n-\n // END RUST SOURCE\n // START rustc.node12.EraseRegions.after.mir\n //     bb0: {\n@@ -57,3 +54,24 @@ fn main() {\n //     }\n // }\n // END rustc.node23.EraseRegions.after.mir\n+// START rustc.node50.EraseRegions.after.mir\n+// fn main::{{closure}}(_1: &ReErased [closure@NodeId(50)], _2: &ReErased mut i32) -> i32 {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_1/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(50)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_1/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         StorageLive(_3);\n+//         _3 = _2;\n+//         StorageLive(_4);\n+//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: NodeId(41), first_statement_index: 0 }))), [(*_3): i32]);\n+//         _4 = &ReErased (*_3);\n+//         Validate(Acquire, [(*_4): i32/ReScope(Remainder(BlockRemainder { block: NodeId(41), first_statement_index: 0 })) (imm)]);\n+//         StorageLive(_5);\n+//         _5 = (*_4);\n+//         _0 = _5;\n+//         StorageDead(_5);\n+//         StorageDead(_4);\n+//         EndRegion(ReScope(Remainder(BlockRemainder { block: NodeId(41), first_statement_index: 0 })));\n+//         StorageDead(_3);\n+//         return;\n+//     }\n+// }\n+// END rustc.node50.EraseRegions.after.mir"}, {"sha": "2ee459d6809c55d771eccf02872a0631b5f5286f", "filename": "src/test/mir-opt/validate_4.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/94f7511ac242dbdc171be2acefa089e5a9b32562/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7511ac242dbdc171be2acefa089e5a9b32562/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_4.rs?ref=94f7511ac242dbdc171be2acefa089e5a9b32562", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=1\n+// compile-flags: -Z verbose -Z mir-emit-validate=1 -Z span_free_formats\n \n // Make sure unsafe fns and fns with an unsafe block only get restricted validation.\n \n@@ -45,6 +45,19 @@ fn main() {\n //     }\n // }\n // END rustc.node4.EraseRegions.after.mir\n+// START rustc.node22.EraseRegions.after.mir\n+// fn write_42::{{closure}}(_1: &ReErased [closure@NodeId(22)], _2: *mut i32) -> () {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483659) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483659) => validate_4/8cd878b::write_42[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(22)], _2: *mut i32]);\n+//         StorageLive(_3);\n+//         _3 = _2;\n+//         (*_3) = const 23i32;\n+//         StorageDead(_3);\n+//         return;\n+//     }\n+// }\n+// END rustc.node22.EraseRegions.after.mir\n // START rustc.node31.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n //     bb0: {\n@@ -58,3 +71,13 @@ fn main() {\n //     }\n // }\n // END rustc.node31.EraseRegions.after.mir\n+// START rustc.node60.EraseRegions.after.mir\n+// fn main::{{closure}}(_1: &ReErased [closure@NodeId(60)], _2: &ReErased mut i32) -> bool {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         Validate(Release, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(60)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483663) => validate_4/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         StorageLive(_3);\n+//         _0 = const write_42(_4) -> bb1;\n+//     }\n+// }\n+// END rustc.node60.EraseRegions.after.mir"}, {"sha": "150aa2baf2d31233e9500ec3d71901c178114547", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/94f7511ac242dbdc171be2acefa089e5a9b32562/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94f7511ac242dbdc171be2acefa089e5a9b32562/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=94f7511ac242dbdc171be2acefa089e5a9b32562", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n // ignore-tidy-linelength\n-// compile-flags: -Z verbose -Z mir-emit-validate=2\n+// compile-flags: -Z verbose -Z mir-emit-validate=2 -Z span_free_formats\n \n-// Make sure unsafe fns and fns with an unsafe block only get full validation.\n+// Make sure unsafe fns and fns with an unsafe block still get full validation.\n \n unsafe fn write_42(x: *mut i32) -> bool {\n     *x = 42;\n@@ -29,9 +29,6 @@ fn main() {\n     test_closure(&mut 0);\n }\n \n-// FIXME: Also test code generated inside the closure, make sure it has validation.  Unfortunately,\n-// the interesting lines of code also contain name of the source file, so we cannot test for it.\n-\n // END RUST SOURCE\n // START rustc.node17.EraseRegions.after.mir\n // fn test(_1: &ReErased mut i32) -> () {\n@@ -42,3 +39,22 @@ fn main() {\n //     }\n // }\n // END rustc.node17.EraseRegions.after.mir\n+// START rustc.node46.EraseRegions.after.mir\n+// fn main::{{closure}}(_1: &ReErased [closure@NodeId(46)], _2: &ReErased mut i32) -> bool {\n+//     bb0: {\n+//         Validate(Acquire, [_1: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483660) => validate_5/8cd878b::main[0]::{{closure}}[0] }, \"BrEnv\") [closure@NodeId(46)], _2: &ReFree(DefId { krate: CrateNum(0), node: DefIndex(2147483660) => validate_5/8cd878b::main[0]::{{closure}}[0] }, BrAnon(1)) mut i32]);\n+//         StorageLive(_3);\n+//         _3 = _2;\n+//         StorageLive(_4);\n+//         StorageLive(_5);\n+//         Validate(Suspend(ReScope(Misc(NodeId(44)))), [(*_3): i32]);\n+//         _5 = &ReErased mut (*_3);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Misc(NodeId(44)))]);\n+//         _4 = _5 as *mut i32 (Misc);\n+//         StorageDead(_5);\n+//         EndRegion(ReScope(Misc(NodeId(44))));\n+//         Validate(Release, [_0: bool, _4: *mut i32]);\n+//         _0 = const write_42(_4) -> bb1;\n+//     }\n+// }\n+// END rustc.node46.EraseRegions.after.mir"}]}