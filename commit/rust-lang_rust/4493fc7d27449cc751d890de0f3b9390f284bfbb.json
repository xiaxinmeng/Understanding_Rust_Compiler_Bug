{"sha": "4493fc7d27449cc751d890de0f3b9390f284bfbb", "node_id": "C_kwDOAAsO6NoAKDQ0OTNmYzdkMjc0NDljYzc1MWQ4OTBkZTBmM2I5MzkwZjI4NGJmYmI", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T23:23:55Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-17T23:23:55Z"}, "message": "refactor: use pattern matching for MethodCall arguments\n\nCo-authored-by: xFrednet <xFrednet@gmail.com>", "tree": {"sha": "27fbd22e9f6b9029883ea630d1e231a57e14d32b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27fbd22e9f6b9029883ea630d1e231a57e14d32b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4493fc7d27449cc751d890de0f3b9390f284bfbb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEhJzmO046LuvaNO3WIPoWCbA7HW0FAmIzwwsACgkQIPoWCbA7\nHW0scBAAy9Blk02R2lSOm2G1S7QWTfCJA8qG+pUAErnFqo/oCd2I5LW1oTGI3t03\n9Dt8H6mcBhWNtsDG7bOWyG86zszYPUhLD9N0quTxMdIycZdNz3ZnBcfhlqrc/ylL\n2ryW04Iri40W/aZVEpSUVoAF+bZUMIhRd4o7lgR6BZt7IMwuWuC9+Ew4gSRS6Mdd\nUhChmaGo9Vs/psWSu1AyvvcFCLl9HYaXYgVHeV8xwPtxag9stFPcRjes7WZFsNvo\nQGCKceofyVo7zwlp8Mz2JerkkzfJSc/Zyo4cDAAcCg9eBHsJUGsY/3waSe2pfTFm\nS60XjOsd2/G2pPsja29S2TeHuagXKAlpSd/UNMGqkHoDkiSZ/dbKzcg3taizgLeQ\nUJ93+2/fBnr3MpffU0UisFUaC86a81Cg1CD4fzQLj0D672O6lWVKINKFfJm6R28c\niz/YNDOq9S5aardbadB7wyGkPYS113uDEqiES7FMHHuzO/bxaBDJHnUJ3hCXuDnU\nf88+E5GuouiQUtWPD0oOOtpbuoau55ebz30LNSz9sUpkZcT0OWZNRYRN9SiEc/Y/\nhBnCj5i7l8SrurvMCpoBGg3l8aXqd/trK+Q0udYiFsiD3C3aN/MyYEnrcJYPTo2m\nEOFh4T6I7bngKgZ08kdiMJzpbKS3AcRygtzDlvX0jWqOzgAbbkE=\n=2uE6\n-----END PGP SIGNATURE-----", "payload": "tree 27fbd22e9f6b9029883ea630d1e231a57e14d32b\nparent c22ff6cd6e9dd19b31f85b9464a986023d732944\nauthor Max Baumann <max@bmn.dev> 1647559435 +0100\ncommitter Max Baumann <max@bmn.dev> 1647559435 +0100\n\nrefactor: use pattern matching for MethodCall arguments\n\nCo-authored-by: xFrednet <xFrednet@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4493fc7d27449cc751d890de0f3b9390f284bfbb", "html_url": "https://github.com/rust-lang/rust/commit/4493fc7d27449cc751d890de0f3b9390f284bfbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4493fc7d27449cc751d890de0f3b9390f284bfbb/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c22ff6cd6e9dd19b31f85b9464a986023d732944", "url": "https://api.github.com/repos/rust-lang/rust/commits/c22ff6cd6e9dd19b31f85b9464a986023d732944", "html_url": "https://github.com/rust-lang/rust/commit/c22ff6cd6e9dd19b31f85b9464a986023d732944"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "bb777b08d8bf9af81ae5812fb178a7ce50351342", "filename": "clippy_lints/src/use_unwrap_or.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4493fc7d27449cc751d890de0f3b9390f284bfbb/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4493fc7d27449cc751d890de0f3b9390f284bfbb/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_unwrap_or.rs?ref=4493fc7d27449cc751d890de0f3b9390f284bfbb", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{sym, Span};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -47,25 +47,22 @@ impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // look for x.or().unwrap()\n         if_chain! {\n-            if let ExprKind::MethodCall(path, args, unwrap_span) = expr.kind;\n+            if let ExprKind::MethodCall(path, [unwrap_self], unwrap_span) = expr.kind;\n             if path.ident.name == sym::unwrap;\n-            if let Some(caller) = args.first();\n-            if let ExprKind::MethodCall(caller_path, caller_args, or_span) = caller.kind;\n+            if let ExprKind::MethodCall(caller_path, [or_self, or_arg], or_span) = unwrap_self.kind;\n             if caller_path.ident.name == sym::or;\n             then {\n-                let ty = cx.typeck_results().expr_ty(&caller_args[0]); // get type of x (we later check if it's Option or Result)\n+                let ty = cx.typeck_results().expr_ty(&or_self); // get type of x (we later check if it's Option or Result)\n                 let title;\n-                let arg = &caller_args[1]; // the argument or(xyz) is called with\n \n                 if is_type_diagnostic_item(cx, ty, sym::Option) {\n                     title = \".or(Some(\u2026)).unwrap() found\";\n-                    if !is(arg, \"Some\") {\n+                    if !is(or_arg, \"Some\") {\n                         return;\n                     }\n-\n                 } else if is_type_diagnostic_item(cx, ty, sym::Result) {\n                     title = \".or(Ok(\u2026)).unwrap() found\";\n-                    if !is(arg, \"Ok\") {\n+                    if !is(or_arg, \"Ok\") {\n                         return;\n                     }\n                 } else {\n@@ -74,13 +71,10 @@ impl<'tcx> LateLintPass<'tcx> for UseUnwrapOr {\n                     return;\n                 }\n \n-                // span = or_span + unwrap_span\n-                let span = Span::new(or_span.lo(), unwrap_span.hi(), or_span.ctxt(), or_span.parent());\n-\n                 span_lint_and_help(\n                     cx,\n                     USE_UNWRAP_OR,\n-                    span,\n+                    or_span.to(unwrap_span),\n                     title,\n                     None,\n                     \"use `unwrap_or()` instead\""}]}