{"sha": "a87590e34e18646aee82771471649761d9acf02f", "node_id": "C_kwDOAAsO6NoAKGE4NzU5MGUzNGUxODY0NmFlZTgyNzcxNDcxNjQ5NzYxZDlhY2YwMmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-19T01:01:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-19T01:01:59Z"}, "message": "Rollup merge of #92612 - atopia:update-lib-l4re, r=dtolnay\n\nUpdate stdlib for the l4re target\n\nThis PR contains the work by ``@humenda`` and myself to update standard library support for the x86_64-unknown-l4re-uclibc tier 3 target, split out from  humenda/rust as requested in #85967. The changes have been rebased on current master and updated in follow up commits by myself. The publishing of the changes is authorized and preferred by the original author. To preserve attribution, when standard library changes were introduced as part of other changes to the compiler, I have kept the changes concerning the standard library and altered the commit messages as indicated. Any incompatibilities have been remedied in follow up commits, so that the PR as a whole should result in a clean update of the target.", "tree": {"sha": "af34289808188ce7912bc09ce18c85afcd0e7c70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af34289808188ce7912bc09ce18c85afcd0e7c70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a87590e34e18646aee82771471649761d9acf02f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiNSuICRBK7hj4Ov3rIwAAmB0IAFg9Yk+sB9QnJggv9zEpW+E8\nbxjAmVQ5sGesHZUTkUYtXZi8p53WbCzhuV4B0afvt9MSJGXy409S5T7DTQtlwDEt\n7nHWRzp86KG/zBQ1opZiRI83FiTpEQ+h+6FnPAdg1JIHc7h/3SQBLq8ntrnodhg+\n6mAY1nqWSEiixvUhv7c8PA2ULwbKhxDC/ai70XWK93TkQ690LYIJi9ZVx1tAqNjx\n7l9OvfqizHLqW0Cdyryc7w4RZjpj2JOOt9RqC2l3ud8qLm5dR3G7Yo4kRxAdF4Dh\nkP0/DsZyX5BjirUW19kPocgrk5KhH8nzOBCuWnfa69x8Atw4O0kh8uDP3omRBrA=\n=G92F\n-----END PGP SIGNATURE-----\n", "payload": "tree af34289808188ce7912bc09ce18c85afcd0e7c70\nparent ba2d5ede70ed7e37d7f13a397b9d554e2386a19c\nparent bc199b57784ec60bc9492c1a046c585af7ee8ea4\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1647651719 +0100\ncommitter GitHub <noreply@github.com> 1647651719 +0100\n\nRollup merge of #92612 - atopia:update-lib-l4re, r=dtolnay\n\nUpdate stdlib for the l4re target\n\nThis PR contains the work by ``@humenda`` and myself to update standard library support for the x86_64-unknown-l4re-uclibc tier 3 target, split out from  humenda/rust as requested in #85967. The changes have been rebased on current master and updated in follow up commits by myself. The publishing of the changes is authorized and preferred by the original author. To preserve attribution, when standard library changes were introduced as part of other changes to the compiler, I have kept the changes concerning the standard library and altered the commit messages as indicated. Any incompatibilities have been remedied in follow up commits, so that the PR as a whole should result in a clean update of the target.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a87590e34e18646aee82771471649761d9acf02f", "html_url": "https://github.com/rust-lang/rust/commit/a87590e34e18646aee82771471649761d9acf02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a87590e34e18646aee82771471649761d9acf02f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c", "html_url": "https://github.com/rust-lang/rust/commit/ba2d5ede70ed7e37d7f13a397b9d554e2386a19c"}, {"sha": "bc199b57784ec60bc9492c1a046c585af7ee8ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc199b57784ec60bc9492c1a046c585af7ee8ea4", "html_url": "https://github.com/rust-lang/rust/commit/bc199b57784ec60bc9492c1a046c585af7ee8ea4"}], "stats": {"total": 826, "additions": 809, "deletions": 17}, "files": [{"sha": "b9b6918292fae7d75f0974b3668e1bed9bd27a24", "filename": "library/std/src/os/l4re/fs.rs", "status": "added", "additions": 382, "deletions": 0, "changes": 382, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Ffs.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -0,0 +1,382 @@\n+//! L4Re-specific extensions to primitives in the [`std::fs`] module.\n+//!\n+//! [`std::fs`]: crate::fs\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use crate::fs::Metadata;\n+use crate::sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use crate::os::l4re::raw;\n+\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: crate::fs::Metadata\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned [`stat`] are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    ///\n+    /// [`stat`]: struct@crate::os::linux::raw::stat\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     let stat = meta.as_raw_stat();\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\", reason = \"other methods of this trait are now preferred\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    /// Returns the device ID on which this file resides.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_dev());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    /// Returns the inode number.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ino());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    /// Returns the file type and mode.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mode());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    /// Returns the number of hard links to file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_nlink());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    /// Returns the user ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_uid());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    /// Returns the group ID of the file owner.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_gid());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    /// Returns the device ID that this file represents. Only relevant for special file.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_rdev());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    /// Returns the size of the file (if it is a regular file or a symbolic link) in bytes.\n+    ///\n+    /// The size of a symbolic link is the length of the pathname it contains,\n+    /// without a terminating null byte.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_size());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    /// Returns the last access time of the file, in seconds since Unix Epoch.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_atime());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    /// Returns the last access time of the file, in nanoseconds since [`st_atime`].\n+    ///\n+    /// [`st_atime`]: Self::st_atime\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_atime_nsec());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    /// Returns the last modification time of the file, in seconds since Unix Epoch.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mtime());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    /// Returns the last modification time of the file, in nanoseconds since [`st_mtime`].\n+    ///\n+    /// [`st_mtime`]: Self::st_mtime\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_mtime_nsec());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    /// Returns the last status change time of the file, in seconds since Unix Epoch.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ctime());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    /// Returns the last status change time of the file, in nanoseconds since [`st_ctime`].\n+    ///\n+    /// [`st_ctime`]: Self::st_ctime\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_ctime_nsec());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    /// Returns the \"preferred\" block size for efficient filesystem I/O.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_blksize());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    /// Returns the number of blocks allocated to the file, 512-byte units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::fs;\n+    /// use std::io;\n+    /// use std::os::linux::fs::MetadataExt;\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let meta = fs::metadata(\"some_file\")?;\n+    ///     println!(\"{}\", meta.st_blocks());\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe { &*(self.as_inner().as_inner() as *const libc::stat64 as *const raw::stat) }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "14c2425c165179ee66c4a8439605f27cb546ff38", "filename": "library/std/src/os/l4re/mod.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fmod.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -0,0 +1,7 @@\n+//! L4Re-specific definitions.\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![doc(cfg(target_os = \"l4re\"))]\n+\n+pub mod fs;\n+pub mod raw;"}, {"sha": "5efd6301fc92b2d411115f61ec59fdf271dfa4fa", "filename": "library/std/src/os/l4re/raw.rs", "status": "added", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fl4re%2Fraw.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -0,0 +1,365 @@\n+//! L4Re-specific raw type definitions.\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+#![rustc_deprecated(\n+    since = \"1.8.0\",\n+    reason = \"these type aliases are no longer supported by \\\n+              the standard library, the `libc` crate on \\\n+              crates.io should be used instead for the correct \\\n+              definitions\"\n+)]\n+#![allow(deprecated)]\n+\n+use crate::os::raw::c_ulong;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type dev_t = u64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub type mode_t = u32;\n+\n+#[stable(feature = \"pthread_t\", since = \"1.8.0\")]\n+pub type pthread_t = c_ulong;\n+\n+#[doc(inline)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub use self::arch::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n+\n+#[cfg(any(\n+    target_arch = \"x86\",\n+    target_arch = \"le32\",\n+    target_arch = \"m68k\",\n+    target_arch = \"powerpc\",\n+    target_arch = \"sparc\",\n+    target_arch = \"arm\",\n+    target_arch = \"asmjs\",\n+    target_arch = \"wasm32\"\n+))]\n+mod arch {\n+    use crate::os::raw::{c_long, c_short, c_uint};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad1: c_short,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __st_ino: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad2: c_uint,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+    }\n+}\n+\n+#[cfg(target_arch = \"mips\")]\n+mod arch {\n+    use crate::os::raw::{c_long, c_ulong};\n+\n+    #[cfg(target_env = \"musl\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = i64;\n+    #[cfg(not(target_env = \"musl\"))]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[cfg(target_env = \"musl\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[cfg(not(target_env = \"musl\"))]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[cfg(target_env = \"musl\")]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[cfg(not(target_env = \"musl\"))]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_pad1: [c_long; 3],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: c_ulong,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_pad2: [c_long; 2],\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_pad5: [c_long; 14],\n+    }\n+}\n+\n+#[cfg(target_arch = \"hexagon\")]\n+mod arch {\n+    use crate::os::raw::{c_int, c_long, c_uint};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = c_long;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = c_uint;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad1: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad2: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad3: [c_int; 2],\n+    }\n+}\n+\n+#[cfg(any(\n+    target_arch = \"mips64\",\n+    target_arch = \"s390x\",\n+    target_arch = \"sparc64\",\n+    target_arch = \"riscv64\",\n+    target_arch = \"riscv32\"\n+))]\n+mod arch {\n+    pub use libc::{blkcnt_t, blksize_t, ino_t, nlink_t, off_t, stat, time_t};\n+}\n+\n+#[cfg(target_arch = \"aarch64\")]\n+mod arch {\n+    use crate::os::raw::{c_int, c_long};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = i32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u32;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = i64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = c_long;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad1: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad2: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: time_t,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __unused: [c_int; 2],\n+    }\n+}\n+\n+#[cfg(any(target_arch = \"x86_64\", target_arch = \"powerpc64\"))]\n+mod arch {\n+    use crate::os::raw::{c_int, c_long};\n+\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blkcnt_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type blksize_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type ino_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type nlink_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type off_t = u64;\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub type time_t = i64;\n+\n+    #[repr(C)]\n+    #[derive(Clone)]\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub struct stat {\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_dev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ino: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_nlink: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mode: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_uid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_gid: u32,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __pad0: c_int,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_rdev: u64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_size: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blksize: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_blocks: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_atime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_mtime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime: i64,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub st_ctime_nsec: c_long,\n+        #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+        pub __unused: [c_long; 3],\n+    }\n+}"}, {"sha": "029f131c40be0820743db60c5e83cbfd8979fefb", "filename": "library/std/src/os/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fmod.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -81,7 +81,7 @@ pub mod unix;\n         all(target_vendor = \"fortanix\", target_env = \"sgx\")\n     )\n )))]\n-#[cfg(any(target_os = \"linux\", target_os = \"l4re\", doc))]\n+#[cfg(any(target_os = \"linux\", doc))]\n pub mod linux;\n \n // wasi\n@@ -127,6 +127,8 @@ pub mod haiku;\n pub mod illumos;\n #[cfg(target_os = \"ios\")]\n pub mod ios;\n+#[cfg(target_os = \"l4re\")]\n+pub mod l4re;\n #[cfg(target_os = \"macos\")]\n pub mod macos;\n #[cfg(target_os = \"netbsd\")]"}, {"sha": "7b8ca79eeb8460ae22f245ee9aede11a813ad4af", "filename": "library/std/src/os/unix/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fmod.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -55,7 +55,9 @@ mod platform {\n     pub use crate::os::illumos::*;\n     #[cfg(target_os = \"ios\")]\n     pub use crate::os::ios::*;\n-    #[cfg(any(target_os = \"linux\", target_os = \"l4re\"))]\n+    #[cfg(target_os = \"l4re\")]\n+    pub use crate::os::l4re::*;\n+    #[cfg(target_os = \"linux\")]\n     pub use crate::os::linux::*;\n     #[cfg(target_os = \"macos\")]\n     pub use crate::os::macos::*;"}, {"sha": "f052d8f7f055f3cb23200df5d95122315dc15853", "filename": "library/std/src/sys/unix/l4re.rs", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fl4re.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -13,6 +13,7 @@ pub mod net {\n     use crate::fmt;\n     use crate::io::{self, IoSlice, IoSliceMut};\n     use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n+    use crate::os::unix::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd, IntoRawFd, RawFd};\n     use crate::sys::fd::FileDesc;\n     use crate::sys_common::{AsInner, FromInner, IntoInner};\n     use crate::time::Duration;\n@@ -59,7 +60,7 @@ pub mod net {\n         }\n \n         pub fn is_read_vectored(&self) -> bool {\n-            unimpl!();\n+            false\n         }\n \n         pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n@@ -83,7 +84,7 @@ pub mod net {\n         }\n \n         pub fn is_write_vectored(&self) -> bool {\n-            unimpl!();\n+            false\n         }\n \n         pub fn set_timeout(&self, _: Option<Duration>, _: libc::c_int) -> io::Result<()> {\n@@ -121,23 +122,52 @@ pub mod net {\n         pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n             unimpl!();\n         }\n+\n+        // This is used by sys_common code to abstract over Windows and Unix.\n+        pub fn as_raw(&self) -> RawFd {\n+            self.as_raw_fd()\n+        }\n+    }\n+\n+    impl AsInner<FileDesc> for Socket {\n+        fn as_inner(&self) -> &FileDesc {\n+            &self.0\n+        }\n+    }\n+\n+    impl FromInner<FileDesc> for Socket {\n+        fn from_inner(file_desc: FileDesc) -> Socket {\n+            Socket(file_desc)\n+        }\n     }\n \n-    impl AsInner<libc::c_int> for Socket {\n-        fn as_inner(&self) -> &libc::c_int {\n-            self.0.as_inner()\n+    impl IntoInner<FileDesc> for Socket {\n+        fn into_inner(self) -> FileDesc {\n+            self.0\n         }\n     }\n \n-    impl FromInner<libc::c_int> for Socket {\n-        fn from_inner(fd: libc::c_int) -> Socket {\n-            Socket(FileDesc::new(fd))\n+    impl AsFd for Socket {\n+        fn as_fd(&self) -> BorrowedFd<'_> {\n+            self.0.as_fd()\n         }\n     }\n \n-    impl IntoInner<libc::c_int> for Socket {\n-        fn into_inner(self) -> libc::c_int {\n-            self.0.into_raw()\n+    impl AsRawFd for Socket {\n+        fn as_raw_fd(&self) -> RawFd {\n+            self.0.as_raw_fd()\n+        }\n+    }\n+\n+    impl IntoRawFd for Socket {\n+        fn into_raw_fd(self) -> RawFd {\n+            self.0.into_raw_fd()\n+        }\n+    }\n+\n+    impl FromRawFd for Socket {\n+        unsafe fn from_raw_fd(raw_fd: RawFd) -> Self {\n+            Self(FromRawFd::from_raw_fd(raw_fd))\n         }\n     }\n \n@@ -191,7 +221,7 @@ pub mod net {\n         }\n \n         pub fn is_read_vectored(&self) -> bool {\n-            unimpl!();\n+            false\n         }\n \n         pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n@@ -203,7 +233,7 @@ pub mod net {\n         }\n \n         pub fn is_write_vectored(&self) -> bool {\n-            unimpl!();\n+            false\n         }\n \n         pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n@@ -497,7 +527,7 @@ pub mod net {\n \n     impl LookupHost {\n         pub fn port(&self) -> u16 {\n-            unimpl!();\n+            0 // unimplemented\n         }\n     }\n "}, {"sha": "7423d90263dc2ee396386393f59c36b4b42cc57a", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -80,6 +80,7 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n                 target_os = \"macos\",\n                 target_os = \"ios\",\n                 target_os = \"redox\",\n+                target_os = \"l4re\",\n             )))] {\n                 use crate::sys::os::errno;\n                 let pfds: &mut [_] = &mut ["}, {"sha": "2a97a802a2036a4977c4f92b13a06545a41e5da6", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a87590e34e18646aee82771471649761d9acf02f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=a87590e34e18646aee82771471649761d9acf02f", "patch": "@@ -27,7 +27,10 @@ use crate::sys::weak::weak;\n use libc::RTP_ID as pid_t;\n \n #[cfg(not(target_os = \"vxworks\"))]\n-use libc::{c_int, gid_t, pid_t, uid_t};\n+use libc::{c_int, pid_t};\n+\n+#[cfg(not(any(target_os = \"vxworks\", target_os = \"l4re\")))]\n+use libc::{gid_t, uid_t};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command"}]}