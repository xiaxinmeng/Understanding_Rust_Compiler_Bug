{"sha": "a5d597637dcb78dc73f93561ce474f23d4177c35", "node_id": "C_kwDOAAsO6NoAKGE1ZDU5NzYzN2RjYjc4ZGM3M2Y5MzU2MWNlNDc0ZjIzZDQxNzdjMzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T05:12:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-06T05:12:12Z"}, "message": "Auto merge of #8077 - nixxquality:single_char_pattern-false-negatives, r=camsteffen\n\nFix some false negatives for [`single_char_pattern`]\n\n*Please write a short comment explaining your change (or \"none\" for internal only changes)*\n\nchangelog: Fix some false negatives for [`single_char_pattern`]\n\nI noticed that clippy wasn't complaining about my usage of `split_once(\"x\")` in a personal project so I updated the list of functions.\n\nI had to update the test case for an unrelated issue because replace is now included in the list of functions to be linted.", "tree": {"sha": "cb4f18d2e792e4a898dc8f63841ae2a84bdaf9f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb4f18d2e792e4a898dc8f63841ae2a84bdaf9f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5d597637dcb78dc73f93561ce474f23d4177c35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5d597637dcb78dc73f93561ce474f23d4177c35", "html_url": "https://github.com/rust-lang/rust/commit/a5d597637dcb78dc73f93561ce474f23d4177c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5d597637dcb78dc73f93561ce474f23d4177c35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "476d609c9de232895d535b3da2bc58a26a01aeef", "url": "https://api.github.com/repos/rust-lang/rust/commits/476d609c9de232895d535b3da2bc58a26a01aeef", "html_url": "https://github.com/rust-lang/rust/commit/476d609c9de232895d535b3da2bc58a26a01aeef"}, {"sha": "01e302b2f734a7d877c1918122315309aabe34ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/01e302b2f734a7d877c1918122315309aabe34ff", "html_url": "https://github.com/rust-lang/rust/commit/01e302b2f734a7d877c1918122315309aabe34ff"}], "stats": {"total": 131, "additions": 88, "deletions": 43}, "files": [{"sha": "58c686d95b3f91caed5e57466b807e33ca9ab8a7", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -190,7 +190,7 @@ fn unit_closure<'tcx>(\n /// Anything else will return `a`.\n fn let_binding_name(cx: &LateContext<'_>, var_arg: &hir::Expr<'_>) -> String {\n     match &var_arg.kind {\n-        hir::ExprKind::Field(_, _) => snippet(cx, var_arg.span, \"_\").replace(\".\", \"_\"),\n+        hir::ExprKind::Field(_, _) => snippet(cx, var_arg.span, \"_\").replace('.', \"_\"),\n         hir::ExprKind::Path(_) => format!(\"_{}\", snippet(cx, var_arg.span, \"\")),\n         _ => \"a\".to_string(),\n     }"}, {"sha": "bf9006c690621031f1056c6ee0ac8efb45577d39", "filename": "clippy_lints/src/methods/single_char_pattern.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -9,18 +9,21 @@ use rustc_span::symbol::Symbol;\n \n use super::SINGLE_CHAR_PATTERN;\n \n-const PATTERN_METHODS: [(&str, usize); 19] = [\n+const PATTERN_METHODS: [(&str, usize); 24] = [\n     (\"contains\", 1),\n     (\"starts_with\", 1),\n     (\"ends_with\", 1),\n     (\"find\", 1),\n     (\"rfind\", 1),\n     (\"split\", 1),\n+    (\"split_inclusive\", 1),\n     (\"rsplit\", 1),\n     (\"split_terminator\", 1),\n     (\"rsplit_terminator\", 1),\n     (\"splitn\", 2),\n     (\"rsplitn\", 2),\n+    (\"split_once\", 1),\n+    (\"rsplit_once\", 1),\n     (\"matches\", 1),\n     (\"rmatches\", 1),\n     (\"match_indices\", 1),\n@@ -29,6 +32,8 @@ const PATTERN_METHODS: [(&str, usize); 19] = [\n     (\"strip_suffix\", 1),\n     (\"trim_start_matches\", 1),\n     (\"trim_end_matches\", 1),\n+    (\"replace\", 1),\n+    (\"replacen\", 1),\n ];\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`"}, {"sha": "a04d589f880fa9aca9e43677f0076129bc9cdd69", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -112,7 +112,7 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n         if snip.starts_with(&format!(\"{}!\", name));\n         if unnested_or_local();\n         // make formatting consistent\n-        let c = snip.replace(\" \", \"\");\n+        let c = snip.replace(' ', \"\");\n         if !c.starts_with(&format!(\"{}!{}\", name, braces.0));\n         if !mac_braces.done.contains(&span.ctxt().outer_expn_data().call_site);\n         then {"}, {"sha": "d386663e49858eda7d123d04dd2bad7fb0de7a82", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n             if let Some(Node::Item(x)) = cx.tcx.hir().find(self_id);\n             let type_name = x.ident.name.as_str().to_lowercase();\n-            if impl_item.ident.name.as_str() == type_name || impl_item.ident.name.as_str().replace(\"_\", \"\") == type_name;\n+            if impl_item.ident.name.as_str() == type_name || impl_item.ident.name.as_str().replace('_', \"\") == type_name;\n \n             then {\n                 span_lint("}, {"sha": "afd7be89a4e289c94764d31c0eb27f12de4ff5de", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -106,9 +106,9 @@ fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n             \"invisible character detected\",\n             \"consider replacing the string with\",\n             string\n-                .replace(\"\\u{200B}\", \"\\\\u{200B}\")\n-                .replace(\"\\u{ad}\", \"\\\\u{AD}\")\n-                .replace(\"\\u{2060}\", \"\\\\u{2060}\"),\n+                .replace('\\u{200B}', \"\\\\u{200B}\")\n+                .replace('\\u{ad}', \"\\\\u{AD}\")\n+                .replace('\\u{2060}', \"\\\\u{2060}\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "5bf0cffdbad16a52983d0f7f48e2ad476c4cd8e4", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -583,10 +583,10 @@ impl Write {\n             let replacement: String = match lit.token.kind {\n                 LitKind::Integer | LitKind::Float | LitKind::Err => continue,\n                 LitKind::StrRaw(_) | LitKind::ByteStrRaw(_) if matches!(fmtstr.style, StrStyle::Raw(_)) => {\n-                    lit.token.symbol.as_str().replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n+                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::Str | LitKind::ByteStr if matches!(fmtstr.style, StrStyle::Cooked) => {\n-                    lit.token.symbol.as_str().replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n+                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_) | LitKind::Str | LitKind::ByteStrRaw(_) | LitKind::ByteStr => continue,\n                 LitKind::Byte | LitKind::Char => match &*lit.token.symbol.as_str() {"}, {"sha": "68e26726724b808425a6b53754bfa1d0047d4027", "filename": "tests/ui/single_char_pattern.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/tests%2Fui%2Fsingle_char_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/tests%2Fui%2Fsingle_char_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.fixed?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -17,6 +17,7 @@ fn main() {\n     x.split('\ud83d\udca3');\n     // Can't use this lint for unicode code points which don't fit in a char\n     x.split(\"\u2764\ufe0f\");\n+    x.split_inclusive('x');\n     x.contains('x');\n     x.starts_with('x');\n     x.ends_with('x');\n@@ -27,6 +28,8 @@ fn main() {\n     x.rsplit_terminator('x');\n     x.splitn(2, 'x');\n     x.rsplitn(2, 'x');\n+    x.split_once('x');\n+    x.rsplit_once('x');\n     x.matches('x');\n     x.rmatches('x');\n     x.match_indices('x');\n@@ -35,6 +38,8 @@ fn main() {\n     x.trim_end_matches('x');\n     x.strip_prefix('x');\n     x.strip_suffix('x');\n+    x.replace('x', \"y\");\n+    x.replacen('x', \"y\", 3);\n     // Make sure we escape characters correctly.\n     x.split('\\n');\n     x.split('\\'');\n@@ -43,7 +48,7 @@ fn main() {\n     let h = HashSet::<String>::new();\n     h.contains(\"X\"); // should not warn\n \n-    x.replace(\";\", \",\").split(','); // issue #2978\n+    x.replace(';', \",\").split(','); // issue #2978\n     x.starts_with('\\x03'); // issue #2996\n \n     // Issue #3204"}, {"sha": "186202d78ec5aeae404064521c87393bb897857b", "filename": "tests/ui/single_char_pattern.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/tests%2Fui%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/tests%2Fui%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.rs?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -17,6 +17,7 @@ fn main() {\n     x.split(\"\ud83d\udca3\");\n     // Can't use this lint for unicode code points which don't fit in a char\n     x.split(\"\u2764\ufe0f\");\n+    x.split_inclusive(\"x\");\n     x.contains(\"x\");\n     x.starts_with(\"x\");\n     x.ends_with(\"x\");\n@@ -27,6 +28,8 @@ fn main() {\n     x.rsplit_terminator(\"x\");\n     x.splitn(2, \"x\");\n     x.rsplitn(2, \"x\");\n+    x.split_once(\"x\");\n+    x.rsplit_once(\"x\");\n     x.matches(\"x\");\n     x.rmatches(\"x\");\n     x.match_indices(\"x\");\n@@ -35,6 +38,8 @@ fn main() {\n     x.trim_end_matches(\"x\");\n     x.strip_prefix(\"x\");\n     x.strip_suffix(\"x\");\n+    x.replace(\"x\", \"y\");\n+    x.replacen(\"x\", \"y\", 3);\n     // Make sure we escape characters correctly.\n     x.split(\"\\n\");\n     x.split(\"'\");\n@@ -43,7 +48,7 @@ fn main() {\n     let h = HashSet::<String>::new();\n     h.contains(\"X\"); // should not warn\n \n-    x.replace(\";\", \",\").split(\",\"); // issue #2978\n+    x.replace(';', \",\").split(\",\"); // issue #2978\n     x.starts_with(\"\\x03\"); // issue #2996\n \n     // Issue #3204"}, {"sha": "5564aac674d97624d1655857035c88163df88fd0", "filename": "tests/ui/single_char_pattern.stderr", "status": "modified", "additions": 62, "deletions": 32, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/a5d597637dcb78dc73f93561ce474f23d4177c35/tests%2Fui%2Fsingle_char_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a5d597637dcb78dc73f93561ce474f23d4177c35/tests%2Fui%2Fsingle_char_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_pattern.stderr?ref=a5d597637dcb78dc73f93561ce474f23d4177c35", "patch": "@@ -25,184 +25,214 @@ LL |     x.split(\"\ud83d\udca3\");\n    |             ^^^^ help: try using a `char` instead: `'\ud83d\udca3'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:20:16\n+  --> $DIR/single_char_pattern.rs:20:23\n+   |\n+LL |     x.split_inclusive(\"x\");\n+   |                       ^^^ help: try using a `char` instead: `'x'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:21:16\n    |\n LL |     x.contains(\"x\");\n    |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:21:19\n+  --> $DIR/single_char_pattern.rs:22:19\n    |\n LL |     x.starts_with(\"x\");\n    |                   ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:22:17\n+  --> $DIR/single_char_pattern.rs:23:17\n    |\n LL |     x.ends_with(\"x\");\n    |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:23:12\n+  --> $DIR/single_char_pattern.rs:24:12\n    |\n LL |     x.find(\"x\");\n    |            ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:24:13\n+  --> $DIR/single_char_pattern.rs:25:13\n    |\n LL |     x.rfind(\"x\");\n    |             ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:25:14\n+  --> $DIR/single_char_pattern.rs:26:14\n    |\n LL |     x.rsplit(\"x\");\n    |              ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:26:24\n+  --> $DIR/single_char_pattern.rs:27:24\n    |\n LL |     x.split_terminator(\"x\");\n    |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:27:25\n+  --> $DIR/single_char_pattern.rs:28:25\n    |\n LL |     x.rsplit_terminator(\"x\");\n    |                         ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:28:17\n+  --> $DIR/single_char_pattern.rs:29:17\n    |\n LL |     x.splitn(2, \"x\");\n    |                 ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:29:18\n+  --> $DIR/single_char_pattern.rs:30:18\n    |\n LL |     x.rsplitn(2, \"x\");\n    |                  ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:30:15\n+  --> $DIR/single_char_pattern.rs:31:18\n+   |\n+LL |     x.split_once(\"x\");\n+   |                  ^^^ help: try using a `char` instead: `'x'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:32:19\n+   |\n+LL |     x.rsplit_once(\"x\");\n+   |                   ^^^ help: try using a `char` instead: `'x'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:33:15\n    |\n LL |     x.matches(\"x\");\n    |               ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:31:16\n+  --> $DIR/single_char_pattern.rs:34:16\n    |\n LL |     x.rmatches(\"x\");\n    |                ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:32:21\n+  --> $DIR/single_char_pattern.rs:35:21\n    |\n LL |     x.match_indices(\"x\");\n    |                     ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:33:22\n+  --> $DIR/single_char_pattern.rs:36:22\n    |\n LL |     x.rmatch_indices(\"x\");\n    |                      ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:34:26\n+  --> $DIR/single_char_pattern.rs:37:26\n    |\n LL |     x.trim_start_matches(\"x\");\n    |                          ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:35:24\n+  --> $DIR/single_char_pattern.rs:38:24\n    |\n LL |     x.trim_end_matches(\"x\");\n    |                        ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:36:20\n+  --> $DIR/single_char_pattern.rs:39:20\n    |\n LL |     x.strip_prefix(\"x\");\n    |                    ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:37:20\n+  --> $DIR/single_char_pattern.rs:40:20\n    |\n LL |     x.strip_suffix(\"x\");\n    |                    ^^^ help: try using a `char` instead: `'x'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:39:13\n+  --> $DIR/single_char_pattern.rs:41:15\n+   |\n+LL |     x.replace(\"x\", \"y\");\n+   |               ^^^ help: try using a `char` instead: `'x'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:42:16\n+   |\n+LL |     x.replacen(\"x\", \"y\", 3);\n+   |                ^^^ help: try using a `char` instead: `'x'`\n+\n+error: single-character string constant used as pattern\n+  --> $DIR/single_char_pattern.rs:44:13\n    |\n LL |     x.split(\"/n\");\n    |             ^^^^ help: try using a `char` instead: `'/n'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:40:13\n+  --> $DIR/single_char_pattern.rs:45:13\n    |\n LL |     x.split(\"'\");\n    |             ^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:41:13\n+  --> $DIR/single_char_pattern.rs:46:13\n    |\n LL |     x.split(\"/'\");\n    |             ^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:46:31\n+  --> $DIR/single_char_pattern.rs:51:31\n    |\n-LL |     x.replace(\";\", \",\").split(\",\"); // issue #2978\n+LL |     x.replace(';', \",\").split(\",\"); // issue #2978\n    |                               ^^^ help: try using a `char` instead: `','`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:47:19\n+  --> $DIR/single_char_pattern.rs:52:19\n    |\n LL |     x.starts_with(\"/x03\"); // issue #2996\n    |                   ^^^^^^ help: try using a `char` instead: `'/x03'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:54:13\n+  --> $DIR/single_char_pattern.rs:59:13\n    |\n LL |     x.split(r\"a\");\n    |             ^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:55:13\n+  --> $DIR/single_char_pattern.rs:60:13\n    |\n LL |     x.split(r#\"a\"#);\n    |             ^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:56:13\n+  --> $DIR/single_char_pattern.rs:61:13\n    |\n LL |     x.split(r###\"a\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'a'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:57:13\n+  --> $DIR/single_char_pattern.rs:62:13\n    |\n LL |     x.split(r###\"'\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'/''`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:58:13\n+  --> $DIR/single_char_pattern.rs:63:13\n    |\n LL |     x.split(r###\"#\"###);\n    |             ^^^^^^^^^^ help: try using a `char` instead: `'#'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:60:13\n+  --> $DIR/single_char_pattern.rs:65:13\n    |\n LL |     x.split(r#\"/\"#);\n    |             ^^^^^^ help: try using a `char` instead: `'/'`\n \n error: single-character string constant used as pattern\n-  --> $DIR/single_char_pattern.rs:61:13\n+  --> $DIR/single_char_pattern.rs:66:13\n    |\n LL |     x.split(r\"/\");\n    |             ^^^^ help: try using a `char` instead: `'/'`\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 39 previous errors\n "}]}