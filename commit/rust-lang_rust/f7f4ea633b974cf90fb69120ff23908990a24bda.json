{"sha": "f7f4ea633b974cf90fb69120ff23908990a24bda", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZjRlYTYzM2I5NzRjZjkwZmI2OTEyMGZmMjM5MDg5OTBhMjRiZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-14T11:51:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-14T11:51:43Z"}, "message": "Don't duplicate parens in patterns", "tree": {"sha": "29f9903134d9fe820e3f9afa44ad8b237298bf24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f9903134d9fe820e3f9afa44ad8b237298bf24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7f4ea633b974cf90fb69120ff23908990a24bda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4ea633b974cf90fb69120ff23908990a24bda", "html_url": "https://github.com/rust-lang/rust/commit/f7f4ea633b974cf90fb69120ff23908990a24bda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7f4ea633b974cf90fb69120ff23908990a24bda/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f823386db85ec1f0ee973b9c0534a9902dbcc2e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f823386db85ec1f0ee973b9c0534a9902dbcc2e2", "html_url": "https://github.com/rust-lang/rust/commit/f823386db85ec1f0ee973b9c0534a9902dbcc2e2"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "9e82d6854156daea1408917acf2246f7221a2200", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7f4ea633b974cf90fb69120ff23908990a24bda/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f4ea633b974cf90fb69120ff23908990a24bda/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=f7f4ea633b974cf90fb69120ff23908990a24bda", "patch": "@@ -63,6 +63,8 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) dot_receiver_is_ambiguous_float_literal: bool,\n     /// If this is a call (method or function) in particular, i.e. the () are already there.\n     pub(super) is_call: bool,\n+    /// Like `is_call`, but for tuple patterns.\n+    pub(super) is_pattern_call: bool,\n     /// If this is a macro call, i.e. the () are already there.\n     pub(super) is_macro_call: bool,\n     pub(super) is_path_type: bool,\n@@ -136,6 +138,7 @@ impl<'a> CompletionContext<'a> {\n             is_new_item: false,\n             dot_receiver: None,\n             is_call: false,\n+            is_pattern_call: false,\n             is_macro_call: false,\n             is_path_type: false,\n             has_type_args: false,\n@@ -370,6 +373,8 @@ impl<'a> CompletionContext<'a> {\n                 .and_then(|it| it.syntax().parent().and_then(ast::CallExpr::cast))\n                 .is_some();\n             self.is_macro_call = path.syntax().parent().and_then(ast::MacroCall::cast).is_some();\n+            self.is_pattern_call =\n+                path.syntax().parent().and_then(ast::TupleStructPat::cast).is_some();\n \n             self.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n             self.has_type_args = segment.type_arg_list().is_some();"}, {"sha": "64349dcb83c0a5c343fa909f9d420d25c14f3548", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f7f4ea633b974cf90fb69120ff23908990a24bda/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7f4ea633b974cf90fb69120ff23908990a24bda/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=f7f4ea633b974cf90fb69120ff23908990a24bda", "patch": "@@ -384,10 +384,17 @@ impl Builder {\n         if !ctx.config.add_call_parenthesis {\n             return self;\n         }\n-        if ctx.use_item_syntax.is_some() || ctx.is_call {\n+        if ctx.use_item_syntax.is_some() {\n             mark::hit!(no_parens_in_use_item);\n             return self;\n         }\n+        if ctx.is_pattern_call {\n+            mark::hit!(dont_duplicate_pattern_parens);\n+            return self;\n+        }\n+        if ctx.is_call {\n+            return self;\n+        }\n \n         // Don't add parentheses if the expected type is some function reference.\n         if let Some(ty) = &ctx.expected_type {\n@@ -907,6 +914,30 @@ fn main(value: Option<i32>) {\n         );\n     }\n \n+    #[test]\n+    fn dont_duplicate_pattern_parens() {\n+        mark::check!(dont_duplicate_pattern_parens);\n+        check_edit(\n+            \"Var\",\n+            r#\"\n+enum E { Var(i32) }\n+fn main() {\n+    match E::Var(92) {\n+        E::<|>(92) => (),\n+    }\n+}\n+\"#,\n+            r#\"\n+enum E { Var(i32) }\n+fn main() {\n+    match E::Var(92) {\n+        E::Var(92) => (),\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn no_call_parens_if_fn_ptr_needed() {\n         mark::check!(no_call_parens_if_fn_ptr_needed);"}]}