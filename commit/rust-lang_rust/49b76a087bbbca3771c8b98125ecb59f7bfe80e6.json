{"sha": "49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5Yjc2YTA4N2JiYmNhMzc3MWM4Yjk4MTI1ZWNiNTlmN2JmZTgwZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-30T13:38:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T15:22:39Z"}, "message": "Fallout in libsyntax", "tree": {"sha": "3a57e7833d39bd630cb41410cb146c20558d07a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a57e7833d39bd630cb41410cb146c20558d07a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "html_url": "https://github.com/rust-lang/rust/commit/49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9530c01a71954a5497cbb5f97deb9ce2bdf794a", "html_url": "https://github.com/rust-lang/rust/commit/d9530c01a71954a5497cbb5f97deb9ce2bdf794a"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "27e331893e5d7fcd642113988baf2123092ef15a", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -15,7 +15,7 @@ pub use self::AbiArchitecture::*;\n \n use std::fmt;\n \n-#[derive(Copy, PartialEq, Eq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n pub enum Os {\n     OsWindows,\n     OsMacos,\n@@ -49,7 +49,7 @@ pub enum Abi {\n }\n \n #[allow(non_camel_case_types)]\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub enum Architecture {\n     X86,\n     X86_64,\n@@ -58,15 +58,15 @@ pub enum Architecture {\n     Mipsel\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct AbiData {\n     abi: Abi,\n \n     // Name of this ABI as we like it called.\n     name: &'static str,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum AbiArchitecture {\n     /// Not a real ABI (e.g., intrinsic)\n     RustArch,"}, {"sha": "475970ac30a75c972aaaa029adf92edcd1166dd5", "filename": "src/libsyntax/ast_map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fast_map%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fblocks.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -40,7 +40,7 @@ use visit;\n ///   - The default implementation for a trait method.\n ///\n /// To construct one, use the `Code::from_node` function.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FnLikeNode<'a> { node: ast_map::Node<'a> }\n \n /// MaybeFnLike wraps a method that indicates if an object\n@@ -80,7 +80,7 @@ impl MaybeFnLike for ast::Expr {\n /// Carries either an FnLikeNode or a Block, as these are the two\n /// constructs that correspond to \"code\" (as in, something from which\n /// we can construct a control-flow graph).\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Code<'a> {\n     FnLikeCode(FnLikeNode<'a>),\n     BlockCode(&'a Block),"}, {"sha": "da67d5c63102f8ad821070bf9a60f956aa9df7fc", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -90,7 +90,7 @@ pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n     })\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum Node<'ast> {\n     NodeItem(&'ast Item),\n     NodeForeignItem(&'ast ForeignItem),"}, {"sha": "c4c2249d029596b2af15a845bb8823d18bdd4d29", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -291,7 +291,7 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[derive(RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,"}, {"sha": "06e447bb12af4b076c8dad9c8c9cb0d0031478d0", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -282,7 +282,7 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n     first_attr_value_str_by_name(attrs, \"crate_name\")\n }\n \n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum InlineAttr {\n     None,\n     Hint,\n@@ -571,7 +571,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[derive(PartialEq, Debug, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n@@ -590,7 +590,7 @@ impl ReprAttr {\n     }\n }\n \n-#[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(Eq, Hash, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "ad3512c76305658de38d4a6cf8d801bfae287c4f", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -47,7 +47,7 @@ pub struct BytePos(pub u32);\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-#[derive(Copy, PartialEq, Hash, PartialOrd, Debug)]\n+#[derive(Copy, Clone, PartialEq, Hash, PartialOrd, Debug)]\n pub struct CharPos(pub usize);\n \n // FIXME: Lots of boilerplate in these impls, but so far my attempts to fix\n@@ -305,7 +305,7 @@ pub struct FileLines {\n }\n \n /// Identifies an offset of a multi-byte character in a FileMap\n-#[derive(Copy, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Eq, PartialEq)]\n pub struct MultiByteChar {\n     /// The absolute offset of the character in the CodeMap\n     pub pos: BytePos,"}, {"sha": "c4690b9716c99c306fd5f2117177c3dfe64631ee", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -71,12 +71,12 @@ pub trait Emitter {\n /// This structure is used to signify that a task has panicked with a fatal error\n /// from the diagnostics. You can use this with the `Any` trait to figure out\n /// how a rustc task died (if so desired).\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct FatalError;\n \n /// Signifies that the compiler died with an explicit call to `.bug`\n /// or `.span_bug` rather than a failed assertion, etc.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct ExplicitBug;\n \n /// A span-handler is like a handler but also"}, {"sha": "71fba789ff83509fcdaa2d82d95b128ce05b7793", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -318,7 +318,7 @@ impl MacResult for MacEager {\n \n /// Fill-in macro expansion result, to allow compilation to continue\n /// after hitting errors.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct DummyResult {\n     expr_only: bool,\n     span: Span"}, {"sha": "8ecd172b2f0d836899bcd067d1047283a9bd1d30", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -84,7 +84,7 @@ pub fn expand_deriving_ord<F>(cx: &mut ExtCtxt,\n     trait_def.expand(cx, mitem, item, push)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum OrderingOp {\n     PartialCmpOp, LtOp, LeOp, GtOp, GeOp,\n }"}, {"sha": "f514f72d565487d26df304dd52a8144a9a01f3a8", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -38,7 +38,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy, Clone)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),"}, {"sha": "6262911eefc1debfca7145bf0a0eb6a93675160c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -286,7 +286,7 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType)] = &[\n     (\"recursion_limit\", CrateLevel),\n ];\n \n-#[derive(PartialEq, Copy, Debug)]\n+#[derive(PartialEq, Copy, Clone, Debug)]\n pub enum AttributeType {\n     /// Normal, builtin attribute that is consumed\n     /// by the compiler before the unused_attribute check"}, {"sha": "f120dde8e1cb6fc12225f1887fc4a290d58772b1", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -20,7 +20,7 @@ use parse::token;\n use ptr::P;\n \n /// The specific types of unsupported syntax\n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub enum ObsoleteSyntax {\n     ClosureKind,\n     ExternCrateString,"}, {"sha": "c721624323923e18a999552bcb6b825af5af48d9", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -96,7 +96,7 @@ type ItemInfo = (Ident, Item_, Option<Vec<Attribute> >);\n \n /// How to parse a path. There are four different kinds of paths, all of which\n /// are parsed somewhat differently.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum PathParsingMode {\n     /// A path with no type parameters; e.g. `foo::bar::Baz`\n     NoTypesAllowed,\n@@ -109,7 +109,7 @@ pub enum PathParsingMode {\n }\n \n /// How to parse a bound, whether to allow bound modifiers such as `?`.\n-#[derive(Copy, PartialEq)]\n+#[derive(Copy, Clone, PartialEq)]\n pub enum BoundParsingMode {\n     Bare,\n     Modified,"}, {"sha": "ebfd970f3dbfc3c3e3d0634924bc90352ff11908", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -147,13 +147,13 @@ pub fn buf_str(toks: &[Token],\n     s\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum PrintStackBreak {\n     Fits,\n     Broken(Breaks),\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct PrintStackElem {\n     offset: isize,\n     pbreak: PrintStackBreak"}, {"sha": "06799ffc768b04dfffa54e953831ab6a3e56caf1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -46,12 +46,12 @@ pub trait PpAnn {\n     fn post(&self, _state: &mut State, _node: AnnNode) -> io::Result<()> { Ok(()) }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct NoAnn;\n \n impl PpAnn for NoAnn {}\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct CurrentCommentAndLiteral {\n     cur_cmnt: usize,\n     cur_lit: usize,"}, {"sha": "5c345c75642b8eb39ff81a692f052c694b5e07e1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b76a087bbbca3771c8b98125ecb59f7bfe80e6/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=49b76a087bbbca3771c8b98125ecb59f7bfe80e6", "patch": "@@ -32,7 +32,7 @@ use codemap::Span;\n use ptr::P;\n use owned_slice::OwnedSlice;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n     FkItemFn(Ident, &'a Generics, Unsafety, Abi),"}]}