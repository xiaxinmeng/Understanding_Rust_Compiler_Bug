{"sha": "fc3cca24f1230bb308e83168a3260abf36359f85", "node_id": "C_kwDOAAsO6NoAKGZjM2NjYTI0ZjEyMzBiYjMwOGU4MzE2OGEzMjYwYWJmMzYzNTlmODU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-06T03:16:07Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-12T09:15:37Z"}, "message": "sess: try sysroot candidates for fluent bundle\n\nInstead of checking only the user provided sysroot or the default (when\nno sysroot is provided), search user provided sysroot and then check\ndefault sysroots for locale requested by the user.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "4312fa6d31df8a626db8fb8c046226261300bec9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4312fa6d31df8a626db8fb8c046226261300bec9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc3cca24f1230bb308e83168a3260abf36359f85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc3cca24f1230bb308e83168a3260abf36359f85", "html_url": "https://github.com/rust-lang/rust/commit/fc3cca24f1230bb308e83168a3260abf36359f85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc3cca24f1230bb308e83168a3260abf36359f85/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e1927db3c399fa34dc71992bd5dbec09f945c3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1927db3c399fa34dc71992bd5dbec09f945c3d", "html_url": "https://github.com/rust-lang/rust/commit/4e1927db3c399fa34dc71992bd5dbec09f945c3d"}], "stats": {"total": 136, "additions": 94, "deletions": 42}, "files": [{"sha": "b33e6b661170688ef21ac68fce8d549e5d34152c", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=fc3cca24f1230bb308e83168a3260abf36359f85", "patch": "@@ -11,7 +11,7 @@ use std::error::Error;\n use std::fmt;\n use std::fs;\n use std::io;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use tracing::{instrument, trace};\n \n #[cfg(parallel_compiler)]\n@@ -45,7 +45,7 @@ pub enum TranslationBundleError {\n     /// Failed to add `FluentResource` to `FluentBundle`.\n     AddResource(FluentError),\n     /// `$sysroot/share/locale/$locale` does not exist.\n-    MissingLocale(io::Error),\n+    MissingLocale,\n     /// Cannot read directory entries of `$sysroot/share/locale/$locale`.\n     ReadLocalesDir(io::Error),\n     /// Cannot read directory entry of `$sysroot/share/locale/$locale`.\n@@ -62,9 +62,7 @@ impl fmt::Display for TranslationBundleError {\n                 write!(f, \"could not parse ftl file: {}\", e)\n             }\n             TranslationBundleError::AddResource(e) => write!(f, \"failed to add resource: {}\", e),\n-            TranslationBundleError::MissingLocale(e) => {\n-                write!(f, \"missing locale directory: {}\", e)\n-            }\n+            TranslationBundleError::MissingLocale => write!(f, \"missing locale directory\"),\n             TranslationBundleError::ReadLocalesDir(e) => {\n                 write!(f, \"could not read locales dir: {}\", e)\n             }\n@@ -84,7 +82,7 @@ impl Error for TranslationBundleError {\n             TranslationBundleError::ReadFtl(e) => Some(e),\n             TranslationBundleError::ParseFtl(e) => Some(e),\n             TranslationBundleError::AddResource(e) => Some(e),\n-            TranslationBundleError::MissingLocale(e) => Some(e),\n+            TranslationBundleError::MissingLocale => None,\n             TranslationBundleError::ReadLocalesDir(e) => Some(e),\n             TranslationBundleError::ReadLocalesDirEntry(e) => Some(e),\n             TranslationBundleError::LocaleIsNotDir => None,\n@@ -113,7 +111,8 @@ impl From<Vec<FluentError>> for TranslationBundleError {\n /// (overriding any conflicting messages).\n #[instrument(level = \"trace\")]\n pub fn fluent_bundle(\n-    sysroot: &Path,\n+    mut user_provided_sysroot: Option<PathBuf>,\n+    mut sysroot_candidates: Vec<PathBuf>,\n     requested_locale: Option<LanguageIdentifier>,\n     additional_ftl_path: Option<&Path>,\n     with_directionality_markers: bool,\n@@ -140,33 +139,43 @@ pub fn fluent_bundle(\n \n     // If the user requests the default locale then don't try to load anything.\n     if !requested_fallback_locale && let Some(requested_locale) = requested_locale {\n-        let mut sysroot = sysroot.to_path_buf();\n-        sysroot.push(\"share\");\n-        sysroot.push(\"locale\");\n-        sysroot.push(requested_locale.to_string());\n-        trace!(?sysroot);\n-\n-        let _ = sysroot.try_exists().map_err(TranslationBundleError::MissingLocale)?;\n-\n-        if !sysroot.is_dir() {\n-            return Err(TranslationBundleError::LocaleIsNotDir);\n-        }\n-\n-        for entry in sysroot.read_dir().map_err(TranslationBundleError::ReadLocalesDir)? {\n-            let entry = entry.map_err(TranslationBundleError::ReadLocalesDirEntry)?;\n-            let path = entry.path();\n-            trace!(?path);\n-            if path.extension().and_then(|s| s.to_str()) != Some(\"ftl\") {\n+        let mut found_resources = false;\n+        for sysroot in user_provided_sysroot.iter_mut().chain(sysroot_candidates.iter_mut()) {\n+            sysroot.push(\"share\");\n+            sysroot.push(\"locale\");\n+            sysroot.push(requested_locale.to_string());\n+            trace!(?sysroot);\n+\n+            if !sysroot.exists() {\n                 trace!(\"skipping\");\n                 continue;\n             }\n \n-            let resource_str =\n-                fs::read_to_string(path).map_err(TranslationBundleError::ReadFtl)?;\n-            let resource =\n-                FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n-            trace!(?resource);\n-            bundle.add_resource(resource).map_err(TranslationBundleError::from)?;\n+            if !sysroot.is_dir() {\n+                return Err(TranslationBundleError::LocaleIsNotDir);\n+            }\n+\n+            for entry in sysroot.read_dir().map_err(TranslationBundleError::ReadLocalesDir)? {\n+                let entry = entry.map_err(TranslationBundleError::ReadLocalesDirEntry)?;\n+                let path = entry.path();\n+                trace!(?path);\n+                if path.extension().and_then(|s| s.to_str()) != Some(\"ftl\") {\n+                    trace!(\"skipping\");\n+                    continue;\n+                }\n+\n+                let resource_str =\n+                    fs::read_to_string(path).map_err(TranslationBundleError::ReadFtl)?;\n+                let resource =\n+                    FluentResource::try_new(resource_str).map_err(TranslationBundleError::from)?;\n+                trace!(?resource);\n+                bundle.add_resource(resource).map_err(TranslationBundleError::from)?;\n+                found_resources = true;\n+            }\n+        }\n+\n+        if !found_resources {\n+            return Err(TranslationBundleError::MissingLocale);\n         }\n     }\n "}, {"sha": "fe75ee8b37b8d06fd748bebed146d452ce4e00a9", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=fc3cca24f1230bb308e83168a3260abf36359f85", "patch": "@@ -44,6 +44,7 @@ fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let sess = build_session(\n         sessopts,\n         None,\n+        None,\n         registry,\n         DiagnosticOutput::Default,\n         Default::default(),"}, {"sha": "3fa8017dc93c344dd972908dc64286cf158b577d", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=fc3cca24f1230bb308e83168a3260abf36359f85", "patch": "@@ -83,9 +83,23 @@ pub fn create_session(\n     // target_override is documented to be called before init(), so this is okay\n     let target_override = codegen_backend.target_override(&sopts);\n \n+    let bundle = match rustc_errors::fluent_bundle(\n+        sopts.maybe_sysroot.clone(),\n+        sysroot_candidates(),\n+        sopts.debugging_opts.translate_lang.clone(),\n+        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n+        sopts.debugging_opts.translate_directionality_markers,\n+    ) {\n+        Ok(bundle) => bundle,\n+        Err(e) => {\n+            early_error(sopts.error_format, &format!(\"failed to load fluent bundle: {e}\"));\n+        }\n+    };\n+\n     let mut sess = session::build_session(\n         sopts,\n         input_path,\n+        bundle,\n         descriptions,\n         diagnostic_output,\n         lint_caps,"}, {"sha": "d70f89760a1ff06589365f2e335a4c9d66fb69ba", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc3cca24f1230bb308e83168a3260abf36359f85/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=fc3cca24f1230bb308e83168a3260abf36359f85", "patch": "@@ -20,8 +20,8 @@ use rustc_errors::emitter::{Emitter, EmitterWriter, HumanReadableErrorType};\n use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{\n-    fallback_fluent_bundle, fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n-    EmissionGuarantee, ErrorGuaranteed, FluentBundle, MultiSpan,\n+    fallback_fluent_bundle, DiagnosticBuilder, DiagnosticId, DiagnosticMessage, EmissionGuarantee,\n+    ErrorGuaranteed, FluentBundle, MultiSpan,\n };\n use rustc_macros::HashStable_Generic;\n pub use rustc_span::def_id::StableCrateId;\n@@ -1162,6 +1162,7 @@ pub enum DiagnosticOutput {\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n+    bundle: Option<Lrc<rustc_errors::FluentBundle>>,\n     registry: rustc_errors::registry::Registry,\n     diagnostics_output: DiagnosticOutput,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1214,16 +1215,17 @@ pub fn build_session(\n         hash_kind,\n     ));\n \n-    let bundle = fluent_bundle(\n-        &sysroot,\n-        sopts.debugging_opts.translate_lang.clone(),\n-        sopts.debugging_opts.translate_additional_ftl.as_deref(),\n-        sopts.debugging_opts.translate_directionality_markers,\n-    )\n-    .expect(\"failed to load fluent bundle\");\n     let fallback_bundle =\n-        fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers)\n-            .expect(\"failed to load fallback fluent bundle\");\n+        match fallback_fluent_bundle(sopts.debugging_opts.translate_directionality_markers) {\n+            Ok(bundle) => bundle,\n+            Err(e) => {\n+                early_error(\n+                    sopts.error_format,\n+                    &format!(\"failed to load fallback fluent bundle: {e}\"),\n+                );\n+            }\n+        };\n+\n     let emitter =\n         default_emitter(&sopts, registry, source_map.clone(), bundle, fallback_bundle, write_dest);\n "}, {"sha": "bfff75e7acb08429585ef8b65ffab131d2702cea", "filename": "src/test/run-make/translation/Makefile", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fc3cca24f1230bb308e83168a3260abf36359f85/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/fc3cca24f1230bb308e83168a3260abf36359f85/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftranslation%2FMakefile?ref=fc3cca24f1230bb308e83168a3260abf36359f85", "patch": "@@ -15,7 +15,9 @@ normal: basic-translation.rs\n custom: basic-translation.rs basic-translation.ftl\n \t$(RUSTC) $< -Ztranslate-additional-ftl=$(CURDIR)/basic-translation.ftl 2>&1 | grep \"this is a test message\"\n \n-# Make a local copy of the sysroot and add the custom locale to it.\n+# Check that a locale can be loaded from the sysroot given a language\n+# identifier by making a local copy of the sysroot and adding the custom locale\n+# to it.\n sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir $(FAKEROOT)\n \tln -s $(SYSROOT)/* $(FAKEROOT)\n@@ -31,3 +33,27 @@ sysroot: basic-translation.rs basic-translation.ftl\n \tmkdir -p $(FAKEROOT)/share/locale/zh-CN/\n \tln -s $(CURDIR)/basic-translation.ftl $(FAKEROOT)/share/locale/zh-CN/basic-translation.ftl\n \t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 | grep \"this is a test message\"\n+\n+# Check that the compiler errors out when the sysroot requested cannot be\n+# found. This test might start failing if there actually exists a Klingon\n+# translation of rustc's error messages.\n+sysroot-missing: \n+\t$(RUSTC) $< -Ztranslate-lang=tlh 2>&1 || grep \"missing locale directory\"\n+\n+# Check that the compiler errors out when the sysroot requested cannot be\n+# found. This test might start failing if there actually exists a Klingon\n+# translation of rustc's error messages.\n+sysroot-invalid: basic-translation.rs basic-translation.ftl\n+\tmkdir $(FAKEROOT)\n+\tln -s $(SYSROOT)/* $(FAKEROOT)\n+\trm -f $(FAKEROOT)/lib\n+\tmkdir $(FAKEROOT)/lib\n+\tln -s $(SYSROOT)/lib/* $(FAKEROOT)/lib\n+\trm -f $(FAKEROOT)/lib/rustlib\n+\tmkdir $(FAKEROOT)/lib/rustlib\n+\tln -s $(SYSROOT)/lib/rustlib/* $(FAKEROOT)/lib/rustlib\n+\trm -f $(FAKEROOT)/lib/rustlib/src\n+\tmkdir $(FAKEROOT)/lib/rustlib/src\n+\tln -s $(SYSROOT)/lib/rustlib/src/* $(FAKEROOT)/lib/rustlib/src\n+\ttouch $(FAKEROOT)/share/locale/zh-CN/\n+\t$(RUSTC) $< --sysroot $(FAKEROOT) -Ztranslate-lang=zh-CN 2>&1 || grep \"`\\$sysroot/share/locales/\\$locale` is not a directory\""}]}