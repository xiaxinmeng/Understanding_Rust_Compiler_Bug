{"sha": "259bbfbc3dd5854f8ee3b89f921ac0812e43bb79", "node_id": "C_kwDOAAsO6NoAKDI1OWJiZmJjM2RkNTg1NGY4ZWUzYjg5ZjkyMWFjMDgxMmU0M2JiNzk", "commit": {"author": {"name": "John Millikin", "email": "john@john-millikin.com", "date": "2022-09-18T01:51:36Z"}, "committer": {"name": "John Millikin", "email": "john@john-millikin.com", "date": "2022-09-27T04:15:55Z"}, "message": "Add negation methods for signed non-zero integers.", "tree": {"sha": "559c6e3b75ff4512fb33d509428fc08f0e83f745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559c6e3b75ff4512fb33d509428fc08f0e83f745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/259bbfbc3dd5854f8ee3b89f921ac0812e43bb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/259bbfbc3dd5854f8ee3b89f921ac0812e43bb79", "html_url": "https://github.com/rust-lang/rust/commit/259bbfbc3dd5854f8ee3b89f921ac0812e43bb79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/259bbfbc3dd5854f8ee3b89f921ac0812e43bb79/comments", "author": {"login": "jmillikin", "id": 646128, "node_id": "MDQ6VXNlcjY0NjEyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/646128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmillikin", "html_url": "https://github.com/jmillikin", "followers_url": "https://api.github.com/users/jmillikin/followers", "following_url": "https://api.github.com/users/jmillikin/following{/other_user}", "gists_url": "https://api.github.com/users/jmillikin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmillikin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmillikin/subscriptions", "organizations_url": "https://api.github.com/users/jmillikin/orgs", "repos_url": "https://api.github.com/users/jmillikin/repos", "events_url": "https://api.github.com/users/jmillikin/events{/privacy}", "received_events_url": "https://api.github.com/users/jmillikin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jmillikin", "id": 646128, "node_id": "MDQ6VXNlcjY0NjEyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/646128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jmillikin", "html_url": "https://github.com/jmillikin", "followers_url": "https://api.github.com/users/jmillikin/followers", "following_url": "https://api.github.com/users/jmillikin/following{/other_user}", "gists_url": "https://api.github.com/users/jmillikin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jmillikin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jmillikin/subscriptions", "organizations_url": "https://api.github.com/users/jmillikin/orgs", "repos_url": "https://api.github.com/users/jmillikin/repos", "events_url": "https://api.github.com/users/jmillikin/events{/privacy}", "received_events_url": "https://api.github.com/users/jmillikin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3a6fbf2f2e898ca4d788b3e686726fa9770c676", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a6fbf2f2e898ca4d788b3e686726fa9770c676", "html_url": "https://github.com/rust-lang/rust/commit/f3a6fbf2f2e898ca4d788b3e686726fa9770c676"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "d8e3c95cc87024316a2c3b3ad8b5a2c420302600", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/259bbfbc3dd5854f8ee3b89f921ac0812e43bb79/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/259bbfbc3dd5854f8ee3b89f921ac0812e43bb79/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=259bbfbc3dd5854f8ee3b89f921ac0812e43bb79", "patch": "@@ -721,6 +721,160 @@ macro_rules! nonzero_signed_operations {\n                     // SAFETY: absolute value of nonzero cannot yield zero values.\n                     unsafe { $Uty::new_unchecked(self.get().unsigned_abs()) }\n                 }\n+\n+                /// Returns `true` if `self` is negative and `false` if the\n+                /// number is positive.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                ///\n+                /// assert!(neg_five.is_negative());\n+                /// assert!(!pos_five.is_negative());\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[must_use]\n+                #[inline(always)]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"none\")]\n+                pub const fn is_negative(self) -> bool {\n+                    self.get().is_negative()\n+                }\n+\n+                /// Checked negation. Computes `-self`, returning `None` if `self == i32::MIN`.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MIN)?;\")]\n+                ///\n+                /// assert_eq!(pos_five.checked_neg(), Some(neg_five));\n+                /// assert_eq!(min.checked_neg(), None);\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[inline]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"none\")]\n+                pub const fn checked_neg(self) -> Option<$Ty> {\n+                    if let Some(result) = self.get().checked_neg() {\n+                        // SAFETY: negation of nonzero cannot yield zero values.\n+                        return Some(unsafe { $Ty::new_unchecked(result) });\n+                    }\n+                    None\n+                }\n+\n+                /// Negates self, overflowing if this is equal to the minimum value.\n+                ///\n+                #[doc = concat!(\"See [`\", stringify!($Int), \"::overflowing_neg`]\")]\n+                /// for documentation on overflow behaviour.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MIN)?;\")]\n+                ///\n+                /// assert_eq!(pos_five.overflowing_neg(), (neg_five, false));\n+                /// assert_eq!(min.overflowing_neg(), (min, true));\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[inline]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"none\")]\n+                pub const fn overflowing_neg(self) -> ($Ty, bool) {\n+                    let (result, overflow) = self.get().overflowing_neg();\n+                    // SAFETY: negation of nonzero cannot yield zero values.\n+                    ((unsafe { $Ty::new_unchecked(result) }), overflow)\n+                }\n+\n+                /// Saturating negation. Computes `-self`, returning `MAX` if\n+                /// `self == i32::MIN` instead of overflowing.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MIN)?;\")]\n+                #[doc = concat!(\"let min_plus_one = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MIN + 1)?;\")]\n+                #[doc = concat!(\"let max = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MAX)?;\")]\n+                ///\n+                /// assert_eq!(pos_five.saturating_neg(), neg_five);\n+                /// assert_eq!(min.saturating_neg(), max);\n+                /// assert_eq!(max.saturating_neg(), min_plus_one);\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[inline]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"none\")]\n+                pub const fn saturating_neg(self) -> $Ty {\n+                    if let Some(result) = self.checked_neg() {\n+                        return result;\n+                    }\n+                    $Ty::MAX\n+                }\n+\n+                /// Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary\n+                /// of the type.\n+                ///\n+                #[doc = concat!(\"See [`\", stringify!($Int), \"::wrapping_neg`]\")]\n+                /// for documentation on overflow behaviour.\n+                ///\n+                /// # Example\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_negation_ops)]\n+                ///\n+                #[doc = concat!(\"# use std::num::\", stringify!($Ty), \";\")]\n+                /// # fn main() { test().unwrap(); }\n+                /// # fn test() -> Option<()> {\n+                #[doc = concat!(\"let pos_five = \", stringify!($Ty), \"::new(5)?;\")]\n+                #[doc = concat!(\"let neg_five = \", stringify!($Ty), \"::new(-5)?;\")]\n+                #[doc = concat!(\"let min = \", stringify!($Ty), \"::new(\",\n+                                stringify!($Int), \"::MIN)?;\")]\n+                ///\n+                /// assert_eq!(pos_five.wrapping_neg(), neg_five);\n+                /// assert_eq!(min.wrapping_neg(), min);\n+                /// # Some(())\n+                /// # }\n+                /// ```\n+                #[inline]\n+                #[unstable(feature = \"nonzero_negation_ops\", issue = \"none\")]\n+                pub const fn wrapping_neg(self) -> $Ty {\n+                    let result = self.get().wrapping_neg();\n+                    // SAFETY: negation of nonzero cannot yield zero values.\n+                    unsafe { $Ty::new_unchecked(result) }\n+                }\n             }\n         )+\n     }"}]}