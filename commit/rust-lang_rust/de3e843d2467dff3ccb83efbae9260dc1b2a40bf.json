{"sha": "de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlM2U4NDNkMjQ2N2RmZjNjY2I4M2VmYmFlOTI2MGRjMWIyYTQwYmY=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-12-14T23:03:42Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-12-18T12:32:14Z"}, "message": "Use memchr in libstd where possible, closes #30076", "tree": {"sha": "296aa9288270388391d96df8386f3437cbf8ac02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/296aa9288270388391d96df8386f3437cbf8ac02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "html_url": "https://github.com/rust-lang/rust/commit/de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca52c56e346a2a2bb042bec441b5058df3e3e289", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca52c56e346a2a2bb042bec441b5058df3e3e289", "html_url": "https://github.com/rust-lang/rust/commit/ca52c56e346a2a2bb042bec441b5058df3e3e289"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "3f3913471b8958193c7a2543e408350412d508c9", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "patch": "@@ -19,6 +19,7 @@ use io;\n use iter::Iterator;\n use libc;\n use mem;\n+use memchr;\n use ops::Deref;\n use option::Option::{self, Some, None};\n use os::raw::c_char;\n@@ -188,7 +189,7 @@ impl CString {\n     }\n \n     fn _new(bytes: Vec<u8>) -> Result<CString, NulError> {\n-        match bytes.iter().position(|x| *x == 0) {\n+        match memchr::memchr(0, &bytes) {\n             Some(i) => Err(NulError(i, bytes)),\n             None => Ok(unsafe { CString::from_vec_unchecked(bytes) }),\n         }"}, {"sha": "79eedbeda2c727375b9c93bc2aa6d5d80245e550", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "patch": "@@ -18,6 +18,7 @@ use cmp;\n use error;\n use fmt;\n use io::{self, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom};\n+use memchr;\n \n /// The `BufReader` struct adds buffering to any reader.\n ///\n@@ -746,7 +747,7 @@ impl<W: Write> LineWriter<W> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<W: Write> Write for LineWriter<W> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        match buf.iter().rposition(|b| *b == b'\\n') {\n+        match memchr::memrchr(b'\\n', buf) {\n             Some(i) => {\n                 let n = try!(self.inner.write(&buf[..i + 1]));\n                 if n != i + 1 { return Ok(n) }"}, {"sha": "cc3f8097a88e9df5bd0236ab88c152e50113228f", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "patch": "@@ -254,6 +254,7 @@ use result;\n use string::String;\n use str;\n use vec::Vec;\n+use memchr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::{BufReader, BufWriter, LineWriter};\n@@ -1194,7 +1195,7 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n                 Err(e) => return Err(e)\n             };\n-            match available.iter().position(|x| *x == delim) {\n+            match memchr::memchr(delim, available) {\n                 Some(i) => {\n                     buf.extend_from_slice(&available[..i + 1]);\n                     (true, i + 1)"}, {"sha": "12b9d6191a05fb5bd483528ba2397d29d11c8c83", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de3e843d2467dff3ccb83efbae9260dc1b2a40bf/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=de3e843d2467dff3ccb83efbae9260dc1b2a40bf", "patch": "@@ -22,6 +22,7 @@ use io;\n use iter;\n use libc::{self, c_int, c_char, c_void};\n use mem;\n+use memchr;\n use path::{self, PathBuf};\n use ptr;\n use slice;\n@@ -406,7 +407,7 @@ pub fn env() -> Env {\n         if input.is_empty() {\n             return None;\n         }\n-        let pos = input[1..].iter().position(|&b| b == b'=').map(|p| p + 1);\n+        let pos = memchr::memchr(b'=', &input[1..]).map(|p| p + 1);\n         pos.map(|p| (\n             OsStringExt::from_vec(input[..p].to_vec()),\n             OsStringExt::from_vec(input[p+1..].to_vec()),"}]}