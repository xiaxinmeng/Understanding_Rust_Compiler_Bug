{"sha": "ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhN2Q4MzkwODhjYmZlNWI5YmYyMzJmNWMyN2M0ODcwM2Q0ZjE2MDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-06T09:51:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-06T09:51:03Z"}, "message": "Auto merge of #47203 - varkor:output-filename-conflicts-with-directory, r=estebank\n\nWarn when rustc output conflicts with existing directories\n\nWhen the compiled executable would conflict with a directory, display a\nrustc error instead of a verbose and potentially-confusing linker\nerror. This is a usability improvement, and doesn\u2019t actually change\nbehaviour with regards to compilation success. This addresses the\nconcern in #35887. Fixes #13098.", "tree": {"sha": "895cbcfd3f024b6baae10b16c9896f5968a45094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/895cbcfd3f024b6baae10b16c9896f5968a45094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "html_url": "https://github.com/rust-lang/rust/commit/ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "html_url": "https://github.com/rust-lang/rust/commit/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e"}, {"sha": "e92bdb9828ff19afc92c292b289be1790f2ee116", "url": "https://api.github.com/repos/rust-lang/rust/commits/e92bdb9828ff19afc92c292b289be1790f2ee116", "html_url": "https://github.com/rust-lang/rust/commit/e92bdb9828ff19afc92c292b289be1790f2ee116"}], "stats": {"total": 154, "additions": 111, "deletions": 43}, "files": [{"sha": "c56575f432d1e7c705090f92dd3ab0cfb695346d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "patch": "@@ -548,25 +548,6 @@ impl OutputFilenames {\n     pub fn filestem(&self) -> String {\n         format!(\"{}{}\", self.out_filestem, self.extra)\n     }\n-\n-    pub fn contains_path(&self, input_path: &PathBuf) -> bool {\n-        let input_path = input_path.canonicalize().ok();\n-        if input_path.is_none() {\n-            return false\n-        }\n-        match self.single_output_file {\n-            Some(ref output_path) => output_path.canonicalize().ok() == input_path,\n-            None => {\n-                for k in self.outputs.keys() {\n-                    let output_path = self.path(k.to_owned());\n-                    if output_path.canonicalize().ok() == input_path {\n-                        return true;\n-                    }\n-                }\n-                false\n-            }\n-        }\n-    }\n }\n \n pub fn host_triple() -> &'static str {"}, {"sha": "50c19b5a99a540d2a6e3bff54aafa512b4461713", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 77, "deletions": 22, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "patch": "@@ -121,23 +121,8 @@ pub fn compile_input(trans: Box<TransCrate>,\n         };\n \n         let outputs = build_output_filenames(input, outdir, output, &krate.attrs, sess);\n-\n-        // Ensure the source file isn't accidentally overwritten during compilation.\n-        match *input_path {\n-            Some(ref input_path) => {\n-                if outputs.contains_path(input_path) && sess.opts.will_create_output_file() {\n-                    sess.err(&format!(\n-                        \"the input file \\\"{}\\\" would be overwritten by the generated executable\",\n-                        input_path.display()));\n-                    return Err(CompileIncomplete::Stopped);\n-                }\n-            },\n-            None => {}\n-        }\n-\n         let crate_name =\n             ::rustc_trans_utils::link::find_crate_name(Some(sess), &krate.attrs, input);\n-\n         let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {\n             phase_2_configure_and_expand(\n                 sess,\n@@ -157,7 +142,29 @@ pub fn compile_input(trans: Box<TransCrate>,\n             )?\n         };\n \n-        write_out_deps(sess, &outputs, &crate_name);\n+        let output_paths = generated_output_paths(sess, &outputs, output.is_some(), &crate_name);\n+\n+        // Ensure the source file isn't accidentally overwritten during compilation.\n+        if let Some(ref input_path) = *input_path {\n+            if sess.opts.will_create_output_file() {\n+                if output_contains_path(&output_paths, input_path) {\n+                    sess.err(&format!(\n+                        \"the input file \\\"{}\\\" would be overwritten by the generated \\\n+                        executable\",\n+                        input_path.display()));\n+                    return Err(CompileIncomplete::Stopped);\n+                }\n+                if let Some(dir_path) = output_conflicts_with_dir(&output_paths) {\n+                    sess.err(&format!(\n+                        \"the generated executable for the input file \\\"{}\\\" conflicts with the \\\n+                        existing directory \\\"{}\\\"\",\n+                        input_path.display(), dir_path.display()));\n+                    return Err(CompileIncomplete::Stopped);\n+                }\n+            }\n+        }\n+\n+        write_out_deps(sess, &outputs, &output_paths);\n         if sess.opts.output_types.contains_key(&OutputType::DepInfo) &&\n             sess.opts.output_types.keys().count() == 1 {\n             return Ok(())\n@@ -1101,16 +1108,22 @@ fn escape_dep_filename(filename: &FileName) -> String {\n     filename.to_string().replace(\" \", \"\\\\ \")\n }\n \n-fn write_out_deps(sess: &Session, outputs: &OutputFilenames, crate_name: &str) {\n+// Returns all the paths that correspond to generated files.\n+fn generated_output_paths(sess: &Session,\n+                          outputs: &OutputFilenames,\n+                          exact_name: bool,\n+                          crate_name: &str) -> Vec<PathBuf> {\n     let mut out_filenames = Vec::new();\n     for output_type in sess.opts.output_types.keys() {\n         let file = outputs.path(*output_type);\n         match *output_type {\n-            OutputType::Exe => {\n-                for output in sess.crate_types.borrow().iter() {\n+            // If the filename has been overridden using `-o`, it will not be modified\n+            // by appending `.rlib`, `.exe`, etc., so we can skip this transformation.\n+            OutputType::Exe if !exact_name => {\n+                for crate_type in sess.crate_types.borrow().iter() {\n                     let p = ::rustc_trans_utils::link::filename_for_input(\n                         sess,\n-                        *output,\n+                        *crate_type,\n                         crate_name,\n                         outputs\n                     );\n@@ -1125,7 +1138,46 @@ fn write_out_deps(sess: &Session, outputs: &OutputFilenames, crate_name: &str) {\n             }\n         }\n     }\n+    out_filenames\n+}\n+\n+// Runs `f` on every output file path and returns the first non-None result, or None if `f`\n+// returns None for every file path.\n+fn check_output<F, T>(output_paths: &Vec<PathBuf>, f: F) -> Option<T>\n+        where F: Fn(&PathBuf) -> Option<T> {\n+            for output_path in output_paths {\n+                if let Some(result) = f(output_path) {\n+                    return Some(result);\n+                }\n+            }\n+            None\n+}\n \n+pub fn output_contains_path(output_paths: &Vec<PathBuf>, input_path: &PathBuf) -> bool {\n+    let input_path = input_path.canonicalize().ok();\n+    if input_path.is_none() {\n+        return false\n+    }\n+    let check = |output_path: &PathBuf| {\n+        if output_path.canonicalize().ok() == input_path {\n+            Some(())\n+        } else { None }\n+    };\n+    check_output(output_paths, check).is_some()\n+}\n+\n+pub fn output_conflicts_with_dir(output_paths: &Vec<PathBuf>) -> Option<PathBuf> {\n+    let check = |output_path: &PathBuf| {\n+        if output_path.is_dir() {\n+            Some(output_path.clone())\n+        } else { None }\n+    };\n+    check_output(output_paths, check)\n+}\n+\n+fn write_out_deps(sess: &Session,\n+                  outputs: &OutputFilenames,\n+                  out_filenames: &Vec<PathBuf>) {\n     // Write out dependency rules to the dep-info file if requested\n     if !sess.opts.output_types.contains_key(&OutputType::DepInfo) {\n         return;\n@@ -1144,7 +1196,7 @@ fn write_out_deps(sess: &Session, outputs: &OutputFilenames, crate_name: &str) {\n                                          .map(|fmap| escape_dep_filename(&fmap.name))\n                                          .collect();\n             let mut file = fs::File::create(&deps_filename)?;\n-            for path in &out_filenames {\n+            for path in out_filenames {\n                 write!(file, \"{}: {}\\n\\n\", path.display(), files.join(\" \"))?;\n             }\n \n@@ -1327,7 +1379,10 @@ pub fn build_output_filenames(input: &Input,\n                 Some(out_file.clone())\n             };\n             if *odir != None {\n-                sess.warn(\"ignoring --out-dir flag due to -o flag.\");\n+                sess.warn(\"ignoring --out-dir flag due to -o flag\");\n+            }\n+            if !sess.opts.cg.extra_filename.is_empty() {\n+                sess.warn(\"ignoring -C extra-filename flag due to -o flag\");\n             }\n \n             let cur_dir = Path::new(\"\");"}, {"sha": "74e5dcfcf36c2656838a9909e29fb0b3392d4680", "filename": "src/test/run-make/output-filename-conflicts-with-directory/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2FMakefile?ref=ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\tcp foo.rs $(TMPDIR)/foo.rs\n+\tmkdir $(TMPDIR)/foo\n+\t$(RUSTC) $(TMPDIR)/foo.rs -o $(TMPDIR)/foo 2>&1 \\\n+\t\t| $(CGREP) -e \"the generated executable for the input file \\\".*foo\\.rs\\\" conflicts with the existing directory \\\".*foo\\\"\""}, {"sha": "3f07b46791d22753d7a5492210b1d50c99c07cc7", "filename": "src/test/run-make/output-filename-conflicts-with-directory/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-conflicts-with-directory%2Ffoo.rs?ref=ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}, {"sha": "6377038b7be745228d3c2173a3ae6ccf263637a1", "filename": "src/test/run-make/output-filename-overwrites-input/Makefile", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2FMakefile?ref=ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "patch": "@@ -2,8 +2,11 @@\n \n all:\n \tcp foo.rs $(TMPDIR)/foo\n-\t$(RUSTC) $(TMPDIR)/foo 2>&1 \\\n+\t$(RUSTC) $(TMPDIR)/foo -o $(TMPDIR)/foo 2>&1 \\\n \t\t| $(CGREP) -e \"the input file \\\".*foo\\\" would be overwritten by the generated executable\"\n+\tcp bar.rs $(TMPDIR)/bar.rlib\n+\t$(RUSTC) $(TMPDIR)/bar.rlib -o $(TMPDIR)/bar.rlib 2>&1 \\\n+\t\t| $(CGREP) -e \"the input file \\\".*bar.rlib\\\" would be overwritten by the generated executable\"\n \t$(RUSTC) foo.rs 2>&1 && $(RUSTC) -Z ls $(TMPDIR)/foo 2>&1\n \tcp foo.rs $(TMPDIR)/foo.rs\n \t$(RUSTC) $(TMPDIR)/foo.rs -o $(TMPDIR)/foo.rs 2>&1 \\"}, {"sha": "8e4e35fdee66ee01ff9945df698104c2c403d902", "filename": "src/test/run-make/output-filename-overwrites-input/bar.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Fbar.rs?ref=ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]"}, {"sha": "3f07b46791d22753d7a5492210b1d50c99c07cc7", "filename": "src/test/run-make/output-filename-overwrites-input/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d839088cbfe5b9bf232f5c27c48703d4f1605/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Foutput-filename-overwrites-input%2Ffoo.rs?ref=ca7d839088cbfe5b9bf232f5c27c48703d4f1605", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}]}