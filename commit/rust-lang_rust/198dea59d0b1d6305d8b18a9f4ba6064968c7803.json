{"sha": "198dea59d0b1d6305d8b18a9f4ba6064968c7803", "node_id": "C_kwDOAAsO6NoAKDE5OGRlYTU5ZDBiMWQ2MzA1ZDhiMThhOWY0YmE2MDY0OTY4Yzc4MDM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-11-14T16:12:12Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-05-31T12:02:36Z"}, "message": "Update test script for src/test/rustdoc to allow to add a filter for the @count command", "tree": {"sha": "83349d61b71ea79b1ee07cfda861b6dae3807bbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83349d61b71ea79b1ee07cfda861b6dae3807bbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/198dea59d0b1d6305d8b18a9f4ba6064968c7803", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/198dea59d0b1d6305d8b18a9f4ba6064968c7803", "html_url": "https://github.com/rust-lang/rust/commit/198dea59d0b1d6305d8b18a9f4ba6064968c7803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/198dea59d0b1d6305d8b18a9f4ba6064968c7803/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5881fd5c953a1af80f870b59de9726ae9ae62b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/5881fd5c953a1af80f870b59de9726ae9ae62b37", "html_url": "https://github.com/rust-lang/rust/commit/5881fd5c953a1af80f870b59de9726ae9ae62b37"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "3ff7e89a759a4526c215c55ec5ad837bd0fbc576", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/198dea59d0b1d6305d8b18a9f4ba6064968c7803/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/198dea59d0b1d6305d8b18a9f4ba6064968c7803/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=198dea59d0b1d6305d8b18a9f4ba6064968c7803", "patch": "@@ -94,6 +94,10 @@\n   in the specified file. The number of occurrences must match the given\n   count.\n \n+* `@count PATH XPATH TEXT COUNT` checks for the occurrence of the given XPath\n+  with the given text in the specified file. The number of occurrences must\n+  match the given count.\n+\n * `@snapshot NAME PATH XPATH` creates a snapshot test named NAME.\n   A snapshot test captures a subtree of the DOM, at the location\n   determined by the XPath, and compares it to a pre-recorded value\n@@ -382,23 +386,25 @@ def check_tree_attr(tree, path, attr, pat, regexp):\n     return ret\n \n \n-def check_tree_text(tree, path, pat, regexp):\n+# Returns the number of occurences matching the regex (`regexp`) and the text (`pat`).\n+def check_tree_text(tree, path, pat, regexp, stop_at_first):\n     path = normalize_xpath(path)\n-    ret = False\n+    match_count = 0\n     try:\n         for e in tree.findall(path):\n             try:\n                 value = flatten(e)\n             except KeyError:\n                 continue\n             else:\n-                ret = check_string(value, pat, regexp)\n-                if ret:\n-                    break\n+                if check_string(value, pat, regexp):\n+                    match_count += 1\n+                    if stop_at_first:\n+                        break\n     except Exception:\n         print('Failed to get path \"{}\"'.format(path))\n         raise\n-    return ret\n+    return match_count\n \n \n def get_tree_count(tree, path):\n@@ -516,6 +522,19 @@ def print_err(lineno, context, err, message=None):\n         stderr(\"\\t{}\".format(context))\n \n \n+def get_nb_matching_elements(cache, c, regexp, stop_at_first):\n+    tree = cache.get_tree(c.args[0])\n+    pat, sep, attr = c.args[1].partition('/@')\n+    if sep:  # attribute\n+        tree = cache.get_tree(c.args[0])\n+        return check_tree_attr(tree, pat, attr, c.args[2], False)\n+    else:  # normalized text\n+        pat = c.args[1]\n+        if pat.endswith('/text()'):\n+            pat = pat[:-7]\n+        return check_tree_text(cache.get_tree(c.args[0]), pat, c.args[2], regexp, stop_at_first)\n+\n+\n ERR_COUNT = 0\n \n \n@@ -536,16 +555,7 @@ def check_command(c, cache):\n                 ret = check_string(cache.get_file(c.args[0]), c.args[1], regexp)\n             elif len(c.args) == 3:  # @has/matches <path> <pat> <match> = XML tree test\n                 cerr = \"`XPATH PATTERN` did not match\"\n-                tree = cache.get_tree(c.args[0])\n-                pat, sep, attr = c.args[1].partition('/@')\n-                if sep:  # attribute\n-                    tree = cache.get_tree(c.args[0])\n-                    ret = check_tree_attr(tree, pat, attr, c.args[2], regexp)\n-                else:  # normalized text\n-                    pat = c.args[1]\n-                    if pat.endswith('/text()'):\n-                        pat = pat[:-7]\n-                    ret = check_tree_text(cache.get_tree(c.args[0]), pat, c.args[2], regexp)\n+                ret = get_nb_matching_elements(cache, c, regexp, True) != 0\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n \n@@ -555,6 +565,11 @@ def check_command(c, cache):\n                 found = get_tree_count(cache.get_tree(c.args[0]), c.args[1])\n                 cerr = \"Expected {} occurrences but found {}\".format(expected, found)\n                 ret = expected == found\n+            elif len(c.args) == 4:  # @count <path> <pat> <text> <count> = count test\n+                expected = int(c.args[3])\n+                found = get_nb_matching_elements(cache, c, False, False)\n+                cerr = \"Expected {} occurrences but found {}\".format(expected, found)\n+                ret = found == expected\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n "}]}