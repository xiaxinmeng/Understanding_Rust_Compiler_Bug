{"sha": "ccd36439f70814073c567bb22fdbcaafcf970b16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZDM2NDM5ZjcwODE0MDczYzU2N2JiMjJmZGJjYWFmY2Y5NzBiMTY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-15T03:03:31Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-15T03:03:31Z"}, "message": "Make Num::from_int a static method", "tree": {"sha": "6fb5ae755f4dafa8b9c7ee256d15008d376baf69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb5ae755f4dafa8b9c7ee256d15008d376baf69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccd36439f70814073c567bb22fdbcaafcf970b16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd36439f70814073c567bb22fdbcaafcf970b16", "html_url": "https://github.com/rust-lang/rust/commit/ccd36439f70814073c567bb22fdbcaafcf970b16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccd36439f70814073c567bb22fdbcaafcf970b16/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78c90653535128b5a7c08d4850d6ef202beba40", "url": "https://api.github.com/repos/rust-lang/rust/commits/f78c90653535128b5a7c08d4850d6ef202beba40", "html_url": "https://github.com/rust-lang/rust/commit/f78c90653535128b5a7c08d4850d6ef202beba40"}], "stats": {"total": 41, "additions": 19, "deletions": 22}, "files": [{"sha": "e1cf9946284a56c2faf888665a66f08a2a743dd2", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=ccd36439f70814073c567bb22fdbcaafcf970b16", "patch": "@@ -180,7 +180,7 @@ impl f32: num::Num {\n     pure fn neg()                -> f32 { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }\n-    pure fn from_int(n: int) -> f32 { return n as f32;    }\n+    static pure fn from_int(n: int) -> f32 { return n as f32;    }\n }\n \n //"}, {"sha": "3abfd44e8380f78908b93e24b3c1a249baf53691", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=ccd36439f70814073c567bb22fdbcaafcf970b16", "patch": "@@ -207,7 +207,7 @@ impl f64: num::Num {\n     pure fn neg()                -> f64 { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }\n-    pure fn from_int(n: int) -> f64 { return n as f64;    }\n+    static pure fn from_int(n: int) -> f64 { return n as f64;    }\n }\n \n //"}, {"sha": "943f075b31974691fe35f427e59606ab5aba9314", "filename": "src/libcore/float.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=ccd36439f70814073c567bb22fdbcaafcf970b16", "patch": "@@ -422,7 +422,7 @@ impl float: num::Num {\n     pure fn neg()                  -> float { return -self;        }\n \n     pure fn to_int()         -> int   { return self as int; }\n-    pure fn from_int(n: int) -> float { return n as float;  }\n+    static pure fn from_int(n: int) -> float { return n as float;  }\n }\n \n #[test]\n@@ -523,14 +523,14 @@ fn test_traits() {\n     fn test<U:num::Num>(ten: &U) {\n         assert (ten.to_int() == 10);\n \n-        let two = ten.from_int(2);\n+        let two = from_int(2);\n         assert (two.to_int() == 2);\n \n-        assert (ten.add(two) == ten.from_int(12));\n-        assert (ten.sub(two) == ten.from_int(8));\n-        assert (ten.mul(two) == ten.from_int(20));\n-        assert (ten.div(two) == ten.from_int(5));\n-        assert (ten.modulo(two) == ten.from_int(0));\n+        assert (ten.add(two) == from_int(12));\n+        assert (ten.sub(two) == from_int(8));\n+        assert (ten.mul(two) == from_int(20));\n+        assert (ten.div(two) == from_int(5));\n+        assert (ten.modulo(two) == from_int(0));\n     }\n \n     test(&10.0);"}, {"sha": "b310b1f34f5f0a21f1f95b8a66c822509a3f2584", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=ccd36439f70814073c567bb22fdbcaafcf970b16", "patch": "@@ -84,7 +84,7 @@ impl T: num::Num {\n     pure fn neg()              -> T { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }\n-    pure fn from_int(n: int) -> T   { return n as T;      }\n+    static pure fn from_int(n: int) -> T   { return n as T;      }\n }\n \n impl T: iter::times {\n@@ -238,15 +238,15 @@ fn test_interfaces() {\n     fn test<U:num::Num>(ten: U) {\n         assert (ten.to_int() == 10);\n \n-        let two = ten.from_int(2);\n+        let two = from_int(2);\n         assert (two.to_int() == 2);\n \n-        assert (ten.add(two) == ten.from_int(12));\n-        assert (ten.sub(two) == ten.from_int(8));\n-        assert (ten.mul(two) == ten.from_int(20));\n-        assert (ten.div(two) == ten.from_int(5));\n-        assert (ten.modulo(two) == ten.from_int(0));\n-        assert (ten.neg() == ten.from_int(-10));\n+        assert (ten.add(two) == from_int(12));\n+        assert (ten.sub(two) == from_int(8));\n+        assert (ten.mul(two) == from_int(20));\n+        assert (ten.div(two) == from_int(5));\n+        assert (ten.modulo(two) == from_int(0));\n+        assert (ten.neg() == from_int(-10));\n     }\n \n     test(10 as T);"}, {"sha": "c414d6190c8f116462332e3c92537c0f7c0bfa2f", "filename": "src/libcore/num.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum.rs?ref=ccd36439f70814073c567bb22fdbcaafcf970b16", "patch": "@@ -1,7 +1,6 @@\n /// An interface for numbers.\n \n trait Num {\n-    // FIXME: Cross-crate overloading doesn't work yet. (#2615)\n     // FIXME: Trait composition. (#2616)\n     pure fn add(&&other: self) -> self;\n     pure fn sub(&&other: self) -> self;\n@@ -11,7 +10,5 @@ trait Num {\n     pure fn neg() -> self;\n \n     pure fn to_int() -> int;\n-    pure fn from_int(n: int) -> self;    // FIXME (#2376) Static functions.\n-    // n.b. #2376 is for classes, not traits, but it could be generalized...\n+    static pure fn from_int(n: int) -> self;\n }\n-"}, {"sha": "0fc35156f3aba5e99770839159354edd79bc4783", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd36439f70814073c567bb22fdbcaafcf970b16/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=ccd36439f70814073c567bb22fdbcaafcf970b16", "patch": "@@ -77,7 +77,7 @@ impl T: num::Num {\n     pure fn neg()              -> T { return -self;        }\n \n     pure fn to_int()         -> int { return self as int; }\n-    pure fn from_int(n: int) -> T   { return n as T;      }\n+    static pure fn from_int(n: int) -> T   { return n as T;      }\n }\n \n impl T: iter::times {"}]}