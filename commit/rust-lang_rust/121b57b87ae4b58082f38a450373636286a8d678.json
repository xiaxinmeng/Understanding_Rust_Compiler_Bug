{"sha": "121b57b87ae4b58082f38a450373636286a8d678", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWI1N2I4N2FlNGI1ODA4MmYzOGE0NTAzNzM2MzYyODZhOGQ2Nzg=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-15T01:52:25Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-29T12:01:33Z"}, "message": "Move some alloc crate top-level items to a new alloc::collections module\n\nThis matches std::collections", "tree": {"sha": "46e6632bf50ca4ab704ec481afc88c50d9c1b4b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e6632bf50ca4ab704ec481afc88c50d9c1b4b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121b57b87ae4b58082f38a450373636286a8d678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121b57b87ae4b58082f38a450373636286a8d678", "html_url": "https://github.com/rust-lang/rust/commit/121b57b87ae4b58082f38a450373636286a8d678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121b57b87ae4b58082f38a450373636286a8d678/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26324d0abe1a8df228f8c758b870a38078549ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/26324d0abe1a8df228f8c758b870a38078549ddc", "html_url": "https://github.com/rust-lang/rust/commit/26324d0abe1a8df228f8c758b870a38078549ddc"}], "stats": {"total": 115, "additions": 69, "deletions": 46}, "files": [{"sha": "fcadcb544c431a9e9ede7bc00912ce3123b2533c", "filename": "src/liballoc/collections/binary_heap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "previous_filename": "src/liballoc/binary_heap.rs"}, {"sha": "e6e454446e232de826fe5a77a4837d4d5a2679e1", "filename": "src/liballoc/collections/btree/map.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "previous_filename": "src/liballoc/btree/map.rs"}, {"sha": "087c9f228d4448bb6c119675ce28eac9e354a6b4", "filename": "src/liballoc/collections/btree/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmod.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "previous_filename": "src/liballoc/btree/mod.rs"}, {"sha": "19bdcbc6ad63ea8d3f7fe7531b3f866fe019440c", "filename": "src/liballoc/collections/btree/node.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fnode.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "previous_filename": "src/liballoc/btree/node.rs"}, {"sha": "bc1272fbc786e7aa4c2c9e39e24345c3a84f68a4", "filename": "src/liballoc/collections/btree/search.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fsearch.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "previous_filename": "src/liballoc/btree/search.rs"}, {"sha": "af9a7074e4a4f96d9916ae126ac8f936879cf2e2", "filename": "src/liballoc/collections/btree/set.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "patch": "@@ -19,7 +19,7 @@ use core::iter::{Peekable, FromIterator, FusedIterator};\n use core::ops::{BitOr, BitAnd, BitXor, Sub, RangeBounds};\n \n use borrow::Borrow;\n-use btree_map::{BTreeMap, Keys};\n+use collections::btree_map::{self, BTreeMap, Keys};\n use super::Recover;\n \n // FIXME(conventions): implement bounded iterators\n@@ -104,7 +104,7 @@ impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {\n-    iter: ::btree_map::IntoIter<T, ()>,\n+    iter: btree_map::IntoIter<T, ()>,\n }\n \n /// An iterator over a sub-range of items in a `BTreeSet`.\n@@ -117,7 +117,7 @@ pub struct IntoIter<T> {\n #[derive(Debug)]\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, T: 'a> {\n-    iter: ::btree_map::Range<'a, T, ()>,\n+    iter: btree_map::Range<'a, T, ()>,\n }\n \n /// A lazy iterator producing elements in the difference of `BTreeSet`s.", "previous_filename": "src/liballoc/btree/set.rs"}, {"sha": "9844de9a57d70274c4bf91cc93d79da0e381acf4", "filename": "src/liballoc/collections/linked_list.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "previous_filename": "src/liballoc/linked_list.rs"}, {"sha": "35c816a1ceb6ed22407705eefb0be8b8b7fa4ea6", "filename": "src/liballoc/collections/mod.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fmod.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Collection types.\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+pub mod binary_heap;\n+mod btree;\n+pub mod linked_list;\n+pub mod vec_deque;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod btree_map {\n+    //! A map based on a B-Tree.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::btree::map::*;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod btree_set {\n+    //! A set based on a B-Tree.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use super::btree::set::*;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::binary_heap::BinaryHeap;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::btree_map::BTreeMap;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::btree_set::BTreeSet;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::linked_list::LinkedList;\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[doc(no_inline)]\n+pub use self::vec_deque::VecDeque;\n+\n+/// An intermediate trait for specialization of `Extend`.\n+#[doc(hidden)]\n+trait SpecExtend<I: IntoIterator> {\n+    /// Extends `self` with the contents of the given iterator.\n+    fn spec_extend(&mut self, iter: I);\n+}"}, {"sha": "4753d36415c4866bd8d231d1374ef2a442c3a8a2", "filename": "src/liballoc/collections/vec_deque.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "patch": "@@ -2891,7 +2891,7 @@ mod tests {\n \n     #[test]\n     fn test_from_vec() {\n-        use super::super::vec::Vec;\n+        use vec::Vec;\n         for cap in 0..35 {\n             for len in 0..cap + 1 {\n                 let mut vec = Vec::with_capacity(cap);\n@@ -2907,7 +2907,7 @@ mod tests {\n \n     #[test]\n     fn test_vec_from_vecdeque() {\n-        use super::super::vec::Vec;\n+        use vec::Vec;\n \n         fn create_vec_and_test_convert(cap: usize, offset: usize, len: usize) {\n             let mut vd = VecDeque::with_capacity(cap);", "previous_filename": "src/liballoc/vec_deque.rs"}, {"sha": "e8be9ecfa36306b0d514b98edeb1669712da7482", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "patch": "@@ -162,59 +162,24 @@ mod boxed {\n }\n #[cfg(test)]\n mod boxed_test;\n+pub mod collections;\n #[cfg(target_has_atomic = \"ptr\")]\n pub mod arc;\n pub mod rc;\n pub mod raw_vec;\n \n-// collections modules\n-pub mod binary_heap;\n-mod btree;\n pub mod borrow;\n pub mod fmt;\n-pub mod linked_list;\n pub mod slice;\n pub mod str;\n pub mod string;\n pub mod vec;\n-pub mod vec_deque;\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub mod btree_map {\n-    //! A map based on a B-Tree.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use btree::map::*;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub mod btree_set {\n-    //! A set based on a B-Tree.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub use btree::set::*;\n-}\n \n #[cfg(not(test))]\n mod std {\n     pub use core::ops;      // RangeFull\n }\n \n-/// An intermediate trait for specialization of `Extend`.\n-#[doc(hidden)]\n-trait SpecExtend<I: IntoIterator> {\n-    /// Extends `self` with the contents of the given iterator.\n-    fn spec_extend(&mut self, iter: I);\n-}\n-\n-#[doc(no_inline)]\n-pub use binary_heap::BinaryHeap;\n-#[doc(no_inline)]\n-pub use btree_map::BTreeMap;\n-#[doc(no_inline)]\n-pub use btree_set::BTreeSet;\n-#[doc(no_inline)]\n-pub use linked_list::LinkedList;\n-#[doc(no_inline)]\n-pub use vec_deque::VecDeque;\n #[doc(no_inline)]\n pub use string::String;\n #[doc(no_inline)]"}, {"sha": "bb99d0401d3cd41e898405b4afdcb4ae1a41b69c", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "patch": "@@ -51,7 +51,6 @@ use boxed::Box;\n use slice::{SliceConcatExt, SliceIndex};\n use string::String;\n use vec::Vec;\n-use vec_deque::VecDeque;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::str::{FromStr, Utf8Error};"}, {"sha": "643426c377b747aaf53036f5da78e7ac9e6af66d", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/121b57b87ae4b58082f38a450373636286a8d678/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121b57b87ae4b58082f38a450373636286a8d678/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=121b57b87ae4b58082f38a450373636286a8d678", "patch": "@@ -424,13 +424,13 @@\n #[doc(hidden)]\n pub use ops::Bound;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{BinaryHeap, BTreeMap, BTreeSet};\n+pub use alloc_crate::collections::{BinaryHeap, BTreeMap, BTreeSet};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{LinkedList, VecDeque};\n+pub use alloc_crate::collections::{LinkedList, VecDeque};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{binary_heap, btree_map, btree_set};\n+pub use alloc_crate::collections::{binary_heap, btree_map, btree_set};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use alloc_crate::{linked_list, vec_deque};\n+pub use alloc_crate::collections::{linked_list, vec_deque};\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::hash_map::HashMap;"}]}