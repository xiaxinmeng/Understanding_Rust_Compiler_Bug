{"sha": "6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMzNkY2U5YzJkNTQ5ZjBjMzJmNzk0MGZmY2NkMGYwZGU4YWY3NGU=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-06-25T11:17:52Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-07-07T08:43:30Z"}, "message": "Profile incremental hashing", "tree": {"sha": "9a72ba9d8e4e317b71e409554ad8718848eca835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a72ba9d8e4e317b71e409554ad8718848eca835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "html_url": "https://github.com/rust-lang/rust/commit/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e344f7747dbd7e7d4b209e3c480deb5979a56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e344f7747dbd7e7d4b209e3c480deb5979a56f", "html_url": "https://github.com/rust-lang/rust/commit/c5e344f7747dbd7e7d4b209e3c480deb5979a56f"}], "stats": {"total": 85, "additions": 70, "deletions": 15}, "files": [{"sha": "531214bc40e64e49ed9dc506ef7df88f491a7c69", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "patch": "@@ -94,31 +94,34 @@ use std::process;\n use std::sync::Arc;\n use std::time::{Duration, Instant};\n \n-use measureme::{EventId, EventIdBuilder, Profiler, SerializableString, StringId};\n+pub use measureme::EventId;\n+use measureme::{EventIdBuilder, Profiler, SerializableString, StringId};\n use parking_lot::RwLock;\n \n bitflags::bitflags! {\n     struct EventFilter: u32 {\n-        const GENERIC_ACTIVITIES = 1 << 0;\n-        const QUERY_PROVIDERS    = 1 << 1;\n-        const QUERY_CACHE_HITS   = 1 << 2;\n-        const QUERY_BLOCKED      = 1 << 3;\n-        const INCR_CACHE_LOADS   = 1 << 4;\n+        const GENERIC_ACTIVITIES  = 1 << 0;\n+        const QUERY_PROVIDERS     = 1 << 1;\n+        const QUERY_CACHE_HITS    = 1 << 2;\n+        const QUERY_BLOCKED       = 1 << 3;\n+        const INCR_CACHE_LOADS    = 1 << 4;\n \n-        const QUERY_KEYS         = 1 << 5;\n-        const FUNCTION_ARGS      = 1 << 6;\n-        const LLVM               = 1 << 7;\n+        const QUERY_KEYS          = 1 << 5;\n+        const FUNCTION_ARGS       = 1 << 6;\n+        const LLVM                = 1 << 7;\n+        const INCR_RESULT_HASHING = 1 << 8;\n \n         const DEFAULT = Self::GENERIC_ACTIVITIES.bits |\n                         Self::QUERY_PROVIDERS.bits |\n                         Self::QUERY_BLOCKED.bits |\n-                        Self::INCR_CACHE_LOADS.bits;\n+                        Self::INCR_CACHE_LOADS.bits |\n+                        Self::INCR_RESULT_HASHING.bits;\n \n         const ARGS = Self::QUERY_KEYS.bits | Self::FUNCTION_ARGS.bits;\n     }\n }\n \n-// keep this in sync with the `-Z self-profile-events` help message in librustc_session/options.rs\n+// keep this in sync with the `-Z self-profile-events` help message in rustc_session/options.rs\n const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"none\", EventFilter::empty()),\n     (\"all\", EventFilter::all()),\n@@ -132,6 +135,7 @@ const EVENT_FILTERS_BY_NAME: &[(&str, EventFilter)] = &[\n     (\"function-args\", EventFilter::FUNCTION_ARGS),\n     (\"args\", EventFilter::ARGS),\n     (\"llvm\", EventFilter::LLVM),\n+    (\"incr-result-hashing\", EventFilter::INCR_RESULT_HASHING),\n ];\n \n /// Something that uniquely identifies a query invocation.\n@@ -248,6 +252,15 @@ impl SelfProfilerRef {\n         })\n     }\n \n+    /// Start profiling with some event filter for a given event. Profiling continues until the\n+    /// TimingGuard returned from this call is dropped.\n+    #[inline(always)]\n+    pub fn generic_activity_with_event(&self, event_id: EventId) -> TimingGuard<'_> {\n+        self.exec(EventFilter::GENERIC_ACTIVITIES, |profiler| {\n+            TimingGuard::start(profiler, profiler.generic_activity_event_kind, event_id)\n+        })\n+    }\n+\n     /// Start profiling a generic activity. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]\n@@ -337,6 +350,19 @@ impl SelfProfilerRef {\n         })\n     }\n \n+    /// Start profiling how long it takes to hash query results for incremental compilation.\n+    /// Profiling continues until the TimingGuard returned from this call is dropped.\n+    #[inline(always)]\n+    pub fn incr_result_hashing(&self) -> TimingGuard<'_> {\n+        self.exec(EventFilter::INCR_RESULT_HASHING, |profiler| {\n+            TimingGuard::start(\n+                profiler,\n+                profiler.incremental_result_hashing_event_kind,\n+                EventId::INVALID,\n+            )\n+        })\n+    }\n+\n     #[inline(always)]\n     fn instant_query_event(\n         &self,\n@@ -364,6 +390,10 @@ impl SelfProfilerRef {\n         }\n     }\n \n+    pub fn get_or_alloc_cached_string(&self, s: &'static str) -> Option<StringId> {\n+        self.profiler.as_ref().map(|p| p.get_or_alloc_cached_string(s))\n+    }\n+\n     #[inline]\n     pub fn enabled(&self) -> bool {\n         self.profiler.is_some()\n@@ -388,6 +418,7 @@ pub struct SelfProfiler {\n     query_event_kind: StringId,\n     generic_activity_event_kind: StringId,\n     incremental_load_result_event_kind: StringId,\n+    incremental_result_hashing_event_kind: StringId,\n     query_blocked_event_kind: StringId,\n     query_cache_hit_event_kind: StringId,\n }\n@@ -408,6 +439,8 @@ impl SelfProfiler {\n         let query_event_kind = profiler.alloc_string(\"Query\");\n         let generic_activity_event_kind = profiler.alloc_string(\"GenericActivity\");\n         let incremental_load_result_event_kind = profiler.alloc_string(\"IncrementalLoadResult\");\n+        let incremental_result_hashing_event_kind =\n+            profiler.alloc_string(\"IncrementalResultHashing\");\n         let query_blocked_event_kind = profiler.alloc_string(\"QueryBlocked\");\n         let query_cache_hit_event_kind = profiler.alloc_string(\"QueryCacheHit\");\n \n@@ -451,6 +484,7 @@ impl SelfProfiler {\n             query_event_kind,\n             generic_activity_event_kind,\n             incremental_load_result_event_kind,\n+            incremental_result_hashing_event_kind,\n             query_blocked_event_kind,\n             query_cache_hit_event_kind,\n         })"}, {"sha": "d629fc2aa81d14cde9881fb5d77586f62d133a00", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "patch": "@@ -1,7 +1,6 @@\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_data_structures::profiling::QueryInvocationId;\n-use rustc_data_structures::profiling::SelfProfilerRef;\n+use rustc_data_structures::profiling::{EventId, QueryInvocationId, SelfProfilerRef};\n use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n@@ -36,6 +35,11 @@ pub struct DepGraph<K: DepKind> {\n     /// each task has a `DepNodeIndex` that uniquely identifies it. This unique\n     /// ID is used for self-profiling.\n     virtual_dep_node_index: Lrc<AtomicU32>,\n+\n+    /// The cached event id for profiling node interning. This saves us\n+    /// from having to look up the event id every time we intern a node\n+    /// which may incur too much overhead.\n+    node_intern_event_id: Option<EventId>,\n }\n \n rustc_index::newtype_index! {\n@@ -130,6 +134,10 @@ impl<K: DepKind> DepGraph<K> {\n         );\n         debug_assert_eq!(_green_node_index, DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE);\n \n+        let node_intern_event_id = profiler\n+            .get_or_alloc_cached_string(\"incr_comp_intern_dep_graph_node\")\n+            .map(EventId::from_label);\n+\n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n                 previous_work_products: prev_work_products,\n@@ -141,11 +149,16 @@ impl<K: DepKind> DepGraph<K> {\n                 colors: DepNodeColorMap::new(prev_graph_node_count),\n             })),\n             virtual_dep_node_index: Lrc::new(AtomicU32::new(0)),\n+            node_intern_event_id,\n         }\n     }\n \n     pub fn new_disabled() -> DepGraph<K> {\n-        DepGraph { data: None, virtual_dep_node_index: Lrc::new(AtomicU32::new(0)) }\n+        DepGraph {\n+            data: None,\n+            virtual_dep_node_index: Lrc::new(AtomicU32::new(0)),\n+            node_intern_event_id: None,\n+        }\n     }\n \n     /// Returns `true` if we are actually building the full dep-graph, and `false` otherwise.\n@@ -244,10 +257,15 @@ impl<K: DepKind> DepGraph<K> {\n             let edges = task_deps.map_or_else(|| smallvec![], |lock| lock.into_inner().reads);\n \n             let mut hcx = dcx.create_stable_hashing_context();\n+            let hashing_timer = dcx.profiler().incr_result_hashing();\n             let current_fingerprint = hash_result(&mut hcx, &result);\n \n             let print_status = cfg!(debug_assertions) && dcx.sess().opts.debugging_opts.dep_tasks;\n \n+            // Get timer for profiling `DepNode` interning\n+            let node_intern_timer = self\n+                .node_intern_event_id\n+                .map(|eid| dcx.profiler().generic_activity_with_event(eid));\n             // Intern the new `DepNode`.\n             let (dep_node_index, prev_and_color) = data.current.intern_node(\n                 dcx.profiler(),\n@@ -257,6 +275,9 @@ impl<K: DepKind> DepGraph<K> {\n                 current_fingerprint,\n                 print_status,\n             );\n+            drop(node_intern_timer);\n+\n+            hashing_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n             if let Some((prev_index, color)) = prev_and_color {\n                 debug_assert!("}, {"sha": "a95b7ff96ee5c1280e8852e0197dd98fc5c8958a", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e33dce9c2d549f0c32f7940ffccd0f0de8af74e/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=6e33dce9c2d549f0c32f7940ffccd0f0de8af74e", "patch": "@@ -1249,7 +1249,7 @@ options! {\n         \"specify the events recorded by the self profiler;\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n-                     query-blocked, incr-cache-load, query-keys, function-args, args, llvm\"),\n+                     query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],"}]}