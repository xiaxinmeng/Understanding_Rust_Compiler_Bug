{"sha": "cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTY0Y2Y4YjViMjUwYmU1MWU5ZTlkODY4M2RjOGFmNjgwMGQ5NWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-07T00:15:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-07T00:15:27Z"}, "message": "Merge remote-tracking branch 'mozilla/incoming' into issue-5910-dyna-freeze", "tree": {"sha": "8a676439bc43c4b74ff537e66dc64c5db683054b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a676439bc43c4b74ff537e66dc64c5db683054b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "html_url": "https://github.com/rust-lang/rust/commit/cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d", "html_url": "https://github.com/rust-lang/rust/commit/ce45f390dd55fbd8ebaf1be07ad1b3b3bb5d2f4d"}, {"sha": "bd5fd6e42a904723c99383e684ddeaf02f01d972", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5fd6e42a904723c99383e684ddeaf02f01d972", "html_url": "https://github.com/rust-lang/rust/commit/bd5fd6e42a904723c99383e684ddeaf02f01d972"}], "stats": {"total": 356, "additions": 344, "deletions": 12}, "files": [{"sha": "0c4afa0566de33541b187a1b16917a4fa420a8d0", "filename": "configure", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "patch": "@@ -439,6 +439,10 @@ then\n     probe CFG_ZCAT             zcat\n fi\n \n+step_msg \"looking for target specific programs\"\n+\n+probe CFG_ADB        adb\n+\n if [ ! -z \"$CFG_PANDOC\" ]\n then\n     PV_MAJOR_MINOR=$(pandoc --version | grep '^pandoc ' |"}, {"sha": "5fa477a790d4f8cb591e143d52f449721371d1b8", "filename": "mk/install.mk", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "patch": "@@ -154,3 +154,76 @@ uninstall:\n         done\n \t$(Q)rm -Rf $(PHL)/rustc\n \t$(Q)rm -f $(PREFIX_ROOT)/share/man/man1/rustc.1\n+\n+# target platform specific variables\n+# for arm-linux-androidabi\n+define DEF_ADB_DEVICE_STATUS\n+CFG_ADB_DEVICE_STATUS=$(1)\n+endef\n+\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n+    $(if $(findstring adb,$(CFG_ADB)), \\\n+      $(if $(findstring device,$(shell adb devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n+        $(info install: install-runtime-target for $(target) enabled \\\n+          $(info install: android device attached) \\\n+          $(eval $(call DEF_ADB_DEVICE_STATUS, true))), \\\n+        $(info install: install-runtime-target for $(target) disabled \\\n+          $(info install: android device not attached) \\\n+          $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n+      ), \\\n+      $(info install: install-runtime-target for $(target) disabled \\\n+        $(info install: adb not found) \\\n+        $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n+    ), \\\n+  ) \\\n+)\n+\n+ifeq (install-runtime-target,$(firstword $(MAKECMDGOALS)))\n+$(eval $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)):;@:)\n+L_TOKEN := $(word 2,$(MAKECMDGOALS))\n+ifeq ($(L_TOKEN),)\n+CFG_RUNTIME_PUSH_DIR=/system/lib\n+else\n+CFG_RUNTIME_PUSH_DIR=$(L_TOKEN)\n+endif\n+\n+ifeq ($(CFG_ADB_DEVICE_STATUS),true)\n+ifdef VERBOSE\n+ ADB = adb $(1)\n+ ADB_PUSH = adb push $(1) $(2)\n+ ADB_SHELL = adb shell $(1) $(2) \n+else\n+ ADB = $(Q)$(call E, adb $(1)) && adb $(1) 1>/dev/null \n+ ADB_PUSH = $(Q)$(call E, adb push $(1)) && adb push $(1) $(2) 1>/dev/null\n+ ADB_SHELL = $(Q)$(call E, adb shell $(1) $(2)) && adb shell $(1) $(2) 1>/dev/null\n+endif\n+\n+define INSTALL_RUNTIME_TARGET_N\n+install-runtime-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n+\t$(Q)$(call ADB_SHELL,mkdir,$(CFG_RUNTIME_PUSH_DIR))\n+\t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(CFG_RUNTIME_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n+\t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(CORELIB_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n+\t$(Q)$(call ADB_PUSH,$$(TL$(1)$(2))/$$(STDLIB_GLOB_$(1)),$(CFG_RUNTIME_PUSH_DIR))\n+endef\n+\n+define INSTALL_RUNTIME_TARGET_CLEANUP_N\n+install-runtime-target-$(1)-cleanup:\n+\t$(Q)$(call ADB,remount)\n+\t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(CFG_RUNTIME_$(1)))\n+\t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(CORELIB_GLOB_$(1)))\n+\t$(Q)$(call ADB_SHELL,rm,$(CFG_RUNTIME_PUSH_DIR)/$(STDLIB_GLOB_$(1)))\n+endef\n+\n+$(eval $(call INSTALL_RUNTIME_TARGET_N,arm-linux-androideabi,$(CFG_BUILD_TRIPLE)))\n+$(eval $(call INSTALL_RUNTIME_TARGET_CLEANUP_N,arm-linux-androideabi))\n+\n+install-runtime-target: \\\n+\tinstall-runtime-target-arm-linux-androideabi-cleanup \\\n+\tinstall-runtime-target-arm-linux-androideabi-host-$(CFG_BUILD_TRIPLE)\n+else\n+install-runtime-target: \n+\t@echo \"No device to install runtime library\"\n+\t@echo \n+endif\n+endif"}, {"sha": "a04ec3e6514039b488eca8ae48f890d076e4cfe2", "filename": "mk/tests.mk", "status": "modified", "additions": 87, "deletions": 5, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "patch": "@@ -92,6 +92,43 @@ endef\n $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(eval $(call DEF_TARGET_COMMANDS,$(target))))\n \n+# Target platform specific variables \n+# for arm-linux-androidabi\n+define DEF_ADB_DEVICE_STATUS\n+CFG_ADB_DEVICE_STATUS=$(1)\n+endef\n+\n+$(foreach target,$(CFG_TARGET_TRIPLES), \\\n+  $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n+    $(if $(findstring adb,$(CFG_ADB)), \\\n+      $(if $(findstring device,$(shell adb devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n+        $(info check: $(target) test enabled \\\n+          $(info check: android device attached) \\\n+          $(eval $(call DEF_ADB_DEVICE_STATUS, true))), \\\n+        $(info check: $(target) test disabled \\\n+          $(info check: android device not attached) \\\n+          $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n+      ), \\\n+      $(info check: $(target) test disabled \\\n+        $(info check: adb not found) \\\n+        $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n+    ), \\\n+  ) \\\n+)\n+\n+ifeq ($(CFG_ADB_DEVICE_STATUS),true)\n+CFG_ADB_TEST_DIR=/data/tmp\n+\n+$(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n+ $(shell adb remount 1>/dev/null) \\\n+ $(shell adb shell mkdir $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n+ $(shell adb push $(CFG_ANDROID_CROSS_PATH)/arm-linux-androideabi/lib/armv7-a/libgnustl_shared.so \\\n+                  $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n+ )\n+else\n+CFG_ADB_TEST_DIR=\n+endif\n+\n \n ######################################################################\n # Main test targets\n@@ -319,11 +356,53 @@ $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t&& touch $$@\n endef\n \n+define DEF_TEST_CRATE_RULES_arm-linux-androideabi\n+check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n+\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t@$$(call E, run: $$< via adb)\n+\t@$(CFG_ADB) push $$< $(CFG_ADB_TEST_DIR)\n+\t@$(CFG_ADB) shell LD_LIBRARY_PATH=$(CFG_ADB_TEST_DIR) \\\n+        $(CFG_ADB_TEST_DIR)/`echo $$< | sed 's/.*\\///'` \\\n+\t\t--logfile $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log > \\\n+\t\ttmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n+\t@cat tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n+\t@touch tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n+\t@$(CFG_ADB) pull $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log tmp/\n+\t@$(CFG_ADB) shell rm $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n+\t@if grep -q \"result: ok\" tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n+\tthen \\\n+\t\trm tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n+\t\ttouch $$@; \\\n+\telse \\\n+\t\trm tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n+\t\texit 101; \\\n+\tfi\n+endef\n+\n+define DEF_TEST_CRATE_RULES_null\n+check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n+\n+$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n+\t\t$(3)/test/$(4)test.stage$(1)-$(2)$$(X_$(2))\n+\t@$$(call E, run: skipped $$< )\n+\t@touch $$@\n+endef\n+\n $(foreach host,$(CFG_HOST_TRIPLES), \\\n  $(foreach target,$(CFG_TARGET_TRIPLES), \\\n   $(foreach stage,$(STAGES), \\\n    $(foreach crate, $(TEST_CRATES), \\\n-    $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate)))))))\n+    $(if $(findstring $(target),$(CFG_BUILD_TRIPLE)), \\\n+     $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))), \\\n+     $(if $(findstring $(target),\"arm-linux-androideabi\"), \\\n+      $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n+       $(eval $(call DEF_TEST_CRATE_RULES_arm-linux-androideabi,$(stage),$(target),$(host),$(crate))), \\\n+       $(eval $(call DEF_TEST_CRATE_RULES_null,$(stage),$(target),$(host),$(crate))) \\\n+      ), \\\n+      $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))) \\\n+     )))))) \n \n \n ######################################################################\n@@ -420,6 +499,9 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\t\t\t\\\n         --aux-base $$(S)src/test/auxiliary/                 \\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n+        --target $(2)                                       \\\n+        --adb-path=$(CFG_ADB)                          \\\n+        --adb-test-dir=$(CFG_ADB_TEST_DIR)                  \\\n         --rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CFG_RUSTC_FLAGS) --target=$(2)\" \\\n         $$(CTEST_TESTARGS)\n \n@@ -454,7 +536,7 @@ ifeq ($$(CTEST_DISABLE_$(4)),)\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n                 $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n-\t@$$(call E, run $(4): $$<)\n+\t@$$(call E, run $(4) [$(2)]: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n \t\t$$(CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n@@ -465,7 +547,7 @@ else\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n                 $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n-\t@$$(call E, run $(4): $$<)\n+\t@$$(call E, run $(4) [$(2)]: $$<)\n \t@$$(call E, warning: tests disabled: $$(CTEST_DISABLE_$(4)))\n \ttouch $$@\n \n@@ -506,7 +588,7 @@ check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n \t        $$(PRETTY_DEPS_$(4))\n-\t@$$(call E, run pretty-rpass: $$<)\n+\t@$$(call E, run pretty-rpass [$(2)]: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n \t\t$$(PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n@@ -533,7 +615,7 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3)\n $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): \\\n \t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3))\t\t\\\n                 doc-$(4)-extract$(3)\n-\t@$$(call E, run doc-$(4): $$<)\n+\t@$$(call E, run doc-$(4) [$(2)]: $$<)\n \t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n                 $$(DOC_TEST_ARGS$(1)-T-$(2)-H-$(3)-doc-$(4)) \\\n \t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),doc-$(4)) \\"}, {"sha": "38289f6274180a63c401d0f1754e9481f2f25f75", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "patch": "@@ -64,6 +64,18 @@ pub struct config {\n     // Run tests using the new runtime\n     newrt: bool,\n \n+    // Target system to be tested\n+    target: ~str,\n+\n+    // Extra parameter to run adb on arm-linux-androideabi\n+    adb_path: ~str,\n+\n+    // Extra parameter to run test sute on arm-linux-androideabi\n+    adb_test_dir: ~str,\n+\n+    // status whether android device available or not\n+    adb_device_status: bool,\n+\n     // Explain what's going on\n     verbose: bool\n "}, {"sha": "6db926b29e394dd7173056c08ce0aba894cb750d", "filename": "src/compiletest/compiletest.rc", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/src%2Fcompiletest%2Fcompiletest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/src%2Fcompiletest%2Fcompiletest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rc?ref=cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "patch": "@@ -60,7 +60,11 @@ pub fn parse_config(args: ~[~str]) -> config {\n           getopts::optflag(~\"verbose\"),\n           getopts::optopt(~\"logfile\"),\n           getopts::optflag(~\"jit\"),\n-          getopts::optflag(~\"newrt\")];\n+          getopts::optflag(~\"newrt\"),\n+          getopts::optopt(~\"target\"),\n+          getopts::optopt(~\"adb-path\"),\n+          getopts::optopt(~\"adb-test-dir\")\n+         ];\n \n     assert!(!args.is_empty());\n     let args_ = vec::tail(args);\n@@ -93,6 +97,18 @@ pub fn parse_config(args: ~[~str]) -> config {\n         rustcflags: getopts::opt_maybe_str(matches, ~\"rustcflags\"),\n         jit: getopts::opt_present(matches, ~\"jit\"),\n         newrt: getopts::opt_present(matches, ~\"newrt\"),\n+        target: opt_str(getopts::opt_maybe_str(matches, ~\"target\")),\n+        adb_path: opt_str(getopts::opt_maybe_str(matches, ~\"adb-path\")),\n+        adb_test_dir: opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")),\n+        adb_device_status:\n+            if (opt_str(getopts::opt_maybe_str(matches, ~\"target\")) ==\n+                ~\"arm-linux-androideabi\") {\n+                if (opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                    ~\"(none)\" &&\n+                    opt_str(getopts::opt_maybe_str(matches, ~\"adb-test-dir\")) !=\n+                    ~\"\") { true }\n+                else { false }\n+            } else { false },\n         verbose: getopts::opt_present(matches, ~\"verbose\")\n     }\n }\n@@ -113,6 +129,10 @@ pub fn log_config(config: config) {\n     logv(c, fmt!(\"rustcflags: %s\", opt_str(config.rustcflags)));\n     logv(c, fmt!(\"jit: %b\", config.jit));\n     logv(c, fmt!(\"newrt: %b\", config.newrt));\n+    logv(c, fmt!(\"target: %s\", config.target));\n+    logv(c, fmt!(\"adb_path: %s\", config.adb_path));\n+    logv(c, fmt!(\"adb_test_dir: %s\", config.adb_test_dir));\n+    logv(c, fmt!(\"adb_device_status: %b\", config.adb_device_status));\n     logv(c, fmt!(\"verbose: %b\", config.verbose));\n     logv(c, fmt!(\"\\n\"));\n }"}, {"sha": "8777eedd7da7e553166295e798e312b81e2ad256", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 147, "deletions": 6, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd164cf8b5b250be51e9e9d8683dc8af6800d95a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=cd164cf8b5b250be51e9e9d8683dc8af6800d95a", "patch": "@@ -77,8 +77,20 @@ fn run_rfail_test(config: config, props: TestProps, testfile: &Path) {\n         fatal_ProcRes(~\"run-fail test isn't valgrind-clean!\", ProcRes);\n     }\n \n-    check_correct_failure_status(ProcRes);\n-    check_error_patterns(props, testfile, ProcRes);\n+    match config.target {\n+\n+        ~\"arm-linux-androideabi\" => {\n+            if (config.adb_device_status) {\n+                check_correct_failure_status(ProcRes);\n+                check_error_patterns(props, testfile, ProcRes);\n+            }\n+        }\n+\n+        _=> {\n+            check_correct_failure_status(ProcRes);\n+            check_error_patterns(props, testfile, ProcRes);\n+        }\n+    }\n }\n \n fn check_correct_failure_status(ProcRes: ProcRes) {\n@@ -483,10 +495,23 @@ fn exec_compiled_test(config: config, props: TestProps,\n         props.exec_env\n     };\n \n-    compose_and_run(config, testfile,\n-                    make_run_args(config, props, testfile),\n-                    env,\n-                    config.run_lib_path, None)\n+    match config.target {\n+\n+        ~\"arm-linux-androideabi\" => {\n+            if (config.adb_device_status) {\n+                _arm_exec_compiled_test(config, props, testfile)\n+            } else {\n+                _dummy_exec_compiled_test(config, props, testfile)\n+            }\n+        }\n+\n+        _=> {\n+            compose_and_run(config, testfile,\n+                            make_run_args(config, props, testfile),\n+                            env,\n+                            config.run_lib_path, None)\n+        }\n+    }\n }\n \n fn compose_and_run_compiler(\n@@ -516,6 +541,17 @@ fn compose_and_run_compiler(\n                      abs_ab.to_str()),\n                 auxres);\n         }\n+\n+        match config.target {\n+\n+            ~\"arm-linux-androideabi\" => {\n+                if (config.adb_device_status) {\n+                    _arm_push_aux_shared_library(config, testfile);\n+                }\n+            }\n+\n+            _=> { }\n+        }\n     }\n \n     compose_and_run(config, testfile, args, ~[],\n@@ -700,3 +736,108 @@ stderr:\\n\\\n     io::stdout().write_str(msg);\n     fail!();\n }\n+\n+fn _arm_exec_compiled_test(config: config, props: TestProps,\n+                      testfile: &Path) -> ProcRes {\n+\n+    let args = make_run_args(config, props, testfile);\n+    let cmdline = make_cmdline(~\"\", args.prog, args.args);\n+\n+    // get bare program string\n+    let mut tvec = ~[];\n+    let tstr = args.prog;\n+    for str::each_split_char(tstr, '/') |ts| { tvec.push(ts.to_owned()) }\n+    let prog_short = tvec.pop();\n+\n+    // copy to target\n+    let copy_result = procsrv::run(~\"\", config.adb_path,\n+        ~[~\"push\", args.prog, config.adb_test_dir],\n+        ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+    if config.verbose {\n+        io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+            config.target, args.prog,\n+            copy_result.out, copy_result.err));\n+    }\n+\n+    // execute program\n+    logv(config, fmt!(\"executing (%s) %s\", config.target, cmdline));\n+\n+    // adb shell dose not forward stdout and stderr of internal result\n+    // to stdout and stderr seperately but to stdout only\n+    let mut newargs_out = ~[];\n+    let mut newargs_err = ~[];\n+    let subargs = args.args;\n+    newargs_out.push(~\"shell\");\n+    newargs_err.push(~\"shell\");\n+\n+    let mut newcmd_out = ~\"\";\n+    let mut newcmd_err = ~\"\";\n+\n+    newcmd_out.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n+        config.adb_test_dir, config.adb_test_dir, prog_short));\n+\n+    newcmd_err.push_str(fmt!(\"LD_LIBRARY_PATH=%s %s/%s\",\n+        config.adb_test_dir, config.adb_test_dir, prog_short));\n+\n+    for vec::each(subargs) |tv| {\n+        newcmd_out.push_str(\" \");\n+        newcmd_err.push_str(\" \");\n+        newcmd_out.push_str(tv.to_owned());\n+        newcmd_err.push_str(tv.to_owned());\n+    }\n+\n+    newcmd_out.push_str(\" 2>/dev/null\");\n+    newcmd_err.push_str(\" 1>/dev/null\");\n+\n+    newargs_out.push(newcmd_out);\n+    newargs_err.push(newcmd_err);\n+\n+    let exe_result_out = procsrv::run(~\"\", config.adb_path,\n+        newargs_out, ~[(~\"\",~\"\")], Some(~\"\"));\n+    let exe_result_err = procsrv::run(~\"\", config.adb_path,\n+        newargs_err, ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+    dump_output(config, testfile, exe_result_out.out, exe_result_err.out);\n+\n+    match exe_result_err.out {\n+        ~\"\" => ProcRes {status: exe_result_out.status, stdout: exe_result_out.out,\n+            stderr: exe_result_err.out, cmdline: cmdline },\n+        _   => ProcRes {status: 101, stdout: exe_result_out.out,\n+            stderr: exe_result_err.out, cmdline: cmdline }\n+    }\n+}\n+\n+fn _dummy_exec_compiled_test(config: config, props: TestProps,\n+                      testfile: &Path) -> ProcRes {\n+\n+    let args = make_run_args(config, props, testfile);\n+    let cmdline = make_cmdline(~\"\", args.prog, args.args);\n+\n+    match config.mode {\n+        mode_run_fail => ProcRes {status: 101, stdout: ~\"\",\n+                                 stderr: ~\"\", cmdline: cmdline},\n+        _             => ProcRes {status: 0, stdout: ~\"\",\n+                                 stderr: ~\"\", cmdline: cmdline}\n+    }\n+}\n+\n+fn _arm_push_aux_shared_library(config: config, testfile: &Path) {\n+    let tstr = aux_output_dir_name(config, testfile).to_str();\n+\n+    for os::list_dir_path(&Path(tstr)).each |file| {\n+\n+        if (file.filetype() == Some(~\".so\")) {\n+\n+            let copy_result = procsrv::run(~\"\", config.adb_path,\n+                ~[~\"push\", file.to_str(), config.adb_test_dir],\n+                ~[(~\"\",~\"\")], Some(~\"\"));\n+\n+            if config.verbose {\n+                io::stdout().write_str(fmt!(\"push (%s) %s %s %s\",\n+                    config.target, file.to_str(),\n+                    copy_result.out, copy_result.err));\n+            }\n+        }\n+    }\n+}"}]}