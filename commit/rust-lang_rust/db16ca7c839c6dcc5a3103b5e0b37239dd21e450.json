{"sha": "db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMTZjYTdjODM5YzZkY2M1YTMxMDNiNWUwYjM3MjM5ZGQyMWU0NTA=", "commit": {"author": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-06T01:35:07Z"}, "committer": {"name": "David LeGare", "email": "excaliburhissheath@gmail.com", "date": "2017-05-06T01:35:07Z"}, "message": "Update documention in windows::ffi", "tree": {"sha": "efb759f3068b890fa02c6da85907af94da14859b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efb759f3068b890fa02c6da85907af94da14859b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "html_url": "https://github.com/rust-lang/rust/commit/db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db16ca7c839c6dcc5a3103b5e0b37239dd21e450/comments", "author": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "committer": {"login": "randomPoison", "id": 1900829, "node_id": "MDQ6VXNlcjE5MDA4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1900829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/randomPoison", "html_url": "https://github.com/randomPoison", "followers_url": "https://api.github.com/users/randomPoison/followers", "following_url": "https://api.github.com/users/randomPoison/following{/other_user}", "gists_url": "https://api.github.com/users/randomPoison/gists{/gist_id}", "starred_url": "https://api.github.com/users/randomPoison/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/randomPoison/subscriptions", "organizations_url": "https://api.github.com/users/randomPoison/orgs", "repos_url": "https://api.github.com/users/randomPoison/repos", "events_url": "https://api.github.com/users/randomPoison/events{/privacy}", "received_events_url": "https://api.github.com/users/randomPoison/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c67bd632e961a57863805e5d0a400f97da9b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c67bd632e961a57863805e5d0a400f97da9b93", "html_url": "https://github.com/rust-lang/rust/commit/49c67bd632e961a57863805e5d0a400f97da9b93"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "cb13595fcd6d80b0ac205deb3f867e3be943d5fd", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/db16ca7c839c6dcc5a3103b5e0b37239dd21e450/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db16ca7c839c6dcc5a3103b5e0b37239dd21e450/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "patch": "@@ -26,8 +26,22 @@ pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n     /// 16-bit code units.\n     ///\n-    /// This is lossless: calling `.encode_wide()` on the resulting string\n+    /// This is lossless: calling [`encode_wide()`] on the resulting string\n     /// will always return the original code units.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// // UTF-16 encoding for \"Unicode\".\n+    /// let source = [0x0055, 0x006E, 0x0069, 0x0063, 0x006F, 0x0064, 0x0065];\n+    ///\n+    /// let string = OsString::from_wide(&source[..]);\n+    /// ```\n+    ///\n+    /// [`encode_wide()`]: ./trait.OsStrExt.html#tymethod.encode_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn from_wide(wide: &[u16]) -> Self;\n }\n@@ -42,11 +56,29 @@ impl OsStringExt for OsString {\n /// Windows-specific extensions to `OsStr`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n-    /// Re-encodes an `OsStr` as a wide character sequence,\n-    /// i.e. potentially ill-formed UTF-16.\n+    /// Re-encodes an `OsStr` as a wide character sequence, i.e. potentially\n+    /// ill-formed UTF-16.\n+    ///\n+    /// This is lossless: calling [`OsString::from_wide()`] and then\n+    /// `encode_wide()` on the result will yield the original code units.\n+    /// Note that the encoding does not add a final null terminator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::ffi::OsString;\n+    /// use std::os::windows::prelude::*;\n+    ///\n+    /// // UTF-16 encoding for \"Unicode\".\n+    /// let source = [0x0055, 0x006E, 0x0069, 0x0063, 0x006F, 0x0064, 0x0065];\n+    ///\n+    /// let string = OsString::from_wide(&source[..]);\n+    ///\n+    /// let result: Vec<u16> = string.encode_wide().collect();\n+    /// assert_eq!(&source[..], &result[..]);\n+    /// ```\n     ///\n-    /// This is lossless. Note that the encoding does not include a final\n-    /// null.\n+    /// [`OsString::from_wide()`]: ./trait.OsStringExt.html#tymethod.from_wide\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn encode_wide(&self) -> EncodeWide;\n }"}, {"sha": "e07acad5e46c48113f863d56f9d878498bbde4ab", "filename": "src/libstd/sys/windows/ext/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db16ca7c839c6dcc5a3103b5e0b37239dd21e450/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db16ca7c839c6dcc5a3103b5e0b37239dd21e450/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fmod.rs?ref=db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Experimental extensions to `std` for Windows.\n+//! Platform-specific extensions to `std` for Windows.\n //!\n-//! For now, this module is limited to extracting handles, file\n-//! descriptors, and sockets, but its functionality will grow over\n-//! time.\n+//! Provides access to platform-level information for Windows, and exposes\n+//! Windows-specific idioms that would otherwise be inappropriate as part\n+//! the core `std` library. These extensions allow developers to use\n+//! `std` types and idioms with Windows in a way that the noraml\n+//! platform-agnostic idioms would not normally support.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "df5e4ef1d886e9f589e413b2ba46d54beb4be1be", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db16ca7c839c6dcc5a3103b5e0b37239dd21e450/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db16ca7c839c6dcc5a3103b5e0b37239dd21e450/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=db16ca7c839c6dcc5a3103b5e0b37239dd21e450", "patch": "@@ -750,6 +750,7 @@ impl<'a> Iterator for Wtf8CodePoints<'a> {\n     }\n }\n \n+/// Generates a wide character sequence for potentially ill-formed UTF-16.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct EncodeWide<'a> {"}]}