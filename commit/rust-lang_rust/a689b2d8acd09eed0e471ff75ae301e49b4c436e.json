{"sha": "a689b2d8acd09eed0e471ff75ae301e49b4c436e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ODliMmQ4YWNkMDllZWQwZTQ3MWZmNzVhZTMwMWU0OWI0YzQzNmU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-06-03T01:55:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-03T01:55:09Z"}, "message": "Rollup merge of #51312 - frewsxcv:clarify-hash-map-entry-get-mut, r=dtolnay\n\nClarify the difference between get_mut and into_mut for OccupiedEntry\n\nThe examples for both hash_map::OccupiedEntry::get_mut and\nhash_map::OccupiedEntry::into_mut were almost identical. This led to some\nconfusion over the difference, namely why you would ever use get_mut when\ninto_mut gives alonger lifetime. Reddit thread:\nhttps://www.reddit.com/r/rust/comments/8a5swr/why_does_hashmaps\n\nThis commit adds two lines and a comment to the example, to show that the\nentry object can be re-used after calling get_mut.\n\nCloses https://github.com/rust-lang/rust/issues/49745", "tree": {"sha": "18c029ea13d8450baef086c05ca16c3066eb4a67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c029ea13d8450baef086c05ca16c3066eb4a67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a689b2d8acd09eed0e471ff75ae301e49b4c436e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbE0p9CRBK7hj4Ov3rIwAAdHIIADuBB99pJU7P48spITm+wvG1\n2XEQaNi2VaJ55FHNG4ZfUzAIRyorAnUZBucNxnwylS9S+pBhJlbpU1Ql8uO/khCq\nwcuuK6+zWYmqeKmQMYo+wNp80Der0hn/lZQslrOHo7LVKWGdTg46mCG6wVt4PHgI\n5UTQNTDLVxukGKM8ZzWbjkERZPhDGZzht/QQf+YUNFxfQRvqjqvqs8ZlQfX66n45\nOFgEw2gx6tNgkuiQuc8bJiFZVRLGk63n5BWWR2Do0HLrH0T625u8XhI7hhl0I22D\n6pX4VJpfJVOlgO3l69dST1E/wPoRS5xEXR+oslRO+sLEkPoXkGh6G0Q6rjp/yKQ=\n=Gyzl\n-----END PGP SIGNATURE-----\n", "payload": "tree 18c029ea13d8450baef086c05ca16c3066eb4a67\nparent 5bbe1ebe00428b77708c4d29989be09963ee2880\nparent dd88f88c02c901dd14e18a65c0b7132c36f530ee\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1527990909 -0600\ncommitter GitHub <noreply@github.com> 1527990909 -0600\n\nRollup merge of #51312 - frewsxcv:clarify-hash-map-entry-get-mut, r=dtolnay\n\nClarify the difference between get_mut and into_mut for OccupiedEntry\n\nThe examples for both hash_map::OccupiedEntry::get_mut and\nhash_map::OccupiedEntry::into_mut were almost identical. This led to some\nconfusion over the difference, namely why you would ever use get_mut when\ninto_mut gives alonger lifetime. Reddit thread:\nhttps://www.reddit.com/r/rust/comments/8a5swr/why_does_hashmaps\n\nThis commit adds two lines and a comment to the example, to show that the\nentry object can be re-used after calling get_mut.\n\nCloses https://github.com/rust-lang/rust/issues/49745\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a689b2d8acd09eed0e471ff75ae301e49b4c436e", "html_url": "https://github.com/rust-lang/rust/commit/a689b2d8acd09eed0e471ff75ae301e49b4c436e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a689b2d8acd09eed0e471ff75ae301e49b4c436e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bbe1ebe00428b77708c4d29989be09963ee2880", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bbe1ebe00428b77708c4d29989be09963ee2880", "html_url": "https://github.com/rust-lang/rust/commit/5bbe1ebe00428b77708c4d29989be09963ee2880"}, {"sha": "dd88f88c02c901dd14e18a65c0b7132c36f530ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd88f88c02c901dd14e18a65c0b7132c36f530ee", "html_url": "https://github.com/rust-lang/rust/commit/dd88f88c02c901dd14e18a65c0b7132c36f530ee"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "9b6f91c039feaa471360c47a83fa452d2cd95694", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a689b2d8acd09eed0e471ff75ae301e49b4c436e/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a689b2d8acd09eed0e471ff75ae301e49b4c436e/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=a689b2d8acd09eed0e471ff75ae301e49b4c436e", "patch": "@@ -2369,6 +2369,11 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n \n     /// Gets a mutable reference to the value in the entry.\n     ///\n+    /// If you need a reference to the `OccupiedEntry` which may outlive the\n+    /// destruction of the `Entry` value, see [`into_mut`].\n+    ///\n+    /// [`into_mut`]: #method.into_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2380,9 +2385,13 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// assert_eq!(map[\"poneyland\"], 12);\n     /// if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n-    ///      *o.get_mut() += 10;\n+    ///     *o.get_mut() += 10;\n+    ///     assert_eq!(*o.get(), 22);\n+    ///\n+    ///     // We can use the same Entry multiple times.\n+    ///     *o.get_mut() += 2;\n     /// }\n-    /// assert_eq!(map[\"poneyland\"], 22);\n+    /// assert_eq!(map[\"poneyland\"], 24);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {\n@@ -2391,6 +2400,10 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n \n     /// Converts the entry into a mutable reference to its value.\n     ///\n+    /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n+    ///\n+    /// [`get_mut`]: #method.get_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "5cbd8891364dd0f0d15c73d2a7df085fceed21c5", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a689b2d8acd09eed0e471ff75ae301e49b4c436e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a689b2d8acd09eed0e471ff75ae301e49b4c436e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=a689b2d8acd09eed0e471ff75ae301e49b4c436e", "patch": "@@ -2250,6 +2250,11 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n \n     /// Gets a mutable reference to the value in the entry.\n     ///\n+    /// If you need a reference to the `OccupiedEntry` which may outlive the\n+    /// destruction of the `Entry` value, see [`into_mut`].\n+    ///\n+    /// [`into_mut`]: #method.into_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2261,10 +2266,14 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// assert_eq!(map[\"poneyland\"], 12);\n     /// if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n-    ///      *o.get_mut() += 10;\n+    ///     *o.get_mut() += 10;\n+    ///     assert_eq!(*o.get(), 22);\n+    ///\n+    ///     // We can use the same Entry multiple times.\n+    ///     *o.get_mut() += 2;\n     /// }\n     ///\n-    /// assert_eq!(map[\"poneyland\"], 22);\n+    /// assert_eq!(map[\"poneyland\"], 24);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn get_mut(&mut self) -> &mut V {\n@@ -2274,6 +2283,10 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// Converts the OccupiedEntry into a mutable reference to the value in the entry\n     /// with a lifetime bound to the map itself.\n     ///\n+    /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n+    ///\n+    /// [`get_mut`]: #method.get_mut\n+    ///\n     /// # Examples\n     ///\n     /// ```"}]}