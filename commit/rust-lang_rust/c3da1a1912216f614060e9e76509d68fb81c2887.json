{"sha": "c3da1a1912216f614060e9e76509d68fb81c2887", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZGExYTE5MTIyMTZmNjE0MDYwZTllNzY1MDlkNjhmYjgxYzI4ODc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-17T04:57:38Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2015-04-21T17:09:26Z"}, "message": "syntax: replace Vec::push_all with stable Vec::extend", "tree": {"sha": "14811d1b916ea492078c6e876b0302bcd8d62449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14811d1b916ea492078c6e876b0302bcd8d62449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3da1a1912216f614060e9e76509d68fb81c2887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3da1a1912216f614060e9e76509d68fb81c2887", "html_url": "https://github.com/rust-lang/rust/commit/c3da1a1912216f614060e9e76509d68fb81c2887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3da1a1912216f614060e9e76509d68fb81c2887/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21143aae94bcb11a4d3b2e2b37e5766edd26a856", "url": "https://api.github.com/repos/rust-lang/rust/commits/21143aae94bcb11a4d3b2e2b37e5766edd26a856", "html_url": "https://github.com/rust-lang/rust/commit/21143aae94bcb11a4d3b2e2b37e5766edd26a856"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "7d353ae9e1d8c4ff21c7643b9e70f10c862ed928", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3da1a1912216f614060e9e76509d68fb81c2887/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3da1a1912216f614060e9e76509d68fb81c2887/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c3da1a1912216f614060e9e76509d68fb81c2887", "patch": "@@ -436,10 +436,11 @@ impl<'a> Parser<'a> {\n             // leave it in the input\n             Ok(())\n         } else {\n-            let mut expected = edible.iter().map(|x| TokenType::Token(x.clone()))\n-                                            .collect::<Vec<_>>();\n-            expected.extend(inedible.iter().map(|x| TokenType::Token(x.clone())));\n-            expected.push_all(&*self.expected_tokens);\n+            let mut expected = edible.iter()\n+                .map(|x| TokenType::Token(x.clone()))\n+                .chain(inedible.iter().map(|x| TokenType::Token(x.clone())))\n+                .chain(self.expected_tokens.iter().cloned())\n+                .collect::<Vec<_>>();\n             expected.sort_by(|a, b| a.to_string().cmp(&b.to_string()));\n             expected.dedup();\n             let expect = tokens_to_string(&expected[..]);\n@@ -490,8 +491,10 @@ impl<'a> Parser<'a> {\n         debug!(\"commit_expr {:?}\", e);\n         if let ExprPath(..) = e.node {\n             // might be unit-struct construction; check for recoverableinput error.\n-            let mut expected = edible.iter().cloned().collect::<Vec<_>>();\n-            expected.push_all(inedible);\n+            let expected = edible.iter()\n+                .cloned()\n+                .chain(inedible.iter().cloned())\n+                .collect::<Vec<_>>();\n             try!(self.check_for_erroneous_unit_struct_expecting(&expected[..]));\n         }\n         self.expect_one_of(edible, inedible)\n@@ -509,8 +512,10 @@ impl<'a> Parser<'a> {\n         if self.last_token\n                .as_ref()\n                .map_or(false, |t| t.is_ident() || t.is_path()) {\n-            let mut expected = edible.iter().cloned().collect::<Vec<_>>();\n-            expected.push_all(&inedible);\n+            let expected = edible.iter()\n+                .cloned()\n+                .chain(inedible.iter().cloned())\n+                .collect::<Vec<_>>();\n             try!(self.check_for_erroneous_unit_struct_expecting(&expected));\n         }\n         self.expect_one_of(edible, inedible)\n@@ -1187,7 +1192,7 @@ impl<'a> Parser<'a> {\n                     debug!(\"parse_trait_methods(): parsing provided method\");\n                     let (inner_attrs, body) =\n                         try!(p.parse_inner_attrs_and_block());\n-                    attrs.push_all(&inner_attrs[..]);\n+                    attrs.extend(inner_attrs.iter().cloned());\n                     Some(body)\n                   }\n "}]}