{"sha": "894b7469d6902bba571024cc0f39c1521156d7a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NGI3NDY5ZDY5MDJiYmE1NzEwMjRjYzBmMzljMTUyMTE1NmQ3YTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-22T11:30:10Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-23T09:49:47Z"}, "message": "Replace most uses of intrinsics in core with builtins\n\nIssue #1981", "tree": {"sha": "2fd3627cb30fdfc64f754c51c8338c34d942b133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd3627cb30fdfc64f754c51c8338c34d942b133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/894b7469d6902bba571024cc0f39c1521156d7a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/894b7469d6902bba571024cc0f39c1521156d7a3", "html_url": "https://github.com/rust-lang/rust/commit/894b7469d6902bba571024cc0f39c1521156d7a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/894b7469d6902bba571024cc0f39c1521156d7a3/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2aace2cca638151a900338a04d6b2aaba1f9ec7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2aace2cca638151a900338a04d6b2aaba1f9ec7", "html_url": "https://github.com/rust-lang/rust/commit/b2aace2cca638151a900338a04d6b2aaba1f9ec7"}], "stats": {"total": 129, "additions": 44, "deletions": 85}, "files": [{"sha": "a7e0f8a3c80b4377e4ca0a3bce3ef1c2d622c290", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 17, "deletions": 30, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=894b7469d6902bba571024cc0f39c1521156d7a3", "patch": "@@ -55,9 +55,9 @@ native mod rustrt {\n                         yield: *libc::uintptr_t);\n }\n \n-#[abi = \"rust-intrinsic\"]\n+#[abi = \"rust-builtin\"]\n native mod rusti {\n-    fn call_with_retptr<T: send>(&&f: fn(*uint)) -> T;\n+    fn init<T>() -> T;\n }\n \n type port_id = int;\n@@ -137,18 +137,13 @@ fn recv<T: send>(p: port<T>) -> T { recv_(***p) }\n \n #[doc = \"Receive on a raw port pointer\"]\n fn recv_<T: send>(p: *rust_port) -> T {\n-    // FIXME: Due to issue 1185 we can't use a return pointer when\n-    // calling C code, and since we can't create our own return\n-    // pointer on the stack, we're going to call a little intrinsic\n-    // that will grab the value of the return pointer, then call this\n-    // function, which we will then use to call the runtime.\n-    fn recv(dptr: *uint, port: *rust_port,\n-            yield: *libc::uintptr_t) unsafe {\n-        rustrt::port_recv(dptr, port, yield);\n-    }\n     let yield = 0u;\n     let yieldp = ptr::addr_of(yield);\n-    let res = rusti::call_with_retptr(bind recv(_, p, yieldp));\n+    let mut res;\n+    res = rusti::init::<T>();\n+    log(debug, ptr::addr_of(res));\n+    rustrt::port_recv(ptr::addr_of(res) as *uint, p, yieldp);\n+\n     if yield != 0u {\n         // Data isn't available yet, so res has not been initialized.\n         task::yield();\n@@ -161,26 +156,18 @@ fn recv_<T: send>(p: *rust_port) -> T {\n }\n \n #[doc = \"Receive on one of two ports\"]\n-fn select2<A: send, B: send>(\n-    p_a: port<A>, p_b: port<B>\n-) -> either<A, B> unsafe {\n-\n-    fn select(dptr: **rust_port, ports: **rust_port,\n-              n_ports: libc::size_t, yield: *libc::uintptr_t) {\n-        rustrt::rust_port_select(dptr, ports, n_ports, yield)\n-    }\n-\n-    let mut ports = [];\n-    ports += [***p_a, ***p_b];\n+fn select2<A: send, B: send>(p_a: port<A>, p_b: port<B>)\n+    -> either<A, B> unsafe {\n+    let ports = [***p_a, ***p_b];\n     let n_ports = 2 as libc::size_t;\n-    let yield = 0u;\n-    let yieldp = ptr::addr_of(yield);\n+    let yield = 0u, yieldp = ptr::addr_of(yield);\n \n-    let resport: *rust_port = vec::as_buf(ports) {|ports|\n-        rusti::call_with_retptr {|retptr|\n-            select(unsafe::reinterpret_cast(retptr), ports, n_ports, yieldp)\n-        }\n-    };\n+    let mut resport: *rust_port;\n+    resport = rusti::init::<*rust_port>();\n+    vec::as_buf(ports) {|ports|\n+        rustrt::rust_port_select(ptr::addr_of(resport), ports, n_ports,\n+                                 yieldp);\n+    }\n \n     if yield != 0u {\n         // Wait for data"}, {"sha": "29369d9b8ca0341ec67834a50d72c2233e7897c2", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=894b7469d6902bba571024cc0f39c1521156d7a3", "patch": "@@ -8,22 +8,28 @@ export null;\n export memcpy;\n export memmove;\n \n+import libc::c_void;\n \n-#[abi = \"rust-intrinsic\"]\n+#[nolink]\n+#[abi = \"cdecl\"]\n+native mod libc_ {\n+    fn memcpy(dest: *c_void, src: *c_void, n: libc::size_t) -> *c_void;\n+    fn memmove(dest: *c_void, src: *c_void, n: libc::size_t) -> *c_void;\n+}\n+\n+#[abi = \"rust-builtin\"]\n native mod rusti {\n     fn addr_of<T>(val: T) -> *T;\n-    fn memcpy<T>(dst: *T, src: *T, count: libc::uintptr_t);\n-    fn memmove<T>(dst: *T, src: *T, count: libc::uintptr_t);\n }\n \n #[doc = \"Get an unsafe pointer to a value\"]\n #[inline(always)]\n-fn addr_of<T>(val: T) -> *T { ret rusti::addr_of(val); }\n+fn addr_of<T>(val: T) -> *T { rusti::addr_of(val) }\n \n #[doc = \"Get an unsafe mutable pointer to a value\"]\n #[inline(always)]\n fn mut_addr_of<T>(val: T) -> *mutable T unsafe {\n-    ret unsafe::reinterpret_cast(rusti::addr_of(val));\n+    unsafe::reinterpret_cast(rusti::addr_of(val))\n }\n \n #[doc = \"Calculate the offset from a pointer\"]\n@@ -51,7 +57,8 @@ and destination may not overlap.\n \"]\n #[inline(always)]\n unsafe fn memcpy<T>(dst: *T, src: *T, count: uint) {\n-    rusti::memcpy(dst, src, count);\n+    let n = count * sys::size_of::<T>();\n+    libc_::memcpy(dst as *c_void, src as *c_void, n);\n }\n \n #[doc = \"\n@@ -62,7 +69,8 @@ and destination may overlap.\n \"]\n #[inline(always)]\n unsafe fn memmove<T>(dst: *T, src: *T, count: uint)  {\n-    rusti::memmove(dst, src, count);\n+    let n = count * sys::size_of::<T>();\n+    libc_::memmove(dst as *c_void, src as *c_void, n);\n }\n \n #[test]"}, {"sha": "93d6a9f0089fd5a95096ff184389cdf16c78af2d", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=894b7469d6902bba571024cc0f39c1521156d7a3", "patch": "@@ -28,13 +28,11 @@ native mod rustrt {\n     fn rust_set_exit_status(code: libc::intptr_t);\n }\n \n-#[abi = \"rust-intrinsic\"]\n+#[abi = \"rust-builtin\"]\n native mod rusti {\n-    fn get_type_desc<T>() -> *type_desc;\n-\n-    // Invokes __builtin_frame_address().\n-    // See <http://gcc.gnu.org/onlinedocs/gcc/Return-Address.html>.\n-    fn frame_address(n: libc::c_uint) -> libc::uintptr_t;\n+    fn get_tydesc<T>() -> *();\n+    fn size_of<T>() -> uint;\n+    fn align_of<T>() -> uint;\n }\n \n #[doc = \"\n@@ -44,7 +42,7 @@ Useful for calling certain function in the Rust runtime or otherwise\n performing dark magick.\n \"]\n fn get_type_desc<T>() -> *type_desc {\n-    ret rusti::get_type_desc::<T>();\n+    rusti::get_tydesc::<T>() as *type_desc\n }\n \n #[doc = \"Get a string representing the platform-dependent last error\"]\n@@ -54,12 +52,12 @@ fn last_os_error() -> str {\n \n #[doc = \"Returns the size of a type\"]\n fn size_of<T>() -> uint unsafe {\n-    ret (*get_type_desc::<T>()).size;\n+    rusti::size_of::<T>()\n }\n \n #[doc = \"Returns the alignment of a type\"]\n fn align_of<T>() -> uint unsafe {\n-    ret (*get_type_desc::<T>()).align;\n+    rusti::align_of::<T>()\n }\n \n #[doc = \"Returns the refcount of a shared box\"]"}, {"sha": "829d53008eafa5c7da5d16ca768f7c7312ac4660", "filename": "src/libcore/unsafe.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/894b7469d6902bba571024cc0f39c1521156d7a3/src%2Flibcore%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funsafe.rs?ref=894b7469d6902bba571024cc0f39c1521156d7a3", "patch": "@@ -2,23 +2,18 @@\n \n export reinterpret_cast, forget;\n \n-#[abi = \"rust-intrinsic\"]\n+#[abi = \"rust-builtin\"]\n native mod rusti {\n-    fn cast<T, U>(src: T) -> U;\n-    fn leak<T>(-thing: T);\n+    fn forget<T>(-x: T);\n+    fn reinterpret_cast<T, U>(e: T) -> U;\n }\n \n #[doc = \"\n Casts the value at `src` to U. The two types must have the same length.\n \"]\n #[inline(always)]\n unsafe fn reinterpret_cast<T, U>(src: T) -> U {\n-    let t1 = sys::get_type_desc::<T>();\n-    let t2 = sys::get_type_desc::<U>();\n-    if (*t1).size != (*t2).size {\n-        fail \"attempt to cast values of differing sizes\";\n-    }\n-    ret rusti::cast(src);\n+    rusti::reinterpret_cast(src)\n }\n \n #[doc =\"\n@@ -30,7 +25,7 @@ can be used for various acts of magick, particularly when using\n reinterpret_cast on managed pointer types.\n \"]\n #[inline(always)]\n-unsafe fn forget<T>(-thing: T) { rusti::leak(thing); }\n+unsafe fn forget<T>(-thing: T) { rusti::forget(thing); }\n \n #[cfg(test)]\n mod tests {"}, {"sha": "a006fea656de7ffe099677276f49f56a3f8bbd59", "filename": "src/test/run-pass/interior-vec.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b2aace2cca638151a900338a04d6b2aaba1f9ec7/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2aace2cca638151a900338a04d6b2aaba1f9ec7/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finterior-vec.rs?ref=b2aace2cca638151a900338a04d6b2aaba1f9ec7", "patch": "@@ -1,29 +0,0 @@\n-import rusti::vec_len;\n-\n-#[abi = \"rust-intrinsic\"]\n-native mod rusti {\n-    fn vec_len<T>(&&v: [T]) -> uint;\n-}\n-\n-fn main() unsafe {\n-    let mut v: [int] = [];\n-    assert (vec_len(v) == 0u); // zero-length\n-    let mut x = [1, 2];\n-    assert (vec_len(x) == 2u); // on stack\n-    let mut y = [1, 2, 3, 4, 5];\n-    assert (vec_len(y) == 5u); // on heap\n-\n-    v += [];\n-    assert (vec_len(v) == 0u); // zero-length append\n-    x += [3];\n-    assert (vec_len(x) == 3u); // on-stack append\n-    y += [6, 7, 8, 9];\n-    assert (vec_len(y) == 9u); // on-heap append\n-\n-    let vv = v + v;\n-    assert (vec_len(vv) == 0u); // zero-length add\n-    let xx = x + [4];\n-    assert (vec_len(xx) == 4u); // on-stack add\n-    let yy = y + [10, 11];\n-    assert (vec_len(yy) == 11u); // on-heap add\n-}"}]}