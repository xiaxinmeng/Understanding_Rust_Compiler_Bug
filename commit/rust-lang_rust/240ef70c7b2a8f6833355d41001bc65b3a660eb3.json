{"sha": "240ef70c7b2a8f6833355d41001bc65b3a660eb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MGVmNzBjN2IyYThmNjgzMzM1NWQ0MTAwMWJjNjViM2E2NjBlYjM=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-07-26T13:01:43Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-01T12:09:19Z"}, "message": "Define forget_type only when relevant", "tree": {"sha": "40daaa09dc39482ea03cfc153b4730c3ea057008", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40daaa09dc39482ea03cfc153b4730c3ea057008"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240ef70c7b2a8f6833355d41001bc65b3a660eb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240ef70c7b2a8f6833355d41001bc65b3a660eb3", "html_url": "https://github.com/rust-lang/rust/commit/240ef70c7b2a8f6833355d41001bc65b3a660eb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240ef70c7b2a8f6833355d41001bc65b3a660eb3/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e614f66800c2b289f6c969dbabd2902e253a5e69", "url": "https://api.github.com/repos/rust-lang/rust/commits/e614f66800c2b289f6c969dbabd2902e253a5e69", "html_url": "https://github.com/rust-lang/rust/commit/e614f66800c2b289f6c969dbabd2902e253a5e69"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "0dcb593096467be93aa45c28839f86d143939fc3", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240ef70c7b2a8f6833355d41001bc65b3a660eb3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ef70c7b2a8f6833355d41001bc65b3a660eb3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=240ef70c7b2a8f6833355d41001bc65b3a660eb3", "patch": "@@ -19,7 +19,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n                 Ok(internal_kv) => return Ok(internal_kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n-                    Err(root) => return Err(root.forget_type()),\n+                    Err(root) => return Err(root),\n                 },\n             }\n         }\n@@ -40,7 +40,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n                 Ok(internal_kv) => return Ok(internal_kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n-                    Err(root) => return Err(root.forget_type()),\n+                    Err(root) => return Err(root),\n                 },\n             }\n         }"}, {"sha": "6e6423c5169455ae3cf7d04dc7f8bca2d6fd63e9", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/240ef70c7b2a8f6833355d41001bc65b3a660eb3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240ef70c7b2a8f6833355d41001bc65b3a660eb3/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=240ef70c7b2a8f6833355d41001bc65b3a660eb3", "patch": "@@ -305,12 +305,6 @@ impl<BorrowType, K, V, Type> NodeRef<BorrowType, K, V, Type> {\n         self.height\n     }\n \n-    /// Removes any static information about whether this node is a `Leaf` or an\n-    /// `Internal` node.\n-    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n-        NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n-    }\n-\n     /// Temporarily takes out another, immutable reference to the same node.\n     fn reborrow(&self) -> NodeRef<marker::Immut<'_>, K, V, Type> {\n         NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n@@ -1362,6 +1356,20 @@ unsafe fn move_edges<K, V>(\n     }\n }\n \n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Leaf> {\n+    /// Removes any static information asserting that this node is a `Leaf` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n+    }\n+}\n+\n+impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::Internal> {\n+    /// Removes any static information asserting that this node is an `Internal` node.\n+    pub fn forget_type(self) -> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n+        NodeRef { height: self.height, node: self.node, root: self.root, _marker: PhantomData }\n+    }\n+}\n+\n impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::Edge> {\n     pub fn forget_node_type(\n         self,"}]}