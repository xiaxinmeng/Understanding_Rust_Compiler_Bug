{"sha": "9be3945be740b12c333a68db6fa33b8878acdeb9", "node_id": "C_kwDOAAsO6NoAKDliZTM5NDViZTc0MGIxMmMzMzNhNjhkYjZmYTMzYjg4NzhhY2RlYjk", "commit": {"author": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-27T12:41:09Z"}, "committer": {"name": "Max Baumann", "email": "max@bmn.dev", "date": "2022-03-30T18:12:58Z"}, "message": "fix existing clippy tests", "tree": {"sha": "68225a712e087ce9479b8527ff48549a61950a20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68225a712e087ce9479b8527ff48549a61950a20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be3945be740b12c333a68db6fa33b8878acdeb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be3945be740b12c333a68db6fa33b8878acdeb9", "html_url": "https://github.com/rust-lang/rust/commit/9be3945be740b12c333a68db6fa33b8878acdeb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be3945be740b12c333a68db6fa33b8878acdeb9/comments", "author": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FoseFx", "id": 22842759, "node_id": "MDQ6VXNlcjIyODQyNzU5", "avatar_url": "https://avatars.githubusercontent.com/u/22842759?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FoseFx", "html_url": "https://github.com/FoseFx", "followers_url": "https://api.github.com/users/FoseFx/followers", "following_url": "https://api.github.com/users/FoseFx/following{/other_user}", "gists_url": "https://api.github.com/users/FoseFx/gists{/gist_id}", "starred_url": "https://api.github.com/users/FoseFx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FoseFx/subscriptions", "organizations_url": "https://api.github.com/users/FoseFx/orgs", "repos_url": "https://api.github.com/users/FoseFx/repos", "events_url": "https://api.github.com/users/FoseFx/events{/privacy}", "received_events_url": "https://api.github.com/users/FoseFx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "528ada958bf51b6a48430f357f6ae77a9e81c650", "url": "https://api.github.com/repos/rust-lang/rust/commits/528ada958bf51b6a48430f357f6ae77a9e81c650", "html_url": "https://github.com/rust-lang/rust/commit/528ada958bf51b6a48430f357f6ae77a9e81c650"}], "stats": {"total": 216, "additions": 109, "deletions": 107}, "files": [{"sha": "f8e1021af0ea11b9bd46acc78dfe62ea9ea4ccaf", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -34,7 +34,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// struct Foo {}\n+    /// struct Foo;\n     /// impl Foo {\n     ///     fn new() -> Foo {\n     ///         Foo {}\n@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// ```\n     /// could be\n     /// ```rust\n-    /// struct Foo {}\n+    /// struct Foo;\n     /// impl Foo {\n     ///     fn new() -> Self {\n     ///         Self {}"}, {"sha": "32dd80246fab44cda2884f4a4f996d1e8f69d3e9", "filename": "tests/ui-toml/struct_excessive_bools/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstruct_excessive_bools%2Ftest.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -4,6 +4,6 @@ struct S {\n     a: bool,\n }\n \n-struct Foo {}\n+struct Foo;\n \n fn main() {}"}, {"sha": "0d65071af15ed1c4694daec5b20dac9baa96e56a", "filename": "tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -2,7 +2,7 @@\n \n use std::string::String;\n \n-struct TestStruct {}\n+struct TestStruct;\n \n impl TestStruct {\n     fn ends_with(self, arg: &str) {}"}, {"sha": "88cfa1f923c0bff23329871fa193c2698e3c65b5", "filename": "tests/ui/crashes/ice-2774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fice-2774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fice-2774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2774.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -8,7 +8,7 @@ pub struct Bar {\n }\n \n #[derive(Eq, PartialEq, Debug, Hash)]\n-pub struct Foo {}\n+pub struct Foo;\n \n #[allow(clippy::implicit_hasher)]\n // This should not cause a \"cannot relate bound region\" ICE."}, {"sha": "4fe92d356c44de5f2d2f24f2292d6135b8b4aa9f", "filename": "tests/ui/crashes/ice-6179.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fice-6179.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fice-6179.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6179.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -4,7 +4,7 @@\n #![warn(clippy::use_self)]\n #![allow(dead_code)]\n \n-struct Foo {}\n+struct Foo;\n \n impl Foo {\n     fn new() -> Self {"}, {"sha": "9cbafc716b5000dc2bd4ac51904fa90369df037a", "filename": "tests/ui/crashes/ice-6792.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fice-6792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fice-6792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6792.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -7,7 +7,7 @@ trait Trait {\n     fn broken() -> Self::Ty;\n }\n \n-struct Foo {}\n+struct Foo;\n \n impl Trait for Foo {\n     type Ty = Foo;"}, {"sha": "376ff97ba6036f3fbbf6336504a73610b910dc4f", "filename": "tests/ui/crashes/needless_lifetimes_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,7 +3,7 @@\n \n trait Foo {}\n \n-struct Bar {}\n+struct Bar;\n \n struct Baz<'a> {\n     bar: &'a Bar,"}, {"sha": "6f9d98bbfe7f341b8b166800314b77495ba0697a", "filename": "tests/ui/crashes/regressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fregressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fcrashes%2Fregressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fregressions.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -6,6 +6,6 @@ pub fn foo(bar: *const u8) {\n \n // Regression test for https://github.com/rust-lang/rust-clippy/issues/4917\n /// <foo\n-struct A {}\n+struct A;\n \n fn main() {}"}, {"sha": "e0b4a2f6942392c575e3f491914dfbf11b7cf6cd", "filename": "tests/ui/default_numeric_fallback_f64.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -134,7 +134,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, f: f64) {}"}, {"sha": "50bbb6eec6c700fdbdb7a54051e48c21715b0dbd", "filename": "tests/ui/default_numeric_fallback_f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_f64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -134,7 +134,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, f: f64) {}"}, {"sha": "bded9e2c0e801723b89547d606120a989078473d", "filename": "tests/ui/default_numeric_fallback_i32.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -133,7 +133,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, x: i32) {}"}, {"sha": "3fceefa551c7843c4d1b54a36f98c3ac86bf2612", "filename": "tests/ui/default_numeric_fallback_i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdefault_numeric_fallback_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -133,7 +133,7 @@ mod enum_ctor {\n }\n \n mod method_calls {\n-    struct StructForMethodCallTest {}\n+    struct StructForMethodCallTest;\n \n     impl StructForMethodCallTest {\n         fn concrete_arg(&self, x: i32) {}"}, {"sha": "7c7a9ecff67f5a56efb13c560ba21417a3cf32d9", "filename": "tests/ui/drop_forget_copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdrop_forget_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fdrop_forget_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_copy.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -5,7 +5,7 @@ use std::mem::{drop, forget};\n use std::vec::Vec;\n \n #[derive(Copy, Clone)]\n-struct SomeStruct {}\n+struct SomeStruct;\n \n struct AnotherStruct {\n     x: u8,"}, {"sha": "f805bcc9ba8af503140bf2cff10433824147971b", "filename": "tests/ui/fn_params_excessive_bools.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Ffn_params_excessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Ffn_params_excessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_params_excessive_bools.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -20,7 +20,7 @@ fn h(_: bool, _: bool, _: bool) {}\n fn e(_: S, _: S, _: Box<S>, _: Vec<u32>) {}\n fn t(_: S, _: S, _: Box<S>, _: Vec<u32>, _: bool, _: bool, _: bool, _: bool) {}\n \n-struct S {}\n+struct S;\n trait Trait {\n     fn f(_: bool, _: bool, _: bool, _: bool);\n     fn g(_: bool, _: bool, _: bool, _: Vec<u32>);"}, {"sha": "2549c9f32f9049326e8ae416a651a81526a23b47", "filename": "tests/ui/implicit_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_clone.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -30,7 +30,7 @@ where\n }\n \n #[derive(Copy, Clone)]\n-struct Kitten {}\n+struct Kitten;\n impl Kitten {\n     // badly named method\n     fn to_vec(self) -> Kitten {\n@@ -44,7 +44,7 @@ impl Borrow<BorrowedKitten> for Kitten {\n     }\n }\n \n-struct BorrowedKitten {}\n+struct BorrowedKitten;\n impl ToOwned for BorrowedKitten {\n     type Owned = Kitten;\n     fn to_owned(&self) -> Kitten {"}, {"sha": "f23671c26e4cc55b43615564d8fd28148b3a6a98", "filename": "tests/ui/iter_nth_zero.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fiter_nth_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fiter_nth_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth_zero.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,7 +3,7 @@\n #![warn(clippy::iter_nth_zero)]\n use std::collections::HashSet;\n \n-struct Foo {}\n+struct Foo;\n \n impl Foo {\n     fn nth(&self, index: usize) -> usize {"}, {"sha": "7c968d49845714574db74baaf2178eff36244467", "filename": "tests/ui/iter_nth_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_nth_zero.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,7 +3,7 @@\n #![warn(clippy::iter_nth_zero)]\n use std::collections::HashSet;\n \n-struct Foo {}\n+struct Foo;\n \n impl Foo {\n     fn nth(&self, index: usize) -> usize {"}, {"sha": "7601b5c66fa35057f69ea8cd989b5df689761e3c", "filename": "tests/ui/large_types_passed_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Flarge_types_passed_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Flarge_types_passed_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_types_passed_by_value.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -37,7 +37,7 @@ pub trait PubLargeTypeDevourer {\n     fn devoure_array_in_public(&self, array: [u8; 6666]);\n }\n \n-struct S {}\n+struct S;\n impl LargeTypeDevourer for S {\n     fn devoure_array(&self, array: [u8; 6666]) {\n         todo!();"}, {"sha": "bb162adc9adb26309f3b0968936a4e378ec0cfe4", "filename": "tests/ui/let_and_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Flet_and_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Flet_and_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_and_return.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -88,7 +88,7 @@ mod no_lint_if_stmt_borrows {\n             ret\n         }\n \n-        struct Bar {}\n+        struct Bar;\n \n         impl Bar {\n             fn new() -> Self {"}, {"sha": "1edb77c748bfb715c0a3ddbcf2db2b19237238c7", "filename": "tests/ui/let_underscore_must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_underscore_must_use.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -26,7 +26,7 @@ fn h() -> u32 {\n     0\n }\n \n-struct S {}\n+struct S;\n \n impl S {\n     #[must_use]"}, {"sha": "b7e46a4a8ccc284cb9b8a5640e00bc944a762314", "filename": "tests/ui/manual_async_fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_async_fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_async_fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -38,7 +38,7 @@ async fn already_async() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n-struct S {}\n+struct S;\n impl S {\n     async fn inh_fut() -> i32 {\n         // NOTE: this code is here just to check that the indentation is correct in the suggested fix"}, {"sha": "b05429da6622500a9b35a606ed4967317419cb85", "filename": "tests/ui/manual_async_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_async_fn.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -52,7 +52,7 @@ async fn already_async() -> impl Future<Output = i32> {\n     async { 42 }\n }\n \n-struct S {}\n+struct S;\n impl S {\n     fn inh_fut() -> impl Future<Output = i32> {\n         async {"}, {"sha": "7d68978216c9c67b8931a9562e96d3e7791930de", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -78,7 +78,7 @@ fn result_unwrap_or() {\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n     // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n-    struct S {}\n+    struct S;\n     impl S {\n         fn method(self) -> Option<i32> {\n             Some(42)"}, {"sha": "b937fe6f977e5b7393d3423b9573ab5b903f89ea", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -102,7 +102,7 @@ fn result_unwrap_or() {\n     };\n \n     // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n-    struct S {}\n+    struct S;\n     impl S {\n         fn method(self) -> Option<i32> {\n             Some(42)"}, {"sha": "e7f07b50f3ab1fbad149d309b3da9c67bd007950", "filename": "tests/ui/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unit_fn.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -1,5 +1,5 @@\n #![allow(unused)]\n-struct Mappable {}\n+struct Mappable;\n \n impl Mappable {\n     pub fn map(&self) {}"}, {"sha": "72e9bf9eb368973e52008a69b6883e8df51e249e", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -99,7 +99,7 @@ pub fn manual_range_contains() {\n }\n \n pub fn use_self() {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Foo {"}, {"sha": "07f8e3888c998274b8fa240a6fac1e72fd7f2e10", "filename": "tests/ui/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_inline.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -7,8 +7,8 @@\n type Typedef = String;\n pub type PubTypedef = String;\n \n-struct Foo {} // ok\n-pub struct PubFoo {} // ok\n+struct Foo; // ok\n+pub struct PubFoo; // ok\n enum FooE {} // ok\n pub enum PubFooE {} // ok\n \n@@ -63,4 +63,4 @@ impl PubFoo {\n \n // do not lint this since users cannot control the external code\n #[derive(Debug)]\n-pub struct S {}\n+pub struct S;"}, {"sha": "ebaa77cc283e0420cd0c7f17085cf998524e6b33", "filename": "tests/ui/module_name_repetitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmodule_name_repetitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fmodule_name_repetitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_name_repetitions.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -7,7 +7,7 @@ mod foo {\n     pub fn foo() {}\n     pub fn foo_bar() {}\n     pub fn bar_foo() {}\n-    pub struct FooCake {}\n+    pub struct FooCake;\n     pub enum CakeFoo {}\n     pub struct Foo7Bar;\n "}, {"sha": "02b43cce2bd4c5b77a46ee1d73088f83ad8732ca", "filename": "tests/ui/needless_arbitrary_self_type_unfixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type_unfixable.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -14,7 +14,7 @@ mod issue_6089 {\n                 fn test(self: &Self);\n             }\n \n-            struct S1 {}\n+            struct S1;\n \n             impl T1 for S1 {\n                 fn test(self: &Self) {}\n@@ -32,7 +32,7 @@ mod issue_6089 {\n         fn call_with_mut_self(&mut self);\n     }\n \n-    struct S2 {}\n+    struct S2;\n \n     // The method's signature will be expanded to:\n     //  fn call_with_mut_self<'life0>(self: &'life0 mut Self) {}"}, {"sha": "1456204ca8692fdd79f65e4540946674c2d9f7e2", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -268,7 +268,7 @@ mod issue4291 {\n \n mod issue2944 {\n     trait Foo {}\n-    struct Bar {}\n+    struct Bar;\n     struct Baz<'a> {\n         bar: &'a Bar,\n     }"}, {"sha": "0a67fb72044c0828a57cd1e5c8b9300d3466a6f1", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -68,7 +68,7 @@ impl FnOnce<(&str,)> for GreetStruct1 {\n     }\n }\n \n-struct GreetStruct2();\n+struct GreetStruct2;\n \n impl FnOnce<(&str,)> for GreetStruct2 {\n     type Output = ();\n@@ -78,7 +78,7 @@ impl FnOnce<(&str,)> for GreetStruct2 {\n     }\n }\n \n-struct GreetStruct3 {}\n+struct GreetStruct3;\n \n impl FnOnce<(&str,)> for GreetStruct3 {\n     type Output = ();"}, {"sha": "6e0d5a87f6807b012fcc55428b5b0aee61882301", "filename": "tests/ui/or_then_unwrap.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2For_then_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2For_then_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,15 +3,15 @@\n #![warn(clippy::or_then_unwrap)]\n #![allow(clippy::map_identity)]\n \n-struct SomeStruct {}\n+struct SomeStruct;\n impl SomeStruct {\n     fn or(self, _: Option<Self>) -> Self {\n         self\n     }\n     fn unwrap(&self) {}\n }\n \n-struct SomeOtherStruct {}\n+struct SomeOtherStruct;\n impl SomeOtherStruct {\n     fn or(self) -> Self {\n         self"}, {"sha": "e406a71d46d00d377024971cee471851e0c3a063", "filename": "tests/ui/or_then_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2For_then_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2For_then_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_then_unwrap.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,15 +3,15 @@\n #![warn(clippy::or_then_unwrap)]\n #![allow(clippy::map_identity)]\n \n-struct SomeStruct {}\n+struct SomeStruct;\n impl SomeStruct {\n     fn or(self, _: Option<Self>) -> Self {\n         self\n     }\n     fn unwrap(&self) {}\n }\n \n-struct SomeOtherStruct {}\n+struct SomeOtherStruct;\n impl SomeOtherStruct {\n     fn or(self) -> Self {\n         self"}, {"sha": "814bbc7af713b77783dbcc741888ed95868ad2f9", "filename": "tests/ui/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -112,7 +112,7 @@ mod issue_5644 {\n     ) {\n     }\n \n-    struct S {}\n+    struct S;\n     impl S {\n         fn allowed(\n             #[allow(clippy::ptr_arg)] _v: &Vec<u32>,"}, {"sha": "f72fc77ab9977dda9e161eb1714b2f912647ca88", "filename": "tests/ui/recursive_format_impl.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Frecursive_format_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Frecursive_format_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursive_format_impl.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -66,7 +66,7 @@ impl std::fmt::Display for D {\n \n // Check for use of self as Display, in Display impl\n // Triggers on direct use of self\n-struct G {}\n+struct G;\n \n impl std::fmt::Display for G {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -75,7 +75,7 @@ impl std::fmt::Display for G {\n }\n \n // Triggers on reference to self\n-struct H {}\n+struct H;\n \n impl std::fmt::Display for H {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -90,7 +90,7 @@ impl std::fmt::Debug for H {\n }\n \n // Triggers on multiple reference to self\n-struct H2 {}\n+struct H2;\n \n impl std::fmt::Display for H2 {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n@@ -99,7 +99,7 @@ impl std::fmt::Display for H2 {\n }\n \n // Doesn't trigger on correct deref\n-struct I {}\n+struct I;\n \n impl std::ops::Deref for I {\n     type Target = str;\n@@ -122,7 +122,7 @@ impl std::fmt::Debug for I {\n }\n \n // Doesn't trigger on multiple correct deref\n-struct I2 {}\n+struct I2;\n \n impl std::ops::Deref for I2 {\n     type Target = str;\n@@ -139,7 +139,7 @@ impl std::fmt::Display for I2 {\n }\n \n // Doesn't trigger on multiple correct deref\n-struct I3 {}\n+struct I3;\n \n impl std::ops::Deref for I3 {\n     type Target = str;\n@@ -156,7 +156,7 @@ impl std::fmt::Display for I3 {\n }\n \n // Does trigger when deref resolves to self\n-struct J {}\n+struct J;\n \n impl std::ops::Deref for J {\n     type Target = str;\n@@ -178,7 +178,7 @@ impl std::fmt::Debug for J {\n     }\n }\n \n-struct J2 {}\n+struct J2;\n \n impl std::ops::Deref for J2 {\n     type Target = str;\n@@ -194,7 +194,7 @@ impl std::fmt::Display for J2 {\n     }\n }\n \n-struct J3 {}\n+struct J3;\n \n impl std::ops::Deref for J3 {\n     type Target = str;\n@@ -210,7 +210,7 @@ impl std::fmt::Display for J3 {\n     }\n }\n \n-struct J4 {}\n+struct J4;\n \n impl std::ops::Deref for J4 {\n     type Target = str;\n@@ -227,7 +227,7 @@ impl std::fmt::Display for J4 {\n }\n \n // Doesn't trigger on Debug from Display\n-struct K {}\n+struct K;\n \n impl std::fmt::Debug for K {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {\n@@ -242,7 +242,7 @@ impl std::fmt::Display for K {\n }\n \n // Doesn't trigger on Display from Debug\n-struct K2 {}\n+struct K2;\n \n impl std::fmt::Debug for K2 {\n     fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {"}, {"sha": "80f94e5f3cbbb278e4d333f7b1887ff3d51ec81e", "filename": "tests/ui/redundant_allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,7 +3,7 @@\n #![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n #![allow(unused_imports)]\n \n-pub struct MyStruct {}\n+pub struct MyStruct;\n \n pub struct SubT<T> {\n     foo: T,"}, {"sha": "e7ed84731c02e4d64ec6e45cd5782d0e632b2416", "filename": "tests/ui/redundant_allocation_fixable.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_allocation_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_allocation_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_allocation_fixable.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -4,7 +4,7 @@\n #![allow(clippy::blacklisted_name, unused_variables, dead_code)]\n #![allow(unused_imports)]\n \n-pub struct MyStruct {}\n+pub struct MyStruct;\n \n pub struct SubT<T> {\n     foo: T,"}, {"sha": "acc8f1e25b6ed3a937186d5146275271ad46c0d8", "filename": "tests/ui/redundant_static_lifetimes.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_static_lifetimes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_static_lifetimes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused)]\n \n #[derive(Debug)]\n-struct Foo {}\n+struct Foo;\n \n const VAR_ONE: &str = \"Test constant #1\"; // ERROR Consider removing 'static.\n "}, {"sha": "f2f0f78659c936516fab442fd624e1ba7f5164a0", "filename": "tests/ui/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_static_lifetimes.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused)]\n \n #[derive(Debug)]\n-struct Foo {}\n+struct Foo;\n \n const VAR_ONE: &'static str = \"Test constant #1\"; // ERROR Consider removing 'static.\n "}, {"sha": "99964f0de075c04a53467f12fd732e2f97a9506e", "filename": "tests/ui/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsame_item_push.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -120,7 +120,7 @@ fn main() {\n     }\n     // Fix #5979\n     #[derive(Clone)]\n-    struct S {}\n+    struct S;\n \n     trait T {}\n     impl T for S {}"}, {"sha": "f5ca91143af25683625d19ba51efe22d070e5233", "filename": "tests/ui/trait_duplication_in_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Ftrait_duplication_in_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -62,7 +62,7 @@ trait BadTrait: Default + Clone {\n }\n \n #[derive(Default, Clone)]\n-struct Life {}\n+struct Life;\n \n impl T for Life {\n     // this should not warn\n@@ -85,7 +85,7 @@ trait Iter: Iterator {\n     }\n }\n \n-struct Foo {}\n+struct Foo;\n \n trait FooIter: Iterator<Item = Foo> {\n     fn bar()"}, {"sha": "e6cf4a0c0b4657fcbdace146bba67d2c78a3406c", "filename": "tests/ui/unit_like_struct_brackets.fixed", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funit_like_struct_brackets.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funit_like_struct_brackets.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_like_struct_brackets.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -2,12 +2,13 @@\n #![warn(clippy::unit_like_struct_brackets)]\n #![allow(dead_code)]\n \n-pub struct MyEmptyStruct;             // should trigger lint\n-struct MyEmptyTupleStruct;            // should trigger lint\n+pub struct MyEmptyStruct; // should trigger lint\n+struct MyEmptyTupleStruct; // should trigger lint\n \n-struct MyStruct {                       // should not trigger lint\n+struct MyStruct {\n+    // should not trigger lint\n     field: u8,\n }\n-struct MyTupleStruct(usize, String);    // should not trigger lint\n+struct MyTupleStruct(usize, String); // should not trigger lint\n \n fn main() {}"}, {"sha": "306e4c207d85299e52c11bf667d020d43af8da2b", "filename": "tests/ui/unit_like_struct_brackets.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funit_like_struct_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funit_like_struct_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_like_struct_brackets.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -2,12 +2,13 @@\n #![warn(clippy::unit_like_struct_brackets)]\n #![allow(dead_code)]\n \n-pub struct MyEmptyStruct {}             // should trigger lint\n-struct MyEmptyTupleStruct();            // should trigger lint\n+pub struct MyEmptyStruct {} // should trigger lint\n+struct MyEmptyTupleStruct(); // should trigger lint\n \n-struct MyStruct {                       // should not trigger lint\n+struct MyStruct {\n+    // should not trigger lint\n     field: u8,\n }\n-struct MyTupleStruct(usize, String);    // should not trigger lint\n+struct MyTupleStruct(usize, String); // should not trigger lint\n \n fn main() {}"}, {"sha": "bafca91917aa431d6747b50a4fee16a4fefe4666", "filename": "tests/ui/unsafe_derive_deserialize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funsafe_derive_deserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funsafe_derive_deserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_derive_deserialize.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -6,37 +6,37 @@ extern crate serde;\n use serde::Deserialize;\n \n #[derive(Deserialize)]\n-pub struct A {}\n+pub struct A;\n impl A {\n     pub unsafe fn new(_a: i32, _b: i32) -> Self {\n         Self {}\n     }\n }\n \n #[derive(Deserialize)]\n-pub struct B {}\n+pub struct B;\n impl B {\n     pub unsafe fn unsafe_method(&self) {}\n }\n \n #[derive(Deserialize)]\n-pub struct C {}\n+pub struct C;\n impl C {\n     pub fn unsafe_block(&self) {\n         unsafe {}\n     }\n }\n \n #[derive(Deserialize)]\n-pub struct D {}\n+pub struct D;\n impl D {\n     pub fn inner_unsafe_fn(&self) {\n         unsafe fn inner() {}\n     }\n }\n \n // Does not derive `Deserialize`, should be ignored\n-pub struct E {}\n+pub struct E;\n impl E {\n     pub unsafe fn new(_a: i32, _b: i32) -> Self {\n         Self {}\n@@ -55,12 +55,12 @@ impl E {\n \n // Does not have methods using `unsafe`, should be ignored\n #[derive(Deserialize)]\n-pub struct F {}\n+pub struct F;\n \n // Check that we honor the `allow` attribute on the ADT\n #[allow(clippy::unsafe_derive_deserialize)]\n #[derive(Deserialize)]\n-pub struct G {}\n+pub struct G;\n impl G {\n     pub fn unsafe_block(&self) {\n         unsafe {}"}, {"sha": "cde4e96d668c2c78b5cb79478702db0e66520e46", "filename": "tests/ui/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -14,8 +14,8 @@ use std::cell::UnsafeCell as Dangerunsafe;\n use std::cell::UnsafeCell as Bombsawayunsafe;\n \n mod mod_with_some_unsafe_things {\n-    pub struct Safe {}\n-    pub struct Unsafe {}\n+    pub struct Safe;\n+    pub struct Unsafe;\n }\n \n use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;"}, {"sha": "08bf58fec7c3eb0d21b18cb6c64334bfbcb88e53", "filename": "tests/ui/unused_self.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_self.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -5,7 +5,7 @@ mod unused_self {\n     use std::pin::Pin;\n     use std::sync::{Arc, Mutex};\n \n-    struct A {}\n+    struct A;\n \n     impl A {\n         fn unused_self_move(self) {}\n@@ -27,23 +27,23 @@ mod unused_self {\n }\n \n mod unused_self_allow {\n-    struct A {}\n+    struct A;\n \n     impl A {\n         // shouldn't trigger\n         #[allow(clippy::unused_self)]\n         fn unused_self_move(self) {}\n     }\n \n-    struct B {}\n+    struct B;\n \n     // shouldn't trigger\n     #[allow(clippy::unused_self)]\n     impl B {\n         fn unused_self_move(self) {}\n     }\n \n-    struct C {}\n+    struct C;\n \n     #[allow(clippy::unused_self)]\n     impl C {\n@@ -120,7 +120,7 @@ mod used_self {\n mod not_applicable {\n     use std::fmt;\n \n-    struct A {}\n+    struct A;\n \n     impl fmt::Debug for A {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "3e62ffe74feddb270f358cc17785175353e34495", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -16,7 +16,7 @@ extern crate proc_macro_derive;\n fn main() {}\n \n mod use_self {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Self {\n@@ -35,7 +35,7 @@ mod use_self {\n }\n \n mod better {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Self {\n@@ -123,7 +123,7 @@ mod macros {\n         };\n     }\n \n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         use_self_expand!(); // Should not lint in local macros\n@@ -134,7 +134,7 @@ mod macros {\n }\n \n mod nesting {\n-    struct Foo {}\n+    struct Foo;\n     impl Foo {\n         fn foo() {\n             #[allow(unused_imports)]\n@@ -209,7 +209,7 @@ mod issue3410 {\n #[allow(clippy::no_effect, path_statements)]\n mod rustfix {\n     mod nested {\n-        pub struct A {}\n+        pub struct A;\n     }\n \n     impl nested::A {\n@@ -227,7 +227,7 @@ mod rustfix {\n }\n \n mod issue3567 {\n-    struct TestStruct {}\n+    struct TestStruct;\n     impl TestStruct {\n         fn from_something() -> Self {\n             Self {}\n@@ -248,7 +248,7 @@ mod issue3567 {\n mod paths_created_by_lowering {\n     use std::ops::Range;\n \n-    struct S {}\n+    struct S;\n \n     impl S {\n         const A: usize = 0;\n@@ -382,7 +382,7 @@ mod issue4305 {\n }\n \n mod lint_at_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     #[allow(clippy::use_self)]\n     impl Foo {\n@@ -400,7 +400,7 @@ mod lint_at_item_level {\n }\n \n mod lint_at_impl_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         #[allow(clippy::use_self)]\n@@ -433,8 +433,8 @@ mod issue4734 {\n mod nested_paths {\n     use std::convert::Into;\n     mod submod {\n-        pub struct B {}\n-        pub struct C {}\n+        pub struct B;\n+        pub struct C;\n \n         impl Into<C> for B {\n             fn into(self) -> C {"}, {"sha": "da2faddee12a71327de345e5c7460659853690dc", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -16,7 +16,7 @@ extern crate proc_macro_derive;\n fn main() {}\n \n mod use_self {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Foo {\n@@ -35,7 +35,7 @@ mod use_self {\n }\n \n mod better {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         fn new() -> Self {\n@@ -123,7 +123,7 @@ mod macros {\n         };\n     }\n \n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         use_self_expand!(); // Should not lint in local macros\n@@ -134,7 +134,7 @@ mod macros {\n }\n \n mod nesting {\n-    struct Foo {}\n+    struct Foo;\n     impl Foo {\n         fn foo() {\n             #[allow(unused_imports)]\n@@ -209,7 +209,7 @@ mod issue3410 {\n #[allow(clippy::no_effect, path_statements)]\n mod rustfix {\n     mod nested {\n-        pub struct A {}\n+        pub struct A;\n     }\n \n     impl nested::A {\n@@ -227,7 +227,7 @@ mod rustfix {\n }\n \n mod issue3567 {\n-    struct TestStruct {}\n+    struct TestStruct;\n     impl TestStruct {\n         fn from_something() -> Self {\n             Self {}\n@@ -248,7 +248,7 @@ mod issue3567 {\n mod paths_created_by_lowering {\n     use std::ops::Range;\n \n-    struct S {}\n+    struct S;\n \n     impl S {\n         const A: usize = 0;\n@@ -382,7 +382,7 @@ mod issue4305 {\n }\n \n mod lint_at_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     #[allow(clippy::use_self)]\n     impl Foo {\n@@ -400,7 +400,7 @@ mod lint_at_item_level {\n }\n \n mod lint_at_impl_item_level {\n-    struct Foo {}\n+    struct Foo;\n \n     impl Foo {\n         #[allow(clippy::use_self)]\n@@ -433,8 +433,8 @@ mod issue4734 {\n mod nested_paths {\n     use std::convert::Into;\n     mod submod {\n-        pub struct B {}\n-        pub struct C {}\n+        pub struct B;\n+        pub struct C;\n \n         impl Into<C> for B {\n             fn into(self) -> C {"}, {"sha": "ce58a80347b558ef7a46b48b2883def9f0455f71", "filename": "tests/ui/useless_attribute.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuseless_attribute.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuseless_attribute.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.fixed?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -42,7 +42,7 @@ mod a {\n     mod b {\n         #[allow(dead_code)]\n         #[allow(unreachable_pub)]\n-        pub struct C {}\n+        pub struct C;\n     }\n \n     #[allow(unreachable_pub)]"}, {"sha": "c82bb9ba07fd731efb14a91a954fb3a132cc6423", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be3945be740b12c333a68db6fa33b8878acdeb9/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=9be3945be740b12c333a68db6fa33b8878acdeb9", "patch": "@@ -42,7 +42,7 @@ mod a {\n     mod b {\n         #[allow(dead_code)]\n         #[allow(unreachable_pub)]\n-        pub struct C {}\n+        pub struct C;\n     }\n \n     #[allow(unreachable_pub)]"}]}