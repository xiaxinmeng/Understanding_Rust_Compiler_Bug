{"sha": "aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZjNlMzE4ZmMzM2VkY2M2ZGJmMDkyMDk5OGMzZjI3ZDAwZGQ4MTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-14T07:05:49Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2017-12-21T22:57:42Z"}, "message": "Do not emit type errors on recovered blocks\n\nWhen a parse error occurs on a block, the parser will recover and create\na block with the statements collected until that point. Now a flag\nstating that a recovery has been performed in this block is propagated\nso that the type checker knows that the type of the block (which will be\nidentified as `()`) shouldn't be checked against the expectation to\nreduce the amount of irrelevant diagnostic errors shown to the user.", "tree": {"sha": "a9dadd8df5519666c6293b0f2b3b59f67ef32f6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9dadd8df5519666c6293b0f2b3b59f67ef32f6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "html_url": "https://github.com/rust-lang/rust/commit/aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b52cc8bf2bcc4cbd223a4b61fe3e35e798f6e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b52cc8bf2bcc4cbd223a4b61fe3e35e798f6e2", "html_url": "https://github.com/rust-lang/rust/commit/b7b52cc8bf2bcc4cbd223a4b61fe3e35e798f6e2"}], "stats": {"total": 151, "additions": 111, "deletions": 40}, "files": [{"sha": "7b48e7801dfb1bf6bd2865328c3f15c97522bf36", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -359,18 +359,21 @@ lifetime elision rules (see below).\n Here are some simple examples of where you'll run into this error:\n \n ```compile_fail,E0106\n-struct Foo { x: &bool }        // error\n-struct Foo<'a> { x: &'a bool } // correct\n+struct Foo1 { x: &bool }\n+              // ^ expected lifetime parameter\n+struct Foo2<'a> { x: &'a bool } // correct\n \n-struct Bar { x: Foo }\n-               ^^^ expected lifetime parameter\n-struct Bar<'a> { x: Foo<'a> } // correct\n+struct Bar1 { x: Foo2 }\n+              // ^^^^ expected lifetime parameter\n+struct Bar2<'a> { x: Foo2<'a> } // correct\n \n-enum Bar { A(u8), B(&bool), }        // error\n-enum Bar<'a> { A(u8), B(&'a bool), } // correct\n+enum Baz1 { A(u8), B(&bool), }\n+                  // ^ expected lifetime parameter\n+enum Baz2<'a> { A(u8), B(&'a bool), } // correct\n \n-type MyStr = &str;        // error\n-type MyStr<'a> = &'a str; // correct\n+type MyStr1 = &str;\n+           // ^ expected lifetime parameter\n+type MyStr2<'a> = &'a str; // correct\n ```\n \n Lifetime elision is a special, limited kind of inference for lifetimes in"}, {"sha": "ece239516cfbcc3209f2e7ac22317084e6f9071f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -1835,6 +1835,7 @@ impl<'a> LoweringContext<'a> {\n             rules: self.lower_block_check_mode(&b.rules),\n             span: b.span,\n             targeted_by_break,\n+            recovered: b.recovered,\n         })\n     }\n \n@@ -2691,6 +2692,7 @@ impl<'a> LoweringContext<'a> {\n                                 rules: hir::DefaultBlock,\n                                 span,\n                                 targeted_by_break: false,\n+                                recovered: blk.recovered,\n                             });\n                             P(self.expr_block(blk, ThinVec::new()))\n                         }\n@@ -3507,6 +3509,7 @@ impl<'a> LoweringContext<'a> {\n             rules: hir::DefaultBlock,\n             span,\n             targeted_by_break: false,\n+            recovered: false,\n         }\n     }\n \n@@ -3610,6 +3613,7 @@ impl<'a> LoweringContext<'a> {\n             stmts,\n             expr: Some(expr),\n             targeted_by_break: false,\n+            recovered: false,\n         });\n         self.expr_block(block, attrs)\n     }"}, {"sha": "144a3fea971143d6b0ef4dc101b5d22adeefeaa4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -625,6 +625,11 @@ pub struct Block {\n     /// currently permitted in Rust itself, but it is generated as\n     /// part of `catch` statements.\n     pub targeted_by_break: bool,\n+    /// If true, don't emit return value type errors as the parser had\n+    /// to recover from a parse error so this block will not have an\n+    /// appropriate type. A parse error will have been emitted so the\n+    /// compilation will never succeed if this is true.\n+    pub recovered: bool,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]"}, {"sha": "b0c7ce3cf2321b0be86e1e16855c30ab4dfbb0c1", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -378,12 +378,14 @@ impl<'gcx> HashStable<StableHashingContext<'gcx>> for hir::Block {\n             rules,\n             span,\n             targeted_by_break,\n+            recovered,\n         } = *self;\n \n         stmts.hash_stable(hcx, hasher);\n         expr.hash_stable(hcx, hasher);\n         rules.hash_stable(hcx, hasher);\n         span.hash_stable(hcx, hasher);\n+        recovered.hash_stable(hcx, hasher);\n         targeted_by_break.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "4b51a0fbb83a84002e3a7a008918248a91df1ee6", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -729,6 +729,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n \n     fn fold_block(&mut self, b: P<ast::Block>) -> P<ast::Block> {\n         fn expr_to_block(rules: ast::BlockCheckMode,\n+                         recovered: bool,\n                          e: Option<P<ast::Expr>>,\n                          sess: &Session) -> P<ast::Block> {\n             P(ast::Block {\n@@ -744,20 +745,21 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n                 rules,\n                 id: sess.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n+                recovered,\n             })\n         }\n \n         if !self.within_static_or_const {\n \n-            let empty_block = expr_to_block(BlockCheckMode::Default, None, self.sess);\n+            let empty_block = expr_to_block(BlockCheckMode::Default, false, None, self.sess);\n             let loop_expr = P(ast::Expr {\n                 node: ast::ExprKind::Loop(empty_block, None),\n                 id: self.sess.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n                 attrs: ast::ThinVec::new(),\n             });\n \n-            expr_to_block(b.rules, Some(loop_expr), self.sess)\n+            expr_to_block(b.rules, b.recovered, Some(loop_expr), self.sess)\n \n         } else {\n             fold::noop_fold_block(b, self)"}, {"sha": "ee0da4b8f36143b867a8c988dee70f7e75df3d1d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -4279,7 +4279,12 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 //\n                 // #41425 -- label the implicit `()` as being the\n                 // \"found type\" here, rather than the \"expected type\".\n-                if !self.diverges.get().always() {\n+                //\n+                // #44579 -- if the block was recovered during parsing,\n+                // the type would be nonsensical and it is not worth it\n+                // to perform the type check, so we avoid generating the\n+                // diagnostic output.\n+                if !self.diverges.get().always() && !blk.recovered {\n                     coerce.coerce_forced_unit(self, &self.misc(blk.span), &mut |err| {\n                         if let Some(expected_ty) = expected.only_has_type(self) {\n                             self.consider_hint_about_removing_semicolon(blk,"}, {"sha": "a8bc8f7e0ce7f409c204fd1355c0cefbc9d4939d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -468,6 +468,7 @@ pub struct Block {\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`\n     pub rules: BlockCheckMode,\n     pub span: Span,\n+    pub recovered: bool,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]"}, {"sha": "8aeebecf66139178c0fef6a2aaa8ae894c7d84d6", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -594,6 +594,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n            id: ast::DUMMY_NODE_ID,\n            rules: BlockCheckMode::Default,\n            span,\n+           recovered: false,\n         })\n     }\n "}, {"sha": "279add5d2991e50c56380b192a5b5f94273fe458", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -851,11 +851,12 @@ fn noop_fold_bounds<T: Folder>(bounds: TyParamBounds, folder: &mut T)\n }\n \n pub fn noop_fold_block<T: Folder>(b: P<Block>, folder: &mut T) -> P<Block> {\n-    b.map(|Block {id, stmts, rules, span}| Block {\n+    b.map(|Block {id, stmts, rules, span, recovered}| Block {\n         id: folder.new_id(id),\n         stmts: stmts.move_flat_map(|s| folder.fold_stmt(s).into_iter()),\n         rules,\n         span: folder.new_span(span),\n+        recovered,\n     })\n }\n "}, {"sha": "f96c7e8598f0bb580b41b8e97b44c932867d713e", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -931,6 +931,7 @@ mod tests {\n                                         id: ast::DUMMY_NODE_ID,\n                                         rules: ast::BlockCheckMode::Default, // no idea\n                                         span: sp(15,21),\n+                                        recovered: false,\n                                     })),\n                             vis: ast::Visibility::Inherited,\n                             span: sp(0,21)})));"}, {"sha": "bb46cef5ee2a2ab0d27b5deb076f06242ea75443", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -4371,13 +4371,15 @@ impl<'a> Parser<'a> {\n     /// Precondition: already parsed the '{'.\n     fn parse_block_tail(&mut self, lo: Span, s: BlockCheckMode) -> PResult<'a, P<Block>> {\n         let mut stmts = vec![];\n+        let mut recovered = false;\n \n         while !self.eat(&token::CloseDelim(token::Brace)) {\n             let stmt = match self.parse_full_stmt(false) {\n                 Err(mut err) => {\n                     err.emit();\n-                    self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Break);\n+                    self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n                     self.eat(&token::CloseDelim(token::Brace));\n+                    recovered = true;\n                     break;\n                 }\n                 Ok(stmt) => stmt,\n@@ -4396,12 +4398,13 @@ impl<'a> Parser<'a> {\n             id: ast::DUMMY_NODE_ID,\n             rules: s,\n             span: lo.to(self.prev_span),\n+            recovered,\n         }))\n     }\n \n     /// Parse a statement, including the trailing semicolon.\n     pub fn parse_full_stmt(&mut self, macro_legacy_warnings: bool) -> PResult<'a, Option<Stmt>> {\n-        let mut stmt = match self.parse_stmt_(macro_legacy_warnings) {\n+        let mut stmt = match self.parse_stmt_without_recovery(macro_legacy_warnings)? {\n             Some(stmt) => stmt,\n             None => return Ok(None),\n         };"}, {"sha": "a3246a21d5ab67935f805b1c249d2ab5e4438559", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -158,5 +158,6 @@ fn call_intrinsic(cx: &ExtCtxt,\n         id: ast::DUMMY_NODE_ID,\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n         span,\n+        recovered: false,\n     }))\n }"}, {"sha": "a752a36ade28d8d22cd4671db0453a8b18dffb19", "filename": "src/test/compile-fail/issue-34334.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fcompile-fail%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fcompile-fail%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-34334.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -11,5 +11,4 @@\n fn main () {\n     let sr: Vec<(u32, _, _) = vec![]; //~ ERROR expected one of `,` or `>`, found `=`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-    //~^ ERROR cannot find value `sr` in this scope\n }"}, {"sha": "1ace57edba3d8152d5d7732f9ccace943e529747", "filename": "src/test/parse-fail/issue-22647.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fparse-fail%2Fissue-22647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fparse-fail%2Fissue-22647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-22647.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -16,7 +16,6 @@ fn main() {\n         println!(\"Y {}\",x);\n         return x;\n     };\n-    //~^ ERROR expected item, found `;`\n \n     caller(bar_handler);\n }"}, {"sha": "7a5b48c5f004db2fd49e0c53b4dca6aa78be457d", "filename": "src/test/parse-fail/keywords-followed-by-double-colon.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fparse-fail%2Fkeywords-followed-by-double-colon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fparse-fail%2Fkeywords-followed-by-double-colon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fkeywords-followed-by-double-colon.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -11,6 +11,10 @@\n // compile-flags: -Z parse-only\n \n fn main() {\n-    struct::foo();  //~ ERROR expected identifier\n-    mut::baz(); //~ ERROR expected expression, found keyword `mut`\n+    struct::foo();\n+    //~^ ERROR expected identifier\n+}\n+fn bar() {\n+    mut::baz();\n+    //~^ ERROR expected expression, found keyword `mut`\n }"}, {"sha": "71d826c67f8bd6320130eb8047c3c9a7572f08ed", "filename": "src/test/parse-fail/mut-patterns.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fparse-fail%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fparse-fail%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmut-patterns.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -15,5 +15,4 @@\n pub fn main() {\n     struct Foo { x: isize }\n     let mut Foo { x: x } = Foo { x: 3 }; //~ ERROR: expected one of `:`, `;`, `=`, or `@`, found `{`\n-    //~^ ERROR expected item, found `=`\n }"}, {"sha": "5afa9a217e05c9d642ff032aa427896a62d634d6", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -131,6 +131,7 @@ fn iter_exprs(depth: usize, f: &mut FnMut(P<Expr>)) {\n                     id: DUMMY_NODE_ID,\n                     rules: BlockCheckMode::Default,\n                     span: DUMMY_SP,\n+                    recovered: false,\n                 });\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::If(e, block.clone(), None)));\n             },"}, {"sha": "5c72c506e6bf009fef18bf29071f984bb452d4a6", "filename": "src/test/ui/impossible_range.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fimpossible_range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fimpossible_range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -17,11 +17,13 @@ pub fn main() {\n     0..;\n     ..1;\n     0..1;\n-\n     ..=; //~ERROR inclusive range with no end\n-    0..=; //~ERROR inclusive range with no end\n+         //~^HELP bounded at the end\n+}\n+\n+fn _foo1() {\n     ..=1;\n     0..=1;\n+    0..=; //~ERROR inclusive range with no end\n+          //~^HELP bounded at the end\n }\n-\n-"}, {"sha": "e0e26bc4db040118edafaf3dacf50fba451f89e3", "filename": "src/test/ui/impossible_range.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fimpossible_range.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fimpossible_range.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpossible_range.stderr?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -1,15 +1,15 @@\n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:21:8\n+  --> $DIR/impossible_range.rs:20:8\n    |\n-21 |     ..=; //~ERROR inclusive range with no end\n+20 |     ..=; //~ERROR inclusive range with no end\n    |        ^\n    |\n    = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/impossible_range.rs:22:9\n+  --> $DIR/impossible_range.rs:27:9\n    |\n-22 |     0..=; //~ERROR inclusive range with no end\n+27 |     0..=; //~ERROR inclusive range with no end\n    |         ^\n    |\n    = help: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)"}, {"sha": "dd6435a954eee7c9c1366b27099216f3afb1179e", "filename": "src/test/ui/issue-44406.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.stderr?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -13,5 +13,3 @@ error: expected type, found keyword `true`\n 18 |     foo!(true); //~ ERROR expected type, found keyword\n    |          ^^^^ expecting a type here because of type ascription\n \n-error: aborting due to 2 previous errors\n-"}, {"sha": "2be89b67d11ba7a81bdd5e225319073c5a70dace", "filename": "src/test/ui/macro-context.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fmacro-context.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fmacro-context.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro-context.stderr?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -43,5 +43,3 @@ error: expected expression, found reserved keyword `typeof`\n 26 |     m!();\n    |     ----- in this macro invocation\n \n-error: aborting due to 4 previous errors\n-"}, {"sha": "f3e3579f2bc4aa871b991319c74f707145dc74f2", "filename": "src/test/ui/mismatched_types/recovered-block.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::env;\n+\n+pub struct Foo {\n+    text: String\n+}\n+\n+pub fn foo() -> Foo {\n+    let args: Vec<String> = env::args().collect();\n+    let text = args[1].clone();\n+\n+    pub Foo { text }\n+}\n+//~^^ ERROR missing `struct` for struct definition\n+\n+pub fn bar() -> Foo {\n+    fn\n+    Foo { text: \"\".to_string() }\n+}\n+//~^^ ERROR expected one of `(` or `<`, found `{`\n+\n+fn main() {}"}, {"sha": "dcaf2812f5993ccc3c6f247475b17146491ac949", "filename": "src/test/ui/mismatched_types/recovered-block.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Frecovered-block.stderr?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -0,0 +1,18 @@\n+error: missing `struct` for struct definition\n+  --> $DIR/recovered-block.rs:21:8\n+   |\n+21 |     pub Foo { text }\n+   |        ^\n+help: add `struct` here to parse `Foo` as a public struct\n+   |\n+21 |     pub struct Foo { text }\n+   |         ^^^^^^\n+\n+error: expected one of `(` or `<`, found `{`\n+  --> $DIR/recovered-block.rs:27:9\n+   |\n+27 |     Foo { text: \"\".to_string() }\n+   |         ^ expected one of `(` or `<` here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "c88f823839dad4db40b3290d35645ad8f0b4def0", "filename": "src/test/ui/resolve/token-error-correct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -16,4 +16,3 @@ fn main() {\n }\n //~^ ERROR: incorrect close delimiter: `}`\n //~| ERROR: incorrect close delimiter: `}`\n-//~| ERROR: expected expression, found `)`"}, {"sha": "e26f0e85aa676f10ee258136b5a8006ad0cb1c71", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aaf3e318fc33edcc6dbf0920998c3f27d00dd818/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=aaf3e318fc33edcc6dbf0920998c3f27d00dd818", "patch": "@@ -28,11 +28,5 @@ error: expected expression, found `;`\n 14 |     foo(bar(;\n    |             ^\n \n-error: expected expression, found `)`\n-  --> $DIR/token-error-correct.rs:16:1\n-   |\n-16 | }\n-   | ^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}]}