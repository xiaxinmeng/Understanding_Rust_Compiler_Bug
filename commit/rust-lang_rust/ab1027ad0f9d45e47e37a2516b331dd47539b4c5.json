{"sha": "ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "node_id": "C_kwDOAAsO6NoAKGFiMTAyN2FkMGY5ZDQ1ZTQ3ZTM3YTI1MTZiMzMxZGQ0NzUzOWI0YzU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-07T09:41:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-07T09:41:06Z"}, "message": "Rollup merge of #97058 - bjorn3:multi_artifact_work_products, r=nagisa\n\nVarious refactors to the incr comp workproduct handling\n\nThis is the result of me looking into adding support for having multiple object files for a single codegen unit to incr comp. This is necessary to support inline assembly in cg_clif without requiring partial linking which is not supported on Windows and seems to fail on macOS for some reason. Cg_clif uses an external assembler to handle inline asm and thus produces one object file with regular functions and one object file containing compiled inline asm for each codegen unit which uses inline asm. Current incr comp can't handle this. This PR doesn't yet add support for this, but it makes it easier to do so.", "tree": {"sha": "25a5915fb959bdaf8acff190cf382abba42422df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25a5915fb959bdaf8acff190cf382abba42422df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJinx0zCRBK7hj4Ov3rIwAAhBcIAJpdfM/iN9/WvJ/+oJ1/I1pw\nacgOz2uz1O297fEiWW0oU9qPidmXMHrJo8JBSt6r02NU/ujZu0woO28eMYVRjd4d\nstksUZLFjQ0kOkvXv/Hhte9+68ewPCXKxTYov0ek7t/7khXXsIvwlOHjhQWkfy9s\nSHNVL6Jw4wf8KQVS8+3nNDI6SVTjQ+eqAUq2BlF+ZrqhTytqYj6NFhhLcsKXXsEt\ngGpMiHHCSiXfKeMzUn5Rfvt1akOz8ww6xuGttOPbu/5eJptaXAxEFcdYjBOIZTTB\ntk56TduIqDTbWskW2EHASawl4TTDzY5cazvO466HSlR9CqWKjgRTclUL+cidy9c=\n=nT7z\n-----END PGP SIGNATURE-----\n", "payload": "tree 25a5915fb959bdaf8acff190cf382abba42422df\nparent bb55bd449e65e611da928560d948982d73e50027\nparent e16c3b4a44214add436e9834d2090a7288eba3a3\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654594866 +0200\ncommitter GitHub <noreply@github.com> 1654594866 +0200\n\nRollup merge of #97058 - bjorn3:multi_artifact_work_products, r=nagisa\n\nVarious refactors to the incr comp workproduct handling\n\nThis is the result of me looking into adding support for having multiple object files for a single codegen unit to incr comp. This is necessary to support inline assembly in cg_clif without requiring partial linking which is not supported on Windows and seems to fail on macOS for some reason. Cg_clif uses an external assembler to handle inline asm and thus produces one object file with regular functions and one object file containing compiled inline asm for each codegen unit which uses inline asm. Current incr comp can't handle this. This PR doesn't yet add support for this, but it makes it easier to do so.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "html_url": "https://github.com/rust-lang/rust/commit/ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb55bd449e65e611da928560d948982d73e50027", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb55bd449e65e611da928560d948982d73e50027", "html_url": "https://github.com/rust-lang/rust/commit/bb55bd449e65e611da928560d948982d73e50027"}, {"sha": "e16c3b4a44214add436e9834d2090a7288eba3a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16c3b4a44214add436e9834d2090a7288eba3a3", "html_url": "https://github.com/rust-lang/rust/commit/e16c3b4a44214add436e9834d2090a7288eba3a3"}], "stats": {"total": 177, "additions": 75, "deletions": 102}, "files": [{"sha": "05457ce15e9a7d8bfce0d6747bd888373e25f033", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -66,11 +66,7 @@ fn emit_module(\n     let work_product = if backend_config.disable_incr_cache {\n         None\n     } else {\n-        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(\n-            tcx.sess,\n-            &name,\n-            &Some(tmp_file.clone()),\n-        )\n+        rustc_incremental::copy_cgu_workproduct_to_incr_comp_cache_dir(tcx.sess, &name, &tmp_file)\n     };\n \n     ModuleCodegenResult(\n@@ -84,29 +80,24 @@ fn reuse_workproduct_for_cgu(\n     cgu: &CodegenUnit<'_>,\n     work_products: &mut FxHashMap<WorkProductId, WorkProduct>,\n ) -> CompiledModule {\n-    let mut object = None;\n-    let work_product = cgu.work_product(tcx);\n-    if let Some(saved_file) = &work_product.saved_file {\n-        let obj_out =\n-            tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n-        object = Some(obj_out.clone());\n-        let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &saved_file);\n-        if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n-            tcx.sess.err(&format!(\n-                \"unable to copy {} to {}: {}\",\n-                source_file.display(),\n-                obj_out.display(),\n-                err\n-            ));\n-        }\n+    let work_product = cgu.previous_work_product(tcx);\n+    let obj_out = tcx.output_filenames(()).temp_path(OutputType::Object, Some(cgu.name().as_str()));\n+    let source_file = rustc_incremental::in_incr_comp_dir_sess(&tcx.sess, &work_product.saved_file);\n+    if let Err(err) = rustc_fs_util::link_or_copy(&source_file, &obj_out) {\n+        tcx.sess.err(&format!(\n+            \"unable to copy {} to {}: {}\",\n+            source_file.display(),\n+            obj_out.display(),\n+            err\n+        ));\n     }\n \n     work_products.insert(cgu.work_product_id(), work_product);\n \n     CompiledModule {\n         name: cgu.name().to_string(),\n         kind: ModuleKind::Regular,\n-        object,\n+        object: Some(obj_out),\n         dwarf_object: None,\n         bytecode: None,\n     }"}, {"sha": "02c7c1a435fae2537b260f8cb9e88b27719f720d", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -494,12 +494,12 @@ fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n     let _timer = sess.timer(\"copy_all_cgu_workproducts_to_incr_comp_cache_dir\");\n \n     for module in compiled_modules.modules.iter().filter(|m| m.kind == ModuleKind::Regular) {\n-        let path = module.object.as_ref().cloned();\n-\n-        if let Some((id, product)) =\n-            copy_cgu_workproduct_to_incr_comp_cache_dir(sess, &module.name, &path)\n-        {\n-            work_products.insert(id, product);\n+        if let Some(path) = &module.object {\n+            if let Some((id, product)) =\n+                copy_cgu_workproduct_to_incr_comp_cache_dir(sess, &module.name, path)\n+            {\n+                work_products.insert(id, product);\n+            }\n         }\n     }\n \n@@ -853,35 +853,31 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n     module: CachedModuleCodegen,\n     module_config: &ModuleConfig,\n ) -> WorkItemResult<B> {\n+    assert!(module_config.emit_obj != EmitObj::None);\n+\n     let incr_comp_session_dir = cgcx.incr_comp_session_dir.as_ref().unwrap();\n-    let mut object = None;\n-    if let Some(saved_file) = module.source.saved_file {\n-        let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, Some(&module.name));\n-        object = Some(obj_out.clone());\n-        let source_file = in_incr_comp_dir(&incr_comp_session_dir, &saved_file);\n-        debug!(\n-            \"copying pre-existing module `{}` from {:?} to {}\",\n-            module.name,\n-            source_file,\n-            obj_out.display()\n-        );\n-        if let Err(err) = link_or_copy(&source_file, &obj_out) {\n-            let diag_handler = cgcx.create_diag_handler();\n-            diag_handler.err(&format!(\n-                \"unable to copy {} to {}: {}\",\n-                source_file.display(),\n-                obj_out.display(),\n-                err\n-            ));\n-        }\n+    let obj_out = cgcx.output_filenames.temp_path(OutputType::Object, Some(&module.name));\n+    let source_file = in_incr_comp_dir(&incr_comp_session_dir, &module.source.saved_file);\n+    debug!(\n+        \"copying pre-existing module `{}` from {:?} to {}\",\n+        module.name,\n+        source_file,\n+        obj_out.display()\n+    );\n+    if let Err(err) = link_or_copy(&source_file, &obj_out) {\n+        let diag_handler = cgcx.create_diag_handler();\n+        diag_handler.err(&format!(\n+            \"unable to copy {} to {}: {}\",\n+            source_file.display(),\n+            obj_out.display(),\n+            err\n+        ));\n     }\n \n-    assert_eq!(object.is_some(), module_config.emit_obj != EmitObj::None);\n-\n     WorkItemResult::Compiled(CompiledModule {\n         name: module.name,\n         kind: ModuleKind::Regular,\n-        object,\n+        object: Some(obj_out),\n         dwarf_object: None,\n         bytecode: None,\n     })"}, {"sha": "c52a908e90f45219bc795897a29929f6e0115267", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -716,7 +716,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                     &ongoing_codegen.coordinator_send,\n                     CachedModuleCodegen {\n                         name: cgu.name().to_string(),\n-                        source: cgu.work_product(tcx),\n+                        source: cgu.previous_work_product(tcx),\n                     },\n                 );\n                 true\n@@ -727,7 +727,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                     &ongoing_codegen.coordinator_send,\n                     CachedModuleCodegen {\n                         name: cgu.name().to_string(),\n-                        source: cgu.work_product(tcx),\n+                        source: cgu.previous_work_product(tcx),\n                     },\n                 );\n                 true"}, {"sha": "9de14950aa8d33d23ad9bd353261e5d1eff99bf6", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -162,18 +162,16 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n             for swp in work_products {\n                 let mut all_files_exist = true;\n-                if let Some(ref file_name) = swp.work_product.saved_file {\n-                    let path = in_incr_comp_dir_sess(sess, file_name);\n-                    if !path.exists() {\n-                        all_files_exist = false;\n-\n-                        if sess.opts.debugging_opts.incremental_info {\n-                            eprintln!(\n-                                \"incremental: could not find file for work \\\n+                let path = in_incr_comp_dir_sess(sess, &swp.work_product.saved_file);\n+                if !path.exists() {\n+                    all_files_exist = false;\n+\n+                    if sess.opts.debugging_opts.incremental_info {\n+                        eprintln!(\n+                            \"incremental: could not find file for work \\\n                                     product: {}\",\n-                                path.display()\n-                            );\n-                        }\n+                            path.display()\n+                        );\n                     }\n                 }\n "}, {"sha": "0223976b08a5bf7e36640daafdba3c8adc106c30", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -107,20 +107,15 @@ pub fn save_work_product_index(\n     for (id, wp) in previous_work_products.iter() {\n         if !new_work_products.contains_key(id) {\n             work_product::delete_workproduct_files(sess, wp);\n-            debug_assert!(\n-                wp.saved_file.as_ref().map_or(true, |file_name| {\n-                    !in_incr_comp_dir_sess(sess, &file_name).exists()\n-                })\n-            );\n+            debug_assert!(!in_incr_comp_dir_sess(sess, &wp.saved_file).exists());\n         }\n     }\n \n     // Check that we did not delete one of the current work-products:\n     debug_assert!({\n         new_work_products\n             .iter()\n-            .flat_map(|(_, wp)| wp.saved_file.iter())\n-            .map(|name| in_incr_comp_dir_sess(sess, name))\n+            .map(|(_, wp)| in_incr_comp_dir_sess(sess, &wp.saved_file))\n             .all(|path| path.exists())\n     });\n }"}, {"sha": "4789c0f581fdb952971d28d748ceeedb1c0c72ea", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -7,34 +7,30 @@ use rustc_fs_util::link_or_copy;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::Session;\n use std::fs as std_fs;\n-use std::path::PathBuf;\n+use std::path::Path;\n \n /// Copies a CGU work product to the incremental compilation directory, so next compilation can find and reuse it.\n pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     sess: &Session,\n     cgu_name: &str,\n-    path: &Option<PathBuf>,\n+    path: &Path,\n ) -> Option<(WorkProductId, WorkProduct)> {\n     debug!(\"copy_cgu_workproduct_to_incr_comp_cache_dir({:?},{:?})\", cgu_name, path);\n     sess.opts.incremental.as_ref()?;\n \n-    let saved_file = if let Some(path) = path {\n-        let file_name = format!(\"{}.o\", cgu_name);\n-        let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n-        match link_or_copy(path, &path_in_incr_dir) {\n-            Ok(_) => Some(file_name),\n-            Err(err) => {\n-                sess.warn(&format!(\n-                    \"error copying object file `{}` to incremental directory as `{}`: {}\",\n-                    path.display(),\n-                    path_in_incr_dir.display(),\n-                    err\n-                ));\n-                return None;\n-            }\n+    let file_name = format!(\"{}.o\", cgu_name);\n+    let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n+    let saved_file = match link_or_copy(path, &path_in_incr_dir) {\n+        Ok(_) => file_name,\n+        Err(err) => {\n+            sess.warn(&format!(\n+                \"error copying object file `{}` to incremental directory as `{}`: {}\",\n+                path.display(),\n+                path_in_incr_dir.display(),\n+                err\n+            ));\n+            return None;\n         }\n-    } else {\n-        None\n     };\n \n     let work_product = WorkProduct { cgu_name: cgu_name.to_string(), saved_file };\n@@ -45,17 +41,15 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n \n /// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    if let Some(ref file_name) = work_product.saved_file {\n-        let path = in_incr_comp_dir_sess(sess, file_name);\n-        match std_fs::remove_file(&path) {\n-            Ok(()) => {}\n-            Err(err) => {\n-                sess.warn(&format!(\n-                    \"file-system error deleting outdated file `{}`: {}\",\n-                    path.display(),\n-                    err\n-                ));\n-            }\n+    let path = in_incr_comp_dir_sess(sess, &work_product.saved_file);\n+    match std_fs::remove_file(&path) {\n+        Ok(()) => {}\n+        Err(err) => {\n+            sess.warn(&format!(\n+                \"file-system error deleting outdated file `{}`: {}\",\n+                path.display(),\n+                err\n+            ));\n         }\n     }\n }"}, {"sha": "021f2782736460e043fdc2b090527496cf7266f1", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -336,7 +336,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         WorkProductId::from_cgu_name(self.name().as_str())\n     }\n \n-    pub fn work_product(&self, tcx: TyCtxt<'_>) -> WorkProduct {\n+    pub fn previous_work_product(&self, tcx: TyCtxt<'_>) -> WorkProduct {\n         let work_product_id = self.work_product_id();\n         tcx.dep_graph\n             .previous_work_product(&work_product_id)"}, {"sha": "bb2179a24953bfbcbd0d72c20c5ec137f8558ae3", "filename": "compiler/rustc_query_system/src/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -164,7 +164,6 @@ pub struct WorkProductId {\n impl WorkProductId {\n     pub fn from_cgu_name(cgu_name: &str) -> WorkProductId {\n         let mut hasher = StableHasher::new();\n-        cgu_name.len().hash(&mut hasher);\n         cgu_name.hash(&mut hasher);\n         WorkProductId { hash: hasher.finish() }\n     }"}, {"sha": "f6d06e4362c5339e24c62800f3c152283e405965", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1027ad0f9d45e47e37a2516b331dd47539b4c5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=ab1027ad0f9d45e47e37a2516b331dd47539b4c5", "patch": "@@ -887,7 +887,7 @@ impl<K: DepKind> DepGraph<K> {\n pub struct WorkProduct {\n     pub cgu_name: String,\n     /// Saved file associated with this CGU.\n-    pub saved_file: Option<String>,\n+    pub saved_file: String,\n }\n \n // Index type for `DepNodeData`'s edges."}]}