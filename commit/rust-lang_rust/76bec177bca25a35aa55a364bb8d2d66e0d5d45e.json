{"sha": "76bec177bca25a35aa55a364bb8d2d66e0d5d45e", "node_id": "C_kwDOAAsO6NoAKDc2YmVjMTc3YmNhMjVhMzVhYTU1YTM2NGJiOGQyZDY2ZTBkNWQ0NWU", "commit": {"author": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-10-13T05:16:12Z"}, "committer": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-10-13T06:10:23Z"}, "message": "kmc-solid: Handle errors returned by `SOLID_FS_ReadDir`", "tree": {"sha": "bfe2eba8c606c1d4686862c9431d5fdcdb9c5d65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe2eba8c606c1d4686862c9431d5fdcdb9c5d65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76bec177bca25a35aa55a364bb8d2d66e0d5d45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76bec177bca25a35aa55a364bb8d2d66e0d5d45e", "html_url": "https://github.com/rust-lang/rust/commit/76bec177bca25a35aa55a364bb8d2d66e0d5d45e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76bec177bca25a35aa55a364bb8d2d66e0d5d45e/comments", "author": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9217601c0e5ae83fa8bca6797137a6d2f7e4e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9217601c0e5ae83fa8bca6797137a6d2f7e4e5", "html_url": "https://github.com/rust-lang/rust/commit/2a9217601c0e5ae83fa8bca6797137a6d2f7e4e5"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "6c66b93a3e1a306e1ae9ca0abc8b3bbbac4ef767", "filename": "library/std/src/sys/solid/fs.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/76bec177bca25a35aa55a364bb8d2d66e0d5d45e/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76bec177bca25a35aa55a364bb8d2d66e0d5d45e/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Ffs.rs?ref=76bec177bca25a35aa55a364bb8d2d66e0d5d45e", "patch": "@@ -175,15 +175,19 @@ impl Iterator for ReadDir {\n     type Item = io::Result<DirEntry>;\n \n     fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        unsafe {\n-            let mut out_dirent = MaybeUninit::uninit();\n-            error::SolidError::err_if_negative(abi::SOLID_FS_ReadDir(\n+        let entry = unsafe {\n+            let mut out_entry = MaybeUninit::uninit();\n+            match error::SolidError::err_if_negative(abi::SOLID_FS_ReadDir(\n                 self.inner.dirp,\n-                out_dirent.as_mut_ptr(),\n-            ))\n-            .ok()?;\n-            Some(Ok(DirEntry { entry: out_dirent.assume_init(), inner: Arc::clone(&self.inner) }))\n-        }\n+                out_entry.as_mut_ptr(),\n+            )) {\n+                Ok(_) => out_entry.assume_init(),\n+                Err(e) if e.as_raw() == abi::SOLID_ERR_NOTFOUND => return None,\n+                Err(e) => return Some(Err(e.as_io_error())),\n+            }\n+        };\n+\n+        (entry.d_name[0] != 0).then(|| Ok(DirEntry { entry, inner: Arc::clone(&self.inner) }))\n     }\n }\n "}]}