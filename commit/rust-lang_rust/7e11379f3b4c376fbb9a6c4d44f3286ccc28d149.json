{"sha": "7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTEzNzlmM2I0YzM3NmZiYjlhNmM0ZDQ0ZjMyODZjY2MyOGQxNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-15T12:49:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-15T12:49:25Z"}, "message": "Auto merge of #74113 - lcnr:type-dependent-consts-2, r=eddyb\n\nSupport const args in type dependent paths (Take 2)\n\nonce more, except it is sound this time :smiling_face_with_three_hearts: previously #71154\n\n-----\n```rust\n#![feature(const_generics)]\n\nstruct A;\nimpl A {\n    fn foo<const N: usize>(&self) -> usize { N }\n}\nstruct B;\nimpl B {\n    fn foo<const N: usize>(&self) -> usize { 42 }\n}\n\nfn main() {\n    let a = A;\n    a.foo::<7>();\n}\n```\nWhen calling `type_of` for generic const arguments, we now use the `TypeckTables` of the surrounding body to get the expected type.\n\nThis alone causes cycle errors though, as we now have `typeck_tables_of(main)` -> `...` ->\n`type_of(main_ANON0 := 7)` -> `typeck_tables_of(main)` :zap: (see https://github.com/rust-lang/rust/issues/68400#issuecomment-611760290)\n\nTo prevent this we must not call `type_of(const_arg)` during `typeck_tables_of`. This is achieved by\ncalling `type_of(param_def_id)` instead.\n\nWe have to somehow remember the `DefId` of the param through all of typeck, which is done using the\nstruct `ty::WithOptConstParam<DefId>`, which replaces `DefId` where needed and contains an `Option<DefId>` to\nbe able to store the const parameter in case it exists.\n\nQueries which are currently cached on disk are split into two variants: `query_name`(cached) and `query_name_(of|for)_const_arg`(not cached), with `query_name_of_const_arg` taking a pair `(did, param_did): (LocalDefId, DefId)`.\n\nFor some queries a method `query_name_of_opt_const_arg` is added to `TyCtxt` which takes a `ty::WithOptConstParam` and either calls `query_name` or `query_name_of_const_arg` depending on the value of `const_param_did`.\n\nr? @eddyb @varkor", "tree": {"sha": "beb148fb31240b97e2a01cd208e28b02151c5bfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb148fb31240b97e2a01cd208e28b02151c5bfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "html_url": "https://github.com/rust-lang/rust/commit/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9e8d6290745a65025a3e082aea72fbe372292c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9e8d6290745a65025a3e082aea72fbe372292c6", "html_url": "https://github.com/rust-lang/rust/commit/d9e8d6290745a65025a3e082aea72fbe372292c6"}, {"sha": "2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2666aed4989c3bec9cf9f94b2d15beda4e5407f7", "html_url": "https://github.com/rust-lang/rust/commit/2666aed4989c3bec9cf9f94b2d15beda4e5407f7"}], "stats": {"total": 2169, "additions": 1547, "deletions": 622}, "files": [{"sha": "3287e7b856a37df75ec6d3bb762a8ece1abae421", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -248,9 +248,9 @@ fn exported_symbols_provider_local(\n             }\n \n             match *mono_item {\n-                MonoItem::Fn(Instance { def: InstanceDef::Item(def_id), substs }) => {\n+                MonoItem::Fn(Instance { def: InstanceDef::Item(def), substs }) => {\n                     if substs.non_erasable_generics().next().is_some() {\n-                        let symbol = ExportedSymbol::Generic(def_id, substs);\n+                        let symbol = ExportedSymbol::Generic(def.did, substs);\n                         symbols.push((symbol, SymbolExportLevel::Rust));\n                     }\n                 }"}, {"sha": "4943e279c7e050836959ed02dd975b138f804bba", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -25,10 +25,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n         match self.monomorphize(&constant.literal).val {\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => self\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => self\n                 .cx\n                 .tcx()\n-                .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), def, substs, promoted, None)\n                 .map_err(|err| {\n                     if promoted.is_none() {\n                         self.cx"}, {"sha": "0f558f59a12c8d921eef2109b2a0ae46f6ef28bf", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -64,8 +64,7 @@ const BASE_IMPL: &[&str] =\n \n /// DepNodes for mir_built/Optimized, which is relevant in \"executable\"\n /// code, i.e., functions+methods\n-const BASE_MIR: &[&str] =\n-    &[label_strs::optimized_mir, label_strs::promoted_mir, label_strs::mir_built];\n+const BASE_MIR: &[&str] = &[label_strs::optimized_mir, label_strs::promoted_mir];\n \n /// Struct, Enum and Union DepNodes\n ///\n@@ -376,7 +375,7 @@ impl DirtyCleanVisitor<'tcx> {\n         let def_path_hash = self.tcx.def_path_hash(def_id);\n         labels.iter().map(move |label| match DepNode::from_label_string(label, def_path_hash) {\n             Ok(dep_node) => dep_node,\n-            Err(()) => unreachable!(),\n+            Err(()) => unreachable!(\"label: {}\", label),\n         })\n     }\n "}, {"sha": "00503a6992875f36b5e57efb7b8c116c3aeabb46", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -1536,7 +1536,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def_id: DefId,\n+        def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n@@ -1547,7 +1547,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let (param_env, substs) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n-        self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, span)\n+        self.tcx.const_eval_resolve(param_env, def, substs, promoted, span)\n     }\n \n     /// If `typ` is a type variable of some kind, resolve it one level"}, {"sha": "533d0a6d383c4783d1dd9f1656e9d805283f4d77", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -891,7 +891,8 @@ fn analysis(tcx: TyCtxt<'_>, cnum: CrateNum) -> Result<()> {\n             mir::transform::check_unsafety::check_unsafety(tcx, def_id);\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n-                tcx.ensure().mir_drops_elaborated_and_const_checked(def_id);\n+                tcx.ensure()\n+                    .mir_drops_elaborated_and_const_checked(ty::WithOptConstParam::unknown(def_id));\n             }\n         }\n     });"}, {"sha": "be153758a2a0c0d0e76e2a1bb676148ef7388d2d", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -111,8 +111,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n         })\n     }\n-    optimized_mir => { cdata.get_optimized_mir(tcx, def_id.index) }\n-    promoted_mir => { cdata.get_promoted_mir(tcx, def_id.index) }\n+    optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n+    promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }"}, {"sha": "c5b66c1b13be5f253cdf6fb563041f5b0c2f20d5", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -14,7 +14,37 @@ macro_rules! arena_types {\n             [] layouts: rustc_target::abi::Layout, rustc_target::abi::Layout;\n             // AdtDef are interned and compared by address\n             [] adt_def: rustc_middle::ty::AdtDef, rustc_middle::ty::AdtDef;\n+            [] steal_mir:\n+                rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n+                rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>;\n+            [decode] mir: rustc_middle::mir::Body<$tcx>, rustc_middle::mir::Body<'_x>;\n+            [] steal_promoted:\n+                rustc_middle::ty::steal::Steal<\n+                    rustc_index::vec::IndexVec<\n+                        rustc_middle::mir::Promoted,\n+                        rustc_middle::mir::Body<$tcx>\n+                    >\n+                >,\n+                rustc_middle::ty::steal::Steal<\n+                    rustc_index::vec::IndexVec<\n+                        rustc_middle::mir::Promoted,\n+                        rustc_middle::mir::Body<$tcx>\n+                    >\n+                >;\n+            [decode] promoted:\n+                rustc_index::vec::IndexVec<\n+                    rustc_middle::mir::Promoted,\n+                    rustc_middle::mir::Body<$tcx>\n+                >,\n+                rustc_index::vec::IndexVec<\n+                    rustc_middle::mir::Promoted,\n+                    rustc_middle::mir::Body<'_x>\n+                >;\n             [decode] tables: rustc_middle::ty::TypeckTables<$tcx>, rustc_middle::ty::TypeckTables<'_x>;\n+            [decode] borrowck_result:\n+                rustc_middle::mir::BorrowCheckResult<$tcx>,\n+                rustc_middle::mir::BorrowCheckResult<'_x>;\n+            [decode] unsafety_check_result: rustc_middle::mir::UnsafetyCheckResult, rustc_middle::mir::UnsafetyCheckResult;\n             [] const_allocs: rustc_middle::mir::interpret::Allocation, rustc_middle::mir::interpret::Allocation;\n             // Required for the incremental on-disk cache\n             [few, decode] mir_keys: rustc_hir::def_id::DefIdSet, rustc_hir::def_id::DefIdSet;"}, {"sha": "d7c0be058599fbbecec245afbcc92dc4c388aa73", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -34,12 +34,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def_id: DefId,\n+        def: ty::WithOptConstParam<DefId>,\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n-        match ty::Instance::resolve(self, param_env, def_id, substs) {\n+        match ty::Instance::resolve_opt_const_arg(self, param_env, def, substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted };\n                 self.const_eval_global_id(param_env, cid, span)"}, {"sha": "d22bde2ff8b1ed87029b88eb00f3bed6d0293a45", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -346,8 +346,8 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             // instances into account. The others don't matter for\n                             // the codegen tests and can even make item order\n                             // unstable.\n-                            InstanceDef::Item(def_id) => {\n-                                def_id.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n+                            InstanceDef::Item(def) => {\n+                                def.did.as_local().map(|def_id| tcx.hir().as_local_hir_id(def_id))\n                             }\n                             InstanceDef::VtableShim(..)\n                             | InstanceDef::ReifyShim(..)"}, {"sha": "560a8421c17972cc1520fcba5ce382ae768b47f9", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -1,10 +1,11 @@\n //! Values computed by queries that use MIR.\n \n-use crate::ty::{self, Ty};\n+use crate::mir::{Body, Promoted};\n+use crate::ty::{self, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_index::bit_set::BitMatrix;\n use rustc_index::vec::IndexVec;\n use rustc_span::{Span, Symbol};\n@@ -323,3 +324,38 @@ pub struct CoverageInfo {\n     /// The total number of coverage region counters added to the MIR `Body`.\n     pub num_counters: u32,\n }\n+\n+impl<'tcx> TyCtxt<'tcx> {\n+    pub fn mir_borrowck_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<LocalDefId>,\n+    ) -> &'tcx BorrowCheckResult<'tcx> {\n+        if let Some(param_did) = def.const_param_did {\n+            self.mir_borrowck_const_arg((def.did, param_did))\n+        } else {\n+            self.mir_borrowck(def.did)\n+        }\n+    }\n+\n+    pub fn mir_const_qualif_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<LocalDefId>,\n+    ) -> ConstQualifs {\n+        if let Some(param_did) = def.const_param_did {\n+            self.mir_const_qualif_const_arg((def.did, param_did))\n+        } else {\n+            self.mir_const_qualif(def.did)\n+        }\n+    }\n+\n+    pub fn promoted_mir_of_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<DefId>,\n+    ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            self.promoted_mir_of_const_arg((did, param_did))\n+        } else {\n+            self.promoted_mir(def.did)\n+        }\n+    }\n+}"}, {"sha": "40ff25cf3b134194e3c24a406ad11e38096e1c85", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 95, "deletions": 23, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -89,6 +89,25 @@ rustc_queries! {\n             desc { |tcx| \"HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n+        /// Computes the `DefId` of the corresponding const parameter in case the `key` is a\n+        /// const argument and returns `None` otherwise.\n+        ///\n+        /// ```rust\n+        /// let a = foo::<7>();\n+        /// //            ^ Calling `opt_const_param_of` for this argument,\n+        ///\n+        /// fn foo<const N: usize>()\n+        /// //           ^ returns this `DefId`.\n+        ///\n+        /// fn bar() {\n+        /// // ^ While calling `opt_const_param_of` for other bodies returns `None`.\n+        /// }\n+        /// ```\n+        query opt_const_param_of(key: LocalDefId) -> Option<DefId> {\n+            desc { |tcx| \"computing the optional const parameter of `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            // FIXME(#74113): consider storing this query on disk.\n+        }\n+\n         /// Records the type of every item.\n         query type_of(key: DefId) -> Ty<'tcx> {\n             desc { |tcx| \"computing type of `{}`\", tcx.def_path_str(key) }\n@@ -189,47 +208,66 @@ rustc_queries! {\n             desc { |tcx| \"const checking `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { key.is_local() }\n         }\n+        query mir_const_qualif_const_arg(\n+            key: (LocalDefId, DefId)\n+        ) -> mir::ConstQualifs {\n+            desc {\n+                |tcx| \"const checking the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n+            }\n+        }\n \n         /// Fetch the MIR for a given `DefId` right after it's built - this includes\n         /// unreachable code.\n-        query mir_built(key: LocalDefId) -> Steal<mir::Body<'tcx>> {\n-            storage(ArenaCacheSelector<'tcx>)\n-            desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        query mir_built(key: ty::WithOptConstParam<LocalDefId>) -> &'tcx Steal<mir::Body<'tcx>> {\n+            desc { |tcx| \"building MIR for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n         }\n \n         /// Fetch the MIR for a given `DefId` up till the point where it is\n         /// ready for const qualification.\n         ///\n         /// See the README for the `mir` module for details.\n-        query mir_const(key: DefId) -> Steal<mir::Body<'tcx>> {\n-            desc { |tcx| \"processing MIR for `{}`\", tcx.def_path_str(key)  }\n-            storage(ArenaCacheSelector<'tcx>)\n+        query mir_const(key: ty::WithOptConstParam<LocalDefId>) -> &'tcx Steal<mir::Body<'tcx>> {\n+            desc {\n+                |tcx| \"processing MIR for {}`{}`\",\n+                if key.const_param_did.is_some() { \"the const argument \" } else { \"\" },\n+                tcx.def_path_str(key.did.to_def_id()),\n+            }\n             no_hash\n         }\n \n-        query mir_drops_elaborated_and_const_checked(key: LocalDefId) -> Steal<mir::Body<'tcx>> {\n-            storage(ArenaCacheSelector<'tcx>)\n+        query mir_drops_elaborated_and_const_checked(\n+            key: ty::WithOptConstParam<LocalDefId>\n+        ) -> &'tcx Steal<mir::Body<'tcx>> {\n             no_hash\n-            desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.did.to_def_id()) }\n         }\n \n-        query mir_validated(key: LocalDefId) ->\n+        query mir_validated(key: ty::WithOptConstParam<LocalDefId>) ->\n             (\n-                Steal<mir::Body<'tcx>>,\n-                Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n+                &'tcx Steal<mir::Body<'tcx>>,\n+                &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n             ) {\n-            storage(ArenaCacheSelector<'tcx>)\n             no_hash\n-            desc { |tcx| \"processing `{}`\", tcx.def_path_str(key.to_def_id()) }\n+            desc {\n+                |tcx| \"processing {}`{}`\",\n+                if key.const_param_did.is_some() { \"the const argument \" } else { \"\" },\n+                tcx.def_path_str(key.did.to_def_id()),\n+            }\n         }\n \n         /// MIR after our optimization passes have run. This is MIR that is ready\n         /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n-        query optimized_mir(key: DefId) -> mir::Body<'tcx> {\n+        query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {\n             desc { |tcx| \"optimizing MIR for `{}`\", tcx.def_path_str(key) }\n-            storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n         }\n+        query optimized_mir_of_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::Body<'tcx> {\n+            desc {\n+                |tcx| \"optimizing MIR for the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n+            }\n+        }\n \n         /// Returns coverage summary info for a function, after executing the `InstrumentCoverage`\n         /// MIR pass (assuming the -Zinstrument-coverage option is enabled).\n@@ -239,11 +277,18 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n \n-        query promoted_mir(key: DefId) -> IndexVec<mir::Promoted, mir::Body<'tcx>> {\n+        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n             desc { |tcx| \"optimizing promoted MIR for `{}`\", tcx.def_path_str(key) }\n-            storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n         }\n+        query promoted_mir_of_const_arg(\n+            key: (LocalDefId, DefId)\n+        ) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n+            desc {\n+                |tcx| \"optimizing promoted MIR for the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id()),\n+            }\n+        }\n     }\n \n     TypeChecking {\n@@ -451,11 +496,16 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n-        /// The result of unsafety-checking this `DefId`.\n-        query unsafety_check_result(key: LocalDefId) -> mir::UnsafetyCheckResult {\n+        /// The result of unsafety-checking this `LocalDefId`.\n+        query unsafety_check_result(key: LocalDefId) -> &'tcx mir::UnsafetyCheckResult {\n             desc { |tcx| \"unsafety-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n-            storage(ArenaCacheSelector<'tcx>)\n+        }\n+        query unsafety_check_result_for_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::UnsafetyCheckResult {\n+            desc {\n+                |tcx| \"unsafety-checking the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n+            }\n         }\n \n         /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error.\n@@ -537,6 +587,14 @@ rustc_queries! {\n             desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n         }\n+        query typeck_tables_of_const_arg(\n+            key: (LocalDefId, DefId)\n+        ) -> &'tcx ty::TypeckTables<'tcx> {\n+            desc {\n+                |tcx| \"type-checking the const argument `{}`\",\n+                tcx.def_path_str(key.0.to_def_id()),\n+            }\n+        }\n         query diagnostic_only_typeck_tables_of(key: LocalDefId) -> &'tcx ty::TypeckTables<'tcx> {\n             desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if { true }\n@@ -570,14 +628,19 @@ rustc_queries! {\n     BorrowChecking {\n         /// Borrow-checks the function body. If this is a closure, returns\n         /// additional requirements that the closure's creator must verify.\n-        query mir_borrowck(key: LocalDefId) -> mir::BorrowCheckResult<'tcx> {\n-            storage(ArenaCacheSelector<'tcx>)\n+        query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n             desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if(tcx, opt_result) {\n                 tcx.is_closure(key.to_def_id())\n                     || opt_result.map_or(false, |r| !r.concrete_opaque_types.is_empty())\n             }\n         }\n+        query mir_borrowck_const_arg(key: (LocalDefId, DefId)) -> &'tcx mir::BorrowCheckResult<'tcx> {\n+            desc {\n+                |tcx| \"borrow-checking the const argument`{}`\",\n+                tcx.def_path_str(key.0.to_def_id())\n+            }\n+        }\n     }\n \n     TypeChecking {\n@@ -1444,5 +1507,14 @@ rustc_queries! {\n         ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n             desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n         }\n+\n+        query resolve_instance_of_const_arg(\n+            key: ty::ParamEnvAnd<'tcx, (LocalDefId, DefId, SubstsRef<'tcx>)>\n+        ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n+            desc {\n+                \"resolving instance of the const argument `{}`\",\n+                ty::Instance::new(key.value.0.to_def_id(), key.value.2),\n+            }\n+        }\n     }\n }"}, {"sha": "bb5dd53a7e669d3f2bef99b5a11974eee7a89adc", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -980,15 +980,26 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> Steal<Body<'tcx>> {\n-        Steal::new(mir)\n+    pub fn typeck_tables_of_opt_const_arg(\n+        self,\n+        def: ty::WithOptConstParam<LocalDefId>,\n+    ) -> &'tcx TypeckTables<'tcx> {\n+        if let Some(param_did) = def.const_param_did {\n+            self.typeck_tables_of_const_arg((def.did, param_did))\n+        } else {\n+            self.typeck_tables_of(def.did)\n+        }\n+    }\n+\n+    pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {\n+        self.arena.alloc(Steal::new(mir))\n     }\n \n     pub fn alloc_steal_promoted(\n         self,\n         promoted: IndexVec<Promoted, Body<'tcx>>,\n-    ) -> Steal<IndexVec<Promoted, Body<'tcx>>> {\n-        Steal::new(promoted)\n+    ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {\n+        self.arena.alloc(Steal::new(promoted))\n     }\n \n     pub fn alloc_adt_def("}, {"sha": "f627d05d3e9d28686f2265301a82f55d87120797", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -29,7 +29,7 @@ pub enum InstanceDef<'tcx> {\n     /// - `fn` items\n     /// - closures\n     /// - generators\n-    Item(DefId),\n+    Item(ty::WithOptConstParam<DefId>),\n \n     /// An intrinsic `fn` item (with `\"rust-intrinsic\"` or `\"platform-intrinsic\"` ABI).\n     ///\n@@ -160,8 +160,8 @@ impl<'tcx> Instance<'tcx> {\n         self.substs.non_erasable_generics().next()?;\n \n         match self.def {\n-            InstanceDef::Item(def_id) => tcx\n-                .upstream_monomorphizations_for(def_id)\n+            InstanceDef::Item(def) => tcx\n+                .upstream_monomorphizations_for(def.did)\n                 .and_then(|monos| monos.get(&self.substs).cloned()),\n             InstanceDef::DropGlue(_, Some(_)) => tcx.upstream_drop_glue_for(self.substs),\n             _ => None,\n@@ -171,10 +171,10 @@ impl<'tcx> Instance<'tcx> {\n \n impl<'tcx> InstanceDef<'tcx> {\n     #[inline]\n-    pub fn def_id(&self) -> DefId {\n-        match *self {\n-            InstanceDef::Item(def_id)\n-            | InstanceDef::VtableShim(def_id)\n+    pub fn def_id(self) -> DefId {\n+        match self {\n+            InstanceDef::Item(def) => def.did,\n+            InstanceDef::VtableShim(def_id)\n             | InstanceDef::ReifyShim(def_id)\n             | InstanceDef::FnPtrShim(def_id, _)\n             | InstanceDef::Virtual(def_id, _)\n@@ -185,6 +185,21 @@ impl<'tcx> InstanceDef<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {\n+        match self {\n+            InstanceDef::Item(def) => def,\n+            InstanceDef::VtableShim(def_id)\n+            | InstanceDef::ReifyShim(def_id)\n+            | InstanceDef::FnPtrShim(def_id, _)\n+            | InstanceDef::Virtual(def_id, _)\n+            | InstanceDef::Intrinsic(def_id)\n+            | InstanceDef::ClosureOnceShim { call_once: def_id }\n+            | InstanceDef::DropGlue(def_id, _)\n+            | InstanceDef::CloneShim(def_id, _) => ty::WithOptConstParam::unknown(def_id),\n+        }\n+    }\n+\n     #[inline]\n     pub fn attrs(&self, tcx: TyCtxt<'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n@@ -198,7 +213,7 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn requires_inline(&self, tcx: TyCtxt<'tcx>) -> bool {\n         use rustc_hir::definitions::DefPathData;\n         let def_id = match *self {\n-            ty::InstanceDef::Item(def_id) => def_id,\n+            ty::InstanceDef::Item(def) => def.did,\n             ty::InstanceDef::DropGlue(_, Some(_)) => return false,\n             _ => return true,\n         };\n@@ -244,8 +259,8 @@ impl<'tcx> InstanceDef<'tcx> {\n \n     pub fn requires_caller_location(&self, tcx: TyCtxt<'_>) -> bool {\n         match *self {\n-            InstanceDef::Item(def_id) => {\n-                tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n+            InstanceDef::Item(def) => {\n+                tcx.codegen_fn_attrs(def.did).flags.contains(CodegenFnAttrFlags::TRACK_CALLER)\n             }\n             _ => false,\n         }\n@@ -283,7 +298,7 @@ impl<'tcx> Instance<'tcx> {\n             def_id,\n             substs\n         );\n-        Instance { def: InstanceDef::Item(def_id), substs }\n+        Instance { def: InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)), substs }\n     }\n \n     pub fn mono(tcx: TyCtxt<'tcx>, def_id: DefId) -> Instance<'tcx> {\n@@ -323,6 +338,21 @@ impl<'tcx> Instance<'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n+    ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+        Instance::resolve_opt_const_arg(\n+            tcx,\n+            param_env,\n+            ty::WithOptConstParam::unknown(def_id),\n+            substs,\n+        )\n+    }\n+\n+    // This should be kept up to date with `resolve`.\n+    pub fn resolve_opt_const_arg(\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        def: ty::WithOptConstParam<DefId>,\n+        substs: SubstsRef<'tcx>,\n     ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n         // All regions in the result of this query are erased, so it's\n         // fine to erase all of the input regions.\n@@ -333,7 +363,13 @@ impl<'tcx> Instance<'tcx> {\n         let substs = tcx.erase_regions(&substs);\n \n         // FIXME(eddyb) should this always use `param_env.with_reveal_all()`?\n-        tcx.resolve_instance(tcx.erase_regions(&param_env.and((def_id, substs))))\n+        if let Some((did, param_did)) = def.as_const_arg() {\n+            tcx.resolve_instance_of_const_arg(\n+                tcx.erase_regions(&param_env.and((did, param_did, substs))),\n+            )\n+        } else {\n+            tcx.resolve_instance(tcx.erase_regions(&param_env.and((def.did, substs))))\n+        }\n     }\n \n     pub fn resolve_for_fn_ptr(\n@@ -345,9 +381,9 @@ impl<'tcx> Instance<'tcx> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n         Instance::resolve(tcx, param_env, def_id, substs).ok().flatten().map(|mut resolved| {\n             match resolved.def {\n-                InstanceDef::Item(def_id) if resolved.def.requires_caller_location(tcx) => {\n+                InstanceDef::Item(def) if resolved.def.requires_caller_location(tcx) => {\n                     debug!(\" => fn pointer created for function with #[track_caller]\");\n-                    resolved.def = InstanceDef::ReifyShim(def_id);\n+                    resolved.def = InstanceDef::ReifyShim(def.did);\n                 }\n                 InstanceDef::Virtual(def_id, _) => {\n                     debug!(\" => fn pointer created for virtual call\");"}, {"sha": "fe2a60401b4a6bd7f0badbd2f8c3a9e9a1b94fac", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 97, "deletions": 3, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -1,5 +1,4 @@\n // ignore-tidy-filelength\n-\n pub use self::fold::{TypeFoldable, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n@@ -1101,7 +1100,7 @@ pub enum PredicateKind<'tcx> {\n     Subtype(PolySubtypePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(DefId, SubstsRef<'tcx>),\n+    ConstEvaluatable(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n@@ -1572,6 +1571,95 @@ pub type PlaceholderType = Placeholder<BoundVar>;\n \n pub type PlaceholderConst = Placeholder<BoundVar>;\n \n+/// A `DefId` which is potentially bundled with its corresponding generic parameter\n+/// in case `did` is a const argument.\n+///\n+/// This is used to prevent cycle errors during typeck\n+/// as `type_of(const_arg)` depends on `typeck_tables_of(owning_body)`\n+/// which once again requires the type of its generic arguments.\n+///\n+/// Luckily we only need to deal with const arguments once we\n+/// know their corresponding parameters. We (ab)use this by\n+/// calling `type_of(param_did)` for these arguments.\n+///\n+/// ```rust\n+/// #![feature(const_generics)]\n+///\n+/// struct A;\n+/// impl A {\n+///     fn foo<const N: usize>(&self) -> usize { N }\n+/// }\n+/// struct B;\n+/// impl B {\n+///     fn foo<const N: u8>(&self) -> usize { 42 }\n+/// }\n+///\n+/// fn main() {\n+///     let a = A;\n+///     a.foo::<7>();\n+/// }\n+/// ```\n+#[derive(Copy, Clone, Debug, TypeFoldable, Lift, RustcEncodable, RustcDecodable)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Hash, HashStable)]\n+pub struct WithOptConstParam<T> {\n+    pub did: T,\n+    /// The `DefId` of the corresponding generic paramter in case `did` is\n+    /// a const argument.\n+    ///\n+    /// Note that even if `did` is a const argument, this may still be `None`.\n+    /// All queries taking `WithOptConstParam` start by calling `tcx.opt_const_param_of(def.did)`\n+    /// to potentially update `param_did` in case it `None`.\n+    pub const_param_did: Option<DefId>,\n+}\n+\n+impl<T> WithOptConstParam<T> {\n+    /// Creates a new `WithOptConstParam` setting `const_param_did` to `None`.\n+    pub fn unknown(did: T) -> WithOptConstParam<T> {\n+        WithOptConstParam { did, const_param_did: None }\n+    }\n+}\n+\n+impl WithOptConstParam<LocalDefId> {\n+    pub fn to_global(self) -> WithOptConstParam<DefId> {\n+        WithOptConstParam { did: self.did.to_def_id(), const_param_did: self.const_param_did }\n+    }\n+\n+    pub fn def_id_for_type_of(self) -> DefId {\n+        if let Some(did) = self.const_param_did { did } else { self.did.to_def_id() }\n+    }\n+}\n+\n+impl WithOptConstParam<DefId> {\n+    pub fn as_local(self) -> Option<WithOptConstParam<LocalDefId>> {\n+        self.did\n+            .as_local()\n+            .map(|did| WithOptConstParam { did, const_param_did: self.const_param_did })\n+    }\n+\n+    pub fn as_const_arg(self) -> Option<(LocalDefId, DefId)> {\n+        if let Some(param_did) = self.const_param_did {\n+            if let Some(did) = self.did.as_local() {\n+                return Some((did, param_did));\n+            }\n+        }\n+\n+        None\n+    }\n+\n+    pub fn expect_local(self) -> WithOptConstParam<LocalDefId> {\n+        self.as_local().unwrap()\n+    }\n+\n+    pub fn is_local(self) -> bool {\n+        self.did.is_local()\n+    }\n+\n+    pub fn def_id_for_type_of(self) -> DefId {\n+        self.const_param_did.unwrap_or(self.did)\n+    }\n+}\n+\n /// When type checking, we use the `ParamEnv` to track\n /// details about the set of where-clauses that are in scope at this\n /// particular point.\n@@ -2843,7 +2931,13 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n     pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n         match instance {\n-            ty::InstanceDef::Item(did) => self.optimized_mir(did),\n+            ty::InstanceDef::Item(def) => {\n+                if let Some((did, param_did)) = def.as_const_arg() {\n+                    self.optimized_mir_of_const_arg((did, param_did))\n+                } else {\n+                    self.optimized_mir(def.did)\n+                }\n+            }\n             ty::InstanceDef::VtableShim(..)\n             | ty::InstanceDef::ReifyShim(..)\n             | ty::InstanceDef::Intrinsic(..)"}, {"sha": "b50d2852c1c5c50640f92fb5a305bf2dc58be816", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -883,18 +883,18 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.val {\n-            ty::ConstKind::Unevaluated(did, substs, promoted) => {\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 if let Some(promoted) = promoted {\n-                    p!(print_value_path(did, substs));\n+                    p!(print_value_path(def.did, substs));\n                     p!(write(\"::{:?}\", promoted));\n                 } else {\n-                    match self.tcx().def_kind(did) {\n+                    match self.tcx().def_kind(def.did) {\n                         DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n-                            p!(print_value_path(did, substs))\n+                            p!(print_value_path(def.did, substs))\n                         }\n                         _ => {\n-                            if did.is_local() {\n-                                let span = self.tcx().def_span(did);\n+                            if def.is_local() {\n+                                let span = self.tcx().def_span(def.did);\n                                 if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span)\n                                 {\n                                     p!(write(\"{}\", snip))\n@@ -2027,9 +2027,9 @@ define_print_and_forward_display! {\n                    print_value_path(closure_def_id, &[]),\n                    write(\"` implements the trait `{}`\", kind))\n             }\n-            &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+            &ty::PredicateKind::ConstEvaluatable(def, substs) => {\n                 p!(write(\"the constant `\"),\n-                   print_value_path(def_id, substs),\n+                   print_value_path(def.did, substs),\n                    write(\"` can be evaluated\"))\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {"}, {"sha": "cb2b7a662cb4c0756067d652dcbc472a57873503", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -105,6 +105,17 @@ impl Key for DefId {\n     }\n }\n \n+impl Key for ty::WithOptConstParam<LocalDefId> {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        self.did.query_crate()\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.did.default_span(tcx)\n+    }\n+}\n+\n impl Key for (DefId, DefId) {\n     type CacheSelector = DefaultCacheSelector;\n \n@@ -127,6 +138,17 @@ impl Key for (DefId, LocalDefId) {\n     }\n }\n \n+impl Key for (LocalDefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.0.default_span(tcx)\n+    }\n+}\n+\n impl Key for (CrateNum, DefId) {\n     type CacheSelector = DefaultCacheSelector;\n \n@@ -171,6 +193,17 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.0.default_span(tcx)\n+    }\n+}\n+\n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "ae2820b460fe3d3a629efe5b9545b8d0718ed684", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -578,12 +578,12 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n         (\n-            ty::ConstKind::Unevaluated(a_def_id, a_substs, a_promoted),\n-            ty::ConstKind::Unevaluated(b_def_id, b_substs, b_promoted),\n-        ) if a_def_id == b_def_id && a_promoted == b_promoted => {\n+            ty::ConstKind::Unevaluated(a_def, a_substs, a_promoted),\n+            ty::ConstKind::Unevaluated(b_def, b_substs, b_promoted),\n+        ) if a_def == b_def && a_promoted == b_promoted => {\n             let substs =\n                 relation.relate_with_variance(ty::Variance::Invariant, a_substs, b_substs)?;\n-            Ok(ty::ConstKind::Unevaluated(a_def_id, substs, a_promoted))\n+            Ok(ty::ConstKind::Unevaluated(a_def, substs, a_promoted))\n         }\n         _ => Err(TypeError::ConstMismatch(expected_found(relation, a, b))),\n     };"}, {"sha": "f04bfe648fb786719821b31d1aa7b674db3d087d", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -272,6 +272,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_span::symbol::Symbol,\n     ::rustc_hir::def::Res,\n     ::rustc_hir::def_id::DefId,\n+    ::rustc_hir::def_id::LocalDefId,\n     ::rustc_hir::LlvmInlineAsmInner,\n     ::rustc_hir::MatchSource,\n     ::rustc_hir::Mutability,\n@@ -719,6 +720,18 @@ impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> TypeFoldable<'tcx> for\n     }\n }\n \n+impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>> TypeFoldable<'tcx>\n+    for (A, B, C)\n+{\n+    fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> (A, B, C) {\n+        (self.0.fold_with(folder), self.1.fold_with(folder), self.2.fold_with(folder))\n+    }\n+\n+    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        self.0.visit_with(visitor) || self.1.visit_with(visitor) || self.2.visit_with(visitor)\n+    }\n+}\n+\n EnumTypeFoldableImpl! {\n     impl<'tcx, T> TypeFoldable<'tcx> for Option<T> {\n         (Some)(a),\n@@ -838,7 +851,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         Self {\n             substs: self.substs.fold_with(folder),\n             def: match self.def {\n-                Item(did) => Item(did.fold_with(folder)),\n+                Item(def) => Item(def.fold_with(folder)),\n                 VtableShim(did) => VtableShim(did.fold_with(folder)),\n                 ReifyShim(did) => ReifyShim(did.fold_with(folder)),\n                 Intrinsic(did) => Intrinsic(did.fold_with(folder)),\n@@ -857,7 +870,8 @@ impl<'tcx> TypeFoldable<'tcx> for ty::instance::Instance<'tcx> {\n         use crate::ty::InstanceDef::*;\n         self.substs.visit_with(visitor)\n             || match self.def {\n-                Item(did) | VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n+                Item(def) => def.visit_with(visitor),\n+                VtableShim(did) | ReifyShim(did) | Intrinsic(did) | Virtual(did, _) => {\n                     did.visit_with(visitor)\n                 }\n                 FnPtrShim(did, ty) | CloneShim(did, ty) => {"}, {"sha": "3104d2ee36a790432d738897331cd443877f8298", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -2210,21 +2210,28 @@ impl<'tcx> Const<'tcx> {\n     /// Literals and const generic parameters are eagerly converted to a constant, everything else\n     /// becomes `Unevaluated`.\n     pub fn from_anon_const(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &'tcx Self {\n-        debug!(\"Const::from_anon_const(id={:?})\", def_id);\n+        Self::from_opt_const_arg_anon_const(tcx, ty::WithOptConstParam::unknown(def_id))\n+    }\n+\n+    pub fn from_opt_const_arg_anon_const(\n+        tcx: TyCtxt<'tcx>,\n+        def: ty::WithOptConstParam<LocalDefId>,\n+    ) -> &'tcx Self {\n+        debug!(\"Const::from_anon_const(def={:?})\", def);\n \n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+        let hir_id = tcx.hir().local_def_id_to_hir_id(def.did);\n \n         let body_id = match tcx.hir().get(hir_id) {\n             hir::Node::AnonConst(ac) => ac.body,\n             _ => span_bug!(\n-                tcx.def_span(def_id.to_def_id()),\n+                tcx.def_span(def.did.to_def_id()),\n                 \"from_anon_const can only process anonymous constants\"\n             ),\n         };\n \n         let expr = &tcx.hir().body(body_id).value;\n \n-        let ty = tcx.type_of(def_id.to_def_id());\n+        let ty = tcx.type_of(def.def_id_for_type_of());\n \n         let lit_input = match expr.kind {\n             hir::ExprKind::Lit(ref lit) => Some(LitToConstInput { lit: &lit.node, ty, neg: false }),\n@@ -2271,8 +2278,8 @@ impl<'tcx> Const<'tcx> {\n                 ty::ConstKind::Param(ty::ParamConst::new(index, name))\n             }\n             _ => ty::ConstKind::Unevaluated(\n-                def_id.to_def_id(),\n-                InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+                def.to_global(),\n+                InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                 None,\n             ),\n         };\n@@ -2340,7 +2347,7 @@ impl<'tcx> Const<'tcx> {\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n     pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n-        if let ConstKind::Unevaluated(did, substs, promoted) = self.val {\n+        if let ConstKind::Unevaluated(def, substs, promoted) = self.val {\n             use crate::mir::interpret::ErrorHandled;\n \n             let param_env_and_substs = param_env.with_reveal_all().and(substs);\n@@ -2356,7 +2363,7 @@ impl<'tcx> Const<'tcx> {\n             // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n             // we can call `infcx.const_eval_resolve` which handles inference variables.\n             let param_env_and_substs = if param_env_and_substs.needs_infer() {\n-                tcx.param_env(did).and(InternalSubsts::identity_for_item(tcx, did))\n+                tcx.param_env(def.did).and(InternalSubsts::identity_for_item(tcx, def.did))\n             } else {\n                 param_env_and_substs\n             };\n@@ -2366,7 +2373,7 @@ impl<'tcx> Const<'tcx> {\n             let (param_env, substs) = param_env_and_substs.into_parts();\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            match tcx.const_eval_resolve(param_env, did, substs, promoted, None) {\n+            match tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n                 // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),\n@@ -2426,7 +2433,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(DefId, SubstsRef<'tcx>, Option<Promoted>),\n+    Unevaluated(ty::WithOptConstParam<DefId>, SubstsRef<'tcx>, Option<Promoted>),\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),"}, {"sha": "d8d988717b8247e968302aa03d9dff670b2ef5b4", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 38, "deletions": 24, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind\n use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, RegionVid, TyCtxt};\n+use rustc_middle::ty::{self, InstanceDef, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT, UNUSED_MUT};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n \n@@ -87,34 +87,49 @@ crate struct Upvar {\n const DEREF_PROJECTION: &[PlaceElem<'_>; 1] = &[ProjectionElem::Deref];\n \n pub fn provide(providers: &mut Providers) {\n-    *providers = Providers { mir_borrowck, ..*providers };\n+    *providers = Providers {\n+        mir_borrowck: |tcx, did| mir_borrowck(tcx, ty::WithOptConstParam::unknown(did)),\n+        mir_borrowck_const_arg: |tcx, (did, param_did)| {\n+            mir_borrowck(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n+        },\n+        ..*providers\n+    };\n }\n \n-fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> BorrowCheckResult<'_> {\n-    let (input_body, promoted) = tcx.mir_validated(def_id);\n-    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id.to_def_id()));\n+fn mir_borrowck<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx BorrowCheckResult<'tcx> {\n+    if def.const_param_did.is_none() {\n+        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_borrowck_const_arg((def.did, param_did));\n+        }\n+    }\n+\n+    let (input_body, promoted) = tcx.mir_validated(def);\n+    debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def.did.to_def_id()));\n \n     let opt_closure_req = tcx.infer_ctxt().enter(|infcx| {\n         let input_body: &Body<'_> = &input_body.borrow();\n         let promoted: &IndexVec<_, _> = &promoted.borrow();\n-        do_mir_borrowck(&infcx, input_body, promoted, def_id)\n+        do_mir_borrowck(&infcx, input_body, promoted, def)\n     });\n     debug!(\"mir_borrowck done\");\n \n-    opt_closure_req\n+    tcx.arena.alloc(opt_closure_req)\n }\n \n fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n     input_promoted: &IndexVec<Promoted, Body<'tcx>>,\n-    def_id: LocalDefId,\n+    def: ty::WithOptConstParam<LocalDefId>,\n ) -> BorrowCheckResult<'tcx> {\n-    debug!(\"do_mir_borrowck(def_id = {:?})\", def_id);\n+    debug!(\"do_mir_borrowck(def = {:?})\", def);\n \n     let tcx = infcx.tcx;\n-    let param_env = tcx.param_env(def_id);\n-    let id = tcx.hir().as_local_hir_id(def_id);\n+    let param_env = tcx.param_env(def.did);\n+    let id = tcx.hir().as_local_hir_id(def.did);\n \n     let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);\n     for var_debug_info in &input_body.var_debug_info {\n@@ -135,13 +150,13 @@ fn do_mir_borrowck<'a, 'tcx>(\n     }\n \n     // Gather the upvars of a closure, if any.\n-    let tables = tcx.typeck_tables_of(def_id);\n+    let tables = tcx.typeck_tables_of_opt_const_arg(def);\n     if let Some(ErrorReported) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n     }\n     let upvars: Vec<_> = tables\n         .closure_captures\n-        .get(&def_id.to_def_id())\n+        .get(&def.did.to_def_id())\n         .into_iter()\n         .flat_map(|v| v.values())\n         .map(|upvar_id| {\n@@ -171,8 +186,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // will have a lifetime tied to the inference context.\n     let mut body = input_body.clone();\n     let mut promoted = input_promoted.clone();\n-    let free_regions =\n-        nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body, &mut promoted);\n+    let free_regions = nll::replace_regions_in_mir(infcx, def, param_env, &mut body, &mut promoted);\n     let body = &body; // no further changes\n \n     let location_table = &LocationTable::new(&body);\n@@ -190,7 +204,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let mdpe = MoveDataParamEnv { move_data, param_env };\n \n     let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)\n-        .into_engine(tcx, &body, def_id.to_def_id())\n+        .into_engine(tcx, &body, def.did.to_def_id())\n         .iterate_to_fixpoint()\n         .into_results_cursor(&body);\n \n@@ -207,7 +221,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         nll_errors,\n     } = nll::compute_regions(\n         infcx,\n-        def_id,\n+        def.did,\n         free_regions,\n         body,\n         &promoted,\n@@ -223,7 +237,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // write unit-tests, as well as helping with debugging.\n     nll::dump_mir_results(\n         infcx,\n-        MirSource::item(def_id.to_def_id()),\n+        MirSource { instance: InstanceDef::Item(def.to_global()), promoted: None },\n         &body,\n         &regioncx,\n         &opt_closure_req,\n@@ -234,7 +248,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     nll::dump_annotation(\n         infcx,\n         &body,\n-        def_id.to_def_id(),\n+        def.did.to_def_id(),\n         &regioncx,\n         &opt_closure_req,\n         &opaque_type_values,\n@@ -249,13 +263,13 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let regioncx = Rc::new(regioncx);\n \n     let flow_borrows = Borrows::new(tcx, &body, regioncx.clone(), &borrow_set)\n-        .into_engine(tcx, &body, def_id.to_def_id())\n+        .into_engine(tcx, &body, def.did.to_def_id())\n         .iterate_to_fixpoint();\n     let flow_uninits = MaybeUninitializedPlaces::new(tcx, &body, &mdpe)\n-        .into_engine(tcx, &body, def_id.to_def_id())\n+        .into_engine(tcx, &body, def.did.to_def_id())\n         .iterate_to_fixpoint();\n     let flow_ever_inits = EverInitializedPlaces::new(tcx, &body, &mdpe)\n-        .into_engine(tcx, &body, def_id.to_def_id())\n+        .into_engine(tcx, &body, def.did.to_def_id())\n         .iterate_to_fixpoint();\n \n     let movable_generator = match tcx.hir().get(id) {\n@@ -274,7 +288,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n             let mut promoted_mbcx = MirBorrowckCtxt {\n                 infcx,\n                 body: promoted_body,\n-                mir_def_id: def_id,\n+                mir_def_id: def.did,\n                 move_data: &move_data,\n                 location_table: &LocationTable::new(promoted_body),\n                 movable_generator,\n@@ -307,7 +321,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     let mut mbcx = MirBorrowckCtxt {\n         infcx,\n         body,\n-        mir_def_id: def_id,\n+        mir_def_id: def.did,\n         move_data: &mdpe.move_data,\n         location_table,\n         movable_generator,"}, {"sha": "f6b3be59d9576acc36cb5eb5e3e7de764036fc96", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n };\n-use rustc_middle::ty::{self, RegionKind, RegionVid};\n+use rustc_middle::ty::{self, InstanceDef, RegionKind, RegionVid};\n use rustc_span::symbol::sym;\n use std::env;\n use std::fmt::Debug;\n@@ -59,20 +59,20 @@ crate struct NllOutput<'tcx> {\n /// `compute_regions`.\n pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n-    def_id: LocalDefId,\n+    def: ty::WithOptConstParam<LocalDefId>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n-    debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n+    debug!(\"replace_regions_in_mir(def={:?})\", def);\n \n     // Compute named region information. This also renumbers the inputs/outputs.\n-    let universal_regions = UniversalRegions::new(infcx, def_id, param_env);\n+    let universal_regions = UniversalRegions::new(infcx, def, param_env);\n \n     // Replace all remaining regions with fresh inference variables.\n     renumber::renumber_mir(infcx, body, promoted);\n \n-    let source = MirSource::item(def_id.to_def_id());\n+    let source = MirSource { instance: InstanceDef::Item(def.to_global()), promoted: None };\n     mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, source, body, |_, _| Ok(()));\n \n     universal_regions"}, {"sha": "7b84737fa77a46689f4a6bfea3e66ed723a3dcb3", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             }\n         } else {\n             let tcx = self.tcx();\n-            if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = constant.literal.val {\n+            if let ty::ConstKind::Unevaluated(def, substs, promoted) = constant.literal.val {\n                 if let Some(promoted) = promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n                                      promoted: &Body<'tcx>,\n@@ -357,7 +357,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         ConstraintCategory::Boring,\n                         self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n                             constant.literal.ty,\n-                            def_id,\n+                            def.did,\n                             UserSubsts { substs, user_self_ty: None },\n                         )),\n                     ) {"}, {"sha": "55d817b3f1ce38d925746068879b8bcc5678030b", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 25, "deletions": 24, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -227,12 +227,12 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// known between those regions.\n     pub fn new(\n         infcx: &InferCtxt<'_, 'tcx>,\n-        mir_def_id: LocalDefId,\n+        mir_def: ty::WithOptConstParam<LocalDefId>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n         let tcx = infcx.tcx;\n-        let mir_hir_id = tcx.hir().as_local_hir_id(mir_def_id);\n-        UniversalRegionsBuilder { infcx, mir_def_id, mir_hir_id, param_env }.build()\n+        let mir_hir_id = tcx.hir().as_local_hir_id(mir_def.did);\n+        UniversalRegionsBuilder { infcx, mir_def, mir_hir_id, param_env }.build()\n     }\n \n     /// Given a reference to a closure type, extracts all the values\n@@ -388,7 +388,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n \n struct UniversalRegionsBuilder<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n-    mir_def_id: LocalDefId,\n+    mir_def: ty::WithOptConstParam<LocalDefId>,\n     mir_hir_id: HirId,\n     param_env: ty::ParamEnv<'tcx>,\n }\n@@ -397,7 +397,7 @@ const FR: NLLRegionVariableOrigin = NLLRegionVariableOrigin::FreeRegion;\n \n impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n     fn build(self) -> UniversalRegions<'tcx> {\n-        debug!(\"build(mir_def_id={:?})\", self.mir_def_id);\n+        debug!(\"build(mir_def={:?})\", self.mir_def);\n \n         let param_env = self.param_env;\n         debug!(\"build: param_env={:?}\", param_env);\n@@ -417,16 +417,17 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let mut indices = self.compute_indices(fr_static, defining_ty);\n         debug!(\"build: indices={:?}\", indices);\n \n-        let closure_base_def_id = self.infcx.tcx.closure_base_def_id(self.mir_def_id.to_def_id());\n+        let closure_base_def_id = self.infcx.tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n \n         // If this is a closure or generator, then the late-bound regions from the enclosing\n         // function are actually external regions to us. For example, here, 'a is not local\n         // to the closure c (although it is local to the fn foo):\n         // fn foo<'a>() {\n         //     let c = || { let x: &'a u32 = ...; }\n         // }\n-        if self.mir_def_id.to_def_id() != closure_base_def_id {\n-            self.infcx.replace_late_bound_regions_with_nll_infer_vars(self.mir_def_id, &mut indices)\n+        if self.mir_def.did.to_def_id() != closure_base_def_id {\n+            self.infcx\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices)\n         }\n \n         let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n@@ -436,15 +437,15 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let first_local_index = self.infcx.num_region_vars();\n         let inputs_and_output = self.infcx.replace_bound_regions_with_nll_infer_vars(\n             FR,\n-            self.mir_def_id,\n+            self.mir_def.did,\n             &bound_inputs_and_output,\n             &mut indices,\n         );\n         // Converse of above, if this is a function then the late-bound regions declared on its\n         // signature are local to the fn.\n-        if self.mir_def_id.to_def_id() == closure_base_def_id {\n+        if self.mir_def.did.to_def_id() == closure_base_def_id {\n             self.infcx\n-                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def_id, &mut indices);\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def.did, &mut indices);\n         }\n \n         let (unnormalized_output_ty, mut unnormalized_input_tys) =\n@@ -456,7 +457,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             if self.infcx.tcx.fn_sig(def_id).c_variadic() {\n                 let va_list_did = self.infcx.tcx.require_lang_item(\n                     lang_items::VaListTypeLangItem,\n-                    Some(self.infcx.tcx.def_span(self.mir_def_id)),\n+                    Some(self.infcx.tcx.def_span(self.mir_def.did)),\n                 );\n                 let region = self\n                     .infcx\n@@ -507,14 +508,14 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n     /// see `DefiningTy` for details.\n     fn defining_ty(&self) -> DefiningTy<'tcx> {\n         let tcx = self.infcx.tcx;\n-        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id.to_def_id());\n+        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n \n         match tcx.hir().body_owner_kind(self.mir_hir_id) {\n             BodyOwnerKind::Closure | BodyOwnerKind::Fn => {\n-                let defining_ty = if self.mir_def_id.to_def_id() == closure_base_def_id {\n+                let defining_ty = if self.mir_def.did.to_def_id() == closure_base_def_id {\n                     tcx.type_of(closure_base_def_id)\n                 } else {\n-                    let tables = tcx.typeck_tables_of(self.mir_def_id);\n+                    let tables = tcx.typeck_tables_of(self.mir_def.did);\n                     tables.node_type(self.mir_hir_id)\n                 };\n \n@@ -530,20 +531,20 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     }\n                     ty::FnDef(def_id, substs) => DefiningTy::FnDef(def_id, substs),\n                     _ => span_bug!(\n-                        tcx.def_span(self.mir_def_id),\n+                        tcx.def_span(self.mir_def.did),\n                         \"expected defining type for `{:?}`: `{:?}`\",\n-                        self.mir_def_id,\n+                        self.mir_def.did,\n                         defining_ty\n                     ),\n                 }\n             }\n \n             BodyOwnerKind::Const | BodyOwnerKind::Static(..) => {\n-                assert_eq!(self.mir_def_id.to_def_id(), closure_base_def_id);\n+                assert_eq!(self.mir_def.did.to_def_id(), closure_base_def_id);\n                 let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n                 let substs =\n                     self.infcx.replace_free_regions_with_nll_infer_vars(FR, &identity_substs);\n-                DefiningTy::Const(self.mir_def_id.to_def_id(), substs)\n+                DefiningTy::Const(self.mir_def.did.to_def_id(), substs)\n             }\n         }\n     }\n@@ -558,7 +559,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         defining_ty: DefiningTy<'tcx>,\n     ) -> UniversalRegionIndices<'tcx> {\n         let tcx = self.infcx.tcx;\n-        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id.to_def_id());\n+        let closure_base_def_id = tcx.closure_base_def_id(self.mir_def.did.to_def_id());\n         let identity_substs = InternalSubsts::identity_for_item(tcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n             DefiningTy::Closure(_, ref substs) | DefiningTy::Generator(_, ref substs, _) => {\n@@ -592,7 +593,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         match defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n-                assert_eq!(self.mir_def_id.to_def_id(), def_id);\n+                assert_eq!(self.mir_def.did.to_def_id(), def_id);\n                 let closure_sig = substs.as_closure().sig();\n                 let inputs_and_output = closure_sig.inputs_and_output();\n                 let closure_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n@@ -616,7 +617,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             }\n \n             DefiningTy::Generator(def_id, substs, movability) => {\n-                assert_eq!(self.mir_def_id.to_def_id(), def_id);\n+                assert_eq!(self.mir_def.did.to_def_id(), def_id);\n                 let resume_ty = substs.as_generator().resume_ty();\n                 let output = substs.as_generator().return_ty();\n                 let generator_ty = tcx.mk_generator(def_id, substs, movability);\n@@ -634,8 +635,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             DefiningTy::Const(def_id, _) => {\n                 // For a constant body, there are no inputs, and one\n                 // \"output\" (the type of the constant).\n-                assert_eq!(self.mir_def_id.to_def_id(), def_id);\n-                let ty = tcx.type_of(def_id);\n+                assert_eq!(self.mir_def.did.to_def_id(), def_id);\n+                let ty = tcx.type_of(self.mir_def.def_id_for_type_of());\n                 let ty = indices.fold_to_region_vids(tcx, &ty);\n                 ty::Binder::dummy(tcx.intern_type_list(&[ty]))\n             }"}, {"sha": "cec7f1bcb9d9bb40ff3783293fc2cd87aa4e9edf", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -288,21 +288,22 @@ pub fn const_eval_raw_provider<'tcx>(\n     }\n \n     let cid = key.value;\n-    let def_id = cid.instance.def.def_id();\n+    let def = cid.instance.def.with_opt_param();\n \n-    if let Some(def_id) = def_id.as_local() {\n-        if tcx.has_typeck_tables(def_id) {\n-            if let Some(error_reported) = tcx.typeck_tables_of(def_id).tainted_by_errors {\n+    if let Some(def) = def.as_local() {\n+        if tcx.has_typeck_tables(def.did) {\n+            if let Some(error_reported) = tcx.typeck_tables_of_opt_const_arg(def).tainted_by_errors\n+            {\n                 return Err(ErrorHandled::Reported(error_reported));\n             }\n         }\n     }\n \n-    let is_static = tcx.is_static(def_id);\n+    let is_static = tcx.is_static(def.did);\n \n     let mut ecx = InterpCx::new(\n         tcx,\n-        tcx.def_span(cid.instance.def_id()),\n+        tcx.def_span(def.did),\n         key.param_env,\n         CompileTimeInterpreter::new(tcx.sess.const_eval_limit()),\n         MemoryExtra { can_access_statics: is_static },\n@@ -334,9 +335,9 @@ pub fn const_eval_raw_provider<'tcx>(\n                 }\n \n                 v\n-            } else if let Some(def_id) = def_id.as_local() {\n+            } else if let Some(def) = def.as_local() {\n                 // constant defined in this crate, we can figure out a lint level!\n-                match tcx.def_kind(def_id.to_def_id()) {\n+                match tcx.def_kind(def.did.to_def_id()) {\n                     // constants never produce a hard error at the definition site. Anything else is\n                     // a backwards compatibility hazard (and will break old versions of winapi for\n                     // sure)\n@@ -346,9 +347,9 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // validation thus preventing such a hard error from being a backwards\n                     // compatibility hazard\n                     DefKind::Const | DefKind::AssocConst => {\n-                        let hir_id = tcx.hir().as_local_hir_id(def_id);\n+                        let hir_id = tcx.hir().as_local_hir_id(def.did);\n                         err.report_as_lint(\n-                            tcx.at(tcx.def_span(def_id)),\n+                            tcx.at(tcx.def_span(def.did)),\n                             \"any use of this value will cause an error\",\n                             hir_id,\n                             Some(err.span),\n@@ -359,7 +360,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                     // deny-by-default lint\n                     _ => {\n                         if let Some(p) = cid.promoted {\n-                            let span = tcx.promoted_mir(def_id)[p].span;\n+                            let span = tcx.promoted_mir_of_opt_const_arg(def.to_global())[p].span;\n                             if let err_inval!(ReferencedConstant) = err.error {\n                                 err.report_as_error(\n                                     tcx.at(span),\n@@ -369,7 +370,7 @@ pub fn const_eval_raw_provider<'tcx>(\n                                 err.report_as_lint(\n                                     tcx.at(span),\n                                     \"reaching this expression at runtime will panic or abort\",\n-                                    tcx.hir().as_local_hir_id(def_id),\n+                                    tcx.hir().as_local_hir_id(def.did),\n                                     Some(err.span),\n                                 )\n                             }"}, {"sha": "6453630bb92ba07f03a178ed34d0f99e1823436c", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -191,11 +191,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         debug!(\"find_mir_or_eval_fn: {:?}\", instance);\n \n         // Only check non-glue functions\n-        if let ty::InstanceDef::Item(def_id) = instance.def {\n+        if let ty::InstanceDef::Item(def) = instance.def {\n             // Execution might have wandered off into other crates, so we cannot do a stability-\n             // sensitive check here.  But we can at least rule out functions that are not const\n             // at all.\n-            if ecx.tcx.is_const_fn_raw(def_id) {\n+            if ecx.tcx.is_const_fn_raw(def.did) {\n                 // If this function is a `const fn` then under certain circumstances we\n                 // can evaluate call via the query system, thus memoizing all future calls.\n                 if ecx.try_eval_const_fn_call(instance, ret, args)? {"}, {"sha": "c59b7c98e982b022fbfc37919a9b6d5ec8fda533", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -394,24 +394,30 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         promoted: Option<mir::Promoted>,\n     ) -> InterpResult<'tcx, &'tcx mir::Body<'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n-        let did = instance.def_id();\n-        if let Some(did) = did.as_local() {\n-            if self.tcx.has_typeck_tables(did) {\n-                if let Some(error_reported) = self.tcx.typeck_tables_of(did).tainted_by_errors {\n+        let def = instance.with_opt_param();\n+        if let Some(def) = def.as_local() {\n+            if self.tcx.has_typeck_tables(def.did) {\n+                if let Some(error_reported) =\n+                    self.tcx.typeck_tables_of_opt_const_arg(def).tainted_by_errors\n+                {\n                     throw_inval!(TypeckError(error_reported))\n                 }\n             }\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {\n-            return Ok(&self.tcx.promoted_mir(did)[promoted]);\n+            return Ok(&self.tcx.promoted_mir_of_opt_const_arg(def)[promoted]);\n         }\n         match instance {\n-            ty::InstanceDef::Item(def_id) => {\n-                if self.tcx.is_mir_available(did) {\n-                    Ok(self.tcx.optimized_mir(did))\n+            ty::InstanceDef::Item(def) => {\n+                if self.tcx.is_mir_available(def.did) {\n+                    if let Some((did, param_did)) = def.as_const_arg() {\n+                        Ok(self.tcx.optimized_mir_of_const_arg((did, param_did)))\n+                    } else {\n+                        Ok(self.tcx.optimized_mir(def.did))\n+                    }\n                 } else {\n-                    throw_unsup!(NoMirFor(def_id))\n+                    throw_unsup!(NoMirFor(def.did))\n                 }\n             }\n             _ => Ok(self.tcx.instance_mir(instance)),"}, {"sha": "face72d70cea0b6d36fd2f7265f2a36024cd9998", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -549,8 +549,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n-                let instance = self.resolve(def_id, substs)?;\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+                let instance = self.resolve(def.did, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation.\n                 // The reason we use `const_eval_raw` everywhere else is to prevent cycles during\n                 // validation, because validation automatically reads through any references, thus"}, {"sha": "35fb950ce66b9397eeb632da6c2dd240f9d07184", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -622,12 +622,12 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         match substituted_constant.val {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n-                match self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+                match self.tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n                     Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n-                        self.tcx.def_span(def_id),\n+                        self.tcx.def_span(def.did),\n                         \"collection encountered polymorphic constant\",\n                     ),\n                 }\n@@ -768,8 +768,8 @@ fn visit_instance_use<'tcx>(\n // need a mono item.\n fn should_monomorphize_locally<'tcx>(tcx: TyCtxt<'tcx>, instance: &Instance<'tcx>) -> bool {\n     let def_id = match instance.def {\n-        ty::InstanceDef::Item(def_id) | ty::InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n-\n+        ty::InstanceDef::Item(def) => def.did,\n+        ty::InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n         ty::InstanceDef::VtableShim(..)\n         | ty::InstanceDef::ReifyShim(..)\n         | ty::InstanceDef::ClosureOnceShim { .. }"}, {"sha": "410ed66e008dc365d4e3b936900ae92f83a8cb55", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -314,7 +314,8 @@ fn mono_item_visibility(\n     };\n \n     let def_id = match instance.def {\n-        InstanceDef::Item(def_id) | InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n+        InstanceDef::Item(def) => def.did,\n+        InstanceDef::DropGlue(def_id, Some(_)) => def_id,\n \n         // These are all compiler glue and such, never exported, always hidden.\n         InstanceDef::VtableShim(..)\n@@ -704,7 +705,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n     match mono_item {\n         MonoItem::Fn(instance) => {\n             let def_id = match instance.def {\n-                ty::InstanceDef::Item(def_id) => def_id,\n+                ty::InstanceDef::Item(def) => def.did,\n                 ty::InstanceDef::VtableShim(..)\n                 | ty::InstanceDef::ReifyShim(..)\n                 | ty::InstanceDef::FnPtrShim(..)"}, {"sha": "445a0230afd3a977d144b3240eb9e2f4236c67c2", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -244,11 +244,16 @@ where\n     };\n \n     // Check the qualifs of the value of `const` items.\n-    if let ty::ConstKind::Unevaluated(def_id, _, promoted) = constant.literal.val {\n+    if let ty::ConstKind::Unevaluated(def, _, promoted) = constant.literal.val {\n         assert!(promoted.is_none());\n         // Don't peek inside trait associated constants.\n-        if cx.tcx.trait_of_item(def_id).is_none() {\n-            let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n+        if cx.tcx.trait_of_item(def.did).is_none() {\n+            let qualifs = if let Some((did, param_did)) = def.as_const_arg() {\n+                cx.tcx.at(constant.span).mir_const_qualif_const_arg((did, param_did))\n+            } else {\n+                cx.tcx.at(constant.span).mir_const_qualif(def.did)\n+            };\n+\n             if !Q::in_qualifs(&qualifs) {\n                 return false;\n             }"}, {"sha": "f64c72e7b362dfce3c0621308d4d1f3951fef38a", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -520,8 +520,8 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     let instance = Instance::resolve(self.tcx, self.param_env, def_id, substs);\n                     debug!(\"Resolving ({:?}) -> {:?}\", def_id, instance);\n                     if let Ok(Some(func)) = instance {\n-                        if let InstanceDef::Item(def_id) = func.def {\n-                            if is_const_fn(self.tcx, def_id) {\n+                        if let InstanceDef::Item(def) = func.def {\n+                            if is_const_fn(self.tcx, def.did) {\n                                 return;\n                             }\n                         }"}, {"sha": "2605d45f8101e3ab97934aa2f0136c92b36a4c48", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -489,7 +489,19 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n }\n \n pub(crate) fn provide(providers: &mut Providers) {\n-    *providers = Providers { unsafety_check_result, unsafe_derive_on_repr_packed, ..*providers };\n+    *providers = Providers {\n+        unsafety_check_result: |tcx, def_id| {\n+            unsafety_check_result(tcx, ty::WithOptConstParam::unknown(def_id))\n+        },\n+        unsafety_check_result_for_const_arg: |tcx, (did, param_did)| {\n+            unsafety_check_result(\n+                tcx,\n+                ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n+            )\n+        },\n+        unsafe_derive_on_repr_packed,\n+        ..*providers\n+    };\n }\n \n struct UnusedUnsafeVisitor<'a> {\n@@ -535,32 +547,42 @@ fn check_unused_unsafe(\n     intravisit::Visitor::visit_body(&mut visitor, body);\n }\n \n-fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: LocalDefId) -> UnsafetyCheckResult {\n-    debug!(\"unsafety_violations({:?})\", def_id);\n+fn unsafety_check_result<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx UnsafetyCheckResult {\n+    if def.const_param_did.is_none() {\n+        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n+            return tcx.unsafety_check_result_for_const_arg((def.did, param_did));\n+        }\n+    }\n+\n+    debug!(\"unsafety_violations({:?})\", def);\n \n     // N.B., this borrow is valid because all the consumers of\n     // `mir_built` force this.\n-    let body = &tcx.mir_built(def_id).borrow();\n+    let body = &tcx.mir_built(def).borrow();\n \n-    let param_env = tcx.param_env(def_id);\n+    let param_env = tcx.param_env(def.did);\n \n-    let id = tcx.hir().as_local_hir_id(def_id);\n+    let id = tcx.hir().as_local_hir_id(def.did);\n     let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n         hir::BodyOwnerKind::Closure => (false, false),\n         hir::BodyOwnerKind::Fn => {\n-            (tcx.is_const_fn_raw(def_id.to_def_id()), is_min_const_fn(tcx, def_id.to_def_id()))\n+            (tcx.is_const_fn_raw(def.did.to_def_id()), is_min_const_fn(tcx, def.did.to_def_id()))\n         }\n         hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n     let mut checker =\n-        UnsafetyChecker::new(const_context, min_const_fn, body, def_id, tcx, param_env);\n+        UnsafetyChecker::new(const_context, min_const_fn, body, def.did, tcx, param_env);\n     checker.visit_body(&body);\n \n-    check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);\n-    UnsafetyCheckResult {\n+    check_unused_unsafe(tcx, def.did, &checker.used_unsafe, &mut checker.inherited_blocks);\n+\n+    tcx.arena.alloc(UnsafetyCheckResult {\n         violations: checker.violations.into(),\n         unsafe_blocks: checker.inherited_blocks.into(),\n-    }\n+    })\n }\n \n fn unsafe_derive_on_repr_packed(tcx: TyCtxt<'_>, def_id: LocalDefId) {"}, {"sha": "51a9e76e762ebe50a66548dd4db53e0214da7417", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 139, "deletions": 47, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::steal::Steal;\n-use rustc_middle::ty::{InstanceDef, TyCtxt, TypeFoldable};\n+use rustc_middle::ty::{self, InstanceDef, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n@@ -48,12 +48,23 @@ pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         mir_keys,\n         mir_const,\n-        mir_const_qualif,\n+        mir_const_qualif: |tcx, did| {\n+            mir_const_qualif(tcx, ty::WithOptConstParam::unknown(did.expect_local()))\n+        },\n+        mir_const_qualif_const_arg: |tcx, (did, param_did)| {\n+            mir_const_qualif(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n+        },\n         mir_validated,\n         mir_drops_elaborated_and_const_checked,\n         optimized_mir,\n+        optimized_mir_of_const_arg,\n         is_mir_available,\n-        promoted_mir,\n+        promoted_mir: |tcx, def_id| {\n+            promoted_mir(tcx, ty::WithOptConstParam::unknown(def_id.expect_local()))\n+        },\n+        promoted_mir_of_const_arg: |tcx, (did, param_did)| {\n+            promoted_mir(tcx, ty::WithOptConstParam { did, const_param_did: Some(param_did) })\n+        },\n         ..*providers\n     };\n     instrument_coverage::provide(providers);\n@@ -116,7 +127,14 @@ pub struct MirSource<'tcx> {\n \n impl<'tcx> MirSource<'tcx> {\n     pub fn item(def_id: DefId) -> Self {\n-        MirSource { instance: InstanceDef::Item(def_id), promoted: None }\n+        MirSource {\n+            instance: InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),\n+            promoted: None,\n+        }\n+    }\n+\n+    pub fn with_opt_param(self) -> ty::WithOptConstParam<DefId> {\n+        self.instance.with_opt_param()\n     }\n \n     #[inline]\n@@ -202,9 +220,14 @@ pub fn run_passes(\n     }\n }\n \n-fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n-    let def_id = def_id.expect_local();\n-    let const_kind = tcx.hir().body_const_context(def_id);\n+fn mir_const_qualif(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> ConstQualifs {\n+    if def.const_param_did.is_none() {\n+        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_const_qualif_const_arg((def.did, param_did));\n+        }\n+    }\n+\n+    let const_kind = tcx.hir().body_const_context(def.did);\n \n     // No need to const-check a non-const `fn`.\n     if const_kind.is_none() {\n@@ -215,15 +238,20 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     // cannot yet be stolen), because `mir_validated()`, which steals\n     // from `mir_const(), forces this query to execute before\n     // performing the steal.\n-    let body = &tcx.mir_const(def_id.to_def_id()).borrow();\n+    let body = &tcx.mir_const(def).borrow();\n \n     if body.return_ty().references_error() {\n         tcx.sess.delay_span_bug(body.span, \"mir_const_qualif: MIR had errors\");\n         return Default::default();\n     }\n \n-    let ccx =\n-        check_consts::ConstCx { body, tcx, def_id, const_kind, param_env: tcx.param_env(def_id) };\n+    let ccx = check_consts::ConstCx {\n+        body,\n+        tcx,\n+        def_id: def.did,\n+        const_kind,\n+        param_env: tcx.param_env(def.did),\n+    };\n \n     let mut validator = check_consts::validation::Validator::new(&ccx);\n     validator.check_body();\n@@ -234,22 +262,39 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n }\n \n /// Make MIR ready for const evaluation. This is run on all MIR, not just on consts!\n-fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n-    let def_id = def_id.expect_local();\n+fn mir_const<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx Steal<Body<'tcx>> {\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_const(ty::WithOptConstParam { const_param_did, ..def });\n+        }\n+    }\n \n     // Unsafety check uses the raw mir, so make sure it is run.\n-    let _ = tcx.unsafety_check_result(def_id);\n+    if let Some(param_did) = def.const_param_did {\n+        tcx.ensure().unsafety_check_result_for_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().unsafety_check_result(def.did);\n+    }\n \n-    let mut body = tcx.mir_built(def_id).steal();\n+    let mut body = tcx.mir_built(def).steal();\n \n-    util::dump_mir(tcx, None, \"mir_map\", &0, MirSource::item(def_id.to_def_id()), &body, |_, _| {\n-        Ok(())\n-    });\n+    util::dump_mir(\n+        tcx,\n+        None,\n+        \"mir_map\",\n+        &0,\n+        MirSource { instance: InstanceDef::Item(def.to_global()), promoted: None },\n+        &body,\n+        |_, _| Ok(()),\n+    );\n \n     run_passes(\n         tcx,\n         &mut body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(def.to_global()),\n         None,\n         MirPhase::Const,\n         &[&[\n@@ -265,13 +310,19 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n \n fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-) -> (Steal<Body<'tcx>>, Steal<IndexVec<Promoted, Body<'tcx>>>) {\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_validated(ty::WithOptConstParam { const_param_did, ..def });\n+        }\n+    }\n+\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n-    let _ = tcx.mir_const_qualif(def_id.to_def_id());\n+    let _ = tcx.mir_const_qualif_opt_const_arg(def);\n \n-    let mut body = tcx.mir_const(def_id.to_def_id()).steal();\n+    let mut body = tcx.mir_const(def).steal();\n \n     let mut required_consts = Vec::new();\n     let mut required_consts_visitor = RequiredConstsVisitor::new(&mut required_consts);\n@@ -284,7 +335,7 @@ fn mir_validated(\n     run_passes(\n         tcx,\n         &mut body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(def.to_global()),\n         None,\n         MirPhase::Validated,\n         &[&[\n@@ -304,17 +355,30 @@ fn mir_validated(\n \n fn mir_drops_elaborated_and_const_checked<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    def_id: LocalDefId,\n-) -> Steal<Body<'tcx>> {\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx Steal<Body<'tcx>> {\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_drops_elaborated_and_const_checked(ty::WithOptConstParam {\n+                const_param_did,\n+                ..def\n+            });\n+        }\n+    }\n+\n     // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n     // execute before we can steal.\n-    tcx.ensure().mir_borrowck(def_id);\n+    if let Some(param_did) = def.const_param_did {\n+        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().mir_borrowck(def.did);\n+    }\n \n-    let (body, _) = tcx.mir_validated(def_id);\n+    let (body, _) = tcx.mir_validated(def);\n     let mut body = body.steal();\n \n-    run_post_borrowck_cleanup_passes(tcx, &mut body, def_id, None);\n-    check_consts::post_drop_elaboration::check_live_drops(tcx, def_id, &body);\n+    run_post_borrowck_cleanup_passes(tcx, &mut body, def.did, None);\n+    check_consts::post_drop_elaboration::check_live_drops(tcx, def.did, &body);\n     tcx.alloc_steal_mir(body)\n }\n \n@@ -350,7 +414,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id())),\n         promoted,\n         MirPhase::DropElab,\n         &[post_borrowck_cleanup],\n@@ -414,7 +478,7 @@ fn run_optimization_passes<'tcx>(\n     run_passes(\n         tcx,\n         body,\n-        InstanceDef::Item(def_id.to_def_id()),\n+        InstanceDef::Item(ty::WithOptConstParam::unknown(def_id.to_def_id())),\n         promoted,\n         MirPhase::Optimized,\n         &[\n@@ -424,42 +488,70 @@ fn run_optimization_passes<'tcx>(\n     );\n }\n \n-fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n-    if tcx.is_constructor(def_id) {\n+fn optimized_mir<'tcx>(tcx: TyCtxt<'tcx>, did: DefId) -> &'tcx Body<'tcx> {\n+    let did = did.expect_local();\n+    if let Some(param_did) = tcx.opt_const_param_of(did) {\n+        tcx.optimized_mir_of_const_arg((did, param_did))\n+    } else {\n+        tcx.arena.alloc(inner_optimized_mir(tcx, ty::WithOptConstParam::unknown(did)))\n+    }\n+}\n+\n+fn optimized_mir_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (did, param_did): (LocalDefId, DefId),\n+) -> &'tcx Body<'tcx> {\n+    tcx.arena.alloc(inner_optimized_mir(\n+        tcx,\n+        ty::WithOptConstParam { did, const_param_did: Some(param_did) },\n+    ))\n+}\n+\n+fn inner_optimized_mir(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n+    if tcx.is_constructor(def.did.to_def_id()) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n         // qualification and borrow checking the trouble of special casing\n         // constructors.\n-        return shim::build_adt_ctor(tcx, def_id);\n+        return shim::build_adt_ctor(tcx, def.did.to_def_id());\n     }\n \n-    let def_id = def_id.expect_local();\n-\n-    let mut body = tcx.mir_drops_elaborated_and_const_checked(def_id).steal();\n-    run_optimization_passes(tcx, &mut body, def_id, None);\n+    let mut body = tcx.mir_drops_elaborated_and_const_checked(def).steal();\n+    run_optimization_passes(tcx, &mut body, def.did, None);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n \n     body\n }\n \n-fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> IndexVec<Promoted, Body<'_>> {\n-    if tcx.is_constructor(def_id) {\n-        return IndexVec::new();\n+fn promoted_mir<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def: ty::WithOptConstParam<LocalDefId>,\n+) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n+    if def.const_param_did.is_none() {\n+        if let Some(param_did) = tcx.opt_const_param_of(def.did) {\n+            return tcx.promoted_mir_of_const_arg((def.did, param_did));\n+        }\n     }\n \n-    let def_id = def_id.expect_local();\n+    if tcx.is_constructor(def.did.to_def_id()) {\n+        return tcx.arena.alloc(IndexVec::new());\n+    }\n \n-    tcx.ensure().mir_borrowck(def_id);\n-    let (_, promoted) = tcx.mir_validated(def_id);\n+    if let Some(param_did) = def.const_param_did {\n+        tcx.ensure().mir_borrowck_const_arg((def.did, param_did));\n+    } else {\n+        tcx.ensure().mir_borrowck(def.did);\n+    }\n+    let (_, promoted) = tcx.mir_validated(def);\n     let mut promoted = promoted.steal();\n \n     for (p, mut body) in promoted.iter_enumerated_mut() {\n-        run_post_borrowck_cleanup_passes(tcx, &mut body, def_id, Some(p));\n-        run_optimization_passes(tcx, &mut body, def_id, Some(p));\n+        run_post_borrowck_cleanup_passes(tcx, &mut body, def.did, Some(p));\n+        run_optimization_passes(tcx, &mut body, def.did, Some(p));\n     }\n \n     debug_assert!(!promoted.has_free_regions(), \"Free regions in promoted MIR\");\n \n-    promoted\n+    tcx.arena.alloc(promoted)\n }"}, {"sha": "59a8415ef96f04d14cbb34a1ff0cba5699c02c9f", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -60,16 +60,15 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n             return;\n         }\n \n-        let def_id = src.def_id().expect_local();\n+        let def = src.with_opt_param().expect_local();\n \n         let mut rpo = traversal::reverse_postorder(body);\n-        let ccx = ConstCx::new(tcx, def_id, body);\n+        let ccx = ConstCx::new(tcx, def.did, body);\n         let (temps, all_candidates) = collect_temps_and_candidates(&ccx, &mut rpo);\n \n         let promotable_candidates = validate_candidates(&ccx, &temps, &all_candidates);\n \n-        let promoted =\n-            promote_candidates(def_id.to_def_id(), body, tcx, temps, promotable_candidates);\n+        let promoted = promote_candidates(def.to_global(), body, tcx, temps, promotable_candidates);\n         self.promoted_fragments.set(promoted);\n     }\n }\n@@ -937,7 +936,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n \n     fn promote_candidate(\n         mut self,\n-        def_id: DefId,\n+        def: ty::WithOptConstParam<DefId>,\n         candidate: Candidate,\n         next_promoted_id: usize,\n     ) -> Option<Body<'tcx>> {\n@@ -955,8 +954,8 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     literal: tcx.mk_const(ty::Const {\n                         ty,\n                         val: ty::ConstKind::Unevaluated(\n-                            def_id,\n-                            InternalSubsts::for_item(tcx, def_id, |param, _| {\n+                            def,\n+                            InternalSubsts::for_item(tcx, def.did, |param, _| {\n                                 if let ty::GenericParamDefKind::Lifetime = param.kind {\n                                     tcx.lifetimes.re_erased.into()\n                                 } else {\n@@ -1100,7 +1099,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n }\n \n pub fn promote_candidates<'tcx>(\n-    def_id: DefId,\n+    def: ty::WithOptConstParam<DefId>,\n     body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,\n@@ -1157,7 +1156,7 @@ pub fn promote_candidates<'tcx>(\n         };\n \n         //FIXME(oli-obk): having a `maybe_push()` method on `IndexVec` might be nice\n-        if let Some(promoted) = promoter.promote_candidate(def_id, candidate, promotions.len()) {\n+        if let Some(promoted) = promoter.promote_candidate(def, candidate, promotions.len()) {\n             promotions.push(promoted);\n         }\n     }"}, {"sha": "990bfc064c2beb0a1d9728b608eec7d7352ae47b", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -248,7 +248,10 @@ pub fn write_mir_pretty<'tcx>(\n \n         for (i, body) in tcx.promoted_mir(def_id).iter_enumerated() {\n             writeln!(w)?;\n-            let src = MirSource { instance: ty::InstanceDef::Item(def_id), promoted: Some(i) };\n+            let src = MirSource {\n+                instance: ty::InstanceDef::Item(ty::WithOptConstParam::unknown(def_id)),\n+                promoted: Some(i),\n+            };\n             write_mir_fn(tcx, src, body, &mut |_, _| Ok(()), w)?;\n         }\n     }"}, {"sha": "21a5ea0aae30576d6ba237470188d8a426355f77", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -21,13 +21,19 @@ use rustc_target::spec::PanicStrategy;\n \n use super::lints;\n \n-crate fn mir_built(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::steal::Steal<Body<'_>> {\n-    tcx.alloc_steal_mir(mir_build(tcx, def_id))\n+crate fn mir_built<'tcx>(tcx: TyCtxt<'tcx>, def: ty::WithOptConstParam<LocalDefId>) -> &'tcx ty::steal::Steal<Body<'tcx>> {\n+    if def.const_param_did.is_none() {\n+        if let const_param_did @ Some(_) = tcx.opt_const_param_of(def.did) {\n+            return tcx.mir_built(ty::WithOptConstParam { const_param_did, ..def });\n+        }\n+    }\n+\n+    tcx.alloc_steal_mir(mir_build(tcx, def))\n }\n \n /// Construct the MIR for a given `DefId`.\n-fn mir_build(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Body<'_> {\n-    let id = tcx.hir().as_local_hir_id(def_id);\n+fn mir_build(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -> Body<'_> {\n+    let id = tcx.hir().as_local_hir_id(def.did);\n \n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span) = match tcx.hir().get(id) {\n@@ -57,11 +63,11 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Body<'_> {\n         }) => (*body_id, ty.span),\n         Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => (*body, tcx.hir().span(*hir_id)),\n \n-        _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def_id),\n+        _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def.did),\n     };\n \n     tcx.infer_ctxt().enter(|infcx| {\n-        let cx = Cx::new(&infcx, id);\n+        let cx = Cx::new(&infcx, def, id);\n         let body = if let Some(ErrorReported) = cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n         } else if cx.body_owner_kind.is_fn_or_closure() {\n@@ -181,7 +187,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Body<'_> {\n             build::construct_const(cx, body_id, return_ty, return_ty_span)\n         };\n \n-        lints::check(tcx, &body, def_id);\n+        lints::check(tcx, &body, def.did);\n \n         // The borrow checker will replace all the regions here with its own\n         // inference variables. There's no point having non-erased regions here."}, {"sha": "89ad8a1b3370c758def74801aa0c834cbb30cb65", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -600,7 +600,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n-                                val: ty::ConstKind::Unevaluated(did, substs, None),\n+                                val: ty::ConstKind::Unevaluated(\n+                                    ty::WithOptConstParam::unknown(did),\n+                                    substs,\n+                                    None,\n+                                ),\n                                 ty: var_ty,\n                             }));\n                             let bin = ExprKind::Binary { op: BinOp::Add, lhs, rhs: offset };\n@@ -796,7 +800,11 @@ fn convert_path_expr<'a, 'tcx>(\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n-                    val: ty::ConstKind::Unevaluated(def_id, substs, None),\n+                    val: ty::ConstKind::Unevaluated(\n+                        ty::WithOptConstParam::unknown(def_id),\n+                        substs,\n+                        None,\n+                    ),\n                     ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,"}, {"sha": "12d1c637fb0069a697c575ad365f4d9e69d0eb63", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -1,4 +1,4 @@\n-//! This module contains the fcuntaiontliy to convert from the wacky tcx data\n+//! This module contains the functionality to convert from the wacky tcx data\n //! structures into the HAIR. The `builder` is generally ignorant of the tcx,\n //! etc., and instead goes through the `Cx` for most of its work.\n \n@@ -8,7 +8,7 @@ use crate::hair::*;\n use rustc_ast::ast;\n use rustc_ast::attr;\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::Node;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n@@ -50,10 +50,13 @@ crate struct Cx<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Cx<'a, 'tcx> {\n-    crate fn new(infcx: &'a InferCtxt<'a, 'tcx>, src_id: hir::HirId) -> Cx<'a, 'tcx> {\n+    crate fn new(\n+        infcx: &'a InferCtxt<'a, 'tcx>,\n+        def: ty::WithOptConstParam<LocalDefId>,\n+        src_id: hir::HirId,\n+    ) -> Cx<'a, 'tcx> {\n         let tcx = infcx.tcx;\n-        let src_def_id = tcx.hir().local_def_id(src_id);\n-        let tables = tcx.typeck_tables_of(src_def_id);\n+        let tables = tcx.typeck_tables_of_opt_const_arg(def);\n         let body_owner_kind = tcx.hir().body_owner_kind(src_id);\n \n         let constness = match body_owner_kind {\n@@ -78,12 +81,12 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n             tcx,\n             infcx,\n             root_lint_level: src_id,\n-            param_env: tcx.param_env(src_def_id),\n-            identity_substs: InternalSubsts::identity_for_item(tcx, src_def_id.to_def_id()),\n-            region_scope_tree: tcx.region_scope_tree(src_def_id),\n+            param_env: tcx.param_env(def.did),\n+            identity_substs: InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n+            region_scope_tree: tcx.region_scope_tree(def.did),\n             tables,\n             constness,\n-            body_owner: src_def_id.to_def_id(),\n+            body_owner: def.did.to_def_id(),\n             body_owner_kind,\n             check_overflow,\n         }"}, {"sha": "c6c76028f857c80fe9089d4b884e6723017c99c2", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -524,10 +524,10 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 let stalled_on = &mut pending_obligation.stalled_on;\n \n                 let mut evaluate = |c: &'tcx Const<'tcx>| {\n-                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                    if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n                         match self.selcx.infcx().const_eval_resolve(\n                             obligation.param_env,\n-                            def_id,\n+                            def,\n                             substs,\n                             promoted,\n                             Some(obligation.cause.span),"}, {"sha": "5dc5fb797ff6c1707de6344a34f2d5570dbc3afd", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -507,11 +507,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 debug!(\"evaluate_predicate_recursively: equating consts c1={:?} c2={:?}\", c1, c2);\n \n                 let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                    if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n                         self.infcx\n                             .const_eval_resolve(\n                                 obligation.param_env,\n-                                def_id,\n+                                def,\n                                 substs,\n                                 promoted,\n                                 Some(obligation.cause.span),"}, {"sha": "b8446fa0012abc9a05ec9c2c87c7c0008e906e61", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -116,8 +116,8 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(data.skip_binder().a.into()); // (*)\n             wf.compute(data.skip_binder().b.into()); // (*)\n         }\n-        &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-            let obligations = wf.nominal_obligations(def_id, substs);\n+        &ty::PredicateKind::ConstEvaluatable(def, substs) => {\n+            let obligations = wf.nominal_obligations(def.did, substs);\n             wf.out.extend(obligations);\n \n             for arg in substs.iter() {\n@@ -359,13 +359,13 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n                 GenericArgKind::Const(constant) => {\n                     match constant.val {\n-                        ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n+                        ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                             assert!(promoted.is_none());\n \n-                            let obligations = self.nominal_obligations(def_id, substs);\n+                            let obligations = self.nominal_obligations(def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(def_id, substs)\n+                            let predicate = ty::PredicateKind::ConstEvaluatable(def, substs)\n                                 .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::new("}, {"sha": "0bc6c4709786833e4b0ac3eeead6554635e9a579", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -1,5 +1,5 @@\n use rustc_errors::ErrorReported;\n-use rustc_hir::def_id::DefId;\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt, TypeFoldable};\n@@ -14,15 +14,43 @@ fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n-    let (param_env, (def_id, substs)) = key.into_parts();\n+    let (param_env, (did, substs)) = key.into_parts();\n+    if let Some(did) = did.as_local() {\n+        if let Some(param_did) = tcx.opt_const_param_of(did) {\n+            return tcx.resolve_instance_of_const_arg(param_env.and((did, param_did, substs)));\n+        }\n+    }\n+\n+    inner_resolve_instance(tcx, param_env.and((ty::WithOptConstParam::unknown(did), substs)))\n+}\n+\n+fn resolve_instance_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    key: ty::ParamEnvAnd<'tcx, (LocalDefId, DefId, SubstsRef<'tcx>)>,\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    let (param_env, (did, const_param_did, substs)) = key.into_parts();\n+    inner_resolve_instance(\n+        tcx,\n+        param_env.and((\n+            ty::WithOptConstParam { did: did.to_def_id(), const_param_did: Some(const_param_did) },\n+            substs,\n+        )),\n+    )\n+}\n+\n+fn inner_resolve_instance<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    key: ty::ParamEnvAnd<'tcx, (ty::WithOptConstParam<DefId>, SubstsRef<'tcx>)>,\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    let (param_env, (def, substs)) = key.into_parts();\n \n-    debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n-    let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n+    debug!(\"resolve(def={:?}, substs={:?})\", def.did, substs);\n+    let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n-        let item = tcx.associated_item(def_id);\n+        let item = tcx.associated_item(def.did);\n         resolve_associated_item(tcx, &item, param_env, trait_def_id, substs)\n     } else {\n-        let ty = tcx.type_of(def_id);\n+        let ty = tcx.type_of(def.def_id_for_type_of());\n         let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, &ty);\n \n         let def = match item_type.kind {\n@@ -33,7 +61,7 @@ fn resolve_instance<'tcx>(\n                 } =>\n             {\n                 debug!(\" => intrinsic\");\n-                ty::InstanceDef::Intrinsic(def_id)\n+                ty::InstanceDef::Intrinsic(def.did)\n             }\n             ty::FnDef(def_id, substs) if Some(def_id) == tcx.lang_items().drop_in_place_fn() => {\n                 let ty = substs.type_at(0);\n@@ -53,12 +81,12 @@ fn resolve_instance<'tcx>(\n             }\n             _ => {\n                 debug!(\" => free item\");\n-                ty::InstanceDef::Item(def_id)\n+                ty::InstanceDef::Item(def)\n             }\n         };\n         Ok(Some(Instance { def, substs }))\n     };\n-    debug!(\"resolve(def_id={:?}, substs={:?}) = {:?}\", def_id, substs, result);\n+    debug!(\"resolve(def.did={:?}, substs={:?}) = {:?}\", def.did, substs, result);\n     result\n }\n \n@@ -182,7 +210,9 @@ fn resolve_associated_item<'tcx>(\n             Some(ty::Instance::new(leaf_def.item.def_id, substs))\n         }\n         traits::ImplSourceGenerator(generator_data) => Some(Instance {\n-            def: ty::InstanceDef::Item(generator_data.generator_def_id),\n+            def: ty::InstanceDef::Item(ty::WithOptConstParam::unknown(\n+                generator_data.generator_def_id,\n+            )),\n             substs: generator_data.substs,\n         }),\n         traits::ImplSourceClosure(closure_data) => {\n@@ -244,5 +274,6 @@ fn resolve_associated_item<'tcx>(\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { resolve_instance, ..*providers };\n+    *providers =\n+        ty::query::Providers { resolve_instance, resolve_instance_of_const_arg, ..*providers };\n }"}, {"sha": "37f48f82ea6746176b0745a8f2691720caa34331", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -886,8 +886,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    let ct_def_id = tcx.hir().local_def_id(ct.value.hir_id);\n-                    ty::Const::from_anon_const(tcx, ct_def_id).into()\n+                    ty::Const::from_opt_const_arg_anon_const(\n+                        tcx,\n+                        ty::WithOptConstParam {\n+                            did: tcx.hir().local_def_id(ct.value.hir_id),\n+                            const_param_did: Some(param.def_id),\n+                        },\n+                    )\n+                    .into()\n                 }\n                 _ => unreachable!(),\n             },"}, {"sha": "0ca85b5165ea09506d7e130b8c79c61181448288", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 }\n                 (GenericParamDefKind::Type { .. }, GenericArg::Type(ty)) => self.to_ty(ty).into(),\n                 (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                    self.to_const(&ct.value).into()\n+                    self.const_arg_to_const(&ct.value, param.def_id).into()\n                 }\n                 _ => unreachable!(),\n             },"}, {"sha": "9a8d78940ba0d219f0c346f1ef8cc5b544343f3d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -764,6 +764,7 @@ pub fn provide(providers: &mut Providers) {\n     method::provide(providers);\n     *providers = Providers {\n         typeck_item_bodies,\n+        typeck_tables_of_const_arg,\n         typeck_tables_of,\n         diagnostic_only_typeck_tables_of,\n         has_typeck_tables,\n@@ -955,9 +956,21 @@ where\n     val.fold_with(&mut FixupFolder { tcx })\n }\n \n+fn typeck_tables_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    (did, param_did): (LocalDefId, DefId),\n+) -> &ty::TypeckTables<'tcx> {\n+    let fallback = move || tcx.type_of(param_did);\n+    typeck_tables_of_with_fallback(tcx, did, fallback)\n+}\n+\n fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> &ty::TypeckTables<'tcx> {\n-    let fallback = move || tcx.type_of(def_id.to_def_id());\n-    typeck_tables_of_with_fallback(tcx, def_id, fallback)\n+    if let Some(param_did) = tcx.opt_const_param_of(def_id) {\n+        tcx.typeck_tables_of_const_arg((def_id, param_did))\n+    } else {\n+        let fallback = move || tcx.type_of(def_id.to_def_id());\n+        typeck_tables_of_with_fallback(tcx, def_id, fallback)\n+    }\n }\n \n /// Used only to get `TypeckTables` for type inference during error recovery.\n@@ -3542,6 +3555,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         c\n     }\n \n+    pub fn const_arg_to_const(\n+        &self,\n+        ast_c: &hir::AnonConst,\n+        param_def_id: DefId,\n+    ) -> &'tcx ty::Const<'tcx> {\n+        let const_def = ty::WithOptConstParam {\n+            did: self.tcx.hir().local_def_id(ast_c.hir_id),\n+            const_param_did: Some(param_def_id),\n+        };\n+        let c = ty::Const::from_opt_const_arg_anon_const(self.tcx, const_def);\n+        self.register_wf_obligation(\n+            c.into(),\n+            self.tcx.hir().span(ast_c.hir_id),\n+            ObligationCauseCode::MiscObligation,\n+        );\n+        c\n+    }\n+\n     // If the type given by the user has free regions, save it for later, since\n     // NLL would like to enforce those. Also pass in types that involve\n     // projections, since those can resolve to `'static` bounds (modulo #54940,\n@@ -5655,7 +5686,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.to_ty(ty).into()\n                     }\n                     (GenericParamDefKind::Const, GenericArg::Const(ct)) => {\n-                        self.to_const(&ct.value).into()\n+                        self.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     _ => unreachable!(),\n                 },"}, {"sha": "845a4fcafc2241e31b0c4ab308eff591be9e1edc", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -423,8 +423,11 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_predicate(traits::Obligation::new(\n                     cause,\n                     fcx.param_env,\n-                    ty::PredicateKind::ConstEvaluatable(discr_def_id.to_def_id(), discr_substs)\n-                        .to_predicate(fcx.tcx),\n+                    ty::PredicateKind::ConstEvaluatable(\n+                        ty::WithOptConstParam::unknown(discr_def_id.to_def_id()),\n+                        discr_substs,\n+                    )\n+                    .to_predicate(fcx.tcx),\n                 ));\n             }\n         }"}, {"sha": "4354996614b2ae86a92cadb32c77cce8afd2e095", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -64,6 +64,7 @@ fn collect_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n+        opt_const_param_of: type_of::opt_const_param_of,\n         type_of: type_of::type_of,\n         generics_of,\n         predicates_of,"}, {"sha": "c265fadb82f9490d61b86355384acb9b1affe0c0", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 149, "deletions": 125, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -17,29 +17,141 @@ use rustc_trait_selection::traits;\n use super::ItemCtxt;\n use super::{bad_placeholder_type, is_suggestable_infer_ty};\n \n+/// Computes the relevant generic parameter for a potential generic const argument.\n+///\n+/// This should be called using the query `tcx.opt_const_param_of`.\n+pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n+    use hir::*;\n+\n+    let hir_id = tcx.hir().as_local_hir_id(def_id);\n+\n+    if let Node::AnonConst(_) = tcx.hir().get(hir_id) {\n+        let parent_node_id = tcx.hir().get_parent_node(hir_id);\n+        let parent_node = tcx.hir().get(parent_node_id);\n+\n+        match parent_node {\n+            Node::Expr(&Expr {\n+                kind:\n+                    ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),\n+                ..\n+            }) => {\n+                let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+                let tables = tcx.typeck_tables_of(body_owner);\n+                // This may fail in case the method/path does not actually exist.\n+                // As there is no relevant param for `def_id`, we simply return\n+                // `None` here.\n+                let type_dependent_def = tables.type_dependent_def_id(parent_node_id)?;\n+                let idx = segment\n+                    .args\n+                    .and_then(|args| {\n+                        args.args\n+                            .iter()\n+                            .filter(|arg| arg.is_const())\n+                            .position(|arg| arg.id() == hir_id)\n+                    })\n+                    .unwrap_or_else(|| {\n+                        bug!(\"no arg matching AnonConst in segment\");\n+                    });\n+\n+                tcx.generics_of(type_dependent_def)\n+                    .params\n+                    .iter()\n+                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                    .nth(idx)\n+                    .map(|param| param.def_id)\n+            }\n+\n+            Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n+            | Node::Expr(&Expr { kind: ExprKind::Struct(..), .. })\n+            | Node::Expr(&Expr { kind: ExprKind::Path(_), .. })\n+            | Node::TraitRef(..) => {\n+                let path = match parent_node {\n+                    Node::Ty(&Ty { kind: TyKind::Path(QPath::Resolved(_, path)), .. })\n+                    | Node::TraitRef(&TraitRef { path, .. }) => &*path,\n+                    Node::Expr(&Expr {\n+                        kind:\n+                            ExprKind::Path(QPath::Resolved(_, path))\n+                            | ExprKind::Struct(&QPath::Resolved(_, path), ..),\n+                        ..\n+                    }) => {\n+                        let body_owner =\n+                            tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+                        let _tables = tcx.typeck_tables_of(body_owner);\n+                        &*path\n+                    }\n+                    _ => span_bug!(DUMMY_SP, \"unexpected const parent path {:?}\", parent_node),\n+                };\n+\n+                // We've encountered an `AnonConst` in some path, so we need to\n+                // figure out which generic parameter it corresponds to and return\n+                // the relevant type.\n+\n+                let (arg_index, segment) = path\n+                    .segments\n+                    .iter()\n+                    .filter_map(|seg| seg.args.map(|args| (args.args, seg)))\n+                    .find_map(|(args, seg)| {\n+                        args.iter()\n+                            .filter(|arg| arg.is_const())\n+                            .position(|arg| arg.id() == hir_id)\n+                            .map(|index| (index, seg))\n+                    })\n+                    .unwrap_or_else(|| {\n+                        bug!(\"no arg matching AnonConst in path\");\n+                    });\n+\n+                // Try to use the segment resolution if it is valid, otherwise we\n+                // default to the path resolution.\n+                let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n+                let generics = match res {\n+                    Res::Def(DefKind::Ctor(..), def_id) => {\n+                        tcx.generics_of(tcx.parent(def_id).unwrap())\n+                    }\n+                    Res::Def(_, def_id) => tcx.generics_of(def_id),\n+                    Res::Err => {\n+                        tcx.sess.delay_span_bug(tcx.def_span(def_id), \"anon const with Res::Err\");\n+                        return None;\n+                    }\n+                    _ => span_bug!(\n+                        DUMMY_SP,\n+                        \"unexpected anon const res {:?} in path: {:?}\",\n+                        res,\n+                        path,\n+                    ),\n+                };\n+\n+                generics\n+                    .params\n+                    .iter()\n+                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const))\n+                    .nth(arg_index)\n+                    .map(|param| param.def_id)\n+            }\n+            _ => None,\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n+    let def_id = def_id.expect_local();\n     use rustc_hir::*;\n \n-    let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n+    let hir_id = tcx.hir().as_local_hir_id(def_id);\n \n-    let icx = ItemCtxt::new(tcx, def_id);\n+    let icx = ItemCtxt::new(tcx, def_id.to_def_id());\n \n     match tcx.hir().get(hir_id) {\n         Node::TraitItem(item) => match item.kind {\n             TraitItemKind::Fn(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                tcx.mk_fn_def(def_id, substs)\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n             TraitItemKind::Const(ref ty, body_id) => body_id\n                 .and_then(|body_id| {\n                     if is_suggestable_infer_ty(ty) {\n-                        Some(infer_placeholder_type(\n-                            tcx,\n-                            def_id.expect_local(),\n-                            body_id,\n-                            ty.span,\n-                            item.ident,\n-                        ))\n+                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident))\n                     } else {\n                         None\n                     }\n@@ -53,12 +165,12 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::ImplItem(item) => match item.kind {\n             ImplItemKind::Fn(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                tcx.mk_fn_def(def_id, substs)\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n             ImplItemKind::Const(ref ty, body_id) => {\n                 if is_suggestable_infer_ty(ty) {\n-                    infer_placeholder_type(tcx, def_id.expect_local(), body_id, ty.span, item.ident)\n+                    infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n                 } else {\n                     icx.to_ty(ty)\n                 }\n@@ -76,13 +188,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n             match item.kind {\n                 ItemKind::Static(ref ty, .., body_id) | ItemKind::Const(ref ty, body_id) => {\n                     if is_suggestable_infer_ty(ty) {\n-                        infer_placeholder_type(\n-                            tcx,\n-                            def_id.expect_local(),\n-                            body_id,\n-                            ty.span,\n-                            item.ident,\n-                        )\n+                        infer_placeholder_type(tcx, def_id, body_id, ty.span, item.ident)\n                     } else {\n                         icx.to_ty(ty)\n                     }\n@@ -91,26 +197,26 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     icx.to_ty(self_ty)\n                 }\n                 ItemKind::Fn(..) => {\n-                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                    tcx.mk_fn_def(def_id, substs)\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                    tcx.mk_fn_def(def_id.to_def_id(), substs)\n                 }\n                 ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) => {\n                     let def = tcx.adt_def(def_id);\n-                    let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+                    let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy { origin: hir::OpaqueTyOrigin::Binding, .. }) => {\n-                    let_position_impl_trait_type(tcx, def_id.expect_local())\n+                    let_position_impl_trait_type(tcx, def_id)\n                 }\n                 ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: None, .. }) => {\n-                    find_opaque_ty_constraints(tcx, def_id.expect_local())\n+                    find_opaque_ty_constraints(tcx, def_id)\n                 }\n                 // Opaque types desugared from `impl Trait`.\n                 ItemKind::OpaqueTy(OpaqueTy { impl_trait_fn: Some(owner), .. }) => {\n                     let concrete_ty = tcx\n                         .mir_borrowck(owner.expect_local())\n                         .concrete_opaque_types\n-                        .get(&def_id)\n+                        .get(&def_id.to_def_id())\n                         .map(|opaque| opaque.concrete_type)\n                         .unwrap_or_else(|| {\n                             tcx.sess.delay_span_bug(\n@@ -132,8 +238,8 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                 // resolves to itself. Return the non-revealed\n                                 // type, which should result in E0720.\n                                 tcx.mk_opaque(\n-                                    def_id,\n-                                    InternalSubsts::identity_for_item(tcx, def_id),\n+                                    def_id.to_def_id(),\n+                                    InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n                                 )\n                             }\n                         });\n@@ -158,35 +264,41 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::ForeignItem(foreign_item) => match foreign_item.kind {\n             ForeignItemKind::Fn(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                tcx.mk_fn_def(def_id, substs)\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n             ForeignItemKind::Static(ref t, _) => icx.to_ty(t),\n-            ForeignItemKind::Type => tcx.mk_foreign(def_id),\n+            ForeignItemKind::Type => tcx.mk_foreign(def_id.to_def_id()),\n         },\n \n         Node::Ctor(&ref def) | Node::Variant(Variant { data: ref def, .. }) => match *def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n                 tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id())\n             }\n             VariantData::Tuple(..) => {\n-                let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-                tcx.mk_fn_def(def_id, substs)\n+                let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+                tcx.mk_fn_def(def_id.to_def_id(), substs)\n             }\n         },\n \n         Node::Field(field) => icx.to_ty(&field.ty),\n \n         Node::Expr(&Expr { kind: ExprKind::Closure(.., gen), .. }) => {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id);\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n             if let Some(movability) = gen {\n-                tcx.mk_generator(def_id, substs, movability)\n+                tcx.mk_generator(def_id.to_def_id(), substs, movability)\n             } else {\n-                tcx.mk_closure(def_id, substs)\n+                tcx.mk_closure(def_id.to_def_id(), substs)\n             }\n         }\n \n         Node::AnonConst(_) => {\n+            if let Some(param) = tcx.opt_const_param_of(def_id) {\n+                // We defer to `type_of` of the corresponding parameter\n+                // for generic arguments.\n+                return tcx.type_of(param);\n+            }\n+\n             let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n             match parent_node {\n                 Node::Ty(&Ty { kind: TyKind::Array(_, ref constant), .. })\n@@ -203,94 +315,6 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     .discr_type()\n                     .to_ty(tcx),\n \n-                Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n-                | Node::Expr(&Expr { kind: ExprKind::Struct(..) | ExprKind::Path(_), .. })\n-                | Node::TraitRef(..) => {\n-                    let path = match parent_node {\n-                        Node::Ty(&Ty { kind: TyKind::Path(QPath::Resolved(_, path)), .. })\n-                        | Node::Expr(&Expr {\n-                            kind:\n-                                ExprKind::Path(QPath::Resolved(_, path))\n-                                | ExprKind::Struct(&QPath::Resolved(_, path), ..),\n-                            ..\n-                        })\n-                        | Node::TraitRef(&TraitRef { path, .. }) => &*path,\n-                        _ => {\n-                            return tcx.ty_error_with_message(\n-                                DUMMY_SP,\n-                                &format!(\"unexpected const parent path {:?}\", parent_node),\n-                            );\n-                        }\n-                    };\n-\n-                    // We've encountered an `AnonConst` in some path, so we need to\n-                    // figure out which generic parameter it corresponds to and return\n-                    // the relevant type.\n-\n-                    let (arg_index, segment) = path\n-                        .segments\n-                        .iter()\n-                        .filter_map(|seg| seg.args.as_ref().map(|args| (args.args, seg)))\n-                        .find_map(|(args, seg)| {\n-                            args.iter()\n-                                .filter(|arg| arg.is_const())\n-                                .enumerate()\n-                                .filter(|(_, arg)| arg.id() == hir_id)\n-                                .map(|(index, _)| (index, seg))\n-                                .next()\n-                        })\n-                        .unwrap_or_else(|| {\n-                            bug!(\"no arg matching AnonConst in path\");\n-                        });\n-\n-                    // Try to use the segment resolution if it is valid, otherwise we\n-                    // default to the path resolution.\n-                    let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n-                    let generics = match res {\n-                        Res::Def(DefKind::Ctor(..), def_id) => {\n-                            tcx.generics_of(tcx.parent(def_id).unwrap())\n-                        }\n-                        Res::Def(_, def_id) => tcx.generics_of(def_id),\n-                        res => {\n-                            return tcx.ty_error_with_message(\n-                                DUMMY_SP,\n-                                &format!(\n-                                    \"unexpected anon const res {:?} in path: {:?}\",\n-                                    res, path,\n-                                ),\n-                                );\n-                        }\n-                    };\n-\n-                    let ty = generics\n-                        .params\n-                        .iter()\n-                        .filter(|param| {\n-                            if let ty::GenericParamDefKind::Const = param.kind {\n-                                true\n-                            } else {\n-                                false\n-                            }\n-                        })\n-                        .nth(arg_index)\n-                        .map(|param| tcx.type_of(param.def_id));\n-\n-                    if let Some(ty) = ty {\n-                        ty\n-                    } else {\n-                        // This is no generic parameter associated with the arg. This is\n-                        // probably from an extra arg where one is not needed.\n-                        tcx.ty_error_with_message(\n-                            DUMMY_SP,\n-                            &format!(\n-                                \"missing generic parameter for `AnonConst`, \\\n-                                 parent: {:?}, res: {:?}\",\n-                                parent_node, res\n-                            ),\n-                        )\n-                    }\n-                }\n-\n                 x => tcx.ty_error_with_message(\n                     DUMMY_SP,\n                     &format!(\"unexpected const parent in type_of_def_id(): {:?}\", x),"}, {"sha": "52c306688268f51be4980e8e6e4ad0416672a573", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -466,12 +466,12 @@ pub fn name_from_pat(p: &hir::Pat<'_>) -> String {\n \n pub fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n-        ty::ConstKind::Unevaluated(def_id, _, promoted) => {\n-            let mut s = if let Some(def_id) = def_id.as_local() {\n-                let hir_id = cx.tcx.hir().as_local_hir_id(def_id);\n+        ty::ConstKind::Unevaluated(def, _, promoted) => {\n+            let mut s = if let Some(def) = def.as_local() {\n+                let hir_id = cx.tcx.hir().as_local_hir_id(def.did);\n                 print_const_expr(cx, cx.tcx.hir().body_owned_by(hir_id))\n             } else {\n-                inline::print_inlined_const(cx, def_id)\n+                inline::print_inlined_const(cx, def.did)\n             };\n             if let Some(promoted) = promoted {\n                 s.push_str(&format!(\"::{:?}\", promoted))"}, {"sha": "73d5bcf21a2b00c0c7e7b6c881ba7e12ab262c23", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -25,7 +25,7 @@ pub fn change_callee_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_function() {\n     callee2(1, 2)\n@@ -40,7 +40,7 @@ pub fn change_argument_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_function() {\n     callee1(1, 3)\n@@ -81,7 +81,7 @@ pub fn change_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_callee_method() {\n     let s = Struct;\n@@ -98,7 +98,7 @@ pub fn change_argument_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method() {\n     let s = Struct;\n@@ -115,7 +115,7 @@ pub fn change_ufcs_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n@@ -132,7 +132,7 @@ pub fn change_argument_method_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n@@ -149,7 +149,7 @@ pub fn change_to_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n // One might think this would be expanded in the hir_owner_nodes/Mir, but it actually\n // results in slightly different hir_owner/Mir.\n@@ -171,7 +171,7 @@ pub mod change_ufcs_callee_indirectly {\n     #[cfg(not(cfail1))]\n     use super::Struct2 as Struct;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n \n "}, {"sha": "a4a3ba779c01732da0fde1aa86f1f4a96aecc597", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -37,7 +37,7 @@ pub fn add_parameter() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_parameter() {\n     let x = 0u32;\n@@ -53,7 +53,7 @@ pub fn change_parameter_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_pattern() {\n     let _ = |(x,): (u32,)| x;\n@@ -101,7 +101,7 @@ pub fn change_parameter_type() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_parameter_type() {\n     let closure = |x: u16| (x as u64) + 1;"}, {"sha": "398866bef79ae0f7cc210a7edc4f0a24007795b1", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -34,7 +34,7 @@ pub fn change_field_value_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_struct_like() -> Enum {\n     Enum::Struct {\n@@ -96,7 +96,7 @@ pub fn change_constructor_path_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_struct_like() {\n     let _ = Enum2::Struct {\n@@ -119,7 +119,7 @@ pub fn change_constructor_variant_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_struct_like() {\n     let _ = Enum2::Struct2 {\n@@ -139,7 +139,7 @@ pub mod change_constructor_path_indirectly_struct_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -161,7 +161,7 @@ pub mod change_constructor_variant_indirectly_struct_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Struct2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant {\n@@ -180,7 +180,7 @@ pub fn change_field_value_tuple_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_like() -> Enum {\n     Enum::Tuple(0, 1, 3)\n@@ -197,7 +197,7 @@ pub fn change_constructor_path_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_like() {\n@@ -215,7 +215,7 @@ pub fn change_constructor_variant_tuple_like() {\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\"\n )]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_tuple_like() {\n@@ -232,7 +232,7 @@ pub mod change_constructor_path_indirectly_tuple_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -251,7 +251,7 @@ pub mod change_constructor_variant_indirectly_tuple_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Tuple2 as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Enum2 {\n         Variant(0, 1, 2)\n@@ -278,7 +278,7 @@ pub fn change_constructor_path_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_c_like() {\n     let _x = Clike2::B;\n@@ -293,7 +293,7 @@ pub fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_variant_c_like() {\n     let _x = Clike::C;\n@@ -309,7 +309,7 @@ pub mod change_constructor_path_indirectly_c_like {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,\\\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,\\\n                 typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n@@ -328,7 +328,7 @@ pub mod change_constructor_variant_indirectly_c_like {\n     #[cfg(not(cfail1))]\n     use super::Clike::B as Variant;\n \n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Clike {\n         Variant"}, {"sha": "40b6925bc72769ff8ded2221e620314fa212c5da", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -16,7 +16,7 @@ pub fn body_not_exported_to_metadata() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn body_not_exported_to_metadata() -> u32 {\n     2\n@@ -35,7 +35,7 @@ pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_inline() -> u32 {\n@@ -55,7 +55,7 @@ pub fn body_exported_to_metadata_because_of_generic() -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[inline]\n pub fn body_exported_to_metadata_because_of_generic() -> u32 {"}, {"sha": "18ba48e7b4be3bb42faef52222fb188192ef2d08", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_iteration_variable_name() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_name() {\n     let mut _x = 0;\n@@ -71,7 +71,7 @@ pub fn change_iteration_variable_pattern() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iteration_variable_pattern() {\n     let mut _x = 0;\n@@ -94,7 +94,7 @@ pub fn change_iterable() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, promoted_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, promoted_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_iterable() {\n     let mut _x = 0;\n@@ -116,7 +116,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -187,7 +187,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -237,7 +237,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -262,7 +262,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "2690b0bd6ed3db9c3f7fed5154042cf73dd33af4", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -22,7 +22,7 @@ pub fn add_parameter() {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn add_parameter(p: i32) {}\n@@ -45,7 +45,7 @@ pub fn type_of_parameter(p: i32) {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter(p: i64) {}\n@@ -58,7 +58,7 @@ pub fn type_of_parameter_ref(p: &i32) {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn type_of_parameter_ref(p: &mut i32) {}\n@@ -71,7 +71,7 @@ pub fn order_of_parameters(p1: i32, p2: i64) {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub fn order_of_parameters(p2: i64, p1: i32) {}\n@@ -84,7 +84,7 @@ pub fn make_unsafe() {}\n #[cfg(not(cfail1))]\n #[rustc_clean(\n     cfg = \"cfail2\",\n-    except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+    except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck_tables_of, fn_sig\"\n )]\n #[rustc_clean(cfg = \"cfail3\")]\n pub unsafe fn make_unsafe() {}\n@@ -274,7 +274,7 @@ pub mod change_return_type_indirectly {\n \n     #[rustc_clean(\n         cfg = \"cfail2\",\n-        except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+        except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck_tables_of, fn_sig\"\n     )]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_return_type() -> ReturnType {\n@@ -292,7 +292,7 @@ pub mod change_parameter_type_indirectly {\n \n     #[rustc_clean(\n         cfg = \"cfail2\",\n-        except = \"hir_owner, hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of, fn_sig\"\n+        except = \"hir_owner, hir_owner_nodes, optimized_mir, typeck_tables_of, fn_sig\"\n     )]\n     #[rustc_clean(cfg = \"cfail3\")]\n     pub fn indirect_parameter_type(p: ParameterType) {}"}, {"sha": "8faa91e465be1ab2abaad4b4d8e9ae72baa333b1", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -25,7 +25,7 @@ pub fn change_condition(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition(x: bool) -> u32 {\n     if !x {\n@@ -46,7 +46,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n@@ -69,7 +69,7 @@ pub fn change_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n@@ -120,7 +120,7 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_) = x {\n@@ -143,7 +143,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -166,7 +166,7 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {"}, {"sha": "4244e0c238688a7bc0d9646e988857a5d64ffc6e", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -44,7 +44,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner_nodes,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+        except=\"hir_owner_nodes,optimized_mir,promoted_mir,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n@@ -68,7 +68,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner_nodes,optimized_mir,promoted_mir,mir_built,typeck_tables_of\"\n+        except=\"hir_owner_nodes,optimized_mir,promoted_mir,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     #[inline]\n@@ -120,7 +120,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn method_selfmutness(&mut self) { }\n@@ -160,7 +160,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n@@ -178,7 +178,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n }\n@@ -197,7 +197,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,optimized_mir,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_return_type(&self) -> u8 { 0 }\n }\n@@ -232,7 +232,7 @@ impl Foo {\n #[rustc_clean(cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n }\n@@ -251,7 +251,7 @@ impl Foo {\n impl Foo {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir,mir_built\"\n+        except=\"hir_owner,hir_owner_nodes,fn_sig,typeck_tables_of,optimized_mir\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n@@ -453,7 +453,7 @@ impl Bar<u32> {\n impl<T> Bar<T> {\n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"generics_of,fn_sig,typeck_tables_of,type_of,optimized_mir,mir_built\"\n+        except=\"generics_of,fn_sig,typeck_tables_of,type_of,optimized_mir\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }\n@@ -471,7 +471,7 @@ impl Bar<u32> {\n #[rustc_clean(cfg=\"cfail2\", except=\"hir_owner,hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n-    #[rustc_clean(cfg=\"cfail2\", except=\"fn_sig,optimized_mir,mir_built,typeck_tables_of\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"fn_sig,optimized_mir,typeck_tables_of\")]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn change_impl_self_type(&self) { }\n }"}, {"sha": "7fd9975bc22a93366d1840596c2977a598ea060c", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -33,7 +33,7 @@ pub fn change_template(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n@@ -69,7 +69,7 @@ pub fn change_output(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n@@ -105,7 +105,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n@@ -140,7 +140,7 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n@@ -175,7 +175,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n@@ -210,7 +210,7 @@ pub fn change_options(_a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {"}, {"sha": "b833e621a91b1262a754a57da6429531687df9eb", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -22,7 +22,7 @@ pub fn change_name() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name() {\n     let _y = 2u64;\n@@ -38,7 +38,7 @@ pub fn add_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built\")]\n+    except=\"hir_owner_nodes,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_type() {\n     let _x: u32 = 2u32;\n@@ -54,7 +54,7 @@ pub fn change_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_type() {\n     let _x: u8 = 2;\n@@ -70,7 +70,7 @@ pub fn change_mutability_of_reference_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;\n@@ -86,7 +86,7 @@ pub fn change_mutability_of_slot() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_slot() {\n     let _x: u64 = 0;\n@@ -102,7 +102,7 @@ pub fn change_simple_binding_to_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_binding_to_pattern() {\n     let (_a, _b) = (0u8, 'x');\n@@ -118,7 +118,7 @@ pub fn change_name_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern() {\n     let (_a, _c) = (1u8, 'y');\n@@ -134,7 +134,7 @@ pub fn add_ref_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_in_pattern() {\n     let (ref _a, _b) = (1u8, 'y');\n@@ -150,7 +150,7 @@ pub fn add_amp_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_in_pattern() {\n     let (&_a, _b) = (&1u8, 'y');\n@@ -166,7 +166,7 @@ pub fn change_mutability_of_binding_in_pattern() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern() {\n     let (mut _a, _b) = (99u8, 'q');\n@@ -182,7 +182,7 @@ pub fn add_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,typeck_tables_of,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,typeck_tables_of,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_initializer() {\n     let _x: i16 = 3i16;\n@@ -198,7 +198,7 @@ pub fn change_initializer() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_initializer() {\n     let _x = 5u16;"}, {"sha": "4196fd68cb0960dab79f8a41f8c13db147d97a2f", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -47,7 +47,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -118,7 +118,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -168,7 +168,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -193,7 +193,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "1e19401479687815644a47d24a7849c3341ac789", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -26,7 +26,7 @@ pub fn add_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_arm(x: u32) -> u32 {\n     match x {\n@@ -51,7 +51,7 @@ pub fn change_order_of_arms(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_order_of_arms(x: u32) -> u32 {\n     match x {\n@@ -75,7 +75,7 @@ pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -99,7 +99,7 @@ pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_guard_clause(x: u32, y: bool) -> u32 {\n     match x {\n@@ -123,7 +123,7 @@ pub fn add_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_at_binding(x: u32) -> u32 {\n     match x {\n@@ -147,7 +147,7 @@ pub fn change_name_of_at_binding(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_of_at_binding(x: u32) -> u32 {\n     match x {\n@@ -170,7 +170,7 @@ pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_simple_name_to_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -193,7 +193,7 @@ pub fn change_name_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_name_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -216,7 +216,7 @@ pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -238,7 +238,7 @@ pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_ref_to_binding_in_pattern(x: u32) -> u32 {\n     match (x, x & 1) {\n@@ -260,7 +260,7 @@ pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_amp_to_binding_in_pattern(x: u32) -> u32 {\n     match (&x, x & 1) {\n@@ -283,7 +283,7 @@ pub fn change_rhs_of_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+    except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_rhs_of_arm(x: u32) -> u32 {\n     match x {\n@@ -307,7 +307,7 @@ pub fn add_alternative_to_arm(x: u32) -> u32 {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"hir_owner_nodes,mir_built,optimized_mir,typeck_tables_of\")]\n+    except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_alternative_to_arm(x: u32) -> u32 {\n     match x {"}, {"sha": "cc0bd45a4b4c14cc948390057cf44919da717904", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -18,7 +18,7 @@\n \n \n // Indexing expression\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n     #[cfg(cfail1)]\n@@ -33,7 +33,7 @@ pub fn indexing(slice: &[u8]) -> u8 {\n \n \n // Arithmetic overflow plus\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -48,7 +48,7 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n \n \n // Arithmetic overflow minus\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -63,7 +63,7 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n \n \n // Arithmetic overflow mult\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -78,7 +78,7 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n \n \n // Arithmetic overflow negation\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -93,7 +93,7 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n \n \n // Division by zero\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -107,7 +107,7 @@ pub fn division_by_zero(val: i32) -> i32 {\n }\n \n // Division by zero\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n     #[cfg(cfail1)]\n@@ -122,7 +122,7 @@ pub fn mod_by_zero(val: i32) -> i32 {\n \n \n // shift left\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]\n@@ -137,7 +137,7 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n \n \n // shift right\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {\n     #[cfg(cfail1)]"}, {"sha": "9e8f5ce77bc641859aeffaf516c55be70db69799", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -31,7 +31,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -82,7 +82,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -117,7 +117,7 @@ pub fn change_field_label_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -152,7 +152,7 @@ pub fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n@@ -173,7 +173,7 @@ pub mod change_constructor_path_indirectly_regular_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {\n@@ -196,7 +196,7 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir,mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 3)\n@@ -213,7 +213,7 @@ pub fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);\n@@ -230,7 +230,7 @@ pub mod change_constructor_path_indirectly_tuple_struct {\n \n     #[rustc_clean(\n         cfg=\"cfail2\",\n-        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\"\n+        except=\"fn_sig,hir_owner,hir_owner_nodes,optimized_mir,typeck_tables_of\"\n     )]\n     #[rustc_clean(cfg=\"cfail3\")]\n     pub fn function() -> Struct {"}, {"sha": "325dd56b7410fc08aa45e256e27d54816109dc1c", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -21,7 +21,7 @@ pub fn const_negation() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_negation() -> i32 {\n     -1\n@@ -36,7 +36,7 @@ pub fn const_bitwise_not() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn const_bitwise_not() -> i32 {\n     !99\n@@ -51,7 +51,7 @@ pub fn var_negation(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_negation(x: i32, y: i32) -> i32 {\n     -y\n@@ -66,7 +66,7 @@ pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_bitwise_not(x: i32, y: i32) -> i32 {\n     !y\n@@ -81,7 +81,7 @@ pub fn var_deref(x: &i32, y: &i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn var_deref(x: &i32, y: &i32) -> i32 {\n     *y\n@@ -96,7 +96,7 @@ pub fn first_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_const_add() -> i32 {\n     2 + 3\n@@ -111,7 +111,7 @@ pub fn second_const_add() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_const_add() -> i32 {\n     1 + 3\n@@ -126,7 +126,7 @@ pub fn first_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn first_var_add(a: i32, b: i32) -> i32 {\n     b + 2\n@@ -141,7 +141,7 @@ pub fn second_var_add(a: i32, b: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn second_var_add(a: i32, b: i32) -> i32 {\n     1 + b\n@@ -156,7 +156,7 @@ pub fn plus_to_minus(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_minus(a: i32) -> i32 {\n     1 - a\n@@ -171,7 +171,7 @@ pub fn plus_to_mult(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mult(a: i32) -> i32 {\n     1 * a\n@@ -186,7 +186,7 @@ pub fn plus_to_div(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_div(a: i32) -> i32 {\n     1 / a\n@@ -201,7 +201,7 @@ pub fn plus_to_mod(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn plus_to_mod(a: i32) -> i32 {\n     1 % a\n@@ -216,7 +216,7 @@ pub fn and_to_or(a: bool, b: bool) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn and_to_or(a: bool, b: bool) -> bool {\n     a || b\n@@ -231,7 +231,7 @@ pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_or(a: i32) -> i32 {\n     1 | a\n@@ -246,7 +246,7 @@ pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_bitwise_xor(a: i32) -> i32 {\n     1 ^ a\n@@ -261,7 +261,7 @@ pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_lshift(a: i32) -> i32 {\n     a << 1\n@@ -276,7 +276,7 @@ pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn bitwise_and_to_rshift(a: i32) -> i32 {\n     a >> 1\n@@ -291,7 +291,7 @@ pub fn eq_to_uneq(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_uneq(a: i32) -> bool {\n     a != 1\n@@ -306,7 +306,7 @@ pub fn eq_to_lt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_lt(a: i32) -> bool {\n     a < 1\n@@ -321,7 +321,7 @@ pub fn eq_to_gt(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_gt(a: i32) -> bool {\n     a > 1\n@@ -336,7 +336,7 @@ pub fn eq_to_le(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_le(a: i32) -> bool {\n     a <= 1\n@@ -351,7 +351,7 @@ pub fn eq_to_ge(a: i32) -> bool {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn eq_to_ge(a: i32) -> bool {\n     a >= 1\n@@ -368,7 +368,7 @@ pub fn type_cast(a: u8) -> u64 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built,typeck_tables_of\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,typeck_tables_of\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn type_cast(a: u8) -> u64 {\n     let b = a as u32;\n@@ -385,7 +385,7 @@ pub fn value_cast(a: u32) -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn value_cast(a: u32) -> i32 {\n     2 as i32\n@@ -403,7 +403,7 @@ pub fn place() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn place() -> i32 {\n     let mut x = 10;\n@@ -423,7 +423,7 @@ pub fn rvalue() -> i32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn rvalue() -> i32 {\n     let mut x = 10;\n@@ -440,7 +440,7 @@ pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(except=\"hir_owner_nodes,optimized_mir,mir_built\", cfg=\"cfail2\")]\n+#[rustc_clean(except=\"hir_owner_nodes,optimized_mir\", cfg=\"cfail2\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn index_to_slice(s: &[u8], i: usize, j: usize) -> u8 {\n     s[j]"}, {"sha": "6608ad9c41a935d05a6228f81c32646c51b250b8", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "0ecb0d79ae67e91521ed2dc9d644091ec450949a", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -25,7 +25,7 @@ pub fn change_loop_body() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -48,7 +48,7 @@ pub fn change_loop_condition() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -70,7 +70,7 @@ pub fn add_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir, typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir, typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -141,7 +141,7 @@ pub fn change_break_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -191,7 +191,7 @@ pub fn change_continue_label() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -216,7 +216,7 @@ pub fn change_continue_to_break() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, mir_built, optimized_mir\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"hir_owner_nodes, optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "0e0d8ea90631166117a29ddc116da4348d4afc3d", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -22,15 +22,15 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc0))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44"}, {"sha": "a885b4d3bae1b84e30918b4a8486fd9075bf6a26", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -24,15 +24,15 @@\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n-+                                          // + val: Unevaluated(DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _0 = const core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb2, unwind: bb1]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55"}, {"sha": "0f9c81943eda98677beb8e0aee98546620e906ea", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F32bit%2Frustc.main.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "da2c8dffb24110c4650f9ae0a84c00c4d39eb654", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices%2F64bit%2Frustc.main.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -28,10 +28,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n                                            // ty::Const\n                                            // + ty: &[i32; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "f3efef387a3b4bd1c30528fe48e31c533f4cfb3b", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully%2Frustc.main.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -19,10 +19,10 @@\n           _3 = const main::FOO;            // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), [], None)\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), const_param_did: None }, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), [], None) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[317d]::main[0]::FOO[0]), const_param_did: None }, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "68527a86aeb839847157e0af706c196225e465ad", "filename": "src/test/mir-opt/const_prop/control-flow-simplification/rustc.hello.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol-flow-simplification%2Frustc.hello.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -12,11 +12,11 @@\n +         _1 = const false;                // scope 0 at $DIR/control-flow-simplification.rs:12:8: 12:21\n                                            // ty::Const\n                                            // + ty: bool\n--                                          // + val: Unevaluated(DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), [bool], None)\n+-                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), const_param_did: None }, [bool], None)\n +                                          // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/control-flow-simplification.rs:12:8: 12:21\n--                                          // + literal: Const { ty: bool, val: Unevaluated(DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), [bool], None) }\n+-                                          // + literal: Const { ty: bool, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ control_flow_simplification[317d]::NeedsDrop[0]::NEEDS[0]), const_param_did: None }, [bool], None) }\n -         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x00)) }\n +         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/control-flow-simplification.rs:12:5: 14:6"}, {"sha": "ba5ac8d3ddf87b5bd5ca81ac69a25d226abd38ba", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "fa68eb348185a87bb282bc2ba80fe7befd398ea2", "filename": "src/test/mir-opt/const_prop/ref_deref/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref%2Frustc.main.PromoteTemps.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -18,13 +18,13 @@\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000004))\n +                                          // + ty: &i32\n-+                                          // + val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/ref_deref.rs:5:8: 5:9\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n -         _2 = &_3;                        // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ ref_deref[317d]::main[0]), [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "483e5f1b9a4265bb6d07e83c8a8657c4f463af9f", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -14,10 +14,10 @@\n           _4 = const main::promoted[0];    // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n                                            // ty::Const\n                                            // + ty: &(i32, i32)\n-                                           // + val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "86e6aacab45a7b73ecc1a057ad2d84439a172e83", "filename": "src/test/mir-opt/const_prop/ref_deref_project/rustc.main.PromoteTemps.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project%2Frustc.main.PromoteTemps.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -18,7 +18,7 @@\n -                                          // + ty: i32\n -                                          // + val: Value(Scalar(0x00000004))\n +                                          // + ty: &(i32, i32)\n-+                                          // + val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0]))\n++                                          // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/ref_deref_project.rs:5:9: 5:10\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000004)) }\n@@ -30,7 +30,7 @@\n -                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n -         _2 = &(_3.1: i32);               // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(DefId(0:3 ~ ref_deref_project[317d]::main[0]), [], Some(promoted[0])) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "6eb64f75ef17e8acb79239af315246609515a65d", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "2b641bef1d8028a503f079f81f9f4ddef2f520f5", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -21,10 +21,10 @@\n           _9 = const main::promoted[0];    // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n                                            // ty::Const\n                                            // + ty: &[u32; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(DefId(0:3 ~ slice_len[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ slice_len[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "d6ac1c57a635917129baee40ae4c83d298e3a1de", "filename": "src/test/mir-opt/inline/inline-retag/rustc.bar.Inline.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-retag%2Frustc.bar.Inline.after.mir?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -38,10 +38,10 @@ fn bar() -> bool {\n         _10 = const bar::promoted[1];    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[1]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[1])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[1])) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -52,10 +52,10 @@ fn bar() -> bool {\n         _9 = const bar::promoted[0];     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:4 ~ inline_retag[317d]::bar[0]), [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:4 ~ inline_retag[317d]::bar[0]), const_param_did: None }, [], Some(promoted[0])) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "cf5d1f3f6c6a4fde1bf7f515745565df5b3c71c1", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.PreCodegen.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.PreCodegen.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -96,10 +96,10 @@\n           (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -140,10 +140,10 @@\n           _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "91baac86112961e6f537b01bb9ddf823f18d801e", "filename": "src/test/mir-opt/issue-73223/32bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F32bit%2Frustc.main.SimplifyArmIdentity.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -153,10 +153,10 @@\n           _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -220,10 +220,10 @@\n           _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "cf5d1f3f6c6a4fde1bf7f515745565df5b3c71c1", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.PreCodegen.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.PreCodegen.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -96,10 +96,10 @@\n           (_5.1: &i32) = const main::promoted[1]; // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           StorageDead(_6);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -140,10 +140,10 @@\n           _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           StorageLive(_18);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_19);                // scope 4 at $SRC_DIR/libstd/macros.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "0da748d79ebddab7c9f5bcc25e135c3671a1e64e", "filename": "src/test/mir-opt/issue-73223/64bit/rustc.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-73223%2F64bit%2Frustc.main.SimplifyArmIdentity.diff?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -153,10 +153,10 @@\n           _51 = const main::promoted[1];   // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &i32\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[1])) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[1])) }\n           _11 = _51;                       // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n@@ -220,10 +220,10 @@\n           _50 = const main::promoted[0];   // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n-                                           // + val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0]))\n+                                           // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/libcore/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(DefId(0:3 ~ issue_73223[317d]::main[0]), [], Some(promoted[0])) }\n+                                           // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n           _25 = _50;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _24 = _25;                       // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL\n           _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/libcore/macros/mod.rs:LL:COL"}, {"sha": "c53c9cf1db7cc8bdd04c670b0e464bc6a1a69041", "filename": "src/test/mir-opt/match_false_edges/rustc.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges%2Frustc.full_tested_match.PromoteTemps.after.mir?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -76,10 +76,10 @@ fn full_tested_match() -> () {\n         _11 = const full_tested_match::promoted[0]; // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n                                          // ty::Const\n                                          // + ty: &std::option::Option<i32>\n-                                         // + val: Unevaluated(DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(WithOptConstParam { did: DefId(0:5 ~ match_false_edges[317d]::full_tested_match[0]), const_param_did: None }, [], Some(promoted[0])) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "b61d936837512fd9be5cb80c312ea538df198abe", "filename": "src/test/mir-opt/retag/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -184,10 +184,10 @@ fn main() -> () {\n         _27 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Unevaluated(DefId(0:13 ~ retag[317d]::main[0]), [], Some(promoted[0]))\n+                                         // + val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(DefId(0:13 ~ retag[317d]::main[0]), [], Some(promoted[0])) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(WithOptConstParam { did: DefId(0:13 ~ retag[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n         Retag(_27);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_27);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "c8db91b62b58c0f64a104563026c0dfbe72a489a", "filename": "src/test/ui/const-generics/type-dependent/auxiliary/type_dependent_lib.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fauxiliary%2Ftype_dependent_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fauxiliary%2Ftype_dependent_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fauxiliary%2Ftype_dependent_lib.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,36 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+pub struct Struct<const N: usize>(());\n+\n+impl<const N: usize> Struct<N> {\n+    pub fn new() -> Self {\n+        Struct(())\n+    }\n+\n+    pub fn same_ty<const M: usize>(&self) -> (usize, usize) {\n+        (N, M)\n+    }\n+\n+    pub fn different_ty<const M: u8>(&self) -> (usize, u8) {\n+        (N, M)\n+    }\n+\n+    pub fn containing_ty<T, const M: u8>(&self) -> (usize, u8) {\n+        (std::mem::size_of::<T>() +  N, M)\n+    }\n+\n+    pub fn we_have_to_go_deeper<const M: usize>(&self) -> Struct<M> {\n+        Struct(())\n+    }\n+}\n+\n+pub trait Foo {\n+    fn foo<const M: usize>(&self) -> usize;\n+}\n+\n+impl Foo for Struct<7> {\n+    fn foo<const M: usize>(&self) -> usize {\n+        M\n+    }\n+}"}, {"sha": "ae50252facd2514acc53b96bff9ed69054349a5f", "filename": "src/test/ui/const-generics/type-dependent/const-arg-in-const-arg.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fconst-arg-in-const-arg.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,26 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+#![feature(const_fn)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo<const N: usize>(&self) -> usize {\n+        let f = self;\n+        f.bar::<{\n+            let f = Foo;\n+            f.bar::<7>()\n+        }>() + N\n+    }\n+\n+    const fn bar<const M: usize>(&self) -> usize {\n+        M\n+    }\n+}\n+\n+fn main() {\n+    let f = Foo;\n+\n+    assert_eq!(f.foo::<13>(), 20)\n+}"}, {"sha": "a7a923c6a59b7b7f4d3efb59acedeb30e23936dd", "filename": "src/test/ui/const-generics/type-dependent/issue-61936.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-61936.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,49 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait SliceExt<T: Clone> {\n+    fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N>;\n+}\n+\n+impl <T: Clone> SliceExt<T> for [T] {\n+   fn array_windows<'a, const N: usize>(&'a self) -> ArrayWindows<'a, T, N> {\n+       ArrayWindows{ idx: 0, slice: &self }\n+   }\n+}\n+\n+struct ArrayWindows<'a, T, const N: usize> {\n+    slice: &'a [T],\n+    idx: usize,\n+}\n+\n+impl <'a, T: Clone, const N: usize> Iterator for ArrayWindows<'a, T, N> {\n+    type Item = [T; N];\n+    fn next(&mut self) -> Option<Self::Item> {\n+        // Note: this is unsound for some `T` and not meant as an example\n+        // on how to implement `ArrayWindows`.\n+        let mut res = unsafe{ std::mem::zeroed() };\n+        let mut ptr = &mut res as *mut [T; N] as *mut T;\n+\n+        for i in 0..N {\n+            match self.slice[self.idx..].get(i) {\n+                None => return None,\n+                Some(elem) => unsafe { std::ptr::write_volatile(ptr, elem.clone())},\n+            };\n+            ptr = ptr.wrapping_add(1);\n+            self.idx += 1;\n+        }\n+\n+        Some(res)\n+    }\n+}\n+\n+const FOUR: usize = 4;\n+\n+fn main() {\n+    let v: Vec<usize> = vec![0; 100];\n+\n+    for array in v.as_slice().array_windows::<FOUR>() {\n+        assert_eq!(array, [0, 0, 0, 0])\n+    }\n+}"}, {"sha": "f3c2e1775940f4baff688f8059f514b4016aeee2", "filename": "src/test/ui/const-generics/type-dependent/issue-63695.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-63695.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait T {\n+    fn test<const A: i32>(&self) -> i32 { A }\n+}\n+\n+struct S();\n+\n+impl T for S {}\n+\n+fn main() {\n+    let foo = S();\n+    assert_eq!(foo.test::<8i32>(), 8);\n+    assert_eq!(foo.test::<16i32>(), 16);\n+}"}, {"sha": "cbe86cef3230f4616c7f67d4c4efdf285f28a5aa", "filename": "src/test/ui/const-generics/type-dependent/issue-69816.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-69816.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait IterExt: Sized + Iterator {\n+    fn default_for_size<const N: usize>(self) -> [Self::Item; N]\n+    where\n+        [Self::Item; N]: Default,\n+    {\n+        Default::default()\n+    }\n+}\n+\n+impl<T: Iterator> IterExt for T {}\n+\n+fn main(){\n+    const N: usize = 10;\n+    let arr = (0u32..10).default_for_size::<N>();\n+    assert_eq!(arr, [0; 10]);\n+}"}, {"sha": "6fcf4116d437c2f6efed5aa7ad0e39dceaed2a9f", "filename": "src/test/ui/const-generics/type-dependent/issue-70507.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-70507.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+trait ConstChunksExactTrait<T> {\n+    fn const_chunks_exact<const N: usize>(&self) -> ConstChunksExact<'_, T, {N}>;\n+}\n+\n+impl <T> ConstChunksExactTrait<T> for [T] {\n+    fn const_chunks_exact<const N: usize>(&self) -> ConstChunksExact<'_, T, {N}> {\n+        assert!(N != 0);\n+        let rem = self.len() % N;\n+        let len = self.len() - rem;\n+        let (fst, _) = self.split_at(len);\n+        ConstChunksExact { v: fst, }\n+    }\n+}\n+\n+struct ConstChunksExact<'a, T: 'a, const N: usize> {\n+    v: &'a [T],\n+}\n+\n+impl <'a, T: std::fmt::Debug, const N: usize> Iterator for ConstChunksExact<'a, T, {N}> {\n+    type Item = &'a [T; N];\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.v.len() < N {\n+            None\n+        } else {\n+            let (fst, snd) = self.v.split_at(N);\n+\n+            self.v = snd;\n+            let ptr = fst.as_ptr() as *const _;\n+            Some(unsafe { &*ptr})\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let slice = &[1i32, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n+\n+    let mut iter = [[1, 2, 3], [4, 5, 6], [7, 8, 9]].iter();\n+\n+    for a in slice.const_chunks_exact::<3>() {\n+        assert_eq!(a, iter.next().unwrap());\n+    }\n+}"}, {"sha": "05abd488816ffcfde06cf895465d21ccc7a04137", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,24 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+struct Test;\n+\n+fn pass() -> u8 {\n+    42\n+}\n+\n+impl Test {\n+    pub fn call_me(&self) -> u8 {\n+        self.test::<pass>()\n+    }\n+\n+    fn test<const FN: fn() -> u8>(&self) -> u8 {\n+        //~^ ERROR using function pointers as const generic parameters is forbidden\n+        FN()\n+    }\n+}\n+\n+fn main() {\n+    let x = Test;\n+    assert_eq!(x.call_me(), 42);\n+}"}, {"sha": "f441b71031ece1a8a3df2b0c83b6cb33820c1638", "filename": "src/test/ui/const-generics/type-dependent/issue-71382.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fissue-71382.stderr?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-71382.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: using function pointers as const generic parameters is forbidden\n+  --> $DIR/issue-71382.rs:15:23\n+   |\n+LL |     fn test<const FN: fn() -> u8>(&self) -> u8 {\n+   |                       ^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "e6f3eb075f1da1138deff1752a5d5427413469b6", "filename": "src/test/ui/const-generics/type-dependent/non-local.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fnon-local.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,24 @@\n+// aux-build:type_dependent_lib.rs\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+extern crate type_dependent_lib;\n+\n+use type_dependent_lib::*;\n+\n+fn main() {\n+    let s = Struct::<42>::new();\n+    assert_eq!(s.same_ty::<7>(), (42, 7));\n+    assert_eq!(s.different_ty::<19>(), (42, 19));\n+    assert_eq!(Struct::<1337>::new().different_ty::<96>(), (1337, 96));\n+    assert_eq!(\n+        Struct::<18>::new()\n+            .we_have_to_go_deeper::<19>()\n+            .containing_ty::<Option<u32>, 3>(),\n+        (27, 3),\n+    );\n+\n+    let s = Struct::<7>::new();\n+    assert_eq!(s.foo::<18>(), 18);\n+}"}, {"sha": "f3f98e5faf52da38c7b9de379110ea4b8535ee21", "filename": "src/test/ui/const-generics/type-dependent/qpath.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fqpath.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct A;\n+impl A {\n+    fn foo<const N: usize>() -> usize { N + 1 }\n+}\n+\n+fn main() {\n+    assert_eq!(A::foo::<7>(), 8);\n+}"}, {"sha": "cc7c50d8fd835d9762d91d4132c0810c5a57cb20", "filename": "src/test/ui/const-generics/type-dependent/simple.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Fsimple.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+struct R;\n+\n+impl R {\n+    fn method<const N: u8>(&self) -> u8 { N }\n+}\n+fn main() {\n+    assert_eq!(R.method::<1u8>(), 1);\n+}"}, {"sha": "0c71f338bd2629dfe3f938733d03c03931ebad00", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,12 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+struct R;\n+\n+impl R {\n+    fn method<const N: u8>(&self) -> u8 { N }\n+}\n+fn main() {\n+    assert_eq!(R.method::<1u16>(), 1);\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "5bb7c5b0ea9bf9e4aa75c8bac8c39f56c6dd1bae", "filename": "src/test/ui/const-generics/type-dependent/type-mismatch.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-dependent%2Ftype-mismatch.stderr?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-mismatch.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-mismatch.rs:10:27\n+   |\n+LL |     assert_eq!(R.method::<1u16>(), 1);\n+   |                           ^^^^ expected `u8`, found `u16`\n+   |\n+help: change the type of the numeric literal from `u16` to `u8`\n+   |\n+LL |     assert_eq!(R.method::<1u8>(), 1);\n+   |                           ^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "0ba9945b399ae62fba70ceca9d55a445209a90e6", "filename": "src/test/ui/const-generics/unknown_adt.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,7 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn main() {\n+    let _: UnknownStruct<7>;\n+    //~^ ERROR cannot find type `UnknownStruct`\n+}"}, {"sha": "b2e287b762c69001b8773fb3751c96e254f64564", "filename": "src/test/ui/const-generics/unknown_adt.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funknown_adt.stderr?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -0,0 +1,9 @@\n+error[E0412]: cannot find type `UnknownStruct` in this scope\n+  --> $DIR/unknown_adt.rs:5:12\n+   |\n+LL |     let _: UnknownStruct<7>;\n+   |            ^^^^^^^^^^^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "e6ef54f528f4b2bf338a9662e27d60b91222197d", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e11379f3b4c376fbb9a6c4d44f3286ccc28d149/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=7e11379f3b4c376fbb9a6c4d44f3286ccc28d149", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(self.param_env, def_id, substs, None, None)\n+                    .const_eval_resolve(self.param_env, ty::WithOptConstParam::unknown(def_id), substs, None, None)\n                     .ok()\n                     .map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n                 let result = miri_to_const(&result);"}]}