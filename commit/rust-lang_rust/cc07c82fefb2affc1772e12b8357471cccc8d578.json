{"sha": "cc07c82fefb2affc1772e12b8357471cccc8d578", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMDdjODJmZWZiMmFmZmMxNzcyZTEyYjgzNTc0NzFjY2NjOGQ1Nzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-08T10:54:48Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-08T10:54:48Z"}, "message": "Preconditions style", "tree": {"sha": "3b4328644c290792a631002be1e5db248bbae11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b4328644c290792a631002be1e5db248bbae11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc07c82fefb2affc1772e12b8357471cccc8d578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc07c82fefb2affc1772e12b8357471cccc8d578", "html_url": "https://github.com/rust-lang/rust/commit/cc07c82fefb2affc1772e12b8357471cccc8d578", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc07c82fefb2affc1772e12b8357471cccc8d578/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8dec5dc11cfecf219b6510b0eadd9691a82ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8dec5dc11cfecf219b6510b0eadd9691a82ba5", "html_url": "https://github.com/rust-lang/rust/commit/ee8dec5dc11cfecf219b6510b0eadd9691a82ba5"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "5a9c0a148a124db1ca53dd344fd39eaef19709b7", "filename": "docs/dev/README.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc07c82fefb2affc1772e12b8357471cccc8d578/docs%2Fdev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc07c82fefb2affc1772e12b8357471cccc8d578/docs%2Fdev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2FREADME.md?ref=cc07c82fefb2affc1772e12b8357471cccc8d578", "patch": "@@ -241,6 +241,26 @@ struct Foo {\n For `.md` and `.adoc` files, prefer a sentence-per-line format, don't wrap lines.\n If the line is too long, you want to split the sentence in two :-)\n \n+## Preconditions\n+\n+Function preconditions should generally be expressed in types and provided by the caller (rather than checked by callee):\n+\n+```rust\n+// Good\n+fn frbonicate(walrus: Walrus) {\n+  ...\n+}\n+\n+// Not as good\n+fn frobnicate(walrus: Option<Walrus>) {\n+  let walrus = match walrus {\n+    Some(it) => it,\n+    None => return,\n+  };\n+  ...\n+}\n+```\n+\n # Architecture Invariants\n \n This section tries to document high-level design constraints, which are not"}]}