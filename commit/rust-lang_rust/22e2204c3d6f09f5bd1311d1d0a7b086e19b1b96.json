{"sha": "22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZTIyMDRjM2Q2ZjA5ZjViZDEzMTFkMWQwYTdiMDg2ZTE5YjFiOTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-22T06:31:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-22T06:31:27Z"}, "message": "auto merge of #14321 : alexcrichton/rust/ices, r=pcwalton\n\nAlso adding tests for fixed ICEs", "tree": {"sha": "24050eb1a17dbacd0806c20913fe3106b2cb97a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24050eb1a17dbacd0806c20913fe3106b2cb97a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "html_url": "https://github.com/rust-lang/rust/commit/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f78eb1434152224dae7d0f48528b5b0c064e9bc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f78eb1434152224dae7d0f48528b5b0c064e9bc6", "html_url": "https://github.com/rust-lang/rust/commit/f78eb1434152224dae7d0f48528b5b0c064e9bc6"}, {"sha": "0d4b840523824252be67d191cc0945c5713ea47c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d4b840523824252be67d191cc0945c5713ea47c", "html_url": "https://github.com/rust-lang/rust/commit/0d4b840523824252be67d191cc0945c5713ea47c"}], "stats": {"total": 309, "additions": 291, "deletions": 18}, "files": [{"sha": "7b91928ba41454a4ca8376dcb8b4d94f0649fdb8", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -247,6 +247,7 @@ fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@Pat]) -> useful {\n                 _ => *r.get(0)\n             }\n         }\n+        None if v.len() == 0 => return not_useful,\n         None => v[0]\n     };\n     let left_ty = if real_pat.id == 0 { ty::mk_nil() }\n@@ -341,8 +342,10 @@ fn is_useful_specialized(cx: &MatchCheckCtxt,\n     let ms = m.iter().filter_map(|r| {\n         specialize(cx, r.as_slice(), &ctor, arity, lty)\n     }).collect::<matrix>();\n-    let could_be_useful = is_useful(\n-        cx, &ms, specialize(cx, v, &ctor, arity, lty).unwrap().as_slice());\n+    let could_be_useful = match specialize(cx, v, &ctor, arity, lty) {\n+        Some(v) => is_useful(cx, &ms, v.as_slice()),\n+        None => return not_useful,\n+    };\n     match could_be_useful {\n       useful_ => useful(lty, ctor),\n       u => u,"}, {"sha": "ac37af05359d58355f85f30ded0c2aeffc087658", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -2040,7 +2040,7 @@ impl<'a> Resolver<'a> {\n             return;\n         }\n \n-        let mut imports = module.imports.borrow_mut();\n+        let imports = module.imports.borrow();\n         let import_count = imports.len();\n         while module.resolved_import_count.get() < import_count {\n             let import_index = module.resolved_import_count.get();"}, {"sha": "cb3e900af7dfe9fd3e165d3249c3b1b196eeef7f", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -433,9 +433,10 @@ pub fn ast_ty_to_builtin_ty<AC:AstConv,\n                             }\n                         }))\n                     }\n-                    this.tcx().sess.span_bug(path.span,\n+                    this.tcx().sess.span_err(path.span,\n                                              \"not enough type parameters \\\n-                                              supplied to `Box<T>`\")\n+                                              supplied to `Box<T>`\");\n+                    Some(ty::mk_err())\n                 }\n                 _ => None\n             }"}, {"sha": "9e8edfccd5b5fd0358c38f83e1b65eb8a4f6efe8", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -555,17 +555,13 @@ impl<'a> LookupContext<'a> {\n                                            param_ty: param_ty) {\n         debug!(\"push_inherent_candidates_from_param(param_ty={:?})\",\n                param_ty);\n-        self.push_inherent_candidates_from_bounds(\n-            rcvr_ty,\n-            self.fcx\n-                .inh\n-                .param_env\n-                .type_param_bounds\n-                .get(param_ty.idx)\n-                .trait_bounds\n-                .as_slice(),\n-            restrict_to,\n-            param_numbered(param_ty.idx));\n+        let i = param_ty.idx;\n+        match self.fcx.inh.param_env.type_param_bounds.as_slice().get(i) {\n+            Some(b) => self.push_inherent_candidates_from_bounds(\n+                            rcvr_ty, b.trait_bounds.as_slice(), restrict_to,\n+                            param_numbered(param_ty.idx)),\n+            None => {}\n+        }\n     }\n \n "}, {"sha": "820c5bd859ca2e4a57707b30d1c4ce709cd2e218", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -2767,7 +2767,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n           if !checked {\n               tcx.sess.span_err(expr.span,\n                                 \"only the managed heap and exchange heap are \\\n-                                 currently supported\")\n+                                 currently supported\");\n+              fcx.write_ty(id, ty::mk_err());\n           }\n       }\n "}, {"sha": "5829f63b2c531bff38cb09db77b1e15f38547dba", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -2920,7 +2920,7 @@ impl<'a> Parser<'a> {\n           _ => {}\n         }\n \n-        if !is_ident_or_path(&self.token)\n+        if (!is_ident_or_path(&self.token) && self.token != token::MOD_SEP)\n                 || self.is_keyword(keywords::True)\n                 || self.is_keyword(keywords::False) {\n             // Parse an expression pattern or exp .. exp."}, {"sha": "4e11481b5d2e33c17d42420442cfde3b49cb5506", "filename": "src/test/compile-fail/issue-11844.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-11844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-11844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11844.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let a = Some(box 1);\n+    match a {\n+        Ok(a) => //~ ERROR: mismatched types\n+            println!(\"{}\",a), //~ ERROR: failed to find an implementation of trait\n+        None => fail!()\n+    }\n+}\n+"}, {"sha": "a80e405d05ca2ee077b2a613df28c9079cb43926", "filename": "src/test/compile-fail/issue-12116.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12116.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum IntList {\n+    Cons(int, Box<IntList>),\n+    Nil\n+}\n+\n+fn tail(source_list: &IntList) -> IntList {\n+    match source_list {\n+        &Cons(val, box ref next_list) => tail(next_list),\n+        &Cons(val, box Nil)           => Cons(val, box Nil),\n+        //~^ ERROR: unreachable pattern\n+        _                          => fail!()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7d800899e520945c66f50c077b59043e5fbcbb1c", "filename": "src/test/compile-fail/issue-12369.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12369.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let sl = vec![1,2,3];\n+    let v: int = match sl.as_slice() {\n+        [] => 0,\n+        [a,b,c] => 3,\n+        [a, ..rest] => a,\n+        [10,a, ..rest] => 10 //~ ERROR: unreachable pattern\n+    };\n+}"}, {"sha": "d5a8339ba19380765269652bf91d18a7ceb76f24", "filename": "src/test/compile-fail/issue-12567.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) {\n+    match (l1, l2) {\n+        ([], []) => println!(\"both empty\"),\n+        ([], [hd, ..tl]) | ([hd, ..tl], []) => println!(\"one empty\"),\n+        //~^ ERROR: cannot move out of dereference\n+        //~^^ ERROR: cannot move out of dereference\n+        ([hd1, ..tl1], [hd2, ..tl2]) => println!(\"both nonempty\"),\n+        //~^ ERROR: cannot move out of dereference\n+        //~^^ ERROR: cannot move out of dereference\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8b5fb90e2d4586bd9c2ada6094526985475e9426", "filename": "src/test/compile-fail/issue-12796.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12796.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: missing `Self` type param in the substitution of `fn(Self)`\n+\n+trait Trait {\n+    fn outer(self) {\n+        fn inner(_: Self) {\n+        }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "d247bf0913c3b8cd9a9862674e6dd2fff420a1d7", "filename": "src/test/compile-fail/issue-14084.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14084.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    box ( () ) 0;\n+    //~^ ERROR: only the managed heap and exchange heap are currently supported\n+}"}, {"sha": "4d663d00fb291d7c2e37bdfc48a37b68d19ed1ef", "filename": "src/test/compile-fail/issue-14092.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14092.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn fn1(0: Box) {} //~ ERROR: not enough type parameters supplied to `Box<T>`\n+\n+fn main() {}\n+"}, {"sha": "bcecab80758103a54d9809c24dbcefef93fb087f", "filename": "src/test/compile-fail/issue-7092.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Whatever {\n+}\n+\n+fn foo(x: Whatever) {\n+    match x {\n+        Some(field) => field.access(),\n+        //~^ ERROR: mismatched types: expected `Whatever` but found\n+        //~^^ ERROR: does not implement any method in scope named `access`\n+    }\n+}\n+\n+fn main(){}"}, {"sha": "8d8e87da76e07672b63c4913c19645bf4e4e4c46", "filename": "src/test/compile-fail/issue-8208.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(globs)]\n+\n+use self::*; //~ ERROR: unresolved import\n+\n+fn main() {\n+}\n+"}, {"sha": "92ea6026ff66cd06f54b0ad4364d55797c459188", "filename": "src/test/run-pass/issue-10763.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Frun-pass%2Fissue-10763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Frun-pass%2Fissue-10763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10763.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern \"Rust\" fn foo() {}\n+\n+fn main() {}"}, {"sha": "4eb9dd1474e943fdd53185cca53a21a9bb6e1569", "filename": "src/test/run-pass/issue-11736.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate collections;\n+extern crate std;\n+\n+use collections::Bitv;\n+\n+fn main() {\n+    // Generate sieve of Eratosthenes for n up to 1e6\n+    let n = 1000000u;\n+    let sieve = Bitv::new(n+1, true);\n+    let limit: uint = (n as f32).sqrt() as uint;\n+    for i in range(2, limit+1) {\n+        if sieve[i] {\n+            let mut j = 0;\n+            while i*i + j*i <= n {\n+                sieve[i*i+j*i] = false;\n+                j += 1;\n+            }\n+        }\n+    }\n+    for i in range(2, n+1) {\n+        if sieve[i] {\n+        }\n+    }\n+}\n+"}, {"sha": "48e2890b2594fbd231f05f2e2af080b31a533826", "filename": "src/test/run-pass/issue-6449.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Frun-pass%2Fissue-6449.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96/src%2Ftest%2Frun-pass%2Fissue-6449.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6449.rs?ref=22e2204c3d6f09f5bd1311d1d0a7b086e19b1b96", "patch": "@@ -0,0 +1,51 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Bar(int),\n+    Baz,\n+}\n+\n+enum Other {\n+    Other1(Foo),\n+    Other2(Foo, Foo),\n+}\n+\n+fn main() {\n+    match Baz {\n+        ::Bar(3) => fail!(),\n+        ::Bar(_) if false => fail!(),\n+        ::Bar(..) if false => fail!(),\n+        ::Bar(_n) => fail!(),\n+        ::Baz => {}\n+    }\n+    match Bar(3) {\n+        ::Bar(3) => {}\n+        ::Bar(_) if false => fail!(),\n+        ::Bar(..) if false => fail!(),\n+        ::Bar(_n) => fail!(),\n+        ::Baz => fail!(),\n+    }\n+    match Bar(4) {\n+        ::Bar(3) => fail!(),\n+        ::Bar(_) if false => fail!(),\n+        ::Bar(..) if false => fail!(),\n+        ::Bar(n) => assert_eq!(n, 4),\n+        ::Baz => fail!(),\n+    }\n+\n+    match Other1(Baz) {\n+        ::Other1(::Baz) => {}\n+        ::Other1(::Bar(_)) => {}\n+        ::Other2(::Baz, ::Bar(_)) => {}\n+        ::Other2(::Bar(..), ::Baz) => {}\n+        ::Other2(..) => {}\n+    }\n+}"}]}