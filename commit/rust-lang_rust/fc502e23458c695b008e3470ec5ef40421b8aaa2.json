{"sha": "fc502e23458c695b008e3470ec5ef40421b8aaa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTAyZTIzNDU4YzY5NWIwMDhlMzQ3MGVjNWVmNDA0MjFiOGFhYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-26T12:46:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-26T12:46:25Z"}, "message": "auto merge of #15194 : Sawyer47/rust/to-string-cleanup, r=alexcrichton\n\nThis commit removes superfluous to_string calls from various places", "tree": {"sha": "00a321fb8070b7e3a2f150fef5adcf7e396b3467", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a321fb8070b7e3a2f150fef5adcf7e396b3467"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc502e23458c695b008e3470ec5ef40421b8aaa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc502e23458c695b008e3470ec5ef40421b8aaa2", "html_url": "https://github.com/rust-lang/rust/commit/fc502e23458c695b008e3470ec5ef40421b8aaa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc502e23458c695b008e3470ec5ef40421b8aaa2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "389fae2ca85dc83da8deb70cc7c5acc50e87e684", "url": "https://api.github.com/repos/rust-lang/rust/commits/389fae2ca85dc83da8deb70cc7c5acc50e87e684", "html_url": "https://github.com/rust-lang/rust/commit/389fae2ca85dc83da8deb70cc7c5acc50e87e684"}, {"sha": "f8e06c49650afd7c9ef749baa72cb8da59880f96", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e06c49650afd7c9ef749baa72cb8da59880f96", "html_url": "https://github.com/rust-lang/rust/commit/f8e06c49650afd7c9ef749baa72cb8da59880f96"}], "stats": {"total": 168, "additions": 62, "deletions": 106}, "files": [{"sha": "7c8e7e85e4607a97edee73af6fff8f4959d6c26d", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -320,7 +320,7 @@ fn run_debuginfo_gdb_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     let config = &mut config;\n     let DebuggerCommands { commands, check_lines, .. } = parse_debugger_commands(testfile, \"gdb\");\n-    let mut cmds = commands.connect(\"\\n\").to_string();\n+    let mut cmds = commands.connect(\"\\n\");\n \n     // compile test file (it shoud have 'compile-flags:-g' in the header)\n     let compiler_run_result = compile_test(config, props, testfile);\n@@ -1035,10 +1035,7 @@ fn compose_and_run_compiler(\n             make_compile_args(config,\n                               &aux_props,\n                               crate_type.append(\n-                                  extra_link_args.iter()\n-                                                 .map(|x| x.to_string())\n-                                                 .collect::<Vec<_>>()\n-                                                 .as_slice()),\n+                                  extra_link_args.as_slice()),\n                               |a,b| {\n                                   let f = make_lib_name(a, b, testfile);\n                                   ThisDirectory(f.dir_path())"}, {"sha": "240f5c007fa24290f372e87e451bac1796cb9bfe", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -49,9 +49,7 @@\n //! }\n //!\n //! fn main() {\n-//!     let args: Vec<String> = os::args().iter()\n-//!                                       .map(|x| x.to_string())\n-//!                                       .collect();\n+//!     let args: Vec<String> = os::args();\n //!\n //!     let program = args.get(0).clone();\n //!"}, {"sha": "42e699fb6919b1680ea3f5ecf27ce06d1163da69", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -659,7 +659,7 @@ pub fn sanitize(s: &str) -> String {\n     if result.len() > 0u &&\n         result.as_slice()[0] != '_' as u8 &&\n         ! char::is_XID_start(result.as_slice()[0] as char) {\n-        return format!(\"_{}\", result.as_slice()).to_string();\n+        return format!(\"_{}\", result.as_slice());\n     }\n \n     return result;"}, {"sha": "558d2ad71f33f3fa06927c119c5bec601851a634", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -650,10 +650,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     }\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| Path::new(m));\n-    let target = match matches.opt_str(\"target\") {\n-        Some(supplied_target) => supplied_target.to_string(),\n-        None => driver::host_triple().to_string(),\n-    };\n+    let target = matches.opt_str(\"target\").unwrap_or(\n+        driver::host_triple().to_string());\n     let opt_level = {\n         if (debugging_opts & NO_OPT) != 0 {\n             No\n@@ -705,10 +703,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         Path::new(s.as_slice())\n     }).collect();\n \n-    let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\")\n-                                    .move_iter()\n-                                    .map(|x| x.to_string())\n-                                    .collect());\n+    let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n     let write_dependency_info = (matches.opt_present(\"dep-info\"),\n                                  matches.opt_str(\"dep-info\")"}, {"sha": "978a43106526f3b5a16929329cf210a1c629a3a9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -595,7 +595,7 @@ impl pprust::PpAnn for IdentifiedAnnotation {\n             }\n             pprust::NodeBlock(blk) => {\n                 try!(pp::space(&mut s.s));\n-                s.synth_comment((format!(\"block {}\", blk.id)).to_string())\n+                s.synth_comment(format!(\"block {}\", blk.id))\n             }\n             pprust::NodeExpr(expr) => {\n                 try!(pp::space(&mut s.s));\n@@ -604,7 +604,7 @@ impl pprust::PpAnn for IdentifiedAnnotation {\n             }\n             pprust::NodePat(pat) => {\n                 try!(pp::space(&mut s.s));\n-                s.synth_comment((format!(\"pat {}\", pat.id)).to_string())\n+                s.synth_comment(format!(\"pat {}\", pat.id))\n             }\n         }\n     }\n@@ -752,7 +752,7 @@ fn print_flowgraph<W:io::Writer>(analysis: CrateAnalysis,\n     let cfg = cfg::CFG::new(ty_cx, &*block);\n     let lcfg = LabelledCFG { ast_map: &ty_cx.map,\n                              cfg: &cfg,\n-                             name: format!(\"block{}\", block.id).to_string(), };\n+                             name: format!(\"block{}\", block.id), };\n     debug!(\"cfg: {:?}\", cfg);\n     let r = dot::render(&lcfg, &mut out);\n     return expand_err_details(r);"}, {"sha": "2cd41cf14ab2128e380e5b794bfc54dd1c6f91ae", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -137,8 +137,6 @@ mod rustc {\n }\n \n pub fn main() {\n-    let args = std::os::args().iter()\n-                              .map(|x| x.to_string())\n-                              .collect::<Vec<_>>();\n+    let args = std::os::args();\n     std::os::set_exit_status(driver::main_args(args.as_slice()));\n }"}, {"sha": "d6f1bfeb9ef1cea37dde0ea9f83ec9bbd6c494b9", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -1894,7 +1894,7 @@ impl TypeNames {\n \n     pub fn types_to_str(&self, tys: &[Type]) -> String {\n         let strs: Vec<String> = tys.iter().map(|t| self.type_to_str(*t)).collect();\n-        format!(\"[{}]\", strs.connect(\",\").to_string())\n+        format!(\"[{}]\", strs.connect(\",\"))\n     }\n \n     pub fn val_to_str(&self, val: ValueRef) -> String {"}, {"sha": "218fc31f62356efd2b709ac16d86c2a3f81f4a5e", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -441,11 +441,11 @@ impl<'a> PluginMetadataReader<'a> {\n         };\n         let macros = decoder::get_exported_macros(library.metadata.as_slice());\n         let registrar = decoder::get_plugin_registrar_fn(library.metadata.as_slice()).map(|id| {\n-            decoder::get_symbol(library.metadata.as_slice(), id).to_string()\n+            decoder::get_symbol(library.metadata.as_slice(), id)\n         });\n         let pc = PluginMetadata {\n             lib: library.dylib.clone(),\n-            macros: macros.move_iter().map(|x| x.to_string()).collect(),\n+            macros: macros,\n             registrar_symbol: registrar,\n         };\n         if should_link && existing_match(&self.env, &info.crate_id, None).is_none() {"}, {"sha": "9ab3202b9096e5733d084b7a953c568e6b1250a7", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -801,37 +801,34 @@ impl DataFlowOperator for LoanDataFlowOperator {\n \n impl Repr for Loan {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n-        (format!(\"Loan_{:?}({}, {:?}, {:?}-{:?}, {})\",\n+        format!(\"Loan_{:?}({}, {:?}, {:?}-{:?}, {})\",\n                  self.index,\n                  self.loan_path.repr(tcx),\n                  self.kind,\n                  self.gen_scope,\n                  self.kill_scope,\n-                 self.restricted_paths.repr(tcx))).to_string()\n+                 self.restricted_paths.repr(tcx))\n     }\n }\n \n impl Repr for LoanPath {\n     fn repr(&self, tcx: &ty::ctxt) -> String {\n         match self {\n             &LpVar(id) => {\n-                (format!(\"$({})\", tcx.map.node_to_str(id))).to_string()\n+                format!(\"$({})\", tcx.map.node_to_str(id))\n             }\n \n             &LpUpvar(ty::UpvarId{ var_id, closure_expr_id }) => {\n                 let s = tcx.map.node_to_str(var_id);\n-                let s = format!(\"$({} captured by id={})\", s, closure_expr_id);\n-                s.to_string()\n+                format!(\"$({} captured by id={})\", s, closure_expr_id)\n             }\n \n             &LpExtend(ref lp, _, LpDeref(_)) => {\n-                (format!(\"{}.*\", lp.repr(tcx))).to_string()\n+                format!(\"{}.*\", lp.repr(tcx))\n             }\n \n             &LpExtend(ref lp, _, LpInterior(ref interior)) => {\n-                (format!(\"{}.{}\",\n-                         lp.repr(tcx),\n-                         interior.repr(tcx))).to_string()\n+                format!(\"{}.{}\", lp.repr(tcx), interior.repr(tcx))\n             }\n         }\n     }"}, {"sha": "1de6ff8f03b5f05c31a78bfc5e66173697506714", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -629,7 +629,7 @@ impl Repr for ty::ParamBounds {\n         for t in self.trait_bounds.iter() {\n             res.push(t.repr(tcx));\n         }\n-        res.connect(\"+\").to_string()\n+        res.connect(\"+\")\n     }\n }\n "}, {"sha": "cfd004c0c83cfb7990958cdfa4b54ca61a2dd511", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -228,12 +228,12 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         };\n \n         // Transform the contents of the header into a hyphenated string\n-        let id = (s.as_slice().words().map(|s| {\n+        let id = s.as_slice().words().map(|s| {\n             match s.to_ascii_opt() {\n                 Some(s) => s.to_lower().into_str(),\n                 None => s.to_string()\n             }\n-        }).collect::<Vec<String>>().connect(\"-\")).to_string();\n+        }).collect::<Vec<String>>().connect(\"-\");\n \n         // This is a terrible hack working around how hoedown gives us rendered\n         // html for text rather than the raw text.\n@@ -252,7 +252,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n \n         let sec = match opaque.toc_builder {\n             Some(ref mut builder) => {\n-                builder.push(level as u32, s.to_string(), id.clone())\n+                builder.push(level as u32, s.clone(), id.clone())\n             }\n             None => {\"\"}\n         };"}, {"sha": "aacb13156b7c1ff3ab28dc2af2000075cd54a8e0", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -370,8 +370,7 @@ fn build_index(krate: &clean::Crate, cache: &mut Cache) -> io::IoResult<String>\n                     search_index.push(IndexItem {\n                         ty: shortty(item),\n                         name: item.name.clone().unwrap(),\n-                        path: fqp.slice_to(fqp.len() - 1).connect(\"::\")\n-                                                         .to_string(),\n+                        path: fqp.slice_to(fqp.len() - 1).connect(\"::\"),\n                         desc: shorter(item.doc_value()).to_string(),\n                         parent: Some(did),\n                     });"}, {"sha": "be14ffa87af1ce8c55676c7914355a790ae964b5", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -85,10 +85,7 @@ local_data_key!(pub analysiskey: core::CrateAnalysis)\n type Output = (clean::Crate, Vec<plugins::PluginJson> );\n \n pub fn main() {\n-    std::os::set_exit_status(main_args(std::os::args().iter()\n-                                                      .map(|x| x.to_string())\n-                                                      .collect::<Vec<_>>()\n-                                                      .as_slice()));\n+    std::os::set_exit_status(main_args(std::os::args().as_slice()));\n }\n \n pub fn opts() -> Vec<getopts::OptGroup> {\n@@ -184,17 +181,10 @@ pub fn main_args(args: &[String]) -> int {\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n-            return markdown::test(input,\n-                                  libs,\n-                                  test_args.move_iter().collect())\n+            return markdown::test(input, libs, test_args)\n         }\n         (true, false) => {\n-            return test::run(input,\n-                             cfgs.move_iter()\n-                                 .map(|x| x.to_string())\n-                                 .collect(),\n-                             libs,\n-                             test_args)\n+            return test::run(input, cfgs, libs, test_args)\n         }\n         (false, true) => return markdown::render(input, output.unwrap_or(Path::new(\"doc\")),\n                                                  &matches),\n@@ -273,10 +263,7 @@ fn acquire_input(input: &str,\n fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n     let mut default_passes = !matches.opt_present(\"no-defaults\");\n     let mut passes = matches.opt_strs(\"passes\");\n-    let mut plugins = matches.opt_strs(\"plugins\")\n-                             .move_iter()\n-                             .map(|x| x.to_string())\n-                             .collect::<Vec<_>>();\n+    let mut plugins = matches.opt_strs(\"plugins\");\n \n     // First, parse the crate and extract all relevant information.\n     let libs: Vec<Path> = matches.opt_strs(\"L\")\n@@ -289,7 +276,7 @@ fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n     let (krate, analysis) = std::task::try(proc() {\n         let cr = cr;\n         core::run_core(libs.move_iter().map(|x| x.clone()).collect(),\n-                       cfgs.move_iter().map(|x| x.to_string()).collect(),\n+                       cfgs,\n                        &cr)\n     }).map_err(|boxed_any|format!(\"{:?}\", boxed_any)).unwrap();\n     info!(\"finished with rustc\");"}, {"sha": "76366240f1ac46eb199bc96ae3c519ff3987c57c", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -93,19 +93,10 @@ pub fn render(input: &str, mut output: Path, matches: &getopts::Matches) -> int\n \n     let (in_header, before_content, after_content) =\n         match (load_external_files(matches.opt_strs(\"markdown-in-header\")\n-                                          .move_iter()\n-                                          .map(|x| x.to_string())\n-                                          .collect::<Vec<_>>()\n                                           .as_slice()),\n                load_external_files(matches.opt_strs(\"markdown-before-content\")\n-                                          .move_iter()\n-                                          .map(|x| x.to_string())\n-                                          .collect::<Vec<_>>()\n                                           .as_slice()),\n                load_external_files(matches.opt_strs(\"markdown-after-content\")\n-                                          .move_iter()\n-                                          .map(|x| x.to_string())\n-                                          .collect::<Vec<_>>()\n                                           .as_slice())) {\n         (Some(a), Some(b), Some(c)) => (a,b,c),\n         _ => return 3"}, {"sha": "5145a4f254eea0d8c97482cc87bf4bf5989a1684", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -348,7 +348,7 @@ pub fn unindent(s: &str) -> String {\n                 line.slice_from(min_indent).to_string()\n             }\n         }).collect::<Vec<_>>().as_slice());\n-        unindented.connect(\"\\n\").to_string()\n+        unindented.connect(\"\\n\")\n     } else {\n         s.to_string()\n     }"}, {"sha": "ec225a588fcc18bfb24616b9da80b6cf69eb6907", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -588,7 +588,7 @@ impl GenericPath for Path {\n                     }\n                 }\n             }\n-            Some(Path::new(comps.connect(\"\\\\\").into_string()))\n+            Some(Path::new(comps.connect(\"\\\\\")))\n         }\n     }\n "}, {"sha": "1a9a910f38c07a9e64e8b5fa2f924e28436843f9", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -680,61 +680,55 @@ fn node_id_to_str(map: &Map, id: NodeId) -> String {\n                 ItemImpl(..) => \"impl\",\n                 ItemMac(..) => \"macro\"\n             };\n-            (format!(\"{} {} (id={})\", item_str, path_str, id)).to_string()\n+            format!(\"{} {} (id={})\", item_str, path_str, id)\n         }\n         Some(NodeForeignItem(item)) => {\n             let path_str = map.path_to_str_with_ident(id, item.ident);\n-            (format!(\"foreign item {} (id={})\", path_str, id)).to_string()\n+            format!(\"foreign item {} (id={})\", path_str, id)\n         }\n         Some(NodeMethod(m)) => {\n-            (format!(\"method {} in {} (id={})\",\n+            format!(\"method {} in {} (id={})\",\n                     token::get_ident(m.ident),\n-                    map.path_to_str(id), id)).to_string()\n+                    map.path_to_str(id), id)\n         }\n         Some(NodeTraitMethod(ref tm)) => {\n             let m = ast_util::trait_method_to_ty_method(&**tm);\n-            (format!(\"method {} in {} (id={})\",\n+            format!(\"method {} in {} (id={})\",\n                     token::get_ident(m.ident),\n-                    map.path_to_str(id), id)).to_string()\n+                    map.path_to_str(id), id)\n         }\n         Some(NodeVariant(ref variant)) => {\n-            (format!(\"variant {} in {} (id={})\",\n+            format!(\"variant {} in {} (id={})\",\n                     token::get_ident(variant.node.name),\n-                    map.path_to_str(id), id)).to_string()\n+                    map.path_to_str(id), id)\n         }\n         Some(NodeExpr(ref expr)) => {\n-            (format!(\"expr {} (id={})\",\n-                    pprust::expr_to_str(&**expr), id)).to_string()\n+            format!(\"expr {} (id={})\", pprust::expr_to_str(&**expr), id)\n         }\n         Some(NodeStmt(ref stmt)) => {\n-            (format!(\"stmt {} (id={})\",\n-                    pprust::stmt_to_str(&**stmt), id)).to_string()\n+            format!(\"stmt {} (id={})\", pprust::stmt_to_str(&**stmt), id)\n         }\n         Some(NodeArg(ref pat)) => {\n-            (format!(\"arg {} (id={})\",\n-                    pprust::pat_to_str(&**pat), id)).to_string()\n+            format!(\"arg {} (id={})\", pprust::pat_to_str(&**pat), id)\n         }\n         Some(NodeLocal(ref pat)) => {\n-            (format!(\"local {} (id={})\",\n-                    pprust::pat_to_str(&**pat), id)).to_string()\n+            format!(\"local {} (id={})\", pprust::pat_to_str(&**pat), id)\n         }\n         Some(NodePat(ref pat)) => {\n-            (format!(\"pat {} (id={})\", pprust::pat_to_str(&**pat), id)).to_string()\n+            format!(\"pat {} (id={})\", pprust::pat_to_str(&**pat), id)\n         }\n         Some(NodeBlock(ref block)) => {\n-            (format!(\"block {} (id={})\",\n-                    pprust::block_to_str(&**block), id)).to_string()\n+            format!(\"block {} (id={})\", pprust::block_to_str(&**block), id)\n         }\n         Some(NodeStructCtor(_)) => {\n-            (format!(\"struct_ctor {} (id={})\",\n-                    map.path_to_str(id), id)).to_string()\n+            format!(\"struct_ctor {} (id={})\", map.path_to_str(id), id)\n         }\n         Some(NodeLifetime(ref l)) => {\n-            (format!(\"lifetime {} (id={})\",\n-                    pprust::lifetime_to_str(&**l), id)).to_string()\n+            format!(\"lifetime {} (id={})\",\n+                    pprust::lifetime_to_str(&**l), id)\n         }\n         None => {\n-            (format!(\"unknown node (id={})\", id)).to_string()\n+            format!(\"unknown node (id={})\", id)\n         }\n     }\n }"}, {"sha": "2a6f7bdb87e35eec4730e2d143a873b61a9fe539", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -30,7 +30,7 @@ pub fn path_name_i(idents: &[Ident]) -> String {\n     // FIXME: Bad copies (#2543 -- same for everything else that says \"bad\")\n     idents.iter().map(|i| {\n         token::get_ident(*i).get().to_string()\n-    }).collect::<Vec<String>>().connect(\"::\").to_string()\n+    }).collect::<Vec<String>>().connect(\"::\")\n }\n \n // totally scary function: ignores all but the last element, should have\n@@ -123,7 +123,7 @@ pub fn int_ty_to_str(t: IntTy, val: Option<i64>) -> String {\n         // cast to a u64 so we can correctly print INT64_MIN. All integral types\n         // are parsed as u64, so we wouldn't want to print an extra negative\n         // sign.\n-        Some(n) => format!(\"{}{}\", n as u64, s).to_string(),\n+        Some(n) => format!(\"{}{}\", n as u64, s),\n         None => s.to_string()\n     }\n }\n@@ -150,7 +150,7 @@ pub fn uint_ty_to_str(t: UintTy, val: Option<u64>) -> String {\n     };\n \n     match val {\n-        Some(n) => format!(\"{}{}\", n, s).to_string(),\n+        Some(n) => format!(\"{}{}\", n, s),\n         None => s.to_string()\n     }\n }"}, {"sha": "b9298cca4f87d8c53e79ec65e96fceb36292429f", "filename": "src/libsyntax/crateid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fcrateid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fcrateid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcrateid.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -112,7 +112,7 @@ impl CrateId {\n     }\n \n     pub fn short_name_with_version(&self) -> String {\n-        (format!(\"{}-{}\", self.name, self.version_or_default())).to_string()\n+        format!(\"{}-{}\", self.name, self.version_or_default())\n     }\n \n     pub fn matches(&self, other: &CrateId) -> bool {"}, {"sha": "2b97687dbf8c99e5d19704f3c957758165d41ade", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -1015,7 +1015,7 @@ impl<'a> TraitDef<'a> {\n         to_set.expn_info = Some(box(GC) codemap::ExpnInfo {\n             call_site: to_set,\n             callee: codemap::NameAndSpan {\n-                name: format!(\"deriving({})\", trait_name).to_string(),\n+                name: format!(\"deriving({})\", trait_name),\n                 format: codemap::MacroAttribute,\n                 span: Some(self.span)\n             }"}, {"sha": "f00c1ab44551f63010491a027efe80d06ba6e840", "filename": "src/libsyntax/parse/lexer/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fcomments.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -135,7 +135,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> String {\n         let lines = vertical_trim(lines);\n         let lines = horizontal_trim(lines);\n \n-        return lines.connect(\"\\n\").to_string();\n+        return lines.connect(\"\\n\");\n     }\n \n     fail!(\"not a doc-comment: {}\", comment);"}, {"sha": "24ab4b38e54b88c585b871c7f3b868ebe398a6c5", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -111,7 +111,7 @@ impl Token {\n \n pub fn tok_str(t: Token) -> String {\n     match t {\n-        String(s, len) => return format!(\"STR({},{})\", s, len).to_string(),\n+        String(s, len) => return format!(\"STR({},{})\", s, len),\n         Break(_) => return \"BREAK\".to_string(),\n         Begin(_) => return \"BEGIN\".to_string(),\n         End => return \"END\".to_string(),"}, {"sha": "87ed2076d6195d9aa3cc7f39c48a66381616e4b8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -243,7 +243,7 @@ pub fn arg_to_str(arg: &ast::Arg) -> String {\n \n pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> String {\n     match vis {\n-        ast::Public => format!(\"pub {}\", s).to_string(),\n+        ast::Public => format!(\"pub {}\", s),\n         ast::Inherited => s.to_string()\n     }\n }"}, {"sha": "589f605f8d23460fe947e74429127728834a0baf", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -403,7 +403,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let save_metrics = save_metrics.map(|s| Path::new(s));\n \n     let test_shard = matches.opt_str(\"test-shard\");\n-    let test_shard = opt_shard(test_shard.map(|x| x.to_string()));\n+    let test_shard = opt_shard(test_shard);\n \n     let mut nocapture = matches.opt_present(\"nocapture\");\n     if !nocapture {\n@@ -756,7 +756,7 @@ pub fn fmt_metrics(mm: &MetricMap) -> String {\n         .map(|(k,v)| format!(\"{}: {} (+/- {})\", *k,\n                              v.value as f64, v.noise as f64))\n         .collect();\n-    v.connect(\", \").to_string()\n+    v.connect(\", \")\n }\n \n pub fn fmt_bench_samples(bs: &BenchSamples) -> String {"}, {"sha": "fd3c4daebdb855e12552a5eae7fbd675a0c4e6b5", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -24,7 +24,7 @@ use std::vec;\n use std::io::File;\n \n fn main() {\n-    let argv = os::args().move_iter().map(|x| x.to_string()).collect::<Vec<String>>();\n+    let argv = os::args();\n     let _tests = argv.slice(1, argv.len());\n \n     macro_rules! bench ("}, {"sha": "222e1d54a5d9995c827b3462417adcc5e565a8a1", "filename": "src/test/run-pass/issue-5666.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc502e23458c695b008e3470ec5ef40421b8aaa2/src%2Ftest%2Frun-pass%2Fissue-5666.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5666.rs?ref=fc502e23458c695b008e3470ec5ef40421b8aaa2", "patch": "@@ -19,7 +19,7 @@ trait Barks {\n \n impl Barks for Dog {\n     fn bark(&self) -> String {\n-        return format!(\"woof! (I'm {})\", self.name).to_string();\n+        return format!(\"woof! (I'm {})\", self.name);\n     }\n }\n "}]}