{"sha": "a0f943cd3a653064f8e25e408b6bf02e81bb4a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjk0M2NkM2E2NTMwNjRmOGUyNWU0MDhiNmJmMDJlODFiYjRhMWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-21T14:06:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-21T14:06:49Z"}, "message": "auto merge of #12654 : edwardw/rust/rc-arc, r=huonw\n\nSince `Arc` has been using `Atomic`, this closes 12625.\r\n\r\nCloses #12625.", "tree": {"sha": "799db68c952b9713635668ae8e45906e823b6652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/799db68c952b9713635668ae8e45906e823b6652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b", "html_url": "https://github.com/rust-lang/rust/commit/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caf17fea06bdf3d1540aded41a161f04a8c5a2c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/caf17fea06bdf3d1540aded41a161f04a8c5a2c9", "html_url": "https://github.com/rust-lang/rust/commit/caf17fea06bdf3d1540aded41a161f04a8c5a2c9"}, {"sha": "db5206c32a879d5058d6a5cdce39c13c763fbdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/db5206c32a879d5058d6a5cdce39c13c763fbdd5", "html_url": "https://github.com/rust-lang/rust/commit/db5206c32a879d5058d6a5cdce39c13c763fbdd5"}], "stats": {"total": 107, "additions": 65, "deletions": 42}, "files": [{"sha": "dcf4d31c308e20e4614028f511bc9fa16c9a04ec", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 65, "deletions": 34, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=a0f943cd3a653064f8e25e408b6bf02e81bb4a1b", "patch": "@@ -24,18 +24,20 @@ pointers, and then storing the parent pointers as `Weak` pointers.\n */\n \n use cast::transmute;\n+use cell::Cell;\n use clone::Clone;\n use cmp::{Eq, Ord};\n use kinds::marker;\n use ops::{Deref, Drop};\n use option::{Option, Some, None};\n use ptr;\n+use ptr::RawPtr;\n use rt::global_heap::exchange_free;\n \n struct RcBox<T> {\n     value: T,\n-    strong: uint,\n-    weak: uint\n+    strong: Cell<uint>,\n+    weak: Cell<uint>\n }\n \n /// Immutable reference counted pointer type\n@@ -56,7 +58,11 @@ impl<T> Rc<T> {\n                 // destructor never frees the allocation while the\n                 // strong destructor is running, even if the weak\n                 // pointer is stored inside the strong one.\n-                ptr: transmute(~RcBox { value: value, strong: 1, weak: 1 }),\n+                ptr: transmute(~RcBox {\n+                    value: value,\n+                    strong: Cell::new(1),\n+                    weak: Cell::new(1)\n+                }),\n                 nosend: marker::NoSend,\n                 noshare: marker::NoShare\n             }\n@@ -67,13 +73,11 @@ impl<T> Rc<T> {\n impl<T> Rc<T> {\n     /// Downgrade the reference-counted pointer to a weak reference\n     pub fn downgrade(&self) -> Weak<T> {\n-        unsafe {\n-            (*self.ptr).weak += 1;\n-            Weak {\n-                ptr: self.ptr,\n-                nosend: marker::NoSend,\n-                noshare: marker::NoShare\n-            }\n+        self.inc_weak();\n+        Weak {\n+            ptr: self.ptr,\n+            nosend: marker::NoSend,\n+            noshare: marker::NoShare\n         }\n     }\n }\n@@ -82,24 +86,24 @@ impl<T> Deref<T> for Rc<T> {\n     /// Borrow the value contained in the reference-counted box\n     #[inline(always)]\n     fn deref<'a>(&'a self) -> &'a T {\n-        unsafe { &(*self.ptr).value }\n+        &self.inner().value\n     }\n }\n \n #[unsafe_destructor]\n impl<T> Drop for Rc<T> {\n     fn drop(&mut self) {\n         unsafe {\n-            if self.ptr != 0 as *mut RcBox<T> {\n-                (*self.ptr).strong -= 1;\n-                if (*self.ptr).strong == 0 {\n+            if !self.ptr.is_null() {\n+                self.dec_strong();\n+                if self.strong() == 0 {\n                     ptr::read(self.deref()); // destroy the contained object\n \n                     // remove the implicit \"strong weak\" pointer now\n                     // that we've destroyed the contents.\n-                    (*self.ptr).weak -= 1;\n+                    self.dec_weak();\n \n-                    if (*self.ptr).weak == 0 {\n+                    if self.weak() == 0 {\n                         exchange_free(self.ptr as *u8)\n                     }\n                 }\n@@ -111,10 +115,8 @@ impl<T> Drop for Rc<T> {\n impl<T> Clone for Rc<T> {\n     #[inline]\n     fn clone(&self) -> Rc<T> {\n-        unsafe {\n-            (*self.ptr).strong += 1;\n-            Rc { ptr: self.ptr, nosend: marker::NoSend, noshare: marker::NoShare }\n-        }\n+        self.inc_strong();\n+        Rc { ptr: self.ptr, nosend: marker::NoSend, noshare: marker::NoShare }\n     }\n }\n \n@@ -151,13 +153,11 @@ pub struct Weak<T> {\n impl<T> Weak<T> {\n     /// Upgrade a weak reference to a strong reference\n     pub fn upgrade(&self) -> Option<Rc<T>> {\n-        unsafe {\n-            if (*self.ptr).strong == 0 {\n-                None\n-            } else {\n-                (*self.ptr).strong += 1;\n-                Some(Rc { ptr: self.ptr, nosend: marker::NoSend, noshare: marker::NoShare })\n-            }\n+        if self.strong() == 0 {\n+            None\n+        } else {\n+            self.inc_strong();\n+            Some(Rc { ptr: self.ptr, nosend: marker::NoSend, noshare: marker::NoShare })\n         }\n     }\n }\n@@ -166,11 +166,11 @@ impl<T> Weak<T> {\n impl<T> Drop for Weak<T> {\n     fn drop(&mut self) {\n         unsafe {\n-            if self.ptr != 0 as *mut RcBox<T> {\n-                (*self.ptr).weak -= 1;\n+            if !self.ptr.is_null() {\n+                self.dec_weak();\n                 // the weak count starts at 1, and will only go to\n                 // zero if all the strong pointers have disappeared.\n-                if (*self.ptr).weak == 0 {\n+                if self.weak() == 0 {\n                     exchange_free(self.ptr as *u8)\n                 }\n             }\n@@ -181,13 +181,44 @@ impl<T> Drop for Weak<T> {\n impl<T> Clone for Weak<T> {\n     #[inline]\n     fn clone(&self) -> Weak<T> {\n-        unsafe {\n-            (*self.ptr).weak += 1;\n-            Weak { ptr: self.ptr, nosend: marker::NoSend, noshare: marker::NoShare }\n-        }\n+        self.inc_weak();\n+        Weak { ptr: self.ptr, nosend: marker::NoSend, noshare: marker::NoShare }\n     }\n }\n \n+#[allow(missing_doc)]\n+trait RcBoxPtr<T> {\n+    fn inner<'a>(&'a self) -> &'a RcBox<T>;\n+\n+    #[inline]\n+    fn strong(&self) -> uint { self.inner().strong.get() }\n+\n+    #[inline]\n+    fn inc_strong(&self) { self.inner().strong.set(self.strong() + 1); }\n+\n+    #[inline]\n+    fn dec_strong(&self) { self.inner().strong.set(self.strong() - 1); }\n+\n+    #[inline]\n+    fn weak(&self) -> uint { self.inner().weak.get() }\n+\n+    #[inline]\n+    fn inc_weak(&self) { self.inner().weak.set(self.weak() + 1); }\n+\n+    #[inline]\n+    fn dec_weak(&self) { self.inner().weak.set(self.weak() - 1); }\n+}\n+\n+impl<T> RcBoxPtr<T> for Rc<T> {\n+    #[inline(always)]\n+    fn inner<'a>(&'a self) -> &'a RcBox<T> { unsafe { &(*self.ptr) } }\n+}\n+\n+impl<T> RcBoxPtr<T> for Weak<T> {\n+    #[inline(always)]\n+    fn inner<'a>(&'a self) -> &'a RcBox<T> { unsafe { &(*self.ptr) } }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::*;"}, {"sha": "baea0a19f9617a4d111f1e96c9f7c2b59300995a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f943cd3a653064f8e25e408b6bf02e81bb4a1b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a0f943cd3a653064f8e25e408b6bf02e81bb4a1b", "patch": "@@ -1156,14 +1156,6 @@ mod test {\n     use codemap::*;\n     use super::*;\n \n-    fn is_freeze<T: Freeze>() {}\n-\n-    // Assert that the AST remains Freeze (#10693).\n-    #[test]\n-    fn ast_is_freeze() {\n-        is_freeze::<Item>();\n-    }\n-\n     // are ASTs encodable?\n     #[test]\n     fn check_asts_encodable() {"}]}