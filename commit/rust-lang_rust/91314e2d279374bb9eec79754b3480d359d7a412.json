{"sha": "91314e2d279374bb9eec79754b3480d359d7a412", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzE0ZTJkMjc5Mzc0YmI5ZWVjNzk3NTRiMzQ4MGQzNTlkN2E0MTI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T19:04:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T21:00:01Z"}, "message": "Use intra-doc links in BTreeSet docs", "tree": {"sha": "b34133d24a300571f1c4607a52b448b7cd0a5acf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b34133d24a300571f1c4607a52b448b7cd0a5acf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91314e2d279374bb9eec79754b3480d359d7a412", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91314e2d279374bb9eec79754b3480d359d7a412", "html_url": "https://github.com/rust-lang/rust/commit/91314e2d279374bb9eec79754b3480d359d7a412", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91314e2d279374bb9eec79754b3480d359d7a412/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3014f23ddd437d2ba9947383c4565d09c1eb39f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3014f23ddd437d2ba9947383c4565d09c1eb39f2", "html_url": "https://github.com/rust-lang/rust/commit/3014f23ddd437d2ba9947383c4565d09c1eb39f2"}], "stats": {"total": 22, "additions": 7, "deletions": 15}, "files": [{"sha": "530cb0c91b8e314894a198802100ad04873f792d", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91314e2d279374bb9eec79754b3480d359d7a412/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91314e2d279374bb9eec79754b3480d359d7a412/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=91314e2d279374bb9eec79754b3480d359d7a412", "patch": "@@ -22,7 +22,6 @@ use super::Recover;\n /// to any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\n /// normally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\n ///\n-/// [`BTreeMap`]: struct.BTreeMap.html\n /// [`Ord`]: ../../std/cmp/trait.Ord.html\n /// [`Cell`]: ../../std/cell/struct.Cell.html\n /// [`RefCell`]: ../../std/cell/struct.RefCell.html\n@@ -78,8 +77,7 @@ impl<T: Clone> Clone for BTreeSet<T> {\n /// This `struct` is created by the [`iter`] method on [`BTreeSet`].\n /// See its documentation for more.\n ///\n-/// [`BTreeSet`]: struct.BTreeSet.html\n-/// [`iter`]: struct.BTreeSet.html#method.iter\n+/// [`iter`]: BTreeSet::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     iter: Keys<'a, T, ()>,\n@@ -97,8 +95,7 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n /// This `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`BTreeSet`]: struct.BTreeSet.html\n-/// [`into_iter`]: struct.BTreeSet.html#method.into_iter\n+/// [`into_iter`]: BTreeSet#method.into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {\n@@ -110,8 +107,7 @@ pub struct IntoIter<T> {\n /// This `struct` is created by the [`range`] method on [`BTreeSet`].\n /// See its documentation for more.\n ///\n-/// [`BTreeSet`]: struct.BTreeSet.html\n-/// [`range`]: struct.BTreeSet.html#method.range\n+/// [`range`]: BTreeSet::range\n #[derive(Debug)]\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, T: 'a> {\n@@ -194,8 +190,7 @@ where\n /// This `struct` is created by the [`difference`] method on [`BTreeSet`].\n /// See its documentation for more.\n ///\n-/// [`BTreeSet`]: struct.BTreeSet.html\n-/// [`difference`]: struct.BTreeSet.html#method.difference\n+/// [`difference`]: BTreeSet::difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Difference<'a, T: 'a> {\n     inner: DifferenceInner<'a, T>,\n@@ -227,8 +222,7 @@ impl<T: fmt::Debug> fmt::Debug for Difference<'_, T> {\n /// This `struct` is created by the [`symmetric_difference`] method on\n /// [`BTreeSet`]. See its documentation for more.\n ///\n-/// [`BTreeSet`]: struct.BTreeSet.html\n-/// [`symmetric_difference`]: struct.BTreeSet.html#method.symmetric_difference\n+/// [`symmetric_difference`]: BTreeSet::symmetric_difference\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SymmetricDifference<'a, T: 'a>(MergeIterInner<Iter<'a, T>>);\n \n@@ -244,8 +238,7 @@ impl<T: fmt::Debug> fmt::Debug for SymmetricDifference<'_, T> {\n /// This `struct` is created by the [`intersection`] method on [`BTreeSet`].\n /// See its documentation for more.\n ///\n-/// [`BTreeSet`]: struct.BTreeSet.html\n-/// [`intersection`]: struct.BTreeSet.html#method.intersection\n+/// [`intersection`]: BTreeSet::intersection\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Intersection<'a, T: 'a> {\n     inner: IntersectionInner<'a, T>,\n@@ -277,8 +270,7 @@ impl<T: fmt::Debug> fmt::Debug for Intersection<'_, T> {\n /// This `struct` is created by the [`union`] method on [`BTreeSet`].\n /// See its documentation for more.\n ///\n-/// [`BTreeSet`]: struct.BTreeSet.html\n-/// [`union`]: struct.BTreeSet.html#method.union\n+/// [`union`]: BTreeSet::union\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Union<'a, T: 'a>(MergeIterInner<Iter<'a, T>>);\n "}]}