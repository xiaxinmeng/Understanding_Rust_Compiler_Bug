{"sha": "39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5YTdiZDA5ZjE2YzY1NTY3NDdmZTFlYmUwZTE2N2UxYzMwODBlNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T13:25:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-31T13:25:37Z"}, "message": "Auto merge of #1698 - RalfJung:rustup, r=RalfJung\n\nrustup; remove some no-longer-needed Windows shims\n\nlibstd now calls these lock functions directly, and `GetModuleHandleW` isn't use either any more since https://github.com/rust-lang/rust/pull/81478.", "tree": {"sha": "504ae5e22c8f353e4b2c9c080e280d5e4c213eca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/504ae5e22c8f353e4b2c9c080e280d5e4c213eca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "html_url": "https://github.com/rust-lang/rust/commit/39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d24b02414073bd4dafd3810205265c668dbcae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d24b02414073bd4dafd3810205265c668dbcae1", "html_url": "https://github.com/rust-lang/rust/commit/8d24b02414073bd4dafd3810205265c668dbcae1"}, {"sha": "052cd3bff7c0008cedb153abc38f12b3938c7f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/052cd3bff7c0008cedb153abc38f12b3938c7f0c", "html_url": "https://github.com/rust-lang/rust/commit/052cd3bff7c0008cedb153abc38f12b3938c7f0c"}], "stats": {"total": 64, "additions": 7, "deletions": 57}, "files": [{"sha": "1aa101dca1418edfa26ec800c748a3f7e8dc2ab0", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "patch": "@@ -1 +1 @@\n-9b3242982202707be2485b1e4cf5f3b34466a38d\n+0e63af5da3400ace48a0345117980473fd21ad73"}, {"sha": "660c6dc0ebaec39040ed5b9788a7fb5984056983", "filename": "src/shims/posix/dlsym.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/src%2Fshims%2Fposix%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/src%2Fshims%2Fposix%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Fdlsym.rs?ref=39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "patch": "@@ -34,7 +34,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n+\n         check_abi(abi, Abi::C)?;\n+\n         match dlsym {\n             Dlsym::Linux(dlsym) => linux::EvalContextExt::call_dlsym(this, dlsym, args, ret),\n             Dlsym::MacOs(dlsym) => macos::EvalContextExt::call_dlsym(this, dlsym, args, ret),"}, {"sha": "57766bd344a45373f8f5790ca3c941823ea20e3c", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 4, "deletions": 50, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "patch": "@@ -1,33 +1,18 @@\n use rustc_middle::mir;\n use rustc_target::spec::abi::Abi;\n \n-use log::trace;\n-\n use crate::*;\n-use helpers::{check_abi, check_arg_count};\n-use shims::windows::sync::EvalContextExt as _;\n+use helpers::check_abi;\n \n #[derive(Debug, Copy, Clone)]\n pub enum Dlsym {\n-    AcquireSRWLockExclusive,\n-    ReleaseSRWLockExclusive,\n-    TryAcquireSRWLockExclusive,\n-    AcquireSRWLockShared,\n-    ReleaseSRWLockShared,\n-    TryAcquireSRWLockShared,\n }\n \n impl Dlsym {\n     // Returns an error for unsupported symbols, and None if this symbol\n     // should become a NULL pointer (pretend it does not exist).\n     pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n         Ok(match name {\n-            \"AcquireSRWLockExclusive\" => Some(Dlsym::AcquireSRWLockExclusive),\n-            \"ReleaseSRWLockExclusive\" => Some(Dlsym::ReleaseSRWLockExclusive),\n-            \"TryAcquireSRWLockExclusive\" => Some(Dlsym::TryAcquireSRWLockExclusive),\n-            \"AcquireSRWLockShared\" => Some(Dlsym::AcquireSRWLockShared),\n-            \"ReleaseSRWLockShared\" => Some(Dlsym::ReleaseSRWLockShared),\n-            \"TryAcquireSRWLockShared\" => Some(Dlsym::TryAcquireSRWLockShared),\n             \"GetSystemTimePreciseAsFileTime\" => None,\n             _ => throw_unsup_format!(\"unsupported Windows dlsym: {}\", name),\n         })\n@@ -40,46 +25,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         &mut self,\n         dlsym: Dlsym,\n         abi: Abi,\n-        args: &[OpTy<'tcx, Tag>],\n+        _args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let (dest, ret) = ret.expect(\"we don't support any diverging dlsym\");\n+        let (_dest, _ret) = ret.expect(\"we don't support any diverging dlsym\");\n         assert!(this.tcx.sess.target.os == \"windows\");\n \n         check_abi(abi, Abi::System)?;\n \n-        match dlsym {\n-            Dlsym::AcquireSRWLockExclusive => {\n-                let &[ptr] = check_arg_count(args)?;\n-                this.AcquireSRWLockExclusive(ptr)?;\n-            }\n-            Dlsym::ReleaseSRWLockExclusive => {\n-                let &[ptr] = check_arg_count(args)?;\n-                this.ReleaseSRWLockExclusive(ptr)?;\n-            }\n-            Dlsym::TryAcquireSRWLockExclusive => {\n-                let &[ptr] = check_arg_count(args)?;\n-                let ret = this.TryAcquireSRWLockExclusive(ptr)?;\n-                this.write_scalar(Scalar::from_u8(ret), dest)?;\n-            }\n-            Dlsym::AcquireSRWLockShared => {\n-                let &[ptr] = check_arg_count(args)?;\n-                this.AcquireSRWLockShared(ptr)?;\n-            }\n-            Dlsym::ReleaseSRWLockShared => {\n-                let &[ptr] = check_arg_count(args)?;\n-                this.ReleaseSRWLockShared(ptr)?;\n-            }\n-            Dlsym::TryAcquireSRWLockShared => {\n-                let &[ptr] = check_arg_count(args)?;\n-                let ret = this.TryAcquireSRWLockShared(ptr)?;\n-                this.write_scalar(Scalar::from_u8(ret), dest)?;\n-            }\n-        }\n-\n-        trace!(\"{:?}\", this.dump_place(*dest));\n-        this.go_to_block(ret);\n-        Ok(())\n+        match dlsym {}\n     }\n }"}, {"sha": "0eeec08901db729b85a13467890506fa0a8819c5", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a7bd09f16c6556747fe1ebe0e167e1c3080e58/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=39a7bd09f16c6556747fe1ebe0e167e1c3080e58", "patch": "@@ -300,12 +300,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Just fake a HANDLE\n                 this.write_scalar(Scalar::from_machine_isize(1, this), dest)?;\n             }\n-            \"GetModuleHandleW\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n-                #[allow(non_snake_case)]\n-                let &[_lpModuleName] = check_arg_count(args)?;\n-                // Pretend this does not exist / nothing happened, by returning zero.\n-                this.write_null(dest)?;\n-            }\n             \"SetConsoleTextAttribute\" if this.frame().instance.to_string().starts_with(\"std::sys::windows::\") => {\n                 #[allow(non_snake_case)]\n                 let &[_hConsoleOutput, _wAttribute] = check_arg_count(args)?;"}]}