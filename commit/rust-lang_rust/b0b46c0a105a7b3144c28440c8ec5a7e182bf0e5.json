{"sha": "b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "node_id": "C_kwDOAAsO6NoAKGIwYjQ2YzBhMTA1YTdiMzE0NGMyODQ0MGM4ZWM1YTdlMTgyYmYwZTU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-06T09:11:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-30T17:06:12Z"}, "message": "Separate macro_rules and macro_definition.", "tree": {"sha": "3e005de7dd844950c1876774113e8bdb4b810f18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e005de7dd844950c1876774113e8bdb4b810f18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "html_url": "https://github.com/rust-lang/rust/commit/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c485fccd8110bc3dc85187d1487d614c771e5362", "url": "https://api.github.com/repos/rust-lang/rust/commits/c485fccd8110bc3dc85187d1487d614c771e5362", "html_url": "https://github.com/rust-lang/rust/commit/c485fccd8110bc3dc85187d1487d614c771e5362"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "a540c4606c931461fa6df47480669ae855ffc69b", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "patch": "@@ -1010,13 +1010,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 let span = self.get_span(child_index, sess);\n                 let macro_rules = match kind {\n                     DefKind::Macro(..) => {\n-                        self.root\n-                            .tables\n-                            .macro_definition\n-                            .get(self, child_index)\n-                            .unwrap()\n-                            .decode((self, sess))\n-                            .macro_rules\n+                        self.root.tables.macro_rules.get(self, child_index).is_some()\n                     }\n                     _ => false,\n                 };\n@@ -1326,7 +1320,10 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn get_macro(self, id: DefIndex, sess: &Session) -> ast::MacroDef {\n         match self.def_kind(id) {\n             DefKind::Macro(_) => {\n-                self.root.tables.macro_definition.get(self, id).unwrap().decode((self, sess))\n+                let macro_rules = self.root.tables.macro_rules.get(self, id).is_some();\n+                let body =\n+                    self.root.tables.macro_definition.get(self, id).unwrap().decode((self, sess));\n+                ast::MacroDef { macro_rules, body: ast::ptr::P(body) }\n             }\n             _ => bug!(),\n         }"}, {"sha": "1288d19cb0860b09951c3b73ee2704e2dc1e44f6", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "patch": "@@ -1494,7 +1494,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 self.tables.constness.set(def_id.index, sig.header.constness);\n             }\n             hir::ItemKind::Macro(ref macro_def, _) => {\n-                record!(self.tables.macro_definition[def_id] <- macro_def);\n+                if macro_def.macro_rules {\n+                    self.tables.macro_rules.set(def_id.index, ());\n+                }\n+                record!(self.tables.macro_definition[def_id] <- &*macro_def.body);\n             }\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.def_id, m);"}, {"sha": "bb5b40bcc5b1406eaa617337893ad1f93b86f426", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "patch": "@@ -394,7 +394,9 @@ define_tables! {\n     may_have_doc_links: Table<DefIndex, ()>,\n     variant_data: Table<DefIndex, LazyValue<VariantData>>,\n     assoc_container: Table<DefIndex, ty::AssocItemContainer>,\n-    macro_definition: Table<DefIndex, LazyValue<ast::MacroDef>>,\n+    // Slot is full when macro is macro_rules.\n+    macro_rules: Table<DefIndex, ()>,\n+    macro_definition: Table<DefIndex, LazyValue<ast::MacArgs>>,\n     proc_macro: Table<DefIndex, MacroKind>,\n     // Slot is full when there is a self parameter.\n     fn_has_self_parameter: Table<DefIndex, ()>,"}, {"sha": "ca24c0d1ce386fc5801be18526395b68e3589677", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=b0b46c0a105a7b3144c28440c8ec5a7e182bf0e5", "patch": "@@ -64,7 +64,7 @@ trivially_parameterized_over_tcx! {\n     ty::adjustment::CoerceUnsizedInfo,\n     ty::fast_reject::SimplifiedTypeGen<DefId>,\n     rustc_ast::Attribute,\n-    rustc_ast::MacroDef,\n+    rustc_ast::MacArgs,\n     rustc_attr::ConstStability,\n     rustc_attr::DefaultBodyStability,\n     rustc_attr::Deprecation,"}]}