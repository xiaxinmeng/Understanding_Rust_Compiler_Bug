{"sha": "34e654cd7b9f347caf7d2a4726a3f632af533ea4", "node_id": "C_kwDOAAsO6NoAKDM0ZTY1NGNkN2I5ZjM0N2NhZjdkMmE0NzI2YTNmNjMyYWY1MzNlYTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T11:42:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-09T11:42:09Z"}, "message": "Auto merge of #13733 - WaffleLapkin:remove_parens, r=Veykril\n\nfeat: Add \"Remove redundant parentheses\" assist\n\n![Peek 2022-12-08 22-22](https://user-images.githubusercontent.com/38225716/206542898-d6c97468-d615-4c5b-8650-f89b9c0321a0.gif)\n\nCan be quite handy when refactoring :)", "tree": {"sha": "dfcb03790793d0bde1cf6f77e2c4f3d5dd2e2d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfcb03790793d0bde1cf6f77e2c4f3d5dd2e2d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34e654cd7b9f347caf7d2a4726a3f632af533ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34e654cd7b9f347caf7d2a4726a3f632af533ea4", "html_url": "https://github.com/rust-lang/rust/commit/34e654cd7b9f347caf7d2a4726a3f632af533ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34e654cd7b9f347caf7d2a4726a3f632af533ea4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83e2639cd1a12a7ccb39e0e5a884ef46f815b6ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e2639cd1a12a7ccb39e0e5a884ef46f815b6ce", "html_url": "https://github.com/rust-lang/rust/commit/83e2639cd1a12a7ccb39e0e5a884ef46f815b6ce"}, {"sha": "ba6f0befc8b406120eb0d927c902986e997fb841", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6f0befc8b406120eb0d927c902986e997fb841", "html_url": "https://github.com/rust-lang/rust/commit/ba6f0befc8b406120eb0d927c902986e997fb841"}], "stats": {"total": 226, "additions": 226, "deletions": 0}, "files": [{"sha": "185beda9d0796911715af7e5be74a333cd63bee6", "filename": "crates/ide-assists/src/handlers/remove_parentheses.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fremove_parentheses.rs?ref=34e654cd7b9f347caf7d2a4726a3f632af533ea4", "patch": "@@ -0,0 +1,91 @@\n+use syntax::{ast, AstNode};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: remove_parentheses\n+//\n+// Removes redundant parentheses.\n+//\n+// ```\n+// fn main() {\n+//     _ = $0(2) + 2;\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     _ = 2 + 2;\n+// }\n+// ```\n+pub(crate) fn remove_parentheses(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let parens = ctx.find_node_at_offset::<ast::ParenExpr>()?;\n+\n+    let cursor_in_range =\n+        parens.l_paren_token()?.text_range().contains_range(ctx.selection_trimmed())\n+            || parens.r_paren_token()?.text_range().contains_range(ctx.selection_trimmed());\n+    if !cursor_in_range {\n+        return None;\n+    }\n+\n+    let expr = parens.expr()?;\n+\n+    let parent = ast::Expr::cast(parens.syntax().parent()?);\n+    let is_ok_to_remove = expr.precedence() >= parent.as_ref().and_then(ast::Expr::precedence);\n+    if !is_ok_to_remove {\n+        return None;\n+    }\n+\n+    let target = parens.syntax().text_range();\n+    acc.add(\n+        AssistId(\"remove_parentheses\", AssistKind::Refactor),\n+        \"Remove redundant parentheses\",\n+        target,\n+        |builder| builder.replace_ast(parens.into(), expr),\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn remove_parens_simple() {\n+        check_assist(remove_parentheses, r#\"fn f() { $0(2) + 2; }\"#, r#\"fn f() { 2 + 2; }\"#);\n+        check_assist(remove_parentheses, r#\"fn f() { ($02) + 2; }\"#, r#\"fn f() { 2 + 2; }\"#);\n+        check_assist(remove_parentheses, r#\"fn f() { (2)$0 + 2; }\"#, r#\"fn f() { 2 + 2; }\"#);\n+        check_assist(remove_parentheses, r#\"fn f() { (2$0) + 2; }\"#, r#\"fn f() { 2 + 2; }\"#);\n+    }\n+\n+    #[test]\n+    fn remove_parens_precedence() {\n+        check_assist(\n+            remove_parentheses,\n+            r#\"fn f() { $0(2 * 3) + 1; }\"#,\n+            r#\"fn f() { 2 * 3 + 1; }\"#,\n+        );\n+        check_assist(remove_parentheses, r#\"fn f() { ( $0(2) ); }\"#, r#\"fn f() { ( 2 ); }\"#);\n+        check_assist(remove_parentheses, r#\"fn f() { $0(2?)?; }\"#, r#\"fn f() { 2??; }\"#);\n+        check_assist(remove_parentheses, r#\"fn f() { f(($02 + 2)); }\"#, r#\"fn f() { f(2 + 2); }\"#);\n+        check_assist(\n+            remove_parentheses,\n+            r#\"fn f() { (1<2)&&$0(3>4); }\"#,\n+            r#\"fn f() { (1<2)&&3>4; }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn remove_parens_doesnt_apply_precedence() {\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0(2 + 2) * 8; }\"#);\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0(2 + 2).f(); }\"#);\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0(2 + 2).await; }\"#);\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { $0!(2..2); }\"#);\n+    }\n+\n+    #[test]\n+    fn remove_parens_doesnt_apply_with_cursor_not_on_paren() {\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() { (2 +$0 2) }\"#);\n+        check_assist_not_applicable(remove_parentheses, r#\"fn f() {$0 (2 + 2) }\"#);\n+    }\n+}"}, {"sha": "8b1247c640a96289075f39820eea65a0809a8f8e", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=34e654cd7b9f347caf7d2a4726a3f632af533ea4", "patch": "@@ -179,6 +179,7 @@ mod handlers {\n     mod remove_dbg;\n     mod remove_mut;\n     mod remove_unused_param;\n+    mod remove_parentheses;\n     mod reorder_fields;\n     mod reorder_impl_items;\n     mod replace_try_expr_with_match;\n@@ -280,6 +281,7 @@ mod handlers {\n             remove_dbg::remove_dbg,\n             remove_mut::remove_mut,\n             remove_unused_param::remove_unused_param,\n+            remove_parentheses::remove_parentheses,\n             reorder_fields::reorder_fields,\n             reorder_impl_items::reorder_impl_items,\n             replace_try_expr_with_match::replace_try_expr_with_match,"}, {"sha": "80b8c27c7c0526a039edb5b816a9b687393adec8", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=34e654cd7b9f347caf7d2a4726a3f632af533ea4", "patch": "@@ -1978,6 +1978,23 @@ impl Walrus {\n     )\n }\n \n+#[test]\n+fn doctest_remove_parentheses() {\n+    check_doc_test(\n+        \"remove_parentheses\",\n+        r#####\"\n+fn main() {\n+    _ = $0(2) + 2;\n+}\n+\"#####,\n+        r#####\"\n+fn main() {\n+    _ = 2 + 2;\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_remove_unused_param() {\n     check_doc_test("}, {"sha": "10c04575833c85428b73a4300d2db2b91f883887", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=34e654cd7b9f347caf7d2a4726a3f632af533ea4", "patch": "@@ -9,6 +9,7 @@ mod operators;\n pub mod edit;\n pub mod edit_in_place;\n pub mod make;\n+pub mod prec;\n \n use std::marker::PhantomData;\n "}, {"sha": "6253c4dc3e77cd3b9abba56d65b87f87e006e04e", "filename": "crates/syntax/src/ast/prec.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34e654cd7b9f347caf7d2a4726a3f632af533ea4/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fprec.rs?ref=34e654cd7b9f347caf7d2a4726a3f632af533ea4", "patch": "@@ -0,0 +1,115 @@\n+//! Precedence representation.\n+\n+use crate::ast::{self, BinExpr, Expr};\n+\n+/// Precedence of an expression.\n+#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n+pub enum ExprPrecedence {\n+    // N.B.: Order is important\n+    Closure,\n+    Jump,\n+    Range,\n+    Bin(BinOpPresedence),\n+    Prefix,\n+    Postfix,\n+    Paren,\n+}\n+\n+/// Precedence of a binary operator.\n+#[derive(Debug, Copy, Clone, Ord, PartialOrd, Eq, PartialEq)]\n+pub enum BinOpPresedence {\n+    // N.B.: Order is important\n+    /// `=`, `+=`, `-=`, `*=`, `/=`, `%=`, `|=`, `&=`\n+    Assign,\n+    /// `||`\n+    LOr,\n+    /// `&&`\n+    LAnd,\n+    /// `<`, `<=`, `>`, `>=`, `==` and `!=`\n+    Cmp,\n+    /// `|`\n+    BitOr,\n+    /// `^`\n+    BitXor,\n+    /// `&`\n+    BitAnd,\n+    /// `<<` and `>>`\n+    Shift,\n+    /// `+` and `-`\n+    Add,\n+    /// `*`, `/` and `%`\n+    Mul,\n+    /// `as`\n+    As,\n+}\n+\n+impl Expr {\n+    /// Returns precedence of this expression.\n+    /// Usefull to preserve semantics in assists.\n+    ///\n+    /// Returns `None` if this is a [`BinExpr`] and its [`op_kind`] returns `None`.\n+    ///\n+    /// [`op_kind`]: BinExpr::op_kind\n+    /// [`BinExpr`]: Expr::BinExpr\n+    pub fn precedence(&self) -> Option<ExprPrecedence> {\n+        // Copied from <https://github.com/rust-lang/rust/blob/b6852428a8ea9728369b64b9964cad8e258403d3/compiler/rustc_ast/src/util/parser.rs#L296>\n+        use Expr::*;\n+\n+        let prec = match self {\n+            ClosureExpr(_) => ExprPrecedence::Closure,\n+\n+            ContinueExpr(_) | ReturnExpr(_) | YieldExpr(_) | BreakExpr(_) => ExprPrecedence::Jump,\n+\n+            RangeExpr(_) => ExprPrecedence::Range,\n+\n+            BinExpr(bin_expr) => return bin_expr.precedence().map(ExprPrecedence::Bin),\n+            CastExpr(_) => ExprPrecedence::Bin(BinOpPresedence::As),\n+\n+            BoxExpr(_) | RefExpr(_) | LetExpr(_) | PrefixExpr(_) => ExprPrecedence::Prefix,\n+\n+            AwaitExpr(_) | CallExpr(_) | MethodCallExpr(_) | FieldExpr(_) | IndexExpr(_)\n+            | TryExpr(_) | MacroExpr(_) => ExprPrecedence::Postfix,\n+\n+            ArrayExpr(_) | TupleExpr(_) | Literal(_) | PathExpr(_) | ParenExpr(_) | IfExpr(_)\n+            | WhileExpr(_) | ForExpr(_) | LoopExpr(_) | MatchExpr(_) | BlockExpr(_)\n+            | RecordExpr(_) | UnderscoreExpr(_) => ExprPrecedence::Paren,\n+        };\n+\n+        Some(prec)\n+    }\n+}\n+\n+impl BinExpr {\n+    /// Returns precedence of this binary expression.\n+    /// Usefull to preserve semantics in assists.\n+    ///\n+    /// Returns `None` if [`op_kind`] returns `None`.\n+    ///\n+    /// [`op_kind`]: BinExpr::op_kind\n+    pub fn precedence(&self) -> Option<BinOpPresedence> {\n+        use ast::{ArithOp::*, BinaryOp::*, LogicOp::*};\n+\n+        let prec = match self.op_kind()? {\n+            LogicOp(op) => match op {\n+                And => BinOpPresedence::LAnd,\n+                Or => BinOpPresedence::LOr,\n+            },\n+            ArithOp(op) => match op {\n+                Add => BinOpPresedence::Add,\n+                Mul => BinOpPresedence::Mul,\n+                Sub => BinOpPresedence::Add,\n+                Div => BinOpPresedence::Mul,\n+                Rem => BinOpPresedence::Mul,\n+                Shl => BinOpPresedence::Shift,\n+                Shr => BinOpPresedence::Shift,\n+                BitXor => BinOpPresedence::BitXor,\n+                BitOr => BinOpPresedence::BitOr,\n+                BitAnd => BinOpPresedence::BitAnd,\n+            },\n+            CmpOp(_) => BinOpPresedence::Cmp,\n+            Assignment { .. } => BinOpPresedence::Assign,\n+        };\n+\n+        Some(prec)\n+    }\n+}"}]}