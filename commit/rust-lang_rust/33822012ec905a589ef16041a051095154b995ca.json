{"sha": "33822012ec905a589ef16041a051095154b995ca", "node_id": "C_kwDOAAsO6NoAKDMzODIyMDEyZWM5MDVhNTg5ZWYxNjA0MWEwNTEwOTUxNTRiOTk1Y2E", "commit": {"author": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-11-08T20:44:50Z"}, "committer": {"name": "5225225", "email": "5225225@mailbox.org", "date": "2021-11-09T17:30:15Z"}, "message": "Lint for bool to integer casts in `cast_lossless`", "tree": {"sha": "fb6b47fef6e0aeb362621db65769bb09b70d0df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb6b47fef6e0aeb362621db65769bb09b70d0df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33822012ec905a589ef16041a051095154b995ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33822012ec905a589ef16041a051095154b995ca", "html_url": "https://github.com/rust-lang/rust/commit/33822012ec905a589ef16041a051095154b995ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33822012ec905a589ef16041a051095154b995ca/comments", "author": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "committer": {"login": "5225225", "id": 8584210, "node_id": "MDQ6VXNlcjg1ODQyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8584210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/5225225", "html_url": "https://github.com/5225225", "followers_url": "https://api.github.com/users/5225225/followers", "following_url": "https://api.github.com/users/5225225/following{/other_user}", "gists_url": "https://api.github.com/users/5225225/gists{/gist_id}", "starred_url": "https://api.github.com/users/5225225/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/5225225/subscriptions", "organizations_url": "https://api.github.com/users/5225225/orgs", "repos_url": "https://api.github.com/users/5225225/repos", "events_url": "https://api.github.com/users/5225225/events{/privacy}", "received_events_url": "https://api.github.com/users/5225225/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94d62b15379217afb23bb02eed736c8048943f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94d62b15379217afb23bb02eed736c8048943f1", "html_url": "https://github.com/rust-lang/rust/commit/c94d62b15379217afb23bb02eed736c8048943f1"}], "stats": {"total": 184, "additions": 177, "deletions": 7}, "files": [{"sha": "2e061267ff5b4efbe0e46831d91052a5be71d4af", "filename": "clippy_lints/src/bool_assert_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33822012ec905a589ef16041a051095154b995ca/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33822012ec905a589ef16041a051095154b995ca/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbool_assert_comparison.rs?ref=33822012ec905a589ef16041a051095154b995ca", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for BoolAssertComparison {\n             if let Some(span) = is_direct_expn_of(expr.span, mac) {\n                 if let Some(args) = higher::extract_assert_macro_args(expr) {\n                     if let [a, b, ..] = args[..] {\n-                        let nb_bool_args = is_bool_lit(a) as usize + is_bool_lit(b) as usize;\n+                        let nb_bool_args = usize::from(is_bool_lit(a)) + usize::from(is_bool_lit(b));\n \n                         if nb_bool_args != 1 {\n                             // If there are two boolean arguments, we definitely don't understand"}, {"sha": "75dc9098033853698e41b8986e124a0a0adf0078", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33822012ec905a589ef16041a051095154b995ca/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33822012ec905a589ef16041a051095154b995ca/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=33822012ec905a589ef16041a051095154b995ca", "patch": "@@ -72,7 +72,7 @@ fn should_lint(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to\n             };\n             from_nbits < to_nbits\n         },\n-\n+        (false, true) if matches!(cast_from.kind(), ty::Bool) => true,\n         (_, _) => {\n             matches!(cast_from.kind(), ty::Float(FloatTy::F32)) && matches!(cast_to.kind(), ty::Float(FloatTy::F64))\n         },"}, {"sha": "108f6fbc92457604a52f7ea99536bdaa0a85f063", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/33822012ec905a589ef16041a051095154b995ca/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33822012ec905a589ef16041a051095154b995ca/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=33822012ec905a589ef16041a051095154b995ca", "patch": "@@ -426,12 +426,16 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n-            if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n-                cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n-                cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n-                cast_precision_loss::check(cx, expr, cast_from, cast_to);\n+\n+            if cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {\n+                if cast_from.is_numeric() {\n+                    cast_possible_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n+                    cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n+                    cast_precision_loss::check(cx, expr, cast_from, cast_to);\n+                    cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n+                }\n+\n                 cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to);\n-                cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n             }\n         }\n "}, {"sha": "9e2da45c37858297a38a18a163b86993b8ea70e4", "filename": "tests/ui/cast_lossless_bool.fixed", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/33822012ec905a589ef16041a051095154b995ca/tests%2Fui%2Fcast_lossless_bool.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/33822012ec905a589ef16041a051095154b995ca/tests%2Fui%2Fcast_lossless_bool.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.fixed?ref=33822012ec905a589ef16041a051095154b995ca", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n+fn main() {\n+    // Test clippy::cast_lossless with casts to integer types\n+    let _ = u8::from(true);\n+    let _ = u16::from(true);\n+    let _ = u32::from(true);\n+    let _ = u64::from(true);\n+    let _ = u128::from(true);\n+    let _ = usize::from(true);\n+\n+    let _ = i8::from(true);\n+    let _ = i16::from(true);\n+    let _ = i32::from(true);\n+    let _ = i64::from(true);\n+    let _ = i128::from(true);\n+    let _ = isize::from(true);\n+\n+    // Test with an expression wrapped in parens\n+    let _ = u16::from(true | false);\n+}\n+\n+// The lint would suggest using `u32::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: bool) -> u32 {\n+    input as u32\n+}\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: bool) -> u64 {\n+            x as u64\n+        }\n+    }\n+}"}, {"sha": "b6f6c59a01f951905bf6195765a221d4c884b8a4", "filename": "tests/ui/cast_lossless_bool.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/33822012ec905a589ef16041a051095154b995ca/tests%2Fui%2Fcast_lossless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33822012ec905a589ef16041a051095154b995ca/tests%2Fui%2Fcast_lossless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.rs?ref=33822012ec905a589ef16041a051095154b995ca", "patch": "@@ -0,0 +1,42 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+#![warn(clippy::cast_lossless)]\n+\n+fn main() {\n+    // Test clippy::cast_lossless with casts to integer types\n+    let _ = true as u8;\n+    let _ = true as u16;\n+    let _ = true as u32;\n+    let _ = true as u64;\n+    let _ = true as u128;\n+    let _ = true as usize;\n+\n+    let _ = true as i8;\n+    let _ = true as i16;\n+    let _ = true as i32;\n+    let _ = true as i64;\n+    let _ = true as i128;\n+    let _ = true as isize;\n+\n+    // Test with an expression wrapped in parens\n+    let _ = (true | false) as u16;\n+}\n+\n+// The lint would suggest using `u32::from(input)` here but the `XX::from` function is not const,\n+// so we skip the lint if the expression is in a const fn.\n+// See #3656\n+const fn abc(input: bool) -> u32 {\n+    input as u32\n+}\n+\n+// Same as the above issue. We can't suggest `::from` in const fns in impls\n+mod cast_lossless_in_impl {\n+    struct A;\n+\n+    impl A {\n+        pub const fn convert(x: bool) -> u64 {\n+            x as u64\n+        }\n+    }\n+}"}, {"sha": "a0d11f08acf65c61896ce6b7005cf08b8ab04d23", "filename": "tests/ui/cast_lossless_bool.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/33822012ec905a589ef16041a051095154b995ca/tests%2Fui%2Fcast_lossless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33822012ec905a589ef16041a051095154b995ca/tests%2Fui%2Fcast_lossless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_bool.stderr?ref=33822012ec905a589ef16041a051095154b995ca", "patch": "@@ -0,0 +1,82 @@\n+error: casting `bool` to `u8` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:8:13\n+   |\n+LL |     let _ = true as u8;\n+   |             ^^^^^^^^^^ help: try: `u8::from(true)`\n+   |\n+   = note: `-D clippy::cast-lossless` implied by `-D warnings`\n+\n+error: casting `bool` to `u16` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:9:13\n+   |\n+LL |     let _ = true as u16;\n+   |             ^^^^^^^^^^^ help: try: `u16::from(true)`\n+\n+error: casting `bool` to `u32` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:10:13\n+   |\n+LL |     let _ = true as u32;\n+   |             ^^^^^^^^^^^ help: try: `u32::from(true)`\n+\n+error: casting `bool` to `u64` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:11:13\n+   |\n+LL |     let _ = true as u64;\n+   |             ^^^^^^^^^^^ help: try: `u64::from(true)`\n+\n+error: casting `bool` to `u128` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:12:13\n+   |\n+LL |     let _ = true as u128;\n+   |             ^^^^^^^^^^^^ help: try: `u128::from(true)`\n+\n+error: casting `bool` to `usize` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:13:13\n+   |\n+LL |     let _ = true as usize;\n+   |             ^^^^^^^^^^^^^ help: try: `usize::from(true)`\n+\n+error: casting `bool` to `i8` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:15:13\n+   |\n+LL |     let _ = true as i8;\n+   |             ^^^^^^^^^^ help: try: `i8::from(true)`\n+\n+error: casting `bool` to `i16` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:16:13\n+   |\n+LL |     let _ = true as i16;\n+   |             ^^^^^^^^^^^ help: try: `i16::from(true)`\n+\n+error: casting `bool` to `i32` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:17:13\n+   |\n+LL |     let _ = true as i32;\n+   |             ^^^^^^^^^^^ help: try: `i32::from(true)`\n+\n+error: casting `bool` to `i64` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:18:13\n+   |\n+LL |     let _ = true as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(true)`\n+\n+error: casting `bool` to `i128` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:19:13\n+   |\n+LL |     let _ = true as i128;\n+   |             ^^^^^^^^^^^^ help: try: `i128::from(true)`\n+\n+error: casting `bool` to `isize` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:20:13\n+   |\n+LL |     let _ = true as isize;\n+   |             ^^^^^^^^^^^^^ help: try: `isize::from(true)`\n+\n+error: casting `bool` to `u16` may become silently lossy if you later change the type\n+  --> $DIR/cast_lossless_bool.rs:23:13\n+   |\n+LL |     let _ = (true | false) as u16;\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::from(true | false)`\n+\n+error: aborting due to 13 previous errors\n+"}]}