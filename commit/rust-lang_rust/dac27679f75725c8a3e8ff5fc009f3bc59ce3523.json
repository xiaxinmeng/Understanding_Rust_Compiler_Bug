{"sha": "dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "node_id": "C_kwDOAAsO6NoAKGRhYzI3Njc5Zjc1NzI1YzhhM2U4ZmY1ZmMwMDlmM2JjNTljZTM1MjM", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-17T23:46:06Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-08-18T11:12:59Z"}, "message": "fix: resolve path `Self` alone in value namespace", "tree": {"sha": "b0bf99b1046d34184d20faa5dd9271697ffa7aa0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0bf99b1046d34184d20faa5dd9271697ffa7aa0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmL+HrsACgkQ4laYqTBY\nYXFiwBAAiECCUGKz69Th3JBPQ+yPLAES7LXUfXcD+0hAtnhjOJt33iRA2WUrHbMO\nLSpqakoal5vrSN6qMlV7ZRaz4u7qUtaUpjjSxaoiWsmq5YzufRBYmkrUn4b3FWoY\n5qK1eqvUJMxBAyxncJ+bLCvrWJ/pltmtYd+fLoQxV/eX5wC03uCBlAJl9M7d1n0F\n10U85lLN1O8B1oHQ7dDLPSfHduSny0BnDaDPoF8SUuT+lqJ/huz5TprAUFXjeC7f\nWXEGIZFFfBSuTCzt5nRXcssgD2pvoSz81TrnuQSwU4sCJ8Iupoz+MRE7sKrmrTR1\n/5YX112ci69xODH+zyq/LPexfypD7jzOr7Dz2bWW4nmafIGVea5t7+qVwWGdT790\ndmdyGuZNvTIoqB3UUh41Vlte2dZDH/IFfA3yB/WVOjhH7AHT9UVqYRmL1RDIEYsX\naxVE3uMMLT7aGSj4lihm356l7i3NbmpkuQZj57rG16fIKkz6qr7oDgGWce456mj1\nRzRxxvqgOTiOqV51+qTiB2OjoqUJdabJ7k70RnSAiX289cQ3T9B71II2IlV5NLud\nXdkIkkDPJgkYODA7Ap3xuAd/awf+l22pL3m6fBBdK99yCvBbn+TGY/4kLHHLKi2Y\nGx+d6hav8hzLfG6O6EBIa3uT7GdjxoRM/ZFDEWeYduP77rkAMGE=\n=s57/\n-----END PGP SIGNATURE-----", "payload": "tree b0bf99b1046d34184d20faa5dd9271697ffa7aa0\nparent d6412b58666ee399bdc56a868a79ed322d6a3fcd\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1660779966 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1660821179 +0900\n\nfix: resolve path `Self` alone in value namespace\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "html_url": "https://github.com/rust-lang/rust/commit/dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dac27679f75725c8a3e8ff5fc009f3bc59ce3523/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6412b58666ee399bdc56a868a79ed322d6a3fcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6412b58666ee399bdc56a868a79ed322d6a3fcd", "html_url": "https://github.com/rust-lang/rust/commit/d6412b58666ee399bdc56a868a79ed322d6a3fcd"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "7440439522e06ee932de373529575c75049a1ab8", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dac27679f75725c8a3e8ff5fc009f3bc59ce3523/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac27679f75725c8a3e8ff5fc009f3bc59ce3523/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "patch": "@@ -734,6 +734,7 @@ impl<'a> InferenceContext<'a> {\n                         let ty = self.insert_type_vars(ty.substitute(Interner, &substs));\n                         return (ty, Some(strukt.into()));\n                     }\n+                    ValueNs::ImplSelf(impl_id) => (TypeNs::SelfType(impl_id), None),\n                     _ => return (self.err_ty(), None),\n                 },\n                 Some(ResolveValueResult::Partial(typens, unresolved)) => (typens, Some(unresolved)),"}, {"sha": "eb04bf87783b40dc8a0c9ef78b7b42044b407a7e", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/dac27679f75725c8a3e8ff5fc009f3bc59ce3523/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dac27679f75725c8a3e8ff5fc009f3bc59ce3523/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=dac27679f75725c8a3e8ff5fc009f3bc59ce3523", "patch": "@@ -488,6 +488,42 @@ fn infer_adt_pattern() {\n     );\n }\n \n+#[test]\n+fn tuple_struct_destructured_with_self() {\n+    check_infer(\n+        r#\"\n+struct Foo(usize,);\n+impl Foo {\n+    fn f() {\n+        let Self(s,) = &Foo(0,);\n+        let Self(s,) = &mut Foo(0,);\n+        let Self(s,) = Foo(0,);\n+    }\n+}\n+        \"#,\n+        expect![[r#\"\n+            42..151 '{     ...     }': ()\n+            56..64 'Self(s,)': Foo\n+            61..62 's': &usize\n+            67..75 '&Foo(0,)': &Foo\n+            68..71 'Foo': Foo(usize) -> Foo\n+            68..75 'Foo(0,)': Foo\n+            72..73 '0': usize\n+            89..97 'Self(s,)': Foo\n+            94..95 's': &mut usize\n+            100..112 '&mut Foo(0,)': &mut Foo\n+            105..108 'Foo': Foo(usize) -> Foo\n+            105..112 'Foo(0,)': Foo\n+            109..110 '0': usize\n+            126..134 'Self(s,)': Foo\n+            131..132 's': usize\n+            137..140 'Foo': Foo(usize) -> Foo\n+            137..144 'Foo(0,)': Foo\n+            141..142 '0': usize\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn enum_variant_through_self_in_pattern() {\n     check_infer("}]}