{"sha": "fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "node_id": "C_kwDOAAsO6NoAKGZkMzk0MmViNjIwZTM3YTRlNGJmZGQ1ODdkOGEyODkzY2NmNmZlYTA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-30T22:08:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-30T22:08:25Z"}, "message": "Merge #11382\n\n11382: fix: Fix `cfg_attr` invalidating derive identifier IDE functionalities r=Veykril a=Veykril\n\nProper fix for https://github.com/rust-analyzer/rust-analyzer/issues/11298\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f9f387ca6d71551eecda7ca359be7322456f249b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f387ca6d71551eecda7ca359be7322456f249b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh9wxZCRBK7hj4Ov3rIwAA9kEIAB2vpJoNDHEnHCKyJVFxZz7j\nmLduVBXS8IGCxgCR/Ku6Br3lKmHszAd1s2zW0iqFcp2maedsq9GEJ6EgCFq8D2vg\nNzxxBDunMGHqewIouGou/tmkHpSW7ac1I1q3dme2aprLCyGBxTDkORzGjHZPPCKl\nJybrQLA8AE4NsGstutHcjxdVtkDXAGK5Y5tw4gmYwWCkUdP28NTDJNZZ/gqWjWMx\nIn1eYIXT27MlKUklWrTshUpQzoWWga4fbA9m1wKF7wrP/VMoN/hpYwrtlNSSGofg\nuav8ZqGQArFa37Jg0xb0jW4UJRU+XdeaXtBmbruspBbs1i1IMbQWIQeMhBpi2Qw=\n=IE1F\n-----END PGP SIGNATURE-----\n", "payload": "tree f9f387ca6d71551eecda7ca359be7322456f249b\nparent c08df0f1f5e188e2e1e8f1715ff3a6d583cfb9f3\nparent ddf7b70a0f8f7fc1e49d2bf0365752be3b4aab8b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1643580505 +0000\ncommitter GitHub <noreply@github.com> 1643580505 +0000\n\nMerge #11382\n\n11382: fix: Fix `cfg_attr` invalidating derive identifier IDE functionalities r=Veykril a=Veykril\n\nProper fix for https://github.com/rust-analyzer/rust-analyzer/issues/11298\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "html_url": "https://github.com/rust-lang/rust/commit/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c08df0f1f5e188e2e1e8f1715ff3a6d583cfb9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c08df0f1f5e188e2e1e8f1715ff3a6d583cfb9f3", "html_url": "https://github.com/rust-lang/rust/commit/c08df0f1f5e188e2e1e8f1715ff3a6d583cfb9f3"}, {"sha": "ddf7b70a0f8f7fc1e49d2bf0365752be3b4aab8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf7b70a0f8f7fc1e49d2bf0365752be3b4aab8b", "html_url": "https://github.com/rust-lang/rust/commit/ddf7b70a0f8f7fc1e49d2bf0365752be3b4aab8b"}], "stats": {"total": 160, "additions": 75, "deletions": 85}, "files": [{"sha": "fe518c8642924c3df8c33d422f88cafa06d2572d", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -664,7 +664,7 @@ fn emit_def_diagnostic(db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>, diag:\n                     let attr = node\n                         .doc_comments_and_attrs()\n                         .nth((*invoc_attr_index) as usize)\n-                        .and_then(Either::right)\n+                        .and_then(Either::left)\n                         .unwrap_or_else(|| panic!(\"cannot find attribute #{}\", invoc_attr_index));\n                     (\n                         ast_id.with_value(SyntaxNodePtr::from(AstPtr::new(&attr))),"}, {"sha": "eefc12570d7590243460b2f59c098267996cc974", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -364,9 +364,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_derive_ident(derive, ident)\n     }\n \n-    // FIXME: use this instead?\n-    // pub fn resolve_name_ref(&self, name_ref: &ast::NameRef) -> Option<???>;\n-\n     pub fn record_literal_missing_fields(&self, literal: &ast::RecordExpr) -> Vec<(Field, Type)> {\n         self.imp.record_literal_missing_fields(literal)\n     }\n@@ -931,7 +928,6 @@ impl<'db> SemanticsImpl<'db> {\n                 file.with_value(derive.clone()),\n             )?;\n             let attrs = adt_def.attrs(self.db);\n-            // FIXME: https://github.com/rust-analyzer/rust-analyzer/issues/11298\n             let mut derive_paths = attrs.get(attr_id)?.parse_path_comma_token_tree()?;\n \n             let derive_idx = tt"}, {"sha": "0a8fb2e47a8fee80bf74d842dc5ce974051dc94d", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 37, "deletions": 55, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -73,8 +73,8 @@ impl ops::Deref for RawAttrs {\n     }\n }\n impl Attrs {\n-    pub fn get(&self, AttrId { ast_index, .. }: AttrId) -> Option<&Attr> {\n-        (**self).get(ast_index as usize)\n+    pub fn get(&self, id: AttrId) -> Option<&Attr> {\n+        (**self).iter().find(|attr| attr.id == id)\n     }\n }\n \n@@ -89,14 +89,6 @@ impl ops::Deref for Attrs {\n     }\n }\n \n-impl ops::Index<AttrId> for Attrs {\n-    type Output = Attr;\n-\n-    fn index(&self, AttrId { ast_index, .. }: AttrId) -> &Self::Output {\n-        &(**self)[ast_index as usize]\n-    }\n-}\n-\n impl ops::Deref for AttrsWithOwner {\n     type Target = Attrs;\n \n@@ -110,7 +102,7 @@ impl RawAttrs {\n \n     pub(crate) fn new(db: &dyn DefDatabase, owner: &dyn ast::HasAttrs, hygiene: &Hygiene) -> Self {\n         let entries = collect_attrs(owner)\n-            .flat_map(|(id, attr)| match attr {\n+            .filter_map(|(id, attr)| match attr {\n                 Either::Left(attr) => {\n                     attr.meta().and_then(|meta| Attr::from_src(db, meta, hygiene, id))\n                 }\n@@ -525,38 +517,36 @@ impl AttrsWithOwner {\n \n fn inner_attributes(\n     syntax: &SyntaxNode,\n-) -> Option<(impl Iterator<Item = ast::Attr>, impl Iterator<Item = ast::Comment>)> {\n-    let (attrs, docs) = match_ast! {\n+) -> Option<impl Iterator<Item = Either<ast::Attr, ast::Comment>>> {\n+    let node = match_ast! {\n         match syntax {\n-            ast::SourceFile(it) => (it.attrs(), ast::DocCommentIter::from_syntax_node(it.syntax())),\n-            ast::ExternBlock(it) => {\n-                let extern_item_list = it.extern_item_list()?;\n-                (extern_item_list.attrs(), ast::DocCommentIter::from_syntax_node(extern_item_list.syntax()))\n-            },\n-            ast::Fn(it) => {\n-                let body = it.body()?;\n-                let stmt_list = body.stmt_list()?;\n-                (stmt_list.attrs(), ast::DocCommentIter::from_syntax_node(body.syntax()))\n-            },\n-            ast::Impl(it) => {\n-                let assoc_item_list = it.assoc_item_list()?;\n-                (assoc_item_list.attrs(), ast::DocCommentIter::from_syntax_node(assoc_item_list.syntax()))\n-            },\n-            ast::Module(it) => {\n-                let item_list = it.item_list()?;\n-                (item_list.attrs(), ast::DocCommentIter::from_syntax_node(item_list.syntax()))\n+            ast::SourceFile(_) => syntax.clone(),\n+            ast::ExternBlock(it) => it.extern_item_list()?.syntax().clone(),\n+            ast::Fn(it) => it.body()?.stmt_list()?.syntax().clone(),\n+            ast::Impl(it) => it.assoc_item_list()?.syntax().clone(),\n+            ast::Module(it) => it.item_list()?.syntax().clone(),\n+            ast::BlockExpr(it) => {\n+                use syntax::SyntaxKind::{BLOCK_EXPR , EXPR_STMT};\n+                // Block expressions accept outer and inner attributes, but only when they are the outer\n+                // expression of an expression statement or the final expression of another block expression.\n+                let may_carry_attributes = matches!(\n+                    it.syntax().parent().map(|it| it.kind()),\n+                     Some(BLOCK_EXPR | EXPR_STMT)\n+                );\n+                if !may_carry_attributes {\n+                    return None\n+                }\n+                syntax.clone()\n             },\n-            // FIXME: BlockExpr's only accept inner attributes in specific cases\n-            // Excerpt from the reference:\n-            // Block expressions accept outer and inner attributes, but only when they are the outer\n-            // expression of an expression statement or the final expression of another block expression.\n-            ast::BlockExpr(_it) => return None,\n             _ => return None,\n         }\n     };\n-    let attrs = attrs.filter(|attr| attr.kind().is_inner());\n-    let docs = docs.filter(|doc| doc.is_inner());\n-    Some((attrs, docs))\n+\n+    let attrs = ast::AttrDocCommentIter::from_syntax_node(&node).filter(|el| match el {\n+        Either::Left(attr) => attr.kind().is_inner(),\n+        Either::Right(comment) => comment.is_inner(),\n+    });\n+    Some(attrs)\n }\n \n #[derive(Debug)]\n@@ -833,24 +823,16 @@ fn attrs_from_item_tree<N: ItemTreeNode>(id: ItemTreeId<N>, db: &dyn DefDatabase\n fn collect_attrs(\n     owner: &dyn ast::HasAttrs,\n ) -> impl Iterator<Item = (AttrId, Either<ast::Attr, ast::Comment>)> {\n-    let (inner_attrs, inner_docs) = inner_attributes(owner.syntax())\n-        .map_or((None, None), |(attrs, docs)| (Some(attrs), Some(docs)));\n-\n-    let outer_attrs = owner.attrs().filter(|attr| attr.kind().is_outer());\n-    let attrs = outer_attrs\n-        .chain(inner_attrs.into_iter().flatten())\n-        .map(|attr| (attr.syntax().text_range().start(), Either::Left(attr)));\n-\n-    let outer_docs =\n-        ast::DocCommentIter::from_syntax_node(owner.syntax()).filter(ast::Comment::is_outer);\n-    let docs = outer_docs\n-        .chain(inner_docs.into_iter().flatten())\n-        .map(|docs_text| (docs_text.syntax().text_range().start(), Either::Right(docs_text)));\n-    // sort here by syntax node offset because the source can have doc attributes and doc strings be interleaved\n-    docs.chain(attrs)\n-        .sorted_by_key(|&(offset, _)| offset)\n+    let inner_attrs = inner_attributes(owner.syntax()).into_iter().flatten();\n+    let outer_attrs =\n+        ast::AttrDocCommentIter::from_syntax_node(owner.syntax()).filter(|el| match el {\n+            Either::Left(attr) => attr.kind().is_outer(),\n+            Either::Right(comment) => comment.is_outer(),\n+        });\n+    outer_attrs\n+        .chain(inner_attrs)\n         .enumerate()\n-        .map(|(id, (_, attr))| (AttrId { ast_index: id as u32 }, attr))\n+        .map(|(id, attr)| (AttrId { ast_index: id as u32 }, attr))\n }\n \n pub(crate) fn variants_attrs_source_map("}, {"sha": "5c32a31e443d5f3092f8758111a09764bfaabb0c", "filename": "crates/hir_def/src/child_by_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fchild_by_source.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -117,7 +117,7 @@ impl ChildBySource for ItemScope {\n             |(ast_id, calls)| {\n                 let adt = ast_id.to_node(db.upcast());\n                 calls.for_each(|(attr_id, calls)| {\n-                    if let Some(Either::Right(attr)) =\n+                    if let Some(Either::Left(attr)) =\n                         adt.doc_comments_and_attrs().nth(attr_id.ast_index as usize)\n                     {\n                         res[keys::DERIVE_MACRO_CALL].insert(attr, (attr_id, calls.into()));"}, {"sha": "b46f3fc95546cf76f48936bfaaa087d569bc8d0a", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -157,7 +157,7 @@ pub fn expand_speculative(\n             let attr = item\n                 .doc_comments_and_attrs()\n                 .nth(invoc_attr_index as usize)\n-                .and_then(Either::right)?;\n+                .and_then(Either::left)?;\n             match attr.token_tree() {\n                 Some(token_tree) => {\n                     let (mut tree, map) = syntax_node_to_token_tree(attr.token_tree()?.syntax());\n@@ -323,7 +323,7 @@ fn censor_for_macro_input(loc: &MacroCallLoc, node: &SyntaxNode) -> FxHashSet<Sy\n                 ast::Item::cast(node.clone())?\n                     .doc_comments_and_attrs()\n                     .nth(invoc_attr_index as usize)\n-                    .and_then(Either::right)\n+                    .and_then(Either::left)\n                     .map(|attr| attr.syntax().clone())\n                     .into_iter()\n                     .collect()"}, {"sha": "d2b719bf570b9697eb79c3206d9b9e0116256986", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -191,7 +191,7 @@ fn make_hygiene_info(\n                 .to_node(db)\n                 .doc_comments_and_attrs()\n                 .nth(invoc_attr_index as usize)\n-                .and_then(Either::right)?\n+                .and_then(Either::left)?\n                 .token_tree()?;\n             Some(InFile::new(ast_id.file_id, tt))\n         }"}, {"sha": "51899ca2f65b0ab612b3c32bdfec694dfe9afef4", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -205,7 +205,7 @@ impl HirFileId {\n                             .to_node(db)\n                             .doc_comments_and_attrs()\n                             .nth(invoc_attr_index as usize)\n-                            .and_then(Either::right)?\n+                            .and_then(Either::left)?\n                             .token_tree()?;\n                         Some(InFile::new(ast_id.file_id, tt))\n                     }\n@@ -382,7 +382,7 @@ impl MacroCallKind {\n                     .doc_comments_and_attrs()\n                     .nth(derive_attr_index as usize)\n                     .expect(\"missing derive\")\n-                    .expect_right(\"derive is a doc comment?\")\n+                    .expect_left(\"derive is a doc comment?\")\n                     .syntax()\n                     .text_range()\n             }\n@@ -391,7 +391,7 @@ impl MacroCallKind {\n                 .doc_comments_and_attrs()\n                 .nth(invoc_attr_index as usize)\n                 .expect(\"missing attribute\")\n-                .expect_right(\"attribute macro is a doc comment?\")\n+                .expect_left(\"attribute macro is a doc comment?\")\n                 .syntax()\n                 .text_range(),\n         };\n@@ -483,7 +483,7 @@ impl ExpansionInfo {\n                     let attr = item\n                         .doc_comments_and_attrs()\n                         .nth(*invoc_attr_index as usize)\n-                        .and_then(Either::right)?;\n+                        .and_then(Either::left)?;\n                     match attr.token_tree() {\n                         Some(token_tree)\n                             if token_tree.syntax().text_range().contains_range(token_range) =>"}, {"sha": "e599efc5e2d7972f36f3d72b33bdcd17792b068f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -1364,10 +1364,21 @@ impl Twait for Stwuct {\n     fn goto_def_derive_input() {\n         check(\n             r#\"\n+        //- minicore:derive\n+        #[rustc_builtin_macro]\n+        pub macro Copy {}\n+               // ^^^^\n+        #[derive(Copy$0)]\n+        struct Foo;\n+                    \"#,\n+        );\n+        check(\n+            r#\"\n //- minicore:derive\n #[rustc_builtin_macro]\n pub macro Copy {}\n        // ^^^^\n+#[cfg_attr(feature = \"false\", derive)]\n #[derive(Copy$0)]\n struct Foo;\n             \"#,"}, {"sha": "91b46cf8e9d8a5ae771b85a92719821c0fb0ceaa", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -27,8 +27,8 @@ pub use self::{\n     operators::{ArithOp, BinaryOp, CmpOp, LogicOp, Ordering, RangeOp, UnaryOp},\n     token_ext::{CommentKind, CommentPlacement, CommentShape, IsString, QuoteOffsets, Radix},\n     traits::{\n-        DocCommentIter, HasArgList, HasAttrs, HasDocComments, HasGenericParams, HasLoopBody,\n-        HasModuleItem, HasName, HasTypeBounds, HasVisibility,\n+        AttrDocCommentIter, DocCommentIter, HasArgList, HasAttrs, HasDocComments, HasGenericParams,\n+        HasLoopBody, HasModuleItem, HasName, HasTypeBounds, HasVisibility,\n     },\n };\n "}, {"sha": "7211c77e880b36c3ab3f96212aa857076f036f88", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -160,14 +160,9 @@ impl ast::Attr {\n     }\n \n     pub fn kind(&self) -> AttrKind {\n-        let first_token = self.syntax().first_token();\n-        let first_token_kind = first_token.as_ref().map(SyntaxToken::kind);\n-        let second_token_kind =\n-            first_token.and_then(|token| token.next_token()).as_ref().map(SyntaxToken::kind);\n-\n-        match (first_token_kind, second_token_kind) {\n-            (Some(T![#]), Some(T![!])) => AttrKind::Inner,\n-            _ => AttrKind::Outer,\n+        match self.excl_token() {\n+            Some(_) => AttrKind::Inner,\n+            None => AttrKind::Outer,\n         }\n     }\n "}, {"sha": "aa2b7ed5c8b28e78bba8532613cbb0bb04d5a4e1", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=fd3942eb620e37a4e4bfdd587d8a2893ccf6fea0", "patch": "@@ -76,8 +76,8 @@ pub trait HasDocComments: HasAttrs {\n     fn doc_comments(&self) -> DocCommentIter {\n         DocCommentIter { iter: self.syntax().children_with_tokens() }\n     }\n-    fn doc_comments_and_attrs(&self) -> AttrCommentIter {\n-        AttrCommentIter { iter: self.syntax().children_with_tokens() }\n+    fn doc_comments_and_attrs(&self) -> AttrDocCommentIter {\n+        AttrDocCommentIter { iter: self.syntax().children_with_tokens() }\n     }\n }\n \n@@ -113,17 +113,23 @@ impl Iterator for DocCommentIter {\n     }\n }\n \n-pub struct AttrCommentIter {\n+pub struct AttrDocCommentIter {\n     iter: SyntaxElementChildren,\n }\n \n-impl Iterator for AttrCommentIter {\n-    type Item = Either<ast::Comment, ast::Attr>;\n+impl AttrDocCommentIter {\n+    pub fn from_syntax_node(syntax_node: &ast::SyntaxNode) -> AttrDocCommentIter {\n+        AttrDocCommentIter { iter: syntax_node.children_with_tokens() }\n+    }\n+}\n+\n+impl Iterator for AttrDocCommentIter {\n+    type Item = Either<ast::Attr, ast::Comment>;\n     fn next(&mut self) -> Option<Self::Item> {\n         self.iter.by_ref().find_map(|el| match el {\n-            SyntaxElement::Node(node) => ast::Attr::cast(node).map(Either::Right),\n+            SyntaxElement::Node(node) => ast::Attr::cast(node).map(Either::Left),\n             SyntaxElement::Token(tok) => {\n-                ast::Comment::cast(tok).filter(ast::Comment::is_doc).map(Either::Left)\n+                ast::Comment::cast(tok).filter(ast::Comment::is_doc).map(Either::Right)\n             }\n         })\n     }"}]}