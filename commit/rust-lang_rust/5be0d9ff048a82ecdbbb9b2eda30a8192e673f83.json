{"sha": "5be0d9ff048a82ecdbbb9b2eda30a8192e673f83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZTBkOWZmMDQ4YTgyZWNkYmJiOWIyZWRhMzBhODE5MmU2NzNmODM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-28T13:33:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-28T13:33:01Z"}, "message": "Rollup merge of #40033 - GuillaumeGomez:condvar-docs, r=frewsxcv\n\nAdd missing urls and examples for Condvar docs\n\nr? @frewsxcv", "tree": {"sha": "93bbb86e33afa4ce98cf1e2bcad20e282127d486", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bbb86e33afa4ce98cf1e2bcad20e282127d486"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be0d9ff048a82ecdbbb9b2eda30a8192e673f83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be0d9ff048a82ecdbbb9b2eda30a8192e673f83", "html_url": "https://github.com/rust-lang/rust/commit/5be0d9ff048a82ecdbbb9b2eda30a8192e673f83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be0d9ff048a82ecdbbb9b2eda30a8192e673f83/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "227285fd86a6d1849cad0ec39e0d0d1e6790ba5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/227285fd86a6d1849cad0ec39e0d0d1e6790ba5c", "html_url": "https://github.com/rust-lang/rust/commit/227285fd86a6d1849cad0ec39e0d0d1e6790ba5c"}, {"sha": "d3b8f56ae75a3dad07da0d685ffb16b51c486d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b8f56ae75a3dad07da0d685ffb16b51c486d68", "html_url": "https://github.com/rust-lang/rust/commit/d3b8f56ae75a3dad07da0d685ffb16b51c486d68"}], "stats": {"total": 246, "additions": 230, "deletions": 16}, "files": [{"sha": "68c7e88f67fc56218f5f8fd557fc2a088ce1fe46", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 230, "deletions": 16, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/5be0d9ff048a82ecdbbb9b2eda30a8192e673f83/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be0d9ff048a82ecdbbb9b2eda30a8192e673f83/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=5be0d9ff048a82ecdbbb9b2eda30a8192e673f83", "patch": "@@ -18,12 +18,57 @@ use time::Duration;\n \n /// A type indicating whether a timed wait on a condition variable returned\n /// due to a time out or not.\n+///\n+/// It is returned by the [`wait_timeout`] method.\n+///\n+/// [`wait_timeout`]: struct.Condvar.html#method.wait_timeout\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n pub struct WaitTimeoutResult(bool);\n \n impl WaitTimeoutResult {\n     /// Returns whether the wait was known to have timed out.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This example spawns a thread which will update the boolean value and\n+    /// then wait 100 milliseconds before notifying the condvar.\n+    ///\n+    /// The main thread will wait with a timeout on the condvar and then leave\n+    /// once the boolean has been updated and notified.\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    /// use std::time::Duration;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     // We update the boolean value.\n+    ///     *started = true;\n+    ///     // Let's wait 20 milliseconds before notifying the condvar.\n+    ///     thread::sleep(Duration::from_millis(20));\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // Wait for the thread to start up.\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let mut started = lock.lock().unwrap();\n+    /// loop {\n+    ///     // Let's put a timeout on the condvar's wait.\n+    ///     let result = cvar.wait_timeout(started, Duration::from_millis(10)).unwrap();\n+    ///     // 10 milliseconds have passed, or maybe the value changed!\n+    ///     started = result.0;\n+    ///     if *started == true {\n+    ///         // We received the notification and the value has been updated, we can leave.\n+    ///         break\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n     pub fn timed_out(&self) -> bool {\n         self.0\n@@ -55,15 +100,16 @@ impl WaitTimeoutResult {\n /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n /// let pair2 = pair.clone();\n ///\n-/// // Inside of our lock, spawn a new thread, and then wait for it to start\n+/// // Inside of our lock, spawn a new thread, and then wait for it to start.\n /// thread::spawn(move|| {\n ///     let &(ref lock, ref cvar) = &*pair2;\n ///     let mut started = lock.lock().unwrap();\n ///     *started = true;\n+///     // We notify the condvar that the value has changed.\n ///     cvar.notify_one();\n /// });\n ///\n-/// // wait for the thread to start up\n+/// // Wait for the thread to start up.\n /// let &(ref lock, ref cvar) = &*pair;\n /// let mut started = lock.lock().unwrap();\n /// while !*started {\n@@ -79,6 +125,14 @@ pub struct Condvar {\n impl Condvar {\n     /// Creates a new condition variable which is ready to be waited on and\n     /// notified.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::Condvar;\n+    ///\n+    /// let condvar = Condvar::new();\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new() -> Condvar {\n         let mut c = Condvar {\n@@ -95,10 +149,10 @@ impl Condvar {\n     /// notification.\n     ///\n     /// This function will atomically unlock the mutex specified (represented by\n-    /// `mutex_guard`) and block the current thread. This means that any calls\n-    /// to `notify_*()` which happen logically after the mutex is unlocked are\n-    /// candidates to wake this thread up. When this function call returns, the\n-    /// lock specified will have been re-acquired.\n+    /// `guard`) and block the current thread. This means that any calls\n+    /// to [`notify_one()`] or [`notify_all()`] which happen logically after the\n+    /// mutex is unlocked are candidates to wake this thread up. When this\n+    /// function call returns, the lock specified will have been re-acquired.\n     ///\n     /// Note that this function is susceptible to spurious wakeups. Condition\n     /// variables normally have a boolean predicate associated with them, and\n@@ -109,14 +163,46 @@ impl Condvar {\n     ///\n     /// This function will return an error if the mutex being waited on is\n     /// poisoned when this thread re-acquires the lock. For more information,\n-    /// see information about poisoning on the Mutex type.\n+    /// see information about [poisoning] on the [`Mutex`] type.\n     ///\n     /// # Panics\n     ///\n-    /// This function will `panic!()` if it is used with more than one mutex\n+    /// This function will [`panic!()`] if it is used with more than one mutex\n     /// over time. Each condition variable is dynamically bound to exactly one\n     /// mutex to ensure defined behavior across platforms. If this functionality\n     /// is not desired, then unsafe primitives in `sys` are provided.\n+    ///\n+    /// [`notify_one()`]: #method.notify_one\n+    /// [`notify_all()`]: #method.notify_all\n+    /// [poisoning]: ../sync/struct.Mutex.html#poisoning\n+    /// [`Mutex`]: ../sync/struct.Mutex.html\n+    /// [`panic!()`]: ../../std/macro.panic.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // Wait for the thread to start up.\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let mut started = lock.lock().unwrap();\n+    /// // As long as the value inside the `Mutex` is false, we wait.\n+    /// while !*started {\n+    ///     started = cvar.wait(started).unwrap();\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn wait<'a, T>(&self, guard: MutexGuard<'a, T>)\n                        -> LockResult<MutexGuard<'a, T>> {\n@@ -136,7 +222,7 @@ impl Condvar {\n     /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n-    /// The semantics of this function are equivalent to `wait()`\n+    /// The semantics of this function are equivalent to [`wait`]\n     /// except that the thread will be blocked for roughly no longer\n     /// than `ms` milliseconds. This method should not be used for\n     /// precise timing due to anomalies such as preemption or platform\n@@ -150,8 +236,42 @@ impl Condvar {\n     /// The returned boolean is `false` only if the timeout is known\n     /// to have elapsed.\n     ///\n-    /// Like `wait`, the lock specified will be re-acquired when this function\n+    /// Like [`wait`], the lock specified will be re-acquired when this function\n     /// returns, regardless of whether the timeout elapsed or not.\n+    ///\n+    /// [`wait`]: #method.wait\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // Wait for the thread to start up.\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let mut started = lock.lock().unwrap();\n+    /// // As long as the value inside the `Mutex` is false, we wait.\n+    /// loop {\n+    ///     let result = cvar.wait_timeout_ms(started, 10).unwrap();\n+    ///     // 10 milliseconds have passed, or maybe the value changed!\n+    ///     started = result.0;\n+    ///     if *started == true {\n+    ///         // We received the notification and the value has been updated, we can leave.\n+    ///         break\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.6.0\", reason = \"replaced by `std::sync::Condvar::wait_timeout`\")]\n     pub fn wait_timeout_ms<'a, T>(&self, guard: MutexGuard<'a, T>, ms: u32)\n@@ -165,7 +285,7 @@ impl Condvar {\n     /// Waits on this condition variable for a notification, timing out after a\n     /// specified duration.\n     ///\n-    /// The semantics of this function are equivalent to `wait()` except that\n+    /// The semantics of this function are equivalent to [`wait`] except that\n     /// the thread will be blocked for roughly no longer than `dur`. This\n     /// method should not be used for precise timing due to anomalies such as\n     /// preemption or platform differences that may not cause the maximum\n@@ -175,11 +295,47 @@ impl Condvar {\n     /// measured with a monotonic clock, and not affected by the changes made to\n     /// the system time.\n     ///\n-    /// The returned `WaitTimeoutResult` value indicates if the timeout is\n+    /// The returned [`WaitTimeoutResult`] value indicates if the timeout is\n     /// known to have elapsed.\n     ///\n-    /// Like `wait`, the lock specified will be re-acquired when this function\n+    /// Like [`wait`], the lock specified will be re-acquired when this function\n     /// returns, regardless of whether the timeout elapsed or not.\n+    ///\n+    /// [`wait`]: #method.wait\n+    /// [`WaitTimeoutResult`]: struct.WaitTimeoutResult.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    /// use std::time::Duration;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // wait for the thread to start up\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let mut started = lock.lock().unwrap();\n+    /// // as long as the value inside the `Mutex` is false, we wait\n+    /// loop {\n+    ///     let result = cvar.wait_timeout(started, Duration::from_millis(10)).unwrap();\n+    ///     // 10 milliseconds have passed, or maybe the value changed!\n+    ///     started = result.0;\n+    ///     if *started == true {\n+    ///         // We received the notification and the value has been updated, we can leave.\n+    ///         break\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n     pub fn wait_timeout<'a, T>(&self, guard: MutexGuard<'a, T>,\n                                dur: Duration)\n@@ -200,10 +356,40 @@ impl Condvar {\n     /// Wakes up one blocked thread on this condvar.\n     ///\n     /// If there is a blocked thread on this condition variable, then it will\n-    /// be woken up from its call to `wait` or `wait_timeout`. Calls to\n+    /// be woken up from its call to [`wait`] or [`wait_timeout`]. Calls to\n     /// `notify_one` are not buffered in any way.\n     ///\n-    /// To wake up all threads, see `notify_all()`.\n+    /// To wake up all threads, see [`notify_all()`].\n+    ///\n+    /// [`wait`]: #method.wait\n+    /// [`wait_timeout`]: #method.wait_timeout\n+    /// [`notify_all()`]: #method.notify_all\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_one();\n+    /// });\n+    ///\n+    /// // Wait for the thread to start up.\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let mut started = lock.lock().unwrap();\n+    /// // As long as the value inside the `Mutex` is false, we wait.\n+    /// while !*started {\n+    ///     started = cvar.wait(started).unwrap();\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn notify_one(&self) {\n         unsafe { self.inner.notify_one() }\n@@ -215,7 +401,35 @@ impl Condvar {\n     /// variable are awoken. Calls to `notify_all()` are not buffered in any\n     /// way.\n     ///\n-    /// To wake up only one thread, see `notify_one()`.\n+    /// To wake up only one thread, see [`notify_one()`].\n+    ///\n+    /// [`notify_one()`]: #method.notify_one\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::{Arc, Mutex, Condvar};\n+    /// use std::thread;\n+    ///\n+    /// let pair = Arc::new((Mutex::new(false), Condvar::new()));\n+    /// let pair2 = pair.clone();\n+    ///\n+    /// thread::spawn(move|| {\n+    ///     let &(ref lock, ref cvar) = &*pair2;\n+    ///     let mut started = lock.lock().unwrap();\n+    ///     *started = true;\n+    ///     // We notify the condvar that the value has changed.\n+    ///     cvar.notify_all();\n+    /// });\n+    ///\n+    /// // Wait for the thread to start up.\n+    /// let &(ref lock, ref cvar) = &*pair;\n+    /// let mut started = lock.lock().unwrap();\n+    /// // As long as the value inside the `Mutex` is false, we wait.\n+    /// while !*started {\n+    ///     started = cvar.wait(started).unwrap();\n+    /// }\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn notify_all(&self) {\n         unsafe { self.inner.notify_all() }"}]}