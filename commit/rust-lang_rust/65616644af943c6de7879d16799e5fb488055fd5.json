{"sha": "65616644af943c6de7879d16799e5fb488055fd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NjE2NjQ0YWY5NDNjNmRlNzg3OWQxNjc5OWU1ZmI0ODgwNTVmZDU=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-04T19:58:52Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-16T00:50:24Z"}, "message": "Path types to associated types with form `T::A`\n\nCloses #18433", "tree": {"sha": "b65964b963cfd4ea5f771d72ed6a8997b5d41685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b65964b963cfd4ea5f771d72ed6a8997b5d41685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65616644af943c6de7879d16799e5fb488055fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65616644af943c6de7879d16799e5fb488055fd5", "html_url": "https://github.com/rust-lang/rust/commit/65616644af943c6de7879d16799e5fb488055fd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65616644af943c6de7879d16799e5fb488055fd5/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0669a432a2e09ad08886cb2138dbe9f5d681fb7f", "html_url": "https://github.com/rust-lang/rust/commit/0669a432a2e09ad08886cb2138dbe9f5d681fb7f"}], "stats": {"total": 269, "additions": 244, "deletions": 25}, "files": [{"sha": "dafe372c9a936967023da7701942164752c4ab24", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -443,6 +443,10 @@ impl tr for def::Def {\n           def::DefTrait(did) => def::DefTrait(did.tr(dcx)),\n           def::DefTy(did, is_enum) => def::DefTy(did.tr(dcx), is_enum),\n           def::DefAssociatedTy(did) => def::DefAssociatedTy(did.tr(dcx)),\n+          def::DefAssociatedPath(def::TyParamProvenance::FromSelf(did), ident) =>\n+              def::DefAssociatedPath(def::TyParamProvenance::FromSelf(did.tr(dcx)), ident),\n+          def::DefAssociatedPath(def::TyParamProvenance::FromParam(did), ident) =>\n+              def::DefAssociatedPath(def::TyParamProvenance::FromParam(did.tr(dcx)), ident),\n           def::DefPrimTy(p) => def::DefPrimTy(p),\n           def::DefTyParam(s, did, v) => def::DefTyParam(s, did.tr(dcx), v),\n           def::DefUse(did) => def::DefUse(did.tr(dcx)),"}, {"sha": "8573dc747bb07b87d17dc8b64c56e05c75ed9667", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -28,6 +28,10 @@ pub enum Def {\n     DefVariant(ast::DefId /* enum */, ast::DefId /* variant */, bool /* is_structure */),\n     DefTy(ast::DefId, bool /* is_enum */),\n     DefAssociatedTy(ast::DefId),\n+    // A partially resolved path to an associated type `T::U` where `T` is a concrete\n+    // type (indicated by the DefId) which implements a trait which has an associated\n+    // type `U` (indicated by the Ident).\n+    DefAssociatedPath(TyParamProvenance, ast::Ident),\n     DefTrait(ast::DefId),\n     DefPrimTy(ast::PrimTy),\n     DefTyParam(ParamSpace, ast::DefId, uint),\n@@ -60,6 +64,12 @@ pub enum MethodProvenance {\n     FromImpl(ast::DefId),\n }\n \n+#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+pub enum TyParamProvenance {\n+    FromSelf(ast::DefId),\n+    FromParam(ast::DefId),\n+}\n+\n impl MethodProvenance {\n     pub fn map<F>(self, f: F) -> MethodProvenance where\n         F: FnOnce(ast::DefId) -> ast::DefId,\n@@ -73,14 +83,27 @@ impl MethodProvenance {\n \n impl Copy for MethodProvenance {}\n \n+impl TyParamProvenance {\n+    pub fn def_id(&self) -> ast::DefId {\n+        match *self {\n+            TyParamProvenance::FromSelf(ref did) => did.clone(),\n+            TyParamProvenance::FromParam(ref did) => did.clone(),\n+        }\n+    }\n+}\n+\n+impl Copy for TyParamProvenance {}\n+\n impl Def {\n     pub fn def_id(&self) -> ast::DefId {\n         match *self {\n             DefFn(id, _) | DefStaticMethod(id, _) | DefMod(id) |\n             DefForeignMod(id) | DefStatic(id, _) |\n             DefVariant(_, id, _) | DefTy(id, _) | DefAssociatedTy(id) |\n             DefTyParam(_, id, _) | DefUse(id) | DefStruct(id) | DefTrait(id) |\n-            DefMethod(id, _, _) | DefConst(id) => {\n+            DefMethod(id, _, _) | DefConst(id) |\n+            DefAssociatedPath(TyParamProvenance::FromSelf(id), _) |\n+            DefAssociatedPath(TyParamProvenance::FromParam(id), _) => {\n                 id\n             }\n             DefLocal(id) |"}, {"sha": "86b912a579f124333c3c94ddbef34d34dc2ef030", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -595,7 +595,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n           def::DefTrait(_) | def::DefTy(..) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) | def::DefMethod(..) |\n-          def::DefAssociatedTy(..) => {\n+          def::DefAssociatedTy(..) | def::DefAssociatedPath(..)=> {\n               Ok(Rc::new(cmt_ {\n                   id:id,\n                   span:span,"}, {"sha": "734453db693ec1fc950849ca41211ccf43f0fb67", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -2027,7 +2027,7 @@ impl<'a> Resolver<'a> {\n                                                   is_public,\n                                                   DUMMY_SP)\n           }\n-          DefTy(..) | DefAssociatedTy(..) => {\n+          DefTy(..) | DefAssociatedTy(..) | DefAssociatedPath(..) => {\n               debug!(\"(building reduced graph for external \\\n                       crate) building type {}\", final_ident);\n \n@@ -3361,8 +3361,7 @@ impl<'a> Resolver<'a> {\n         let module_path_len = module_path.len();\n         assert!(module_path_len > 0);\n \n-        debug!(\"(resolving module path for import) processing `{}` rooted at \\\n-               `{}`\",\n+        debug!(\"(resolving module path for import) processing `{}` rooted at `{}`\",\n                self.names_to_string(module_path),\n                self.module_to_string(&*module_));\n \n@@ -4960,14 +4959,10 @@ impl<'a> Resolver<'a> {\n                             result_def =\n                                 Some((DefPrimTy(primitive_type), LastMod(AllPublic)));\n \n-                            if path.segments\n-                                   .iter()\n-                                   .any(|s| s.parameters.has_lifetimes()) {\n+                            if path.segments[0].parameters.has_lifetimes() {\n                                 span_err!(self.session, path.span, E0157,\n                                     \"lifetime parameters are not allowed on this type\");\n-                            } else if path.segments\n-                                          .iter()\n-                                          .any(|s| !s.parameters.is_empty()) {\n+                            } else if !path.segments[0].parameters.is_empty() {\n                                 span_err!(self.session, path.span, E0153,\n                                     \"type parameters are not allowed on this type\");\n                             }\n@@ -5309,6 +5304,34 @@ impl<'a> Resolver<'a> {\n             self.resolve_type(&*binding.ty);\n         }\n \n+        // A special case for sugared associated type paths `T::A` where `T` is\n+        // a type parameter and `A` is an associated type on some bound of `T`.\n+        if namespace == TypeNS && path.segments.len() == 2 {\n+            match self.resolve_identifier(path.segments[0].identifier,\n+                                          TypeNS,\n+                                          true,\n+                                          path.span) {\n+                Some((def, last_private)) => {\n+                    match def {\n+                        DefTyParam(_, did, _) => {\n+                            let def = DefAssociatedPath(TyParamProvenance::FromParam(did),\n+                                                        path.segments.last()\n+                                                            .unwrap().identifier);\n+                            return Some((def, last_private));\n+                        }\n+                        DefSelfTy(nid) => {\n+                            let def = DefAssociatedPath(TyParamProvenance::FromSelf(local_def(nid)),\n+                                                        path.segments.last()\n+                                                            .unwrap().identifier);\n+                            return Some((def, last_private));\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         if path.global {\n             return self.resolve_crate_relative_path(path, namespace);\n         }\n@@ -5561,8 +5584,7 @@ impl<'a> Resolver<'a> {\n         let search_result = match namespace {\n             ValueNS => {\n                 let renamed = mtwt::resolve(ident);\n-                self.search_ribs(self.value_ribs.as_slice(),\n-                                 renamed, span)\n+                self.search_ribs(self.value_ribs.as_slice(), renamed, span)\n             }\n             TypeNS => {\n                 let name = ident.name;"}, {"sha": "1a4f06663ef3b694089e7ea544022df20ea6056b", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -221,6 +221,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n             def::DefStruct(_) => Some(recorder::StructRef),\n             def::DefTy(..) |\n             def::DefAssociatedTy(..) |\n+            def::DefAssociatedPath(..) |\n             def::DefTrait(_) => Some(recorder::TypeRef),\n             def::DefStatic(_, _) |\n             def::DefConst(_) |"}, {"sha": "ff2f686fff8769bc70fd3303e99eda68e3b51183", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -205,7 +205,7 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n             def::DefTy(..) | def::DefPrimTy(..) | def::DefAssociatedTy(..) |\n             def::DefUse(..) | def::DefTyParamBinder(..) |\n             def::DefRegion(..) | def::DefLabel(..) | def::DefTyParam(..) |\n-            def::DefSelfTy(..) => {\n+            def::DefSelfTy(..) | def::DefAssociatedPath(..) => {\n                 bcx.tcx().sess.span_bug(\n                     ref_expr.span,\n                     format!(\"cannot translate def {} \\"}, {"sha": "02fdd59a1c936897887bcd3efcb4e5e100c2c470", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 68, "deletions": 9, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -73,6 +73,9 @@ pub trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n     fn get_item_ty(&self, id: ast::DefId) -> ty::Polytype<'tcx>;\n     fn get_trait_def(&self, id: ast::DefId) -> Rc<ty::TraitDef<'tcx>>;\n+    fn get_free_substs(&self) -> Option<&Substs<'tcx>> {\n+        None\n+    }\n \n     /// What type should we use when a type is omitted?\n     fn ty_infer(&self, span: Span) -> Ty<'tcx>;\n@@ -517,9 +520,9 @@ fn convert_parenthesized_parameters<'tcx,AC>(this: &AC,\n }\n \n \n-/// Instantiates the path for the given trait reference, assuming that it's bound to a valid trait\n-/// type. Returns the def_id for the defining trait. Fails if the type is a type other than a trait\n-/// type.\n+/// Instantiates the path for the given trait reference, assuming that it's\n+/// bound to a valid trait type. Returns the def_id for the defining trait.\n+/// Fails if the type is a type other than a trait type.\n pub fn instantiate_trait_ref<'tcx,AC,RS>(this: &AC,\n                                          rscope: &RS,\n                                          ast_trait_ref: &ast::TraitRef,\n@@ -846,18 +849,29 @@ fn qpath_to_ty<'tcx,AC,RS>(this: &AC,\n \n     debug!(\"qpath_to_ty: trait_ref={}\", trait_ref.repr(this.tcx()));\n \n+    if let Some(ty) = find_assoc_ty(this, &*trait_ref, qpath.item_name) {\n+        return ty;\n+    }\n+\n+    this.tcx().sess.span_bug(ast_ty.span,\n+                             \"this associated type didn't get added \\\n+                              as a parameter for some reason\")\n+}\n+\n+fn find_assoc_ty<'tcx, AC>(this: &AC,\n+                           trait_ref: &ty::TraitRef<'tcx>,\n+                           type_name: ast::Ident)\n+                           -> Option<Ty<'tcx>>\n+where AC: AstConv<'tcx> {\n     let trait_def = this.get_trait_def(trait_ref.def_id);\n \n     for ty_param_def in trait_def.generics.types.get_slice(AssocSpace).iter() {\n-        if ty_param_def.name == qpath.item_name.name {\n-            debug!(\"qpath_to_ty: corresponding ty_param_def={}\", ty_param_def);\n-            return trait_ref.substs.type_for_def(ty_param_def);\n+        if ty_param_def.name == type_name.name {\n+            return Some(trait_ref.substs.type_for_def(ty_param_def));\n         }\n     }\n \n-    this.tcx().sess.span_bug(ast_ty.span,\n-                             \"this associated type didn't get added \\\n-                              as a parameter for some reason\")\n+    None\n }\n \n // Parses the programmer's textual representation of a type into our\n@@ -1011,6 +1025,51 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                                                   .get()).as_slice());\n                         ty::mk_err()\n                     }\n+                    def::DefAssociatedPath(typ, assoc_ident) => {\n+                        // FIXME(#19541): in both branches we should consider\n+                        // associated types in super-traits.\n+                        let (assoc_tys, tp_name): (Vec<_>, _) = match typ {\n+                            def::TyParamProvenance::FromParam(did) => {\n+                                let ty_param_defs = tcx.ty_param_defs.borrow();\n+                                let tp_def = &(*ty_param_defs)[did.node];\n+                                let assoc_tys = tp_def.bounds.trait_bounds.iter()\n+                                    .filter_map(|b| find_assoc_ty(this, &**b, assoc_ident))\n+                                    .collect();\n+                                (assoc_tys, token::get_name(tp_def.name).to_string())\n+                            }\n+                            def::TyParamProvenance::FromSelf(did) => {\n+                                let assoc_tys = find_assoc_ty(this,\n+                                                              &*this.get_trait_def(did).trait_ref,\n+                                                              assoc_ident)\n+                                    .into_iter().collect();\n+                                (assoc_tys, \"Self\".to_string())\n+                            }\n+                        };\n+\n+                        if assoc_tys.len() == 0 {\n+                            tcx.sess.span_err(ast_ty.span,\n+                                              format!(\"associated type `{}` not \\\n+                                                       found for type parameter `{}`\",\n+                                                      token::get_ident(assoc_ident),\n+                                                      tp_name).as_slice());\n+                            return ty::mk_err()\n+                        }\n+\n+                        if assoc_tys.len() > 1 {\n+                            tcx.sess.span_err(ast_ty.span,\n+                                              format!(\"ambiguous associated type \\\n+                                                       `{}` in bounds of `{}`\",\n+                                                      token::get_ident(assoc_ident),\n+                                                      tp_name).as_slice());\n+                        }\n+\n+                        let mut result_ty = assoc_tys[0];\n+                        if let Some(substs) = this.get_free_substs() {\n+                            result_ty = result_ty.subst(tcx, substs);\n+                        }\n+\n+                        result_ty\n+                    }\n                     _ => {\n                         tcx.sess.span_fatal(ast_ty.span,\n                                             format!(\"found value name used \\"}, {"sha": "d4e29892c9fdb8615703a89640856aeca06301f0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -1535,6 +1535,10 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         ty::lookup_trait_def(self.tcx(), id)\n     }\n \n+    fn get_free_substs(&self) -> Option<&Substs<'tcx>> {\n+        Some(&self.inh.param_env.free_substs)\n+    }\n+\n     fn ty_infer(&self, _span: Span) -> Ty<'tcx> {\n         self.infcx().next_ty_var()\n     }\n@@ -4866,6 +4870,7 @@ pub fn polytype_for_def<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n       def::DefTrait(_) |\n       def::DefTy(..) |\n       def::DefAssociatedTy(..) |\n+      def::DefAssociatedPath(..) |\n       def::DefPrimTy(_) |\n       def::DefTyParam(..)=> {\n         fcx.ccx.tcx.sess.span_bug(sp, \"expected value, found type\");\n@@ -4974,6 +4979,7 @@ pub fn instantiate_path<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         def::DefTyParamBinder(..) |\n         def::DefTy(..) |\n         def::DefAssociatedTy(..) |\n+        def::DefAssociatedPath(..) |\n         def::DefTrait(..) |\n         def::DefPrimTy(..) |\n         def::DefTyParam(..) => {"}, {"sha": "e93d9db28cf4b18eb6e59168281a4e88cfe5f7df", "filename": "src/test/compile-fail/assoc-eq-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Fcompile-fail%2Fassoc-eq-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Fcompile-fail%2Fassoc-eq-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-eq-1.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -20,8 +20,6 @@ pub trait Foo {\n \n fn foo2<I: Foo>(x: I) {\n     let _: A = x.boo(); //~ERROR use of undeclared\n-    let _: I::A = x.boo(); //~ERROR failed to resolve\n-    //~^ERROR use of undeclared type name `I::A`\n }\n \n pub fn main() {}"}, {"sha": "41f5bc17b561bb9ee378a3405ff3fc6f4c2fcb18", "filename": "src/test/compile-fail/assoc-path-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Fcompile-fail%2Fassoc-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Fcompile-fail%2Fassoc-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-path-1.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we have one and only one associated type per ref.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo {\n+    type A;\n+}\n+pub trait Bar {\n+    type A;\n+}\n+\n+pub fn f1<T>(a: T, x: T::A) {} //~ERROR associated type `A` not found\n+pub fn f2<T: Foo + Bar>(a: T, x: T::A) {} //~ERROR ambiguous associated type `A`\n+\n+pub fn main() {}\n+"}, {"sha": "caf8ab3695d1c38905eef27735b55ec50e3f3702", "filename": "src/test/compile-fail/assoc-path-2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Fcompile-fail%2Fassoc-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Fcompile-fail%2Fassoc-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassoc-path-2.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test type checking of uses of associated types via sugary paths.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo {\n+    type A;\n+}\n+\n+impl Foo for int {\n+    type A = uint;\n+}\n+\n+pub fn f1<T: Foo>(a: T, x: T::A) {}\n+pub fn f2<T: Foo>(a: T) -> T::A {\n+    panic!();\n+}\n+\n+pub fn main() {\n+    f1(2i, 4i); //~ERROR the trait `Foo` is not implemented\n+    f1(2u, 4u); //~ERROR the trait `Foo` is not implemented\n+    f1(2u, 4i); //~ERROR the trait `Foo` is not implemented\n+\n+    let _: int = f2(2i); //~ERROR mismatched types: expected `int`, found `uint`\n+}"}, {"sha": "28c06f51cebc25d2ba7075a8d5448f9dd896325e", "filename": "src/test/run-pass/assoc-sugar-path.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Frun-pass%2Fassoc-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65616644af943c6de7879d16799e5fb488055fd5/src%2Ftest%2Frun-pass%2Fassoc-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassoc-sugar-path.rs?ref=65616644af943c6de7879d16799e5fb488055fd5", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test paths to associated types using the type-parameter-only sugar.\n+\n+#![feature(associated_types)]\n+\n+pub trait Foo {\n+    type A;\n+    fn boo(&self) -> Self::A;\n+}\n+\n+impl Foo for int {\n+    type A = uint;\n+    fn boo(&self) -> uint {\n+        5\n+    }\n+}\n+\n+// Using a type via a function.\n+pub fn bar<T: Foo>(a: T, x: T::A) -> T::A {\n+    let _: T::A = a.boo();\n+    x\n+}\n+\n+// Using a type via an impl.\n+trait C {\n+    fn f();\n+}\n+struct B<X>;\n+impl<T: Foo> C for B<T> {\n+    fn f() {\n+        let x: T::A = panic!();\n+    }\n+}\n+\n+pub fn main() {\n+    let z: uint = bar(2i, 4u);\n+}"}]}