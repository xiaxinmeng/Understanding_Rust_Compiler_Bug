{"sha": "773f3afd3628ed646fee561cb2a09a28454e72c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3M2YzYWZkMzYyOGVkNjQ2ZmVlNTYxY2IyYTA5YTI4NDU0ZTcyYzg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-09T18:02:43Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-10T16:45:03Z"}, "message": "Add fixture meta for single file fixture", "tree": {"sha": "c29e762c8df43683f9a541ddec92d4813ee59536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c29e762c8df43683f9a541ddec92d4813ee59536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/773f3afd3628ed646fee561cb2a09a28454e72c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/773f3afd3628ed646fee561cb2a09a28454e72c8", "html_url": "https://github.com/rust-lang/rust/commit/773f3afd3628ed646fee561cb2a09a28454e72c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/773f3afd3628ed646fee561cb2a09a28454e72c8/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d53627beba8fddb02496dc69979c557bdb9c34cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d53627beba8fddb02496dc69979c557bdb9c34cf", "html_url": "https://github.com/rust-lang/rust/commit/d53627beba8fddb02496dc69979c557bdb9c34cf"}], "stats": {"total": 71, "additions": 56, "deletions": 15}, "files": [{"sha": "7f43c297120d13a5c580106c34f6bc1533d907ec", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/773f3afd3628ed646fee561cb2a09a28454e72c8/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f3afd3628ed646fee561cb2a09a28454e72c8/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=773f3afd3628ed646fee561cb2a09a28454e72c8", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n \n use ra_cfg::CfgOptions;\n use rustc_hash::FxHashMap;\n-use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n+use test_utils::{extract_offset, parse_fixture, parse_single_fixture, CURSOR_MARKER};\n \n use crate::{\n     input::CrateName, CrateGraph, CrateId, Edition, Env, FileId, FilePosition, RelativePathBuf,\n@@ -45,23 +45,37 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n \n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n \n-fn with_single_file(db: &mut dyn SourceDatabaseExt, text: &str) -> FileId {\n+fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId {\n     let file_id = FileId(0);\n     let rel_path: RelativePathBuf = \"/main.rs\".into();\n \n     let mut source_root = SourceRoot::new_local();\n     source_root.insert_file(rel_path.clone(), file_id);\n \n-    let mut crate_graph = CrateGraph::default();\n-    crate_graph.add_crate_root(\n-        file_id,\n-        Edition::Edition2018,\n-        None,\n-        CfgOptions::default(),\n-        Env::default(),\n-    );\n-\n-    db.set_file_text(file_id, Arc::new(text.to_string()));\n+    let fixture = parse_single_fixture(ra_fixture);\n+\n+    let crate_graph = if let Some(entry) = fixture {\n+        let meta = match parse_meta(&entry.meta) {\n+            ParsedMeta::File(it) => it,\n+            _ => panic!(\"with_single_file only support file meta\"),\n+        };\n+\n+        let mut crate_graph = CrateGraph::default();\n+        crate_graph.add_crate_root(file_id, meta.edition, meta.krate, meta.cfg, meta.env);\n+        crate_graph\n+    } else {\n+        let mut crate_graph = CrateGraph::default();\n+        crate_graph.add_crate_root(\n+            file_id,\n+            Edition::Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        crate_graph\n+    };\n+\n+    db.set_file_text(file_id, Arc::new(ra_fixture.to_string()));\n     db.set_file_relative_path(file_id, rel_path);\n     db.set_file_source_root(file_id, WORKSPACE);\n     db.set_source_root(WORKSPACE, Arc::new(source_root));\n@@ -104,7 +118,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n                 meta.edition,\n                 Some(krate.clone()),\n                 meta.cfg,\n-                Env::default(),\n+                meta.env,\n             );\n             let prev = crates.insert(krate.clone(), crate_id);\n             assert!(prev.is_none());\n@@ -167,9 +181,10 @@ struct FileMeta {\n     deps: Vec<String>,\n     cfg: CfgOptions,\n     edition: Edition,\n+    env: Env,\n }\n \n-//- /lib.rs crate:foo deps:bar,baz\n+//- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo)\n fn parse_meta(meta: &str) -> ParsedMeta {\n     let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n@@ -186,6 +201,7 @@ fn parse_meta(meta: &str) -> ParsedMeta {\n     let mut deps = Vec::new();\n     let mut edition = Edition::Edition2018;\n     let mut cfg = CfgOptions::default();\n+    let mut env = Env::default();\n     for component in components[1..].iter() {\n         let (key, value) = split1(component, ':').unwrap();\n         match key {\n@@ -200,11 +216,18 @@ fn parse_meta(meta: &str) -> ParsedMeta {\n                     }\n                 }\n             }\n+            \"env\" => {\n+                for key in value.split(',') {\n+                    if let Some((k, v)) = split1(key, '=') {\n+                        env.set(k.into(), v.into());\n+                    }\n+                }\n+            }\n             _ => panic!(\"bad component: {:?}\", component),\n         }\n     }\n \n-    ParsedMeta::File(FileMeta { path, krate, deps, edition, cfg })\n+    ParsedMeta::File(FileMeta { path, krate, deps, edition, cfg, env })\n }\n \n fn split1(haystack: &str, delim: char) -> Option<(&str, &str)> {"}, {"sha": "1a1c642029879cf17a1e371d3754ed26ed009895", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/773f3afd3628ed646fee561cb2a09a28454e72c8/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f3afd3628ed646fee561cb2a09a28454e72c8/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=773f3afd3628ed646fee561cb2a09a28454e72c8", "patch": "@@ -261,6 +261,16 @@ impl fmt::Display for Edition {\n     }\n }\n \n+impl Env {\n+    pub fn set(&mut self, env: &str, value: String) {\n+        self.entries.insert(env.to_owned(), value);\n+    }\n+\n+    pub fn get(&self, env: &str) -> Option<String> {\n+        self.entries.get(env).cloned()\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct ParseEditionError {\n     invalid_input: String,"}, {"sha": "2432177b41ca72891b9d9803c6b763708d4dc73e", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/773f3afd3628ed646fee561cb2a09a28454e72c8/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f3afd3628ed646fee561cb2a09a28454e72c8/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=773f3afd3628ed646fee561cb2a09a28454e72c8", "patch": "@@ -202,6 +202,14 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n     res\n }\n \n+/// Same as `parse_fixture`, except it allow empty fixture\n+pub fn parse_single_fixture(fixture: &str) -> Option<FixtureEntry> {\n+    if !fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {\n+        return None;\n+    }\n+    parse_fixture(fixture).into_iter().nth(0)\n+}\n+\n // Comparison functionality borrowed from cargo:\n \n /// Compare a line with an expected pattern."}]}