{"sha": "355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NWJiZmI4OTU1ZmZkZmIyYmI3OTQwY2ExYjM4ZjJiYmI1ZGVmZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T14:19:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-24T14:19:20Z"}, "message": "Auto merge of #28602 - apasel422:clone_from, r=bluss\n\nr? @bluss", "tree": {"sha": "5ac9ad615163f8fddb3d0b2c4becdbd52069f39d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac9ad615163f8fddb3d0b2c4becdbd52069f39d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "html_url": "https://github.com/rust-lang/rust/commit/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fe79bdfdacb2f5914971bd1a0b63b9577afbf6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe79bdfdacb2f5914971bd1a0b63b9577afbf6a", "html_url": "https://github.com/rust-lang/rust/commit/8fe79bdfdacb2f5914971bd1a0b63b9577afbf6a"}, {"sha": "97f2a325644eb88b50fb5b52e09933535fa29c40", "url": "https://api.github.com/repos/rust-lang/rust/commits/97f2a325644eb88b50fb5b52e09933535fa29c40", "html_url": "https://github.com/rust-lang/rust/commit/97f2a325644eb88b50fb5b52e09933535fa29c40"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "b7afe9685778e0d0ac168731b6a0b394284d5061", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "patch": "@@ -167,12 +167,22 @@ use vec::{self, Vec};\n /// item's ordering relative to any other item, as determined by the `Ord`\n /// trait, changes while it is in the heap. This is normally only possible\n /// through `Cell`, `RefCell`, global state, I/O, or unsafe code.\n-#[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BinaryHeap<T> {\n     data: Vec<T>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: Clone> Clone for BinaryHeap<T> {\n+    fn clone(&self) -> Self {\n+        BinaryHeap { data: self.data.clone() }\n+    }\n+\n+    fn clone_from(&mut self, source: &Self) {\n+        self.data.clone_from(&source.data);\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Default for BinaryHeap<T> {\n     #[inline]"}, {"sha": "03ee8ba31b1d21d6648561651a6ccb2fd7ddb07a", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "patch": "@@ -62,7 +62,7 @@\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n #![feature(utf8_error)]\n-#![cfg_attr(test, feature(rand, test))]\n+#![cfg_attr(test, feature(clone_from_slice, rand, test))]\n \n #![feature(no_std)]\n #![no_std]"}, {"sha": "ba921fed68b1dc4e922c3cc7aa64f5153302c482", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "patch": "@@ -30,7 +30,7 @@ use vec::Vec;\n use boxed::Box;\n \n /// A growable string stored as a UTF-8 encoded buffer.\n-#[derive(Clone, PartialOrd, Eq, Ord)]\n+#[derive(PartialOrd, Eq, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct String {\n     vec: Vec<u8>,\n@@ -765,6 +765,17 @@ impl fmt::Display for FromUtf16Error {\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl Clone for String {\n+    fn clone(&self) -> Self {\n+        String { vec: self.vec.clone() }\n+    }\n+\n+    fn clone_from(&mut self, source: &Self) {\n+        self.vec.clone_from(&source.vec);\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromIterator<char> for String {\n     fn from_iter<I: IntoIterator<Item=char>>(iterable: I) -> String {"}, {"sha": "de3e6f94e874645abc6ff7c0d823ae9c32adad31", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=355bbfb8955ffdfb2bb7940ca1b38f2bbb5defd4", "patch": "@@ -1007,19 +1007,15 @@ impl<T:Clone> Clone for Vec<T> {\n \n     fn clone_from(&mut self, other: &Vec<T>) {\n         // drop anything in self that will not be overwritten\n-        if self.len() > other.len() {\n-            self.truncate(other.len())\n-        }\n+        self.truncate(other.len());\n+        let len = self.len();\n \n         // reuse the contained values' allocations/resources.\n-        for (place, thing) in self.iter_mut().zip(other) {\n-            place.clone_from(thing)\n-        }\n+        self.clone_from_slice(&other[..len]);\n \n         // self.len <= other.len due to the truncate above, so the\n         // slice here is always in-bounds.\n-        let slice = &other[self.len()..];\n-        self.push_all(slice);\n+        self.push_all(&other[len..]);\n     }\n }\n "}]}