{"sha": "c02c26e393e77380f196968f6fd6d33ff8bd7d3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMmMyNmUzOTNlNzczODBmMTk2OTY4ZjZmZDZkMzNmZjhiZDdkM2U=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-02T09:35:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-02T09:35:30Z"}, "message": "Rollup merge of #86776 - tmiasko:v0-skip-layout-query, r=petrochenkov\n\nSkip layout query when computing integer type size during mangling", "tree": {"sha": "f90fc5f65b4e332ada429601f23a2352e68f5b4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f90fc5f65b4e332ada429601f23a2352e68f5b4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c02c26e393e77380f196968f6fd6d33ff8bd7d3e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg3t3iCRBK7hj4Ov3rIwAADZYIAHRQhgfAxOFYE1jRG6QGCs8A\ntWkVqT2LzSNQzFUfRav9m9zq4T6W6y0Ia/L5Qj+RNvIh0MtIOYese9IAZYT1WEuG\nm1c5iZi7IHBNH58dnor9oJbHY7OBcIZBvwlRX508z+zuPeBylAoyn4+kJu05skFY\nqrqh3/OXnVj7qEySWDEAbQgv04n8FSecXSmB1/Z/lhOdLcUA1nNOjeHE8/DYHhwq\n9yoKpx+VKoywvAPPUdXKE3tFP5iDCWWB8RXE+ygskQKpG7oiTk5BgbkWdN8M447t\nBKEv+jpFsyyhpTteaCyC/IyCxpGkt2UyviKivV4h6pmytxlqXjAPZ2FWp80pEnY=\n=jLH+\n-----END PGP SIGNATURE-----\n", "payload": "tree f90fc5f65b4e332ada429601f23a2352e68f5b4e\nparent 2a122dc4d2ed392b94b6ffb3630cb3c500509f5b\nparent c99f1b9b7e67f96b51d873bd3ce2c09df0b34ef2\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1625218530 +0200\ncommitter GitHub <noreply@github.com> 1625218530 +0200\n\nRollup merge of #86776 - tmiasko:v0-skip-layout-query, r=petrochenkov\n\nSkip layout query when computing integer type size during mangling\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c02c26e393e77380f196968f6fd6d33ff8bd7d3e", "html_url": "https://github.com/rust-lang/rust/commit/c02c26e393e77380f196968f6fd6d33ff8bd7d3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c02c26e393e77380f196968f6fd6d33ff8bd7d3e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a122dc4d2ed392b94b6ffb3630cb3c500509f5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a122dc4d2ed392b94b6ffb3630cb3c500509f5b", "html_url": "https://github.com/rust-lang/rust/commit/2a122dc4d2ed392b94b6ffb3630cb3c500509f5b"}, {"sha": "c99f1b9b7e67f96b51d873bd3ce2c09df0b34ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c99f1b9b7e67f96b51d873bd3ce2c09df0b34ef2", "html_url": "https://github.com/rust-lang/rust/commit/c99f1b9b7e67f96b51d873bd3ce2c09df0b34ef2"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "1a9d04a75ec6abac73bb84ffae25289367501be5", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c02c26e393e77380f196968f6fd6d33ff8bd7d3e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c02c26e393e77380f196968f6fd6d33ff8bd7d3e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=c02c26e393e77380f196968f6fd6d33ff8bd7d3e", "patch": "@@ -3,9 +3,11 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::print::{Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst};\n use rustc_middle::ty::{self, FloatTy, Instance, IntTy, Ty, TyCtxt, TypeFoldable, UintTy};\n+use rustc_target::abi::Integer;\n use rustc_target::spec::abi::Abi;\n \n use std::fmt::Write;\n@@ -553,11 +555,9 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             ty::Uint(_) | ty::Bool | ty::Char => {\n                 ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty)\n             }\n-            ty::Int(_) => {\n-                let param_env = ty::ParamEnv::reveal_all();\n-                ct.try_eval_bits(self.tcx, param_env, ct.ty).and_then(|b| {\n-                    let sz = self.tcx.layout_of(param_env.and(ct.ty)).ok()?.size;\n-                    let val = sz.sign_extend(b) as i128;\n+            ty::Int(ity) => {\n+                ct.try_eval_bits(self.tcx, ty::ParamEnv::reveal_all(), ct.ty).and_then(|b| {\n+                    let val = Integer::from_int_ty(&self.tcx, *ity).size().sign_extend(b) as i128;\n                     if val < 0 {\n                         neg = true;\n                     }"}]}