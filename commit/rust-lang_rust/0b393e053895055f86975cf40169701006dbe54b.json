{"sha": "0b393e053895055f86975cf40169701006dbe54b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMzkzZTA1Mzg5NTA1NWY4Njk3NWNmNDAxNjk3MDEwMDZkYmU1NGI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-11T18:54:48Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-11T18:54:48Z"}, "message": "Ignore copyright year when generating deriving span tests\n\nPreviously, generate-deriving-span-tests.py would regenerate all the tests anew, even if they hadn't changed. This creates unnecessary diffs that only change the copyright year. Now we check to see if any of the content of the test has changed before generating the new one.", "tree": {"sha": "09bfacfbd5abc3574a3930f41317c29a82d2c8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09bfacfbd5abc3574a3930f41317c29a82d2c8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b393e053895055f86975cf40169701006dbe54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b393e053895055f86975cf40169701006dbe54b", "html_url": "https://github.com/rust-lang/rust/commit/0b393e053895055f86975cf40169701006dbe54b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b393e053895055f86975cf40169701006dbe54b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9b70c394e7f341b4016fce4cbf763d404b26f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9b70c394e7f341b4016fce4cbf763d404b26f9", "html_url": "https://github.com/rust-lang/rust/commit/4b9b70c394e7f341b4016fce4cbf763d404b26f9"}], "stats": {"total": 25, "additions": 19, "deletions": 6}, "files": [{"sha": "5b106275ac9d26873bde8ab6ef615ed0f786d992", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b393e053895055f86975cf40169701006dbe54b/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/0b393e053895055f86975cf40169701006dbe54b/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=0b393e053895055f86975cf40169701006dbe54b", "patch": "@@ -18,7 +18,7 @@\n sample usage: src/etc/generate-deriving-span-tests.py\n \"\"\"\n \n-import sys, os, datetime, stat\n+import sys, os, datetime, stat, re\n \n TEST_DIR = os.path.abspath(\n     os.path.join(os.path.dirname(__file__), '../test/compile-fail'))\n@@ -87,16 +87,25 @@ def create_test_case(type, trait, super_traits, error_count):\n def write_file(name, string):\n     test_file = os.path.join(TEST_DIR, 'derives-span-%s.rs' % name)\n \n+    with open(test_file) as f:\n+        old_str = f.read()\n+        old_str_ignoring_date = re.sub(r'^// Copyright \\d+',\n+                                        '// Copyright {year}'.format(year = YEAR), old_str)\n+        if old_str_ignoring_date == string:\n+            # if all we're doing is updating the copyright year, ignore it\n+            return 0\n+\n     # set write permission if file exists, so it can be changed\n     if os.path.exists(test_file):\n         os.chmod(test_file, stat.S_IWUSR)\n \n-    with open(test_file, 'wt') as f:\n+    with open(test_file, 'w') as f:\n         f.write(string)\n \n     # mark file read-only\n     os.chmod(test_file, stat.S_IRUSR|stat.S_IRGRP|stat.S_IROTH)\n \n+    return 1\n \n \n ENUM = 1\n@@ -120,11 +129,15 @@ def write_file(name, string):\n                               ('Hash', [], 1)]:\n     traits[trait] = (ALL, supers, errs)\n \n+files = 0\n+\n for (trait, (types, super_traits, error_count)) in traits.items():\n     mk = lambda ty: create_test_case(ty, trait, super_traits, error_count)\n     if types & ENUM:\n-        write_file(trait + '-enum', mk(ENUM_TUPLE))\n-        write_file(trait + '-enum-struct-variant', mk(ENUM_STRUCT))\n+        files += write_file(trait + '-enum', mk(ENUM_TUPLE))\n+        files += write_file(trait + '-enum-struct-variant', mk(ENUM_STRUCT))\n     if types & STRUCT:\n-        write_file(trait + '-struct', mk(STRUCT_FIELDS))\n-        write_file(trait + '-tuple-struct', mk(STRUCT_TUPLE))\n+        files += write_file(trait + '-struct', mk(STRUCT_FIELDS))\n+        files += write_file(trait + '-tuple-struct', mk(STRUCT_TUPLE))\n+\n+print('Generated {files} deriving span test{}.'.format('s' if files != 1 else '', files = files))"}]}