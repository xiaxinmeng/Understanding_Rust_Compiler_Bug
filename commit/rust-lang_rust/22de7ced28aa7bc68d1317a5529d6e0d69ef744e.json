{"sha": "22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyZGU3Y2VkMjhhYTdiYzY4ZDEzMTdhNTUyOWQ2ZTBkNjllZjc0NGU=", "commit": {"author": {"name": "dawirstejeck", "email": "dawirstejeck@users.noreply.github.com", "date": "2016-08-01T04:25:00Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-08-01T04:25:00Z"}, "message": "Fix overlong function signature (#1089)\n\n* Fix issue-1049\r\n\r\n* Add testcase suggested by pepyakin\r\n\r\n* Fix last commit\r\n\r\n* Handle special case\r\n\r\n* Remove debugging println\r\n\r\n* Fix grammar in comment\r\n\r\n* Change word in comment\r\n\r\n* Add test for long func without ret type\r\n\r\n* Add one more test", "tree": {"sha": "679cbcda85e95a3d808efdf0f607e3d0a9f7a235", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/679cbcda85e95a3d808efdf0f607e3d0a9f7a235"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "html_url": "https://github.com/rust-lang/rust/commit/22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22de7ced28aa7bc68d1317a5529d6e0d69ef744e/comments", "author": null, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6380937b596d32da78dfc24ae6666b12a6dc59bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6380937b596d32da78dfc24ae6666b12a6dc59bd", "html_url": "https://github.com/rust-lang/rust/commit/6380937b596d32da78dfc24ae6666b12a6dc59bd"}], "stats": {"total": 60, "additions": 53, "deletions": 7}, "files": [{"sha": "36d9d92eb1631c8ff347a0c066b03b3626e8ad6f", "filename": "src/items.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/22de7ced28aa7bc68d1317a5529d6e0d69ef744e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22de7ced28aa7bc68d1317a5529d6e0d69ef744e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "patch": "@@ -1369,10 +1369,21 @@ fn rewrite_fn_base(context: &RewriteContext,\n             FnArgLayoutStyle::Block if put_args_in_block => false,\n             FnArgLayoutStyle::BlockAlways => false,\n             _ => {\n-                // If we've already gone multi-line, or the return type would push\n-                // over the max width, then put the return type on a new line.\n-                result.contains(\"\\n\") || multi_line_ret_str ||\n-                result.len() + indent.width() + ret_str_len > context.config.max_width\n+                // If we've already gone multi-line, or the return type would push over the max\n+                // width, then put the return type on a new line. With the +1 for the signature\n+                // length an additional space between the closing parenthesis of the argument and\n+                // the arrow '->' is considered.\n+                let mut sig_length = result.len() + indent.width() + ret_str_len + 1;\n+\n+                // If there is no where clause, take into account the space after the return type\n+                // and the brace.\n+                if where_clause.predicates.is_empty() {\n+                    sig_length += 2;\n+                }\n+\n+                let overlong_sig = sig_length > context.config.max_width;\n+\n+                result.contains(\"\\n\") || multi_line_ret_str || overlong_sig\n             }\n         };\n         let ret_indent = if ret_should_indent {\n@@ -1400,10 +1411,8 @@ fn rewrite_fn_base(context: &RewriteContext,\n         if multi_line_ret_str {\n             // Now that we know the proper indent and width, we need to\n             // re-layout the return type.\n-\n             let budget = try_opt!(context.config.max_width.checked_sub(ret_indent.width()));\n-            let ret_str = try_opt!(fd.output\n-                .rewrite(context, budget, ret_indent));\n+            let ret_str = try_opt!(fd.output.rewrite(context, budget, ret_indent));\n             result.push_str(&ret_str);\n         } else {\n             result.push_str(&ret_str);"}, {"sha": "a0240b83b63678f844a39c2896f37c955faad5c9", "filename": "tests/source/issue-1049.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22de7ced28aa7bc68d1317a5529d6e0d69ef744e/tests%2Fsource%2Fissue-1049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22de7ced28aa7bc68d1317a5529d6e0d69ef744e/tests%2Fsource%2Fissue-1049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1049.rs?ref=22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "patch": "@@ -0,0 +1,16 @@\n+// Test overlong function signature\n+pub unsafe fn reborrow_mut(&mut X: Abcde) -> Handle<NodeRef<marker::Mut, K, V, NodeType>, HandleType> {\n+}\n+\n+pub fn merge(mut X: Abcdef) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n+}\n+\n+impl Handle {\n+    pub fn merge(a: Abcd) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n+    }\n+}\n+\n+// Long function without return type that should not be reformated.\n+fn veeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {}\n+\n+fn veeeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {}"}, {"sha": "fac49b80b5174c266624f7d819e501d644068ccf", "filename": "tests/target/issue-1049.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/22de7ced28aa7bc68d1317a5529d6e0d69ef744e/tests%2Ftarget%2Fissue-1049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22de7ced28aa7bc68d1317a5529d6e0d69ef744e/tests%2Ftarget%2Fissue-1049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1049.rs?ref=22de7ced28aa7bc68d1317a5529d6e0d69ef744e", "patch": "@@ -0,0 +1,21 @@\n+// Test overlong function signature\n+pub unsafe fn reborrow_mut(&mut X: Abcde)\n+                           -> Handle<NodeRef<marker::Mut, K, V, NodeType>, HandleType> {\n+}\n+\n+pub fn merge(mut X: Abcdef)\n+             -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n+}\n+\n+impl Handle {\n+    pub fn merge(a: Abcd)\n+                 -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Internal>, marker::Edge> {\n+    }\n+}\n+\n+// Long function without return type that should not be reformated.\n+fn veeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee, b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {}\n+\n+fn veeeeeeeeeeeeeeeeeeeeeery_long_name(a: FirstTypeeeeeeeeee,\n+                                       b: SecondTypeeeeeeeeeeeeeeeeeeeeeee) {\n+}"}]}