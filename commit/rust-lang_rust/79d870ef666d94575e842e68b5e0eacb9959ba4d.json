{"sha": "79d870ef666d94575e842e68b5e0eacb9959ba4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZDg3MGVmNjY2ZDk0NTc1ZTg0MmU2OGI1ZTBlYWNiOTk1OWJhNGQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-20T07:56:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-20T07:56:55Z"}, "message": "Merge pull request #2777 from rust-lang-nursery/scoped_attrs\n\nUse the new scoped tool attributes", "tree": {"sha": "202ce7f16ac3bae9c19fbd657c785859c492e351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/202ce7f16ac3bae9c19fbd657c785859c492e351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79d870ef666d94575e842e68b5e0eacb9959ba4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbASpHCRBK7hj4Ov3rIwAAdHIIAJItQE9zesiMwPeALnpD66fG\nybeOyXheaJDgAxQd/VZbyZgOixWahlqaRjix2e0ajWgBUBKCVIv67Ax7/ySCT1YB\nyfq69FmbJvAfD4AKRwmTbzUBPh+0KLFdoIEJOvLcb2qyKRnmei2/48RqQFzVxF2F\n7+y8vJa6Ipw8EffK0CcXV7uqYlEbY7mGHYrIxiyepvo3JXWns93G4ySPTbUDJLnA\nYo2tizeeESKt1UeSlcZAgt+tSj4vcpV4L7mNQlEMKFnTvlihdAOnkcOwIiRrsNgD\nbswE/VNRsAwojV9+pD7pFvNCBrQgrn7TjKnQSxnHkQInWwTKvVhNkGh0rfdN2Ok=\n=mKny\n-----END PGP SIGNATURE-----\n", "payload": "tree 202ce7f16ac3bae9c19fbd657c785859c492e351\nparent fcbcdbc625f706a9d4f7c618b48f83f2564ac10a\nparent e0df4ccfc5ba76347cc3eb427bbe5d932f61ecee\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1526803015 +0200\ncommitter GitHub <noreply@github.com> 1526803015 +0200\n\nMerge pull request #2777 from rust-lang-nursery/scoped_attrs\n\nUse the new scoped tool attributes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79d870ef666d94575e842e68b5e0eacb9959ba4d", "html_url": "https://github.com/rust-lang/rust/commit/79d870ef666d94575e842e68b5e0eacb9959ba4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79d870ef666d94575e842e68b5e0eacb9959ba4d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcbcdbc625f706a9d4f7c618b48f83f2564ac10a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbcdbc625f706a9d4f7c618b48f83f2564ac10a", "html_url": "https://github.com/rust-lang/rust/commit/fcbcdbc625f706a9d4f7c618b48f83f2564ac10a"}, {"sha": "e0df4ccfc5ba76347cc3eb427bbe5d932f61ecee", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0df4ccfc5ba76347cc3eb427bbe5d932f61ecee", "html_url": "https://github.com/rust-lang/rust/commit/e0df4ccfc5ba76347cc3eb427bbe5d932f61ecee"}], "stats": {"total": 123, "additions": 59, "deletions": 64}, "files": [{"sha": "09f4f34b98d7231c6813cf0e3e3cbc279c8e548e", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -80,12 +80,8 @@ First, create a new UI test file in the `tests/ui/` directory with the pattern y\n \n ```rust\n // ./tests/ui/my_lint.rs\n-\n-// The custom_attribute needs to be enabled for the author lint to work\n-#![feature(plugin, custom_attribute)]\n-\n fn main() {\n-    #[clippy(author)]\n+    #[clippy::author]\n     let arr: [i32; 1] = [7]; // Replace line with the code you want to match\n }\n ```"}, {"sha": "7864e90c1961d11c7d446e1ba9c57e3f0e3987c3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:cargo-clippy\n \n #![feature(box_syntax)]\n-#![feature(custom_attribute)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "dd43a0d2177de346318e0bdf818f9407d944520a", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -7,8 +7,9 @@ use rustc::lint::*;\n use rustc::hir;\n use rustc::hir::{Expr, Expr_, QPath, Ty_, Pat, PatKind, BindingAnnotation, StmtSemi, StmtExpr, StmtDecl, Decl_, Stmt};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n-use syntax::ast::{self, Attribute, LitKind, DUMMY_NODE_ID};\n+use syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n use std::collections::HashMap;\n+use utils::get_attr;\n \n /// **What it does:** Generates clippy code that detects the offending pattern\n ///\n@@ -17,10 +18,10 @@ use std::collections::HashMap;\n /// // ./tests/ui/my_lint.rs\n /// fn foo() {\n ///     // detect the following pattern\n-///     #[clippy(author)]\n+///     #[clippy::author]\n ///     if x == 42 {\n ///         // but ignore everything from here on\n-///         #![clippy(author = \"ignore\")]\n+///         #![clippy::author = \"ignore\"]\n ///     }\n /// }\n /// ```\n@@ -633,14 +634,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n }\n \n fn has_attr(attrs: &[Attribute]) -> bool {\n-    attrs.iter().any(|attr| {\n-        attr.check_name(\"clippy\") && attr.meta_item_list().map_or(false, |list| {\n-            list.len() == 1 && match list[0].node {\n-                ast::NestedMetaItemKind::MetaItem(ref it) => it.name() == \"author\",\n-                ast::NestedMetaItemKind::Literal(_) => false,\n-            }\n-        })\n-    })\n+    get_attr(attrs, \"author\").count() > 0\n }\n \n fn desugaring_name(des: hir::MatchSource) -> String {"}, {"sha": "10a9a3a03c140d801e20a9214c104032cc1de533", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::*;\n use rustc::hir;\n use rustc::hir::print;\n use syntax::ast::Attribute;\n-use syntax::attr;\n+use utils::get_attr;\n \n /// **What it does:** Dumps every ast/hir node which has the `#[clippy_dump]`\n /// attribute\n@@ -136,7 +136,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n fn has_attr(attrs: &[Attribute]) -> bool {\n-    attr::contains_name(attrs, \"clippy_dump\")\n+    get_attr(attrs, \"dump\").count() > 0\n }\n \n fn print_decl(cx: &LateContext, decl: &hir::Decl) {"}, {"sha": "d5c7796fac6522479cf4a9148e99dafc1331a5d5", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -735,20 +735,26 @@ impl LimitStack {\n     }\n }\n \n-fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'static str, mut f: F) {\n-    for attr in attrs {\n-        if attr.is_sugared_doc {\n-            continue;\n+pub fn get_attr<'a>(attrs: &'a [ast::Attribute], name: &'static str) -> impl Iterator<Item = &'a ast::Attribute> {\n+    attrs.iter().filter_map(move |attr| {\n+        if attr.path.segments.len() == 2 && attr.path.segments[0].ident.to_string() == \"clippy\" && attr.path.segments[1].ident.to_string() == name {\n+            Some(attr)\n+        } else {\n+            None\n         }\n+    })\n+}\n+\n+fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'static str, mut f: F) {\n+    for attr in get_attr(attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n-            if attr.name() == name {\n-                if let Ok(value) = FromStr::from_str(&value.as_str()) {\n-                    attr::mark_used(attr);\n-                    f(value)\n-                } else {\n-                    sess.span_err(attr.span, \"not a number\");\n-                }\n+            if let Ok(value) = FromStr::from_str(&value.as_str()) {\n+                f(value)\n+            } else {\n+                sess.span_err(attr.span, \"not a number\");\n             }\n+        } else {\n+            sess.span_err(attr.span, \"bad clippy attribute\");\n         }\n     }\n }"}, {"sha": "eec26bcce3c8d57c053815b3353818b8a08caacf", "filename": "tests/ui/author.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,7 +1,7 @@\n-#![feature(plugin, custom_attribute)]\n+#![feature(tool_attributes)]\n \n fn main() {\n \n-    #[clippy(author)]\n+    #[clippy::author]\n     let x: char = 0x45 as char;\n }"}, {"sha": "5faf440676d09444e0691bcc00b2e7ba5696acdf", "filename": "tests/ui/author/for_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fauthor%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fauthor%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,7 +1,7 @@\n-#![feature(custom_attribute)]\n+#![feature(tool_attributes)]\n \n fn main() {\n-    #[clippy(author)]\n+    #[clippy::author]\n     for y in 0..10 {\n         let z = y;\n     }"}, {"sha": "e6bf229103ff903754fde7c6fa9b7dc3cc389b5c", "filename": "tests/ui/author/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fauthor%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fauthor%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Fmatches.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,7 +1,7 @@\n-#![feature(custom_attribute)]\n+#![feature(tool_attributes)]\n \n fn main() {\n-    #[clippy(author)]\n+    #[clippy::author]\n     let a = match 42 {\n         16 => 5,\n         17 => {"}, {"sha": "3214505ba1e3b420fa9826b73d292da82eb5fd53", "filename": "tests/ui/cyclomatic_complexity.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(tool_attributes)]\n \n #![allow(clippy)]\n #![warn(cyclomatic_complexity)]\n@@ -88,7 +88,7 @@ fn main() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn kaboom() {\n     let n = 0;\n     'a: for i in 0..20 {\n@@ -134,17 +134,17 @@ fn bloo() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn lots_of_short_circuits() -> bool {\n     true && false && true && false && true && false && true\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn lots_of_short_circuits2() -> bool {\n     true || false || true || false || true || false || true\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn baa() {\n     let x = || match 99 {\n         0 => 0,\n@@ -162,7 +162,7 @@ fn baa() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn bar() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -171,7 +171,7 @@ fn bar() {\n }\n \n #[test]\n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n /// Tests are usually complex but simple at the same time. `cyclomatic_complexity` used to give\n /// lots of false-positives in tests.\n fn dont_warn_on_tests() {\n@@ -181,7 +181,7 @@ fn dont_warn_on_tests() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn barr() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -191,7 +191,7 @@ fn barr() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn barr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -207,7 +207,7 @@ fn barr2() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn barrr() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -217,7 +217,7 @@ fn barrr() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn barrr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -233,7 +233,7 @@ fn barrr2() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn barrrr() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -243,7 +243,7 @@ fn barrrr() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn barrrr2() {\n     match 99 {\n         0 => println!(\"hi\"),\n@@ -259,7 +259,7 @@ fn barrrr2() {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn cake() {\n     if 4 == 5 {\n         println!(\"yea\");\n@@ -270,7 +270,7 @@ fn cake() {\n }\n \n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n pub fn read_file(input_path: &str) -> String {\n     use std::fs::File;\n     use std::io::{Read, Write};\n@@ -301,29 +301,29 @@ pub fn read_file(input_path: &str) -> String {\n \n enum Void {}\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn void(void: Void) {\n     if true {\n         match void {\n         }\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn mcarton_sees_all() {\n     panic!(\"meh\");\n     panic!(\"m\u00f6h\");\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn try() -> Result<i32, &'static str> {\n     match 5 {\n         5 => Ok(5),\n         _ => return Err(\"bla\"),\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn try_again() -> Result<i32, &'static str> {\n     let _ = try!(Ok(42));\n     let _ = try!(Ok(43));\n@@ -339,7 +339,7 @@ fn try_again() -> Result<i32, &'static str> {\n     }\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn early() -> Result<i32, &'static str> {\n     return Ok(5);\n     return Ok(5);\n@@ -352,7 +352,7 @@ fn early() -> Result<i32, &'static str> {\n     return Ok(5);\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn early_ret() -> i32 {\n     let a = if true { 42 } else { return 0; };\n     let a = if a < 99 { 42 } else { return 0; };"}, {"sha": "50b19f9d7ba2b69606ebc06d4edbe83d44ed23a7", "filename": "tests/ui/cyclomatic_complexity_attr_used.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+#![feature(tool_attributes)]\n \n #![warn(cyclomatic_complexity)]\n #![warn(unused)]\n@@ -7,7 +7,7 @@ fn main() {\n     kaboom();\n }\n \n-#[cyclomatic_complexity = \"0\"]\n+#[clippy::cyclomatic_complexity = \"0\"]\n fn kaboom() {\n     if 42 == 43 {\n         panic!();"}, {"sha": "c17639aaf04a0960fb0d7df9253f41c53576fc74", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+\n #![warn(excessive_precision)]\n #![allow(print_literal)]\n "}, {"sha": "e28a8f1e17883bf6663aa22f4e66f100b40fb096", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(custom_attribute)]\n+\n \n \n use std::collections::*;"}, {"sha": "5494e78062813bbb92c99e23157c2f33147d5abf", "filename": "tests/ui/trailing_zeros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Ftrailing_zeros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Ftrailing_zeros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zeros.rs?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,10 +1,10 @@\n-#![feature(custom_attribute, stmt_expr_attributes)]\n+#![feature(stmt_expr_attributes, tool_attributes)]\n \n #![allow(unused_parens)]\n \n fn main() {\n     let x: i32 = 42;\n-    let _ = #[clippy(author)] (x & 0b1111 == 0);  // suggest trailing_zeros\n+    let _ = #[clippy::author] (x & 0b1111 == 0);  // suggest trailing_zeros\n     let _ = x & 0b1_1111 == 0; // suggest trailing_zeros\n     let _ = x & 0b1_1010 == 0; // do not lint\n     let _ = x & 1 == 0; // do not lint"}, {"sha": "47b46be9ba805b4879c7c772cfe74a7b7e64fe5e", "filename": "tests/ui/trailing_zeros.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Ftrailing_zeros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/79d870ef666d94575e842e68b5e0eacb9959ba4d/tests%2Fui%2Ftrailing_zeros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zeros.stderr?ref=79d870ef666d94575e842e68b5e0eacb9959ba4d", "patch": "@@ -1,7 +1,7 @@\n error: bit mask could be simplified with a call to `trailing_zeros`\n  --> $DIR/trailing_zeros.rs:7:31\n   |\n-7 |     let _ = #[clippy(author)] (x & 0b1111 == 0);  // suggest trailing_zeros\n+7 |     let _ = #[clippy::author] (x & 0b1111 == 0);  // suggest trailing_zeros\n   |                               ^^^^^^^^^^^^^^^^^ help: try: `x.trailing_zeros() >= 4`\n   |\n   = note: `-D verbose-bit-mask` implied by `-D warnings`"}]}