{"sha": "56193b0e60434a810ea65607e43c78139256979b", "node_id": "C_kwDOAAsO6NoAKDU2MTkzYjBlNjA0MzRhODEwZWE2NTYwN2U0M2M3ODEzOTI1Njk3OWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-13T22:25:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-13T22:25:13Z"}, "message": "Rollup merge of #107985 - alesito85:master, r=ChrisDenton\n\nAdded another error to be processed in fallback\n\nThis pull request addresses the problem of Rust not being able to read file/directory metadata because the current user doesn't have permission to read the file and are thus inaccessible.\n\nOne particular example is `System Volume Information`. But any example can be made by having a file/directory, which the current user can't access even though the system does allow to view the metadata, which is handled by the fallback.\n\nThe fallback exists to get the metadata but it was limited to one error type. Having added ERROR_ACCESS_DENIED per Chris Denton's suggestion, file/directory properties are now properly read.\n\nSolution suggested by Chris Denton https://github.com/nushell/nushell/issues/6857#issuecomment-1426847135", "tree": {"sha": "4f11eb7ca07830cb9f72de2183bdf3a3efc56076", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f11eb7ca07830cb9f72de2183bdf3a3efc56076"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56193b0e60434a810ea65607e43c78139256979b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj6rjJCRBK7hj4Ov3rIwAAQM4IAExRV1lqwZBq/juujexx0LEb\n3s18N/lAwfRA7EH8vy3QnJX9MpEv7NTFHHOqidcN0GhR/mjbAhXwfQkKX0YZE6/k\nfawapIaEsjMhqt8vGubtTYr+jvtn1dfzcAuL5mgVOSb5TR5MvF4XdHVdT81AYMGN\n0im8Zlw8imOqvj9rHSJLH+y6tMqSx8yTH0jdebmbW3EbHFZ6z3d/iP4zR3Qsul1C\nbUKzieoxjih7XEoctGR5oQGPT6z92u8F+UrEfWCt1q27d4xM3ArbzGqEmW2LDGJy\nprx9fa46fMvWqGW9RxlKJ00Yduh0SkeameD7w8jPxitIR48yvYHiYsJmlhS4F70=\n=CU7K\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f11eb7ca07830cb9f72de2183bdf3a3efc56076\nparent 5915309645988a001101621423912d2e32c90523\nparent f72eb4704a944c75c1eb1215bce6961fae3b3608\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676327113 +0100\ncommitter GitHub <noreply@github.com> 1676327113 +0100\n\nRollup merge of #107985 - alesito85:master, r=ChrisDenton\n\nAdded another error to be processed in fallback\n\nThis pull request addresses the problem of Rust not being able to read file/directory metadata because the current user doesn't have permission to read the file and are thus inaccessible.\n\nOne particular example is `System Volume Information`. But any example can be made by having a file/directory, which the current user can't access even though the system does allow to view the metadata, which is handled by the fallback.\n\nThe fallback exists to get the metadata but it was limited to one error type. Having added ERROR_ACCESS_DENIED per Chris Denton's suggestion, file/directory properties are now properly read.\n\nSolution suggested by Chris Denton https://github.com/nushell/nushell/issues/6857#issuecomment-1426847135\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56193b0e60434a810ea65607e43c78139256979b", "html_url": "https://github.com/rust-lang/rust/commit/56193b0e60434a810ea65607e43c78139256979b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56193b0e60434a810ea65607e43c78139256979b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5915309645988a001101621423912d2e32c90523", "url": "https://api.github.com/repos/rust-lang/rust/commits/5915309645988a001101621423912d2e32c90523", "html_url": "https://github.com/rust-lang/rust/commit/5915309645988a001101621423912d2e32c90523"}, {"sha": "f72eb4704a944c75c1eb1215bce6961fae3b3608", "url": "https://api.github.com/repos/rust-lang/rust/commits/f72eb4704a944c75c1eb1215bce6961fae3b3608", "html_url": "https://github.com/rust-lang/rust/commit/f72eb4704a944c75c1eb1215bce6961fae3b3608"}], "stats": {"total": 7, "additions": 6, "deletions": 1}, "files": [{"sha": "d2c597664fa780812c39ff1073d1a7a40cdad16f", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/56193b0e60434a810ea65607e43c78139256979b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56193b0e60434a810ea65607e43c78139256979b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=56193b0e60434a810ea65607e43c78139256979b", "patch": "@@ -1266,7 +1266,12 @@ fn metadata(path: &Path, reparse: ReparsePoint) -> io::Result<FileAttr> {\n     // If the fallback fails for any reason we return the original error.\n     match File::open(path, &opts) {\n         Ok(file) => file.file_attr(),\n-        Err(e) if e.raw_os_error() == Some(c::ERROR_SHARING_VIOLATION as _) => {\n+        Err(e)\n+            if [Some(c::ERROR_SHARING_VIOLATION as _), Some(c::ERROR_ACCESS_DENIED as _)]\n+                .contains(&e.raw_os_error()) =>\n+        {\n+            // `ERROR_ACCESS_DENIED` is returned when the user doesn't have permission for the resource.\n+            // One such example is `System Volume Information` as default but can be created as well\n             // `ERROR_SHARING_VIOLATION` will almost never be returned.\n             // Usually if a file is locked you can still read some metadata.\n             // However, there are special system files, such as"}]}