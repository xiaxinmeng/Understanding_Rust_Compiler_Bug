{"sha": "89daef82d0b9cf7ebbe94c2ff02d232ce7c18184", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZGFlZjgyZDBiOWNmN2ViYmU5NGMyZmYwMmQyMzJjZTdjMTgxODQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-25T09:50:36Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-25T09:54:47Z"}, "message": "VariantDef: move recovered into VariantFlags", "tree": {"sha": "f46ed989aa4fb1706b3c93ffde132eb1e0a072b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f46ed989aa4fb1706b3c93ffde132eb1e0a072b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184", "html_url": "https://github.com/rust-lang/rust/commit/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6a3ed15823cce765d56952d954e1bd8166dfa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6a3ed15823cce765d56952d954e1bd8166dfa7", "html_url": "https://github.com/rust-lang/rust/commit/3d6a3ed15823cce765d56952d954e1bd8166dfa7"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "364059a5993bebad846a060e6d7e3d41a881f962", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=89daef82d0b9cf7ebbe94c2ff02d232ce7c18184", "patch": "@@ -1971,6 +1971,9 @@ bitflags! {\n         const NO_VARIANT_FLAGS        = 0;\n         /// Indicates whether the field list of this variant is `#[non_exhaustive]`.\n         const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;\n+        /// Indicates whether this variant was obtained as part of recovering from\n+        /// a syntactic error. May be incomplete or bogus.\n+        const IS_RECOVERED = 1 << 1;\n     }\n }\n \n@@ -1994,9 +1997,6 @@ pub struct VariantDef {\n     pub ctor_kind: CtorKind,\n     /// Flags of the variant (e.g. is field list non-exhaustive)?\n     flags: VariantFlags,\n-    /// Variant is obtained as part of recovering from a syntactic error.\n-    /// May be incomplete or bogus.\n-    pub recovered: bool,\n }\n \n impl<'tcx> VariantDef {\n@@ -2039,6 +2039,10 @@ impl<'tcx> VariantDef {\n             flags |= VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE;\n         }\n \n+        if recovered {\n+            flags |= VariantFlags::IS_RECOVERED;\n+        }\n+\n         VariantDef {\n             def_id: variant_did.unwrap_or(parent_did),\n             ctor_def_id,\n@@ -2047,7 +2051,6 @@ impl<'tcx> VariantDef {\n             fields,\n             ctor_kind,\n             flags,\n-            recovered,\n         }\n     }\n \n@@ -2057,6 +2060,12 @@ impl<'tcx> VariantDef {\n         self.flags.intersects(VariantFlags::IS_FIELD_LIST_NON_EXHAUSTIVE)\n     }\n \n+    /// Was this variant obtained as part of recovering from a syntactic error?\n+    #[inline]\n+    pub fn is_recovered(&self) -> bool {\n+        self.flags.intersects(VariantFlags::IS_RECOVERED)\n+    }\n+\n     /// `repr(transparent)` structs can have a single non-ZST field, this function returns that\n     /// field.\n     pub fn transparent_newtype_field(&self, tcx: TyCtxt<'tcx>) -> Option<&FieldDef> {"}, {"sha": "8fb3d0b7d98fbe49c3aa9159ec2c828d51005160", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=89daef82d0b9cf7ebbe94c2ff02d232ce7c18184", "patch": "@@ -1296,7 +1296,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         kind_name: &str,\n         ty_span: Span,\n     ) {\n-        if variant.recovered {\n+        if variant.is_recovered() {\n             self.set_tainted_by_errors();\n             return;\n         }"}, {"sha": "d1864ee2b35afc051772e26c55949b0cca340c8c", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89daef82d0b9cf7ebbe94c2ff02d232ce7c18184/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=89daef82d0b9cf7ebbe94c2ff02d232ce7c18184", "patch": "@@ -1080,7 +1080,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .filter(|ident| !used_fields.contains_key(&ident))\n             .collect::<Vec<_>>();\n \n-        let inexistent_fields_err = if !inexistent_fields.is_empty() && !variant.recovered {\n+        let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered()) {\n             Some(self.error_inexistent_fields(\n                 adt.variant_descr(),\n                 &inexistent_fields,"}]}