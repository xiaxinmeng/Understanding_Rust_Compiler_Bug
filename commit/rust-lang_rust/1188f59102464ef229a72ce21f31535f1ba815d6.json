{"sha": "1188f59102464ef229a72ce21f31535f1ba815d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExODhmNTkxMDI0NjRlZjIyOWE3MmNlMjFmMzE1MzVmMWJhODE1ZDY=", "commit": {"author": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T20:53:10Z"}, "committer": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T20:53:10Z"}, "message": "fixed struct elison", "tree": {"sha": "be34ba4274d60272d007a817b88a634124aa43be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be34ba4274d60272d007a817b88a634124aa43be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1188f59102464ef229a72ce21f31535f1ba815d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1188f59102464ef229a72ce21f31535f1ba815d6", "html_url": "https://github.com/rust-lang/rust/commit/1188f59102464ef229a72ce21f31535f1ba815d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1188f59102464ef229a72ce21f31535f1ba815d6/comments", "author": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a653d8d441e592d0f66d2639da47732bf8b5ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a653d8d441e592d0f66d2639da47732bf8b5ee", "html_url": "https://github.com/rust-lang/rust/commit/72a653d8d441e592d0f66d2639da47732bf8b5ee"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "f77fec0a43ef7bf1ef81bba33da78db3d89a5a6c", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1188f59102464ef229a72ce21f31535f1ba815d6/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1188f59102464ef229a72ce21f31535f1ba815d6/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=1188f59102464ef229a72ce21f31535f1ba815d6", "patch": "@@ -35,7 +35,7 @@ impl LateLintPass for OkIfLetPass {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if_let_chain! {[ //begin checking variables\n             let ExprMatch(ref op, ref body, ref source) = expr.node, //test if expr is a match\n-            let MatchSource::IfLetDesugar { contains_else_clause: _ } = *source, //test if it is an If Let\n+            let MatchSource::IfLetDesugar { .. } = *source, //test if it is an If Let\n             let ExprMethodCall(_, _, ref result_types) = op.node, //check is expr.ok() has type Result<T,E>.ok()\n             let PatKind::TupleStruct(ref x, ref y, _)  = body[0].pats[0].node, //get operation\n             let Some(_) = method_chain_args(op, &[\"ok\"]) //test to see if using ok() methoduse std::marker::Sized;"}]}