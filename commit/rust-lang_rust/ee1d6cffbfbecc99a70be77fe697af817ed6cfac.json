{"sha": "ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "node_id": "C_kwDOAAsO6NoAKGVlMWQ2Y2ZmYmZiZWNjOTlhNzBiZTc3ZmU2OTdhZjgxN2VkNmNmYWM", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-26T10:46:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-26T10:46:33Z"}, "message": "Merge #10637\n\n10637: fix: make `goto_type_definition` multi-token mapping aware r=Veykril a=spookyvision\n\n\n\nCo-authored-by: Anatol Ulrich <anatol.ulrich@ferrous-systems.com>", "tree": {"sha": "7f2cba72e2eca6be23a016f763f2a48c1de8ef12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f2cba72e2eca6be23a016f763f2a48c1de8ef12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhd9yJCRBK7hj4Ov3rIwAA1NAIAAer0qvZofDhdKLaQcoqx2Sk\n2ujIc9dscyVjJxIpGEcSWPHzza4Zw5Si/mfViNm2G6HyEag67KS5U271/1HUDUI0\nldgt/98KRunomoDicLRkB/8uMzhI++9EpzopaYg6PT7tGsW1wskho9I3VGtvAK/l\nqXI61swijjHGu0cFYDKXziK5Ztvi+n5ZkH3sBT7p8oNwZor/roloQMfYMywbg3qg\nB6UAYaY2ykq2do/+E7IdA3xhq5D0yy5EHBG8G1bfTDG+V8W4IDwQjdAL+mO1sPAq\n7/B4uXywyqW3rpdQS+8BY+L6WGzbCLDxYKeA5rDyZnNk6MWwvWYmSrSWDxMK2ZA=\n=dJ45\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f2cba72e2eca6be23a016f763f2a48c1de8ef12\nparent ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c\nparent c69879423eef75eaafa744ee2b03b5e85d942438\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635245193 +0000\ncommitter GitHub <noreply@github.com> 1635245193 +0000\n\nMerge #10637\n\n10637: fix: make `goto_type_definition` multi-token mapping aware r=Veykril a=spookyvision\n\n\n\nCo-authored-by: Anatol Ulrich <anatol.ulrich@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "html_url": "https://github.com/rust-lang/rust/commit/ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee1d6cffbfbecc99a70be77fe697af817ed6cfac/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c", "html_url": "https://github.com/rust-lang/rust/commit/ed39b45e8d3d567649d8aec78b3bc63aa5c9f19c"}, {"sha": "c69879423eef75eaafa744ee2b03b5e85d942438", "url": "https://api.github.com/repos/rust-lang/rust/commits/c69879423eef75eaafa744ee2b03b5e85d942438", "html_url": "https://github.com/rust-lang/rust/commit/c69879423eef75eaafa744ee2b03b5e85d942438"}], "stats": {"total": 89, "additions": 49, "deletions": 40}, "files": [{"sha": "2976dec37944500f0d9bf1d8b5c6f9d4c65cb5c4", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 49, "deletions": 40, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/ee1d6cffbfbecc99a70be77fe697af817ed6cfac/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1d6cffbfbecc99a70be77fe697af817ed6cfac/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=ee1d6cffbfbecc99a70be77fe697af817ed6cfac", "patch": "@@ -27,32 +27,6 @@ pub(crate) fn goto_type_definition(\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;\n-    let token: SyntaxToken = sema.descend_into_macros_single(token);\n-\n-    let (ty, node) = sema.token_ancestors_with_macros(token).find_map(|node| {\n-        let ty = match_ast! {\n-            match node {\n-                ast::Expr(it) => sema.type_of_expr(&it)?.original,\n-                ast::Pat(it) => sema.type_of_pat(&it)?.original,\n-                ast::SelfParam(it) => sema.type_of_self(&it)?,\n-                ast::Type(it) => sema.resolve_type(&it)?,\n-                ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n-                // can't match on RecordExprField directly as `ast::Expr` will match an iteration too early otherwise\n-                ast::NameRef(it) => {\n-                    if let Some(record_field) = ast::RecordExprField::for_name_ref(&it) {\n-                        let (_, _, ty) = sema.resolve_record_field(&record_field)?;\n-                        ty\n-                    } else {\n-                        let record_field = ast::RecordPatField::for_field_name_ref(&it)?;\n-                        sema.resolve_record_pat_field(&record_field)?.ty(db)\n-                    }\n-                },\n-                _ => return None,\n-            }\n-        };\n-\n-        Some((ty, node))\n-    })?;\n \n     let mut res = Vec::new();\n     let mut push = |def: hir::ModuleDef| {\n@@ -62,21 +36,56 @@ pub(crate) fn goto_type_definition(\n             }\n         }\n     };\n+    let range = token.text_range();\n+    sema.descend_into_macros(token)\n+        .iter()\n+        .filter_map(|token| {\n+            let ty = sema.token_ancestors_with_macros(token.clone()).find_map(|node| {\n+                let ty = match_ast! {\n+                    match node {\n+                        ast::Expr(it) => sema.type_of_expr(&it)?.original,\n+                        ast::Pat(it) => sema.type_of_pat(&it)?.original,\n+                        ast::SelfParam(it) => sema.type_of_self(&it)?,\n+                        ast::Type(it) => sema.resolve_type(&it)?,\n+                        ast::RecordField(it) => sema.to_def(&it).map(|d| d.ty(db.upcast()))?,\n+                        // can't match on RecordExprField directly as `ast::Expr` will match an iteration too early otherwise\n+                        ast::NameRef(it) => {\n+                            if let Some(record_field) = ast::RecordExprField::for_name_ref(&it) {\n+                                let (_, _, ty) = sema.resolve_record_field(&record_field)?;\n+                                ty\n+                            } else {\n+                                let record_field = ast::RecordPatField::for_field_name_ref(&it)?;\n+                                sema.resolve_record_pat_field(&record_field)?.ty(db)\n+                            }\n+                        },\n+                        _ => return None,\n+                    }\n+                };\n \n-    let ty = ty.strip_references();\n-    ty.walk(db, |t| {\n-        if let Some(adt) = t.as_adt() {\n-            push(adt.into());\n-        } else if let Some(trait_) = t.as_dyn_trait() {\n-            push(trait_.into());\n-        } else if let Some(traits) = t.as_impl_traits(db) {\n-            traits.into_iter().for_each(|it| push(it.into()));\n-        } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n-            push(trait_.into());\n-        }\n-    });\n-\n-    Some(RangeInfo::new(node.text_range(), res))\n+                Some(ty)\n+            });\n+            ty\n+        })\n+        .for_each(|ty| {\n+            // collect from each `ty` into the `res` result vec\n+            let ty = ty.strip_references();\n+            ty.walk(db, |t| {\n+                if let Some(adt) = t.as_adt() {\n+                    push(adt.into());\n+                } else if let Some(trait_) = t.as_dyn_trait() {\n+                    push(trait_.into());\n+                } else if let Some(traits) = t.as_impl_traits(db) {\n+                    traits.into_iter().for_each(|it| push(it.into()));\n+                } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n+                    push(trait_.into());\n+                }\n+            });\n+        });\n+    if res.is_empty() {\n+        None\n+    } else {\n+        Some(RangeInfo::new(range, res))\n+    }\n }\n \n #[cfg(test)]"}]}