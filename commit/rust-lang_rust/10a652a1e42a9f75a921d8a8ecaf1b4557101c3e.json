{"sha": "10a652a1e42a9f75a921d8a8ecaf1b4557101c3e", "node_id": "C_kwDOAAsO6NoAKDEwYTY1MmExZTQyYTlmNzVhOTIxZDhhOGVjYWYxYjQ1NTcxMDFjM2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T15:28:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-09T15:28:42Z"}, "message": "Auto merge of #14300 - lnicola:rustc-flycheck, r=lnicola\n\nfix: Watch both stdout and stderr in flycheck\n\nFixes #14217\n\nThis isn't great because it un-mixes the messages from the two streams, but maybe it's not such a big problem?", "tree": {"sha": "75a98daf3a1cad165bdc15f6fe67983825090089", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a98daf3a1cad165bdc15f6fe67983825090089"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e", "html_url": "https://github.com/rust-lang/rust/commit/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de3b12d686eac1ea6159e098e64277fd83528d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/de3b12d686eac1ea6159e098e64277fd83528d71", "html_url": "https://github.com/rust-lang/rust/commit/de3b12d686eac1ea6159e098e64277fd83528d71"}, {"sha": "209cf7dc61d044aab5c72079f5aec889af13a54d", "url": "https://api.github.com/repos/rust-lang/rust/commits/209cf7dc61d044aab5c72079f5aec889af13a54d", "html_url": "https://github.com/rust-lang/rust/commit/209cf7dc61d044aab5c72079f5aec889af13a54d"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "accb14a51deb9f9254ac5652bf843bf68fca9873", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10a652a1e42a9f75a921d8a8ecaf1b4557101c3e/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=10a652a1e42a9f75a921d8a8ecaf1b4557101c3e", "patch": "@@ -456,42 +456,56 @@ impl CargoActor {\n         // simply skip a line if it doesn't parse, which just ignores any\n         // erroneous output.\n \n-        let mut error = String::new();\n-        let mut read_at_least_one_message = false;\n+        let mut stdout_errors = String::new();\n+        let mut stderr_errors = String::new();\n+        let mut read_at_least_one_stdout_message = false;\n+        let mut read_at_least_one_stderr_message = false;\n+        let process_line = |line: &str, error: &mut String| {\n+            // Try to deserialize a message from Cargo or Rustc.\n+            let mut deserializer = serde_json::Deserializer::from_str(line);\n+            deserializer.disable_recursion_limit();\n+            if let Ok(message) = JsonMessage::deserialize(&mut deserializer) {\n+                match message {\n+                    // Skip certain kinds of messages to only spend time on what's useful\n+                    JsonMessage::Cargo(message) => match message {\n+                        cargo_metadata::Message::CompilerArtifact(artifact) if !artifact.fresh => {\n+                            self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap();\n+                        }\n+                        cargo_metadata::Message::CompilerMessage(msg) => {\n+                            self.sender.send(CargoMessage::Diagnostic(msg.message)).unwrap();\n+                        }\n+                        _ => (),\n+                    },\n+                    JsonMessage::Rustc(message) => {\n+                        self.sender.send(CargoMessage::Diagnostic(message)).unwrap();\n+                    }\n+                }\n+                return true;\n+            }\n+\n+            error.push_str(line);\n+            error.push('\\n');\n+            return false;\n+        };\n         let output = streaming_output(\n             self.stdout,\n             self.stderr,\n             &mut |line| {\n-                read_at_least_one_message = true;\n-\n-                // Try to deserialize a message from Cargo or Rustc.\n-                let mut deserializer = serde_json::Deserializer::from_str(line);\n-                deserializer.disable_recursion_limit();\n-                if let Ok(message) = JsonMessage::deserialize(&mut deserializer) {\n-                    match message {\n-                        // Skip certain kinds of messages to only spend time on what's useful\n-                        JsonMessage::Cargo(message) => match message {\n-                            cargo_metadata::Message::CompilerArtifact(artifact)\n-                                if !artifact.fresh =>\n-                            {\n-                                self.sender.send(CargoMessage::CompilerArtifact(artifact)).unwrap();\n-                            }\n-                            cargo_metadata::Message::CompilerMessage(msg) => {\n-                                self.sender.send(CargoMessage::Diagnostic(msg.message)).unwrap();\n-                            }\n-                            _ => (),\n-                        },\n-                        JsonMessage::Rustc(message) => {\n-                            self.sender.send(CargoMessage::Diagnostic(message)).unwrap();\n-                        }\n-                    }\n+                if process_line(line, &mut stdout_errors) {\n+                    read_at_least_one_stdout_message = true;\n                 }\n             },\n             &mut |line| {\n-                error.push_str(line);\n-                error.push('\\n');\n+                if process_line(line, &mut stderr_errors) {\n+                    read_at_least_one_stderr_message = true;\n+                }\n             },\n         );\n+\n+        let read_at_least_one_message =\n+            read_at_least_one_stdout_message || read_at_least_one_stderr_message;\n+        let mut error = stdout_errors;\n+        error.push_str(&stderr_errors);\n         match output {\n             Ok(_) => Ok((read_at_least_one_message, error)),\n             Err(e) => Err(io::Error::new(e.kind(), format!(\"{e:?}: {error}\"))),"}]}