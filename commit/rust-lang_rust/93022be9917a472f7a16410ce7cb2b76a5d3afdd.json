{"sha": "93022be9917a472f7a16410ce7cb2b76a5d3afdd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDIyYmU5OTE3YTQ3MmY3YTE2NDEwY2U3Y2IyYjc2YTVkM2FmZGQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-13T16:04:06Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-16T09:07:34Z"}, "message": "bootstrap: read config from $RUST_BOOTSTRAP_CONFIG\n\nThis commit modifies bootstrap so that `config.toml` is read first from\n`RUST_BOOTSTRAP_CONFIG`, then `--config` and finally `config.toml` in the\ncurrent directory.\n\nThis is a subjective change, intended to improve the ergnomics when\nusing \"development shells\" for rustc development (for example, using tools\nsuch as Nix) which set environment variables to ensure a reproducible\nenvironment (these development shells can then be version controlled). By\noptionally reading `config.toml` from an environment variable, a `config.toml`\ncan be defined in the development shell and a path to it exposed in the\n`RUST_BOOTSTRAP_CONFIG` environment variable - avoiding the need to manually\nsymlink the contents of this file to `config.toml` in the working\ndirectory.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "b3cd840ac3de610898a2e6914e6eb2b2996b7e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cd840ac3de610898a2e6914e6eb2b2996b7e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93022be9917a472f7a16410ce7cb2b76a5d3afdd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl7oi9YACgkQJZLnbIc4\nH9mCcg/9FXfAmXNUGKqbCptYBoZUk3QOH5QPnQ1BuZIQf0lVMmUXAZ4XA07o5XgY\nGgoYvF03OJlqfukjn/8RGie6+1hyd4a0jnYYaftld336xz823ZGtsm4im0PK7kmt\nD1job90uyE9Mg2vWPiSZmmIsMbKwtgMpxb0yM1ei2OkzS89NKiYgIsyUyKcTUKY7\nqW5y6IMPhH7pLRf5n2cYpIk4fOHukUYzCsLfxKRSVD/16rvqvenwk74ESv7OF+n4\nulHSn23NqFwGPyM+7Le/D5LWSg179inL1r9SoAyyYWw57tkG9BKlyDpqI4bBEYXb\n0w6qQqyFOO2gYMbldDymzbfXJ/1rmWXm7iebk3r9GDEBVta0RwNyfkR9k5TbMRcB\nDkWombkfVQ0WH6qH/LloGB0GYzEAQFRuyDfSJeBF21Eq+JL1dz4slMJPFn2OjeWP\nPG0PEqQJQvF+v4C8yu8t9GGlccbI6/ZOrmhpqSx0UDaWVB/noZ5jqxE5aINVnLDj\nt36I1QZxnkO12g/w+yXGTH+dYe78ahsjgkMGWP1sjn1pmSdydKP6ff1c+jLHoi7c\nxJ8/cZgqN1P8zUAAQDSODjMpuGuI616Z2bkuV/SfmQrYR/f8sD6bo6+AGl3LXqdv\nycMiBiAYVa30opfEdT7g5Z0fdbyRQgbdTiKyzibBCYCJBQZy0UU=\n=riXG\n-----END PGP SIGNATURE-----", "payload": "tree b3cd840ac3de610898a2e6914e6eb2b2996b7e42\nparent 1fb612bd15bb3ef098fd24c20d0727de573b4410\nauthor David Wood <david@davidtw.co> 1592064246 +0100\ncommitter David Wood <david@davidtw.co> 1592298454 +0100\n\nbootstrap: read config from $RUST_BOOTSTRAP_CONFIG\n\nThis commit modifies bootstrap so that `config.toml` is read first from\n`RUST_BOOTSTRAP_CONFIG`, then `--config` and finally `config.toml` in the\ncurrent directory.\n\nThis is a subjective change, intended to improve the ergnomics when\nusing \"development shells\" for rustc development (for example, using tools\nsuch as Nix) which set environment variables to ensure a reproducible\nenvironment (these development shells can then be version controlled). By\noptionally reading `config.toml` from an environment variable, a `config.toml`\ncan be defined in the development shell and a path to it exposed in the\n`RUST_BOOTSTRAP_CONFIG` environment variable - avoiding the need to manually\nsymlink the contents of this file to `config.toml` in the working\ndirectory.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93022be9917a472f7a16410ce7cb2b76a5d3afdd", "html_url": "https://github.com/rust-lang/rust/commit/93022be9917a472f7a16410ce7cb2b76a5d3afdd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93022be9917a472f7a16410ce7cb2b76a5d3afdd/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fb612bd15bb3ef098fd24c20d0727de573b4410", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fb612bd15bb3ef098fd24c20d0727de573b4410", "html_url": "https://github.com/rust-lang/rust/commit/1fb612bd15bb3ef098fd24c20d0727de573b4410"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "969d16d11e81b7a578bbbcb769bf412a36da18ec", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93022be9917a472f7a16410ce7cb2b76a5d3afdd/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/93022be9917a472f7a16410ce7cb2b76a5d3afdd/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=93022be9917a472f7a16410ce7cb2b76a5d3afdd", "patch": "@@ -894,7 +894,7 @@ def bootstrap(help_triggered):\n     build.clean = args.clean\n \n     try:\n-        toml_path = args.config or 'config.toml'\n+        toml_path = os.getenv('RUST_BOOTSTRAP_CONFIG') or args.config or 'config.toml'\n         if not os.path.exists(toml_path):\n             toml_path = os.path.join(build.rust_root, toml_path)\n \n@@ -947,6 +947,7 @@ def bootstrap(help_triggered):\n     env[\"SRC\"] = build.rust_root\n     env[\"BOOTSTRAP_PARENT_ID\"] = str(os.getpid())\n     env[\"BOOTSTRAP_PYTHON\"] = sys.executable\n+    env[\"BOOTSTRAP_CONFIG\"] = toml_path\n     env[\"BUILD_DIR\"] = build.build_dir\n     env[\"RUSTC_BOOTSTRAP\"] = '1'\n     env[\"CARGO\"] = build.cargo()"}, {"sha": "47b983868285b93206a847ad8ba89616985bcd9f", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/93022be9917a472f7a16410ce7cb2b76a5d3afdd/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93022be9917a472f7a16410ce7cb2b76a5d3afdd/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=93022be9917a472f7a16410ce7cb2b76a5d3afdd", "patch": "@@ -3,7 +3,7 @@\n //! This module implements the command-line parsing of the build system which\n //! has various flags to configure how it's run.\n \n-use std::fs;\n+use std::env;\n use std::path::PathBuf;\n use std::process;\n \n@@ -433,13 +433,7 @@ Arguments:\n         // Get any optional paths which occur after the subcommand\n         let paths = matches.free[1..].iter().map(|p| p.into()).collect::<Vec<PathBuf>>();\n \n-        let cfg_file = matches.opt_str(\"config\").map(PathBuf::from).or_else(|| {\n-            if fs::metadata(\"config.toml\").is_ok() {\n-                Some(PathBuf::from(\"config.toml\"))\n-            } else {\n-                None\n-            }\n-        });\n+        let cfg_file = env::var_os(\"BOOTSTRAP_CONFIG\").map(PathBuf::from);\n \n         // All subcommands except `clean` can have an optional \"Available paths\" section\n         if matches.opt_present(\"verbose\") {"}]}