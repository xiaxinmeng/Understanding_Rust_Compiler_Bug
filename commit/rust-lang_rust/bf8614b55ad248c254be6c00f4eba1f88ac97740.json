{"sha": "bf8614b55ad248c254be6c00f4eba1f88ac97740", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODYxNGI1NWFkMjQ4YzI1NGJlNmMwMGY0ZWJhMWY4OGFjOTc3NDA=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-16T21:11:17Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:27Z"}, "message": "Rename Builder::alloca to dynamic_alloca", "tree": {"sha": "7c10c65bbf72238562101b81625af85e2bed70d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c10c65bbf72238562101b81625af85e2bed70d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf8614b55ad248c254be6c00f4eba1f88ac97740", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8614b55ad248c254be6c00f4eba1f88ac97740", "html_url": "https://github.com/rust-lang/rust/commit/bf8614b55ad248c254be6c00f4eba1f88ac97740", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf8614b55ad248c254be6c00f4eba1f88ac97740/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5262113fa6a4701d7f97a1d4e6f6ecf248b623f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5262113fa6a4701d7f97a1d4e6f6ecf248b623f4", "html_url": "https://github.com/rust-lang/rust/commit/5262113fa6a4701d7f97a1d4e6f6ecf248b623f4"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "6aee8fa5f97c5520521bdbaaa8b2a32e7c81040a", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=bf8614b55ad248c254be6c00f4eba1f88ac97740", "patch": "@@ -645,11 +645,7 @@ pub fn alloc_ty<'blk, 'tcx>(bcx: &BlockAndBuilder<'blk, 'tcx>,\n                             ty: Ty<'tcx>,\n                             name: &str) -> ValueRef {\n     assert!(!ty.has_param_types());\n-    alloca(bcx, type_of::type_of(bcx.ccx(), ty), name)\n-}\n-\n-pub fn alloca(cx: &BlockAndBuilder, ty: Type, name: &str) -> ValueRef {\n-    cx.fcx().alloca(ty, name)\n+    bcx.fcx().alloca(type_of::type_of(bcx.ccx(), ty), name)\n }\n \n impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {"}, {"sha": "8c6a53da0e1976fbf4dc60455a34c3cb498ee0ec", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=bf8614b55ad248c254be6c00f4eba1f88ac97740", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n     }\n \n-    pub fn alloca(&self, ty: Type, name: &str) -> ValueRef {\n+    pub fn dynamic_alloca(&self, ty: Type, name: &str) -> ValueRef {\n         self.count_insn(\"alloca\");\n         unsafe {\n             if name.is_empty() {"}, {"sha": "dfcaedcba7c4c98ad0c3111456f52ea6d2a0a108", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=bf8614b55ad248c254be6c00f4eba1f88ac97740", "patch": "@@ -197,7 +197,7 @@ impl<'tcx> CleanupScope<'tcx> {\n             let addr = match fcx.landingpad_alloca.get() {\n                 Some(addr) => addr,\n                 None => {\n-                    let addr = base::alloca(&pad_bcx, common::val_ty(llretval), \"\");\n+                    let addr = pad_bcx.fcx().alloca(common::val_ty(llretval), \"\");\n                     Lifetime::Start.call(&pad_bcx, addr);\n                     fcx.landingpad_alloca.set(Some(addr));\n                     addr"}, {"sha": "5d490307552283c909df11eecf76ca6887748259", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=bf8614b55ad248c254be6c00f4eba1f88ac97740", "patch": "@@ -306,7 +306,7 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     // Used and maintained by the debuginfo module.\n     pub debug_context: debuginfo::FunctionDebugContext,\n \n-    owned_builder: OwnedBuilder<'a, 'tcx>,\n+    alloca_builder: OwnedBuilder<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n@@ -358,7 +358,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             param_substs: param_substs,\n             ccx: ccx,\n             debug_context: debug_context,\n-            owned_builder: OwnedBuilder::new_with_ccx(ccx),\n+            alloca_builder: OwnedBuilder::new_with_ccx(ccx),\n         }\n     }\n \n@@ -374,23 +374,22 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n             llvm::LLVMGetFirstInstruction(entry_bcx.llbb())\n         }));\n \n-        self.owned_builder.builder.position_at_start(entry_bcx.llbb());\n+        self.alloca_builder.builder.position_at_start(entry_bcx.llbb());\n \n         if !self.fn_ty.ret.is_ignore() && !skip_retptr {\n             // We normally allocate the llretslotptr, unless we\n             // have been instructed to skip it for immediate return\n             // values, or there is nothing to return at all.\n \n-            // We create an alloca to hold a pointer of type `ret.original_ty`\n-            // which will hold the pointer to the right alloca which has the\n-            // final ret value\n-            let llty = self.fn_ty.ret.memory_ty(self.ccx);\n             // But if there are no nested returns, we skip the indirection\n             // and have a single retslot\n             let slot = if self.fn_ty.ret.is_indirect() {\n                 get_param(self.llfn, 0)\n             } else {\n-                self.alloca(llty, \"sret_slot\")\n+                // We create an alloca to hold a pointer of type `ret.original_ty`\n+                // which will hold the pointer to the right alloca which has the\n+                // final ret value\n+                self.alloca(self.fn_ty.ret.memory_ty(self.ccx), \"sret_slot\")\n             };\n \n             self.llretslotptr.set(Some(slot));\n@@ -514,7 +513,7 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n     }\n \n     pub fn alloca(&self, ty: Type, name: &str) -> ValueRef {\n-        self.owned_builder.builder.alloca(ty, name)\n+        self.alloca_builder.builder.dynamic_alloca(ty, name)\n     }\n }\n "}, {"sha": "45f9279049cd784877e8997f03c22340b7b2cccd", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=bf8614b55ad248c254be6c00f4eba1f88ac97740", "patch": "@@ -828,7 +828,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             slot\n         } else {\n             let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n-            let slot = base::alloca(bcx, llretty, \"personalityslot\");\n+            let slot = bcx.fcx().alloca(llretty, \"personalityslot\");\n             self.llpersonalityslot = Some(slot);\n             Lifetime::Start.call(bcx, slot);\n             slot"}, {"sha": "c721fa0d2ac786d7c1e2e33186c94c4071e242f7", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8614b55ad248c254be6c00f4eba1f88ac97740/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=bf8614b55ad248c254be6c00f4eba1f88ac97740", "patch": "@@ -468,9 +468,7 @@ fn arg_local_refs<'bcx, 'tcx>(bcx: &BlockAndBuilder<'bcx, 'tcx>,\n             // doesn't actually strip the offset when splitting the closure\n             // environment into its components so it ends up out of bounds.\n             let env_ptr = if !env_ref {\n-                use base::*;\n-                use common::*;\n-                let alloc = alloca(bcx, val_ty(llval), \"__debuginfo_env_ptr\");\n+                let alloc = bcx.fcx().alloca(common::val_ty(llval), \"__debuginfo_env_ptr\");\n                 bcx.store(llval, alloc);\n                 alloc\n             } else {"}]}