{"sha": "13d008d1e8b671e78c92e61b42ae7b82f5736121", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZDAwOGQxZThiNjcxZTc4YzkyZTYxYjQyYWU3YjgyZjU3MzYxMjE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-04-10T18:22:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-04-11T17:47:53Z"}, "message": "Touch up rls integration\n\n* Use the right version when building combined installer\n* Update dependencies of rls as it depends on rustc and plugins\n* Fix build-manifest and the versions it uses for the rls", "tree": {"sha": "c075751c8cbe52ebb11eb3a53f2d0d77bd3022d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c075751c8cbe52ebb11eb3a53f2d0d77bd3022d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d008d1e8b671e78c92e61b42ae7b82f5736121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d008d1e8b671e78c92e61b42ae7b82f5736121", "html_url": "https://github.com/rust-lang/rust/commit/13d008d1e8b671e78c92e61b42ae7b82f5736121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d008d1e8b671e78c92e61b42ae7b82f5736121/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5766d526a250c92792ec877a65003d43683c94e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5766d526a250c92792ec877a65003d43683c94e5", "html_url": "https://github.com/rust-lang/rust/commit/5766d526a250c92792ec877a65003d43683c94e5"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "4729175045b41b688ab903120860866ce7a22ba9", "filename": "cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo?ref=13d008d1e8b671e78c92e61b42ae7b82f5736121", "patch": "@@ -1 +1 @@\n-Subproject commit 4e95c6b41eca3388f54dd5f7787366ad2df637b5\n+Subproject commit 4729175045b41b688ab903120860866ce7a22ba9"}, {"sha": "4328c4e3f1d4c58126c11d62b428557f8b2845be", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=13d008d1e8b671e78c92e61b42ae7b82f5736121", "patch": "@@ -39,8 +39,10 @@ use util::{cp_r, libdir, is_dylib, cp_filtered, copy, exe};\n fn pkgname(build: &Build, component: &str) -> String {\n     if component == \"cargo\" {\n         format!(\"{}-{}\", component, build.cargo_package_vers())\n+    } else if component == \"rls\" {\n+        format!(\"{}-{}\", component, build.package_vers(&build.release_num(\"rls\")))\n     } else {\n-        assert!(component.starts_with(\"rust\") || component == \"rls\");\n+        assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, build.rust_package_vers())\n     }\n }\n@@ -598,7 +600,8 @@ pub fn rls(build: &Build, stage: u32, target: &str) {\n \n     let src = build.src.join(\"rls\");\n     let release_num = build.release_num(\"rls\");\n-    let name = format!(\"rls-{}\", build.package_vers(&release_num));\n+    let name = pkgname(build, \"rls\");\n+    let version = build.rls_info.version(build, &release_num);\n \n     let tmp = tmpdir(build);\n     let image = tmp.join(\"rls-image\");\n@@ -614,6 +617,15 @@ pub fn rls(build: &Build, stage: u32, target: &str) {\n     install(&src.join(\"LICENSE-MIT\"), &doc, 0o644);\n     install(&src.join(\"LICENSE-APACHE\"), &doc, 0o644);\n \n+    // Prepare the overlay\n+    let overlay = tmp.join(\"rls-overlay\");\n+    drop(fs::remove_dir_all(&overlay));\n+    t!(fs::create_dir_all(&overlay));\n+    install(&src.join(\"README.md\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-MIT\"), &overlay, 0o644);\n+    install(&src.join(\"LICENSE-APACHE\"), &overlay, 0o644);\n+    t!(t!(File::create(overlay.join(\"version\"))).write_all(version.as_bytes()));\n+\n     // Generate the installer tarball\n     let mut cmd = Command::new(\"sh\");\n     cmd.arg(sanitize_sh(&build.src.join(\"src/rust-installer/gen-installer.sh\")))\n@@ -623,6 +635,7 @@ pub fn rls(build: &Build, stage: u32, target: &str) {\n        .arg(format!(\"--image-dir={}\", sanitize_sh(&image)))\n        .arg(format!(\"--work-dir={}\", sanitize_sh(&tmpdir(build))))\n        .arg(format!(\"--output-dir={}\", sanitize_sh(&distdir(build))))\n+       .arg(format!(\"--non-installed-overlay={}\", sanitize_sh(&overlay)))\n        .arg(format!(\"--package-name={}-{}\", name, target))\n        .arg(\"--component-name=rls\")\n        .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n@@ -991,6 +1004,7 @@ pub fn hash_and_sign(build: &Build) {\n     cmd.arg(today.trim());\n     cmd.arg(build.rust_package_vers());\n     cmd.arg(build.package_vers(&build.release_num(\"cargo\")));\n+    cmd.arg(build.package_vers(&build.release_num(\"rls\")));\n     cmd.arg(addr);\n \n     t!(fs::create_dir_all(distdir(build)));"}, {"sha": "d711b63ea2e26f348b9c4e679c32e88cc076cf15", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=13d008d1e8b671e78c92e61b42ae7b82f5736121", "patch": "@@ -151,6 +151,7 @@ pub struct Build {\n     out: PathBuf,\n     rust_info: channel::GitInfo,\n     cargo_info: channel::GitInfo,\n+    rls_info: channel::GitInfo,\n     local_rebuild: bool,\n \n     // Probed tools at runtime\n@@ -234,6 +235,7 @@ impl Build {\n         };\n         let rust_info = channel::GitInfo::new(&src);\n         let cargo_info = channel::GitInfo::new(&src.join(\"cargo\"));\n+        let rls_info = channel::GitInfo::new(&src.join(\"rls\"));\n         let src_is_git = src.join(\".git\").exists();\n \n         Build {\n@@ -246,6 +248,7 @@ impl Build {\n \n             rust_info: rust_info,\n             cargo_info: cargo_info,\n+            rls_info: rls_info,\n             local_rebuild: local_rebuild,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),"}, {"sha": "596cbcf01bb8088e4f7a15772a6f23c3b3967e8d", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=13d008d1e8b671e78c92e61b42ae7b82f5736121", "patch": "@@ -572,7 +572,13 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .run(move |s| compile::tool(build, s.stage, s.target, \"cargo\"));\n     rules.build(\"tool-rls\", \"rls\")\n          .host(true)\n-         .dep(|s| s.name(\"libstd\"))\n+         .dep(|s| s.name(\"librustc\"))\n+         .dep(move |s| {\n+             // rls, like cargo, uses procedural macros\n+             s.name(\"librustc-link\")\n+              .target(&build.config.build)\n+              .host(&build.config.build)\n+         })\n          .run(move |s| compile::tool(build, s.stage, s.target, \"rls\"));\n \n     // ========================================================================\n@@ -695,7 +701,6 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n          .run(move |s| dist::docs(build, s.stage, s.target));\n     rules.dist(\"dist-analysis\", \"analysis\")\n          .dep(|s| s.name(\"dist-std\"))\n-         .default(true)\n          .only_host_build(true)\n          .run(move |s| dist::analysis(build, &s.compiler(), s.target));\n     rules.dist(\"dist-rls\", \"rls\")"}, {"sha": "248f3d49f09359fb95c1f4df7624da2ea0a11d2d", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d008d1e8b671e78c92e61b42ae7b82f5736121/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=13d008d1e8b671e78c92e61b42ae7b82f5736121", "patch": "@@ -135,6 +135,7 @@ macro_rules! t {\n struct Builder {\n     rust_release: String,\n     cargo_release: String,\n+    rls_release: String,\n     input: PathBuf,\n     output: PathBuf,\n     gpg_passphrase: String,\n@@ -143,6 +144,7 @@ struct Builder {\n     date: String,\n     rust_version: String,\n     cargo_version: String,\n+    rls_version: String,\n }\n \n fn main() {\n@@ -152,13 +154,15 @@ fn main() {\n     let date = args.next().unwrap();\n     let rust_release = args.next().unwrap();\n     let cargo_release = args.next().unwrap();\n+    let rls_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n     let mut passphrase = String::new();\n     t!(io::stdin().read_to_string(&mut passphrase));\n \n     Builder {\n         rust_release: rust_release,\n         cargo_release: cargo_release,\n+        rls_release: rls_release,\n         input: input,\n         output: output,\n         gpg_passphrase: passphrase,\n@@ -167,13 +171,15 @@ fn main() {\n         date: date,\n         rust_version: String::new(),\n         cargo_version: String::new(),\n+        rls_version: String::new(),\n     }.build();\n }\n \n impl Builder {\n     fn build(&mut self) {\n         self.rust_version = self.version(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n+        self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let Manifest { manifest_version, date, pkg } = self.build_manifest();\n@@ -223,11 +229,8 @@ impl Builder {\n         self.package(\"rust-std\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-docs\", &mut manifest.pkg, TARGETS);\n         self.package(\"rust-src\", &mut manifest.pkg, &[\"*\"]);\n-\n-        if self.rust_release == \"nightly\" {\n-            self.package(\"rls\", &mut manifest.pkg, HOSTS);\n-            self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n-        }\n+        self.package(\"rls\", &mut manifest.pkg, HOSTS);\n+        self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\").to_string(),\n@@ -266,23 +269,21 @@ impl Builder {\n                 });\n             }\n \n+            extensions.push(Component {\n+                pkg: \"rls\".to_string(),\n+                target: host.to_string(),\n+            });\n+            extensions.push(Component {\n+                pkg: \"rust-analysis\".to_string(),\n+                target: host.to_string(),\n+            });\n             for target in TARGETS {\n                 if target != host {\n                     extensions.push(Component {\n                         pkg: \"rust-std\".to_string(),\n                         target: target.to_string(),\n                     });\n                 }\n-                if self.rust_release == \"nightly\" {\n-                    extensions.push(Component {\n-                        pkg: \"rust-analysis\".to_string(),\n-                        target: target.to_string(),\n-                    });\n-                    extensions.push(Component {\n-                        pkg: \"rls\".to_string(),\n-                        target: host.to_string(),\n-                    });\n-                }\n             }\n             extensions.push(Component {\n                 pkg: \"rust-src\".to_string(),\n@@ -348,6 +349,8 @@ impl Builder {\n             format!(\"rust-src-{}.tar.gz\", self.rust_release)\n         } else if component == \"cargo\" {\n             format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target)\n+        } else if component == \"rls\" {\n+            format!(\"rls-{}-{}.tar.gz\", self.rls_release, target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)\n         }\n@@ -356,6 +359,8 @@ impl Builder {\n     fn cached_version(&self, component: &str) -> &str {\n         if component == \"cargo\" {\n             &self.cargo_version\n+        } else if component == \"rls\" {\n+            &self.rls_version\n         } else {\n             &self.rust_version\n         }"}]}