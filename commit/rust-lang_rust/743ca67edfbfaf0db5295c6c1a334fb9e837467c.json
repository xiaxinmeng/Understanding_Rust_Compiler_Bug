{"sha": "743ca67edfbfaf0db5295c6c1a334fb9e837467c", "node_id": "C_kwDOAAsO6NoAKDc0M2NhNjdlZGZiZmFmMGRiNTI5NWM2YzFhMzM0ZmI5ZTgzNzQ2N2M", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-03T05:30:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-03T05:30:24Z"}, "message": "Rollup merge of #107602 - estebank:anon-enum-access, r=compiler-errors\n\nParse and recover from type ascription in patterns\n\nReintroduce part of #106960, which was reverted in #107478.\n\nr? `@compiler-errors`", "tree": {"sha": "d8d9fc5ca56a779879f03b9bc3d5e9ae93674b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d9fc5ca56a779879f03b9bc3d5e9ae93674b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743ca67edfbfaf0db5295c6c1a334fb9e837467c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3JvwCRBK7hj4Ov3rIwAArpgIAKuETi3KjqOU1IAQmDkcjOJk\n5kXcjYhKYwtkUN3tcSK5L2vjKv21SqOiZCqL2GmbbIFIoIVXNUA1HQwwvI40JbZ9\nv17b7nZrPsiEdnZcg0Wd3J+GTLMWKiMI8vcmF8YrEddyEAutHVuGQCOiPk3hAoyS\nuE1oZoLbMEMQLbHQvoWB+V/dE/b1W5Vvd7lb8GY++QbhDgVOu8+vRiqApp3ZXIJv\ntZ2MU/c2Ct5mgGvy8gG1sHWHMGp/kNStA04cRb2PcI8oJH7RXtAmVKn3wZKD8Lba\nDneHGv+PK1I3CdHdpEQsuuVLiC+lOCqpxit0CNqG7BrQRfUNvICgnVJrzcKLsgc=\n=Lb8C\n-----END PGP SIGNATURE-----\n", "payload": "tree d8d9fc5ca56a779879f03b9bc3d5e9ae93674b4a\nparent 86015515b5817390d652eae2fd765b89509b5331\nparent 0ba687a95ee64a013b71ca7b606896e60c6182f0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675402224 +0100\ncommitter GitHub <noreply@github.com> 1675402224 +0100\n\nRollup merge of #107602 - estebank:anon-enum-access, r=compiler-errors\n\nParse and recover from type ascription in patterns\n\nReintroduce part of #106960, which was reverted in #107478.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743ca67edfbfaf0db5295c6c1a334fb9e837467c", "html_url": "https://github.com/rust-lang/rust/commit/743ca67edfbfaf0db5295c6c1a334fb9e837467c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743ca67edfbfaf0db5295c6c1a334fb9e837467c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86015515b5817390d652eae2fd765b89509b5331", "url": "https://api.github.com/repos/rust-lang/rust/commits/86015515b5817390d652eae2fd765b89509b5331", "html_url": "https://github.com/rust-lang/rust/commit/86015515b5817390d652eae2fd765b89509b5331"}, {"sha": "0ba687a95ee64a013b71ca7b606896e60c6182f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ba687a95ee64a013b71ca7b606896e60c6182f0", "html_url": "https://github.com/rust-lang/rust/commit/0ba687a95ee64a013b71ca7b606896e60c6182f0"}], "stats": {"total": 203, "additions": 164, "deletions": 39}, "files": [{"sha": "cd9d85b1d919c9c3f45541e83a9223857550be9c", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/743ca67edfbfaf0db5295c6c1a334fb9e837467c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743ca67edfbfaf0db5295c6c1a334fb9e837467c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=743ca67edfbfaf0db5295c6c1a334fb9e837467c", "patch": "@@ -2405,26 +2405,42 @@ impl<'a> Parser<'a> {\n         if !matches!(first_pat.kind, PatKind::Ident(_, _, None) | PatKind::Path(..))\n             || !self.look_ahead(1, |token| token.is_ident() && !token.is_reserved_ident())\n         {\n+            let mut snapshot_type = self.create_snapshot_for_diagnostic();\n+            snapshot_type.bump(); // `:`\n+            match snapshot_type.parse_ty() {\n+                Err(inner_err) => {\n+                    inner_err.cancel();\n+                }\n+                Ok(ty) => {\n+                    let Err(mut err) = self.expected_one_of_not_found(&[], &[]) else {\n+                        return first_pat;\n+                    };\n+                    err.span_label(ty.span, \"specifying the type of a pattern isn't supported\");\n+                    self.restore_snapshot(snapshot_type);\n+                    let span = first_pat.span.to(ty.span);\n+                    first_pat = self.mk_pat(span, PatKind::Wild);\n+                    err.emit();\n+                }\n+            }\n             return first_pat;\n         }\n         // The pattern looks like it might be a path with a `::` -> `:` typo:\n         // `match foo { bar:baz => {} }`\n-        let span = self.token.span;\n+        let colon_span = self.token.span;\n         // We only emit \"unexpected `:`\" error here if we can successfully parse the\n         // whole pattern correctly in that case.\n-        let snapshot = self.create_snapshot_for_diagnostic();\n+        let mut snapshot_pat = self.create_snapshot_for_diagnostic();\n+        let mut snapshot_type = self.create_snapshot_for_diagnostic();\n \n         // Create error for \"unexpected `:`\".\n         match self.expected_one_of_not_found(&[], &[]) {\n             Err(mut err) => {\n-                self.bump(); // Skip the `:`.\n-                match self.parse_pat_no_top_alt(expected) {\n+                // Skip the `:`.\n+                snapshot_pat.bump();\n+                snapshot_type.bump();\n+                match snapshot_pat.parse_pat_no_top_alt(expected) {\n                     Err(inner_err) => {\n-                        // Carry on as if we had not done anything, callers will emit a\n-                        // reasonable error.\n                         inner_err.cancel();\n-                        err.cancel();\n-                        self.restore_snapshot(snapshot);\n                     }\n                     Ok(mut pat) => {\n                         // We've parsed the rest of the pattern.\n@@ -2488,22 +2504,33 @@ impl<'a> Parser<'a> {\n                             _ => {}\n                         }\n                         if show_sugg {\n-                            err.span_suggestion(\n-                                span,\n+                            err.span_suggestion_verbose(\n+                                colon_span.until(self.look_ahead(1, |t| t.span)),\n                                 \"maybe write a path separator here\",\n                                 \"::\",\n                                 Applicability::MaybeIncorrect,\n                             );\n                         } else {\n                             first_pat = self.mk_pat(new_span, PatKind::Wild);\n                         }\n-                        err.emit();\n+                        self.restore_snapshot(snapshot_pat);\n                     }\n                 }\n+                match snapshot_type.parse_ty() {\n+                    Err(inner_err) => {\n+                        inner_err.cancel();\n+                    }\n+                    Ok(ty) => {\n+                        err.span_label(ty.span, \"specifying the type of a pattern isn't supported\");\n+                        self.restore_snapshot(snapshot_type);\n+                        let new_span = first_pat.span.to(ty.span);\n+                        first_pat = self.mk_pat(new_span, PatKind::Wild);\n+                    }\n+                }\n+                err.emit();\n             }\n             _ => {\n                 // Carry on as if we had not done anything. This should be unreachable.\n-                self.restore_snapshot(snapshot);\n             }\n         };\n         first_pat"}, {"sha": "e1ea38f2795df698983f335bbf6b77f13d29dad1", "filename": "tests/ui/parser/issues/issue-87086-colon-path-sep.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.rs?ref=743ca67edfbfaf0db5295c6c1a334fb9e837467c", "patch": "@@ -68,7 +68,6 @@ fn main() {\n         Foo:Bar::Baz => {}\n         //~^ ERROR: expected one of\n         //~| HELP: maybe write a path separator here\n-        //~| ERROR: failed to resolve: `Bar` is a variant, not a module\n     }\n     match myfoo {\n         Foo::Bar => {}"}, {"sha": "63b072ac4cdc68c6c4f9ec8734f49945c45de38e", "filename": "tests/ui/parser/issues/issue-87086-colon-path-sep.stderr", "status": "modified", "additions": 55, "deletions": 26, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissues%2Fissue-87086-colon-path-sep.stderr?ref=743ca67edfbfaf0db5295c6c1a334fb9e837467c", "patch": "@@ -2,89 +2,118 @@ error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:17:12\n    |\n LL |         Foo:Bar => {}\n-   |            ^\n+   |            ^--- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         Foo::Bar => {}\n+   |            ~~\n \n error: expected one of `!`, `(`, `...`, `..=`, `..`, `::`, `{`, or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:23:17\n    |\n LL |         qux::Foo:Bar => {}\n-   |                 ^\n+   |                 ^--- specifying the type of a pattern isn't supported\n    |                 |\n    |                 expected one of 8 possible tokens\n-   |                 help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         qux::Foo::Bar => {}\n+   |                 ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:29:12\n    |\n LL |         qux:Foo::Baz => {}\n-   |            ^\n+   |            ^-------- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         qux::Foo::Baz => {}\n+   |            ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:35:12\n    |\n LL |         qux: Foo::Baz if true => {}\n-   |            ^\n+   |            ^ -------- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         qux::Foo::Baz if true => {}\n+   |            ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:40:15\n    |\n LL |     if let Foo:Bar = f() {\n-   |               ^\n+   |               ^--- specifying the type of a pattern isn't supported\n    |               |\n    |               expected one of `@` or `|`\n-   |               help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |     if let Foo::Bar = f() {\n+   |               ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:48:16\n    |\n LL |         ref qux: Foo::Baz => {}\n-   |                ^\n+   |                ^ -------- specifying the type of a pattern isn't supported\n    |                |\n    |                expected one of `@` or `|`\n-   |                help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         ref qux::Foo::Baz => {}\n+   |                ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:57:16\n    |\n LL |         mut qux: Foo::Baz => {}\n-   |                ^\n+   |                ^ -------- specifying the type of a pattern isn't supported\n    |                |\n    |                expected one of `@` or `|`\n-   |                help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         mut qux::Foo::Baz => {}\n+   |                ~~\n \n error: expected one of `@` or `|`, found `:`\n   --> $DIR/issue-87086-colon-path-sep.rs:68:12\n    |\n LL |         Foo:Bar::Baz => {}\n-   |            ^\n+   |            ^-------- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         Foo::Bar::Baz => {}\n+   |            ~~\n \n error: expected one of `@` or `|`, found `:`\n-  --> $DIR/issue-87086-colon-path-sep.rs:75:12\n+  --> $DIR/issue-87086-colon-path-sep.rs:74:12\n    |\n LL |         Foo:Bar => {}\n-   |            ^\n+   |            ^--- specifying the type of a pattern isn't supported\n    |            |\n    |            expected one of `@` or `|`\n-   |            help: maybe write a path separator here: `::`\n-\n-error[E0433]: failed to resolve: `Bar` is a variant, not a module\n-  --> $DIR/issue-87086-colon-path-sep.rs:68:13\n    |\n-LL |         Foo:Bar::Baz => {}\n-   |             ^^^ `Bar` is a variant, not a module\n+help: maybe write a path separator here\n+   |\n+LL |         Foo::Bar => {}\n+   |            ~~\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0433`."}, {"sha": "fec168afba1dde5484db1fc8e8817147a3c3189c", "filename": "tests/ui/parser/type-ascription-in-pattern.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.rs?ref=743ca67edfbfaf0db5295c6c1a334fb9e837467c", "patch": "@@ -0,0 +1,16 @@\n+fn foo(x: bool) -> i32 {\n+    match x {\n+        x: i32 => x, //~ ERROR expected\n+        //~^ ERROR mismatched types\n+        true => 42.,\n+        false => 0.333,\n+    }\n+}\n+\n+fn main() {\n+    match foo(true) {\n+        42: i32 => (), //~ ERROR expected\n+        _: f64 => (), //~ ERROR expected\n+        x: i32 => (), //~ ERROR expected\n+    }\n+}"}, {"sha": "0919075499368fc6c6fa8b67a0ed960579593d12", "filename": "tests/ui/parser/type-ascription-in-pattern.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/743ca67edfbfaf0db5295c6c1a334fb9e837467c/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Ftype-ascription-in-pattern.stderr?ref=743ca67edfbfaf0db5295c6c1a334fb9e837467c", "patch": "@@ -0,0 +1,54 @@\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:3:10\n+   |\n+LL |         x: i32 => x,\n+   |          ^ --- specifying the type of a pattern isn't supported\n+   |          |\n+   |          expected one of `@` or `|`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         x::i32 => x,\n+   |          ~~\n+\n+error: expected one of `...`, `..=`, `..`, or `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:12:11\n+   |\n+LL |         42: i32 => (),\n+   |           ^ --- specifying the type of a pattern isn't supported\n+   |           |\n+   |           expected one of `...`, `..=`, `..`, or `|`\n+\n+error: expected `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:13:10\n+   |\n+LL |         _: f64 => (),\n+   |          ^ --- specifying the type of a pattern isn't supported\n+   |          |\n+   |          expected `|`\n+\n+error: expected one of `@` or `|`, found `:`\n+  --> $DIR/type-ascription-in-pattern.rs:14:10\n+   |\n+LL |         x: i32 => (),\n+   |          ^ --- specifying the type of a pattern isn't supported\n+   |          |\n+   |          expected one of `@` or `|`\n+   |\n+help: maybe write a path separator here\n+   |\n+LL |         x::i32 => (),\n+   |          ~~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-ascription-in-pattern.rs:3:19\n+   |\n+LL | fn foo(x: bool) -> i32 {\n+   |                    --- expected `i32` because of return type\n+LL |     match x {\n+LL |         x: i32 => x,\n+   |                   ^ expected `i32`, found `bool`\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}