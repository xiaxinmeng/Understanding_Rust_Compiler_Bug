{"sha": "3e16e9211ef7eff4d421f384140e729df1120372", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMTZlOTIxMWVmN2VmZjRkNDIxZjM4NDE0MGU3MjlkZjExMjAzNzI=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-01-17T03:27:51Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-01-17T03:27:51Z"}, "message": "Add NonZeroUn::is_power_of_two\n\nThis saves instructions on both new and old machines.", "tree": {"sha": "a74213915efb1c110b7fde4f96b70c13978e49d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a74213915efb1c110b7fde4f96b70c13978e49d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e16e9211ef7eff4d421f384140e729df1120372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e16e9211ef7eff4d421f384140e729df1120372", "html_url": "https://github.com/rust-lang/rust/commit/3e16e9211ef7eff4d421f384140e729df1120372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e16e9211ef7eff4d421f384140e729df1120372/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c869d34ae2d87d21db9892d4dc088639bcbe041", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c869d34ae2d87d21db9892d4dc088639bcbe041", "html_url": "https://github.com/rust-lang/rust/commit/6c869d34ae2d87d21db9892d4dc088639bcbe041"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "111feb7dbec69c24a7295298858423bf69b0d9c6", "filename": "library/core/src/num/nonzero.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3e16e9211ef7eff4d421f384140e729df1120372/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e16e9211ef7eff4d421f384140e729df1120372/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fnonzero.rs?ref=3e16e9211ef7eff4d421f384140e729df1120372", "patch": "@@ -286,3 +286,43 @@ nonzero_integers_div! {\n     NonZeroU128(u128);\n     NonZeroUsize(usize);\n }\n+\n+macro_rules! nonzero_unsigned_is_power_of_two {\n+    ( $( $Ty: ident )+ ) => {\n+        $(\n+            impl $Ty {\n+\n+                /// Returns `true` if and only if `self == (1 << k)` for some `k`.\n+                ///\n+                /// On many architectures, this function can perform better than `is_power_of_two()`\n+                /// on the underlying integer type, as special handling of zero can be avoided.\n+                ///\n+                /// # Examples\n+                ///\n+                /// Basic usage:\n+                ///\n+                /// ```\n+                /// #![feature(nonzero_is_power_of_two)]\n+                ///\n+                #[doc = concat!(\"let eight = std::num::\", stringify!($Ty), \"::new(8).unwrap();\")]\n+                /// assert!(eight.is_power_of_two());\n+                #[doc = concat!(\"let ten = std::num::\", stringify!($Ty), \"::new(10).unwrap();\")]\n+                /// assert!(!ten.is_power_of_two());\n+                /// ```\n+                #[unstable(feature = \"nonzero_is_power_of_two\", issue = \"81106\")]\n+                #[inline]\n+                pub const fn is_power_of_two(self) -> bool {\n+                    // LLVM 11 normalizes `unchecked_sub(x, 1) & x == 0` to the implementation seen here.\n+                    // On the basic x86-64 target, this saves 3 instructions for the zero check.\n+                    // On x86_64 with BMI1, being nonzero lets it codegen to `BLSR`, which saves an instruction\n+                    // compared to the `POPCNT` implementation on the underlying integer type.\n+\n+                    intrinsics::ctpop(self.get()) < 2\n+                }\n+\n+            }\n+        )+\n+    }\n+}\n+\n+nonzero_unsigned_is_power_of_two! { NonZeroU8 NonZeroU16 NonZeroU32 NonZeroU64 NonZeroU128 NonZeroUsize }"}]}