{"sha": "459cf467c56a841b3f426663d8eccaa76e94ae03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OWNmNDY3YzU2YTg0MWIzZjQyNjY2M2Q4ZWNjYWE3NmU5NGFlMDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-08-11T12:11:46Z"}, "committer": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-14T07:54:47Z"}, "message": "Rustup", "tree": {"sha": "a191b6a5dca9e2ff09d2781b3790274b89048e3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a191b6a5dca9e2ff09d2781b3790274b89048e3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/459cf467c56a841b3f426663d8eccaa76e94ae03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/459cf467c56a841b3f426663d8eccaa76e94ae03", "html_url": "https://github.com/rust-lang/rust/commit/459cf467c56a841b3f426663d8eccaa76e94ae03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/459cf467c56a841b3f426663d8eccaa76e94ae03/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4c49b145a686c83fb669dabb39b9d13a9c6a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4c49b145a686c83fb669dabb39b9d13a9c6a97", "html_url": "https://github.com/rust-lang/rust/commit/0e4c49b145a686c83fb669dabb39b9d13a9c6a97"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "f2ee62995a011047b7e7f14dcc233346ce79115c", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::intravisit::{Visitor, walk_expr, NestedVisitorMap};\n use syntax::ast::{Attribute, NodeId};\n use syntax::codemap::Span;\n \n-use utils::{in_macro, LimitStack, span_help_and_lint, paths, match_type};\n+use utils::{in_macro, LimitStack, span_help_and_lint, paths, match_type, is_allowed};\n \n /// **What it does:** Checks for methods with high cyclomatic complexity.\n ///\n@@ -79,7 +79,16 @@ impl CyclomaticComplexity {\n         };\n \n         if cc + divergence < match_arms + short_circuits {\n-            report_cc_bug(cx, cc, match_arms, divergence, short_circuits, ret_adjust, span);\n+            report_cc_bug(\n+                cx,\n+                cc,\n+                match_arms,\n+                divergence,\n+                short_circuits,\n+                ret_adjust,\n+                span,\n+                body.id().node_id,\n+            );\n         } else {\n             let mut rust_cc = cc + divergence - match_arms - short_circuits;\n             // prevent degenerate cases where unreachable code contains `return` statements\n@@ -180,7 +189,8 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n }\n \n #[cfg(feature = \"debugging\")]\n-fn report_cc_bug(_: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span) {\n+#[allow(too_many_arguments)]\n+fn report_cc_bug(_: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span, _: NodeId) {\n     span_bug!(\n         span,\n         \"Clippy encountered a bug calculating cyclomatic complexity: cc = {}, arms = {}, \\\n@@ -193,8 +203,9 @@ fn report_cc_bug(_: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, re\n     );\n }\n #[cfg(not(feature = \"debugging\"))]\n-fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span) {\n-    if cx.current_level(CYCLOMATIC_COMPLEXITY) != Level::Allow {\n+#[allow(too_many_arguments)]\n+fn report_cc_bug(cx: &LateContext, cc: u64, narms: u64, div: u64, shorts: u64, returns: u64, span: Span, id: NodeId) {\n+    if !is_allowed(cx, CYCLOMATIC_COMPLEXITY, id) {\n         cx.sess().span_note_without_error(\n             span,\n             &format!("}, {"sha": "77050a0e2994fc19db302cee822576a94a6d918e", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -12,7 +12,7 @@ use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use utils::paths;\n use utils::{match_type, snippet, span_note_and_lint, span_lint_and_then, span_lint_and_sugg, in_external_macro,\n-            expr_block, walk_ptrs_ty, is_expn_of, remove_blocks};\n+            expr_block, walk_ptrs_ty, is_expn_of, remove_blocks, is_allowed};\n use utils::sugg::Sugg;\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n@@ -194,7 +194,7 @@ fn check_single_match(cx: &LateContext, ex: &Expr, arms: &[Arm], expr: &Expr) {\n             return;\n         };\n         let ty = cx.tables.expr_ty(ex);\n-        if ty.sty != ty::TyBool || cx.current_level(MATCH_BOOL) == Allow {\n+        if ty.sty != ty::TyBool || is_allowed(cx, MATCH_BOOL, ex.id) {\n             check_single_match_single_pattern(cx, ex, arms, expr, els);\n             check_single_match_opt_like(cx, ex, arms, expr, ty, els);\n         }"}, {"sha": "f0c417f464609e308fdd9b19c11fa24689972f08", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -22,6 +22,7 @@\n //\n //\n //\n+//\n // rs#L246\n //\n "}, {"sha": "c584e3b1a9e244628ad0f067c98ad4e157214408", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -104,7 +104,9 @@ fn get_whitelist(interned_name: &str) -> Option<&'static [&'static str]> {\n }\n \n fn whitelisted(interned_name: &str, list: &[&str]) -> bool {\n-    list.iter().any(|&name| interned_name.starts_with(name) || interned_name.ends_with(name))\n+    list.iter().any(|&name| {\n+        interned_name.starts_with(name) || interned_name.ends_with(name)\n+    })\n }\n \n impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {"}, {"sha": "587ad38c9e508c62a27418155eb022578f63f5e7", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::*;\n use rustc::lint::*;\n use syntax::codemap::Spanned;\n use utils::SpanlessEq;\n-use utils::{match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty, get_parent_expr};\n+use utils::{match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty, get_parent_expr, is_allowed};\n \n /// **What it does:** Checks for string appends of the form `x = x + y` (without\n /// `let`!).\n@@ -83,9 +83,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringAdd {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprBinary(Spanned { node: BiAdd, .. }, ref left, _) = e.node {\n             if is_string(cx, left) {\n-                if let Allow = cx.current_level(STRING_ADD_ASSIGN) {\n-                    // the string_add_assign is allow, so no duplicates\n-                } else {\n+                if !is_allowed(cx, STRING_ADD_ASSIGN, e.id) {\n                     let parent = get_parent_expr(cx, e);\n                     if let Some(p) = parent {\n                         if let ExprAssign(ref target, _) = p.node {"}, {"sha": "14d6323de47b8b2513020ea38b8289a7093fa5a1", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -1,9 +1,9 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use syntax::ast::LitKind;\n+use syntax::ast::{LitKind, NodeId};\n use syntax::codemap::Span;\n use unicode_normalization::UnicodeNormalization;\n-use utils::{snippet, span_help_and_lint};\n+use utils::{snippet, span_help_and_lint, is_allowed};\n \n /// **What it does:** Checks for the Unicode zero-width space in the code.\n ///\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprLit(ref lit) = expr.node {\n             if let LitKind::Str(_, _) = lit.node {\n-                check_str(cx, lit.span)\n+                check_str(cx, lit.span, expr.id)\n             }\n         }\n     }\n@@ -93,7 +93,7 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n     result\n }\n \n-fn check_str(cx: &LateContext, span: Span) {\n+fn check_str(cx: &LateContext, span: Span, id: NodeId) {\n     let string = snippet(cx, span, \"\");\n     if string.contains('\\u{200B}') {\n         span_help_and_lint(\n@@ -115,15 +115,15 @@ fn check_str(cx: &LateContext, span: Span) {\n             \"literal non-ASCII character detected\",\n             &format!(\n                 \"Consider replacing the string with:\\n\\\"{}\\\"\",\n-                if cx.current_level(UNICODE_NOT_NFC) == Level::Allow {\n+                if is_allowed(cx, UNICODE_NOT_NFC, id) {\n                     escape(string.chars())\n                 } else {\n                     escape(string.nfc())\n                 }\n             ),\n         );\n     }\n-    if cx.current_level(NON_ASCII_LITERAL) == Level::Allow && string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n+    if is_allowed(cx, NON_ASCII_LITERAL, id) && string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n         span_help_and_lint(\n             cx,\n             UNICODE_NOT_NFC,"}, {"sha": "bb79fcef9091cd2d5a8ed7369fd61d8820627e19", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::*;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc::hir::def::Def;\n use rustc::hir::map::Node;\n-use rustc::lint::{LintContext, LateContext, Level, Lint};\n+use rustc::lint::{LintContext, Level, LateContext, Lint};\n use rustc::session::Session;\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, Ty};\n@@ -545,10 +545,7 @@ impl<'a> DiagnosticWrapper<'a> {\n }\n \n pub fn span_lint<'a, T: LintContext<'a>>(cx: &T, lint: &'static Lint, sp: Span, msg: &str) {\n-    let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n-    if cx.current_level(lint) != Level::Allow {\n-        db.wiki_link(lint);\n-    }\n+    DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg)).wiki_link(lint);\n }\n \n pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n@@ -559,10 +556,8 @@ pub fn span_help_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     help: &str,\n ) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    if cx.current_level(lint) != Level::Allow {\n-        db.0.help(help);\n-        db.wiki_link(lint);\n-    }\n+    db.0.help(help);\n+    db.wiki_link(lint);\n }\n \n pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n@@ -574,14 +569,12 @@ pub fn span_note_and_lint<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n     note: &str,\n ) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n-    if cx.current_level(lint) != Level::Allow {\n-        if note_span == span {\n-            db.0.note(note);\n-        } else {\n-            db.0.span_note(note_span, note);\n-        }\n-        db.wiki_link(lint);\n+    if note_span == span {\n+        db.0.note(note);\n+    } else {\n+        db.0.span_note(note_span, note);\n     }\n+    db.wiki_link(lint);\n }\n \n pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n@@ -594,10 +587,8 @@ pub fn span_lint_and_then<'a, 'tcx: 'a, T: LintContext<'tcx>, F>(\n     F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, sp, msg));\n-    if cx.current_level(lint) != Level::Allow {\n-        f(&mut db.0);\n-        db.wiki_link(lint);\n-    }\n+    f(&mut db.0);\n+    db.wiki_link(lint);\n }\n \n pub fn span_lint_and_sugg<'a, 'tcx: 'a, T: LintContext<'tcx>>(\n@@ -1012,3 +1003,10 @@ pub fn type_size<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Option<u\n         layout.size(cx.tcx).bytes()\n     })\n }\n+\n+/// Returns true if the lint is allowed in the current context\n+///\n+/// Useful for skipping long running code when it's unnecessary\n+pub fn is_allowed(cx: &LateContext, lint: &'static Lint, id: NodeId) -> bool {\n+    cx.tcx.lint_level_at_node(lint, id).0 == Level::Allow\n+}"}, {"sha": "eb4c73b65c69782d6cd841fa366b564337b1cb48", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -9,6 +9,8 @@ error: This generic shadows the built-in type `u32`\n error[E0308]: mismatched types\n  --> $DIR/builtin-type-shadow.rs:6:5\n   |\n+5 | fn foo<u32>(a: u32) -> u32 {\n+  |                        --- expected `u32` because of return type\n 6 |     42\n   |     ^^ expected type parameter, found integral variable\n   |"}, {"sha": "0dbebcdca2cfa7ea2c531e6cee3eda95716a8e43", "filename": "tests/ui/for_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -75,7 +75,7 @@ impl Unrelated {\n #[warn(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n #[warn(unused_collect)]\n #[allow(linkedlist, shadow_unrelated, unnecessary_mut_passed, cyclomatic_complexity, similar_names)]\n-#[allow(many_single_char_names)]\n+#[allow(many_single_char_names, unused_variables)]\n fn main() {\n     const MAX_LEN: usize = 42;\n "}, {"sha": "d4954357665ee27ccc85788510886117618ad916", "filename": "tests/ui/for_loop.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/459cf467c56a841b3f426663d8eccaa76e94ae03/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/459cf467c56a841b3f426663d8eccaa76e94ae03/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=459cf467c56a841b3f426663d8eccaa76e94ae03", "patch": "@@ -84,14 +84,6 @@ help: consider using an iterator\n 84 |     for <item> in &vec {\n    |         ^^^^^^\n \n-error: unused variable: `i`\n-  --> $DIR/for_loop.rs:88:9\n-   |\n-88 |     for i in 0..vec.len() {\n-   |         ^\n-   |\n-   = note: `-D unused-variables` implied by `-D warnings`\n-\n error: the loop variable `i` is only used to index `vec`.\n   --> $DIR/for_loop.rs:93:5\n    |\n@@ -506,5 +498,5 @@ help: use the corresponding method\n 344 |     for k in rm.keys() {\n     |         ^\n \n-error: aborting due to 51 previous errors\n+error: aborting due to 50 previous errors\n "}]}