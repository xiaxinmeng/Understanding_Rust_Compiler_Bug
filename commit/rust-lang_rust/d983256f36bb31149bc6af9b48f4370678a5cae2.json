{"sha": "d983256f36bb31149bc6af9b48f4370678a5cae2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODMyNTZmMzZiYjMxMTQ5YmM2YWY5YjQ4ZjQzNzA2NzhhNWNhZTI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-04-21T12:40:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-21T12:40:34Z"}, "message": "Rollup merge of #41376 - mbrubeck:docs, r=frewsxcv\n\nExpanded docs and examples for PathBuf::file_name and friends\n\nThis addresses some common surprises when `PathBuf::set_file_name` is called on the path of a directory rather than a file.\n\nr? @steveklabnik", "tree": {"sha": "a1ae595bb4030d3c1599907c0f59a8228c2ef3fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1ae595bb4030d3c1599907c0f59a8228c2ef3fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d983256f36bb31149bc6af9b48f4370678a5cae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d983256f36bb31149bc6af9b48f4370678a5cae2", "html_url": "https://github.com/rust-lang/rust/commit/d983256f36bb31149bc6af9b48f4370678a5cae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d983256f36bb31149bc6af9b48f4370678a5cae2/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf11d3c66a18fb6a9e5e00ade6af0f1a0255c3a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf11d3c66a18fb6a9e5e00ade6af0f1a0255c3a0", "html_url": "https://github.com/rust-lang/rust/commit/cf11d3c66a18fb6a9e5e00ade6af0f1a0255c3a0"}, {"sha": "3b4d34d4faa10336847335e68417f49eb8882693", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4d34d4faa10336847335e68417f49eb8882693", "html_url": "https://github.com/rust-lang/rust/commit/3b4d34d4faa10336847335e68417f49eb8882693"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "15bc74a83401096c22d6d7799e24ff9c8e110736", "filename": "src/libstd/path.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d983256f36bb31149bc6af9b48f4370678a5cae2/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d983256f36bb31149bc6af9b48f4370678a5cae2/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d983256f36bb31149bc6af9b48f4370678a5cae2", "patch": "@@ -1189,8 +1189,13 @@ impl PathBuf {\n     /// If [`self.file_name`] was [`None`], this is equivalent to pushing\n     /// `file_name`.\n     ///\n+    /// Otherwise it is equivalent to calling [`pop`] and then pushing\n+    /// `file_name`. The new path will be a sibling of the original path.\n+    /// (That is, it will have the same parent.)\n+    ///\n     /// [`self.file_name`]: struct.PathBuf.html#method.file_name\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`pop`]: struct.PathBuf.html#method.pop\n     ///\n     /// # Examples\n     ///\n@@ -1725,7 +1730,10 @@ impl Path {\n         })\n     }\n \n-    /// Returns the final component of the `Path`, if it is a normal file.\n+    /// Returns the final component of the `Path`, if there is one.\n+    ///\n+    /// If the path is a normal file, this is the file name. If it's the path of a directory, this\n+    /// is the directory name.\n     ///\n     /// Returns [`None`] If the path terminates in `..`.\n     ///\n@@ -1737,10 +1745,12 @@ impl Path {\n     /// use std::path::Path;\n     /// use std::ffi::OsStr;\n     ///\n-    /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt\").file_name());\n+    /// assert_eq!(Some(OsStr::new(\"bin\")), Path::new(\"/usr/bin/\").file_name());\n+    /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"tmp/foo.txt\").file_name());\n     /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt/.\").file_name());\n     /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt/.//\").file_name());\n     /// assert_eq!(None, Path::new(\"foo.txt/..\").file_name());\n+    /// assert_eq!(None, Path::new(\"/\").file_name());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn file_name(&self) -> Option<&OsStr> {\n@@ -1926,6 +1936,9 @@ impl Path {\n     ///\n     /// let path = Path::new(\"/tmp/foo.txt\");\n     /// assert_eq!(path.with_file_name(\"bar.txt\"), PathBuf::from(\"/tmp/bar.txt\"));\n+    ///\n+    /// let path = Path::new(\"/tmp\");\n+    /// assert_eq!(path.with_file_name(\"var\"), PathBuf::from(\"/var\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf {"}]}