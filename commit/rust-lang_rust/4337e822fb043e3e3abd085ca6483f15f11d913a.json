{"sha": "4337e822fb043e3e3abd085ca6483f15f11d913a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMzdlODIyZmIwNDNlM2UzYWJkMDg1Y2E2NDgzZjE1ZjExZDkxM2E=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-19T13:43:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-23T07:19:26Z"}, "message": "Add long diagnostic for E0269", "tree": {"sha": "6b4f1a535d06917f5df9fc4f1f26ed145ad1ad54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4f1a535d06917f5df9fc4f1f26ed145ad1ad54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4337e822fb043e3e3abd085ca6483f15f11d913a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4337e822fb043e3e3abd085ca6483f15f11d913a", "html_url": "https://github.com/rust-lang/rust/commit/4337e822fb043e3e3abd085ca6483f15f11d913a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4337e822fb043e3e3abd085ca6483f15f11d913a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6be183af1d76a2716f1a3dc00b3ad3a2b746b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6be183af1d76a2716f1a3dc00b3ad3a2b746b37", "html_url": "https://github.com/rust-lang/rust/commit/d6be183af1d76a2716f1a3dc00b3ad3a2b746b37"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "969293800f1b1ebd81ddd148048f2523301c42b2", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4337e822fb043e3e3abd085ca6483f15f11d913a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4337e822fb043e3e3abd085ca6483f15f11d913a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=4337e822fb043e3e3abd085ca6483f15f11d913a", "patch": "@@ -1121,6 +1121,41 @@ fn some_func() {\n ```\n \"##,\n \n+E0269: r##\"\n+Functions must eventually return a value of their return type. For example, in\n+the following function\n+\n+```\n+fn foo(x: u8) -> u8 {\n+    if x > 0 {\n+        x // alternatively, `return x`\n+    }\n+    // nothing here\n+}\n+```\n+\n+if the condition is true, the value `x` is returned, but if the condition is\n+false, control exits the `if` block and reaches a place where nothing is being\n+returned. All possible control paths must eventually return a `u8`, which is not\n+happening here.\n+\n+An easy fix for this in a complicated function is to specify a default return\n+value, if possible:\n+\n+```\n+fn foo(x: u8) -> u8 {\n+    if x > 0 {\n+        x // alternatively, `return x`\n+    }\n+    // lots of other if branches\n+    0 // return 0 if all else fails\n+}\n+```\n+\n+It is advisable to find out what the unhandled cases are and check for them,\n+returning an appropriate value or panicking if necessary.\n+\"##,\n+\n E0271: r##\"\n This is because of a type mismatch between the associated type of some\n trait (e.g. `T::Bar`, where `T` implements `trait Quux { type Bar; }`)\n@@ -1681,7 +1716,6 @@ register_diagnostics! {\n //  E0134,\n //  E0135,\n     E0264, // unknown external lang item\n-    E0269, // not all control paths return a value\n     E0270, // computation may converge in a function marked as diverging\n     E0272, // rustc_on_unimplemented attribute refers to non-existent type parameter\n     E0273, // rustc_on_unimplemented must have named format arguments"}]}