{"sha": "8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "node_id": "C_kwDOAAsO6NoAKDhhODRkZDhmY2M0MzRmODIwZDY2ZmRhYjI2ZGQzY2JhM2IwYzU5YTk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-28T10:12:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T10:12:11Z"}, "message": "Rollup merge of #104890 - lcnr:small-cleanup, r=fee1-dead\n\nsmall method code cleanup", "tree": {"sha": "437df29a8213097b33759110541c722dd99afb79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/437df29a8213097b33759110541c722dd99afb79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhIl7CRBK7hj4Ov3rIwAAIZkIAKWXLaxLEJZUjDsmNKuSaDM3\nZJzUReo3y+NVk9LvXsPasWpAxAaWi5hxkw3bX0xuSr8AQ3yZwgW8DnCdDNz0J7At\n8A3guXLOM/XYt57VNy+YmnNPtClOW9rPef5dArq81SupDaWSE/7qQ/8S5Cs+wy0E\n9fTtXGedITCd7fPI95RlsLAU6l6ktq/ExFGBtblsv04GpdLvm1MX0yxDIvKoa6nj\ncEmXu9NnpKBdFE9U4bkoq525AQCA5ynkJm8UFqpYZX4SApcF3VEwU3A0u7BxFNvy\nCr9z/NrqFyX9Qdru9JS0YlKLOnodlMvJwn8zmAktnk73sqqinDSmLdeTeovFgtw=\n=kcJn\n-----END PGP SIGNATURE-----\n", "payload": "tree 437df29a8213097b33759110541c722dd99afb79\nparent 79fe15c8b0d76268a005cd1cc3c7caa42f481bcc\nparent 99c3dda06649ae9878138366bf2423ce45ce198b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1669630331 +0530\ncommitter GitHub <noreply@github.com> 1669630331 +0530\n\nRollup merge of #104890 - lcnr:small-cleanup, r=fee1-dead\n\nsmall method code cleanup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "html_url": "https://github.com/rust-lang/rust/commit/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fe15c8b0d76268a005cd1cc3c7caa42f481bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fe15c8b0d76268a005cd1cc3c7caa42f481bcc", "html_url": "https://github.com/rust-lang/rust/commit/79fe15c8b0d76268a005cd1cc3c7caa42f481bcc"}, {"sha": "99c3dda06649ae9878138366bf2423ce45ce198b", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c3dda06649ae9878138366bf2423ce45ce198b", "html_url": "https://github.com/rust-lang/rust/commit/99c3dda06649ae9878138366bf2423ce45ce198b"}], "stats": {"total": 139, "additions": 47, "deletions": 92}, "files": [{"sha": "e50d249849fa8483265966c4b6a32403360025db", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "patch": "@@ -179,12 +179,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Hack: we know that there are traits implementing Fn for &F\n             // where F:Fn and so forth. In the particular case of types\n-            // like `x: &mut FnMut()`, if there is a call `x()`, we would\n-            // normally translate to `FnMut::call_mut(&mut x, ())`, but\n-            // that winds up requiring `mut x: &mut FnMut()`. A little\n-            // over the top. The simplest fix by far is to just ignore\n-            // this case and deref again, so we wind up with\n-            // `FnMut::call_mut(&mut *x, ())`.\n+            // like `f: &mut FnMut()`, if there is a call `f()`, we would\n+            // normally translate to `FnMut::call_mut(&mut f, ())`, but\n+            // that winds up potentially requiring the user to mark their\n+            // variable as `mut` which feels unnecessary and unexpected.\n+            //\n+            //     fn foo(f: &mut impl FnMut()) { f() }\n+            //            ^ without this hack `f` would have to be declared as mutable\n+            //\n+            // The simplest fix by far is to just ignore this case and deref again,\n+            // so we wind up with `FnMut::call_mut(&mut *f, ())`.\n             ty::Ref(..) if autoderef.step_count() == 0 => {\n                 return None;\n             }"}, {"sha": "732b4bec58ed5cbd03a8a3df0c665a00fddd26c3", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "patch": "@@ -46,7 +46,6 @@ use rustc_span::def_id::{DefId, LOCAL_CRATE};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n-use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n \n /// Reifies a cast check to be checked once we have full type information for\n /// a function context.\n@@ -727,9 +726,6 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                     debug!(\" -> CoercionCast\");\n                     fcx.typeck_results.borrow_mut().set_coercion_cast(self.expr.hir_id.local_id);\n                 }\n-                Err(ty::error::TypeError::ObjectUnsafeCoercion(did)) => {\n-                    self.report_object_unsafe_cast(&fcx, did);\n-                }\n                 Err(_) => {\n                     match self.do_check(fcx) {\n                         Ok(k) => {\n@@ -741,14 +737,6 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n             };\n         }\n     }\n-\n-    fn report_object_unsafe_cast(&self, fcx: &FnCtxt<'a, 'tcx>, did: DefId) {\n-        let violations = fcx.tcx.object_safety_violations(did);\n-        let mut err = report_object_safety_error(fcx.tcx, self.cast_span, did, violations);\n-        err.note(&format!(\"required by cast to type '{}'\", fcx.ty_to_string(self.cast_ty)));\n-        err.emit();\n-    }\n-\n     /// Checks a cast, and report an error if one exists. In some cases, this\n     /// can return Ok and create type errors in the fcx rather than returning\n     /// directly. coercion-cast is handled in check instead of here."}, {"sha": "b2d9d70fbd2acb4608f5dd878adb04aa0db22ca1", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "patch": "@@ -195,10 +195,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 debug!(\"coerce: unsize successful\");\n                 return unsize;\n             }\n-            Err(TypeError::ObjectUnsafeCoercion(did)) => {\n-                debug!(\"coerce: unsize not object safe\");\n-                return Err(TypeError::ObjectUnsafeCoercion(did));\n-            }\n             Err(error) => {\n                 debug!(?error, \"coerce: unsize failed\");\n             }\n@@ -498,27 +494,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         target = self.shallow_resolve(target);\n         debug!(?source, ?target);\n \n-        // These 'if' statements require some explanation.\n-        // The `CoerceUnsized` trait is special - it is only\n-        // possible to write `impl CoerceUnsized<B> for A` where\n-        // A and B have 'matching' fields. This rules out the following\n-        // two types of blanket impls:\n-        //\n-        // `impl<T> CoerceUnsized<T> for SomeType`\n-        // `impl<T> CoerceUnsized<SomeType> for T`\n-        //\n-        // Both of these trigger a special `CoerceUnsized`-related error (E0376)\n-        //\n-        // We can take advantage of this fact to avoid performing unnecessary work.\n-        // If either `source` or `target` is a type variable, then any applicable impl\n-        // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)\n-        // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for\n-        // SomeType`).\n-        //\n-        // However, these are exactly the kinds of impls which are forbidden by\n-        // the compiler! Therefore, we can be sure that coercion will always fail\n-        // when either the source or target type is a type variable. This allows us\n-        // to skip performing any trait selection, and immediately bail out.\n+        // We don't apply any coercions incase either the source or target\n+        // aren't sufficiently well known but tend to instead just equate\n+        // them both.\n         if source.is_ty_var() {\n             debug!(\"coerce_unsized: source is a TyVar, bailing out\");\n             return Err(TypeError::Mismatch);\n@@ -1101,15 +1079,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Special-case that coercion alone cannot handle:\n         // Function items or non-capturing closures of differing IDs or InternalSubsts.\n         let (a_sig, b_sig) = {\n-            #[allow(rustc::usage_of_ty_tykind)]\n-            let is_capturing_closure = |ty: &ty::TyKind<'tcx>| {\n-                if let &ty::Closure(closure_def_id, _substs) = ty {\n+            let is_capturing_closure = |ty: Ty<'tcx>| {\n+                if let &ty::Closure(closure_def_id, _substs) = ty.kind() {\n                     self.tcx.upvars_mentioned(closure_def_id.expect_local()).is_some()\n                 } else {\n                     false\n                 }\n             };\n-            if is_capturing_closure(prev_ty.kind()) || is_capturing_closure(new_ty.kind()) {\n+            if is_capturing_closure(prev_ty) || is_capturing_closure(new_ty) {\n                 (None, None)\n             } else {\n                 match (prev_ty.kind(), new_ty.kind()) {"}, {"sha": "4380e66a0d248221be4b3d7b896270c259ec2b94", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "patch": "@@ -343,10 +343,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             &mut orig_values,\n         );\n \n-        let steps = if mode == Mode::MethodCall {\n-            self.tcx.method_autoderef_steps(param_env_and_self_ty)\n-        } else {\n-            self.probe(|_| {\n+        let steps = match mode {\n+            Mode::MethodCall => self.tcx.method_autoderef_steps(param_env_and_self_ty),\n+            Mode::Path => self.probe(|_| {\n                 // Mode::Path - the deref steps is \"trivial\". This turns\n                 // our CanonicalQuery into a \"trivial\" QueryResponse. This\n                 // is a bit inefficient, but I don't think that writing\n@@ -375,7 +374,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     opt_bad_ty: None,\n                     reached_recursion_limit: false,\n                 }\n-            })\n+            }),\n         };\n \n         // If our autoderef loop had reached the recursion limit,"}, {"sha": "e2be8fb12d0d0d976c877a73a1cde0b18bfdc07c", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 36, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "patch": "@@ -1672,40 +1672,34 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             }\n         };\n \n-        match terr {\n-            // Ignore msg for object safe coercion\n-            // since E0038 message will be printed\n-            TypeError::ObjectUnsafeCoercion(_) => {}\n-            _ => {\n-                let mut label_or_note = |span: Span, msg: &str| {\n-                    if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n-                        diag.span_label(span, msg);\n-                    } else {\n-                        diag.span_note(span, msg);\n-                    }\n-                };\n-                if let Some((sp, msg)) = secondary_span {\n-                    if swap_secondary_and_primary {\n-                        let terr = if let Some(infer::ValuePairs::Terms(infer::ExpectedFound {\n-                            expected,\n-                            ..\n-                        })) = values\n-                        {\n-                            format!(\"expected this to be `{}`\", expected)\n-                        } else {\n-                            terr.to_string()\n-                        };\n-                        label_or_note(sp, &terr);\n-                        label_or_note(span, &msg);\n-                    } else {\n-                        label_or_note(span, &terr.to_string());\n-                        label_or_note(sp, &msg);\n-                    }\n-                } else {\n-                    label_or_note(span, &terr.to_string());\n-                }\n+        let mut label_or_note = |span: Span, msg: &str| {\n+            if (prefer_label && is_simple_error) || &[span] == diag.span.primary_spans() {\n+                diag.span_label(span, msg);\n+            } else {\n+                diag.span_note(span, msg);\n             }\n         };\n+        if let Some((sp, msg)) = secondary_span {\n+            if swap_secondary_and_primary {\n+                let terr = if let Some(infer::ValuePairs::Terms(infer::ExpectedFound {\n+                    expected,\n+                    ..\n+                })) = values\n+                {\n+                    format!(\"expected this to be `{}`\", expected)\n+                } else {\n+                    terr.to_string()\n+                };\n+                label_or_note(sp, &terr);\n+                label_or_note(span, &msg);\n+            } else {\n+                label_or_note(span, &terr.to_string());\n+                label_or_note(sp, &msg);\n+            }\n+        } else {\n+            label_or_note(span, &terr.to_string());\n+        }\n+\n         if let Some((expected, found)) = expected_found {\n             let (expected_label, found_label, exp_found) = match exp_found {\n                 Mismatch::Variable(ef) => (\n@@ -1875,9 +1869,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         );\n                     }\n                 }\n-                TypeError::ObjectUnsafeCoercion(_) => {\n-                    diag.note_unsuccessful_coercion(found, expected);\n-                }\n                 _ => {\n                     debug!(\n                         \"note_type_err: exp_found={:?}, expected={:?} found={:?}\",\n@@ -3122,7 +3113,6 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n                 TypeError::IntrinsicCast => {\n                     Error0308(\"cannot coerce intrinsics to function pointers\")\n                 }\n-                TypeError::ObjectUnsafeCoercion(did) => Error0038(did),\n                 _ => Error0308(\"mismatched types\"),\n             },\n         }"}, {"sha": "d83e17574a09423c249b54034a35339c6f9f1b04", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=8a84dd8fcc434f820d66fdab26dd3cba3b0c59a9", "patch": "@@ -70,7 +70,6 @@ pub enum TypeError<'tcx> {\n     CyclicConst(ty::Const<'tcx>),\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::PolyExistentialPredicate<'tcx>>>),\n-    ObjectUnsafeCoercion(DefId),\n     ConstMismatch(ExpectedFound<ty::Const<'tcx>>),\n \n     IntrinsicCast,\n@@ -222,7 +221,6 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 f,\n                 \"cannot coerce functions with `#[target_feature]` to safe function pointers\"\n             ),\n-            ObjectUnsafeCoercion(_) => write!(f, \"coercion to object-unsafe trait object\"),\n         }\n     }\n }\n@@ -249,8 +247,7 @@ impl<'tcx> TypeError<'tcx> {\n             | ProjectionMismatched(_)\n             | ExistentialMismatch(_)\n             | ConstMismatch(_)\n-            | IntrinsicCast\n-            | ObjectUnsafeCoercion(_) => true,\n+            | IntrinsicCast => true,\n         }\n     }\n }"}]}