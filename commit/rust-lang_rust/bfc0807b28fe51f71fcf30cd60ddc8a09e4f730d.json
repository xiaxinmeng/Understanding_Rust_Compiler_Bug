{"sha": "bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYzA4MDdiMjhmZTUxZjcxZmNmMzBjZDYwZGRjOGEwOWU0ZjczMGQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-12T10:43:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-16T19:09:05Z"}, "message": "Add some comments", "tree": {"sha": "3b9e423920e6c9da0d79e0ff8264e8d73ad04b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b9e423920e6c9da0d79e0ff8264e8d73ad04b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "html_url": "https://github.com/rust-lang/rust/commit/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af366b0eb86eb7111150b4143167440532e09520", "url": "https://api.github.com/repos/rust-lang/rust/commits/af366b0eb86eb7111150b4143167440532e09520", "html_url": "https://github.com/rust-lang/rust/commit/af366b0eb86eb7111150b4143167440532e09520"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "00f7da4329100c505605b5181173428c1d4bae16", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "patch": "@@ -303,7 +303,38 @@ struct PatternContext<'tcx> {\n     max_slice_length: u64,\n }\n \n-/// A stack of patterns in reverse order of construction\n+/// A witness of non-exhaustiveness for error reporting, represented\n+/// as a list of patterns (in reverse order of construction) with\n+/// wildcards inside to represent elements that can take any inhabitant\n+/// of the type as a value.\n+///\n+/// A witness against a list of patterns should have the same types\n+/// and length as the pattern matched against. Because Rust `match`\n+/// is always against a single pattern, at the end the witness will\n+/// have length 1, but in the middle of the algorithm, it can contain\n+/// multiple patterns.\n+///\n+/// For example, if we are constructing a witness for the match against\n+/// ```\n+/// struct Pair(Option<(u32, u32)>, bool);\n+///\n+/// match (p: Pair) {\n+///    Pair(None, _) => {}\n+///    Pair(_, false) => {}\n+/// }\n+/// ```\n+///\n+/// We'll perform the following steps:\n+/// 1. Start with an empty witness\n+///     `Witness(vec![])`\n+/// 2. Push a witness `Some(_)` against the `None`\n+///     `Witness(vec![Some(_)])`\n+/// 3. Push a witness `true` against the `false`\n+///     `Witness(vec![Some(_), true])`\n+/// 4. Apply the `Pair` constructor to the witnesses\n+///     `Witness(vec![Pair(Some(_), true)])`\n+///\n+/// The final `Pair(Some(_), true)` is then the resulting witness.\n #[derive(Clone, Debug)]\n pub struct Witness<'tcx>(Vec<Pattern<'tcx>>);\n \n@@ -987,6 +1018,10 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                         } else {\n                             pats.into_iter().flat_map(|witness| {\n                                 missing_ctors.iter().map(move |ctor| {\n+                                    // Extends the witness with a \"wild\" version of this\n+                                    // constructor, that matches everything that can be built with\n+                                    // it. For example, if `ctor` is a `Constructor::Variant` for\n+                                    // `Option::Some`, this pushes the witness for `Some(_)`.\n                                     witness.clone().push_wild_constructor(cx, ctor, pcx.ty)\n                                 })\n                             }).collect()"}, {"sha": "a6908619d73d374b0e594f052e9b4a7a7f8e84cb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=bfc0807b28fe51f71fcf30cd60ddc8a09e4f730d", "patch": "@@ -488,7 +488,7 @@ declare_features! (\n     (active, label_break_value, \"1.28.0\", Some(48594), None),\n \n     // Integer match exhaustiveness checking\n-    (active, exhaustive_integer_patterns, \"1.28.0\", Some(50907), None),\n+    (active, exhaustive_integer_patterns, \"1.30.0\", Some(50907), None),\n \n     // #[panic_implementation]\n     (active, panic_implementation, \"1.28.0\", Some(44489), None),"}]}