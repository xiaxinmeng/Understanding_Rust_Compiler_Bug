{"sha": "e8095d0af47cb96de2c3631388fee9997c8759c8", "node_id": "C_kwDOAAsO6NoAKGU4MDk1ZDBhZjQ3Y2I5NmRlMmMzNjMxMzg4ZmVlOTk5N2M4NzU5Yzg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T18:15:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-19T18:15:05Z"}, "message": "Auto merge of #2390 - RalfJung:debug, r=RalfJung\n\nfix some debugging papercuts\n\n- detect when Miri got locally installed and is being run with the wrong toolchain\n- when an ICE occurs, print a backtrace of where the interpreter was at the time", "tree": {"sha": "bf81b74213fbe9883b8c4525bd0179673bc26b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf81b74213fbe9883b8c4525bd0179673bc26b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8095d0af47cb96de2c3631388fee9997c8759c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8095d0af47cb96de2c3631388fee9997c8759c8", "html_url": "https://github.com/rust-lang/rust/commit/e8095d0af47cb96de2c3631388fee9997c8759c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8095d0af47cb96de2c3631388fee9997c8759c8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8757d866aba7f89ed0db5ae9f0b52be4715348d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8757d866aba7f89ed0db5ae9f0b52be4715348d3", "html_url": "https://github.com/rust-lang/rust/commit/8757d866aba7f89ed0db5ae9f0b52be4715348d3"}, {"sha": "5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "html_url": "https://github.com/rust-lang/rust/commit/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "233d81826eecfd25fe7daa0c390ce6f2fc9749fd", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8095d0af47cb96de2c3631388fee9997c8759c8/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8095d0af47cb96de2c3631388fee9997c8759c8/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=e8095d0af47cb96de2c3631388fee9997c8759c8", "patch": "@@ -374,12 +374,15 @@ fn setup(subcommand: MiriCommand) {\n         }\n         None => {\n             // Check for `rust-src` rustup component.\n-            let sysroot = miri()\n-                .args(&[\"--print\", \"sysroot\"])\n-                .output()\n-                .expect(\"failed to determine sysroot\")\n-                .stdout;\n-            let sysroot = std::str::from_utf8(&sysroot).unwrap();\n+            let output =\n+                miri().args(&[\"--print\", \"sysroot\"]).output().expect(\"failed to determine sysroot\");\n+            if !output.status.success() {\n+                show_error(format!(\n+                    \"Failed to determine sysroot; Miri said:\\n{}\",\n+                    String::from_utf8_lossy(&output.stderr).trim_end()\n+                ));\n+            }\n+            let sysroot = std::str::from_utf8(&output.stdout).unwrap();\n             let sysroot = Path::new(sysroot.trim_end_matches('\\n'));\n             // Check for `$SYSROOT/lib/rustlib/src/rust/library`; test if that contains `std/Cargo.toml`.\n             let rustup_src ="}, {"sha": "8bd33b591d72c5c1b8211530e9427183f686868a", "filename": "src/bin/miri.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8095d0af47cb96de2c3631388fee9997c8759c8/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8095d0af47cb96de2c3631388fee9997c8759c8/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=e8095d0af47cb96de2c3631388fee9997c8759c8", "patch": "@@ -1,5 +1,5 @@\n #![feature(rustc_private, stmt_expr_attributes)]\n-#![allow(clippy::manual_range_contains)]\n+#![allow(clippy::manual_range_contains, clippy::useless_format)]\n \n extern crate rustc_data_structures;\n extern crate rustc_driver;\n@@ -143,6 +143,11 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n     }\n }\n \n+fn show_error(msg: String) -> ! {\n+    eprintln!(\"fatal error: {}\", msg);\n+    std::process::exit(1)\n+}\n+\n fn init_early_loggers() {\n     // Note that our `extern crate log` is *not* the same as rustc's; as a result, we have to\n     // initialize them both, and we always initialize `miri`'s first.\n@@ -214,13 +219,26 @@ fn compile_time_sysroot() -> Option<String> {\n     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n     Some(match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ =>\n-            option_env!(\"RUST_SYSROOT\")\n-                .expect(\n+        (Some(home), Some(toolchain)) => {\n+            // Check that at runtime, we are still in this toolchain.\n+            let toolchain_runtime =\n+                env::var_os(\"RUSTUP_TOOLCHAIN\").or_else(|| env::var_os(\"MULTIRUST_TOOLCHAIN\"));\n+            if !matches!(toolchain_runtime, Some(r) if r == toolchain) {\n+                show_error(format!(\n+                    \"This Miri got built with local toolchain `{toolchain}`, but now is being run under a different toolchain. \\n\\\n+                    Make sure to run Miri in the toolchain it got built with, e.g. via `cargo +{toolchain} miri`.\"\n+                ));\n+            }\n+\n+            format!(\"{}/toolchains/{}\", home, toolchain)\n+        }\n+        _ => option_env!(\"RUST_SYSROOT\")\n+            .unwrap_or_else(|| {\n+                show_error(format!(\n                     \"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\",\n-                )\n-                .to_owned(),\n+                ))\n+            })\n+            .to_owned(),\n     })\n }\n "}, {"sha": "1c6cfa096863fe7e7af063b6f0ebcc1edb620ba4", "filename": "src/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8095d0af47cb96de2c3631388fee9997c8759c8/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8095d0af47cb96de2c3631388fee9997c8759c8/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=e8095d0af47cb96de2c3631388fee9997c8759c8", "patch": "@@ -505,4 +505,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         });\n     }\n+\n+    /// We had a panic in Miri itself, try to print something useful.\n+    fn handle_ice(&self) {\n+        eprintln!();\n+        eprintln!(\n+            \"Miri caused an ICE during evaluation. Here's the interpreter backtrace at the time of the panic:\"\n+        );\n+        let this = self.eval_context_ref();\n+        let stacktrace = this.generate_stacktrace();\n+        report_msg(\n+            this,\n+            DiagLevel::Note,\n+            \"the place in the program where the ICE was triggered\",\n+            vec![],\n+            vec![],\n+            &stacktrace,\n+        );\n+    }\n }"}, {"sha": "44459621e393d4e6649598fcd5a43a5397bb0b34", "filename": "src/eval.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8095d0af47cb96de2c3631388fee9997c8759c8/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8095d0af47cb96de2c3631388fee9997c8759c8/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=e8095d0af47cb96de2c3631388fee9997c8759c8", "patch": "@@ -1,7 +1,10 @@\n //! Main evaluator loop and setting up the initial stack frame.\n \n+use std::collections::HashSet;\n use std::ffi::OsStr;\n use std::iter;\n+use std::panic::{self, AssertUnwindSafe};\n+use std::thread;\n \n use log::info;\n \n@@ -15,8 +18,6 @@ use rustc_target::spec::abi::Abi;\n \n use rustc_session::config::EntryFnType;\n \n-use std::collections::HashSet;\n-\n use crate::*;\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -326,7 +327,7 @@ pub fn eval_entry<'tcx>(\n     };\n \n     // Perform the main execution.\n-    let res: InterpResult<'_, i64> = (|| {\n+    let res: thread::Result<InterpResult<'_, i64>> = panic::catch_unwind(AssertUnwindSafe(|| {\n         // Main loop.\n         loop {\n             let info = ecx.preprocess_diagnostics();\n@@ -356,7 +357,11 @@ pub fn eval_entry<'tcx>(\n         }\n         let return_code = ecx.read_scalar(&ret_place.into())?.to_machine_isize(&ecx)?;\n         Ok(return_code)\n-    })();\n+    }));\n+    let res = res.unwrap_or_else(|panic_payload| {\n+        ecx.handle_ice();\n+        panic::resume_unwind(panic_payload)\n+    });\n \n     // Machine cleanup.\n     // Execution of the program has halted so any memory access we do here"}]}