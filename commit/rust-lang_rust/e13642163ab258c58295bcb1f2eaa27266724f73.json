{"sha": "e13642163ab258c58295bcb1f2eaa27266724f73", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMzY0MjE2M2FiMjU4YzU4Mjk1YmNiMWYyZWFhMjcyNjY3MjRmNzM=", "commit": {"author": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-05-22T21:30:06Z"}, "committer": {"name": "Geoffrey Thomas", "email": "geofft@ldpreload.com", "date": "2015-06-22T04:55:42Z"}, "message": "sys/unix/c.rs: Remove unused code\n\nIt looks like a lot of this dated to previous incarnations of the io\nmodule, etc., and went unused in the reworking leading up to 1.0. Remove\neverything we're not actively using (except for signal handling, which\nwill be reworked in the next commit).", "tree": {"sha": "3d6bdc453de9df82569d62a05f52b0ba2160918c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d6bdc453de9df82569d62a05f52b0ba2160918c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e13642163ab258c58295bcb1f2eaa27266724f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e13642163ab258c58295bcb1f2eaa27266724f73", "html_url": "https://github.com/rust-lang/rust/commit/e13642163ab258c58295bcb1f2eaa27266724f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e13642163ab258c58295bcb1f2eaa27266724f73/comments", "author": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geofft", "id": 74644, "node_id": "MDQ6VXNlcjc0NjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/74644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geofft", "html_url": "https://github.com/geofft", "followers_url": "https://api.github.com/users/geofft/followers", "following_url": "https://api.github.com/users/geofft/following{/other_user}", "gists_url": "https://api.github.com/users/geofft/gists{/gist_id}", "starred_url": "https://api.github.com/users/geofft/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geofft/subscriptions", "organizations_url": "https://api.github.com/users/geofft/orgs", "repos_url": "https://api.github.com/users/geofft/repos", "events_url": "https://api.github.com/users/geofft/events{/privacy}", "received_events_url": "https://api.github.com/users/geofft/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feba393b8ed60efe79f9f5207fde904d085949f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/feba393b8ed60efe79f9f5207fde904d085949f5", "html_url": "https://github.com/rust-lang/rust/commit/feba393b8ed60efe79f9f5207fde904d085949f5"}], "stats": {"total": 82, "additions": 5, "deletions": 77}, "files": [{"sha": "e27e4ba5af2cfef796865d179ed93e6779004448", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e13642163ab258c58295bcb1f2eaa27266724f73/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13642163ab258c58295bcb1f2eaa27266724f73/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e13642163ab258c58295bcb1f2eaa27266724f73", "patch": "@@ -148,8 +148,6 @@\n #![feature(vec_push_all)]\n #![feature(wrapping)]\n #![feature(zero_one)]\n-#![cfg_attr(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\")),\n-            feature(num_bits_bytes))]\n #![cfg_attr(windows, feature(str_utf16))]\n #![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras))]\n #![cfg_attr(test, feature(test, rustc_private, float_consts))]"}, {"sha": "de19206d93dd7ce8cab0eb8571571cb2b58a502e", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 5, "deletions": 75, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/e13642163ab258c58295bcb1f2eaa27266724f73/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e13642163ab258c58295bcb1f2eaa27266724f73/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=e13642163ab258c58295bcb1f2eaa27266724f73", "patch": "@@ -13,7 +13,6 @@\n #![allow(dead_code)]\n #![allow(non_camel_case_types)]\n \n-pub use self::select::fd_set;\n pub use self::signal::{sigaction, siginfo, sigset_t};\n pub use self::signal::{SA_ONSTACK, SA_RESTART, SA_RESETHAND, SA_NOCLDSTOP};\n pub use self::signal::{SA_NODEFER, SA_NOCLDWAIT, SA_SIGINFO, SIGCHLD};\n@@ -26,45 +25,21 @@ use libc;\n           target_os = \"dragonfly\",\n           target_os = \"bitrig\",\n           target_os = \"openbsd\"))]\n-mod consts {\n-    use libc;\n-    pub const FIONBIO: libc::c_ulong = 0x8004667e;\n-    pub const FIOCLEX: libc::c_ulong = 0x20006601;\n-    pub const FIONCLEX: libc::c_ulong = 0x20006602;\n-}\n+pub const FIOCLEX: libc::c_ulong = 0x20006601;\n+\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\",\n                   target_arch = \"arm\",\n                   target_arch = \"aarch64\")),\n           target_os = \"android\"))]\n-mod consts {\n-    use libc;\n-    pub const FIONBIO: libc::c_ulong = 0x5421;\n-    pub const FIOCLEX: libc::c_ulong = 0x5451;\n-    pub const FIONCLEX: libc::c_ulong = 0x5450;\n-}\n+pub const FIOCLEX: libc::c_ulong = 0x5451;\n+\n #[cfg(all(target_os = \"linux\",\n           any(target_arch = \"mips\",\n               target_arch = \"mipsel\",\n               target_arch = \"powerpc\")))]\n-mod consts {\n-    use libc;\n-    pub const FIONBIO: libc::c_ulong = 0x667e;\n-    pub const FIOCLEX: libc::c_ulong = 0x6601;\n-    pub const FIONCLEX: libc::c_ulong = 0x6600;\n-}\n-pub use self::consts::*;\n-\n-#[cfg(any(target_os = \"macos\",\n-          target_os = \"ios\",\n-          target_os = \"freebsd\",\n-          target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n-          target_os = \"openbsd\"))]\n-pub const MSG_DONTWAIT: libc::c_int = 0x80;\n-#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-pub const MSG_DONTWAIT: libc::c_int = 0x40;\n+pub const FIOCLEX: libc::c_ulong = 0x6601;\n \n pub const WNOHANG: libc::c_int = 1;\n \n@@ -123,13 +98,6 @@ pub struct passwd {\n }\n \n extern {\n-    pub fn gettimeofday(timeval: *mut libc::timeval,\n-                        tzp: *mut libc::c_void) -> libc::c_int;\n-    pub fn select(nfds: libc::c_int,\n-                  readfds: *mut fd_set,\n-                  writefds: *mut fd_set,\n-                  errorfds: *mut fd_set,\n-                  timeout: *mut libc::timeval) -> libc::c_int;\n     pub fn getsockopt(sockfd: libc::c_int,\n                       level: libc::c_int,\n                       optname: libc::c_int,\n@@ -165,44 +133,6 @@ extern {\n                     -> *mut libc::c_char;\n }\n \n-#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n-mod select {\n-    pub const FD_SETSIZE: usize = 1024;\n-\n-    #[repr(C)]\n-    pub struct fd_set {\n-        fds_bits: [i32; (FD_SETSIZE / 32)]\n-    }\n-\n-    pub fn fd_set(set: &mut fd_set, fd: i32) {\n-        set.fds_bits[(fd / 32) as usize] |= 1 << ((fd % 32) as usize);\n-    }\n-}\n-\n-#[cfg(any(target_os = \"android\",\n-          target_os = \"freebsd\",\n-          target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n-          target_os = \"openbsd\",\n-          target_os = \"linux\"))]\n-mod select {\n-    use usize;\n-    use libc;\n-\n-    pub const FD_SETSIZE: usize = 1024;\n-\n-    #[repr(C)]\n-    pub struct fd_set {\n-        // FIXME: shouldn't this be a c_ulong?\n-        fds_bits: [libc::uintptr_t; (FD_SETSIZE / usize::BITS)]\n-    }\n-\n-    pub fn fd_set(set: &mut fd_set, fd: i32) {\n-        let fd = fd as usize;\n-        set.fds_bits[fd / usize::BITS] |= 1 << (fd % usize::BITS);\n-    }\n-}\n-\n #[cfg(any(all(target_os = \"linux\",\n               any(target_arch = \"x86\",\n                   target_arch = \"x86_64\","}]}