{"sha": "730a927c5e6b382690e88f482a03701636242a2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMGE5MjdjNWU2YjM4MjY5MGU4OGY0ODJhMDM3MDE2MzYyNDJhMmM=", "commit": {"author": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-04-09T22:35:43Z"}, "committer": {"name": "Geoffrey Copin", "email": "copin.geoffrey@gmail.com", "date": "2020-04-09T22:57:03Z"}, "message": "Implement assist \"Reorder field names\"", "tree": {"sha": "e148e93832b9b7c1ddedaaa4c5d10f80d07abec6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e148e93832b9b7c1ddedaaa4c5d10f80d07abec6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/730a927c5e6b382690e88f482a03701636242a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/730a927c5e6b382690e88f482a03701636242a2c", "html_url": "https://github.com/rust-lang/rust/commit/730a927c5e6b382690e88f482a03701636242a2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/730a927c5e6b382690e88f482a03701636242a2c/comments", "author": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "geoffreycopin", "id": 32264033, "node_id": "MDQ6VXNlcjMyMjY0MDMz", "avatar_url": "https://avatars.githubusercontent.com/u/32264033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffreycopin", "html_url": "https://github.com/geoffreycopin", "followers_url": "https://api.github.com/users/geoffreycopin/followers", "following_url": "https://api.github.com/users/geoffreycopin/following{/other_user}", "gists_url": "https://api.github.com/users/geoffreycopin/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffreycopin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffreycopin/subscriptions", "organizations_url": "https://api.github.com/users/geoffreycopin/orgs", "repos_url": "https://api.github.com/users/geoffreycopin/repos", "events_url": "https://api.github.com/users/geoffreycopin/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffreycopin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176f7f61175bc433c56083a758bd7a28a8ae31f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/176f7f61175bc433c56083a758bd7a28a8ae31f8", "html_url": "https://github.com/rust-lang/rust/commit/176f7f61175bc433c56083a758bd7a28a8ae31f8"}], "stats": {"total": 221, "additions": 219, "deletions": 2}, "files": [{"sha": "c17c1288cd250bec5d5cb8cb938ebf52d55b8585", "filename": "crates/ra_assists/src/handlers/reorder_fields.rs", "status": "added", "additions": 207, "deletions": 0, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freorder_fields.rs?ref=730a927c5e6b382690e88f482a03701636242a2c", "patch": "@@ -0,0 +1,207 @@\n+use std::collections::HashMap;\n+\n+use itertools::Itertools;\n+\n+use hir::{Adt, ModuleDef, PathResolution, Semantics, Struct};\n+use ra_ide_db::RootDatabase;\n+use ra_syntax::ast::{Name, Pat};\n+use ra_syntax::{\n+    ast,\n+    ast::{Path, RecordField, RecordLit, RecordPat},\n+    AstNode,\n+};\n+\n+use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n+    AssistId,\n+};\n+\n+pub(crate) fn reorder_fields(ctx: AssistCtx) -> Option<Assist> {\n+    reorder_struct(ctx.clone()).or_else(|| reorder_struct_pat(ctx))\n+}\n+\n+fn reorder_struct(ctx: AssistCtx) -> Option<Assist> {\n+    let record: RecordLit = ctx.find_node_at_offset()?;\n+    reorder(ctx, &record, &record.path()?, field_name)\n+}\n+\n+fn field_name(r: &RecordField) -> String {\n+    r.name_ref()\n+        .map(|name| name.syntax().text())\n+        .unwrap_or_else(|| r.expr().unwrap().syntax().text())\n+        .to_string()\n+}\n+\n+fn reorder_struct_pat(ctx: AssistCtx) -> Option<Assist> {\n+    let record: RecordPat = ctx.find_node_at_offset()?;\n+    reorder(ctx, &record, &record.path()?, field_pat_name)\n+}\n+\n+fn field_pat_name(field: &Pat) -> String {\n+    field.syntax().children().find_map(Name::cast).map(|n| n.to_string()).unwrap_or_default()\n+}\n+\n+fn reorder<R: AstNode, F: AstNode + Eq + Clone>(\n+    ctx: AssistCtx,\n+    record: &R,\n+    path: &Path,\n+    field_name: fn(&F) -> String,\n+) -> Option<Assist> {\n+    let ranks = compute_fields_ranks(path, &ctx)?;\n+    let fields: Vec<F> = get_fields(record);\n+    let sorted_fields: Vec<F> =\n+        sort_by_rank(&fields, |f| *ranks.get(&field_name(f)).unwrap_or(&usize::max_value()));\n+\n+    if sorted_fields == fields {\n+        return None;\n+    }\n+\n+    ctx.add_assist(AssistId(\"reorder_fields\"), \"Reorder record fields\", |edit| {\n+        for (old, new) in fields.into_iter().zip(sorted_fields) {\n+            edit.replace_ast(old, new);\n+        }\n+        edit.target(record.syntax().text_range())\n+    })\n+}\n+\n+fn get_fields<R: AstNode, F: AstNode>(record: &R) -> Vec<F> {\n+    record.syntax().children().flat_map(|n1| n1.children()).filter_map(|n3| F::cast(n3)).collect()\n+}\n+\n+fn sort_by_rank<F: AstNode + Clone>(fields: &[F], get_rank: impl FnMut(&F) -> usize) -> Vec<F> {\n+    fields.iter().cloned().sorted_by_key(get_rank).collect()\n+}\n+\n+fn struct_definition(path: &ast::Path, sema: &Semantics<RootDatabase>) -> Option<Struct> {\n+    match sema.resolve_path(path) {\n+        Some(PathResolution::Def(ModuleDef::Adt(Adt::Struct(s)))) => Some(s),\n+        _ => None,\n+    }\n+}\n+\n+fn compute_fields_ranks(path: &Path, ctx: &AssistCtx) -> Option<HashMap<String, usize>> {\n+    Some(\n+        struct_definition(path, ctx.sema)?\n+            .fields(ctx.db)\n+            .iter()\n+            .enumerate()\n+            .map(|(idx, field)| (field.name(ctx.db).to_string(), idx))\n+            .collect(),\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::helpers::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn not_applicable_if_sorted() {\n+        check_assist_not_applicable(\n+            reorder_fields,\n+            r#\"\n+        struct Foo {\n+            foo: i32,\n+            bar: i32,\n+        }\n+\n+        const test: Foo = <|>Foo { foo: 0, bar: 0 };\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn trivial_empty_fields() {\n+        check_assist_not_applicable(\n+            reorder_fields,\n+            r#\"\n+        struct Foo {};\n+        const test: Foo = <|>Foo {}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_struct_fields() {\n+        check_assist(\n+            reorder_fields,\n+            r#\"\n+        struct Foo {foo: i32, bar: i32};\n+        const test: Foo = <|>Foo {bar: 0, foo: 1}\n+        \"#,\n+            r#\"\n+        struct Foo {foo: i32, bar: i32};\n+        const test: Foo = <|>Foo {foo: 1, bar: 0}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_struct_pattern() {\n+        check_assist(\n+            reorder_fields,\n+            r#\"\n+        struct Foo { foo: i64, bar: i64, baz: i64 }\n+\n+        fn f(f: Foo) -> {\n+            match f {\n+                <|>Foo { baz: 0, ref mut bar, .. } => (),\n+                _ => ()\n+            }\n+        }\n+        \"#,\n+            r#\"\n+        struct Foo { foo: i64, bar: i64, baz: i64 }\n+\n+        fn f(f: Foo) -> {\n+            match f {\n+                <|>Foo { ref mut bar, baz: 0, .. } => (),\n+                _ => ()\n+            }\n+        }\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn reorder_with_extra_field() {\n+        check_assist(\n+            reorder_fields,\n+            r#\"\n+            struct Foo {\n+                foo: String,\n+                bar: String,\n+            }\n+\n+            impl Foo {\n+                fn new() -> Foo {\n+                    let foo = String::new();\n+                    <|>Foo {\n+                        bar: foo.clone(),\n+                        extra: \"Extra field\",\n+                        foo,\n+                    }\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            struct Foo {\n+                foo: String,\n+                bar: String,\n+            }\n+\n+            impl Foo {\n+                fn new() -> Foo {\n+                    let foo = String::new();\n+                    <|>Foo {\n+                        foo,\n+                        bar: foo.clone(),\n+                        extra: \"Extra field\",\n+                    }\n+                }\n+            }\n+            \"#,\n+        )\n+    }\n+}"}, {"sha": "a00136da1c14baa05ea9afd4a48460fffadb0c36", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=730a927c5e6b382690e88f482a03701636242a2c", "patch": "@@ -129,6 +129,7 @@ mod handlers {\n     mod replace_unwrap_with_match;\n     mod split_import;\n     mod add_from_impl_for_enum;\n+    mod reorder_fields;\n \n     pub(crate) fn all() -> &'static [AssistHandler] {\n         &[\n@@ -170,6 +171,7 @@ mod handlers {\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n+            reorder_fields::reorder_fields,\n         ]\n     }\n }"}, {"sha": "80492b733b556705ed3326aea7ccf74e30462d9a", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=730a927c5e6b382690e88f482a03701636242a2c", "patch": "@@ -689,9 +689,10 @@ impl ExprCollector<'_> {\n                     Pat::Missing\n                 }\n             }\n-\n             // FIXME: implement\n             ast::Pat::BoxPat(_) | ast::Pat::RangePat(_) | ast::Pat::MacroPat(_) => Pat::Missing,\n+            // FIXME: implement\n+            ast::Pat::RecordFieldPat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n         self.alloc_pat(pattern, Either::Left(ptr))"}, {"sha": "79b22562270ab098b7602908738e0ca2946b3e12", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730a927c5e6b382690e88f482a03701636242a2c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=730a927c5e6b382690e88f482a03701636242a2c", "patch": "@@ -3256,6 +3256,7 @@ pub enum Pat {\n     RangePat(RangePat),\n     LiteralPat(LiteralPat),\n     MacroPat(MacroPat),\n+    RecordFieldPat(RecordFieldPat),\n }\n impl From<OrPat> for Pat {\n     fn from(node: OrPat) -> Pat { Pat::OrPat(node) }\n@@ -3302,12 +3303,15 @@ impl From<LiteralPat> for Pat {\n impl From<MacroPat> for Pat {\n     fn from(node: MacroPat) -> Pat { Pat::MacroPat(node) }\n }\n+impl From<RecordFieldPat> for Pat {\n+    fn from(node: RecordFieldPat) -> Pat { Pat::RecordFieldPat(node) }\n+}\n impl AstNode for Pat {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             OR_PAT | PAREN_PAT | REF_PAT | BOX_PAT | BIND_PAT | PLACEHOLDER_PAT | DOT_DOT_PAT\n             | PATH_PAT | RECORD_PAT | TUPLE_STRUCT_PAT | TUPLE_PAT | SLICE_PAT | RANGE_PAT\n-            | LITERAL_PAT | MACRO_PAT => true,\n+            | LITERAL_PAT | MACRO_PAT | RECORD_FIELD_PAT => true,\n             _ => false,\n         }\n     }\n@@ -3328,6 +3332,7 @@ impl AstNode for Pat {\n             RANGE_PAT => Pat::RangePat(RangePat { syntax }),\n             LITERAL_PAT => Pat::LiteralPat(LiteralPat { syntax }),\n             MACRO_PAT => Pat::MacroPat(MacroPat { syntax }),\n+            RECORD_FIELD_PAT => Pat::RecordFieldPat(RecordFieldPat { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3349,6 +3354,7 @@ impl AstNode for Pat {\n             Pat::RangePat(it) => &it.syntax,\n             Pat::LiteralPat(it) => &it.syntax,\n             Pat::MacroPat(it) => &it.syntax,\n+            Pat::RecordFieldPat(it) => &it.syntax,\n         }\n     }\n }"}, {"sha": "eb5c3abf7547fc36c41242220e7094ba61c2dc9f", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/730a927c5e6b382690e88f482a03701636242a2c/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/730a927c5e6b382690e88f482a03701636242a2c/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=730a927c5e6b382690e88f482a03701636242a2c", "patch": "@@ -741,6 +741,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             RangePat,\n             LiteralPat,\n             MacroPat,\n+            RecordFieldPat,\n         }\n \n         enum RecordInnerPat {"}]}