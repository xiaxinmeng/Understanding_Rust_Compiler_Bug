{"sha": "607243b6f9b3890b01d5aa4bbea75be728a371be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNzI0M2I2ZjliMzg5MGIwMWQ1YWE0YmJlYTc1YmU3MjhhMzcxYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-09T07:22:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-09T07:22:14Z"}, "message": "Auto merge of #54798 - matthewjasper:free-region-closure-errors, r=nikomatsakis\n\n[NLL]  Improve closure region bound errors\n\nPreviously, we would report free region errors that originate from closure with the span of the closure and a \"closure body requires ...\" message. This is now updated to use a reason and span from inside the closure.", "tree": {"sha": "4ee1966d204e9fcbb11f2ba5c29c6d6602aaa8bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee1966d204e9fcbb11f2ba5c29c6d6602aaa8bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/607243b6f9b3890b01d5aa4bbea75be728a371be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/607243b6f9b3890b01d5aa4bbea75be728a371be", "html_url": "https://github.com/rust-lang/rust/commit/607243b6f9b3890b01d5aa4bbea75be728a371be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/607243b6f9b3890b01d5aa4bbea75be728a371be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1a137d0159543d5a295ce86a9b7475c486efeac", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a137d0159543d5a295ce86a9b7475c486efeac", "html_url": "https://github.com/rust-lang/rust/commit/b1a137d0159543d5a295ce86a9b7475c486efeac"}, {"sha": "825810734b55ad680403655cf814c2d1312f0155", "url": "https://api.github.com/repos/rust-lang/rust/commits/825810734b55ad680403655cf814c2d1312f0155", "html_url": "https://github.com/rust-lang/rust/commit/825810734b55ad680403655cf814c2d1312f0155"}], "stats": {"total": 510, "additions": 300, "deletions": 210}, "files": [{"sha": "337cc0fc627649ff22a29c90a38fe34e3281c001", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -551,7 +551,23 @@ impl_stable_hash_for!(struct mir::ClosureRegionRequirements<'tcx> {\n impl_stable_hash_for!(struct mir::ClosureOutlivesRequirement<'tcx> {\n     subject,\n     outlived_free_region,\n-    blame_span\n+    blame_span,\n+    category\n+});\n+\n+impl_stable_hash_for!(enum mir::ConstraintCategory {\n+    Return,\n+    TypeAnnotation,\n+    Cast,\n+    ClosureBounds,\n+    CallArgument,\n+    CopyBound,\n+    SizedBound,\n+    Assignment,\n+    OpaqueType,\n+    Boring,\n+    BoringNoLocation,\n+    Internal,\n });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for mir::ClosureOutlivesSubject<'gcx> {"}, {"sha": "ea4eb761964eb184f0c69b5488331f65ac503cff", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -2676,11 +2676,51 @@ pub struct ClosureOutlivesRequirement<'tcx> {\n     // This region or type ...\n     pub subject: ClosureOutlivesSubject<'tcx>,\n \n-    // .. must outlive this one.\n+    // ... must outlive this one.\n     pub outlived_free_region: ty::RegionVid,\n \n-    // If not, report an error here.\n+    // If not, report an error here ...\n     pub blame_span: Span,\n+\n+    // ... due to this reason.\n+    pub category: ConstraintCategory,\n+}\n+\n+/// Outlives constraints can be categorized to determine whether and why they\n+/// are interesting (for error reporting). Order of variants indicates sort\n+/// order of the category, thereby influencing diagnostic output.\n+///\n+/// See also [rustc_mir::borrow_check::nll::constraints]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+pub enum ConstraintCategory {\n+    Return,\n+    TypeAnnotation,\n+    Cast,\n+\n+    /// A constraint that came from checking the body of a closure.\n+    ///\n+    /// We try to get the category that the closure used when reporting this.\n+    ClosureBounds,\n+    CallArgument,\n+    CopyBound,\n+    SizedBound,\n+    Assignment,\n+    OpaqueType,\n+\n+    /// A \"boring\" constraint (caused by the given location) is one that\n+    /// the user probably doesn't want to see described in diagnostics,\n+    /// because it is kind of an artifact of the type system setup.\n+    /// Example: `x = Foo { field: y }` technically creates\n+    /// intermediate regions representing the \"type of `Foo { field: y\n+    /// }`\", and data flows from `y` into those variables, but they\n+    /// are not very interesting. The assignment into `x` on the other\n+    /// hand might be.\n+    Boring,\n+    // Boring and applicable everywhere.\n+    BoringNoLocation,\n+\n+    /// A constraint that doesn't correspond to anything the user sees.\n+    Internal,\n }\n \n /// The subject of a ClosureOutlivesRequirement -- that is, the thing"}, {"sha": "3d4b2456f9657eebe8c30c1dbb7d7cb50755134b", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n use borrow_check::nll::type_check::Locations;\n-use borrow_check::nll::constraints::{ConstraintCategory, ConstraintIndex};\n+use borrow_check::nll::constraints::ConstraintIndex;\n use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n+use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;\n use rustc_data_structures::indexed_vec::IndexVec;"}, {"sha": "a873af8333a7fb0af867ae6423ed36645e4951d6", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::mir::ConstraintCategory;\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -23,42 +24,6 @@ crate struct ConstraintSet {\n     constraints: IndexVec<ConstraintIndex, OutlivesConstraint>,\n }\n \n-/// Constraints can be categorized to determine whether and why they are\n-/// interesting. Order of variants indicates sort order of the category,\n-/// thereby influencing diagnostic output.\n-#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n-pub enum ConstraintCategory {\n-    Return,\n-    TypeAnnotation,\n-    Cast,\n-    CallArgument,\n-\n-    /// A constraint that came from checking the body of a closure.\n-    ///\n-    /// Ideally we would give an explanation that points to the relevant part\n-    /// of the closure's body.\n-    ClosureBounds,\n-    CopyBound,\n-    SizedBound,\n-    Assignment,\n-    OpaqueType,\n-\n-    /// A \"boring\" constraint (caused by the given location) is one that\n-    /// the user probably doesn't want to see described in diagnostics,\n-    /// because it is kind of an artifact of the type system setup.\n-    /// Example: `x = Foo { field: y }` technically creates\n-    /// intermediate regions representing the \"type of `Foo { field: y\n-    /// }`\", and data flows from `y` into those variables, but they\n-    /// are not very interesting. The assignment into `x` on the other\n-    /// hand might be.\n-    Boring,\n-    // Boring and applicable everywhere.\n-    BoringNoLocation,\n-\n-    /// A constraint that doesn't correspond to anything the user sees.\n-    Internal,\n-}\n-\n impl ConstraintSet {\n     crate fn push(&mut self, constraint: OutlivesConstraint) {\n         debug!("}, {"sha": "6e35f2e63f74c2d090718d5c81ba98810e3c780a", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -138,6 +138,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     let MirTypeckRegionConstraints {\n         mut liveness_constraints,\n         outlives_constraints,\n+        closure_bounds_mapping,\n         type_tests,\n     } = constraints;\n \n@@ -157,6 +158,7 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n         universal_region_relations,\n         mir,\n         outlives_constraints,\n+        closure_bounds_mapping,\n         type_tests,\n         liveness_constraints,\n         elements,"}, {"sha": "43dc68fdb3b050d6b89a50ad80d2de6612be28aa", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 46, "deletions": 20, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::constraints::{OutlivesConstraint, ConstraintCategory};\n+use borrow_check::nll::constraints::{OutlivesConstraint};\n use borrow_check::nll::region_infer::RegionInferenceContext;\n+use borrow_check::nll::type_check::Locations;\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc::infer::InferCtxt;\n-use rustc::mir::{Location, Mir};\n+use rustc::mir::{ConstraintCategory, Location, Mir};\n use rustc::ty::{self, RegionVid};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::{Diagnostic, DiagnosticBuilder};\n use std::collections::VecDeque;\n-use std::fmt;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n use syntax::errors::Applicability;\n@@ -28,22 +28,26 @@ mod var_name;\n \n use self::region_name::RegionName;\n \n-impl fmt::Display for ConstraintCategory {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+trait ConstraintDescription {\n+    fn description(&self) -> &'static str;\n+}\n+\n+impl ConstraintDescription for ConstraintCategory {\n+    fn description(&self) -> &'static str {\n         // Must end with a space. Allows for empty names to be provided.\n         match self {\n-            ConstraintCategory::Assignment => write!(f, \"assignment \"),\n-            ConstraintCategory::Return => write!(f, \"returning this value \"),\n-            ConstraintCategory::Cast => write!(f, \"cast \"),\n-            ConstraintCategory::CallArgument => write!(f, \"argument \"),\n-            ConstraintCategory::TypeAnnotation => write!(f, \"type annotation \"),\n-            ConstraintCategory::ClosureBounds => write!(f, \"closure body \"),\n-            ConstraintCategory::SizedBound => write!(f, \"proving this value is `Sized` \"),\n-            ConstraintCategory::CopyBound => write!(f, \"copying this value \"),\n-            ConstraintCategory::OpaqueType => write!(f, \"opaque type \"),\n+            ConstraintCategory::Assignment => \"assignment \",\n+            ConstraintCategory::Return => \"returning this value \",\n+            ConstraintCategory::Cast => \"cast \",\n+            ConstraintCategory::CallArgument => \"argument \",\n+            ConstraintCategory::TypeAnnotation => \"type annotation \",\n+            ConstraintCategory::ClosureBounds => \"closure body \",\n+            ConstraintCategory::SizedBound => \"proving this value is `Sized` \",\n+            ConstraintCategory::CopyBound => \"copying this value \",\n+            ConstraintCategory::OpaqueType => \"opaque type \",\n             ConstraintCategory::Boring\n             | ConstraintCategory::BoringNoLocation\n-            | ConstraintCategory::Internal => write!(f, \"\"),\n+            | ConstraintCategory::Internal => \"\",\n         }\n     }\n }\n@@ -89,7 +93,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // Classify each of the constraints along the path.\n         let mut categorized_path: Vec<(ConstraintCategory, Span)> = path\n             .iter()\n-            .map(|constraint| (constraint.category, constraint.locations.span(mir)))\n+            .map(|constraint| {\n+                if constraint.category == ConstraintCategory::ClosureBounds {\n+                    self.retrieve_closure_constraint_info(mir, &constraint)\n+                } else {\n+                    (constraint.category, constraint.locations.span(mir))\n+                }\n+            })\n             .collect();\n         debug!(\n             \"best_blame_constraint: categorized_path={:#?}\",\n@@ -358,7 +368,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             _ => {\n                 diag.span_label(span, format!(\n                     \"{}requires that `{}` must outlive `{}`\",\n-                    category, fr_name, outlived_fr_name,\n+                    category.description(), fr_name, outlived_fr_name,\n                 ));\n             },\n         }\n@@ -470,8 +480,24 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir: &Mir<'tcx>,\n         fr1: RegionVid,\n         fr2: RegionVid,\n-    ) -> Span {\n-        let (_, span, _) = self.best_blame_constraint(mir, fr1, |r| r == fr2);\n-        span\n+    ) -> (ConstraintCategory, Span) {\n+        let (category, span, _) = self.best_blame_constraint(mir, fr1, |r| r == fr2);\n+        (category, span)\n+    }\n+\n+    fn retrieve_closure_constraint_info(\n+        &self,\n+        mir: &Mir<'tcx>,\n+        constraint: &OutlivesConstraint\n+    ) -> (ConstraintCategory, Span) {\n+        let loc = match constraint.locations {\n+            Locations::All(span) => return (constraint.category, span),\n+            Locations::Single(loc) => loc,\n+        };\n+\n+        let opt_span_category = self\n+            .closure_bounds_mapping[&loc]\n+            .get(&(constraint.sup, constraint.sub));\n+        *opt_span_category.unwrap_or(&(constraint.category, mir.source_info(loc).span))\n     }\n }"}, {"sha": "56bb6a87d44fa7d51fa613599d8f0d4a1e625ea7", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -19,15 +19,17 @@ use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin, RegionVariableOrigin};\n use rustc::mir::{\n-    ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements, Local, Location,\n-    Mir,\n+    ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements,\n+    ConstraintCategory, Local, Location, Mir,\n };\n use rustc::ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc::util::common;\n use rustc_data_structures::bit_set::BitSet;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_errors::{Diagnostic, DiagnosticBuilder};\n+use syntax_pos::Span;\n \n use std::rc::Rc;\n \n@@ -60,10 +62,16 @@ pub struct RegionInferenceContext<'tcx> {\n     /// the SCC (see `constraint_sccs`) and for error reporting.\n     constraint_graph: Rc<NormalConstraintGraph>,\n \n-    /// The SCC computed from `constraints` and the constraint graph. Used to compute the values\n-    /// of each region.\n+    /// The SCC computed from `constraints` and the constraint graph. Used to\n+    /// compute the values of each region.\n     constraint_sccs: Rc<Sccs<RegionVid, ConstraintSccIndex>>,\n \n+    /// Map closure bounds to a `Span` that should be used for error reporting.\n+    closure_bounds_mapping: FxHashMap<\n+        Location,\n+        FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n+    >,\n+\n     /// Contains the minimum universe of any variable within the same\n     /// SCC. We will ensure that no SCC contains values that are not\n     /// visible from this index.\n@@ -187,6 +195,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         universal_region_relations: Rc<UniversalRegionRelations<'tcx>>,\n         _mir: &Mir<'tcx>,\n         outlives_constraints: ConstraintSet,\n+        closure_bounds_mapping: FxHashMap<\n+            Location,\n+            FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n+        >,\n         type_tests: Vec<TypeTest<'tcx>>,\n         liveness_constraints: LivenessValues<RegionVid>,\n         elements: &Rc<RegionValueElements>,\n@@ -220,6 +232,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             constraints,\n             constraint_graph,\n             constraint_sccs,\n+            closure_bounds_mapping,\n             scc_universes,\n             scc_representatives,\n             scc_values,\n@@ -727,6 +740,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 subject,\n                 outlived_free_region: non_local_ub,\n                 blame_span: locations.span(mir),\n+                category: ConstraintCategory::Boring,\n             };\n             debug!(\"try_promote_type_test: pushing {:#?}\", requirement);\n             propagated_outlives_requirements.push(requirement);\n@@ -1125,7 +1139,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 longer_fr, shorter_fr,\n             );\n \n-            let blame_span = self.find_outlives_blame_span(mir, longer_fr, shorter_fr);\n+            let blame_span_category = self.find_outlives_blame_span(mir, longer_fr, shorter_fr);\n \n             if let Some(propagated_outlives_requirements) = propagated_outlives_requirements {\n                 // Shrink `fr` until we find a non-local region (if we do).\n@@ -1150,7 +1164,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     propagated_outlives_requirements.push(ClosureOutlivesRequirement {\n                         subject: ClosureOutlivesSubject::Region(fr_minus),\n                         outlived_free_region: shorter_fr_plus,\n-                        blame_span: blame_span,\n+                        blame_span: blame_span_category.1,\n+                        category: blame_span_category.0,\n                     });\n                     return;\n                 }\n@@ -1213,7 +1228,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         };\n \n         // Find the code to blame for the fact that `longer_fr` outlives `error_fr`.\n-        let span = self.find_outlives_blame_span(mir, longer_fr, error_region);\n+        let (_, span) = self.find_outlives_blame_span(mir, longer_fr, error_region);\n \n         // Obviously, this error message is far from satisfactory.\n         // At present, though, it only appears in unit tests --"}, {"sha": "4ab0f952bdee94fe41bbd252076be0267a4324a5", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::constraints::{ConstraintCategory, ConstraintSet, OutlivesConstraint};\n+use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::region_infer::TypeTest;\n use borrow_check::nll::type_check::Locations;\n use borrow_check::nll::universal_regions::UniversalRegions;\n@@ -17,6 +17,7 @@ use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::outlives::obligations::{TypeOutlives, TypeOutlivesDelegate};\n use rustc::infer::region_constraints::{GenericKind, VerifyBound};\n use rustc::infer::{self, SubregionOrigin};\n+use rustc::mir::ConstraintCategory;\n use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, TyCtxt};\n use syntax_pos::DUMMY_SP;"}, {"sha": "35342b2129e6e752a83d036a7eb9ccddba4a604f", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -12,11 +12,11 @@ use borrow_check::nll::type_check::constraint_conversion;\n use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use borrow_check::nll::universal_regions::UniversalRegions;\n use borrow_check::nll::ToRegionVid;\n-use borrow_check::nll::constraints::ConstraintCategory;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::free_region_map::FreeRegionRelations;\n use rustc::infer::region_constraints::GenericKind;\n use rustc::infer::InferCtxt;\n+use rustc::mir::ConstraintCategory;\n use rustc::traits::query::outlives_bounds::{self, OutlivesBound};\n use rustc::traits::query::type_op::{self, TypeOp};\n use rustc::ty::{self, RegionVid, Ty};"}, {"sha": "a4665984d3e0b0448d36c6f0cabdd74f139bce7e", "filename": "src/librustc_mir/borrow_check/nll/type_check/input_output.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Finput_output.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -24,7 +24,7 @@ use rustc::ty::Ty;\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n-use super::{ConstraintCategory, Locations, TypeChecker};\n+use super::{Locations, TypeChecker};\n \n impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     pub(super) fn equate_inputs_and_outputs("}, {"sha": "bc4e0ca235139c63ab7e5aa54623982a8407ec5d", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use borrow_check::location::LocationTable;\n-use borrow_check::nll::constraints::ConstraintCategory;\n use borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n use borrow_check::nll::type_check::liveness::local_use_map::LocalUseMap;\n@@ -19,7 +18,7 @@ use dataflow::move_paths::indexes::MovePathIndex;\n use dataflow::move_paths::MoveData;\n use dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraint;\n-use rustc::mir::{BasicBlock, Local, Location, Mir};\n+use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, Mir};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;"}, {"sha": "36eb695186c67da0fc328ca7c2eba9de668a45a1", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 90, "deletions": 35, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -13,7 +13,7 @@\n \n use borrow_check::borrow_set::BorrowSet;\n use borrow_check::location::LocationTable;\n-use borrow_check::nll::constraints::{ConstraintCategory, ConstraintSet, OutlivesConstraint};\n+use borrow_check::nll::constraints::{ConstraintSet, OutlivesConstraint};\n use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::region_infer::values::LivenessValues;\n use borrow_check::nll::region_infer::values::PlaceholderIndices;\n@@ -42,15 +42,15 @@ use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::Subst;\n+use rustc::ty::subst::{Subst, UnpackedKind};\n use rustc::ty::{self, CanonicalTy, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n use std::rc::Rc;\n use std::{fmt, iter};\n use syntax_pos::{Span, DUMMY_SP};\n use transform::{MirPass, MirSource};\n \n use either::Either;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n@@ -128,6 +128,7 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     let mut constraints = MirTypeckRegionConstraints {\n         liveness_constraints: LivenessValues::new(elements),\n         outlives_constraints: ConstraintSet::default(),\n+        closure_bounds_mapping: FxHashMap(),\n         type_tests: Vec::default(),\n     };\n     let mut placeholder_indices = PlaceholderIndices::default();\n@@ -752,6 +753,11 @@ crate struct MirTypeckRegionConstraints<'tcx> {\n \n     crate outlives_constraints: ConstraintSet,\n \n+    crate closure_bounds_mapping: FxHashMap<\n+        Location,\n+        FxHashMap<(RegionVid, RegionVid), (ConstraintCategory, Span)>,\n+    >,\n+\n     crate type_tests: Vec<TypeTest<'tcx>>,\n }\n \n@@ -860,7 +866,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         &mut self,\n         locations: Locations,\n         category: ConstraintCategory,\n-        op: impl type_op::TypeOp<'gcx, 'tcx, Output = R>,\n+        op: impl type_op::TypeOp<'gcx, 'tcx, Output=R>,\n     ) -> Fallible<R> {\n         let (r, opt_data) = op.fully_perform(self.infcx)?;\n \n@@ -1103,17 +1109,17 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let place_ty = place.ty(mir, tcx).to_ty(tcx);\n                 let rv_ty = rv.ty(mir, tcx);\n                 if let Err(terr) =\n-                    self.sub_types_or_anon(rv_ty, place_ty, location.to_locations(), category)\n-                {\n-                    span_mirbug!(\n+                self.sub_types_or_anon(rv_ty, place_ty, location.to_locations(), category)\n+                    {\n+                        span_mirbug!(\n                         self,\n                         stmt,\n                         \"bad assignment ({:?} = {:?}): {:?}\",\n                         place_ty,\n                         rv_ty,\n                         terr\n                     );\n-                }\n+                    }\n \n                 if let Some(user_ty) = self.rvalue_user_ty(rv) {\n                     if let Err(terr) = self.relate_type_and_user_type(\n@@ -1233,17 +1239,17 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n                 let locations = term_location.to_locations();\n                 if let Err(terr) =\n-                    self.sub_types(rv_ty, place_ty, locations, ConstraintCategory::Assignment)\n-                {\n-                    span_mirbug!(\n+                self.sub_types(rv_ty, place_ty, locations, ConstraintCategory::Assignment)\n+                    {\n+                        span_mirbug!(\n                         self,\n                         term,\n                         \"bad DropAndReplace ({:?} = {:?}): {:?}\",\n                         place_ty,\n                         rv_ty,\n                         terr\n                     );\n-                }\n+                    }\n             }\n             TerminatorKind::SwitchInt {\n                 ref discr,\n@@ -1387,17 +1393,17 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let locations = term_location.to_locations();\n \n                 if let Err(terr) =\n-                    self.sub_types_or_anon(sig.output(), dest_ty, locations, category)\n-                {\n-                    span_mirbug!(\n+                self.sub_types_or_anon(sig.output(), dest_ty, locations, category)\n+                    {\n+                        span_mirbug!(\n                         self,\n                         term,\n                         \"call dest mismatch ({:?} <- {:?}): {:?}\",\n                         dest_ty,\n                         sig.output(),\n                         terr\n                     );\n-                }\n+                    }\n \n                 // When `#![feature(unsized_locals)]` is not enabled,\n                 // this check is done at `check_local`.\n@@ -2038,7 +2044,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             aggregate_kind, location\n         );\n \n-        let instantiated_predicates = match aggregate_kind {\n+        let instantiated_predicates = match aggregate_kind  {\n             AggregateKind::Adt(def, _, substs, _, _) => {\n                 tcx.predicates_of(def.did).instantiate(tcx, substs)\n             }\n@@ -2064,24 +2070,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             // these extra requirements are basically like where\n             // clauses on the struct.\n             AggregateKind::Closure(def_id, substs) => {\n-                if let Some(closure_region_requirements) =\n-                    tcx.mir_borrowck(*def_id).closure_requirements\n-                {\n-                    let closure_constraints = closure_region_requirements.apply_requirements(\n-                        self.infcx.tcx,\n-                        location,\n-                        *def_id,\n-                        *substs,\n-                    );\n-\n-                    self.push_region_constraints(\n-                        location.to_locations(),\n-                        ConstraintCategory::ClosureBounds,\n-                        &closure_constraints,\n-                    );\n-                }\n-\n-                tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n+                self.prove_closure_bounds(tcx, *def_id, *substs, location)\n             }\n \n             AggregateKind::Generator(def_id, substs, _) => {\n@@ -2097,6 +2086,72 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         );\n     }\n \n+    fn prove_closure_bounds(\n+        &mut self,\n+        tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+        def_id: DefId,\n+        substs: ty::ClosureSubsts<'tcx>,\n+        location: Location,\n+    ) -> ty::InstantiatedPredicates<'tcx> {\n+        if let Some(closure_region_requirements) =\n+            tcx.mir_borrowck(def_id).closure_requirements\n+        {\n+            let closure_constraints = closure_region_requirements.apply_requirements(\n+                tcx,\n+                location,\n+                def_id,\n+                substs,\n+            );\n+\n+            if let Some(ref mut borrowck_context) = self.borrowck_context {\n+                let bounds_mapping = closure_constraints\n+                    .iter()\n+                    .enumerate()\n+                    .filter_map(|(idx, constraint)| {\n+                        let ty::OutlivesPredicate(k1, r2) =\n+                            constraint.no_late_bound_regions().unwrap_or_else(|| {\n+                                bug!(\n+                                    \"query_constraint {:?} contained bound regions\",\n+                                    constraint,\n+                                );\n+                            });\n+\n+                        match k1.unpack() {\n+                            UnpackedKind::Lifetime(r1) => {\n+                                // constraint is r1: r2\n+                                let r1_vid = borrowck_context.universal_regions.to_region_vid(r1);\n+                                let r2_vid = borrowck_context.universal_regions.to_region_vid(r2);\n+                                let outlives_requirements = &closure_region_requirements\n+                                    .outlives_requirements[idx];\n+                                Some((\n+                                    (r1_vid, r2_vid),\n+                                    (\n+                                        outlives_requirements.category,\n+                                        outlives_requirements.blame_span,\n+                                    ),\n+                                ))\n+                            }\n+                            UnpackedKind::Type(_) => None,\n+                        }\n+                    })\n+                    .collect();\n+\n+                let existing = borrowck_context.constraints\n+                    .closure_bounds_mapping\n+                    .insert(location, bounds_mapping);\n+                assert!(existing.is_none(), \"Multiple closures at the same location.\");\n+            }\n+\n+            self.push_region_constraints(\n+                location.to_locations(),\n+                ConstraintCategory::ClosureBounds,\n+                &closure_constraints,\n+            );\n+        }\n+\n+        tcx.predicates_of(def_id).instantiate(tcx, substs.substs)\n+    }\n+\n     fn prove_trait_ref(\n         &mut self,\n         trait_ref: ty::TraitRef<'tcx>,"}, {"sha": "41aab02d1e8266f3b9c8a478663995a38e6fc933", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::constraints::{ConstraintCategory, OutlivesConstraint};\n+use borrow_check::nll::constraints::OutlivesConstraint;\n use borrow_check::nll::type_check::{BorrowCheckContext, Locations};\n use rustc::infer::canonical::{Canonical, CanonicalVarInfos};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc::mir::ConstraintCategory;\n use rustc::traits::query::Fallible;\n use rustc::ty::fold::{TypeFoldable, TypeVisitor};\n use rustc::ty::relate::{self, Relate, RelateResult, TypeRelation};"}, {"sha": "a21336654f379cdd2fee2c2c7786e9a4dbcd7b48", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -1,13 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/issue-10291.rs:12:65\n+  --> $DIR/issue-10291.rs:13:9\n    |\n-LL |   fn test<'x>(x: &'x isize) {\n-   |           -- lifetime `'x` defined here\n-LL |       drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-   |  _________________________________________________________________^\n-LL | |         x //~ ERROR E0312\n-LL | |     }));\n-   | |_____^ closure body requires that `'x` must outlive `'static`\n+LL | fn test<'x>(x: &'x isize) {\n+   |         -- lifetime `'x` defined here\n+LL |     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n+LL |         x //~ ERROR E0312\n+   |         ^ returning this value requires that `'x` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "3f7e400ed436008d2b4b4c26d0e77b58704c507a", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -51,10 +51,10 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-        //~^ ERROR unsatisfied lifetime constraints\n \n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n+        //~^ ERROR unsatisfied lifetime constraints\n     });\n }\n "}, {"sha": "ef84820de38eb4be589bb9f371ce1472b1c462cb", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -3,10 +3,10 @@ note: External requirements\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |_____^\n    |\n@@ -24,8 +24,8 @@ note: No external requirements\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |\n+LL | |         // Only works if 'x: 'y:\n ...  |\n LL | |     });\n LL | | }\n@@ -34,20 +34,15 @@ LL | | }\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_ref[317d]::supply[0]) with substs []\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-ref.rs:53:47\n+  --> $DIR/propagate-approximated-ref.rs:56:9\n    |\n-LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |             --  -- lifetime `'b` defined here\n-   |             |\n-   |             lifetime `'a` defined here\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |     });\n-   | |_____^ closure body requires that `'a` must outlive `'b`\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |           --  -- lifetime `'b` defined here\n+   |           |\n+   |           lifetime `'a` defined here\n+...\n+LL |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "49b6258164013b80f97ba02e7c0d4f9995c2926e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -44,10 +44,10 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n         //~^ ERROR borrowed data escapes outside of function\n-        //~| ERROR unsatisfied lifetime constraints\n \n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n+        //~^ ERROR unsatisfied lifetime constraints\n     });\n }\n "}, {"sha": "7ebd36e10b5645fe05dff563e6242584caa5f077", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -4,10 +4,10 @@ note: External requirements\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |  _______________________________________________^\n LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |_____^\n    |\n@@ -26,7 +26,7 @@ note: No external requirements\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n+LL | |\n ...  |\n LL | |     });\n LL | | }\n@@ -41,29 +41,23 @@ LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:47\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:49:9\n    |\n-LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |             --  -- lifetime `'b` defined here\n-   |             |\n-   |             lifetime `'a` defined here\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |  _______________________________________________^\n-LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |     });\n-   | |_____^ closure body requires that `'a` must outlive `'b`\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |           --  -- lifetime `'b` defined here\n+   |           |\n+   |           lifetime `'a` defined here\n+...\n+LL |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0181792cbdcfff908312fd4ded11da193ac03c8c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -47,9 +47,9 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n         //~^ ERROR borrowed data escapes outside of function\n-        //~| ERROR unsatisfied lifetime constraints\n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n+        //~^ ERROR unsatisfied lifetime constraints\n     });\n }\n "}, {"sha": "d62910576b0c3a886dfc47df5afd83aaf810a113", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -4,9 +4,9 @@ note: External requirements\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |_____^\n    |\n@@ -25,7 +25,7 @@ note: No external requirements\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n+LL | |         // Only works if 'x: 'y:\n ...  |\n LL | |     });\n LL | | }\n@@ -40,27 +40,22 @@ LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:47\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:51:9\n    |\n-LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |             --  -- lifetime `'b` defined here\n-   |             |\n-   |             lifetime `'a` defined here\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |         //~^ ERROR borrowed data escapes outside of function\n-LL | |         //~| ERROR unsatisfied lifetime constraints\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |     });\n-   | |_____^ closure body requires that `'a` must outlive `'b`\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |           --  -- lifetime `'b` defined here\n+   |           |\n+   |           lifetime `'a` defined here\n+...\n+LL |         demand_y(x, y, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1a0531cbd42f65a9f7cf5b8a06178dadccc55796", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.rs?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -44,10 +44,10 @@ fn demand_y<'x, 'y>(_outlives1: Cell<&&'x u32>, _outlives2: Cell<&'y &u32>, _y:\n #[rustc_regions]\n fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-        //~^ ERROR unsatisfied lifetime constraints\n \n         // Only works if 'x: 'y:\n         demand_y(outlives1, outlives2, x.get())\n+        //~^ ERROR unsatisfied lifetime constraints\n     });\n }\n "}, {"sha": "aa193682404184e9fd05ba353d8830a443e4b7f2", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -3,10 +3,10 @@ note: External requirements\n    |\n LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n    |  _____________________________________________^\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(outlives1, outlives2, x.get())\n+LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |     });\n    | |_____^\n    |\n@@ -24,8 +24,8 @@ note: No external requirements\n    |\n LL | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n LL | |\n+LL | |         // Only works if 'x: 'y:\n ...  |\n LL | |     });\n LL | | }\n@@ -34,20 +34,15 @@ LL | | }\n    = note: defining type: DefId(0/0:6 ~ propagate_approximated_val[317d]::test[0]) with substs []\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/propagate-approximated-val.rs:46:45\n+  --> $DIR/propagate-approximated-val.rs:49:9\n    |\n-LL |   fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |           --  -- lifetime `'b` defined here\n-   |           |\n-   |           lifetime `'a` defined here\n-LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-   |  _____________________________________________^\n-LL | |         //~^ ERROR unsatisfied lifetime constraints\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(outlives1, outlives2, x.get())\n-LL | |     });\n-   | |_____^ closure body requires that `'a` must outlive `'b`\n+LL | fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |         --  -- lifetime `'b` defined here\n+   |         |\n+   |         lifetime `'a` defined here\n+...\n+LL |         demand_y(outlives1, outlives2, x.get())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "dc7f58fc8f8432f0ebdd4b84be8eb0f32087ebb5", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -41,15 +41,15 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:55:29\n+  --> $DIR/projection-one-region-closure.rs:55:39\n    |\n LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                          --  -- lifetime `'b` defined here\n    |                          |\n    |                          lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n+   |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:66:29\n@@ -95,15 +95,15 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-closure.rs:66:29\n+  --> $DIR/projection-one-region-closure.rs:66:39\n    |\n LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                           --  -- lifetime `'b` defined here\n    |                           |\n    |                           lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n+   |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-closure.rs:80:29"}, {"sha": "18d35d8b9bf68f42bfef091d6b8e5131d5655e70", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -32,15 +32,15 @@ LL | | }\n            ]\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:47:39\n    |\n LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                          --  -- lifetime `'b` defined here\n    |                          |\n    |                          lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n+   |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:57:29\n@@ -77,15 +77,15 @@ LL | | }\n            ]\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:57:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:57:39\n    |\n LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n    |                           --  -- lifetime `'b` defined here\n    |                           |\n    |                           lifetime `'a` defined here\n ...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ closure body requires that `'b` must outlive `'a`\n+   |                                       ^^^^^^^^^^^^^^^^ argument requires that `'b` must outlive `'a`\n \n note: External requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:70:29"}, {"sha": "fd52494b4994746caedaa6eec7893f712c429bfc", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -21,16 +21,13 @@ LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot in\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:19:18\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n    |\n-LL |       pub fn chase_cat(&mut self) {\n-   |                        - let's call the lifetime of this reference `'1`\n-LL |           let _f = || {\n-   |  __________________^\n-LL | |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-LL | |             *p = 3;\n-LL | |         };\n-   | |_________^ closure body requires that `'1` must outlive `'static`\n+LL |     pub fn chase_cat(&mut self) {\n+   |                      - let's call the lifetime of this reference `'1`\n+LL |         let _f = || {\n+LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n+   |                 ^ type annotation requires that `'1` must outlive `'static`\n \n error[E0597]: `self` does not live long enough\n   --> $DIR/regions-addr-of-upvar-self.rs:20:46"}, {"sha": "cbc1e6b787db508acab16a4b60383571e19c076d", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/607243b6f9b3890b01d5aa4bbea75be728a371be/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=607243b6f9b3890b01d5aa4bbea75be728a371be", "patch": "@@ -36,18 +36,13 @@ LL | }\n    = note: borrowed value must be valid for the static lifetime...\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-nested-fns.rs:23:68\n+  --> $DIR/regions-nested-fns.rs:24:27\n    |\n-LL |   fn nested<'x>(x: &'x isize) {\n-   |             -- lifetime `'x` defined here\n+LL | fn nested<'x>(x: &'x isize) {\n+   |           -- lifetime `'x` defined here\n ...\n-LL |       ignore::< Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-   |  ____________________________________________________________________^\n-LL | |         if false { return x; } //~ ERROR E0312\n-LL | |         if false { return ay; }\n-LL | |         return z;\n-LL | |     }));\n-   | |_____^ closure body requires that `'x` must outlive `'static`\n+LL |         if false { return x; } //~ ERROR E0312\n+   |                           ^ returning this value requires that `'x` must outlive `'static`\n \n error: aborting due to 4 previous errors\n "}]}