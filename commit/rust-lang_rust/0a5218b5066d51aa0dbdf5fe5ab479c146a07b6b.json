{"sha": "0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNTIxOGI1MDY2ZDUxYWEwZGJkZjVmZTVhYjQ3OWMxNDZhMDdiNmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-12T08:49:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-12T08:49:51Z"}, "message": "Auto merge of #42572 - ollie27:rustdoc_create_dir_all, r=GuillaumeGomez\n\nrustdoc: Use `create_dir_all` to create output directory\n\nCurrently rustdoc will fail if passed `-o foo/doc` if the `foo`\ndirectory doesn't exist.\n\nAlso remove unneeded `mkdir` as `create_dir_all` can now handle\nconcurrent invocations since #39799.", "tree": {"sha": "063c42441d7e02b05f861d6dce3b34ec1ccb8177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/063c42441d7e02b05f861d6dce3b34ec1ccb8177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b", "html_url": "https://github.com/rust-lang/rust/commit/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54eeef14a380ca026dc378e6927655fb08f64736", "url": "https://api.github.com/repos/rust-lang/rust/commits/54eeef14a380ca026dc378e6927655fb08f64736", "html_url": "https://github.com/rust-lang/rust/commit/54eeef14a380ca026dc378e6927655fb08f64736"}, {"sha": "577c059d5040465bb35afaf605d0f5e49556982f", "url": "https://api.github.com/repos/rust-lang/rust/commits/577c059d5040465bb35afaf605d0f5e49556982f", "html_url": "https://github.com/rust-lang/rust/commit/577c059d5040465bb35afaf605d0f5e49556982f"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "2b8a18eeb68054effb83d7b5b3a8528c87f29c05", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b", "patch": "@@ -492,7 +492,7 @@ pub fn run(mut krate: clean::Crate,\n             }\n         }\n     }\n-    try_err!(mkdir(&dst), &dst);\n+    try_err!(fs::create_dir_all(&dst), &dst);\n     krate = render_sources(&dst, &mut scx, krate)?;\n     let cx = Context {\n         current: Vec::new(),\n@@ -658,7 +658,7 @@ fn write_shared(cx: &Context,\n     // Write out the shared files. Note that these are shared among all rustdoc\n     // docs placed in the output directory, so this needs to be a synchronized\n     // operation with respect to all other rustdocs running around.\n-    try_err!(mkdir(&cx.dst), &cx.dst);\n+    try_err!(fs::create_dir_all(&cx.dst), &cx.dst);\n     let _lock = flock::Lock::panicking_new(&cx.dst.join(\".lock\"), true, true, true);\n \n     // Add all the static files. These may already exist, but we just\n@@ -808,10 +808,8 @@ fn write_shared(cx: &Context,\n fn render_sources(dst: &Path, scx: &mut SharedContext,\n                   krate: clean::Crate) -> Result<clean::Crate, Error> {\n     info!(\"emitting source files\");\n-    let dst = dst.join(\"src\");\n-    try_err!(mkdir(&dst), &dst);\n-    let dst = dst.join(&krate.name);\n-    try_err!(mkdir(&dst), &dst);\n+    let dst = dst.join(\"src\").join(&krate.name);\n+    try_err!(fs::create_dir_all(&dst), &dst);\n     let mut folder = SourceCollector {\n         dst: dst,\n         scx: scx,\n@@ -825,19 +823,6 @@ fn write(dst: PathBuf, contents: &[u8]) -> Result<(), Error> {\n     Ok(try_err!(try_err!(File::create(&dst), &dst).write_all(contents), &dst))\n }\n \n-/// Makes a directory on the filesystem, failing the thread if an error occurs\n-/// and skipping if the directory already exists.\n-///\n-/// Note that this also handles races as rustdoc is likely to be run\n-/// concurrently against another invocation.\n-fn mkdir(path: &Path) -> io::Result<()> {\n-    match fs::create_dir(path) {\n-        Ok(()) => Ok(()),\n-        Err(ref e) if e.kind() == io::ErrorKind::AlreadyExists => Ok(()),\n-        Err(e) => Err(e)\n-    }\n-}\n-\n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n /// things like \"..\" to components which preserve the \"top down\" hierarchy of a\n /// static HTML tree. Each component in the cleaned path will be passed as an\n@@ -951,7 +936,7 @@ impl<'a> SourceCollector<'a> {\n         let mut href = String::new();\n         clean_srcpath(&self.scx.src_root, &p, false, |component| {\n             cur.push(component);\n-            mkdir(&cur).unwrap();\n+            fs::create_dir_all(&cur).unwrap();\n             root_path.push_str(\"../\");\n             href.push_str(component);\n             href.push('/');"}, {"sha": "4e570718a62f987ffcf9b812550b0b759ca88735", "filename": "src/test/run-make/rustdoc-output-path/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b/src%2Ftest%2Frun-make%2Frustdoc-output-path%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b/src%2Ftest%2Frun-make%2Frustdoc-output-path%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-output-path%2FMakefile?ref=0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(HOST_RPATH_ENV) '$(RUSTDOC)' -o \"$(TMPDIR)/foo/bar/doc\" foo.rs"}, {"sha": "11fc2cd2b8d15bec162bd31ca1ede0bbba69a582", "filename": "src/test/run-make/rustdoc-output-path/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b/src%2Ftest%2Frun-make%2Frustdoc-output-path%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b/src%2Ftest%2Frun-make%2Frustdoc-output-path%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-output-path%2Ffoo.rs?ref=0a5218b5066d51aa0dbdf5fe5ab479c146a07b6b", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;"}]}