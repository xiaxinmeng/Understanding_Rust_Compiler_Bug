{"sha": "877877a19a408421486a5077d36e1bfef090e42e", "node_id": "C_kwDOAAsO6NoAKDg3Nzg3N2ExOWE0MDg0MjE0ODZhNTA3N2QzNmUxYmZlZjA5MGU0MmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-30T17:47:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-30T17:47:57Z"}, "message": "Auto merge of #102520 - matthiaskrgr:rollup-7nreat0, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #102276 (Added more const_closure functionality)\n - #102382 (Manually order `DefId` on 64-bit big-endian)\n - #102421 (remove the unused :: between trait and type to give user correct diag\u2026)\n - #102495 (Reinstate `hir-stats.rs` test for stage 1.)\n - #102505 (rustdoc: remove no-op CSS `h3.variant, .sub-variant h4 { border-bottom: none }`)\n - #102506 (Specify `DynKind::Dyn`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dfb80c5ba5a707d55dd72ce8cb2e09b3cfc4f834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfb80c5ba5a707d55dd72ce8cb2e09b3cfc4f834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/877877a19a408421486a5077d36e1bfef090e42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/877877a19a408421486a5077d36e1bfef090e42e", "html_url": "https://github.com/rust-lang/rust/commit/877877a19a408421486a5077d36e1bfef090e42e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/877877a19a408421486a5077d36e1bfef090e42e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d3027fb5ce1af6712e4503c9574802212101bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d3027fb5ce1af6712e4503c9574802212101bd", "html_url": "https://github.com/rust-lang/rust/commit/75d3027fb5ce1af6712e4503c9574802212101bd"}, {"sha": "a8777580ee83c84a95d06f17439174a4e5913667", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8777580ee83c84a95d06f17439174a4e5913667", "html_url": "https://github.com/rust-lang/rust/commit/a8777580ee83c84a95d06f17439174a4e5913667"}], "stats": {"total": 143, "additions": 107, "deletions": 36}, "files": [{"sha": "bbeabdb55a72a7b02edc3ee1b3c89c4fc0418ba4", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -218,7 +218,9 @@ impl<D: Decoder> Decodable<D> for DefIndex {\n /// index and a def index.\n ///\n /// You can create a `DefId` from a `LocalDefId` using `local_def_id.to_def_id()`.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Copy)]\n+#[derive(Clone, PartialEq, Eq, Copy)]\n+// Don't derive order on 64-bit big-endian, so we can be consistent regardless of field order.\n+#[cfg_attr(not(all(target_pointer_width = \"64\", target_endian = \"big\")), derive(PartialOrd, Ord))]\n // On below-64 bit systems we can simply use the derived `Hash` impl\n #[cfg_attr(not(target_pointer_width = \"64\"), derive(Hash))]\n #[repr(C)]\n@@ -260,6 +262,22 @@ impl Hash for DefId {\n     }\n }\n \n+// Implement the same comparison as derived with the other field order.\n+#[cfg(all(target_pointer_width = \"64\", target_endian = \"big\"))]\n+impl Ord for DefId {\n+    #[inline]\n+    fn cmp(&self, other: &DefId) -> std::cmp::Ordering {\n+        Ord::cmp(&(self.index, self.krate), &(other.index, other.krate))\n+    }\n+}\n+#[cfg(all(target_pointer_width = \"64\", target_endian = \"big\"))]\n+impl PartialOrd for DefId {\n+    #[inline]\n+    fn partial_cmp(&self, other: &DefId) -> Option<std::cmp::Ordering> {\n+        Some(Ord::cmp(self, other))\n+    }\n+}\n+\n impl DefId {\n     /// Makes a local `DefId` from the given `DefIndex`.\n     #[inline]"}, {"sha": "5fdadd0b4b41bce2fa84ab56e6f5eacddfdaa850", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -2263,13 +2263,22 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                                     trait_impls.non_blanket_impls().len()\n                                 )\n                             };\n-\n+                            let mut suggestions = vec![(\n+                                trait_path_segment.ident.span.shrink_to_lo(),\n+                                format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())\n+                            )];\n+                            if let Some(generic_arg) = trait_path_segment.args {\n+                                let between_span = trait_path_segment.ident.span.between(generic_arg.span_ext);\n+                                // get rid of :: between Trait and <type>\n+                                // must be '::' between them, otherwise the parser won't accept the code\n+                                suggestions.push((between_span, \"\".to_string(),));\n+                                suggestions.push((generic_arg.span_ext.shrink_to_hi(), format!(\">\")));\n+                            } else {\n+                                suggestions.push((trait_path_segment.ident.span.shrink_to_hi(), format!(\">\")));\n+                            }\n                             err.multipart_suggestion(\n                                 message,\n-                                vec![\n-                                    (trait_path_segment.ident.span.shrink_to_lo(), format!(\"<{} as \", self.tcx.def_path(impl_def_id).to_string_no_crate_verbose())),\n-                                    (trait_path_segment.ident.span.shrink_to_hi(), format!(\">\"))\n-                                ],\n+                                suggestions,\n                                 Applicability::MaybeIncorrect\n                             );\n                         }"}, {"sha": "698fc81c587756a4923c5c600ce67685656827ab", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -1425,7 +1425,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut spans_and_needs_box = vec![];\n \n         match liberated_sig.output().kind() {\n-            ty::Dynamic(predicates, _, _) => {\n+            ty::Dynamic(predicates, _, ty::Dyn) => {\n                 let cause = ObligationCause::misc(ret_ty.span, fn_hir_id);\n                 let param_env = ty::ParamEnv::empty();\n "}, {"sha": "9e9c02093be203d208845880537a6d4a3288c654", "filename": "library/core/src/const_closure.rs", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/library%2Fcore%2Fsrc%2Fconst_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/library%2Fcore%2Fsrc%2Fconst_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconst_closure.rs?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -16,15 +16,18 @@ use crate::marker::Destruct;\n /// assert!(7 == cl(2));\n /// assert!(8 == cl(1));\n /// ```\n-pub(crate) struct ConstFnMutClosure<'a, CapturedData: ?Sized, Function> {\n-    data: &'a mut CapturedData,\n-    func: Function,\n+pub(crate) struct ConstFnMutClosure<CapturedData, Function> {\n+    /// The Data captured by the Closure.\n+    /// Must be either a (mutable) reference or a tuple of (mutable) references.\n+    pub data: CapturedData,\n+    /// The Function of the Closure, must be: Fn(CapturedData, ClosureArgs) -> ClosureReturn\n+    pub func: Function,\n }\n-\n-impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<'a, CapturedData, Function> {\n+impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<&'a mut CapturedData, Function> {\n     /// Function for creating a new closure.\n     ///\n     /// `data` is the a mutable borrow of data that is captured from the environment.\n+    /// If you want Data to be a tuple of mutable Borrows, the struct must be constructed manually.\n     ///\n     /// `func` is the function of the closure, it gets the data and a tuple of the arguments closure\n     ///   and return the return value of the closure.\n@@ -39,25 +42,36 @@ impl<'a, CapturedData: ?Sized, Function> ConstFnMutClosure<'a, CapturedData, Fun\n     }\n }\n \n-impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n-    FnOnce<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n-where\n-    Function:\n-        ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue + ~const Destruct,\n-{\n-    type Output = ClosureReturnValue;\n+macro_rules! impl_fn_mut_tuple {\n+    ($($var:ident)*) => {\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+            FnOnce<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments) -> ClosureReturnValue+ ~const Destruct,\n+        {\n+            type Output = ClosureReturnValue;\n \n-    extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n-        self.call_mut(args)\n-    }\n-}\n-\n-impl<'a, CapturedData: ?Sized, ClosureArguments, Function, ClosureReturnValue> const\n-    FnMut<ClosureArguments> for ConstFnMutClosure<'a, CapturedData, Function>\n-where\n-    Function: ~const Fn(&mut CapturedData, ClosureArguments) -> ClosureReturnValue,\n-{\n-    extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n-        (self.func)(self.data, args)\n-    }\n+            extern \"rust-call\" fn call_once(mut self, args: ClosureArguments) -> Self::Output {\n+            self.call_mut(args)\n+            }\n+        }\n+        #[allow(unused_parens)]\n+        impl<'a, $($var,)* ClosureArguments, Function, ClosureReturnValue> const\n+            FnMut<ClosureArguments> for ConstFnMutClosure<($(&'a mut $var),*), Function>\n+        where\n+            Function: ~const Fn(($(&mut $var),*), ClosureArguments)-> ClosureReturnValue,\n+        {\n+            extern \"rust-call\" fn call_mut(&mut self, args: ClosureArguments) -> Self::Output {\n+                #[allow(non_snake_case)]\n+                let ($($var),*) = &mut self.data;\n+                (self.func)(($($var),*), args)\n+            }\n+        }\n+    };\n }\n+impl_fn_mut_tuple!(A);\n+impl_fn_mut_tuple!(A B);\n+impl_fn_mut_tuple!(A B C);\n+impl_fn_mut_tuple!(A B C D);\n+impl_fn_mut_tuple!(A B C D E);"}, {"sha": "84a69046807c4b3fb314afd6b96ed46e0dcf7bc4", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -379,7 +379,7 @@ pub(crate) type ChangeOutputType<T, V> = <<T as Try>::Residual as Residual<V>>::\n pub(crate) struct NeverShortCircuit<T>(pub T);\n \n impl<T> NeverShortCircuit<T> {\n-    /// Wrap a binary `FnMut` to return its result wrapped in a `NeverShortCircuit`.\n+    /// Implementation for building `ConstFnMutClosure` for wrapping the output of a ~const FnMut in a `NeverShortCircuit`.\n     #[inline]\n     pub const fn wrap_mut_2_imp<A, B, F: ~const FnMut(A, B) -> T>(\n         f: &mut F,"}, {"sha": "9e991cc03a0c8f14f09b2cbe4353a4f07971c7f3", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -1245,13 +1245,11 @@ h3.variant {\n \tfont-weight: 600;\n \tfont-size: 1.125rem;\n \tmargin-bottom: 10px;\n-\tborder-bottom: none;\n }\n \n .sub-variant h4 {\n \tfont-size: 1rem;\n \tfont-weight: 400;\n-\tborder-bottom: none;\n \tmargin-top: 0;\n \tmargin-bottom: 0;\n }"}, {"sha": "a24b3ada57e59547d67f0e7761b38984dccdd12f", "filename": "src/test/ui/stats/hir-stats.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.rs?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -1,7 +1,6 @@\n // check-pass\n // compile-flags: -Zhir-stats\n // only-x86_64\n-// ignore-stage1\n \n // The aim here is to include at least one of every different type of top-level\n // AST/HIR node reported by `-Zhir-stats`."}, {"sha": "d332c4adb00609d6c3b63de1ba0328ef1f8fd434", "filename": "src/test/ui/type/issue-101866.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/src%2Ftest%2Fui%2Ftype%2Fissue-101866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/src%2Ftest%2Fui%2Ftype%2Fissue-101866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-101866.rs?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -0,0 +1,15 @@\n+trait TraitA<T> {\n+    fn func();\n+}\n+\n+struct StructA {}\n+\n+impl TraitA<i32> for StructA {\n+    fn func() {}\n+}\n+\n+fn main() {\n+    TraitA::<i32>::func();\n+    //~^ ERROR: cannot call associated function on trait without specifying the corresponding `impl` type [E0790]\n+    //~| help: use the fully-qualified path to the only available implementation\n+}"}, {"sha": "788e54b93819082f1829ee5019dc3ee5ef2b3f30", "filename": "src/test/ui/type/issue-101866.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/877877a19a408421486a5077d36e1bfef090e42e/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/877877a19a408421486a5077d36e1bfef090e42e/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-101866.stderr?ref=877877a19a408421486a5077d36e1bfef090e42e", "patch": "@@ -0,0 +1,18 @@\n+error[E0790]: cannot call associated function on trait without specifying the corresponding `impl` type\n+  --> $DIR/issue-101866.rs:12:5\n+   |\n+LL |     fn func();\n+   |     ---------- `TraitA::func` defined here\n+...\n+LL |     TraitA::<i32>::func();\n+   |     ^^^^^^^^^^^^^^^^^^^ cannot call associated function of trait\n+   |\n+help: use the fully-qualified path to the only available implementation\n+   |\n+LL -     TraitA::<i32>::func();\n+LL +     <::StructA as TraitA<i32>>::func();\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0790`."}]}