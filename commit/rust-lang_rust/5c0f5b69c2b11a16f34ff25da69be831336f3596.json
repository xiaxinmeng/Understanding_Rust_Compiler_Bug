{"sha": "5c0f5b69c2b11a16f34ff25da69be831336f3596", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMGY1YjY5YzJiMTFhMTZmMzRmZjI1ZGE2OWJlODMxMzM2ZjM1OTY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-10T07:55:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T07:55:53Z"}, "message": "Rollup merge of #79502 - Julian-Wollersberger:from_char_for_u64, r=withoutboats\n\nImplement From<char> for u64 and u128.\n\nWith this PR you can write\n```\nlet u = u64::from('\ud83d\udc64');\nlet u = u128::from('\ud83d\udc64');\n```\n\nPreviously, you could already write `as` conversions ([Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=cee18febe28e69024357d099f07ca081)):\n```\n// Lossless conversions\ndbg!('\ud83d\udc64' as u32);    // Prints 128100\ndbg!('\ud83d\udc64' as u64);    // Prints 128100\ndbg!('\ud83d\udc64' as u128);   // Prints 128100\n\n// truncates, thus no `From` impls.\ndbg!('\ud83d\udc64' as u8);     // Prints 100\ndbg!('\ud83d\udc64' as u16);    // Prints 62564\n\n// These `From` impls already exist.\ndbg!(u32::from('\ud83d\udc64'));               // Prints 128100\ndbg!(u64::from(u32::from('\ud83d\udc64')));    // Prints 128100\n```\n\nThe idea is from ``@gendx`` who opened [this Internals thread](https://internals.rust-lang.org/t/implement-from-char-for-u64/13454), and ``@withoutboats`` responded that someone should open a PR for it.\nSome people mentioned `From<char>` impls for `f32` and `f64`, but that doesn't seem correct to me, so I didn't include them here.\n\nI don't know what the feature should be named. Must it be registered somewhere, like unstable features?\n\nr? ``@withoutboats``", "tree": {"sha": "c79198a04b0639b0453a377e8269d74e5b50c1f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c79198a04b0639b0453a377e8269d74e5b50c1f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c0f5b69c2b11a16f34ff25da69be831336f3596", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+rMKCRBK7hj4Ov3rIwAAdHIIAFq4tAYDQ8ySvWjK/xUaQSeQ\ndpoNT5eu47xpbweUqpKhpjOfHgn93f/npPXhmDF8SJmegB8TLOc9zOkIF7Gr0VOq\n1UjuZzLRiAGZU1SRpBMovqH3xgmFmXdVpmb+kmKiim0BEWT1taxjfqZIvlrlVNVB\nc2zLW+PR0dDeXNMm6Zyq20wtaIhG7gDHVo8F8Y61BXmnZC6Hp4nvX3Th62rlLp8n\njAgUv4T8AuHAD2VQyCt2SyBAF9c5r+1kYoqzm88KZuY6TgGRh67BlIVsuYXk7pHv\n5gmkG2ISyZ2stNHkM8ex4mn+8353Cp5x8kto6DowoVM7iZ9grbGc4J3kjG/XEEk=\n=roT+\n-----END PGP SIGNATURE-----\n", "payload": "tree c79198a04b0639b0453a377e8269d74e5b50c1f2\nparent 7cf205610e1310897f43b35713a42459e8b40c64\nparent e8cb72c503ff02144876578e38f4782414750776\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610265353 +0900\ncommitter GitHub <noreply@github.com> 1610265353 +0900\n\nRollup merge of #79502 - Julian-Wollersberger:from_char_for_u64, r=withoutboats\n\nImplement From<char> for u64 and u128.\n\nWith this PR you can write\n```\nlet u = u64::from('\ud83d\udc64');\nlet u = u128::from('\ud83d\udc64');\n```\n\nPreviously, you could already write `as` conversions ([Playground link](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=cee18febe28e69024357d099f07ca081)):\n```\n// Lossless conversions\ndbg!('\ud83d\udc64' as u32);    // Prints 128100\ndbg!('\ud83d\udc64' as u64);    // Prints 128100\ndbg!('\ud83d\udc64' as u128);   // Prints 128100\n\n// truncates, thus no `From` impls.\ndbg!('\ud83d\udc64' as u8);     // Prints 100\ndbg!('\ud83d\udc64' as u16);    // Prints 62564\n\n// These `From` impls already exist.\ndbg!(u32::from('\ud83d\udc64'));               // Prints 128100\ndbg!(u64::from(u32::from('\ud83d\udc64')));    // Prints 128100\n```\n\nThe idea is from ``@gendx`` who opened [this Internals thread](https://internals.rust-lang.org/t/implement-from-char-for-u64/13454), and ``@withoutboats`` responded that someone should open a PR for it.\nSome people mentioned `From<char>` impls for `f32` and `f64`, but that doesn't seem correct to me, so I didn't include them here.\n\nI don't know what the feature should be named. Must it be registered somewhere, like unstable features?\n\nr? ``@withoutboats``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0f5b69c2b11a16f34ff25da69be831336f3596", "html_url": "https://github.com/rust-lang/rust/commit/5c0f5b69c2b11a16f34ff25da69be831336f3596", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c0f5b69c2b11a16f34ff25da69be831336f3596/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cf205610e1310897f43b35713a42459e8b40c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf205610e1310897f43b35713a42459e8b40c64", "html_url": "https://github.com/rust-lang/rust/commit/7cf205610e1310897f43b35713a42459e8b40c64"}, {"sha": "e8cb72c503ff02144876578e38f4782414750776", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8cb72c503ff02144876578e38f4782414750776", "html_url": "https://github.com/rust-lang/rust/commit/e8cb72c503ff02144876578e38f4782414750776"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "7a0ec32cc61a9b18b7913ccd05ab14cd7fc5403a", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5c0f5b69c2b11a16f34ff25da69be831336f3596/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c0f5b69c2b11a16f34ff25da69be831336f3596/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=5c0f5b69c2b11a16f34ff25da69be831336f3596", "patch": "@@ -113,6 +113,48 @@ impl From<char> for u32 {\n     }\n }\n \n+#[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n+impl From<char> for u64 {\n+    /// Converts a [`char`] into a [`u64`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// let c = '\ud83d\udc64';\n+    /// let u = u64::from(c);\n+    /// assert!(8 == mem::size_of_val(&u))\n+    /// ```\n+    #[inline]\n+    fn from(c: char) -> Self {\n+        // The char is casted to the value of the code point, then zero-extended to 64 bit.\n+        // See [https://doc.rust-lang.org/reference/expressions/operator-expr.html#semantics]\n+        c as u64\n+    }\n+}\n+\n+#[stable(feature = \"more_char_conversions\", since = \"1.51.0\")]\n+impl From<char> for u128 {\n+    /// Converts a [`char`] into a [`u128`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::mem;\n+    ///\n+    /// let c = '\u2699';\n+    /// let u = u128::from(c);\n+    /// assert!(16 == mem::size_of_val(&u))\n+    /// ```\n+    #[inline]\n+    fn from(c: char) -> Self {\n+        // The char is casted to the value of the code point, then zero-extended to 128 bit.\n+        // See [https://doc.rust-lang.org/reference/expressions/operator-expr.html#semantics]\n+        c as u128\n+    }\n+}\n+\n /// Maps a byte in 0x00..=0xFF to a `char` whose code point has the same value, in U+0000..=U+00FF.\n ///\n /// Unicode is designed such that this effectively decodes bytes"}]}