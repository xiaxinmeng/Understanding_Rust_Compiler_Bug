{"sha": "edee9c3898bdc3e319d90322259e535affd6ae49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZWU5YzM4OThiZGMzZTMxOWQ5MDMyMjI1OWU1MzVhZmZkNmFlNDk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-01T23:44:34Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-11T06:56:01Z"}, "message": "Lift using interners instead of in_arena", "tree": {"sha": "6c63a2fa573814344c1a741832e70de85f5e49fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c63a2fa573814344c1a741832e70de85f5e49fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edee9c3898bdc3e319d90322259e535affd6ae49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edee9c3898bdc3e319d90322259e535affd6ae49", "html_url": "https://github.com/rust-lang/rust/commit/edee9c3898bdc3e319d90322259e535affd6ae49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edee9c3898bdc3e319d90322259e535affd6ae49/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3", "html_url": "https://github.com/rust-lang/rust/commit/4b19c80819efbbf48a0efe0aba0e6e2fd3cafbc3"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "0c00f06b7b3f5e570187ad69257f278a0e4af04b", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/edee9c3898bdc3e319d90322259e535affd6ae49/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edee9c3898bdc3e319d90322259e535affd6ae49/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=edee9c3898bdc3e319d90322259e535affd6ae49", "patch": "@@ -53,7 +53,7 @@ use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n use arena::SyncDroplessArena;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n-use rustc_data_structures::sharded::ShardedHashMap;\n+use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{\n     hash_stable_hashmap, HashStable, StableHasher, StableVec,\n };\n@@ -1560,11 +1560,11 @@ pub trait Lift<'tcx>: fmt::Debug {\n }\n \n macro_rules! nop_lift {\n-    ($ty:ty => $lifted:ty) => {\n+    ($set:ident; $ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for $ty {\n             type Lifted = $lifted;\n             fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n-                if tcx.interners.arena.in_arena(*self as *const _) {\n+                if tcx.interners.$set.contains_pointer_to(&Interned(*self)) {\n                     Some(unsafe { mem::transmute(*self) })\n                 } else {\n                     None\n@@ -1575,14 +1575,14 @@ macro_rules! nop_lift {\n }\n \n macro_rules! nop_list_lift {\n-    ($ty:ty => $lifted:ty) => {\n+    ($set:ident; $ty:ty => $lifted:ty) => {\n         impl<'a, 'tcx> Lift<'tcx> for &'a List<$ty> {\n             type Lifted = &'tcx List<$lifted>;\n             fn lift_to_tcx(&self, tcx: TyCtxt<'tcx>) -> Option<Self::Lifted> {\n                 if self.is_empty() {\n                     return Some(List::empty());\n                 }\n-                if tcx.interners.arena.in_arena(*self as *const _) {\n+                if tcx.interners.$set.contains_pointer_to(&Interned(*self)) {\n                     Some(unsafe { mem::transmute(*self) })\n                 } else {\n                     None\n@@ -1592,21 +1592,21 @@ macro_rules! nop_list_lift {\n     };\n }\n \n-nop_lift! {Ty<'a> => Ty<'tcx>}\n-nop_lift! {Region<'a> => Region<'tcx>}\n-nop_lift! {Goal<'a> => Goal<'tcx>}\n-nop_lift! {&'a Const<'a> => &'tcx Const<'tcx>}\n+nop_lift! {type_; Ty<'a> => Ty<'tcx>}\n+nop_lift! {region; Region<'a> => Region<'tcx>}\n+nop_lift! {goal; Goal<'a> => Goal<'tcx>}\n+nop_lift! {const_; &'a Const<'a> => &'tcx Const<'tcx>}\n \n-nop_list_lift! {Goal<'a> => Goal<'tcx>}\n-nop_list_lift! {Clause<'a> => Clause<'tcx>}\n-nop_list_lift! {Ty<'a> => Ty<'tcx>}\n-nop_list_lift! {ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n-nop_list_lift! {Predicate<'a> => Predicate<'tcx>}\n-nop_list_lift! {CanonicalVarInfo => CanonicalVarInfo}\n-nop_list_lift! {ProjectionKind => ProjectionKind}\n+nop_list_lift! {goal_list; Goal<'a> => Goal<'tcx>}\n+nop_list_lift! {clauses; Clause<'a> => Clause<'tcx>}\n+nop_list_lift! {type_list; Ty<'a> => Ty<'tcx>}\n+nop_list_lift! {existential_predicates; ExistentialPredicate<'a> => ExistentialPredicate<'tcx>}\n+nop_list_lift! {predicates; Predicate<'a> => Predicate<'tcx>}\n+nop_list_lift! {canonical_var_infos; CanonicalVarInfo => CanonicalVarInfo}\n+nop_list_lift! {projs; ProjectionKind => ProjectionKind}\n \n // This is the impl for `&'a InternalSubsts<'a>`.\n-nop_list_lift! {GenericArg<'a> => GenericArg<'tcx>}\n+nop_list_lift! {substs; GenericArg<'a> => GenericArg<'tcx>}\n \n pub mod tls {\n     use super::{ptr_eq, GlobalCtxt, TyCtxt};\n@@ -1930,6 +1930,11 @@ impl<'tcx, T: 'tcx + ?Sized> Clone for Interned<'tcx, T> {\n }\n impl<'tcx, T: 'tcx + ?Sized> Copy for Interned<'tcx, T> {}\n \n+impl<'tcx, T: 'tcx + ?Sized> IntoPointer for Interned<'tcx, T> {\n+    fn into_pointer(&self) -> *const () {\n+        self.0 as *const _ as *const ()\n+    }\n+}\n // N.B., an `Interned<Ty>` compares and hashes as a `TyKind`.\n impl<'tcx> PartialEq for Interned<'tcx, TyS<'tcx>> {\n     fn eq(&self, other: &Interned<'tcx, TyS<'tcx>>) -> bool {"}, {"sha": "ee3f88ff1675fa6039077b6ad8c5e258a38ec10a", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edee9c3898bdc3e319d90322259e535affd6ae49/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edee9c3898bdc3e319d90322259e535affd6ae49/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=edee9c3898bdc3e319d90322259e535affd6ae49", "patch": "@@ -137,6 +137,20 @@ impl<K: Eq + Hash + Copy> ShardedHashMap<K, ()> {\n     }\n }\n \n+pub trait IntoPointer {\n+    /// Returns a pointer which outlives `self`.\n+    fn into_pointer(&self) -> *const ();\n+}\n+\n+impl<K: Eq + Hash + Copy + IntoPointer> ShardedHashMap<K, ()> {\n+    pub fn contains_pointer_to<T: Hash + IntoPointer>(&self, value: &T) -> bool {\n+        let hash = make_hash(&value);\n+        let shard = self.get_shard_by_hash(hash).lock();\n+        let value = value.into_pointer();\n+        shard.raw_entry().from_hash(hash, |entry| entry.into_pointer() == value).is_some()\n+    }\n+}\n+\n #[inline]\n fn make_hash<K: Hash + ?Sized>(val: &K) -> u64 {\n     let mut state = FxHasher::default();"}]}