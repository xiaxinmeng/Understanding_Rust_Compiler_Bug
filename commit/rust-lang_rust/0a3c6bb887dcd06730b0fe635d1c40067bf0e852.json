{"sha": "0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhM2M2YmI4ODdkY2QwNjczMGIwZmU2MzVkMWM0MDA2N2JmMGU4NTI=", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-09T22:04:59Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-09-09T22:04:59Z"}, "message": "In relate_tys, when creating new universes, insert missing universes as other", "tree": {"sha": "9043e0e49c0179bc5ef108e9c8e0b86805843c0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9043e0e49c0179bc5ef108e9c8e0b86805843c0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "html_url": "https://github.com/rust-lang/rust/commit/0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3c6bb887dcd06730b0fe635d1c40067bf0e852/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497ee321af3b8496eaccd7af7b437f18bab81abf", "url": "https://api.github.com/repos/rust-lang/rust/commits/497ee321af3b8496eaccd7af7b437f18bab81abf", "html_url": "https://github.com/rust-lang/rust/commit/497ee321af3b8496eaccd7af7b437f18bab81abf"}], "stats": {"total": 46, "additions": 43, "deletions": 3}, "files": [{"sha": "827e3814259fde88263540e0d6f21b8495336286", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0a3c6bb887dcd06730b0fe635d1c40067bf0e852/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3c6bb887dcd06730b0fe635d1c40067bf0e852/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "patch": "@@ -80,10 +80,15 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n     }\n \n     fn create_next_universe(&mut self) -> ty::UniverseIndex {\n-        let info_universe =\n-            self.borrowck_context.constraints.universe_causes.push(self.universe_info.clone());\n         let universe = self.infcx.create_next_universe();\n-        assert_eq!(info_universe, universe);\n+        // FIXME: If we relate tys after normalizing with late-bound regions, there will\n+        // be extra universes. A proper solution would be to somehow track those universes\n+        // during projection, but here we just treat those as \"other\"\n+        self.borrowck_context\n+            .constraints\n+            .universe_causes\n+            .ensure_contains_elem(universe, || UniverseInfo::other());\n+        self.borrowck_context.constraints.universe_causes[universe] = self.universe_info.clone();\n         universe\n     }\n "}, {"sha": "571b8531757cdc4579771b716e1711ca63c3354b", "filename": "src/test/ui/hrtb/issue-88446.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0a3c6bb887dcd06730b0fe635d1c40067bf0e852/src%2Ftest%2Fui%2Fhrtb%2Fissue-88446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3c6bb887dcd06730b0fe635d1c40067bf0e852/src%2Ftest%2Fui%2Fhrtb%2Fissue-88446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-88446.rs?ref=0a3c6bb887dcd06730b0fe635d1c40067bf0e852", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+\n+trait Yokeable<'a> {\n+    type Output: 'a;\n+}\n+impl<'a> Yokeable<'a> for () {\n+    type Output = ();\n+}\n+\n+trait DataMarker<'data> {\n+    type Yokeable: for<'a> Yokeable<'a>;\n+}\n+impl<'data> DataMarker<'data> for () {\n+    type Yokeable = ();\n+}\n+\n+struct DataPayload<'data, M>(&'data M);\n+\n+impl DataPayload<'static, ()> {\n+    pub fn map_project_with_capture<M2, T>(\n+        _: for<'a> fn(\n+            capture: T,\n+            std::marker::PhantomData<&'a ()>,\n+        ) -> <M2::Yokeable as Yokeable<'a>>::Output,\n+    ) -> DataPayload<'static, M2>\n+    where\n+        M2: DataMarker<'static>,\n+    {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    let _: DataPayload<()> = DataPayload::<()>::map_project_with_capture::<_, &()>(|_, _| todo!());\n+}"}]}