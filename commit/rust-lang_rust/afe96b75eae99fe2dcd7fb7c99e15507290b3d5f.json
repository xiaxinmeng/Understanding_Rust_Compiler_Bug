{"sha": "afe96b75eae99fe2dcd7fb7c99e15507290b3d5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZTk2Yjc1ZWFlOTlmZTJkY2Q3ZmI3Yzk5ZTE1NTA3MjkwYjNkNWY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-25T08:00:10Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-03-25T08:00:10Z"}, "message": "Merge #1045\n\n1045: simplify r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9e73d1fcc53a8287c1d352adce1a24994f9a9203", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e73d1fcc53a8287c1d352adce1a24994f9a9203"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe96b75eae99fe2dcd7fb7c99e15507290b3d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe96b75eae99fe2dcd7fb7c99e15507290b3d5f", "html_url": "https://github.com/rust-lang/rust/commit/afe96b75eae99fe2dcd7fb7c99e15507290b3d5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe96b75eae99fe2dcd7fb7c99e15507290b3d5f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6f995f47ea6acd69666b0e409b10b3ccd38821ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f995f47ea6acd69666b0e409b10b3ccd38821ce", "html_url": "https://github.com/rust-lang/rust/commit/6f995f47ea6acd69666b0e409b10b3ccd38821ce"}, {"sha": "6c4b06e2e3db2cf93cfd4930a016ab9ae695d4b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4b06e2e3db2cf93cfd4930a016ab9ae695d4b9", "html_url": "https://github.com/rust-lang/rust/commit/6c4b06e2e3db2cf93cfd4930a016ab9ae695d4b9"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "a6fac07c41413b4b799f8069bd79572a9444454e", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/afe96b75eae99fe2dcd7fb7c99e15507290b3d5f/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe96b75eae99fe2dcd7fb7c99e15507290b3d5f/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=afe96b75eae99fe2dcd7fb7c99e15507290b3d5f", "patch": "@@ -603,43 +603,40 @@ pub enum BinOp {\n \n impl BinExpr {\n     fn op_details(&self) -> Option<(&SyntaxNode, BinOp)> {\n-        self.syntax()\n-            .children()\n-            .filter_map(|c| match c.kind() {\n-                PIPEPIPE => Some((c, BinOp::BooleanOr)),\n-                AMPAMP => Some((c, BinOp::BooleanAnd)),\n-                EQEQ => Some((c, BinOp::EqualityTest)),\n-                NEQ => Some((c, BinOp::NegatedEqualityTest)),\n-                LTEQ => Some((c, BinOp::LesserEqualTest)),\n-                GTEQ => Some((c, BinOp::GreaterEqualTest)),\n-                L_ANGLE => Some((c, BinOp::LesserTest)),\n-                R_ANGLE => Some((c, BinOp::GreaterTest)),\n-                PLUS => Some((c, BinOp::Addition)),\n-                STAR => Some((c, BinOp::Multiplication)),\n-                MINUS => Some((c, BinOp::Subtraction)),\n-                SLASH => Some((c, BinOp::Division)),\n-                PERCENT => Some((c, BinOp::Remainder)),\n-                SHL => Some((c, BinOp::LeftShift)),\n-                SHR => Some((c, BinOp::RightShift)),\n-                CARET => Some((c, BinOp::BitwiseXor)),\n-                PIPE => Some((c, BinOp::BitwiseOr)),\n-                AMP => Some((c, BinOp::BitwiseAnd)),\n-                DOTDOT => Some((c, BinOp::RangeRightOpen)),\n-                DOTDOTEQ => Some((c, BinOp::RangeRightClosed)),\n-                EQ => Some((c, BinOp::Assignment)),\n-                PLUSEQ => Some((c, BinOp::AddAssign)),\n-                SLASHEQ => Some((c, BinOp::DivAssign)),\n-                STAREQ => Some((c, BinOp::MulAssign)),\n-                PERCENTEQ => Some((c, BinOp::RemAssign)),\n-                SHREQ => Some((c, BinOp::ShrAssign)),\n-                SHLEQ => Some((c, BinOp::ShlAssign)),\n-                MINUSEQ => Some((c, BinOp::SubAssign)),\n-                PIPEEQ => Some((c, BinOp::BitOrAssign)),\n-                AMPEQ => Some((c, BinOp::BitAndAssign)),\n-                CARETEQ => Some((c, BinOp::BitXorAssign)),\n-                _ => None,\n-            })\n-            .next()\n+        self.syntax().children().find_map(|c| match c.kind() {\n+            PIPEPIPE => Some((c, BinOp::BooleanOr)),\n+            AMPAMP => Some((c, BinOp::BooleanAnd)),\n+            EQEQ => Some((c, BinOp::EqualityTest)),\n+            NEQ => Some((c, BinOp::NegatedEqualityTest)),\n+            LTEQ => Some((c, BinOp::LesserEqualTest)),\n+            GTEQ => Some((c, BinOp::GreaterEqualTest)),\n+            L_ANGLE => Some((c, BinOp::LesserTest)),\n+            R_ANGLE => Some((c, BinOp::GreaterTest)),\n+            PLUS => Some((c, BinOp::Addition)),\n+            STAR => Some((c, BinOp::Multiplication)),\n+            MINUS => Some((c, BinOp::Subtraction)),\n+            SLASH => Some((c, BinOp::Division)),\n+            PERCENT => Some((c, BinOp::Remainder)),\n+            SHL => Some((c, BinOp::LeftShift)),\n+            SHR => Some((c, BinOp::RightShift)),\n+            CARET => Some((c, BinOp::BitwiseXor)),\n+            PIPE => Some((c, BinOp::BitwiseOr)),\n+            AMP => Some((c, BinOp::BitwiseAnd)),\n+            DOTDOT => Some((c, BinOp::RangeRightOpen)),\n+            DOTDOTEQ => Some((c, BinOp::RangeRightClosed)),\n+            EQ => Some((c, BinOp::Assignment)),\n+            PLUSEQ => Some((c, BinOp::AddAssign)),\n+            SLASHEQ => Some((c, BinOp::DivAssign)),\n+            STAREQ => Some((c, BinOp::MulAssign)),\n+            PERCENTEQ => Some((c, BinOp::RemAssign)),\n+            SHREQ => Some((c, BinOp::ShrAssign)),\n+            SHLEQ => Some((c, BinOp::ShlAssign)),\n+            MINUSEQ => Some((c, BinOp::SubAssign)),\n+            PIPEEQ => Some((c, BinOp::BitOrAssign)),\n+            AMPEQ => Some((c, BinOp::BitAndAssign)),\n+            CARETEQ => Some((c, BinOp::BitXorAssign)),\n+            _ => None,\n+        })\n     }\n \n     pub fn op_kind(&self) -> Option<BinOp> {"}]}