{"sha": "21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYWViMGY2Y2ZmYTMzZDJhNzIxZThiMTMwZmRjMTg3N2M5NjFkYzU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-24T18:32:05Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-06-26T22:14:43Z"}, "message": "Fix pretty-printing for bounded closures. Close #7333.", "tree": {"sha": "f88248a469a623f55b7ba375506b1e6232c9e1a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f88248a469a623f55b7ba375506b1e6232c9e1a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "html_url": "https://github.com/rust-lang/rust/commit/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0f56db9630f4b01a6a170aac220aa1b891d5016", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f56db9630f4b01a6a170aac220aa1b891d5016", "html_url": "https://github.com/rust-lang/rust/commit/d0f56db9630f4b01a6a170aac220aa1b891d5016"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "728a5a3d32af221788f6f5949e7c444632dc9ab0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "patch": "@@ -410,14 +410,14 @@ pub fn print_type(s: @ps, ty: @ast::Ty) {\n           let generics = ast::Generics {lifetimes: copy f.lifetimes,\n                                         ty_params: opt_vec::Empty};\n           print_ty_fn(s, Some(f.abis), None, None,\n-                      f.purity, ast::Many, &f.decl, None,\n+                      f.purity, ast::Many, &f.decl, None, &None,\n                       Some(&generics), None);\n       }\n       ast::ty_closure(f) => {\n           let generics = ast::Generics {lifetimes: copy f.lifetimes,\n                                         ty_params: opt_vec::Empty};\n           print_ty_fn(s, None, Some(f.sigil), f.region,\n-                      f.purity, f.onceness, &f.decl, None,\n+                      f.purity, f.onceness, &f.decl, None, &f.bounds,\n                       Some(&generics), None);\n       }\n       ast::ty_path(path, bounds, _) => print_bounded_path(s, path, bounds),\n@@ -806,7 +806,7 @@ pub fn print_ty_method(s: @ps, m: &ast::ty_method) {\n     maybe_print_comment(s, m.span.lo);\n     print_outer_attributes(s, m.attrs);\n     print_ty_fn(s, None, None, None, m.purity, ast::Many,\n-                &m.decl, Some(m.ident), Some(&m.generics),\n+                &m.decl, Some(m.ident), &None, Some(&m.generics),\n                 Some(/*bad*/ copy m.explicit_self.node));\n     word(s.s, \";\");\n }\n@@ -1497,7 +1497,7 @@ fn print_path_(s: @ps, path: @ast::Path, colons_before_params: bool,\n         print_ident(s, *id);\n     }\n     do opt_bounds.map |bounds| {\n-        print_bounds(s, bounds);\n+        print_bounds(s, bounds, true);\n     };\n     if path.rp.is_some() || !path.types.is_empty() {\n         if colons_before_params { word(s.s, \"::\"); }\n@@ -1737,7 +1737,8 @@ pub fn print_fn_block_args(s: @ps, decl: &ast::fn_decl) {\n     maybe_print_comment(s, decl.output.span.lo);\n }\n \n-pub fn print_bounds(s: @ps, bounds: &OptVec<ast::TyParamBound>) {\n+pub fn print_bounds(s: @ps, bounds: &OptVec<ast::TyParamBound>,\n+                    print_colon_anyway: bool) {\n     if !bounds.is_empty() {\n         word(s.s, \":\");\n         let mut first = true;\n@@ -1754,6 +1755,8 @@ pub fn print_bounds(s: @ps, bounds: &OptVec<ast::TyParamBound>) {\n                 RegionTyParamBound => word(s.s, \"'static\"),\n             }\n         }\n+    } else if print_colon_anyway {\n+        word(s.s, \":\");\n     }\n }\n \n@@ -1774,7 +1777,7 @@ pub fn print_generics(s: @ps, generics: &ast::Generics) {\n                 let idx = idx - generics.lifetimes.len();\n                 let param = generics.ty_params.get(idx);\n                 print_ident(s, param.ident);\n-                print_bounds(s, param.bounds);\n+                print_bounds(s, param.bounds, false);\n             }\n         }\n \n@@ -1917,6 +1920,7 @@ pub fn print_ty_fn(s: @ps,\n                    onceness: ast::Onceness,\n                    decl: &ast::fn_decl,\n                    id: Option<ast::ident>,\n+                   opt_bounds: &Option<OptVec<ast::TyParamBound>>,\n                    generics: Option<&ast::Generics>,\n                    opt_explicit_self: Option<ast::explicit_self_>) {\n     ibox(s, indent_unit);\n@@ -1930,6 +1934,7 @@ pub fn print_ty_fn(s: @ps,\n     print_onceness(s, onceness);\n     word(s.s, \"fn\");\n     match id { Some(id) => { word(s.s, \" \"); print_ident(s, id); } _ => () }\n+    do opt_bounds.map |bounds| { print_bounds(s, bounds, true); };\n     match generics { Some(g) => print_generics(s, g), _ => () }\n     zerobreak(s.s);\n "}, {"sha": "8c2ae22e8edfcc343e5ac87dc21cd67cf962384e", "filename": "src/test/run-pass/closure-bounds-copyable-squiggle-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-copyable-squiggle-closure.rs?ref=21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-pretty\n-\n // Tests correct copying of heap closures' environments.\n \n fn foo(x: ~fn:Copy()) -> (~fn:(), ~fn:()) {"}, {"sha": "88d474a51e1da03904f64c1ce695d1c6d7f480c6", "filename": "src/test/run-pass/closure-bounds-squiggle-closure-as-copyable-typaram.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21aeb0f6cffa33d2a721e8b130fdc1877c961dc5/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-squiggle-closure-as-copyable-typaram.rs?ref=21aeb0f6cffa33d2a721e8b130fdc1877c961dc5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-pretty\n-\n // Tests correct copying of heap closures' environments.\n \n fn bar<T: Copy>(x: T) -> (T, T) {"}]}