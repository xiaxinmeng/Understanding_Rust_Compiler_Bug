{"sha": "5e22500754913f55d6dcba34707b6a442c05bcc7", "node_id": "C_kwDOAAsO6NoAKDVlMjI1MDA3NTQ5MTNmNTVkNmRjYmEzNDcwN2I2YTQ0MmMwNWJjYzc", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-14T04:49:21Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2021-12-14T04:52:01Z"}, "message": "Remove `in_band_lifetimes` from `rustc_incremental`", "tree": {"sha": "1f5235b0432804812de1351a0122e69503691080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f5235b0432804812de1351a0122e69503691080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e22500754913f55d6dcba34707b6a442c05bcc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e22500754913f55d6dcba34707b6a442c05bcc7", "html_url": "https://github.com/rust-lang/rust/commit/5e22500754913f55d6dcba34707b6a442c05bcc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e22500754913f55d6dcba34707b6a442c05bcc7/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c", "html_url": "https://github.com/rust-lang/rust/commit/8f117a77d0880ed59afcc1a19c72ec5c1e44b97c"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "4691cdd64c10deaaed0823df149258c3696a996f", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=5e22500754913f55d6dcba34707b6a442c05bcc7", "patch": "@@ -103,7 +103,7 @@ struct IfThisChanged<'tcx> {\n     then_this_would_need: Targets,\n }\n \n-impl IfThisChanged<'tcx> {\n+impl<'tcx> IfThisChanged<'tcx> {\n     fn argument(&self, attr: &ast::Attribute) -> Option<Symbol> {\n         let mut value = None;\n         for list_item in attr.meta_item_list().unwrap_or_default() {\n@@ -172,7 +172,7 @@ impl IfThisChanged<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for IfThisChanged<'tcx> {\n+impl<'tcx> Visitor<'tcx> for IfThisChanged<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "b5974f8fb768f587a9c9a99cfbb44fe82af86247", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=5e22500754913f55d6dcba34707b6a442c05bcc7", "patch": "@@ -56,7 +56,7 @@ struct AssertModuleSource<'tcx> {\n     available_cgus: BTreeSet<String>,\n }\n \n-impl AssertModuleSource<'tcx> {\n+impl<'tcx> AssertModuleSource<'tcx> {\n     fn check_attr(&self, attr: &ast::Attribute) {\n         let (expected_reuse, comp_kind) = if attr.has_name(sym::rustc_partition_reused) {\n             (CguReuse::PreLto, ComparisonKind::AtLeast)"}, {"sha": "df64534ce54d924ae0c6bcb427d9e08502f7b100", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=5e22500754913f55d6dcba34707b6a442c05bcc7", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]"}, {"sha": "7ac00b4609aaf92efe2b2aaee926d97bc46a8271", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e22500754913f55d6dcba34707b6a442c05bcc7/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=5e22500754913f55d6dcba34707b6a442c05bcc7", "patch": "@@ -155,7 +155,7 @@ pub struct DirtyCleanVisitor<'tcx> {\n     checked_attrs: FxHashSet<ast::AttrId>,\n }\n \n-impl DirtyCleanVisitor<'tcx> {\n+impl<'tcx> DirtyCleanVisitor<'tcx> {\n     /// Possibly \"deserialize\" the attribute into a clean/dirty assertion\n     fn assertion_maybe(&mut self, item_id: LocalDefId, attr: &Attribute) -> Option<Assertion> {\n         if !attr.has_name(sym::rustc_clean) {\n@@ -352,7 +352,7 @@ impl DirtyCleanVisitor<'tcx> {\n     }\n }\n \n-impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.check_item(item.def_id, item.span);\n     }\n@@ -415,7 +415,7 @@ pub struct FindAllAttrs<'tcx> {\n     found_attrs: Vec<&'tcx Attribute>,\n }\n \n-impl FindAllAttrs<'tcx> {\n+impl<'tcx> FindAllAttrs<'tcx> {\n     fn is_active_attr(&mut self, attr: &Attribute) -> bool {\n         if attr.has_name(sym::rustc_clean) && check_config(self.tcx, attr) {\n             return true;\n@@ -434,7 +434,7 @@ impl FindAllAttrs<'tcx> {\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n+impl<'tcx> intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}]}