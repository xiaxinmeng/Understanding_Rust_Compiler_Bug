{"sha": "10e3a9879c8714320f9a0729d647da7877f0a753", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZTNhOTg3OWM4NzE0MzIwZjlhMDcyOWQ2NDdkYTc4NzdmMGE3NTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-17T10:53:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T10:53:12Z"}, "message": "Merge #6571\n\n6571: Cleanup project model r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b480f5f51f9bb14e689c5b61fdfab3d0d013956c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b480f5f51f9bb14e689c5b61fdfab3d0d013956c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10e3a9879c8714320f9a0729d647da7877f0a753", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfs6uYCRBK7hj4Ov3rIwAAdHIIAAP8kbxQdVOhgx/R3+TjGQ8F\nBdnc0Wfb4J3CsCGm7EbWDAO+gLO9g+qbG9IASRTpHao5Lm7OyffsUPVaTbbEHAfD\nC1YfdK5Zz8TQVbrEw9qSa4PgiHqZz6aMKyckQYcHcMH+8gWmkk0NjtBgWZtCIPQB\nf0sFeawWCmuHJSTRc6YclZJh+o2qqmmpeq68U2AxAfjKfA/sQodmAY4YlFfySLrt\nCc/ed+1EkuQu5xYXWmtScchVQGV3VUQdXmX9Q5rCO/5R5D8x9IcqI7aNCSVi8Vlf\nA1/jlHrB6H+l1qJOu9KO1btqJ4ff65bMpWSnMHEmBB6sMg/vLhGXeBnQzd/EBUk=\n=jlXe\n-----END PGP SIGNATURE-----\n", "payload": "tree b480f5f51f9bb14e689c5b61fdfab3d0d013956c\nparent c7c4e9180b3d36586d85fb11361321a27dac5193\nparent 0dc1742187d36b559d5d62ada3989901fdbd074c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1605610392 +0000\ncommitter GitHub <noreply@github.com> 1605610392 +0000\n\nMerge #6571\n\n6571: Cleanup project model r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10e3a9879c8714320f9a0729d647da7877f0a753", "html_url": "https://github.com/rust-lang/rust/commit/10e3a9879c8714320f9a0729d647da7877f0a753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10e3a9879c8714320f9a0729d647da7877f0a753/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7c4e9180b3d36586d85fb11361321a27dac5193", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7c4e9180b3d36586d85fb11361321a27dac5193", "html_url": "https://github.com/rust-lang/rust/commit/c7c4e9180b3d36586d85fb11361321a27dac5193"}, {"sha": "0dc1742187d36b559d5d62ada3989901fdbd074c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dc1742187d36b559d5d62ada3989901fdbd074c", "html_url": "https://github.com/rust-lang/rust/commit/0dc1742187d36b559d5d62ada3989901fdbd074c"}], "stats": {"total": 183, "additions": 75, "deletions": 108}, "files": [{"sha": "98ba372ad8dbd885895476bcb80c7cd15f832efb", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/10e3a9879c8714320f9a0729d647da7877f0a753/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e3a9879c8714320f9a0729d647da7877f0a753/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=10e3a9879c8714320f9a0729d647da7877f0a753", "patch": "@@ -225,7 +225,10 @@ impl CrateGraph {\n         to: CrateId,\n     ) -> Result<(), CyclicDependenciesError> {\n         if self.dfs_find(from, to, &mut FxHashSet::default()) {\n-            return Err(CyclicDependenciesError);\n+            return Err(CyclicDependenciesError {\n+                from: (from, self[from].display_name.clone()),\n+                to: (to, self[to].display_name.clone()),\n+            });\n         }\n         self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n@@ -421,7 +424,20 @@ impl fmt::Display for ParseEditionError {\n impl std::error::Error for ParseEditionError {}\n \n #[derive(Debug)]\n-pub struct CyclicDependenciesError;\n+pub struct CyclicDependenciesError {\n+    from: (CrateId, Option<CrateDisplayName>),\n+    to: (CrateId, Option<CrateDisplayName>),\n+}\n+\n+impl fmt::Display for CyclicDependenciesError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let render = |(id, name): &(CrateId, Option<CrateDisplayName>)| match name {\n+            Some(it) => format!(\"{}({:?})\", it, id),\n+            None => format!(\"{:?}\", id),\n+        };\n+        write!(f, \"cyclic deps: {} -> {}\", render(&self.from), render(&self.to))\n+    }\n+}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "f0a43eaf6b87dbbbb1f948fc08a77028ec41f609", "filename": "crates/project_model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10e3a9879c8714320f9a0729d647da7877f0a753/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e3a9879c8714320f9a0729d647da7877f0a753/crates%2Fproject_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fsysroot.rs?ref=10e3a9879c8714320f9a0729d647da7877f0a753", "patch": "@@ -37,7 +37,7 @@ impl Sysroot {\n     pub fn public_deps(&self) -> impl Iterator<Item = (&'static str, SysrootCrate)> + '_ {\n         // core is added as a dependency before std in order to\n         // mimic rustcs dependency order\n-        vec![\"core\", \"alloc\", \"std\"].into_iter().filter_map(move |it| Some((it, self.by_name(it)?)))\n+        [\"core\", \"alloc\", \"std\"].iter().filter_map(move |&it| Some((it, self.by_name(it)?)))\n     }\n \n     pub fn proc_macro(&self) -> Option<SysrootCrate> {"}, {"sha": "dbf1dc5bfac12425ac3193a70e36eae1bfdbed96", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 56, "deletions": 105, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/10e3a9879c8714320f9a0729d647da7877f0a753/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10e3a9879c8714320f9a0729d647da7877f0a753/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=10e3a9879c8714320f9a0729d647da7877f0a753", "patch": "@@ -12,8 +12,8 @@ use proc_macro_api::ProcMacroClient;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    cargo_workspace, cfg_flag::CfgFlag, utf8_stdout, CargoConfig, CargoWorkspace, ProjectJson,\n-    ProjectManifest, Sysroot, TargetKind,\n+    cargo_workspace, cfg_flag::CfgFlag, sysroot::SysrootCrate, utf8_stdout, CargoConfig,\n+    CargoWorkspace, ProjectJson, ProjectManifest, Sysroot, TargetKind,\n };\n \n /// `PackageRoot` describes a package root folder.\n@@ -70,12 +70,8 @@ impl ProjectWorkspace {\n                     format!(\"Failed to deserialize json file {}\", project_json.display())\n                 })?;\n                 let project_location = project_json.parent().unwrap().to_path_buf();\n-                let project = ProjectJson::new(&project_location, data);\n-                let sysroot = match &project.sysroot_src {\n-                    Some(path) => Some(Sysroot::load(path)?),\n-                    None => None,\n-                };\n-                ProjectWorkspace::Json { project, sysroot }\n+                let project_json = ProjectJson::new(&project_location, data);\n+                ProjectWorkspace::load_inline(project_json)?\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n                 let cargo_version = utf8_stdout({\n@@ -150,43 +146,38 @@ impl ProjectWorkspace {\n                     })\n                 }))\n                 .collect::<Vec<_>>(),\n-            ProjectWorkspace::Cargo { cargo, sysroot, rustc } => {\n-                let roots = cargo\n-                    .packages()\n-                    .map(|pkg| {\n-                        let is_member = cargo[pkg].is_member;\n-                        let pkg_root = cargo[pkg].root().to_path_buf();\n-\n-                        let mut include = vec![pkg_root.clone()];\n-                        include.extend(cargo[pkg].out_dir.clone());\n-\n-                        let mut exclude = vec![pkg_root.join(\".git\")];\n-                        if is_member {\n-                            exclude.push(pkg_root.join(\"target\"));\n-                        } else {\n-                            exclude.push(pkg_root.join(\"tests\"));\n-                            exclude.push(pkg_root.join(\"examples\"));\n-                            exclude.push(pkg_root.join(\"benches\"));\n-                        }\n-                        PackageRoot { is_member, include, exclude }\n-                    })\n-                    .chain(sysroot.crates().map(|krate| PackageRoot {\n+            ProjectWorkspace::Cargo { cargo, sysroot, rustc } => cargo\n+                .packages()\n+                .map(|pkg| {\n+                    let is_member = cargo[pkg].is_member;\n+                    let pkg_root = cargo[pkg].root().to_path_buf();\n+\n+                    let mut include = vec![pkg_root.clone()];\n+                    include.extend(cargo[pkg].out_dir.clone());\n+\n+                    let mut exclude = vec![pkg_root.join(\".git\")];\n+                    if is_member {\n+                        exclude.push(pkg_root.join(\"target\"));\n+                    } else {\n+                        exclude.push(pkg_root.join(\"tests\"));\n+                        exclude.push(pkg_root.join(\"examples\"));\n+                        exclude.push(pkg_root.join(\"benches\"));\n+                    }\n+                    PackageRoot { is_member, include, exclude }\n+                })\n+                .chain(sysroot.crates().map(|krate| PackageRoot {\n+                    is_member: false,\n+                    include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                    exclude: Vec::new(),\n+                }))\n+                .chain(rustc.into_iter().flat_map(|rustc| {\n+                    rustc.packages().map(move |krate| PackageRoot {\n                         is_member: false,\n-                        include: vec![sysroot[krate].root_dir().to_path_buf()],\n+                        include: vec![rustc[krate].root().to_path_buf()],\n                         exclude: Vec::new(),\n-                    }));\n-                if let Some(rustc_packages) = rustc {\n-                    roots\n-                        .chain(rustc_packages.packages().map(|krate| PackageRoot {\n-                            is_member: false,\n-                            include: vec![rustc_packages[krate].root().to_path_buf()],\n-                            exclude: Vec::new(),\n-                        }))\n-                        .collect()\n-                } else {\n-                    roots.collect()\n-                }\n-            }\n+                    })\n+                }))\n+                .collect(),\n         }\n     }\n \n@@ -258,18 +249,14 @@ impl ProjectWorkspace {\n                     if let Some(&from) = crates.get(&from) {\n                         if let Some((public_deps, _proc_macro)) = &sysroot_dps {\n                             for (name, to) in public_deps.iter() {\n-                                if let Err(_) = crate_graph.add_dep(from, name.clone(), *to) {\n-                                    log::error!(\"cyclic dependency on {} for {:?}\", name, from)\n-                                }\n+                                add_dep(&mut crate_graph, from, name.clone(), *to)\n                             }\n                         }\n \n                         for dep in &krate.deps {\n                             let to_crate_id = dep.crate_id;\n                             if let Some(&to) = crates.get(&to_crate_id) {\n-                                if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n-                                    log::error!(\"cyclic dependency {:?} -> {:?}\", from, to);\n-                                }\n+                                add_dep(&mut crate_graph, from, dep.name.clone(), to)\n                             }\n                         }\n                     }\n@@ -308,16 +295,12 @@ impl ProjectWorkspace {\n                             }\n                             if cargo[tgt].is_proc_macro {\n                                 if let Some(proc_macro) = libproc_macro {\n-                                    if let Err(_) = crate_graph.add_dep(\n+                                    add_dep(\n+                                        &mut crate_graph,\n                                         crate_id,\n                                         CrateName::new(\"proc_macro\").unwrap(),\n                                         proc_macro,\n-                                    ) {\n-                                        log::error!(\n-                                            \"cyclic dependency on proc_macro for {}\",\n-                                            &cargo[pkg].name\n-                                        )\n-                                    }\n+                                    );\n                                 }\n                             }\n \n@@ -332,21 +315,12 @@ impl ProjectWorkspace {\n                             // cargo metadata does not do any normalization,\n                             // so we do it ourselves currently\n                             let name = CrateName::normalize_dashes(&name);\n-                            if to != from && crate_graph.add_dep(from, name, to).is_err() {\n-                                log::error!(\n-                                    \"cyclic dependency between targets of {}\",\n-                                    &cargo[pkg].name\n-                                )\n+                            if to != from {\n+                                add_dep(&mut crate_graph, from, name, to);\n                             }\n                         }\n                         for (name, krate) in public_deps.iter() {\n-                            if let Err(_) = crate_graph.add_dep(from, name.clone(), *krate) {\n-                                log::error!(\n-                                    \"cyclic dependency on {} for {}\",\n-                                    name,\n-                                    &cargo[pkg].name\n-                                )\n-                            }\n+                            add_dep(&mut crate_graph, from, name.clone(), *krate);\n                         }\n                     }\n                 }\n@@ -358,13 +332,7 @@ impl ProjectWorkspace {\n                         let name = CrateName::new(&dep.name).unwrap();\n                         if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                             for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n-                                    log::error!(\n-                                        \"cyclic dependency {} -> {}\",\n-                                        &cargo[pkg].name,\n-                                        &cargo[dep.pkg].name\n-                                    )\n-                                }\n+                                add_dep(&mut crate_graph, from, name.clone(), to)\n                             }\n                         }\n                     }\n@@ -400,15 +368,7 @@ impl ProjectWorkspace {\n                                 pkg_to_lib_crate.insert(pkg, crate_id);\n                                 // Add dependencies on the core / std / alloc for rustc\n                                 for (name, krate) in public_deps.iter() {\n-                                    if let Err(_) =\n-                                        crate_graph.add_dep(crate_id, name.clone(), *krate)\n-                                    {\n-                                        log::error!(\n-                                            \"cyclic dependency on {} for {}\",\n-                                            name,\n-                                            &cargo[pkg].name\n-                                        )\n-                                    }\n+                                    add_dep(&mut crate_graph, crate_id, name.clone(), *krate);\n                                 }\n                                 rustc_pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n                             }\n@@ -421,13 +381,7 @@ impl ProjectWorkspace {\n                             let name = CrateName::new(&dep.name).unwrap();\n                             if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                                 for &from in rustc_pkg_crates.get(&pkg).into_iter().flatten() {\n-                                    if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n-                                        log::error!(\n-                                            \"cyclic dependency {} -> {}\",\n-                                            &rustc_workspace[pkg].name,\n-                                            &rustc_workspace[dep.pkg].name\n-                                        )\n-                                    }\n+                                    add_dep(&mut crate_graph, from, name.clone(), to);\n                                 }\n                             }\n                         }\n@@ -443,13 +397,7 @@ impl ProjectWorkspace {\n                                     continue;\n                                 }\n                                 for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                    if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n-                                        log::error!(\n-                                            \"cyclic dependency {} -> {}\",\n-                                            &cargo[pkg].name,\n-                                            &rustc_workspace[dep].name\n-                                        )\n-                                    }\n+                                    add_dep(&mut crate_graph, from, name.clone(), to);\n                                 }\n                             }\n                         }\n@@ -520,19 +468,18 @@ fn sysroot_to_crate_graph(\n ) -> (Vec<(CrateName, CrateId)>, Option<CrateId>) {\n     let mut cfg_options = CfgOptions::default();\n     cfg_options.extend(get_rustc_cfg_options(target));\n-    let sysroot_crates: FxHashMap<_, _> = sysroot\n+    let sysroot_crates: FxHashMap<SysrootCrate, CrateId> = sysroot\n         .crates()\n         .filter_map(|krate| {\n             let file_id = load(&sysroot[krate].root)?;\n \n             let env = Env::default();\n             let proc_macro = vec![];\n-            let name = CrateName::new(&sysroot[krate].name)\n-                .expect(\"Sysroot crates' names do not contain dashes\");\n+            let display_name = CrateDisplayName::from_canonical_name(sysroot[krate].name.clone());\n             let crate_id = crate_graph.add_crate_root(\n                 file_id,\n                 Edition::Edition2018,\n-                Some(name.into()),\n+                Some(display_name),\n                 cfg_options.clone(),\n                 env,\n                 proc_macro,\n@@ -545,9 +492,7 @@ fn sysroot_to_crate_graph(\n         for &to in sysroot[from].deps.iter() {\n             let name = CrateName::new(&sysroot[to].name).unwrap();\n             if let (Some(&from), Some(&to)) = (sysroot_crates.get(&from), sysroot_crates.get(&to)) {\n-                if let Err(_) = crate_graph.add_dep(from, name, to) {\n-                    log::error!(\"cyclic dependency between sysroot crates\")\n-                }\n+                add_dep(crate_graph, from, name, to);\n             }\n         }\n     }\n@@ -588,3 +533,9 @@ fn get_rustc_cfg_options(target: Option<&str>) -> Vec<CfgFlag> {\n \n     res\n }\n+\n+fn add_dep(graph: &mut CrateGraph, from: CrateId, name: CrateName, to: CrateId) {\n+    if let Err(err) = graph.add_dep(from, name, to) {\n+        log::error!(\"{}\", err)\n+    }\n+}"}]}