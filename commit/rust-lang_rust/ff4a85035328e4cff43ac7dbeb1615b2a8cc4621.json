{"sha": "ff4a85035328e4cff43ac7dbeb1615b2a8cc4621", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNGE4NTAzNTMyOGU0Y2ZmNDNhYzdkYmViMTYxNWIyYThjYzQ2MjE=", "commit": {"author": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2017-10-20T15:39:20Z"}, "committer": {"name": "HMPerson1", "email": "hmperson1@gmail.com", "date": "2017-10-21T00:33:19Z"}, "message": "Add lint for useless `as_ref` calls", "tree": {"sha": "9b42d6b1c67233b48d2b22203f38c34f27744406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b42d6b1c67233b48d2b22203f38c34f27744406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621", "html_url": "https://github.com/rust-lang/rust/commit/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621/comments", "author": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HMPerson1", "id": 2219904, "node_id": "MDQ6VXNlcjIyMTk5MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2219904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HMPerson1", "html_url": "https://github.com/HMPerson1", "followers_url": "https://api.github.com/users/HMPerson1/followers", "following_url": "https://api.github.com/users/HMPerson1/following{/other_user}", "gists_url": "https://api.github.com/users/HMPerson1/gists{/gist_id}", "starred_url": "https://api.github.com/users/HMPerson1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HMPerson1/subscriptions", "organizations_url": "https://api.github.com/users/HMPerson1/orgs", "repos_url": "https://api.github.com/users/HMPerson1/repos", "events_url": "https://api.github.com/users/HMPerson1/events{/privacy}", "received_events_url": "https://api.github.com/users/HMPerson1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e489f322155113fe911352895a8fee68a9751d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e489f322155113fe911352895a8fee68a9751d7", "html_url": "https://github.com/rust-lang/rust/commit/0e489f322155113fe911352895a8fee68a9751d7"}], "stats": {"total": 209, "additions": 207, "deletions": 2}, "files": [{"sha": "4a0d1cf19cb42e4746191103314276d8b6c07081", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=ff4a85035328e4cff43ac7dbeb1615b2a8cc4621", "patch": "@@ -581,6 +581,29 @@ declare_lint! {\n     \"using `.chars().last()` or `.chars().next_back()` to check if a string ends with a char\"\n }\n \n+/// **What it does:** Checks for usage of `.as_ref()` or `.as_mut()` where the\n+/// types before and after the call are the same.\n+///\n+/// **Why is this bad?** The call is unnecessary.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x: &[i32] = &[1,2,3,4,5];\n+/// do_stuff(x.as_ref());\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let x: &[i32] = &[1,2,3,4,5];\n+/// do_stuff(x);\n+/// ```\n+declare_lint! {\n+    pub USELESS_ASREF,\n+    Warn,\n+    \"using `as_ref` where the types before and after the call are the same\"\n+}\n+\n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(\n@@ -609,8 +632,8 @@ impl LintPass for Pass {\n             ITER_SKIP_NEXT,\n             GET_UNWRAP,\n             STRING_EXTEND_CHARS,\n-            ITER_CLONED_COLLECT\n-        )\n+            ITER_CLONED_COLLECT,\n+            USELESS_ASREF)\n     }\n }\n \n@@ -669,6 +692,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     lint_iter_skip_next(cx, expr);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"cloned\", \"collect\"]) {\n                     lint_iter_cloned_collect(cx, expr, arglists[0]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"as_ref\"]) {\n+                    lint_asref(cx, expr, \"as_ref\", arglists[0]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"as_mut\"]) {\n+                    lint_asref(cx, expr, \"as_mut\", arglists[0]);\n                 }\n \n                 lint_or_fun_call(cx, expr, &method_call.name.as_str(), args);\n@@ -1504,6 +1531,30 @@ fn lint_single_char_pattern<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hi\n     }\n }\n \n+/// Checks for the `USELESS_ASREF` lint.\n+fn lint_asref(cx: &LateContext, expr: &hir::Expr, call_name: &str, as_ref_args: &[hir::Expr]) {\n+    // when we get here, we've already checked that the call name is \"as_ref\" or \"as_mut\"\n+    // check if the call is to the actual `AsRef` or `AsMut` trait\n+    if match_trait_method(cx, expr, &paths::ASREF_TRAIT) || match_trait_method(cx, expr, &paths::ASMUT_TRAIT) {\n+        // check if the type after `as_ref` or `as_mut` is the same as before\n+        let recvr = &as_ref_args[0];\n+        let rcv_ty = cx.tables.expr_ty(recvr);\n+        let res_ty = cx.tables.expr_ty(expr);\n+        let (base_res_ty, res_depth) = walk_ptrs_ty_depth(res_ty);\n+        let (base_rcv_ty, rcv_depth) = walk_ptrs_ty_depth(rcv_ty);\n+        if base_rcv_ty == base_res_ty && rcv_depth >= res_depth {\n+            span_lint_and_sugg(\n+                cx,\n+                USELESS_ASREF,\n+                expr.span,\n+                &format!(\"this call to `{}` does nothing\", call_name),\n+                \"try this\",\n+                snippet(cx, recvr.span, \"_\").into_owned(),\n+            );\n+        }\n+    }\n+}\n+\n /// Given a `Result<T, E>` type, return its error type (`E`).\n fn get_error_type<'a>(cx: &LateContext, ty: Ty<'a>) -> Option<Ty<'a>> {\n     if let ty::TyAdt(_, substs) = ty.sty {"}, {"sha": "ef0174ad71f7c1e2485273c67ac433c6ee1f99cb", "filename": "tests/ui/useless_asref.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621/tests%2Fui%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621/tests%2Fui%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.rs?ref=ff4a85035328e4cff43ac7dbeb1615b2a8cc4621", "patch": "@@ -0,0 +1,94 @@\n+#![deny(useless_asref)]\n+\n+struct FakeAsRef;\n+\n+#[allow(should_implement_trait)]\n+impl FakeAsRef {\n+    fn as_ref(&self) -> &Self { self }\n+}\n+\n+struct MoreRef;\n+\n+impl<'a, 'b, 'c> AsRef<&'a &'b &'c MoreRef> for MoreRef {\n+    fn as_ref(&self) -> &&'a &'b &'c MoreRef {\n+        &&&&MoreRef\n+    }\n+}\n+\n+fn foo_rstr(x: &str) { println!(\"{:?}\", x); }\n+fn foo_rslice(x: &[i32]) { println!(\"{:?}\", x); }\n+fn foo_mrslice(x: &mut [i32]) { println!(\"{:?}\", x); }\n+fn foo_rrrrmr(_: &&&&MoreRef) { println!(\"so many refs\"); }\n+\n+fn not_ok() {\n+    let rstr: &str = \"hello\";\n+    let mut mrslice: &mut [i32] = &mut [1,2,3];\n+\n+    {\n+        let rslice: &[i32] = &*mrslice;\n+        foo_rstr(rstr.as_ref());\n+        foo_rstr(rstr);\n+        foo_rslice(rslice.as_ref());\n+        foo_rslice(rslice);\n+    }\n+    {\n+        foo_mrslice(mrslice.as_mut());\n+        foo_mrslice(mrslice);\n+        foo_rslice(mrslice.as_ref());\n+        foo_rslice(mrslice);\n+    }\n+\n+    {\n+        let rrrrrstr = &&&&rstr;\n+        let rrrrrslice = &&&&&*mrslice;\n+        foo_rslice(rrrrrslice.as_ref());\n+        foo_rslice(rrrrrslice);\n+        foo_rstr(rrrrrstr.as_ref());\n+        foo_rstr(rrrrrstr);\n+    }\n+    {\n+        let mrrrrrslice = &mut &mut &mut &mut mrslice;\n+        foo_mrslice(mrrrrrslice.as_mut());\n+        foo_mrslice(mrrrrrslice);\n+        foo_rslice(mrrrrrslice.as_ref());\n+        foo_rslice(mrrrrrslice);\n+    }\n+    foo_rrrrmr((&&&&MoreRef).as_ref());\n+}\n+\n+fn ok() {\n+    let string = \"hello\".to_owned();\n+    let mut arr = [1,2,3];\n+    let mut vec = vec![1,2,3];\n+\n+    {\n+        foo_rstr(string.as_ref());\n+        foo_rslice(arr.as_ref());\n+        foo_rslice(vec.as_ref());\n+    }\n+    {\n+        foo_mrslice(arr.as_mut());\n+        foo_mrslice(vec.as_mut());\n+    }\n+\n+    {\n+        let rrrrstring = &&&&string;\n+        let rrrrarr = &&&&arr;\n+        let rrrrvec = &&&&vec;\n+        foo_rstr(rrrrstring.as_ref());\n+        foo_rslice(rrrrarr.as_ref());\n+        foo_rslice(rrrrvec.as_ref());\n+    }\n+    {\n+        let mrrrrarr = &mut &mut &mut &mut arr;\n+        let mrrrrvec = &mut &mut &mut &mut vec;\n+        foo_mrslice(mrrrrarr.as_mut());\n+        foo_mrslice(mrrrrvec.as_mut());\n+    }\n+    FakeAsRef.as_ref();\n+    foo_rrrrmr(MoreRef.as_ref());\n+}\n+fn main() {\n+    not_ok();\n+    ok();\n+}"}, {"sha": "8cc869ad775832c07d9bab2a8fcf77a2269e7a9d", "filename": "tests/ui/useless_asref.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621/tests%2Fui%2Fuseless_asref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff4a85035328e4cff43ac7dbeb1615b2a8cc4621/tests%2Fui%2Fuseless_asref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_asref.stderr?ref=ff4a85035328e4cff43ac7dbeb1615b2a8cc4621", "patch": "@@ -0,0 +1,60 @@\n+error: this call to `as_ref` does nothing\n+  --> $DIR/useless_asref.rs:29:18\n+   |\n+29 |         foo_rstr(rstr.as_ref());\n+   |                  ^^^^^^^^^^^^^ help: try this: `rstr`\n+   |\n+note: lint level defined here\n+  --> $DIR/useless_asref.rs:1:9\n+   |\n+1  | #![deny(useless_asref)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: this call to `as_ref` does nothing\n+  --> $DIR/useless_asref.rs:31:20\n+   |\n+31 |         foo_rslice(rslice.as_ref());\n+   |                    ^^^^^^^^^^^^^^^ help: try this: `rslice`\n+\n+error: this call to `as_mut` does nothing\n+  --> $DIR/useless_asref.rs:35:21\n+   |\n+35 |         foo_mrslice(mrslice.as_mut());\n+   |                     ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n+\n+error: this call to `as_ref` does nothing\n+  --> $DIR/useless_asref.rs:37:20\n+   |\n+37 |         foo_rslice(mrslice.as_ref());\n+   |                    ^^^^^^^^^^^^^^^^ help: try this: `mrslice`\n+\n+error: this call to `as_ref` does nothing\n+  --> $DIR/useless_asref.rs:44:20\n+   |\n+44 |         foo_rslice(rrrrrslice.as_ref());\n+   |                    ^^^^^^^^^^^^^^^^^^^ help: try this: `rrrrrslice`\n+\n+error: this call to `as_ref` does nothing\n+  --> $DIR/useless_asref.rs:46:18\n+   |\n+46 |         foo_rstr(rrrrrstr.as_ref());\n+   |                  ^^^^^^^^^^^^^^^^^ help: try this: `rrrrrstr`\n+\n+error: this call to `as_mut` does nothing\n+  --> $DIR/useless_asref.rs:51:21\n+   |\n+51 |         foo_mrslice(mrrrrrslice.as_mut());\n+   |                     ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n+\n+error: this call to `as_ref` does nothing\n+  --> $DIR/useless_asref.rs:53:20\n+   |\n+53 |         foo_rslice(mrrrrrslice.as_ref());\n+   |                    ^^^^^^^^^^^^^^^^^^^^ help: try this: `mrrrrrslice`\n+\n+error: this call to `as_ref` does nothing\n+  --> $DIR/useless_asref.rs:56:16\n+   |\n+56 |     foo_rrrrmr((&&&&MoreRef).as_ref());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(&&&&MoreRef)`\n+"}]}