{"sha": "4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e", "node_id": "C_kwDOAAsO6NoAKDRlZGUxZjhhNzVlY2JjMTI4NmFiN2VmNWI0MWI1NjJhNTA2YmM5NmU", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:46:19Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T22:05:42Z"}, "message": "Remove a Clean impl for a tuple (6)", "tree": {"sha": "f1590e01a295728909ef46437bca5903e11aa2be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1590e01a295728909ef46437bca5903e11aa2be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e", "html_url": "https://github.com/rust-lang/rust/commit/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c39ef72d741a42025f581ceda115858ec3878e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c39ef72d741a42025f581ceda115858ec3878e9f", "html_url": "https://github.com/rust-lang/rust/commit/c39ef72d741a42025f581ceda115858ec3878e9f"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "cbc5537aea6d9931bc253fe74f18e2ce643665ba", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4ede1f8a75ecbc1286ab7ef5b41b562a506bc96e", "patch": "@@ -783,7 +783,7 @@ fn clean_function(\n     let (generics, decl) = enter_impl_trait(cx, |cx| {\n         // NOTE: generics must be cleaned before args\n         let generics = generics.clean(cx);\n-        let args = (sig.decl.inputs, body_id).clean(cx);\n+        let args = clean_args_from_types_and_body_id(cx, sig.decl.inputs, body_id);\n         let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n         (generics, decl)\n     });\n@@ -810,22 +810,23 @@ fn clean_args_from_types_and_names(\n     }\n }\n \n-impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n-    fn clean(&self, cx: &mut DocContext<'_>) -> Arguments {\n-        let body = cx.tcx.hir().body(self.1);\n+fn clean_args_from_types_and_body_id(\n+    cx: &mut DocContext<'_>,\n+    types: &[hir::Ty<'_>],\n+    body_id: hir::BodyId,\n+) -> Arguments {\n+    let body = cx.tcx.hir().body(body_id);\n \n-        Arguments {\n-            values: self\n-                .0\n-                .iter()\n-                .enumerate()\n-                .map(|(i, ty)| Argument {\n-                    name: name_from_pat(body.params[i].pat),\n-                    type_: ty.clean(cx),\n-                    is_const: false,\n-                })\n-                .collect(),\n-        }\n+    Arguments {\n+        values: types\n+            .iter()\n+            .enumerate()\n+            .map(|(i, ty)| Argument {\n+                name: name_from_pat(body.params[i].pat),\n+                type_: ty.clean(cx),\n+                is_const: false,\n+            })\n+            .collect(),\n     }\n }\n "}]}