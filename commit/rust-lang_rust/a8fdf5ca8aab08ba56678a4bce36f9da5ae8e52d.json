{"sha": "a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d", "node_id": "C_kwDOAAsO6NoAKGE4ZmRmNWNhOGFhYjA4YmE1NjY3OGE0YmNlMzZmOWRhNWFlOGU1MmQ", "commit": {"author": {"name": "Georgy Komarov", "email": "jubnzv@gmail.com", "date": "2022-01-26T16:09:31Z"}, "committer": {"name": "Georgy Komarov", "email": "jubnzv@gmail.com", "date": "2022-01-26T16:50:27Z"}, "message": "matches: Remove extra comment", "tree": {"sha": "01c3a7b8598480bb4fc337eea4fa890eb93eb5e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01c3a7b8598480bb4fc337eea4fa890eb93eb5e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d", "html_url": "https://github.com/rust-lang/rust/commit/a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d/comments", "author": {"login": "jubnzv", "id": 12023585, "node_id": "MDQ6VXNlcjEyMDIzNTg1", "avatar_url": "https://avatars.githubusercontent.com/u/12023585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jubnzv", "html_url": "https://github.com/jubnzv", "followers_url": "https://api.github.com/users/jubnzv/followers", "following_url": "https://api.github.com/users/jubnzv/following{/other_user}", "gists_url": "https://api.github.com/users/jubnzv/gists{/gist_id}", "starred_url": "https://api.github.com/users/jubnzv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jubnzv/subscriptions", "organizations_url": "https://api.github.com/users/jubnzv/orgs", "repos_url": "https://api.github.com/users/jubnzv/repos", "events_url": "https://api.github.com/users/jubnzv/events{/privacy}", "received_events_url": "https://api.github.com/users/jubnzv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jubnzv", "id": 12023585, "node_id": "MDQ6VXNlcjEyMDIzNTg1", "avatar_url": "https://avatars.githubusercontent.com/u/12023585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jubnzv", "html_url": "https://github.com/jubnzv", "followers_url": "https://api.github.com/users/jubnzv/followers", "following_url": "https://api.github.com/users/jubnzv/following{/other_user}", "gists_url": "https://api.github.com/users/jubnzv/gists{/gist_id}", "starred_url": "https://api.github.com/users/jubnzv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jubnzv/subscriptions", "organizations_url": "https://api.github.com/users/jubnzv/orgs", "repos_url": "https://api.github.com/users/jubnzv/repos", "events_url": "https://api.github.com/users/jubnzv/events{/privacy}", "received_events_url": "https://api.github.com/users/jubnzv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "467a0bfdea3ba03de05b90a3de85d4467a28762e", "url": "https://api.github.com/repos/rust-lang/rust/commits/467a0bfdea3ba03de05b90a3de85d4467a28762e", "html_url": "https://github.com/rust-lang/rust/commit/467a0bfdea3ba03de05b90a3de85d4467a28762e"}], "stats": {"total": 16, "additions": 0, "deletions": 16}, "files": [{"sha": "ab030ffb4063ae77dd3d72b2108c64bcddd5cd38", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=a8fdf5ca8aab08ba56678a4bce36f9da5ae8e52d", "patch": "@@ -916,22 +916,6 @@ fn contains_only_wilds(pat: &Pat<'_>) -> bool {\n \n /// Returns true if the given patterns forms only exhaustive matches that don't contain enum\n /// patterns without a wildcard.\n-///\n-/// For example:\n-///\n-/// ```\n-/// // Returns false, because the first arm contain enum without a wildcard.\n-/// match x {\n-///     (Some(E::V), _) => todo!(),\n-///     (None, _) => {}\n-/// }\n-///\n-/// // Returns true, because the both arms form exhaustive matches and without enum variants.\n-/// match x {\n-///     (Some(_), _) => todo!(),\n-///     (None, _) => {}\n-/// }\n-/// ```\n fn form_exhaustive_matches(left: &Pat<'_>, right: &Pat<'_>) -> bool {\n     match (&left.kind, &right.kind) {\n         (PatKind::Wild, _) | (_, PatKind::Wild) => true,"}]}