{"sha": "7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmQ4MTM3N2RiMGUyNGY1N2JlOWM0ZjdhYTg0ZDI1NTY5MzFmMWE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-13T09:03:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-13T09:03:09Z"}, "message": "Rollup merge of #43782 - nrc:include, r=GuillaumeGomez\n\nFix include! in doc tests\n\nBy making the path relative to the current file.\n\nFixes #43153\n\n[breaking-change] - if you use `include!` inside a doc test, you'll need to change the path to be relative to the current file rather than relative to the working directory.", "tree": {"sha": "20f8c61828289792c264a66dbfc9fdaf7c0cf2ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f8c61828289792c264a66dbfc9fdaf7c0cf2ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "html_url": "https://github.com/rust-lang/rust/commit/7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbce60d6f131e5b3789f01417dedb05e4489898", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbce60d6f131e5b3789f01417dedb05e4489898", "html_url": "https://github.com/rust-lang/rust/commit/adbce60d6f131e5b3789f01417dedb05e4489898"}, {"sha": "6d736df76bb37e019728cea50a4902c23fb09e1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d736df76bb37e019728cea50a4902c23fb09e1b", "html_url": "https://github.com/rust-lang/rust/commit/6d736df76bb37e019728cea50a4902c23fb09e1b"}], "stats": {"total": 85, "additions": 55, "deletions": 30}, "files": [{"sha": "82c252ae4d72675eb273b3478f84f89a49b28bb2", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "patch": "@@ -190,8 +190,8 @@ impl<'a, I: Iterator<Item = Event<'a>>> Iterator for CodeBlocks<'a, I> {\n                     .map(|l| map_line(l).for_code())\n                     .collect::<Vec<&str>>().join(\"\\n\");\n                 let krate = krate.as_ref().map(|s| &**s);\n-                let test = test::maketest(&test, krate, false,\n-                                        &Default::default());\n+                let test = test::make_test(&test, krate, false,\n+                                           &Default::default());\n                 let channel = if test.contains(\"#![feature(\") {\n                     \"&amp;version=nightly\"\n                 } else {\n@@ -584,8 +584,8 @@ pub fn render(w: &mut fmt::Formatter,\n                         .map(|l| map_line(l).for_code())\n                         .collect::<Vec<&str>>().join(\"\\n\");\n                     let krate = krate.as_ref().map(|s| &**s);\n-                    let test = test::maketest(&test, krate, false,\n-                                              &Default::default());\n+                    let test = test::make_test(&test, krate, false,\n+                                               &Default::default());\n                     let channel = if test.contains(\"#![feature(\") {\n                         \"&amp;version=nightly\"\n                     } else {"}, {"sha": "b1fb343b8bb9c5cddb8daa3d31914b4d3ecdf917", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "patch": "@@ -174,16 +174,16 @@ fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n     opts\n }\n \n-fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n-           externs: Externs,\n-           should_panic: bool, no_run: bool, as_test_harness: bool,\n-           compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-           maybe_sysroot: Option<PathBuf>) {\n+fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs: SearchPaths,\n+            externs: Externs,\n+            should_panic: bool, no_run: bool, as_test_harness: bool,\n+            compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n+            maybe_sysroot: Option<PathBuf>) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n-    let test = maketest(test, Some(cratename), as_test_harness, opts);\n+    let test = make_test(test, Some(cratename), as_test_harness, opts);\n     let input = config::Input::Str {\n-        name: driver::anon_src(),\n+        name: filename.to_owned(),\n         input: test.to_owned(),\n     };\n     let outputs = OutputTypes::new(&[(OutputType::Exe, None)]);\n@@ -320,8 +320,11 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     }\n }\n \n-pub fn maketest(s: &str, cratename: Option<&str>, dont_insert_main: bool,\n-                opts: &TestOptions) -> String {\n+pub fn make_test(s: &str,\n+                 cratename: Option<&str>,\n+                 dont_insert_main: bool,\n+                 opts: &TestOptions)\n+                 -> String {\n     let (crate_attrs, everything_else) = partition_source(s);\n \n     let mut prog = String::new();\n@@ -505,18 +508,19 @@ impl Collector {\n                     rustc_driver::in_rustc_thread(move || {\n                         io::set_panic(panic);\n                         io::set_print(print);\n-                        runtest(&test,\n-                                &cratename,\n-                                cfgs,\n-                                libs,\n-                                externs,\n-                                should_panic,\n-                                no_run,\n-                                as_test_harness,\n-                                compile_fail,\n-                                error_codes,\n-                                &opts,\n-                                maybe_sysroot)\n+                        run_test(&test,\n+                                 &cratename,\n+                                 &filename,\n+                                 cfgs,\n+                                 libs,\n+                                 externs,\n+                                 should_panic,\n+                                 no_run,\n+                                 as_test_harness,\n+                                 compile_fail,\n+                                 error_codes,\n+                                 &opts,\n+                                 maybe_sysroot)\n                     })\n                 } {\n                     Ok(()) => (),"}, {"sha": "95fe41be122545cd4061ea0986c7c20c1266c020", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "patch": "@@ -193,13 +193,14 @@ pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[tokenstream::Toke\n // resolve a file-system path to an absolute file-system path (if it\n // isn't already)\n fn res_rel_file(cx: &mut ExtCtxt, sp: syntax_pos::Span, arg: &Path) -> PathBuf {\n-    // NB: relative paths are resolved relative to the compilation unit\n+    // Relative paths are resolved relative to the file in which they are found\n+    // after macro expansion (that is, they are unhygienic).\n     if !arg.is_absolute() {\n         let callsite = sp.source_callsite();\n-        let mut cu = PathBuf::from(&cx.codemap().span_to_filename(callsite));\n-        cu.pop();\n-        cu.push(arg);\n-        cu\n+        let mut path = PathBuf::from(&cx.codemap().span_to_filename(callsite));\n+        path.pop();\n+        path.push(arg);\n+        path\n     } else {\n         arg.to_path_buf()\n     }"}, {"sha": "6ac341d8b02249e8a21aceccc37701b48e57b8c8", "filename": "src/test/rustdoc/issue-43153.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Ftest%2Frustdoc%2Fissue-43153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebd81377db0e24f57be9c4f7aa84d2556931f1a/src%2Ftest%2Frustdoc%2Fissue-43153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-43153.rs?ref=7ebd81377db0e24f57be9c4f7aa84d2556931f1a", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that `include!` in a doc test searches relative to the directory in\n+// which the test is declared.\n+\n+// compile-flags:--test\n+\n+/// ```rust\n+/// include!(\"auxiliary/empty.rs\");\n+/// fn main() {}\n+/// ```\n+pub struct Foo;"}]}