{"sha": "43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMjA0ZmZmNWQwYTY1NmY4YTk0YmZmZjMxMjllMDRiYzlkMzBhZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-23T11:16:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-23T11:16:28Z"}, "message": "Auto merge of #35627 - apasel422:coerce-cell, r=alexcrichton\n\nImplement `CoerceUnsized` for `{Cell, RefCell, UnsafeCell}`\n\nThese impls are analogous to the one for `NonZero`. It's occasionally useful to be able to coerce the cell types when they're being used inside another abstraction. See Manishearth/rust-gc#17 for an example.\n\nr? @eddyb", "tree": {"sha": "9435f13325fe19f06552bf1b51596f3ea274218b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9435f13325fe19f06552bf1b51596f3ea274218b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "html_url": "https://github.com/rust-lang/rust/commit/43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43204fff5d0a656f8a94bfff3129e04bc9d30ad4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "599f1b96b19c2a67b1e854a64e0cd43af3de164d", "url": "https://api.github.com/repos/rust-lang/rust/commits/599f1b96b19c2a67b1e854a64e0cd43af3de164d", "html_url": "https://github.com/rust-lang/rust/commit/599f1b96b19c2a67b1e854a64e0cd43af3de164d"}, {"sha": "1fd791ad62a4bb901be465997d9efbf4090819f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fd791ad62a4bb901be465997d9efbf4090819f0", "html_url": "https://github.com/rust-lang/rust/commit/1fd791ad62a4bb901be465997d9efbf4090819f0"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "2af48ef2fabe3b42d04cfa53bb4bd565259f538b", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43204fff5d0a656f8a94bfff3129e04bc9d30ad4/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43204fff5d0a656f8a94bfff3129e04bc9d30ad4/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=43204fff5d0a656f8a94bfff3129e04bc9d30ad4", "patch": "@@ -355,6 +355,9 @@ impl<T: Copy> From<T> for Cell<T> {\n     }\n }\n \n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](index.html) for more.\n@@ -793,6 +796,9 @@ impl<T> From<T> for RefCell<T> {\n     }\n }\n \n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<RefCell<U>> for RefCell<T> {}\n+\n struct BorrowRef<'b> {\n     borrow: &'b Cell<BorrowFlag>,\n }\n@@ -1122,3 +1128,13 @@ impl<T> From<T> for UnsafeCell<T> {\n         UnsafeCell::new(t)\n     }\n }\n+\n+#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n+\n+#[allow(unused)]\n+fn assert_coerce_unsized(a: UnsafeCell<&i32>, b: Cell<&i32>, c: RefCell<&i32>) {\n+    let _: UnsafeCell<&Send> = a;\n+    let _: Cell<&Send> = b;\n+    let _: RefCell<&Send> = c;\n+}"}]}