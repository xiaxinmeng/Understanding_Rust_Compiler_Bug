{"sha": "00d5e42e776da900049fe19087bc9b0057ec70cd", "node_id": "C_kwDOAAsO6NoAKDAwZDVlNDJlNzc2ZGE5MDAwNDlmZTE5MDg3YmM5YjAwNTdlYzcwY2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-24T14:12:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-24T14:12:10Z"}, "message": "Auto merge of #90235 - matthiaskrgr:rollup-7pqtevk, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #89558 (Add rustc lint, warning when iterating over hashmaps)\n - #90100 (Skip documentation for tier 2 targets on dist-x86_64-apple-darwin)\n - #90155 (Fix alignment of method headings for scannability)\n - #90162 (Mark `{array, slice}::{from_ref, from_mut}` as const fn)\n - #90221 (Fix ICE when forgetting to `Box` a parameter to a `Self::func` call)\n - #90234 (Temporarily turn overflow checks off for rustc-rayon-core)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f168b0920764af97f372d7faa608611cd3f09f79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f168b0920764af97f372d7faa608611cd3f09f79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00d5e42e776da900049fe19087bc9b0057ec70cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00d5e42e776da900049fe19087bc9b0057ec70cd", "html_url": "https://github.com/rust-lang/rust/commit/00d5e42e776da900049fe19087bc9b0057ec70cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00d5e42e776da900049fe19087bc9b0057ec70cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed08a67566d7d1d9dd2ad928ff21c23e841a4345", "html_url": "https://github.com/rust-lang/rust/commit/ed08a67566d7d1d9dd2ad928ff21c23e841a4345"}, {"sha": "eee29fd34c9fdc9afddfc3108d8e36199854f0b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee29fd34c9fdc9afddfc3108d8e36199854f0b3", "html_url": "https://github.com/rust-lang/rust/commit/eee29fd34c9fdc9afddfc3108d8e36199854f0b3"}], "stats": {"total": 507, "additions": 409, "deletions": 98}, "files": [{"sha": "580120b25a251584df6bc22ebbb2075dddcc8c9a", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -287,7 +287,7 @@ jobs:\n             os: ubuntu-latest-xl\n           - name: dist-x86_64-apple\n             env:\n-              SCRIPT: \"./x.py dist\"\n+              SCRIPT: \"./x.py dist --exclude src/doc --exclude extended && ./x.py dist --target=x86_64-apple-darwin src/doc && ./x.py dist extended\"\n               RUST_CONFIGURE_ARGS: \"--host=x86_64-apple-darwin --target=x86_64-apple-darwin,aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -532,9 +532,16 @@ jobs:\n     strategy:\n       matrix:\n         include:\n-          - name: dist-x86_64-linux\n-            os: ubuntu-latest-xl\n-            env: {}\n+          - name: dist-x86_64-apple\n+            env:\n+              SCRIPT: \"./x.py dist --exclude src/doc --exclude extended && ./x.py dist --target=x86_64-apple-darwin src/doc && ./x.py dist extended\"\n+              RUST_CONFIGURE_ARGS: \"--host=x86_64-apple-darwin --target=x86_64-apple-darwin,aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\"\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            os: macos-latest\n     timeout-minutes: 600\n     runs-on: \"${{ matrix.os }}\"\n     steps:"}, {"sha": "cae48d795178388cbb4ee8487207a4d096fb7d55", "filename": "Cargo.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -77,6 +77,13 @@ overflow-checks = false\n # per-crate configuration isn't specifiable in the environment.\n codegen-units = 10000\n \n+[profile.release.package.rustc-rayon-core]\n+# The rustc fork of Rayon has deadlock detection code which intermittently\n+# causes overflows in the CI (see https://github.com/rust-lang/rust/issues/90227)\n+# so we turn overflow checks off for now.\n+# FIXME: This workaround should be removed once #90227 is fixed.\n+overflow-checks = false\n+\n # These dependencies of the standard library implement symbolication for\n # backtraces on most platforms. Their debuginfo causes both linking to be slower\n # (more data to chew through) and binaries to be larger without really all that"}, {"sha": "63ba5b45f4c4741dd950cb5cbed99693fc44c2d0", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -35,6 +35,7 @@\n #![feature(iter_zip)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::token::{self, Token};\n use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream, TokenTree};"}, {"sha": "6da128a037499db3cc9802b5113b27ae0d88f0dc", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -7,6 +7,7 @@\n #![feature(iter_is_partitioned)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n pub mod ast_validation;\n pub mod feature_gate;"}, {"sha": "b1056900ad058f9ef3c1086a82d625e1ee850f23", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -13,6 +13,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "d3e2ed02c32ea2de4e4596372aa5548a808053b2", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -11,6 +11,7 @@\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "f1dacc393d53b6c9a49813ba4c9d8e252dfc399a", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -13,6 +13,7 @@\n #![feature(iter_zip)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n "}, {"sha": "9f3c2f0c7ce30d803e8e501c06b22e637d3a971a", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -8,6 +8,7 @@\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n //! This crate contains codegen code that is used by all codegen backends (LLVM and others).\n //! The backend-agnostic functions of this crate use functions defined in various traits that"}, {"sha": "17a5313d73a5f11a3de00b0e9470854f4e2e21e5", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -24,6 +24,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "0fbcd22c5e09876a27e46c7a29cc75ff591adeee", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -28,6 +28,7 @@\n #![feature(thread_id_value)]\n #![allow(rustc::default_hash_types)]\n #![deny(unaligned_references)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "1a9f8961bd74167dff07f4b30a103cb21b596c17", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -8,6 +8,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;\n@@ -846,7 +847,7 @@ Available lint options:\n     let builtin = sort_lints(sess, builtin);\n \n     let (plugin_groups, builtin_groups): (Vec<_>, _) =\n-        lint_store.get_lint_groups().iter().cloned().partition(|&(.., p)| p);\n+        lint_store.get_lint_groups().partition(|&(.., p)| p);\n     let plugin_groups = sort_lint_groups(plugin_groups);\n     let builtin_groups = sort_lint_groups(builtin_groups);\n "}, {"sha": "45b24d728860709d7b43bdb9e9532a61b3ddbef9", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -10,6 +10,7 @@\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(nll)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "49b0bb55d87c94c8205f6bc2fbb6d25d3290d395", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -10,6 +10,7 @@\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "ee43dc985a043d87413e7deebe9cc0e623e64821", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -460,6 +460,9 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Prevents field reads in the marked trait or method to be considered\n     // during dead code analysis.\n     rustc_attr!(rustc_trivial_field_reads, Normal, template!(Word), INTERNAL_UNSTABLE),\n+    // Used by the `rustc::potential_query_instability` lint to warn methods which\n+    // might not be stable during incremental compilation.\n+    rustc_attr!(rustc_lint_query_instability, Normal, template!(Word), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:"}, {"sha": "0478fb2baa00f6d8b23a32e50f3d8ef4c5570939", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -5,6 +5,7 @@\n #![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "128a9428facbd6599fab4d11095a0e0fe65e274b", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -24,6 +24,7 @@\n #![feature(min_specialization)]\n #![feature(label_break_value)]\n #![recursion_limit = \"512\"] // For rustdoc\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "969df0fbf24d9127939ad751238e8cdd039b617b", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -5,6 +5,7 @@\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod callbacks;\n pub mod interface;"}, {"sha": "e34a92aba25f653c6e376438f4b85a7ea83b5aa1", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -144,7 +144,11 @@ impl LintStore {\n         &self.lints\n     }\n \n-    pub fn get_lint_groups<'t>(&'t self) -> Vec<(&'static str, Vec<LintId>, bool)> {\n+    pub fn get_lint_groups<'t>(\n+        &'t self,\n+    ) -> impl Iterator<Item = (&'static str, Vec<LintId>, bool)> + 't {\n+        // This function is not used in a way which observes the order of lints.\n+        #[cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n         self.lint_groups\n             .iter()\n             .filter(|(_, LintGroup { depr, .. })| {\n@@ -154,7 +158,6 @@ impl LintStore {\n             .map(|(k, LintGroup { lint_ids, from_plugin, .. })| {\n                 (*k, lint_ids.clone(), *from_plugin)\n             })\n-            .collect()\n     }\n \n     pub fn register_early_pass("}, {"sha": "e9dcc120200d0436e5b27c3f094b335860c5d461", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 55, "deletions": 4, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -5,10 +5,7 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{\n-    GenericArg, HirId, Item, ItemKind, MutTy, Mutability, Node, Path, PathSegment, QPath, Ty,\n-    TyKind,\n-};\n+use rustc_hir::*;\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -51,6 +48,60 @@ impl LateLintPass<'_> for DefaultHashTypes {\n     }\n }\n \n+declare_tool_lint! {\n+    pub rustc::POTENTIAL_QUERY_INSTABILITY,\n+    Allow,\n+    \"require explicit opt-in when using potentially unstable methods or functions\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(QueryStability => [POTENTIAL_QUERY_INSTABILITY]);\n+\n+impl LateLintPass<'_> for QueryStability {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        // FIXME(rustdoc): This lint uses typecheck results, causing rustdoc to\n+        // error if there are resolution failures.\n+        //\n+        // As internal lints are currently always run if there are `unstable_options`,\n+        // they are added to the lint store of rustdoc. Internal lints are also\n+        // not used via the `lint_mod` query. Crate lints run outside of a query\n+        // so rustdoc currently doesn't disable them.\n+        //\n+        // Instead of relying on this, either change crate lints to a query disabled by\n+        // rustdoc, only run internal lints if the user is explicitly opting in\n+        // or figure out a different way to avoid running lints for rustdoc.\n+        if cx.tcx.sess.opts.actually_rustdoc {\n+            return;\n+        }\n+\n+        let (def_id, span) = match expr.kind {\n+            ExprKind::Path(ref path) if let Some(def_id) = cx.qpath_res(path, expr.hir_id).opt_def_id() => {\n+                (def_id, expr.span)\n+            }\n+            ExprKind::MethodCall(_, span, _, _) if let Some(def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) => {\n+                (def_id, span)\n+            },\n+            _ => return,\n+        };\n+\n+        let substs = cx.typeck_results().node_substs(expr.hir_id);\n+        if let Ok(Some(instance)) = ty::Instance::resolve(cx.tcx, cx.param_env, def_id, substs) {\n+            let def_id = instance.def_id();\n+            if cx.tcx.has_attr(def_id, sym::rustc_lint_query_instability) {\n+                cx.struct_span_lint(POTENTIAL_QUERY_INSTABILITY, span, |lint| {\n+                    let msg = format!(\n+                        \"using `{}` can result in unstable query results\",\n+                        cx.tcx.item_name(def_id)\n+                    );\n+                    lint.build(&msg)\n+                        .note(\"if you believe this case to be fine, allow this lint and add a comment explaining your rationale\")\n+                        .emit();\n+                })\n+            }\n+        }\n+    }\n+}\n+\n declare_tool_lint! {\n     pub rustc::USAGE_OF_TY_TYKIND,\n     Allow,"}, {"sha": "f83eaabdfefcde5de2705a50a964d65a0f35009a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -31,12 +31,14 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n+#![feature(if_let_guard)]\n #![feature(iter_order_by)]\n #![feature(iter_zip)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -484,6 +486,8 @@ fn register_internals(store: &mut LintStore) {\n     store.register_early_pass(|| Box::new(LintPassImpl));\n     store.register_lints(&DefaultHashTypes::get_lints());\n     store.register_late_pass(|| Box::new(DefaultHashTypes));\n+    store.register_lints(&QueryStability::get_lints());\n+    store.register_late_pass(|| Box::new(QueryStability));\n     store.register_lints(&ExistingDocKeyword::get_lints());\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n@@ -494,6 +498,7 @@ fn register_internals(store: &mut LintStore) {\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n+            LintId::of(POTENTIAL_QUERY_INSTABILITY),\n             LintId::of(USAGE_OF_TY_TYKIND),\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n             LintId::of(TY_PASS_BY_REFERENCE),"}, {"sha": "f64f6cbeb594e100724da429a7fd87cb3d9fc2a0", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -10,6 +10,7 @@\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n extern crate proc_macro;\n "}, {"sha": "d90eb839cf6014f78f963fb6bf43699d20859bd7", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -56,6 +56,7 @@\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]\n #![recursion_limit = \"512\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate bitflags;"}, {"sha": "6cf7c405473c92c737ac0446dc6a7a639a884178", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -10,6 +10,7 @@\n #![feature(once_cell)]\n #![feature(min_specialization)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "cd42edce23d7eab1ec566c508075c02f38df2e96", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -13,6 +13,7 @@\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "51a6f7e3e406da47d0f2f1210a6a8c6f1e6f794c", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -5,6 +5,7 @@\n #![feature(let_else)]\n #![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "92d9e89c3a383ed10a4f21413240db53bd1771cb", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 83, "deletions": 61, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -62,7 +62,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_attributes(\n         &self,\n         hir_id: HirId,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) {\n@@ -78,7 +78,7 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::marker => self.check_marker(hir_id, attr, span, target),\n                 sym::target_feature => self.check_target_feature(hir_id, attr, span, target),\n                 sym::track_caller => {\n-                    self.check_track_caller(hir_id, &attr.span, attrs, span, target)\n+                    self.check_track_caller(hir_id, attr.span, attrs, span, target)\n                 }\n                 sym::doc => self.check_doc_attrs(\n                     attr,\n@@ -103,6 +103,9 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::rustc_legacy_const_generics => {\n                     self.check_rustc_legacy_const_generics(&attr, span, target, item)\n                 }\n+                sym::rustc_lint_query_instability => {\n+                    self.check_rustc_lint_query_instability(&attr, span, target)\n+                }\n                 sym::rustc_clean\n                 | sym::rustc_dirty\n                 | sym::rustc_if_this_changed\n@@ -230,7 +233,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n-    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Closure\n@@ -273,7 +276,7 @@ impl CheckAttrVisitor<'tcx> {\n                     E0518,\n                     \"attribute should be applied to function or closure\",\n                 )\n-                .span_label(*span, \"not a function or closure\")\n+                .span_label(span, \"not a function or closure\")\n                 .emit();\n                 false\n             }\n@@ -312,7 +315,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if `#[naked]` is applied to a function definition.\n-    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_naked(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -331,15 +334,15 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(*span, \"not a function definition\")\n+                    .span_label(span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cmse_nonsecure_entry]` is applied to a function definition.\n-    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_cmse_nonsecure_entry(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Fn\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n@@ -350,7 +353,7 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a function definition\",\n                     )\n-                    .span_label(*span, \"not a function definition\")\n+                    .span_label(span, \"not a function definition\")\n                     .emit();\n                 false\n             }\n@@ -361,16 +364,16 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_track_caller(\n         &self,\n         hir_id: HirId,\n-        attr_span: &Span,\n+        attr_span: Span,\n         attrs: &'hir [Attribute],\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n             _ if attrs.iter().any(|attr| attr.has_name(sym::naked)) => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    *attr_span,\n+                    attr_span,\n                     E0736,\n                     \"cannot use `#[track_caller]` with `#[naked]`\",\n                 )\n@@ -391,11 +394,11 @@ impl CheckAttrVisitor<'tcx> {\n             _ => {\n                 struct_span_err!(\n                     self.tcx.sess,\n-                    *attr_span,\n+                    attr_span,\n                     E0739,\n                     \"attribute should be applied to function\"\n                 )\n-                .span_label(*span, \"not a function\")\n+                .span_label(span, \"not a function\")\n                 .emit();\n                 false\n             }\n@@ -407,7 +410,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -427,15 +430,15 @@ impl CheckAttrVisitor<'tcx> {\n                     E0701,\n                     \"attribute can only be applied to a struct or enum\"\n                 )\n-                .span_label(*span, \"not a struct or enum\")\n+                .span_label(span, \"not a struct or enum\")\n                 .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[marker]` attribute on an `item` is valid. Returns `true` if valid.\n-    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_marker(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Trait => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -450,7 +453,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n-                    .span_label(*span, \"not a trait\")\n+                    .span_label(span, \"not a trait\")\n                     .emit();\n                 false\n             }\n@@ -462,7 +465,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -478,7 +481,7 @@ impl CheckAttrVisitor<'tcx> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function\")\n+                        .span_label(span, \"not a function\")\n                         .emit();\n                 });\n                 true\n@@ -495,7 +498,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                    .span_label(*span, \"not a function\")\n+                    .span_label(span, \"not a function\")\n                     .emit();\n                 false\n             }\n@@ -1047,22 +1050,22 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n-    fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_must_not_suspend(&self, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::Struct | Target::Enum | Target::Union | Target::Trait => true,\n             _ => {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, or trait\")\n-                        .span_label(*span, \"is not a struct, enum, or trait\")\n+                        .span_label(span, \"is not a struct, enum, or trait\")\n                         .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n-    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1082,15 +1085,15 @@ impl CheckAttrVisitor<'tcx> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function\")\n+                        .span_label(span, \"not a function\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[link_name]` is applied to an item other than a foreign function or static.\n-    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link_name(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::ForeignFn | Target::ForeignStatic => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1124,15 +1127,15 @@ impl CheckAttrVisitor<'tcx> {\n                         }\n                     }\n \n-                    diag.span_label(*span, \"not a foreign function or static\");\n+                    diag.span_label(span, \"not a foreign function or static\");\n                     diag.emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_link]` is applied to an `extern crate`. Returns `true` if valid.\n-    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+    fn check_no_link(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) -> bool {\n         match target {\n             Target::ExternCrate => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1150,7 +1153,7 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to an `extern crate` item\",\n                     )\n-                    .span_label(*span, \"not an `extern crate` item\")\n+                    .span_label(span, \"not an `extern crate` item\")\n                     .emit();\n                 false\n             }\n@@ -1166,7 +1169,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1187,7 +1190,7 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a free function, impl method or static\",\n                     )\n-                    .span_label(*span, \"not a free function, impl method or static\")\n+                    .span_label(span, \"not a free function, impl method or static\")\n                     .emit();\n                 false\n             }\n@@ -1197,14 +1200,14 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_rustc_layout_scalar_valid_range(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         if target != Target::Struct {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a struct\")\n-                .span_label(*span, \"not a struct\")\n+                .span_label(span, \"not a struct\")\n                 .emit();\n             return false;\n         }\n@@ -1229,7 +1232,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_rustc_legacy_const_generics(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n     ) -> bool {\n@@ -1238,7 +1241,7 @@ impl CheckAttrVisitor<'tcx> {\n             self.tcx\n                 .sess\n                 .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                .span_label(*span, \"not a function\")\n+                .span_label(span, \"not a function\")\n                 .emit();\n             return false;\n         }\n@@ -1324,6 +1327,25 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n+    fn check_rustc_lint_query_instability(\n+        &self,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        let is_function = matches!(target, Target::Fn | Target::Method(..));\n+        if !is_function {\n+            self.tcx\n+                .sess\n+                .struct_span_err(attr.span, \"attribute should be applied to a function\")\n+                .span_label(span, \"not a function\")\n+                .emit();\n+            false\n+        } else {\n+            true\n+        }\n+    }\n+\n     /// Checks that the dep-graph debugging attributes are only present when the query-dep-graph\n     /// option is passed to the compiler.\n     fn check_rustc_dirty_clean(&self, attr: &Attribute) -> bool {\n@@ -1339,7 +1361,7 @@ impl CheckAttrVisitor<'tcx> {\n     }\n \n     /// Checks if `#[link_section]` is applied to a function or static.\n-    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_link_section(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn | Target::Method(..) => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n@@ -1359,15 +1381,15 @@ impl CheckAttrVisitor<'tcx> {\n                              being phased out; it will become a hard error in \\\n                              a future release!\",\n                         )\n-                        .span_label(*span, \"not a function or static\")\n+                        .span_label(span, \"not a function or static\")\n                         .emit();\n                 });\n             }\n         }\n     }\n \n     /// Checks if `#[no_mangle]` is applied to a function or static.\n-    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n+    fn check_no_mangle(&self, hir_id: HirId, attr: &Attribute, span: Span, target: Target) {\n         match target {\n             Target::Static | Target::Fn => {}\n             Target::Method(..) if self.is_impl_item(hir_id) => {}\n@@ -1397,7 +1419,7 @@ impl CheckAttrVisitor<'tcx> {\n                             being phased out; it will become a hard error in \\\n                             a future release!\",\n                     )\n-                    .span_label(*span, format!(\"foreign {}\", foreign_item_kind))\n+                    .span_label(span, format!(\"foreign {}\", foreign_item_kind))\n                     .note(\"symbol names in extern blocks are not mangled\")\n                     .span_suggestion(\n                         attr.span,\n@@ -1420,7 +1442,7 @@ impl CheckAttrVisitor<'tcx> {\n                          being phased out; it will become a hard error in \\\n                          a future release!\",\n                     )\n-                    .span_label(*span, \"not a free function, impl method or static\")\n+                    .span_label(span, \"not a free function, impl method or static\")\n                     .emit();\n                 });\n             }\n@@ -1431,7 +1453,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_repr(\n         &self,\n         attrs: &'hir [Attribute],\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         item: Option<ItemLike<'_>>,\n         hir_id: HirId,\n@@ -1565,7 +1587,7 @@ impl CheckAttrVisitor<'tcx> {\n                 \"{}\",\n                 &format!(\"attribute should be applied to {} {}\", article, allowed_targets)\n             )\n-            .span_label(*span, &format!(\"not {} {}\", article, allowed_targets))\n+            .span_label(span, &format!(\"not {} {}\", article, allowed_targets))\n             .emit();\n         }\n \n@@ -1628,7 +1650,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n         attrs: &[Attribute],\n     ) -> bool {\n@@ -1661,7 +1683,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a macro\")\n-                    .span_label(*span, \"not a macro\")\n+                    .span_label(span, \"not a macro\")\n                     .emit();\n                 false\n             }\n@@ -1674,7 +1696,7 @@ impl CheckAttrVisitor<'tcx> {\n         &self,\n         hir_id: HirId,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1695,7 +1717,7 @@ impl CheckAttrVisitor<'tcx> {\n                 self.tcx\n                     .sess\n                     .struct_span_err(attr.span, \"attribute should be applied to `const fn`\")\n-                    .span_label(*span, \"not a `const fn`\")\n+                    .span_label(span, \"not a `const fn`\")\n                     .emit();\n                 false\n             }\n@@ -1706,7 +1728,7 @@ impl CheckAttrVisitor<'tcx> {\n     fn check_default_method_body_is_const(\n         &self,\n         attr: &Attribute,\n-        span: &Span,\n+        span: Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -1718,14 +1740,14 @@ impl CheckAttrVisitor<'tcx> {\n                         attr.span,\n                         \"attribute should be applied to a trait method with body\",\n                     )\n-                    .span_label(*span, \"not a trait method or missing a body\")\n+                    .span_label(span, \"not a trait method or missing a body\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n-    fn check_stability_promotable(&self, attr: &Attribute, _span: &Span, target: Target) -> bool {\n+    fn check_stability_promotable(&self, attr: &Attribute, _span: Span, target: Target) -> bool {\n         match target {\n             Target::Expression => {\n                 self.tcx\n@@ -1738,7 +1760,7 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: &Span, target: Target) {\n+    fn check_deprecated(&self, hir_id: HirId, attr: &Attribute, _span: Span, target: Target) {\n         match target {\n             Target::Closure | Target::Expression | Target::Statement | Target::Arm => {\n                 self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n@@ -1810,37 +1832,37 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         }\n \n         let target = Target::from_item(item);\n-        self.check_attributes(item.hir_id(), &item.span, target, Some(ItemLike::Item(item)));\n+        self.check_attributes(item.hir_id(), item.span, target, Some(ItemLike::Item(item)));\n         intravisit::walk_item(self, item)\n     }\n \n     fn visit_generic_param(&mut self, generic_param: &'tcx hir::GenericParam<'tcx>) {\n         let target = Target::from_generic_param(generic_param);\n-        self.check_attributes(generic_param.hir_id, &generic_param.span, target, None);\n+        self.check_attributes(generic_param.hir_id, generic_param.span, target, None);\n         intravisit::walk_generic_param(self, generic_param)\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n-        self.check_attributes(trait_item.hir_id(), &trait_item.span, target, None);\n+        self.check_attributes(trait_item.hir_id(), trait_item.span, target, None);\n         intravisit::walk_trait_item(self, trait_item)\n     }\n \n     fn visit_field_def(&mut self, struct_field: &'tcx hir::FieldDef<'tcx>) {\n-        self.check_attributes(struct_field.hir_id, &struct_field.span, Target::Field, None);\n+        self.check_attributes(struct_field.hir_id, struct_field.span, Target::Field, None);\n         intravisit::walk_field_def(self, struct_field);\n     }\n \n     fn visit_arm(&mut self, arm: &'tcx hir::Arm<'tcx>) {\n-        self.check_attributes(arm.hir_id, &arm.span, Target::Arm, None);\n+        self.check_attributes(arm.hir_id, arm.span, Target::Arm, None);\n         intravisit::walk_arm(self, arm);\n     }\n \n     fn visit_foreign_item(&mut self, f_item: &'tcx ForeignItem<'tcx>) {\n         let target = Target::from_foreign_item(f_item);\n         self.check_attributes(\n             f_item.hir_id(),\n-            &f_item.span,\n+            f_item.span,\n             target,\n             Some(ItemLike::ForeignItem(f_item)),\n         );\n@@ -1849,14 +1871,14 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n         let target = target_from_impl_item(self.tcx, impl_item);\n-        self.check_attributes(impl_item.hir_id(), &impl_item.span, target, None);\n+        self.check_attributes(impl_item.hir_id(), impl_item.span, target, None);\n         intravisit::walk_impl_item(self, impl_item)\n     }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt<'tcx>) {\n         // When checking statements ignore expressions, they will be checked later.\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n-            self.check_attributes(l.hir_id, &stmt.span, Target::Statement, None);\n+            self.check_attributes(l.hir_id, stmt.span, Target::Statement, None);\n         }\n         intravisit::walk_stmt(self, stmt)\n     }\n@@ -1867,7 +1889,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n             _ => Target::Expression,\n         };\n \n-        self.check_attributes(expr.hir_id, &expr.span, target, None);\n+        self.check_attributes(expr.hir_id, expr.span, target, None);\n         intravisit::walk_expr(self, expr)\n     }\n \n@@ -1877,12 +1899,12 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         generics: &'tcx hir::Generics<'tcx>,\n         item_id: HirId,\n     ) {\n-        self.check_attributes(variant.id, &variant.span, Target::Variant, None);\n+        self.check_attributes(variant.id, variant.span, Target::Variant, None);\n         intravisit::walk_variant(self, variant, generics, item_id)\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.check_attributes(param.hir_id, &param.span, Target::Param, None);\n+        self.check_attributes(param.hir_id, param.span, Target::Param, None);\n \n         intravisit::walk_param(self, param);\n     }\n@@ -1950,7 +1972,7 @@ fn check_mod_attrs(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     let check_attr_visitor = &mut CheckAttrVisitor { tcx };\n     tcx.hir().visit_item_likes_in_module(module_def_id, &mut check_attr_visitor.as_deep_visitor());\n     if module_def_id.is_top_level_module() {\n-        check_attr_visitor.check_attributes(CRATE_HIR_ID, &DUMMY_SP, Target::Mod, None);\n+        check_attr_visitor.check_attributes(CRATE_HIR_ID, DUMMY_SP, Target::Mod, None);\n         check_invalid_crate_level_attr(tcx, tcx.hir().krate_attrs());\n     }\n }"}, {"sha": "c698333c8e222a1005191449fd017a51c2353ce7", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -14,6 +14,7 @@\n #![feature(nll)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "d228a34046cef7b3800e333f4b93e2df63c7c024", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -5,6 +5,7 @@\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n use rustc_ast::MacroDef;\n use rustc_attr as attr;"}, {"sha": "2fcca326925b0ea82126fe20a5dacb631bc5477b", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -8,6 +8,7 @@\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "8f57855b230c30ace8cf6077e4813be05fbe3e8c", "filename": "compiler/rustc_query_system/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_query_system%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -6,6 +6,7 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(thread_local_const_init)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "af062af532927da61e4b6b019427f8d0fdec26c2", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -20,6 +20,7 @@\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n #![allow(rustdoc::private_intra_doc_links)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "8fd2011ac46e08fa2dcef9d9aa493d86a363dfc9", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -2,6 +2,7 @@\n #![feature(if_let_guard)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n mod dump_visitor;\n mod dumper;"}, {"sha": "1a6cab7ecde81f379304d7caa1931b6376757340", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -2,6 +2,7 @@\n #![feature(min_specialization)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "4eafa7cebb3270534bc1aa952c77dc14c715b074", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -21,6 +21,7 @@\n #![feature(nll)]\n #![feature(min_specialization)]\n #![feature(thread_local_const_init)]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "5bdc9cd616e0db3d1bfbb28142adb06f1b4839f6", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -1114,6 +1114,7 @@ symbols! {\n         rustc_layout_scalar_valid_range_end,\n         rustc_layout_scalar_valid_range_start,\n         rustc_legacy_const_generics,\n+        rustc_lint_query_instability,\n         rustc_macro_transparency,\n         rustc_main,\n         rustc_mir,"}, {"sha": "f6517610da26271a1237031860e2c61965de1d53", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -93,6 +93,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_middle;"}, {"sha": "94c9c1f2e584d2449c1bd948691e32dc5bd6cf9b", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -22,6 +22,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "41e43321a8f0a07da9b0326dc6c53a48dc98f5cf", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -830,6 +830,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.type_of(def_id)\n         };\n         let substs = self.infcx.fresh_substs_for_item(span, def_id);\n+        self.write_substs(hir_id, substs);\n         let ty = item_ty.subst(self.tcx, substs);\n \n         self.write_resolution(hir_id, Ok((def_kind, def_id)));"}, {"sha": "dcc635a1f00b19ecbbd63e19b1a9f19807719d5a", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -420,7 +420,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ..\n                         },\n                         method,\n-                    )) if Some(recv_ty.def_id()) == pin_did && method.ident.name == sym::new => {\n+                    )) if recv_ty.opt_def_id() == pin_did && method.ident.name == sym::new => {\n                         err.span_suggestion(\n                             fn_name.span,\n                             \"use `Box::pin` to pin and box this expression\","}, {"sha": "b19008e42a4ea85118d7616352e156dc1184bf66", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -71,6 +71,7 @@ This API is completely unstable and subject to change.\n #![feature(slice_partition_dedup)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]\n+#![cfg_attr(not(bootstrap), allow(rustc::potential_query_instability))]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "811850af3678d08480b6678f84a4f683759d6e66", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -85,14 +85,16 @@ where\n \n /// Converts a reference to `T` into a reference to an array of length 1 (without copying).\n #[stable(feature = \"array_from_ref\", since = \"1.53.0\")]\n-pub fn from_ref<T>(s: &T) -> &[T; 1] {\n+#[rustc_const_unstable(feature = \"const_array_from_ref\", issue = \"90206\")]\n+pub const fn from_ref<T>(s: &T) -> &[T; 1] {\n     // SAFETY: Converting `&T` to `&[T; 1]` is sound.\n     unsafe { &*(s as *const T).cast::<[T; 1]>() }\n }\n \n /// Converts a mutable reference to `T` into a mutable reference to an array of length 1 (without copying).\n #[stable(feature = \"array_from_ref\", since = \"1.53.0\")]\n-pub fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n+#[rustc_const_unstable(feature = \"const_array_from_ref\", issue = \"90206\")]\n+pub const fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n     // SAFETY: Converting `&mut T` to `&mut [T; 1]` is sound.\n     unsafe { &mut *(s as *mut T).cast::<[T; 1]>() }\n }"}, {"sha": "63c42068aadf93fed9ad6d5c787f2a11409d1f48", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -136,6 +136,8 @@\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(variant_count)]\n+#![feature(const_array_from_ref)]\n+#![feature(const_slice_from_ref)]\n //\n // Language features:\n #![feature(abi_unadjusted)]"}, {"sha": "ad38aaf9f8300f4d95e25ccf3111b4c83c72ad81", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -138,12 +138,14 @@ pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T]\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n-pub fn from_ref<T>(s: &T) -> &[T] {\n+#[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]\n+pub const fn from_ref<T>(s: &T) -> &[T] {\n     array::from_ref(s)\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n-pub fn from_mut<T>(s: &mut T) -> &mut [T] {\n+#[rustc_const_unstable(feature = \"const_slice_from_ref\", issue = \"90206\")]\n+pub const fn from_mut<T>(s: &mut T) -> &mut [T] {\n     array::from_mut(s)\n }"}, {"sha": "7dc071b74235d3f872c742f8f540cfb628f369d6", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -7,6 +7,11 @@ fn array_from_ref() {\n     let value: String = \"Hello World!\".into();\n     let arr: &[String; 1] = array::from_ref(&value);\n     assert_eq!(&[value.clone()], arr);\n+\n+    const VALUE: &&str = &\"Hello World!\";\n+    const ARR: &[&str; 1] = array::from_ref(VALUE);\n+    assert_eq!(&[*VALUE], ARR);\n+    assert!(core::ptr::eq(VALUE, &ARR[0]));\n }\n \n #[test]"}, {"sha": "e1ba5020a50bb1ebe6af2db45797053b400c19e0", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -74,6 +74,8 @@\n #![feature(trusted_random_access)]\n #![feature(unsize)]\n #![feature(unzip_option)]\n+#![feature(const_array_from_ref)]\n+#![feature(const_slice_from_ref)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "8d05e47edf489f7add51dcf9d43514177166a607", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -2146,6 +2146,14 @@ fn test_slice_run_destructors() {\n     assert_eq!(x.get(), 1);\n }\n \n+#[test]\n+fn test_const_from_ref() {\n+    const VALUE: &i32 = &1;\n+    const SLICE: &[i32] = core::slice::from_ref(VALUE);\n+\n+    assert!(core::ptr::eq(VALUE, &SLICE[0]))\n+}\n+\n #[test]\n fn test_slice_fill_with_uninit() {\n     // This should not UB. See #87891"}, {"sha": "d36a3eaea92575923010ff705d2d2583d8654d0e", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -414,6 +414,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, K, V> {\n         Iter { base: self.base.iter() }\n@@ -442,6 +443,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     ///     println!(\"key: {} val: {}\", key, val);\n     /// }\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n         IterMut { base: self.base.iter_mut() }\n@@ -502,6 +504,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert!(a.is_empty());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, K, V> {\n         Drain { base: self.base.drain() }\n@@ -543,6 +546,7 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, K, V, F>\n     where\n@@ -949,6 +953,7 @@ where\n     /// assert_eq!(map.len(), 4);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -978,6 +983,7 @@ where\n     /// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n@@ -1004,6 +1010,7 @@ where\n     /// assert_eq!(vec, [1, 2, 3]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n@@ -1969,6 +1976,7 @@ impl<'a, K, V, S> IntoIterator for &'a HashMap<K, V, S> {\n     type IntoIter = Iter<'a, K, V>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, K, V> {\n         self.iter()\n     }\n@@ -1980,6 +1988,7 @@ impl<'a, K, V, S> IntoIterator for &'a mut HashMap<K, V, S> {\n     type IntoIter = IterMut<'a, K, V>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IterMut<'a, K, V> {\n         self.iter_mut()\n     }\n@@ -2008,6 +2017,7 @@ impl<K, V, S> IntoIterator for HashMap<K, V, S> {\n     /// let vec: Vec<(&str, i32)> = map.into_iter().collect();\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<K, V> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "76008e565b3907ed0630e1f23e765582bcf36145", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -185,6 +185,7 @@ impl<T, S> HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn iter(&self) -> Iter<'_, T> {\n         Iter { base: self.base.iter() }\n@@ -244,6 +245,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert!(set.is_empty());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"drain\", since = \"1.6.0\")]\n     pub fn drain(&mut self) -> Drain<'_, T> {\n         Drain { base: self.base.drain() }\n@@ -282,6 +284,7 @@ impl<T, S> HashSet<T, S> {\n     /// assert_eq!(odds, vec![1, 3, 5, 7]);\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[unstable(feature = \"hash_drain_filter\", issue = \"59618\")]\n     pub fn drain_filter<F>(&mut self, pred: F) -> DrainFilter<'_, T, F>\n     where\n@@ -506,6 +509,7 @@ where\n     /// assert_eq!(diff, [4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, S>) -> Difference<'a, T, S> {\n         Difference { iter: self.iter(), other }\n@@ -533,6 +537,7 @@ where\n     /// assert_eq!(diff1, [1, 4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn symmetric_difference<'a>(\n         &'a self,\n@@ -560,6 +565,7 @@ where\n     /// assert_eq!(intersection, [2, 3].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, S>) -> Intersection<'a, T, S> {\n         if self.len() <= other.len() {\n@@ -588,6 +594,7 @@ where\n     /// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn union<'a>(&'a self, other: &'a HashSet<T, S>) -> Union<'a, T, S> {\n         if self.len() >= other.len() {\n@@ -922,6 +929,7 @@ where\n     /// set.retain(|&k| k % 2 == 0);\n     /// assert_eq!(set.len(), 3);\n     /// ```\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     #[stable(feature = \"retain_hash_collection\", since = \"1.18.0\")]\n     pub fn retain<F>(&mut self, f: F)\n     where\n@@ -1403,6 +1411,7 @@ impl<'a, T, S> IntoIterator for &'a HashSet<T, S> {\n     type IntoIter = Iter<'a, T>;\n \n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> Iter<'a, T> {\n         self.iter()\n     }\n@@ -1434,6 +1443,7 @@ impl<T, S> IntoIterator for HashSet<T, S> {\n     /// }\n     /// ```\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_lint_query_instability)]\n     fn into_iter(self) -> IntoIter<T> {\n         IntoIter { base: self.base.into_iter() }\n     }"}, {"sha": "76ee324302e094551f3c6d95f5528f0e5a12e174", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -448,9 +448,11 @@ jobs:\n           #  macOS Builders  #\n           ####################\n \n+          # Only generate documentation for x86_64-apple-darwin, not other\n+          # tier 2 targets produced by this builder.\n           - name: dist-x86_64-apple\n             env:\n-              SCRIPT: ./x.py dist\n+              SCRIPT: ./x.py dist --exclude src/doc --exclude extended && ./x.py dist --target=x86_64-apple-darwin src/doc && ./x.py dist extended\n               RUST_CONFIGURE_ARGS: --host=x86_64-apple-darwin --target=x86_64-apple-darwin,aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n               RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n               MACOSX_DEPLOYMENT_TARGET: 10.7\n@@ -670,7 +672,17 @@ jobs:\n     strategy:\n       matrix:\n         include:\n-          - *dist-x86_64-linux\n+          - name: dist-x86_64-apple\n+            env:\n+              SCRIPT: ./x.py dist --exclude src/doc --exclude extended && ./x.py dist --target=x86_64-apple-darwin src/doc && ./x.py dist extended\n+              RUST_CONFIGURE_ARGS: --host=x86_64-apple-darwin --target=x86_64-apple-darwin,aarch64-apple-ios,x86_64-apple-ios,aarch64-apple-ios-sim --enable-full-tools --enable-sanitizers --enable-profiler --set rust.jemalloc --set llvm.ninja=false\n+              RUSTC_RETRY_LINKER_ON_SEGFAULT: 1\n+              MACOSX_DEPLOYMENT_TARGET: 10.7\n+              NO_LLVM_ASSERTIONS: 1\n+              NO_DEBUG_ASSERTIONS: 1\n+              DIST_REQUIRE_ALL_TOOLS: 1\n+            <<: *job-macos-xl\n+\n \n   master:\n     name: master"}, {"sha": "a21b40cfb779f35465e00e3b1f48517c09cf7318", "filename": "src/ci/run.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -43,7 +43,7 @@ else\n     PYTHON=\"python2\"\n fi\n \n-if ! isCI || isCiBranch auto || isCiBranch beta; then\n+if ! isCI || isCiBranch auto || isCiBranch beta || isCiBranch try; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.print-step-timings --enable-verbose-tests\"\n fi\n "}, {"sha": "6c908a21c39adacb097ccce682d9c2b5ec9f028a", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -152,10 +152,15 @@ h1.fqn > .in-band > a:hover {\n h2, h3, h4 {\n \tborder-bottom: 1px solid;\n }\n-h3.code-header, h4.code-header {\n+h3.code-header {\n+\tfont-size: 1.1em;\n+}\n+h4.code-header {\n \tfont-size: 1em;\n+}\n+h3.code-header, h4.code-header {\n \tfont-weight: 600;\n-\tborder: none;\n+\tborder-bottom-style: none;\n \tpadding: 0;\n \tmargin: 0;\n }\n@@ -174,12 +179,6 @@ h3.code-header, h4.code-header {\n \tmargin-bottom: 10px;\n \tposition: relative;\n }\n-.impl, .method.trait-impl,\n-.type.trait-impl,\n-.associatedconstant.trait-impl,\n-.associatedtype.trait-impl {\n-\tpadding-left: 15px;\n-}\n \n div.impl-items > div {\n \tpadding-left: 0;\n@@ -674,13 +673,6 @@ nav.sub {\n \tleft: -19px;\n }\n \n-.content .impl-items .method, .content .impl-items > .type, .impl-items > .associatedconstant,\n-.impl-items > .associatedtype, .content .impl-items details > summary > .type,\n-.impl-items details > summary > .associatedconstant,\n-.impl-items details > summary > .associatedtype {\n-\tmargin-left: 20px;\n-}\n-\n .content .impl-items .docblock, .content .impl-items .item-info {\n \tmargin-bottom: .6em;\n }\n@@ -751,7 +743,7 @@ a {\n .anchor {\n \tdisplay: none;\n \tposition: absolute;\n-\tleft: 0;\n+\tleft: -0.5em;\n \tbackground: none !important;\n }\n .anchor.field {\n@@ -1584,14 +1576,14 @@ details.rustdoc-toggle > summary.hideme::before {\n \n details.rustdoc-toggle > summary:not(.hideme)::before {\n \tposition: absolute;\n-\tleft: -23px;\n+\tleft: -24px;\n \ttop: 3px;\n }\n \n .impl-items > details.rustdoc-toggle > summary:not(.hideme)::before,\n .undocumented > details.rustdoc-toggle > summary:not(.hideme)::before {\n \tposition: absolute;\n-\tleft: -2px;\n+\tleft: -24px;\n }\n \n /* When a \"hideme\" summary is open and the \"Expand description\" or \"Show"}, {"sha": "424c312233b5d8e072629f30c018e8972a5fe4d6", "filename": "src/test/rustdoc-gui/anchor-navigable.goml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Frustdoc-gui%2Fanchor-navigable.goml", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Frustdoc-gui%2Fanchor-navigable.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchor-navigable.goml?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -0,0 +1,11 @@\n+// The `impl Foo` heading underneath `Implementations` has a \u00a7\n+// anchor to its left (used for linking to that heading). The anchor only shows\n+// up when hovering the `impl Foo`. This test ensures there's no gap between the\n+// anchor and the `impl Foo`. If there were a gap, this would cause an annoying\n+// problem: you hover `impl Foo` to see the anchor, then when you move your\n+// mouse to the left, the anchor disappears before you reach it.\n+goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n+// We check that \".item-info\" is bigger than its content.\n+move-cursor-to: \".impl\"\n+assert-property: (\".impl > a.anchor\", {\"offsetWidth\": \"9\"})\n+assert-css: (\".impl > a.anchor\", {\"left\": \"-8px\"})"}, {"sha": "560675b448608a31ef1130b38e476afa69fec9d9", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![deny(rustc::potential_query_instability)]\n+\n+extern crate rustc_data_structures;\n+\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+\n+fn main() {\n+    let mut x = FxHashMap::<u32, i32>::default();\n+\n+    for _ in x.drain() {}\n+    //~^ ERROR using `drain` can result in unstable\n+\n+    for _ in x.iter() {}\n+    //~^ ERROR using `iter`\n+\n+    for _ in Some(&mut x).unwrap().iter_mut() {}\n+    //~^ ERROR using `iter_mut`\n+\n+    for _ in x {}\n+    //~^ ERROR using `into_iter`\n+}"}, {"sha": "7e8b448f41a9119911d9f5bd8a7ec58a5fcc7b95", "filename": "src/test/ui-fulldeps/internal-lints/query_stability.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability.stderr?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -0,0 +1,39 @@\n+error: using `drain` can result in unstable query results\n+  --> $DIR/query_stability.rs:13:16\n+   |\n+LL |     for _ in x.drain() {}\n+   |                ^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/query_stability.rs:4:9\n+   |\n+LL | #![deny(rustc::potential_query_instability)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `iter` can result in unstable query results\n+  --> $DIR/query_stability.rs:16:16\n+   |\n+LL |     for _ in x.iter() {}\n+   |                ^^^^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `iter_mut` can result in unstable query results\n+  --> $DIR/query_stability.rs:19:36\n+   |\n+LL |     for _ in Some(&mut x).unwrap().iter_mut() {}\n+   |                                    ^^^^^^^^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: using `into_iter` can result in unstable query results\n+  --> $DIR/query_stability.rs:22:14\n+   |\n+LL |     for _ in x {}\n+   |              ^\n+   |\n+   = note: if you believe this case to be fine, allow this lint and add a comment explaining your rationale\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f478b73329eb76f0e446594dc32a85142e000470", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -0,0 +1,15 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_attrs)]\n+\n+#[rustc_lint_query_instability]\n+//~^ ERROR attribute should be applied to a function\n+struct Foo;\n+\n+impl Foo {\n+    #[rustc_lint_query_instability(a)]\n+    //~^ ERROR malformed `rustc_lint_query_instability`\n+    fn bar() {}\n+}\n+\n+fn main() {}"}, {"sha": "b5156f2ac5905551077f73b3265e75c7d5d14410", "filename": "src/test/ui-fulldeps/internal-lints/query_stability_incorrect.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fquery_stability_incorrect.stderr?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -0,0 +1,17 @@\n+error: malformed `rustc_lint_query_instability` attribute input\n+  --> $DIR/query_stability_incorrect.rs:10:5\n+   |\n+LL |     #[rustc_lint_query_instability(a)]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: must be of the form: `#[rustc_lint_query_instability]`\n+\n+error: attribute should be applied to a function\n+  --> $DIR/query_stability_incorrect.rs:5:1\n+   |\n+LL | #[rustc_lint_query_instability]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct Foo;\n+   | ----------- not a function\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "1e36b2fabf2c07deda90b94086eb8c926d3cba99", "filename": "src/test/ui/suggestions/issue-90213-expected-boxfuture-self-ice.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.rs?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -0,0 +1,13 @@\n+// Checks that we do not ICE when comparing `Self` to `Pin`\n+// edition:2021\n+\n+struct S;\n+\n+impl S {\n+    fn foo(_: Box<Option<S>>) {}\n+    fn bar() {\n+        Self::foo(None) //~ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c15b772b79ca4364f9087215341de116a6a0d64a", "filename": "src/test/ui/suggestions/issue-90213-expected-boxfuture-self-ice.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/00d5e42e776da900049fe19087bc9b0057ec70cd/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-90213-expected-boxfuture-self-ice.stderr?ref=00d5e42e776da900049fe19087bc9b0057ec70cd", "patch": "@@ -0,0 +1,17 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90213-expected-boxfuture-self-ice.rs:9:19\n+   |\n+LL |         Self::foo(None)\n+   |                   ^^^^ expected struct `Box`, found enum `Option`\n+   |\n+   = note: expected struct `Box<Option<S>>`\n+                found enum `Option<_>`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |         Self::foo(Box::new(None))\n+   |                   +++++++++    +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}