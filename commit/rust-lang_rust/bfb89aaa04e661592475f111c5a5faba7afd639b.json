{"sha": "bfb89aaa04e661592475f111c5a5faba7afd639b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYjg5YWFhMDRlNjYxNTkyNDc1ZjExMWM1YTVmYWJhN2FmZDYzOWI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-05-28T06:30:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-28T06:30:58Z"}, "message": "Merge pull request #1599 from topecongiro/performance/binary-search\n\nAvoid unnecessary binary search in rewrite_call", "tree": {"sha": "329b17795dd527583b8a3619fb969496600aa5b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/329b17795dd527583b8a3619fb969496600aa5b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfb89aaa04e661592475f111c5a5faba7afd639b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfb89aaa04e661592475f111c5a5faba7afd639b", "html_url": "https://github.com/rust-lang/rust/commit/bfb89aaa04e661592475f111c5a5faba7afd639b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfb89aaa04e661592475f111c5a5faba7afd639b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac3fc36cc98f66381759ae4b8ef08021ec102a2", "html_url": "https://github.com/rust-lang/rust/commit/8ac3fc36cc98f66381759ae4b8ef08021ec102a2"}, {"sha": "a22228aceea355098745a314b4177a800a623e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22228aceea355098745a314b4177a800a623e97", "html_url": "https://github.com/rust-lang/rust/commit/a22228aceea355098745a314b4177a800a623e97"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "4c9a55f28c029536085bd0f072b8ede21ebf17f2", "filename": "src/expr.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bfb89aaa04e661592475f111c5a5faba7afd639b/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfb89aaa04e661592475f111c5a5faba7afd639b/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bfb89aaa04e661592475f111c5a5faba7afd639b", "patch": "@@ -74,7 +74,7 @@ fn format_expr(expr: &ast::Expr,\n         }\n         ast::ExprKind::Call(ref callee, ref args) => {\n             let inner_span = mk_sp(callee.span.hi, expr.span.hi);\n-            rewrite_call(context, &**callee, args, inner_span, shape)\n+            rewrite_call_with_binary_search(context, &**callee, args, inner_span, shape)\n         }\n         ast::ExprKind::Paren(ref subexpr) => rewrite_paren(context, subexpr, shape),\n         ast::ExprKind::Binary(ref op, ref lhs, ref rhs) => {\n@@ -1603,41 +1603,47 @@ fn string_requires_rewrite(context: &RewriteContext,\n     false\n }\n \n-pub fn rewrite_call<R>(context: &RewriteContext,\n-                       callee: &R,\n-                       args: &[ptr::P<ast::Expr>],\n-                       span: Span,\n-                       shape: Shape)\n-                       -> Option<String>\n+pub fn rewrite_call_with_binary_search<R>(context: &RewriteContext,\n+                                          callee: &R,\n+                                          args: &[ptr::P<ast::Expr>],\n+                                          span: Span,\n+                                          shape: Shape)\n+                                          -> Option<String>\n     where R: Rewrite\n {\n     let closure = |callee_max_width| {\n-        rewrite_call_inner(context, callee, callee_max_width, args, span, shape, false)\n+        // FIXME using byte lens instead of char lens (and probably all over the\n+        // place too)\n+        let callee_shape = Shape {\n+            width: callee_max_width,\n+            ..shape\n+        };\n+        let callee_str = callee\n+            .rewrite(context, callee_shape)\n+            .ok_or(Ordering::Greater)?;\n+\n+        rewrite_call_inner(context, &callee_str, args, span, shape, false)\n     };\n \n     binary_search(1, shape.width, closure)\n }\n \n-fn rewrite_call_inner<R>(context: &RewriteContext,\n-                         callee: &R,\n-                         max_callee_width: usize,\n-                         args: &[ptr::P<ast::Expr>],\n-                         span: Span,\n-                         shape: Shape,\n-                         force_trailing_comma: bool)\n-                         -> Result<String, Ordering>\n-    where R: Rewrite\n-{\n-    // FIXME using byte lens instead of char lens (and probably all over the\n-    // place too)\n-    let callee_shape = Shape {\n-        width: max_callee_width,\n-        ..shape\n-    };\n-    let callee_str = callee\n-        .rewrite(context, callee_shape)\n-        .ok_or(Ordering::Greater)?;\n+pub fn rewrite_call(context: &RewriteContext,\n+                    callee: &str,\n+                    args: &[ptr::P<ast::Expr>],\n+                    span: Span,\n+                    shape: Shape)\n+                    -> Option<String> {\n+    rewrite_call_inner(context, &callee, args, span, shape, false).ok()\n+}\n \n+fn rewrite_call_inner(context: &RewriteContext,\n+                      callee_str: &str,\n+                      args: &[ptr::P<ast::Expr>],\n+                      span: Span,\n+                      shape: Shape,\n+                      force_trailing_comma: bool)\n+                      -> Result<String, Ordering> {\n     // 2 = `( `, 1 = `(`\n     let paren_overhead = if context.config.spaces_within_parens() {\n         2\n@@ -2108,7 +2114,6 @@ pub fn rewrite_tuple(context: &RewriteContext,\n     // 1 = \",\"\n     rewrite_call_inner(context,\n                        &String::new(),\n-                       shape.width.checked_sub(1).unwrap_or(0),\n                        items,\n                        span,\n                        shape,"}]}