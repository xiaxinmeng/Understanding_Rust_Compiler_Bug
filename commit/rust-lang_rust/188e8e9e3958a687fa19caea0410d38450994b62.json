{"sha": "188e8e9e3958a687fa19caea0410d38450994b62", "node_id": "C_kwDOAAsO6NoAKDE4OGU4ZTllMzk1OGE2ODdmYTE5Y2FlYTA0MTBkMzg0NTA5OTRiNjI", "commit": {"author": {"name": "Onur \u00d6zkan", "email": "work@onurozkan.dev", "date": "2022-10-28T07:20:51Z"}, "committer": {"name": "ozkanonur", "email": "work@onurozkan.dev", "date": "2022-11-04T14:06:47Z"}, "message": "improve `filesearch::get_or_default_sysroot` r=ozkanonur\n\nSigned-off-by: Onur \u00d6zkan <work@onurozkan.dev>", "tree": {"sha": "b612e4684b444b18233054c16b41fa391b9f9094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b612e4684b444b18233054c16b41fa391b9f9094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/188e8e9e3958a687fa19caea0410d38450994b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/188e8e9e3958a687fa19caea0410d38450994b62", "html_url": "https://github.com/rust-lang/rust/commit/188e8e9e3958a687fa19caea0410d38450994b62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/188e8e9e3958a687fa19caea0410d38450994b62/comments", "author": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ozkanonur", "id": 39852038, "node_id": "MDQ6VXNlcjM5ODUyMDM4", "avatar_url": "https://avatars.githubusercontent.com/u/39852038?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ozkanonur", "html_url": "https://github.com/ozkanonur", "followers_url": "https://api.github.com/users/ozkanonur/followers", "following_url": "https://api.github.com/users/ozkanonur/following{/other_user}", "gists_url": "https://api.github.com/users/ozkanonur/gists{/gist_id}", "starred_url": "https://api.github.com/users/ozkanonur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ozkanonur/subscriptions", "organizations_url": "https://api.github.com/users/ozkanonur/orgs", "repos_url": "https://api.github.com/users/ozkanonur/repos", "events_url": "https://api.github.com/users/ozkanonur/events{/privacy}", "received_events_url": "https://api.github.com/users/ozkanonur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e6a8034b8e0777fcda908038114e3aebceb564c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6a8034b8e0777fcda908038114e3aebceb564c", "html_url": "https://github.com/rust-lang/rust/commit/6e6a8034b8e0777fcda908038114e3aebceb564c"}], "stats": {"total": 79, "additions": 5, "deletions": 74}, "files": [{"sha": "46afea2c4b5a1b1675db8e4bb5a80fa7e6bf0293", "filename": "src/driver.rs", "status": "modified", "additions": 5, "deletions": 74, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/188e8e9e3958a687fa19caea0410d38450994b62/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/188e8e9e3958a687fa19caea0410d38450994b62/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=188e8e9e3958a687fa19caea0410d38450994b62", "patch": "@@ -23,8 +23,8 @@ use std::borrow::Cow;\n use std::env;\n use std::ops::Deref;\n use std::panic;\n-use std::path::{Path, PathBuf};\n-use std::process::{exit, Command};\n+use std::path::Path;\n+use std::process::exit;\n use std::sync::LazyLock;\n \n /// If a command-line option matches `find_arg`, then apply the predicate `pred` on its value. If\n@@ -209,83 +209,21 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     interface::try_print_query_stack(&handler, num_frames);\n }\n \n-fn toolchain_path(home: Option<String>, toolchain: Option<String>) -> Option<PathBuf> {\n-    home.and_then(|home| {\n-        toolchain.map(|toolchain| {\n-            let mut path = PathBuf::from(home);\n-            path.push(\"toolchains\");\n-            path.push(toolchain);\n-            path\n-        })\n-    })\n-}\n-\n #[allow(clippy::too_many_lines)]\n pub fn main() {\n     rustc_driver::init_rustc_env_logger();\n     LazyLock::force(&ICE_HOOK);\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n \n-        // Get the sysroot, looking from most specific to this invocation to the least:\n-        // - command line\n-        // - runtime environment\n-        //    - SYSROOT\n-        //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n-        // - sysroot from rustc in the path\n-        // - compile-time environment\n-        //    - SYSROOT\n-        //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN\n-        let sys_root_arg = arg_value(&orig_args, \"--sysroot\", |_| true);\n-        let have_sys_root_arg = sys_root_arg.is_some();\n-        let sys_root = sys_root_arg\n-            .map(PathBuf::from)\n-            .or_else(|| std::env::var(\"SYSROOT\").ok().map(PathBuf::from))\n-            .or_else(|| {\n-                let home = std::env::var(\"RUSTUP_HOME\")\n-                    .or_else(|_| std::env::var(\"MULTIRUST_HOME\"))\n-                    .ok();\n-                let toolchain = std::env::var(\"RUSTUP_TOOLCHAIN\")\n-                    .or_else(|_| std::env::var(\"MULTIRUST_TOOLCHAIN\"))\n-                    .ok();\n-                toolchain_path(home, toolchain)\n-            })\n-            .or_else(|| {\n-                Command::new(\"rustc\")\n-                    .arg(\"--print\")\n-                    .arg(\"sysroot\")\n-                    .output()\n-                    .ok()\n-                    .and_then(|out| String::from_utf8(out.stdout).ok())\n-                    .map(|s| PathBuf::from(s.trim()))\n-            })\n-            .or_else(|| option_env!(\"SYSROOT\").map(PathBuf::from))\n-            .or_else(|| {\n-                let home = option_env!(\"RUSTUP_HOME\")\n-                    .or(option_env!(\"MULTIRUST_HOME\"))\n-                    .map(ToString::to_string);\n-                let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\")\n-                    .or(option_env!(\"MULTIRUST_TOOLCHAIN\"))\n-                    .map(ToString::to_string);\n-                toolchain_path(home, toolchain)\n-            })\n-            .map(|pb| pb.to_string_lossy().to_string())\n-            .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n-\n         // make \"clippy-driver --rustc\" work like a subcommand that passes further args to \"rustc\"\n         // for example `clippy-driver --rustc --version` will print the rustc version that clippy-driver\n         // uses\n         if let Some(pos) = orig_args.iter().position(|arg| arg == \"--rustc\") {\n             orig_args.remove(pos);\n             orig_args[0] = \"rustc\".to_string();\n \n-            // if we call \"rustc\", we need to pass --sysroot here as well\n-            let mut args: Vec<String> = orig_args.clone();\n-            if !have_sys_root_arg {\n-                args.extend(vec![\"--sysroot\".into(), sys_root]);\n-            };\n-\n-            return rustc_driver::RunCompiler::new(&args, &mut DefaultCallbacks).run();\n+            return rustc_driver::RunCompiler::new(&orig_args, &mut DefaultCallbacks).run();\n         }\n \n         if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n@@ -308,14 +246,6 @@ pub fn main() {\n             exit(0);\n         }\n \n-        // this conditional check for the --sysroot flag is there so users can call\n-        // `clippy_driver` directly\n-        // without having to pass --sysroot or anything\n-        let mut args: Vec<String> = orig_args.clone();\n-        if !have_sys_root_arg {\n-            args.extend(vec![\"--sysroot\".into(), sys_root]);\n-        };\n-\n         let mut no_deps = false;\n         let clippy_args_var = env::var(\"CLIPPY_ARGS\").ok();\n         let clippy_args = clippy_args_var\n@@ -344,10 +274,11 @@ pub fn main() {\n \n         let clippy_enabled = !cap_lints_allow && (!no_deps || in_primary_package);\n         if clippy_enabled {\n+            let mut args: Vec<String> = orig_args.clone();\n             args.extend(clippy_args);\n             rustc_driver::RunCompiler::new(&args, &mut ClippyCallbacks { clippy_args_var }).run()\n         } else {\n-            rustc_driver::RunCompiler::new(&args, &mut RustcCallbacks { clippy_args_var }).run()\n+            rustc_driver::RunCompiler::new(&orig_args, &mut RustcCallbacks { clippy_args_var }).run()\n         }\n     }))\n }"}]}