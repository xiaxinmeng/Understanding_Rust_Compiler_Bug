{"sha": "5301d380b66066f71b3eabe1408f88cda348f084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMDFkMzgwYjY2MDY2ZjcxYjNlYWJlMTQwOGY4OGNkYTM0OGYwODQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-19T14:47:09Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:35Z"}, "message": "Remove unused bcx from LocalAnalyzer.", "tree": {"sha": "3da17d21acd075fc2595ff2e4ec1e02d5a74aef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da17d21acd075fc2595ff2e4ec1e02d5a74aef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5301d380b66066f71b3eabe1408f88cda348f084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5301d380b66066f71b3eabe1408f88cda348f084", "html_url": "https://github.com/rust-lang/rust/commit/5301d380b66066f71b3eabe1408f88cda348f084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5301d380b66066f71b3eabe1408f88cda348f084/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0256f60461cf607a7f84554926298c0fb74f381e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0256f60461cf607a7f84554926298c0fb74f381e", "html_url": "https://github.com/rust-lang/rust/commit/0256f60461cf607a7f84554926298c0fb74f381e"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "3f94af825539487fb25afc0de462c8bb83920c6e", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5301d380b66066f71b3eabe1408f88cda348f084/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5301d380b66066f71b3eabe1408f88cda348f084/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=5301d380b66066f71b3eabe1408f88cda348f084", "patch": "@@ -16,14 +16,13 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::mir::{self, Location, TerminatorKind};\n use rustc::mir::visit::{Visitor, LvalueContext};\n use rustc::mir::traversal;\n-use common::{self, BlockAndBuilder};\n+use common;\n use super::MirContext;\n use super::rvalue;\n \n-pub fn lvalue_locals<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>, mircx: &MirContext<'a, 'tcx>)\n-    -> BitVector {\n+pub fn lvalue_locals<'a, 'tcx>(mircx: &MirContext<'a, 'tcx>) -> BitVector {\n     let mir = mircx.mir;\n-    let mut analyzer = LocalAnalyzer::new(mircx, &bcx);\n+    let mut analyzer = LocalAnalyzer::new(mircx);\n \n     analyzer.visit_mir(mir);\n \n@@ -34,13 +33,13 @@ pub fn lvalue_locals<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>, mircx: &MirConte\n             ty.is_unique() ||\n             ty.is_region_ptr() ||\n             ty.is_simd() ||\n-            common::type_is_zero_size(bcx.ccx(), ty)\n+            common::type_is_zero_size(mircx.fcx.ccx, ty)\n         {\n             // These sorts of types are immediates that we can store\n             // in an ValueRef without an alloca.\n-            assert!(common::type_is_immediate(bcx.ccx(), ty) ||\n-                    common::type_is_fat_ptr(bcx.ccx(), ty));\n-        } else if common::type_is_imm_pair(bcx.ccx(), ty) {\n+            assert!(common::type_is_immediate(mircx.fcx.ccx, ty) ||\n+                    common::type_is_fat_ptr(mircx.fcx.ccx, ty));\n+        } else if common::type_is_imm_pair(mircx.fcx.ccx, ty) {\n             // We allow pairs and uses of any of their 2 fields.\n         } else {\n             // These sorts of types require an alloca. Note that\n@@ -57,18 +56,15 @@ pub fn lvalue_locals<'a, 'tcx>(bcx: &BlockAndBuilder<'a, 'tcx>, mircx: &MirConte\n }\n \n struct LocalAnalyzer<'mir, 'a: 'mir, 'tcx: 'a> {\n-    mir: &'mir MirContext<'a, 'tcx>,\n-    bcx: &'mir BlockAndBuilder<'a, 'tcx>,\n+    cx: &'mir MirContext<'a, 'tcx>,\n     lvalue_locals: BitVector,\n     seen_assigned: BitVector\n }\n \n impl<'mir, 'a, 'tcx> LocalAnalyzer<'mir, 'a, 'tcx> {\n-    fn new(mircx: &'mir MirContext<'a, 'tcx>, bcx: &'mir BlockAndBuilder<'a, 'tcx>)\n-           -> LocalAnalyzer<'mir, 'a, 'tcx> {\n+    fn new(mircx: &'mir MirContext<'a, 'tcx>) -> LocalAnalyzer<'mir, 'a, 'tcx> {\n         LocalAnalyzer {\n-            mir: mircx,\n-            bcx: bcx,\n+            cx: mircx,\n             lvalue_locals: BitVector::new(mircx.mir.local_decls.len()),\n             seen_assigned: BitVector::new(mircx.mir.local_decls.len())\n         }\n@@ -96,7 +92,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n \n         if let mir::Lvalue::Local(index) = *lvalue {\n             self.mark_assigned(index);\n-            if !rvalue::rvalue_creates_operand(self.mir.mir, self.bcx, rvalue) {\n+            if !rvalue::rvalue_creates_operand(rvalue) {\n                 self.mark_as_lvalue(index);\n             }\n         } else {\n@@ -116,7 +112,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n                     literal: mir::Literal::Item { def_id, .. }, ..\n                 }),\n                 ref args, ..\n-            } if Some(def_id) == self.bcx.tcx().lang_items.box_free_fn() => {\n+            } if Some(def_id) == self.cx.fcx.ccx.tcx().lang_items.box_free_fn() => {\n                 // box_free(x) shares with `drop x` the property that it\n                 // is not guaranteed to be statically dominated by the\n                 // definition of x, so x must always be in an alloca.\n@@ -139,10 +135,10 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n         // Allow uses of projections of immediate pair fields.\n         if let mir::Lvalue::Projection(ref proj) = *lvalue {\n             if let mir::Lvalue::Local(_) = proj.base {\n-                let ty = proj.base.ty(self.mir.mir, self.bcx.tcx());\n+                let ty = proj.base.ty(self.cx.mir, self.cx.fcx.ccx.tcx());\n \n-                let ty = self.mir.monomorphize(&ty.to_ty(self.bcx.tcx()));\n-                if common::type_is_imm_pair(self.bcx.ccx(), ty) {\n+                let ty = self.cx.monomorphize(&ty.to_ty(self.cx.fcx.ccx.tcx()));\n+                if common::type_is_imm_pair(self.cx.fcx.ccx, ty) {\n                     if let mir::ProjectionElem::Field(..) = proj.elem {\n                         if let LvalueContext::Consume = context {\n                             return;\n@@ -170,11 +166,11 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n                 }\n \n                 LvalueContext::Drop => {\n-                    let ty = lvalue.ty(self.mir.mir, self.bcx.tcx());\n-                    let ty = self.mir.monomorphize(&ty.to_ty(self.bcx.tcx()));\n+                    let ty = lvalue.ty(self.cx.mir, self.cx.fcx.ccx.tcx());\n+                    let ty = self.cx.monomorphize(&ty.to_ty(self.cx.fcx.ccx.tcx()));\n \n                     // Only need the lvalue if we're actually dropping it.\n-                    if self.bcx.ccx().shared().type_needs_drop(ty) {\n+                    if self.cx.fcx.ccx.shared().type_needs_drop(ty) {\n                         self.mark_as_lvalue(index);\n                     }\n                 }"}, {"sha": "846b4162e06fd869ccede1504d5fa85c3213cd58", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5301d380b66066f71b3eabe1408f88cda348f084/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5301d380b66066f71b3eabe1408f88cda348f084/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=5301d380b66066f71b3eabe1408f88cda348f084", "patch": "@@ -235,7 +235,7 @@ pub fn trans_mir<'a, 'tcx: 'a>(\n         },\n     };\n \n-    let lvalue_locals = analyze::lvalue_locals(&bcx, &mircx);\n+    let lvalue_locals = analyze::lvalue_locals(&mircx);\n \n     // Allocate variable and temp allocas\n     mircx.locals = {"}, {"sha": "5f17db73d66294d43168b7ff4a42f5478a549e66", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5301d380b66066f71b3eabe1408f88cda348f084/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5301d380b66066f71b3eabe1408f88cda348f084/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=5301d380b66066f71b3eabe1408f88cda348f084", "patch": "@@ -166,7 +166,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n             }\n \n             _ => {\n-                assert!(rvalue_creates_operand(&self.mir, &bcx, rvalue));\n+                assert!(rvalue_creates_operand(rvalue));\n                 let (bcx, temp) = self.trans_rvalue_operand(bcx, rvalue);\n                 self.store_operand(&bcx, dest.llval, temp);\n                 bcx\n@@ -179,8 +179,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                                 rvalue: &mir::Rvalue<'tcx>)\n                                 -> (BlockAndBuilder<'a, 'tcx>, OperandRef<'tcx>)\n     {\n-        assert!(rvalue_creates_operand(&self.mir, &bcx, rvalue),\n-                \"cannot trans {:?} to operand\", rvalue);\n+        assert!(rvalue_creates_operand(rvalue), \"cannot trans {:?} to operand\", rvalue);\n \n         match *rvalue {\n             mir::Rvalue::Cast(ref kind, ref source, cast_ty) => {\n@@ -662,9 +661,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n     }\n }\n \n-pub fn rvalue_creates_operand<'a, 'tcx>(_mir: &mir::Mir<'tcx>,\n-                                        _bcx: &BlockAndBuilder<'a, 'tcx>,\n-                                        rvalue: &mir::Rvalue<'tcx>) -> bool {\n+pub fn rvalue_creates_operand(rvalue: &mir::Rvalue) -> bool {\n     match *rvalue {\n         mir::Rvalue::Ref(..) |\n         mir::Rvalue::Len(..) |"}]}