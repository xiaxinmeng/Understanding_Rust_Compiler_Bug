{"sha": "89753077fc25abb9d04d24a2b2b73984854f7c3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5NzUzMDc3ZmMyNWFiYjlkMDRkMjRhMmIyYjczOTg0ODU0ZjdjM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-28T09:55:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-12-28T09:55:45Z"}, "message": "Auto merge of #30570 - fhartwig:dead-doc-links, r=steveklabnik\n\nr? @steveklabnik", "tree": {"sha": "02cbfb5f56b8dc173cdcae16a2511e0a8782aec2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02cbfb5f56b8dc173cdcae16a2511e0a8782aec2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89753077fc25abb9d04d24a2b2b73984854f7c3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89753077fc25abb9d04d24a2b2b73984854f7c3a", "html_url": "https://github.com/rust-lang/rust/commit/89753077fc25abb9d04d24a2b2b73984854f7c3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89753077fc25abb9d04d24a2b2b73984854f7c3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3989f655e0c79ec61f03b36cb1d83667a5a7b395", "url": "https://api.github.com/repos/rust-lang/rust/commits/3989f655e0c79ec61f03b36cb1d83667a5a7b395", "html_url": "https://github.com/rust-lang/rust/commit/3989f655e0c79ec61f03b36cb1d83667a5a7b395"}, {"sha": "eaa94c52a12a2692d2a4ac6661a53fe90b3ea022", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022", "html_url": "https://github.com/rust-lang/rust/commit/eaa94c52a12a2692d2a4ac6661a53fe90b3ea022"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "92c23ef2f38b828f8827754f21ddfd123b5c84e0", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=89753077fc25abb9d04d24a2b2b73984854f7c3a", "patch": "@@ -640,7 +640,7 @@ impl str {\n     /// Value, and may not match your idea of what a 'character' is. Iteration\n     /// over grapheme clusters may be what you actually want.\n     ///\n-    /// [`char`]: ../primitive.char.html\n+    /// [`char`]: primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -1551,7 +1551,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines\n     /// if a character matches.\n     ///\n-    /// [`char`]: primtive.char.html\n+    /// [`char`]: primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -1643,7 +1643,7 @@ impl str {\n     ///\n     /// `parse()` can parse any type that implements the [`FromStr`] trait.\n     ///\n-    /// [`FromStr`]: trait.FromStr.html\n+    /// [`FromStr`]: str/trait.FromStr.html\n     ///\n     /// # Failure\n     ///"}, {"sha": "43a1bf6e500c0236de98df585afaacc6c1269db0", "filename": "src/libcore/char.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=89753077fc25abb9d04d24a2b2b73984854f7c3a", "patch": "@@ -69,7 +69,7 @@ const MAX_THREE_B: u32 =  0x10000;\n /// Point], but only ones within a certain range. `MAX` is the highest valid\n /// code point that's a valid [Unicode Scalar Value].\n ///\n-/// [`char`]: primitive.char.html\n+/// [`char`]: ../primitive.char.html\n /// [Unicode Scalar Value]: http://www.unicode.org/glossary/#unicode_scalar_value\n /// [Code Point]: http://www.unicode.org/glossary/#code_point\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -91,9 +91,9 @@ pub const MAX: char = '\\u{10ffff}';\n /// [`char`]s. `from_u32()` will return `None` if the input is not a valid value\n /// for a [`char`].\n ///\n-/// [`char`]: primitive.char.html\n-/// [`u32`]: primitive.u32.html\n-/// [`as`]: ../book/casting-between-types.html#as\n+/// [`char`]: ../primitive.char.html\n+/// [`u32`]: ../primitive.u32.html\n+/// [`as`]: ../../book/casting-between-types.html#as\n ///\n /// For an unsafe version of this function which ignores these checks, see\n /// [`from_u32_unchecked()`].\n@@ -148,9 +148,9 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// [`char`]s. `from_u32_unchecked()` will ignore this, and blindly cast to\n /// [`char`], possibly creating an invalid one.\n ///\n-/// [`char`]: primitive.char.html\n-/// [`u32`]: primitive.u32.html\n-/// [`as`]: ../book/casting-between-types.html#as\n+/// [`char`]: ../primitive.char.html\n+/// [`u32`]: ../primitive.u32.html\n+/// [`as`]: ../../book/casting-between-types.html#as\n ///\n /// # Safety\n ///\n@@ -414,8 +414,8 @@ pub fn encode_utf16_raw(mut ch: u32, dst: &mut [u16]) -> Option<usize> {\n /// This `struct` is created by the [`escape_unicode()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_unicode()`]: primitive.char.html#method.escape_unicode\n-/// [`char`]: primitive.char.html\n+/// [`escape_unicode()`]: ../primitive.char.html#method.escape_unicode\n+/// [`char`]: ../primitive.char.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeUnicode {\n@@ -494,8 +494,8 @@ impl Iterator for EscapeUnicode {\n /// This `struct` is created by the [`escape_default()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`escape_default()`]: primitive.char.html#method.escape_default\n-/// [`char`]: primitive.char.html\n+/// [`escape_default()`]: ../primitive.char.html#method.escape_default\n+/// [`char`]: ../primitive.char.html\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct EscapeDefault {"}, {"sha": "7be0f467ac9ff8b4b39c6bd90c47608bf7529846", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=89753077fc25abb9d04d24a2b2b73984854f7c3a", "patch": "@@ -237,7 +237,7 @@\n //! to read the line and print it, so we use `()`.\n //!\n //! [result]: type.Result.html\n-//! [try]: macro.try!.html\n+//! [try]: ../macro.try!.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -992,8 +992,8 @@ pub trait Write {\n     /// explicitly be called. The [`write!`][write] macro should be favored to\n     /// invoke this method instead.\n     ///\n-    /// [formatargs]: ../std/macro.format_args!.html\n-    /// [write]: ../std/macro.write!.html\n+    /// [formatargs]: ../macro.format_args!.html\n+    /// [write]: ../macro.write!.html\n     ///\n     /// This function internally uses the [`write_all`][writeall] method on\n     /// this trait and hence will continuously write data so long as no errors\n@@ -1126,7 +1126,7 @@ pub trait Write {\n ///\n /// [`File`][file]s implement `Seek`:\n ///\n-/// [file]: ../std/fs/struct.File.html\n+/// [file]: ../fs/struct.File.html\n ///\n /// ```\n /// use std::io;"}, {"sha": "9c20a48d42518149261b1680d1bb06a414b59140", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89753077fc25abb9d04d24a2b2b73984854f7c3a/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=89753077fc25abb9d04d24a2b2b73984854f7c3a", "patch": "@@ -76,7 +76,7 @@\n //! `i32`](primitive.i32.html) that lists all the methods that can be called on\n //! 32-bit integers (very useful), and there is a [page for the module\n //! `std::i32`](i32/index.html) that documents the constant values [`MIN`] and\n-//! [`MAX`] (rarely useful).\n+//! [`MAX`](i32/constant.MAX.html) (rarely useful).\n //!\n //! Note the documentation for the primitives [`str`] and [`[T]`][slice] (also\n //! called 'slice'). Many method calls on [`String`] and [`Vec<T>`] are actually\n@@ -153,7 +153,6 @@\n //!\n //! [I/O]: io/index.html\n //! [`MIN`]: i32/constant.MIN.html\n-//! [`MAX`]: i32/constant.MAX.html\n //! [TCP]: net/struct.TcpStream.html\n //! [The Rust Prelude]: prelude/index.html\n //! [UDP]: net/struct.UdpSocket.html"}]}