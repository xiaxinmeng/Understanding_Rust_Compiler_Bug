{"sha": "8b7f58976b32ccc768e35151b77aa9ea004b7495", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiN2Y1ODk3NmIzMmNjYzc2OGUzNTE1MWI3N2FhOWVhMDA0Yjc0OTU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-02T17:15:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-02T17:15:10Z"}, "message": "don't cache parses twice\n\nBefore this commit, `Parse`s for original file ended up two times in\nsalsa's db: first, when we parse original file, and second, when we\nparse macro or a file.\n\nGiven that parse trees are the worst ofenders in terms of memory, it\nmakes sense to make sure we store them only once.", "tree": {"sha": "272f93a4431ca77d6cce8ee43c0d6d4f3c636701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/272f93a4431ca77d6cce8ee43c0d6d4f3c636701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b7f58976b32ccc768e35151b77aa9ea004b7495", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7f58976b32ccc768e35151b77aa9ea004b7495", "html_url": "https://github.com/rust-lang/rust/commit/8b7f58976b32ccc768e35151b77aa9ea004b7495", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b7f58976b32ccc768e35151b77aa9ea004b7495/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b40c6de8a6887e6c184fca5c9188d26ee402df23", "url": "https://api.github.com/repos/rust-lang/rust/commits/b40c6de8a6887e6c184fca5c9188d26ee402df23", "html_url": "https://github.com/rust-lang/rust/commit/b40c6de8a6887e6c184fca5c9188d26ee402df23"}], "stats": {"total": 94, "additions": 61, "deletions": 33}, "files": [{"sha": "3afd0994ce829bea3092f29b2d14d3e85e5254ff", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=8b7f58976b32ccc768e35151b77aa9ea004b7495", "patch": "@@ -33,8 +33,11 @@ pub trait AstDatabase: SourceDatabase {\n     #[salsa::transparent]\n     #[salsa::invoke(crate::source_id::AstIdMap::file_item_query)]\n     fn ast_id_to_node(&self, file_id: HirFileId, ast_id: ErasedFileAstId) -> TreeArc<SyntaxNode>;\n+    #[salsa::transparent]\n     #[salsa::invoke(crate::ids::HirFileId::parse_or_expand_query)]\n     fn parse_or_expand(&self, file_id: HirFileId) -> Option<TreeArc<SyntaxNode>>;\n+    #[salsa::invoke(crate::ids::HirFileId::parse_macro_query)]\n+    fn parse_macro(&self, macro_file: ids::MacroFile) -> Option<TreeArc<SyntaxNode>>;\n \n     #[salsa::invoke(crate::ids::macro_def_query)]\n     fn macro_def(&self, macro_id: MacroDefId) -> Option<Arc<mbe::MacroRules>>;"}, {"sha": "a95561812126ca54f0f323f0e5df88f2ca2b8029", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 28, "deletions": 25, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=8b7f58976b32ccc768e35151b77aa9ea004b7495", "patch": "@@ -62,32 +62,35 @@ impl HirFileId {\n         file_id: HirFileId,\n     ) -> Option<TreeArc<SyntaxNode>> {\n         db.check_canceled();\n-        let _p = profile(\"parse_or_expand_query\");\n         match file_id.0 {\n             HirFileIdRepr::File(file_id) => Some(db.parse(file_id).tree.syntax().to_owned()),\n-            HirFileIdRepr::Macro(macro_file) => {\n-                let macro_call_id = macro_file.macro_call_id;\n-                let tt = db\n-                    .macro_expand(macro_call_id)\n-                    .map_err(|err| {\n-                        // Note:\n-                        // The final goal we would like to make all parse_macro success,\n-                        // such that the following log will not call anyway.\n-                        log::warn!(\n-                            \"fail on macro_parse: (reason: {}) {}\",\n-                            err,\n-                            macro_call_id.debug_dump(db)\n-                        );\n-                    })\n-                    .ok()?;\n-                match macro_file.macro_file_kind {\n-                    MacroFileKind::Items => {\n-                        Some(mbe::token_tree_to_ast_item_list(&tt).syntax().to_owned())\n-                    }\n-                    MacroFileKind::Expr => {\n-                        mbe::token_tree_to_expr(&tt).ok().map(|it| it.syntax().to_owned())\n-                    }\n-                }\n+            HirFileIdRepr::Macro(macro_file) => db.parse_macro(macro_file),\n+        }\n+    }\n+\n+    pub(crate) fn parse_macro_query(\n+        db: &impl AstDatabase,\n+        macro_file: MacroFile,\n+    ) -> Option<TreeArc<SyntaxNode>> {\n+        let _p = profile(\"parse_macro_query\");\n+        let macro_call_id = macro_file.macro_call_id;\n+        let tt = db\n+            .macro_expand(macro_call_id)\n+            .map_err(|err| {\n+                // Note:\n+                // The final goal we would like to make all parse_macro success,\n+                // such that the following log will not call anyway.\n+                log::warn!(\n+                    \"fail on macro_parse: (reason: {}) {}\",\n+                    err,\n+                    macro_call_id.debug_dump(db)\n+                );\n+            })\n+            .ok()?;\n+        match macro_file.macro_file_kind {\n+            MacroFileKind::Items => Some(mbe::token_tree_to_ast_item_list(&tt).syntax().to_owned()),\n+            MacroFileKind::Expr => {\n+                mbe::token_tree_to_expr(&tt).ok().map(|it| it.syntax().to_owned())\n             }\n         }\n     }\n@@ -100,7 +103,7 @@ enum HirFileIdRepr {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-struct MacroFile {\n+pub struct MacroFile {\n     macro_call_id: MacroCallId,\n     macro_file_kind: MacroFileKind,\n }"}, {"sha": "18dea5f175831a2198bae1c160aabf3c6c488d3e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=8b7f58976b32ccc768e35151b77aa9ea004b7495", "patch": "@@ -60,7 +60,7 @@ pub use self::{\n     path::{Path, PathKind},\n     name::Name,\n     source_id::{AstIdMap, ErasedFileAstId},\n-    ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc},\n+    ids::{HirFileId, MacroDefId, MacroCallId, MacroCallLoc, MacroFile},\n     nameres::{PerNs, Namespace, ImportId},\n     ty::{Ty, ApplicationTy, TypeCtor, TraitRef, Substs, display::HirDisplay, CallableDef},\n     impl_block::{ImplBlock, ImplItem},"}, {"sha": "247dc0feed0354c8680c576ce661f9ed3709dca5", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=8b7f58976b32ccc768e35151b77aa9ea004b7495", "patch": "@@ -226,7 +226,7 @@ impl RootDatabase {\n \n         self.query(ra_db::ParseQuery).sweep(sweep);\n \n-        self.query(hir::db::ParseOrExpandQuery).sweep(sweep);\n+        self.query(hir::db::ParseMacroQuery).sweep(sweep);\n         self.query(hir::db::MacroDefQuery).sweep(sweep);\n         self.query(hir::db::MacroArgQuery).sweep(sweep);\n         self.query(hir::db::MacroExpandQuery).sweep(sweep);"}, {"sha": "0cdeb15eb73e6eff7ec1c21651c1a1ede81a3046", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7f58976b32ccc768e35151b77aa9ea004b7495/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=8b7f58976b32ccc768e35151b77aa9ea004b7495", "patch": "@@ -4,31 +4,36 @@ use std::{\n     sync::Arc,\n };\n \n-use ra_syntax::{TreeArc, SyntaxNode};\n+use ra_syntax::{TreeArc, SyntaxNode, Parse, AstNode};\n use ra_db::{\n     FileTextQuery, SourceRootId,\n     salsa::{Database, debug::{DebugQueryTable, TableEntry}},\n };\n-use hir::HirFileId;\n+use hir::MacroFile;\n \n use crate::{\n     FileId, db::RootDatabase,\n     symbol_index::{SymbolIndex, LibrarySymbolsQuery},\n };\n \n pub(crate) fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n-    db.query(hir::db::ParseOrExpandQuery).entries::<SyntaxTreeStats>()\n+    db.query(ra_db::ParseQuery).entries::<SyntaxTreeStats>()\n+}\n+pub(crate) fn macro_syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n+    db.query(hir::db::ParseMacroQuery).entries::<SyntaxTreeStats>()\n }\n \n pub(crate) fn status(db: &RootDatabase) -> String {\n     let files_stats = db.query(FileTextQuery).entries::<FilesStats>();\n     let syntax_tree_stats = syntax_tree_stats(db);\n+    let macro_syntax_tree_stats = macro_syntax_tree_stats(db);\n     let symbols_stats = db.query(LibrarySymbolsQuery).entries::<LibrarySymbolsStats>();\n     format!(\n-        \"{}\\n{}\\n{}\\n\\n\\nmemory:\\n{}\\ngc {:?} seconds ago\",\n+        \"{}\\n{}\\n{}\\n{} (macros)\\n\\n\\nmemory:\\n{}\\ngc {:?} seconds ago\",\n         files_stats,\n         symbols_stats,\n         syntax_tree_stats,\n+        macro_syntax_tree_stats,\n         MemoryStats::current(),\n         db.last_gc.elapsed().as_secs(),\n     )\n@@ -73,10 +78,27 @@ impl fmt::Display for SyntaxTreeStats {\n     }\n }\n \n-impl FromIterator<TableEntry<HirFileId, Option<TreeArc<SyntaxNode>>>> for SyntaxTreeStats {\n+impl FromIterator<TableEntry<FileId, Parse>> for SyntaxTreeStats {\n+    fn from_iter<T>(iter: T) -> SyntaxTreeStats\n+    where\n+        T: IntoIterator<Item = TableEntry<FileId, Parse>>,\n+    {\n+        let mut res = SyntaxTreeStats::default();\n+        for entry in iter {\n+            res.total += 1;\n+            if let Some(tree) = entry.value.as_ref().map(|it| &it.tree) {\n+                res.retained += 1;\n+                res.retained_size += tree.syntax().memory_size_of_subtree();\n+            }\n+        }\n+        res\n+    }\n+}\n+\n+impl FromIterator<TableEntry<MacroFile, Option<TreeArc<SyntaxNode>>>> for SyntaxTreeStats {\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<HirFileId, Option<TreeArc<SyntaxNode>>>>,\n+        T: IntoIterator<Item = TableEntry<MacroFile, Option<TreeArc<SyntaxNode>>>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {"}]}