{"sha": "752b9a85dc4f347e52faff39fabf6c84e5425ba7", "node_id": "C_kwDOAAsO6NoAKDc1MmI5YTg1ZGM0ZjM0N2U1MmZhZmYzOWZhYmY2Yzg0ZTU0MjViYTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-09T22:00:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-09T22:00:37Z"}, "message": "Rollup merge of #100323 - GuillaumeGomez:impl-blocks-only-private, r=notriddle\n\n[rustdoc] Don't render impl blocks with doc comment if they only contain private items by default\n\nFixes #100001.\n\ncc `@jhpratt`\nr? `@notriddle`", "tree": {"sha": "33d7d5c74e9edab40b7d1b717bad5c2b18d12679", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33d7d5c74e9edab40b7d1b717bad5c2b18d12679"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752b9a85dc4f347e52faff39fabf6c84e5425ba7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi8tkFCRBK7hj4Ov3rIwAAUbsIAExNw7KV/myMAkeh5ClrOrzQ\nqBr8MGf66UUTnJFjMtY2B7DWWzDm44tVeeR1rAfFxVeK7BDY9cg+EQE7G5dd9nCv\n/ncd1IguLzzUtTjvhKjm7lX27GmQ1ry0qLvn5LMs+oFaMTYnk4EVguF59wvGg5Dq\ngv1+en3yIVnolnyPQSnvPte73hfrNC5itYFjDnNGss/FyuOvs0PC+2CiFE0T21cx\np1NUrx9uvAV0FiFgkB8A4kXQJRxPmZ6oBOQFw4P3O2UJINii/ltfqBS/9hf8CW9D\nONdrH6l9Bwl7ZhoFnuMMIXsV5G2Q33kGkseqWgx9TOe4y5Es3K1cq4CaPXuQUXk=\n=d5aE\n-----END PGP SIGNATURE-----\n", "payload": "tree 33d7d5c74e9edab40b7d1b717bad5c2b18d12679\nparent a431ef4949e7c049890f0ad57f0a7883833507a1\nparent c634852cfb986c8530c6ad7133da51d70cd63f9d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1660082437 +0200\ncommitter GitHub <noreply@github.com> 1660082437 +0200\n\nRollup merge of #100323 - GuillaumeGomez:impl-blocks-only-private, r=notriddle\n\n[rustdoc] Don't render impl blocks with doc comment if they only contain private items by default\n\nFixes #100001.\n\ncc `@jhpratt`\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752b9a85dc4f347e52faff39fabf6c84e5425ba7", "html_url": "https://github.com/rust-lang/rust/commit/752b9a85dc4f347e52faff39fabf6c84e5425ba7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752b9a85dc4f347e52faff39fabf6c84e5425ba7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a431ef4949e7c049890f0ad57f0a7883833507a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a431ef4949e7c049890f0ad57f0a7883833507a1", "html_url": "https://github.com/rust-lang/rust/commit/a431ef4949e7c049890f0ad57f0a7883833507a1"}, {"sha": "c634852cfb986c8530c6ad7133da51d70cd63f9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c634852cfb986c8530c6ad7133da51d70cd63f9d", "html_url": "https://github.com/rust-lang/rust/commit/c634852cfb986c8530c6ad7133da51d70cd63f9d"}], "stats": {"total": 155, "additions": 138, "deletions": 17}, "files": [{"sha": "9914edf3036e431ba5bedd089b32b3b4cfb6b4e8", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=752b9a85dc4f347e52faff39fabf6c84e5425ba7", "patch": "@@ -17,6 +17,7 @@ pub(crate) const STRIP_HIDDEN: Pass = Pass {\n /// Strip items marked `#[doc(hidden)]`\n pub(crate) fn strip_hidden(krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n     let mut retained = ItemIdSet::default();\n+    let is_json_output = cx.output_format.is_json() && !cx.show_coverage;\n \n     // strip all #[doc(hidden)] items\n     let krate = {\n@@ -25,7 +26,12 @@ pub(crate) fn strip_hidden(krate: clean::Crate, cx: &mut DocContext<'_>) -> clea\n     };\n \n     // strip all impls referencing stripped items\n-    let mut stripper = ImplStripper { retained: &retained, cache: &cx.cache };\n+    let mut stripper = ImplStripper {\n+        retained: &retained,\n+        cache: &cx.cache,\n+        is_json_output,\n+        document_private: cx.render_options.document_private,\n+    };\n     stripper.fold_crate(krate)\n }\n "}, {"sha": "f3aa3c7ce2459d4ac5b4fbc676d65d80e51a213c", "filename": "src/librustdoc/passes/strip_private.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_private.rs?ref=752b9a85dc4f347e52faff39fabf6c84e5425ba7", "patch": "@@ -17,19 +17,25 @@ pub(crate) const STRIP_PRIVATE: Pass = Pass {\n pub(crate) fn strip_private(mut krate: clean::Crate, cx: &mut DocContext<'_>) -> clean::Crate {\n     // This stripper collects all *retained* nodes.\n     let mut retained = ItemIdSet::default();\n+    let is_json_output = cx.output_format.is_json() && !cx.show_coverage;\n \n     // strip all private items\n     {\n         let mut stripper = Stripper {\n             retained: &mut retained,\n             access_levels: &cx.cache.access_levels,\n             update_retained: true,\n-            is_json_output: cx.output_format.is_json() && !cx.show_coverage,\n+            is_json_output,\n         };\n         krate = ImportStripper.fold_crate(stripper.fold_crate(krate));\n     }\n \n     // strip all impls referencing private items\n-    let mut stripper = ImplStripper { retained: &retained, cache: &cx.cache };\n+    let mut stripper = ImplStripper {\n+        retained: &retained,\n+        cache: &cx.cache,\n+        is_json_output,\n+        document_private: cx.render_options.document_private,\n+    };\n     stripper.fold_crate(krate)\n }"}, {"sha": "3f069e8393f7e9667bfea7a05834ea86f21e0ee8", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=752b9a85dc4f347e52faff39fabf6c84e5425ba7", "patch": "@@ -14,17 +14,19 @@ pub(crate) struct Stripper<'a> {\n     pub(crate) is_json_output: bool,\n }\n \n-impl<'a> Stripper<'a> {\n-    // We need to handle this differently for the JSON output because some non exported items could\n-    // be used in public API. And so, we need these items as well. `is_exported` only checks if they\n-    // are in the public API, which is not enough.\n-    #[inline]\n-    fn is_item_reachable(&self, item_id: ItemId) -> bool {\n-        if self.is_json_output {\n-            self.access_levels.is_reachable(item_id.expect_def_id())\n-        } else {\n-            self.access_levels.is_exported(item_id.expect_def_id())\n-        }\n+// We need to handle this differently for the JSON output because some non exported items could\n+// be used in public API. And so, we need these items as well. `is_exported` only checks if they\n+// are in the public API, which is not enough.\n+#[inline]\n+fn is_item_reachable(\n+    is_json_output: bool,\n+    access_levels: &AccessLevels<DefId>,\n+    item_id: ItemId,\n+) -> bool {\n+    if is_json_output {\n+        access_levels.is_reachable(item_id.expect_def_id())\n+    } else {\n+        access_levels.is_exported(item_id.expect_def_id())\n     }\n }\n \n@@ -61,7 +63,9 @@ impl<'a> DocFolder for Stripper<'a> {\n             | clean::MacroItem(..)\n             | clean::ForeignTypeItem => {\n                 let item_id = i.item_id;\n-                if item_id.is_local() && !self.is_item_reachable(item_id) {\n+                if item_id.is_local()\n+                    && !is_item_reachable(self.is_json_output, self.access_levels, item_id)\n+                {\n                     debug!(\"Stripper: stripping {:?} {:?}\", i.type_(), i.name);\n                     return None;\n                 }\n@@ -133,15 +137,36 @@ impl<'a> DocFolder for Stripper<'a> {\n pub(crate) struct ImplStripper<'a> {\n     pub(crate) retained: &'a ItemIdSet,\n     pub(crate) cache: &'a Cache,\n+    pub(crate) is_json_output: bool,\n+    pub(crate) document_private: bool,\n }\n \n impl<'a> DocFolder for ImplStripper<'a> {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         if let clean::ImplItem(ref imp) = *i.kind {\n             // Impl blocks can be skipped if they are: empty; not a trait impl; and have no\n             // documentation.\n-            if imp.trait_.is_none() && imp.items.is_empty() && i.doc_value().is_none() {\n-                return None;\n+            //\n+            // There is one special case: if the impl block contains only private items.\n+            if imp.trait_.is_none() {\n+                // If the only items present are private ones and we're not rendering private items,\n+                // we don't document it.\n+                if !imp.items.is_empty()\n+                    && !self.document_private\n+                    && imp.items.iter().all(|i| {\n+                        let item_id = i.item_id;\n+                        item_id.is_local()\n+                            && !is_item_reachable(\n+                                self.is_json_output,\n+                                &self.cache.access_levels,\n+                                item_id,\n+                            )\n+                    })\n+                {\n+                    return None;\n+                } else if imp.items.is_empty() && i.doc_value().is_none() {\n+                    return None;\n+                }\n             }\n             if let Some(did) = imp.for_.def_id(self.cache) {\n                 if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())"}, {"sha": "43971996163022cde80231616b6a78798de5ddb1", "filename": "src/test/rustdoc/empty-impl-block-private-with-doc.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Ftest%2Frustdoc%2Fempty-impl-block-private-with-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Ftest%2Frustdoc%2Fempty-impl-block-private-with-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impl-block-private-with-doc.rs?ref=752b9a85dc4f347e52faff39fabf6c84e5425ba7", "patch": "@@ -0,0 +1,44 @@\n+// compile-flags: --document-private-items\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.Foo.html'\n+pub struct Foo;\n+\n+// There are 3 impl blocks with public item and one that should not be displayed\n+// by default because it only contains private items (but not in this case because\n+// we used `--document-private-items`).\n+// @count - '//*[@class=\"impl has-srclink\"]' 'impl Foo' 4\n+\n+// Impl block only containing private items should not be displayed unless the\n+// `--document-private-items` flag is used.\n+/// Private\n+impl Foo {\n+    const BAR: u32 = 0;\n+    type FOO = i32;\n+    fn hello() {}\n+}\n+\n+// But if any element of the impl block is public, it should be displayed.\n+/// Not private\n+impl Foo {\n+    pub const BAR: u32 = 0;\n+    type FOO = i32;\n+    fn hello() {}\n+}\n+\n+/// Not private\n+impl Foo {\n+    const BAR: u32 = 0;\n+    pub type FOO = i32;\n+    fn hello() {}\n+}\n+\n+/// Not private\n+impl Foo {\n+    const BAR: u32 = 0;\n+    type FOO = i32;\n+    pub fn hello() {}\n+}"}, {"sha": "5caf020658c5f5afaf75ea63535c4aeee62462fa", "filename": "src/test/rustdoc/empty-impl-block-private.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Ftest%2Frustdoc%2Fempty-impl-block-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752b9a85dc4f347e52faff39fabf6c84e5425ba7/src%2Ftest%2Frustdoc%2Fempty-impl-block-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fempty-impl-block-private.rs?ref=752b9a85dc4f347e52faff39fabf6c84e5425ba7", "patch": "@@ -0,0 +1,40 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.Foo.html'\n+pub struct Foo;\n+\n+// There are 3 impl blocks with public item and one that should not be displayed\n+// because it only contains private items.\n+// @count - '//*[@class=\"impl has-srclink\"]' 'impl Foo' 3\n+\n+// Impl block only containing private items should not be displayed.\n+/// Private\n+impl Foo {\n+    const BAR: u32 = 0;\n+    type FOO = i32;\n+    fn hello() {}\n+}\n+\n+// But if any element of the impl block is public, it should be displayed.\n+/// Not private\n+impl Foo {\n+    pub const BAR: u32 = 0;\n+    type FOO = i32;\n+    fn hello() {}\n+}\n+\n+/// Not private\n+impl Foo {\n+    const BAR: u32 = 0;\n+    pub type FOO = i32;\n+    fn hello() {}\n+}\n+\n+/// Not private\n+impl Foo {\n+    const BAR: u32 = 0;\n+    type FOO = i32;\n+    pub fn hello() {}\n+}"}]}