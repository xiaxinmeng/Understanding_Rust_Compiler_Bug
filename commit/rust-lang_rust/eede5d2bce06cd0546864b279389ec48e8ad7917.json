{"sha": "eede5d2bce06cd0546864b279389ec48e8ad7917", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZGU1ZDJiY2UwNmNkMDU0Njg2NGIyNzkzODllYzQ4ZThhZDc5MTc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-03T02:00:07Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "libcore: use unboxed closures in the fields of `FilterMap`", "tree": {"sha": "26e68e0b3f268cb91b2c51b98c3180fd563b74d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e68e0b3f268cb91b2c51b98c3180fd563b74d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eede5d2bce06cd0546864b279389ec48e8ad7917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eede5d2bce06cd0546864b279389ec48e8ad7917", "html_url": "https://github.com/rust-lang/rust/commit/eede5d2bce06cd0546864b279389ec48e8ad7917", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eede5d2bce06cd0546864b279389ec48e8ad7917/comments", "author": null, "committer": null, "parents": [{"sha": "80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6", "html_url": "https://github.com/rust-lang/rust/commit/80a04b1aed74a6f6dc23c3bca6b869b28825f3c6"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "b356e42907bcbabb6dd19c4b7b7c143630a39fcb", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eede5d2bce06cd0546864b279389ec48e8ad7917/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eede5d2bce06cd0546864b279389ec48e8ad7917/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=eede5d2bce06cd0546864b279389ec48e8ad7917", "patch": "@@ -201,7 +201,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn filter_map<'r, B>(self, f: |A|: 'r -> Option<B>) -> FilterMap<'r, A, B, Self> {\n+    fn filter_map<B, F>(self, f: F) -> FilterMap<A, B, Self, F> where F: FnMut(A) -> Option<B> {\n         FilterMap { iter: self, f: f }\n     }\n \n@@ -1483,13 +1483,16 @@ impl<A, I, P> DoubleEndedIterator<A> for Filter<A, I, P> where\n /// An iterator which uses `f` to both filter and map elements from `iter`\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n #[stable]\n-pub struct FilterMap<'a, A, B, T> {\n-    iter: T,\n-    f: |A|: 'a -> Option<B>\n+pub struct FilterMap<A, B, I, F> where I: Iterator<A>, F: FnMut(A) -> Option<B> {\n+    iter: I,\n+    f: F,\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'a, A, B, T> {\n+impl<A, B, I, F> Iterator<B> for FilterMap<A, B, I, F> where\n+    I: Iterator<A>,\n+    F: FnMut(A) -> Option<B>,\n+{\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n         for x in self.iter {\n@@ -1509,8 +1512,10 @@ impl<'a, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'a, A, B, T> {\n }\n \n #[unstable = \"trait is unstable\"]\n-impl<'a, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B>\n-for FilterMap<'a, A, B, T> {\n+impl<A, B, I, F> DoubleEndedIterator<B> for FilterMap<A, B, I, F> where\n+    I: DoubleEndedIterator<A>,\n+    F: FnMut(A) -> Option<B>,\n+{\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n         for x in self.iter.by_ref().rev() {"}]}