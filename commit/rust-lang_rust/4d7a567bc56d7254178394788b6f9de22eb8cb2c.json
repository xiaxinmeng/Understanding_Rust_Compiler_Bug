{"sha": "4d7a567bc56d7254178394788b6f9de22eb8cb2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkN2E1NjdiYzU2ZDcyNTQxNzgzOTQ3ODhiNmY5ZGUyMmViOGNiMmM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-22T04:30:36Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-22T18:09:26Z"}, "message": "Introduce TokenBuffer", "tree": {"sha": "f7d03f1a89aeea4dc2312eefc6e5261d0ac15df8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7d03f1a89aeea4dc2312eefc6e5261d0ac15df8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7a567bc56d7254178394788b6f9de22eb8cb2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7a567bc56d7254178394788b6f9de22eb8cb2c", "html_url": "https://github.com/rust-lang/rust/commit/4d7a567bc56d7254178394788b6f9de22eb8cb2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7a567bc56d7254178394788b6f9de22eb8cb2c/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "html_url": "https://github.com/rust-lang/rust/commit/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "a149205fbddcc2d16d5282a53a85f473c29f8034", "filename": "crates/ra_tt/src/buffer.rs", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/4d7a567bc56d7254178394788b6f9de22eb8cb2c/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7a567bc56d7254178394788b6f9de22eb8cb2c/crates%2Fra_tt%2Fsrc%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Fbuffer.rs?ref=4d7a567bc56d7254178394788b6f9de22eb8cb2c", "patch": "@@ -0,0 +1,169 @@\n+use crate::{TokenTree, Subtree, Leaf};\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+struct EntryId(usize);\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq)]\n+struct EntryPtr(EntryId, usize);\n+\n+/// Internal type which is used instead of `TokenTree` to represent a token tree\n+/// within a `TokenBuffer`.\n+#[derive(Debug)]\n+enum Entry {\n+    // Mimicking types from proc-macro.\n+    Subtree(Subtree, EntryId),\n+    Leaf(Leaf),\n+    // End entries contain a pointer to the entry from the containing\n+    // token tree, or None if this is the outermost level.\n+    End(Option<EntryPtr>),\n+}\n+\n+/// A token tree buffer\n+/// The safe version of `syn` [`TokenBuffer`](https://github.com/dtolnay/syn/blob/6533607f91686545cb034d2838beea338d9d0742/src/buffer.rs#L41)\n+#[derive(Debug)]\n+pub struct TokenBuffer {\n+    buffers: Vec<Box<[Entry]>>,\n+}\n+\n+impl TokenBuffer {\n+    pub fn new(tokens: &[TokenTree]) -> TokenBuffer {\n+        let mut buffers = vec![];\n+\n+        let idx = TokenBuffer::new_inner(tokens.to_vec(), &mut buffers, None);\n+        assert_eq!(idx, 0);\n+\n+        TokenBuffer { buffers }\n+    }\n+\n+    fn new_inner(\n+        tokens: Vec<TokenTree>,\n+        buffers: &mut Vec<Box<[Entry]>>,\n+        next: Option<EntryPtr>,\n+    ) -> usize {\n+        let mut entries = vec![];\n+        let mut children = vec![];\n+\n+        for (idx, tt) in tokens.into_iter().enumerate() {\n+            match tt {\n+                TokenTree::Leaf(leaf) => {\n+                    entries.push(Entry::Leaf(leaf));\n+                }\n+                TokenTree::Subtree(subtree) => {\n+                    entries.push(Entry::End(None));\n+                    children.push((idx, subtree));\n+                }\n+            }\n+        }\n+\n+        entries.push(Entry::End(next));\n+        let res = buffers.len();\n+        buffers.push(entries.into_boxed_slice());\n+\n+        for (child_idx, subtree) in children {\n+            let idx = TokenBuffer::new_inner(\n+                subtree.token_trees.clone(),\n+                buffers,\n+                Some(EntryPtr(EntryId(res), child_idx + 1)),\n+            );\n+            buffers[res].as_mut()[child_idx] = Entry::Subtree(subtree, EntryId(idx));\n+        }\n+\n+        res\n+    }\n+\n+    /// Creates a cursor referencing the first token in the buffer and able to\n+    /// traverse until the end of the buffer.\n+    pub fn begin(&self) -> Cursor {\n+        Cursor::create(self, EntryPtr(EntryId(0), 0))\n+    }\n+\n+    fn entry(&self, ptr: &EntryPtr) -> Option<&Entry> {\n+        let id = ptr.0;\n+        self.buffers[id.0].get(ptr.1)\n+    }\n+}\n+\n+/// A safe version of `Cursor` from `syn` crate https://github.com/dtolnay/syn/blob/6533607f91686545cb034d2838beea338d9d0742/src/buffer.rs#L125\n+#[derive(Copy, Clone, Debug)]\n+pub struct Cursor<'a> {\n+    buffer: &'a TokenBuffer,\n+    ptr: EntryPtr,\n+}\n+\n+impl<'a> PartialEq for Cursor<'a> {\n+    fn eq(&self, other: &Cursor) -> bool {\n+        self.ptr == other.ptr && std::ptr::eq(self.buffer, other.buffer)\n+    }\n+}\n+\n+impl<'a> Eq for Cursor<'a> {}\n+\n+impl<'a> Cursor<'a> {\n+    /// Check whether it is eof\n+    pub fn eof(self) -> bool {\n+        match self.buffer.entry(&self.ptr) {\n+            None | Some(Entry::End(None)) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    /// If the cursor is pointing at the end of a subtree, returns\n+    /// the parent subtree\n+    pub fn end(self) -> Option<(&'a Subtree)> {\n+        match self.entry() {\n+            Some(Entry::End(Some(ptr))) => {\n+                let idx = ptr.1;\n+                if let Some(Entry::Subtree(subtree, _)) =\n+                    self.buffer.entry(&EntryPtr(ptr.0, idx - 1))\n+                {\n+                    return Some(subtree);\n+                }\n+\n+                None\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    fn entry(self) -> Option<(&'a Entry)> {\n+        self.buffer.entry(&self.ptr)\n+    }\n+\n+    /// If the cursor is pointing at a `Subtree`, returns\n+    /// a cursor into that subtree\n+    pub fn subtree(self) -> Option<Cursor<'a>> {\n+        match self.entry() {\n+            Some(Entry::Subtree(_, entry_id)) => {\n+                Some(Cursor::create(self.buffer, EntryPtr(*entry_id, 0)))\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    /// If the cursor is pointing at a `TokenTree`, returns it\n+    pub fn token_tree(self) -> Option<(TokenTree)> {\n+        match self.entry() {\n+            Some(Entry::Leaf(leaf)) => Some(leaf.clone().into()),\n+            Some(Entry::Subtree(subtree, _)) => Some(subtree.clone().into()),\n+            Some(Entry::End(_)) => None,\n+            None => None,\n+        }\n+    }\n+\n+    fn create(buffer: &'a TokenBuffer, ptr: EntryPtr) -> Cursor<'a> {\n+        Cursor { buffer, ptr }\n+    }\n+\n+    /// Bump the cursor\n+    pub fn bump(self) -> Cursor<'a> {\n+        if let Some(Entry::End(exit)) = self.buffer.entry(&self.ptr) {\n+            if let Some(exit) = exit {\n+                Cursor::create(self.buffer, *exit)\n+            } else {\n+                self\n+            }\n+        } else {\n+            Cursor::create(self.buffer, EntryPtr(self.ptr.0, self.ptr.1 + 1))\n+        }\n+    }\n+}"}, {"sha": "2a48c66c48ef448a248343e4bc88a73a33d9b3fc", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7a567bc56d7254178394788b6f9de22eb8cb2c/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7a567bc56d7254178394788b6f9de22eb8cb2c/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=4d7a567bc56d7254178394788b6f9de22eb8cb2c", "patch": "@@ -165,3 +165,5 @@ impl Subtree {\n         self.token_trees.len() + children_count\n     }\n }\n+\n+pub mod buffer;"}]}