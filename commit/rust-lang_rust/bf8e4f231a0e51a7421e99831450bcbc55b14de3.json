{"sha": "bf8e4f231a0e51a7421e99831450bcbc55b14de3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOGU0ZjIzMWEwZTUxYTc0MjFlOTk4MzE0NTBiY2JjNTViMTRkZTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-23T07:31:13Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-23T07:31:13Z"}, "message": "Vec<_> -> IndexVec<Local, _>", "tree": {"sha": "d29c9f4210046c0fdfe7942a86f8abc21775b7ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d29c9f4210046c0fdfe7942a86f8abc21775b7ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf8e4f231a0e51a7421e99831450bcbc55b14de3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlq0rUEACgkQpp+NIls6\n19kKihAAkRMwcZScJwZx9X88GovBtsDHNH1Dh8a7yzx/m0twsLCFguF0WpNJFhCI\n4eu0VoWwRaJ4G896fIMpo8qcXxB86J9kvp0kyjX05O/4gmIt2CIpn0VNBfogW2CV\nqt0JKMJ257D6sMLpyQfaxnbF41Xy+tXqX0Sl5PogE4kGjyB/XdGX5/4vR+szP/J7\nces+6iDekIL2uz9bVH8id/dXEHylgIWFYKn3U7Ptll1PB+4Ydh2EiForH3IoER8V\nxXZiKpfpftqGcuUg5wdVhDDWheeOkq0WPUWGN8l3vkDsh8xUrM0s0jntGOM2gOlR\ne6cO/RyEKsaD3Kaf0HCeJXbaBDxl+VOLnEPO9Hld2tObzVYfFmVPP2HqB1Hdr6Hc\n139IYQ6tS5bbNwfzJD7eWxPrep5vwKsQneW6XUPnzRmtWKUWUkfc2sfZeaIhOqXv\nCwJscu7SeAP3l6kUJSbJ2Jk77jRcGI1TXv886yuqskz8KeVnqd+lYZJWJMwPjGip\nt7NeZBDCIBf5U6PQJEnqds1Ysf5SCGjkwtsTD7XyxWtA0YGm3/ciS7cVLFdF1lXp\n5zk3foTHJl0bupx2H5Cjhyi8FG2gAcM4Q8gyG5vHOxAT/m6pNsSwvrkTMbPCXbjm\nzbaj6diFM3QnqSEV1diq6g+b4BqgDhmuaRbEFi3YJdAMM9hSqYo=\n=xPR0\n-----END PGP SIGNATURE-----", "payload": "tree d29c9f4210046c0fdfe7942a86f8abc21775b7ac\nparent 9fa14e47d4a14fcda4adff658ccfdda3c8b9005f\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521790273 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521790273 +0100\n\nVec<_> -> IndexVec<Local, _>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf8e4f231a0e51a7421e99831450bcbc55b14de3", "html_url": "https://github.com/rust-lang/rust/commit/bf8e4f231a0e51a7421e99831450bcbc55b14de3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf8e4f231a0e51a7421e99831450bcbc55b14de3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fa14e47d4a14fcda4adff658ccfdda3c8b9005f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fa14e47d4a14fcda4adff658ccfdda3c8b9005f", "html_url": "https://github.com/rust-lang/rust/commit/9fa14e47d4a14fcda4adff658ccfdda3c8b9005f"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "10d509548d9a57c7ba402d04f1ca3f7ecbf52b53", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bf8e4f231a0e51a7421e99831450bcbc55b14de3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf8e4f231a0e51a7421e99831450bcbc55b14de3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=bf8e4f231a0e51a7421e99831450bcbc55b14de3", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::layout::{self, Size, Align, HasDataLayout, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::maps::TyCtxtAt;\n-use rustc_data_structures::indexed_vec::Idx;\n+use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc::middle::const_val::FrameInfo;\n use syntax::codemap::{self, Span};\n use syntax::ast::Mutability;\n@@ -71,12 +71,12 @@ pub struct Frame<'mir, 'tcx: 'mir> {\n     pub return_place: Place,\n \n     /// The list of locals for this stack frame, stored in order as\n-    /// `[arguments..., variables..., temporaries...]`. The locals are stored as `Option<Value>`s.\n+    /// `[return_ptr, arguments..., variables..., temporaries...]`. The locals are stored as `Option<Value>`s.\n     /// `None` represents a local that is currently dead, while a live local\n     /// can either directly contain `PrimVal` or refer to some part of an `Allocation`.\n     ///\n     /// Before being initialized, arguments are `Value::ByVal(PrimVal::Undef)` and other locals are `None`.\n-    pub locals: Vec<Option<Value>>,\n+    pub locals: IndexVec<mir::Local, Option<Value>>,\n \n     ////////////////////////////////////////////////////////////////////////////////\n     // Current position within the function\n@@ -383,11 +383,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     ) -> EvalResult<'tcx> {\n         ::log_settings::settings().indentation += 1;\n \n-        // Subtract 1 because `local_decls` includes the ReturnMemoryPointer, but we don't store a local\n-        // `Value` for that.\n-        let num_locals = mir.local_decls.len() - 1;\n-\n-        let mut locals = vec![Some(Value::ByVal(PrimVal::Undef)); num_locals];\n+        let mut locals = IndexVec::from_elem(Some(Value::ByVal(PrimVal::Undef)), &mir.local_decls);\n         match self.tcx.describe_def(instance.def_id()) {\n             // statics and constants don't have `Storage*` statements, no need to look for them\n             Some(Def::Static(..)) | Some(Def::Const(..)) | Some(Def::AssociatedConst(..)) => {},\n@@ -397,9 +393,8 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                     for stmt in block.statements.iter() {\n                         use rustc::mir::StatementKind::{StorageDead, StorageLive};\n                         match stmt.kind {\n-                            StorageLive(local) | StorageDead(local) => if local.index() > 0 {\n-                                locals[local.index() - 1] = None;\n-                            },\n+                            StorageLive(local) |\n+                            StorageDead(local) => locals[local] = None,\n                             _ => {}\n                         }\n                     }\n@@ -962,8 +957,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     pub fn force_allocation(&mut self, place: Place) -> EvalResult<'tcx, Place> {\n         let new_place = match place {\n             Place::Local { frame, local } => {\n-                // -1 since we don't store the return value\n-                match self.stack[frame].locals[local.index() - 1] {\n+                match self.stack[frame].locals[local] {\n                     None => return err!(DeadLocal),\n                     Some(Value::ByRef(ptr, align)) => {\n                         Place::Ptr {\n@@ -977,7 +971,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                         let ty = self.monomorphize(ty, self.stack[frame].instance.substs);\n                         let layout = self.layout_of(ty)?;\n                         let ptr = self.alloc_ptr(ty)?;\n-                        self.stack[frame].locals[local.index() - 1] =\n+                        self.stack[frame].locals[local] =\n                             Some(Value::ByRef(ptr.into(), layout.align)); // it stays live\n                         let place = Place::from_ptr(ptr, layout.align);\n                         self.write_value(ValTy { value: val, ty }, place)?;\n@@ -1691,13 +1685,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n impl<'mir, 'tcx> Frame<'mir, 'tcx> {\n     pub fn get_local(&self, local: mir::Local) -> EvalResult<'tcx, Value> {\n-        // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n-        self.locals[local.index() - 1].ok_or(EvalErrorKind::DeadLocal.into())\n+        self.locals[local].ok_or(EvalErrorKind::DeadLocal.into())\n     }\n \n     fn set_local(&mut self, local: mir::Local, value: Value) -> EvalResult<'tcx> {\n-        // Subtract 1 because we don't store a value for the ReturnPointer, the local with index 0.\n-        match self.locals[local.index() - 1] {\n+        match self.locals[local] {\n             None => err!(DeadLocal),\n             Some(ref mut local) => {\n                 *local = value;\n@@ -1709,17 +1701,17 @@ impl<'mir, 'tcx> Frame<'mir, 'tcx> {\n     pub fn storage_live(&mut self, local: mir::Local) -> EvalResult<'tcx, Option<Value>> {\n         trace!(\"{:?} is now live\", local);\n \n-        let old = self.locals[local.index() - 1];\n-        self.locals[local.index() - 1] = Some(Value::ByVal(PrimVal::Undef)); // StorageLive *always* kills the value that's currently stored\n+        let old = self.locals[local];\n+        self.locals[local] = Some(Value::ByVal(PrimVal::Undef)); // StorageLive *always* kills the value that's currently stored\n         return Ok(old);\n     }\n \n     /// Returns the old value of the local\n     pub fn storage_dead(&mut self, local: mir::Local) -> EvalResult<'tcx, Option<Value>> {\n         trace!(\"{:?} is now dead\", local);\n \n-        let old = self.locals[local.index() - 1];\n-        self.locals[local.index() - 1] = None;\n+        let old = self.locals[local];\n+        self.locals[local] = None;\n         return Ok(old);\n     }\n }"}]}