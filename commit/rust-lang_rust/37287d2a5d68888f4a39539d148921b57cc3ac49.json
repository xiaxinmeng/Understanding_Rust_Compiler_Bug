{"sha": "37287d2a5d68888f4a39539d148921b57cc3ac49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3Mjg3ZDJhNWQ2ODg4OGY0YTM5NTM5ZDE0ODkyMWI1N2NjM2FjNDk=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-25T14:50:33Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-25T14:50:33Z"}, "message": "use free methods instead of traits", "tree": {"sha": "da8899546e45aa5f31f53c9549119cf59bf1005a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8899546e45aa5f31f53c9549119cf59bf1005a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37287d2a5d68888f4a39539d148921b57cc3ac49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37287d2a5d68888f4a39539d148921b57cc3ac49", "html_url": "https://github.com/rust-lang/rust/commit/37287d2a5d68888f4a39539d148921b57cc3ac49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37287d2a5d68888f4a39539d148921b57cc3ac49/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e23fdd1f4951165be7e3b604be6ba742027b0b94", "url": "https://api.github.com/repos/rust-lang/rust/commits/e23fdd1f4951165be7e3b604be6ba742027b0b94", "html_url": "https://github.com/rust-lang/rust/commit/e23fdd1f4951165be7e3b604be6ba742027b0b94"}], "stats": {"total": 89, "additions": 43, "deletions": 46}, "files": [{"sha": "dd3c491e6b2b9787d19f8d08f9cb52935e888cdb", "filename": "src/memory.rs", "status": "modified", "additions": 43, "deletions": 46, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/37287d2a5d68888f4a39539d148921b57cc3ac49/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37287d2a5d68888f4a39539d148921b57cc3ac49/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=37287d2a5d68888f4a39539d148921b57cc3ac49", "patch": "@@ -343,8 +343,9 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     pub fn read_ptr(&self, ptr: Pointer) -> EvalResult<'tcx, Pointer> {\n         let size = self.pointer_size();\n         self.check_defined(ptr, size)?;\n-        let offset = self.get_bytes_unchecked(ptr, size)?\n-            .read_target_uint(size, self.endianess()).unwrap() as usize;\n+        let endianess = self.endianess();\n+        let bytes = self.get_bytes_unchecked(ptr, size)?;\n+        let offset = read_target_uint(endianess, bytes).unwrap() as usize;\n         let alloc = self.get(ptr.alloc_id)?;\n         match alloc.relocations.get(&ptr.offset) {\n             Some(&alloc_id) => Ok(Pointer { alloc_id: alloc_id, offset: offset }),\n@@ -391,21 +392,25 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn read_int(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, i64> {\n-        self.get_bytes(ptr, size).map(|mut b| b.read_target_int(size, self.endianess()).unwrap())\n+        self.get_bytes(ptr, size).map(|b| read_target_int(self.endianess(), b).unwrap())\n     }\n \n     pub fn write_int(&mut self, ptr: Pointer, n: i64, size: usize) -> EvalResult<'tcx, ()> {\n         let endianess = self.endianess();\n-        self.get_bytes_mut(ptr, size).map(|mut b| b.write_target_int(n, size, endianess).unwrap())\n+        let b = self.get_bytes_mut(ptr, size)?;\n+        write_target_int(endianess, b, n).unwrap();\n+        Ok(())\n     }\n \n     pub fn read_uint(&self, ptr: Pointer, size: usize) -> EvalResult<'tcx, u64> {\n-        self.get_bytes(ptr, size).map(|mut b| b.read_target_uint(size, self.endianess()).unwrap())\n+        self.get_bytes(ptr, size).map(|b| read_target_uint(self.endianess(), b).unwrap())\n     }\n \n     pub fn write_uint(&mut self, ptr: Pointer, n: u64, size: usize) -> EvalResult<'tcx, ()> {\n         let endianess = self.endianess();\n-        self.get_bytes_mut(ptr, size).map(|mut b| b.write_target_uint(n, size, endianess).unwrap())\n+        let b = self.get_bytes_mut(ptr, size)?;\n+        write_target_uint(endianess, b, n).unwrap();\n+        Ok(())\n     }\n \n     pub fn read_isize(&self, ptr: Pointer) -> EvalResult<'tcx, i64> {\n@@ -515,6 +520,38 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n }\n \n+////////////////////////////////////////////////////////////////////////////////\n+// Methods to access integers in the target endianess\n+////////////////////////////////////////////////////////////////////////////////\n+\n+fn write_target_uint(endianess: layout::Endian, mut target: &mut [u8], data: u64) -> Result<(), byteorder::Error> {\n+    let len = target.len();\n+    match endianess {\n+        layout::Endian::Little => target.write_uint::<LittleEndian>(data, len),\n+        layout::Endian::Big => target.write_uint::<BigEndian>(data, len),\n+    }\n+}\n+fn write_target_int(endianess: layout::Endian, mut target: &mut [u8], data: i64) -> Result<(), byteorder::Error> {\n+    let len = target.len();\n+    match endianess {\n+        layout::Endian::Little => target.write_int::<LittleEndian>(data, len),\n+        layout::Endian::Big => target.write_int::<BigEndian>(data, len),\n+    }\n+}\n+\n+fn read_target_uint(endianess: layout::Endian, mut source: &[u8]) -> Result<u64, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_uint::<LittleEndian>(source.len()),\n+        layout::Endian::Big => source.read_uint::<BigEndian>(source.len()),\n+    }\n+}\n+fn read_target_int(endianess: layout::Endian, mut source: &[u8]) -> Result<i64, byteorder::Error> {\n+    match endianess {\n+        layout::Endian::Little => source.read_int::<LittleEndian>(source.len()),\n+        layout::Endian::Big => source.read_int::<BigEndian>(source.len()),\n+    }\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Undefined byte tracking\n ////////////////////////////////////////////////////////////////////////////////\n@@ -591,43 +628,3 @@ impl UndefMask {\n fn bit_index(bits: usize) -> (usize, usize) {\n     (bits / BLOCK_SIZE, bits % BLOCK_SIZE)\n }\n-\n-trait ReadBytesExt2 {\n-    fn read_target_uint(&mut self, nbytes: usize, endian: layout::Endian) -> Result<u64, byteorder::Error>;\n-    fn read_target_int(&mut self, nbytes: usize, endian: layout::Endian) -> Result<i64, byteorder::Error>;\n-}\n-\n-impl<T: ReadBytesExt> ReadBytesExt2 for T {\n-    fn read_target_uint(&mut self, nbytes: usize, endian: layout::Endian) -> Result<u64, byteorder::Error> {\n-        match endian {\n-            layout::Endian::Little => ReadBytesExt::read_uint::<LittleEndian>(self, nbytes),\n-            layout::Endian::Big => ReadBytesExt::read_uint::<BigEndian>(self, nbytes),\n-        }\n-    }\n-    fn read_target_int(&mut self, nbytes: usize, endian: layout::Endian) -> Result<i64, byteorder::Error> {\n-        match endian {\n-            layout::Endian::Little => ReadBytesExt::read_int::<LittleEndian>(self, nbytes),\n-            layout::Endian::Big => ReadBytesExt::read_int::<BigEndian>(self, nbytes),\n-        }\n-    }\n-}\n-\n-trait WriteBytesExt2 {\n-    fn write_target_uint(&mut self, data: u64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error>;\n-    fn write_target_int(&mut self, data: i64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error>;\n-}\n-\n-impl<T: WriteBytesExt> WriteBytesExt2 for T {\n-    fn write_target_uint(&mut self, data: u64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error> {\n-        match endian {\n-            layout::Endian::Little => WriteBytesExt::write_uint::<LittleEndian>(self, data, nbytes),\n-            layout::Endian::Big => WriteBytesExt::write_uint::<BigEndian>(self, data, nbytes),\n-        }\n-    }\n-    fn write_target_int(&mut self, data: i64, nbytes: usize, endian: layout::Endian) -> Result<(), byteorder::Error> {\n-        match endian {\n-            layout::Endian::Little => WriteBytesExt::write_int::<LittleEndian>(self, data, nbytes),\n-            layout::Endian::Big => WriteBytesExt::write_int::<BigEndian>(self, data, nbytes),\n-        }\n-    }\n-}"}]}