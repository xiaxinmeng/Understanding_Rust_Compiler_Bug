{"sha": "cffdb66aa42b6c5a1d30a1b4364d65f409976202", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmZmRiNjZhYTQyYjZjNWExZDMwYTFiNDM2NGQ2NWY0MDk5NzYyMDI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-25T02:10:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-11-25T02:11:11Z"}, "message": "Translate tuple-expressions.", "tree": {"sha": "3b0607d59804e0806b8faf7cfdbcfc3a58b6c7ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b0607d59804e0806b8faf7cfdbcfc3a58b6c7ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cffdb66aa42b6c5a1d30a1b4364d65f409976202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cffdb66aa42b6c5a1d30a1b4364d65f409976202", "html_url": "https://github.com/rust-lang/rust/commit/cffdb66aa42b6c5a1d30a1b4364d65f409976202", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cffdb66aa42b6c5a1d30a1b4364d65f409976202/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78ec07790a90813cf4f42df0246ea9c27892745f", "url": "https://api.github.com/repos/rust-lang/rust/commits/78ec07790a90813cf4f42df0246ea9c27892745f", "html_url": "https://github.com/rust-lang/rust/commit/78ec07790a90813cf4f42df0246ea9c27892745f"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "c49ddb1b5318b4c6bb762207b37bf7e7857dc94e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cffdb66aa42b6c5a1d30a1b4364d65f409976202/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cffdb66aa42b6c5a1d30a1b4364d65f409976202/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=cffdb66aa42b6c5a1d30a1b4364d65f409976202", "patch": "@@ -1141,6 +1141,24 @@ impure fn trans_call(@block_ctxt cx, &ast.expr f,\n             args_res._0.build.FastCall(f_res._0.val, llargs));\n }\n \n+impure fn trans_tup(@block_ctxt cx, vec[tup(bool, @ast.expr)] args,\n+                    &ast.ann ann) -> result {\n+    auto ty = node_type(cx.fcx.ccx, ann);\n+    auto tup_val = cx.build.Alloca(ty);\n+    let int i = 0;\n+    auto r = res(cx, C_nil());\n+    for (tup(bool, @ast.expr) arg in args) {\n+        auto t = typeck.expr_ty(arg._1);\n+        auto src_res = trans_expr(r.bcx, *arg._1);\n+        auto dst_elt = r.bcx.build.GEP(tup_val, vec(C_int(0), C_int(i)));\n+        // FIXME: calculate copy init-ness in typestate.\n+        r = copy_ty(src_res.bcx, true, dst_elt, src_res.val, t);\n+        i += 1;\n+    }\n+    ret res(r.bcx, tup_val);\n+}\n+\n+\n impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n     alt (e.node) {\n         case (ast.expr_lit(?lit, _)) {\n@@ -1192,6 +1210,7 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n             check (lhs_res._1);\n             auto rhs_res = trans_expr(lhs_res._0.bcx, *src);\n             auto t = node_ann_type(cx.fcx.ccx, ann);\n+            // FIXME: calculate copy init-ness in typestate.\n             ret copy_ty(rhs_res.bcx, true, lhs_res._0.val, rhs_res.val, t);\n         }\n \n@@ -1202,6 +1221,10 @@ impure fn trans_expr(@block_ctxt cx, &ast.expr e) -> result {\n         case (ast.expr_cast(?e, _, ?ann)) {\n             ret trans_cast(cx, *e, ann);\n         }\n+\n+        case (ast.expr_tup(?args, ?ann)) {\n+            ret trans_tup(cx, args, ann);\n+        }\n     }\n     cx.fcx.ccx.sess.unimpl(\"expr variant in trans_expr\");\n     fail;"}]}