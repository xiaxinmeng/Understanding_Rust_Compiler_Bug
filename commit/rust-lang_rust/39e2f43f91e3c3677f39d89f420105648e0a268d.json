{"sha": "39e2f43f91e3c3677f39d89f420105648e0a268d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZTJmNDNmOTFlM2MzNjc3ZjM5ZDg5ZjQyMDEwNTY0OGUwYTI2OGQ=", "commit": {"author": {"name": "David Wood", "email": "devel@dtwood.uk", "date": "2017-12-27T21:19:42Z"}, "committer": {"name": "David Wood", "email": "devel@dtwood.uk", "date": "2017-12-27T21:19:42Z"}, "message": "Split assert_eq! if any arguments are not simple", "tree": {"sha": "02207b2ddd64826e34d9471a0ec13c4b2b7e16aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02207b2ddd64826e34d9471a0ec13c4b2b7e16aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39e2f43f91e3c3677f39d89f420105648e0a268d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39e2f43f91e3c3677f39d89f420105648e0a268d", "html_url": "https://github.com/rust-lang/rust/commit/39e2f43f91e3c3677f39d89f420105648e0a268d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39e2f43f91e3c3677f39d89f420105648e0a268d/comments", "author": {"login": "dtwood", "id": 1207240, "node_id": "MDQ6VXNlcjEyMDcyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1207240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtwood", "html_url": "https://github.com/dtwood", "followers_url": "https://api.github.com/users/dtwood/followers", "following_url": "https://api.github.com/users/dtwood/following{/other_user}", "gists_url": "https://api.github.com/users/dtwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtwood/subscriptions", "organizations_url": "https://api.github.com/users/dtwood/orgs", "repos_url": "https://api.github.com/users/dtwood/repos", "events_url": "https://api.github.com/users/dtwood/events{/privacy}", "received_events_url": "https://api.github.com/users/dtwood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtwood", "id": 1207240, "node_id": "MDQ6VXNlcjEyMDcyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1207240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtwood", "html_url": "https://github.com/dtwood", "followers_url": "https://api.github.com/users/dtwood/followers", "following_url": "https://api.github.com/users/dtwood/following{/other_user}", "gists_url": "https://api.github.com/users/dtwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtwood/subscriptions", "organizations_url": "https://api.github.com/users/dtwood/orgs", "repos_url": "https://api.github.com/users/dtwood/repos", "events_url": "https://api.github.com/users/dtwood/events{/privacy}", "received_events_url": "https://api.github.com/users/dtwood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "212a8a3c291bb7b602137578c1a2c4149c4844e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/212a8a3c291bb7b602137578c1a2c4149c4844e9", "html_url": "https://github.com/rust-lang/rust/commit/212a8a3c291bb7b602137578c1a2c4149c4844e9"}], "stats": {"total": 87, "additions": 36, "deletions": 51}, "files": [{"sha": "e64ea7436e332913b67b4fb6140611aaea498c28", "filename": "src/expr.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39e2f43f91e3c3677f39d89f420105648e0a268d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2f43f91e3c3677f39d89f420105648e0a268d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=39e2f43f91e3c3677f39d89f420105648e0a268d", "patch": "@@ -2082,30 +2082,26 @@ where\n                 tactic = default_tactic();\n \n                 if tactic == DefinitiveListTactic::Vertical {\n-                    if let Some((all_simple_before, all_simple_after, num_args_before)) =\n+                    if let Some((all_simple, num_args_before)) =\n                         maybe_get_args_offset(callee_str, args)\n                     {\n-                        let one_line_before = all_simple_before\n+                        let one_line = all_simple\n                             && definitive_tactic(\n                                 &item_vec[..num_args_before],\n                                 ListTactic::HorizontalVertical,\n                                 Separator::Comma,\n                                 nested_shape.width,\n-                            ) == DefinitiveListTactic::Horizontal;\n-\n-                        let one_line_after = all_simple_after\n+                            ) == DefinitiveListTactic::Horizontal\n                             && definitive_tactic(\n                                 &item_vec[num_args_before + 1..],\n                                 ListTactic::HorizontalVertical,\n                                 Separator::Comma,\n                                 nested_shape.width,\n                             ) == DefinitiveListTactic::Horizontal;\n \n-                        tactic = DefinitiveListTactic::SpecialMacro(\n-                            one_line_before,\n-                            one_line_after,\n-                            num_args_before,\n-                        );\n+                        if one_line {\n+                            tactic = DefinitiveListTactic::SpecialMacro(num_args_before);\n+                        };\n                     }\n                 }\n             }\n@@ -2141,18 +2137,14 @@ fn is_every_args_simple<T: ToExpr>(lists: &[&T]) -> bool {\n }\n \n /// In case special-case style is required, returns an offset from which we start horizontal layout.\n-fn maybe_get_args_offset<T: ToExpr>(callee_str: &str, args: &[&T]) -> Option<(bool, bool, usize)> {\n+fn maybe_get_args_offset<T: ToExpr>(callee_str: &str, args: &[&T]) -> Option<(bool, usize)> {\n     if let Some(&(_, num_args_before)) = SPECIAL_MACRO_WHITELIST\n         .iter()\n         .find(|&&(s, _)| s == callee_str)\n     {\n-        let all_simple_before =\n-            args.len() >= num_args_before && is_every_args_simple(&args[..num_args_before]);\n-\n-        let all_simple_after =\n-            args.len() >= num_args_before + 1 && is_every_args_simple(&args[num_args_before + 1..]);\n+        let all_simple = args.len() >= num_args_before && is_every_args_simple(args);\n \n-        Some((all_simple_before, all_simple_after, num_args_before))\n+        Some((all_simple, num_args_before))\n     } else {\n         None\n     }"}, {"sha": "193cd4f3c32e0bb33063a32bcff0522697a67ecf", "filename": "src/lists.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39e2f43f91e3c3677f39d89f420105648e0a268d/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2f43f91e3c3677f39d89f420105648e0a268d/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=39e2f43f91e3c3677f39d89f420105648e0a268d", "patch": "@@ -161,7 +161,7 @@ pub enum DefinitiveListTactic {\n     Horizontal,\n     Mixed,\n     /// Special case tactic for `format!()`, `write!()` style macros.\n-    SpecialMacro(bool, bool, usize),\n+    SpecialMacro(usize),\n }\n \n impl DefinitiveListTactic {\n@@ -311,30 +311,16 @@ where\n             DefinitiveListTactic::Horizontal if !first => {\n                 result.push(' ');\n             }\n-            DefinitiveListTactic::SpecialMacro(\n-                one_line_before,\n-                one_line_after,\n-                num_args_before,\n-            ) => {\n+            DefinitiveListTactic::SpecialMacro(num_args_before) => {\n                 if i == 0 {\n                     // Nothing\n                 } else if i < num_args_before {\n-                    if one_line_before {\n-                        result.push(' ');\n-                    } else {\n-                        result.push('\\n');\n-                        result.push_str(indent_str);\n-                    }\n+                    result.push(' ');\n                 } else if i <= num_args_before + 1 {\n                     result.push('\\n');\n                     result.push_str(indent_str);\n                 } else {\n-                    if one_line_after {\n-                        result.push(' ');\n-                    } else {\n-                        result.push('\\n');\n-                        result.push_str(indent_str);\n-                    }\n+                    result.push(' ');\n                 }\n             }\n             DefinitiveListTactic::Vertical if !first => {"}, {"sha": "fc2ebcd7e4cfebeea0192ad7a521d5489292394e", "filename": "tests/source/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39e2f43f91e3c3677f39d89f420105648e0a268d/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2f43f91e3c3677f39d89f420105648e0a268d/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=39e2f43f91e3c3677f39d89f420105648e0a268d", "patch": "@@ -267,21 +267,21 @@ fn special_case_macros() {\n     warn!(\"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n \n     assert!(result == 42, \"Ahoy there, {}!\", target);\n-    assert!(result == 42, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n+    assert!(result == 42, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n     assert!(result == 42, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n \n     assert_eq!(left, right, \"Ahoy there, {}!\", target);\n-    assert_eq!(left, right, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n-    assert_eq!(first_realllllllllllly_long_variable_that_doesnt_fit_one_one_line, second_reallllllllllly_long_variable_that_doesnt_fit_one_one_line, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n-    assert_eq!(left + 42, right, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n+    assert_eq!(left, right, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n+    assert_eq!(first_realllllllllllly_long_variable_that_doesnt_fit_one_one_line, second_reallllllllllly_long_variable_that_doesnt_fit_one_one_line, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n+    assert_eq!(left + 42, right, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n     assert_eq!(left, right, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n \n     write!(&mut s, \"Ahoy there, {}!\", target);\n-    write!(&mut s, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n+    write!(&mut s, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n     write!(&mut s, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n \n     writeln!(&mut s, \"Ahoy there, {}!\", target);\n-    writeln!(&mut s, \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\", result, input, expected);\n+    writeln!(&mut s, \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\", result, input, expected);\n     writeln!(&mut s, \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26);\n }\n "}, {"sha": "be9027dd108ee118db57a2b9eee7bbc9cdd455ba", "filename": "tests/target/macros.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39e2f43f91e3c3677f39d89f420105648e0a268d/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e2f43f91e3c3677f39d89f420105648e0a268d/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=39e2f43f91e3c3677f39d89f420105648e0a268d", "patch": "@@ -694,8 +694,10 @@ fn special_case_macros() {\n     assert!(result == 42, \"Ahoy there, {}!\", target);\n     assert!(\n         result == 42,\n-        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n-        result, input, expected\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        result,\n+        input,\n+        expected\n     );\n     assert!(\n         result == 42,\n@@ -731,23 +733,28 @@ fn special_case_macros() {\n     assert_eq!(left, right, \"Ahoy there, {}!\", target);\n     assert_eq!(\n         left, right,\n-        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n         result, input, expected\n     );\n     assert_eq!(\n         first_realllllllllllly_long_variable_that_doesnt_fit_one_one_line,\n         second_reallllllllllly_long_variable_that_doesnt_fit_one_one_line,\n-        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n-        result, input, expected\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        result,\n+        input,\n+        expected\n     );\n     assert_eq!(\n         left + 42,\n         right,\n-        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n-        result, input, expected\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n+        result,\n+        input,\n+        expected\n     );\n     assert_eq!(\n-        left, right,\n+        left,\n+        right,\n         \"{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}\",\n         1,\n         2,\n@@ -780,7 +787,7 @@ fn special_case_macros() {\n     write!(&mut s, \"Ahoy there, {}!\", target);\n     write!(\n         &mut s,\n-        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n         result, input, expected\n     );\n     write!(\n@@ -817,7 +824,7 @@ fn special_case_macros() {\n     writeln!(&mut s, \"Ahoy there, {}!\", target);\n     writeln!(\n         &mut s,\n-        \"Arr! Batten down the hatches, we got '{}' but not '{}' (we expected '{}')\",\n+        \"Arr! While plunderin' the hold, we got '{}' when given '{}' (we expected '{}')\",\n         result, input, expected\n     );\n     writeln!("}]}