{"sha": "48840618382eccb8a799320c8e5d08e3b52f4c42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ODQwNjE4MzgyZWNjYjhhNzk5MzIwYzhlNWQwOGUzYjUyZjRjNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T17:43:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-16T17:43:19Z"}, "message": "Auto merge of #68286 - Dylan-DPC:rollup-x7ssgov, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #68033 (Don't use f64 shims for f32 cmath functions on non 32-bit x86 MSVC)\n - #68244 (Enable leak sanitizer test case)\n - #68255 (Remove unused auxiliary file that was replaced with rust_test_helpers)\n - #68263 (rustdoc: HTML escape codeblocks which fail syntax highlighting)\n - #68274 (remove dead code)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "ba3c99b7f597c8ba67a57158b9d0af029c81510e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba3c99b7f597c8ba67a57158b9d0af029c81510e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48840618382eccb8a799320c8e5d08e3b52f4c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48840618382eccb8a799320c8e5d08e3b52f4c42", "html_url": "https://github.com/rust-lang/rust/commit/48840618382eccb8a799320c8e5d08e3b52f4c42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48840618382eccb8a799320c8e5d08e3b52f4c42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "117ceeba400e69aa7b8ba5155acd1c8c0cdf7f7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/117ceeba400e69aa7b8ba5155acd1c8c0cdf7f7f", "html_url": "https://github.com/rust-lang/rust/commit/117ceeba400e69aa7b8ba5155acd1c8c0cdf7f7f"}, {"sha": "a529e70be1db5601b224eea741ccbab74f22b0c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a529e70be1db5601b224eea741ccbab74f22b0c4", "html_url": "https://github.com/rust-lang/rust/commit/a529e70be1db5601b224eea741ccbab74f22b0c4"}], "stats": {"total": 118, "additions": 38, "deletions": 80}, "files": [{"sha": "fb1c46834d3a04af79321b0e4b029df0bfe4e274", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -3767,16 +3767,12 @@ impl<'tcx> TraitObligation<'tcx> {\n         // NOTE(flaper87): As of now, it keeps track of the whole error\n         // chain. Ideally, we should have a way to configure this either\n         // by using -Z verbose or just a CLI argument.\n-        if obligation.recursion_depth >= 0 {\n-            let derived_cause = DerivedObligationCause {\n-                parent_trait_ref: obligation.predicate.to_poly_trait_ref(),\n-                parent_code: Rc::new(obligation.cause.code.clone()),\n-            };\n-            let derived_code = variant(derived_cause);\n-            ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)\n-        } else {\n-            obligation.cause.clone()\n-        }\n+        let derived_cause = DerivedObligationCause {\n+            parent_trait_ref: obligation.predicate.to_poly_trait_ref(),\n+            parent_code: Rc::new(obligation.cause.code.clone()),\n+        };\n+        let derived_code = variant(derived_cause);\n+        ObligationCause::new(obligation.cause.span, obligation.cause.body_id, derived_code)\n     }\n }\n "}, {"sha": "aa52b769c38ed3af420ccd1085260b5bb6acbb7e", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -65,7 +65,7 @@ pub fn render_with_highlighting(\n         Err(()) => {\n             // If errors are encountered while trying to highlight, just emit\n             // the unhighlighted source.\n-            write!(out, \"<pre><code>{}</code></pre>\", src).unwrap();\n+            write!(out, \"<pre><code>{}</code></pre>\", Escape(src)).unwrap();\n         }\n     }\n "}, {"sha": "941ea6a767c57d4a7d9621324774fcdbe8e62bb9", "filename": "src/libstd/f32.rs", "status": "modified", "additions": 8, "deletions": 52, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibstd%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibstd%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ff32.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -44,23 +44,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn floor(self) -> f32 {\n-        // On MSVC LLVM will lower many math intrinsics to a call to the\n-        // corresponding function. On MSVC, however, many of these functions\n-        // aren't actually available as symbols to call, but rather they are all\n-        // `static inline` functions in header files. This means that from a C\n-        // perspective it's \"compatible\", but not so much from an ABI\n-        // perspective (which we're worried about).\n-        //\n-        // The inline header functions always just cast to a f64 and do their\n-        // operation, so we do that here as well, but only for MSVC targets.\n-        //\n-        // Note that there are many MSVC-specific float operations which\n-        // redirect to this comment, so `floorf` is just one case of a missing\n-        // function on MSVC, but there are many others elsewhere.\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).floor() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::floorf32(self) };\n+        unsafe { intrinsics::floorf32(self) }\n     }\n \n     /// Returns the smallest integer greater than or equal to a number.\n@@ -78,11 +62,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ceil(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).ceil() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::ceilf32(self) };\n+        unsafe { intrinsics::ceilf32(self) }\n     }\n \n     /// Returns the nearest integer to a number. Round half-way cases away from\n@@ -348,11 +328,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn powf(self, n: f32) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).powf(n as f64) as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::powf32(self, n) };\n+        unsafe { intrinsics::powf32(self, n) }\n     }\n \n     /// Returns the square root of a number.\n@@ -399,11 +375,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn exp(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).exp() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::expf32(self) };\n+        unsafe { intrinsics::expf32(self) }\n     }\n \n     /// Returns `2^(self)`.\n@@ -447,11 +419,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn ln(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).ln() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::logf32(self) };\n+        unsafe { intrinsics::logf32(self) }\n     }\n \n     /// Returns the logarithm of the number with respect to an arbitrary base.\n@@ -521,11 +489,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn log10(self) -> f32 {\n-        // see notes above in `floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).log10() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::log10f32(self) };\n+        unsafe { intrinsics::log10f32(self) }\n     }\n \n     /// The positive difference of two numbers.\n@@ -625,11 +589,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn sin(self) -> f32 {\n-        // see notes in `core::f32::Float::floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).sin() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::sinf32(self) };\n+        unsafe { intrinsics::sinf32(self) }\n     }\n \n     /// Computes the cosine of a number (in radians).\n@@ -649,11 +609,7 @@ impl f32 {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn cos(self) -> f32 {\n-        // see notes in `core::f32::Float::floor`\n-        #[cfg(target_env = \"msvc\")]\n-        return (self as f64).cos() as f32;\n-        #[cfg(not(target_env = \"msvc\"))]\n-        return unsafe { intrinsics::cosf32(self) };\n+        unsafe { intrinsics::cosf32(self) }\n     }\n \n     /// Computes the tangent of a number (in radians)."}, {"sha": "1a5421facd0c1aba216ebd195b0e72f4800e7560", "filename": "src/libstd/sys/windows/cmath.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcmath.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -27,7 +27,7 @@ extern \"C\" {\n \n pub use self::shims::*;\n \n-#[cfg(not(target_env = \"msvc\"))]\n+#[cfg(not(all(target_env = \"msvc\", target_arch = \"x86\")))]\n mod shims {\n     use libc::c_float;\n \n@@ -43,10 +43,10 @@ mod shims {\n     }\n }\n \n-// On MSVC these functions aren't defined, so we just define shims which promote\n-// everything fo f64, perform the calculation, and then demote back to f32.\n-// While not precisely correct should be \"correct enough\" for now.\n-#[cfg(target_env = \"msvc\")]\n+// On 32-bit x86 MSVC these functions aren't defined, so we just define shims\n+// which promote everything fo f64, perform the calculation, and then demote\n+// back to f32. While not precisely correct should be \"correct enough\" for now.\n+#[cfg(all(target_env = \"msvc\", target_arch = \"x86\"))]\n mod shims {\n     use libc::c_float;\n "}, {"sha": "da370335ca91814ddf9f68862a52e48cdff5aa73", "filename": "src/test/run-make-fulldeps/sanitizer-leak/Makefile", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2FMakefile?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,11 +1,7 @@\n -include ../tools.mk\n \n # needs-sanitizer-support\n-# only-linux\n-# only-x86_64\n-# ignore-test\n-# FIXME(#46126) ThinLTO for libstd broke this test\n \n all:\n-\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) rustc_rt.lsan\n+\t$(RUSTC) -O -Z sanitizer=leak -Z print-link-args leak.rs | $(CGREP) rustc_rt.lsan\n \t$(TMPDIR)/leak 2>&1 | $(CGREP) 'detected memory leaks'"}, {"sha": "fb0a917dd98b644cec0196ecadd3d9536743f505", "filename": "src/test/run-make-fulldeps/sanitizer-leak/leak.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2Fleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2Fleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-leak%2Fleak.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -1,6 +1,13 @@\n+#![feature(test)]\n+\n+use std::hint::black_box;\n use std::mem;\n \n fn main() {\n-    let xs = vec![1, 2, 3, 4];\n-    mem::forget(xs);\n+    for _ in 0..10 {\n+        let xs = vec![1, 2, 3];\n+        // Prevent compiler from removing the memory allocation.\n+        let xs = black_box(xs);\n+        mem::forget(xs);\n+    }\n }"}, {"sha": "ae8fbe4a2a800d2d7440558bffde05fb184ee297", "filename": "src/test/rustdoc/bad-codeblock-syntax.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frustdoc%2Fbad-codeblock-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48840618382eccb8a799320c8e5d08e3b52f4c42/src%2Ftest%2Frustdoc%2Fbad-codeblock-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fbad-codeblock-syntax.rs?ref=48840618382eccb8a799320c8e5d08e3b52f4c42", "patch": "@@ -25,3 +25,11 @@ pub fn quux() {}\n /// \\_\n /// ```\n pub fn ok() {}\n+\n+// @has bad_codeblock_syntax/fn.escape.html\n+// @has - '//*[@class=\"docblock\"]/pre/code' '\\_ <script>alert(\"not valid Rust\");</script>'\n+/// ```\n+/// \\_\n+/// <script>alert(\"not valid Rust\");</script>\n+/// ```\n+pub fn escape() {}"}, {"sha": "c1c5b70bc04e2cd9af2ad6263830954e083e33c9", "filename": "src/test/ui/rfcs/rfc1717/auxiliary/clibrary.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/117ceeba400e69aa7b8ba5155acd1c8c0cdf7f7f/src%2Ftest%2Fui%2Frfcs%2Frfc1717%2Fauxiliary%2Fclibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/117ceeba400e69aa7b8ba5155acd1c8c0cdf7f7f/src%2Ftest%2Fui%2Frfcs%2Frfc1717%2Fauxiliary%2Fclibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc1717%2Fauxiliary%2Fclibrary.rs?ref=117ceeba400e69aa7b8ba5155acd1c8c0cdf7f7f", "patch": "@@ -1,5 +0,0 @@\n-// no-prefer-dynamic\n-#![crate_type = \"staticlib\"]\n-\n-#[no_mangle]\n-pub extern \"C\" fn foo(x:i32) -> i32 { x }"}]}