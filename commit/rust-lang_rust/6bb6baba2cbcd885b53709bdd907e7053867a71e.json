{"sha": "6bb6baba2cbcd885b53709bdd907e7053867a71e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYjZiYWJhMmNiY2Q4ODViNTM3MDliZGQ5MDdlNzA1Mzg2N2E3MWU=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-02-25T00:24:54Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-07T04:41:57Z"}, "message": "Renovate cast-to-int", "tree": {"sha": "0d9102511166c3a31d68b4d388bbc22435944aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9102511166c3a31d68b4d388bbc22435944aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb6baba2cbcd885b53709bdd907e7053867a71e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb6baba2cbcd885b53709bdd907e7053867a71e", "html_url": "https://github.com/rust-lang/rust/commit/6bb6baba2cbcd885b53709bdd907e7053867a71e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb6baba2cbcd885b53709bdd907e7053867a71e/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "075affa50d04c585a53d0c8e7b66bae372a72648", "url": "https://api.github.com/repos/rust-lang/rust/commits/075affa50d04c585a53d0c8e7b66bae372a72648", "html_url": "https://github.com/rust-lang/rust/commit/075affa50d04c585a53d0c8e7b66bae372a72648"}], "stats": {"total": 18, "additions": 2, "deletions": 16}, "files": [{"sha": "72926f91af52c86120c1ebd8b15929b534aacdc8", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bb6baba2cbcd885b53709bdd907e7053867a71e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb6baba2cbcd885b53709bdd907e7053867a71e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=6bb6baba2cbcd885b53709bdd907e7053867a71e", "patch": "@@ -1644,22 +1644,8 @@ fn trans_imm_cast(bcx: block, expr: @ast::expr,\n             (cast_enum, cast_integral) |\n             (cast_enum, cast_float) => {\n                 let bcx = bcx;\n-                let in_tid = match ty::get(t_in).sty {\n-                    ty::ty_enum(did, _) => did,\n-                    _ => ccx.sess.bug(~\"enum cast source is not enum\")\n-                };\n-                let variants = ty::enum_variants(ccx.tcx, in_tid);\n-                let lldiscrim_a = if variants.len() == 1 {\n-                    // Univariants don't have a discriminant field,\n-                    // because there's only one value it could have:\n-                    C_integral(T_enum_discrim(ccx),\n-                               variants[0].disr_val as u64, True)\n-                } else {\n-                    let llenumty = T_opaque_enum_ptr(ccx);\n-                    let av_enum = PointerCast(bcx, llexpr, llenumty);\n-                    let lldiscrim_a_ptr = GEPi(bcx, av_enum, [0u, 0u]);\n-                    Load(bcx, lldiscrim_a_ptr)\n-                };\n+                let repr = adt::represent_type(ccx, t_in);\n+                let lldiscrim_a = adt::trans_cast_to_int(bcx, &repr, llexpr);\n                 match k_out {\n                     cast_integral => int_cast(bcx, ll_t_out,\n                                               val_ty(lldiscrim_a),"}]}