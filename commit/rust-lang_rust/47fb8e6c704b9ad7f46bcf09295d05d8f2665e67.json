{"sha": "47fb8e6c704b9ad7f46bcf09295d05d8f2665e67", "node_id": "C_kwDOAAsO6NoAKDQ3ZmI4ZTZjNzA0YjlhZDdmNDZiY2YwOTI5NWQwNWQ4ZjI2NjVlNjc", "commit": {"author": {"name": "John Bobbo", "email": "johnbobbo59@gmail.com", "date": "2023-04-28T17:07:29Z"}, "committer": {"name": "John Bobbo", "email": "johnbobbo59@gmail.com", "date": "2023-04-29T04:00:54Z"}, "message": "Deny the `unsafe_op_in_unsafe_fn` lint in\n`rustc_arena`.", "tree": {"sha": "4b123205e2199bd3533c6ed163bd184197f65391", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b123205e2199bd3533c6ed163bd184197f65391"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIzBAABCgAdFiEEu0LRcQjLMkxoGLxM1bHKheRsRwkFAmRMlngACgkQ1bHKheRs\nRwlGrQ/9E+UOWEbdXD/Mvo2eagWGaV5TA2SsagrBL7w9bKoyBvkQD0NE/zug/OXS\n5YVH7O4Az0C7im6Zhn5Ytn1vNiI3ZwTZ0npu4qiGWfG22kdmMA0fYXqRgm5lbtfV\nD0+XMo3NKmop4aZ52YUP14wpVK/E8GsV9TbDzztfI2Wdvcoya5m7Q4hnsLiihgGI\nY5LEfDW/M/vuDfZb6zlIt+mgLw+70rIdCoGChl2UVc7JaJO6DQGrlUAq8W8SpDrg\n165MhevR0SxeDxFi8nWbvLZ4X2mLbMWnFvwqXQ93sCBb+z5vrZ/6m3oYj2hBibO2\nLm8eUcg9djgsg69lJmFG3Q8R9BaTxtnxKkpzYLtnRK8YconqjHwvdxH3y0eUk1nI\nD9BHfA4afDHDM/GolGJYM/jRXvB/bDYHP0OfHFe0JR39BE0Yf9cS+KRTBhUoP9mr\nnVM1Fc6o8bu37e3Q/DKuRB5IUqhjd9H5G+pnEltUlINAPPZQRmpaC5/o2JcYjYCG\nVDlKup8LaYxQR1sXe8NEYno3ONi5PcROOLM9Fk/T+mm4DC83NgIHqY8eITgSzhZN\ncskI8ZN65WZ3c6O62ZKFbFJLkP1PSc7rHodoOGuxfkoe5vaCpWSMXiPQMCM4G86c\naaxAMkF6mLOZLljMEwJWaKfbFJfP37e/plc9p1ALD4qIPRDbtCo=\n=4fzr\n-----END PGP SIGNATURE-----", "payload": "tree 4b123205e2199bd3533c6ed163bd184197f65391\nparent 7a96158b53529c2dd03bb4a637d8589ac6f5376f\nauthor John Bobbo <johnbobbo59@gmail.com> 1682701649 -0700\ncommitter John Bobbo <johnbobbo59@gmail.com> 1682740854 -0700\n\nDeny the `unsafe_op_in_unsafe_fn` lint in\n`rustc_arena`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67", "html_url": "https://github.com/rust-lang/rust/commit/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67/comments", "author": {"login": "JohnBobbo96", "id": 113238176, "node_id": "U_kgDOBr_goA", "avatar_url": "https://avatars.githubusercontent.com/u/113238176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnBobbo96", "html_url": "https://github.com/JohnBobbo96", "followers_url": "https://api.github.com/users/JohnBobbo96/followers", "following_url": "https://api.github.com/users/JohnBobbo96/following{/other_user}", "gists_url": "https://api.github.com/users/JohnBobbo96/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnBobbo96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnBobbo96/subscriptions", "organizations_url": "https://api.github.com/users/JohnBobbo96/orgs", "repos_url": "https://api.github.com/users/JohnBobbo96/repos", "events_url": "https://api.github.com/users/JohnBobbo96/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnBobbo96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnBobbo96", "id": 113238176, "node_id": "U_kgDOBr_goA", "avatar_url": "https://avatars.githubusercontent.com/u/113238176?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnBobbo96", "html_url": "https://github.com/JohnBobbo96", "followers_url": "https://api.github.com/users/JohnBobbo96/followers", "following_url": "https://api.github.com/users/JohnBobbo96/following{/other_user}", "gists_url": "https://api.github.com/users/JohnBobbo96/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnBobbo96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnBobbo96/subscriptions", "organizations_url": "https://api.github.com/users/JohnBobbo96/orgs", "repos_url": "https://api.github.com/users/JohnBobbo96/repos", "events_url": "https://api.github.com/users/JohnBobbo96/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnBobbo96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a96158b53529c2dd03bb4a637d8589ac6f5376f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a96158b53529c2dd03bb4a637d8589ac6f5376f", "html_url": "https://github.com/rust-lang/rust/commit/7a96158b53529c2dd03bb4a637d8589ac6f5376f"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "6e15f06a76de015dc8c62ac25d5fdf1fd0901654", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47fb8e6c704b9ad7f46bcf09295d05d8f2665e67/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=47fb8e6c704b9ad7f46bcf09295d05d8f2665e67", "patch": "@@ -20,6 +20,7 @@\n #![feature(rustc_attrs)]\n #![cfg_attr(test, feature(test))]\n #![feature(strict_provenance)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n #![allow(clippy::mut_from_ref)] // Arena allocators are one of the places where this pattern is fine.\n@@ -74,19 +75,27 @@ impl<T> ArenaChunk<T> {\n     #[inline]\n     unsafe fn new(capacity: usize) -> ArenaChunk<T> {\n         ArenaChunk {\n-            storage: NonNull::new_unchecked(Box::into_raw(Box::new_uninit_slice(capacity))),\n+            storage: NonNull::from(Box::leak(Box::new_uninit_slice(capacity))),\n             entries: 0,\n         }\n     }\n \n     /// Destroys this arena chunk.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The caller must ensure that `len` elements of this chunk have been initialized.\n     #[inline]\n     unsafe fn destroy(&mut self, len: usize) {\n         // The branch on needs_drop() is an -O1 performance optimization.\n-        // Without the branch, dropping TypedArena<u8> takes linear time.\n+        // Without the branch, dropping TypedArena<T> takes linear time.\n         if mem::needs_drop::<T>() {\n-            let slice = self.storage.as_mut();\n-            ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(&mut slice[..len]));\n+            // SAFETY: The caller must ensure that `len` elements of this chunk have\n+            // been initialized.\n+            unsafe {\n+                let slice = self.storage.as_mut();\n+                ptr::drop_in_place(MaybeUninit::slice_assume_init_mut(&mut slice[..len]));\n+            }\n         }\n     }\n \n@@ -255,7 +264,9 @@ impl<T> TypedArena<T> {\n         self.ensure_capacity(len);\n \n         let start_ptr = self.ptr.get();\n-        self.ptr.set(start_ptr.add(len));\n+        // SAFETY: `self.ensure_capacity` makes sure that there is enough space\n+        // for `len` elements.\n+        unsafe { self.ptr.set(start_ptr.add(len)) };\n         start_ptr\n     }\n \n@@ -483,6 +494,10 @@ impl DroplessArena {\n         }\n     }\n \n+    /// # Safety\n+    ///\n+    /// The caller must ensure that `mem` is valid for writes up to\n+    /// `size_of::<T>() * len`.\n     #[inline]\n     unsafe fn write_from_iter<T, I: Iterator<Item = T>>(\n         &self,\n@@ -494,13 +509,18 @@ impl DroplessArena {\n         // Use a manual loop since LLVM manages to optimize it better for\n         // slice iterators\n         loop {\n-            let value = iter.next();\n-            if i >= len || value.is_none() {\n-                // We only return as many items as the iterator gave us, even\n-                // though it was supposed to give us `len`\n-                return slice::from_raw_parts_mut(mem, i);\n+            // SAFETY: The caller must ensure that `mem` is valid for writes up to\n+            // `size_of::<T>() * len`.\n+            unsafe {\n+                match iter.next() {\n+                    Some(value) if i < len => mem.add(i).write(value),\n+                    Some(_) | None => {\n+                        // We only return as many items as the iterator gave us, even\n+                        // though it was supposed to give us `len`\n+                        return slice::from_raw_parts_mut(mem, i);\n+                    }\n+                }\n             }\n-            ptr::write(mem.add(i), value.unwrap());\n             i += 1;\n         }\n     }"}]}