{"sha": "b8943474dc4313c432ed791cebe9b76f89b0ad84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OTQzNDc0ZGM0MzEzYzQzMmVkNzkxY2ViZTliNzZmODliMGFkODQ=", "commit": {"author": {"name": "Viktor Dahl", "email": "pazaconyoman@gmail.com", "date": "2013-02-07T23:14:17Z"}, "committer": {"name": "Viktor Dahl", "email": "pazaconyoman@gmail.com", "date": "2013-02-07T23:18:23Z"}, "message": "Moved experimental compiler flags to -Z (#4740)", "tree": {"sha": "59177e639698ac3ccda38213f9c78cdc3132ab46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59177e639698ac3ccda38213f9c78cdc3132ab46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8943474dc4313c432ed791cebe9b76f89b0ad84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8943474dc4313c432ed791cebe9b76f89b0ad84", "html_url": "https://github.com/rust-lang/rust/commit/b8943474dc4313c432ed791cebe9b76f89b0ad84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8943474dc4313c432ed791cebe9b76f89b0ad84/comments", "author": {"login": "veddan", "id": 307180, "node_id": "MDQ6VXNlcjMwNzE4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/307180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veddan", "html_url": "https://github.com/veddan", "followers_url": "https://api.github.com/users/veddan/followers", "following_url": "https://api.github.com/users/veddan/following{/other_user}", "gists_url": "https://api.github.com/users/veddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/veddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veddan/subscriptions", "organizations_url": "https://api.github.com/users/veddan/orgs", "repos_url": "https://api.github.com/users/veddan/repos", "events_url": "https://api.github.com/users/veddan/events{/privacy}", "received_events_url": "https://api.github.com/users/veddan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "veddan", "id": 307180, "node_id": "MDQ6VXNlcjMwNzE4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/307180?v=4", "gravatar_id": "", "url": "https://api.github.com/users/veddan", "html_url": "https://github.com/veddan", "followers_url": "https://api.github.com/users/veddan/followers", "following_url": "https://api.github.com/users/veddan/following{/other_user}", "gists_url": "https://api.github.com/users/veddan/gists{/gist_id}", "starred_url": "https://api.github.com/users/veddan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/veddan/subscriptions", "organizations_url": "https://api.github.com/users/veddan/orgs", "repos_url": "https://api.github.com/users/veddan/repos", "events_url": "https://api.github.com/users/veddan/events{/privacy}", "received_events_url": "https://api.github.com/users/veddan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e9298ab888b425e9a395e87aa750feeaadb2e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9298ab888b425e9a395e87aa750feeaadb2e83", "html_url": "https://github.com/rust-lang/rust/commit/6e9298ab888b425e9a395e87aa750feeaadb2e83"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "38d8ba955f8d908e99464c8b73291668568cc2b9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8943474dc4313c432ed791cebe9b76f89b0ad84/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8943474dc4313c432ed791cebe9b76f89b0ad84/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=b8943474dc4313c432ed791cebe9b76f89b0ad84", "patch": "@@ -521,9 +521,6 @@ pub fn build_session_options(+binary: ~str,\n     } else {\n         session::unknown_crate\n     };\n-    let static = opt_present(matches, ~\"static\");\n-    let gc = opt_present(matches, ~\"gc\");\n-\n     let parse_only = opt_present(matches, ~\"parse-only\");\n     let no_trans = opt_present(matches, ~\"no-trans\");\n \n@@ -570,7 +567,6 @@ pub fn build_session_options(+binary: ~str,\n         }\n     }\n \n-    let jit = opt_present(matches, ~\"jit\");\n     let output_type =\n         if parse_only || no_trans {\n             link::output_type_none\n@@ -584,8 +580,6 @@ pub fn build_session_options(+binary: ~str,\n         } else if opt_present(matches, ~\"emit-llvm\") {\n             link::output_type_bitcode\n         } else { link::output_type_exe };\n-    let extra_debuginfo = opt_present(matches, ~\"xg\");\n-    let debuginfo = opt_present(matches, ~\"g\") || extra_debuginfo;\n     let sysroot_opt = getopts::opt_maybe_str(matches, ~\"sysroot\");\n     let sysroot_opt = sysroot_opt.map(|m| Path(*m));\n     let target_opt = getopts::opt_maybe_str(matches, ~\"target\");\n@@ -616,6 +610,12 @@ pub fn build_session_options(+binary: ~str,\n             }\n         } else { No }\n     };\n+    let gc = debugging_opts & session::gc != 0;\n+    let jit = debugging_opts & session::jit != 0;\n+    let extra_debuginfo = debugging_opts & session::extra_debug_info != 0;\n+    let debuginfo = debugging_opts & session::debug_info != 0 ||\n+        extra_debuginfo;\n+    let static = debugging_opts & session::static != 0;\n     let target =\n         match target_opt {\n             None => host_triple(),\n@@ -712,14 +712,11 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n                           environment\", ~\"SPEC\"),\n   optflag(~\"\",  ~\"emit-llvm\",\n                         ~\"Produce an LLVM bitcode file\"),\n-  optflag(~\"g\", ~\"\",    ~\"Produce debug info (experimental)\"),\n-  optflag(~\"\",  ~\"gc\",  ~\"Garbage collect shared data (experimental)\"),\n   optflag(~\"h\", ~\"help\",~\"Display this message\"),\n   optmulti(~\"L\", ~\"\",   ~\"Add a directory to the library search path\",\n                               ~\"PATH\"),\n   optflag(~\"\",  ~\"lib\", ~\"Compile a library crate\"),\n   optflag(~\"\",  ~\"ls\",  ~\"List the symbols defined by a library crate\"),\n-  optflag(~\"\",  ~\"jit\", ~\"Execute using JIT (experimental)\"),\n   optflag(~\"\", ~\"no-trans\",\n                         ~\"Run all passes except translation; no output\"),\n   optflag(~\"O\", ~\"\",    ~\"Equivalent to --opt-level=2\"),\n@@ -739,13 +736,9 @@ pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n                           or identified (fully parenthesized,\n                           AST nodes and blocks with IDs)\", ~\"TYPE\"),\n   optflag(~\"S\", ~\"\",    ~\"Compile only; do not assemble or link\"),\n-  optflag(~\"\", ~\"xg\",   ~\"Extra debugging info (experimental)\"),\n   optflag(~\"\", ~\"save-temps\",\n                         ~\"Write intermediate files (.bc, .opt.bc, .o)\n                           in addition to normal output\"),\n-  optflag(~\"\", ~\"static\",\n-                        ~\"Use or produce static libraries or binaries\n-                         (experimental)\"),\n   optopt(~\"\", ~\"sysroot\",\n                         ~\"Override the system root\", ~\"PATH\"),\n   optflag(~\"\", ~\"test\", ~\"Build a test harness\"),"}, {"sha": "538c0c71863b46e2c53059fa7fd8b610e01dd3ed", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b8943474dc4313c432ed791cebe9b76f89b0ad84/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8943474dc4313c432ed791cebe9b76f89b0ad84/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=b8943474dc4313c432ed791cebe9b76f89b0ad84", "patch": "@@ -75,6 +75,11 @@ pub const count_type_sizes: uint = 1 << 14;\n pub const meta_stats: uint = 1 << 15;\n pub const no_opt: uint = 1 << 16;\n pub const no_monomorphic_collapse: uint = 1 << 17;\n+const gc: uint = 1 << 18;\n+const jit: uint = 1 << 19;\n+const debug_info: uint = 1 << 20;\n+const extra_debug_info: uint = 1 << 21;\n+const static: uint = 1 << 22;\n \n pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n@@ -102,6 +107,13 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n      (~\"no-opt\", ~\"do not optimize, even if -O is passed\", no_opt),\n      (~\"no-monomorphic-collapse\", ~\"do not collapse template instantiations\",\n       no_monomorphic_collapse),\n+     (~\"gc\", ~\"Garbage collect shared data (experimental)\", gc),\n+     (~\"jit\", ~\"Execute using JIT (experimental)\", jit),\n+     (~\"extra-debug-info\", ~\"Extra debugging info (experimental)\",\n+      extra_debug_info),\n+     (~\"debug-info\", ~\"Produce debug info (experimental)\", debug_info),\n+     (~\"static\", ~\"Use or produce static libraries or binaries \" +\n+      \"(experimental)\", static)\n     ]\n }\n "}]}