{"sha": "e0084922aa78472ddcd71121c470e25b38dc6ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMDg0OTIyYWE3ODQ3MmRkY2Q3MTEyMWM0NzBlMjViMzhkYzZmZjg=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-10T13:12:11Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-11T10:39:23Z"}, "message": "tests: don't use only-64bit in mir-opt tests.", "tree": {"sha": "5311c013d3997ef4f4e4b6f5c53f8daa22556bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5311c013d3997ef4f4e4b6f5c53f8daa22556bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0084922aa78472ddcd71121c470e25b38dc6ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0084922aa78472ddcd71121c470e25b38dc6ff8", "html_url": "https://github.com/rust-lang/rust/commit/e0084922aa78472ddcd71121c470e25b38dc6ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0084922aa78472ddcd71121c470e25b38dc6ff8/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15719cde5e4f90e6a596d640e6eed49f2516b3ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/15719cde5e4f90e6a596d640e6eed49f2516b3ed", "html_url": "https://github.com/rust-lang/rust/commit/15719cde5e4f90e6a596d640e6eed49f2516b3ed"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "77834e9661cecbf9376cea862b84921539d07d85", "filename": "src/test/mir-opt/inline/inline-into-box-place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0084922aa78472ddcd71121c470e25b38dc6ff8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0084922aa78472ddcd71121c470e25b38dc6ff8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place.rs?ref=e0084922aa78472ddcd71121c470e25b38dc6ff8", "patch": "@@ -1,6 +1,6 @@\n // ignore-wasm32-bare compiled with panic=abort by default\n // compile-flags: -Z mir-opt-level=3\n-// only-64bit FIXME: the mir representation of RawVec depends on ptr size\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n #![feature(box_syntax)]\n \n // EMIT_MIR rustc.main.Inline.diff"}, {"sha": "721b37778acccd7888268e286dc09b6e1d3c71eb", "filename": "src/test/mir-opt/inline/inline-into-box-place/32bit/rustc.main.Inline.diff", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e0084922aa78472ddcd71121c470e25b38dc6ff8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0084922aa78472ddcd71121c470e25b38dc6ff8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F32bit%2Frustc.main.Inline.diff?ref=e0084922aa78472ddcd71121c470e25b38dc6ff8", "patch": "@@ -0,0 +1,76 @@\n+- // MIR for `main` before Inline\n++ // MIR for `main` after Inline\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inline-into-box-place.rs:7:11: 7:11\n+      let _1: std::boxed::Box<std::vec::Vec<u32>> as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+      let mut _2: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+      let mut _3: ();                      // in scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++     let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n+      scope 1 {\n+          debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+      }\n++     scope 2 {\n++     }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/inline-into-box-place.rs:8:9: 8:11\n+          StorageLive(_2);                 // bb0[1]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+          _2 = Box(std::vec::Vec<u32>);    // bb0[2]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         (*_2) = const std::vec::Vec::<u32>::new() -> [return: bb2, unwind: bb4]; // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         _4 = &mut (*_2);                 // bb0[3]: scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n++         ((*_4).0: alloc::raw_vec::RawVec<u32>) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::<u32>; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n+                                           // ty::Const\n+-                                          // + ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}\n+-                                          // + val: Value(Scalar(<ZST>))\n++                                          // + ty: alloc::raw_vec::RawVec<u32>\n++                                          // + val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } })\n+                                           // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n+-                                          // + user_ty: UserType(1)\n+-                                          // + literal: Const { ty: fn() -> std::vec::Vec<u32> {std::vec::Vec::<u32>::new}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // + user_ty: UserType(0)\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [255], len: Size { raw: 8 } }, size: Size { raw: 8 }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++         ((*_4).1: usize) = const 0usize; // bb0[5]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // ty::Const\n++                                          // + ty: usize\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/liballoc/vec.rs:LL:COL\n++                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n++         _1 = move _2;                    // bb0[6]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n++         StorageDead(_2);                 // bb0[7]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n++         _0 = ();                         // bb0[8]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n++         drop(_1) -> [return: bb2, unwind: bb1]; // bb0[9]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+      }\n+  \n+      bb1 (cleanup): {\n+          resume;                          // bb1[0]: scope 0 at $DIR/inline-into-box-place.rs:7:1: 9:2\n+      }\n+  \n+      bb2: {\n+-         _1 = move _2;                    // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:8:29: 8:43\n+-         StorageDead(_2);                 // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-         _0 = ();                         // bb2[2]: scope 0 at $DIR/inline-into-box-place.rs:7:11: 9:2\n+-         drop(_1) -> [return: bb3, unwind: bb1]; // bb2[3]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-     }\n+- \n+-     bb3: {\n+-         StorageDead(_1);                 // bb3[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n+-         return;                          // bb3[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+-     }\n+- \n+-     bb4 (cleanup): {\n+-         _3 = const alloc::alloc::box_free::<std::vec::Vec<u32>>(move (_2.0: std::ptr::Unique<std::vec::Vec<u32>>)) -> bb1; // bb4[0]: scope 0 at $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // ty::Const\n+-                                          // + ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}\n+-                                          // + val: Value(Scalar(<ZST>))\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/inline-into-box-place.rs:8:42: 8:43\n+-                                          // + literal: Const { ty: unsafe fn(std::ptr::Unique<std::vec::Vec<u32>>) {alloc::alloc::box_free::<std::vec::Vec<u32>>}, val: Value(Scalar(<ZST>)) }\n++         StorageDead(_1);                 // bb2[0]: scope 0 at $DIR/inline-into-box-place.rs:9:1: 9:2\n++         return;                          // bb2[1]: scope 0 at $DIR/inline-into-box-place.rs:9:2: 9:2\n+      }\n+  }\n+  "}, {"sha": "a0db20cbb743bd3438e1eab73e0b14e44b2797a5", "filename": "src/test/mir-opt/inline/inline-into-box-place/64bit/rustc.main.Inline.diff", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e0084922aa78472ddcd71121c470e25b38dc6ff8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e0084922aa78472ddcd71121c470e25b38dc6ff8/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline-into-box-place%2F64bit%2Frustc.main.Inline.diff?ref=e0084922aa78472ddcd71121c470e25b38dc6ff8", "previous_filename": "src/test/mir-opt/inline/inline-into-box-place/rustc.main.Inline.diff"}]}