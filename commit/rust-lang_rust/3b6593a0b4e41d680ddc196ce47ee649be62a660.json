{"sha": "3b6593a0b4e41d680ddc196ce47ee649be62a660", "node_id": "C_kwDOAAsO6NoAKDNiNjU5M2EwYjRlNDFkNjgwZGRjMTk2Y2U0N2VlNjQ5YmU2MmE2NjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-28T04:20:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-28T04:20:16Z"}, "message": "Rollup merge of #107103 - compiler-errors:new-solver-evaluate_obligation, r=lcnr\n\nUse new solver in `evaluate_obligation` query (when new solver is enabled)\n\n(only when `-Ztrait-solver=next`, of course)\n\n... Does this make sense? It seems to me like it should be reasonable, but maybe there's some reason why this is a bad idea.\n\nr? ``@lcnr``\n\nNeeds a perf run because I guess this `solver == TraitSolver::Next` check is on a hot path.", "tree": {"sha": "cd004d5a7c96e8da4ffd779424802ac28e161448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd004d5a7c96e8da4ffd779424802ac28e161448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6593a0b4e41d680ddc196ce47ee649be62a660", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj1KKACRBK7hj4Ov3rIwAAu5EIAFKjXNSrY2/sZnsZ3fs2SFh5\nNgXl1vBQtexAnkcwG21bk7w4ZHwIb7nEAqT6Br6NK6wzSYtPKaWiLRDETjvTZ6XI\nbvv4x5yMpmzN3fhJ83M6I2BtcIbiwbxtwOtl6j8GycZm+D2rBsC08NSqREMW4hAy\nZd73TjOOKWdkgHaSvcq9GFF/S8eEChkeCliJooMHX5EsSZAZhRXPOcEQPTQ1YIfc\nF3AkwiqOgWZkwmZ0Sp8uaokIv/gX3R1phaeLUXNKId4MY+Vg/fTFxXO2S7mobytL\ncOkDGLPL96ZQg+dEoE+yc+41fJygUUBrK2/hH3oadCBW5wQC55us/yLMtyqnEoA=\n=a28v\n-----END PGP SIGNATURE-----\n", "payload": "tree cd004d5a7c96e8da4ffd779424802ac28e161448\nparent 28188d17ba2eb60fb956a22ef4b0cb017dfe66b4\nparent 5bfd90efd121cace34bccdf6fe47578b2202bdf9\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674879616 +0100\ncommitter GitHub <noreply@github.com> 1674879616 +0100\n\nRollup merge of #107103 - compiler-errors:new-solver-evaluate_obligation, r=lcnr\n\nUse new solver in `evaluate_obligation` query (when new solver is enabled)\n\n(only when `-Ztrait-solver=next`, of course)\n\n... Does this make sense? It seems to me like it should be reasonable, but maybe there's some reason why this is a bad idea.\n\nr? ``@lcnr``\n\nNeeds a perf run because I guess this `solver == TraitSolver::Next` check is on a hot path.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6593a0b4e41d680ddc196ce47ee649be62a660", "html_url": "https://github.com/rust-lang/rust/commit/3b6593a0b4e41d680ddc196ce47ee649be62a660", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6593a0b4e41d680ddc196ce47ee649be62a660/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28188d17ba2eb60fb956a22ef4b0cb017dfe66b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/28188d17ba2eb60fb956a22ef4b0cb017dfe66b4", "html_url": "https://github.com/rust-lang/rust/commit/28188d17ba2eb60fb956a22ef4b0cb017dfe66b4"}, {"sha": "5bfd90efd121cace34bccdf6fe47578b2202bdf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfd90efd121cace34bccdf6fe47578b2202bdf9", "html_url": "https://github.com/rust-lang/rust/commit/5bfd90efd121cace34bccdf6fe47578b2202bdf9"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "f183248f2d08b0474e6ef47b7b3ced870c95d53a", "filename": "compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/3b6593a0b4e41d680ddc196ce47ee649be62a660/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6593a0b4e41d680ddc196ce47ee649be62a660/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=3b6593a0b4e41d680ddc196ce47ee649be62a660", "patch": "@@ -1,7 +1,9 @@\n use rustc_middle::ty;\n+use rustc_session::config::TraitSolver;\n \n use crate::infer::canonical::OriginalQueryValues;\n use crate::infer::InferCtxt;\n+use crate::solve::{Certainty, Goal, InferCtxtEvalExt, MaybeCause};\n use crate::traits::{EvaluationResult, OverflowError, PredicateObligation, SelectionContext};\n \n pub trait InferCtxtExt<'tcx> {\n@@ -77,12 +79,38 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n             _ => obligation.param_env.without_const(),\n         };\n \n-        let c_pred = self\n-            .canonicalize_query_keep_static(param_env.and(obligation.predicate), &mut _orig_values);\n-        // Run canonical query. If overflow occurs, rerun from scratch but this time\n-        // in standard trait query mode so that overflow is handled appropriately\n-        // within `SelectionContext`.\n-        self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n+        if self.tcx.sess.opts.unstable_opts.trait_solver != TraitSolver::Next {\n+            let c_pred = self.canonicalize_query_keep_static(\n+                param_env.and(obligation.predicate),\n+                &mut _orig_values,\n+            );\n+            self.tcx.at(obligation.cause.span()).evaluate_obligation(c_pred)\n+        } else {\n+            self.probe(|snapshot| {\n+                if let Ok((_, certainty)) =\n+                    self.evaluate_root_goal(Goal::new(self.tcx, param_env, obligation.predicate))\n+                {\n+                    match certainty {\n+                        Certainty::Yes => {\n+                            if self.opaque_types_added_in_snapshot(snapshot) {\n+                                Ok(EvaluationResult::EvaluatedToOkModuloOpaqueTypes)\n+                            } else if self.region_constraints_added_in_snapshot(snapshot).is_some()\n+                            {\n+                                Ok(EvaluationResult::EvaluatedToOkModuloRegions)\n+                            } else {\n+                                Ok(EvaluationResult::EvaluatedToOk)\n+                            }\n+                        }\n+                        Certainty::Maybe(MaybeCause::Ambiguity) => {\n+                            Ok(EvaluationResult::EvaluatedToAmbig)\n+                        }\n+                        Certainty::Maybe(MaybeCause::Overflow) => Err(OverflowError::Canonical),\n+                    }\n+                } else {\n+                    Ok(EvaluationResult::EvaluatedToErr)\n+                }\n+            })\n+        }\n     }\n \n     // Helper function that canonicalizes and runs the query. If an\n@@ -92,6 +120,9 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> EvaluationResult {\n+        // Run canonical query. If overflow occurs, rerun from scratch but this time\n+        // in standard trait query mode so that overflow is handled appropriately\n+        // within `SelectionContext`.\n         match self.evaluate_obligation(obligation) {\n             Ok(result) => result,\n             Err(OverflowError::Canonical) => {"}]}