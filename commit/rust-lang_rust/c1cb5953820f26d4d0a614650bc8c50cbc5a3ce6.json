{"sha": "c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxY2I1OTUzODIwZjI2ZDRkMGE2MTQ2NTBiYzhjNTBjYmM1YTNjZTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-15T14:37:37Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-15T14:37:37Z"}, "message": "Move to upstream `macro_rules!` model", "tree": {"sha": "01ba67d97ce6f261154df59b268fe924af9add2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01ba67d97ce6f261154df59b268fe924af9add2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "html_url": "https://github.com/rust-lang/rust/commit/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39aae835fd70d06092c1be1add6eef3984439529", "url": "https://api.github.com/repos/rust-lang/rust/commits/39aae835fd70d06092c1be1add6eef3984439529", "html_url": "https://github.com/rust-lang/rust/commit/39aae835fd70d06092c1be1add6eef3984439529"}], "stats": {"total": 594, "additions": 322, "deletions": 272}, "files": [{"sha": "ff2c33f45d18a4ed89a05836d11239bcd16ee059", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -1827,9 +1827,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.1.4\"\n+version = \"1.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"df0cd89993af555540e2436fc6adb8479b0dbe386339a136397952e9c89e17a9\"\n+checksum = \"873186a460627379e7e28880a0d33b729c205634f6f021321f50b323235e62d7\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "59d36fbc1d19dbaa3da63886bcb3e1377bec0511", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -25,3 +25,5 @@ debug = 0 # Set this to 1 or 2 to get more useful backtraces in debugger.\n # chalk-solve = { path = \"../chalk/chalk-solve\" }\n # chalk-ir = { path = \"../chalk/chalk-ir\" }\n # chalk-recursive = { path = \"../chalk/chalk-recursive\" }\n+\n+# ungrammar = { path = \"../ungrammar\" }"}, {"sha": "6cfbd6c9ba8a22f34686db06af989921865eb297", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -144,7 +144,7 @@ mod tests {\n use foo::<|>;\n //- /foo/lib.rs crate:foo\n #[macro_export]\n-macro_rules frobnicate { () => () }\n+macro_rules! frobnicate { () => () }\n \"#,\n             r#\"\n use foo::frobnicate;\n@@ -154,11 +154,11 @@ use foo::frobnicate;\n         check_edit(\n             \"frobnicate!\",\n             r#\"\n-macro_rules frobnicate { () => () }\n+macro_rules! frobnicate { () => () }\n fn main() { frob<|>!(); }\n \"#,\n             r#\"\n-macro_rules frobnicate { () => () }\n+macro_rules! frobnicate { () => () }\n fn main() { frobnicate!(); }\n \"#,\n         );"}, {"sha": "107ad06904d65aeeced67eff1af1939cd70cbe07", "filename": "crates/hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fhas_source.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -110,8 +110,8 @@ impl HasSource for TypeAlias {\n     }\n }\n impl HasSource for MacroDef {\n-    type Ast = ast::MacroCall;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::MacroCall> {\n+    type Ast = ast::MacroRules;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::MacroRules> {\n         InFile {\n             file_id: self.id.ast_id.expect(\"MacroDef without ast_id\").file_id,\n             value: self.id.ast_id.expect(\"MacroDef without ast_id\").to_node(db.upcast()),"}, {"sha": "5959ac4ca9e7b4434675365d67dd8049a6559211", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -723,7 +723,7 @@ to_def_impls![\n     (crate::EnumVariant, ast::Variant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),\n-    (crate::MacroDef, ast::MacroCall, macro_call_to_def), // this one is dubious, not all calls are macros\n+    (crate::MacroDef, ast::MacroRules, macro_rules_to_def),\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n ];\n "}, {"sha": "a333d7aea9da18c6c8eca234d99d715d1ca47289", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -149,7 +149,10 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     // FIXME: use DynMap as well?\n-    pub(super) fn macro_call_to_def(&mut self, src: InFile<ast::MacroCall>) -> Option<MacroDefId> {\n+    pub(super) fn macro_rules_to_def(\n+        &mut self,\n+        src: InFile<ast::MacroRules>,\n+    ) -> Option<MacroDefId> {\n         let kind = MacroDefKind::Declarative;\n         let file_id = src.file_id.original_file(self.db.upcast());\n         let krate = self.file_to_def(file_id)?.krate;"}, {"sha": "bdba4c33ea45859afb21d96400e77bb9a96a56af", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 69, "deletions": 65, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -566,66 +566,52 @@ impl ExprCollector<'_> {\n         syntax_ptr: AstPtr<ast::Expr>,\n         mut collector: F,\n     ) {\n-        if let Some(name) = e.is_macro_rules().map(|it| it.as_name()) {\n-            let mac = MacroDefId {\n-                krate: Some(self.expander.module.krate),\n-                ast_id: Some(self.expander.ast_id(&e)),\n-                kind: MacroDefKind::Declarative,\n-                local_inner: false,\n-            };\n-            self.body.item_scope.define_legacy_macro(name, mac);\n+        // File containing the macro call. Expansion errors will be attached here.\n+        let outer_file = self.expander.current_file_id;\n \n-            // FIXME: do we still need to allocate this as missing ?\n-            collector(self, None);\n-        } else {\n-            // File containing the macro call. Expansion errors will be attached here.\n-            let outer_file = self.expander.current_file_id;\n-\n-            let macro_call = self.expander.to_source(AstPtr::new(&e));\n-            let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n-\n-            match &res.err {\n-                Some(ExpandError::UnresolvedProcMacro) => {\n-                    self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedProcMacro(\n-                        UnresolvedProcMacro {\n-                            file: outer_file,\n-                            node: syntax_ptr.into(),\n-                            precise_location: None,\n-                            macro_name: None,\n-                        },\n-                    ));\n-                }\n-                Some(err) => {\n-                    self.source_map.diagnostics.push(BodyDiagnostic::MacroError(MacroError {\n+        let macro_call = self.expander.to_source(AstPtr::new(&e));\n+        let res = self.expander.enter_expand(self.db, Some(&self.body.item_scope), e);\n+\n+        match &res.err {\n+            Some(ExpandError::UnresolvedProcMacro) => {\n+                self.source_map.diagnostics.push(BodyDiagnostic::UnresolvedProcMacro(\n+                    UnresolvedProcMacro {\n                         file: outer_file,\n                         node: syntax_ptr.into(),\n-                        message: err.to_string(),\n-                    }));\n-                }\n-                None => {}\n+                        precise_location: None,\n+                        macro_name: None,\n+                    },\n+                ));\n+            }\n+            Some(err) => {\n+                self.source_map.diagnostics.push(BodyDiagnostic::MacroError(MacroError {\n+                    file: outer_file,\n+                    node: syntax_ptr.into(),\n+                    message: err.to_string(),\n+                }));\n             }\n+            None => {}\n+        }\n \n-            match res.value {\n-                Some((mark, expansion)) => {\n-                    // FIXME: Statements are too complicated to recover from error for now.\n-                    // It is because we don't have any hygenine for local variable expansion right now.\n-                    if T::can_cast(syntax::SyntaxKind::MACRO_STMTS) && res.err.is_some() {\n-                        self.expander.exit(self.db, mark);\n-                        collector(self, None);\n-                    } else {\n-                        self.source_map\n-                            .expansions\n-                            .insert(macro_call, self.expander.current_file_id);\n+        match res.value {\n+            Some((mark, expansion)) => {\n+                // FIXME: Statements are too complicated to recover from error for now.\n+                // It is because we don't have any hygenine for local variable expansion right now.\n+                if T::can_cast(syntax::SyntaxKind::MACRO_STMTS) && res.err.is_some() {\n+                    self.expander.exit(self.db, mark);\n+                    collector(self, None);\n+                } else {\n+                    self.source_map.expansions.insert(macro_call, self.expander.current_file_id);\n \n-                        let item_tree = self.db.item_tree(self.expander.current_file_id);\n-                        self.item_trees.insert(self.expander.current_file_id, item_tree);\n+                    let item_tree = self.db.item_tree(self.expander.current_file_id);\n+                    self.item_trees.insert(self.expander.current_file_id, item_tree);\n \n-                        collector(self, Some(expansion));\n-                        self.expander.exit(self.db, mark);\n-                    }\n+                    let id = collector(self, Some(expansion));\n+                    self.expander.exit(self.db, mark);\n+                    id\n                 }\n-                None => collector(self, None),\n             }\n+            None => collector(self, None),\n         }\n     }\n \n@@ -785,26 +771,44 @@ impl ExprCollector<'_> {\n                     | ast::Item::ExternCrate(_)\n                     | ast::Item::Module(_)\n                     | ast::Item::MacroCall(_) => return None,\n+                    ast::Item::MacroRules(def) => {\n+                        return Some(Either::Right(def));\n+                    }\n                 };\n \n-                Some((def, name))\n+                Some(Either::Left((def, name)))\n             })\n             .collect::<Vec<_>>();\n \n-        for (def, name) in items {\n-            self.body.item_scope.define_def(def);\n-            if let Some(name) = name {\n-                let vis = crate::visibility::Visibility::Public; // FIXME determine correctly\n-                let has_constructor = match def {\n-                    ModuleDefId::AdtId(AdtId::StructId(s)) => {\n-                        self.db.struct_data(s).variant_data.kind() != StructKind::Record\n+        for either in items {\n+            match either {\n+                Either::Left((def, name)) => {\n+                    self.body.item_scope.define_def(def);\n+                    if let Some(name) = name {\n+                        let vis = crate::visibility::Visibility::Public; // FIXME determine correctly\n+                        let has_constructor = match def {\n+                            ModuleDefId::AdtId(AdtId::StructId(s)) => {\n+                                self.db.struct_data(s).variant_data.kind() != StructKind::Record\n+                            }\n+                            _ => true,\n+                        };\n+                        self.body.item_scope.push_res(\n+                            name.as_name(),\n+                            crate::per_ns::PerNs::from_def(def, vis, has_constructor),\n+                        );\n                     }\n-                    _ => true,\n-                };\n-                self.body.item_scope.push_res(\n-                    name.as_name(),\n-                    crate::per_ns::PerNs::from_def(def, vis, has_constructor),\n-                );\n+                }\n+                Either::Right(e) => {\n+                    let mac = MacroDefId {\n+                        krate: Some(self.expander.module.krate),\n+                        ast_id: Some(self.expander.ast_id(&e)),\n+                        kind: MacroDefKind::Declarative,\n+                        local_inner: false,\n+                    };\n+                    if let Some(name) = e.name() {\n+                        self.body.item_scope.define_legacy_macro(name.as_name(), mac);\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "1c9babf371261260ddb50ada5eb72f7cf18395a7", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -142,6 +142,7 @@ impl ItemTree {\n                 type_aliases,\n                 mods,\n                 macro_calls,\n+                macro_rules,\n                 exprs,\n                 vis,\n                 generics,\n@@ -162,6 +163,7 @@ impl ItemTree {\n             type_aliases.shrink_to_fit();\n             mods.shrink_to_fit();\n             macro_calls.shrink_to_fit();\n+            macro_rules.shrink_to_fit();\n             exprs.shrink_to_fit();\n \n             vis.arena.shrink_to_fit();\n@@ -280,6 +282,7 @@ struct ItemTreeData {\n     type_aliases: Arena<TypeAlias>,\n     mods: Arena<Mod>,\n     macro_calls: Arena<MacroCall>,\n+    macro_rules: Arena<MacroRules>,\n     exprs: Arena<Expr>,\n \n     vis: ItemVisibilities,\n@@ -427,6 +430,7 @@ mod_items! {\n     TypeAlias in type_aliases -> ast::TypeAlias,\n     Mod in mods -> ast::Module,\n     MacroCall in macro_calls -> ast::MacroCall,\n+    MacroRules in macro_rules -> ast::MacroRules,\n }\n \n macro_rules! impl_index {\n@@ -629,17 +633,22 @@ pub enum ModKind {\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MacroCall {\n-    /// For `macro_rules!` declarations, this is the name of the declared macro.\n-    pub name: Option<Name>,\n     /// Path to the called macro.\n     pub path: ModPath,\n+    pub ast_id: FileAstId<ast::MacroCall>,\n+}\n+\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct MacroRules {\n+    /// For `macro_rules!` declarations, this is the name of the declared macro.\n+    pub name: Name,\n     /// Has `#[macro_export]`.\n     pub is_export: bool,\n     /// Has `#[macro_export(local_inner_macros)]`.\n     pub is_local_inner: bool,\n     /// Has `#[rustc_builtin_macro]`.\n     pub is_builtin: bool,\n-    pub ast_id: FileAstId<ast::MacroCall>,\n+    pub ast_id: FileAstId<ast::MacroRules>,\n }\n \n // NB: There's no `FileAstId` for `Expr`. The only case where this would be useful is for array\n@@ -670,7 +679,8 @@ impl ModItem {\n             | ModItem::Static(_)\n             | ModItem::Trait(_)\n             | ModItem::Impl(_)\n-            | ModItem::Mod(_) => None,\n+            | ModItem::Mod(_)\n+            | ModItem::MacroRules(_) => None,\n             ModItem::MacroCall(call) => Some(AssocItem::MacroCall(*call)),\n             ModItem::Const(konst) => Some(AssocItem::Const(*konst)),\n             ModItem::TypeAlias(alias) => Some(AssocItem::TypeAlias(*alias)),\n@@ -697,6 +707,7 @@ impl ModItem {\n             ModItem::TypeAlias(it) => tree[it.index].ast_id().upcast(),\n             ModItem::Mod(it) => tree[it.index].ast_id().upcast(),\n             ModItem::MacroCall(it) => tree[it.index].ast_id().upcast(),\n+            ModItem::MacroRules(it) => tree[it.index].ast_id().upcast(),\n         }\n     }\n }"}, {"sha": "b39d7fb7ac171eab0afd80bbfcab978348f8e0aa", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -84,8 +84,7 @@ impl Ctx {\n             | ast::Item::Fn(_)\n             | ast::Item::TypeAlias(_)\n             | ast::Item::Const(_)\n-            | ast::Item::Static(_)\n-            | ast::Item::MacroCall(_) => {\n+            | ast::Item::Static(_) => {\n                 // Skip this if we're already collecting inner items. We'll descend into all nodes\n                 // already.\n                 if !inner {\n@@ -98,7 +97,11 @@ impl Ctx {\n             ast::Item::Trait(_) | ast::Item::Impl(_) | ast::Item::ExternBlock(_) => {}\n \n             // These don't have inner items.\n-            ast::Item::Module(_) | ast::Item::ExternCrate(_) | ast::Item::Use(_) => {}\n+            ast::Item::Module(_)\n+            | ast::Item::ExternCrate(_)\n+            | ast::Item::Use(_)\n+            | ast::Item::MacroCall(_)\n+            | ast::Item::MacroRules(_) => {}\n         };\n \n         let attrs = Attrs::new(item, &self.hygiene);\n@@ -118,6 +121,7 @@ impl Ctx {\n             )),\n             ast::Item::ExternCrate(ast) => self.lower_extern_crate(ast).map(Into::into),\n             ast::Item::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n+            ast::Item::MacroRules(ast) => self.lower_macro_rules(ast).map(Into::into),\n             ast::Item::ExternBlock(ast) => {\n                 Some(ModItems(self.lower_extern_block(ast).into_iter().collect::<SmallVec<_>>()))\n             }\n@@ -525,9 +529,15 @@ impl Ctx {\n     }\n \n     fn lower_macro_call(&mut self, m: &ast::MacroCall) -> Option<FileItemTreeId<MacroCall>> {\n-        let name = m.name().map(|it| it.as_name());\n-        let attrs = Attrs::new(m, &self.hygiene);\n         let path = ModPath::from_src(m.path()?, &self.hygiene)?;\n+        let ast_id = self.source_ast_id_map.ast_id(m);\n+        let res = MacroCall { path, ast_id };\n+        Some(id(self.data().macro_calls.alloc(res)))\n+    }\n+\n+    fn lower_macro_rules(&mut self, m: &ast::MacroRules) -> Option<FileItemTreeId<MacroRules>> {\n+        let name = m.name().map(|it| it.as_name())?;\n+        let attrs = Attrs::new(m, &self.hygiene);\n \n         let ast_id = self.source_ast_id_map.ast_id(m);\n \n@@ -547,8 +557,8 @@ impl Ctx {\n         };\n \n         let is_builtin = attrs.by_key(\"rustc_builtin_macro\").exists();\n-        let res = MacroCall { name, path, is_export, is_builtin, is_local_inner, ast_id };\n-        Some(id(self.data().macro_calls.alloc(res)))\n+        let res = MacroRules { name, is_export, is_builtin, is_local_inner, ast_id };\n+        Some(id(self.data().macro_rules.alloc(res)))\n     }\n \n     fn lower_extern_block(&mut self, block: &ast::ExternBlock) -> Vec<ModItem> {"}, {"sha": "85cc342c44622ea2554262145cdaa603768c8909", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 28, "deletions": 37, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -11,7 +11,7 @@ use hir_expand::{\n     ast_id_map::FileAstId,\n     builtin_derive::find_builtin_derive,\n     builtin_macro::find_builtin_macro,\n-    name::{name, AsName, Name},\n+    name::{AsName, Name},\n     proc_macro::ProcMacroExpander,\n     HirFileId, MacroCallId, MacroDefId, MacroDefKind,\n };\n@@ -25,7 +25,9 @@ use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n     item_scope::{ImportType, PerNsGlobImports},\n-    item_tree::{self, ItemTree, ItemTreeId, MacroCall, Mod, ModItem, ModKind, StructDefKind},\n+    item_tree::{\n+        self, ItemTree, ItemTreeId, MacroCall, MacroRules, Mod, ModItem, ModKind, StructDefKind,\n+    },\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n         BuiltinShadowMode, CrateDefMap, ModuleData, ModuleOrigin, ResolveMode,\n@@ -972,7 +974,8 @@ impl ModCollector<'_, '_> {\n                         status: PartialResolvedImport::Unresolved,\n                     })\n                 }\n-                ModItem::MacroCall(mac) => self.collect_macro(&self.item_tree[mac]),\n+                ModItem::MacroCall(mac) => self.collect_macro_call(&self.item_tree[mac]),\n+                ModItem::MacroRules(mac) => self.collect_macro_rules(&self.item_tree[mac]),\n                 ModItem::Impl(imp) => {\n                     let module = ModuleId {\n                         krate: self.def_collector.def_map.krate,\n@@ -1276,45 +1279,37 @@ impl ModCollector<'_, '_> {\n         self.def_collector.resolve_proc_macro(&macro_name);\n     }\n \n-    fn collect_macro(&mut self, mac: &MacroCall) {\n-        let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, mac.path.clone());\n+    fn collect_macro_rules(&mut self, mac: &MacroRules) {\n+        let ast_id = InFile::new(self.file_id, mac.ast_id);\n \n-        // Case 0: builtin macros\n+        // Case 1: builtin macros\n         if mac.is_builtin {\n-            if let Some(name) = &mac.name {\n-                let krate = self.def_collector.def_map.krate;\n-                if let Some(macro_id) = find_builtin_macro(name, krate, ast_id.ast_id) {\n-                    self.def_collector.define_macro(\n-                        self.module_id,\n-                        name.clone(),\n-                        macro_id,\n-                        mac.is_export,\n-                    );\n-                    return;\n-                }\n-            }\n-        }\n-\n-        // Case 1: macro rules, define a macro in crate-global mutable scope\n-        if is_macro_rules(&mac.path) {\n-            if let Some(name) = &mac.name {\n-                let macro_id = MacroDefId {\n-                    ast_id: Some(ast_id.ast_id),\n-                    krate: Some(self.def_collector.def_map.krate),\n-                    kind: MacroDefKind::Declarative,\n-                    local_inner: mac.is_local_inner,\n-                };\n+            let krate = self.def_collector.def_map.krate;\n+            if let Some(macro_id) = find_builtin_macro(&mac.name, krate, ast_id) {\n                 self.def_collector.define_macro(\n                     self.module_id,\n-                    name.clone(),\n+                    mac.name.clone(),\n                     macro_id,\n                     mac.is_export,\n                 );\n+                return;\n             }\n-            return;\n         }\n \n-        // Case 2: try to resolve in legacy scope and expand macro_rules\n+        // Case 2: normal `macro_rules!` macro\n+        let macro_id = MacroDefId {\n+            ast_id: Some(ast_id),\n+            krate: Some(self.def_collector.def_map.krate),\n+            kind: MacroDefKind::Declarative,\n+            local_inner: mac.is_local_inner,\n+        };\n+        self.def_collector.define_macro(self.module_id, mac.name.clone(), macro_id, mac.is_export);\n+    }\n+\n+    fn collect_macro_call(&mut self, mac: &MacroCall) {\n+        let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, mac.path.clone());\n+\n+        // Case 1: try to resolve in legacy scope and expand macro_rules\n         if let Some(macro_call_id) =\n             ast_id.as_call_id(self.def_collector.db, self.def_collector.def_map.krate, |path| {\n                 path.as_ident().and_then(|name| {\n@@ -1332,7 +1327,7 @@ impl ModCollector<'_, '_> {\n             return;\n         }\n \n-        // Case 3: resolve in module scope, expand during name resolution.\n+        // Case 2: resolve in module scope, expand during name resolution.\n         // We rewrite simple path `macro_name` to `self::macro_name` to force resolve in module scope only.\n         if ast_id.path.is_ident() {\n             ast_id.path.kind = PathKind::Super(0);\n@@ -1370,10 +1365,6 @@ impl ModCollector<'_, '_> {\n     }\n }\n \n-fn is_macro_rules(path: &ModPath) -> bool {\n-    path.as_ident() == Some(&name![macro_rules])\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::{db::DefDatabase, test_db::TestDB};"}, {"sha": "609925012950b3886679d1c8d93df503a5f1ebc6", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -122,11 +122,9 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n     // https://github.com/rust-lang/rust/blob/614f273e9388ddd7804d5cbc80b8865068a3744e/src/librustc_resolve/macros.rs#L456\n     // We follow what it did anyway :)\n     if segments.len() == 1 && kind == PathKind::Plain {\n-        if let Some(macro_call) = path.syntax().parent().and_then(ast::MacroCall::cast) {\n-            if macro_call.is_bang() {\n-                if let Some(crate_id) = hygiene.local_inner_macros() {\n-                    kind = PathKind::DollarCrate(crate_id);\n-                }\n+        if let Some(_macro_call) = path.syntax().parent().and_then(ast::MacroCall::cast) {\n+            if let Some(crate_id) = hygiene.local_inner_macros() {\n+                kind = PathKind::DollarCrate(crate_id);\n             }\n         }\n     }"}, {"sha": "bd92238257c1f072a3782e2b4180075edf826185", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -63,7 +63,7 @@ macro_rules! register_builtin {\n pub fn find_builtin_macro(\n     ident: &name::Name,\n     krate: CrateId,\n-    ast_id: AstId<ast::MacroCall>,\n+    ast_id: AstId<ast::MacroRules>,\n ) -> Option<MacroDefId> {\n     let kind = find_by_name(ident)?;\n \n@@ -515,20 +515,24 @@ mod tests {\n     fn expand_builtin_macro(ra_fixture: &str) -> String {\n         let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n         let parsed = db.parse(file_id);\n+        let macro_rules: Vec<_> =\n+            parsed.syntax_node().descendants().filter_map(ast::MacroRules::cast).collect();\n         let macro_calls: Vec<_> =\n             parsed.syntax_node().descendants().filter_map(ast::MacroCall::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n \n-        let expander = find_by_name(&macro_calls[0].name().unwrap().as_name()).unwrap();\n+        assert_eq!(macro_rules.len(), 1, \"test must contain exactly 1 `macro_rules!`\");\n+        assert_eq!(macro_calls.len(), 1, \"test must contain exactly 1 macro call\");\n+        let expander = find_by_name(&macro_rules[0].name().unwrap().as_name()).unwrap();\n \n         let krate = CrateId(0);\n         let file_id = match expander {\n             Either::Left(expander) => {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n                     krate: Some(CrateId(0)),\n-                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n+                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules[0]))),\n                     kind: MacroDefKind::BuiltIn(expander),\n                     local_inner: false,\n                 };\n@@ -538,7 +542,7 @@ mod tests {\n                     krate,\n                     kind: MacroCallKind::FnLike(AstId::new(\n                         file_id.into(),\n-                        ast_id_map.ast_id(&macro_calls[1]),\n+                        ast_id_map.ast_id(&macro_calls[0]),\n                     )),\n                 };\n \n@@ -549,12 +553,12 @@ mod tests {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n                     krate: Some(krate),\n-                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n+                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules[0]))),\n                     kind: MacroDefKind::BuiltInEager(expander),\n                     local_inner: false,\n                 };\n \n-                let args = macro_calls[1].token_tree().unwrap();\n+                let args = macro_calls[0].token_tree().unwrap();\n                 let parsed_args = mbe::ast_to_token_tree(&args).unwrap().0;\n \n                 let arg_id = db.intern_eager_expansion({"}, {"sha": "ae3086a95bd9a66b3ec13568b3d6a58f6a8560e4", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -228,7 +228,7 @@ pub struct MacroDefId {\n     // (which will probably require touching this code), we can instead use\n     // that (and also remove the hacks for resolving built-in derives).\n     pub krate: Option<CrateId>,\n-    pub ast_id: Option<AstId<ast::MacroCall>>,\n+    pub ast_id: Option<AstId<ast::MacroRules>>,\n     pub kind: MacroDefKind,\n \n     pub local_inner: bool,"}, {"sha": "de97ec3c206d45eb9b5a2f027e191df2f82e2be9", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -413,7 +413,6 @@ fn infer_local_macro() {\n         expect![[r#\"\n             !0..6 '1usize': usize\n             10..89 '{     ...!(); }': ()\n-            16..65 'macro_...     }': {unknown}\n             74..76 '_a': usize\n         \"#]],\n     );"}, {"sha": "c515313914254b25fda7f66dd695491846aefd20", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -150,13 +150,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 };\n                 Some(node)\n             },\n-            ast::MacroCall(it) => {\n-                match it.path().and_then(|it| it.segment()).and_then(|it| it.name_ref()) {\n-                    Some(path_segment) if path_segment.text() == \"macro_rules\"\n-                    => decl(it),\n-                    _ => None,\n-                }\n-            },\n+            ast::MacroRules(it) => decl(it),\n             _ => None,\n         }\n     }\n@@ -380,7 +374,7 @@ fn very_obsolete() {}\n                         label: \"mc\",\n                         navigation_range: 284..286,\n                         node_range: 271..303,\n-                        kind: MACRO_CALL,\n+                        kind: MACRO_RULES,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -389,7 +383,7 @@ fn very_obsolete() {}\n                         label: \"mcexp\",\n                         navigation_range: 334..339,\n                         node_range: 305..356,\n-                        kind: MACRO_CALL,\n+                        kind: MACRO_RULES,\n                         detail: None,\n                         deprecated: false,\n                     },\n@@ -398,7 +392,7 @@ fn very_obsolete() {}\n                         label: \"mcexp\",\n                         navigation_range: 387..392,\n                         node_range: 358..409,\n-                        kind: MACRO_CALL,\n+                        kind: MACRO_RULES,\n                         detail: None,\n                         deprecated: false,\n                     },"}, {"sha": "675957fff6f1edcdc9ca38ac0fdd8b522e13fc94", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -770,7 +770,7 @@ fn foo() {\n }\n \"#,\n             expect![[r#\"\n-                m1 MACRO_CALL FileId(0) 0..46 29..31 Other\n+                m1 MACRO_RULES FileId(0) 0..46 29..31 Other\n \n                 FileId(0) 63..65 StructLiteral\n                 FileId(0) 73..75 StructLiteral"}, {"sha": "990b0f7d955c885cff29edda9b4833f61329a497", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -74,6 +74,7 @@ pub(crate) fn highlight(\n     let mut stack = HighlightedRangeStack::new();\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n+    let mut current_macro_rules: Option<ast::MacroRules> = None;\n     let mut format_string_highlighter = FormatStringHighlighter::default();\n     let mut macro_rules_highlighter = MacroRulesHighlighter::default();\n     let mut inside_attribute = false;\n@@ -106,28 +107,26 @@ pub(crate) fn highlight(\n                         binding_hash: None,\n                     });\n                 }\n-                if let Some(name) = mc.is_macro_rules() {\n-                    macro_rules_highlighter.init();\n-                    if let Some((highlight, binding_hash)) = highlight_element(\n-                        &sema,\n-                        &mut bindings_shadow_count,\n-                        syntactic_name_ref_highlighting,\n-                        name.syntax().clone().into(),\n-                    ) {\n-                        stack.add(HighlightedRange {\n-                            range: name.syntax().text_range(),\n-                            highlight,\n-                            binding_hash,\n-                        });\n-                    }\n-                }\n                 current_macro_call = Some(mc.clone());\n                 continue;\n             }\n             WalkEvent::Leave(Some(mc)) => {\n-                assert!(current_macro_call == Some(mc));\n+                assert_eq!(current_macro_call, Some(mc));\n                 current_macro_call = None;\n                 format_string_highlighter = FormatStringHighlighter::default();\n+            }\n+            _ => (),\n+        }\n+\n+        match event.clone().map(|it| it.into_node().and_then(ast::MacroRules::cast)) {\n+            WalkEvent::Enter(Some(mac)) => {\n+                macro_rules_highlighter.init();\n+                current_macro_rules = Some(mac);\n+                continue;\n+            }\n+            WalkEvent::Leave(Some(mac)) => {\n+                assert_eq!(current_macro_rules, Some(mac));\n+                current_macro_rules = None;\n                 macro_rules_highlighter = MacroRulesHighlighter::default();\n             }\n             _ => (),\n@@ -163,6 +162,12 @@ pub(crate) fn highlight(\n \n         let range = element.text_range();\n \n+        if current_macro_rules.is_some() {\n+            if let Some(tok) = element.as_token() {\n+                macro_rules_highlighter.advance(tok);\n+            }\n+        }\n+\n         let element_to_highlight = if current_macro_call.is_some() && element.kind() != COMMENT {\n             // Inside a macro -- expand it first\n             let token = match element.clone().into_token() {\n@@ -173,9 +178,6 @@ pub(crate) fn highlight(\n             let parent = token.parent();\n \n             format_string_highlighter.check_for_format_string(&parent);\n-            if let Some(tok) = element.as_token() {\n-                macro_rules_highlighter.advance(tok);\n-            }\n \n             // We only care Name and Name_ref\n             match (token.kind(), parent.kind()) {\n@@ -386,10 +388,14 @@ impl HighlightedRangeStack {\n         let mut res = self.stack.pop().unwrap();\n         res.sort_by_key(|range| range.range.start());\n         // Check that ranges are sorted and disjoint\n-        assert!(res\n-            .iter()\n-            .zip(res.iter().skip(1))\n-            .all(|(left, right)| left.range.end() <= right.range.start()));\n+        for (left, right) in res.iter().zip(res.iter().skip(1)) {\n+            assert!(\n+                left.range.end() <= right.range.start(),\n+                \"left: {:#?}, right: {:#?}\",\n+                left,\n+                right\n+            );\n+        }\n         res\n     }\n }"}, {"sha": "920956b51f0bf85a801a6cd73c0a92176c05a841", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -95,7 +95,7 @@\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"macro injected\">noop!</span><span class=\"punctuation injected\">(</span><span class=\"numeric_literal injected\">1</span><span class=\"punctuation injected\">)</span><span class=\"punctuation injected\">;</span><span class=\"punctuation injected\">\n </span><span class=\"comment documentation\">/// ```</span>\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>expr<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n         <span class=\"punctuation\">$</span>expr\n     <span class=\"punctuation\">}</span>"}, {"sha": "c843b5085d59a50cad5975f3dd696fc2fa727250", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -35,13 +35,13 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">println</span> <span class=\"punctuation\">{</span>\n+<pre><code><span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">println</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">{</span>\n         <span class=\"punctuation\">$</span>crate<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>io<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>_print<span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>crate<span class=\"punctuation\">:</span><span class=\"punctuation\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>arg<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">}</span><span class=\"punctuation\">)</span>\n <span class=\"punctuation\">}</span>\n-#[rustc_builtin_macro]\n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"punctuation\">{</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">,</span> <span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>args<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>"}, {"sha": "0569cf1e5a7f0a28f885712a05ecbf125e722d47", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -125,7 +125,7 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n <span class=\"punctuation\">}</span>\n \n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">def_fn</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">:</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">$</span><span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>tt<span class=\"punctuation\">)</span><span class=\"punctuation\">*</span><span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n@@ -135,13 +135,13 @@\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">noop</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>expr<span class=\"punctuation\">:</span>expr<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">{</span>\n         <span class=\"punctuation\">$</span>expr\n     <span class=\"punctuation\">}</span>\n <span class=\"punctuation\">}</span>\n \n-<span class=\"macro\">macro_rules!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"punctuation\">{</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">keyword_frag</span> <span class=\"punctuation\">{</span>\n     <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>type<span class=\"punctuation\">:</span>ty<span class=\"punctuation\">)</span> <span class=\"operator\">=</span><span class=\"punctuation\">&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">$</span>type<span class=\"punctuation\">)</span>\n <span class=\"punctuation\">}</span>\n "}, {"sha": "d4a774261c5783ba57c7c583410328a2625403f2", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -217,7 +217,7 @@ impl NameClass {\n                     let def: hir::TypeAlias = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n                 },\n-                ast::MacroCall(it) => {\n+                ast::MacroRules(it) => {\n                     let def = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::Macro(def)))\n                 },"}, {"sha": "121063aeab7dc316177f18ef9364b517fa5cdc5c", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -404,13 +404,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n             ast::TypeAlias(it) => decl(it),\n             ast::Const(it) => decl(it),\n             ast::Static(it) => decl(it),\n-            ast::MacroCall(it) => {\n-                if it.is_macro_rules().is_some() {\n-                    decl(it)\n-                } else {\n-                    None\n-                }\n-            },\n+            ast::MacroRules(it) => decl(it),\n             _ => None,\n         }\n     }"}, {"sha": "a80b73db4c47d6c1cba11c6557aeedf0057c2f32", "filename": "crates/mbe/src/mbe_expander.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fmbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fmbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -163,7 +163,7 @@ mod tests {\n     fn create_rules(macro_definition: &str) -> crate::MacroRules {\n         let source_file = ast::SourceFile::parse(macro_definition).ok().unwrap();\n         let macro_definition =\n-            source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+            source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n         let (definition_tt, _) =\n             ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();"}, {"sha": "dff6e98c2da33de06cdde5243e746cf0dcc5c57b", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -48,7 +48,7 @@ mod rule_parsing {\n         let macro_definition = format!(\" macro_rules! m {{ {} }} \", arm_definition);\n         let source_file = ast::SourceFile::parse(&macro_definition).ok().unwrap();\n         let macro_definition =\n-            source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+            source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n         let (definition_tt, _) =\n             ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n@@ -1668,7 +1668,7 @@ impl MacroFixture {\n fn parse_macro_to_tt(ra_fixture: &str) -> tt::Subtree {\n     let source_file = ast::SourceFile::parse(ra_fixture).ok().unwrap();\n     let macro_definition =\n-        source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+        source_file.syntax().descendants().find_map(ast::MacroRules::cast).unwrap();\n \n     let (definition_tt, _) = ast_to_token_tree(&macro_definition.token_tree().unwrap()).unwrap();\n "}, {"sha": "8999829b437fa9e029d433d258eb000751f40527", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -232,6 +232,9 @@ fn items_without_modifiers(p: &mut Parser, m: Marker) -> Result<(), Marker> {\n         T![macro] => {\n             macro_def(p, m);\n         }\n+        IDENT if p.at_contextual_kw(\"macro_rules\") && p.nth(1) == BANG => {\n+            macro_rules(p, m);\n+        }\n         IDENT if p.at_contextual_kw(\"union\") && p.nth(1) == IDENT => {\n             // test union_items\n             // union Foo {}\n@@ -363,6 +366,34 @@ pub(crate) fn item_list(p: &mut Parser) {\n     m.complete(p, ITEM_LIST);\n }\n \n+fn macro_rules(p: &mut Parser, m: Marker) {\n+    assert!(p.at_contextual_kw(\"macro_rules\"));\n+    p.bump_remap(T![macro_rules]);\n+    p.expect(T![!]);\n+\n+    if p.at(IDENT) {\n+        name(p);\n+    }\n+    // Special-case `macro_rules! try`.\n+    // This is a hack until we do proper edition support\n+\n+    // test try_macro_rules\n+    // macro_rules! try { () => {} }\n+    if p.at(T![try]) {\n+        let m = p.start();\n+        p.bump_remap(IDENT);\n+        m.complete(p, NAME);\n+    }\n+\n+    match p.current() {\n+        T!['{'] => {\n+            token_tree(p);\n+        }\n+        _ => p.error(\"expected `{`\"),\n+    }\n+    m.complete(p, MACRO_RULES);\n+}\n+\n // test macro_def\n // macro m { ($i:ident) => {} }\n // macro m($i:ident) {}\n@@ -394,19 +425,6 @@ fn macro_call(p: &mut Parser) -> BlockLike {\n \n pub(super) fn macro_call_after_excl(p: &mut Parser) -> BlockLike {\n     p.expect(T![!]);\n-    if p.at(IDENT) {\n-        name(p);\n-    }\n-    // Special-case `macro_rules! try`.\n-    // This is a hack until we do proper edition support\n-\n-    // test try_macro_rules\n-    // macro_rules! try { () => {} }\n-    if p.at(T![try]) {\n-        let m = p.start();\n-        p.bump_remap(IDENT);\n-        m.complete(p, NAME);\n-    }\n \n     match p.current() {\n         T!['{'] => {"}, {"sha": "5d6ec17a4cc78e84e93a428051bf70e24f6b00ba", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -106,6 +106,7 @@ pub enum SyntaxKind {\n     EXISTENTIAL_KW,\n     UNION_KW,\n     RAW_KW,\n+    MACRO_RULES_KW,\n     INT_NUMBER,\n     FLOAT_NUMBER,\n     CHAR,\n@@ -135,6 +136,8 @@ pub enum SyntaxKind {\n     IMPL,\n     TYPE_ALIAS,\n     MACRO_CALL,\n+    MACRO_RULES,\n+    MACRO_ARM,\n     TOKEN_TREE,\n     MACRO_DEF,\n     PAREN_TYPE,\n@@ -258,7 +261,7 @@ impl SyntaxKind {\n             | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n             | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | STATIC_KW | STRUCT_KW | SUPER_KW\n             | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW | WHERE_KW | WHILE_KW\n-            | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW => true,\n+            | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW | MACRO_RULES_KW => true,\n             _ => false,\n         }\n     }\n@@ -361,4 +364,4 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [lifetime] => { $ crate :: SyntaxKind :: LIFETIME } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime] => { $ crate :: SyntaxKind :: LIFETIME } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }"}, {"sha": "0ad75214fc4221ef8d31f39900cbf67a3f094c09", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -128,7 +128,6 @@ pub struct MacroCall {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for MacroCall {}\n-impl ast::NameOwner for MacroCall {}\n impl MacroCall {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n@@ -273,6 +272,20 @@ impl Impl {\n     pub fn assoc_item_list(&self) -> Option<AssocItemList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MacroRules {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for MacroRules {}\n+impl ast::NameOwner for MacroRules {}\n+impl ast::VisibilityOwner for MacroRules {}\n+impl MacroRules {\n+    pub fn macro_rules_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![macro_rules])\n+    }\n+    pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n+    pub fn token_tree(&self) -> Option<TokenTree> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Module {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1318,6 +1331,7 @@ pub enum Item {\n     Fn(Fn),\n     Impl(Impl),\n     MacroCall(MacroCall),\n+    MacroRules(MacroRules),\n     Module(Module),\n     Static(Static),\n     Struct(Struct),\n@@ -1374,7 +1388,6 @@ pub enum AssocItem {\n     TypeAlias(TypeAlias),\n }\n impl ast::AttrsOwner for AssocItem {}\n-impl ast::NameOwner for AssocItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ExternItem {\n     Fn(Fn),\n@@ -1383,7 +1396,6 @@ pub enum ExternItem {\n     TypeAlias(TypeAlias),\n }\n impl ast::AttrsOwner for ExternItem {}\n-impl ast::NameOwner for ExternItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum GenericParam {\n     ConstParam(ConstParam),\n@@ -1666,6 +1678,17 @@ impl AstNode for Impl {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for MacroRules {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_RULES }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Module {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MODULE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3060,6 +3083,9 @@ impl From<Impl> for Item {\n impl From<MacroCall> for Item {\n     fn from(node: MacroCall) -> Item { Item::MacroCall(node) }\n }\n+impl From<MacroRules> for Item {\n+    fn from(node: MacroRules) -> Item { Item::MacroRules(node) }\n+}\n impl From<Module> for Item {\n     fn from(node: Module) -> Item { Item::Module(node) }\n }\n@@ -3084,8 +3110,8 @@ impl From<Use> for Item {\n impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL | MACRO_CALL | MODULE\n-            | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n+            CONST | ENUM | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL | MACRO_CALL | MACRO_RULES\n+            | MODULE | STATIC | STRUCT | TRAIT | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n     }\n@@ -3098,6 +3124,7 @@ impl AstNode for Item {\n             FN => Item::Fn(Fn { syntax }),\n             IMPL => Item::Impl(Impl { syntax }),\n             MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n+            MACRO_RULES => Item::MacroRules(MacroRules { syntax }),\n             MODULE => Item::Module(Module { syntax }),\n             STATIC => Item::Static(Static { syntax }),\n             STRUCT => Item::Struct(Struct { syntax }),\n@@ -3118,6 +3145,7 @@ impl AstNode for Item {\n             Item::Fn(it) => &it.syntax,\n             Item::Impl(it) => &it.syntax,\n             Item::MacroCall(it) => &it.syntax,\n+            Item::MacroRules(it) => &it.syntax,\n             Item::Module(it) => &it.syntax,\n             Item::Static(it) => &it.syntax,\n             Item::Struct(it) => &it.syntax,\n@@ -3582,6 +3610,11 @@ impl std::fmt::Display for Impl {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for MacroRules {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Module {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "c59a29eab3018d17488befe87f843bec0b76f8c8", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -382,21 +382,6 @@ impl ast::Visibility {\n     }\n }\n \n-impl ast::MacroCall {\n-    pub fn is_macro_rules(&self) -> Option<ast::Name> {\n-        let name_ref = self.path()?.segment()?.name_ref()?;\n-        if name_ref.text() == \"macro_rules\" {\n-            self.name()\n-        } else {\n-            None\n-        }\n-    }\n-\n-    pub fn is_bang(&self) -> bool {\n-        self.is_macro_rules().is_none()\n-    }\n-}\n-\n impl ast::LifetimeParam {\n     pub fn lifetime_bounds(&self) -> impl Iterator<Item = SyntaxToken> {\n         self.syntax()\n@@ -476,5 +461,5 @@ impl ast::DocCommentsOwner for ast::Static {}\n impl ast::DocCommentsOwner for ast::Const {}\n impl ast::DocCommentsOwner for ast::TypeAlias {}\n impl ast::DocCommentsOwner for ast::Impl {}\n-impl ast::DocCommentsOwner for ast::MacroCall {}\n+impl ast::DocCommentsOwner for ast::MacroRules {}\n impl ast::DocCommentsOwner for ast::Use {}"}, {"sha": "d33bde30c59b34cdee0ab22248511adeaeb9248a", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -76,7 +76,7 @@ pub fn type_label(node: &ast::TypeAlias) -> String {\n     label.trim().to_owned()\n }\n \n-pub fn macro_label(node: &ast::MacroCall) -> String {\n+pub fn macro_label(node: &ast::MacroRules) -> String {\n     let name = node.name().map(|name| name.syntax().text().to_string()).unwrap_or_default();\n     let vis = if node.has_atom_attr(\"macro_export\") { \"#[macro_export]\\n\" } else { \"\" };\n     format!(\"{}macro_rules! {}\", vis, name)"}, {"sha": "ce27c3dd96a73df7f17d7e72b1bbe89a22d57546", "filename": "crates/syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -147,8 +147,8 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | CONST | TYPE_ALIAS | STRUCT | ENUM | VARIANT | FN | TRAIT | MODULE\n-        | RECORD_FIELD | STATIC | USE => {\n+        MACRO_CALL | MACRO_RULES | CONST | TYPE_ALIAS | STRUCT | ENUM | VARIANT | FN | TRAIT\n+        | MODULE | RECORD_FIELD | STATIC | USE => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();\n "}, {"sha": "9ad5b12b8b8fe5f542f8cb07bf2262ea63d11823", "filename": "crates/syntax/test_data/parser/err/0002_duplicate_shebang.rast", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0002_duplicate_shebang.rast?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -17,14 +17,17 @@ SOURCE_FILE@0..42\n           IDENT@28..31 \"bin\"\n   ERROR@31..32\n     SLASH@31..32 \"/\"\n-  MACRO_CALL@32..41\n+  MACRO_CALL@32..35\n     PATH@32..35\n       PATH_SEGMENT@32..35\n         NAME_REF@32..35\n           IDENT@32..35 \"env\"\n-    WHITESPACE@35..36 \" \"\n-    NAME@36..41\n-      IDENT@36..41 \"rusti\"\n+  WHITESPACE@35..36 \" \"\n+  MACRO_CALL@36..41\n+    PATH@36..41\n+      PATH_SEGMENT@36..41\n+        NAME_REF@36..41\n+          IDENT@36..41 \"rusti\"\n   WHITESPACE@41..42 \"\\n\"\n error 23..23: expected `[`\n error 23..23: expected an item\n@@ -35,5 +38,8 @@ error 31..31: expected `{`, `[`, `(`\n error 31..31: expected SEMICOLON\n error 31..31: expected an item\n error 35..35: expected BANG\n+error 35..35: expected `{`, `[`, `(`\n+error 35..35: expected SEMICOLON\n+error 41..41: expected BANG\n error 41..41: expected `{`, `[`, `(`\n error 41..41: expected SEMICOLON"}, {"sha": "e4fb32de11c94942c0842220f67e66a17fea3c1f", "filename": "crates/syntax/test_data/parser/inline/ok/0062_mod_contents.rast", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -12,11 +12,8 @@ SOURCE_FILE@0..70\n       L_CURLY@9..10 \"{\"\n       R_CURLY@10..11 \"}\"\n   WHITESPACE@11..12 \"\\n\"\n-  MACRO_CALL@12..31\n-    PATH@12..23\n-      PATH_SEGMENT@12..23\n-        NAME_REF@12..23\n-          IDENT@12..23 \"macro_rules\"\n+  MACRO_RULES@12..31\n+    MACRO_RULES_KW@12..23 \"macro_rules\"\n     BANG@23..24 \"!\"\n     WHITESPACE@24..25 \" \"\n     NAME@25..28"}, {"sha": "e84b9164ff1e00799dc4320dd8f7fab5e160fc28", "filename": "crates/syntax/test_data/parser/inline/ok/0096_no_semi_after_block.rast", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0096_no_semi_after_block.rast?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -82,32 +82,28 @@ SOURCE_FILE@0..167\n           L_CURLY@102..103 \"{\"\n           R_CURLY@103..104 \"}\"\n       WHITESPACE@104..109 \"\\n    \"\n-      EXPR_STMT@109..152\n-        MACRO_CALL@109..152\n-          PATH@109..120\n-            PATH_SEGMENT@109..120\n-              NAME_REF@109..120\n-                IDENT@109..120 \"macro_rules\"\n-          BANG@120..121 \"!\"\n-          WHITESPACE@121..122 \" \"\n-          NAME@122..126\n-            IDENT@122..126 \"test\"\n-          WHITESPACE@126..127 \" \"\n-          TOKEN_TREE@127..152\n-            L_CURLY@127..128 \"{\"\n-            WHITESPACE@128..138 \"\\n         \"\n-            TOKEN_TREE@138..140\n-              L_PAREN@138..139 \"(\"\n-              R_PAREN@139..140 \")\"\n-            WHITESPACE@140..141 \" \"\n-            EQ@141..142 \"=\"\n-            R_ANGLE@142..143 \">\"\n-            WHITESPACE@143..144 \" \"\n-            TOKEN_TREE@144..146\n-              L_CURLY@144..145 \"{\"\n-              R_CURLY@145..146 \"}\"\n-            WHITESPACE@146..151 \"\\n    \"\n-            R_CURLY@151..152 \"}\"\n+      MACRO_RULES@109..152\n+        MACRO_RULES_KW@109..120 \"macro_rules\"\n+        BANG@120..121 \"!\"\n+        WHITESPACE@121..122 \" \"\n+        NAME@122..126\n+          IDENT@122..126 \"test\"\n+        WHITESPACE@126..127 \" \"\n+        TOKEN_TREE@127..152\n+          L_CURLY@127..128 \"{\"\n+          WHITESPACE@128..138 \"\\n         \"\n+          TOKEN_TREE@138..140\n+            L_PAREN@138..139 \"(\"\n+            R_PAREN@139..140 \")\"\n+          WHITESPACE@140..141 \" \"\n+          EQ@141..142 \"=\"\n+          R_ANGLE@142..143 \">\"\n+          WHITESPACE@143..144 \" \"\n+          TOKEN_TREE@144..146\n+            L_CURLY@144..145 \"{\"\n+            R_CURLY@145..146 \"}\"\n+          WHITESPACE@146..151 \"\\n    \"\n+          R_CURLY@151..152 \"}\"\n       WHITESPACE@152..157 \"\\n    \"\n       MACRO_CALL@157..164\n         PATH@157..161"}, {"sha": "d1c22947b5e5dd6ae3644bacabe3a09cc6031789", "filename": "crates/syntax/test_data/parser/inline/ok/0160_try_macro_rules.rast", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0160_try_macro_rules.rast?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -1,9 +1,6 @@\n SOURCE_FILE@0..30\n-  MACRO_CALL@0..29\n-    PATH@0..11\n-      PATH_SEGMENT@0..11\n-        NAME_REF@0..11\n-          IDENT@0..11 \"macro_rules\"\n+  MACRO_RULES@0..29\n+    MACRO_RULES_KW@0..11 \"macro_rules\"\n     BANG@11..12 \"!\"\n     WHITESPACE@12..13 \" \"\n     NAME@13..16"}, {"sha": "87d8ebcba5be6e31e57880b78fd83d41bd909bc2", "filename": "crates/syntax/test_data/parser/ok/0053_outer_attribute_on_macro_rules.rast", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0053_outer_attribute_on_macro_rules.rast", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0053_outer_attribute_on_macro_rules.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0053_outer_attribute_on_macro_rules.rast?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..65\n-  MACRO_CALL@0..64\n+  MACRO_RULES@0..64\n     COMMENT@0..13 \"/// Some docs\"\n     WHITESPACE@13..14 \"\\n\"\n     ATTR@14..29\n@@ -11,10 +11,7 @@ SOURCE_FILE@0..65\n             IDENT@16..28 \"macro_export\"\n       R_BRACK@28..29 \"]\"\n     WHITESPACE@29..30 \"\\n\"\n-    PATH@30..41\n-      PATH_SEGMENT@30..41\n-        NAME_REF@30..41\n-          IDENT@30..41 \"macro_rules\"\n+    MACRO_RULES_KW@30..41 \"macro_rules\"\n     BANG@41..42 \"!\"\n     WHITESPACE@42..43 \" \"\n     NAME@43..46"}, {"sha": "72a4c10f5491505a922023c5c9a9cbb0b10c269b", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=c1cb5953820f26d4d0a614650bc8c50cbc5a3ce6", "patch": "@@ -70,7 +70,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"match\", \"mod\", \"move\", \"mut\", \"pub\", \"ref\", \"return\", \"self\", \"static\", \"struct\", \"super\",\n         \"trait\", \"true\", \"try\", \"type\", \"unsafe\", \"use\", \"where\", \"while\",\n     ],\n-    contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\"],\n+    contextual_keywords: &[\"auto\", \"default\", \"existential\", \"union\", \"raw\", \"macro_rules\"],\n     literals: &[\"INT_NUMBER\", \"FLOAT_NUMBER\", \"CHAR\", \"BYTE\", \"STRING\", \"BYTE_STRING\"],\n     tokens: &[\n         \"ERROR\",\n@@ -98,6 +98,8 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"IMPL\",\n         \"TYPE_ALIAS\",\n         \"MACRO_CALL\",\n+        \"MACRO_RULES\",\n+        \"MACRO_ARM\",\n         \"TOKEN_TREE\",\n         \"MACRO_DEF\",\n         \"PAREN_TYPE\","}]}