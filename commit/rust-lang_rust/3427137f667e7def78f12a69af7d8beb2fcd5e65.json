{"sha": "3427137f667e7def78f12a69af7d8beb2fcd5e65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MjcxMzdmNjY3ZTdkZWY3OGYxMmE2OWFmN2Q4YmViMmZjZDVlNjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T18:41:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-30T18:41:47Z"}, "message": "auto merge of #11217 : eddyb/rust/generic-default-type-params, r=cmr", "tree": {"sha": "29a48dde22730fb4e1a36e10915dcb772a3802d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a48dde22730fb4e1a36e10915dcb772a3802d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3427137f667e7def78f12a69af7d8beb2fcd5e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3427137f667e7def78f12a69af7d8beb2fcd5e65", "html_url": "https://github.com/rust-lang/rust/commit/3427137f667e7def78f12a69af7d8beb2fcd5e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3427137f667e7def78f12a69af7d8beb2fcd5e65/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30e9bbaa2ce0042406c197cee142cbcbcbb7bc64", "url": "https://api.github.com/repos/rust-lang/rust/commits/30e9bbaa2ce0042406c197cee142cbcbcbb7bc64", "html_url": "https://github.com/rust-lang/rust/commit/30e9bbaa2ce0042406c197cee142cbcbcbb7bc64"}, {"sha": "7d967741c388a4c2e8f1e45f350d5a0abb083961", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d967741c388a4c2e8f1e45f350d5a0abb083961", "html_url": "https://github.com/rust-lang/rust/commit/7d967741c388a4c2e8f1e45f350d5a0abb083961"}], "stats": {"total": 614, "additions": 536, "deletions": 78}, "files": [{"sha": "bfb27594108545cdf4b07d0512036e6f0dbf864c", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -48,6 +48,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"log_syntax\", Active),\n     (\"trace_macros\", Active),\n     (\"simd\", Active),\n+    (\"default_type_params\", Active),\n \n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n@@ -234,6 +235,20 @@ impl Visitor<()> for Context {\n         }\n         visit::walk_expr(self, e, ());\n     }\n+\n+    fn visit_generics(&mut self, generics: &ast::Generics, _: ()) {\n+        for type_parameter in generics.ty_params.iter() {\n+            match type_parameter.default {\n+                Some(ty) => {\n+                    self.gate_feature(\"default_type_params\", ty.span,\n+                                      \"default type parameters are \\\n+                                       experimental and possibly buggy\");\n+                }\n+                None => {}\n+            }\n+        }\n+        visit::walk_generics(self, generics, ());\n+    }\n }\n \n pub fn check_crate(sess: Session, crate: &ast::Crate) {"}, {"sha": "c986016206047e15f67f1846c9e6c0ce652e8806", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -573,9 +573,12 @@ pub fn parse_type_param_def_data(data: &[u8], start: uint,\n }\n \n fn parse_type_param_def(st: &mut PState, conv: conv_did) -> ty::TypeParameterDef {\n-    ty::TypeParameterDef {ident: parse_ident(st, ':'),\n-                          def_id: parse_def(st, NominalType, |x,y| conv(x,y)),\n-                          bounds: @parse_bounds(st, |x,y| conv(x,y))}\n+    ty::TypeParameterDef {\n+        ident: parse_ident(st, ':'),\n+        def_id: parse_def(st, NominalType, |x,y| conv(x,y)),\n+        bounds: @parse_bounds(st, |x,y| conv(x,y)),\n+        default: parse_opt(st, |st| parse_ty(st, |x,y| conv(x,y)))\n+    }\n }\n \n fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {"}, {"sha": "9da19d666673f1ab3ba2f8258421da0b047288df", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -421,4 +421,5 @@ fn enc_bounds(w: &mut MemWriter, cx: @ctxt, bs: &ty::ParamBounds) {\n pub fn enc_type_param_def(w: &mut MemWriter, cx: @ctxt, v: &ty::TypeParameterDef) {\n     mywrite!(w, \"{}:{}|\", cx.tcx.sess.str_of(v.ident), (cx.ds)(v.def_id));\n     enc_bounds(w, cx, v.bounds);\n+    enc_opt(w, v.default, |w, t| enc_ty(w, cx, t));\n }"}, {"sha": "89d5ca740120ede60bb51689eefaee90798a7c23", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -86,6 +86,7 @@ pub enum Lint {\n     AttributeUsage,\n     UnknownFeatures,\n     UnknownCrateType,\n+    DefaultTypeParamUsage,\n \n     ManagedHeapMemory,\n     OwnedHeapMemory,\n@@ -359,6 +360,7 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"unknown features found in crate-level #[feature] directives\",\n         default: deny,\n     }),\n+\n     (\"unknown_crate_type\",\n     LintSpec {\n         lint: UnknownCrateType,\n@@ -379,6 +381,13 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"unused result of an expression in a statement\",\n         default: allow,\n     }),\n+\n+     (\"default_type_param_usage\",\n+     LintSpec {\n+         lint: DefaultTypeParamUsage,\n+         desc: \"prevents explicitly setting a type parameter with a default\",\n+         default: deny,\n+     }),\n ];\n \n /*"}, {"sha": "e235e914689e8f6b6bfe485b4b504f50cc1bbce7", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -3931,6 +3931,10 @@ impl Resolver {\n             for bound in type_parameter.bounds.iter() {\n                 self.resolve_type_parameter_bound(type_parameter.id, bound);\n             }\n+            match type_parameter.default {\n+                Some(ty) => self.resolve_type(ty),\n+                None => {}\n+            }\n         }\n     }\n "}, {"sha": "067082992c6fc87554ee60162b78ba4d8438f211", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -164,7 +164,8 @@ impl Subst for ty::TypeParameterDef {\n         ty::TypeParameterDef {\n             ident: self.ident,\n             def_id: self.def_id,\n-            bounds: self.bounds.subst(tcx, substs)\n+            bounds: self.bounds.subst(tcx, substs),\n+            default: self.default.map(|x| x.subst(tcx, substs))\n         }\n     }\n }"}, {"sha": "c5e0600ea57066274e9e413d1e0bb48bcc18e334", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -2000,7 +2000,8 @@ fn trait_metadata(cx: &CrateContext,\n                ppaux::mutability_to_str(mutability) +\n                token::ident_to_str(&ident);\n     // Add type and region parameters\n-    let name = ppaux::parameterized(cx.tcx, name, &substs.regions, substs.tps);\n+    let name = ppaux::parameterized(cx.tcx, name, &substs.regions,\n+                                    substs.tps, def_id, true);\n \n     let (containing_scope, definition_span) =\n         get_namespace_and_span_for_item(cx, def_id, usage_site_span);"}, {"sha": "86456187d1ad1bdfb78ff45a714c7d01f32a1d18", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -330,7 +330,8 @@ pub fn llvm_type_name(cx: &CrateContext,\n         an_enum => { \"enum\" }\n     };\n     let tstr = ppaux::parameterized(cx.tcx, ty::item_path_str(cx.tcx, did),\n-                                    &ty::NonerasedRegions(opt_vec::Empty), tps);\n+                                    &ty::NonerasedRegions(opt_vec::Empty),\n+                                    tps, did, false);\n     if did.crate == 0 {\n         format!(\"{}.{}\", name, tstr)\n     } else {"}, {"sha": "3b5dd67366c5de54bcd9853dfbed190d835cc77a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -855,7 +855,8 @@ impl ToStr for IntVarValue {\n pub struct TypeParameterDef {\n     ident: ast::Ident,\n     def_id: ast::DefId,\n-    bounds: @ParamBounds\n+    bounds: @ParamBounds,\n+    default: Option<ty::t>\n }\n \n #[deriving(Encodable, Decodable, Clone)]"}, {"sha": "144ce99198f4ae4286284b4f656996498379cccb", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -51,6 +51,7 @@\n \n \n use middle::const_eval;\n+use middle::lint;\n use middle::ty::{substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n@@ -195,21 +196,43 @@ fn ast_path_substs<AC:AstConv,RS:RegionScope>(\n     };\n \n     // Convert the type parameters supplied by the user.\n-    let supplied_type_parameter_count =\n-        path.segments.iter().flat_map(|s| s.types.iter()).len();\n-    if decl_generics.type_param_defs.len() != supplied_type_parameter_count {\n-        this.tcx().sess.span_fatal(\n-            path.span,\n-            format!(\"wrong number of type arguments: expected {} but found {}\",\n-                 decl_generics.type_param_defs.len(),\n-                 supplied_type_parameter_count));\n+    let supplied_ty_param_count = path.segments.iter().flat_map(|s| s.types.iter()).len();\n+    let formal_ty_param_count = decl_generics.type_param_defs.len();\n+    let required_ty_param_count = decl_generics.type_param_defs.iter()\n+                                               .take_while(|x| x.default.is_none())\n+                                               .len();\n+    if supplied_ty_param_count < required_ty_param_count {\n+        let expected = if required_ty_param_count < formal_ty_param_count {\n+            \"expected at least\"\n+        } else {\n+            \"expected\"\n+        };\n+        this.tcx().sess.span_fatal(path.span,\n+            format!(\"wrong number of type arguments: {} {} but found {}\",\n+                expected, required_ty_param_count, supplied_ty_param_count));\n+    } else if supplied_ty_param_count > formal_ty_param_count {\n+        let expected = if required_ty_param_count < formal_ty_param_count {\n+            \"expected at most\"\n+        } else {\n+            \"expected\"\n+        };\n+        this.tcx().sess.span_fatal(path.span,\n+            format!(\"wrong number of type arguments: {} {} but found {}\",\n+                expected, formal_ty_param_count, supplied_ty_param_count));\n+    }\n+\n+    if supplied_ty_param_count > required_ty_param_count {\n+        let id = path.segments.iter().flat_map(|s| s.types.iter())\n+                              .nth(required_ty_param_count).unwrap().id;\n+        this.tcx().sess.add_lint(lint::DefaultTypeParamUsage, id, path.span,\n+                                 ~\"provided type arguments with defaults\");\n     }\n-    let tps = path.segments\n-                  .iter()\n-                  .flat_map(|s| s.types.iter())\n-                  .map(|&a_t| ast_ty_to_ty(this, rscope, a_t))\n-                  .collect();\n \n+    let defaults = decl_generics.type_param_defs.slice_from(supplied_ty_param_count)\n+                                .iter().map(|&x| x.default.unwrap());\n+    let tps = path.segments.iter().flat_map(|s| s.types.iter())\n+                            .map(|&a_t| ast_ty_to_ty(this, rscope, a_t))\n+                            .chain(defaults).collect();\n     substs {\n         regions: ty::NonerasedRegions(regions),\n         self_ty: self_ty,"}, {"sha": "5e6e3c95692940c58df925863eee5f055a6f4e2a", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 91, "deletions": 36, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -81,6 +81,7 @@ use middle::const_eval;\n use middle::lang_items::{ExchangeHeapLangItem, GcLangItem};\n use middle::lang_items::{ManagedHeapLangItem};\n use middle::lint::UnreachableCode;\n+use middle::lint;\n use middle::pat_util::pat_id_map;\n use middle::pat_util;\n use middle::subst::Subst;\n@@ -1500,32 +1501,55 @@ fn check_type_parameter_positions_in_path(function_context: @FnCtxt,\n             // Make sure the number of type parameters supplied on the trait\n             // or implementation segment equals the number of type parameters\n             // on the trait or implementation definition.\n-            let trait_type_parameter_count = generics.type_param_defs.len();\n-            let supplied_type_parameter_count = trait_segment.types.len();\n-            if trait_type_parameter_count != supplied_type_parameter_count {\n-                let trait_count_suffix = if trait_type_parameter_count == 1 {\n+            let formal_ty_param_count = generics.type_param_defs.len();\n+            let required_ty_param_count = generics.type_param_defs.iter()\n+                                                  .take_while(|x| x.default.is_none())\n+                                                  .len();\n+            let supplied_ty_param_count = trait_segment.types.len();\n+            if supplied_ty_param_count < required_ty_param_count {\n+                let trait_count_suffix = if required_ty_param_count == 1 {\n                     \"\"\n                 } else {\n                     \"s\"\n                 };\n-                let supplied_count_suffix =\n-                    if supplied_type_parameter_count == 1 {\n-                        \"\"\n-                    } else {\n-                        \"s\"\n-                    };\n-                function_context.tcx()\n-                                .sess\n-                                .span_err(path.span,\n-                                          format!(\"the {} referenced by this \\\n-                                                path has {} type \\\n-                                                parameter{}, but {} type \\\n-                                                parameter{} were supplied\",\n-                                               name,\n-                                               trait_type_parameter_count,\n-                                               trait_count_suffix,\n-                                               supplied_type_parameter_count,\n-                                               supplied_count_suffix))\n+                let supplied_count_suffix = if supplied_ty_param_count == 1 {\n+                    \"\"\n+                } else {\n+                    \"s\"\n+                };\n+                let needs = if required_ty_param_count < generics.type_param_defs.len() {\n+                    \"needs at least\"\n+                } else {\n+                    \"needs\"\n+                };\n+                function_context.tcx().sess.span_err(path.span,\n+                    format!(\"the {} referenced by this path {} {} type \\\n+                            parameter{}, but {} type parameter{} were supplied\",\n+                            name, needs,\n+                            required_ty_param_count, trait_count_suffix,\n+                            supplied_ty_param_count, supplied_count_suffix))\n+            } else if supplied_ty_param_count > formal_ty_param_count {\n+                let trait_count_suffix = if formal_ty_param_count == 1 {\n+                    \"\"\n+                } else {\n+                    \"s\"\n+                };\n+                let supplied_count_suffix = if supplied_ty_param_count == 1 {\n+                    \"\"\n+                } else {\n+                    \"s\"\n+                };\n+                let needs = if required_ty_param_count < generics.type_param_defs.len() {\n+                    \"needs at most\"\n+                } else {\n+                    \"needs\"\n+                };\n+                function_context.tcx().sess.span_err(path.span,\n+                    format!(\"the {} referenced by this path {} {} type \\\n+                            parameter{}, but {} type parameter{} were supplied\",\n+                            name, needs,\n+                            formal_ty_param_count, trait_count_suffix,\n+                            supplied_ty_param_count, supplied_count_suffix))\n             }\n         }\n         _ => {\n@@ -3683,6 +3707,9 @@ pub fn instantiate_path(fcx: @FnCtxt,\n     debug!(\">>> instantiate_path\");\n \n     let ty_param_count = tpt.generics.type_param_defs.len();\n+    let ty_param_req = tpt.generics.type_param_defs.iter()\n+                                                   .take_while(|x| x.default.is_none())\n+                                                   .len();\n     let mut ty_substs_len = 0;\n     for segment in pth.segments.iter() {\n         ty_substs_len += segment.types.len()\n@@ -3720,13 +3747,13 @@ pub fn instantiate_path(fcx: @FnCtxt,\n     // Here we calculate the \"user type parameter count\", which is the number\n     // of type parameters actually manifest in the AST. This will differ from\n     // the internal type parameter count when there are self types involved.\n-    let (user_type_parameter_count, self_parameter_index) = match def {\n+    let (user_ty_param_count, user_ty_param_req, self_parameter_index) = match def {\n         ast::DefStaticMethod(_, provenance @ ast::FromTrait(_), _) => {\n             let generics = generics_of_static_method_container(fcx.ccx.tcx,\n                                                                provenance);\n-            (ty_param_count - 1, Some(generics.type_param_defs.len()))\n+            (ty_param_count - 1, ty_param_req - 1, Some(generics.type_param_defs.len()))\n         }\n-        _ => (ty_param_count, None),\n+        _ => (ty_param_count, ty_param_req, None),\n     };\n \n     // determine values for type parameters, using the values given by\n@@ -3737,35 +3764,63 @@ pub fn instantiate_path(fcx: @FnCtxt,\n         fcx.ccx.tcx.sess.span_err\n             (span, \"this item does not take type parameters\");\n         fcx.infcx().next_ty_vars(ty_param_count)\n-    } else if ty_substs_len > user_type_parameter_count {\n+    } else if ty_substs_len > user_ty_param_count {\n+        let expected = if user_ty_param_req < user_ty_param_count {\n+            \"expected at most\"\n+        } else {\n+            \"expected\"\n+        };\n         fcx.ccx.tcx.sess.span_err\n             (span,\n-             format!(\"too many type parameters provided: expected {}, found {}\",\n-                  user_type_parameter_count, ty_substs_len));\n+             format!(\"too many type parameters provided: {} {}, found {}\",\n+                  expected, user_ty_param_count, ty_substs_len));\n         fcx.infcx().next_ty_vars(ty_param_count)\n-    } else if ty_substs_len < user_type_parameter_count {\n+    } else if ty_substs_len < user_ty_param_req {\n+        let expected = if user_ty_param_req < user_ty_param_count {\n+            \"expected at least\"\n+        } else {\n+            \"expected\"\n+        };\n         fcx.ccx.tcx.sess.span_err\n             (span,\n-             format!(\"not enough type parameters provided: expected {}, found {}\",\n-                  user_type_parameter_count, ty_substs_len));\n+             format!(\"not enough type parameters provided: {} {}, found {}\",\n+                  expected, user_ty_param_req, ty_substs_len));\n         fcx.infcx().next_ty_vars(ty_param_count)\n     } else {\n+        if ty_substs_len > user_ty_param_req {\n+            fcx.tcx().sess.add_lint(lint::DefaultTypeParamUsage, node_id, pth.span,\n+                                    ~\"provided type arguments with defaults\");\n+        }\n+\n         // Build up the list of type parameters, inserting the self parameter\n         // at the appropriate position.\n         let mut result = ~[];\n         let mut pushed = false;\n-        for (i, &ast_type) in pth.segments\n-                                .iter()\n-                                .flat_map(|segment| segment.types.iter())\n-                                .enumerate() {\n+        let defaults = tpt.generics.type_param_defs.iter()\n+                          .enumerate().filter_map(|(i, x)| {\n+            match self_parameter_index {\n+                Some(index) if index == i => None,\n+                _ => Some(x.default)\n+            }\n+        }).skip(ty_substs_len).map(|x| match x {\n+            Some(default) => default,\n+            None => {\n+                fcx.tcx().sess.span_bug(span,\n+                    \"missing default for a not explicitely provided type param\")\n+            }\n+        });\n+        for (i, ty) in pth.segments.iter()\n+                                   .flat_map(|segment| segment.types.iter())\n+                                   .map(|&ast_type| fcx.to_ty(ast_type))\n+                                   .chain(defaults).enumerate() {\n             match self_parameter_index {\n                 Some(index) if index == i => {\n                     result.push(fcx.infcx().next_ty_vars(1)[0]);\n                     pushed = true;\n                 }\n                 _ => {}\n             }\n-            result.push(fcx.to_ty(ast_type))\n+            result.push(ty)\n         }\n \n         // If the self parameter goes at the end, insert it there."}, {"sha": "1077454039deff35131a7eacc3263134706917f2", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -345,7 +345,8 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt, trait_id: ast::NodeId) {\n             bounds: @ty::ParamBounds {\n                 builtin_bounds: ty::EmptyBuiltinBounds(),\n                 trait_bounds: ~[self_trait_ref]\n-            }\n+            },\n+            default: None\n         });\n \n         // add in the type parameters from the method\n@@ -952,10 +953,12 @@ pub fn ty_generics(ccx: &CrateCtxt,\n                     let param_ty = ty::param_ty {idx: base_index + offset,\n                                                  def_id: local_def(param.id)};\n                     let bounds = @compute_bounds(ccx, param_ty, &param.bounds);\n+                    let default = param.default.map(|x| ast_ty_to_ty(ccx, &ExplicitRscope, x));\n                     let def = ty::TypeParameterDef {\n                         ident: param.ident,\n                         def_id: local_def(param.id),\n-                        bounds: bounds\n+                        bounds: bounds,\n+                        default: default\n                     };\n                     debug!(\"def for param: {}\", def.repr(ccx.tcx));\n "}, {"sha": "f391239df330402bd2cfb37e6cb323e19e54f241", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -485,12 +485,13 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_enum(did, ref substs) | ty_struct(did, ref substs) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n-        parameterized(cx, base, &substs.regions, substs.tps)\n+        parameterized(cx, base, &substs.regions, substs.tps, did, false)\n       }\n       ty_trait(did, ref substs, s, mutbl, ref bounds) => {\n         let path = ty::item_path(cx, did);\n         let base = ast_map::path_to_str(path, cx.sess.intr());\n-        let ty = parameterized(cx, base, &substs.regions, substs.tps);\n+        let ty = parameterized(cx, base, &substs.regions,\n+                               substs.tps, did, true);\n         let bound_sep = if bounds.is_empty() { \"\" } else { \":\" };\n         let bound_str = bounds.repr(cx);\n         format!(\"{}{}{}{}{}\", trait_store_to_str(cx, s), mutability_to_str(mutbl), ty,\n@@ -506,7 +507,9 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n pub fn parameterized(cx: ctxt,\n                      base: &str,\n                      regions: &ty::RegionSubsts,\n-                     tps: &[ty::t]) -> ~str {\n+                     tps: &[ty::t],\n+                     did: ast::DefId,\n+                     is_trait: bool) -> ~str {\n \n     let mut strs = ~[];\n     match *regions {\n@@ -518,7 +521,20 @@ pub fn parameterized(cx: ctxt,\n         }\n     }\n \n-    for t in tps.iter() {\n+    let generics = if is_trait {\n+        ty::lookup_trait_def(cx, did).generics\n+    } else {\n+        ty::lookup_item_type(cx, did).generics\n+    };\n+    let ty_params = generics.type_param_defs.iter();\n+    let num_defaults = ty_params.zip(tps.iter()).rev().take_while(|&(def, &actual)| {\n+        match def.default {\n+            Some(default) => default == actual,\n+            None => false\n+        }\n+    }).len();\n+\n+    for t in tps.slice_to(tps.len() - num_defaults).iter() {\n         strs.push(ty_to_str(cx, *t))\n     }\n \n@@ -969,9 +985,11 @@ impl UserString for ty::TraitRef {\n         if tcx.sess.verbose() && self.substs.self_ty.is_some() {\n             let mut all_tps = self.substs.tps.clone();\n             for &t in self.substs.self_ty.iter() { all_tps.push(t); }\n-            parameterized(tcx, base, &self.substs.regions, all_tps)\n+            parameterized(tcx, base, &self.substs.regions,\n+                          all_tps, self.def_id, true)\n         } else {\n-            parameterized(tcx, base, &self.substs.regions, self.substs.tps)\n+            parameterized(tcx, base, &self.substs.regions,\n+                          self.substs.tps, self.def_id, true)\n         }\n     }\n }"}, {"sha": "40ae98791efbd0ab76b9e7e2d0abbfc264c90e24", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -206,7 +206,8 @@ pub enum TyParamBound {\n pub struct TyParam {\n     ident: Ident,\n     id: NodeId,\n-    bounds: OptVec<TyParamBound>\n+    bounds: OptVec<TyParamBound>,\n+    default: Option<P<Ty>>\n }\n \n #[deriving(Clone, Eq, Encodable, Decodable, IterBytes)]"}, {"sha": "9ad4f4f7fac2d4b7006c18d40a5fbbb160b24053", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -66,7 +66,10 @@ pub trait AstBuilder {\n     fn ty_field_imm(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> ast::TypeField;\n     fn strip_bounds(&self, bounds: &Generics) -> Generics;\n \n-    fn typaram(&self, id: ast::Ident, bounds: OptVec<ast::TyParamBound>) -> ast::TyParam;\n+    fn typaram(&self,\n+               id: ast::Ident,\n+               bounds: OptVec<ast::TyParamBound>,\n+               default: Option<P<ast::Ty>>) -> ast::TyParam;\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef;\n     fn typarambound(&self, path: ast::Path) -> ast::TyParamBound;\n@@ -354,8 +357,16 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         })\n     }\n \n-    fn typaram(&self, id: ast::Ident, bounds: OptVec<ast::TyParamBound>) -> ast::TyParam {\n-        ast::TyParam { ident: id, id: ast::DUMMY_NODE_ID, bounds: bounds }\n+    fn typaram(&self,\n+               id: ast::Ident,\n+               bounds: OptVec<ast::TyParamBound>,\n+               default: Option<P<ast::Ty>>) -> ast::TyParam {\n+        ast::TyParam {\n+            ident: id,\n+            id: ast::DUMMY_NODE_ID,\n+            bounds: bounds,\n+            default: default\n+        }\n     }\n \n     // these are strange, and probably shouldn't be used outside of"}, {"sha": "9ebb771f5da5bfe2646052d89f748e6f703e4655", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -375,7 +375,7 @@ impl<'a> TraitDef<'a> {\n             // require the current trait\n             bounds.push(cx.typarambound(trait_path.clone()));\n \n-            trait_generics.ty_params.push(cx.typaram(ty_param.ident, bounds));\n+            trait_generics.ty_params.push(cx.typaram(ty_param.ident, bounds, None));\n         }\n \n         // Create the reference to the trait."}, {"sha": "893a1c68426579cbd73fc3ae687cd2da5f110d42", "filename": "src/libsyntax/ext/deriving/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fty.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -196,7 +196,7 @@ fn mk_ty_param(cx: &ExtCtxt, span: Span, name: &str, bounds: &[Path],\n             let path = b.to_path(cx, span, self_ident, self_generics);\n             cx.typarambound(path)\n         }));\n-    cx.typaram(cx.ident_of(name), bounds)\n+    cx.typaram(cx.ident_of(name), bounds, None)\n }\n \n fn mk_generics(lifetimes: ~[ast::Lifetime],  ty_params: ~[ast::TyParam]) -> Generics {"}, {"sha": "8dac13f1e31a9a307290c79f443271d8ded355d1", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -406,6 +406,7 @@ pub fn fold_ty_param<T: Folder>(tp: &TyParam, fld: &mut T) -> TyParam {\n         ident: tp.ident,\n         id: fld.new_id(tp.id),\n         bounds: tp.bounds.map(|x| fold_ty_param_bound(x, fld)),\n+        default: tp.default.map(|x| fld.fold_ty(x))\n     }\n }\n "}, {"sha": "04a984ba95d92b7dc2fe9b102b3f5cc5490fc603", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -3452,13 +3452,25 @@ impl Parser {\n         return Some(result);\n     }\n \n-    // matches typaram = IDENT optbounds\n+    // matches typaram = IDENT optbounds ( EQ ty )?\n     fn parse_ty_param(&mut self) -> TyParam {\n         let ident = self.parse_ident();\n         let opt_bounds = self.parse_optional_ty_param_bounds();\n         // For typarams we don't care about the difference b/w \"<T>\" and \"<T:>\".\n         let bounds = opt_bounds.unwrap_or_default();\n-        ast::TyParam { ident: ident, id: ast::DUMMY_NODE_ID, bounds: bounds }\n+\n+        let default = if self.token == token::EQ {\n+            self.bump();\n+            Some(self.parse_ty(false))\n+        }\n+        else { None };\n+\n+        TyParam {\n+            ident: ident,\n+            id: ast::DUMMY_NODE_ID,\n+            bounds: bounds,\n+            default: default\n+        }\n     }\n \n     // parse a set of optional generic type parameter declarations\n@@ -3468,9 +3480,17 @@ impl Parser {\n     pub fn parse_generics(&mut self) -> ast::Generics {\n         if self.eat(&token::LT) {\n             let lifetimes = self.parse_lifetimes();\n-            let ty_params = self.parse_seq_to_gt(\n-                Some(token::COMMA),\n-                |p| p.parse_ty_param());\n+            let mut seen_default = false;\n+            let ty_params = self.parse_seq_to_gt(Some(token::COMMA), |p| {\n+                let ty_param = p.parse_ty_param();\n+                if ty_param.default.is_some() {\n+                    seen_default = true;\n+                } else if seen_default {\n+                    p.span_err(p.last_span,\n+                               \"type parameters with a default must be trailing\");\n+                }\n+                ty_param\n+            });\n             ast::Generics { lifetimes: lifetimes, ty_params: ty_params }\n         } else {\n             ast_util::empty_generics()"}, {"sha": "2783284ea8b05a862560f4b9a89ae1b2a07c2f42", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -1905,6 +1905,14 @@ pub fn print_generics(s: &mut State, generics: &ast::Generics) {\n                 let param = generics.ty_params.get(idx);\n                 print_ident(s, param.ident);\n                 print_bounds(s, &param.bounds, false);\n+                match param.default {\n+                    Some(default) => {\n+                        space(&mut s.s);\n+                        word_space(s, \"=\");\n+                        print_type(s, default);\n+                    }\n+                    _ => {}\n+                }\n             }\n         }\n "}, {"sha": "2a6c14f0eaef721d0281d745f43525ae480aecf8", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -470,7 +470,11 @@ pub fn walk_generics<E: Clone, V: Visitor<E>>(visitor: &mut V,\n                                               generics: &Generics,\n                                               env: E) {\n     for type_parameter in generics.ty_params.iter() {\n-        walk_ty_param_bounds(visitor, &type_parameter.bounds, env.clone())\n+        walk_ty_param_bounds(visitor, &type_parameter.bounds, env.clone());\n+        match type_parameter.default {\n+            Some(ty) => visitor.visit_ty(ty, env.clone()),\n+            None => {}\n+        }\n     }\n     walk_lifetime_decls(visitor, &generics.lifetimes, env);\n }"}, {"sha": "b2df2c43c85e54286b1f9dbe58ba51e7d690f592", "filename": "src/test/auxiliary/default_type_params_xc.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+pub struct Heap;\n+\n+pub struct FakeHeap;\n+\n+pub struct FakeVec<T, A = FakeHeap>;"}, {"sha": "82eddf669af7af8d31140773f9a488e3888bd4e5", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -29,9 +29,9 @@ impl Trait<int> for S2 {\n }\n \n fn foo<'a>() {\n-    let _ = S::new::<int,f64>(1, 1.0);    //~ ERROR the impl referenced by this path has 1 type parameter, but 0 type parameters were supplied\n+    let _ = S::new::<int,f64>(1, 1.0);    //~ ERROR the impl referenced by this path needs 1 type parameter, but 0 type parameters were supplied\n     let _ = S::<'a,int>::new::<f64>(1, 1.0);  //~ ERROR expected 0 lifetime parameter(s)\n-    let _: S2 = Trait::new::<int,f64>(1, 1.0);    //~ ERROR the trait referenced by this path has 1 type parameter, but 0 type parameters were supplied\n+    let _: S2 = Trait::new::<int,f64>(1, 1.0);    //~ ERROR the trait referenced by this path needs 1 type parameter, but 0 type parameters were supplied\n     let _: S2 = Trait::<'a,int>::new::<f64>(1, 1.0);   //~ ERROR expected 0 lifetime parameter(s)\n }\n "}, {"sha": "65575d4fa85074b03bc0700e94d78fad293fcf95", "filename": "src/test/compile-fail/gated-default-type-params.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgated-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgated-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-default-type-params.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Heap;\n+\n+struct Vec<T, A = Heap>; //~ ERROR: default type parameters are experimental\n+\n+fn main() {}"}, {"sha": "28e7a37778aeebd0af010046220e07b5e61d35a7", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+struct Foo<A, B, C = (A, B)>;\n+\n+impl<A, B, C = (A, B)> Foo<A, B, C> {\n+    fn new() -> Foo<A, B, C> {Foo}\n+}\n+\n+fn main() {\n+    Foo::<int>::new(); //~ ERROR the impl referenced by this path needs at least 2 type parameters, but 1 type parameter were supplied\n+    //~^ ERROR not enough type parameters provided: expected at least 2, found 1\n+}"}, {"sha": "10404680cdd236aa1927f9a0e13e70e28bf86286", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+struct Heap;\n+\n+struct Vec<T, A = Heap>;\n+\n+impl<T, A = Heap> Vec<T, A> {\n+    fn new() -> Vec<T, A> {Vec}\n+}\n+\n+fn main() {\n+    Vec::<int, Heap, bool>::new(); //~ ERROR the impl referenced by this path needs at most 2 type parameters, but 3 type parameters were supplied\n+    //~^ ERROR too many type parameters provided: expected at most 2, found 3\n+}"}, {"sha": "a70a52992ddc281051235da58b1855ad7a459c3c", "filename": "src/test/compile-fail/generic-non-trailing-defaults.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+struct Heap;\n+\n+struct Vec<A = Heap, T>; //~ ERROR type parameters with a default must be trailing\n+\n+struct Foo<A, B = Vec<C>, C>; //~ ERROR type parameters with a default must be trailing\n+\n+fn main() {}"}, {"sha": "c5badee3bc5aae43324ef3a060795d10463655a5", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+struct Heap;\n+\n+struct Vec<T, A = Heap>;\n+\n+fn main() {\n+    let _: Vec; //~ ERROR wrong number of type arguments: expected at least 1 but found 0\n+}"}, {"sha": "65c0d09ccf4d699963b5d49e8ffc52ef79dc715e", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+struct Heap;\n+\n+struct Vec<T, A = Heap>;\n+\n+fn main() {\n+    let _: Vec<int, Heap, bool>; //~ ERROR wrong number of type arguments: expected at most 2 but found 3\n+}"}, {"sha": "59e6ba87ecbf2011f040ae99e38ac94cda43b306", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+struct A;\n+struct B;\n+struct C;\n+struct Foo<T = A, U = B, V = C>;\n+\n+fn main() {\n+    // Ensure that the printed type doesn't include the default type params...\n+    let _: Foo<int> = ();\n+    //~^ ERROR mismatched types: expected `Foo<int>` but found `()`\n+\n+    // ...even when they're present, but the same types as the defaults.\n+    let _: Foo<int, B, C> = ();\n+    //~^ ERROR mismatched types: expected `Foo<int>` but found `()`\n+\n+    // But not when there's a different type in between.\n+    let _: Foo<A, int, C> = ();\n+    //~^ ERROR mismatched types: expected `Foo<A,int>` but found `()`\n+\n+    // And don't print <> at all when there's just defaults.\n+    let _: Foo<A, B, C> = ();\n+    //~^ ERROR mismatched types: expected `Foo` but found `()`\n+}"}, {"sha": "e8cacb02de8b5529f9a178d0c2f783d55c888e41", "filename": "src/test/compile-fail/lint-default-type-param-usage.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Flint-default-type-param-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Fcompile-fail%2Flint-default-type-param-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-default-type-param-usage.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[feature(default_type_params)];\n+\n+#[deny(default_type_param_usage)];\n+\n+pub struct Heap;\n+\n+pub struct Vec<T, A = Heap>;\n+\n+pub struct FooAlloc;\n+\n+pub type VecFoo<T> = Vec<T, FooAlloc>; //~ ERROR provided type arguments with defaults\n+\n+fn main() {}"}, {"sha": "b90b8f38019c7b2d84ae841ce5a55bb1820f5836", "filename": "src/test/run-pass/generic-default-type-params-cross-crate.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:default_type_params_xc.rs\n+\n+// xfail-fast #[feature] doesn't work with check-fast\n+#[feature(default_type_params)];\n+\n+#[allow(default_type_param_usage)];\n+\n+extern mod default_type_params_xc;\n+\n+struct Vec<T, A = default_type_params_xc::Heap>;\n+\n+struct Foo;\n+\n+fn main() {\n+    let _a = Vec::<int>;\n+    let _b = Vec::<int, default_type_params_xc::FakeHeap>;\n+    let _c = default_type_params_xc::FakeVec::<int>;\n+    let _d = default_type_params_xc::FakeVec::<int, Foo>;\n+}"}, {"sha": "bb5a923ce9e1083869398ce7d96f5f3bd20b33a3", "filename": "src/test/run-pass/generic-default-type-params.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3427137f667e7def78f12a69af7d8beb2fcd5e65/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs?ref=3427137f667e7def78f12a69af7d8beb2fcd5e65", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast #[feature] doesn't work with check-fast\n+#[feature(default_type_params)];\n+\n+#[allow(default_type_param_usage)];\n+\n+struct Foo<A = (int, char)> {\n+    a: A\n+}\n+\n+impl Foo<int> {\n+    fn bar_int(&self) -> int {\n+        self.a\n+    }\n+}\n+\n+impl Foo<char> {\n+    fn bar_char(&self) -> char {\n+        self.a\n+    }\n+}\n+\n+impl Foo {\n+    fn bar(&self) {\n+        let (i, c): (int, char) = self.a;\n+        assert_eq!(Foo { a: i }.bar_int(), i);\n+        assert_eq!(Foo { a: c }.bar_char(), c);\n+    }\n+}\n+\n+impl<A: Clone> Foo<A> {\n+    fn baz(&self) -> A {\n+        self.a.clone()\n+    }\n+}\n+\n+fn default_foo(x: Foo) {\n+    let (i, c): (int, char) = x.a;\n+    assert_eq!(i, 1);\n+    assert_eq!(c, 'a');\n+\n+    x.bar();\n+    assert_eq!(x.baz(), (1, 'a'));\n+}\n+\n+fn main() {\n+    default_foo(Foo { a: (1, 'a') });\n+}"}]}