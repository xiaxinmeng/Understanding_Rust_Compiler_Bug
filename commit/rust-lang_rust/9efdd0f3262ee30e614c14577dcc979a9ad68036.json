{"sha": "9efdd0f3262ee30e614c14577dcc979a9ad68036", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZmRkMGYzMjYyZWUzMGU2MTRjMTQ1NzdkY2M5NzlhOWFkNjgwMzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-19T04:18:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:48Z"}, "message": "Merge ast::proto_shared and ast::proto_closure\n\nNow they are both just proto_shared and proto_shared takes an\nargument indicating that it is sugared as 'lambda'", "tree": {"sha": "ebefd06eb8533e45014663ef4060fea0deaa8e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebefd06eb8533e45014663ef4060fea0deaa8e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9efdd0f3262ee30e614c14577dcc979a9ad68036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9efdd0f3262ee30e614c14577dcc979a9ad68036", "html_url": "https://github.com/rust-lang/rust/commit/9efdd0f3262ee30e614c14577dcc979a9ad68036", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9efdd0f3262ee30e614c14577dcc979a9ad68036/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b30a06abe617f710b4d62aa134bc2af326b8f24", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b30a06abe617f710b4d62aa134bc2af326b8f24", "html_url": "https://github.com/rust-lang/rust/commit/4b30a06abe617f710b4d62aa134bc2af326b8f24"}], "stats": {"total": 106, "additions": 62, "deletions": 44}, "files": [{"sha": "38afc23b32a0e98cbbf7ad1e6643ebded3abebb8", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -192,7 +192,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n          il: ast::il_normal,\n          cf: ast::return_val,\n          constraints: []};\n-    let proto = ast::proto_shared;\n+    let proto = ast::proto_bare;\n \n     // The vector of test_descs for this crate\n     let test_descs = mk_test_desc_vec(cx);\n@@ -214,7 +214,7 @@ fn mk_tests(cx: test_ctxt) -> @ast::item {\n }\n \n fn empty_fn_ty() -> ast::ty {\n-    let proto = ast::proto_shared;\n+    let proto = ast::proto_bare;\n     let input_ty = [];\n     let ret_ty = @nospan(ast::ty_nil);\n     let cf = ast::return_val;"}, {"sha": "0129c91f00cc3529ff90f4fc0c27836717ef06c0", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -242,7 +242,8 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n       }\n       'F' {\n         let func = parse_ty_fn(st, sd);\n-        ret ty::mk_fn(st.tcx, ast::proto_shared, func.args, func.ty, func.cf,\n+        ret ty::mk_fn(st.tcx, ast::proto_shared(ast::sugar_normal),\n+                      func.args, func.ty, func.cf,\n                       func.cs);\n       }\n       'f' {"}, {"sha": "6f8d7b3b3de0dd1f2fbcea783314077130ed2c8a", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -195,7 +195,7 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n fn enc_proto(w: io::writer, proto: proto) {\n     alt proto {\n       proto_iter. { w.write_char('W'); }\n-      proto_shared. { w.write_char('F'); }\n+      proto_shared(_) { w.write_char('F'); }\n       proto_block. { w.write_char('B'); }\n       proto_bare. { w.write_char('f'); }\n     }"}, {"sha": "9d170a684809050cf6b808a3dfec56ea86cfb9dc", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -71,7 +71,7 @@ fn visit_fn(cx: @ctx, f: ast::_fn, _tp: [ast::ty_param], sp: span,\n \n     let bs = alt f.proto {\n       // Blocks need to obey any restrictions from the enclosing scope.\n-      ast::proto_block. | ast::proto_closure. { sc.bs }\n+      ast::proto_block. | ast::proto_shared(_) { sc.bs }\n       // Non capturing functions start out fresh.\n       _ { [] }\n     };"}, {"sha": "1bd4f8f0f15a21c5be2e19f2dd68757c0588dd1c", "filename": "src/comp/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffreevars.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -36,7 +36,8 @@ fn collect_freevars(def_map: resolve::def_map, walker: fn@(visit::vt<int>)) ->\n             alt expr.node {\n               ast::expr_fn(f) {\n                 if f.proto == ast::proto_block ||\n-                       f.proto == ast::proto_closure {\n+                    f.proto == ast::proto_shared(ast::sugar_normal) ||\n+                    f.proto == ast::proto_shared(ast::sugar_sexy) {\n                     visit::visit_expr(expr, depth + 1, v);\n                 }\n               }"}, {"sha": "2d3fcb46406db2c57cf6480b48e7fc87eb98dafb", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -595,7 +595,6 @@ fn lookup_in_scope_strict(e: env, sc: scopes, sp: span, name: ident,\n fn scope_is_fn(sc: scope) -> bool {\n     ret alt sc {\n           scope_fn(_, ast::proto_iter., _) |\n-          scope_fn(_, ast::proto_shared., _) |\n           scope_fn(_, ast::proto_bare., _) |\n           scope_native_item(_) {\n             true\n@@ -607,7 +606,7 @@ fn scope_is_fn(sc: scope) -> bool {\n fn scope_closes(sc: scope) -> option::t<bool> {\n     alt sc {\n       scope_fn(_, ast::proto_block., _) | scope_loop(_, true) { some(true) }\n-      scope_fn(_, ast::proto_closure., _) { some(false) }\n+      scope_fn(_, ast::proto_shared(_), _) { some(false) }\n       _ { none }\n     }\n }"}, {"sha": "de5c3cb5398c235ec1e1748b86d6000ef4c4b8df", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -2250,10 +2250,12 @@ fn trans_expr_fn(bcx: @block_ctxt, f: ast::_fn, sp: span,\n     let s = mangle_internal_name_by_path(ccx, sub_cx.path);\n     let llfn = decl_internal_cdecl_fn(ccx.llmod, s, llfnty);\n \n-    let copying = f.proto == ast::proto_closure;\n+    let copying =\n+        f.proto == ast::proto_shared(ast::sugar_normal)\n+        || f.proto == ast::proto_shared(ast::sugar_sexy);\n     let env;\n     alt f.proto {\n-      ast::proto_block. | ast::proto_closure. {\n+      ast::proto_block. | ast::proto_shared(_) {\n         let upvars = get_freevars(ccx.tcx, id);\n         let env_r = build_closure(bcx, upvars, copying);\n         env = env_r.ptr;\n@@ -5349,7 +5351,8 @@ fn trans_res_ctor(cx: @local_ctxt, sp: span, dtor: ast::_fn,\n     }\n     let fcx = new_fn_ctxt(cx, sp, llctor_decl);\n     let ret_t = ty::ret_ty_of_fn(cx.ccx.tcx, ctor_id);\n-    create_llargs_for_fn_args(fcx, ast::proto_shared, none::<ty::t>, ret_t,\n+    create_llargs_for_fn_args(fcx, ast::proto_shared(ast::sugar_normal),\n+                              none::<ty::t>, ret_t,\n                               dtor.decl.inputs, ty_params);\n     let bcx = new_top_block_ctxt(fcx);\n     let lltop = bcx.llbb;\n@@ -5409,7 +5412,8 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n       }\n     }\n     let fcx = new_fn_ctxt(cx, variant.span, llfndecl);\n-    create_llargs_for_fn_args(fcx, ast::proto_shared, none::<ty::t>,\n+    create_llargs_for_fn_args(fcx, ast::proto_shared(ast::sugar_normal),\n+                              none::<ty::t>,\n                               ty::ret_ty_of_fn(cx.ccx.tcx, variant.node.id),\n                               fn_args, ty_params);\n     let ty_param_substs: [ty::t] = [];\n@@ -5616,7 +5620,8 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let nt = ty::mk_nil(ccx.tcx);\n         check non_ty_var(ccx, nt);\n \n-        let llfty = type_of_fn(ccx, sp, ast::proto_shared, false, false,\n+        let llfty = type_of_fn(ccx, sp, ast::proto_shared(ast::sugar_normal),\n+                               false, false,\n                                [vecarg_ty], nt, 0u);\n         let llfdecl = decl_fn(ccx.llmod, \"_rust_main\",\n                               lib::llvm::LLVMCCallConv, llfty);\n@@ -5729,7 +5734,8 @@ fn native_fn_wrapper_type(cx: @crate_ctxt, sp: span, ty_param_count: uint,\n     alt ty::struct(cx.tcx, x) {\n       ty::ty_native_fn(abi, args, out) {\n         check non_ty_var(cx, out);\n-        ret type_of_fn(cx, sp, ast::proto_shared, false, false, args, out,\n+        ret type_of_fn(cx, sp, ast::proto_shared(ast::sugar_normal),\n+                       false, false, args, out,\n                        ty_param_count);\n       }\n     }"}, {"sha": "4caa38a7421b851c783a3113f9794d463aaa8e17", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -340,7 +340,8 @@ fn get_res_dtor(ccx: @crate_ctxt, sp: span, did: ast::def_id, inner_t: ty::t)\n     let nil_res = ty::mk_nil(ccx.tcx);\n     // FIXME: Silly check -- mk_nil should have a postcondition\n     check non_ty_var(ccx, nil_res);\n-    let f_t = type_of_fn(ccx, sp, ast::proto_shared, false, false,\n+    let f_t = type_of_fn(ccx, sp, ast::proto_shared(ast::sugar_normal),\n+                         false, false,\n                          [{mode: ast::by_ref, ty: inner_t}],\n                          nil_res, params);\n     ret trans::get_extern_const(ccx.externs, ccx.llmod,"}, {"sha": "6103e3ec4554f706a8c9d01d2f5e2a1faba3fe72", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -52,7 +52,8 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n     let lltop = bcx.llbb;\n \n     // Both regular arguments and type parameters are handled here.\n-    create_llargs_for_fn_args(fcx, ast::proto_shared, none::<ty::t>,\n+    create_llargs_for_fn_args(fcx, ast::proto_shared(ast::sugar_normal),\n+                              none::<ty::t>,\n                               ty::ret_ty_of_fn(ccx.tcx, ctor_id), fn_args,\n                               ty_params);\n     let arg_tys: [ty::arg] = arg_tys_of_fn(ccx, ctor_id);"}, {"sha": "47bfa483e4db0db60ae79ee32720cc07e0c0c4a9", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -1012,8 +1012,7 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n         result = alt proto {\n           ast::proto_iter. { ast::kind_shared }\n           ast::proto_block. { ast::kind_pinned }\n-          ast::proto_closure. { ast::kind_shared }\n-          ast::proto_shared. { ast::kind_shared }\n+          ast::proto_shared(_) { ast::kind_shared }\n           ast::proto_bare. { ast::kind_unique }\n         };\n       }\n@@ -1616,7 +1615,10 @@ fn ty_fn_args(cx: ctxt, fty: t) -> [arg] {\n fn ty_fn_proto(cx: ctxt, fty: t) -> ast::proto {\n     alt struct(cx, fty) {\n       ty::ty_fn(p, _, _, _, _) { ret p; }\n-      ty::ty_native_fn(_, _, _) { ret ast::proto_shared; }\n+      ty::ty_native_fn(_, _, _) {\n+        // FIXME: This should probably be proto_bare\n+        ret ast::proto_shared(ast::sugar_normal);\n+      }\n       _ { cx.sess.bug(\"ty_fn_proto() called on non-fn type\"); }\n     }\n }\n@@ -2031,7 +2033,7 @@ mod unify {\n                 // Every function type is a subtype of block\n                 false\n               }\n-              ast::proto_closure. | ast::proto_shared. {\n+              ast::proto_shared(_) {\n                 a_proto == ast::proto_block\n               }\n               ast::proto_bare. {"}, {"sha": "389bc3e67229d29ebfa39bc8ca496b15d42e1a61", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -477,10 +477,9 @@ mod write {\n // code. This is needed because fn and lambda have fn type while iter\n // has iter type and block has block type. This may end up changing.\n fn proto_to_ty_proto(proto: ast::proto) -> ast::proto {\n-    ret alt proto {\n-          ast::proto_iter. | ast::proto_block. | ast::proto_bare. { proto }\n-          _ { ast::proto_shared }\n-        };\n+    // FIXME: This is no longer needed since fn@ and lambda have\n+    // the same type\n+    proto\n }\n \n // Item collection - a pair of bootstrap passes:\n@@ -612,7 +611,8 @@ mod collect {\n         }\n \n         let t_fn =\n-            ty::mk_fn(cx.tcx, ast::proto_shared, t_inputs, t_obj.ty,\n+            ty::mk_fn(cx.tcx, ast::proto_shared(ast::sugar_normal),\n+                      t_inputs, t_obj.ty,\n                       ast::return_val, []);\n         let tpt = {kinds: ty_param_kinds(ty_params), ty: t_fn};\n         cx.tcx.tcache.insert(local_def(ctor_id), tpt);\n@@ -723,7 +723,8 @@ mod collect {\n                 let tag_t = ty::mk_tag(cx.tcx, tag_id, ty_param_tys);\n                 // FIXME: this will be different for constrained types\n                 result_ty =\n-                    ty::mk_fn(cx.tcx, ast::proto_shared, args, tag_t,\n+                    ty::mk_fn(cx.tcx, ast::proto_shared(ast::sugar_normal),\n+                              args, tag_t,\n                               ast::return_val, []);\n             }\n             let tpt = {kinds: ty_param_kinds(ty_params), ty: result_ty};\n@@ -793,10 +794,12 @@ mod collect {\n                 ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n                            mk_ty_params(cx, tps));\n             let t_ctor =\n-                ty::mk_fn(cx.tcx, ast::proto_shared, [t_arg], t_res,\n+                ty::mk_fn(cx.tcx, ast::proto_shared(ast::sugar_normal),\n+                          [t_arg], t_res,\n                           ast::return_val, []);\n             let t_dtor =\n-                ty::mk_fn(cx.tcx, ast::proto_shared, [t_arg],\n+                ty::mk_fn(cx.tcx, ast::proto_shared(ast::sugar_normal),\n+                          [t_arg],\n                           ty::mk_nil(cx.tcx),\n                           ast::return_val, []);\n             write::ty_only(cx.tcx, it.id, t_res);\n@@ -2092,7 +2095,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             constrs = constrs_;\n           }\n           ty::ty_native_fn(_, arg_tys_, rt_) {\n-            proto = ast::proto_shared;\n+            proto = ast::proto_shared(ast::sugar_normal);\n             arg_tys = arg_tys_;\n             rt = rt_;\n             cf = ast::return_val;\n@@ -2117,7 +2120,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         fn lower_bound_proto(proto: ast::proto) -> ast::proto {\n             // FIXME: This is right for bare fns, possibly not others\n             alt proto {\n-              ast::proto_bare. { ast::proto_shared }\n+              ast::proto_bare. { ast::proto_shared(ast::sugar_normal) }\n               _ { proto }\n             }\n         }\n@@ -2568,7 +2571,7 @@ fn check_const(ccx: @crate_ctxt, _sp: span, e: @ast::expr, id: ast::node_id) {\n     let fcx: @fn_ctxt =\n         @{ret_ty: rty,\n           purity: ast::pure_fn,\n-          proto: ast::proto_shared,\n+          proto: ast::proto_shared(ast::sugar_normal),\n           var_bindings: ty::unify::mk_var_bindings(),\n           locals: new_int_hash::<int>(),\n           local_names: new_int_hash::<ast::ident>(),"}, {"sha": "80d6e7cb754c26bbe1503a0d5ec8f947d802f5db", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -103,13 +103,16 @@ tag kind { kind_pinned; kind_shared; kind_unique; }\n \n tag _auth { auth_unsafe; }\n \n+tag proto_sugar {\n+    sugar_normal;\n+    sugar_sexy;\n+}\n+\n tag proto {\n     proto_iter;\n-    proto_shared;\n-    proto_block;\n-    // FIXME: Merge with proto_shared\n-    proto_closure;\n     proto_bare;\n+    proto_shared(proto_sugar);\n+    proto_block;\n }\n \n tag binop {"}, {"sha": "4d48fd3c653911a12a4f318650506b35ec94e8d6", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -842,7 +842,7 @@ fn parse_bottom_expr(p: parser) -> @ast::expr {\n     } else if eat_word(p, \"block\") {\n         ret parse_fn_expr(p, ast::proto_block);\n     } else if eat_word(p, \"lambda\") {\n-        ret parse_fn_expr(p, ast::proto_closure);\n+        ret parse_fn_expr(p, ast::proto_shared(ast::sugar_sexy));\n     } else if eat_word(p, \"unchecked\") {\n         ret parse_block_expr(p, lo, ast::unchecked_blk);\n     } else if eat_word(p, \"unsafe\") {\n@@ -1901,7 +1901,8 @@ fn parse_item_res(p: parser, attrs: [ast::attribute]) -> @ast::item {\n          il: ast::il_normal,\n          cf: ast::return_val,\n          constraints: []};\n-    let f = {decl: decl, proto: ast::proto_shared, body: dtor};\n+    let f = {decl: decl, proto: ast::proto_shared(ast::sugar_normal),\n+             body: dtor};\n     ret mk_item(p, lo, dtor.span.hi, ident,\n                 ast::item_res(f, p.get_id(), ty_params, p.get_id()), attrs);\n }\n@@ -2140,7 +2141,7 @@ fn parse_fn_item_proto(p: parser) -> ast::proto {\n         ast::proto_bare\n     } else if p.peek() == token::AT {\n         p.bump();\n-        ast::proto_shared\n+        ast::proto_shared(ast::sugar_normal)\n     } else {\n         ast::proto_bare\n     }\n@@ -2152,7 +2153,7 @@ fn parse_fn_ty_proto(p: parser) -> ast::proto {\n         ast::proto_bare\n     } else if p.peek() == token::AT {\n         p.bump();\n-        ast::proto_shared\n+        ast::proto_shared(ast::sugar_normal)\n     } else {\n         ast::proto_bare\n     }\n@@ -2164,7 +2165,7 @@ fn parse_fn_anon_proto(p: parser) -> ast::proto {\n         ast::proto_bare\n     } else if p.peek() == token::AT {\n         p.bump();\n-        ast::proto_shared\n+        ast::proto_shared(ast::sugar_normal)\n     } else {\n         ast::proto_bare\n     }"}, {"sha": "76a2fd1d843a54fc91564f963d0a2900c56a6414", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -1643,11 +1643,11 @@ fn ast_fn_constrs_str(decl: ast::fn_decl, constrs: [@ast::constr]) -> str {\n \n fn proto_to_str(p: ast::proto) -> str {\n     ret alt p {\n-          ast::proto_shared. { \"fn@\" }\n           ast::proto_iter. { \"iter\" }\n-          ast::proto_block. { \"block\" }\n-          ast::proto_closure. { \"lambda\" }\n           ast::proto_bare. { \"fn\" }\n+          ast::proto_block. { \"block\" }\n+          ast::proto_shared(ast::sugar_normal.) { \"fn@\" }\n+          ast::proto_shared(ast::sugar_sexy.) { \"lambda\" }\n         };\n }\n "}, {"sha": "b9197f1a63fdea2058c236f3c8dbed3a8231a0ef", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9efdd0f3262ee30e614c14577dcc979a9ad68036/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=9efdd0f3262ee30e614c14577dcc979a9ad68036", "patch": "@@ -129,7 +129,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n             fn_to_str(cx, proto, none, inputs, output, cf, constrs)\n           }\n           ty_native_fn(_, inputs, output) {\n-            fn_to_str(cx, ast::proto_shared, none, inputs, output,\n+            fn_to_str(cx, ast::proto_bare, none, inputs, output,\n                       ast::return_val, [])\n           }\n           ty_obj(meths) {"}]}