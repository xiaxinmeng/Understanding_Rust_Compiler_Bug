{"sha": "64755b5e1f68290a2518b0bbc2f0007f95cd2632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NzU1YjVlMWY2ODI5MGEyNTE4YjBiYmMyZjAwMDdmOTVjZDI2MzI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-17T17:19:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-17T17:19:55Z"}, "message": "Merge #3199\n\n3199: Use anyhow r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8bb0a64574c42deb666494e7f1c158b9cae9e8b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb0a64574c42deb666494e7f1c158b9cae9e8b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64755b5e1f68290a2518b0bbc2f0007f95cd2632", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeSss7CRBK7hj4Ov3rIwAAdHIIAAj/wvfYGSJ3me8RkuFpbeDw\nu0pkv9bm/VycjqcNjRQVqtRubqLsq/vBWhk9xTsRLURJAxT9LAcr+eLVq921UlAI\n9AuImo1jCaHoTbBJWTrQe81z02IFjrlx50QplpyI4ghw5JREcFRXcEGona5YOytm\npX0G3GBVXy4UmEqBHEnutGt4jzfLpnkCQPRDOFOFUAK2ATj5UuxPPeZC56zWb7yj\n92HY8mKAAMaLgo9WayQe+RsIODj3H/dWyH1kL3Nq7pvmNLmFf3RzTQKM/4fR3NJJ\ndfqFSeQ1I1j9aIMTStTXdRqyg73zpWA5FQr08SBMr1CReJJsPIKAkfeFPLMxQEY=\n=S5qe\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bb0a64574c42deb666494e7f1c158b9cae9e8b3\nparent 0abb7c27acfe3d8491736e09f5e48c6f755c772a\nparent 2d1b3da5fb69d932c65884a361ec10d81e8a51d8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1581959995 +0000\ncommitter GitHub <noreply@github.com> 1581959995 +0000\n\nMerge #3199\n\n3199: Use anyhow r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64755b5e1f68290a2518b0bbc2f0007f95cd2632", "html_url": "https://github.com/rust-lang/rust/commit/64755b5e1f68290a2518b0bbc2f0007f95cd2632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64755b5e1f68290a2518b0bbc2f0007f95cd2632/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0abb7c27acfe3d8491736e09f5e48c6f755c772a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0abb7c27acfe3d8491736e09f5e48c6f755c772a", "html_url": "https://github.com/rust-lang/rust/commit/0abb7c27acfe3d8491736e09f5e48c6f755c772a"}, {"sha": "2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1b3da5fb69d932c65884a361ec10d81e8a51d8", "html_url": "https://github.com/rust-lang/rust/commit/2d1b3da5fb69d932c65884a361ec10d81e8a51d8"}], "stats": {"total": 414, "additions": 232, "deletions": 182}, "files": [{"sha": "82f910c1b701ee5d5e35c275f2dc2c43b048c3a5", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64755b5e1f68290a2518b0bbc2f0007f95cd2632/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/64755b5e1f68290a2518b0bbc2f0007f95cd2632/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=64755b5e1f68290a2518b0bbc2f0007f95cd2632", "patch": "@@ -945,6 +945,7 @@ dependencies = [\n name = \"ra_cli\"\n version = \"0.1.0\"\n dependencies = [\n+ \"anyhow\",\n  \"crossbeam-channel\",\n  \"env_logger\",\n  \"itertools\","}, {"sha": "ce88a76b1d7fe49325099e4b4175742ae184df71", "filename": "crates/ra_cli/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2FCargo.toml?ref=64755b5e1f68290a2518b0bbc2f0007f95cd2632", "patch": "@@ -13,6 +13,7 @@ log = \"0.4.5\"\n pico-args = \"0.3.0\"\n rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n rustc-hash = \"1.0\"\n+anyhow = \"1.0\"\n \n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }"}, {"sha": "91fc55fe20003ebc68947fce5ed3780883fdb026", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 16, "deletions": 46, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=64755b5e1f68290a2518b0bbc2f0007f95cd2632", "patch": "@@ -1,47 +1,17 @@\n //! FIXME: write short doc here\n \n-use std::{\n-    path::{Path, PathBuf},\n-    str::FromStr,\n-    sync::Arc,\n-    time::Instant,\n-};\n+use std::{path::Path, sync::Arc, time::Instant};\n \n+use anyhow::format_err;\n use ra_db::{\n     salsa::{Database, Durability},\n     FileId, SourceDatabaseExt,\n };\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n \n-use crate::{load_cargo::load_cargo, Result};\n-\n-pub(crate) struct Position {\n-    path: PathBuf,\n-    line: u32,\n-    column: u32,\n-}\n-\n-impl FromStr for Position {\n-    type Err = Box<dyn std::error::Error + Send + Sync>;\n-    fn from_str(s: &str) -> Result<Self> {\n-        let (path_line, column) = rsplit_at_char(s, ':')?;\n-        let (path, line) = rsplit_at_char(path_line, ':')?;\n-        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n-    }\n-}\n-\n-fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n-    Ok((&s[..idx], &s[idx + 1..]))\n-}\n-\n-pub(crate) enum Op {\n-    Highlight { path: PathBuf },\n-    Complete(Position),\n-    GotoDef(Position),\n-}\n+use crate::{load_cargo::load_cargo, BenchWhat, Result, Verbosity};\n \n-pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n+pub(crate) fn run(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Result<()> {\n     ra_prof::init();\n \n     let start = Instant::now();\n@@ -51,9 +21,9 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n     eprintln!(\"{:?}\\n\", start.elapsed());\n \n     let file_id = {\n-        let path = match &op {\n-            Op::Highlight { path } => path,\n-            Op::Complete(pos) | Op::GotoDef(pos) => &pos.path,\n+        let path = match &what {\n+            BenchWhat::Highlight { path } => path,\n+            BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => &pos.path,\n         };\n         let path = std::env::current_dir()?.join(path).canonicalize()?;\n         roots\n@@ -70,22 +40,22 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n                 }\n                 None\n             })\n-            .ok_or_else(|| format!(\"Can't find {:?}\", path))?\n+            .ok_or_else(|| format_err!(\"Can't find {}\", path.display()))?\n     };\n \n-    match &op {\n-        Op::Highlight { .. } => {\n+    match &what {\n+        BenchWhat::Highlight { .. } => {\n             let res = do_work(&mut host, file_id, |analysis| {\n                 analysis.diagnostics(file_id).unwrap();\n                 analysis.highlight_as_html(file_id, false).unwrap()\n             });\n-            if verbose {\n+            if verbosity.is_verbose() {\n                 println!(\"\\n{}\", res);\n             }\n         }\n-        Op::Complete(pos) | Op::GotoDef(pos) => {\n-            let is_completion = match op {\n-                Op::Complete(..) => true,\n+        BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => {\n+            let is_completion = match what {\n+                BenchWhat::Complete(..) => true,\n                 _ => false,\n             };\n \n@@ -98,13 +68,13 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n             if is_completion {\n                 let res =\n                     do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n-                if verbose {\n+                if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }\n             } else {\n                 let res =\n                     do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_postion));\n-                if verbose {\n+                if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }\n             }"}, {"sha": "b9a4e6abad37f916de7045f1e9bc0522b250c6b8", "filename": "crates/ra_cli/src/load_cargo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2Fsrc%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2Fsrc%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fload_cargo.rs?ref=64755b5e1f68290a2518b0bbc2f0007f95cd2632", "patch": "@@ -1,17 +1,16 @@\n //! FIXME: write short doc here\n \n-use std::{collections::HashSet, error::Error, path::Path};\n-\n-use rustc_hash::FxHashMap;\n+use std::{collections::HashSet, path::Path};\n \n use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{CrateGraph, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost, FeatureFlags};\n use ra_project_model::{get_rustc_cfg_options, PackageRoot, ProjectWorkspace};\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use ra_vfs_glob::RustPackageFilterBuilder;\n+use rustc_hash::FxHashMap;\n \n-type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n+use anyhow::Result;\n \n fn vfs_file_to_id(f: ra_vfs::VfsFile) -> FileId {\n     FileId(f.0)"}, {"sha": "4cf062f472d88176d4282f559380ad035140ed1a", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 196, "deletions": 118, "changes": 314, "blob_url": "https://github.com/rust-lang/rust/blob/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=64755b5e1f68290a2518b0bbc2f0007f95cd2632", "patch": "@@ -5,14 +5,82 @@ mod analysis_stats;\n mod analysis_bench;\n mod progress_report;\n \n-use std::{error::Error, fmt::Write, io::Read};\n+use std::{fmt::Write, io::Read, path::PathBuf, str::FromStr};\n \n use pico_args::Arguments;\n use ra_ide::{file_structure, Analysis};\n use ra_prof::profile;\n use ra_syntax::{AstNode, SourceFile};\n \n-type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync>>;\n+use anyhow::{bail, format_err, Result};\n+\n+fn main() -> Result<()> {\n+    env_logger::try_init()?;\n+\n+    let command = match Command::from_env_args()? {\n+        Ok(it) => it,\n+        Err(HelpPrinted) => return Ok(()),\n+    };\n+    match command {\n+        Command::Parse { no_dump } => {\n+            let _p = profile(\"parsing\");\n+            let file = file()?;\n+            if !no_dump {\n+                println!(\"{:#?}\", file.syntax());\n+            }\n+            std::mem::forget(file);\n+        }\n+        Command::Symbols => {\n+            let file = file()?;\n+            for s in file_structure(&file) {\n+                println!(\"{:?}\", s);\n+            }\n+        }\n+        Command::Highlight { rainbow } => {\n+            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n+            let html = analysis.highlight_as_html(file_id, rainbow).unwrap();\n+            println!(\"{}\", html);\n+        }\n+        Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path } => {\n+            analysis_stats::run(\n+                verbosity,\n+                memory_usage,\n+                path.as_ref(),\n+                only.as_ref().map(String::as_ref),\n+                with_deps,\n+                randomize,\n+            )?;\n+        }\n+        Command::Bench { verbosity, path, what } => {\n+            analysis_bench::run(verbosity, path.as_ref(), what)?;\n+        }\n+    }\n+\n+    Ok(())\n+}\n+\n+enum Command {\n+    Parse {\n+        no_dump: bool,\n+    },\n+    Symbols,\n+    Highlight {\n+        rainbow: bool,\n+    },\n+    Stats {\n+        verbosity: Verbosity,\n+        randomize: bool,\n+        memory_usage: bool,\n+        only: Option<String>,\n+        with_deps: bool,\n+        path: PathBuf,\n+    },\n+    Bench {\n+        verbosity: Verbosity,\n+        path: PathBuf,\n+        what: BenchWhat,\n+    },\n+}\n \n #[derive(Clone, Copy)]\n pub enum Verbosity {\n@@ -37,17 +105,57 @@ impl Verbosity {\n     }\n }\n \n-fn main() -> Result<()> {\n-    env_logger::try_init()?;\n+enum BenchWhat {\n+    Highlight { path: PathBuf },\n+    Complete(Position),\n+    GotoDef(Position),\n+}\n \n-    let mut matches = Arguments::from_env();\n-    let subcommand = matches.subcommand()?.unwrap_or_default();\n+pub(crate) struct Position {\n+    path: PathBuf,\n+    line: u32,\n+    column: u32,\n+}\n \n-    match subcommand.as_str() {\n-        \"parse\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+impl FromStr for Position {\n+    type Err = anyhow::Error;\n+    fn from_str(s: &str) -> Result<Self> {\n+        let (path_line, column) = rsplit_at_char(s, ':')?;\n+        let (path, line) = rsplit_at_char(path_line, ':')?;\n+        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n+    }\n+}\n+\n+fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n+    let idx = s.rfind(c).ok_or_else(|| format_err!(\"no `{}` in {}\", c, s))?;\n+    Ok((&s[..idx], &s[idx + 1..]))\n+}\n+\n+struct HelpPrinted;\n+\n+impl Command {\n+    fn from_env_args() -> Result<Result<Command, HelpPrinted>> {\n+        let mut matches = Arguments::from_env();\n+        let subcommand = matches.subcommand()?.unwrap_or_default();\n+\n+        let verbosity = match (\n+            matches.contains([\"-vv\", \"--spammy\"]),\n+            matches.contains([\"-v\", \"--verbose\"]),\n+            matches.contains([\"-q\", \"--quiet\"]),\n+        ) {\n+            (true, _, true) => bail!(\"Invalid flags: -q conflicts with -vv\"),\n+            (true, _, false) => Verbosity::Spammy,\n+            (false, false, false) => Verbosity::Normal,\n+            (false, false, true) => Verbosity::Quiet,\n+            (false, true, false) => Verbosity::Verbose,\n+            (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n+        };\n+\n+        let command = match subcommand.as_str() {\n+            \"parse\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-parse\n \n USAGE:\n@@ -56,46 +164,37 @@ USAGE:\n FLAGS:\n     -h, --help       Prints help inforamtion\n         --no-dump\"\n-                );\n-                return Ok(());\n-            }\n-\n-            let no_dump = matches.contains(\"--no-dump\");\n-            matches.finish().or_else(handle_extra_flags)?;\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n \n-            let _p = profile(\"parsing\");\n-            let file = file()?;\n-            if !no_dump {\n-                println!(\"{:#?}\", file.syntax());\n+                let no_dump = matches.contains(\"--no-dump\");\n+                matches.finish().or_else(handle_extra_flags)?;\n+                Command::Parse { no_dump }\n             }\n-            std::mem::forget(file);\n-        }\n-        \"symbols\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+            \"symbols\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-symbols\n \n USAGE:\n     ra_cli highlight [FLAGS]\n \n FLAGS:\n     -h, --help    Prints help inforamtion\"\n-                );\n-                return Ok(());\n-            }\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n \n-            matches.finish().or_else(handle_extra_flags)?;\n+                matches.finish().or_else(handle_extra_flags)?;\n \n-            let file = file()?;\n-            for s in file_structure(&file) {\n-                println!(\"{:?}\", s);\n+                Command::Symbols\n             }\n-        }\n-        \"highlight\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+            \"highlight\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-highlight\n \n USAGE:\n@@ -104,21 +203,18 @@ USAGE:\n FLAGS:\n     -h, --help       Prints help information\n     -r, --rainbow\"\n-                );\n-                return Ok(());\n-            }\n-\n-            let rainbow_opt = matches.contains([\"-r\", \"--rainbow\"]);\n-            matches.finish().or_else(handle_extra_flags)?;\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n \n-            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n-            let html = analysis.highlight_as_html(file_id, rainbow_opt).unwrap();\n-            println!(\"{}\", html);\n-        }\n-        \"analysis-stats\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+                let rainbow = matches.contains([\"-r\", \"--rainbow\"]);\n+                matches.finish().or_else(handle_extra_flags)?;\n+                Command::Highlight { rainbow }\n+            }\n+            \"analysis-stats\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra-cli-analysis-stats\n \n USAGE:\n@@ -135,47 +231,28 @@ OPTIONS:\n \n ARGS:\n     <PATH>\"\n-                );\n-                return Ok(());\n-            }\n-\n-            let verbosity = match (\n-                matches.contains([\"-vv\", \"--spammy\"]),\n-                matches.contains([\"-v\", \"--verbose\"]),\n-                matches.contains([\"-q\", \"--quiet\"]),\n-            ) {\n-                (true, _, true) => Err(\"Invalid flags: -q conflicts with -vv\")?,\n-                (true, _, false) => Verbosity::Spammy,\n-                (false, false, false) => Verbosity::Normal,\n-                (false, false, true) => Verbosity::Quiet,\n-                (false, true, false) => Verbosity::Verbose,\n-                (false, true, true) => Err(\"Invalid flags: -q conflicts with -v\")?,\n-            };\n-            let randomize = matches.contains(\"--randomize\");\n-            let memory_usage = matches.contains(\"--memory-usage\");\n-            let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n-            let with_deps: bool = matches.contains(\"--with-deps\");\n-            let path = {\n-                let mut trailing = matches.free()?;\n-                if trailing.len() != 1 {\n-                    Err(\"Invalid flags\")?;\n+                    );\n+                    return Ok(Err(HelpPrinted));\n                 }\n-                trailing.pop().unwrap()\n-            };\n \n-            analysis_stats::run(\n-                verbosity,\n-                memory_usage,\n-                path.as_ref(),\n-                only.as_ref().map(String::as_ref),\n-                with_deps,\n-                randomize,\n-            )?;\n-        }\n-        \"analysis-bench\" => {\n-            if matches.contains([\"-h\", \"--help\"]) {\n-                eprintln!(\n-                    \"\\\n+                let randomize = matches.contains(\"--randomize\");\n+                let memory_usage = matches.contains(\"--memory-usage\");\n+                let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n+                let with_deps: bool = matches.contains(\"--with-deps\");\n+                let path = {\n+                    let mut trailing = matches.free()?;\n+                    if trailing.len() != 1 {\n+                        bail!(\"Invalid flags\");\n+                    }\n+                    trailing.pop().unwrap().into()\n+                };\n+\n+                Command::Stats { verbosity, randomize, memory_usage, only, with_deps, path }\n+            }\n+            \"analysis-bench\" => {\n+                if matches.contains([\"-h\", \"--help\"]) {\n+                    eprintln!(\n+                        \"\\\n ra_cli-analysis-bench\n \n USAGE:\n@@ -191,29 +268,27 @@ OPTIONS:\n \n ARGS:\n     <PATH>    Project to analyse\"\n-                );\n-                return Ok(());\n-            }\n+                    );\n+                    return Ok(Err(HelpPrinted));\n+                }\n \n-            let verbose = matches.contains([\"-v\", \"--verbose\"]);\n-            let path: String = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n-            let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n-            let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n-            let goto_def_path: Option<String> = matches.opt_value_from_str(\"--goto-def\")?;\n-            let op = match (highlight_path, complete_path, goto_def_path) {\n-                (Some(path), None, None) => analysis_bench::Op::Highlight { path: path.into() },\n-                (None, Some(position), None) => analysis_bench::Op::Complete(position.parse()?),\n-                (None, None, Some(position)) => analysis_bench::Op::GotoDef(position.parse()?),\n-                _ => panic!(\n-                    \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n-                ),\n-            };\n-            matches.finish().or_else(handle_extra_flags)?;\n-\n-            analysis_bench::run(verbose, path.as_ref(), op)?;\n-        }\n-        _ => eprintln!(\n-            \"\\\n+                let path: PathBuf = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n+                let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n+                let complete_path: Option<Position> = matches.opt_value_from_str(\"--complete\")?;\n+                let goto_def_path: Option<Position> = matches.opt_value_from_str(\"--goto-def\")?;\n+                let what = match (highlight_path, complete_path, goto_def_path) {\n+                    (Some(path), None, None) => BenchWhat::Highlight { path: path.into() },\n+                    (None, Some(position), None) => BenchWhat::Complete(position),\n+                    (None, None, Some(position)) => BenchWhat::GotoDef(position),\n+                    _ => panic!(\n+                        \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n+                    ),\n+                };\n+                Command::Bench { verbosity, path, what }\n+            }\n+            _ => {\n+                eprintln!(\n+                    \"\\\n ra-cli\n \n USAGE:\n@@ -228,9 +303,12 @@ SUBCOMMANDS:\n     highlight\n     parse\n     symbols\"\n-        ),\n+                );\n+                return Ok(Err(HelpPrinted));\n+            }\n+        };\n+        Ok(Ok(command))\n     }\n-    Ok(())\n }\n \n fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n@@ -240,9 +318,9 @@ fn handle_extra_flags(e: pico_args::Error) -> Result<()> {\n             write!(&mut invalid_flags, \"{}, \", flag)?;\n         }\n         let (invalid_flags, _) = invalid_flags.split_at(invalid_flags.len() - 2);\n-        Err(format!(\"Invalid flags: {}\", invalid_flags).into())\n+        bail!(\"Invalid flags: {}\", invalid_flags);\n     } else {\n-        Err(e.to_string().into())\n+        bail!(e);\n     }\n }\n "}, {"sha": "0066929c0c10523bfefa84d9f8807677017f0564", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/64755b5e1f68290a2518b0bbc2f0007f95cd2632/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=64755b5e1f68290a2518b0bbc2f0007f95cd2632", "patch": "@@ -8,27 +8,28 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-threadpool = \"1.7.1\"\n-relative-path = \"1.0.0\"\n-serde_json = \"1.0.34\"\n-serde = { version = \"1.0.83\", features = [\"derive\"] }\n crossbeam-channel = \"0.4\"\n+either = \"1.5\"\n+env_logger = { version = \"0.7.1\", default-features = false }\n+jod-thread = \"0.1.0\"\n log = \"0.4.3\"\n lsp-types = { version = \"0.70.0\", features = [\"proposed\"] }\n-rustc-hash = \"1.0\"\n parking_lot = \"0.10.0\"\n-jod-thread = \"0.1.0\"\n-ra_vfs = \"0.5.0\"\n-ra_syntax = { path = \"../ra_syntax\" }\n-ra_text_edit = { path = \"../ra_text_edit\" }\n-ra_ide = { path = \"../ra_ide\" }\n+relative-path = \"1.0.0\"\n+rustc-hash = \"1.0\"\n+serde = { version = \"1.0.83\", features = [\"derive\"] }\n+serde_json = \"1.0.34\"\n+threadpool = \"1.7.1\"\n+\n lsp-server = \"0.3.0\"\n-ra_project_model = { path = \"../ra_project_model\" }\n+ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n+ra_ide = { path = \"../ra_ide\" }\n ra_prof = { path = \"../ra_prof\" }\n+ra_project_model = { path = \"../ra_project_model\" }\n+ra_syntax = { path = \"../ra_syntax\" }\n+ra_text_edit = { path = \"../ra_text_edit\" }\n+ra_vfs = \"0.5.0\"\n ra_vfs_glob = { path = \"../ra_vfs_glob\" }\n-env_logger = { version = \"0.7.1\", default-features = false }\n-ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n-either = \"1.5\"\n \n [target.'cfg(windows)'.dependencies]\n winapi = \"0.3\""}]}