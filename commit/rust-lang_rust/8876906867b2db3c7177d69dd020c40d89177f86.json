{"sha": "8876906867b2db3c7177d69dd020c40d89177f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzY5MDY4NjdiMmRiM2M3MTc3ZDY5ZGQwMjBjNDBkODkxNzdmODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-27T19:26:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-27T19:26:59Z"}, "message": "Auto merge of #54468 - matthewjasper:fix-polonius, r=nikomatsakis\n\n[NLL] Get Polonius borrow check to work in simple cases\n\n* Restores the generation of outlives facts from subtyping.\n* Restore liveness facts.\n* Generate invalidates facts at the start point of each location,\n  where we check for errors.\n* Add a small test for simple cases (previously these cases have compiled, and more recently ICEd).\n\nCloses #54212\ncc #53142 (will need test)\n\n### Known limitations\n\n* Two phase borrows aren't implemented for Polonius yet\n* Invalidation facts haven't been updated for some of the recent changes to make `Drop` terminators access fewer things.\n* Fact generation is not as optimized as it could be.\n* Around 30 tests fail in compare mode, often tests that are ignored in nll compare mode\n\nr? @nikomatsakis", "tree": {"sha": "d93b3ac7cc723ebb2fb30ef4985dbe192c25c5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d93b3ac7cc723ebb2fb30ef4985dbe192c25c5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8876906867b2db3c7177d69dd020c40d89177f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8876906867b2db3c7177d69dd020c40d89177f86", "html_url": "https://github.com/rust-lang/rust/commit/8876906867b2db3c7177d69dd020c40d89177f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8876906867b2db3c7177d69dd020c40d89177f86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1694eac74216da22b395a5589b8d080ccd5a2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1694eac74216da22b395a5589b8d080ccd5a2ec", "html_url": "https://github.com/rust-lang/rust/commit/f1694eac74216da22b395a5589b8d080ccd5a2ec"}, {"sha": "610903fb118cb7cbf1474bd6cf11ae8afa380c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/610903fb118cb7cbf1474bd6cf11ae8afa380c4e", "html_url": "https://github.com/rust-lang/rust/commit/610903fb118cb7cbf1474bd6cf11ae8afa380c4e"}], "stats": {"total": 252, "additions": 172, "deletions": 80}, "files": [{"sha": "f19c102adcfe9d08db44cc197bc4bc6de47a1689", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -479,7 +479,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n \n     /// Generate a new invalidates(L, B) fact\n     fn generate_invalidates(&mut self, b: BorrowIndex, l: Location) {\n-        let lidx = self.location_table.mid_index(l);\n+        let lidx = self.location_table.start_index(l);\n         self.all_facts.invalidates.push((lidx, b));\n     }\n }"}, {"sha": "dabf669eca65f0de63169e9584a4e8ae08a8df5f", "filename": "src/librustc_mir/borrow_check/nll/type_check/constraint_conversion.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fconstraint_conversion.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::location::LocationTable;\n use borrow_check::nll::constraints::{ConstraintCategory, ConstraintSet, OutlivesConstraint};\n-use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::region_infer::TypeTest;\n use borrow_check::nll::type_check::Locations;\n use borrow_check::nll::universal_regions::UniversalRegions;\n@@ -26,43 +24,37 @@ use syntax_pos::DUMMY_SP;\n crate struct ConstraintConversion<'a, 'gcx: 'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     universal_regions: &'a UniversalRegions<'tcx>,\n-    location_table: &'a LocationTable,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     param_env: ty::ParamEnv<'tcx>,\n     locations: Locations,\n     category: ConstraintCategory,\n     outlives_constraints: &'a mut ConstraintSet,\n     type_tests: &'a mut Vec<TypeTest<'tcx>>,\n-    all_facts: &'a mut Option<AllFacts>,\n }\n \n impl<'a, 'gcx, 'tcx> ConstraintConversion<'a, 'gcx, 'tcx> {\n     crate fn new(\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         universal_regions: &'a UniversalRegions<'tcx>,\n-        location_table: &'a LocationTable,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n         implicit_region_bound: Option<ty::Region<'tcx>>,\n         param_env: ty::ParamEnv<'tcx>,\n         locations: Locations,\n         category: ConstraintCategory,\n         outlives_constraints: &'a mut ConstraintSet,\n         type_tests: &'a mut Vec<TypeTest<'tcx>>,\n-        all_facts: &'a mut Option<AllFacts>,\n     ) -> Self {\n         Self {\n             tcx,\n             universal_regions,\n-            location_table,\n             region_bound_pairs,\n             implicit_region_bound,\n             param_env,\n             locations,\n             category,\n             outlives_constraints,\n             type_tests,\n-            all_facts,\n         }\n     }\n \n@@ -101,23 +93,6 @@ impl<'a, 'gcx, 'tcx> ConstraintConversion<'a, 'gcx, 'tcx> {\n                 let r1_vid = self.to_region_vid(r1);\n                 let r2_vid = self.to_region_vid(r2);\n                 self.add_outlives(r1_vid, r2_vid);\n-\n-                // In the new analysis, all outlives relations etc\n-                // \"take effect\" at the mid point of the statement\n-                // that requires them, so ignore the `at_location`.\n-                if let Some(all_facts) = &mut self.all_facts {\n-                    if let Some(from_location) = self.locations.from_location() {\n-                        all_facts.outlives.push((\n-                            r1_vid,\n-                            r2_vid,\n-                            self.location_table.mid_index(from_location),\n-                        ));\n-                    } else {\n-                        for location in self.location_table.all_points() {\n-                            all_facts.outlives.push((r1_vid, r2_vid, location));\n-                        }\n-                    }\n-                }\n             }\n \n             UnpackedKind::Type(t1) => {"}, {"sha": "f33909db78f9fe2cdb92c8d23fe2674442ed6ec3", "filename": "src/librustc_mir/borrow_check/nll/type_check/free_region_relations.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ffree_region_relations.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::location::LocationTable;\n-use borrow_check::nll::facts::AllFacts;\n use borrow_check::nll::type_check::constraint_conversion;\n use borrow_check::nll::type_check::{Locations, MirTypeckRegionConstraints};\n use borrow_check::nll::universal_regions::UniversalRegions;\n@@ -69,19 +67,15 @@ crate struct CreateResult<'tcx> {\n crate fn create(\n     infcx: &InferCtxt<'_, '_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    location_table: &LocationTable,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     constraints: &mut MirTypeckRegionConstraints<'tcx>,\n-    all_facts: &mut Option<AllFacts>,\n ) -> CreateResult<'tcx> {\n     UniversalRegionRelationsBuilder {\n         infcx,\n         param_env,\n         implicit_region_bound,\n         constraints,\n-        location_table,\n-        all_facts,\n         universal_regions: universal_regions.clone(),\n         region_bound_pairs: Vec::new(),\n         relations: UniversalRegionRelations {\n@@ -210,11 +204,9 @@ impl UniversalRegionRelations<'tcx> {\n struct UniversalRegionRelationsBuilder<'this, 'gcx: 'tcx, 'tcx: 'this> {\n     infcx: &'this InferCtxt<'this, 'gcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    location_table: &'this LocationTable,\n     universal_regions: Rc<UniversalRegions<'tcx>>,\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n     constraints: &'this mut MirTypeckRegionConstraints<'tcx>,\n-    all_facts: &'this mut Option<AllFacts>,\n \n     // outputs:\n     relations: UniversalRegionRelations<'tcx>,\n@@ -281,15 +273,13 @@ impl UniversalRegionRelationsBuilder<'cx, 'gcx, 'tcx> {\n             constraint_conversion::ConstraintConversion::new(\n                 self.infcx.tcx,\n                 &self.universal_regions,\n-                &self.location_table,\n                 &self.region_bound_pairs,\n                 self.implicit_region_bound,\n                 self.param_env,\n                 Locations::All(DUMMY_SP),\n                 ConstraintCategory::Internal,\n                 &mut self.constraints.outlives_constraints,\n                 &mut self.constraints.type_tests,\n-                &mut self.all_facts,\n             ).convert_all(&data);\n         }\n "}, {"sha": "cc176cbc40392aa733851faa605d681645fc1ee6", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/liveness_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fliveness_map.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -17,6 +17,7 @@\n //! types, instead of all variables.\n \n use borrow_check::nll::ToRegionVid;\n+use borrow_check::nll::facts::{AllFacts, AllFactsExt};\n use rustc::mir::{Local, Mir};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -61,12 +62,13 @@ impl NllLivenessMap {\n         mir: &Mir<'tcx>,\n     ) -> Self {\n         let mut to_local = IndexVec::default();\n+        let facts_enabled = AllFacts::enabled(tcx);\n         let from_local: IndexVec<Local, Option<_>> = mir.local_decls\n             .iter_enumerated()\n             .map(|(local, local_decl)| {\n                 if tcx.all_free_regions_meet(&local_decl.ty, |r| {\n                     free_regions.contains(&r.to_region_vid())\n-                }) {\n+                }) && !facts_enabled {\n                     // If all the regions in the type are free regions\n                     // (or there are no regions), then we don't need\n                     // to track liveness for this variable."}, {"sha": "9ccdc84db156186a27553fffdb7a15786fcea355", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use borrow_check::location::LocationTable;\n use borrow_check::nll::region_infer::values::RegionValueElements;\n use borrow_check::nll::constraints::ConstraintSet;\n use borrow_check::nll::NllLivenessMap;\n@@ -40,6 +41,7 @@ pub(super) fn generate<'gcx, 'tcx>(\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n+    location_table: &LocationTable,\n ) {\n     debug!(\"liveness::generate\");\n     let free_regions = {\n@@ -51,7 +53,7 @@ pub(super) fn generate<'gcx, 'tcx>(\n         )\n     };\n     let liveness_map = NllLivenessMap::compute(typeck.tcx(), &free_regions, mir);\n-    trace::trace(typeck, mir, elements, flow_inits, move_data, &liveness_map);\n+    trace::trace(typeck, mir, elements, flow_inits, move_data, &liveness_map, location_table);\n }\n \n /// Compute all regions that are (currently) known to outlive free"}, {"sha": "6c1252fc73d8bc0da81997add09880c99cbe2ed6", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use borrow_check::location::LocationTable;\n use borrow_check::nll::constraints::ConstraintCategory;\n use borrow_check::nll::region_infer::values::{self, PointIndex, RegionValueElements};\n use borrow_check::nll::type_check::liveness::liveness_map::{LiveVar, NllLivenessMap};\n@@ -49,6 +50,7 @@ pub(super) fn trace(\n     flow_inits: &mut FlowAtLocation<MaybeInitializedPlaces<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n     liveness_map: &NllLivenessMap,\n+    location_table: &LocationTable,\n ) {\n     debug!(\"trace()\");\n \n@@ -67,6 +69,7 @@ pub(super) fn trace(\n         move_data,\n         liveness_map,\n         drop_data: FxHashMap::default(),\n+        location_table,\n     };\n \n     LivenessResults::new(cx).compute_for_all_locals();\n@@ -105,6 +108,9 @@ where\n \n     /// Map tracking which variables need liveness computation.\n     liveness_map: &'me NllLivenessMap,\n+\n+    /// Maps between a MIR Location and a LocationIndex\n+    location_table: &'me LocationTable,\n }\n \n struct DropData<'tcx> {\n@@ -453,7 +459,13 @@ impl LivenessContext<'_, '_, '_, '_, 'tcx> {\n     ) {\n         debug!(\"add_use_live_facts_for(value={:?})\", value);\n \n-        Self::make_all_regions_live(self.elements, &mut self.typeck, value, live_at)\n+        Self::make_all_regions_live(\n+            self.elements,\n+            &mut self.typeck,\n+            value,\n+            live_at,\n+            self.location_table,\n+        )\n     }\n \n     /// Some variable with type `live_ty` is \"drop live\" at `location`\n@@ -505,7 +517,13 @@ impl LivenessContext<'_, '_, '_, '_, 'tcx> {\n         // All things in the `outlives` array may be touched by\n         // the destructor and must be live at this point.\n         for &kind in &drop_data.dropck_result.kinds {\n-            Self::make_all_regions_live(self.elements, &mut self.typeck, kind, live_at);\n+            Self::make_all_regions_live(\n+                self.elements,\n+                &mut self.typeck,\n+                kind,\n+                live_at,\n+                self.location_table,\n+            );\n         }\n     }\n \n@@ -514,6 +532,7 @@ impl LivenessContext<'_, '_, '_, '_, 'tcx> {\n         typeck: &mut TypeChecker<'_, '_, 'tcx>,\n         value: impl TypeFoldable<'tcx>,\n         live_at: &HybridBitSet<PointIndex>,\n+        location_table: &LocationTable,\n     ) {\n         debug!(\"make_all_regions_live(value={:?})\", value);\n         debug!(\n@@ -532,8 +551,12 @@ impl LivenessContext<'_, '_, '_, '_, 'tcx> {\n                 .liveness_constraints\n                 .add_elements(live_region_vid, live_at);\n \n-            if let Some(_) = borrowck_context.all_facts {\n-                bug!(\"polonius liveness facts not implemented yet\")\n+            if let Some(facts) = borrowck_context.all_facts {\n+                for point in live_at.iter() {\n+                    let loc = elements.to_location(point);\n+                    facts.region_live_at.push((live_region_vid, location_table.start_index(loc)));\n+                    facts.region_live_at.push((live_region_vid, location_table.mid_index(loc)));\n+                }\n             }\n         });\n     }"}, {"sha": "4c2ef58a3a78321d56ccddc942f42beebd9744d2", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 46, "deletions": 36, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -42,12 +42,13 @@ use rustc::traits::{ObligationCause, PredicateObligations};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, CanonicalTy, RegionVid, ToPolyTraitRef, Ty, TyCtxt, TyKind};\n-use std::fmt;\n+use std::{fmt, iter};\n use std::rc::Rc;\n use syntax_pos::{Span, DUMMY_SP};\n use transform::{MirPass, MirSource};\n \n use rustc_data_structures::fx::FxHashSet;\n+use either::Either;\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n@@ -135,37 +136,35 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     } = free_region_relations::create(\n         infcx,\n         param_env,\n-        location_table,\n         Some(implicit_region_bound),\n         universal_regions,\n         &mut constraints,\n-        all_facts,\n     );\n \n-    {\n-        let mut borrowck_context = BorrowCheckContext {\n-            universal_regions,\n-            location_table,\n-            borrow_set,\n-            all_facts,\n-            constraints: &mut constraints,\n-        };\n+    let mut borrowck_context = BorrowCheckContext {\n+        universal_regions,\n+        location_table,\n+        borrow_set,\n+        all_facts,\n+        constraints: &mut constraints,\n+    };\n \n-        type_check_internal(\n-            infcx,\n-            mir_def_id,\n-            param_env,\n-            mir,\n-            &region_bound_pairs,\n-            Some(implicit_region_bound),\n-            Some(&mut borrowck_context),\n-            Some(&universal_region_relations),\n-            |cx| {\n-                cx.equate_inputs_and_outputs(mir, universal_regions, &normalized_inputs_and_output);\n-                liveness::generate(cx, mir, elements, flow_inits, move_data);\n-            },\n-        );\n-    }\n+    type_check_internal(\n+        infcx,\n+        mir_def_id,\n+        param_env,\n+        mir,\n+        &region_bound_pairs,\n+        Some(implicit_region_bound),\n+        Some(&mut borrowck_context),\n+        Some(&universal_region_relations),\n+        |cx| {\n+            cx.equate_inputs_and_outputs(mir, universal_regions, &normalized_inputs_and_output);\n+            liveness::generate(cx, mir, elements, flow_inits, move_data, location_table);\n+\n+            cx.borrowck_context.as_mut().map(|bcx| translate_outlives_facts(bcx));\n+        },\n+    );\n \n     MirTypeckResults {\n         constraints,\n@@ -208,6 +207,27 @@ fn type_check_internal<'a, 'gcx, 'tcx, R>(\n     extra(&mut checker)\n }\n \n+fn translate_outlives_facts(cx: &mut BorrowCheckContext) {\n+    if let Some(facts) = cx.all_facts {\n+        let location_table = cx.location_table;\n+        facts.outlives.extend(\n+            cx.constraints.outlives_constraints.iter().flat_map(|constraint: &OutlivesConstraint| {\n+                if let Some(from_location) = constraint.locations.from_location() {\n+                    Either::Left(iter::once((\n+                        constraint.sup,\n+                        constraint.sub,\n+                        location_table.mid_index(from_location),\n+                    )))\n+                } else {\n+                    Either::Right(location_table.all_points().map(move |location| {\n+                       (constraint.sup, constraint.sub, location)\n+                    }))\n+                }\n+            })\n+        );\n+    }\n+}\n+\n fn mirbug(tcx: TyCtxt, span: Span, msg: &str) {\n     // We sometimes see MIR failures (notably predicate failures) due to\n     // the fact that we check rvalue sized predicates here. So use `delay_span_bug`\n@@ -853,15 +873,13 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             constraint_conversion::ConstraintConversion::new(\n                 self.infcx.tcx,\n                 borrowck_context.universal_regions,\n-                borrowck_context.location_table,\n                 self.region_bound_pairs,\n                 self.implicit_region_bound,\n                 self.param_env,\n                 locations,\n                 category,\n                 &mut borrowck_context.constraints.outlives_constraints,\n                 &mut borrowck_context.constraints.type_tests,\n-                &mut borrowck_context.all_facts,\n             ).convert_all(&data);\n         }\n     }\n@@ -1921,14 +1939,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                                 category: ConstraintCategory::Boring,\n                             });\n \n-                            if let Some(all_facts) = all_facts {\n-                                all_facts.outlives.push((\n-                                    ref_region.to_region_vid(),\n-                                    borrow_region.to_region_vid(),\n-                                    location_table.mid_index(location),\n-                                ));\n-                            }\n-\n                             match mutbl {\n                                 hir::Mutability::MutImmutable => {\n                                     // Immutable reference. We don't need the base"}, {"sha": "13d59c3ba29c6707f52a3f2bbe7129dbc7252667", "filename": "src/librustc_mir/borrow_check/nll/type_check/relate_tys.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Frelate_tys.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -227,8 +227,6 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, '_, 'tcx> {\n                     locations: self.locations,\n                     category: self.category,\n                 });\n-\n-            // FIXME all facts!\n         }\n     }\n }"}, {"sha": "bea5e4559988e7efe5246562117147418de3f488", "filename": "src/test/ui/nll/polonius-smoke-test.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.rs?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -0,0 +1,47 @@\n+// Check that Polonius borrow check works for simple cases.\n+// ignore-compare-mode-nll\n+// compile-flags: -Z borrowck=mir -Zpolonius\n+\n+pub fn return_ref_to_local() -> &'static i32 {\n+    let x = 0;\n+    &x //~ ERROR\n+}\n+\n+pub fn use_while_mut() {\n+    let mut x = 0;\n+    let y = &mut x;\n+    let z = x; //~ ERROR\n+    let w = y;\n+}\n+\n+pub fn use_while_mut_fr(x: &mut i32) -> &mut i32 {\n+    let y = &mut *x;\n+    let z = x; //~ ERROR\n+    y\n+}\n+\n+// Cases like this are why we have Polonius.\n+pub fn position_dependent_outlives(x: &mut i32, cond: bool) -> &mut i32 {\n+    let y = &mut *x;\n+    if cond {\n+        return y;\n+    } else {\n+        *x = 0;\n+        return x;\n+    }\n+}\n+\n+fn foo<'a, 'b>(p: &'b &'a mut usize) -> &'b usize {\n+    p\n+}\n+\n+// Check that we create constraints for well-formedness of function arguments\n+fn well_formed_function_inputs() {\n+    let s = &mut 1;\n+    let r = &mut *s;\n+    let tmp = foo(&r);\n+    s; //~ ERROR\n+    tmp;\n+}\n+\n+fn main() {}"}, {"sha": "a30d522f3ff0748afc99208657e7040473c66bcf", "filename": "src/test/ui/nll/polonius-smoke-test.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8876906867b2db3c7177d69dd020c40d89177f86/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8876906867b2db3c7177d69dd020c40d89177f86/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius-smoke-test.stderr?ref=8876906867b2db3c7177d69dd020c40d89177f86", "patch": "@@ -0,0 +1,45 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/polonius-smoke-test.rs:7:5\n+   |\n+LL |     &x //~ ERROR\n+   |     ^^ borrowed value does not live long enough\n+LL | }\n+   | - `x` dropped here while still borrowed\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0503]: cannot use `x` because it was mutably borrowed\n+  --> $DIR/polonius-smoke-test.rs:13:13\n+   |\n+LL |     let y = &mut x;\n+   |             ------ borrow of `x` occurs here\n+LL |     let z = x; //~ ERROR\n+   |             ^ use of borrowed `x`\n+LL |     let w = y;\n+   |             - borrow later used here\n+\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/polonius-smoke-test.rs:19:13\n+   |\n+LL |     let y = &mut *x;\n+   |             ------- borrow of `*x` occurs here\n+LL |     let z = x; //~ ERROR\n+   |             ^ move out of `x` occurs here\n+LL |     y\n+   |     - borrow later used here\n+\n+error[E0505]: cannot move out of `s` because it is borrowed\n+  --> $DIR/polonius-smoke-test.rs:43:5\n+   |\n+LL |     let r = &mut *s;\n+   |             ------- borrow of `*s` occurs here\n+LL |     let tmp = foo(&r);\n+LL |     s; //~ ERROR\n+   |     ^ move out of `s` occurs here\n+LL |     tmp;\n+   |     --- borrow later used here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors occurred: E0503, E0505, E0597.\n+For more information about an error, try `rustc --explain E0503`."}]}