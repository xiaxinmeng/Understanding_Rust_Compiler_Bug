{"sha": "2e6bf0923b113b754c9bda72b78eac354bec61f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlNmJmMDkyM2IxMTNiNzU0YzliZGE3MmI3OGVhYzM1NGJlYzYxZjc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-02T21:56:17Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "const_eval_resolve", "tree": {"sha": "5f1df6a432ca6262264170adb19ead5f7a155eef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f1df6a432ca6262264170adb19ead5f7a155eef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e6bf0923b113b754c9bda72b78eac354bec61f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e6bf0923b113b754c9bda72b78eac354bec61f7", "html_url": "https://github.com/rust-lang/rust/commit/2e6bf0923b113b754c9bda72b78eac354bec61f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e6bf0923b113b754c9bda72b78eac354bec61f7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58031c7cb2352fb17f2c720a84f541c532ffdf09", "url": "https://api.github.com/repos/rust-lang/rust/commits/58031c7cb2352fb17f2c720a84f541c532ffdf09", "html_url": "https://github.com/rust-lang/rust/commit/58031c7cb2352fb17f2c720a84f541c532ffdf09"}], "stats": {"total": 124, "additions": 96, "deletions": 28}, "files": [{"sha": "4943e279c7e050836959ed02dd975b138f804bba", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -28,7 +28,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             ty::ConstKind::Unevaluated(def, substs, promoted) => self\n                 .cx\n                 .tcx()\n-                .const_eval_resolve(ty::ParamEnv::reveal_all(), def.did, substs, promoted, None)\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), def, substs, promoted, None)\n                 .map_err(|err| {\n                     if promoted.is_none() {\n                         self.cx"}, {"sha": "85c568cbd6583a90b9e330897471d45551eeb089", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -1536,7 +1536,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def_id: DefId,\n+        def: ty::WithOptParam<DefId>,\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n@@ -1547,7 +1547,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let (param_env, substs) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n-        self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, span)\n+        self.tcx.const_eval_resolve(param_env, def, substs, promoted, span)\n     }\n \n     /// If `typ` is a type variable of some kind, resolve it one level"}, {"sha": "bbaead535f6c777b26a7b0438abcb047aea46f7c", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -34,12 +34,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn const_eval_resolve(\n         self,\n         param_env: ty::ParamEnv<'tcx>,\n-        def_id: DefId,\n+        def: ty::WithOptParam<DefId>,\n         substs: SubstsRef<'tcx>,\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n-        match ty::Instance::resolve(self, param_env, def_id, substs) {\n+        match ty::Instance::resolve_const_arg(self, param_env, def, substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted };\n                 self.const_eval_global_id(param_env, cid, span)"}, {"sha": "50625af0adf0f452e849793c10e70b169cfe1695", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -1463,5 +1463,14 @@ rustc_queries! {\n         ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n             desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n         }\n+\n+        query resolve_instance_of_const_arg(\n+            key: ty::ParamEnvAnd<'tcx, (ty::WithOptParam<DefId>, SubstsRef<'tcx>)>\n+        ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n+            desc {\n+                \"resolving instance of the potential const argument `{}`\",\n+                ty::Instance::new(key.value.0.did, key.value.1),\n+            }\n+        }\n     }\n }"}, {"sha": "fef1f9a51e6b7fe376b8ea53ba5f230a1d80bc94", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -336,6 +336,17 @@ impl<'tcx> Instance<'tcx> {\n         tcx.resolve_instance(tcx.erase_regions(&param_env.and((def_id, substs))))\n     }\n \n+    // This should be kept up to date with `resolve`.\n+    pub fn resolve_const_arg(\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        def: ty::WithOptParam<DefId>,\n+        substs: SubstsRef<'tcx>,\n+    ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+        let substs = tcx.erase_regions(&substs);\n+        tcx.resolve_instance_of_const_arg(tcx.erase_regions(&param_env.and((def, substs))))\n+    }\n+\n     pub fn resolve_for_fn_ptr(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "bc55c1b2fe8c5df14c5c2bd78aebc8196cc1245f", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -1100,7 +1100,7 @@ pub enum PredicateKind<'tcx> {\n     Subtype(PolySubtypePredicate<'tcx>),\n \n     /// Constant initializer must evaluate successfully.\n-    ConstEvaluatable(DefId, SubstsRef<'tcx>),\n+    ConstEvaluatable(ty::WithOptParam<DefId>, SubstsRef<'tcx>),\n \n     /// Constants must be equal. The first component is the const that is expected.\n     ConstEquate(&'tcx Const<'tcx>, &'tcx Const<'tcx>),\n@@ -1571,7 +1571,7 @@ pub type PlaceholderType = Placeholder<BoundVar>;\n \n pub type PlaceholderConst = Placeholder<BoundVar>;\n \n-#[derive(Copy, Clone, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, Lift, RustcEncodable, RustcDecodable)]\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n #[derive(Hash, HashStable)]\n pub struct WithOptParam<T> {"}, {"sha": "b50d2852c1c5c50640f92fb5a305bf2dc58be816", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -2027,9 +2027,9 @@ define_print_and_forward_display! {\n                    print_value_path(closure_def_id, &[]),\n                    write(\"` implements the trait `{}`\", kind))\n             }\n-            &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n+            &ty::PredicateKind::ConstEvaluatable(def, substs) => {\n                 p!(write(\"the constant `\"),\n-                   print_value_path(def_id, substs),\n+                   print_value_path(def.did, substs),\n                    write(\"` can be evaluated\"))\n             }\n             ty::PredicateKind::ConstEquate(c1, c2) => {"}, {"sha": "5fc9917376157b4cdaed28b6fa5362c59ab1f38e", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -171,6 +171,17 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for (ty::WithOptParam<DefId>, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n+        self.0.did.default_span(tcx)\n+    }\n+}\n+\n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "3d16a9f92c98ce05a45face7755d9b4bafff9169", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -2373,7 +2373,7 @@ impl<'tcx> Const<'tcx> {\n             let (param_env, substs) = param_env_and_substs.into_parts();\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            match tcx.const_eval_resolve(param_env, def.did, substs, promoted, None) {\n+            match tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n                 // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),"}, {"sha": "a927df02cdcfef39ac48b5977997a18176ac5b3e", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -623,7 +623,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         match substituted_constant.val {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n-                match self.tcx.const_eval_resolve(param_env, def.did, substs, promoted, None) {\n+                match self.tcx.const_eval_resolve(param_env, def, substs, promoted, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n                     Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!("}, {"sha": "c6c76028f857c80fe9089d4b884e6723017c99c2", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -527,7 +527,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                     if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n                         match self.selcx.infcx().const_eval_resolve(\n                             obligation.param_env,\n-                            def.did,\n+                            def,\n                             substs,\n                             promoted,\n                             Some(obligation.cause.span),"}, {"sha": "5dc5fb797ff6c1707de6344a34f2d5570dbc3afd", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -511,7 +511,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         self.infcx\n                             .const_eval_resolve(\n                                 obligation.param_env,\n-                                def.did,\n+                                def,\n                                 substs,\n                                 promoted,\n                                 Some(obligation.cause.span),"}, {"sha": "b8446fa0012abc9a05ec9c2c87c7c0008e906e61", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -116,8 +116,8 @@ pub fn predicate_obligations<'a, 'tcx>(\n             wf.compute(data.skip_binder().a.into()); // (*)\n             wf.compute(data.skip_binder().b.into()); // (*)\n         }\n-        &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-            let obligations = wf.nominal_obligations(def_id, substs);\n+        &ty::PredicateKind::ConstEvaluatable(def, substs) => {\n+            let obligations = wf.nominal_obligations(def.did, substs);\n             wf.out.extend(obligations);\n \n             for arg in substs.iter() {\n@@ -365,7 +365,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                             let obligations = self.nominal_obligations(def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(def.did, substs)\n+                            let predicate = ty::PredicateKind::ConstEvaluatable(def, substs)\n                                 .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::new("}, {"sha": "d5c848817582cb41ea50904007dbb93ac0307eaa", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -14,15 +14,48 @@ fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n-    let (param_env, (def_id, substs)) = key.into_parts();\n+    let (param_env, (did, substs)) = key.into_parts();\n+    if let param_did @ Some(_) = did.as_local().and_then(|did| tcx.opt_const_param_of(did)) {\n+        tcx.resolve_instance_of_const_arg(\n+            param_env.and((ty::WithOptParam { did, param_did }, substs)),\n+        )\n+    } else {\n+        inner_resolve_instance(tcx, param_env.and((ty::WithOptParam::dummy(did), substs)))\n+    }\n+}\n+\n+fn resolve_instance_of_const_arg<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    key: ty::ParamEnvAnd<'tcx, (ty::WithOptParam<DefId>, SubstsRef<'tcx>)>,\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    let (param_env, (def, substs)) = key.into_parts();\n+    if def.param_did.is_none() {\n+        if let Some(did) = def.did.as_local() {\n+            if let param_did @ Some(_) = tcx.opt_const_param_of(did) {\n+                return tcx.resolve_instance_of_const_arg(\n+                    param_env.and((ty::WithOptParam { param_did, ..def }, substs)),\n+                );\n+            }\n+        }\n+        tcx.resolve_instance(param_env.and((def.did, substs)))\n+    } else {\n+        inner_resolve_instance(tcx, param_env.and((def, substs)))\n+    }\n+}\n+\n+fn inner_resolve_instance<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    key: ty::ParamEnvAnd<'tcx, (ty::WithOptParam<DefId>, SubstsRef<'tcx>)>,\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n+    let (param_env, (def, substs)) = key.into_parts();\n \n-    debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n-    let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n+    debug!(\"resolve(def={:?}, substs={:?})\", def.did, substs);\n+    let result = if let Some(trait_def_id) = tcx.trait_of_item(def.did) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);\n-        let item = tcx.associated_item(def_id);\n+        let item = tcx.associated_item(def.did);\n         resolve_associated_item(tcx, &item, param_env, trait_def_id, substs)\n     } else {\n-        let ty = tcx.type_of(def_id);\n+        let ty = tcx.type_of(def.ty_def_id());\n         let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, &ty);\n \n         let def = match item_type.kind {\n@@ -33,7 +66,7 @@ fn resolve_instance<'tcx>(\n                 } =>\n             {\n                 debug!(\" => intrinsic\");\n-                ty::InstanceDef::Intrinsic(def_id)\n+                ty::InstanceDef::Intrinsic(def.did)\n             }\n             ty::FnDef(def_id, substs) if Some(def_id) == tcx.lang_items().drop_in_place_fn() => {\n                 let ty = substs.type_at(0);\n@@ -53,12 +86,12 @@ fn resolve_instance<'tcx>(\n             }\n             _ => {\n                 debug!(\" => free item\");\n-                ty::InstanceDef::Item(def_id)\n+                ty::InstanceDef::Item(def.did)\n             }\n         };\n         Ok(Some(Instance { def, substs }))\n     };\n-    debug!(\"resolve(def_id={:?}, substs={:?}) = {:?}\", def_id, substs, result);\n+    debug!(\"resolve(def.did={:?}, substs={:?}) = {:?}\", def.did, substs, result);\n     result\n }\n \n@@ -244,5 +277,6 @@ fn resolve_associated_item<'tcx>(\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { resolve_instance, ..*providers };\n+    *providers =\n+        ty::query::Providers { resolve_instance, resolve_instance_of_const_arg, ..*providers };\n }"}, {"sha": "f64dce5132da09cd49c7ab099538e044eca53c36", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -423,8 +423,11 @@ fn check_type_defn<'tcx, F>(\n                 fcx.register_predicate(traits::Obligation::new(\n                     cause,\n                     fcx.param_env,\n-                    ty::PredicateKind::ConstEvaluatable(discr_def_id.to_def_id(), discr_substs)\n-                        .to_predicate(fcx.tcx),\n+                    ty::PredicateKind::ConstEvaluatable(\n+                        ty::WithOptParam::dummy(discr_def_id.to_def_id()),\n+                        discr_substs,\n+                    )\n+                    .to_predicate(fcx.tcx),\n                 ));\n             }\n         }"}, {"sha": "6ba4201b2c25451c970a560baa6e6ebf4d77fc80", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e6bf0923b113b754c9bda72b78eac354bec61f7/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=2e6bf0923b113b754c9bda72b78eac354bec61f7", "patch": "@@ -332,7 +332,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let result = self\n                     .lcx\n                     .tcx\n-                    .const_eval_resolve(self.param_env, def_id, substs, None, None)\n+                    .const_eval_resolve(self.param_env, ty::WithOptParam::dummy(def_id), substs, None, None)\n                     .ok()\n                     .map(|val| rustc_middle::ty::Const::from_value(self.lcx.tcx, val, ty))?;\n                 let result = miri_to_const(&result);"}]}