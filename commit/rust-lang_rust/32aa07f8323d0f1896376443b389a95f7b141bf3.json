{"sha": "32aa07f8323d0f1896376443b389a95f7b141bf3", "node_id": "C_kwDOAAsO6NoAKDMyYWEwN2Y4MzIzZDBmMTg5NjM3NjQ0M2IzODlhOTVmN2IxNDFiZjM", "commit": {"author": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-04-09T11:25:50Z"}, "committer": {"name": "bluthej", "email": "joffrey.bluthe@e.email", "date": "2023-04-09T11:25:50Z"}, "message": "Fix false negative for `Strings`\n\n`String` is not a diagnostic item and was thus not picked up by\n`is_type_diagnostic_item`, leading to a false negative for\n`collection_is_never_read`", "tree": {"sha": "bb4480236c1a614ce14603727fe827e4d1a02991", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4480236c1a614ce14603727fe827e4d1a02991"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32aa07f8323d0f1896376443b389a95f7b141bf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32aa07f8323d0f1896376443b389a95f7b141bf3", "html_url": "https://github.com/rust-lang/rust/commit/32aa07f8323d0f1896376443b389a95f7b141bf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32aa07f8323d0f1896376443b389a95f7b141bf3/comments", "author": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bluthej", "id": 29771403, "node_id": "MDQ6VXNlcjI5NzcxNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/29771403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bluthej", "html_url": "https://github.com/bluthej", "followers_url": "https://api.github.com/users/bluthej/followers", "following_url": "https://api.github.com/users/bluthej/following{/other_user}", "gists_url": "https://api.github.com/users/bluthej/gists{/gist_id}", "starred_url": "https://api.github.com/users/bluthej/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bluthej/subscriptions", "organizations_url": "https://api.github.com/users/bluthej/orgs", "repos_url": "https://api.github.com/users/bluthej/repos", "events_url": "https://api.github.com/users/bluthej/events{/privacy}", "received_events_url": "https://api.github.com/users/bluthej/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b57e5cec84a9c3c2f6240c9f0f4071f391fe6ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b57e5cec84a9c3c2f6240c9f0f4071f391fe6ab", "html_url": "https://github.com/rust-lang/rust/commit/5b57e5cec84a9c3c2f6240c9f0f4071f391fe6ab"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "15a5b7dd274851ea911c2f1d413b98b24e5f396f", "filename": "clippy_lints/src/collection_is_never_read.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/32aa07f8323d0f1896376443b389a95f7b141bf3/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32aa07f8323d0f1896376443b389a95f7b141bf3/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollection_is_never_read.rs?ref=32aa07f8323d0f1896376443b389a95f7b141bf3", "patch": "@@ -1,9 +1,9 @@\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use clippy_utils::visitors::for_each_expr_with_closures;\n use clippy_utils::{get_enclosing_block, get_parent_node, path_to_local_id};\n use core::ops::ControlFlow;\n-use rustc_hir::{Block, ExprKind, HirId, Local, Node, PatKind};\n+use rustc_hir::{Block, ExprKind, HirId, LangItem, Local, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n@@ -44,24 +44,23 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(CollectionIsNeverRead => [COLLECTION_IS_NEVER_READ]);\n \n-static COLLECTIONS: [Symbol; 10] = [\n+// Add `String` here when it is added to diagnostic items\n+static COLLECTIONS: [Symbol; 9] = [\n     sym::BTreeMap,\n     sym::BTreeSet,\n     sym::BinaryHeap,\n     sym::HashMap,\n     sym::HashSet,\n     sym::LinkedList,\n     sym::Option,\n-    sym::String,\n     sym::Vec,\n     sym::VecDeque,\n ];\n \n impl<'tcx> LateLintPass<'tcx> for CollectionIsNeverRead {\n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n         // Look for local variables whose type is a container. Search surrounding bock for read access.\n-        let ty = cx.typeck_results().pat_ty(local.pat);\n-        if COLLECTIONS.iter().any(|&sym| is_type_diagnostic_item(cx, ty, sym))\n+        if match_acceptable_type(cx, local, &COLLECTIONS)\n             && let PatKind::Binding(_, local_id, _, _) = local.pat.kind\n             && let Some(enclosing_block) = get_enclosing_block(cx, local.hir_id)\n             && has_no_read_access(cx, local_id, enclosing_block)\n@@ -71,6 +70,13 @@ impl<'tcx> LateLintPass<'tcx> for CollectionIsNeverRead {\n     }\n }\n \n+fn match_acceptable_type(cx: &LateContext<'_>, local: &Local<'_>, collections: &[rustc_span::Symbol]) -> bool {\n+    let ty = cx.typeck_results().pat_ty(local.pat);\n+    collections.iter().any(|&sym| is_type_diagnostic_item(cx, ty, sym))\n+    // String type is a lang item but not a diagnostic item for now so we need a separate check\n+        || is_type_lang_item(cx, ty, LangItem::String)\n+}\n+\n fn has_no_read_access<'tcx>(cx: &LateContext<'tcx>, id: HirId, block: &'tcx Block<'tcx>) -> bool {\n     let mut has_access = false;\n     let mut has_read_access = false;"}, {"sha": "ca20031bfbefa3b3f496888f52fd5123ccb588f7", "filename": "tests/ui/collection_is_never_read.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/32aa07f8323d0f1896376443b389a95f7b141bf3/tests%2Fui%2Fcollection_is_never_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32aa07f8323d0f1896376443b389a95f7b141bf3/tests%2Fui%2Fcollection_is_never_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.rs?ref=32aa07f8323d0f1896376443b389a95f7b141bf3", "patch": "@@ -163,3 +163,23 @@ fn function_argument() {\n     let x = vec![1, 2, 3]; // Ok\n     foo(&x);\n }\n+\n+fn string() {\n+    // Do lint (write without read)\n+    let mut s = String::new();\n+    s.push_str(\"Hello, World!\");\n+\n+    // Do not lint (read without write)\n+    let mut s = String::from(\"Hello, World!\");\n+    let _ = s.len();\n+\n+    // Do not lint (write and read)\n+    let mut s = String::from(\"Hello, World!\");\n+    s.push_str(\"foo, bar\");\n+    let _ = s.len();\n+\n+    // Do lint the first line, but not the second\n+    let mut s = String::from(\"Hello, World!\");\n+    let t = String::from(\"foo, bar\");\n+    s = t;\n+}"}, {"sha": "f5dea96116f84f23b328368e0832b28d11ef2d73", "filename": "tests/ui/collection_is_never_read.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/32aa07f8323d0f1896376443b389a95f7b141bf3/tests%2Fui%2Fcollection_is_never_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32aa07f8323d0f1896376443b389a95f7b141bf3/tests%2Fui%2Fcollection_is_never_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollection_is_never_read.stderr?ref=32aa07f8323d0f1896376443b389a95f7b141bf3", "patch": "@@ -48,5 +48,17 @@ error: collection is never read\n LL |     let x = vec![1, 2, 3]; // WARNING\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:169:5\n+   |\n+LL |     let mut s = String::new();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: collection is never read\n+  --> $DIR/collection_is_never_read.rs:182:5\n+   |\n+LL |     let mut s = String::from(\"Hello, World!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n "}]}