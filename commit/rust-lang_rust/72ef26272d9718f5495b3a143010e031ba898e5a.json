{"sha": "72ef26272d9718f5495b3a143010e031ba898e5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZWYyNjI3MmQ5NzE4ZjU0OTViM2ExNDMwMTBlMDMxYmE4OThlNWE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-27T23:01:15Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-27T23:02:43Z"}, "message": "Lint `foo = bar; bar = foo` sequences", "tree": {"sha": "2b1028e078468ba89182f4222fb9e54d78aab71a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b1028e078468ba89182f4222fb9e54d78aab71a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ef26272d9718f5495b3a143010e031ba898e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ef26272d9718f5495b3a143010e031ba898e5a", "html_url": "https://github.com/rust-lang/rust/commit/72ef26272d9718f5495b3a143010e031ba898e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ef26272d9718f5495b3a143010e031ba898e5a/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98eb623043d4a2b0fc265d331f6b4d23bc1d74a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/98eb623043d4a2b0fc265d331f6b4d23bc1d74a6", "html_url": "https://github.com/rust-lang/rust/commit/98eb623043d4a2b0fc265d331f6b4d23bc1d74a6"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "f7527372585a8a47d94169a2b3140999dd3a8467", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ef26272d9718f5495b3a143010e031ba898e5a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/72ef26272d9718f5495b3a143010e031ba898e5a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=72ef26272d9718f5495b3a143010e031ba898e5a", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 125 lints included in this crate:\n+There are 126 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -114,6 +114,7 @@ name\n [string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                                 | warn    | calling `String::to_string` which is inefficient\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting) | warn    | suspicious formatting of `*=`, `-=` or `!=`\n [suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)             | warn    | suspicious formatting of `else if`\n+[suspicious_swap](https://github.com/Manishearth/rust-clippy/wiki#suspicious_swap)                                   | warn    | `foo = bar; bar = foo` sequence\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                         | warn    | assignments to temporaries\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                 | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n [trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | finds trivial regular expressions in `Regex::new(_)` invocations"}, {"sha": "217110e2bd8482640207dc9daedfeee1f20566f9", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72ef26272d9718f5495b3a143010e031ba898e5a/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ef26272d9718f5495b3a143010e031ba898e5a/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=72ef26272d9718f5495b3a143010e031ba898e5a", "patch": "@@ -86,6 +86,7 @@ pub mod regex;\n pub mod returns;\n pub mod shadow;\n pub mod strings;\n+pub mod swap;\n pub mod temporary_assignment;\n pub mod transmute;\n pub mod types;\n@@ -167,6 +168,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box copies::CopyAndPaste);\n     reg.register_late_lint_pass(box format::FormatMacLint);\n     reg.register_early_lint_pass(box formatting::Formatting);\n+    reg.register_late_lint_pass(box swap::Swap);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -285,6 +287,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_LIT_AS_BYTES,\n+        swap::SUSPICIOUS_SWAP,\n         temporary_assignment::TEMPORARY_ASSIGNMENT,\n         transmute::USELESS_TRANSMUTE,\n         types::ABSURD_EXTREME_COMPARISONS,"}, {"sha": "8e1b1e781f4a51aa12db2982db54d834c27be790", "filename": "src/swap.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/72ef26272d9718f5495b3a143010e031ba898e5a/src%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ef26272d9718f5495b3a143010e031ba898e5a/src%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fswap.rs?ref=72ef26272d9718f5495b3a143010e031ba898e5a", "patch": "@@ -0,0 +1,66 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::{differing_macro_contexts, snippet_opt, span_lint_and_then, SpanlessEq};\n+use syntax::codemap::mk_sp;\n+\n+/// **What it does:** This lints `foo = bar; bar = foo` sequences.\n+///\n+/// **Why is this bad?** This looks like a failed attempt to swap.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust,ignore\n+/// a = b;\n+/// b = a;\n+/// ```\n+declare_lint! {\n+    pub SUSPICIOUS_SWAP,\n+    Warn,\n+    \"`foo = bar; bar = foo` sequence\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct Swap;\n+\n+impl LintPass for Swap {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![SUSPICIOUS_SWAP]\n+    }\n+}\n+\n+impl LateLintPass for Swap {\n+    fn check_block(&mut self, cx: &LateContext, block: &Block) {\n+        for w in block.stmts.windows(2) {\n+            if_let_chain!{[\n+                let StmtSemi(ref first, _) = w[0].node,\n+                let StmtSemi(ref second, _) = w[1].node,\n+                !differing_macro_contexts(first.span, second.span),\n+                let ExprAssign(ref lhs0, ref rhs0) = first.node,\n+                let ExprAssign(ref lhs1, ref rhs1) = second.node,\n+                SpanlessEq::new(cx).ignore_fn().eq_expr(lhs0, rhs1),\n+                SpanlessEq::new(cx).ignore_fn().eq_expr(lhs1, rhs0)\n+            ], {\n+                let (what, lhs, rhs) = if let (Some(first), Some(second)) = (snippet_opt(cx, lhs0.span), snippet_opt(cx, rhs0.span)) {\n+                    (format!(\" `{}` and `{}`\", first, second), first, second)\n+                } else {\n+                    (\"\".to_owned(), \"\".to_owned(), \"\".to_owned())\n+                };\n+\n+                let span = mk_sp(first.span.lo, second.span.hi);\n+\n+                span_lint_and_then(cx,\n+                                   SUSPICIOUS_SWAP,\n+                                   span,\n+                                   &format!(\"this looks like you are trying to swap{}\", what),\n+                                   |db| {\n+                                       if !what.is_empty() {\n+                                           db.span_suggestion(span, \"try\",\n+                                                              format!(\"std::mem::swap({}, {})\", lhs, rhs));\n+                                           db.fileline_note(span, \"or maybe you should use `std::mem::replace`?\");\n+                                       }\n+                                   });\n+            }}\n+        }\n+    }\n+}"}, {"sha": "be2c785eb41256f00daf32e86fd76c4d1ecd5701", "filename": "tests/compile-fail/swap.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/72ef26272d9718f5495b3a143010e031ba898e5a/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ef26272d9718f5495b3a143010e031ba898e5a/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=72ef26272d9718f5495b3a143010e031ba898e5a", "patch": "@@ -0,0 +1,17 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+#![allow(unused_assignments)]\n+\n+fn main() {\n+    let mut a = 42;\n+    let mut b = 1337;\n+\n+    a = b;\n+    b = a;\n+    //~^^ ERROR this looks like you are trying to swap `a` and `b`\n+    //~| HELP try\n+    //~| SUGGESTION std::mem::swap(a, b);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+}"}]}