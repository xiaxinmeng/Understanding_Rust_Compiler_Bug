{"sha": "1a84d211a2dad78f1d3412c65f5a72053a82893d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODRkMjExYTJkYWQ3OGYxZDM0MTJjNjVmNWE3MjA1M2E4Mjg5M2Q=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-11-14T21:36:48Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2018-11-28T17:27:11Z"}, "message": "Check all substitution parameters for inference variables", "tree": {"sha": "16ce892c4ebbdaff7cb9cf2262800831f3b0a926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16ce892c4ebbdaff7cb9cf2262800831f3b0a926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a84d211a2dad78f1d3412c65f5a72053a82893d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlv+z+8ACgkQtAh+UQ6Y\nsWSV9g//RsosHwimHPpIlRXSydBVTI36FhZe59YpBYefQk33Ufb66J77BDsFjVHd\nYpFA8z0vkOFZmB9aOlWe3ZDkCns7RCUMk/fNvRgznm6gaECy8SA+R0jIiOVFZtJp\nAzP772Zwrm4+AcDQ0k6CWxLO7oU+H/VuXYiSwgVobRQ/QFLzPvLwb9rURFWNBxfO\nP+lw3uqoNKrvloU/z0924C/IreIEkF+3/pP/dLKw5p7h4SBqoi/D6TooXgKUZp/Q\nQjXeInZv/2WgJnFntGCr2eG0RAMqnat89Tjnbej9OWoT0FKlbOb6e/ADOcttiQwv\nF4OP1aijSRp9uGO9mwKIyimH3r9YvbUdA7h2h/WkLlh9TgY8h/Geal/KK3waHFKH\nV00+RGOWc2iPxw4yc5kCFLaAf8WgkoL13WqZVyVnipMLDxKBfBTbDqDWjC+sKilh\nAmrOFLRH7SxJzTuq7pOkqoEtOQXYAS78yh76BK9g6jwkh1gIxxtuVUTwUwfRy/wS\n/K7Ki3tIxDs55mJyQkRBzReg1D7BNPcDDXksGglGP46hJMNzHfjc48nos7U8czKZ\nY62MqnAZjXRHAGP9DbCPdLmLw0UJuai3M+nBAk3os83KvBLE9ggSdck/tsZAoSDD\nfqcvIJEr1Uo6AsBNkf03HhgpZXHZsjcm9tLLHPGKlS1BeoAhyNU=\n=XRxC\n-----END PGP SIGNATURE-----", "payload": "tree 16ce892c4ebbdaff7cb9cf2262800831f3b0a926\nparent f57247c48cb59a59dcfcb220251206064265479c\nauthor Aaron Hill <aa1ronham@gmail.com> 1542231408 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1543426031 -0500\n\nCheck all substitution parameters for inference variables\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a84d211a2dad78f1d3412c65f5a72053a82893d", "html_url": "https://github.com/rust-lang/rust/commit/1a84d211a2dad78f1d3412c65f5a72053a82893d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a84d211a2dad78f1d3412c65f5a72053a82893d/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57247c48cb59a59dcfcb220251206064265479c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57247c48cb59a59dcfcb220251206064265479c", "html_url": "https://github.com/rust-lang/rust/commit/f57247c48cb59a59dcfcb220251206064265479c"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "f560772e6c73f5a820ef078b4f749bdb4ec7c7da", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a84d211a2dad78f1d3412c65f5a72053a82893d/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a84d211a2dad78f1d3412c65f5a72053a82893d/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=1a84d211a2dad78f1d3412c65f5a72053a82893d", "patch": "@@ -374,7 +374,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 }\n                 &Ok(None) => {}\n                 &Err(SelectionError::Unimplemented) => {\n-                    if self.is_of_param(pred.skip_binder().self_ty()) {\n+                    if self.is_param_no_infer(pred.skip_binder().trait_ref.substs) {\n                         already_visited.remove(&pred);\n                         self.add_user_pred(\n                             &mut user_computed_preds,\n@@ -636,6 +636,11 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         finished_map\n     }\n \n+    fn is_param_no_infer(&self, substs: &Substs<'_>) -> bool {\n+        return self.is_of_param(substs.type_at(0)) &&\n+            !substs.types().any(|t| t.has_infer_types());\n+    }\n+\n     pub fn is_of_param(&self, ty: Ty<'_>) -> bool {\n         return match ty.sty {\n             ty::Param(_) => true,\n@@ -685,7 +690,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n             // from the various possible predicates\n             match &predicate {\n                 &ty::Predicate::Trait(ref p) => {\n-                    if self.is_of_param(p.skip_binder().self_ty())\n+                    if self.is_param_no_infer(p.skip_binder().trait_ref.substs)\n                         && !only_projections\n                         && is_new_pred {\n \n@@ -702,7 +707,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     // an inference variable.\n                     // Additionally, we check if we've seen this predicate before,\n                     // to avoid rendering duplicate bounds to the user.\n-                    if self.is_of_param(p.skip_binder().projection_ty.self_ty())\n+                    if self.is_param_no_infer(p.skip_binder().projection_ty.substs)\n                         && !p.ty().skip_binder().is_ty_infer()\n                         && is_new_pred {\n                             debug!(\"evaluate_nested_obligations: adding projection predicate\\"}]}