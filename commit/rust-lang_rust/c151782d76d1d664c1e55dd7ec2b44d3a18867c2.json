{"sha": "c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNTE3ODJkNzZkMWQ2NjRjMWU1NWRkN2VjMmI0NGQzYTE4ODY3YzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-09T02:28:45Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-11T06:42:26Z"}, "message": "reduce diversity in linting methods", "tree": {"sha": "3e368eefed65000d3fb5c033f83cc3265f0379b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e368eefed65000d3fb5c033f83cc3265f0379b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "html_url": "https://github.com/rust-lang/rust/commit/c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93addba7add1f49249120b724023333db894055", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93addba7add1f49249120b724023333db894055", "html_url": "https://github.com/rust-lang/rust/commit/b93addba7add1f49249120b724023333db894055"}], "stats": {"total": 60, "additions": 19, "deletions": 41}, "files": [{"sha": "ce57fb8110496036f86b0109aa636336a5f04f61", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "patch": "@@ -179,16 +179,17 @@ fn object_safety_violations_for_trait(\n             {\n                 // Using `CRATE_NODE_ID` is wrong, but it's hard to get a more precise id.\n                 // It's also hard to get a use site span, so we use the method definition span.\n-                tcx.lint_node_note(\n+                tcx.struct_span_lint_hir(\n                     WHERE_CLAUSES_OBJECT_SAFETY,\n                     hir::CRATE_HIR_ID,\n                     *span,\n                     &format!(\n                         \"the trait `{}` cannot be made into an object\",\n                         tcx.def_path_str(trait_def_id)\n                     ),\n-                    &violation.error_msg(),\n-                );\n+                )\n+                .note(&violation.error_msg())\n+                .emit();\n                 false\n             } else {\n                 true"}, {"sha": "eb65caf6fbe8f2ad0a67917313891992e37c80a4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "patch": "@@ -2562,32 +2562,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.struct_span_lint_hir(lint, hir_id, span.into(), msg).emit()\n     }\n \n-    pub fn lint_hir_note(\n-        self,\n-        lint: &'static Lint,\n-        hir_id: HirId,\n-        span: impl Into<MultiSpan>,\n-        msg: &str,\n-        note: &str,\n-    ) {\n-        let mut err = self.struct_span_lint_hir(lint, hir_id, span.into(), msg);\n-        err.note(note);\n-        err.emit()\n-    }\n-\n-    pub fn lint_node_note(\n-        self,\n-        lint: &'static Lint,\n-        id: hir::HirId,\n-        span: impl Into<MultiSpan>,\n-        msg: &str,\n-        note: &str,\n-    ) {\n-        let mut err = self.struct_span_lint_hir(lint, id, span.into(), msg);\n-        err.note(note);\n-        err.emit()\n-    }\n-\n     /// Walks upwards from `id` to find a node which might change lint levels with attributes.\n     /// It stops at `bound` and just returns it if reached.\n     pub fn maybe_lint_level_root_bounded("}, {"sha": "3f342a6e6ca30f1efdab6f2f59efc128e580628f", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "patch": "@@ -648,17 +648,17 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: DefId) {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n                     tcx.unsafe_derive_on_repr_packed(impl_def_id);\n                 } else {\n-                    tcx.lint_node_note(\n+                    tcx.struct_span_lint_hir(\n                         SAFE_PACKED_BORROWS,\n                         lint_hir_id,\n                         source_info.span,\n                         &format!(\n-                            \"{} is unsafe and requires unsafe function or block \\\n-                                            (error E0133)\",\n+                            \"{} is unsafe and requires unsafe function or block (error E0133)\",\n                             description\n                         ),\n-                        &details.as_str(),\n-                    );\n+                    )\n+                    .note(&details.as_str())\n+                    .emit();\n                 }\n             }\n         }"}, {"sha": "7718139f6e9246af2b0eb2ef03781ee4c3de31e6", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c151782d76d1d664c1e55dd7ec2b44d3a18867c2/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=c151782d76d1d664c1e55dd7ec2b44d3a18867c2", "patch": "@@ -1513,13 +1513,16 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                 if ln == self.s.exit_ln { false } else { self.assigned_on_exit(ln, var).is_some() };\n \n             if is_assigned {\n-                self.ir.tcx.lint_hir_note(\n-                    lint::builtin::UNUSED_VARIABLES,\n-                    hir_id,\n-                    spans,\n-                    &format!(\"variable `{}` is assigned to, but never used\", name),\n-                    &format!(\"consider using `_{}` instead\", name),\n-                );\n+                self.ir\n+                    .tcx\n+                    .struct_span_lint_hir(\n+                        lint::builtin::UNUSED_VARIABLES,\n+                        hir_id,\n+                        spans,\n+                        &format!(\"variable `{}` is assigned to, but never used\", name),\n+                    )\n+                    .note(&format!(\"consider using `_{}` instead\", name))\n+                    .emit();\n             } else {\n                 let mut err = self.ir.tcx.struct_span_lint_hir(\n                     lint::builtin::UNUSED_VARIABLES,"}]}