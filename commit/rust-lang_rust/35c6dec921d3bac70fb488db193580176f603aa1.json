{"sha": "35c6dec921d3bac70fb488db193580176f603aa1", "node_id": "C_kwDOAAsO6NoAKDM1YzZkZWM5MjFkM2JhYzcwZmI0ODhkYjE5MzU4MDE3NmY2MDNhYTE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-06-22T21:36:30Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-22T18:25:41Z"}, "message": "adjust UnsafeCell documentation", "tree": {"sha": "72d34a11f6259dc477d949d3a954faf841d2c658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d34a11f6259dc477d949d3a954faf841d2c658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35c6dec921d3bac70fb488db193580176f603aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35c6dec921d3bac70fb488db193580176f603aa1", "html_url": "https://github.com/rust-lang/rust/commit/35c6dec921d3bac70fb488db193580176f603aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35c6dec921d3bac70fb488db193580176f603aa1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7197af7fb379a84895084625b1eed47aa5c74f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7197af7fb379a84895084625b1eed47aa5c74f", "html_url": "https://github.com/rust-lang/rust/commit/5b7197af7fb379a84895084625b1eed47aa5c74f"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "fb4454c94cb3356c66d1fe052364cc0168d3c9c1", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/35c6dec921d3bac70fb488db193580176f603aa1/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c6dec921d3bac70fb488db193580176f603aa1/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=35c6dec921d3bac70fb488db193580176f603aa1", "patch": "@@ -1766,15 +1766,24 @@ impl<T: ?Sized + fmt::Display> fmt::Display for RefMut<'_, T> {\n ///\n /// The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:\n ///\n-/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T`\n-/// reference) that is accessible by safe code (for example, because you returned it),\n-/// then you must not access the data in any way that contradicts that reference for the\n-/// remainder of `'a`. For example, this means that if you take the `*mut T` from an\n-/// `UnsafeCell<T>` and cast it to an `&T`, then the data in `T` must remain immutable\n-/// (modulo any `UnsafeCell` data found within `T`, of course) until that reference's\n-/// lifetime expires. Similarly, if you create a `&mut T` reference that is released to\n-/// safe code, then you must not access the data within the `UnsafeCell` until that\n-/// reference expires.\n+/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T` reference), then\n+/// you must not access the data in any way that contradicts that reference for the remainder of\n+/// `'a`. For example, this means that if you take the `*mut T` from an `UnsafeCell<T>` and cast it\n+/// to an `&T`, then the data in `T` must remain immutable (modulo any `UnsafeCell` data found\n+/// within `T`, of course) until that reference's lifetime expires. Similarly, if you create a `&mut\n+/// T` reference that is released to safe code, then you must not access the data within the\n+/// `UnsafeCell` until that reference expires.\n+///\n+/// - For both `&T` without `UnsafeCell<_>` and `&mut T`, you must also not deallocate the data\n+/// until the reference expires. As a special exception, given an `&T`, any part of it that is\n+/// inside an `UnsafeCell<_>` may be deallocated during the lifetime of the reference, after the\n+/// last time the reference is used (dereferenced or reborrowed). Since you cannot deallocate a part\n+/// of what a reference points to, this means the memory an `&T` points to can be deallocted only if\n+/// *every part of it* (including padding) is inside an `UnsafeCell`.\n+///\n+///     However, whenever a `&UnsafeCell<T>` is constructed or dereferenced, it must still point to\n+/// live memory and the compiler is allowed to insert spurious reads if it can prove that this\n+/// memory has not yet been deallocated.\n ///\n /// - At all times, you must avoid data races. If multiple threads have access to\n /// the same `UnsafeCell`, then any writes must have a proper happens-before relation to all other"}]}