{"sha": "573bc5ad0190e2c309d13d5d2268d117c3cf2947", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3M2JjNWFkMDE5MGUyYzMwOWQxM2Q1ZDIyNjhkMTE3YzNjZjI5NDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-08T22:40:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-08T22:41:08Z"}, "message": "rustc: Resolve ty_locals", "tree": {"sha": "631542d11ff9dfc41e88977738beef3de7a674c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/631542d11ff9dfc41e88977738beef3de7a674c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/573bc5ad0190e2c309d13d5d2268d117c3cf2947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/573bc5ad0190e2c309d13d5d2268d117c3cf2947", "html_url": "https://github.com/rust-lang/rust/commit/573bc5ad0190e2c309d13d5d2268d117c3cf2947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/573bc5ad0190e2c309d13d5d2268d117c3cf2947/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535581185921ebb2602d4f42604e54436052fc1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/535581185921ebb2602d4f42604e54436052fc1f", "html_url": "https://github.com/rust-lang/rust/commit/535581185921ebb2602d4f42604e54436052fc1f"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "c29ea8721714bba94fc2782436ed5751b5fc5b23", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/573bc5ad0190e2c309d13d5d2268d117c3cf2947/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/573bc5ad0190e2c309d13d5d2268d117c3cf2947/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=573bc5ad0190e2c309d13d5d2268d117c3cf2947", "patch": "@@ -1441,7 +1441,8 @@ fn demand_block(&@fn_ctxt fcx, @ty.t expected, &ast.block bloc) -> ast.block {\n     }\n }\n \n-// Writeback: the phase that writes inferred types back into the AST.\n+// Local variable resolution: the phase that finds all the types in the AST\n+// and replaces opaque \"ty_local\" types with the resolved local types.\n \n fn writeback_local(&option.t[@fn_ctxt] env, &span sp, @ast.local local)\n         -> @ast.decl {\n@@ -1458,7 +1459,32 @@ fn writeback_local(&option.t[@fn_ctxt] env, &span sp, @ast.local local)\n     ret @fold.respan[ast.decl_](sp, ast.decl_local(local_wb));\n }\n \n-fn writeback(&@fn_ctxt fcx, &ast.block block) -> ast.block {\n+fn resolve_local_types_in_annotation(&option.t[@fn_ctxt] env, ast.ann ann)\n+        -> ast.ann {\n+    state obj folder(@fn_ctxt fcx) {\n+        fn fold_simple_ty(@ty.t typ) -> @ty.t {\n+            alt (typ.struct) {\n+            case (ty.ty_local(?lid)) { ret fcx.locals.get(lid); }\n+            case (_)                 { ret typ; }\n+            }\n+        }\n+    }\n+\n+    auto fcx = option.get[@fn_ctxt](env);\n+    alt (ann) {\n+    case (ast.ann_none) {\n+        log \"warning: no type for expression\";\n+        ret ann;\n+    }\n+    case (ast.ann_type(?typ, ?tps, ?ts_info)) {\n+        auto new_type = ty.fold_ty(folder(fcx), ann_to_type(ann));\n+        ret ast.ann_type(new_type, tps, ts_info);\n+    }\n+    }\n+}\n+\n+fn resolve_local_types_in_block(&@fn_ctxt fcx, &ast.block block)\n+        -> ast.block {\n     fn update_env_for_item(&option.t[@fn_ctxt] env, @ast.item i)\n             -> option.t[@fn_ctxt] {\n         ret none[@fn_ctxt];\n@@ -1467,12 +1493,15 @@ fn writeback(&@fn_ctxt fcx, &ast.block block) -> ast.block {\n         ret !option.is_none[@fn_ctxt](env);\n     }\n \n+    // FIXME: rustboot bug prevents us from using these functions directly\n     auto fld = fold.new_identity_fold[option.t[@fn_ctxt]]();\n     auto wbl = writeback_local;\n+    auto rltia = resolve_local_types_in_annotation;\n     auto uefi = update_env_for_item;\n     auto kg = keep_going;\n     fld = @rec(\n         fold_decl_local = wbl,\n+        fold_ann = rltia,\n         update_env_for_item = uefi,\n         keep_going = kg\n         with *fld\n@@ -2596,7 +2625,7 @@ fn check_fn(&@crate_ctxt ccx, &ast.fn_decl decl, ast.proto proto,\n \n     // TODO: Make sure the type of the block agrees with the function type.\n     auto block_t = check_block(fcx, body);\n-    auto block_wb = writeback(fcx, block_t);\n+    auto block_wb = resolve_local_types_in_block(fcx, block_t);\n \n     auto fn_t = rec(decl=decl,\n                     proto=proto,"}]}