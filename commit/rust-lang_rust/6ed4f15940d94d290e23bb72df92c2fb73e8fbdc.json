{"sha": "6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "node_id": "C_kwDOAAsO6NoAKDZlZDRmMTU5NDBkOTRkMjkwZTIzYmI3MmRmOTJjMmZiNzNlOGZiZGM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-25T07:47:59Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-25T07:52:06Z"}, "message": "RefCell::get_mut: fix typo\n\nand fix the same typo in a bunch of other places", "tree": {"sha": "5eb9d6a79118d0a0c9930017e6e9147535a60283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb9d6a79118d0a0c9930017e6e9147535a60283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "html_url": "https://github.com/rust-lang/rust/commit/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a78c9bee4d9d51a3891bd8ecae1f28a93b83653b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78c9bee4d9d51a3891bd8ecae1f28a93b83653b", "html_url": "https://github.com/rust-lang/rust/commit/a78c9bee4d9d51a3891bd8ecae1f28a93b83653b"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "47cce2aa39b0c5fb8d4fb5b23b10a5c9b7204088", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "patch": "@@ -1025,7 +1025,7 @@ impl<T: ?Sized> RefCell<T> {\n     ///\n     /// Since this method borrows `RefCell` mutably, it is statically guaranteed\n     /// that no borrows to the underlying data exist. The dynamic checks inherent\n-    /// in [`borrow_mut`] and most other methods of `RefCell` are therefor\n+    /// in [`borrow_mut`] and most other methods of `RefCell` are therefore\n     /// unnecessary.\n     ///\n     /// This method can only be called if `RefCell` can be mutably borrowed,"}, {"sha": "c7c53bc69d0b858982c6d2254e8ca0d01786446f", "filename": "src/tools/clippy/clippy_dev/src/setup/git_hook.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fsetup%2Fgit_hook.rs?ref=6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "patch": "@@ -6,7 +6,7 @@ use super::verify_inside_clippy_dir;\n /// Rusts setup uses `git rev-parse --git-common-dir` to get the root directory of the repo.\n /// I've decided against this for the sake of simplicity and to make sure that it doesn't install\n /// the hook if `clippy_dev` would be used in the rust tree. The hook also references this tool\n-/// for formatting and should therefor only be used in a normal clone of clippy\n+/// for formatting and should therefore only be used in a normal clone of clippy\n const REPO_GIT_DIR: &str = \".git\";\n const HOOK_SOURCE_FILE: &str = \"util/etc/pre-commit.sh\";\n const HOOK_TARGET_FILE: &str = \".git/hooks/pre-commit\";"}, {"sha": "abe10f3c81e51c69b80541164b2d7d146c6dc58d", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "patch": "@@ -113,7 +113,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                     }\n                 }\n \n-                // eq_pat adds the HirIds to the locals map. We therefor call it last to make sure that\n+                // eq_pat adds the HirIds to the locals map. We therefore call it last to make sure that\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))"}, {"sha": "ac086d4fe743328e7f31b1645e44e4da3aa2eb41", "filename": "src/tools/rust-analyzer/crates/flycheck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fflycheck%2Fsrc%2Flib.rs?ref=6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "patch": "@@ -362,7 +362,7 @@ impl FlycheckActor {\n /// A handle to a cargo process used for fly-checking.\n struct CargoHandle {\n     /// The handle to the actual cargo process. As we cannot cancel directly from with\n-    /// a read syscall dropping and therefor terminating the process is our best option.\n+    /// a read syscall dropping and therefore terminating the process is our best option.\n     child: JodChild,\n     thread: jod_thread::JoinHandle<io::Result<(bool, String)>>,\n     receiver: Receiver<CargoMessage>,"}, {"sha": "7352b003a491cde5ca4b09ce94ecfa1c99f9f172", "filename": "src/tools/rust-analyzer/crates/hir-expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fhir-expand%2Fsrc%2Flib.rs?ref=6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "patch": "@@ -814,7 +814,7 @@ impl<'a> InFile<&'a SyntaxNode> {\n \n     pub fn original_syntax_node(self, db: &dyn db::AstDatabase) -> Option<InFile<SyntaxNode>> {\n         // This kind of upmapping can only be achieved in attribute expanded files,\n-        // as we don't have node inputs otherwise and  therefor can't find an `N` node in the input\n+        // as we don't have node inputs otherwise and therefore can't find an `N` node in the input\n         if !self.file_id.is_macro() {\n             return Some(self.map(Clone::clone));\n         } else if !self.file_id.is_attr_macro(db) {\n@@ -926,7 +926,7 @@ impl<N: AstNode> InFile<N> {\n \n     pub fn original_ast_node(self, db: &dyn db::AstDatabase) -> Option<InFile<N>> {\n         // This kind of upmapping can only be achieved in attribute expanded files,\n-        // as we don't have node inputs otherwise and  therefor can't find an `N` node in the input\n+        // as we don't have node inputs otherwise and therefore can't find an `N` node in the input\n         if !self.file_id.is_macro() {\n             return Some(self);\n         } else if !self.file_id.is_attr_macro(db) {"}, {"sha": "c278ba2d7c5b341fb9c2047e6aebfa9824cb9a44", "filename": "src/tools/rust-analyzer/crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "patch": "@@ -157,7 +157,7 @@ config_data! {\n         checkOnSave_noDefaultFeatures: Option<bool>      = \"null\",\n         /// Override the command rust-analyzer uses instead of `cargo check` for\n         /// diagnostics on save. The command is required to output json and\n-        /// should therefor include `--message-format=json` or a similar option.\n+        /// should therefore include `--message-format=json` or a similar option.\n         ///\n         /// If you're changing this because you're using some tool wrapping\n         /// Cargo, you might also want to change"}, {"sha": "712ef5f63b651e9e3db63378dff73210a7622a12", "filename": "src/tools/rust-analyzer/crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ed4f15940d94d290e23bb72df92c2fb73e8fbdc/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2Fcrates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=6ed4f15940d94d290e23bb72df92c2fb73e8fbdc", "patch": "@@ -86,7 +86,7 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> String {\n                 .traits\n                 .iter()\n                 .filter(|trait_name| {\n-                    // Loops have two expressions so this might collide, therefor manual impl it\n+                    // Loops have two expressions so this might collide, therefore manual impl it\n                     node.name != \"ForExpr\" && node.name != \"WhileExpr\"\n                         || trait_name.as_str() != \"HasLoopBody\"\n                 })"}]}