{"sha": "5a01b547078e45cc1a96a062334d8571f129ddc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMDFiNTQ3MDc4ZTQ1Y2MxYTk2YTA2MjMzNGQ4NTcxZjEyOWRkYzI=", "commit": {"author": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2019-05-24T17:52:06Z"}, "committer": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2019-05-29T22:14:55Z"}, "message": "Add std::mem::take as suggested in #61129\n\nThe name `swap_default` was suggested but rejected. @SimonSapin observed\nthat this operation isn't really a `swap` in the same sense as\n`mem::swap`; it is a `replace`. Since `replace_default` is a bit\nmisleading, the \"correct\" name would be `replace_with_default`, which is\nquite verbose.\n\n@czipperz observed that we have precedence for using `take` to refer to\nmethods that replace with `Default` in `Cell::take` and `Option::take`,\nso this reverts commit 99c00591c29b472c8a87c4a9342d0e0c508647a3 to\nreturn to the original `take` method name.\n\nThe name `replace_with_default` was suggested, but was deemed too\nverbose, especially given that we use `take` for methods that replace\nwith `Default` elsewhere.", "tree": {"sha": "1b46c86a04500d3a5159a6f366b7bfc96a01a08b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b46c86a04500d3a5159a6f366b7bfc96a01a08b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a01b547078e45cc1a96a062334d8571f129ddc2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQR7xAhBO8lBfCClREb4++s7wVtzWwUCXO8EXwAKCRD4++s7wVtz\nW9cMAP4kcPOqSAKE+hk+EXJaDMjyOIADEN47zJUWpOteS7YFFQEAlPe6yeQIysjo\nokQB+IHGtAt7DlAznBysR8/alpl6Owo=\n=k0Vz\n-----END PGP SIGNATURE-----", "payload": "tree 1b46c86a04500d3a5159a6f366b7bfc96a01a08b\nparent 37d001e4deb206ed954fde5d91690221e8306fc3\nauthor Jon Gjengset <jon@thesquareplanet.com> 1558720326 -0400\ncommitter Jon Gjengset <jon@thesquareplanet.com> 1559168095 -0400\n\nAdd std::mem::take as suggested in #61129\n\nThe name `swap_default` was suggested but rejected. @SimonSapin observed\nthat this operation isn't really a `swap` in the same sense as\n`mem::swap`; it is a `replace`. Since `replace_default` is a bit\nmisleading, the \"correct\" name would be `replace_with_default`, which is\nquite verbose.\n\n@czipperz observed that we have precedence for using `take` to refer to\nmethods that replace with `Default` in `Cell::take` and `Option::take`,\nso this reverts commit 99c00591c29b472c8a87c4a9342d0e0c508647a3 to\nreturn to the original `take` method name.\n\nThe name `replace_with_default` was suggested, but was deemed too\nverbose, especially given that we use `take` for methods that replace\nwith `Default` elsewhere.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a01b547078e45cc1a96a062334d8571f129ddc2", "html_url": "https://github.com/rust-lang/rust/commit/5a01b547078e45cc1a96a062334d8571f129ddc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a01b547078e45cc1a96a062334d8571f129ddc2/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37d001e4deb206ed954fde5d91690221e8306fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37d001e4deb206ed954fde5d91690221e8306fc3", "html_url": "https://github.com/rust-lang/rust/commit/37d001e4deb206ed954fde5d91690221e8306fc3"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "c4d8e40a5e682f0e03d3a78bdd97bc099e418b1e", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5a01b547078e45cc1a96a062334d8571f129ddc2/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a01b547078e45cc1a96a062334d8571f129ddc2/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=5a01b547078e45cc1a96a062334d8571f129ddc2", "patch": "@@ -503,6 +503,61 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n     }\n }\n \n+/// Replace `dest` with the default value of `T`, and return the previous `dest` value.\n+///\n+/// # Examples\n+///\n+/// A simple example:\n+///\n+/// ```\n+/// use std::mem;\n+///\n+/// let mut v: Vec<i32> = vec![1, 2];\n+///\n+/// let old_v = mem::take(&mut v);\n+/// assert_eq!(vec![1, 2], old_v);\n+/// assert!(v.is_empty());\n+/// ```\n+///\n+/// `take` allows taking ownership of a struct field by replacing it with an \"empty\" value.\n+/// Without `take` you can run into issues like these:\n+///\n+/// ```compile_fail,E0507\n+/// struct Buffer<T> { buf: Vec<T> }\n+///\n+/// impl<T> Buffer<T> {\n+///     fn get_and_reset(&mut self) -> Vec<T> {\n+///         // error: cannot move out of dereference of `&mut`-pointer\n+///         let buf = self.buf;\n+///         self.buf = Vec::new();\n+///         buf\n+///     }\n+/// }\n+/// ```\n+///\n+/// Note that `T` does not necessarily implement [`Clone`], so it can't even clone and reset\n+/// `self.buf`. But `take` can be used to disassociate the original value of `self.buf` from\n+/// `self`, allowing it to be returned:\n+///\n+/// ```\n+/// # #![allow(dead_code)]\n+/// use std::mem;\n+///\n+/// # struct Buffer<T> { buf: Vec<T> }\n+/// impl<T> Buffer<T> {\n+///     fn get_and_reset(&mut self) -> Vec<T> {\n+///         mem::take(&mut self.buf)\n+///     }\n+/// }\n+/// ```\n+///\n+/// [`Clone`]: ../../std/clone/trait.Clone.html\n+#[inline]\n+#[unstable(feature = \"mem_take\", issue = \"61129\")]\n+pub fn take<T: Default>(dest: &mut T) -> T {\n+    replace(dest, T::default())\n+}\n+\n /// Moves `src` into the referenced `dest`, returning the previous `dest` value.\n ///\n /// Neither value is dropped."}]}