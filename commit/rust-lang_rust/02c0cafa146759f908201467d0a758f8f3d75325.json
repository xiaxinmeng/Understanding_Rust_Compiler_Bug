{"sha": "02c0cafa146759f908201467d0a758f8f3d75325", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYzBjYWZhMTQ2NzU5ZjkwODIwMTQ2N2QwYTc1OGY4ZjNkNzUzMjU=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T19:47:34Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T20:06:59Z"}, "message": "move NeedlessReturn pass out to its own module and rename to ReturnPass", "tree": {"sha": "81f8c03a5a36ba14cb0dcdbd4962b40d2eed6aa5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f8c03a5a36ba14cb0dcdbd4962b40d2eed6aa5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02c0cafa146759f908201467d0a758f8f3d75325", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02c0cafa146759f908201467d0a758f8f3d75325", "html_url": "https://github.com/rust-lang/rust/commit/02c0cafa146759f908201467d0a758f8f3d75325", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02c0cafa146759f908201467d0a758f8f3d75325/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d948705bf992a3e5de75637d2db5c30188df381", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d948705bf992a3e5de75637d2db5c30188df381", "html_url": "https://github.com/rust-lang/rust/commit/1d948705bf992a3e5de75637d2db5c30188df381"}], "stats": {"total": 149, "additions": 78, "deletions": 71}, "files": [{"sha": "c5469c19858071c971d26d88bce00d1ecdc4d2e0", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02c0cafa146759f908201467d0a758f8f3d75325/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c0cafa146759f908201467d0a758f8f3d75325/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=02c0cafa146759f908201467d0a758f8f3d75325", "patch": "@@ -30,6 +30,7 @@ pub mod unicode;\n pub mod utils;\n pub mod strings;\n pub mod methods;\n+pub mod returns;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -55,7 +56,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::ModuloOne as LintPassObject);\n     reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n-    reg.register_lint_pass(box misc::NeedlessReturn as LintPassObject);\n+    reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n@@ -77,7 +78,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            collapsible_if::COLLAPSIBLE_IF,\n                                            unicode::ZERO_WIDTH_SPACE,\n                                            strings::STRING_ADD_ASSIGN,\n-                                           misc::NEEDLESS_RETURN,\n+                                           returns::NEEDLESS_RETURN,\n                                            misc::MODULO_ONE,\n                                            methods::OPTION_UNWRAP_USED,\n                                            methods::RESULT_UNWRAP_USED,"}, {"sha": "934e8a7fb77e14a982f1c773a84c842726719637", "filename": "src/misc.rs", "status": "modified", "additions": 0, "deletions": 69, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/02c0cafa146759f908201467d0a758f8f3d75325/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c0cafa146759f908201467d0a758f8f3d75325/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=02c0cafa146759f908201467d0a758f8f3d75325", "patch": "@@ -270,75 +270,6 @@ fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n         walk_ptrs_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n }\n \n-declare_lint!(pub NEEDLESS_RETURN, Warn,\n-              \"Warn on using a return statement where an expression would be enough\");\n-\n-#[derive(Copy,Clone)]\n-pub struct NeedlessReturn;\n-\n-impl NeedlessReturn {\n-    // Check the final stmt or expr in a block for unnecessary return.\n-    fn check_block_return(&mut self, cx: &Context, block: &Block) {\n-        if let Some(ref expr) = block.expr {\n-            self.check_final_expr(cx, expr);\n-        } else if let Some(stmt) = block.stmts.last() {\n-            if let StmtSemi(ref expr, _) = stmt.node {\n-                if let ExprRet(Some(ref inner)) = expr.node {\n-                    self.emit_lint(cx, (expr.span, inner.span));\n-                }\n-            }\n-        }\n-    }\n-\n-    // Check a the final expression in a block if it's a return.\n-    fn check_final_expr(&mut self, cx: &Context, expr: &Expr) {\n-        match expr.node {\n-            // simple return is always \"bad\"\n-            ExprRet(Some(ref inner)) => {\n-                self.emit_lint(cx, (expr.span, inner.span));\n-            }\n-            // a whole block? check it!\n-            ExprBlock(ref block) => {\n-                self.check_block_return(cx, block);\n-            }\n-            // an if/if let expr, check both exprs\n-            // note, if without else is going to be a type checking error anyways\n-            // (except for unit type functions) so we don't match it\n-            ExprIf(_, ref ifblock, Some(ref elsexpr)) |\n-            ExprIfLet(_, _, ref ifblock, Some(ref elsexpr)) => {\n-                self.check_block_return(cx, ifblock);\n-                self.check_final_expr(cx, elsexpr);\n-            }\n-            // a match expr, check all arms\n-            ExprMatch(_, ref arms, _) => {\n-                for arm in arms {\n-                    self.check_final_expr(cx, &*arm.body);\n-                }\n-            }\n-            _ => { }\n-        }\n-    }\n-\n-    fn emit_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n-        span_lint(cx, NEEDLESS_RETURN, spans.0, &format!(\n-            \"unneeded return statement. Consider using {} \\\n-             without the trailing semicolon\",\n-            snippet(cx, spans.1, \"..\")))\n-    }\n-}\n-\n-impl LintPass for NeedlessReturn {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(NEEDLESS_RETURN)\n-    }\n-\n-    fn check_fn(&mut self, cx: &Context, _: FnKind, _: &FnDecl,\n-                block: &Block, _: Span, _: ast::NodeId) {\n-        self.check_block_return(cx, block);\n-    }\n-}\n-\n-\n declare_lint!(pub MODULO_ONE, Warn, \"Warn on expressions that include % 1, which is always 0\");\n \n #[derive(Copy,Clone)]"}, {"sha": "d6a4b33b6d1f7ad58bd13df146d7b460e64d2d78", "filename": "src/returns.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/02c0cafa146759f908201467d0a758f8f3d75325/src%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02c0cafa146759f908201467d0a758f8f3d75325/src%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freturns.rs?ref=02c0cafa146759f908201467d0a758f8f3d75325", "patch": "@@ -0,0 +1,75 @@\n+use syntax::ast;\n+use syntax::ast::*;\n+use syntax::codemap::Span;\n+use syntax::visit::FnKind;\n+use rustc::lint::{Context, LintPass, LintArray};\n+\n+use utils::{span_lint, snippet};\n+\n+declare_lint!(pub NEEDLESS_RETURN, Warn,\n+              \"Warn on using a return statement where an expression would be enough\");\n+\n+#[derive(Copy,Clone)]\n+pub struct ReturnPass;\n+\n+impl ReturnPass {\n+    // Check the final stmt or expr in a block for unnecessary return.\n+    fn check_block_return(&mut self, cx: &Context, block: &Block) {\n+        if let Some(ref expr) = block.expr {\n+            self.check_final_expr(cx, expr);\n+        } else if let Some(stmt) = block.stmts.last() {\n+            if let StmtSemi(ref expr, _) = stmt.node {\n+                if let ExprRet(Some(ref inner)) = expr.node {\n+                    self.emit_lint(cx, (expr.span, inner.span));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Check a the final expression in a block if it's a return.\n+    fn check_final_expr(&mut self, cx: &Context, expr: &Expr) {\n+        match expr.node {\n+            // simple return is always \"bad\"\n+            ExprRet(Some(ref inner)) => {\n+                self.emit_lint(cx, (expr.span, inner.span));\n+            }\n+            // a whole block? check it!\n+            ExprBlock(ref block) => {\n+                self.check_block_return(cx, block);\n+            }\n+            // an if/if let expr, check both exprs\n+            // note, if without else is going to be a type checking error anyways\n+            // (except for unit type functions) so we don't match it\n+            ExprIf(_, ref ifblock, Some(ref elsexpr)) |\n+            ExprIfLet(_, _, ref ifblock, Some(ref elsexpr)) => {\n+                self.check_block_return(cx, ifblock);\n+                self.check_final_expr(cx, elsexpr);\n+            }\n+            // a match expr, check all arms\n+            ExprMatch(_, ref arms, _) => {\n+                for arm in arms {\n+                    self.check_final_expr(cx, &*arm.body);\n+                }\n+            }\n+            _ => { }\n+        }\n+    }\n+\n+    fn emit_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n+        span_lint(cx, NEEDLESS_RETURN, spans.0, &format!(\n+            \"unneeded return statement. Consider using {} \\\n+             without the trailing semicolon\",\n+            snippet(cx, spans.1, \"..\")))\n+    }\n+}\n+\n+impl LintPass for ReturnPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEEDLESS_RETURN)\n+    }\n+\n+    fn check_fn(&mut self, cx: &Context, _: FnKind, _: &FnDecl,\n+                block: &Block, _: Span, _: ast::NodeId) {\n+        self.check_block_return(cx, block);\n+    }\n+}"}]}