{"sha": "6a73a454186c6795e692108b878492f8e25cd558", "node_id": "C_kwDOAAsO6NoAKDZhNzNhNDU0MTg2YzY3OTVlNjkyMTA4Yjg3ODQ5MmY4ZTI1Y2Q1NTg", "commit": {"author": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-08-10T17:40:42Z"}, "committer": {"name": "Lukas Lueg", "email": "lukas.lueg@gmail.com", "date": "2022-08-10T17:40:42Z"}, "message": "Fix if_let_mutex not checking Mutexes behind refs\n\nFixes #9193", "tree": {"sha": "35faafc94d27a59ab4bcdb0ea8200bacc704fcec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35faafc94d27a59ab4bcdb0ea8200bacc704fcec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a73a454186c6795e692108b878492f8e25cd558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a73a454186c6795e692108b878492f8e25cd558", "html_url": "https://github.com/rust-lang/rust/commit/6a73a454186c6795e692108b878492f8e25cd558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a73a454186c6795e692108b878492f8e25cd558/comments", "author": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukaslueg", "id": 3148704, "node_id": "MDQ6VXNlcjMxNDg3MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3148704?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukaslueg", "html_url": "https://github.com/lukaslueg", "followers_url": "https://api.github.com/users/lukaslueg/followers", "following_url": "https://api.github.com/users/lukaslueg/following{/other_user}", "gists_url": "https://api.github.com/users/lukaslueg/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukaslueg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukaslueg/subscriptions", "organizations_url": "https://api.github.com/users/lukaslueg/orgs", "repos_url": "https://api.github.com/users/lukaslueg/repos", "events_url": "https://api.github.com/users/lukaslueg/events{/privacy}", "received_events_url": "https://api.github.com/users/lukaslueg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7e2cb4470f5288e6657166fb0fcdf4b7043517f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7e2cb4470f5288e6657166fb0fcdf4b7043517f", "html_url": "https://github.com/rust-lang/rust/commit/f7e2cb4470f5288e6657166fb0fcdf4b7043517f"}], "stats": {"total": 24, "additions": 22, "deletions": 2}, "files": [{"sha": "7c12a638529d8f3f7c9d9f6e22eb9cb273a9bd3b", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a73a454186c6795e692108b878492f8e25cd558/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a73a454186c6795e692108b878492f8e25cd558/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=6a73a454186c6795e692108b878492f8e25cd558", "patch": "@@ -129,7 +129,7 @@ fn is_mutex_lock_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Opt\n     if_chain! {\n         if let ExprKind::MethodCall(path, [self_arg, ..], _) = &expr.kind;\n         if path.ident.as_str() == \"lock\";\n-        let ty = cx.typeck_results().expr_ty(self_arg);\n+        let ty = cx.typeck_results().expr_ty(self_arg).peel_refs();\n         if is_type_diagnostic_item(cx, ty, sym::Mutex);\n         then {\n             Some(self_arg)"}, {"sha": "321feb0224ed11a97d111f645b8c77b7af073b89", "filename": "tests/ui/if_let_mutex.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a73a454186c6795e692108b878492f8e25cd558/tests%2Fui%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a73a454186c6795e692108b878492f8e25cd558/tests%2Fui%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_mutex.rs?ref=6a73a454186c6795e692108b878492f8e25cd558", "patch": "@@ -39,4 +39,12 @@ fn if_let_different_mutex() {\n     };\n }\n \n+fn mutex_ref(mutex: &Mutex<i32>) {\n+    if let Ok(i) = mutex.lock() {\n+        do_stuff(i);\n+    } else {\n+        let _x = mutex.lock();\n+    };\n+}\n+\n fn main() {}"}, {"sha": "a831090c1f98fbff1639234153a145ba8143950f", "filename": "tests/ui/if_let_mutex.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6a73a454186c6795e692108b878492f8e25cd558/tests%2Fui%2Fif_let_mutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a73a454186c6795e692108b878492f8e25cd558/tests%2Fui%2Fif_let_mutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_mutex.stderr?ref=6a73a454186c6795e692108b878492f8e25cd558", "patch": "@@ -25,5 +25,17 @@ LL | |     };\n    |\n    = help: move the lock call outside of the `if let ...` expression\n \n-error: aborting due to 2 previous errors\n+error: calling `Mutex::lock` inside the scope of another `Mutex::lock` causes a deadlock\n+  --> $DIR/if_let_mutex.rs:43:5\n+   |\n+LL | /     if let Ok(i) = mutex.lock() {\n+LL | |         do_stuff(i);\n+LL | |     } else {\n+LL | |         let _x = mutex.lock();\n+LL | |     };\n+   | |_____^\n+   |\n+   = help: move the lock call outside of the `if let ...` expression\n+\n+error: aborting due to 3 previous errors\n "}]}