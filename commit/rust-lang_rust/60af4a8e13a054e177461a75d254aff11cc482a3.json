{"sha": "60af4a8e13a054e177461a75d254aff11cc482a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwYWY0YThlMTNhMDU0ZTE3NzQ2MWE3NWQyNTRhZmYxMWNjNDgyYTM=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-08T06:03:11Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-07-08T06:06:24Z"}, "message": "Remove duplication in missing_inline", "tree": {"sha": "bc85759820c021620a3159eb7374b891d6d51ce6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc85759820c021620a3159eb7374b891d6d51ce6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60af4a8e13a054e177461a75d254aff11cc482a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60af4a8e13a054e177461a75d254aff11cc482a3", "html_url": "https://github.com/rust-lang/rust/commit/60af4a8e13a054e177461a75d254aff11cc482a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60af4a8e13a054e177461a75d254aff11cc482a3/comments", "author": null, "committer": null, "parents": [{"sha": "d914106d871050f84f465fc906b9b7b431d828ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d914106d871050f84f465fc906b9b7b431d828ce", "html_url": "https://github.com/rust-lang/rust/commit/d914106d871050f84f465fc906b9b7b431d828ce"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "6987eaa71d999066ebf897738753601714afae1a", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/60af4a8e13a054e177461a75d254aff11cc482a3/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60af4a8e13a054e177461a75d254aff11cc482a3/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=60af4a8e13a054e177461a75d254aff11cc482a3", "patch": "@@ -169,28 +169,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n \n         let def_id = cx.tcx.hir.local_def_id(impl_item.id);\n-        match cx.tcx.associated_item(def_id).container {\n-            TraitContainer(cid) => {\n-                if let Some(n) = cx.tcx.hir.as_local_node_id(cid) {\n-                    if !cx.access_levels.is_exported(n) {\n-                        // If a trait is being implemented for an item, and the\n-                        // trait is not exported, we don't need #[inline]\n-                        return;\n-                    }\n-                }\n-            },\n-            ImplContainer(cid) => {\n-                if cx.tcx.impl_trait_ref(cid).is_some() {\n-                    let trait_ref = cx.tcx.impl_trait_ref(cid).unwrap();\n-                    if let Some(n) = cx.tcx.hir.as_local_node_id(trait_ref.def_id) {\n-                        if !cx.access_levels.is_exported(n) {\n-                            // If a trait is being implemented for an item, and the\n-                            // trait is not exported, we don't need #[inline]\n-                            return;\n-                        }\n-                    }\n+        let trait_def_id = match cx.tcx.associated_item(def_id).container {\n+            TraitContainer(cid) => Some(cid),\n+            ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),\n+        };\n+\n+        if let Some(trait_def_id) = trait_def_id {\n+            if let Some(n) = cx.tcx.hir.as_local_node_id(trait_def_id) {\n+                if !cx.access_levels.is_exported(n) {\n+                    // If a trait is being implemented for an item, and the\n+                    // trait is not exported, we don't need #[inline]\n+                    return;\n                 }\n-            },\n+            }\n         }\n \n         check_missing_inline_attrs(cx, &impl_item.attrs, impl_item.span, desc);"}]}