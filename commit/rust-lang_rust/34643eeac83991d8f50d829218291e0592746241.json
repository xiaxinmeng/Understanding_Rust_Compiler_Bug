{"sha": "34643eeac83991d8f50d829218291e0592746241", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NjQzZWVhYzgzOTkxZDhmNTBkODI5MjE4MjkxZTA1OTI3NDYyNDE=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-11T19:19:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-11T21:59:52Z"}, "message": "Fix another import case we got wrong: The local environment should not\ninterfere with the import statements.", "tree": {"sha": "18d251349caa8af9de79ba7c21c6f3032e97d33d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d251349caa8af9de79ba7c21c6f3032e97d33d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34643eeac83991d8f50d829218291e0592746241", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34643eeac83991d8f50d829218291e0592746241", "html_url": "https://github.com/rust-lang/rust/commit/34643eeac83991d8f50d829218291e0592746241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34643eeac83991d8f50d829218291e0592746241/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5a766f13379e543d2721b610c8eb6f3beb2af69", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a766f13379e543d2721b610c8eb6f3beb2af69", "html_url": "https://github.com/rust-lang/rust/commit/c5a766f13379e543d2721b610c8eb6f3beb2af69"}], "stats": {"total": 85, "additions": 58, "deletions": 27}, "files": [{"sha": "11b63f549ce6c2c64853857dac21f3d81b82c235", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34643eeac83991d8f50d829218291e0592746241/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/34643eeac83991d8f50d829218291e0592746241/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=34643eeac83991d8f50d829218291e0592746241", "patch": "@@ -443,6 +443,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         i8-incr.rs \\\n                         import2.rs \\\n                         import3.rs \\\n+                        import4.rs \\\n                         item-name-overload.rs \\\n                         large-records.rs \\\n                         lazy-init.rs \\"}, {"sha": "95f84f463e9956b2f65e675c8faf6801df30f1ea", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 47, "deletions": 27, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/34643eeac83991d8f50d829218291e0592746241/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34643eeac83991d8f50d829218291e0592746241/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=34643eeac83991d8f50d829218291e0592746241", "patch": "@@ -3,6 +3,7 @@ import front.ast.ident;\n import front.ast.def;\n import front.ast.ann;\n import driver.session;\n+import util.common.new_def_hash;\n import util.common.span;\n import std.map.hashmap;\n import std.list.list;\n@@ -24,6 +25,8 @@ tag scope {\n type env = rec(list[scope] scopes,\n                session.session sess);\n \n+type import_map = std.map.hashmap[ast.def_id,def_wrap];\n+\n // A simple wrapper over defs that stores a bit more information about modules\n // and uses so that we can use the regular lookup_name when resolving imports.\n tag def_wrap {\n@@ -69,7 +72,7 @@ fn unwrap_def(option.t[def_wrap] d_) -> option.t[def] {\n fn find_final_def(&env e, &span sp, vec[ident] idents) -> option.t[def_wrap] {\n     auto len = _vec.len[ident](idents);\n     auto first = idents.(0);\n-    auto d_ = lookup_name(e, first);\n+    auto d_ = lookup_name(e, none[import_map], first);\n     if (len == 1u) {\n         ret d_;\n     }\n@@ -93,7 +96,8 @@ fn find_final_def(&env e, &span sp, vec[ident] idents) -> option.t[def_wrap] {\n     fail;\n }\n \n-fn lookup_name(&env e, ast.ident i) -> option.t[def_wrap] {\n+fn lookup_name(&env e, option.t[import_map] index,\n+               ast.ident i) -> option.t[def_wrap] {\n \n     // log \"resolving name \" + i;\n \n@@ -137,24 +141,33 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def_wrap] {\n         ret none[def_wrap];\n     }\n \n-    fn found_def_view(&env e, @ast.view_item i) -> option.t[def_wrap] {\n+    fn found_def_view(&env e, option.t[import_map] index,\n+                      @ast.view_item i) -> option.t[def_wrap] {\n         alt (i.node) {\n             case (ast.view_item_use(_, _, ?id)) {\n                 ret some[def_wrap](def_wrap_use(i));\n             }\n-            case (ast.view_item_import(?idents,_)) {\n-                ret find_final_def(e, i.span, idents);\n+            case (ast.view_item_import(?idents,?d)) {\n+                alt (index) {\n+                    case (some[import_map](?idx)) {\n+                        ret idx.find(d);\n+                    }\n+                    case (none[import_map]) {\n+                        ret find_final_def(e, i.span, idents);\n+                    }\n+                }\n             }\n         }\n         fail;\n     }\n \n-    fn check_mod(&env e, ast.ident i, ast._mod m) -> option.t[def_wrap] {\n+    fn check_mod(&env e, option.t[import_map] index, ast.ident i,\n+                 ast._mod m) -> option.t[def_wrap] {\n         alt (m.index.find(i)) {\n             case (some[ast.mod_index_entry](?ent)) {\n                 alt (ent) {\n                     case (ast.mie_view_item(?ix)) {\n-                        ret found_def_view(e, m.view_items.(ix));\n+                        ret found_def_view(e, index, m.view_items.(ix));\n                     }\n                     case (ast.mie_item(?ix)) {\n                         ret found_def_item(m.items.(ix));\n@@ -180,11 +193,12 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def_wrap] {\n     }\n \n \n-    fn in_scope(ast.ident i, env e, &scope s) -> option.t[def_wrap] {\n+    fn in_scope(ast.ident i, env e, option.t[import_map] index,\n+                &scope s) -> option.t[def_wrap] {\n         alt (s) {\n \n             case (scope_crate(?c)) {\n-                ret check_mod(e, i, c.node.module);\n+                ret check_mod(e, index, i, c.node.module);\n             }\n \n             case (scope_item(?it)) {\n@@ -218,7 +232,7 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def_wrap] {\n                         }\n                     }\n                     case (ast.item_mod(_, ?m, _)) {\n-                        ret check_mod(e, i, m);\n+                        ret check_mod(e, index, i, m);\n                     }\n                     case (_) { /* fall through */ }\n                 }\n@@ -246,13 +260,15 @@ fn lookup_name(&env e, ast.ident i) -> option.t[def_wrap] {\n         ret none[def_wrap];\n     }\n \n-    ret std.list.find[scope,def_wrap](e.scopes, bind in_scope(i, e, _));\n+    ret std.list.find[scope,def_wrap](e.scopes,\n+                                      bind in_scope(i, e, index, _));\n }\n \n-fn fold_pat_tag(&env e, &span sp, ident i, vec[@ast.pat] args,\n-                option.t[ast.variant_def] old_def, ann a) -> @ast.pat {\n+fn fold_pat_tag(&env e, &span sp, import_map index, ident i,\n+                vec[@ast.pat] args, option.t[ast.variant_def] old_def,\n+                ann a) -> @ast.pat {\n     auto new_def;\n-    alt (unwrap_def(lookup_name(e, i))) {\n+    alt (unwrap_def(lookup_name(e, some(index), i))) {\n         case (some[def](?d)) {\n             alt (d) {\n                 case (ast.def_variant(?did, ?vid)) {\n@@ -273,14 +289,14 @@ fn fold_pat_tag(&env e, &span sp, ident i, vec[@ast.pat] args,\n     ret @fold.respan[ast.pat_](sp, ast.pat_tag(i, args, new_def, a));\n }\n \n-fn fold_expr_name(&env e, &span sp, &ast.name n,\n-                  &option.t[def] d, ann a) -> @ast.expr {\n+fn fold_expr_name(&env e, &span sp, import_map index,\n+                  &ast.name n, &option.t[def] d, ann a) -> @ast.expr {\n \n     if (_vec.len[@ast.ty](n.node.types) > 0u) {\n         e.sess.unimpl(\"resolving name expr with ty params\");\n     }\n \n-    auto d_ = unwrap_def(lookup_name(e, n.node.ident));\n+    auto d_ = unwrap_def(lookup_name(e, some(index), n.node.ident));\n \n     alt (d_) {\n         case (some[def](_)) {\n@@ -294,25 +310,27 @@ fn fold_expr_name(&env e, &span sp, &ast.name n,\n     ret @fold.respan[ast.expr_](sp, ast.expr_name(n, d_, a));\n }\n \n-fn fold_view_item_import(&env e, &span sp, vec[ident] is,\n-                         ast.def_id id) -> @ast.view_item {\n+fn fold_view_item_import(&env e, &span sp,\n+                         import_map index,\n+                         vec[ident] is, ast.def_id id) -> @ast.view_item {\n     // Produce errors for invalid imports\n     auto len = _vec.len[ast.ident](is);\n     auto last_id = is.(len - 1u);\n-    auto d = lookup_name(e, last_id);\n+    auto d = lookup_name(e, none[import_map], last_id);\n     alt (d) {\n         case (none[def_wrap]) {\n             e.sess.span_err(sp, \"unresolved name: \" + last_id);\n         }\n-        case (some[def_wrap](_)) {\n+        case (some[def_wrap](?d2)) {\n+            index.insert(id, d2);\n         }\n     }\n \n     ret @fold.respan[ast.view_item_](sp, ast.view_item_import(is, id));\n }\n \n \n-fn fold_ty_path(&env e, &span sp, ast.path p,\n+fn fold_ty_path(&env e, &span sp, import_map index, ast.path p,\n                 &option.t[def] d) -> @ast.ty {\n \n     let uint len = _vec.len[ast.name](p);\n@@ -327,7 +345,7 @@ fn fold_ty_path(&env e, &span sp, ast.path p,\n         e.sess.unimpl(\"resolving path ty with ty params\");\n     }\n \n-    auto d_ = unwrap_def(lookup_name(e, n.node.ident));\n+    auto d_ = unwrap_def(lookup_name(e, some(index), n.node.ident));\n \n     alt (d_) {\n         case (some[def](_)) {\n@@ -361,10 +379,12 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n \n     let fold.ast_fold[env] fld = fold.new_identity_fold[env]();\n \n-    fld = @rec( fold_pat_tag = bind fold_pat_tag(_,_,_,_,_,_),\n-                fold_expr_name = bind fold_expr_name(_,_,_,_,_),\n-                fold_view_item_import = bind fold_view_item_import(_,_,_,_),\n-                fold_ty_path = bind fold_ty_path(_,_,_,_),\n+    auto import_index = new_def_hash[def_wrap]();\n+    fld = @rec( fold_pat_tag = bind fold_pat_tag(_,_,import_index,_,_,_,_),\n+                fold_expr_name = bind fold_expr_name(_,_,import_index,_,_,_),\n+                fold_view_item_import\n+                    = bind fold_view_item_import(_,_,import_index,_,_),\n+                fold_ty_path = bind fold_ty_path(_,_,import_index,_,_),\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n                 update_env_for_block = bind update_env_for_block(_,_),"}, {"sha": "5b0cb9f331ff064ccc332a157363b708e3f61409", "filename": "src/test/run-pass/import4.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34643eeac83991d8f50d829218291e0592746241/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34643eeac83991d8f50d829218291e0592746241/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=34643eeac83991d8f50d829218291e0592746241", "patch": "@@ -0,0 +1,10 @@\n+import zed.bar;\n+mod zed {\n+  fn bar() {\n+    log \"bar\";\n+  }\n+}\n+fn main(vec[str] args) {\n+  auto zed = 42;\n+  bar();\n+}"}]}