{"sha": "3122d8027bfb38b76a916ef0e7be850da62f6e0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMjJkODAyN2JmYjM4Yjc2YTkxNmVmMGU3YmU4NTBkYTYyZjZlMGI=", "commit": {"author": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T15:24:43Z"}, "committer": {"name": "gifnksm", "email": "makoto.nksm+github@gmail.com", "date": "2013-05-17T15:24:43Z"}, "message": "libcore: Add `IteratorUtil::all`, `any` method", "tree": {"sha": "e7a6fa97b8a551453c7c91e9c5d54843b4938fc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a6fa97b8a551453c7c91e9c5d54843b4938fc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3122d8027bfb38b76a916ef0e7be850da62f6e0b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3122d8027bfb38b76a916ef0e7be850da62f6e0b", "html_url": "https://github.com/rust-lang/rust/commit/3122d8027bfb38b76a916ef0e7be850da62f6e0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3122d8027bfb38b76a916ef0e7be850da62f6e0b/comments", "author": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gifnksm", "id": 164213, "node_id": "MDQ6VXNlcjE2NDIxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/164213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gifnksm", "html_url": "https://github.com/gifnksm", "followers_url": "https://api.github.com/users/gifnksm/followers", "following_url": "https://api.github.com/users/gifnksm/following{/other_user}", "gists_url": "https://api.github.com/users/gifnksm/gists{/gist_id}", "starred_url": "https://api.github.com/users/gifnksm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gifnksm/subscriptions", "organizations_url": "https://api.github.com/users/gifnksm/orgs", "repos_url": "https://api.github.com/users/gifnksm/repos", "events_url": "https://api.github.com/users/gifnksm/events{/privacy}", "received_events_url": "https://api.github.com/users/gifnksm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54fbac505ed13c4afe193c8c4d6212df708e74d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/54fbac505ed13c4afe193c8c4d6212df708e74d0", "html_url": "https://github.com/rust-lang/rust/commit/54fbac505ed13c4afe193c8c4d6212df708e74d0"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "588bd0bde5343295f6e27a85395dd2400c2d96af", "filename": "src/libcore/iterator.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3122d8027bfb38b76a916ef0e7be850da62f6e0b/src%2Flibcore%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3122d8027bfb38b76a916ef0e7be850da62f6e0b/src%2Flibcore%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiterator.rs?ref=3122d8027bfb38b76a916ef0e7be850da62f6e0b", "patch": "@@ -53,6 +53,8 @@ pub trait IteratorUtil<A> {\n     fn last(&mut self) -> A;\n     fn fold<B>(&mut self, start: B, f: &fn(B, A) -> B) -> B;\n     fn count(&mut self) -> uint;\n+    fn all(&mut self, f: &fn(&A) -> bool) -> bool;\n+    fn any(&mut self, f: &fn(&A) -> bool) -> bool;\n }\n \n /// Iterator adaptors provided for every `Iterator` implementation. The adaptor objects are also\n@@ -204,6 +206,18 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     /// Count the number of an iterator elemenrs\n     #[inline(always)]\n     fn count(&mut self) -> uint { self.fold(0, |cnt, _x| cnt + 1) }\n+\n+    #[inline(always)]\n+    fn all(&mut self, f: &fn(&A) -> bool) -> bool {\n+        for self.advance |x| { if !f(&x) { return false; } }\n+        return true;\n+    }\n+\n+    #[inline(always)]\n+    fn any(&mut self, f: &fn(&A) -> bool) -> bool {\n+        for self.advance |x| { if f(&x) { return true; } }\n+        return false;\n+    }\n }\n \n pub trait AdditiveIterator<A> {\n@@ -754,4 +768,21 @@ mod tests {\n         assert_eq!(v.slice(0, 0).iter().transform(|&x| x).min(), None);\n     }\n \n+    #[test]\n+    fn test_all() {\n+        let v = ~&[1, 2, 3, 4, 5];\n+        assert!(v.iter().all(|&x| *x < 10));\n+        assert!(!v.iter().all(|&x| x.is_even()));\n+        assert!(!v.iter().all(|&x| *x > 100));\n+        assert!(v.slice(0, 0).iter().all(|_| fail!()));\n+    }\n+\n+    #[test]\n+    fn test_any() {\n+        let v = ~&[1, 2, 3, 4, 5];\n+        assert!(v.iter().any(|&x| *x < 10));\n+        assert!(v.iter().any(|&x| x.is_even()));\n+        assert!(!v.iter().any(|&x| *x > 100));\n+        assert!(!v.slice(0, 0).iter().any(|_| fail!()));\n+    }\n }"}]}