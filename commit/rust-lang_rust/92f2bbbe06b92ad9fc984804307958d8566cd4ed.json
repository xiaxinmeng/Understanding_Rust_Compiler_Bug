{"sha": "92f2bbbe06b92ad9fc984804307958d8566cd4ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZjJiYmJlMDZiOTJhZDlmYzk4NDgwNDMwNzk1OGQ4NTY2Y2Q0ZWQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2021-01-05T19:11:37Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2021-01-05T19:31:13Z"}, "message": "Fix macro issues with field_reassign_with_default", "tree": {"sha": "7dd231ef141410050722d83ce8021dfbec0cde3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dd231ef141410050722d83ce8021dfbec0cde3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92f2bbbe06b92ad9fc984804307958d8566cd4ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE6VFioMHrom999LRAK0OZxL9Ny94FAl/0voMACgkQK0OZxL9N\ny94Tlw//Wps/opG9GDt87D5QtpFTqpbutUG90KhKs74yOZslI6MCt3s9CL6N1wLb\nSAFVGQzTxtU05RummlQKTgM+elLUmZJJ7tN5md6XSer6wss3N3gmwYSux/9/L+Lp\nZCsyLGHZg9noUYGIxuf60oLO2NJzqP2ER3yoYNbUlnHZyDcIdSjd7z0do/Z4tnYD\n9VsiiwNkKe7eyB3SCfbb3wCp/a7Nq03iHPfLo+SGo/cRi/RFu9L2OVkiHa5hfX2A\nRbBP1mdkEGKSHt2hbf1UQ33gDvXYjVpaZKjQav+Xljt8mg/bXI/r4/S1r1UVtn4h\nDgG/tkmaB84p2lol/U0sl0V1HospF4X47UnvgdKwpmFO/t4z3A5xP+rtBbglLr8H\n1RJaqvb0zkd2omPq/KNYpeKl2g8lUqtofnDsJvbESrQv8iJAzZlIIY3MyQqyO8/M\nqJv2ObfwiDzcJvqOkwAlbfEVpS0TwdWXLHs64sa72ZTTTUuDk/G8ORixxwreCTUg\noBwa3kuSxGX6BZscKZitBlaAtdmANkk2MnYQ5W/H5MY3+Zh/i1LOfQRTT68noNeO\n94fLiVdaZ80Uy+AbEgUzyzvdcf2BJaGYf24XuLMuEPVbccKa7ZgBZlm5+7ehQNG3\nl+HBdqrlXx+bKiDFOHHkPrKQvBhxehKIDBfWD2uvdovhVfF0Yas=\n=zJtS\n-----END PGP SIGNATURE-----", "payload": "tree 7dd231ef141410050722d83ce8021dfbec0cde3f\nparent a8825e9af067e10406e13ff7fbe9bbd5c7699a41\nauthor Philipp Hansch <dev@phansch.net> 1609873897 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1609875073 +0100\n\nFix macro issues with field_reassign_with_default\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92f2bbbe06b92ad9fc984804307958d8566cd4ed", "html_url": "https://github.com/rust-lang/rust/commit/92f2bbbe06b92ad9fc984804307958d8566cd4ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92f2bbbe06b92ad9fc984804307958d8566cd4ed/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8825e9af067e10406e13ff7fbe9bbd5c7699a41", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8825e9af067e10406e13ff7fbe9bbd5c7699a41", "html_url": "https://github.com/rust-lang/rust/commit/a8825e9af067e10406e13ff7fbe9bbd5c7699a41"}], "stats": {"total": 93, "additions": 73, "deletions": 20}, "files": [{"sha": "f7224811e6e79816a82376a564be2cc205d9d870", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/92f2bbbe06b92ad9fc984804307958d8566cd4ed/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f2bbbe06b92ad9fc984804307958d8566cd4ed/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=92f2bbbe06b92ad9fc984804307958d8566cd4ed", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -120,6 +121,8 @@ impl LateLintPass<'_> for Default {\n                 // only take `let ...` statements\n                 if let StmtKind::Local(local) = stmt.kind;\n                 if let Some(expr) = local.init;\n+                if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n+                if !in_external_macro(cx.tcx.sess, expr.span);\n                 // only take bindings to identifiers\n                 if let PatKind::Binding(_, binding_id, ident, _) = local.pat.kind;\n                 // only when assigning `... = Default::default()`"}, {"sha": "d6ecd8568ce78966249f5d2872b274e469ff80ce", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=92f2bbbe06b92ad9fc984804307958d8566cd4ed", "patch": "@@ -94,3 +94,19 @@ macro_rules! large_enum_variant {\n         }\n     };\n }\n+\n+#[macro_export]\n+macro_rules! field_reassign_with_default {\n+    () => {\n+        #[derive(Default)]\n+        struct A {\n+            pub i: i32,\n+            pub j: i64,\n+        }\n+        fn lint() {\n+            let mut a: A = Default::default();\n+            a.i = 42;\n+            a;\n+        }\n+    };\n+}"}, {"sha": "24891682d368d0bfa2f167f88512040928442dab", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=92f2bbbe06b92ad9fc984804307958d8566cd4ed", "patch": "@@ -4,6 +4,7 @@\n #![crate_type = \"proc-macro\"]\n #![feature(repr128, proc_macro_quote)]\n #![allow(incomplete_features)]\n+#![allow(clippy::field_reassign_with_default)]\n #![allow(clippy::eq_op)]\n \n extern crate proc_macro;\n@@ -23,3 +24,20 @@ pub fn derive(_: TokenStream) -> TokenStream {\n     };\n     output\n }\n+\n+#[proc_macro_derive(FieldReassignWithDefault)]\n+pub fn derive_foo(_input: TokenStream) -> TokenStream {\n+    quote! {\n+        #[derive(Default)]\n+        struct A {\n+            pub i: i32,\n+            pub j: i64,\n+        }\n+        #[automatically_derived]\n+        fn lint() {\n+            let mut a: A = Default::default();\n+            a.i = 42;\n+            a;\n+        }\n+    }\n+}"}, {"sha": "9fc208f5332a5ccbb9e9567425bac44d2ffb1dd7", "filename": "tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.rs?ref=92f2bbbe06b92ad9fc984804307958d8566cd4ed", "patch": "@@ -1,5 +1,18 @@\n+// aux-build:proc_macro_derive.rs\n+// aux-build:macro_rules.rs\n+\n #![warn(clippy::field_reassign_with_default)]\n \n+#[macro_use]\n+extern crate proc_macro_derive;\n+#[macro_use]\n+extern crate macro_rules;\n+\n+// Don't lint on derives that derive `Default`\n+// See https://github.com/rust-lang/rust-clippy/issues/6545\n+#[derive(FieldReassignWithDefault)]\n+struct DerivedStruct;\n+\n #[derive(Default)]\n struct A {\n     i: i32,\n@@ -120,6 +133,9 @@ fn main() {\n     // don't expand macros in the suggestion (#6522)\n     let mut a: C = C::default();\n     a.i = vec![1];\n+\n+    // Don't lint in external macros\n+    field_reassign_with_default!();\n }\n \n mod m {"}, {"sha": "2f0f28f7bb724f92422ce0e618423342880d8f1f", "filename": "tests/ui/field_reassign_with_default.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Ffield_reassign_with_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92f2bbbe06b92ad9fc984804307958d8566cd4ed/tests%2Fui%2Ffield_reassign_with_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.stderr?ref=92f2bbbe06b92ad9fc984804307958d8566cd4ed", "patch": "@@ -1,84 +1,84 @@\n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:35:5\n+  --> $DIR/field_reassign_with_default.rs:48:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::field-reassign-with-default` implied by `-D warnings`\n-note: consider initializing the variable with `A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:34:5\n+note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:47:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:75:5\n+  --> $DIR/field_reassign_with_default.rs:88:5\n    |\n LL |     a.j = 43;\n    |     ^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { j: 43, i: 42 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:74:5\n+note: consider initializing the variable with `main::A { j: 43, i: 42 }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:87:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:80:5\n+  --> $DIR/field_reassign_with_default.rs:93:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: 42, j: 44 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:79:5\n+note: consider initializing the variable with `main::A { i: 42, j: 44 }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:92:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:86:5\n+  --> $DIR/field_reassign_with_default.rs:99:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:85:5\n+note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:98:5\n    |\n LL |     let mut a = A::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:96:5\n+  --> $DIR/field_reassign_with_default.rs:109:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:95:5\n+note: consider initializing the variable with `main::A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:108:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:100:5\n+  --> $DIR/field_reassign_with_default.rs:113:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: Default::default(), j: 45 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:99:5\n+note: consider initializing the variable with `main::A { i: Default::default(), j: 45 }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:112:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:122:5\n+  --> $DIR/field_reassign_with_default.rs:135:5\n    |\n LL |     a.i = vec![1];\n    |     ^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `C { i: vec![1], ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:121:5\n+  --> $DIR/field_reassign_with_default.rs:134:5\n    |\n LL |     let mut a: C = C::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}