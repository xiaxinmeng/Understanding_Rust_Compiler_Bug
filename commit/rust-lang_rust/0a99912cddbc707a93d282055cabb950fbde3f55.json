{"sha": "0a99912cddbc707a93d282055cabb950fbde3f55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOTk5MTJjZGRiYzcwN2E5M2QyODIwNTVjYWJiOTUwZmJkZTNmNTU=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-21T22:01:32Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-30T01:37:29Z"}, "message": "Adding a bunch of atomic intrinsics.\n\nAdding a test cases for the atomic intrinsics.", "tree": {"sha": "f3bae471e1513a471587f87cc9e24406960567a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3bae471e1513a471587f87cc9e24406960567a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a99912cddbc707a93d282055cabb950fbde3f55", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a99912cddbc707a93d282055cabb950fbde3f55", "html_url": "https://github.com/rust-lang/rust/commit/0a99912cddbc707a93d282055cabb950fbde3f55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a99912cddbc707a93d282055cabb950fbde3f55/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5d76d1e364da54e9e8f39e8baa4a4949a956cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5d76d1e364da54e9e8f39e8baa4a4949a956cf", "html_url": "https://github.com/rust-lang/rust/commit/3b5d76d1e364da54e9e8f39e8baa4a4949a956cf"}], "stats": {"total": 169, "additions": 166, "deletions": 3}, "files": [{"sha": "c36eeed2d41c1c79a407e56e2ee0f52efee79e58", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -128,6 +128,31 @@ enum TypeKind {\n     X86_MMX   = 15\n }\n \n+enum AtomicBinOp {\n+    Xchg = 0,\n+    Add  = 1,\n+    Sub  = 2,\n+    And  = 3,\n+    Nand = 4,\n+    Or   = 5,\n+    Xor  = 6,\n+    Max  = 7,\n+    Min  = 8,\n+    UMax = 9,\n+    UMin = 10,\n+}\n+\n+enum AtomicOrdering {\n+    NotAtomic = 0,\n+    Unordered = 1,\n+    Monotonic = 2,\n+    // Consume = 3,  // Not specified yet.\n+    Acquire = 4,\n+    Release = 5,\n+    AcquireRelease = 6,\n+    SequentiallyConsistent = 7\n+}\n+\n // FIXME: Not used right now, but will be once #2334 is fixed\n // Consts for the LLVMCodeGenFileType type (in include/llvm/c/TargetMachine.h)\n enum FileType {\n@@ -772,6 +797,11 @@ native mod llvm {\n     fn LLVMBuildPtrDiff(B: BuilderRef, LHS: ValueRef, RHS: ValueRef,\n                         Name: *c_char) -> ValueRef;\n \n+    /* Atomic Operations */\n+    fn LLVMBuildAtomicRMW(B: BuilderRef, ++Op: AtomicBinOp,\n+                          LHS: ValueRef, RHS: ValueRef,\n+                          ++Order: AtomicOrdering) -> ValueRef;\n+\n     /* Selected entries from the downcasts. */\n     fn LLVMIsATerminatorInst(Inst: ValueRef) -> ValueRef;\n "}, {"sha": "bff06c8a679435040b201c643c357b8aec4745bc", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -5,7 +5,7 @@ import syntax::codemap;\n import codemap::span;\n import lib::llvm::{ValueRef, TypeRef, BasicBlockRef, BuilderRef, ModuleRef};\n import lib::llvm::{Opcode, IntPredicate, RealPredicate, True, False,\n-        CallConv, TypeKind};\n+        CallConv, TypeKind, AtomicBinOp, AtomicOrdering};\n import common::*;\n import driver::session::session;\n \n@@ -807,6 +807,13 @@ fn Resume(cx: block, Exn: ValueRef) -> ValueRef {\n     ret llvm::LLVMBuildResume(B(cx), Exn);\n }\n \n+// Atomic Operations\n+fn AtomicRMW(cx: block, op: AtomicBinOp,\n+             dst: ValueRef, src: ValueRef,\n+             order: AtomicOrdering) -> ValueRef {\n+    llvm::LLVMBuildAtomicRMW(B(cx), op, dst, src, order)\n+}\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "836b0e0a28e11f55f24d7df9749719ad3904ceaf", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -7,7 +7,9 @@ import libc::c_uint;\n import syntax::{attr, ast_map};\n import lib::llvm::{ llvm, TypeRef, ValueRef,\n                     ModuleRef, CallConv, Attribute,\n-                    StructRetAttribute, ByValAttribute\n+                    StructRetAttribute, ByValAttribute,\n+                   SequentiallyConsistent, Acquire, Release,\n+                   Xchg, Add, Sub\n                   };\n import syntax::{ast, ast_util};\n import back::{link, abi};\n@@ -806,6 +808,69 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n                                some(substs), some(item.span));\n     let mut bcx = top_scope_block(fcx, none), lltop = bcx.llbb;\n     alt check *item.ident {\n+      \"atomic_xchng\" {\n+        let old = AtomicRMW(bcx, Xchg,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  SequentiallyConsistent);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_xchng_acq\" {\n+        let old = AtomicRMW(bcx, Xchg,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  Acquire);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_xchng_rel\" {\n+        let old = AtomicRMW(bcx, Xchg,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  Release);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_add\" {\n+        let old = AtomicRMW(bcx, Add,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  SequentiallyConsistent);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_add_acq\" {\n+        let old = AtomicRMW(bcx, Add,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  Acquire);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_add_rel\" {\n+        let old = AtomicRMW(bcx, Add,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  Release);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_sub\" {\n+        let old = AtomicRMW(bcx, Sub,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  SequentiallyConsistent);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_sub_acq\" {\n+        let old = AtomicRMW(bcx, Sub,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  Acquire);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n+      \"atomic_sub_rel\" {\n+        let old = AtomicRMW(bcx, Sub,\n+                  get_param(decl, first_real_arg),\n+                  get_param(decl, first_real_arg + 1u),\n+                  Release);\n+        Store(bcx, old, fcx.llretptr);\n+      }\n       \"size_of\" {\n         let tp_ty = substs.tys[0];\n         let lltp_ty = type_of::type_of(ccx, tp_ty);"}, {"sha": "722746217e6aea67e4d8aa79f80b73772dd7a473", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -76,12 +76,17 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                                  abi, _) {\n         if abi == foreign_abi_rust_intrinsic {\n             let flags = alt check *i.ident {\n-              \"visit_ty\" { 3u }\n+              \"visit_ty\" { use_repr | use_tydesc }\n               \"size_of\" |  \"pref_align_of\" | \"min_align_of\" |\n               \"init\" |  \"reinterpret_cast\" | \"move_val\" | \"move_val_init\" {\n                 use_repr\n               }\n               \"get_tydesc\" | \"needs_drop\" { use_tydesc }\n+              \"atomic_xchng\" | \"atomic_add\" | \"atomic_sub\" |\n+              \"atomic_xchng_acq\" | \"atomic_add_acq\" | \"atomic_sub_acq\" |\n+              \"atomic_xchng_rel\" | \"atomic_add_rel\" | \"atomic_sub_rel\" {\n+                0u\n+              }\n               \"forget\" | \"addr_of\" { 0u }\n             };\n             for uint::range(0u, n_tps) {|n| cx.uses[n] |= flags;}"}, {"sha": "06ad3f96c5e221151b2ea050734f59950fa84470", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -2236,6 +2236,14 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       }\n       \"needs_drop\" { (1u, ~[], ty::mk_bool(tcx)) }\n \n+      \"atomic_xchng\" | \"atomic_add\" | \"atomic_sub\" |\n+      \"atomic_xchng_acq\" | \"atomic_add_acq\" | \"atomic_sub_acq\" |\n+      \"atomic_xchng_rel\" | \"atomic_add_rel\" | \"atomic_sub_rel\" {\n+        (0u, ~[arg(ast::by_mutbl_ref, ty::mk_int(tcx)),\n+               arg(ast::by_val, ty::mk_int(tcx))],\n+         ty::mk_int(tcx))\n+      }\n+\n       \"visit_ty\" {\n         assert ccx.tcx.intrinsic_ifaces.contains_key(@\"ty_visitor\");\n         let (_, visitor_iface) = ccx.tcx.intrinsic_ifaces.get(@\"ty_visitor\");"}, {"sha": "6d99b0f4cb1b78dbd8072514430b1765587ad64a", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -172,3 +172,13 @@ extern \"C\" LLVMTypeRef LLVMMetadataTypeInContext(LLVMContextRef C) {\n extern \"C\" LLVMTypeRef LLVMMetadataType(void) {\n   return LLVMMetadataTypeInContext(LLVMGetGlobalContext());\n }\n+\n+extern \"C\" LLVMValueRef LLVMBuildAtomicRMW(LLVMBuilderRef B,\n+                                           AtomicRMWInst::BinOp op,\n+                                           LLVMValueRef target,\n+                                           LLVMValueRef source,\n+                                           AtomicOrdering order) {\n+    return wrap(unwrap(B)->CreateAtomicRMW(op,\n+                                           unwrap(target), unwrap(source),\n+                                           order));\n+}"}, {"sha": "8d82d930fd6ffeb75d6e9be704fe6755b297359e", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -82,6 +82,7 @@ LLVMArrayType\n LLVMBasicBlockAsValue\n LLVMBlockAddress\n LLVMBuildAShr\n+LLVMBuildAtomicRMW\n LLVMBuildAdd\n LLVMBuildAggregateRet\n LLVMBuildAlloca"}, {"sha": "d2418abcb7726e7725d40b360a0be29c58cb276b", "filename": "src/test/run-pass/intrinsic-atomics.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a99912cddbc707a93d282055cabb950fbde3f55/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics.rs?ref=0a99912cddbc707a93d282055cabb950fbde3f55", "patch": "@@ -0,0 +1,37 @@\n+#[abi = \"rust-intrinsic\"]\n+native mod rusti {\n+    fn atomic_xchng(&dst: int, src: int) -> int;\n+    fn atomic_xchng_acq(&dst: int, src: int) -> int;\n+    fn atomic_xchng_rel(&dst: int, src: int) -> int;\n+    \n+    fn atomic_add(&dst: int, src: int) -> int;\n+    fn atomic_add_acq(&dst: int, src: int) -> int;\n+    fn atomic_add_rel(&dst: int, src: int) -> int;\n+    \n+    fn atomic_sub(&dst: int, src: int) -> int;\n+    fn atomic_sub_acq(&dst: int, src: int) -> int;\n+    fn atomic_sub_rel(&dst: int, src: int) -> int;\n+}\n+\n+fn main() {\n+    let mut x = 1;\n+\n+    assert rusti::atomic_xchng(x, 0) == 1;\n+    assert x == 0;\n+\n+    assert rusti::atomic_xchng_acq(x, 1) == 0;\n+    assert x == 1;\n+\n+    assert rusti::atomic_xchng_rel(x, 0) == 1;\n+    assert x == 0;\n+\n+    assert rusti::atomic_add(x, 1) == 0;\n+    assert rusti::atomic_add_acq(x, 1) == 1;\n+    assert rusti::atomic_add_rel(x, 1) == 2;\n+    assert x == 3;\n+\n+    assert rusti::atomic_sub(x, 1) == 3;\n+    assert rusti::atomic_sub_acq(x, 1) == 2;\n+    assert rusti::atomic_sub_rel(x, 1) == 1;\n+    assert x == 0;\n+}"}]}