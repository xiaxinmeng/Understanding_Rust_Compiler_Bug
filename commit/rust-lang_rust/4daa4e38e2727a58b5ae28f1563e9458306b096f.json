{"sha": "4daa4e38e2727a58b5ae28f1563e9458306b096f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYWE0ZTM4ZTI3MjdhNThiNWFlMjhmMTU2M2U5NDU4MzA2YjA5NmY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-12-22T05:12:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-22T05:12:54Z"}, "message": "Merge pull request #2289 from rust-lang-nursery/rustup\n\nRustup to rustc 1.24.0-nightly (250b49205 2017-12-21)", "tree": {"sha": "e85d8a0f699343caf8f55a5bc5a2b1cd7f676e98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e85d8a0f699343caf8f55a5bc5a2b1cd7f676e98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4daa4e38e2727a58b5ae28f1563e9458306b096f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaPJRWCRBK7hj4Ov3rIwAAdHIIAA8TjErupfgKlOaDCKvixM1Z\n+UJsH73+SxvM24eoz3KJ+7y77TGQqrLBGgcUDSS65nzjy47kNi1lZFrJLQseP5zW\n18doBOdh/PdbSBHkMZpmMLYRq0HXmnk47XbjkfrxItPJZ4kJtExzIKz2hj/9o5XK\n+kyjhuLFcCdP5ld0d6mnRrPLivKn3OtBePHdwiFENyQGBNLBA2cyxLBtOLNEx62S\nFXklFJ4UjjsXDolTihc1Nv3Lu3Ug35kPTKRDL8Qc+V0U+RL+1xZtDEoA3gNbYXKt\nT5145WMIODOSZ69arOncMLTwassBdL9g6tM6UwTLr9+aP4FaY8PvmGyD+d1uC0M=\n=flcz\n-----END PGP SIGNATURE-----\n", "payload": "tree e85d8a0f699343caf8f55a5bc5a2b1cd7f676e98\nparent ebcdf031476cacef699dbbe879c641b33e1f8fc3\nparent fae8a763f84324fb7c65d6d7c83973912573168d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1513919574 -0800\ncommitter GitHub <noreply@github.com> 1513919574 -0800\n\nMerge pull request #2289 from rust-lang-nursery/rustup\n\nRustup to rustc 1.24.0-nightly (250b49205 2017-12-21)"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4daa4e38e2727a58b5ae28f1563e9458306b096f", "html_url": "https://github.com/rust-lang/rust/commit/4daa4e38e2727a58b5ae28f1563e9458306b096f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4daa4e38e2727a58b5ae28f1563e9458306b096f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebcdf031476cacef699dbbe879c641b33e1f8fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebcdf031476cacef699dbbe879c641b33e1f8fc3", "html_url": "https://github.com/rust-lang/rust/commit/ebcdf031476cacef699dbbe879c641b33e1f8fc3"}, {"sha": "fae8a763f84324fb7c65d6d7c83973912573168d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae8a763f84324fb7c65d6d7c83973912573168d", "html_url": "https://github.com/rust-lang/rust/commit/fae8a763f84324fb7c65d6d7c83973912573168d"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "ddfd801c929f32747adaae5520ac1e2bcb4272d5", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -1,6 +1,10 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.177\n+* Rustup to *rustc 1.24.0-nightly (250b49205 2017-12-21)*\n+* New lint: [`match_as_ref`]\n+\n ## 0.0.176\n * Rustup to *rustc 1.24.0-nightly (0077d128d 2017-12-14)*\n \n@@ -595,6 +599,7 @@ All notable changes to this project will be documented in this file.\n [`many_single_char_names`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#many_single_char_names\n [`map_clone`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#map_entry\n+[`match_as_ref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_bool\n [`match_overlapping_arm`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_overlapping_arm\n [`match_ref_pats`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#match_ref_pats"}, {"sha": "510f53becdbee71782f17b592438499c79007c60", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.176\"\n+version = \"0.0.177\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -37,7 +37,7 @@ path = \"src/driver.rs\"\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.176\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.177\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.2\"\n regex = \"0.2\""}, {"sha": "de4a1035cb1c093fb66d3478f800c044d6e085f1", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.176\"\n+version = \"0.0.177\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "567b06a8ac1532d33fefd6afb848fddcb95f9745", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -2,7 +2,7 @@ use reexport::*;\n use rustc::lint::*;\n use rustc::hir::def::Def;\n use rustc::hir::*;\n-use rustc::hir::intravisit::{walk_fn_decl, walk_generics, walk_ty, walk_ty_param_bound, NestedVisitorMap, Visitor};\n+use rustc::hir::intravisit::*;\n use std::collections::{HashMap, HashSet};\n use syntax::codemap::Span;\n use utils::{in_external_macro, last_path_segment, span_lint};\n@@ -101,7 +101,7 @@ fn check_fn_inner<'a, 'tcx>(\n     }\n \n     let mut bounds_lts = Vec::new();\n-    for typ in &generics.ty_params {\n+    for typ in generics.ty_params() {\n         for bound in &typ.bounds {\n             if let TraitTyParamBound(ref trait_ref, _) = *bound {\n                 let params = &trait_ref\n@@ -122,7 +122,7 @@ fn check_fn_inner<'a, 'tcx>(\n             }\n         }\n     }\n-    if could_use_elision(cx, decl, body, &generics.lifetimes, bounds_lts) {\n+    if could_use_elision(cx, decl, body, &generics.params, bounds_lts) {\n         span_lint(\n             cx,\n             NEEDLESS_LIFETIMES,\n@@ -137,7 +137,7 @@ fn could_use_elision<'a, 'tcx: 'a>(\n     cx: &LateContext<'a, 'tcx>,\n     func: &'tcx FnDecl,\n     body: Option<BodyId>,\n-    named_lts: &'tcx [LifetimeDef],\n+    named_generics: &'tcx [GenericParam],\n     bounds_lts: Vec<&'tcx Lifetime>,\n ) -> bool {\n     // There are two scenarios where elision works:\n@@ -147,7 +147,7 @@ fn could_use_elision<'a, 'tcx: 'a>(\n     // level of the current item.\n \n     // check named LTs\n-    let allowed_lts = allowed_lts_from(named_lts);\n+    let allowed_lts = allowed_lts_from(named_generics);\n \n     // these will collect all the lifetimes for references in arg/return types\n     let mut input_visitor = RefVisitor::new(cx);\n@@ -222,11 +222,13 @@ fn could_use_elision<'a, 'tcx: 'a>(\n     }\n }\n \n-fn allowed_lts_from(named_lts: &[LifetimeDef]) -> HashSet<RefLt> {\n+fn allowed_lts_from(named_generics: &[GenericParam]) -> HashSet<RefLt> {\n     let mut allowed_lts = HashSet::new();\n-    for lt in named_lts {\n-        if lt.bounds.is_empty() {\n-            allowed_lts.insert(RefLt::Named(lt.lifetime.name.name()));\n+    for par in named_generics.iter() {\n+        if let GenericParam::Lifetime(ref lt) = *par {\n+            if lt.bounds.is_empty() {\n+                allowed_lts.insert(RefLt::Named(lt.lifetime.name.name()));\n+            }\n         }\n     }\n     allowed_lts.insert(RefLt::Unnamed);\n@@ -332,11 +334,6 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            TyImplTraitUniversal(_, ref param_bounds) => for bound in param_bounds {\n-                if let RegionTyParamBound(_) = *bound {\n-                    self.record(&None);\n-                }\n-            },\n             TyTraitObject(ref bounds, ref lt) => {\n                 if !lt.is_elided() {\n                     self.abort = true;\n@@ -370,7 +367,7 @@ fn has_where_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, where_clause: &\n                     return true;\n                 }\n                 // if the bounds define new lifetimes, they are fine to occur\n-                let allowed_lts = allowed_lts_from(&pred.bound_lifetimes);\n+                let allowed_lts = allowed_lts_from(&pred.bound_generic_params);\n                 // now walk the bounds\n                 for bound in pred.bounds.iter() {\n                     walk_ty_param_bound(&mut visitor, bound);\n@@ -408,12 +405,15 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n         self.map.remove(&lifetime.name.name());\n     }\n \n-    fn visit_lifetime_def(&mut self, _: &'tcx LifetimeDef) {\n+    fn visit_generic_param(&mut self, param: &'tcx GenericParam) {\n         // don't actually visit `<'a>` or `<'a: 'b>`\n         // we've already visited the `'a` declarations and\n         // don't want to spuriously remove them\n         // `'b` in `'a: 'b` is useless unless used elsewhere in\n         // a non-lifetime bound\n+        if param.is_type_param() {\n+            walk_generic_param(self, param)\n+        }\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n@@ -422,8 +422,7 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n \n fn report_extra_lifetimes<'a, 'tcx: 'a>(cx: &LateContext<'a, 'tcx>, func: &'tcx FnDecl, generics: &'tcx Generics) {\n     let hs = generics\n-        .lifetimes\n-        .iter()\n+        .lifetimes()\n         .map(|lt| (lt.lifetime.name.name(), lt.lifetime.span))\n         .collect();\n     let mut checker = LifetimeChecker { map: hs };"}, {"sha": "64335f81a6347110eeb9c6901a6f037eb99b28c9", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -1849,7 +1849,7 @@ impl SelfKind {\n \n fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Generics, name: &[&str]) -> bool {\n     single_segment_ty(ty).map_or(false, |seg| {\n-        generics.ty_params.iter().any(|param| {\n+        generics.ty_params().any(|param| {\n             param.name == seg.name && param.bounds.iter().any(|bound| {\n                 if let hir::TyParamBound::TraitTyParamBound(ref ptr, ..) = *bound {\n                     let path = &ptr.trait_ref.path;"}, {"sha": "4e45525ed099296941e8e1738f2b9c416d0bd6ca", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -188,15 +188,17 @@ impl LintPass for MiscEarly {\n \n impl EarlyLintPass for MiscEarly {\n     fn check_generics(&mut self, cx: &EarlyContext, gen: &Generics) {\n-        for ty in &gen.ty_params {\n-            let name = ty.ident.name.as_str();\n-            if constants::BUILTIN_TYPES.contains(&&*name) {\n-                span_lint(\n-                    cx,\n-                    BUILTIN_TYPE_SHADOW,\n-                    ty.span,\n-                    &format!(\"This generic shadows the built-in type `{}`\", name),\n-                );\n+        for param in &gen.params {\n+            if let GenericParam::Type(ref ty) = *param {\n+                let name = ty.ident.name.as_str();\n+                if constants::BUILTIN_TYPES.contains(&&*name) {\n+                    span_lint(\n+                        cx,\n+                        BUILTIN_TYPE_SHADOW,\n+                        ty.span,\n+                        &format!(\"This generic shadows the built-in type `{}`\", name),\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "5f2370951156db20ad64cf382e087ffdb25dba4f", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             // can't be implemented by default\n                             return;\n                         }\n-                        if !impl_item.generics.ty_params.is_empty() {\n+                        if impl_item.generics.params.iter().any(|gen| gen.is_type_param()) {\n                             // when the result of `new()` depends on a type parameter we should not require\n                             // an\n                             // impl of `Default`"}, {"sha": "c146d306a5a694eb0262825785a4321e488efd18", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4daa4e38e2727a58b5ae28f1563e9458306b096f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=4daa4e38e2727a58b5ae28f1563e9458306b096f", "patch": "@@ -957,7 +957,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n             TyTraitObject(ref param_bounds, _) => {\n                 let has_lifetime_parameters = param_bounds\n                     .iter()\n-                    .any(|bound| !bound.bound_lifetimes.is_empty());\n+                    .any(|bound| bound.bound_generic_params.iter().any(|gen| gen.is_lifetime_param()));\n                 if has_lifetime_parameters {\n                     // complex trait bounds like A<'a, 'b>\n                     (50 * self.nest, 1)"}]}