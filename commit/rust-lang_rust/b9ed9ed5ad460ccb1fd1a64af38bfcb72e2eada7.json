{"sha": "b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZWQ5ZWQ1YWQ0NjBjY2IxZmQxYTY0YWYzOGJmY2I3MmUyZWFkYTc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-05-12T17:11:46Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-05-15T09:09:18Z"}, "message": "Teach SVH computation to ignore more implementation artifacts.\n\nIn particular, this version of strict version hash (SVH) works much\nlike the deriving(Hash)-based implementation did, except that uses a\ncontent-based hash that filters rustc implementation artifacts and\nsurface syntax artifacts.\n\nFix #14132.", "tree": {"sha": "ad89d01a3a58fc9cb093eaf492ee8a77da97d121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad89d01a3a58fc9cb093eaf492ee8a77da97d121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7", "html_url": "https://github.com/rust-lang/rust/commit/b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6cf0dfbab35f40abaef345024701ff8112ed2d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cf0dfbab35f40abaef345024701ff8112ed2d8", "html_url": "https://github.com/rust-lang/rust/commit/d6cf0dfbab35f40abaef345024701ff8112ed2d8"}], "stats": {"total": 423, "additions": 407, "deletions": 16}, "files": [{"sha": "489722aa13fb473bf24abcf75e49f1276223f9e4", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 407, "deletions": 16, "changes": 423, "blob_url": "https://github.com/rust-lang/rust/blob/b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=b9ed9ed5ad460ccb1fd1a64af38bfcb72e2eada7", "patch": "@@ -51,6 +51,7 @@ use std::hash::Hash;\n use std::hash::sip::SipState;\n use std::iter::range_step;\n use syntax::ast;\n+use syntax::visit;\n \n #[deriving(Clone, Eq)]\n pub struct Svh {\n@@ -68,25 +69,28 @@ impl Svh {\n     }\n \n     pub fn calculate(krate: &ast::Crate) -> Svh {\n-        // FIXME: see above for why this is wrong, it shouldn't just hash the\n-        //        crate.  Fixing this would require more in-depth analysis in\n-        //        this function about what portions of the crate are reachable\n-        //        in tandem with bug fixes throughout the rest of the compiler.\n-        //\n-        //        Note that for now we actually exclude some top-level things\n-        //        from the crate like the CrateConfig/span. The CrateConfig\n-        //        contains command-line `--cfg` flags, so this means that the\n-        //        stage1/stage2 AST for libstd and such is different hash-wise\n-        //        when it's actually the exact same representation-wise.\n-        //\n-        //        As a first stab at only hashing the relevant parts of the\n-        //        AST, this only hashes the module/attrs, not the CrateConfig\n-        //        field.\n-        //\n+        // FIXME (#14132): This is better than it used to be, but it still not\n+        // ideal. We now attempt to hash only the relevant portions of the\n+        // Crate AST as well as the top-level crate attributes. (However,\n+        // the hashing of the crate attributes should be double-checked\n+        // to ensure it is not incorporating implementation artifacts into\n+        // the hash that are not otherwise visible.)\n+\n         // FIXME: this should use SHA1, not SipHash. SipHash is not built to\n         //        avoid collisions.\n         let mut state = SipState::new();\n-        krate.module.hash(&mut state);\n+\n+        {\n+            let mut visit = svh_visitor::make(&mut state);\n+            visit::walk_crate(&mut visit, krate, ());\n+        }\n+\n+        // FIXME (#14132): This hash is still sensitive to e.g. the\n+        // spans of the crate Attributes and their underlying\n+        // MetaItems; we should make ContentHashable impl for those\n+        // types and then use hash_content.  But, since all crate\n+        // attributes should appear near beginning of the file, it is\n+        // not such a big deal to be sensitive to their spans for now.\n         krate.attrs.hash(&mut state);\n \n         let hash = state.result();\n@@ -110,3 +114,390 @@ impl fmt::Show for Svh {\n         f.pad(self.as_str())\n     }\n }\n+\n+// FIXME (#14132): Even this SVH computation still has implementation\n+// artifacts: namely, the order of item declaration will affect the\n+// hash computation, but for many kinds of items the order of\n+// declaration should be irrelevant to the ABI.\n+\n+mod svh_visitor {\n+    use syntax::ast;\n+    use syntax::ast::*;\n+    use syntax::codemap::Span;\n+    use syntax::parse::token;\n+    use syntax::print::pprust;\n+    use syntax::visit;\n+    use syntax::visit::{Visitor, FnKind};\n+\n+    use std::hash::Hash;\n+    use std::hash::sip::SipState;\n+\n+    pub struct StrictVersionHashVisitor<'a> {\n+        pub st: &'a mut SipState,\n+    }\n+\n+    pub fn make<'a>(st: &'a mut SipState) -> StrictVersionHashVisitor<'a> {\n+        StrictVersionHashVisitor { st: st }\n+    }\n+\n+    // To off-load the bulk of the hash-computation on deriving(Hash),\n+    // we define a set of enums corresponding to the content that our\n+    // crate visitor will encounter as it traverses the ast.\n+    //\n+    // The important invariant is that all of the Saw*Component enums\n+    // do not carry any Spans, Names, or Idents.\n+    //\n+    // Not carrying any Names/Idents is the important fix for problem\n+    // noted on PR #13948: using the ident.name as the basis for a\n+    // hash leads to unstable SVH, because ident.name is just an index\n+    // into intern table (i.e. essentially a random address), not\n+    // computed from the name content.\n+    //\n+    // With the below enums, the SVH computation is not sensitive to\n+    // artifacts of how rustc was invoked nor of how the source code\n+    // was laid out.  (Or at least it is *less* sensitive.)\n+\n+    // This enum represents the different potential bits of code the\n+    // visitor could encounter that could affect the ABI for the crate,\n+    // and assigns each a distinct tag to feed into the hash computation.\n+    #[deriving(Hash)]\n+    enum SawAbiComponent<'a> {\n+\n+        // FIXME (#14132): should we include (some function of)\n+        // ident.ctxt as well?\n+        SawIdent(token::InternedString),\n+        SawStructDef(token::InternedString),\n+\n+        SawLifetimeRef(token::InternedString),\n+        SawLifetimeDecl(token::InternedString),\n+\n+        SawMod,\n+        SawViewItem,\n+        SawForeignItem,\n+        SawItem,\n+        SawDecl,\n+        SawTy,\n+        SawGenerics,\n+        SawFn,\n+        SawTyMethod,\n+        SawTraitMethod,\n+        SawStructField,\n+        SawVariant,\n+        SawExplicitSelf,\n+        SawPath,\n+        SawOptLifetimeRef,\n+        SawBlock,\n+        SawPat,\n+        SawLocal,\n+        SawArm,\n+        SawExpr(SawExprComponent<'a>),\n+        SawStmt(SawStmtComponent),\n+    }\n+\n+    /// SawExprComponent carries all of the information that we want\n+    /// to include in the hash that *won't* be covered by the\n+    /// subsequent recursive traversal of the expression's\n+    /// substructure by the visitor.\n+    ///\n+    /// We know every Expr_ variant is covered by a variant because\n+    /// `fn saw_expr` maps each to some case below.  Ensuring that\n+    /// each variant carries an appropriate payload has to be verified\n+    /// by hand.\n+    ///\n+    /// (However, getting that *exactly* right is not so important\n+    /// because the SVH is just a developer convenience; there is no\n+    /// guarantee of collision-freedom, hash collisions are just\n+    /// (hopefully) unlikely.)\n+    #[deriving(Hash)]\n+    pub enum SawExprComponent<'a> {\n+\n+        SawExprLoop(Option<token::InternedString>),\n+        SawExprField(token::InternedString),\n+        SawExprBreak(Option<token::InternedString>),\n+        SawExprAgain(Option<token::InternedString>),\n+\n+        SawExprVstore,\n+        SawExprBox,\n+        SawExprVec,\n+        SawExprCall,\n+        SawExprMethodCall,\n+        SawExprTup,\n+        SawExprBinary(ast::BinOp),\n+        SawExprUnary(ast::UnOp),\n+        SawExprLit(ast::Lit_),\n+        SawExprCast,\n+        SawExprIf,\n+        SawExprWhile,\n+        SawExprMatch,\n+        SawExprFnBlock,\n+        SawExprProc,\n+        SawExprBlock,\n+        SawExprAssign,\n+        SawExprAssignOp(ast::BinOp),\n+        SawExprIndex,\n+        SawExprPath,\n+        SawExprAddrOf(ast::Mutability),\n+        SawExprRet,\n+        SawExprInlineAsm(&'a ast::InlineAsm),\n+        SawExprStruct,\n+        SawExprRepeat,\n+        SawExprParen,\n+    }\n+\n+    fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n+        match *node {\n+            ExprVstore(..)           => SawExprVstore,\n+            ExprBox(..)              => SawExprBox,\n+            ExprVec(..)              => SawExprVec,\n+            ExprCall(..)             => SawExprCall,\n+            ExprMethodCall(..)       => SawExprMethodCall,\n+            ExprTup(..)              => SawExprTup,\n+            ExprBinary(op, _, _)     => SawExprBinary(op),\n+            ExprUnary(op, _)         => SawExprUnary(op),\n+            ExprLit(lit)             => SawExprLit(lit.node.clone()),\n+            ExprCast(..)             => SawExprCast,\n+            ExprIf(..)               => SawExprIf,\n+            ExprWhile(..)            => SawExprWhile,\n+            ExprLoop(_, id)          => SawExprLoop(id.map(content)),\n+            ExprMatch(..)            => SawExprMatch,\n+            ExprFnBlock(..)          => SawExprFnBlock,\n+            ExprProc(..)             => SawExprProc,\n+            ExprBlock(..)            => SawExprBlock,\n+            ExprAssign(..)           => SawExprAssign,\n+            ExprAssignOp(op, _, _)   => SawExprAssignOp(op),\n+            ExprField(_, id, _)      => SawExprField(content(id)),\n+            ExprIndex(..)            => SawExprIndex,\n+            ExprPath(..)             => SawExprPath,\n+            ExprAddrOf(m, _)         => SawExprAddrOf(m),\n+            ExprBreak(id)            => SawExprBreak(id.map(content)),\n+            ExprAgain(id)            => SawExprAgain(id.map(content)),\n+            ExprRet(..)              => SawExprRet,\n+            ExprInlineAsm(ref asm)   => SawExprInlineAsm(asm),\n+            ExprStruct(..)           => SawExprStruct,\n+            ExprRepeat(..)           => SawExprRepeat,\n+            ExprParen(..)            => SawExprParen,\n+\n+            // just syntactic artifacts, expanded away by time of SVH.\n+            ExprForLoop(..)          => unreachable!(),\n+            ExprMac(..)              => unreachable!(),\n+        }\n+    }\n+\n+    /// SawStmtComponent is analogous to SawExprComponent, but for statements.\n+    #[deriving(Hash)]\n+    pub enum SawStmtComponent {\n+        SawStmtDecl,\n+        SawStmtExpr,\n+        SawStmtSemi,\n+    }\n+\n+    fn saw_stmt(node: &Stmt_) -> SawStmtComponent {\n+        match *node {\n+            StmtDecl(..) => SawStmtDecl,\n+            StmtExpr(..) => SawStmtExpr,\n+            StmtSemi(..) => SawStmtSemi,\n+            StmtMac(..)  => unreachable!(),\n+        }\n+    }\n+\n+    // Ad-hoc overloading between Ident and Name to their intern table lookups.\n+    trait InternKey { fn get_content(self) -> token::InternedString; }\n+    impl InternKey for Ident {\n+        fn get_content(self) -> token::InternedString { token::get_ident(self) }\n+    }\n+    impl InternKey for Name {\n+        fn get_content(self) -> token::InternedString { token::get_name(self) }\n+    }\n+    fn content<K:InternKey>(k: K) -> token::InternedString { k.get_content() }\n+\n+    // local short-hand eases writing signatures of syntax::visit mod.\n+    type E = ();\n+\n+    impl<'a> Visitor<E> for StrictVersionHashVisitor<'a> {\n+\n+        fn visit_mac(&mut self, macro: &Mac, e: E) {\n+            // macro invocations, namely macro_rules definitions,\n+            // *can* appear as items, even in the expanded crate AST.\n+\n+            if macro_name(macro).get() == \"macro_rules\" {\n+                // Pretty-printing definition to a string strips out\n+                // surface artifacts (currently), such as the span\n+                // information, yielding a content-based hash.\n+\n+                // FIXME (#14132): building temporary string is\n+                // expensive; a direct content-based hash on token\n+                // trees might be faster. Implementing this is far\n+                // easier in short term.\n+                let macro_defn_as_string =\n+                    pprust::to_str(|pp_state| pp_state.print_mac(macro));\n+                macro_defn_as_string.hash(self.st);\n+            } else {\n+                // It is not possible to observe any kind of macro\n+                // invocation at this stage except `macro_rules!`.\n+                fail!(\"reached macro somehow: {}\",\n+                      pprust::to_str(|pp_state| pp_state.print_mac(macro)));\n+            }\n+\n+            visit::walk_mac(self, macro, e);\n+\n+            fn macro_name(macro: &Mac) -> token::InternedString {\n+                match &macro.node {\n+                    &MacInvocTT(ref path, ref _tts, ref _stx_ctxt) => {\n+                        let s = path.segments.as_slice();\n+                        assert_eq!(s.len(), 1);\n+                        content(s[0].identifier)\n+                    }\n+                }\n+            }\n+        }\n+\n+        fn visit_struct_def(&mut self, s: &StructDef, ident: Ident,\n+                            g: &Generics, _: NodeId, e: E) {\n+            SawStructDef(content(ident)).hash(self.st);\n+            visit::walk_generics(self, g, e.clone());\n+            visit::walk_struct_def(self, s, e)\n+        }\n+\n+        fn visit_variant(&mut self, v: &Variant, g: &Generics, e: E) {\n+            SawVariant.hash(self.st);\n+            // walk_variant does not call walk_generics, so do it here.\n+            visit::walk_generics(self, g, e.clone());\n+            visit::walk_variant(self, v, g, e)\n+        }\n+\n+        fn visit_opt_lifetime_ref(&mut self, _: Span, l: &Option<Lifetime>, env: E) {\n+            SawOptLifetimeRef.hash(self.st);\n+            // (This is a strange method in the visitor trait, in that\n+            // it does not expose a walk function to do the subroutine\n+            // calls.)\n+            match *l {\n+                Some(ref l) => self.visit_lifetime_ref(l, env),\n+                None => ()\n+            }\n+        }\n+\n+        // All of the remaining methods just record (in the hash\n+        // SipState) that the visitor saw that particular variant\n+        // (with its payload), and continue walking as the default\n+        // visitor would.\n+        //\n+        // Some of the implementations have some notes as to how one\n+        // might try to make their SVH computation less discerning\n+        // (e.g. by incorporating reachability analysis).  But\n+        // currently all of their implementations are uniform and\n+        // uninteresting.\n+        //\n+        // (If you edit a method such that it deviates from the\n+        // pattern, please move that method up above this comment.)\n+\n+        fn visit_ident(&mut self, _: Span, ident: Ident, _: E) {\n+            SawIdent(content(ident)).hash(self.st);\n+        }\n+\n+        fn visit_lifetime_ref(&mut self, l: &Lifetime, _: E) {\n+            SawLifetimeRef(content(l.name)).hash(self.st);\n+        }\n+\n+        fn visit_lifetime_decl(&mut self, l: &Lifetime, _: E) {\n+            SawLifetimeDecl(content(l.name)).hash(self.st);\n+        }\n+\n+        // We do recursively walk the bodies of functions/methods\n+        // (rather than omitting their bodies from the hash) since\n+        // monomorphization and cross-crate inlining generally implies\n+        // that a change to a crate body will require downstream\n+        // crates to be recompiled.\n+        fn visit_expr(&mut self, ex: &Expr, e: E) {\n+            SawExpr(saw_expr(&ex.node)).hash(self.st); visit::walk_expr(self, ex, e)\n+        }\n+\n+        fn visit_stmt(&mut self, s: &Stmt, e: E) {\n+            SawStmt(saw_stmt(&s.node)).hash(self.st); visit::walk_stmt(self, s, e)\n+        }\n+\n+        fn visit_view_item(&mut self, i: &ViewItem, e: E) {\n+            // Two kinds of view items can affect the ABI for a crate:\n+            // exported `pub use` view items (since that may expose\n+            // items that downstream crates can call), and `use\n+            // foo::Trait`, since changing that may affect method\n+            // resolution.\n+            //\n+            // The simplest approach to handling both of the above is\n+            // just to adopt the same simple-minded (fine-grained)\n+            // hash that I am deploying elsewhere here.\n+            SawViewItem.hash(self.st); visit::walk_view_item(self, i, e)\n+        }\n+\n+        fn visit_foreign_item(&mut self, i: &ForeignItem, e: E) {\n+            // FIXME (#14132) ideally we would incorporate privacy (or\n+            // perhaps reachability) somewhere here, so foreign items\n+            // that do not leak into downstream crates would not be\n+            // part of the ABI.\n+            SawForeignItem.hash(self.st); visit::walk_foreign_item(self, i, e)\n+        }\n+\n+        fn visit_item(&mut self, i: &Item, e: E) {\n+            // FIXME (#14132) ideally would incorporate reachability\n+            // analysis somewhere here, so items that never leak into\n+            // downstream crates (e.g. via monomorphisation or\n+            // inlining) would not be part of the ABI.\n+            SawItem.hash(self.st); visit::walk_item(self, i, e)\n+        }\n+\n+        fn visit_mod(&mut self, m: &Mod, _s: Span, _n: NodeId, e: E) {\n+            SawMod.hash(self.st); visit::walk_mod(self, m, e)\n+        }\n+\n+        fn visit_decl(&mut self, d: &Decl, e: E) {\n+            SawDecl.hash(self.st); visit::walk_decl(self, d, e)\n+        }\n+\n+        fn visit_ty(&mut self, t: &Ty, e: E) {\n+            SawTy.hash(self.st); visit::walk_ty(self, t, e)\n+        }\n+\n+        fn visit_generics(&mut self, g: &Generics, e: E) {\n+            SawGenerics.hash(self.st); visit::walk_generics(self, g, e)\n+        }\n+\n+        fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId, e: E) {\n+            SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s, e)\n+        }\n+\n+        fn visit_ty_method(&mut self, t: &TypeMethod, e: E) {\n+            SawTyMethod.hash(self.st); visit::walk_ty_method(self, t, e)\n+        }\n+\n+        fn visit_trait_method(&mut self, t: &TraitMethod, e: E) {\n+            SawTraitMethod.hash(self.st); visit::walk_trait_method(self, t, e)\n+        }\n+\n+        fn visit_struct_field(&mut self, s: &StructField, e: E) {\n+            SawStructField.hash(self.st); visit::walk_struct_field(self, s, e)\n+        }\n+\n+        fn visit_explicit_self(&mut self, es: &ExplicitSelf, e: E) {\n+            SawExplicitSelf.hash(self.st); visit::walk_explicit_self(self, es, e)\n+        }\n+\n+        fn visit_path(&mut self, path: &Path, _: ast::NodeId, e: E) {\n+            SawPath.hash(self.st); visit::walk_path(self, path, e)\n+        }\n+\n+        fn visit_block(&mut self, b: &Block, e: E) {\n+            SawBlock.hash(self.st); visit::walk_block(self, b, e)\n+        }\n+\n+        fn visit_pat(&mut self, p: &Pat, e: E) {\n+            SawPat.hash(self.st); visit::walk_pat(self, p, e)\n+        }\n+\n+        fn visit_local(&mut self, l: &Local, e: E) {\n+            SawLocal.hash(self.st); visit::walk_local(self, l, e)\n+        }\n+\n+        fn visit_arm(&mut self, a: &Arm, e: E) {\n+            SawArm.hash(self.st); visit::walk_arm(self, a, e)\n+        }\n+    }\n+}"}]}