{"sha": "606436753abeb7d0251d17f8e0c91d4ec162765a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNjQzNjc1M2FiZWI3ZDAyNTFkMTdmOGUwYzkxZDRlYzE2Mjc2NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T12:54:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-28T12:54:01Z"}, "message": "Auto merge of #1604 - RalfJung:std-debug-assert, r=oli-obk\n\ndisable debug assertions in the standard library\n\nDebug assertions in the standard library can be somewhat expensive to check, in particular the ones covering each and every `ptr::write/copy/copy_nonoverlapping`. Miri will find most of those problems anyway since they cause UB. There are other debug assertions, such as ensuring internal invariants are maintained, but given how slow Miri already is, I think it is better to skip those checks in Miri and instead figure out a better way for people to use a standard library with debug assertions enabled.", "tree": {"sha": "302ed83bb45070625a78096f735d61ce17a6d503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302ed83bb45070625a78096f735d61ce17a6d503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/606436753abeb7d0251d17f8e0c91d4ec162765a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/606436753abeb7d0251d17f8e0c91d4ec162765a", "html_url": "https://github.com/rust-lang/rust/commit/606436753abeb7d0251d17f8e0c91d4ec162765a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/606436753abeb7d0251d17f8e0c91d4ec162765a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7d0cecf2de592fb5a6f1d6086512e5d95cad30d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7d0cecf2de592fb5a6f1d6086512e5d95cad30d", "html_url": "https://github.com/rust-lang/rust/commit/b7d0cecf2de592fb5a6f1d6086512e5d95cad30d"}, {"sha": "1044099c196ced6108234fe2450fcd2f7f969fa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1044099c196ced6108234fe2450fcd2f7f969fa7", "html_url": "https://github.com/rust-lang/rust/commit/1044099c196ced6108234fe2450fcd2f7f969fa7"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "6eff5f795e7cb92c67f6b500f96fec25a1650ded", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/606436753abeb7d0251d17f8e0c91d4ec162765a/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606436753abeb7d0251d17f8e0c91d4ec162765a/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=606436753abeb7d0251d17f8e0c91d4ec162765a", "patch": "@@ -353,6 +353,8 @@ path = \"lib.rs\"\n     // to the sysroot either.\n     command.env_remove(\"RUSTC_WRAPPER\");\n     command.env_remove(\"RUSTFLAGS\");\n+    // Disable debug assertions in the standard library -- Miri is already slow enough.\n+    command.env(\"RUSTFLAGS\", \"-Cdebug-assertions=off\");\n     // Finally run it!\n     if command.status().expect(\"failed to run xargo\").success().not() {\n         show_error(format!(\"failed to run xargo\"));"}, {"sha": "941f79c7ad90361776a6ab6937d581b13f9cf6f5", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/606436753abeb7d0251d17f8e0c91d4ec162765a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/606436753abeb7d0251d17f8e0c91d4ec162765a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=606436753abeb7d0251d17f8e0c91d4ec162765a", "patch": "@@ -78,7 +78,6 @@ fn main() {\n     // Assertion and debug assertion\n     test(None, |_old_val| { assert!(false); loop {} });\n     test(None, |_old_val| { debug_assert!(false); loop {} });\n-    test(None, |_old_val| { unsafe { std::char::from_u32_unchecked(0xFD10000); } loop {} }); // trigger debug-assertion in libstd\n \n     eprintln!(\"Success!\"); // Make sure we get this in stderr\n }"}, {"sha": "696dbc1f81813a55ef3198d611748beabed7704b", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/606436753abeb7d0251d17f8e0c91d4ec162765a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/606436753abeb7d0251d17f8e0c91d4ec162765a/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=606436753abeb7d0251d17f8e0c91d4ec162765a", "patch": "@@ -23,6 +23,4 @@ thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:LL:29\n Caught panic message (&str): assertion failed: false\n thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:LL:29\n Caught panic message (&str): assertion failed: false\n-thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', $LOC\n-Caught panic message (&str): called `Option::unwrap()` on a `None` value\n Success!"}]}