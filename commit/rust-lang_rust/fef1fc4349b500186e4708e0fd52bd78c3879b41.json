{"sha": "fef1fc4349b500186e4708e0fd52bd78c3879b41", "node_id": "C_kwDOAAsO6NoAKGZlZjFmYzQzNDliNTAwMTg2ZTQ3MDhlMGZkNTJiZDc4YzM4NzliNDE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-21T18:00:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-21T18:00:14Z"}, "message": "Rollup merge of #109441 - oli-obk:fn_trait_new_solver, r=compiler-errors\n\nOnly implement Fn* traits for extern \"Rust\" safe function pointers and items\n\nSince calling the function via an `Fn` trait will assume `extern \"Rust\"` ABI and not do any safety checks, only safe `extern \"Rust\"` function can implement the `Fn` traits. This syncs the logic between the old solver and the new solver.\n\nr? `@compiler-errors`", "tree": {"sha": "46e45c9e1d6fa9784b0b4c3ab5f3b5ab396bee76", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e45c9e1d6fa9784b0b4c3ab5f3b5ab396bee76"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fef1fc4349b500186e4708e0fd52bd78c3879b41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkGfCuCRBK7hj4Ov3rIwAAFIgIAEfS7fqXv0UXRGpmg4ikeztq\nT/T0klKctD8LkYWHnqkMpn2MTRu8eXpYk6ttbE3RvVlk2uBNi9Wc3CDycnrhY80R\nsqzV683TOnUebbAEpCcRFeXUK7i+0fytA1yuWfwRvk4ziMMpm9p/CXcjgN8flWA8\nDfzb7+xymRslbFn3hs8kta++qRio4vJfLM35GW1Ka5Y+n0igvPb4DP4PSAgtETZN\n0SY5F5BPnqJk04y0+K86RmVb2SftESALgiMEi1Is/7QmpB2HZDwV5zPeLAx1YF55\nTSldlgWkt8JTVdU4FFbWBsqOZ0TlRb3II5fJg6VmehMyZj/ZoVr3ufoPu6WBng4=\n=1XJi\n-----END PGP SIGNATURE-----\n", "payload": "tree 46e45c9e1d6fa9784b0b4c3ab5f3b5ab396bee76\nparent 96f35ed7200db11d86fbc3057e10c9df5793766a\nparent a00413f680d52b6e4ba1c1075e1310513a1d061c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679421614 +0100\ncommitter GitHub <noreply@github.com> 1679421614 +0100\n\nRollup merge of #109441 - oli-obk:fn_trait_new_solver, r=compiler-errors\n\nOnly implement Fn* traits for extern \"Rust\" safe function pointers and items\n\nSince calling the function via an `Fn` trait will assume `extern \"Rust\"` ABI and not do any safety checks, only safe `extern \"Rust\"` function can implement the `Fn` traits. This syncs the logic between the old solver and the new solver.\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fef1fc4349b500186e4708e0fd52bd78c3879b41", "html_url": "https://github.com/rust-lang/rust/commit/fef1fc4349b500186e4708e0fd52bd78c3879b41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fef1fc4349b500186e4708e0fd52bd78c3879b41/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96f35ed7200db11d86fbc3057e10c9df5793766a", "url": "https://api.github.com/repos/rust-lang/rust/commits/96f35ed7200db11d86fbc3057e10c9df5793766a", "html_url": "https://github.com/rust-lang/rust/commit/96f35ed7200db11d86fbc3057e10c9df5793766a"}, {"sha": "a00413f680d52b6e4ba1c1075e1310513a1d061c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a00413f680d52b6e4ba1c1075e1310513a1d061c", "html_url": "https://github.com/rust-lang/rust/commit/a00413f680d52b6e4ba1c1075e1310513a1d061c"}], "stats": {"total": 217, "additions": 189, "deletions": 28}, "files": [{"sha": "2a0536a1af72d66e2de2dedb9e14f6ce46f79c13", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fef1fc4349b500186e4708e0fd52bd78c3879b41/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef1fc4349b500186e4708e0fd52bd78c3879b41/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=fef1fc4349b500186e4708e0fd52bd78c3879b41", "patch": "@@ -23,7 +23,7 @@ use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n-use rustc_target::spec::abi;\n+use rustc_target::spec::abi::{self, Abi};\n use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::fmt;\n@@ -1403,6 +1403,18 @@ impl<'tcx> PolyFnSig<'tcx> {\n     pub fn abi(&self) -> abi::Abi {\n         self.skip_binder().abi\n     }\n+\n+    pub fn is_fn_trait_compatible(&self) -> bool {\n+        matches!(\n+            self.skip_binder(),\n+            ty::FnSig {\n+                unsafety: rustc_hir::Unsafety::Normal,\n+                abi: Abi::Rust,\n+                c_variadic: false,\n+                ..\n+            }\n+        )\n+    }\n }\n \n pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<'tcx, FnSig<'tcx>>>;"}, {"sha": "9817186b874ccc8ee89987b29a54a1fefe6adabc", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fef1fc4349b500186e4708e0fd52bd78c3879b41/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef1fc4349b500186e4708e0fd52bd78c3879b41/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=fef1fc4349b500186e4708e0fd52bd78c3879b41", "patch": "@@ -189,12 +189,28 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n     goal_kind: ty::ClosureKind,\n ) -> Result<Option<ty::Binder<'tcx, (Ty<'tcx>, Ty<'tcx>)>>, NoSolution> {\n     match *self_ty.kind() {\n-        ty::FnDef(def_id, substs) => Ok(Some(\n-            tcx.fn_sig(def_id)\n-                .subst(tcx, substs)\n-                .map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())),\n-        )),\n-        ty::FnPtr(sig) => Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())))),\n+        // keep this in sync with assemble_fn_pointer_candidates until the old solver is removed.\n+        ty::FnDef(def_id, substs) => {\n+            let sig = tcx.fn_sig(def_id);\n+            if sig.skip_binder().is_fn_trait_compatible()\n+                && tcx.codegen_fn_attrs(def_id).target_features.is_empty()\n+            {\n+                Ok(Some(\n+                    sig.subst(tcx, substs)\n+                        .map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output())),\n+                ))\n+            } else {\n+                Err(NoSolution)\n+            }\n+        }\n+        // keep this in sync with assemble_fn_pointer_candidates until the old solver is removed.\n+        ty::FnPtr(sig) => {\n+            if sig.is_fn_trait_compatible() {\n+                Ok(Some(sig.map_bound(|sig| (tcx.mk_tup(sig.inputs()), sig.output()))))\n+            } else {\n+                Err(NoSolution)\n+            }\n+        }\n         ty::Closure(_, substs) => {\n             let closure_substs = substs.as_closure();\n             match closure_substs.kind_ty().to_opt_closure_kind() {"}, {"sha": "e06eff34df21a4cf6c9cf347d8b7498b872c77aa", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fef1fc4349b500186e4708e0fd52bd78c3879b41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef1fc4349b500186e4708e0fd52bd78c3879b41/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=fef1fc4349b500186e4708e0fd52bd78c3879b41", "patch": "@@ -11,7 +11,6 @@ use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n use rustc_middle::ty::fast_reject::TreatProjections;\n use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n-use rustc_target::spec::abi::Abi;\n \n use crate::traits;\n use crate::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -291,6 +290,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n+        // Keep this funtion in sync with extract_tupled_inputs_and_output_from_callable\n+        // until the old solver (and thus this function) is removed.\n+\n         // Okay to skip binder because what we are inspecting doesn't involve bound regions.\n         let self_ty = obligation.self_ty().skip_binder();\n         match *self_ty.kind() {\n@@ -299,31 +301,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 candidates.ambiguous = true; // Could wind up being a fn() type.\n             }\n             // Provide an impl, but only for suitable `fn` pointers.\n-            ty::FnPtr(_) => {\n-                if let ty::FnSig {\n-                    unsafety: hir::Unsafety::Normal,\n-                    abi: Abi::Rust,\n-                    c_variadic: false,\n-                    ..\n-                } = self_ty.fn_sig(self.tcx()).skip_binder()\n-                {\n+            ty::FnPtr(sig) => {\n+                if sig.is_fn_trait_compatible() {\n                     candidates.vec.push(FnPointerCandidate { is_const: false });\n                 }\n             }\n             // Provide an impl for suitable functions, rejecting `#[target_feature]` functions (RFC 2396).\n             ty::FnDef(def_id, _) => {\n-                if let ty::FnSig {\n-                    unsafety: hir::Unsafety::Normal,\n-                    abi: Abi::Rust,\n-                    c_variadic: false,\n-                    ..\n-                } = self_ty.fn_sig(self.tcx()).skip_binder()\n+                if self.tcx().fn_sig(def_id).skip_binder().is_fn_trait_compatible()\n+                    && self.tcx().codegen_fn_attrs(def_id).target_features.is_empty()\n                 {\n-                    if self.tcx().codegen_fn_attrs(def_id).target_features.is_empty() {\n-                        candidates\n-                            .vec\n-                            .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });\n-                    }\n+                    candidates\n+                        .vec\n+                        .push(FnPointerCandidate { is_const: self.tcx().is_const_fn(def_id) });\n                 }\n             }\n             _ => {}"}, {"sha": "0599e51d7ad8cca56a301706ec7365261dda663d", "filename": "tests/ui/traits/new-solver/fn-trait.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fef1fc4349b500186e4708e0fd52bd78c3879b41/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fef1fc4349b500186e4708e0fd52bd78c3879b41/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.rs?ref=fef1fc4349b500186e4708e0fd52bd78c3879b41", "patch": "@@ -1,13 +1,32 @@\n // compile-flags: -Ztrait-solver=next\n-// check-pass\n \n fn require_fn(_: impl Fn() -> i32) {}\n \n fn f() -> i32 {\n     1i32\n }\n \n+extern \"C\" fn g() -> i32 {\n+    2i32\n+}\n+\n+unsafe fn h() -> i32 {\n+    2i32\n+}\n+\n fn main() {\n     require_fn(f);\n     require_fn(f as fn() -> i32);\n+    require_fn(f as unsafe fn() -> i32);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `unsafe fn() -> i32`\n+    //~| ERROR: type mismatch resolving `<unsafe fn() -> i32 as FnOnce<()>>::Output == i32`\n+    require_fn(g);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32 {g}`\n+    //~| ERROR: type mismatch resolving `<extern \"C\" fn() -> i32 {g} as FnOnce<()>>::Output == i32`\n+    require_fn(g as extern \"C\" fn() -> i32);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n+    //~| ERROR: type mismatch resolving `<extern \"C\" fn() -> i32 as FnOnce<()>>::Output == i32`\n+    require_fn(h);\n+    //~^ ERROR: expected a `Fn<()>` closure, found `unsafe fn() -> i32 {h}`\n+    //~| ERROR: type mismatch resolving `<unsafe fn() -> i32 {h} as FnOnce<()>>::Output == i32`\n }"}, {"sha": "d52bcaf25b87c14d40a98670fedb42065744537f", "filename": "tests/ui/traits/new-solver/fn-trait.stderr", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/fef1fc4349b500186e4708e0fd52bd78c3879b41/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fef1fc4349b500186e4708e0fd52bd78c3879b41/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Ffn-trait.stderr?ref=fef1fc4349b500186e4708e0fd52bd78c3879b41", "patch": "@@ -0,0 +1,124 @@\n+error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() -> i32`\n+  --> $DIR/fn-trait.rs:20:16\n+   |\n+LL |     require_fn(f as unsafe fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for `unsafe fn() -> i32`\n+   = note: wrap the `unsafe fn() -> i32` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<unsafe fn() -> i32 as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:20:16\n+   |\n+LL |     require_fn(f as unsafe fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n+error[E0277]: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32 {g}`\n+  --> $DIR/fn-trait.rs:23:16\n+   |\n+LL |     require_fn(g);\n+   |     ---------- ^ expected an `Fn<()>` closure, found `extern \"C\" fn() -> i32 {g}`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for fn item `extern \"C\" fn() -> i32 {g}`\n+   = note: wrap the `extern \"C\" fn() -> i32 {g}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<extern \"C\" fn() -> i32 {g} as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:23:16\n+   |\n+LL |     require_fn(g);\n+   |     ---------- ^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n+error[E0277]: expected a `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n+  --> $DIR/fn-trait.rs:26:16\n+   |\n+LL |     require_fn(g as extern \"C\" fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `extern \"C\" fn() -> i32`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for `extern \"C\" fn() -> i32`\n+   = note: wrap the `extern \"C\" fn() -> i32` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<extern \"C\" fn() -> i32 as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:26:16\n+   |\n+LL |     require_fn(g as extern \"C\" fn() -> i32);\n+   |     ---------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n+error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() -> i32 {h}`\n+  --> $DIR/fn-trait.rs:29:16\n+   |\n+LL |     require_fn(h);\n+   |     ---------- ^ call the function in a closure: `|| unsafe { /* code */ }`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Fn<()>` is not implemented for fn item `unsafe fn() -> i32 {h}`\n+   = note: wrap the `unsafe fn() -> i32 {h}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:23\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                       ^^^^^^^^^^^ required by this bound in `require_fn`\n+\n+error[E0271]: type mismatch resolving `<unsafe fn() -> i32 {h} as FnOnce<()>>::Output == i32`\n+  --> $DIR/fn-trait.rs:29:16\n+   |\n+LL |     require_fn(h);\n+   |     ---------- ^ types differ\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+note: required by a bound in `require_fn`\n+  --> $DIR/fn-trait.rs:3:31\n+   |\n+LL | fn require_fn(_: impl Fn() -> i32) {}\n+   |                               ^^^ required by this bound in `require_fn`\n+\n+error: aborting due to 8 previous errors\n+\n+Some errors have detailed explanations: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}]}