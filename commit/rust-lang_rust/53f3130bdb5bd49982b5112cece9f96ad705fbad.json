{"sha": "53f3130bdb5bd49982b5112cece9f96ad705fbad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZjMxMzBiZGI1YmQ0OTk4MmI1MTEyY2VjZTlmOTZhZDcwNWZiYWQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-16T21:34:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-16T21:34:45Z"}, "message": "Rollup merge of #71219 - JOE1994:patch-4, r=Mark-Simulacrum\n\nMinor fixes to doc comments of 'VecDeque'\n\n1. Changed descriptions of `fn get` & `fn get_mut`.\n  Since both of these functions are returning references, and not the owned value, I thought the doc comments could be fixed to be consistent with doc comments of `fn front` & `fn front_mut`.\n\n2. Other changes are minor fixes or additions for clarification.\n\nThank you for taking a look :)", "tree": {"sha": "99fccadd326b8e4d670b214aa62d882a80d76a63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99fccadd326b8e4d670b214aa62d882a80d76a63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53f3130bdb5bd49982b5112cece9f96ad705fbad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemM91CRBK7hj4Ov3rIwAAdHIIAC1eylLYr35lrhR01Pck9A53\nW6cHRHt9pbxEbbC+5kdIREqUCMc8oO1Oc8XxQAtJRLJBLRZiXcqCvGSQK4onvJYA\nXCJ4AvgQiI9BcoGlAPoJNqwDI5gFT40ov6H/6kdkaEYdxXsC8dnp57CLe1h3moJ+\n90rwA/02qvtGoy7iiyUgqZvhHlrx0qVR3MVZayoeY0UWiQGagy9nZgPBmbb4iiVQ\nVdgReiHCKbE00BrUvlf88lyeUlbe1KbmVMrZ18hEHGMmTfedzTEWKpaGT8cZi/Fv\nAZybst5JDz7JKLSZrHOjT9eH75IEVH6voWvIEprUFYe6I3dKwBJrRWUQcZr22NY=\n=81PF\n-----END PGP SIGNATURE-----\n", "payload": "tree 99fccadd326b8e4d670b214aa62d882a80d76a63\nparent 42aab583e56d7c4bc7c5e76e6fede22fe35d4ca1\nparent 9707bec3c5692774e01aaab51465f874107da160\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587072885 +0200\ncommitter GitHub <noreply@github.com> 1587072885 +0200\n\nRollup merge of #71219 - JOE1994:patch-4, r=Mark-Simulacrum\n\nMinor fixes to doc comments of 'VecDeque'\n\n1. Changed descriptions of `fn get` & `fn get_mut`.\n  Since both of these functions are returning references, and not the owned value, I thought the doc comments could be fixed to be consistent with doc comments of `fn front` & `fn front_mut`.\n\n2. Other changes are minor fixes or additions for clarification.\n\nThank you for taking a look :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53f3130bdb5bd49982b5112cece9f96ad705fbad", "html_url": "https://github.com/rust-lang/rust/commit/53f3130bdb5bd49982b5112cece9f96ad705fbad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53f3130bdb5bd49982b5112cece9f96ad705fbad/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42aab583e56d7c4bc7c5e76e6fede22fe35d4ca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/42aab583e56d7c4bc7c5e76e6fede22fe35d4ca1", "html_url": "https://github.com/rust-lang/rust/commit/42aab583e56d7c4bc7c5e76e6fede22fe35d4ca1"}, {"sha": "9707bec3c5692774e01aaab51465f874107da160", "url": "https://api.github.com/repos/rust-lang/rust/commits/9707bec3c5692774e01aaab51465f874107da160", "html_url": "https://github.com/rust-lang/rust/commit/9707bec3c5692774e01aaab51465f874107da160"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "06e00465e12db920d5459cb9e7353bd6202e73a7", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53f3130bdb5bd49982b5112cece9f96ad705fbad/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53f3130bdb5bd49982b5112cece9f96ad705fbad/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=53f3130bdb5bd49982b5112cece9f96ad705fbad", "patch": "@@ -488,7 +488,7 @@ impl<T> VecDeque<T> {\n         VecDeque { tail: 0, head: 0, buf: RawVec::with_capacity(cap) }\n     }\n \n-    /// Retrieves an element in the `VecDeque` by index.\n+    /// Provides a reference to the element at the given index.\n     ///\n     /// Element at index 0 is the front of the queue.\n     ///\n@@ -513,7 +513,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Retrieves an element in the `VecDeque` mutably by index.\n+    /// Provides a mutable reference to the element at the given index.\n     ///\n     /// Element at index 0 is the front of the queue.\n     ///\n@@ -651,7 +651,7 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Tries to reserves the minimum capacity for exactly `additional` more elements to\n+    /// Tries to reserve the minimum capacity for exactly `additional` more elements to\n     /// be inserted in the given `VecDeque<T>`. After calling `reserve_exact`,\n     /// capacity will be greater than or equal to `self.len() + additional`.\n     /// Does nothing if the capacity is already sufficient.\n@@ -662,7 +662,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Errors\n     ///\n-    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// If the capacity overflows `usize`, or the allocator reports a failure, then an error\n     /// is returned.\n     ///\n     /// # Examples\n@@ -678,7 +678,7 @@ impl<T> VecDeque<T> {\n     ///     // Pre-reserve the memory, exiting if we can't\n     ///     output.try_reserve_exact(data.len())?;\n     ///\n-    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     // Now we know this can't OOM(Out-Of-Memory) in the middle of our complex work\n     ///     output.extend(data.iter().map(|&val| {\n     ///         val * 2 + 5 // very complicated\n     ///     }));\n@@ -700,7 +700,7 @@ impl<T> VecDeque<T> {\n     ///\n     /// # Errors\n     ///\n-    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// If the capacity overflows `usize`, or the allocator reports a failure, then an error\n     /// is returned.\n     ///\n     /// # Examples"}]}