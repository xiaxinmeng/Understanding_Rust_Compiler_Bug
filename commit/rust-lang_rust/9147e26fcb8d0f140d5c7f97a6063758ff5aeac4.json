{"sha": "9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNDdlMjZmY2I4ZDBmMTQwZDVjN2Y5N2E2MDYzNzU4ZmY1YWVhYzQ=", "commit": {"author": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-09T09:38:14Z"}, "committer": {"name": "LooMaclin", "email": "loo.maclin@protonmail.com", "date": "2019-04-09T09:38:14Z"}, "message": "Improve miri's error reporting in check_in_alloc", "tree": {"sha": "a9e431b9cce8b051bad5cd036aeeb3a83643e5ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9e431b9cce8b051bad5cd036aeeb3a83643e5ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "html_url": "https://github.com/rust-lang/rust/commit/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4/comments", "author": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LooMaclin", "id": 10957765, "node_id": "MDQ6VXNlcjEwOTU3NzY1", "avatar_url": "https://avatars.githubusercontent.com/u/10957765?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LooMaclin", "html_url": "https://github.com/LooMaclin", "followers_url": "https://api.github.com/users/LooMaclin/followers", "following_url": "https://api.github.com/users/LooMaclin/following{/other_user}", "gists_url": "https://api.github.com/users/LooMaclin/gists{/gist_id}", "starred_url": "https://api.github.com/users/LooMaclin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LooMaclin/subscriptions", "organizations_url": "https://api.github.com/users/LooMaclin/orgs", "repos_url": "https://api.github.com/users/LooMaclin/repos", "events_url": "https://api.github.com/users/LooMaclin/events{/privacy}", "received_events_url": "https://api.github.com/users/LooMaclin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ba4bda7aa1b8e66714090d5a8e7253c83f8161", "url": "https://api.github.com/repos/rust-lang/rust/commits/32ba4bda7aa1b8e66714090d5a8e7253c83f8161", "html_url": "https://github.com/rust-lang/rust/commit/32ba4bda7aa1b8e66714090d5a8e7253c83f8161"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "61f77171ce354561cfbd551771f6da4c71421156", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "patch": "@@ -224,12 +224,11 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         cx: &impl HasDataLayout,\n         ptr: Pointer<Tag>,\n         size: Size,\n-        msg: CheckInAllocMsg,\n     ) -> EvalResult<'tcx, &[u8]>\n         // FIXME: Working around https://github.com/rust-lang/rust/issues/56209\n         where Extra: AllocationExtra<Tag, MemoryExtra>\n     {\n-        self.get_bytes_internal(cx, ptr, size, true, msg)\n+        self.get_bytes_internal(cx, ptr, size, true, CheckInAllocMsg::MemoryAccess)\n     }\n \n     /// It is the caller's responsibility to handle undefined and pointer bytes.\n@@ -295,7 +294,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n                 // Go through `get_bytes` for checks and AllocationExtra hooks.\n                 // We read the null, so we include it in the request, but we want it removed\n                 // from the result!\n-                Ok(&self.get_bytes(cx, ptr, size_with_null, CheckInAllocMsg::NullPointer)?[..size])\n+                Ok(&self.get_bytes(cx, ptr, size_with_null)?[..size])\n             }\n             None => err!(UnterminatedCString(ptr.erase_tag())),\n         }\n@@ -379,7 +378,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n     {\n         // get_bytes_unchecked tests relocation edges\n         let bytes = self.get_bytes_with_undef_and_ptr(cx, ptr, size,\n-                                                      CheckInAllocMsg::PointerArithmetic)?;\n+                                                      CheckInAllocMsg::MemoryAccess)?;\n         // Undef check happens *after* we established that the alignment is correct.\n         // We must not return Ok() for unaligned pointers!\n         if self.check_defined(ptr, size).is_err() {\n@@ -456,7 +455,7 @@ impl<'tcx, Tag: Copy, Extra> Allocation<Tag, Extra> {\n         };\n \n         let endian = cx.data_layout().endian;\n-        let dst = self.get_bytes_mut(cx, ptr, type_size, CheckInAllocMsg::PointerArithmetic)?;\n+        let dst = self.get_bytes_mut(cx, ptr, type_size, CheckInAllocMsg::MemoryAccess)?;\n         write_target_uint(endian, dst, bytes).unwrap();\n \n         // See if we have to also write a relocation"}, {"sha": "303ffcb3bfb3ab653a5d17137982f0c59bb8add8", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "patch": "@@ -172,7 +172,7 @@ use rustc::ty::{self, Ty, TyCtxt, TypeFoldable, Const};\n use rustc::ty::layout::{Integer, IntegerExt, VariantIdx, Size};\n \n use rustc::mir::Field;\n-use rustc::mir::interpret::{ConstValue, Scalar, truncate, CheckInAllocMsg};\n+use rustc::mir::interpret::{ConstValue, Scalar, truncate};\n use rustc::util::common::ErrorReported;\n \n use syntax::attr::{SignedInt, UnsignedInt};\n@@ -1418,8 +1418,7 @@ fn slice_pat_covered_by_const<'tcx>(\n                 return Ok(false);\n             }\n             let n = n.assert_usize(tcx).unwrap();\n-            alloc.get_bytes(&tcx, ptr, Size::from_bytes(n),\n-                            CheckInAllocMsg::OutOfBounds).unwrap()\n+            alloc.get_bytes(&tcx, ptr, Size::from_bytes(n)).unwrap()\n         },\n         // a slice fat pointer to a zero length slice\n         (ConstValue::Slice(Scalar::Bits { .. }, 0), ty::Slice(t)) => {\n@@ -1444,7 +1443,7 @@ fn slice_pat_covered_by_const<'tcx>(\n             tcx.alloc_map\n                 .lock()\n                 .unwrap_memory(ptr.alloc_id)\n-                .get_bytes(&tcx, ptr, Size::from_bytes(n), CheckInAllocMsg::OutOfBounds)\n+                .get_bytes(&tcx, ptr, Size::from_bytes(n))\n                 .unwrap()\n         },\n         _ => bug!("}, {"sha": "b9e2b9d499e551472cd8116e94e13ed91d23925c", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9147e26fcb8d0f140d5c7f97a6063758ff5aeac4/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9147e26fcb8d0f140d5c7f97a6063758ff5aeac4", "patch": "@@ -606,7 +606,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             Ok(&[])\n         } else {\n             let ptr = ptr.to_ptr()?;\n-            self.get(ptr.alloc_id)?.get_bytes(self, ptr, size, CheckInAllocMsg::MemoryAccess)\n+            self.get(ptr.alloc_id)?.get_bytes(self, ptr, size)\n         }\n     }\n }"}]}