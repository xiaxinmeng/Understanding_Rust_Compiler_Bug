{"sha": "32360925035716a78509629aeff57208ab312649", "node_id": "C_kwDOAAsO6NoAKDMyMzYwOTI1MDM1NzE2YTc4NTA5NjI5YWVmZjU3MjA4YWIzMTI2NDk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T15:43:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-18T16:30:17Z"}, "message": "add method to get absolute address of a pointer (useful only for Miri)", "tree": {"sha": "eafcfccaf4714a8cd0a8c4887a0e35fe0c460f60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eafcfccaf4714a8cd0a8c4887a0e35fe0c460f60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32360925035716a78509629aeff57208ab312649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32360925035716a78509629aeff57208ab312649", "html_url": "https://github.com/rust-lang/rust/commit/32360925035716a78509629aeff57208ab312649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32360925035716a78509629aeff57208ab312649/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9e568f72e98ea4b754d3b318967f4d45534ab40", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e568f72e98ea4b754d3b318967f4d45534ab40", "html_url": "https://github.com/rust-lang/rust/commit/c9e568f72e98ea4b754d3b318967f4d45534ab40"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "7721485771b3b0a121ea08e321b326889869d982", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/32360925035716a78509629aeff57208ab312649/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32360925035716a78509629aeff57208ab312649/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=32360925035716a78509629aeff57208ab312649", "patch": "@@ -126,6 +126,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n \n     /// Whether, when checking alignment, we should `force_int` and thus support\n     /// custom alignment logic based on whatever the integer address happens to be.\n+    ///\n+    /// Requires PointerTag::OFFSET_IS_ADDR to be true.\n     fn force_int_for_alignment_check(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;\n \n     /// Whether to enforce the validity invariant"}, {"sha": "d19a9d7056012a6ca9e7611307a4070c9dbdbe6a", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/32360925035716a78509629aeff57208ab312649/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32360925035716a78509629aeff57208ab312649/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=32360925035716a78509629aeff57208ab312649", "patch": "@@ -446,12 +446,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // we want the error to be about the bounds.\n                 if let Some(align) = align {\n                     if M::force_int_for_alignment_check(self) {\n-                        assert!(\n-                            M::PointerTag::OFFSET_IS_ADDR,\n-                            \"ptr-to-int cast for align check should never fail\"\n-                        );\n-                        let (_, addr) = ptr.into_parts(); // we checked that offset is absolute\n-                        check_offset_align(addr.bytes(), align)?;\n+                        // `force_int_for_alignment_check` can only be true if `OFFSET_IS_ADDR` is true.\n+                        check_offset_align(ptr.addr().bytes(), align)?;\n                     } else {\n                         // Check allocation alignment and offset alignment.\n                         if alloc_align.bytes() < align.bytes() {"}, {"sha": "4461f4e0568738deccbc4c32c00b134b8debf47f", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/32360925035716a78509629aeff57208ab312649/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32360925035716a78509629aeff57208ab312649/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=32360925035716a78509629aeff57208ab312649", "patch": "@@ -207,6 +207,16 @@ impl<Tag> Pointer<Option<Tag>> {\n             None => Err(self.offset),\n         }\n     }\n+\n+    /// Returns the absolute address the pointer points to.\n+    /// Only works if Tag::OFFSET_IS_ADDR is true!\n+    pub fn addr(self) -> Size\n+    where\n+        Tag: Provenance,\n+    {\n+        assert!(Tag::OFFSET_IS_ADDR);\n+        self.offset\n+    }\n }\n \n impl<Tag> Pointer<Option<Tag>> {"}]}