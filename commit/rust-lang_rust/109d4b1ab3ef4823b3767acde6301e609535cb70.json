{"sha": "109d4b1ab3ef4823b3767acde6301e609535cb70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwOWQ0YjFhYjNlZjQ4MjNiMzc2N2FjZGU2MzAxZTYwOTUzNWNiNzA=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-09T11:19:21Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-09T23:48:14Z"}, "message": "Lint redundant clone of projection", "tree": {"sha": "f793fb7cb6036256e353f73bc0af3ac87d540f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f793fb7cb6036256e353f73bc0af3ac87d540f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/109d4b1ab3ef4823b3767acde6301e609535cb70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/109d4b1ab3ef4823b3767acde6301e609535cb70", "html_url": "https://github.com/rust-lang/rust/commit/109d4b1ab3ef4823b3767acde6301e609535cb70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/109d4b1ab3ef4823b3767acde6301e609535cb70/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4fe5676022d66ad157b4b4238d035d6035dc31e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4fe5676022d66ad157b4b4238d035d6035dc31e", "html_url": "https://github.com/rust-lang/rust/commit/a4fe5676022d66ad157b4b4238d035d6035dc31e"}], "stats": {"total": 129, "additions": 106, "deletions": 23}, "files": [{"sha": "f30da9c909d9b4f14023387c388c31b1b20dab64", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/109d4b1ab3ef4823b3767acde6301e609535cb70/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109d4b1ab3ef4823b3767acde6301e609535cb70/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=109d4b1ab3ef4823b3767acde6301e609535cb70", "patch": "@@ -57,7 +57,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     }\n     match expr.node {\n         ExprKind::Lit(..) | ExprKind::Closure(.., _) => true,\n-        ExprKind::Path(..) => !has_drop(cx, expr),\n+        ExprKind::Path(..) => !has_drop(cx, cx.tables.expr_ty(expr)),\n         ExprKind::Index(ref a, ref b) | ExprKind::Binary(_, ref a, ref b) => {\n             has_no_effect(cx, a) && has_no_effect(cx, b)\n         },\n@@ -70,7 +70,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n         | ExprKind::AddrOf(_, ref inner)\n         | ExprKind::Box(ref inner) => has_no_effect(cx, inner),\n         ExprKind::Struct(_, ref fields, ref base) => {\n-            !has_drop(cx, expr)\n+            !has_drop(cx, cx.tables.expr_ty(expr))\n                 && fields.iter().all(|field| has_no_effect(cx, &field.expr))\n                 && match *base {\n                     Some(ref base) => has_no_effect(cx, base),\n@@ -82,7 +82,7 @@ fn has_no_effect(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n                 let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n                     Def::Struct(..) | Def::Variant(..) | Def::StructCtor(..) | Def::VariantCtor(..) => {\n-                        !has_drop(cx, expr) && args.iter().all(|arg| has_no_effect(cx, arg))\n+                        !has_drop(cx, cx.tables.expr_ty(expr)) && args.iter().all(|arg| has_no_effect(cx, arg))\n                     },\n                     _ => false,\n                 }\n@@ -161,7 +161,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n         | ExprKind::AddrOf(_, ref inner)\n         | ExprKind::Box(ref inner) => reduce_expression(cx, inner).or_else(|| Some(vec![inner])),\n         ExprKind::Struct(_, ref fields, ref base) => {\n-            if has_drop(cx, expr) {\n+            if has_drop(cx, cx.tables.expr_ty(expr)) {\n                 None\n             } else {\n                 Some(fields.iter().map(|f| &f.expr).chain(base).map(Deref::deref).collect())\n@@ -172,7 +172,7 @@ fn reduce_expression<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr) -> Option<Vec\n                 let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n                     Def::Struct(..) | Def::Variant(..) | Def::StructCtor(..) | Def::VariantCtor(..)\n-                        if !has_drop(cx, expr) =>\n+                        if !has_drop(cx, cx.tables.expr_ty(expr)) =>\n                     {\n                         Some(args.iter().collect())\n                     },"}, {"sha": "2c1173bf10e093372f03d752d413fddca1bb329d", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 61, "deletions": 10, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/109d4b1ab3ef4823b3767acde6301e609535cb70/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109d4b1ab3ef4823b3767acde6301e609535cb70/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=109d4b1ab3ef4823b3767acde6301e609535cb70", "patch": "@@ -23,10 +23,11 @@ use crate::syntax::{\n     source_map::{BytePos, Span},\n };\n use crate::utils::{\n-    in_macro, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_node, span_lint_node_and_then,\n-    walk_ptrs_ty_depth,\n+    has_drop, in_macro, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_node,\n+    span_lint_node_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n+use matches::matches;\n use std::convert::TryFrom;\n \n macro_rules! unwrap_or_continue {\n@@ -126,7 +127,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n             // _1 in MIR `{ _2 = &_1; clone(move _2); }` or `{ _2 = _1; to_path_buf(_2); } (from_deref)\n             // In case of `from_deref`, `arg` is already a reference since it is `deref`ed in the previous\n             // block.\n-            let cloned = unwrap_or_continue!(find_stmt_assigns_to(arg, from_borrow, bbdata.statements.iter().rev()));\n+            let (cloned, cannot_move_out) = unwrap_or_continue!(find_stmt_assigns_to(\n+                cx,\n+                mir,\n+                arg,\n+                from_borrow,\n+                bbdata.statements.iter().rev()\n+            ));\n+\n+            if from_borrow && cannot_move_out {\n+                continue;\n+            }\n \n             // _1 in MIR `{ _2 = &_1; _3 = deref(move _2); } -> { _4 = _3; to_path_buf(move _4); }`\n             let referent = if from_deref {\n@@ -150,7 +161,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                     }\n                 };\n \n-                unwrap_or_continue!(find_stmt_assigns_to(pred_arg, true, mir[ps[0]].statements.iter().rev()))\n+                let (local, cannot_move_out) = unwrap_or_continue!(find_stmt_assigns_to(\n+                    cx,\n+                    mir,\n+                    pred_arg,\n+                    true,\n+                    mir[ps[0]].statements.iter().rev()\n+                ));\n+                if cannot_move_out {\n+                    continue;\n+                }\n+                local\n             } else {\n                 cloned\n             };\n@@ -227,21 +248,25 @@ fn is_call_with_ref_arg<'tcx>(\n     }\n }\n \n+type CannotMoveOut = bool;\n+\n /// Finds the first `to = (&)from`, and returns `Some(from)`.\n fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n+    cx: &LateContext<'_, 'tcx>,\n+    mir: &mir::Mir<'tcx>,\n     to: mir::Local,\n     by_ref: bool,\n     mut stmts: impl Iterator<Item = &'a mir::Statement<'tcx>>,\n-) -> Option<mir::Local> {\n+) -> Option<(mir::Local, CannotMoveOut)> {\n     stmts.find_map(|stmt| {\n         if let mir::StatementKind::Assign(mir::Place::Local(local), v) = &stmt.kind {\n             if *local == to {\n                 if by_ref {\n-                    if let mir::Rvalue::Ref(_, _, mir::Place::Local(r)) = **v {\n-                        return Some(r);\n+                    if let mir::Rvalue::Ref(_, _, ref place) = **v {\n+                        return base_local(cx, mir, place);\n                     }\n-                } else if let mir::Rvalue::Use(mir::Operand::Copy(mir::Place::Local(r))) = **v {\n-                    return Some(r);\n+                } else if let mir::Rvalue::Use(mir::Operand::Copy(ref place)) = **v {\n+                    return base_local(cx, mir, place);\n                 }\n             }\n         }\n@@ -250,6 +275,32 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n     })\n }\n \n+fn base_local<'tcx>(\n+    cx: &LateContext<'_, 'tcx>,\n+    mir: &mir::Mir<'tcx>,\n+    mut place: &mir::Place<'tcx>,\n+) -> Option<(mir::Local, CannotMoveOut)> {\n+    use rustc::mir::Place::*;\n+\n+    let mut deref = false;\n+    // Accessing a field of an ADT that has `Drop`\n+    let mut field = false;\n+\n+    loop {\n+        match place {\n+            Local(local) => return Some((*local, deref || field)),\n+            Projection(proj) => {\n+                place = &proj.base;\n+                deref = deref || matches!(proj.elem, mir::ProjectionElem::Deref);\n+                if !field && matches!(proj.elem, mir::ProjectionElem::Field(..)) {\n+                    field = has_drop(cx, place.ty(&mir.local_decls, cx.tcx).to_ty(cx.tcx));\n+                }\n+            },\n+            _ => return None,\n+        }\n+    }\n+}\n+\n struct LocalUseVisitor {\n     local: mir::Local,\n     used_other_than_drop: bool,\n@@ -280,7 +331,7 @@ impl<'tcx> mir::visit::Visitor<'tcx> for LocalUseVisitor {\n     fn visit_local(&mut self, local: &mir::Local, ctx: PlaceContext<'tcx>, _: mir::Location) {\n         match ctx {\n             PlaceContext::MutatingUse(MutatingUseContext::Drop) | PlaceContext::NonUse(_) => return,\n-            _ => {}\n+            _ => {},\n         }\n \n         if *local == self.local {"}, {"sha": "aa6b3305a49a7f521b1a9f96e18071ed91bd7796", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/109d4b1ab3ef4823b3767acde6301e609535cb70/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109d4b1ab3ef4823b3767acde6301e609535cb70/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=109d4b1ab3ef4823b3767acde6301e609535cb70", "patch": "@@ -266,9 +266,8 @@ pub fn implements_trait<'a, 'tcx>(\n }\n \n /// Check whether this type implements Drop.\n-pub fn has_drop(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n-    let struct_ty = cx.tables.expr_ty(expr);\n-    match struct_ty.ty_adt_def() {\n+pub fn has_drop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n+    match ty.ty_adt_def() {\n         Some(def) => def.has_dtor(cx.tcx),\n         _ => false,\n     }"}, {"sha": "71f83e155f3c46f1226f5433330c66d948dffc95", "filename": "tests/ui/redundant_clone.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/109d4b1ab3ef4823b3767acde6301e609535cb70/tests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/109d4b1ab3ef4823b3767acde6301e609535cb70/tests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.rs?ref=109d4b1ab3ef4823b3767acde6301e609535cb70", "patch": "@@ -34,6 +34,12 @@ fn main() {\n \n     // Check that lint level works\n     #[allow(clippy::redundant_clone)] let _ = String::new().to_string();\n+\n+    let tup = (String::from(\"foo\"),);\n+    let _ = tup.0.clone();\n+\n+    let tup_ref = &(String::from(\"foo\"),);\n+    let _s = tup_ref.0.clone(); // this `.clone()` cannot be removed\n }\n \n #[derive(Clone)]\n@@ -45,3 +51,18 @@ fn with_branch(a: Alpha, b: bool) -> (Alpha, Alpha) {\n         (Alpha, a)\n     }\n }\n+\n+struct TypeWithDrop {\n+    x: String,\n+}\n+\n+impl Drop for TypeWithDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+fn cannot_move_from_type_with_drop() -> String {\n+    let s = TypeWithDrop {\n+        x: String::new()\n+    };\n+    s.x.clone() // removing this `clone()` summons E0509\n+}"}, {"sha": "4d1c7aa2600913fca7bd568690d3b16d821dc1c6", "filename": "tests/ui/redundant_clone.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/109d4b1ab3ef4823b3767acde6301e609535cb70/tests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/109d4b1ab3ef4823b3767acde6301e609535cb70/tests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_clone.stderr?ref=109d4b1ab3ef4823b3767acde6301e609535cb70", "patch": "@@ -96,16 +96,28 @@ note: this value is dropped without further use\n    |             ^^^^^^^^^^^^^^^\n \n error: redundant clone\n-  --> $DIR/redundant_clone.rs:43:22\n+  --> $DIR/redundant_clone.rs:39:18\n    |\n-43 |         (a.clone(), a.clone())\n+39 |     let _ = tup.0.clone();\n+   |                  ^^^^^^^^ help: remove this\n+   |\n+note: this value is dropped without further use\n+  --> $DIR/redundant_clone.rs:39:13\n+   |\n+39 |     let _ = tup.0.clone();\n+   |             ^^^^^\n+\n+error: redundant clone\n+  --> $DIR/redundant_clone.rs:49:22\n+   |\n+49 |         (a.clone(), a.clone())\n    |                      ^^^^^^^^ help: remove this\n    |\n note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:43:21\n+  --> $DIR/redundant_clone.rs:49:21\n    |\n-43 |         (a.clone(), a.clone())\n+49 |         (a.clone(), a.clone())\n    |                     ^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n "}]}