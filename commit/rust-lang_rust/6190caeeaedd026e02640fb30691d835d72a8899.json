{"sha": "6190caeeaedd026e02640fb30691d835d72a8899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxOTBjYWVlYWVkZDAyNmUwMjY0MGZiMzA2OTFkODM1ZDcyYTg4OTk=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-01T10:40:40Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-04-02T18:09:03Z"}, "message": "Migrate to privacy as per review commets", "tree": {"sha": "95e41aecd4e6a2da586dffcca70e98877a491896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95e41aecd4e6a2da586dffcca70e98877a491896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6190caeeaedd026e02640fb30691d835d72a8899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6190caeeaedd026e02640fb30691d835d72a8899", "html_url": "https://github.com/rust-lang/rust/commit/6190caeeaedd026e02640fb30691d835d72a8899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6190caeeaedd026e02640fb30691d835d72a8899/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef899aa78f65dbf4ee0d304c171ba02e101a685", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef899aa78f65dbf4ee0d304c171ba02e101a685", "html_url": "https://github.com/rust-lang/rust/commit/bef899aa78f65dbf4ee0d304c171ba02e101a685"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "0ab64a1e0523db2088881088c5af267f8e8822e5", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=6190caeeaedd026e02640fb30691d835d72a8899", "patch": "@@ -58,9 +58,9 @@ pub enum ProjectWorkspace {\n #[derive(Clone)]\n pub struct PackageRoot {\n     /// Path to the root folder\n-    pub path: PathBuf,\n+    path: PathBuf,\n     /// Is a member of the current workspace\n-    pub is_member: bool,\n+    is_member: bool,\n }\n impl PackageRoot {\n     pub fn new_member(path: PathBuf) -> PackageRoot {\n@@ -69,6 +69,12 @@ impl PackageRoot {\n     pub fn new_non_member(path: PathBuf) -> PackageRoot {\n         Self { path, is_member: false }\n     }\n+    pub fn path(&self) -> &Path {\n+        &self.path\n+    }\n+    pub fn is_member(&self) -> bool {\n+        self.is_member\n+    }\n }\n \n impl ProjectWorkspace {"}, {"sha": "7667873d5f0cf48cf286cd1fa378bbb1f442b7a1", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=6190caeeaedd026e02640fb30691d835d72a8899", "patch": "@@ -65,10 +65,10 @@ pub fn analysis_bench(\n         roots\n             .iter()\n             .find_map(|(source_root_id, project_root)| {\n-                if project_root.is_member {\n+                if project_root.is_member() {\n                     for file_id in db.source_root(*source_root_id).walk() {\n                         let rel_path = db.file_relative_path(file_id);\n-                        let abs_path = rel_path.to_path(&project_root.path);\n+                        let abs_path = rel_path.to_path(project_root.path());\n                         if abs_path == path {\n                             return Some(file_id);\n                         }"}, {"sha": "75cf2dae50d6049e8da0089f59a501fc73169ca6", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=6190caeeaedd026e02640fb30691d835d72a8899", "patch": "@@ -39,7 +39,7 @@ pub fn analysis_stats(\n         roots\n             .into_iter()\n             .filter_map(|(source_root_id, project_root)| {\n-                if with_deps || project_root.is_member {\n+                if with_deps || project_root.is_member() {\n                     Some(source_root_id)\n                 } else {\n                     None"}, {"sha": "69133e4e42188fbb5c88ac54fc77b071a6f3559b", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=6190caeeaedd026e02640fb30691d835d72a8899", "patch": "@@ -45,9 +45,9 @@ pub(crate) fn load_cargo(\n             .iter()\n             .map(|pkg_root| {\n                 RootEntry::new(\n-                    pkg_root.path.clone(),\n+                    pkg_root.path().to_owned(),\n                     RustPackageFilterBuilder::default()\n-                        .set_member(pkg_root.is_member)\n+                        .set_member(pkg_root.is_member())\n                         .into_vfs_filter(),\n                 )\n             })\n@@ -60,8 +60,11 @@ pub(crate) fn load_cargo(\n         .into_iter()\n         .map(|vfs_root| {\n             let source_root_id = vfs_root_to_id(vfs_root);\n-            let project_root =\n-                project_roots.iter().find(|it| it.path == vfs.root2path(vfs_root)).unwrap().clone();\n+            let project_root = project_roots\n+                .iter()\n+                .find(|it| it.path() == vfs.root2path(vfs_root))\n+                .unwrap()\n+                .clone();\n             (source_root_id, project_root)\n         })\n         .collect::<FxHashMap<_, _>>();\n@@ -93,7 +96,7 @@ pub(crate) fn load(\n             match change {\n                 VfsChange::AddRoot { root, files } => {\n                     let source_root_id = vfs_root_to_id(root);\n-                    let is_local = source_roots[&source_root_id].is_member;\n+                    let is_local = source_roots[&source_root_id].is_member();\n                     log::debug!(\n                         \"loaded source root {:?} with path {:?}\",\n                         source_root_id,\n@@ -102,7 +105,7 @@ pub(crate) fn load(\n                     analysis_change.add_root(source_root_id, is_local);\n                     analysis_change.set_debug_root_path(\n                         source_root_id,\n-                        source_roots[&source_root_id].path.display().to_string(),\n+                        source_roots[&source_root_id].path().display().to_string(),\n                     );\n \n                     let vfs_root_path = vfs.root2path(root);"}, {"sha": "8d142919628c20e0a4387359ae3c7048fcb9f1d0", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=6190caeeaedd026e02640fb30691d835d72a8899", "patch": "@@ -23,6 +23,7 @@ use lsp_types::{\n use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckTask};\n use ra_ide::{Canceled, FileId, LibraryData, SourceRootId};\n use ra_prof::profile;\n+use ra_project_model::{PackageRoot, ProjectWorkspace};\n use ra_vfs::{VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashSet;\n@@ -131,9 +132,9 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n             let registration_options = req::DidChangeWatchedFilesRegistrationOptions {\n                 watchers: workspaces\n                     .iter()\n-                    .flat_map(|ws| ws.to_roots())\n-                    .filter(|root| root.is_member)\n-                    .map(|root| format!(\"{}/**/*.rs\", root.path.display()))\n+                    .flat_map(ProjectWorkspace::to_roots)\n+                    .filter(PackageRoot::is_member)\n+                    .map(|root| format!(\"{}/**/*.rs\", root.path().display()))\n                     .map(|glob_pattern| req::FileSystemWatcher { glob_pattern, kind: None })\n                     .collect(),\n             };"}, {"sha": "3be4455e35eec3f55fd17c69529149b831a7cb8e", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6190caeeaedd026e02640fb30691d835d72a8899/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=6190caeeaedd026e02640fb30691d835d72a8899", "patch": "@@ -101,7 +101,7 @@ impl WorldState {\n                 .iter()\n                 .map(|path| RootEntry::new(path.clone(), create_filter(true)))\n                 .chain(workspaces.iter().flat_map(ProjectWorkspace::to_roots).map(|pkg_root| {\n-                    RootEntry::new(pkg_root.path, create_filter(pkg_root.is_member))\n+                    RootEntry::new(pkg_root.path().to_owned(), create_filter(pkg_root.is_member()))\n                 }))\n                 .chain(\n                     extern_dirs"}]}