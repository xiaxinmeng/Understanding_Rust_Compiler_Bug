{"sha": "5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "node_id": "C_kwDOAAsO6NoAKDVlMzNlNmFmZmQwZDNkMjA3ZDRhMGQ2NWE5YTkxZGUyZjA3OTJhMjM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-04T03:49:31Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-13T01:46:19Z"}, "message": "Rename `TestOptions` to `GlobalTestOptions`\n\nIt seems to apply to all doctests in the crate.", "tree": {"sha": "1e6cb65f4aaea8c90a26c3a707f1f03db6617683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e6cb65f4aaea8c90a26c3a707f1f03db6617683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "html_url": "https://github.com/rust-lang/rust/commit/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b345e18462b235ad74dc01166702c0d8e9587a97", "url": "https://api.github.com/repos/rust-lang/rust/commits/b345e18462b235ad74dc01166702c0d8e9587a97", "html_url": "https://github.com/rust-lang/rust/commit/b345e18462b235ad74dc01166702c0d8e9587a97"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "96ed9a15454d14df0a9cf8515ef7e30e065be7d5", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "patch": "@@ -34,8 +34,9 @@ use crate::html::markdown::{self, ErrorCodes, Ignore, LangString};\n use crate::lint::init_lints;\n use crate::passes::span_of_attrs;\n \n+/// Options that apply to all doctests in a crate or Markdown file (for `rustdoc foo.md`).\n #[derive(Clone, Default)]\n-crate struct TestOptions {\n+crate struct GlobalTestOptions {\n     /// Whether to disable the default `extern crate my_crate;` when creating doctests.\n     crate no_crate_inject: bool,\n     /// Additional crate-level attributes to add to doctests.\n@@ -214,10 +215,10 @@ crate fn run_tests(mut test_args: Vec<String>, nocapture: bool, tests: Vec<test:\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n-fn scrape_test_config(attrs: &[ast::Attribute]) -> TestOptions {\n+fn scrape_test_config(attrs: &[ast::Attribute]) -> GlobalTestOptions {\n     use rustc_ast_pretty::pprust;\n \n-    let mut opts = TestOptions { no_crate_inject: false, attrs: Vec::new() };\n+    let mut opts = GlobalTestOptions { no_crate_inject: false, attrs: Vec::new() };\n \n     let test_attrs: Vec<_> = attrs\n         .iter()\n@@ -298,7 +299,7 @@ fn run_test(\n     runtool: Option<String>,\n     runtool_args: Vec<String>,\n     target: TargetTriple,\n-    opts: &TestOptions,\n+    opts: &GlobalTestOptions,\n     edition: Edition,\n     outdir: DirState,\n     path: PathBuf,\n@@ -484,7 +485,7 @@ crate fn make_test(\n     s: &str,\n     crate_name: Option<&str>,\n     dont_insert_main: bool,\n-    opts: &TestOptions,\n+    opts: &GlobalTestOptions,\n     edition: Edition,\n     test_id: Option<&str>,\n ) -> (String, usize, bool) {\n@@ -805,7 +806,7 @@ crate struct Collector {\n     use_headers: bool,\n     enable_per_target_ignores: bool,\n     crate_name: Symbol,\n-    opts: TestOptions,\n+    opts: GlobalTestOptions,\n     position: Span,\n     source_map: Option<Lrc<SourceMap>>,\n     filename: Option<PathBuf>,\n@@ -819,7 +820,7 @@ impl Collector {\n         crate_name: Symbol,\n         options: Options,\n         use_headers: bool,\n-        opts: TestOptions,\n+        opts: GlobalTestOptions,\n         source_map: Option<Lrc<SourceMap>>,\n         filename: Option<PathBuf>,\n         enable_per_target_ignores: bool,"}, {"sha": "360d2259ea3d2ea799a833687fd57402e9a121ba", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "patch": "@@ -1,10 +1,10 @@\n-use super::{make_test, TestOptions};\n+use super::{make_test, GlobalTestOptions};\n use rustc_span::edition::DEFAULT_EDITION;\n \n #[test]\n fn make_test_basic() {\n     //basic use: wraps with `fn main`, adds `#![allow(unused)]`\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n fn main() {\n@@ -19,7 +19,7 @@ assert_eq!(2+2, 4);\n fn make_test_crate_name_no_use() {\n     // If you give a crate name but *don't* use it within the test, it won't bother inserting\n     // the `extern crate` statement.\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n fn main() {\n@@ -34,7 +34,7 @@ assert_eq!(2+2, 4);\n fn make_test_crate_name() {\n     // If you give a crate name and use it within the test, it will insert an `extern crate`\n     // statement before `fn main`.\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -52,7 +52,7 @@ assert_eq!(2+2, 4);\n fn make_test_no_crate_inject() {\n     // Even if you do use the crate within the test, setting `opts.no_crate_inject` will skip\n     // adding it anyway.\n-    let opts = TestOptions { no_crate_inject: true, attrs: vec![] };\n+    let opts = GlobalTestOptions { no_crate_inject: true, attrs: vec![] };\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -70,7 +70,7 @@ fn make_test_ignore_std() {\n     // Even if you include a crate name, and use it in the doctest, we still won't include an\n     // `extern crate` statement if the crate is \"std\" -- that's included already by the\n     // compiler!\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"use std::*;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -87,7 +87,7 @@ assert_eq!(2+2, 4);\n fn make_test_manual_extern_crate() {\n     // When you manually include an `extern crate` statement in your doctest, `make_test`\n     // assumes you've included one for your own crate too.\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"extern crate asdf;\n use asdf::qwop;\n assert_eq!(2+2, 4);\";\n@@ -104,7 +104,7 @@ assert_eq!(2+2, 4);\n \n #[test]\n fn make_test_manual_extern_crate_with_macro_use() {\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"#[macro_use] extern crate asdf;\n use asdf::qwop;\n assert_eq!(2+2, 4);\";\n@@ -123,7 +123,7 @@ assert_eq!(2+2, 4);\n fn make_test_opts_attrs() {\n     // If you supplied some doctest attributes with `#![doc(test(attr(...)))]`, it will use\n     // those instead of the stock `#![allow(unused)]`.\n-    let mut opts = TestOptions::default();\n+    let mut opts = GlobalTestOptions::default();\n     opts.attrs.push(\"feature(sick_rad)\".to_string());\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n@@ -155,7 +155,7 @@ assert_eq!(2+2, 4);\n fn make_test_crate_attrs() {\n     // Including inner attributes in your doctest will apply them to the whole \"crate\", pasting\n     // them outside the generated main function.\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"#![feature(sick_rad)]\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -171,7 +171,7 @@ assert_eq!(2+2, 4);\n #[test]\n fn make_test_with_main() {\n     // Including your own `fn main` wrapper lets the test use it verbatim.\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"fn main() {\n     assert_eq!(2+2, 4);\n }\";\n@@ -187,7 +187,7 @@ fn main() {\n #[test]\n fn make_test_fake_main() {\n     // ... but putting it in a comment will still provide a wrapper.\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"//Ceci n'est pas une `fn main`\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -203,7 +203,7 @@ assert_eq!(2+2, 4);\n #[test]\n fn make_test_dont_insert_main() {\n     // Even with that, if you set `dont_insert_main`, it won't create the `fn main` wrapper.\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"//Ceci n'est pas une `fn main`\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -216,7 +216,7 @@ assert_eq!(2+2, 4);\"\n \n #[test]\n fn make_test_issues_21299_33731() {\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n \n     let input = \"// fn main\n assert_eq!(2+2, 4);\";\n@@ -248,7 +248,7 @@ assert_eq!(asdf::foo, 4);\n \n #[test]\n fn make_test_main_in_macro() {\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"#[macro_use] extern crate my_crate;\n test_wrapper! {\n     fn main() {}\n@@ -267,7 +267,7 @@ test_wrapper! {\n #[test]\n fn make_test_returns_result() {\n     // creates an inner function and unwraps it\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"use std::io;\n let mut input = String::new();\n io::stdin().read_line(&mut input)?;\n@@ -287,7 +287,7 @@ Ok::<(), io:Error>(())\n #[test]\n fn make_test_named_wrapper() {\n     // creates an inner function with a specific name\n-    let opts = TestOptions::default();\n+    let opts = GlobalTestOptions::default();\n     let input = \"assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n fn main() { #[allow(non_snake_case)] fn _doctest_main__some_unique_name() {"}, {"sha": "906b8f8a245709656d2e657c573de12397913eba", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "patch": "@@ -7,7 +7,7 @@ use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Symbol;\n \n use crate::config::{Options, RenderOptions};\n-use crate::doctest::{Collector, TestOptions};\n+use crate::doctest::{Collector, GlobalTestOptions};\n use crate::html::escape::Escape;\n use crate::html::markdown;\n use crate::html::markdown::{\n@@ -129,7 +129,7 @@ crate fn render<P: AsRef<Path>>(\n crate fn test(options: Options) -> Result<(), String> {\n     let input_str = read_to_string(&options.input)\n         .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n-    let mut opts = TestOptions::default();\n+    let mut opts = GlobalTestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(\n         Symbol::intern(&options.input.display().to_string()),"}]}