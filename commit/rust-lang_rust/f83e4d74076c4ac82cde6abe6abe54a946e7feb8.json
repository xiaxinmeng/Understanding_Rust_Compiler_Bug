{"sha": "f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4M2U0ZDc0MDc2YzRhYzgyY2RlNmFiZTZhYmU1NGE5NDZlN2ZlYjg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-05-17T19:51:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-17T19:51:26Z"}, "message": "Rollup merge of #50806 - oli-obk:gesundheit, r=ehuss\n\nAdd `bless` x.py subcommand for easy ui test replacement\n\nfixes #49815\n\nr? @nikomatsakis", "tree": {"sha": "7b38a30b80447cb011b46bf28dec74aafa67d4af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b38a30b80447cb011b46bf28dec74aafa67d4af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa/d0+CRBK7hj4Ov3rIwAAdHIIAGuIZ+VVJuidr8XbRceUlXU1\nGlfVQufFi/KKYQmQYrgh9k0+jBO+esfRpuTGTBq+ksEl1nNRh2sxCp2T9MoJ2fRS\nPwwCEkdSmRgmggoykHNk4n8j37oHmDIt+dJEObPBntbED8nSc6kKPFNuAPBLutLL\nsKRBddSWeqADRdXtoYgJAba7WaE8g+lIzsVpHyXAQs1zh8otrO9dp0i9FtE0E6ef\njLXXXFWa2Z3zD50hSrOYldmSB8quy4VRGzru6rTlWOH/WnwUv+OX+P0/aaPifZ7X\n62Aer82nQt+Ta+LhMjuXAhmWlfUJNRH9d0lvZxb3sQoO3wutO6ptU1zomAND//c=\n=40FD\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b38a30b80447cb011b46bf28dec74aafa67d4af\nparent c95267e3a1b766f249cd9bded98a55dd4b1d4730\nparent 0ac2fd1ce2917e3e5f1845ff8d319d03181b244b\nauthor Mark Simulacrum <mark.simulacrum@gmail.com> 1526586686 -0600\ncommitter GitHub <noreply@github.com> 1526586686 -0600\n\nRollup merge of #50806 - oli-obk:gesundheit, r=ehuss\n\nAdd `bless` x.py subcommand for easy ui test replacement\n\nfixes #49815\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "html_url": "https://github.com/rust-lang/rust/commit/f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c95267e3a1b766f249cd9bded98a55dd4b1d4730", "url": "https://api.github.com/repos/rust-lang/rust/commits/c95267e3a1b766f249cd9bded98a55dd4b1d4730", "html_url": "https://github.com/rust-lang/rust/commit/c95267e3a1b766f249cd9bded98a55dd4b1d4730"}, {"sha": "0ac2fd1ce2917e3e5f1845ff8d319d03181b244b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac2fd1ce2917e3e5f1845ff8d319d03181b244b", "html_url": "https://github.com/rust-lang/rust/commit/0ac2fd1ce2917e3e5f1845ff8d319d03181b244b"}], "stats": {"total": 231, "additions": 161, "deletions": 70}, "files": [{"sha": "4607ca5cf9f48e72b32672d424f97c48399c2e6c", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -297,7 +297,12 @@ fn main() {\n     }\n \n     if verbose > 1 {\n-        eprintln!(\"rustc command: {:?}\", cmd);\n+        eprintln!(\n+            \"rustc command: {:?}={:?} {:?}\",\n+            bootstrap::util::dylib_path_var(),\n+            env::join_paths(&dylib_path).unwrap(),\n+            cmd,\n+        );\n         eprintln!(\"sysroot: {:?}\", sysroot);\n         eprintln!(\"libdir: {:?}\", libdir);\n     }"}, {"sha": "cd646b76e832e980b13de2110543a93e76c8dd86", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -1460,6 +1460,7 @@ mod __test {\n             rustc_args: vec![],\n             fail_fast: true,\n             doc_tests: DocTests::No,\n+            bless: false,\n         };\n \n         let build = Build::new(config);"}, {"sha": "90dd5d819b0da2a79330881bb85d5c425a584fc0", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -59,6 +59,8 @@ pub enum Subcommand {\n     },\n     Test {\n         paths: Vec<PathBuf>,\n+        /// Whether to automatically update stderr/stdout files\n+        bless: bool,\n         test_args: Vec<String>,\n         rustc_args: Vec<String>,\n         fail_fast: bool,\n@@ -173,6 +175,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n                 );\n                 opts.optflag(\"\", \"no-doc\", \"do not run doc tests\");\n                 opts.optflag(\"\", \"doc\", \"only run doc tests\");\n+                opts.optflag(\"\", \"bless\", \"update all stderr/stdout files of failing ui tests\");\n             },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             \"clean\" => { opts.optflag(\"\", \"all\", \"clean all build artifacts\"); },\n@@ -258,6 +261,7 @@ Arguments:\n         ./x.py test src/test/run-pass\n         ./x.py test src/libstd --test-args hash_map\n         ./x.py test src/libstd --stage 0\n+        ./x.py test src/test/ui --bless\n \n     If no arguments are passed then the complete artifacts for that stage are\n     compiled and tested.\n@@ -322,6 +326,7 @@ Arguments:\n             \"test\" => {\n                 Subcommand::Test {\n                     paths,\n+                    bless: matches.opt_present(\"bless\"),\n                     test_args: matches.opt_strs(\"test-args\"),\n                     rustc_args: matches.opt_strs(\"rustc-args\"),\n                     fail_fast: !matches.opt_present(\"no-fail-fast\"),\n@@ -424,6 +429,13 @@ impl Subcommand {\n             _ => DocTests::Yes,\n         }\n     }\n+\n+    pub fn bless(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { bless, .. } => bless,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: Vec<String>) -> Vec<String> {"}, {"sha": "7a4924f03c8d23eef3cb1ee26cb5b6c690673fcb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -47,6 +47,16 @@ pub enum TestKind {\n     Bench,\n }\n \n+impl From<Kind> for TestKind {\n+    fn from(kind: Kind) -> Self {\n+        match kind {\n+            Kind::Test => TestKind::Test,\n+            Kind::Bench => TestKind::Bench,\n+            _ => panic!(\"unexpected kind in crate: {:?}\", kind)\n+        }\n+    }\n+}\n+\n impl TestKind {\n     // Return the cargo subcommand for this test kind\n     fn subcommand(self) -> &'static str {\n@@ -951,6 +961,10 @@ impl Step for Compiletest {\n         cmd.arg(\"--host\").arg(&*compiler.host);\n         cmd.arg(\"--llvm-filecheck\").arg(builder.llvm_filecheck(builder.config.build));\n \n+        if builder.config.cmd.bless() {\n+            cmd.arg(\"--bless\");\n+        }\n+\n         if let Some(ref nodejs) = builder.config.nodejs {\n             cmd.arg(\"--nodejs\").arg(nodejs);\n         }\n@@ -1342,13 +1356,7 @@ impl Step for CrateLibrustc {\n \n         for krate in builder.in_tree_crates(\"rustc-main\") {\n             if run.path.ends_with(&krate.path) {\n-                let test_kind = if builder.kind == Kind::Test {\n-                    TestKind::Test\n-                } else if builder.kind == Kind::Bench {\n-                    TestKind::Bench\n-                } else {\n-                    panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-                };\n+                let test_kind = builder.kind.into();\n \n                 builder.ensure(CrateLibrustc {\n                     compiler,\n@@ -1394,13 +1402,7 @@ impl Step for CrateNotDefault {\n         let builder = run.builder;\n         let compiler = builder.compiler(builder.top_stage, run.host);\n \n-        let test_kind = if builder.kind == Kind::Test {\n-            TestKind::Test\n-        } else if builder.kind == Kind::Bench {\n-            TestKind::Bench\n-        } else {\n-            panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-        };\n+        let test_kind = builder.kind.into();\n \n         builder.ensure(CrateNotDefault {\n             compiler,\n@@ -1461,13 +1463,7 @@ impl Step for Crate {\n         let compiler = builder.compiler(builder.top_stage, run.host);\n \n         let make = |mode: Mode, krate: &CargoCrate| {\n-            let test_kind = if builder.kind == Kind::Test {\n-                TestKind::Test\n-            } else if builder.kind == Kind::Bench {\n-                TestKind::Bench\n-            } else {\n-                panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-            };\n+            let test_kind = builder.kind.into();\n \n             builder.ensure(Crate {\n                 compiler,\n@@ -1625,13 +1621,7 @@ impl Step for CrateRustdoc {\n     fn make_run(run: RunConfig) {\n         let builder = run.builder;\n \n-        let test_kind = if builder.kind == Kind::Test {\n-            TestKind::Test\n-        } else if builder.kind == Kind::Bench {\n-            TestKind::Bench\n-        } else {\n-            panic!(\"unexpected builder.kind in crate: {:?}\", builder.kind);\n-        };\n+        let test_kind = builder.kind.into();\n \n         builder.ensure(CrateRustdoc {\n             host: run.host,"}, {"sha": "7dabb1bddea77e1877837d4bdcba726c261bd477", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -140,13 +140,9 @@ check that the test compiles successfully.\n ### Editing and updating the reference files\n \n If you have changed the compiler's output intentionally, or you are\n-making a new test, you can use the script `ui/update-references.sh` to\n-update the references. When you run the test framework, it will report\n-various errors: in those errors is a command you can use to run the\n-`ui/update-references.sh` script, which will then copy over the files\n-from the build directory and use them as the new reference. You can\n-also just run `ui/update-all-references.sh`. In both cases, you can run\n-the script with `--help` to get a help message.\n+making a new test, you can pass `--bless` to the command you used to\n+run the tests. This will then copy over the files\n+from the build directory and use them as the new reference.\n \n ### Normalization\n "}, {"sha": "28403644a234af55a0ee3760042cd9a711d01f3e", "filename": "src/test/ui/E0508.ast.nll.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.ast.nll.stderr?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -0,0 +1,9 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^ cannot move out of here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "5878b795b771ca30432e1160020474a08058bf18", "filename": "src/test/ui/E0508.ast.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.ast.stderr?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -0,0 +1,12 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^\n+   |                  |\n+   |                  cannot move out of here\n+   |                  help: consider using a reference instead: `&array[0]`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "28403644a234af55a0ee3760042cd9a711d01f3e", "filename": "src/test/ui/E0508.mir.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.mir.stderr?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -0,0 +1,9 @@\n+error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n+  --> $DIR/E0508.rs:18:18\n+   |\n+LL |     let _value = array[0];  //[ast]~ ERROR [E0508]\n+   |                  ^^^^^^^^ cannot move out of here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0508`."}, {"sha": "0c3dce6b0346a78950348aa5acfd47d733ee0ccc", "filename": "src/test/ui/E0508.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftest%2Fui%2FE0508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// revisions: ast mir\n+//[mir]compile-flags: -Z borrowck=mir\n+\n+struct NonCopy;\n+\n+fn main() {\n+    let array = [NonCopy; 1];\n+    let _value = array[0];  //[ast]~ ERROR [E0508]\n+                            //[mir]~^ ERROR [E0508]\n+}"}, {"sha": "b2ce5ce52f719ef2c073f83e946e3370150cecba", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -118,6 +118,9 @@ impl CompareMode {\n \n #[derive(Clone)]\n pub struct Config {\n+    /// Whether to overwrite stderr/stdout files instead of complaining about changes in output\n+    pub bless: bool,\n+\n     /// The library paths required for running the compiler\n     pub compile_lib_path: PathBuf,\n "}, {"sha": "2bfc1ece09590687d7df1001a544b861cbccad22", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -166,6 +166,11 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"FLAGS\",\n         )\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n+        .optflag(\n+            \"\",\n+            \"bless\",\n+            \"overwrite stderr/stdout files instead of complaining about a mismatch\",\n+        )\n         .optflag(\n             \"\",\n             \"quiet\",\n@@ -290,6 +295,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n     let src_base = opt_path(matches, \"src-base\");\n     let run_ignored = matches.opt_present(\"ignored\");\n     Config {\n+        bless: matches.opt_present(\"bless\"),\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n         rustc_path: opt_path(matches, \"rustc-path\"),"}, {"sha": "49d3dec0a58b29e23bcd379174d212d4b9ec5137", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 62, "deletions": 34, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f83e4d74076c4ac82cde6abe6abe54a946e7feb8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f83e4d74076c4ac82cde6abe6abe54a946e7feb8", "patch": "@@ -2596,15 +2596,13 @@ impl<'test> TestCx<'test> {\n         }\n \n         if errors > 0 {\n-            println!(\"To update references, run this command from build directory:\");\n+            println!(\"To update references, rerun the tests and pass the `--bless` flag\");\n             let relative_path_to_file = self.testpaths\n                 .relative_dir\n                 .join(self.testpaths.file.file_name().unwrap());\n             println!(\n-                \"{}/update-references.sh '{}' '{}'\",\n-                self.config.src_base.display(),\n-                self.config.build_base.display(),\n-                relative_path_to_file.display()\n+                \"To only update this specific test, also pass `--test-args {}`\",\n+                relative_path_to_file.display(),\n             );\n             self.fatal_proc_rec(\n                 &format!(\"{} errors occurred comparing output.\", errors),\n@@ -2926,29 +2924,31 @@ impl<'test> TestCx<'test> {\n             return 0;\n         }\n \n-        if expected.is_empty() {\n-            println!(\"normalized {}:\\n{}\\n\", kind, actual);\n-        } else {\n-            println!(\"diff of {}:\\n\", kind);\n-            let diff_results = make_diff(expected, actual, 3);\n-            for result in diff_results {\n-                let mut line_number = result.line_number;\n-                for line in result.lines {\n-                    match line {\n-                        DiffLine::Expected(e) => {\n-                            println!(\"-\\t{}\", e);\n-                            line_number += 1;\n-                        }\n-                        DiffLine::Context(c) => {\n-                            println!(\"{}\\t{}\", line_number, c);\n-                            line_number += 1;\n-                        }\n-                        DiffLine::Resulting(r) => {\n-                            println!(\"+\\t{}\", r);\n+        if !self.config.bless {\n+            if expected.is_empty() {\n+                println!(\"normalized {}:\\n{}\\n\", kind, actual);\n+            } else {\n+                println!(\"diff of {}:\\n\", kind);\n+                let diff_results = make_diff(expected, actual, 3);\n+                for result in diff_results {\n+                    let mut line_number = result.line_number;\n+                    for line in result.lines {\n+                        match line {\n+                            DiffLine::Expected(e) => {\n+                                println!(\"-\\t{}\", e);\n+                                line_number += 1;\n+                            }\n+                            DiffLine::Context(c) => {\n+                                println!(\"{}\\t{}\", line_number, c);\n+                                line_number += 1;\n+                            }\n+                            DiffLine::Resulting(r) => {\n+                                println!(\"+\\t{}\", r);\n+                            }\n                         }\n                     }\n+                    println!(\"\");\n                 }\n-                println!(\"\");\n             }\n         }\n \n@@ -2958,19 +2958,47 @@ impl<'test> TestCx<'test> {\n             .with_extra_extension(mode)\n             .with_extra_extension(kind);\n \n-        match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n-            Ok(()) => {}\n-            Err(e) => self.fatal(&format!(\n-                \"failed to write {} to `{}`: {}\",\n+        let mut files = vec![output_file];\n+        if self.config.bless {\n+            files.push(expected_output_path(\n+                self.testpaths,\n+                self.revision,\n+                &self.config.compare_mode,\n                 kind,\n-                output_file.display(),\n-                e\n-            )),\n+            ));\n+        }\n+\n+        for output_file in &files {\n+            if actual.is_empty() {\n+                if let Err(e) = ::std::fs::remove_file(output_file) {\n+                    self.fatal(&format!(\n+                        \"failed to delete `{}`: {}\",\n+                        output_file.display(),\n+                        e,\n+                    ));\n+                }\n+            } else {\n+                match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n+                    Ok(()) => {}\n+                    Err(e) => self.fatal(&format!(\n+                        \"failed to write {} to `{}`: {}\",\n+                        kind,\n+                        output_file.display(),\n+                        e\n+                    )),\n+                }\n+            }\n         }\n \n         println!(\"\\nThe actual {0} differed from the expected {0}.\", kind);\n-        println!(\"Actual {} saved to {}\", kind, output_file.display());\n-        1\n+        for output_file in files {\n+            println!(\"Actual {} saved to {}\", kind, output_file.display());\n+        }\n+        if self.config.bless {\n+            0\n+        } else {\n+            1\n+        }\n     }\n \n     fn create_stamp(&self) {"}]}