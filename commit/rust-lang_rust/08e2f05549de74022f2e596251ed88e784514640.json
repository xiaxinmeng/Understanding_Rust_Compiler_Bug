{"sha": "08e2f05549de74022f2e596251ed88e784514640", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4ZTJmMDU1NDlkZTc0MDIyZjJlNTk2MjUxZWQ4OGU3ODQ1MTQ2NDA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T07:25:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-21T07:30:40Z"}, "message": "Remove `InternedString`.\n\nBy using `LocalInternedString` instead for the few remaining uses.", "tree": {"sha": "c8dfd6c3b05dba2a2cc468a8d0b74d3b1481821b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8dfd6c3b05dba2a2cc468a8d0b74d3b1481821b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/08e2f05549de74022f2e596251ed88e784514640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/08e2f05549de74022f2e596251ed88e784514640", "html_url": "https://github.com/rust-lang/rust/commit/08e2f05549de74022f2e596251ed88e784514640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/08e2f05549de74022f2e596251ed88e784514640/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2da7a9c0d943e694eef17c0b47e87cbcde03a957", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da7a9c0d943e694eef17c0b47e87cbcde03a957", "html_url": "https://github.com/rust-lang/rust/commit/2da7a9c0d943e694eef17c0b47e87cbcde03a957"}], "stats": {"total": 144, "additions": 17, "deletions": 127}, "files": [{"sha": "307dbe7dab080a4aa6348b0dcb75d9b059205d53", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/08e2f05549de74022f2e596251ed88e784514640/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e2f05549de74022f2e596251ed88e784514640/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=08e2f05549de74022f2e596251ed88e784514640", "patch": "@@ -186,13 +186,13 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             });\n \n         let mut upstream_crates: Vec<_> = cstore.crates_untracked().iter().map(|&cnum| {\n-            let name = cstore.crate_name_untracked(cnum).as_interned_str();\n+            let name = cstore.crate_name_untracked(cnum);\n             let disambiguator = cstore.crate_disambiguator_untracked(cnum).to_fingerprint();\n             let hash = cstore.crate_hash_untracked(cnum);\n             (name, disambiguator, hash)\n         }).collect();\n \n-        upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name, dis));\n+        upstream_crates.sort_unstable_by_key(|&(name, dis, _)| (name.as_str(), dis));\n \n         // We hash the final, remapped names of all local source files so we\n         // don't have to include the path prefix remapping commandline args."}, {"sha": "dc1f6fd3131bd61dc2ec486baab6b1fdfca852bd", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/08e2f05549de74022f2e596251ed88e784514640/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e2f05549de74022f2e596251ed88e784514640/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=08e2f05549de74022f2e596251ed88e784514640", "patch": "@@ -9,7 +9,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax::tokenstream;\n use syntax_pos::SourceFile;\n \n@@ -18,20 +18,21 @@ use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey, StableHasher};\n \n-impl<'a> HashStable<StableHashingContext<'a>> for InternedString {\n+impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        self.with(|s| s.hash_stable(hcx, hasher))\n+        let str = self as &str;\n+        str.hash_stable(hcx, hasher)\n     }\n }\n \n-impl<'a> ToStableHashKey<StableHashingContext<'a>> for InternedString {\n-    type KeyType = InternedString;\n+impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n+    type KeyType = LocalInternedString;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> InternedString {\n+                          -> LocalInternedString {\n         self.clone()\n     }\n }\n@@ -44,13 +45,13 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n }\n \n impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n-    type KeyType = InternedString;\n+    type KeyType = LocalInternedString;\n \n     #[inline]\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n-                          -> InternedString {\n-        self.as_interned_str()\n+                          -> LocalInternedString {\n+        self.as_str()\n     }\n }\n "}, {"sha": "4b947c5b857ccf2f2815a2fa81397a1caa3acab0", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 115, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/08e2f05549de74022f2e596251ed88e784514640/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e2f05549de74022f2e596251ed88e784514640/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=08e2f05549de74022f2e596251ed88e784514640", "patch": "@@ -9,7 +9,7 @@ use rustc_macros::symbols;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_serialize::{UseSpecializedDecodable, UseSpecializedEncodable};\n \n-use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n+use std::cmp::{PartialEq, PartialOrd, Ord};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n use std::str;\n@@ -766,11 +766,6 @@ impl Ident {\n         Ident::with_dummy_span(kw::Invalid)\n     }\n \n-    /// Maps an interned string to an identifier with an empty syntax context.\n-    pub fn from_interned_str(string: InternedString) -> Ident {\n-        Ident::with_dummy_span(string.as_symbol())\n-    }\n-\n     /// Maps a string to an identifier with a dummy span.\n     pub fn from_str(string: &str) -> Ident {\n         Ident::with_dummy_span(Symbol::intern(string))\n@@ -813,11 +808,6 @@ impl Ident {\n     pub fn as_str(self) -> LocalInternedString {\n         self.name.as_str()\n     }\n-\n-    /// Convert the name to an `InternedString`.\n-    pub fn as_interned_str(self) -> InternedString {\n-        self.name.as_interned_str()\n-    }\n }\n \n impl PartialEq for Ident {\n@@ -903,15 +893,6 @@ impl Symbol {\n         })\n     }\n \n-    /// Access two symbols' chars. This is a slowish operation because it\n-    /// requires locking the symbol interner, but it is faster than calling\n-    /// `with()` twice.\n-    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: Symbol, f: F) -> R {\n-        with_interner(|interner| {\n-            f(interner.get(self), interner.get(other))\n-        })\n-    }\n-\n     /// Convert to a `LocalInternedString`. This is a slowish operation because\n     /// it requires locking the symbol interner.\n     pub fn as_str(self) -> LocalInternedString {\n@@ -922,11 +903,6 @@ impl Symbol {\n         })\n     }\n \n-    /// Convert to an `InternedString`.\n-    pub fn as_interned_str(self) -> InternedString {\n-        InternedString { symbol: self }\n-    }\n-\n     pub fn as_u32(self) -> u32 {\n         self.0.as_u32()\n     }\n@@ -1105,9 +1081,9 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n }\n \n-/// An alternative to `Symbol` and `InternedString`, useful when the chars\n-/// within the symbol need to be accessed. It deliberately has limited\n-/// functionality and should only be used for temporary values.\n+/// An alternative to `Symbol`, useful when the chars within the symbol need to\n+/// be accessed. It deliberately has limited functionality and should only be\n+/// used for temporary values.\n ///\n /// Because the interner outlives any thread which uses this type, we can\n /// safely treat `string` which points to interner data, as an immortal string,\n@@ -1116,7 +1092,7 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n // FIXME: ensure that the interner outlives any thread which uses\n // `LocalInternedString`, by creating a new thread right after constructing the\n // interner.\n-#[derive(Eq, PartialOrd, Ord)]\n+#[derive(Clone, Eq, PartialOrd, Ord)]\n pub struct LocalInternedString {\n     string: &'static str,\n }\n@@ -1157,89 +1133,3 @@ impl fmt::Display for LocalInternedString {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n-\n-/// An alternative to `Symbol` that is focused on string contents.\n-///\n-/// Its implementations of `Hash`, `PartialOrd` and `Ord` work with the\n-/// string chars rather than the symbol integer. This is useful when hash\n-/// stability is required across compile sessions, or a guaranteed sort\n-/// ordering is required.\n-#[derive(Clone, Copy, PartialEq, Eq)]\n-pub struct InternedString {\n-    symbol: Symbol,\n-}\n-\n-impl InternedString {\n-    /// Maps a string to its interned representation.\n-    pub fn intern(string: &str) -> Self {\n-        InternedString {\n-            symbol: Symbol::intern(string)\n-        }\n-    }\n-\n-    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n-        self.symbol.with(f)\n-    }\n-\n-    fn with2<F: FnOnce(&str, &str) -> R, R>(self, other: &InternedString, f: F) -> R {\n-        self.symbol.with2(other.symbol, f)\n-    }\n-\n-    pub fn as_symbol(self) -> Symbol {\n-        self.symbol\n-    }\n-\n-    /// Convert to a `LocalInternedString`. This is a slowish operation because it\n-    /// requires locking the symbol interner.\n-    pub fn as_str(self) -> LocalInternedString {\n-        self.symbol.as_str()\n-    }\n-}\n-\n-impl Hash for InternedString {\n-    fn hash<H: Hasher>(&self, state: &mut H) {\n-        self.with(|str| str.hash(state))\n-    }\n-}\n-\n-impl PartialOrd<InternedString> for InternedString {\n-    fn partial_cmp(&self, other: &InternedString) -> Option<Ordering> {\n-        if self.symbol == other.symbol {\n-            return Some(Ordering::Equal);\n-        }\n-        self.with2(other, |self_str, other_str| self_str.partial_cmp(other_str))\n-    }\n-}\n-\n-impl Ord for InternedString {\n-    fn cmp(&self, other: &InternedString) -> Ordering {\n-        if self.symbol == other.symbol {\n-            return Ordering::Equal;\n-        }\n-        self.with2(other, |self_str, other_str| self_str.cmp(other_str))\n-    }\n-}\n-\n-impl fmt::Debug for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.with(|str| fmt::Debug::fmt(&str, f))\n-    }\n-}\n-\n-impl fmt::Display for InternedString {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        self.with(|str| fmt::Display::fmt(&str, f))\n-    }\n-}\n-\n-impl Decodable for InternedString {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> {\n-        Ok(InternedString::intern(&d.read_str()?))\n-    }\n-}\n-\n-impl Encodable for InternedString {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        self.with(|string| s.emit_str(string))\n-    }\n-}"}, {"sha": "79c98b780eb65ba1fb0904159379e5e71f7c9b63", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/08e2f05549de74022f2e596251ed88e784514640/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/08e2f05549de74022f2e596251ed88e784514640/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=08e2f05549de74022f2e596251ed88e784514640", "patch": "@@ -126,7 +126,6 @@ fn check(cache: &mut Cache,\n     // FIXME(#32129)\n     if file.ends_with(\"std/string/struct.String.html\") ||\n        file.ends_with(\"interpret/struct.ImmTy.html\") ||\n-       file.ends_with(\"symbol/struct.InternedString.html\") ||\n        file.ends_with(\"ast/struct.ThinVec.html\") ||\n        file.ends_with(\"util/struct.ThinVec.html\") ||\n        file.ends_with(\"layout/struct.TyLayout.html\") ||"}]}