{"sha": "8b214218730265f8f397615835f5158582835bef", "node_id": "C_kwDOAAsO6NoAKDhiMjE0MjE4NzMwMjY1ZjhmMzk3NjE1ODM1ZjUxNTg1ODI4MzViZWY", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-28T12:52:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-30T21:02:15Z"}, "message": "rustdoc: Track `macro_rules` scopes during early doc link resolution\n\nThis way links referring to `macro_rules` items are resolved correctly", "tree": {"sha": "664c5cd05062e7e3295c8d7313833739c8482f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/664c5cd05062e7e3295c8d7313833739c8482f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b214218730265f8f397615835f5158582835bef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b214218730265f8f397615835f5158582835bef", "html_url": "https://github.com/rust-lang/rust/commit/8b214218730265f8f397615835f5158582835bef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b214218730265f8f397615835f5158582835bef/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044e45c595551fb72c7aac149d653f016c9a08be", "url": "https://api.github.com/repos/rust-lang/rust/commits/044e45c595551fb72c7aac149d653f016c9a08be", "html_url": "https://github.com/rust-lang/rust/commit/044e45c595551fb72c7aac149d653f016c9a08be"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "f1e07de77f8745b4708ca082583ac71b820ca11f", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b214218730265f8f397615835f5158582835bef/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b214218730265f8f397615835f5158582835bef/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=8b214218730265f8f397615835f5158582835bef", "patch": "@@ -1267,13 +1267,15 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 self.insert_unused_macro(ident, def_id, item.id);\n             }\n             self.r.visibilities.insert(def_id, vis);\n-            self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(\n+            let scope = self.r.arenas.alloc_macro_rules_scope(MacroRulesScope::Binding(\n                 self.r.arenas.alloc_macro_rules_binding(MacroRulesBinding {\n                     parent_macro_rules_scope: parent_scope.macro_rules,\n                     binding,\n                     ident,\n                 }),\n-            ))\n+            ));\n+            self.r.macro_rules_scopes.insert(def_id, scope);\n+            scope\n         } else {\n             let module = parent_scope.module;\n             let vis = match item.kind {"}, {"sha": "c917ea5a08f8e9af3d6d01bbb89d34b8e9a1a759", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b214218730265f8f397615835f5158582835bef/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b214218730265f8f397615835f5158582835bef/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=8b214218730265f8f397615835f5158582835bef", "patch": "@@ -145,7 +145,7 @@ enum ScopeSet<'a> {\n pub struct ParentScope<'a> {\n     pub module: Module<'a>,\n     expansion: LocalExpnId,\n-    macro_rules: MacroRulesScopeRef<'a>,\n+    pub macro_rules: MacroRulesScopeRef<'a>,\n     derives: &'a [ast::Path],\n }\n \n@@ -990,6 +990,8 @@ pub struct Resolver<'a> {\n     /// `macro_rules` scopes *produced* by expanding the macro invocations,\n     /// include all the `macro_rules` items and other invocations generated by them.\n     output_macro_rules_scopes: FxHashMap<LocalExpnId, MacroRulesScopeRef<'a>>,\n+    /// `macro_rules` scopes produced by `macro_rules` item definitions.\n+    macro_rules_scopes: FxHashMap<LocalDefId, MacroRulesScopeRef<'a>>,\n     /// Helper attributes that are in scope for the given expansion.\n     helper_attrs: FxHashMap<LocalExpnId, Vec<Ident>>,\n     /// Ready or in-progress results of resolving paths inside the `#[derive(...)]` attribute\n@@ -1361,6 +1363,7 @@ impl<'a> Resolver<'a> {\n             non_macro_attr: Lrc::new(SyntaxExtension::non_macro_attr(session.edition())),\n             invocation_parent_scopes: Default::default(),\n             output_macro_rules_scopes: Default::default(),\n+            macro_rules_scopes: Default::default(),\n             helper_attrs: Default::default(),\n             derive_data: Default::default(),\n             local_macro_def_scopes: FxHashMap::default(),\n@@ -1919,6 +1922,11 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// For rustdoc.\n+    pub fn macro_rules_scope(&self, def_id: LocalDefId) -> MacroRulesScopeRef<'a> {\n+        *self.macro_rules_scopes.get(&def_id).expect(\"not a `macro_rules` item\")\n+    }\n+\n     /// Retrieves the span of the given `DefId` if `DefId` is in the local crate.\n     #[inline]\n     pub fn opt_span(&self, def_id: DefId) -> Option<Span> {"}, {"sha": "3858c1cb0561d3adb898958cbe824087ab68d29f", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8b214218730265f8f397615835f5158582835bef/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b214218730265f8f397615835f5158582835bef/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=8b214218730265f8f397615835f5158582835bef", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::{DefIdTree, Visibility};\n use rustc_resolve::{ParentScope, Resolver};\n use rustc_session::config::Externs;\n use rustc_session::Session;\n+use rustc_span::symbol::sym;\n use rustc_span::{Symbol, SyntaxContext};\n \n use std::collections::hash_map::Entry;\n@@ -216,6 +217,8 @@ impl<'ra> EarlyDocLinkResolver<'_, 'ra> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'ra>,\n     ) -> bool {\n+        // FIXME: This caching may be incorrect in case of multiple `macro_rules`\n+        // items with the same name in the same module.\n         self.doc_link_resolutions\n             .entry((Symbol::intern(path_str), ns, parent_scope.module.def_id()))\n             .or_insert_with_key(|(path, ns, _)| {\n@@ -307,18 +310,30 @@ impl Visitor<'_> for EarlyDocLinkResolver<'_, '_> {\n             let module_def_id = self.resolver.local_def_id(item.id).to_def_id();\n             let module = self.resolver.expect_module(module_def_id);\n             let old_module = mem::replace(&mut self.parent_scope.module, module);\n+            let old_macro_rules = self.parent_scope.macro_rules;\n             self.resolve_doc_links_local(&item.attrs); // Inner attribute scope\n             self.process_module_children_or_reexports(module_def_id);\n             visit::walk_item(self, item);\n+            if item\n+                .attrs\n+                .iter()\n+                .all(|attr| !attr.has_name(sym::macro_use) && !attr.has_name(sym::macro_escape))\n+            {\n+                self.parent_scope.macro_rules = old_macro_rules;\n+            }\n             self.parent_scope.module = old_module;\n         } else {\n-            match item.kind {\n+            match &item.kind {\n                 ItemKind::Trait(..) => {\n                     self.all_traits.push(self.resolver.local_def_id(item.id).to_def_id());\n                 }\n                 ItemKind::Impl(box ast::Impl { of_trait: Some(..), .. }) => {\n                     self.all_trait_impls.push(self.resolver.local_def_id(item.id).to_def_id());\n                 }\n+                ItemKind::MacroDef(macro_def) if macro_def.macro_rules => {\n+                    self.parent_scope.macro_rules =\n+                        self.resolver.macro_rules_scope(self.resolver.local_def_id(item.id));\n+                }\n                 _ => {}\n             }\n             visit::walk_item(self, item);\n@@ -345,6 +360,12 @@ impl Visitor<'_> for EarlyDocLinkResolver<'_, '_> {\n         visit::walk_field_def(self, field)\n     }\n \n+    fn visit_block(&mut self, block: &ast::Block) {\n+        let old_macro_rules = self.parent_scope.macro_rules;\n+        visit::walk_block(self, block);\n+        self.parent_scope.macro_rules = old_macro_rules;\n+    }\n+\n     // NOTE: if doc-comments are ever allowed on other nodes (e.g. function parameters),\n     // then this will have to implement other visitor methods too.\n }"}, {"sha": "84d63c20aa8b5cf35734acba64cb6385e4959721", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules-error.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8b214218730265f8f397615835f5158582835bef/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b214218730265f8f397615835f5158582835bef/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.rs?ref=8b214218730265f8f397615835f5158582835bef", "patch": "@@ -0,0 +1,27 @@\n+// `macro_rules` scopes are respected during doc link resolution.\n+\n+// compile-flags: --document-private-items\n+\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+mod no_escape {\n+    macro_rules! before_but_limited_to_module {\n+        () => {};\n+    }\n+}\n+\n+/// [before_but_limited_to_module] FIXME: This error should be reported\n+// ERROR unresolved link to `before_but_limited_to_module`\n+/// [after] FIXME: This error should be reported\n+// ERROR unresolved link to `after`\n+/// [str] FIXME: This error shouldn not be reported\n+//~^ ERROR `str` is both a builtin type and a macro\n+fn check() {}\n+\n+macro_rules! after {\n+    () => {};\n+}\n+\n+macro_rules! str {\n+    () => {};\n+}"}, {"sha": "4b984f4f6c01605c2f2dc63806155945ae4f4ec7", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules-error.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b214218730265f8f397615835f5158582835bef/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b214218730265f8f397615835f5158582835bef/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules-error.stderr?ref=8b214218730265f8f397615835f5158582835bef", "patch": "@@ -0,0 +1,22 @@\n+error: `str` is both a builtin type and a macro\n+  --> $DIR/macro-rules-error.rs:17:6\n+   |\n+LL | /// [str] FIXME: This error shouldn not be reported\n+   |      ^^^ ambiguous link\n+   |\n+note: the lint level is defined here\n+  --> $DIR/macro-rules-error.rs:5:9\n+   |\n+LL | #![deny(rustdoc::broken_intra_doc_links)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to link to the builtin type, prefix with `prim@`\n+   |\n+LL | /// [prim@str] FIXME: This error shouldn not be reported\n+   |      +++++\n+help: to link to the macro, add an exclamation mark\n+   |\n+LL | /// [str!] FIXME: This error shouldn not be reported\n+   |         +\n+\n+error: aborting due to previous error\n+"}, {"sha": "3aeb370ef6dc5084d244b2dad575b6d8c8b9ed86", "filename": "src/test/rustdoc-ui/intra-doc/macro-rules.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b214218730265f8f397615835f5158582835bef/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b214218730265f8f397615835f5158582835bef/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fmacro-rules.rs?ref=8b214218730265f8f397615835f5158582835bef", "patch": "@@ -7,3 +7,18 @@ macro_rules! foo {\n \n /// [foo!]\n pub fn baz() {}\n+\n+#[macro_use]\n+mod macros {\n+    macro_rules! escaping {\n+        () => {};\n+    }\n+}\n+\n+pub mod inner {\n+    /// [foo!]\n+    /// [escaping]\n+    pub fn baz() {\n+        foo!();\n+    }\n+}"}]}